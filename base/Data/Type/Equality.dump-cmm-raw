
==================== Raw Cmm ====================
2018-03-16 16:00:02.003227961 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:00:02.004864242 UTC

[section ""data" . Data.Type.Equality.$p1~_closure" {
     Data.Type.Equality.$p1~_closure:
         const Data.Type.Equality.$p1~_info;
 },
 Data.Type.Equality.$p1~_entry() //  [R2]
         { []
         }
     {offset
       c57cl: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$p1~_info" {
     Data.Type.Equality.$p1~_info:
         const Data.Type.Equality.$p1~_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.008683931 UTC

[section ""data" . Data.Type.Equality.testEquality_closure" {
     Data.Type.Equality.testEquality_closure:
         const Data.Type.Equality.testEquality_info;
 },
 Data.Type.Equality.testEquality_entry() //  [R2]
         { []
         }
     {offset
       c57cy: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.testEquality_info" {
     Data.Type.Equality.testEquality_info:
         const Data.Type.Equality.testEquality_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.012035604 UTC

[section ""data" . Data.Type.Equality.$WHRefl_closure" {
     Data.Type.Equality.$WHRefl_closure:
         const Data.Type.Equality.HRefl_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.014733273 UTC

[section ""data" . Data.Type.Equality.$WRefl_closure" {
     Data.Type.Equality.$WRefl_closure:
         const Data.Type.Equality.Refl_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.017376248 UTC

[section ""data" . Data.Type.Equality.$f~kab_$cp1~_closure" {
     Data.Type.Equality.$f~kab_$cp1~_closure:
         const Data.Type.Equality.$f~kab_$cp1~_info;
 },
 Data.Type.Equality.$f~kab_$cp1~_entry() //  [R2]
         { []
         }
     {offset
       c57cN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c57cO; else goto c57cP;
       c57cO: // global
           R2 = R2;
           R1 = Data.Type.Equality.$f~kab_$cp1~_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c57cP: // global
           I64[Sp - 16] = block_c57cL_info;
           _s568u::P64 = R2;
           R2 = R2;
           P64[Sp - 8] = _s568u::P64;
           Sp = Sp - 16;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$f~kab_$cp1~_info" {
     Data.Type.Equality.$f~kab_$cp1~_info:
         const Data.Type.Equality.$f~kab_$cp1~_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c57cL() //  []
         { []
         }
     {offset
       c57cL: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c57cL_info" {
     block_c57cL_info:
         const _c57cL;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.022705885 UTC

[section ""data" . Data.Type.Equality.$f~kab_closure" {
     Data.Type.Equality.$f~kab_closure:
         const Data.Type.Equality.$f~kab_info;
 },
 Data.Type.Equality.$f~kab_entry() //  [R2]
         { []
         }
     {offset
       c57d5: // global
           R2 = R2;
           call Data.Type.Equality.$f~kab_$cp1~_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$f~kab_info" {
     Data.Type.Equality.$f~kab_info:
         const Data.Type.Equality.$f~kab_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.025979834 UTC

[section ""data" . Data.Type.Equality.$fEnum:~:3_closure" {
     Data.Type.Equality.$fEnum:~:3_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.028978887 UTC

[section ""data" . Data.Type.Equality.$fEnum:~:_$cfromEnum_closure" {
     Data.Type.Equality.$fEnum:~:_$cfromEnum_closure:
         const Data.Type.Equality.$fEnum:~:_$cfromEnum_info;
 },
 Data.Type.Equality.$fEnum:~:_$cfromEnum_entry() //  [R2, R3]
         { []
         }
     {offset
       c57dm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c57dn; else goto c57do;
       c57dn: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fEnum:~:_$cfromEnum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c57do: // global
           I64[Sp - 16] = block_c57dh_info;
           R2 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fEnum:~:_$cfromEnum_info" {
     Data.Type.Equality.$fEnum:~:_$cfromEnum_info:
         const Data.Type.Equality.$fEnum:~:_$cfromEnum_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c57dh() //  []
         { []
         }
     {offset
       c57dh: // global
           _s568w::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c57dj_info;
           R1 = _s568w::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u57dt; else goto c57dk;
       u57dt: // global
           call _c57dj() args: 0, res: 0, upd: 0;
       c57dk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c57dh_info" {
     block_c57dh_info:
         const _c57dh;
         const 1;
         const 30;
 },
 _c57dj() //  []
         { []
         }
     {offset
       c57dj: // global
           R1 = Data.Type.Equality.$fEnum:~:3_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c57dj_info" {
     block_c57dj_info:
         const _c57dj;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.035698595 UTC

[section ""cstring" . lvl_r5689_bytes" {
     lvl_r5689_bytes:
         I8[] [68,97,116,97,46,84,121,112,101,46,69,113,117,97,108,105,116,121,46,116,111,69,110,117,109,58,32,98,97,100,32,97,114,103,117,109,101,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.038461936 UTC

[section ""data" . Data.Type.Equality.$fEnum:~:1_closure" {
     Data.Type.Equality.$fEnum:~:1_closure:
         const Data.Type.Equality.$fEnum:~:1_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Type.Equality.$fEnum:~:1_entry() //  [R1]
         { []
         }
     {offset
       c57dQ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c57dR; else goto c57dS;
       c57dR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c57dS: // global
           (_c57dL::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c57dL::I64 == 0) goto c57dN; else goto c57dM;
       c57dN: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c57dM: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c57dL::I64;
           I64[Sp - 24] = block_c57dO_info;
           R2 = lvl_r5689_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fEnum:~:1_info" {
     Data.Type.Equality.$fEnum:~:1_info:
         const Data.Type.Equality.$fEnum:~:1_entry;
         const 0;
         const 4294967317;
         const S56eO_srt;
 },
 _c57dO() //  [R1]
         { []
         }
     {offset
       c57dO: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c57dO_info" {
     block_c57dO_info:
         const _c57dO;
         const 0;
         const 4294967326;
         const S56eO_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.045084142 UTC

[section ""data" . Data.Type.Equality.$fEnum:~:_$ctoEnum_closure" {
     Data.Type.Equality.$fEnum:~:_$ctoEnum_closure:
         const Data.Type.Equality.$fEnum:~:_$ctoEnum_info;
         const 0;
 },
 Data.Type.Equality.$fEnum:~:_$ctoEnum_entry() //  [R2, R3]
         { []
         }
     {offset
       c57ef: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c57eg; else goto c57eh;
       c57eg: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fEnum:~:_$ctoEnum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c57eh: // global
           I64[Sp - 16] = block_c57ea_info;
           R2 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fEnum:~:_$ctoEnum_info" {
     Data.Type.Equality.$fEnum:~:_$ctoEnum_info:
         const Data.Type.Equality.$fEnum:~:_$ctoEnum_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S56eO_srt+8;
 },
 _c57ea() //  []
         { []
         }
     {offset
       c57ea: // global
           _s568A::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c57ec_info;
           R1 = _s568A::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u57eq; else goto c57ed;
       u57eq: // global
           call _c57ec(R1) args: 0, res: 0, upd: 0;
       c57ed: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c57ea_info" {
     block_c57ea_info:
         const _c57ea;
         const 1;
         const 4294967326;
         const S56eO_srt+8;
 },
 _c57ec() //  [R1]
         { []
         }
     {offset
       c57ec: // global
           if (I64[R1 + 7] == 0) goto c57ep; else goto c57eo;
       c57ep: // global
           R1 = Data.Type.Equality.$WRefl_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c57eo: // global
           R1 = Data.Type.Equality.$fEnum:~:1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c57ec_info" {
     block_c57ec_info:
         const _c57ec;
         const 0;
         const 4294967326;
         const S56eO_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.058151236 UTC

[section ""data" . Data.Type.Equality.$fEnum:~:_$csucc_closure" {
     Data.Type.Equality.$fEnum:~:_$csucc_closure:
         const Data.Type.Equality.$fEnum:~:_$csucc_info;
         const 0;
 },
 Data.Type.Equality.$fEnum:~:_$csucc_entry() //  [R2, R3]
         { []
         }
     {offset
       c57eN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c57eO; else goto c57eP;
       c57eO: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fEnum:~:_$csucc_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c57eP: // global
           I64[Sp - 16] = block_c57eJ_info;
           _s568E::P64 = R2;
           R2 = R2;
           P64[Sp - 8] = _s568E::P64;
           Sp = Sp - 16;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fEnum:~:_$csucc_info" {
     Data.Type.Equality.$fEnum:~:_$csucc_info:
         const Data.Type.Equality.$fEnum:~:_$csucc_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S56eO_srt+8;
 },
 _c57eJ() //  []
         { []
         }
     {offset
       c57eJ: // global
           _s568E::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c57eL_info;
           R2 = _s568E::P64;
           Sp = Sp + 8;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c57eJ_info" {
     block_c57eJ_info:
         const _c57eJ;
         const 1;
         const 4294967326;
         const S56eO_srt+8;
 },
 _c57eL() //  []
         { []
         }
     {offset
       c57eL: // global
           R1 = Data.Type.Equality.$fEnum:~:1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c57eL_info" {
     block_c57eL_info:
         const _c57eL;
         const 0;
         const 4294967326;
         const S56eO_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.071522843 UTC

[section ""data" . Data.Type.Equality.$w$cenumFromTo_closure" {
     Data.Type.Equality.$w$cenumFromTo_closure:
         const Data.Type.Equality.$w$cenumFromTo_info;
         const 0;
 },
 sat_s568P_entry() //  [R1]
         { []
         }
     {offset
       c57fp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c57fq; else goto c57fr;
       c57fq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c57fr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s568N::I64 = I64[R1 + 24];
           if (_s568N::I64 != 0) goto c57fn; else goto c57fo;
       c57fn: // global
           R2 = _s568N::I64 + 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_s568J_entry(R2, R1) args: 24, res: 0, upd: 24;
       c57fo: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s568P_info" {
     sat_s568P_info:
         const sat_s568P_entry;
         const 4294967297;
         const 4294967315;
         const S56eO_srt+8;
 },
 sat_s568M_entry() //  [R1]
         { []
         }
     {offset
       c57fC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c57fD; else goto c57fE;
       c57fD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c57fE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto c57fB; else goto c57fA;
       c57fB: // global
           R1 = Data.Type.Equality.$WRefl_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c57fA: // global
           R1 = Data.Type.Equality.$fEnum:~:1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s568M_info" {
     sat_s568M_info:
         const sat_s568M_entry;
         const 4294967296;
         const 4294967313;
         const S56eO_srt+8;
 },
 go_s568J_entry() //  [R1, R2]
         { []
         }
     {offset
       c57fG: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c57fK; else goto c57fJ;
       c57fK: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c57fJ: // global
           I64[Hp - 72] = sat_s568P_info;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s568M_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_s568J_info" {
     go_s568J_info:
         const go_s568J_entry;
         const 4294967296;
         const 4294967306;
         const 4294967300;
         const S56eO_srt+8;
 },
 Data.Type.Equality.$w$cenumFromTo_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c57fL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c57fM; else goto c57fN;
       c57fM: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$w$cenumFromTo_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c57fN: // global
           I64[Sp - 16] = block_c57f8_info;
           _s568G::P64 = R2;
           R2 = R2;
           P64[Sp - 8] = _s568G::P64;
           Sp = Sp - 16;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$w$cenumFromTo_info" {
     Data.Type.Equality.$w$cenumFromTo_info:
         const Data.Type.Equality.$w$cenumFromTo_entry;
         const 0;
         const 38654705678;
         const 12884901911;
         const S56eO_srt+8;
 },
 _c57f8() //  []
         { []
         }
     {offset
       c57f8: // global
           _s568G::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c57fa_info;
           R2 = _s568G::P64;
           Sp = Sp + 8;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c57f8_info" {
     block_c57f8_info:
         const _c57f8;
         const 1;
         const 4294967326;
         const S56eO_srt+8;
 },
 _c57fa() //  []
         { []
         }
     {offset
       c57fa: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c57fR; else goto c57fQ;
       c57fR: // global
           HpAlloc = 16;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c57fQ: // global
           I64[Hp - 8] = go_s568J_info;
           R2 = 0;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call go_s568J_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c57fa_info" {
     block_c57fa_info:
         const _c57fa;
         const 0;
         const 4294967326;
         const S56eO_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.092301181 UTC

[section ""data" . Data.Type.Equality.$fEnum:~:_$cenumFromTo_closure" {
     Data.Type.Equality.$fEnum:~:_$cenumFromTo_closure:
         const Data.Type.Equality.$fEnum:~:_$cenumFromTo_info;
         const 0;
 },
 Data.Type.Equality.$fEnum:~:_$cenumFromTo_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c57gr: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c57gv; else goto c57gw;
       c57gv: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fEnum:~:_$cenumFromTo_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c57gw: // global
           I64[Sp - 24] = block_c57go_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u57gE; else goto c57gp;
       u57gE: // global
           call _c57go(R1) args: 0, res: 0, upd: 0;
       c57gp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fEnum:~:_$cenumFromTo_info" {
     Data.Type.Equality.$fEnum:~:_$cenumFromTo_info:
         const Data.Type.Equality.$fEnum:~:_$cenumFromTo_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S56eO_srt+32;
 },
 _c57go() //  [R1]
         { []
         }
     {offset
       c57go: // global
           I64[Sp] = block_c57gu_info;
           _s568T::P64 = R1;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s568T::P64;
           if (R1 & 7 != 0) goto u57gD; else goto c57gy;
       u57gD: // global
           call _c57gu(R1) args: 0, res: 0, upd: 0;
       c57gy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c57go_info" {
     block_c57go_info:
         const _c57go;
         const 2;
         const 4294967326;
         const S56eO_srt+32;
 },
 _c57gu() //  [R1]
         { []
         }
     {offset
       c57gu: // global
           R4 = R1;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Type.Equality.$w$cenumFromTo_entry(R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c57gu_info" {
     block_c57gu_info:
         const _c57gu;
         const 2;
         const 4294967326;
         const S56eO_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.10398288 UTC

[section ""data" . Data.Type.Equality.$fEnum:~:2_closure" {
     Data.Type.Equality.$fEnum:~:2_closure:
         const Data.Type.Equality.$fEnum:~:2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Type.Equality.$fEnum:~:2_entry() //  [R1]
         { []
         }
     {offset
       c57gY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c57gZ; else goto c57h0;
       c57gZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c57h0: // global
           (_c57gV::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c57gV::I64 == 0) goto c57gX; else goto c57gW;
       c57gX: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c57gW: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c57gV::I64;
           R3 = 0;
           R2 = 0;
           Sp = Sp - 16;
           call GHC.Enum.efdInt_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fEnum:~:2_info" {
     Data.Type.Equality.$fEnum:~:2_info:
         const Data.Type.Equality.$fEnum:~:2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.110337394 UTC

[section ""data" . Data.Type.Equality.$w$cenumFromThen_closure" {
     Data.Type.Equality.$w$cenumFromThen_closure:
         const Data.Type.Equality.$w$cenumFromThen_info;
         const 0;
 },
 sat_s568Y_entry() //  [R1, R2]
         { []
         }
     {offset
       c57hl: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Type.Equality.$fEnum:~:_$ctoEnum_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s568Y_info" {
     sat_s568Y_info:
         const sat_s568Y_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S56eO_srt+16;
 },
 Data.Type.Equality.$w$cenumFromThen_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c57ho: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c57hp; else goto c57hq;
       c57hp: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$w$cenumFromThen_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c57hq: // global
           I64[Sp - 16] = block_c57hc_info;
           _s568V::P64 = R2;
           R2 = R2;
           P64[Sp - 8] = _s568V::P64;
           Sp = Sp - 16;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$w$cenumFromThen_info" {
     Data.Type.Equality.$w$cenumFromThen_info:
         const Data.Type.Equality.$w$cenumFromThen_entry;
         const 0;
         const 210453397518;
         const 12884901911;
         const S56eO_srt+16;
 },
 _c57hc() //  []
         { []
         }
     {offset
       c57hc: // global
           I64[Sp] = block_c57he_info;
           R2 = P64[Sp + 8];
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c57hc_info" {
     block_c57hc_info:
         const _c57hc;
         const 1;
         const 141733920798;
         const S56eO_srt+16;
 },
 _c57he() //  []
         { []
         }
     {offset
       c57he: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c57hu; else goto c57ht;
       c57hu: // global
           HpAlloc = 16;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c57ht: // global
           I64[Hp - 8] = sat_s568Y_info;
           P64[Hp] = P64[Sp + 8];
           R3 = Data.Type.Equality.$fEnum:~:2_closure;
           R2 = Hp - 7;
           Sp = Sp + 16;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c57he_info" {
     block_c57he_info:
         const _c57he;
         const 1;
         const 141733920798;
         const S56eO_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.120138809 UTC

[section ""data" . Data.Type.Equality.$fEnum:~:_$cenumFromThen_closure" {
     Data.Type.Equality.$fEnum:~:_$cenumFromThen_closure:
         const Data.Type.Equality.$fEnum:~:_$cenumFromThen_info;
         const 0;
 },
 Data.Type.Equality.$fEnum:~:_$cenumFromThen_entry() //  [R2, R3,
                                                          R4]
         { []
         }
     {offset
       c57hR: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c57hV; else goto c57hW;
       c57hV: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fEnum:~:_$cenumFromThen_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c57hW: // global
           I64[Sp - 24] = block_c57hO_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u57i4; else goto c57hP;
       u57i4: // global
           call _c57hO(R1) args: 0, res: 0, upd: 0;
       c57hP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fEnum:~:_$cenumFromThen_info" {
     Data.Type.Equality.$fEnum:~:_$cenumFromThen_info:
         const Data.Type.Equality.$fEnum:~:_$cenumFromThen_entry;
         const 0;
         const 21474836494;
         const 12884901911;
         const S56eO_srt+48;
 },
 _c57hO() //  [R1]
         { []
         }
     {offset
       c57hO: // global
           I64[Sp] = block_c57hU_info;
           _s5692::P64 = R1;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s5692::P64;
           if (R1 & 7 != 0) goto u57i3; else goto c57hY;
       u57i3: // global
           call _c57hU(R1) args: 0, res: 0, upd: 0;
       c57hY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c57hO_info" {
     block_c57hO_info:
         const _c57hO;
         const 2;
         const 4294967326;
         const S56eO_srt+48;
 },
 _c57hU() //  [R1]
         { []
         }
     {offset
       c57hU: // global
           R4 = R1;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Type.Equality.$w$cenumFromThen_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c57hU_info" {
     block_c57hU_info:
         const _c57hU;
         const 2;
         const 4294967326;
         const S56eO_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.13032773 UTC

[section ""data" . Data.Type.Equality.$w$cenumFrom_closure" {
     Data.Type.Equality.$w$cenumFrom_closure:
         const Data.Type.Equality.$w$cenumFrom_info;
         const 0;
 },
 sat_s569c_entry() //  [R1]
         { []
         }
     {offset
       c57iD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c57iE; else goto c57iF;
       c57iE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c57iF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s569a::I64 = I64[R1 + 24];
           if (_s569a::I64 != 9223372036854775807) goto c57iB; else goto c57iC;
       c57iB: // global
           R2 = _s569a::I64 + 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_s5696_entry(R2, R1) args: 24, res: 0, upd: 24;
       c57iC: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s569c_info" {
     sat_s569c_info:
         const sat_s569c_entry;
         const 4294967297;
         const 4294967315;
         const S56eO_srt+8;
 },
 sat_s5699_entry() //  [R1]
         { []
         }
     {offset
       c57iQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c57iR; else goto c57iS;
       c57iR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c57iS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto c57iP; else goto c57iO;
       c57iP: // global
           R1 = Data.Type.Equality.$WRefl_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c57iO: // global
           R1 = Data.Type.Equality.$fEnum:~:1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s5699_info" {
     sat_s5699_info:
         const sat_s5699_entry;
         const 4294967296;
         const 4294967313;
         const S56eO_srt+8;
 },
 go_s5696_entry() //  [R1, R2]
         { []
         }
     {offset
       c57iU: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c57iY; else goto c57iX;
       c57iY: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c57iX: // global
           I64[Hp - 72] = sat_s569c_info;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s5699_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_s5696_info" {
     go_s5696_info:
         const go_s5696_entry;
         const 4294967296;
         const 4294967306;
         const 4294967300;
         const S56eO_srt+8;
 },
 Data.Type.Equality.$w$cenumFrom_entry() //  [R2, R3]
         { []
         }
     {offset
       c57iZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c57j0; else goto c57j1;
       c57j0: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$w$cenumFrom_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c57j1: // global
           I64[Sp - 16] = block_c57im_info;
           _s5694::P64 = R2;
           R2 = R2;
           P64[Sp - 8] = _s5694::P64;
           Sp = Sp - 16;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$w$cenumFrom_info" {
     Data.Type.Equality.$w$cenumFrom_info:
         const Data.Type.Equality.$w$cenumFrom_entry;
         const 0;
         const 1103806595086;
         const 8589934607;
         const S56eO_srt+8;
 },
 _c57im() //  []
         { []
         }
     {offset
       c57im: // global
           _s5694::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c57io_info;
           R2 = _s5694::P64;
           Sp = Sp + 8;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c57im_info" {
     block_c57im_info:
         const _c57im;
         const 1;
         const 4294967326;
         const S56eO_srt+8;
 },
 _c57io() //  []
         { []
         }
     {offset
       c57io: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c57j5; else goto c57j4;
       c57j5: // global
           HpAlloc = 16;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c57j4: // global
           I64[Hp - 8] = go_s5696_info;
           R2 = 0;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call go_s5696_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c57io_info" {
     block_c57io_info:
         const _c57io;
         const 0;
         const 4294967326;
         const S56eO_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.144215872 UTC

[section ""data" . Data.Type.Equality.$fEnum:~:_$cenumFrom_closure" {
     Data.Type.Equality.$fEnum:~:_$cenumFrom_closure:
         const Data.Type.Equality.$fEnum:~:_$cenumFrom_info;
         const 0;
 },
 Data.Type.Equality.$fEnum:~:_$cenumFrom_entry() //  [R2, R3]
         { []
         }
     {offset
       c57jG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c57jH; else goto c57jI;
       c57jH: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fEnum:~:_$cenumFrom_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c57jI: // global
           I64[Sp - 16] = block_c57jD_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u57jM; else goto c57jE;
       u57jM: // global
           call _c57jD(R1) args: 0, res: 0, upd: 0;
       c57jE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fEnum:~:_$cenumFrom_info" {
     Data.Type.Equality.$fEnum:~:_$cenumFrom_info:
         const Data.Type.Equality.$fEnum:~:_$cenumFrom_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S56eO_srt+72;
 },
 _c57jD() //  [R1]
         { []
         }
     {offset
       c57jD: // global
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Type.Equality.$w$cenumFrom_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c57jD_info" {
     block_c57jD_info:
         const _c57jD;
         const 1;
         const 4294967326;
         const S56eO_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.154774943 UTC

[section ""data" . Data.Type.Equality.$w$cenumFromThenTo_closure" {
     Data.Type.Equality.$w$cenumFromThenTo_closure:
         const Data.Type.Equality.$w$cenumFromThenTo_info;
         const 0;
 },
 sat_s569p_entry() //  [R1]
         { []
         }
     {offset
       c57kk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c57kl; else goto c57km;
       c57kl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c57km: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s569k_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s569p_info" {
     sat_s569p_info:
         const sat_s569p_entry;
         const 4294967297;
         const 4294967315;
         const S56eO_srt+8;
 },
 sat_s569o_entry() //  [R1]
         { []
         }
     {offset
       c57kv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c57kw; else goto c57kx;
       c57kw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c57kx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto c57ku; else goto c57kt;
       c57ku: // global
           R1 = Data.Type.Equality.$WRefl_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c57kt: // global
           R1 = Data.Type.Equality.$fEnum:~:1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s569o_info" {
     sat_s569o_info:
         const sat_s569o_entry;
         const 4294967296;
         const 4294967313;
         const S56eO_srt+8;
 },
 sat_s569r_entry() //  [R1]
         { []
         }
     {offset
       c57kH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c57kI; else goto c57kJ;
       c57kI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c57kJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto c57kG; else goto c57kF;
       c57kG: // global
           R1 = Data.Type.Equality.$WRefl_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c57kF: // global
           R1 = Data.Type.Equality.$fEnum:~:1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s569r_info" {
     sat_s569r_info:
         const sat_s569r_entry;
         const 4294967296;
         const 4294967313;
         const S56eO_srt+8;
 },
 go_up_s569k_entry() //  [R1, R2]
         { []
         }
     {offset
       c57kN: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c57kR; else goto c57kQ;
       c57kR: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c57kQ: // global
           if (%MO_S_Le_W64(R2, 0)) goto c57kL; else goto c57kM;
       c57kL: // global
           I64[Hp - 72] = sat_s569p_info;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s569o_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c57kM: // global
           I64[Hp - 72] = sat_s569r_info;
           I64[Hp - 56] = R2;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c57kT::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c57kT::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_s569k_info" {
     go_up_s569k_info:
         const go_up_s569k_entry;
         const 4294967296;
         const 4294967306;
         const 4294967300;
         const S56eO_srt+8;
 },
 sat_s569s_entry() //  [R1]
         { []
         }
     {offset
       c57kU: // global
           _s569s::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c57kV; else goto c57kW;
       c57kW: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c57kY; else goto c57kX;
       c57kY: // global
           HpAlloc = 16;
           goto c57kV;
       c57kV: // global
           R1 = _s569s::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c57kX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s569s::P64;
           I64[Hp - 8] = go_up_s569k_info;
           R2 = 0;
           R1 = Hp - 7;
           Sp = Sp - 16;
           call go_up_s569k_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s569s_info" {
     sat_s569s_info:
         const sat_s569s_entry;
         const 0;
         const 4294967311;
         const S56eO_srt+8;
 },
 Data.Type.Equality.$w$cenumFromThenTo_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c57kZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c57l0; else goto c57l1;
       c57l0: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$w$cenumFromThenTo_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c57l1: // global
           I64[Sp - 16] = block_c57k0_info;
           _s569g::P64 = R2;
           R2 = R2;
           P64[Sp - 8] = _s569g::P64;
           Sp = Sp - 16;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$w$cenumFromThenTo_info" {
     Data.Type.Equality.$w$cenumFromThenTo_info:
         const Data.Type.Equality.$w$cenumFromThenTo_entry;
         const 0;
         const 4402341478414;
         const 17179869208;
         const S56eO_srt+8;
 },
 _c57k0() //  []
         { []
         }
     {offset
       c57k0: // global
           _s569g::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c57k2_info;
           R2 = _s569g::P64;
           Sp = Sp + 8;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c57k0_info" {
     block_c57k0_info:
         const _c57k0;
         const 1;
         const 4294967326;
         const S56eO_srt+8;
 },
 _c57k2() //  []
         { []
         }
     {offset
       c57k2: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c57l5; else goto c57l4;
       c57l5: // global
           HpAlloc = 16;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c57l4: // global
           I64[Hp - 8] = sat_s569s_info;
           R2 = Hp - 8;
           R1 = Data.Type.Equality.$WRefl_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c57k2_info" {
     block_c57k2_info:
         const _c57k2;
         const 0;
         const 4294967326;
         const S56eO_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.174275274 UTC

[section ""data" . Data.Type.Equality.$fEnum:~:_$cenumFromThenTo_closure" {
     Data.Type.Equality.$fEnum:~:_$cenumFromThenTo_closure:
         const Data.Type.Equality.$fEnum:~:_$cenumFromThenTo_info;
         const 0;
 },
 Data.Type.Equality.$fEnum:~:_$cenumFromThenTo_entry() //  [R2, R3,
                                                            R4, R5]
         { []
         }
     {offset
       c57lR: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c57m7; else goto c57m8;
       c57m7: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fEnum:~:_$cenumFromThenTo_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c57m8: // global
           I64[Sp - 32] = block_c57lO_info;
           R1 = R3;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u57mg; else goto c57lP;
       u57mg: // global
           call _c57lO(R1) args: 0, res: 0, upd: 0;
       c57lP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fEnum:~:_$cenumFromThenTo_info" {
     Data.Type.Equality.$fEnum:~:_$cenumFromThenTo_info:
         const Data.Type.Equality.$fEnum:~:_$cenumFromThenTo_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const S56eO_srt+88;
 },
 _c57lO() //  [R1]
         { []
         }
     {offset
       c57lO: // global
           I64[Sp] = block_c57lU_info;
           _s569x::P64 = R1;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s569x::P64;
           if (R1 & 7 != 0) goto u57mf; else goto c57lV;
       u57mf: // global
           call _c57lU(R1) args: 0, res: 0, upd: 0;
       c57lV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c57lO_info" {
     block_c57lO_info:
         const _c57lO;
         const 3;
         const 4294967326;
         const S56eO_srt+88;
 },
 _c57lU() //  [R1]
         { []
         }
     {offset
       c57lU: // global
           I64[Sp] = block_c57lZ_info;
           _s569y::P64 = R1;
           R1 = P64[Sp + 24];
           P64[Sp + 24] = _s569y::P64;
           if (R1 & 7 != 0) goto u57mh; else goto c57m0;
       u57mh: // global
           call _c57lZ(R1) args: 0, res: 0, upd: 0;
       c57m0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c57lU_info" {
     block_c57lU_info:
         const _c57lU;
         const 3;
         const 4294967326;
         const S56eO_srt+88;
 },
 _c57lZ() //  [R1]
         { []
         }
     {offset
       c57lZ: // global
           _s569y::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_c57m4_info;
           R5 = R1;
           R4 = _s569y::P64;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Type.Equality.$w$cenumFromThenTo_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c57lZ_info" {
     block_c57lZ_info:
         const _c57lZ;
         const 3;
         const 4294967326;
         const S56eO_srt+88;
 },
 _c57m4() //  [R1, R2]
         { []
         }
     {offset
       c57m4: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c57me; else goto c57md;
       c57me: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c57md: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c57m4_info" {
     block_c57m4_info:
         const _c57m4;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.189998298 UTC

[section ""data" . Data.Type.Equality.$fEnum:~:_closure" {
     Data.Type.Equality.$fEnum:~:_closure:
         const Data.Type.Equality.$fEnum:~:_info;
         const 0;
 },
 sat_s569L_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c57mM: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Type.Equality.$fEnum:~:_$cenumFromThenTo_entry(R5,
                                                                    R4,
                                                                    R3,
                                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s569L_info" {
     sat_s569L_info:
         const sat_s569L_entry;
         const 1;
         const 4294967305;
         const 12884901911;
         const S56eO_srt+96;
 },
 sat_s569K_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c57mU: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Type.Equality.$fEnum:~:_$cenumFromTo_entry(R4,
                                                                R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s569K_info" {
     sat_s569K_info:
         const sat_s569K_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S56eO_srt+40;
 },
 sat_s569J_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c57n2: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Type.Equality.$fEnum:~:_$cenumFromThen_entry(R4,
                                                                  R3,
                                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s569J_info" {
     sat_s569J_info:
         const sat_s569J_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S56eO_srt+64;
 },
 sat_s569I_entry() //  [R1, R2]
         { []
         }
     {offset
       c57na: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Type.Equality.$fEnum:~:_$cenumFrom_entry(R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s569I_info" {
     sat_s569I_info:
         const sat_s569I_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S56eO_srt+80;
 },
 sat_s569H_entry() //  [R1, R2]
         { []
         }
     {offset
       c57ni: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Type.Equality.$fEnum:~:_$cfromEnum_entry(R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s569H_info" {
     sat_s569H_info:
         const sat_s569H_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s569G_entry() //  [R1, R2]
         { []
         }
     {offset
       c57nq: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Type.Equality.$fEnum:~:_$ctoEnum_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s569G_info" {
     sat_s569G_info:
         const sat_s569G_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S56eO_srt+16;
 },
 sat_s569F_entry() //  [R1, R2]
         { []
         }
     {offset
       c57ny: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Type.Equality.$fEnum:~:_$csucc_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s569F_info" {
     sat_s569F_info:
         const sat_s569F_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S56eO_srt+24;
 },
 sat_s569E_entry() //  [R1, R2]
         { []
         }
     {offset
       c57nG: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Type.Equality.$fEnum:~:_$csucc_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s569E_info" {
     sat_s569E_info:
         const sat_s569E_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S56eO_srt+24;
 },
 Data.Type.Equality.$fEnum:~:_entry() //  [R2]
         { []
         }
     {offset
       c57nK: // global
           Hp = Hp + 200;
           if (Hp > HpLim) (likely: False) goto c57nO; else goto c57nN;
       c57nO: // global
           HpAlloc = 200;
           R2 = R2;
           R1 = Data.Type.Equality.$fEnum:~:_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c57nN: // global
           I64[Hp - 192] = sat_s569L_info;
           P64[Hp - 184] = R2;
           I64[Hp - 176] = sat_s569K_info;
           P64[Hp - 168] = R2;
           I64[Hp - 160] = sat_s569J_info;
           P64[Hp - 152] = R2;
           I64[Hp - 144] = sat_s569I_info;
           P64[Hp - 136] = R2;
           I64[Hp - 128] = sat_s569H_info;
           P64[Hp - 120] = R2;
           I64[Hp - 112] = sat_s569G_info;
           P64[Hp - 104] = R2;
           I64[Hp - 96] = sat_s569F_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_s569E_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = GHC.Enum.C:Enum_con_info;
           P64[Hp - 56] = Hp - 79;
           P64[Hp - 48] = Hp - 95;
           P64[Hp - 40] = Hp - 111;
           P64[Hp - 32] = Hp - 127;
           P64[Hp - 24] = Hp - 143;
           P64[Hp - 16] = Hp - 158;
           P64[Hp - 8] = Hp - 174;
           P64[Hp] = Hp - 189;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fEnum:~:_info" {
     Data.Type.Equality.$fEnum:~:_info:
         const Data.Type.Equality.$fEnum:~:_entry;
         const 0;
         const 14615773708302;
         const 4294967301;
         const S56eO_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.218421253 UTC

[section ""data" . Data.Type.Equality.$fEnum:~~:_$cfromEnum_closure" {
     Data.Type.Equality.$fEnum:~~:_$cfromEnum_closure:
         const Data.Type.Equality.$fEnum:~~:_$cfromEnum_info;
 },
 Data.Type.Equality.$fEnum:~~:_$cfromEnum_entry() //  [R2, R3]
         { []
         }
     {offset
       c57oz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c57oA; else goto c57oB;
       c57oA: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fEnum:~~:_$cfromEnum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c57oB: // global
           I64[Sp - 16] = block_c57ou_info;
           R2 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fEnum:~~:_$cfromEnum_info" {
     Data.Type.Equality.$fEnum:~~:_$cfromEnum_info:
         const Data.Type.Equality.$fEnum:~~:_$cfromEnum_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c57ou() //  []
         { []
         }
     {offset
       c57ou: // global
           _s569N::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c57ow_info;
           R1 = _s569N::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u57oG; else goto c57ox;
       u57oG: // global
           call _c57ow() args: 0, res: 0, upd: 0;
       c57ox: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c57ou_info" {
     block_c57ou_info:
         const _c57ou;
         const 1;
         const 30;
 },
 _c57ow() //  []
         { []
         }
     {offset
       c57ow: // global
           R1 = Data.Type.Equality.$fEnum:~:3_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c57ow_info" {
     block_c57ow_info:
         const _c57ow;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.230281581 UTC

[section ""data" . Data.Type.Equality.$fEnum:~~:1_closure" {
     Data.Type.Equality.$fEnum:~~:1_closure:
         const Data.Type.Equality.$fEnum:~~:1_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Type.Equality.$fEnum:~~:1_entry() //  [R1]
         { []
         }
     {offset
       c57p2: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c57p3; else goto c57p4;
       c57p3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c57p4: // global
           (_c57oX::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c57oX::I64 == 0) goto c57oZ; else goto c57oY;
       c57oZ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c57oY: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c57oX::I64;
           I64[Sp - 24] = block_c57p0_info;
           R2 = lvl_r5689_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fEnum:~~:1_info" {
     Data.Type.Equality.$fEnum:~~:1_info:
         const Data.Type.Equality.$fEnum:~~:1_entry;
         const 0;
         const 4294967317;
         const S56eO_srt;
 },
 _c57p0() //  [R1]
         { []
         }
     {offset
       c57p0: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c57p0_info" {
     block_c57p0_info:
         const _c57p0;
         const 0;
         const 4294967326;
         const S56eO_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.240383659 UTC

[section ""data" . Data.Type.Equality.$fEnum:~~:_$ctoEnum_closure" {
     Data.Type.Equality.$fEnum:~~:_$ctoEnum_closure:
         const Data.Type.Equality.$fEnum:~~:_$ctoEnum_info;
         const 0;
 },
 Data.Type.Equality.$fEnum:~~:_$ctoEnum_entry() //  [R2, R3]
         { []
         }
     {offset
       c57pr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c57ps; else goto c57pt;
       c57ps: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fEnum:~~:_$ctoEnum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c57pt: // global
           I64[Sp - 16] = block_c57pm_info;
           R2 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fEnum:~~:_$ctoEnum_info" {
     Data.Type.Equality.$fEnum:~~:_$ctoEnum_info:
         const Data.Type.Equality.$fEnum:~~:_$ctoEnum_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S56eO_srt+112;
 },
 _c57pm() //  []
         { []
         }
     {offset
       c57pm: // global
           _s569R::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c57po_info;
           R1 = _s569R::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u57pC; else goto c57pp;
       u57pC: // global
           call _c57po(R1) args: 0, res: 0, upd: 0;
       c57pp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c57pm_info" {
     block_c57pm_info:
         const _c57pm;
         const 1;
         const 4294967326;
         const S56eO_srt+112;
 },
 _c57po() //  [R1]
         { []
         }
     {offset
       c57po: // global
           if (I64[R1 + 7] == 0) goto c57pB; else goto c57pA;
       c57pB: // global
           R1 = Data.Type.Equality.$WHRefl_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c57pA: // global
           R1 = Data.Type.Equality.$fEnum:~~:1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c57po_info" {
     block_c57po_info:
         const _c57po;
         const 0;
         const 4294967326;
         const S56eO_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.253176746 UTC

[section ""data" . Data.Type.Equality.$fEnum:~~:_$csucc_closure" {
     Data.Type.Equality.$fEnum:~~:_$csucc_closure:
         const Data.Type.Equality.$fEnum:~~:_$csucc_info;
         const 0;
 },
 Data.Type.Equality.$fEnum:~~:_$csucc_entry() //  [R2, R3]
         { []
         }
     {offset
       c57pZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c57q0; else goto c57q1;
       c57q0: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fEnum:~~:_$csucc_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c57q1: // global
           I64[Sp - 16] = block_c57pV_info;
           _s569V::P64 = R2;
           R2 = R2;
           P64[Sp - 8] = _s569V::P64;
           Sp = Sp - 16;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fEnum:~~:_$csucc_info" {
     Data.Type.Equality.$fEnum:~~:_$csucc_info:
         const Data.Type.Equality.$fEnum:~~:_$csucc_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S56eO_srt+112;
 },
 _c57pV() //  []
         { []
         }
     {offset
       c57pV: // global
           _s569V::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c57pX_info;
           R2 = _s569V::P64;
           Sp = Sp + 8;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c57pV_info" {
     block_c57pV_info:
         const _c57pV;
         const 1;
         const 4294967326;
         const S56eO_srt+112;
 },
 _c57pX() //  []
         { []
         }
     {offset
       c57pX: // global
           R1 = Data.Type.Equality.$fEnum:~~:1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c57pX_info" {
     block_c57pX_info:
         const _c57pX;
         const 0;
         const 4294967326;
         const S56eO_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.269222885 UTC

[section ""data" . Data.Type.Equality.$w$cenumFromTo1_closure" {
     Data.Type.Equality.$w$cenumFromTo1_closure:
         const Data.Type.Equality.$w$cenumFromTo1_info;
         const 0;
 },
 sat_s56a6_entry() //  [R1]
         { []
         }
     {offset
       c57qB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c57qC; else goto c57qD;
       c57qC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c57qD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s56a4::I64 = I64[R1 + 24];
           if (_s56a4::I64 != 0) goto c57qz; else goto c57qA;
       c57qz: // global
           R2 = _s56a4::I64 + 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_s56a0_entry(R2, R1) args: 24, res: 0, upd: 24;
       c57qA: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s56a6_info" {
     sat_s56a6_info:
         const sat_s56a6_entry;
         const 4294967297;
         const 4294967315;
         const S56eO_srt+112;
 },
 sat_s56a3_entry() //  [R1]
         { []
         }
     {offset
       c57qO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c57qP; else goto c57qQ;
       c57qP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c57qQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto c57qN; else goto c57qM;
       c57qN: // global
           R1 = Data.Type.Equality.$WHRefl_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c57qM: // global
           R1 = Data.Type.Equality.$fEnum:~~:1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s56a3_info" {
     sat_s56a3_info:
         const sat_s56a3_entry;
         const 4294967296;
         const 4294967313;
         const S56eO_srt+112;
 },
 go_s56a0_entry() //  [R1, R2]
         { []
         }
     {offset
       c57qS: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c57qW; else goto c57qV;
       c57qW: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c57qV: // global
           I64[Hp - 72] = sat_s56a6_info;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s56a3_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_s56a0_info" {
     go_s56a0_info:
         const go_s56a0_entry;
         const 4294967296;
         const 4294967306;
         const 4294967300;
         const S56eO_srt+112;
 },
 Data.Type.Equality.$w$cenumFromTo1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c57qX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c57qY; else goto c57qZ;
       c57qY: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$w$cenumFromTo1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c57qZ: // global
           I64[Sp - 16] = block_c57qk_info;
           _s569X::P64 = R2;
           R2 = R2;
           P64[Sp - 8] = _s569X::P64;
           Sp = Sp - 16;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$w$cenumFromTo1_info" {
     Data.Type.Equality.$w$cenumFromTo1_info:
         const Data.Type.Equality.$w$cenumFromTo1_entry;
         const 0;
         const 38654705678;
         const 12884901911;
         const S56eO_srt+112;
 },
 _c57qk() //  []
         { []
         }
     {offset
       c57qk: // global
           _s569X::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c57qm_info;
           R2 = _s569X::P64;
           Sp = Sp + 8;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c57qk_info" {
     block_c57qk_info:
         const _c57qk;
         const 1;
         const 4294967326;
         const S56eO_srt+112;
 },
 _c57qm() //  []
         { []
         }
     {offset
       c57qm: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c57r3; else goto c57r2;
       c57r3: // global
           HpAlloc = 16;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c57r2: // global
           I64[Hp - 8] = go_s56a0_info;
           R2 = 0;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call go_s56a0_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c57qm_info" {
     block_c57qm_info:
         const _c57qm;
         const 0;
         const 4294967326;
         const S56eO_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.290960918 UTC

[section ""data" . Data.Type.Equality.$fEnum:~~:_$cenumFromTo_closure" {
     Data.Type.Equality.$fEnum:~~:_$cenumFromTo_closure:
         const Data.Type.Equality.$fEnum:~~:_$cenumFromTo_info;
         const 0;
 },
 Data.Type.Equality.$fEnum:~~:_$cenumFromTo_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c57rD: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c57rH; else goto c57rI;
       c57rH: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fEnum:~~:_$cenumFromTo_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c57rI: // global
           I64[Sp - 24] = block_c57rA_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u57rQ; else goto c57rB;
       u57rQ: // global
           call _c57rA(R1) args: 0, res: 0, upd: 0;
       c57rB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fEnum:~~:_$cenumFromTo_info" {
     Data.Type.Equality.$fEnum:~~:_$cenumFromTo_info:
         const Data.Type.Equality.$fEnum:~~:_$cenumFromTo_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S56eO_srt+136;
 },
 _c57rA() //  [R1]
         { []
         }
     {offset
       c57rA: // global
           I64[Sp] = block_c57rG_info;
           _s56aa::P64 = R1;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s56aa::P64;
           if (R1 & 7 != 0) goto u57rP; else goto c57rK;
       u57rP: // global
           call _c57rG(R1) args: 0, res: 0, upd: 0;
       c57rK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c57rA_info" {
     block_c57rA_info:
         const _c57rA;
         const 2;
         const 4294967326;
         const S56eO_srt+136;
 },
 _c57rG() //  [R1]
         { []
         }
     {offset
       c57rG: // global
           R4 = R1;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Type.Equality.$w$cenumFromTo1_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c57rG_info" {
     block_c57rG_info:
         const _c57rG;
         const 2;
         const 4294967326;
         const S56eO_srt+136;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.310473354 UTC

[section ""data" . Data.Type.Equality.$w$cenumFromThen1_closure" {
     Data.Type.Equality.$w$cenumFromThen1_closure:
         const Data.Type.Equality.$w$cenumFromThen1_info;
         const 0;
 },
 sat_s56af_entry() //  [R1, R2]
         { []
         }
     {offset
       c57sh: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Type.Equality.$fEnum:~~:_$ctoEnum_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s56af_info" {
     sat_s56af_info:
         const sat_s56af_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S56eO_srt+120;
 },
 Data.Type.Equality.$w$cenumFromThen1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c57sk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c57sl; else goto c57sm;
       c57sl: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$w$cenumFromThen1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c57sm: // global
           I64[Sp - 16] = block_c57s8_info;
           _s56ac::P64 = R2;
           R2 = R2;
           P64[Sp - 8] = _s56ac::P64;
           Sp = Sp - 16;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$w$cenumFromThen1_info" {
     Data.Type.Equality.$w$cenumFromThen1_info:
         const Data.Type.Equality.$w$cenumFromThen1_entry;
         const 0;
         const 18695992639502;
         const 12884901911;
         const S56eO_srt+56;
 },
 _c57s8() //  []
         { []
         }
     {offset
       c57s8: // global
           I64[Sp] = block_c57sa_info;
           R2 = P64[Sp + 8];
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c57s8_info" {
     block_c57s8_info:
         const _c57s8;
         const 1;
         const 1103806595102;
         const S56eO_srt+56;
 },
 _c57sa() //  []
         { []
         }
     {offset
       c57sa: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c57sq; else goto c57sp;
       c57sq: // global
           HpAlloc = 16;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c57sp: // global
           I64[Hp - 8] = sat_s56af_info;
           P64[Hp] = P64[Sp + 8];
           R3 = Data.Type.Equality.$fEnum:~:2_closure;
           R2 = Hp - 7;
           Sp = Sp + 16;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c57sa_info" {
     block_c57sa_info:
         const _c57sa;
         const 1;
         const 1103806595102;
         const S56eO_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.326094221 UTC

[section ""data" . Data.Type.Equality.$fEnum:~~:_$cenumFromThen_closure" {
     Data.Type.Equality.$fEnum:~~:_$cenumFromThen_closure:
         const Data.Type.Equality.$fEnum:~~:_$cenumFromThen_info;
         const 0;
 },
 Data.Type.Equality.$fEnum:~~:_$cenumFromThen_entry() //  [R2, R3,
                                                           R4]
         { []
         }
     {offset
       c57sN: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c57sR; else goto c57sS;
       c57sR: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fEnum:~~:_$cenumFromThen_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c57sS: // global
           I64[Sp - 24] = block_c57sK_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u57t0; else goto c57sL;
       u57t0: // global
           call _c57sK(R1) args: 0, res: 0, upd: 0;
       c57sL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fEnum:~~:_$cenumFromThen_info" {
     Data.Type.Equality.$fEnum:~~:_$cenumFromThen_info:
         const Data.Type.Equality.$fEnum:~~:_$cenumFromThen_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S56eO_srt+152;
 },
 _c57sK() //  [R1]
         { []
         }
     {offset
       c57sK: // global
           I64[Sp] = block_c57sQ_info;
           _s56aj::P64 = R1;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s56aj::P64;
           if (R1 & 7 != 0) goto u57sZ; else goto c57sU;
       u57sZ: // global
           call _c57sQ(R1) args: 0, res: 0, upd: 0;
       c57sU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c57sK_info" {
     block_c57sK_info:
         const _c57sK;
         const 2;
         const 4294967326;
         const S56eO_srt+152;
 },
 _c57sQ() //  [R1]
         { []
         }
     {offset
       c57sQ: // global
           R4 = R1;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Type.Equality.$w$cenumFromThen1_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c57sQ_info" {
     block_c57sQ_info:
         const _c57sQ;
         const 2;
         const 4294967326;
         const S56eO_srt+152;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.338739614 UTC

[section ""data" . Data.Type.Equality.$w$cenumFrom1_closure" {
     Data.Type.Equality.$w$cenumFrom1_closure:
         const Data.Type.Equality.$w$cenumFrom1_info;
         const 0;
 },
 sat_s56at_entry() //  [R1]
         { []
         }
     {offset
       c57tz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c57tA; else goto c57tB;
       c57tA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c57tB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s56ar::I64 = I64[R1 + 24];
           if (_s56ar::I64 != 9223372036854775807) goto c57tx; else goto c57ty;
       c57tx: // global
           R2 = _s56ar::I64 + 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_s56an_entry(R2, R1) args: 24, res: 0, upd: 24;
       c57ty: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s56at_info" {
     sat_s56at_info:
         const sat_s56at_entry;
         const 4294967297;
         const 4294967315;
         const S56eO_srt+112;
 },
 sat_s56aq_entry() //  [R1]
         { []
         }
     {offset
       c57tM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c57tN; else goto c57tO;
       c57tN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c57tO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto c57tL; else goto c57tK;
       c57tL: // global
           R1 = Data.Type.Equality.$WHRefl_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c57tK: // global
           R1 = Data.Type.Equality.$fEnum:~~:1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s56aq_info" {
     sat_s56aq_info:
         const sat_s56aq_entry;
         const 4294967296;
         const 4294967313;
         const S56eO_srt+112;
 },
 go_s56an_entry() //  [R1, R2]
         { []
         }
     {offset
       c57tQ: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c57tU; else goto c57tT;
       c57tU: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c57tT: // global
           I64[Hp - 72] = sat_s56at_info;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s56aq_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_s56an_info" {
     go_s56an_info:
         const go_s56an_entry;
         const 4294967296;
         const 4294967306;
         const 4294967300;
         const S56eO_srt+112;
 },
 Data.Type.Equality.$w$cenumFrom1_entry() //  [R2, R3]
         { []
         }
     {offset
       c57tV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c57tW; else goto c57tX;
       c57tW: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$w$cenumFrom1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c57tX: // global
           I64[Sp - 16] = block_c57ti_info;
           _s56al::P64 = R2;
           R2 = R2;
           P64[Sp - 8] = _s56al::P64;
           Sp = Sp - 16;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$w$cenumFrom1_info" {
     Data.Type.Equality.$w$cenumFrom1_info:
         const Data.Type.Equality.$w$cenumFrom1_entry;
         const 0;
         const 554050781198;
         const 8589934607;
         const S56eO_srt+112;
 },
 _c57ti() //  []
         { []
         }
     {offset
       c57ti: // global
           _s56al::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c57tk_info;
           R2 = _s56al::P64;
           Sp = Sp + 8;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c57ti_info" {
     block_c57ti_info:
         const _c57ti;
         const 1;
         const 4294967326;
         const S56eO_srt+112;
 },
 _c57tk() //  []
         { []
         }
     {offset
       c57tk: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c57u1; else goto c57u0;
       c57u1: // global
           HpAlloc = 16;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c57u0: // global
           I64[Hp - 8] = go_s56an_info;
           R2 = 0;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call go_s56an_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c57tk_info" {
     block_c57tk_info:
         const _c57tk;
         const 0;
         const 4294967326;
         const S56eO_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.35376895 UTC

[section ""data" . Data.Type.Equality.$fEnum:~~:_$cenumFrom_closure" {
     Data.Type.Equality.$fEnum:~~:_$cenumFrom_closure:
         const Data.Type.Equality.$fEnum:~~:_$cenumFrom_info;
         const 0;
 },
 Data.Type.Equality.$fEnum:~~:_$cenumFrom_entry() //  [R2, R3]
         { []
         }
     {offset
       c57uC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c57uD; else goto c57uE;
       c57uD: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fEnum:~~:_$cenumFrom_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c57uE: // global
           I64[Sp - 16] = block_c57uz_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u57uI; else goto c57uA;
       u57uI: // global
           call _c57uz(R1) args: 0, res: 0, upd: 0;
       c57uA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fEnum:~~:_$cenumFrom_info" {
     Data.Type.Equality.$fEnum:~~:_$cenumFrom_info:
         const Data.Type.Equality.$fEnum:~~:_$cenumFrom_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S56eO_srt+168;
 },
 _c57uz() //  [R1]
         { []
         }
     {offset
       c57uz: // global
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Type.Equality.$w$cenumFrom1_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c57uz_info" {
     block_c57uz_info:
         const _c57uz;
         const 1;
         const 4294967326;
         const S56eO_srt+168;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.362699004 UTC

[section ""data" . Data.Type.Equality.$w$cenumFromThenTo1_closure" {
     Data.Type.Equality.$w$cenumFromThenTo1_closure:
         const Data.Type.Equality.$w$cenumFromThenTo1_info;
         const 0;
 },
 sat_s56aG_entry() //  [R1]
         { []
         }
     {offset
       c57vg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c57vh; else goto c57vi;
       c57vh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c57vi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s56aB_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s56aG_info" {
     sat_s56aG_info:
         const sat_s56aG_entry;
         const 4294967297;
         const 4294967315;
         const S56eO_srt+112;
 },
 sat_s56aF_entry() //  [R1]
         { []
         }
     {offset
       c57vr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c57vs; else goto c57vt;
       c57vs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c57vt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto c57vq; else goto c57vp;
       c57vq: // global
           R1 = Data.Type.Equality.$WHRefl_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c57vp: // global
           R1 = Data.Type.Equality.$fEnum:~~:1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s56aF_info" {
     sat_s56aF_info:
         const sat_s56aF_entry;
         const 4294967296;
         const 4294967313;
         const S56eO_srt+112;
 },
 sat_s56aI_entry() //  [R1]
         { []
         }
     {offset
       c57vD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c57vE; else goto c57vF;
       c57vE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c57vF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto c57vC; else goto c57vB;
       c57vC: // global
           R1 = Data.Type.Equality.$WHRefl_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c57vB: // global
           R1 = Data.Type.Equality.$fEnum:~~:1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s56aI_info" {
     sat_s56aI_info:
         const sat_s56aI_entry;
         const 4294967296;
         const 4294967313;
         const S56eO_srt+112;
 },
 go_up_s56aB_entry() //  [R1, R2]
         { []
         }
     {offset
       c57vJ: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c57vN; else goto c57vM;
       c57vN: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c57vM: // global
           if (%MO_S_Le_W64(R2, 0)) goto c57vH; else goto c57vI;
       c57vH: // global
           I64[Hp - 72] = sat_s56aG_info;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s56aF_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c57vI: // global
           I64[Hp - 72] = sat_s56aI_info;
           I64[Hp - 56] = R2;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c57vP::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c57vP::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_s56aB_info" {
     go_up_s56aB_info:
         const go_up_s56aB_entry;
         const 4294967296;
         const 4294967306;
         const 4294967300;
         const S56eO_srt+112;
 },
 sat_s56aJ_entry() //  [R1]
         { []
         }
     {offset
       c57vQ: // global
           _s56aJ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c57vR; else goto c57vS;
       c57vS: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c57vU; else goto c57vT;
       c57vU: // global
           HpAlloc = 16;
           goto c57vR;
       c57vR: // global
           R1 = _s56aJ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c57vT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s56aJ::P64;
           I64[Hp - 8] = go_up_s56aB_info;
           R2 = 0;
           R1 = Hp - 7;
           Sp = Sp - 16;
           call go_up_s56aB_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s56aJ_info" {
     sat_s56aJ_info:
         const sat_s56aJ_entry;
         const 0;
         const 4294967311;
         const S56eO_srt+112;
 },
 Data.Type.Equality.$w$cenumFromThenTo1_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c57vV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c57vW; else goto c57vX;
       c57vW: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$w$cenumFromThenTo1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c57vX: // global
           I64[Sp - 16] = block_c57uW_info;
           _s56ax::P64 = R2;
           R2 = R2;
           P64[Sp - 8] = _s56ax::P64;
           Sp = Sp - 16;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$w$cenumFromThenTo1_info" {
     Data.Type.Equality.$w$cenumFromThenTo1_info:
         const Data.Type.Equality.$w$cenumFromThenTo1_entry;
         const 0;
         const 2203318222862;
         const 17179869208;
         const S56eO_srt+112;
 },
 _c57uW() //  []
         { []
         }
     {offset
       c57uW: // global
           _s56ax::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c57uY_info;
           R2 = _s56ax::P64;
           Sp = Sp + 8;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c57uW_info" {
     block_c57uW_info:
         const _c57uW;
         const 1;
         const 4294967326;
         const S56eO_srt+112;
 },
 _c57uY() //  []
         { []
         }
     {offset
       c57uY: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c57w1; else goto c57w0;
       c57w1: // global
           HpAlloc = 16;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c57w0: // global
           I64[Hp - 8] = sat_s56aJ_info;
           R2 = Hp - 8;
           R1 = Data.Type.Equality.$WHRefl_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c57uY_info" {
     block_c57uY_info:
         const _c57uY;
         const 0;
         const 4294967326;
         const S56eO_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.381875612 UTC

[section ""data" . Data.Type.Equality.$fEnum:~~:_$cenumFromThenTo_closure" {
     Data.Type.Equality.$fEnum:~~:_$cenumFromThenTo_closure:
         const Data.Type.Equality.$fEnum:~~:_$cenumFromThenTo_info;
         const 0;
 },
 Data.Type.Equality.$fEnum:~~:_$cenumFromThenTo_entry() //  [R2, R3,
                                                             R4, R5]
         { []
         }
     {offset
       c57wN: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c57x3; else goto c57x4;
       c57x3: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fEnum:~~:_$cenumFromThenTo_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c57x4: // global
           I64[Sp - 32] = block_c57wK_info;
           R1 = R3;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u57xc; else goto c57wL;
       u57xc: // global
           call _c57wK(R1) args: 0, res: 0, upd: 0;
       c57wL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fEnum:~~:_$cenumFromThenTo_info" {
     Data.Type.Equality.$fEnum:~~:_$cenumFromThenTo_info:
         const Data.Type.Equality.$fEnum:~~:_$cenumFromThenTo_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const S56eO_srt+184;
 },
 _c57wK() //  [R1]
         { []
         }
     {offset
       c57wK: // global
           I64[Sp] = block_c57wQ_info;
           _s56aO::P64 = R1;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s56aO::P64;
           if (R1 & 7 != 0) goto u57xb; else goto c57wR;
       u57xb: // global
           call _c57wQ(R1) args: 0, res: 0, upd: 0;
       c57wR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c57wK_info" {
     block_c57wK_info:
         const _c57wK;
         const 3;
         const 4294967326;
         const S56eO_srt+184;
 },
 _c57wQ() //  [R1]
         { []
         }
     {offset
       c57wQ: // global
           I64[Sp] = block_c57wV_info;
           _s56aP::P64 = R1;
           R1 = P64[Sp + 24];
           P64[Sp + 24] = _s56aP::P64;
           if (R1 & 7 != 0) goto u57xd; else goto c57wW;
       u57xd: // global
           call _c57wV(R1) args: 0, res: 0, upd: 0;
       c57wW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c57wQ_info" {
     block_c57wQ_info:
         const _c57wQ;
         const 3;
         const 4294967326;
         const S56eO_srt+184;
 },
 _c57wV() //  [R1]
         { []
         }
     {offset
       c57wV: // global
           _s56aP::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_c57x0_info;
           R5 = R1;
           R4 = _s56aP::P64;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Type.Equality.$w$cenumFromThenTo1_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c57wV_info" {
     block_c57wV_info:
         const _c57wV;
         const 3;
         const 4294967326;
         const S56eO_srt+184;
 },
 _c57x0() //  [R1, R2]
         { []
         }
     {offset
       c57x0: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c57xa; else goto c57x9;
       c57xa: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c57x9: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c57x0_info" {
     block_c57x0_info:
         const _c57x0;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.395800521 UTC

[section ""data" . Data.Type.Equality.$fEnum:~~:_closure" {
     Data.Type.Equality.$fEnum:~~:_closure:
         const Data.Type.Equality.$fEnum:~~:_info;
         const 0;
 },
 sat_s56b2_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c57xI: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Type.Equality.$fEnum:~~:_$cenumFromThenTo_entry(R5,
                                                                     R4,
                                                                     R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s56b2_info" {
     sat_s56b2_info:
         const sat_s56b2_entry;
         const 1;
         const 4294967305;
         const 12884901911;
         const S56eO_srt+192;
 },
 sat_s56b1_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c57xQ: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Type.Equality.$fEnum:~~:_$cenumFromTo_entry(R4,
                                                                 R3,
                                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s56b1_info" {
     sat_s56b1_info:
         const sat_s56b1_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S56eO_srt+144;
 },
 sat_s56b0_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c57xY: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Type.Equality.$fEnum:~~:_$cenumFromThen_entry(R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s56b0_info" {
     sat_s56b0_info:
         const sat_s56b0_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S56eO_srt+160;
 },
 sat_s56aZ_entry() //  [R1, R2]
         { []
         }
     {offset
       c57y6: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Type.Equality.$fEnum:~~:_$cenumFrom_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s56aZ_info" {
     sat_s56aZ_info:
         const sat_s56aZ_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S56eO_srt+176;
 },
 sat_s56aY_entry() //  [R1, R2]
         { []
         }
     {offset
       c57ye: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Type.Equality.$fEnum:~~:_$cfromEnum_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s56aY_info" {
     sat_s56aY_info:
         const sat_s56aY_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s56aX_entry() //  [R1, R2]
         { []
         }
     {offset
       c57ym: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Type.Equality.$fEnum:~~:_$ctoEnum_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s56aX_info" {
     sat_s56aX_info:
         const sat_s56aX_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S56eO_srt+120;
 },
 sat_s56aW_entry() //  [R1, R2]
         { []
         }
     {offset
       c57yu: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Type.Equality.$fEnum:~~:_$csucc_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s56aW_info" {
     sat_s56aW_info:
         const sat_s56aW_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S56eO_srt+128;
 },
 sat_s56aV_entry() //  [R1, R2]
         { []
         }
     {offset
       c57yC: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Type.Equality.$fEnum:~~:_$csucc_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s56aV_info" {
     sat_s56aV_info:
         const sat_s56aV_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S56eO_srt+128;
 },
 Data.Type.Equality.$fEnum:~~:_entry() //  [R2]
         { []
         }
     {offset
       c57yG: // global
           Hp = Hp + 200;
           if (Hp > HpLim) (likely: False) goto c57yK; else goto c57yJ;
       c57yK: // global
           HpAlloc = 200;
           R2 = R2;
           R1 = Data.Type.Equality.$fEnum:~~:_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c57yJ: // global
           I64[Hp - 192] = sat_s56b2_info;
           P64[Hp - 184] = R2;
           I64[Hp - 176] = sat_s56b1_info;
           P64[Hp - 168] = R2;
           I64[Hp - 160] = sat_s56b0_info;
           P64[Hp - 152] = R2;
           I64[Hp - 144] = sat_s56aZ_info;
           P64[Hp - 136] = R2;
           I64[Hp - 128] = sat_s56aY_info;
           P64[Hp - 120] = R2;
           I64[Hp - 112] = sat_s56aX_info;
           P64[Hp - 104] = R2;
           I64[Hp - 96] = sat_s56aW_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_s56aV_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = GHC.Enum.C:Enum_con_info;
           P64[Hp - 56] = Hp - 79;
           P64[Hp - 48] = Hp - 95;
           P64[Hp - 40] = Hp - 111;
           P64[Hp - 32] = Hp - 127;
           P64[Hp - 24] = Hp - 143;
           P64[Hp - 16] = Hp - 158;
           P64[Hp - 8] = Hp - 174;
           P64[Hp] = Hp - 189;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fEnum:~~:_info" {
     Data.Type.Equality.$fEnum:~~:_info:
         const Data.Type.Equality.$fEnum:~~:_entry;
         const 0;
         const 7331509174286;
         const 4294967301;
         const S56eO_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.411091593 UTC

[section ""data" . Data.Type.Equality.$fTestEqualityk:~:1_closure" {
     Data.Type.Equality.$fTestEqualityk:~:1_closure:
         const GHC.Base.Just_con_info;
         const Data.Type.Equality.$WRefl_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.414487812 UTC

[section ""data" . Data.Type.Equality.$fTestEqualityk:~:_$ctestEquality_closure" {
     Data.Type.Equality.$fTestEqualityk:~:_$ctestEquality_closure:
         const Data.Type.Equality.$fTestEqualityk:~:_$ctestEquality_info;
 },
 Data.Type.Equality.$fTestEqualityk:~:_$ctestEquality_entry() //  [R2,
                                                                   R3]
         { []
         }
     {offset
       c57zu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c57zy; else goto c57zz;
       c57zy: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fTestEqualityk:~:_$ctestEquality_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c57zz: // global
           I64[Sp - 16] = block_c57zr_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u57zH; else goto c57zs;
       u57zH: // global
           call _c57zr() args: 0, res: 0, upd: 0;
       c57zs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fTestEqualityk:~:_$ctestEquality_info" {
     Data.Type.Equality.$fTestEqualityk:~:_$ctestEquality_info:
         const Data.Type.Equality.$fTestEqualityk:~:_$ctestEquality_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c57zr() //  []
         { []
         }
     {offset
       c57zr: // global
           _s56b4::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c57zx_info;
           R1 = _s56b4::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u57zG; else goto c57zB;
       u57zG: // global
           call _c57zx() args: 0, res: 0, upd: 0;
       c57zB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c57zr_info" {
     block_c57zr_info:
         const _c57zr;
         const 1;
         const 30;
 },
 _c57zx() //  []
         { []
         }
     {offset
       c57zx: // global
           R1 = Data.Type.Equality.$fTestEqualityk:~:1_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c57zx_info" {
     block_c57zx_info:
         const _c57zx;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.422208694 UTC

[section ""data" . Data.Type.Equality.$fTestEqualityk:~:_closure" {
     Data.Type.Equality.$fTestEqualityk:~:_closure:
         const Data.Type.Equality.$fTestEqualityk:~:_info;
 },
 Data.Type.Equality.$fTestEqualityk:~:_entry() //  [R2, R3]
         { []
         }
     {offset
       c57A0: // global
           R3 = R3;
           R2 = R2;
           call Data.Type.Equality.$fTestEqualityk:~:_$ctestEquality_entry(R3,
                                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fTestEqualityk:~:_info" {
     Data.Type.Equality.$fTestEqualityk:~:_info:
         const Data.Type.Equality.$fTestEqualityk:~:_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.426454458 UTC

[section ""data" . Data.Type.Equality.$fTestEqualityk:~~:_$ctestEquality_closure" {
     Data.Type.Equality.$fTestEqualityk:~~:_$ctestEquality_closure:
         const Data.Type.Equality.$fTestEqualityk:~~:_$ctestEquality_info;
 },
 Data.Type.Equality.$fTestEqualityk:~~:_$ctestEquality_entry() //  [R2,
                                                                    R3]
         { []
         }
     {offset
       c57Ae: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c57Ai; else goto c57Aj;
       c57Ai: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fTestEqualityk:~~:_$ctestEquality_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c57Aj: // global
           I64[Sp - 16] = block_c57Ab_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u57Ar; else goto c57Ac;
       u57Ar: // global
           call _c57Ab() args: 0, res: 0, upd: 0;
       c57Ac: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fTestEqualityk:~~:_$ctestEquality_info" {
     Data.Type.Equality.$fTestEqualityk:~~:_$ctestEquality_info:
         const Data.Type.Equality.$fTestEqualityk:~~:_$ctestEquality_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c57Ab() //  []
         { []
         }
     {offset
       c57Ab: // global
           _s56b8::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c57Ah_info;
           R1 = _s56b8::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u57Aq; else goto c57Al;
       u57Aq: // global
           call _c57Ah() args: 0, res: 0, upd: 0;
       c57Al: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c57Ab_info" {
     block_c57Ab_info:
         const _c57Ab;
         const 1;
         const 30;
 },
 _c57Ah() //  []
         { []
         }
     {offset
       c57Ah: // global
           R1 = Data.Type.Equality.$fTestEqualityk:~:1_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c57Ah_info" {
     block_c57Ah_info:
         const _c57Ah;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.433435706 UTC

[section ""data" . Data.Type.Equality.$fTestEqualityk:~~:_closure" {
     Data.Type.Equality.$fTestEqualityk:~~:_closure:
         const Data.Type.Equality.$fTestEqualityk:~~:_info;
 },
 Data.Type.Equality.$fTestEqualityk:~~:_entry() //  [R2, R3]
         { []
         }
     {offset
       c57AK: // global
           R3 = R3;
           R2 = R2;
           call Data.Type.Equality.$fTestEqualityk:~~:_$ctestEquality_entry(R3,
                                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fTestEqualityk:~~:_info" {
     Data.Type.Equality.$fTestEqualityk:~~:_info:
         const Data.Type.Equality.$fTestEqualityk:~~:_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.437701768 UTC

[section ""data" . Data.Type.Equality.$fEq:~:_$c==_closure" {
     Data.Type.Equality.$fEq:~:_$c==_closure:
         const Data.Type.Equality.$fEq:~:_$c==_info;
 },
 Data.Type.Equality.$fEq:~:_$c==_entry() //  [R2, R3]
         { []
         }
     {offset
       c57AY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c57B2; else goto c57B3;
       c57B2: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fEq:~:_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c57B3: // global
           I64[Sp - 16] = block_c57AV_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u57Bb; else goto c57AW;
       u57Bb: // global
           call _c57AV() args: 0, res: 0, upd: 0;
       c57AW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fEq:~:_$c==_info" {
     Data.Type.Equality.$fEq:~:_$c==_info:
         const Data.Type.Equality.$fEq:~:_$c==_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c57AV() //  []
         { []
         }
     {offset
       c57AV: // global
           _s56bc::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c57B1_info;
           R1 = _s56bc::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u57Ba; else goto c57B5;
       u57Ba: // global
           call _c57B1() args: 0, res: 0, upd: 0;
       c57B5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c57AV_info" {
     block_c57AV_info:
         const _c57AV;
         const 1;
         const 30;
 },
 _c57B1() //  []
         { []
         }
     {offset
       c57B1: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c57B1_info" {
     block_c57B1_info:
         const _c57B1;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.445337643 UTC

[section ""data" . Data.Type.Equality.$fEq:~:_$c/=_closure" {
     Data.Type.Equality.$fEq:~:_$c/=_closure:
         const Data.Type.Equality.$fEq:~:_$c/=_info;
 },
 Data.Type.Equality.$fEq:~:_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       c57Bx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c57BB; else goto c57BC;
       c57BB: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fEq:~:_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c57BC: // global
           I64[Sp - 16] = block_c57Bu_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u57BK; else goto c57Bv;
       u57BK: // global
           call _c57Bu() args: 0, res: 0, upd: 0;
       c57Bv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fEq:~:_$c/=_info" {
     Data.Type.Equality.$fEq:~:_$c/=_info:
         const Data.Type.Equality.$fEq:~:_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c57Bu() //  []
         { []
         }
     {offset
       c57Bu: // global
           _s56bg::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c57BA_info;
           R1 = _s56bg::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u57BJ; else goto c57BE;
       u57BJ: // global
           call _c57BA() args: 0, res: 0, upd: 0;
       c57BE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c57Bu_info" {
     block_c57Bu_info:
         const _c57Bu;
         const 1;
         const 30;
 },
 _c57BA() //  []
         { []
         }
     {offset
       c57BA: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c57BA_info" {
     block_c57BA_info:
         const _c57BA;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.452688631 UTC

[section ""data" . Data.Type.Equality.$fEq:~:_closure" {
     Data.Type.Equality.$fEq:~:_closure:
         const GHC.Classes.C:Eq_con_info;
         const Data.Type.Equality.$fEq:~:_$c==_closure+2;
         const Data.Type.Equality.$fEq:~:_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.455266665 UTC

[section ""cstring" . Data.Type.Equality.$fRead:~:3_bytes" {
     Data.Type.Equality.$fRead:~:3_bytes:
         I8[] [82,101,102,108]
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.4577848 UTC

[section ""data" . Data.Type.Equality.$fRead:~:2_closure" {
     Data.Type.Equality.$fRead:~:2_closure:
         const Data.Type.Equality.$fRead:~:2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Type.Equality.$fRead:~:2_entry() //  [R1]
         { []
         }
     {offset
       c57C7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c57C8; else goto c57C9;
       c57C8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c57C9: // global
           (_c57C4::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c57C4::I64 == 0) goto c57C6; else goto c57C5;
       c57C6: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c57C5: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c57C4::I64;
           R2 = Data.Type.Equality.$fRead:~:3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fRead:~:2_info" {
     Data.Type.Equality.$fRead:~:2_info:
         const Data.Type.Equality.$fRead:~:2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.462522769 UTC

[section ""data" . Data.Type.Equality.$fShow:~:_$cshowsPrec_closure" {
     Data.Type.Equality.$fShow:~:_$cshowsPrec_closure:
         const Data.Type.Equality.$fShow:~:_$cshowsPrec_info;
         const 0;
 },
 Data.Type.Equality.$fShow:~:_$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c57Co: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c57Cp; else goto c57Cq;
       c57Cp: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fShow:~:_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c57Cq: // global
           I64[Sp - 16] = block_c57Cl_info;
           R1 = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u57Cu; else goto c57Cm;
       u57Cu: // global
           call _c57Cl() args: 0, res: 0, upd: 0;
       c57Cm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fShow:~:_$cshowsPrec_info" {
     Data.Type.Equality.$fShow:~:_$cshowsPrec_info:
         const Data.Type.Equality.$fShow:~:_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S56eO_srt+208;
 },
 _c57Cl() //  []
         { []
         }
     {offset
       c57Cl: // global
           R3 = P64[Sp + 8];
           R2 = Data.Type.Equality.$fRead:~:2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c57Cl_info" {
     block_c57Cl_info:
         const _c57Cl;
         const 1;
         const 4294967326;
         const S56eO_srt+208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.468543498 UTC

[section ""data" . Data.Type.Equality.$fShow:~:_$cshow_closure" {
     Data.Type.Equality.$fShow:~:_$cshow_closure:
         const Data.Type.Equality.$fShow:~:_$cshow_info;
         const 0;
 },
 Data.Type.Equality.$fShow:~:_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c57CL: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c57CM; else goto c57CN;
       c57CM: // global
           R2 = R2;
           R1 = Data.Type.Equality.$fShow:~:_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c57CN: // global
           I64[Sp - 8] = block_c57CI_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u57CR; else goto c57CJ;
       u57CR: // global
           call _c57CI() args: 0, res: 0, upd: 0;
       c57CJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fShow:~:_$cshow_info" {
     Data.Type.Equality.$fShow:~:_$cshow_info:
         const Data.Type.Equality.$fShow:~:_$cshow_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const S56eO_srt+208;
 },
 _c57CI() //  []
         { []
         }
     {offset
       c57CI: // global
           R1 = Data.Type.Equality.$fRead:~:2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c57CI_info" {
     block_c57CI_info:
         const _c57CI;
         const 0;
         const 4294967326;
         const S56eO_srt+208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.474522007 UTC

[section ""data" . Data.Type.Equality.$fShow:~:1_closure" {
     Data.Type.Equality.$fShow:~:1_closure:
         const Data.Type.Equality.$fShow:~:1_info;
         const 0;
 },
 Data.Type.Equality.$fShow:~:1_entry() //  [R2, R3]
         { []
         }
     {offset
       c57D9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c57Da; else goto c57Db;
       c57Da: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fShow:~:1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c57Db: // global
           I64[Sp - 16] = block_c57D6_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u57Df; else goto c57D7;
       u57Df: // global
           call _c57D6() args: 0, res: 0, upd: 0;
       c57D7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fShow:~:1_info" {
     Data.Type.Equality.$fShow:~:1_info:
         const Data.Type.Equality.$fShow:~:1_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const S56eO_srt+208;
 },
 _c57D6() //  []
         { []
         }
     {offset
       c57D6: // global
           R3 = P64[Sp + 8];
           R2 = Data.Type.Equality.$fRead:~:2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c57D6_info" {
     block_c57D6_info:
         const _c57D6;
         const 1;
         const 4294967326;
         const S56eO_srt+208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.480110978 UTC

[section ""data" . Data.Type.Equality.$fShow:~:_$cshowList_closure" {
     Data.Type.Equality.$fShow:~:_$cshowList_closure:
         const Data.Type.Equality.$fShow:~:_$cshowList_info;
         const 0;
 },
 Data.Type.Equality.$fShow:~:_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       c57Dt: // global
           R4 = R3;
           R3 = R2;
           R2 = Data.Type.Equality.$fShow:~:1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fShow:~:_$cshowList_info" {
     Data.Type.Equality.$fShow:~:_$cshowList_info:
         const Data.Type.Equality.$fShow:~:_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S56eO_srt+232;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.483342184 UTC

[section ""data" . Data.Type.Equality.$fShow:~:_closure" {
     Data.Type.Equality.$fShow:~:_closure:
         const GHC.Show.C:Show_con_info;
         const Data.Type.Equality.$fShow:~:_$cshowsPrec_closure+3;
         const Data.Type.Equality.$fShow:~:_$cshow_closure+1;
         const Data.Type.Equality.$fShow:~:_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.486978897 UTC

[section ""data" . Data.Type.Equality.$fOrd:~:_$c<_closure" {
     Data.Type.Equality.$fOrd:~:_$c<_closure:
         const Data.Type.Equality.$fOrd:~:_$c<_info;
 },
 Data.Type.Equality.$fOrd:~:_$c<_entry() //  [R2, R3]
         { []
         }
     {offset
       c57DI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c57DM; else goto c57DN;
       c57DM: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fOrd:~:_$c<_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c57DN: // global
           I64[Sp - 16] = block_c57DF_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u57DV; else goto c57DG;
       u57DV: // global
           call _c57DF() args: 0, res: 0, upd: 0;
       c57DG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fOrd:~:_$c<_info" {
     Data.Type.Equality.$fOrd:~:_$c<_info:
         const Data.Type.Equality.$fOrd:~:_$c<_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c57DF() //  []
         { []
         }
     {offset
       c57DF: // global
           _s56bv::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c57DL_info;
           R1 = _s56bv::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u57DU; else goto c57DP;
       u57DU: // global
           call _c57DL() args: 0, res: 0, upd: 0;
       c57DP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c57DF_info" {
     block_c57DF_info:
         const _c57DF;
         const 1;
         const 30;
 },
 _c57DL() //  []
         { []
         }
     {offset
       c57DL: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c57DL_info" {
     block_c57DL_info:
         const _c57DL;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.495394056 UTC

[section ""data" . Data.Type.Equality.$fOrd:~:_$ccompare_closure" {
     Data.Type.Equality.$fOrd:~:_$ccompare_closure:
         const Data.Type.Equality.$fOrd:~:_$ccompare_info;
 },
 Data.Type.Equality.$fOrd:~:_$ccompare_entry() //  [R2, R3]
         { []
         }
     {offset
       c57Eh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c57El; else goto c57Em;
       c57El: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fOrd:~:_$ccompare_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c57Em: // global
           I64[Sp - 16] = block_c57Ee_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u57Eu; else goto c57Ef;
       u57Eu: // global
           call _c57Ee() args: 0, res: 0, upd: 0;
       c57Ef: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fOrd:~:_$ccompare_info" {
     Data.Type.Equality.$fOrd:~:_$ccompare_info:
         const Data.Type.Equality.$fOrd:~:_$ccompare_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c57Ee() //  []
         { []
         }
     {offset
       c57Ee: // global
           _s56bz::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c57Ek_info;
           R1 = _s56bz::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u57Et; else goto c57Eo;
       u57Et: // global
           call _c57Ek() args: 0, res: 0, upd: 0;
       c57Eo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c57Ee_info" {
     block_c57Ee_info:
         const _c57Ee;
         const 1;
         const 30;
 },
 _c57Ek() //  []
         { []
         }
     {offset
       c57Ek: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c57Ek_info" {
     block_c57Ek_info:
         const _c57Ek;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.503096578 UTC

[section ""data" . Data.Type.Equality.$fOrd:~:_$c<=_closure" {
     Data.Type.Equality.$fOrd:~:_$c<=_closure:
         const Data.Type.Equality.$fOrd:~:_$c<=_info;
 },
 Data.Type.Equality.$fOrd:~:_$c<=_entry() //  [R2, R3]
         { []
         }
     {offset
       c57EQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c57EU; else goto c57EV;
       c57EU: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fOrd:~:_$c<=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c57EV: // global
           I64[Sp - 16] = block_c57EN_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u57F3; else goto c57EO;
       u57F3: // global
           call _c57EN() args: 0, res: 0, upd: 0;
       c57EO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fOrd:~:_$c<=_info" {
     Data.Type.Equality.$fOrd:~:_$c<=_info:
         const Data.Type.Equality.$fOrd:~:_$c<=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c57EN() //  []
         { []
         }
     {offset
       c57EN: // global
           _s56bC::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c57ET_info;
           R1 = _s56bC::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u57F2; else goto c57EX;
       u57F2: // global
           call _c57ET() args: 0, res: 0, upd: 0;
       c57EX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c57EN_info" {
     block_c57EN_info:
         const _c57EN;
         const 1;
         const 30;
 },
 _c57ET() //  []
         { []
         }
     {offset
       c57ET: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c57ET_info" {
     block_c57ET_info:
         const _c57ET;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.510598102 UTC

[section ""data" . Data.Type.Equality.$fOrd:~:_$cmax_closure" {
     Data.Type.Equality.$fOrd:~:_$cmax_closure:
         const Data.Type.Equality.$fOrd:~:_$cmax_info;
 },
 Data.Type.Equality.$fOrd:~:_$cmax_entry() //  [R2, R3]
         { []
         }
     {offset
       c57Fp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c57Fq; else goto c57Fr;
       c57Fq: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fOrd:~:_$cmax_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c57Fr: // global
           I64[Sp - 16] = block_c57Fm_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u57Fv; else goto c57Fn;
       u57Fv: // global
           call _c57Fm() args: 0, res: 0, upd: 0;
       c57Fn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fOrd:~:_$cmax_info" {
     Data.Type.Equality.$fOrd:~:_$cmax_info:
         const Data.Type.Equality.$fOrd:~:_$cmax_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c57Fm() //  []
         { []
         }
     {offset
       c57Fm: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c57Fm_info" {
     block_c57Fm_info:
         const _c57Fm;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.51752729 UTC

[section ""data" . Data.Type.Equality.$fOrd:~:_$c>_closure" {
     Data.Type.Equality.$fOrd:~:_$c>_closure:
         const Data.Type.Equality.$fOrd:~:_$c>_info;
 },
 Data.Type.Equality.$fOrd:~:_$c>_entry() //  [R2, R3]
         { []
         }
     {offset
       c57FO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c57FS; else goto c57FT;
       c57FS: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fOrd:~:_$c>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c57FT: // global
           I64[Sp - 16] = block_c57FL_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u57G1; else goto c57FM;
       u57G1: // global
           call _c57FL() args: 0, res: 0, upd: 0;
       c57FM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fOrd:~:_$c>_info" {
     Data.Type.Equality.$fOrd:~:_$c>_info:
         const Data.Type.Equality.$fOrd:~:_$c>_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c57FL() //  []
         { []
         }
     {offset
       c57FL: // global
           _s56bJ::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c57FR_info;
           R1 = _s56bJ::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u57G0; else goto c57FV;
       u57G0: // global
           call _c57FR() args: 0, res: 0, upd: 0;
       c57FV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c57FL_info" {
     block_c57FL_info:
         const _c57FL;
         const 1;
         const 30;
 },
 _c57FR() //  []
         { []
         }
     {offset
       c57FR: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c57FR_info" {
     block_c57FR_info:
         const _c57FR;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.524964186 UTC

[section ""data" . Data.Type.Equality.$fOrd:~:_$cmin_closure" {
     Data.Type.Equality.$fOrd:~:_$cmin_closure:
         const Data.Type.Equality.$fOrd:~:_$cmin_info;
 },
 Data.Type.Equality.$fOrd:~:_$cmin_entry() //  [R2, R3]
         { []
         }
     {offset
       c57Gn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c57Go; else goto c57Gp;
       c57Go: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fOrd:~:_$cmin_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c57Gp: // global
           I64[Sp - 16] = block_c57Gk_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u57Gt; else goto c57Gl;
       u57Gt: // global
           call _c57Gk() args: 0, res: 0, upd: 0;
       c57Gl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fOrd:~:_$cmin_info" {
     Data.Type.Equality.$fOrd:~:_$cmin_info:
         const Data.Type.Equality.$fOrd:~:_$cmin_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c57Gk() //  []
         { []
         }
     {offset
       c57Gk: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c57Gk_info" {
     block_c57Gk_info:
         const _c57Gk;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.531270729 UTC

[section ""data" . Data.Type.Equality.$fOrd:~:_closure" {
     Data.Type.Equality.$fOrd:~:_closure:
         const GHC.Classes.C:Ord_con_info;
         const Data.Type.Equality.$fEq:~:_closure+1;
         const Data.Type.Equality.$fOrd:~:_$ccompare_closure+2;
         const Data.Type.Equality.$fOrd:~:_$c<_closure+2;
         const Data.Type.Equality.$fOrd:~:_$c<=_closure+2;
         const Data.Type.Equality.$fOrd:~:_$c>_closure+2;
         const Data.Type.Equality.$fEq:~:_$c==_closure+2;
         const Data.Type.Equality.$fOrd:~:_$cmax_closure+2;
         const Data.Type.Equality.$fOrd:~:_$cmin_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.533200448 UTC

[section ""data" . Data.Type.Equality.$fRead:~:_lexeme_closure" {
     Data.Type.Equality.$fRead:~:_lexeme_closure:
         const Text.Read.Lex.Ident_con_info;
         const Data.Type.Equality.$fRead:~:2_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.536473269 UTC

[section ""data" . Data.Type.Equality.$fRead:~:1_closure" {
     Data.Type.Equality.$fRead:~:1_closure:
         const Data.Type.Equality.$fRead:~:1_info;
         const 0;
 },
 sat_s56bT_entry() //  [R1]
         { []
         }
     {offset
       c57GQ: // global
           R2 = Data.Type.Equality.$WRefl_closure+1;
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s56bT_info" {
     sat_s56bT_info:
         const sat_s56bT_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Type.Equality.$fRead:~:1_entry() //  [R2, R3]
         { []
         }
     {offset
       c57GW: // global
           _s56bR::P64 = R3;
           _s56bQ::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c57GX; else goto c57GY;
       c57GY: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c57H0; else goto c57GZ;
       c57H0: // global
           HpAlloc = 16;
           goto c57GX;
       c57GX: // global
           R3 = _s56bR::P64;
           R2 = _s56bQ::P64;
           R1 = Data.Type.Equality.$fRead:~:1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c57GZ: // global
           I64[Hp - 8] = sat_s56bT_info;
           P64[Hp] = _s56bR::P64;
           I64[Sp - 8] = block_c57GT_info;
           R3 = Hp - 7;
           R2 = Data.Type.Equality.$fRead:~:_lexeme_closure+4;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fRead:~:1_info" {
     Data.Type.Equality.$fRead:~:1_info:
         const Data.Type.Equality.$fRead:~:1_entry;
         const 0;
         const 30064771086;
         const 8589934607;
         const S56eO_srt+240;
 },
 _c57GT() //  [R1]
         { []
         }
     {offset
       c57GT: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c57H3; else goto c57H2;
       c57H3: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c57H2: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c57GT_info" {
     block_c57GT_info:
         const _c57GT;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.544400427 UTC

[section ""data" . Data.Type.Equality.$fRead:~:4_closure" {
     Data.Type.Equality.$fRead:~:4_closure:
         const Data.Type.Equality.$fRead:~:4_info;
         const 0;
 },
 Data.Type.Equality.$fRead:~:4_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c57Hm: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c57Hn; else goto c57Ho;
       c57Hn: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fRead:~:4_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c57Ho: // global
           I64[Sp - 24] = block_c57Hk_info;
           R2 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fRead:~:4_info" {
     Data.Type.Equality.$fRead:~:4_info:
         const Data.Type.Equality.$fRead:~:4_entry;
         const 0;
         const 55834574862;
         const 12884901911;
         const S56eO_srt+248;
 },
 _c57Hk() //  []
         { []
         }
     {offset
       c57Hk: // global
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = Data.Type.Equality.$fRead:~:1_closure+2;
           Sp = Sp + 24;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c57Hk_info" {
     block_c57Hk_info:
         const _c57Hk;
         const 2;
         const 21474836510;
         const S56eO_srt+248;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.551623883 UTC

[section ""data" . Data.Type.Equality.$fRead:~:_$creadsPrec_closure" {
     Data.Type.Equality.$fRead:~:_$creadsPrec_closure:
         const Data.Type.Equality.$fRead:~:_$creadsPrec_info;
         const 0;
 },
 sat_s56c1_entry() //  [R1]
         { []
         }
     {offset
       c57HK: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c57HL; else goto c57HM;
       c57HL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c57HM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c57HI_info;
           R2 = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s56c1_info" {
     sat_s56c1_info:
         const sat_s56c1_entry;
         const 2;
         const 21474836498;
         const S56eO_srt+248;
 },
 _c57HI() //  []
         { []
         }
     {offset
       c57HI: // global
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = P64[Sp + 8];
           R2 = Data.Type.Equality.$fRead:~:1_closure+2;
           Sp = Sp + 16;
           call GHC.Read.list3_entry(R4, R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c57HI_info" {
     block_c57HI_info:
         const _c57HI;
         const 1;
         const 21474836510;
         const S56eO_srt+248;
 },
 Data.Type.Equality.$fRead:~:_$creadsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       c57HO: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c57HP; else goto c57HQ;
       c57HP: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fRead:~:_$creadsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c57HQ: // global
           I64[Sp - 24] = block_c57HC_info;
           _s56bZ::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s56bZ::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fRead:~:_$creadsPrec_info" {
     Data.Type.Equality.$fRead:~:_$creadsPrec_info:
         const Data.Type.Equality.$fRead:~:_$creadsPrec_entry;
         const 0;
         const 90194313230;
         const 8589934607;
         const S56eO_srt+248;
 },
 _c57HC() //  []
         { []
         }
     {offset
       c57HC: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c57HT; else goto c57HS;
       c57HT: // global
           HpAlloc = 32;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c57HS: // global
           I64[Hp - 24] = sat_s56c1_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c57HC_info" {
     block_c57HC_info:
         const _c57HC;
         const 2;
         const 21474836510;
         const S56eO_srt+248;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.562171261 UTC

[section ""data" . Data.Type.Equality.$fRead:~:_$creadListPrec_closure" {
     Data.Type.Equality.$fRead:~:_$creadListPrec_closure:
         const Data.Type.Equality.$fRead:~:_$creadListPrec_info;
         const 0;
 },
 sat_s56c5_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c57Ip: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c57Iq; else goto c57Ir;
       c57Iq: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c57Ir: // global
           I64[Sp - 24] = block_c57In_info;
           _s56c3::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 16] = _s56c3::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s56c5_info" {
     sat_s56c5_info:
         const sat_s56c5_entry;
         const 1;
         const 21474836489;
         const 8589934607;
         const S56eO_srt+248;
 },
 _c57In() //  []
         { []
         }
     {offset
       c57In: // global
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = Data.Type.Equality.$fRead:~:1_closure+2;
           Sp = Sp + 24;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c57In_info" {
     block_c57In_info:
         const _c57In;
         const 2;
         const 21474836510;
         const S56eO_srt+248;
 },
 Data.Type.Equality.$fRead:~:_$creadListPrec_entry() //  [R2]
         { []
         }
     {offset
       c57It: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c57Iu; else goto c57Iv;
       c57Iu: // global
           R2 = R2;
           R1 = Data.Type.Equality.$fRead:~:_$creadListPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c57Iv: // global
           I64[Sp - 16] = block_c57Ig_info;
           _s56c2::P64 = R2;
           R2 = R2;
           P64[Sp - 8] = _s56c2::P64;
           Sp = Sp - 16;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fRead:~:_$creadListPrec_info" {
     Data.Type.Equality.$fRead:~:_$creadListPrec_info:
         const Data.Type.Equality.$fRead:~:_$creadListPrec_entry;
         const 0;
         const 433791696910;
         const 4294967301;
         const S56eO_srt+248;
 },
 _c57Ig() //  []
         { []
         }
     {offset
       c57Ig: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c57Iy; else goto c57Ix;
       c57Iy: // global
           HpAlloc = 16;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c57Ix: // global
           I64[Hp - 8] = sat_s56c5_info;
           P64[Hp] = P64[Sp + 8];
           R2 = Hp - 6;
           Sp = Sp + 16;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c57Ig_info" {
     block_c57Ig_info:
         const _c57Ig;
         const 1;
         const 158913789982;
         const S56eO_srt+248;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.573217956 UTC

[section ""data" . Data.Type.Equality.$fRead:~:_$creadList_closure" {
     Data.Type.Equality.$fRead:~:_$creadList_closure:
         const Data.Type.Equality.$fRead:~:_$creadList_info;
         const 0;
 },
 sat_s56c9_entry() //  [R2, R3]
         { []
         }
     {offset
       c57J6: // global
           R4 = R3;
           R3 = R2;
           R2 = Data.Type.Equality.$fRead:~:1_closure+2;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s56c9_info" {
     sat_s56c9_info:
         const sat_s56c9_entry;
         const 4294967296;
         const 21474836490;
         const 8589934607;
         const S56eO_srt+248;
 },
 sat_s56ca_entry() //  [R1]
         { []
         }
     {offset
       c57J9: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c57Ja; else goto c57Jb;
       c57Ja: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c57Jb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c57IZ_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s56ca_info" {
     sat_s56ca_info:
         const sat_s56ca_entry;
         const 1;
         const 158913789968;
         const S56eO_srt+248;
 },
 _c57IZ() //  []
         { []
         }
     {offset
       c57IZ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c57Je; else goto c57Jd;
       c57Je: // global
           HpAlloc = 16;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c57Jd: // global
           I64[Hp - 8] = sat_s56c9_info;
           R2 = Hp - 6;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = GHC.Read.$fRead()7_closure;
           P64[Sp] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 16;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c57IZ_info" {
     block_c57IZ_info:
         const _c57IZ;
         const 0;
         const 158913789982;
         const S56eO_srt+248;
 },
 Data.Type.Equality.$fRead:~:_$creadList_entry() //  [R2]
         { []
         }
     {offset
       c57Jf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c57Jg; else goto c57Jh;
       c57Jg: // global
           R2 = R2;
           R1 = Data.Type.Equality.$fRead:~:_$creadList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c57Jh: // global
           I64[Sp - 16] = block_c57IT_info;
           _s56c6::P64 = R2;
           R2 = R2;
           P64[Sp - 8] = _s56c6::P64;
           Sp = Sp - 16;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fRead:~:_$creadList_info" {
     Data.Type.Equality.$fRead:~:_$creadList_info:
         const Data.Type.Equality.$fRead:~:_$creadList_entry;
         const 0;
         const 708669603854;
         const 4294967301;
         const S56eO_srt+248;
 },
 _c57IT() //  []
         { []
         }
     {offset
       c57IT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c57Jk; else goto c57Jj;
       c57Jk: // global
           HpAlloc = 24;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c57Jj: // global
           I64[Hp - 16] = sat_s56ca_info;
           P64[Hp] = P64[Sp + 8];
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c57IT_info" {
     block_c57IT_info:
         const _c57IT;
         const 1;
         const 158913789982;
         const S56eO_srt+248;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.586036348 UTC

[section ""data" . Data.Type.Equality.$fRead:~:_closure" {
     Data.Type.Equality.$fRead:~:_closure:
         const Data.Type.Equality.$fRead:~:_info;
         const 0;
 },
 sat_s56cf_entry() //  [R1]
         { []
         }
     {offset
       c57JM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c57JN; else goto c57JO;
       c57JN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c57JO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Type.Equality.$fRead:~:_$creadListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s56cf_info" {
     sat_s56cf_info:
         const sat_s56cf_entry;
         const 1;
         const 4294967312;
         const S56eO_srt+296;
 },
 sat_s56ce_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c57JU: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Type.Equality.$fRead:~:4_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s56ce_info" {
     sat_s56ce_info:
         const sat_s56ce_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S56eO_srt+272;
 },
 sat_s56cd_entry() //  [R1]
         { []
         }
     {offset
       c57K1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c57K2; else goto c57K3;
       c57K2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c57K3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Type.Equality.$fRead:~:_$creadList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s56cd_info" {
     sat_s56cd_info:
         const sat_s56cd_entry;
         const 1;
         const 4294967312;
         const S56eO_srt+304;
 },
 sat_s56cc_entry() //  [R1, R2]
         { []
         }
     {offset
       c57K9: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Type.Equality.$fRead:~:_$creadsPrec_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s56cc_info" {
     sat_s56cc_info:
         const sat_s56cc_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S56eO_srt+280;
 },
 Data.Type.Equality.$fRead:~:_entry() //  [R2]
         { []
         }
     {offset
       c57Kd: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto c57Kh; else goto c57Kg;
       c57Kh: // global
           HpAlloc = 120;
           R2 = R2;
           R1 = Data.Type.Equality.$fRead:~:_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c57Kg: // global
           I64[Hp - 112] = sat_s56cf_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_s56ce_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_s56cd_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = sat_s56cc_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 47;
           P64[Hp - 16] = Hp - 72;
           P64[Hp - 8] = Hp - 86;
           P64[Hp] = Hp - 112;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fRead:~:_info" {
     Data.Type.Equality.$fRead:~:_info:
         const Data.Type.Equality.$fRead:~:_entry;
         const 0;
         const 253403070478;
         const 4294967301;
         const S56eO_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.597009815 UTC

[section ""data" . Data.Type.Equality.$fBounded:~:_$cmaxBound_closure" {
     Data.Type.Equality.$fBounded:~:_$cmaxBound_closure:
         const Data.Type.Equality.$fBounded:~:_$cmaxBound_info;
 },
 Data.Type.Equality.$fBounded:~:_$cmaxBound_entry() //  [R2]
         { []
         }
     {offset
       c57KL: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c57KM; else goto c57KN;
       c57KM: // global
           R2 = R2;
           R1 = Data.Type.Equality.$fBounded:~:_$cmaxBound_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c57KN: // global
           I64[Sp - 8] = block_c57KJ_info;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fBounded:~:_$cmaxBound_info" {
     Data.Type.Equality.$fBounded:~:_$cmaxBound_info:
         const Data.Type.Equality.$fBounded:~:_$cmaxBound_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c57KJ() //  []
         { []
         }
     {offset
       c57KJ: // global
           R1 = Data.Type.Equality.$WRefl_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c57KJ_info" {
     block_c57KJ_info:
         const _c57KJ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.603620222 UTC

[section ""data" . Data.Type.Equality.$fBounded:~:_closure" {
     Data.Type.Equality.$fBounded:~:_closure:
         const Data.Type.Equality.$fBounded:~:_info;
 },
 sat_s56cj_entry() //  [R1]
         { []
         }
     {offset
       c57L6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c57L7; else goto c57L8;
       c57L7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c57L8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Type.Equality.$fBounded:~:_$cmaxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s56cj_info" {
     sat_s56cj_info:
         const sat_s56cj_entry;
         const 1;
         const 16;
 },
 sat_s56ci_entry() //  [R1]
         { []
         }
     {offset
       c57Ld: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c57Le; else goto c57Lf;
       c57Le: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c57Lf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Type.Equality.$fBounded:~:_$cmaxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s56ci_info" {
     sat_s56ci_info:
         const sat_s56ci_entry;
         const 1;
         const 16;
 },
 Data.Type.Equality.$fBounded:~:_entry() //  [R2]
         { []
         }
     {offset
       c57Lh: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c57Ll; else goto c57Lk;
       c57Ll: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Data.Type.Equality.$fBounded:~:_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c57Lk: // global
           I64[Hp - 64] = sat_s56cj_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s56ci_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Enum.C:Bounded_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fBounded:~:_info" {
     Data.Type.Equality.$fBounded:~:_info:
         const Data.Type.Equality.$fBounded:~:_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.612914936 UTC

[section ""data" . Data.Type.Equality.$fEq:~~:_$c==_closure" {
     Data.Type.Equality.$fEq:~~:_$c==_closure:
         const Data.Type.Equality.$fEq:~~:_$c==_info;
 },
 Data.Type.Equality.$fEq:~~:_$c==_entry() //  [R2, R3]
         { []
         }
     {offset
       c57LI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c57LM; else goto c57LN;
       c57LM: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fEq:~~:_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c57LN: // global
           I64[Sp - 16] = block_c57LF_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u57LV; else goto c57LG;
       u57LV: // global
           call _c57LF() args: 0, res: 0, upd: 0;
       c57LG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fEq:~~:_$c==_info" {
     Data.Type.Equality.$fEq:~~:_$c==_info:
         const Data.Type.Equality.$fEq:~~:_$c==_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c57LF() //  []
         { []
         }
     {offset
       c57LF: // global
           _s56cl::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c57LL_info;
           R1 = _s56cl::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u57LU; else goto c57LP;
       u57LU: // global
           call _c57LL() args: 0, res: 0, upd: 0;
       c57LP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c57LF_info" {
     block_c57LF_info:
         const _c57LF;
         const 1;
         const 30;
 },
 _c57LL() //  []
         { []
         }
     {offset
       c57LL: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c57LL_info" {
     block_c57LL_info:
         const _c57LL;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.620863011 UTC

[section ""data" . Data.Type.Equality.$fEq:~~:_$c/=_closure" {
     Data.Type.Equality.$fEq:~~:_$c/=_closure:
         const Data.Type.Equality.$fEq:~~:_$c/=_info;
 },
 Data.Type.Equality.$fEq:~~:_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       c57Mh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c57Ml; else goto c57Mm;
       c57Ml: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fEq:~~:_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c57Mm: // global
           I64[Sp - 16] = block_c57Me_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u57Mu; else goto c57Mf;
       u57Mu: // global
           call _c57Me() args: 0, res: 0, upd: 0;
       c57Mf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fEq:~~:_$c/=_info" {
     Data.Type.Equality.$fEq:~~:_$c/=_info:
         const Data.Type.Equality.$fEq:~~:_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c57Me() //  []
         { []
         }
     {offset
       c57Me: // global
           _s56cp::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c57Mk_info;
           R1 = _s56cp::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u57Mt; else goto c57Mo;
       u57Mt: // global
           call _c57Mk() args: 0, res: 0, upd: 0;
       c57Mo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c57Me_info" {
     block_c57Me_info:
         const _c57Me;
         const 1;
         const 30;
 },
 _c57Mk() //  []
         { []
         }
     {offset
       c57Mk: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c57Mk_info" {
     block_c57Mk_info:
         const _c57Mk;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.62809182 UTC

[section ""data" . Data.Type.Equality.$fEq:~~:_closure" {
     Data.Type.Equality.$fEq:~~:_closure:
         const GHC.Classes.C:Eq_con_info;
         const Data.Type.Equality.$fEq:~~:_$c==_closure+2;
         const Data.Type.Equality.$fEq:~~:_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.629962073 UTC

[section ""cstring" . Data.Type.Equality.$fRead:~~:3_bytes" {
     Data.Type.Equality.$fRead:~~:3_bytes:
         I8[] [72,82,101,102,108]
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.632419544 UTC

[section ""data" . Data.Type.Equality.$fRead:~~:2_closure" {
     Data.Type.Equality.$fRead:~~:2_closure:
         const Data.Type.Equality.$fRead:~~:2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Type.Equality.$fRead:~~:2_entry() //  [R1]
         { []
         }
     {offset
       c57MR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c57MS; else goto c57MT;
       c57MS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c57MT: // global
           (_c57MO::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c57MO::I64 == 0) goto c57MQ; else goto c57MP;
       c57MQ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c57MP: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c57MO::I64;
           R2 = Data.Type.Equality.$fRead:~~:3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fRead:~~:2_info" {
     Data.Type.Equality.$fRead:~~:2_info:
         const Data.Type.Equality.$fRead:~~:2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.637467865 UTC

[section ""data" . Data.Type.Equality.$fShow:~~:_$cshowsPrec_closure" {
     Data.Type.Equality.$fShow:~~:_$cshowsPrec_closure:
         const Data.Type.Equality.$fShow:~~:_$cshowsPrec_info;
         const 0;
 },
 Data.Type.Equality.$fShow:~~:_$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c57N8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c57N9; else goto c57Na;
       c57N9: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fShow:~~:_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c57Na: // global
           I64[Sp - 16] = block_c57N5_info;
           R1 = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u57Ne; else goto c57N6;
       u57Ne: // global
           call _c57N5() args: 0, res: 0, upd: 0;
       c57N6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fShow:~~:_$cshowsPrec_info" {
     Data.Type.Equality.$fShow:~~:_$cshowsPrec_info:
         const Data.Type.Equality.$fShow:~~:_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S56eO_srt+320;
 },
 _c57N5() //  []
         { []
         }
     {offset
       c57N5: // global
           R3 = P64[Sp + 8];
           R2 = Data.Type.Equality.$fRead:~~:2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c57N5_info" {
     block_c57N5_info:
         const _c57N5;
         const 1;
         const 4294967326;
         const S56eO_srt+320;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.644237444 UTC

[section ""data" . Data.Type.Equality.$fShow:~~:_$cshow_closure" {
     Data.Type.Equality.$fShow:~~:_$cshow_closure:
         const Data.Type.Equality.$fShow:~~:_$cshow_info;
         const 0;
 },
 Data.Type.Equality.$fShow:~~:_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c57Nv: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c57Nw; else goto c57Nx;
       c57Nw: // global
           R2 = R2;
           R1 = Data.Type.Equality.$fShow:~~:_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c57Nx: // global
           I64[Sp - 8] = block_c57Ns_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u57NB; else goto c57Nt;
       u57NB: // global
           call _c57Ns() args: 0, res: 0, upd: 0;
       c57Nt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fShow:~~:_$cshow_info" {
     Data.Type.Equality.$fShow:~~:_$cshow_info:
         const Data.Type.Equality.$fShow:~~:_$cshow_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const S56eO_srt+320;
 },
 _c57Ns() //  []
         { []
         }
     {offset
       c57Ns: // global
           R1 = Data.Type.Equality.$fRead:~~:2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c57Ns_info" {
     block_c57Ns_info:
         const _c57Ns;
         const 0;
         const 4294967326;
         const S56eO_srt+320;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.651044538 UTC

[section ""data" . Data.Type.Equality.$fShow:~~:1_closure" {
     Data.Type.Equality.$fShow:~~:1_closure:
         const Data.Type.Equality.$fShow:~~:1_info;
         const 0;
 },
 Data.Type.Equality.$fShow:~~:1_entry() //  [R2, R3]
         { []
         }
     {offset
       c57NT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c57NU; else goto c57NV;
       c57NU: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fShow:~~:1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c57NV: // global
           I64[Sp - 16] = block_c57NQ_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u57NZ; else goto c57NR;
       u57NZ: // global
           call _c57NQ() args: 0, res: 0, upd: 0;
       c57NR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fShow:~~:1_info" {
     Data.Type.Equality.$fShow:~~:1_info:
         const Data.Type.Equality.$fShow:~~:1_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const S56eO_srt+320;
 },
 _c57NQ() //  []
         { []
         }
     {offset
       c57NQ: // global
           R3 = P64[Sp + 8];
           R2 = Data.Type.Equality.$fRead:~~:2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c57NQ_info" {
     block_c57NQ_info:
         const _c57NQ;
         const 1;
         const 4294967326;
         const S56eO_srt+320;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.656656805 UTC

[section ""data" . Data.Type.Equality.$fShow:~~:_$cshowList_closure" {
     Data.Type.Equality.$fShow:~~:_$cshowList_closure:
         const Data.Type.Equality.$fShow:~~:_$cshowList_info;
         const 0;
 },
 Data.Type.Equality.$fShow:~~:_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       c57Od: // global
           R4 = R3;
           R3 = R2;
           R2 = Data.Type.Equality.$fShow:~~:1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fShow:~~:_$cshowList_info" {
     Data.Type.Equality.$fShow:~~:_$cshowList_info:
         const Data.Type.Equality.$fShow:~~:_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S56eO_srt+344;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.659960283 UTC

[section ""data" . Data.Type.Equality.$fShow:~~:_closure" {
     Data.Type.Equality.$fShow:~~:_closure:
         const GHC.Show.C:Show_con_info;
         const Data.Type.Equality.$fShow:~~:_$cshowsPrec_closure+3;
         const Data.Type.Equality.$fShow:~~:_$cshow_closure+1;
         const Data.Type.Equality.$fShow:~~:_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.663261885 UTC

[section ""data" . Data.Type.Equality.$fOrd:~~:_$c<_closure" {
     Data.Type.Equality.$fOrd:~~:_$c<_closure:
         const Data.Type.Equality.$fOrd:~~:_$c<_info;
 },
 Data.Type.Equality.$fOrd:~~:_$c<_entry() //  [R2, R3]
         { []
         }
     {offset
       c57Os: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c57Ow; else goto c57Ox;
       c57Ow: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fOrd:~~:_$c<_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c57Ox: // global
           I64[Sp - 16] = block_c57Op_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u57OF; else goto c57Oq;
       u57OF: // global
           call _c57Op() args: 0, res: 0, upd: 0;
       c57Oq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fOrd:~~:_$c<_info" {
     Data.Type.Equality.$fOrd:~~:_$c<_info:
         const Data.Type.Equality.$fOrd:~~:_$c<_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c57Op() //  []
         { []
         }
     {offset
       c57Op: // global
           _s56cE::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c57Ov_info;
           R1 = _s56cE::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u57OE; else goto c57Oz;
       u57OE: // global
           call _c57Ov() args: 0, res: 0, upd: 0;
       c57Oz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c57Op_info" {
     block_c57Op_info:
         const _c57Op;
         const 1;
         const 30;
 },
 _c57Ov() //  []
         { []
         }
     {offset
       c57Ov: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c57Ov_info" {
     block_c57Ov_info:
         const _c57Ov;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.670782039 UTC

[section ""data" . Data.Type.Equality.$fOrd:~~:_$ccompare_closure" {
     Data.Type.Equality.$fOrd:~~:_$ccompare_closure:
         const Data.Type.Equality.$fOrd:~~:_$ccompare_info;
 },
 Data.Type.Equality.$fOrd:~~:_$ccompare_entry() //  [R2, R3]
         { []
         }
     {offset
       c57P1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c57P5; else goto c57P6;
       c57P5: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fOrd:~~:_$ccompare_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c57P6: // global
           I64[Sp - 16] = block_c57OY_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u57Pe; else goto c57OZ;
       u57Pe: // global
           call _c57OY() args: 0, res: 0, upd: 0;
       c57OZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fOrd:~~:_$ccompare_info" {
     Data.Type.Equality.$fOrd:~~:_$ccompare_info:
         const Data.Type.Equality.$fOrd:~~:_$ccompare_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c57OY() //  []
         { []
         }
     {offset
       c57OY: // global
           _s56cI::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c57P4_info;
           R1 = _s56cI::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u57Pd; else goto c57P8;
       u57Pd: // global
           call _c57P4() args: 0, res: 0, upd: 0;
       c57P8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c57OY_info" {
     block_c57OY_info:
         const _c57OY;
         const 1;
         const 30;
 },
 _c57P4() //  []
         { []
         }
     {offset
       c57P4: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c57P4_info" {
     block_c57P4_info:
         const _c57P4;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.678890512 UTC

[section ""data" . Data.Type.Equality.$fOrd:~~:_$c<=_closure" {
     Data.Type.Equality.$fOrd:~~:_$c<=_closure:
         const Data.Type.Equality.$fOrd:~~:_$c<=_info;
 },
 Data.Type.Equality.$fOrd:~~:_$c<=_entry() //  [R2, R3]
         { []
         }
     {offset
       c57PA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c57PE; else goto c57PF;
       c57PE: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fOrd:~~:_$c<=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c57PF: // global
           I64[Sp - 16] = block_c57Px_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u57PN; else goto c57Py;
       u57PN: // global
           call _c57Px() args: 0, res: 0, upd: 0;
       c57Py: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fOrd:~~:_$c<=_info" {
     Data.Type.Equality.$fOrd:~~:_$c<=_info:
         const Data.Type.Equality.$fOrd:~~:_$c<=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c57Px() //  []
         { []
         }
     {offset
       c57Px: // global
           _s56cL::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c57PD_info;
           R1 = _s56cL::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u57PM; else goto c57PH;
       u57PM: // global
           call _c57PD() args: 0, res: 0, upd: 0;
       c57PH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c57Px_info" {
     block_c57Px_info:
         const _c57Px;
         const 1;
         const 30;
 },
 _c57PD() //  []
         { []
         }
     {offset
       c57PD: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c57PD_info" {
     block_c57PD_info:
         const _c57PD;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.687454814 UTC

[section ""data" . Data.Type.Equality.$fOrd:~~:_$cmax_closure" {
     Data.Type.Equality.$fOrd:~~:_$cmax_closure:
         const Data.Type.Equality.$fOrd:~~:_$cmax_info;
 },
 Data.Type.Equality.$fOrd:~~:_$cmax_entry() //  [R2, R3]
         { []
         }
     {offset
       c57Q9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c57Qa; else goto c57Qb;
       c57Qa: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fOrd:~~:_$cmax_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c57Qb: // global
           I64[Sp - 16] = block_c57Q6_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u57Qf; else goto c57Q7;
       u57Qf: // global
           call _c57Q6() args: 0, res: 0, upd: 0;
       c57Q7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fOrd:~~:_$cmax_info" {
     Data.Type.Equality.$fOrd:~~:_$cmax_info:
         const Data.Type.Equality.$fOrd:~~:_$cmax_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c57Q6() //  []
         { []
         }
     {offset
       c57Q6: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c57Q6_info" {
     block_c57Q6_info:
         const _c57Q6;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.693611922 UTC

[section ""data" . Data.Type.Equality.$fOrd:~~:_$c>_closure" {
     Data.Type.Equality.$fOrd:~~:_$c>_closure:
         const Data.Type.Equality.$fOrd:~~:_$c>_info;
 },
 Data.Type.Equality.$fOrd:~~:_$c>_entry() //  [R2, R3]
         { []
         }
     {offset
       c57Qy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c57QC; else goto c57QD;
       c57QC: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fOrd:~~:_$c>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c57QD: // global
           I64[Sp - 16] = block_c57Qv_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u57QL; else goto c57Qw;
       u57QL: // global
           call _c57Qv() args: 0, res: 0, upd: 0;
       c57Qw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fOrd:~~:_$c>_info" {
     Data.Type.Equality.$fOrd:~~:_$c>_info:
         const Data.Type.Equality.$fOrd:~~:_$c>_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c57Qv() //  []
         { []
         }
     {offset
       c57Qv: // global
           _s56cS::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c57QB_info;
           R1 = _s56cS::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u57QK; else goto c57QF;
       u57QK: // global
           call _c57QB() args: 0, res: 0, upd: 0;
       c57QF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c57Qv_info" {
     block_c57Qv_info:
         const _c57Qv;
         const 1;
         const 30;
 },
 _c57QB() //  []
         { []
         }
     {offset
       c57QB: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c57QB_info" {
     block_c57QB_info:
         const _c57QB;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.701107123 UTC

[section ""data" . Data.Type.Equality.$fOrd:~~:_$cmin_closure" {
     Data.Type.Equality.$fOrd:~~:_$cmin_closure:
         const Data.Type.Equality.$fOrd:~~:_$cmin_info;
 },
 Data.Type.Equality.$fOrd:~~:_$cmin_entry() //  [R2, R3]
         { []
         }
     {offset
       c57R7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c57R8; else goto c57R9;
       c57R8: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fOrd:~~:_$cmin_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c57R9: // global
           I64[Sp - 16] = block_c57R4_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u57Rd; else goto c57R5;
       u57Rd: // global
           call _c57R4() args: 0, res: 0, upd: 0;
       c57R5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fOrd:~~:_$cmin_info" {
     Data.Type.Equality.$fOrd:~~:_$cmin_info:
         const Data.Type.Equality.$fOrd:~~:_$cmin_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c57R4() //  []
         { []
         }
     {offset
       c57R4: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c57R4_info" {
     block_c57R4_info:
         const _c57R4;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.706618199 UTC

[section ""data" . Data.Type.Equality.$fOrd:~~:_closure" {
     Data.Type.Equality.$fOrd:~~:_closure:
         const GHC.Classes.C:Ord_con_info;
         const Data.Type.Equality.$fEq:~~:_closure+1;
         const Data.Type.Equality.$fOrd:~~:_$ccompare_closure+2;
         const Data.Type.Equality.$fOrd:~~:_$c<_closure+2;
         const Data.Type.Equality.$fOrd:~~:_$c<=_closure+2;
         const Data.Type.Equality.$fOrd:~~:_$c>_closure+2;
         const Data.Type.Equality.$fEq:~~:_$c==_closure+2;
         const Data.Type.Equality.$fOrd:~~:_$cmax_closure+2;
         const Data.Type.Equality.$fOrd:~~:_$cmin_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.708524391 UTC

[section ""data" . Data.Type.Equality.$fRead:~~:_lexeme_closure" {
     Data.Type.Equality.$fRead:~~:_lexeme_closure:
         const Text.Read.Lex.Ident_con_info;
         const Data.Type.Equality.$fRead:~~:2_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.711836159 UTC

[section ""data" . Data.Type.Equality.$fRead:~~:1_closure" {
     Data.Type.Equality.$fRead:~~:1_closure:
         const Data.Type.Equality.$fRead:~~:1_info;
         const 0;
 },
 sat_s56d2_entry() //  [R1]
         { []
         }
     {offset
       c57RA: // global
           R2 = Data.Type.Equality.$WHRefl_closure+1;
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s56d2_info" {
     sat_s56d2_info:
         const sat_s56d2_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Type.Equality.$fRead:~~:1_entry() //  [R2, R3]
         { []
         }
     {offset
       c57RG: // global
           _s56d0::P64 = R3;
           _s56cZ::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c57RH; else goto c57RI;
       c57RI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c57RK; else goto c57RJ;
       c57RK: // global
           HpAlloc = 16;
           goto c57RH;
       c57RH: // global
           R3 = _s56d0::P64;
           R2 = _s56cZ::P64;
           R1 = Data.Type.Equality.$fRead:~~:1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c57RJ: // global
           I64[Hp - 8] = sat_s56d2_info;
           P64[Hp] = _s56d0::P64;
           I64[Sp - 8] = block_c57RD_info;
           R3 = Hp - 7;
           R2 = Data.Type.Equality.$fRead:~~:_lexeme_closure+4;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fRead:~~:1_info" {
     Data.Type.Equality.$fRead:~~:1_info:
         const Data.Type.Equality.$fRead:~~:1_entry;
         const 0;
         const 211110527500302;
         const 8589934607;
         const S56eO_srt+240;
 },
 _c57RD() //  [R1]
         { []
         }
     {offset
       c57RD: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c57RN; else goto c57RM;
       c57RN: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c57RM: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c57RD_info" {
     block_c57RD_info:
         const _c57RD;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.720014505 UTC

[section ""data" . Data.Type.Equality.$fRead:~~:4_closure" {
     Data.Type.Equality.$fRead:~~:4_closure:
         const Data.Type.Equality.$fRead:~~:4_info;
         const 0;
 },
 Data.Type.Equality.$fRead:~~:4_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c57S6: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c57S7; else goto c57S8;
       c57S7: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fRead:~~:4_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c57S8: // global
           I64[Sp - 24] = block_c57S4_info;
           R2 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fRead:~~:4_info" {
     Data.Type.Equality.$fRead:~~:4_info:
         const Data.Type.Equality.$fRead:~~:4_entry;
         const 0;
         const 43984760078350;
         const 12884901911;
         const S56eO_srt+264;
 },
 _c57S4() //  []
         { []
         }
     {offset
       c57S4: // global
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = Data.Type.Equality.$fRead:~~:1_closure+2;
           Sp = Sp + 24;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c57S4_info" {
     block_c57S4_info:
         const _c57S4;
         const 2;
         const 8800387989534;
         const S56eO_srt+264;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.727058039 UTC

[section ""data" . Data.Type.Equality.$fRead:~~:_$creadsPrec_closure" {
     Data.Type.Equality.$fRead:~~:_$creadsPrec_closure:
         const Data.Type.Equality.$fRead:~~:_$creadsPrec_info;
         const 0;
 },
 sat_s56da_entry() //  [R1]
         { []
         }
     {offset
       c57Su: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c57Sv; else goto c57Sw;
       c57Sv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c57Sw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c57Ss_info;
           R2 = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s56da_info" {
     sat_s56da_info:
         const sat_s56da_entry;
         const 2;
         const 8800387989522;
         const S56eO_srt+264;
 },
 _c57Ss() //  []
         { []
         }
     {offset
       c57Ss: // global
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = P64[Sp + 8];
           R2 = Data.Type.Equality.$fRead:~~:1_closure+2;
           Sp = Sp + 16;
           call GHC.Read.list3_entry(R4, R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c57Ss_info" {
     block_c57Ss_info:
         const _c57Ss;
         const 1;
         const 8800387989534;
         const S56eO_srt+264;
 },
 Data.Type.Equality.$fRead:~~:_$creadsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       c57Sy: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c57Sz; else goto c57SA;
       c57Sz: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fRead:~~:_$creadsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c57SA: // global
           I64[Sp - 24] = block_c57Sm_info;
           _s56d8::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s56d8::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fRead:~~:_$creadsPrec_info" {
     Data.Type.Equality.$fRead:~~:_$creadsPrec_info:
         const Data.Type.Equality.$fRead:~~:_$creadsPrec_entry;
         const 0;
         const 79169132167182;
         const 8589934607;
         const S56eO_srt+264;
 },
 _c57Sm() //  []
         { []
         }
     {offset
       c57Sm: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c57SD; else goto c57SC;
       c57SD: // global
           HpAlloc = 32;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c57SC: // global
           I64[Hp - 24] = sat_s56da_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c57Sm_info" {
     block_c57Sm_info:
         const _c57Sm;
         const 2;
         const 8800387989534;
         const S56eO_srt+264;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.737071399 UTC

[section ""data" . Data.Type.Equality.$fRead:~~:_$creadListPrec_closure" {
     Data.Type.Equality.$fRead:~~:_$creadListPrec_closure:
         const Data.Type.Equality.$fRead:~~:_$creadListPrec_info;
         const 0;
 },
 sat_s56de_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c57T9: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c57Ta; else goto c57Tb;
       c57Ta: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c57Tb: // global
           I64[Sp - 24] = block_c57T7_info;
           _s56dc::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 16] = _s56dc::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s56de_info" {
     sat_s56de_info:
         const sat_s56de_entry;
         const 1;
         const 8800387989513;
         const 8589934607;
         const S56eO_srt+264;
 },
 _c57T7() //  []
         { []
         }
     {offset
       c57T7: // global
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = Data.Type.Equality.$fRead:~~:1_closure+2;
           Sp = Sp + 24;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c57T7_info" {
     block_c57T7_info:
         const _c57T7;
         const 2;
         const 8800387989534;
         const S56eO_srt+264;
 },
 Data.Type.Equality.$fRead:~~:_$creadListPrec_entry() //  [R2]
         { []
         }
     {offset
       c57Td: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c57Te; else goto c57Tf;
       c57Te: // global
           R2 = R2;
           R1 = Data.Type.Equality.$fRead:~~:_$creadListPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c57Tf: // global
           I64[Sp - 16] = block_c57T0_info;
           _s56db::P64 = R2;
           R2 = R2;
           P64[Sp - 8] = _s56db::P64;
           Sp = Sp - 16;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fRead:~~:_$creadListPrec_info" {
     Data.Type.Equality.$fRead:~~:_$creadListPrec_info:
         const Data.Type.Equality.$fRead:~~:_$creadListPrec_entry;
         const 0;
         const 149572236083214;
         const 4294967301;
         const S56eO_srt+264;
 },
 _c57T0() //  []
         { []
         }
     {offset
       c57T0: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c57Ti; else goto c57Th;
       c57Ti: // global
           HpAlloc = 16;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c57Th: // global
           I64[Hp - 8] = sat_s56de_info;
           P64[Hp] = P64[Sp + 8];
           R2 = Hp - 6;
           Sp = Sp + 16;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c57T0_info" {
     block_c57T0_info:
         const _c57T0;
         const 1;
         const 8834747727902;
         const S56eO_srt+264;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.748166515 UTC

[section ""data" . Data.Type.Equality.$fRead:~~:_$creadList_closure" {
     Data.Type.Equality.$fRead:~~:_$creadList_closure:
         const Data.Type.Equality.$fRead:~~:_$creadList_info;
         const 0;
 },
 sat_s56di_entry() //  [R2, R3]
         { []
         }
     {offset
       c57TQ: // global
           R4 = R3;
           R3 = R2;
           R2 = Data.Type.Equality.$fRead:~~:1_closure+2;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s56di_info" {
     sat_s56di_info:
         const sat_s56di_entry;
         const 4294967296;
         const 8800387989514;
         const 8589934607;
         const S56eO_srt+264;
 },
 sat_s56dj_entry() //  [R1]
         { []
         }
     {offset
       c57TT: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c57TU; else goto c57TV;
       c57TU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c57TV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c57TJ_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s56dj_info" {
     sat_s56dj_info:
         const sat_s56dj_entry;
         const 1;
         const 8834747727888;
         const S56eO_srt+264;
 },
 _c57TJ() //  []
         { []
         }
     {offset
       c57TJ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c57TY; else goto c57TX;
       c57TY: // global
           HpAlloc = 16;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c57TX: // global
           I64[Hp - 8] = sat_s56di_info;
           R2 = Hp - 6;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = GHC.Read.$fRead()7_closure;
           P64[Sp] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 16;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c57TJ_info" {
     block_c57TJ_info:
         const _c57TJ;
         const 0;
         const 8834747727902;
         const S56eO_srt+264;
 },
 Data.Type.Equality.$fRead:~~:_$creadList_entry() //  [R2]
         { []
         }
     {offset
       c57TZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c57U0; else goto c57U1;
       c57U0: // global
           R2 = R2;
           R1 = Data.Type.Equality.$fRead:~~:_$creadList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c57U1: // global
           I64[Sp - 16] = block_c57TD_info;
           _s56df::P64 = R2;
           R2 = R2;
           P64[Sp - 8] = _s56df::P64;
           Sp = Sp - 16;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fRead:~~:_$creadList_info" {
     Data.Type.Equality.$fRead:~~:_$creadList_info:
         const Data.Type.Equality.$fRead:~~:_$creadList_entry;
         const 0;
         const 290309724438542;
         const 4294967301;
         const S56eO_srt+264;
 },
 _c57TD() //  []
         { []
         }
     {offset
       c57TD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c57U4; else goto c57U3;
       c57U4: // global
           HpAlloc = 24;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c57U3: // global
           I64[Hp - 16] = sat_s56dj_info;
           P64[Hp] = P64[Sp + 8];
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c57TD_info" {
     block_c57TD_info:
         const _c57TD;
         const 1;
         const 8834747727902;
         const S56eO_srt+264;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.760686915 UTC

[section ""data" . Data.Type.Equality.$fRead:~~:_closure" {
     Data.Type.Equality.$fRead:~~:_closure:
         const Data.Type.Equality.$fRead:~~:_info;
         const 0;
 },
 sat_s56do_entry() //  [R1]
         { []
         }
     {offset
       c57Uw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c57Ux; else goto c57Uy;
       c57Ux: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c57Uy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Type.Equality.$fRead:~~:_$creadListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s56do_info" {
     sat_s56do_info:
         const sat_s56do_entry;
         const 1;
         const 4294967312;
         const S56eO_srt+384;
 },
 sat_s56dn_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c57UE: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Type.Equality.$fRead:~~:4_entry(R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s56dn_info" {
     sat_s56dn_info:
         const sat_s56dn_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S56eO_srt+368;
 },
 sat_s56dm_entry() //  [R1]
         { []
         }
     {offset
       c57UL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c57UM; else goto c57UN;
       c57UM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c57UN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Type.Equality.$fRead:~~:_$creadList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s56dm_info" {
     sat_s56dm_info:
         const sat_s56dm_entry;
         const 1;
         const 4294967312;
         const S56eO_srt+392;
 },
 sat_s56dl_entry() //  [R1, R2]
         { []
         }
     {offset
       c57UT: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Type.Equality.$fRead:~~:_$creadsPrec_entry(R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s56dl_info" {
     sat_s56dl_info:
         const sat_s56dl_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S56eO_srt+376;
 },
 Data.Type.Equality.$fRead:~~:_entry() //  [R2]
         { []
         }
     {offset
       c57UX: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto c57V1; else goto c57V0;
       c57V1: // global
           HpAlloc = 120;
           R2 = R2;
           R1 = Data.Type.Equality.$fRead:~~:_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c57V0: // global
           I64[Hp - 112] = sat_s56do_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_s56dn_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_s56dm_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = sat_s56dl_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 47;
           P64[Hp - 16] = Hp - 72;
           P64[Hp - 8] = Hp - 86;
           P64[Hp] = Hp - 112;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fRead:~~:_info" {
     Data.Type.Equality.$fRead:~~:_info:
         const Data.Type.Equality.$fRead:~~:_entry;
         const 0;
         const 133143986190;
         const 4294967301;
         const S56eO_srt+368;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.772023394 UTC

[section ""data" . Data.Type.Equality.$fBounded:~~:_$cmaxBound_closure" {
     Data.Type.Equality.$fBounded:~~:_$cmaxBound_closure:
         const Data.Type.Equality.$fBounded:~~:_$cmaxBound_info;
 },
 Data.Type.Equality.$fBounded:~~:_$cmaxBound_entry() //  [R2]
         { []
         }
     {offset
       c57Vv: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c57Vw; else goto c57Vx;
       c57Vw: // global
           R2 = R2;
           R1 = Data.Type.Equality.$fBounded:~~:_$cmaxBound_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c57Vx: // global
           I64[Sp - 8] = block_c57Vt_info;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fBounded:~~:_$cmaxBound_info" {
     Data.Type.Equality.$fBounded:~~:_$cmaxBound_info:
         const Data.Type.Equality.$fBounded:~~:_$cmaxBound_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c57Vt() //  []
         { []
         }
     {offset
       c57Vt: // global
           R1 = Data.Type.Equality.$WHRefl_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c57Vt_info" {
     block_c57Vt_info:
         const _c57Vt;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.778644857 UTC

[section ""data" . Data.Type.Equality.$fBounded:~~:_closure" {
     Data.Type.Equality.$fBounded:~~:_closure:
         const Data.Type.Equality.$fBounded:~~:_info;
 },
 sat_s56ds_entry() //  [R1]
         { []
         }
     {offset
       c57VQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c57VR; else goto c57VS;
       c57VR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c57VS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Type.Equality.$fBounded:~~:_$cmaxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s56ds_info" {
     sat_s56ds_info:
         const sat_s56ds_entry;
         const 1;
         const 16;
 },
 sat_s56dr_entry() //  [R1]
         { []
         }
     {offset
       c57VX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c57VY; else goto c57VZ;
       c57VY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c57VZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Type.Equality.$fBounded:~~:_$cmaxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s56dr_info" {
     sat_s56dr_info:
         const sat_s56dr_entry;
         const 1;
         const 16;
 },
 Data.Type.Equality.$fBounded:~~:_entry() //  [R2]
         { []
         }
     {offset
       c57W1: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c57W5; else goto c57W4;
       c57W5: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Data.Type.Equality.$fBounded:~~:_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c57W4: // global
           I64[Hp - 64] = sat_s56ds_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s56dr_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Enum.C:Bounded_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fBounded:~~:_info" {
     Data.Type.Equality.$fBounded:~~:_info:
         const Data.Type.Equality.$fBounded:~~:_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.786702869 UTC

[section ""data" . Data.Type.Equality.sym_closure" {
     Data.Type.Equality.sym_closure:
         const Data.Type.Equality.sym_info;
 },
 Data.Type.Equality.sym_entry() //  [R2]
         { []
         }
     {offset
       c57Ws: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c57Wt; else goto c57Wu;
       c57Wt: // global
           R2 = R2;
           R1 = Data.Type.Equality.sym_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c57Wu: // global
           I64[Sp - 8] = block_c57Wp_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u57Wy; else goto c57Wq;
       u57Wy: // global
           call _c57Wp() args: 0, res: 0, upd: 0;
       c57Wq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.sym_info" {
     Data.Type.Equality.sym_info:
         const Data.Type.Equality.sym_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c57Wp() //  []
         { []
         }
     {offset
       c57Wp: // global
           R1 = Data.Type.Equality.$WRefl_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c57Wp_info" {
     block_c57Wp_info:
         const _c57Wp;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.792953391 UTC

[section ""data" . Data.Type.Equality.trans_closure" {
     Data.Type.Equality.trans_closure:
         const Data.Type.Equality.trans_info;
 },
 Data.Type.Equality.trans_entry() //  [R2, R3]
         { []
         }
     {offset
       c57WQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c57WU; else goto c57WV;
       c57WU: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.trans_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c57WV: // global
           I64[Sp - 16] = block_c57WN_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u57X3; else goto c57WO;
       u57X3: // global
           call _c57WN() args: 0, res: 0, upd: 0;
       c57WO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.trans_info" {
     Data.Type.Equality.trans_info:
         const Data.Type.Equality.trans_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c57WN() //  []
         { []
         }
     {offset
       c57WN: // global
           _s56dw::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c57WT_info;
           R1 = _s56dw::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u57X2; else goto c57WX;
       u57X2: // global
           call _c57WT() args: 0, res: 0, upd: 0;
       c57WX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c57WN_info" {
     block_c57WN_info:
         const _c57WN;
         const 1;
         const 30;
 },
 _c57WT() //  []
         { []
         }
     {offset
       c57WT: // global
           R1 = Data.Type.Equality.$WRefl_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c57WT_info" {
     block_c57WT_info:
         const _c57WT;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.801052394 UTC

[section ""data" . Data.Type.Equality.castWith_closure" {
     Data.Type.Equality.castWith_closure:
         const Data.Type.Equality.castWith_info;
 },
 Data.Type.Equality.castWith_entry() //  [R2, R3]
         { []
         }
     {offset
       c57Xp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c57Xq; else goto c57Xr;
       c57Xq: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.castWith_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c57Xr: // global
           I64[Sp - 16] = block_c57Xm_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u57Xv; else goto c57Xn;
       u57Xv: // global
           call _c57Xm() args: 0, res: 0, upd: 0;
       c57Xn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.castWith_info" {
     Data.Type.Equality.castWith_info:
         const Data.Type.Equality.castWith_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c57Xm() //  []
         { []
         }
     {offset
       c57Xm: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c57Xm_info" {
     block_c57Xm_info:
         const _c57Xm;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.807541009 UTC

[section ""data" . Data.Type.Equality.gcastWith_closure" {
     Data.Type.Equality.gcastWith_closure:
         const Data.Type.Equality.gcastWith_info;
 },
 Data.Type.Equality.gcastWith_entry() //  [R2, R3]
         { []
         }
     {offset
       c57XM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c57XQ; else goto c57XR;
       c57XQ: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.gcastWith_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c57XR: // global
           I64[Sp - 16] = block_c57XJ_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u57XV; else goto c57XK;
       u57XV: // global
           call _c57XJ(R1) args: 0, res: 0, upd: 0;
       c57XK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.gcastWith_info" {
     Data.Type.Equality.gcastWith_info:
         const Data.Type.Equality.gcastWith_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c57XJ() //  [R1]
         { []
         }
     {offset
       c57XJ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c57XU; else goto c57XT;
       c57XU: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c57XT: // global
           I64[Hp - 8] = GHC.Types.Eq#_con_info;
           R2 = Hp - 7;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c57XJ_info" {
     block_c57XJ_info:
         const _c57XJ;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.813868237 UTC

[section ""data" . Data.Type.Equality.apply_closure" {
     Data.Type.Equality.apply_closure:
         const Data.Type.Equality.apply_info;
 },
 Data.Type.Equality.apply_entry() //  [R2, R3]
         { []
         }
     {offset
       c57Yc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c57Yg; else goto c57Yh;
       c57Yg: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.apply_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c57Yh: // global
           I64[Sp - 16] = block_c57Y9_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u57Yp; else goto c57Ya;
       u57Yp: // global
           call _c57Y9() args: 0, res: 0, upd: 0;
       c57Ya: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.apply_info" {
     Data.Type.Equality.apply_info:
         const Data.Type.Equality.apply_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c57Y9() //  []
         { []
         }
     {offset
       c57Y9: // global
           _s56dH::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c57Yf_info;
           R1 = _s56dH::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u57Yo; else goto c57Yj;
       u57Yo: // global
           call _c57Yf() args: 0, res: 0, upd: 0;
       c57Yj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c57Y9_info" {
     block_c57Y9_info:
         const _c57Y9;
         const 1;
         const 30;
 },
 _c57Yf() //  []
         { []
         }
     {offset
       c57Yf: // global
           R1 = Data.Type.Equality.$WRefl_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c57Yf_info" {
     block_c57Yf_info:
         const _c57Yf;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.821170964 UTC

[section ""data" . Data.Type.Equality.inner_closure" {
     Data.Type.Equality.inner_closure:
         const Data.Type.Equality.inner_info;
 },
 Data.Type.Equality.inner_entry() //  [R2]
         { []
         }
     {offset
       c57YL: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c57YM; else goto c57YN;
       c57YM: // global
           R2 = R2;
           R1 = Data.Type.Equality.inner_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c57YN: // global
           I64[Sp - 8] = block_c57YI_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u57YR; else goto c57YJ;
       u57YR: // global
           call _c57YI() args: 0, res: 0, upd: 0;
       c57YJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.inner_info" {
     Data.Type.Equality.inner_info:
         const Data.Type.Equality.inner_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c57YI() //  []
         { []
         }
     {offset
       c57YI: // global
           R1 = Data.Type.Equality.$WRefl_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c57YI_info" {
     block_c57YI_info:
         const _c57YI;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.827596907 UTC

[section ""data" . Data.Type.Equality.outer_closure" {
     Data.Type.Equality.outer_closure:
         const Data.Type.Equality.outer_info;
 },
 Data.Type.Equality.outer_entry() //  [R2]
         { []
         }
     {offset
       c57Z9: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c57Za; else goto c57Zb;
       c57Za: // global
           R2 = R2;
           R1 = Data.Type.Equality.outer_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c57Zb: // global
           I64[Sp - 8] = block_c57Z6_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u57Zf; else goto c57Z7;
       u57Zf: // global
           call _c57Z6() args: 0, res: 0, upd: 0;
       c57Z7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.outer_info" {
     Data.Type.Equality.outer_info:
         const Data.Type.Equality.outer_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c57Z6() //  []
         { []
         }
     {offset
       c57Z6: // global
           R1 = Data.Type.Equality.$WRefl_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c57Z6_info" {
     block_c57Z6_info:
         const _c57Z6;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.832366265 UTC

[section ""cstring" . Data.Type.Equality.$trModule4_bytes" {
     Data.Type.Equality.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.834133279 UTC

[section ""data" . Data.Type.Equality.$trModule3_closure" {
     Data.Type.Equality.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Type.Equality.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.836411529 UTC

[section ""cstring" . Data.Type.Equality.$trModule2_bytes" {
     Data.Type.Equality.$trModule2_bytes:
         I8[] [68,97,116,97,46,84,121,112,101,46,69,113,117,97,108,105,116,121]
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.838228669 UTC

[section ""data" . Data.Type.Equality.$trModule1_closure" {
     Data.Type.Equality.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Type.Equality.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.839806225 UTC

[section ""data" . Data.Type.Equality.$trModule_closure" {
     Data.Type.Equality.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.Type.Equality.$trModule3_closure+1;
         const Data.Type.Equality.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.841647921 UTC

[section ""data" . $krep_r568a_closure" {
     $krep_r568a_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcConstraint_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.843347104 UTC

[section ""data" . $krep1_r568b_closure" {
     $krep1_r568b_closure:
         const GHC.Types.KindRepVar_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.844951643 UTC

[section ""data" . $krep2_r568c_closure" {
     $krep2_r568c_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r568b_closure+2;
         const GHC.Types.krep$*_closure;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.84712943 UTC

[section ""data" . $krep3_r568d_closure" {
     $krep3_r568d_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.848712975 UTC

[section ""data" . Data.Type.Equality.$tc:~~:1_closure" {
     Data.Type.Equality.$tc:~~:1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r568d_closure+2;
         const $krep2_r568c_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.850530215 UTC

[section ""data" . $krep4_r568e_closure" {
     $krep4_r568e_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r568d_closure+2;
         const GHC.Types.krep$*_closure;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.852254688 UTC

[section ""data" . Data.Type.Equality.$tc:~:1_closure" {
     Data.Type.Equality.$tc:~:1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r568d_closure+2;
         const $krep4_r568e_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.854649045 UTC

[section ""data" . Data.Type.Equality.$tcTestEquality1_closure" {
     Data.Type.Equality.$tcTestEquality1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_r568e_closure+4;
         const $krep_r568a_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.85632886 UTC

[section ""data" . $krep5_r568f_closure" {
     $krep5_r568f_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r568d_closure+2;
         const $krep_r568a_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.858037023 UTC

[section ""data" . Data.Type.Equality.$tc~1_closure" {
     Data.Type.Equality.$tc~1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r568d_closure+2;
         const $krep5_r568f_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.859694733 UTC

[section ""data" . $krep6_r568g_closure" {
     $krep6_r568g_closure:
         const GHC.Types.KindRepVar_con_info;
         const 2;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.862027238 UTC

[section ""data" . $krep7_r568h_closure" {
     $krep7_r568h_closure:
         const :_con_info;
         const $krep6_r568g_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.863781283 UTC

[section ""data" . $krep8_r568i_closure" {
     $krep8_r568i_closure:
         const :_con_info;
         const $krep1_r568b_closure+2;
         const $krep7_r568h_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.86556373 UTC

[section ""data" . $krep9_r568j_closure" {
     $krep9_r568j_closure:
         const :_con_info;
         const $krep3_r568d_closure+2;
         const $krep8_r568i_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.867178121 UTC

[section ""data" . $krep10_r568k_closure" {
     $krep10_r568k_closure:
         const :_con_info;
         const $krep3_r568d_closure+2;
         const $krep9_r568j_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.868978377 UTC

[section ""data" . $krep11_r568l_closure" {
     $krep11_r568l_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc~~_closure;
         const $krep10_r568k_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.871565277 UTC

[section ""cstring" . Data.Type.Equality.$tc~3_bytes" {
     Data.Type.Equality.$tc~3_bytes:
         I8[] [126]
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.873199319 UTC

[section ""data" . Data.Type.Equality.$tc~2_closure" {
     Data.Type.Equality.$tc~2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Type.Equality.$tc~3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.874972737 UTC

[section ""data" . Data.Type.Equality.$tc~_closure" {
     Data.Type.Equality.$tc~_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Type.Equality.$trModule_closure+1;
         const Data.Type.Equality.$tc~2_closure+1;
         const Data.Type.Equality.$tc~1_closure+4;
         const 11470827771536267938;
         const 3625512399163125290;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.876827693 UTC

[section ""data" . $krep12_r568m_closure" {
     $krep12_r568m_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Type.Equality.$tc~_closure+1;
         const $krep9_r568j_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.878615646 UTC

[section ""data" . Data.Type.Equality.$tc'C:~1_closure" {
     Data.Type.Equality.$tc'C:~1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep11_r568l_closure+1;
         const $krep12_r568m_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.880344968 UTC

[section ""cstring" . Data.Type.Equality.$tc'C:~3_bytes" {
     Data.Type.Equality.$tc'C:~3_bytes:
         I8[] [39,67,58,126]
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.882119762 UTC

[section ""data" . Data.Type.Equality.$tc'C:~2_closure" {
     Data.Type.Equality.$tc'C:~2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Type.Equality.$tc'C:~3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.883841438 UTC

[section ""data" . Data.Type.Equality.$tc'C:~_closure" {
     Data.Type.Equality.$tc'C:~_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Type.Equality.$trModule_closure+1;
         const Data.Type.Equality.$tc'C:~2_closure+1;
         const Data.Type.Equality.$tc'C:~1_closure+4;
         const 6023002849810837484;
         const 5427525916893308990;
         const 3;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.886263424 UTC

[section ""cstring" . Data.Type.Equality.$tc:~:3_bytes" {
     Data.Type.Equality.$tc:~:3_bytes:
         I8[] [58,126,58]
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.888562858 UTC

[section ""data" . Data.Type.Equality.$tc:~:2_closure" {
     Data.Type.Equality.$tc:~:2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Type.Equality.$tc:~:3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.890531502 UTC

[section ""data" . Data.Type.Equality.$tc:~:_closure" {
     Data.Type.Equality.$tc:~:_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Type.Equality.$trModule_closure+1;
         const Data.Type.Equality.$tc:~:2_closure+1;
         const Data.Type.Equality.$tc:~:1_closure+4;
         const 10597498348876412676;
         const 16281320961088145472;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.892344701 UTC

[section ""data" . $krep13_r568n_closure" {
     $krep13_r568n_closure:
         const :_con_info;
         const $krep1_r568b_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.894140533 UTC

[section ""data" . $krep14_r568o_closure" {
     $krep14_r568o_closure:
         const :_con_info;
         const $krep1_r568b_closure+2;
         const $krep13_r568n_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.895825991 UTC

[section ""data" . $krep15_r568p_closure" {
     $krep15_r568p_closure:
         const :_con_info;
         const $krep3_r568d_closure+2;
         const $krep14_r568o_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.897629036 UTC

[section ""data" . Data.Type.Equality.$tc'Refl1_closure" {
     Data.Type.Equality.$tc'Refl1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Type.Equality.$tc:~:_closure+1;
         const $krep15_r568p_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.899369124 UTC

[section ""cstring" . Data.Type.Equality.$tc'Refl3_bytes" {
     Data.Type.Equality.$tc'Refl3_bytes:
         I8[] [39,82,101,102,108]
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.901041839 UTC

[section ""data" . Data.Type.Equality.$tc'Refl2_closure" {
     Data.Type.Equality.$tc'Refl2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Type.Equality.$tc'Refl3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.902882267 UTC

[section ""data" . Data.Type.Equality.$tc'Refl_closure" {
     Data.Type.Equality.$tc'Refl_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Type.Equality.$trModule_closure+1;
         const Data.Type.Equality.$tc'Refl2_closure+1;
         const Data.Type.Equality.$tc'Refl1_closure+1;
         const 16680242040484769242;
         const 2864388906562808793;
         const 2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.904672162 UTC

[section ""cstring" . Data.Type.Equality.$tc:~~:3_bytes" {
     Data.Type.Equality.$tc:~~:3_bytes:
         I8[] [58,126,126,58]
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.90706761 UTC

[section ""data" . Data.Type.Equality.$tc:~~:2_closure" {
     Data.Type.Equality.$tc:~~:2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Type.Equality.$tc:~~:3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.908852275 UTC

[section ""data" . Data.Type.Equality.$tc:~~:_closure" {
     Data.Type.Equality.$tc:~~:_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Type.Equality.$trModule_closure+1;
         const Data.Type.Equality.$tc:~~:2_closure+1;
         const Data.Type.Equality.$tc:~~:1_closure+4;
         const 4361259188665111259;
         const 11706467685470543992;
         const 2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.91073981 UTC

[section ""data" . $krep16_r568q_closure" {
     $krep16_r568q_closure:
         const :_con_info;
         const $krep3_r568d_closure+2;
         const $krep15_r568p_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.912450429 UTC

[section ""data" . Data.Type.Equality.$tc'HRefl1_closure" {
     Data.Type.Equality.$tc'HRefl1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Type.Equality.$tc:~~:_closure+1;
         const $krep16_r568q_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.914880696 UTC

[section ""cstring" . Data.Type.Equality.$tc'HRefl3_bytes" {
     Data.Type.Equality.$tc'HRefl3_bytes:
         I8[] [39,72,82,101,102,108]
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.916735131 UTC

[section ""data" . Data.Type.Equality.$tc'HRefl2_closure" {
     Data.Type.Equality.$tc'HRefl2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Type.Equality.$tc'HRefl3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.918639181 UTC

[section ""data" . Data.Type.Equality.$tc'HRefl_closure" {
     Data.Type.Equality.$tc'HRefl_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Type.Equality.$trModule_closure+1;
         const Data.Type.Equality.$tc'HRefl2_closure+1;
         const Data.Type.Equality.$tc'HRefl1_closure+1;
         const 4486133906173668740;
         const 6341741464738386857;
         const 2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.920486861 UTC

[section ""cstring" . Data.Type.Equality.$tcTestEquality3_bytes" {
     Data.Type.Equality.$tcTestEquality3_bytes:
         I8[] [84,101,115,116,69,113,117,97,108,105,116,121]
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.922322925 UTC

[section ""data" . Data.Type.Equality.$tcTestEquality2_closure" {
     Data.Type.Equality.$tcTestEquality2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Type.Equality.$tcTestEquality3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.924098459 UTC

[section ""data" . Data.Type.Equality.$tcTestEquality_closure" {
     Data.Type.Equality.$tcTestEquality_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Type.Equality.$trModule_closure+1;
         const Data.Type.Equality.$tcTestEquality2_closure+1;
         const Data.Type.Equality.$tcTestEquality1_closure+4;
         const 2944680549948432194;
         const 17791533211054855448;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.926526319 UTC

[section ""data" . Data.Type.Equality.HRefl_closure" {
     Data.Type.Equality.HRefl_closure:
         const Data.Type.Equality.HRefl_info;
 },
 Data.Type.Equality.HRefl_entry() //  []
         { []
         }
     {offset
       c580j: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c580n; else goto c580m;
       c580n: // global
           HpAlloc = 16;
           R1 = Data.Type.Equality.HRefl_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c580m: // global
           I64[Hp - 8] = Data.Type.Equality.HRefl_con_info;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.HRefl_info" {
     Data.Type.Equality.HRefl_info:
         const Data.Type.Equality.HRefl_entry;
         const 0;
         const 14;
         const 8589934595;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.930940555 UTC

[section ""data" . Data.Type.Equality.Refl_closure" {
     Data.Type.Equality.Refl_closure:
         const Data.Type.Equality.Refl_info;
 },
 Data.Type.Equality.Refl_entry() //  []
         { []
         }
     {offset
       c580y: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c580C; else goto c580B;
       c580C: // global
           HpAlloc = 16;
           R1 = Data.Type.Equality.Refl_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c580B: // global
           I64[Hp - 8] = Data.Type.Equality.Refl_con_info;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.Refl_info" {
     Data.Type.Equality.Refl_info:
         const Data.Type.Equality.Refl_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.934488744 UTC

[section ""cstring" . i57ce_str" {
     i57ce_str:
         I8[] [98,97,115,101,58,68,97,116,97,46,84,121,112,101,46,69,113,117,97,108,105,116,121,46,72,82,101,102,108]
 },
 Data.Type.Equality.HRefl_con_entry() //  [R1]
         { []
         }
     {offset
       c580I: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.HRefl_con_info" {
     Data.Type.Equality.HRefl_con_info:
         const Data.Type.Equality.HRefl_con_entry;
         const 4294967296;
         const 3;
         const i57ce_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.937824993 UTC

[section ""cstring" . i57cg_str" {
     i57cg_str:
         I8[] [98,97,115,101,58,68,97,116,97,46,84,121,112,101,46,69,113,117,97,108,105,116,121,46,82,101,102,108]
 },
 Data.Type.Equality.Refl_con_entry() //  [R1]
         { []
         }
     {offset
       c580O: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.Refl_con_info" {
     Data.Type.Equality.Refl_con_info:
         const Data.Type.Equality.Refl_con_entry;
         const 4294967296;
         const 3;
         const i57cg_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:02.941204113 UTC

[section ""relreadonly" . S56eO_srt" {
     S56eO_srt:
         const GHC.Err.errorWithoutStackTrace_closure;
         const Data.Type.Equality.$fEnum:~:1_closure;
         const Data.Type.Equality.$fEnum:~:_$ctoEnum_closure;
         const Data.Type.Equality.$fEnum:~:_$csucc_closure;
         const Data.Type.Equality.$w$cenumFromTo_closure;
         const Data.Type.Equality.$fEnum:~:_$cenumFromTo_closure;
         const Data.Type.Equality.$w$cenumFromThen_closure;
         const Data.Type.Equality.$fEnum:~:2_closure;
         const Data.Type.Equality.$fEnum:~:_$cenumFromThen_closure;
         const Data.Type.Equality.$w$cenumFrom_closure;
         const Data.Type.Equality.$fEnum:~:_$cenumFrom_closure;
         const Data.Type.Equality.$w$cenumFromThenTo_closure;
         const Data.Type.Equality.$fEnum:~:_$cenumFromThenTo_closure;
         const Data.Type.Equality.$fEnum:~:_closure;
         const Data.Type.Equality.$fEnum:~~:1_closure;
         const Data.Type.Equality.$fEnum:~~:_$ctoEnum_closure;
         const Data.Type.Equality.$fEnum:~~:_$csucc_closure;
         const Data.Type.Equality.$w$cenumFromTo1_closure;
         const Data.Type.Equality.$fEnum:~~:_$cenumFromTo_closure;
         const Data.Type.Equality.$w$cenumFromThen1_closure;
         const Data.Type.Equality.$fEnum:~~:_$cenumFromThen_closure;
         const Data.Type.Equality.$w$cenumFrom1_closure;
         const Data.Type.Equality.$fEnum:~~:_$cenumFrom_closure;
         const Data.Type.Equality.$w$cenumFromThenTo1_closure;
         const Data.Type.Equality.$fEnum:~~:_$cenumFromThenTo_closure;
         const Data.Type.Equality.$fEnum:~~:_closure;
         const Data.Type.Equality.$fRead:~:2_closure;
         const Data.Type.Equality.$fShow:~:_$cshowsPrec_closure;
         const Data.Type.Equality.$fShow:~:_$cshow_closure;
         const Data.Type.Equality.$fShow:~:1_closure;
         const Text.Read.Lex.$wexpect_closure;
         const Data.Type.Equality.$fRead:~:1_closure;
         const Data.Type.Equality.$fRead:~:_lexeme_closure;
         const GHC.Read.list3_closure;
         const Data.Type.Equality.$fRead:~:4_closure;
         const Data.Type.Equality.$fRead:~:_$creadsPrec_closure;
         const GHC.Read.list_closure;
         const Data.Type.Equality.$fRead:~:_$creadListPrec_closure;
         const Data.Type.Equality.$fRead:~:_$creadList_closure;
         const Data.Type.Equality.$fRead:~:_closure;
         const Data.Type.Equality.$fRead:~~:2_closure;
         const Data.Type.Equality.$fShow:~~:_$cshowsPrec_closure;
         const Data.Type.Equality.$fShow:~~:_$cshow_closure;
         const Data.Type.Equality.$fShow:~~:1_closure;
         const Data.Type.Equality.$fRead:~~:1_closure;
         const Data.Type.Equality.$fRead:~~:_lexeme_closure;
         const Data.Type.Equality.$fRead:~~:4_closure;
         const Data.Type.Equality.$fRead:~~:_$creadsPrec_closure;
         const Data.Type.Equality.$fRead:~~:_$creadListPrec_closure;
         const Data.Type.Equality.$fRead:~~:_$creadList_closure;
         const Data.Type.Equality.$fRead:~~:_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:04.964556342 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:00:04.966116203 UTC

[section ""data" . Data.Type.Equality.$p1~_closure" {
     Data.Type.Equality.$p1~_closure:
         const Data.Type.Equality.$p1~_info;
 },
 Data.Type.Equality.$p1~_entry() //  [R2]
         { []
         }
     {offset
       c586l: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$p1~_info" {
     Data.Type.Equality.$p1~_info:
         const Data.Type.Equality.$p1~_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:04.969677067 UTC

[section ""data" . Data.Type.Equality.testEquality_closure" {
     Data.Type.Equality.testEquality_closure:
         const Data.Type.Equality.testEquality_info;
 },
 Data.Type.Equality.testEquality_entry() //  [R2]
         { []
         }
     {offset
       c586y: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.testEquality_info" {
     Data.Type.Equality.testEquality_info:
         const Data.Type.Equality.testEquality_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:04.972676479 UTC

[section ""data" . Data.Type.Equality.$WHRefl_closure" {
     Data.Type.Equality.$WHRefl_closure:
         const Data.Type.Equality.HRefl_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:04.974231958 UTC

[section ""data" . Data.Type.Equality.$WRefl_closure" {
     Data.Type.Equality.$WRefl_closure:
         const Data.Type.Equality.Refl_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:04.976613263 UTC

[section ""data" . Data.Type.Equality.$f~kab_$cp1~_closure" {
     Data.Type.Equality.$f~kab_$cp1~_closure:
         const Data.Type.Equality.$f~kab_$cp1~_info;
 },
 Data.Type.Equality.$f~kab_$cp1~_entry() //  [R2]
         { []
         }
     {offset
       c586N: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c586O; else goto c586P;
       c586O: // global
           R2 = R2;
           R1 = Data.Type.Equality.$f~kab_$cp1~_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c586P: // global
           I64[Sp - 16] = block_c586L_info;
           _s580X::P64 = R2;
           R2 = R2;
           P64[Sp - 8] = _s580X::P64;
           Sp = Sp - 16;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$f~kab_$cp1~_info" {
     Data.Type.Equality.$f~kab_$cp1~_info:
         const Data.Type.Equality.$f~kab_$cp1~_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c586L() //  []
         { []
         }
     {offset
       c586L: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c586L_info" {
     block_c586L_info:
         const _c586L;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:04.981896199 UTC

[section ""data" . Data.Type.Equality.$f~kab_closure" {
     Data.Type.Equality.$f~kab_closure:
         const Data.Type.Equality.$f~kab_info;
 },
 Data.Type.Equality.$f~kab_entry() //  [R2]
         { []
         }
     {offset
       c5876: // global
           R2 = R2;
           call Data.Type.Equality.$f~kab_$cp1~_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$f~kab_info" {
     Data.Type.Equality.$f~kab_info:
         const Data.Type.Equality.$f~kab_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:04.98487312 UTC

[section ""data" . Data.Type.Equality.$fEnum:~:3_closure" {
     Data.Type.Equality.$fEnum:~:3_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:04.987453065 UTC

[section ""data" . Data.Type.Equality.$fEnum:~:_$cfromEnum_closure" {
     Data.Type.Equality.$fEnum:~:_$cfromEnum_closure:
         const Data.Type.Equality.$fEnum:~:_$cfromEnum_info;
 },
 Data.Type.Equality.$fEnum:~:_$cfromEnum_entry() //  [R2, R3]
         { []
         }
     {offset
       c587n: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c587o; else goto c587p;
       c587o: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fEnum:~:_$cfromEnum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c587p: // global
           I64[Sp - 16] = block_c587i_info;
           R2 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fEnum:~:_$cfromEnum_info" {
     Data.Type.Equality.$fEnum:~:_$cfromEnum_info:
         const Data.Type.Equality.$fEnum:~:_$cfromEnum_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c587i() //  []
         { []
         }
     {offset
       c587i: // global
           _s580Z::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c587k_info;
           R1 = _s580Z::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u587u; else goto c587l;
       u587u: // global
           call _c587k() args: 0, res: 0, upd: 0;
       c587l: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c587i_info" {
     block_c587i_info:
         const _c587i;
         const 1;
         const 30;
 },
 _c587k() //  []
         { []
         }
     {offset
       c587k: // global
           R1 = Data.Type.Equality.$fEnum:~:3_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c587k_info" {
     block_c587k_info:
         const _c587k;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:04.99457688 UTC

[section ""cstring" . lvl_r5689_bytes" {
     lvl_r5689_bytes:
         I8[] [68,97,116,97,46,84,121,112,101,46,69,113,117,97,108,105,116,121,46,116,111,69,110,117,109,58,32,98,97,100,32,97,114,103,117,109,101,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:04.997190854 UTC

[section ""data" . Data.Type.Equality.$fEnum:~:1_closure" {
     Data.Type.Equality.$fEnum:~:1_closure:
         const Data.Type.Equality.$fEnum:~:1_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Type.Equality.$fEnum:~:1_entry() //  [R1]
         { []
         }
     {offset
       c587T: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c587U; else goto c587V;
       c587U: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c587V: // global
           (_c587O::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c587O::I64 == 0) goto c587Q; else goto c587P;
       c587Q: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c587P: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c587O::I64;
           I64[Sp - 24] = block_c587R_info;
           R2 = lvl_r5689_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fEnum:~:1_info" {
     Data.Type.Equality.$fEnum:~:1_info:
         const Data.Type.Equality.$fEnum:~:1_entry;
         const 0;
         const 4294967317;
         const S587Z_srt;
 },
 _c587R() //  [R1]
         { []
         }
     {offset
       c587R: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c587R_info" {
     block_c587R_info:
         const _c587R;
         const 0;
         const 4294967326;
         const S587Z_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.00534119 UTC

[section ""data" . Data.Type.Equality.$fEnum:~:_$ctoEnum_closure" {
     Data.Type.Equality.$fEnum:~:_$ctoEnum_closure:
         const Data.Type.Equality.$fEnum:~:_$ctoEnum_info;
         const 0;
 },
 Data.Type.Equality.$fEnum:~:_$ctoEnum_entry() //  [R2, R3]
         { []
         }
     {offset
       c588l: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c588m; else goto c588n;
       c588m: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fEnum:~:_$ctoEnum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c588n: // global
           I64[Sp - 16] = block_c588g_info;
           R2 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fEnum:~:_$ctoEnum_info" {
     Data.Type.Equality.$fEnum:~:_$ctoEnum_info:
         const Data.Type.Equality.$fEnum:~:_$ctoEnum_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S587Z_srt+8;
 },
 _c588g() //  []
         { []
         }
     {offset
       c588g: // global
           _s5813::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c588i_info;
           R1 = _s5813::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u588w; else goto c588j;
       u588w: // global
           call _c588i(R1) args: 0, res: 0, upd: 0;
       c588j: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c588g_info" {
     block_c588g_info:
         const _c588g;
         const 1;
         const 4294967326;
         const S587Z_srt+8;
 },
 _c588i() //  [R1]
         { []
         }
     {offset
       c588i: // global
           if (I64[R1 + 7] == 0) goto c588v; else goto c588u;
       c588v: // global
           R1 = Data.Type.Equality.$WRefl_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c588u: // global
           R1 = Data.Type.Equality.$fEnum:~:1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c588i_info" {
     block_c588i_info:
         const _c588i;
         const 0;
         const 4294967326;
         const S587Z_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.015218464 UTC

[section ""data" . Data.Type.Equality.$fEnum:~:_$csucc_closure" {
     Data.Type.Equality.$fEnum:~:_$csucc_closure:
         const Data.Type.Equality.$fEnum:~:_$csucc_info;
         const 0;
 },
 Data.Type.Equality.$fEnum:~:_$csucc_entry() //  [R2, R3]
         { []
         }
     {offset
       c588V: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c588W; else goto c588X;
       c588W: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fEnum:~:_$csucc_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c588X: // global
           I64[Sp - 16] = block_c588R_info;
           _s5817::P64 = R2;
           R2 = R2;
           P64[Sp - 8] = _s5817::P64;
           Sp = Sp - 16;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fEnum:~:_$csucc_info" {
     Data.Type.Equality.$fEnum:~:_$csucc_info:
         const Data.Type.Equality.$fEnum:~:_$csucc_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S587Z_srt+8;
 },
 _c588R() //  []
         { []
         }
     {offset
       c588R: // global
           _s5817::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c588T_info;
           R2 = _s5817::P64;
           Sp = Sp + 8;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c588R_info" {
     block_c588R_info:
         const _c588R;
         const 1;
         const 4294967326;
         const S587Z_srt+8;
 },
 _c588T() //  []
         { []
         }
     {offset
       c588T: // global
           R1 = Data.Type.Equality.$fEnum:~:1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c588T_info" {
     block_c588T_info:
         const _c588T;
         const 0;
         const 4294967326;
         const S587Z_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.029540904 UTC

[section ""data" . Data.Type.Equality.$w$cenumFromTo_closure" {
     Data.Type.Equality.$w$cenumFromTo_closure:
         const Data.Type.Equality.$w$cenumFromTo_info;
         const 0;
 },
 sat_s581i_entry() //  [R1]
         { []
         }
     {offset
       c589z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c589A; else goto c589B;
       c589A: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c589B: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s581g::I64 = I64[R1 + 24];
           if (_s581g::I64 != 0) goto c589x; else goto c589y;
       c589x: // global
           R2 = _s581g::I64 + 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_s581c_entry(R2, R1) args: 24, res: 0, upd: 24;
       c589y: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s581i_info" {
     sat_s581i_info:
         const sat_s581i_entry;
         const 4294967297;
         const 4294967315;
         const S587Z_srt+8;
 },
 sat_s581f_entry() //  [R1]
         { []
         }
     {offset
       c589M: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c589N; else goto c589O;
       c589N: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c589O: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto c589L; else goto c589K;
       c589L: // global
           R1 = Data.Type.Equality.$WRefl_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c589K: // global
           R1 = Data.Type.Equality.$fEnum:~:1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s581f_info" {
     sat_s581f_info:
         const sat_s581f_entry;
         const 4294967296;
         const 4294967313;
         const S587Z_srt+8;
 },
 go_s581c_entry() //  [R1, R2]
         { []
         }
     {offset
       c589Q: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c589U; else goto c589T;
       c589U: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c589T: // global
           I64[Hp - 72] = sat_s581i_info;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s581f_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_s581c_info" {
     go_s581c_info:
         const go_s581c_entry;
         const 4294967296;
         const 4294967306;
         const 4294967300;
         const S587Z_srt+8;
 },
 Data.Type.Equality.$w$cenumFromTo_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c589V: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c589W; else goto c589X;
       c589W: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$w$cenumFromTo_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c589X: // global
           I64[Sp - 16] = block_c589i_info;
           _s5819::P64 = R2;
           R2 = R2;
           P64[Sp - 8] = _s5819::P64;
           Sp = Sp - 16;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$w$cenumFromTo_info" {
     Data.Type.Equality.$w$cenumFromTo_info:
         const Data.Type.Equality.$w$cenumFromTo_entry;
         const 0;
         const 38654705678;
         const 12884901911;
         const S587Z_srt+8;
 },
 _c589i() //  []
         { []
         }
     {offset
       c589i: // global
           _s5819::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c589k_info;
           R2 = _s5819::P64;
           Sp = Sp + 8;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c589i_info" {
     block_c589i_info:
         const _c589i;
         const 1;
         const 4294967326;
         const S587Z_srt+8;
 },
 _c589k() //  []
         { []
         }
     {offset
       c589k: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c58a1; else goto c58a0;
       c58a1: // global
           HpAlloc = 16;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c58a0: // global
           I64[Hp - 8] = go_s581c_info;
           R2 = 0;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call go_s581c_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c589k_info" {
     block_c589k_info:
         const _c589k;
         const 0;
         const 4294967326;
         const S587Z_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.045928156 UTC

[section ""data" . Data.Type.Equality.$fEnum:~:_$cenumFromTo_closure" {
     Data.Type.Equality.$fEnum:~:_$cenumFromTo_closure:
         const Data.Type.Equality.$fEnum:~:_$cenumFromTo_info;
         const 0;
 },
 Data.Type.Equality.$fEnum:~:_$cenumFromTo_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c58aK: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c58aO; else goto c58aP;
       c58aO: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fEnum:~:_$cenumFromTo_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c58aP: // global
           I64[Sp - 24] = block_c58aH_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u58aX; else goto c58aI;
       u58aX: // global
           call _c58aH(R1) args: 0, res: 0, upd: 0;
       c58aI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fEnum:~:_$cenumFromTo_info" {
     Data.Type.Equality.$fEnum:~:_$cenumFromTo_info:
         const Data.Type.Equality.$fEnum:~:_$cenumFromTo_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S587Z_srt+32;
 },
 _c58aH() //  [R1]
         { []
         }
     {offset
       c58aH: // global
           I64[Sp] = block_c58aN_info;
           _s581m::P64 = R1;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s581m::P64;
           if (R1 & 7 != 0) goto u58aW; else goto c58aR;
       u58aW: // global
           call _c58aN(R1) args: 0, res: 0, upd: 0;
       c58aR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c58aH_info" {
     block_c58aH_info:
         const _c58aH;
         const 2;
         const 4294967326;
         const S587Z_srt+32;
 },
 _c58aN() //  [R1]
         { []
         }
     {offset
       c58aN: // global
           R4 = R1;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Type.Equality.$w$cenumFromTo_entry(R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c58aN_info" {
     block_c58aN_info:
         const _c58aN;
         const 2;
         const 4294967326;
         const S587Z_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.053371164 UTC

[section ""data" . Data.Type.Equality.$fEnum:~:2_closure" {
     Data.Type.Equality.$fEnum:~:2_closure:
         const Data.Type.Equality.$fEnum:~:2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Type.Equality.$fEnum:~:2_entry() //  [R1]
         { []
         }
     {offset
       c58bj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c58bk; else goto c58bl;
       c58bk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c58bl: // global
           (_c58bg::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c58bg::I64 == 0) goto c58bi; else goto c58bh;
       c58bi: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c58bh: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c58bg::I64;
           R3 = 0;
           R2 = 0;
           Sp = Sp - 16;
           call GHC.Enum.efdInt_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fEnum:~:2_info" {
     Data.Type.Equality.$fEnum:~:2_info:
         const Data.Type.Equality.$fEnum:~:2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.058544498 UTC

[section ""data" . Data.Type.Equality.$w$cenumFromThen_closure" {
     Data.Type.Equality.$w$cenumFromThen_closure:
         const Data.Type.Equality.$w$cenumFromThen_info;
         const 0;
 },
 sat_s581r_entry() //  [R1, R2]
         { []
         }
     {offset
       c58bH: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Type.Equality.$fEnum:~:_$ctoEnum_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s581r_info" {
     sat_s581r_info:
         const sat_s581r_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S587Z_srt+16;
 },
 Data.Type.Equality.$w$cenumFromThen_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c58bK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c58bL; else goto c58bM;
       c58bL: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$w$cenumFromThen_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c58bM: // global
           I64[Sp - 16] = block_c58by_info;
           _s581o::P64 = R2;
           R2 = R2;
           P64[Sp - 8] = _s581o::P64;
           Sp = Sp - 16;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$w$cenumFromThen_info" {
     Data.Type.Equality.$w$cenumFromThen_info:
         const Data.Type.Equality.$w$cenumFromThen_entry;
         const 0;
         const 210453397518;
         const 12884901911;
         const S587Z_srt+16;
 },
 _c58by() //  []
         { []
         }
     {offset
       c58by: // global
           I64[Sp] = block_c58bA_info;
           R2 = P64[Sp + 8];
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c58by_info" {
     block_c58by_info:
         const _c58by;
         const 1;
         const 141733920798;
         const S587Z_srt+16;
 },
 _c58bA() //  []
         { []
         }
     {offset
       c58bA: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c58bQ; else goto c58bP;
       c58bQ: // global
           HpAlloc = 16;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c58bP: // global
           I64[Hp - 8] = sat_s581r_info;
           P64[Hp] = P64[Sp + 8];
           R3 = Data.Type.Equality.$fEnum:~:2_closure;
           R2 = Hp - 7;
           Sp = Sp + 16;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c58bA_info" {
     block_c58bA_info:
         const _c58bA;
         const 1;
         const 141733920798;
         const S587Z_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.069432656 UTC

[section ""data" . Data.Type.Equality.$fEnum:~:_$cenumFromThen_closure" {
     Data.Type.Equality.$fEnum:~:_$cenumFromThen_closure:
         const Data.Type.Equality.$fEnum:~:_$cenumFromThen_info;
         const 0;
 },
 Data.Type.Equality.$fEnum:~:_$cenumFromThen_entry() //  [R2, R3,
                                                          R4]
         { []
         }
     {offset
       c58cg: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c58ck; else goto c58cl;
       c58ck: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fEnum:~:_$cenumFromThen_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c58cl: // global
           I64[Sp - 24] = block_c58cd_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u58ct; else goto c58ce;
       u58ct: // global
           call _c58cd(R1) args: 0, res: 0, upd: 0;
       c58ce: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fEnum:~:_$cenumFromThen_info" {
     Data.Type.Equality.$fEnum:~:_$cenumFromThen_info:
         const Data.Type.Equality.$fEnum:~:_$cenumFromThen_entry;
         const 0;
         const 21474836494;
         const 12884901911;
         const S587Z_srt+48;
 },
 _c58cd() //  [R1]
         { []
         }
     {offset
       c58cd: // global
           I64[Sp] = block_c58cj_info;
           _s581v::P64 = R1;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s581v::P64;
           if (R1 & 7 != 0) goto u58cs; else goto c58cn;
       u58cs: // global
           call _c58cj(R1) args: 0, res: 0, upd: 0;
       c58cn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c58cd_info" {
     block_c58cd_info:
         const _c58cd;
         const 2;
         const 4294967326;
         const S587Z_srt+48;
 },
 _c58cj() //  [R1]
         { []
         }
     {offset
       c58cj: // global
           R4 = R1;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Type.Equality.$w$cenumFromThen_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c58cj_info" {
     block_c58cj_info:
         const _c58cj;
         const 2;
         const 4294967326;
         const S587Z_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.083918267 UTC

[section ""data" . Data.Type.Equality.$w$cenumFrom_closure" {
     Data.Type.Equality.$w$cenumFrom_closure:
         const Data.Type.Equality.$w$cenumFrom_info;
         const 0;
 },
 sat_s581F_entry() //  [R1]
         { []
         }
     {offset
       c58d4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c58d5; else goto c58d6;
       c58d5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c58d6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s581D::I64 = I64[R1 + 24];
           if (_s581D::I64 != 9223372036854775807) goto c58d2; else goto c58d3;
       c58d2: // global
           R2 = _s581D::I64 + 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_s581z_entry(R2, R1) args: 24, res: 0, upd: 24;
       c58d3: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s581F_info" {
     sat_s581F_info:
         const sat_s581F_entry;
         const 4294967297;
         const 4294967315;
         const S587Z_srt+8;
 },
 sat_s581C_entry() //  [R1]
         { []
         }
     {offset
       c58dh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c58di; else goto c58dj;
       c58di: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c58dj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto c58dg; else goto c58df;
       c58dg: // global
           R1 = Data.Type.Equality.$WRefl_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c58df: // global
           R1 = Data.Type.Equality.$fEnum:~:1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s581C_info" {
     sat_s581C_info:
         const sat_s581C_entry;
         const 4294967296;
         const 4294967313;
         const S587Z_srt+8;
 },
 go_s581z_entry() //  [R1, R2]
         { []
         }
     {offset
       c58dl: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c58dp; else goto c58do;
       c58dp: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c58do: // global
           I64[Hp - 72] = sat_s581F_info;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s581C_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_s581z_info" {
     go_s581z_info:
         const go_s581z_entry;
         const 4294967296;
         const 4294967306;
         const 4294967300;
         const S587Z_srt+8;
 },
 Data.Type.Equality.$w$cenumFrom_entry() //  [R2, R3]
         { []
         }
     {offset
       c58dq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c58dr; else goto c58ds;
       c58dr: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$w$cenumFrom_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c58ds: // global
           I64[Sp - 16] = block_c58cN_info;
           _s581x::P64 = R2;
           R2 = R2;
           P64[Sp - 8] = _s581x::P64;
           Sp = Sp - 16;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$w$cenumFrom_info" {
     Data.Type.Equality.$w$cenumFrom_info:
         const Data.Type.Equality.$w$cenumFrom_entry;
         const 0;
         const 1103806595086;
         const 8589934607;
         const S587Z_srt+8;
 },
 _c58cN() //  []
         { []
         }
     {offset
       c58cN: // global
           _s581x::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c58cP_info;
           R2 = _s581x::P64;
           Sp = Sp + 8;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c58cN_info" {
     block_c58cN_info:
         const _c58cN;
         const 1;
         const 4294967326;
         const S587Z_srt+8;
 },
 _c58cP() //  []
         { []
         }
     {offset
       c58cP: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c58dw; else goto c58dv;
       c58dw: // global
           HpAlloc = 16;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c58dv: // global
           I64[Hp - 8] = go_s581z_info;
           R2 = 0;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call go_s581z_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c58cP_info" {
     block_c58cP_info:
         const _c58cP;
         const 0;
         const 4294967326;
         const S587Z_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.104822146 UTC

[section ""data" . Data.Type.Equality.$fEnum:~:_$cenumFrom_closure" {
     Data.Type.Equality.$fEnum:~:_$cenumFrom_closure:
         const Data.Type.Equality.$fEnum:~:_$cenumFrom_info;
         const 0;
 },
 Data.Type.Equality.$fEnum:~:_$cenumFrom_entry() //  [R2, R3]
         { []
         }
     {offset
       c58eg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c58eh; else goto c58ei;
       c58eh: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fEnum:~:_$cenumFrom_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c58ei: // global
           I64[Sp - 16] = block_c58ed_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u58em; else goto c58ee;
       u58em: // global
           call _c58ed(R1) args: 0, res: 0, upd: 0;
       c58ee: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fEnum:~:_$cenumFrom_info" {
     Data.Type.Equality.$fEnum:~:_$cenumFrom_info:
         const Data.Type.Equality.$fEnum:~:_$cenumFrom_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S587Z_srt+72;
 },
 _c58ed() //  [R1]
         { []
         }
     {offset
       c58ed: // global
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Type.Equality.$w$cenumFrom_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c58ed_info" {
     block_c58ed_info:
         const _c58ed;
         const 1;
         const 4294967326;
         const S587Z_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.118971419 UTC

[section ""data" . Data.Type.Equality.$w$cenumFromThenTo_closure" {
     Data.Type.Equality.$w$cenumFromThenTo_closure:
         const Data.Type.Equality.$w$cenumFromThenTo_info;
         const 0;
 },
 sat_s581S_entry() //  [R1]
         { []
         }
     {offset
       c58eV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c58eW; else goto c58eX;
       c58eW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c58eX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s581N_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s581S_info" {
     sat_s581S_info:
         const sat_s581S_entry;
         const 4294967297;
         const 4294967315;
         const S587Z_srt+8;
 },
 sat_s581R_entry() //  [R1]
         { []
         }
     {offset
       c58f6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c58f7; else goto c58f8;
       c58f7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c58f8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto c58f5; else goto c58f4;
       c58f5: // global
           R1 = Data.Type.Equality.$WRefl_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c58f4: // global
           R1 = Data.Type.Equality.$fEnum:~:1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s581R_info" {
     sat_s581R_info:
         const sat_s581R_entry;
         const 4294967296;
         const 4294967313;
         const S587Z_srt+8;
 },
 sat_s581U_entry() //  [R1]
         { []
         }
     {offset
       c58fi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c58fj; else goto c58fk;
       c58fj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c58fk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto c58fh; else goto c58fg;
       c58fh: // global
           R1 = Data.Type.Equality.$WRefl_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c58fg: // global
           R1 = Data.Type.Equality.$fEnum:~:1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s581U_info" {
     sat_s581U_info:
         const sat_s581U_entry;
         const 4294967296;
         const 4294967313;
         const S587Z_srt+8;
 },
 go_up_s581N_entry() //  [R1, R2]
         { []
         }
     {offset
       c58fo: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c58fs; else goto c58fr;
       c58fs: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c58fr: // global
           if (%MO_S_Le_W64(R2, 0)) goto c58fm; else goto c58fn;
       c58fm: // global
           I64[Hp - 72] = sat_s581S_info;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s581R_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c58fn: // global
           I64[Hp - 72] = sat_s581U_info;
           I64[Hp - 56] = R2;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c58fu::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c58fu::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_s581N_info" {
     go_up_s581N_info:
         const go_up_s581N_entry;
         const 4294967296;
         const 4294967306;
         const 4294967300;
         const S587Z_srt+8;
 },
 sat_s581V_entry() //  [R1]
         { []
         }
     {offset
       c58fv: // global
           _s581V::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c58fw; else goto c58fx;
       c58fx: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c58fz; else goto c58fy;
       c58fz: // global
           HpAlloc = 16;
           goto c58fw;
       c58fw: // global
           R1 = _s581V::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c58fy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s581V::P64;
           I64[Hp - 8] = go_up_s581N_info;
           R2 = 0;
           R1 = Hp - 7;
           Sp = Sp - 16;
           call go_up_s581N_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s581V_info" {
     sat_s581V_info:
         const sat_s581V_entry;
         const 0;
         const 4294967311;
         const S587Z_srt+8;
 },
 Data.Type.Equality.$w$cenumFromThenTo_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c58fA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c58fB; else goto c58fC;
       c58fB: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$w$cenumFromThenTo_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c58fC: // global
           I64[Sp - 16] = block_c58eB_info;
           _s581J::P64 = R2;
           R2 = R2;
           P64[Sp - 8] = _s581J::P64;
           Sp = Sp - 16;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$w$cenumFromThenTo_info" {
     Data.Type.Equality.$w$cenumFromThenTo_info:
         const Data.Type.Equality.$w$cenumFromThenTo_entry;
         const 0;
         const 4402341478414;
         const 17179869208;
         const S587Z_srt+8;
 },
 _c58eB() //  []
         { []
         }
     {offset
       c58eB: // global
           _s581J::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c58eD_info;
           R2 = _s581J::P64;
           Sp = Sp + 8;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c58eB_info" {
     block_c58eB_info:
         const _c58eB;
         const 1;
         const 4294967326;
         const S587Z_srt+8;
 },
 _c58eD() //  []
         { []
         }
     {offset
       c58eD: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c58fG; else goto c58fF;
       c58fG: // global
           HpAlloc = 16;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c58fF: // global
           I64[Hp - 8] = sat_s581V_info;
           R2 = Hp - 8;
           R1 = Data.Type.Equality.$WRefl_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c58eD_info" {
     block_c58eD_info:
         const _c58eD;
         const 0;
         const 4294967326;
         const S587Z_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.146654606 UTC

[section ""data" . Data.Type.Equality.$fEnum:~:_$cenumFromThenTo_closure" {
     Data.Type.Equality.$fEnum:~:_$cenumFromThenTo_closure:
         const Data.Type.Equality.$fEnum:~:_$cenumFromThenTo_info;
         const 0;
 },
 Data.Type.Equality.$fEnum:~:_$cenumFromThenTo_entry() //  [R2, R3,
                                                            R4, R5]
         { []
         }
     {offset
       c58gH: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c58gX; else goto c58gY;
       c58gX: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fEnum:~:_$cenumFromThenTo_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c58gY: // global
           I64[Sp - 32] = block_c58gE_info;
           R1 = R3;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u58h6; else goto c58gF;
       u58h6: // global
           call _c58gE(R1) args: 0, res: 0, upd: 0;
       c58gF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fEnum:~:_$cenumFromThenTo_info" {
     Data.Type.Equality.$fEnum:~:_$cenumFromThenTo_info:
         const Data.Type.Equality.$fEnum:~:_$cenumFromThenTo_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const S587Z_srt+88;
 },
 _c58gE() //  [R1]
         { []
         }
     {offset
       c58gE: // global
           I64[Sp] = block_c58gK_info;
           _s5820::P64 = R1;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s5820::P64;
           if (R1 & 7 != 0) goto u58h5; else goto c58gL;
       u58h5: // global
           call _c58gK(R1) args: 0, res: 0, upd: 0;
       c58gL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c58gE_info" {
     block_c58gE_info:
         const _c58gE;
         const 3;
         const 4294967326;
         const S587Z_srt+88;
 },
 _c58gK() //  [R1]
         { []
         }
     {offset
       c58gK: // global
           I64[Sp] = block_c58gP_info;
           _s5821::P64 = R1;
           R1 = P64[Sp + 24];
           P64[Sp + 24] = _s5821::P64;
           if (R1 & 7 != 0) goto u58h7; else goto c58gQ;
       u58h7: // global
           call _c58gP(R1) args: 0, res: 0, upd: 0;
       c58gQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c58gK_info" {
     block_c58gK_info:
         const _c58gK;
         const 3;
         const 4294967326;
         const S587Z_srt+88;
 },
 _c58gP() //  [R1]
         { []
         }
     {offset
       c58gP: // global
           _s5821::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_c58gU_info;
           R5 = R1;
           R4 = _s5821::P64;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Type.Equality.$w$cenumFromThenTo_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c58gP_info" {
     block_c58gP_info:
         const _c58gP;
         const 3;
         const 4294967326;
         const S587Z_srt+88;
 },
 _c58gU() //  [R1, R2]
         { []
         }
     {offset
       c58gU: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c58h4; else goto c58h3;
       c58h4: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c58h3: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c58gU_info" {
     block_c58gU_info:
         const _c58gU;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.166947012 UTC

[section ""data" . Data.Type.Equality.$fEnum:~:_closure" {
     Data.Type.Equality.$fEnum:~:_closure:
         const Data.Type.Equality.$fEnum:~:_info;
         const 0;
 },
 sat_s582e_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c58hH: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Type.Equality.$fEnum:~:_$cenumFromThenTo_entry(R5,
                                                                    R4,
                                                                    R3,
                                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s582e_info" {
     sat_s582e_info:
         const sat_s582e_entry;
         const 1;
         const 4294967305;
         const 12884901911;
         const S587Z_srt+96;
 },
 sat_s582d_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c58hP: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Type.Equality.$fEnum:~:_$cenumFromTo_entry(R4,
                                                                R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s582d_info" {
     sat_s582d_info:
         const sat_s582d_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S587Z_srt+40;
 },
 sat_s582c_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c58hX: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Type.Equality.$fEnum:~:_$cenumFromThen_entry(R4,
                                                                  R3,
                                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s582c_info" {
     sat_s582c_info:
         const sat_s582c_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S587Z_srt+64;
 },
 sat_s582b_entry() //  [R1, R2]
         { []
         }
     {offset
       c58i5: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Type.Equality.$fEnum:~:_$cenumFrom_entry(R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s582b_info" {
     sat_s582b_info:
         const sat_s582b_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S587Z_srt+80;
 },
 sat_s582a_entry() //  [R1, R2]
         { []
         }
     {offset
       c58id: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Type.Equality.$fEnum:~:_$cfromEnum_entry(R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s582a_info" {
     sat_s582a_info:
         const sat_s582a_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s5829_entry() //  [R1, R2]
         { []
         }
     {offset
       c58il: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Type.Equality.$fEnum:~:_$ctoEnum_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s5829_info" {
     sat_s5829_info:
         const sat_s5829_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S587Z_srt+16;
 },
 sat_s5828_entry() //  [R1, R2]
         { []
         }
     {offset
       c58it: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Type.Equality.$fEnum:~:_$csucc_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s5828_info" {
     sat_s5828_info:
         const sat_s5828_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S587Z_srt+24;
 },
 sat_s5827_entry() //  [R1, R2]
         { []
         }
     {offset
       c58iB: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Type.Equality.$fEnum:~:_$csucc_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s5827_info" {
     sat_s5827_info:
         const sat_s5827_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S587Z_srt+24;
 },
 Data.Type.Equality.$fEnum:~:_entry() //  [R2]
         { []
         }
     {offset
       c58iF: // global
           Hp = Hp + 200;
           if (Hp > HpLim) (likely: False) goto c58iJ; else goto c58iI;
       c58iJ: // global
           HpAlloc = 200;
           R2 = R2;
           R1 = Data.Type.Equality.$fEnum:~:_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c58iI: // global
           I64[Hp - 192] = sat_s582e_info;
           P64[Hp - 184] = R2;
           I64[Hp - 176] = sat_s582d_info;
           P64[Hp - 168] = R2;
           I64[Hp - 160] = sat_s582c_info;
           P64[Hp - 152] = R2;
           I64[Hp - 144] = sat_s582b_info;
           P64[Hp - 136] = R2;
           I64[Hp - 128] = sat_s582a_info;
           P64[Hp - 120] = R2;
           I64[Hp - 112] = sat_s5829_info;
           P64[Hp - 104] = R2;
           I64[Hp - 96] = sat_s5828_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_s5827_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = GHC.Enum.C:Enum_con_info;
           P64[Hp - 56] = Hp - 79;
           P64[Hp - 48] = Hp - 95;
           P64[Hp - 40] = Hp - 111;
           P64[Hp - 32] = Hp - 127;
           P64[Hp - 24] = Hp - 143;
           P64[Hp - 16] = Hp - 158;
           P64[Hp - 8] = Hp - 174;
           P64[Hp] = Hp - 189;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fEnum:~:_info" {
     Data.Type.Equality.$fEnum:~:_info:
         const Data.Type.Equality.$fEnum:~:_entry;
         const 0;
         const 14615773708302;
         const 4294967301;
         const S587Z_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.191939483 UTC

[section ""data" . Data.Type.Equality.$fEnum:~~:_$cfromEnum_closure" {
     Data.Type.Equality.$fEnum:~~:_$cfromEnum_closure:
         const Data.Type.Equality.$fEnum:~~:_$cfromEnum_info;
 },
 Data.Type.Equality.$fEnum:~~:_$cfromEnum_entry() //  [R2, R3]
         { []
         }
     {offset
       c58jD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c58jE; else goto c58jF;
       c58jE: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fEnum:~~:_$cfromEnum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c58jF: // global
           I64[Sp - 16] = block_c58jy_info;
           R2 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fEnum:~~:_$cfromEnum_info" {
     Data.Type.Equality.$fEnum:~~:_$cfromEnum_info:
         const Data.Type.Equality.$fEnum:~~:_$cfromEnum_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c58jy() //  []
         { []
         }
     {offset
       c58jy: // global
           _s582g::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c58jA_info;
           R1 = _s582g::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u58jK; else goto c58jB;
       u58jK: // global
           call _c58jA() args: 0, res: 0, upd: 0;
       c58jB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c58jy_info" {
     block_c58jy_info:
         const _c58jy;
         const 1;
         const 30;
 },
 _c58jA() //  []
         { []
         }
     {offset
       c58jA: // global
           R1 = Data.Type.Equality.$fEnum:~:3_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c58jA_info" {
     block_c58jA_info:
         const _c58jA;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.202964138 UTC

[section ""data" . Data.Type.Equality.$fEnum:~~:1_closure" {
     Data.Type.Equality.$fEnum:~~:1_closure:
         const Data.Type.Equality.$fEnum:~~:1_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Type.Equality.$fEnum:~~:1_entry() //  [R1]
         { []
         }
     {offset
       c58k8: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c58k9; else goto c58ka;
       c58k9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c58ka: // global
           (_c58k3::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c58k3::I64 == 0) goto c58k5; else goto c58k4;
       c58k5: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c58k4: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c58k3::I64;
           I64[Sp - 24] = block_c58k6_info;
           R2 = lvl_r5689_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fEnum:~~:1_info" {
     Data.Type.Equality.$fEnum:~~:1_info:
         const Data.Type.Equality.$fEnum:~~:1_entry;
         const 0;
         const 4294967317;
         const S587Z_srt;
 },
 _c58k6() //  [R1]
         { []
         }
     {offset
       c58k6: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c58k6_info" {
     block_c58k6_info:
         const _c58k6;
         const 0;
         const 4294967326;
         const S587Z_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.212536466 UTC

[section ""data" . Data.Type.Equality.$fEnum:~~:_$ctoEnum_closure" {
     Data.Type.Equality.$fEnum:~~:_$ctoEnum_closure:
         const Data.Type.Equality.$fEnum:~~:_$ctoEnum_info;
         const 0;
 },
 Data.Type.Equality.$fEnum:~~:_$ctoEnum_entry() //  [R2, R3]
         { []
         }
     {offset
       c58kz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c58kA; else goto c58kB;
       c58kA: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fEnum:~~:_$ctoEnum_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c58kB: // global
           I64[Sp - 16] = block_c58ku_info;
           R2 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fEnum:~~:_$ctoEnum_info" {
     Data.Type.Equality.$fEnum:~~:_$ctoEnum_info:
         const Data.Type.Equality.$fEnum:~~:_$ctoEnum_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S587Z_srt+112;
 },
 _c58ku() //  []
         { []
         }
     {offset
       c58ku: // global
           _s582k::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c58kw_info;
           R1 = _s582k::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u58kK; else goto c58kx;
       u58kK: // global
           call _c58kw(R1) args: 0, res: 0, upd: 0;
       c58kx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c58ku_info" {
     block_c58ku_info:
         const _c58ku;
         const 1;
         const 4294967326;
         const S587Z_srt+112;
 },
 _c58kw() //  [R1]
         { []
         }
     {offset
       c58kw: // global
           if (I64[R1 + 7] == 0) goto c58kJ; else goto c58kI;
       c58kJ: // global
           R1 = Data.Type.Equality.$WHRefl_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c58kI: // global
           R1 = Data.Type.Equality.$fEnum:~~:1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c58kw_info" {
     block_c58kw_info:
         const _c58kw;
         const 0;
         const 4294967326;
         const S587Z_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.223895127 UTC

[section ""data" . Data.Type.Equality.$fEnum:~~:_$csucc_closure" {
     Data.Type.Equality.$fEnum:~~:_$csucc_closure:
         const Data.Type.Equality.$fEnum:~~:_$csucc_info;
         const 0;
 },
 Data.Type.Equality.$fEnum:~~:_$csucc_entry() //  [R2, R3]
         { []
         }
     {offset
       c58l9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c58la; else goto c58lb;
       c58la: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fEnum:~~:_$csucc_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c58lb: // global
           I64[Sp - 16] = block_c58l5_info;
           _s582o::P64 = R2;
           R2 = R2;
           P64[Sp - 8] = _s582o::P64;
           Sp = Sp - 16;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fEnum:~~:_$csucc_info" {
     Data.Type.Equality.$fEnum:~~:_$csucc_info:
         const Data.Type.Equality.$fEnum:~~:_$csucc_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S587Z_srt+112;
 },
 _c58l5() //  []
         { []
         }
     {offset
       c58l5: // global
           _s582o::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c58l7_info;
           R2 = _s582o::P64;
           Sp = Sp + 8;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c58l5_info" {
     block_c58l5_info:
         const _c58l5;
         const 1;
         const 4294967326;
         const S587Z_srt+112;
 },
 _c58l7() //  []
         { []
         }
     {offset
       c58l7: // global
           R1 = Data.Type.Equality.$fEnum:~~:1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c58l7_info" {
     block_c58l7_info:
         const _c58l7;
         const 0;
         const 4294967326;
         const S587Z_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.232695503 UTC

[section ""data" . Data.Type.Equality.$w$cenumFromTo1_closure" {
     Data.Type.Equality.$w$cenumFromTo1_closure:
         const Data.Type.Equality.$w$cenumFromTo1_info;
         const 0;
 },
 sat_s582z_entry() //  [R1]
         { []
         }
     {offset
       c58lN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c58lO; else goto c58lP;
       c58lO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c58lP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s582x::I64 = I64[R1 + 24];
           if (_s582x::I64 != 0) goto c58lL; else goto c58lM;
       c58lL: // global
           R2 = _s582x::I64 + 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_s582t_entry(R2, R1) args: 24, res: 0, upd: 24;
       c58lM: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s582z_info" {
     sat_s582z_info:
         const sat_s582z_entry;
         const 4294967297;
         const 4294967315;
         const S587Z_srt+112;
 },
 sat_s582w_entry() //  [R1]
         { []
         }
     {offset
       c58m0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c58m1; else goto c58m2;
       c58m1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c58m2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto c58lZ; else goto c58lY;
       c58lZ: // global
           R1 = Data.Type.Equality.$WHRefl_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c58lY: // global
           R1 = Data.Type.Equality.$fEnum:~~:1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s582w_info" {
     sat_s582w_info:
         const sat_s582w_entry;
         const 4294967296;
         const 4294967313;
         const S587Z_srt+112;
 },
 go_s582t_entry() //  [R1, R2]
         { []
         }
     {offset
       c58m4: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c58m8; else goto c58m7;
       c58m8: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c58m7: // global
           I64[Hp - 72] = sat_s582z_info;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s582w_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_s582t_info" {
     go_s582t_info:
         const go_s582t_entry;
         const 4294967296;
         const 4294967306;
         const 4294967300;
         const S587Z_srt+112;
 },
 Data.Type.Equality.$w$cenumFromTo1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c58m9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c58ma; else goto c58mb;
       c58ma: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$w$cenumFromTo1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c58mb: // global
           I64[Sp - 16] = block_c58lw_info;
           _s582q::P64 = R2;
           R2 = R2;
           P64[Sp - 8] = _s582q::P64;
           Sp = Sp - 16;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$w$cenumFromTo1_info" {
     Data.Type.Equality.$w$cenumFromTo1_info:
         const Data.Type.Equality.$w$cenumFromTo1_entry;
         const 0;
         const 38654705678;
         const 12884901911;
         const S587Z_srt+112;
 },
 _c58lw() //  []
         { []
         }
     {offset
       c58lw: // global
           _s582q::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c58ly_info;
           R2 = _s582q::P64;
           Sp = Sp + 8;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c58lw_info" {
     block_c58lw_info:
         const _c58lw;
         const 1;
         const 4294967326;
         const S587Z_srt+112;
 },
 _c58ly() //  []
         { []
         }
     {offset
       c58ly: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c58mf; else goto c58me;
       c58mf: // global
           HpAlloc = 16;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c58me: // global
           I64[Hp - 8] = go_s582t_info;
           R2 = 0;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call go_s582t_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c58ly_info" {
     block_c58ly_info:
         const _c58ly;
         const 0;
         const 4294967326;
         const S587Z_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.246783125 UTC

[section ""data" . Data.Type.Equality.$fEnum:~~:_$cenumFromTo_closure" {
     Data.Type.Equality.$fEnum:~~:_$cenumFromTo_closure:
         const Data.Type.Equality.$fEnum:~~:_$cenumFromTo_info;
         const 0;
 },
 Data.Type.Equality.$fEnum:~~:_$cenumFromTo_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c58mY: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c58n2; else goto c58n3;
       c58n2: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fEnum:~~:_$cenumFromTo_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c58n3: // global
           I64[Sp - 24] = block_c58mV_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u58nb; else goto c58mW;
       u58nb: // global
           call _c58mV(R1) args: 0, res: 0, upd: 0;
       c58mW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fEnum:~~:_$cenumFromTo_info" {
     Data.Type.Equality.$fEnum:~~:_$cenumFromTo_info:
         const Data.Type.Equality.$fEnum:~~:_$cenumFromTo_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S587Z_srt+136;
 },
 _c58mV() //  [R1]
         { []
         }
     {offset
       c58mV: // global
           I64[Sp] = block_c58n1_info;
           _s582D::P64 = R1;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s582D::P64;
           if (R1 & 7 != 0) goto u58na; else goto c58n5;
       u58na: // global
           call _c58n1(R1) args: 0, res: 0, upd: 0;
       c58n5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c58mV_info" {
     block_c58mV_info:
         const _c58mV;
         const 2;
         const 4294967326;
         const S587Z_srt+136;
 },
 _c58n1() //  [R1]
         { []
         }
     {offset
       c58n1: // global
           R4 = R1;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Type.Equality.$w$cenumFromTo1_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c58n1_info" {
     block_c58n1_info:
         const _c58n1;
         const 2;
         const 4294967326;
         const S587Z_srt+136;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.25628419 UTC

[section ""data" . Data.Type.Equality.$w$cenumFromThen1_closure" {
     Data.Type.Equality.$w$cenumFromThen1_closure:
         const Data.Type.Equality.$w$cenumFromThen1_info;
         const 0;
 },
 sat_s582I_entry() //  [R1, R2]
         { []
         }
     {offset
       c58nE: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Type.Equality.$fEnum:~~:_$ctoEnum_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s582I_info" {
     sat_s582I_info:
         const sat_s582I_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S587Z_srt+120;
 },
 Data.Type.Equality.$w$cenumFromThen1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c58nH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c58nI; else goto c58nJ;
       c58nI: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$w$cenumFromThen1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c58nJ: // global
           I64[Sp - 16] = block_c58nv_info;
           _s582F::P64 = R2;
           R2 = R2;
           P64[Sp - 8] = _s582F::P64;
           Sp = Sp - 16;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$w$cenumFromThen1_info" {
     Data.Type.Equality.$w$cenumFromThen1_info:
         const Data.Type.Equality.$w$cenumFromThen1_entry;
         const 0;
         const 18695992639502;
         const 12884901911;
         const S587Z_srt+56;
 },
 _c58nv() //  []
         { []
         }
     {offset
       c58nv: // global
           I64[Sp] = block_c58nx_info;
           R2 = P64[Sp + 8];
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c58nv_info" {
     block_c58nv_info:
         const _c58nv;
         const 1;
         const 1103806595102;
         const S587Z_srt+56;
 },
 _c58nx() //  []
         { []
         }
     {offset
       c58nx: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c58nN; else goto c58nM;
       c58nN: // global
           HpAlloc = 16;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c58nM: // global
           I64[Hp - 8] = sat_s582I_info;
           P64[Hp] = P64[Sp + 8];
           R3 = Data.Type.Equality.$fEnum:~:2_closure;
           R2 = Hp - 7;
           Sp = Sp + 16;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c58nx_info" {
     block_c58nx_info:
         const _c58nx;
         const 1;
         const 1103806595102;
         const S587Z_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.269056119 UTC

[section ""data" . Data.Type.Equality.$fEnum:~~:_$cenumFromThen_closure" {
     Data.Type.Equality.$fEnum:~~:_$cenumFromThen_closure:
         const Data.Type.Equality.$fEnum:~~:_$cenumFromThen_info;
         const 0;
 },
 Data.Type.Equality.$fEnum:~~:_$cenumFromThen_entry() //  [R2, R3,
                                                           R4]
         { []
         }
     {offset
       c58od: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c58oh; else goto c58oi;
       c58oh: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fEnum:~~:_$cenumFromThen_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c58oi: // global
           I64[Sp - 24] = block_c58oa_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u58oq; else goto c58ob;
       u58oq: // global
           call _c58oa(R1) args: 0, res: 0, upd: 0;
       c58ob: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fEnum:~~:_$cenumFromThen_info" {
     Data.Type.Equality.$fEnum:~~:_$cenumFromThen_info:
         const Data.Type.Equality.$fEnum:~~:_$cenumFromThen_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S587Z_srt+152;
 },
 _c58oa() //  [R1]
         { []
         }
     {offset
       c58oa: // global
           I64[Sp] = block_c58og_info;
           _s582M::P64 = R1;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s582M::P64;
           if (R1 & 7 != 0) goto u58op; else goto c58ok;
       u58op: // global
           call _c58og(R1) args: 0, res: 0, upd: 0;
       c58ok: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c58oa_info" {
     block_c58oa_info:
         const _c58oa;
         const 2;
         const 4294967326;
         const S587Z_srt+152;
 },
 _c58og() //  [R1]
         { []
         }
     {offset
       c58og: // global
           R4 = R1;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Type.Equality.$w$cenumFromThen1_entry(R4,
                                                           R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c58og_info" {
     block_c58og_info:
         const _c58og;
         const 2;
         const 4294967326;
         const S587Z_srt+152;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.284747191 UTC

[section ""data" . Data.Type.Equality.$w$cenumFrom1_closure" {
     Data.Type.Equality.$w$cenumFrom1_closure:
         const Data.Type.Equality.$w$cenumFrom1_info;
         const 0;
 },
 sat_s582W_entry() //  [R1]
         { []
         }
     {offset
       c58p1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c58p2; else goto c58p3;
       c58p2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c58p3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s582U::I64 = I64[R1 + 24];
           if (_s582U::I64 != 9223372036854775807) goto c58oZ; else goto c58p0;
       c58oZ: // global
           R2 = _s582U::I64 + 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_s582Q_entry(R2, R1) args: 24, res: 0, upd: 24;
       c58p0: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s582W_info" {
     sat_s582W_info:
         const sat_s582W_entry;
         const 4294967297;
         const 4294967315;
         const S587Z_srt+112;
 },
 sat_s582T_entry() //  [R1]
         { []
         }
     {offset
       c58pe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c58pf; else goto c58pg;
       c58pf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c58pg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto c58pd; else goto c58pc;
       c58pd: // global
           R1 = Data.Type.Equality.$WHRefl_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c58pc: // global
           R1 = Data.Type.Equality.$fEnum:~~:1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s582T_info" {
     sat_s582T_info:
         const sat_s582T_entry;
         const 4294967296;
         const 4294967313;
         const S587Z_srt+112;
 },
 go_s582Q_entry() //  [R1, R2]
         { []
         }
     {offset
       c58pi: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c58pm; else goto c58pl;
       c58pm: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c58pl: // global
           I64[Hp - 72] = sat_s582W_info;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s582T_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_s582Q_info" {
     go_s582Q_info:
         const go_s582Q_entry;
         const 4294967296;
         const 4294967306;
         const 4294967300;
         const S587Z_srt+112;
 },
 Data.Type.Equality.$w$cenumFrom1_entry() //  [R2, R3]
         { []
         }
     {offset
       c58pn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c58po; else goto c58pp;
       c58po: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$w$cenumFrom1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c58pp: // global
           I64[Sp - 16] = block_c58oK_info;
           _s582O::P64 = R2;
           R2 = R2;
           P64[Sp - 8] = _s582O::P64;
           Sp = Sp - 16;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$w$cenumFrom1_info" {
     Data.Type.Equality.$w$cenumFrom1_info:
         const Data.Type.Equality.$w$cenumFrom1_entry;
         const 0;
         const 554050781198;
         const 8589934607;
         const S587Z_srt+112;
 },
 _c58oK() //  []
         { []
         }
     {offset
       c58oK: // global
           _s582O::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c58oM_info;
           R2 = _s582O::P64;
           Sp = Sp + 8;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c58oK_info" {
     block_c58oK_info:
         const _c58oK;
         const 1;
         const 4294967326;
         const S587Z_srt+112;
 },
 _c58oM() //  []
         { []
         }
     {offset
       c58oM: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c58pt; else goto c58ps;
       c58pt: // global
           HpAlloc = 16;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c58ps: // global
           I64[Hp - 8] = go_s582Q_info;
           R2 = 0;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call go_s582Q_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c58oM_info" {
     block_c58oM_info:
         const _c58oM;
         const 0;
         const 4294967326;
         const S587Z_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.305173549 UTC

[section ""data" . Data.Type.Equality.$fEnum:~~:_$cenumFrom_closure" {
     Data.Type.Equality.$fEnum:~~:_$cenumFrom_closure:
         const Data.Type.Equality.$fEnum:~~:_$cenumFrom_info;
         const 0;
 },
 Data.Type.Equality.$fEnum:~~:_$cenumFrom_entry() //  [R2, R3]
         { []
         }
     {offset
       c58qd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c58qe; else goto c58qf;
       c58qe: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fEnum:~~:_$cenumFrom_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c58qf: // global
           I64[Sp - 16] = block_c58qa_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u58qj; else goto c58qb;
       u58qj: // global
           call _c58qa(R1) args: 0, res: 0, upd: 0;
       c58qb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fEnum:~~:_$cenumFrom_info" {
     Data.Type.Equality.$fEnum:~~:_$cenumFrom_info:
         const Data.Type.Equality.$fEnum:~~:_$cenumFrom_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S587Z_srt+168;
 },
 _c58qa() //  [R1]
         { []
         }
     {offset
       c58qa: // global
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.Type.Equality.$w$cenumFrom1_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c58qa_info" {
     block_c58qa_info:
         const _c58qa;
         const 1;
         const 4294967326;
         const S587Z_srt+168;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.318816035 UTC

[section ""data" . Data.Type.Equality.$w$cenumFromThenTo1_closure" {
     Data.Type.Equality.$w$cenumFromThenTo1_closure:
         const Data.Type.Equality.$w$cenumFromThenTo1_info;
         const 0;
 },
 sat_s5839_entry() //  [R1]
         { []
         }
     {offset
       c58qS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c58qT; else goto c58qU;
       c58qT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c58qU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s5834_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s5839_info" {
     sat_s5839_info:
         const sat_s5839_entry;
         const 4294967297;
         const 4294967315;
         const S587Z_srt+112;
 },
 sat_s5838_entry() //  [R1]
         { []
         }
     {offset
       c58r3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c58r4; else goto c58r5;
       c58r4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c58r5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto c58r2; else goto c58r1;
       c58r2: // global
           R1 = Data.Type.Equality.$WHRefl_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c58r1: // global
           R1 = Data.Type.Equality.$fEnum:~~:1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s5838_info" {
     sat_s5838_info:
         const sat_s5838_entry;
         const 4294967296;
         const 4294967313;
         const S587Z_srt+112;
 },
 sat_s583b_entry() //  [R1]
         { []
         }
     {offset
       c58rf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c58rg; else goto c58rh;
       c58rg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c58rh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto c58re; else goto c58rd;
       c58re: // global
           R1 = Data.Type.Equality.$WHRefl_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c58rd: // global
           R1 = Data.Type.Equality.$fEnum:~~:1_closure;
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s583b_info" {
     sat_s583b_info:
         const sat_s583b_entry;
         const 4294967296;
         const 4294967313;
         const S587Z_srt+112;
 },
 go_up_s5834_entry() //  [R1, R2]
         { []
         }
     {offset
       c58rl: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c58rp; else goto c58ro;
       c58rp: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c58ro: // global
           if (%MO_S_Le_W64(R2, 0)) goto c58rj; else goto c58rk;
       c58rj: // global
           I64[Hp - 72] = sat_s5839_info;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s5838_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c58rk: // global
           I64[Hp - 72] = sat_s583b_info;
           I64[Hp - 56] = R2;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c58rr::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c58rr::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_s5834_info" {
     go_up_s5834_info:
         const go_up_s5834_entry;
         const 4294967296;
         const 4294967306;
         const 4294967300;
         const S587Z_srt+112;
 },
 sat_s583c_entry() //  [R1]
         { []
         }
     {offset
       c58rs: // global
           _s583c::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c58rt; else goto c58ru;
       c58ru: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c58rw; else goto c58rv;
       c58rw: // global
           HpAlloc = 16;
           goto c58rt;
       c58rt: // global
           R1 = _s583c::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c58rv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s583c::P64;
           I64[Hp - 8] = go_up_s5834_info;
           R2 = 0;
           R1 = Hp - 7;
           Sp = Sp - 16;
           call go_up_s5834_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s583c_info" {
     sat_s583c_info:
         const sat_s583c_entry;
         const 0;
         const 4294967311;
         const S587Z_srt+112;
 },
 Data.Type.Equality.$w$cenumFromThenTo1_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c58rx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c58ry; else goto c58rz;
       c58ry: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$w$cenumFromThenTo1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c58rz: // global
           I64[Sp - 16] = block_c58qy_info;
           _s5830::P64 = R2;
           R2 = R2;
           P64[Sp - 8] = _s5830::P64;
           Sp = Sp - 16;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$w$cenumFromThenTo1_info" {
     Data.Type.Equality.$w$cenumFromThenTo1_info:
         const Data.Type.Equality.$w$cenumFromThenTo1_entry;
         const 0;
         const 2203318222862;
         const 17179869208;
         const S587Z_srt+112;
 },
 _c58qy() //  []
         { []
         }
     {offset
       c58qy: // global
           _s5830::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c58qA_info;
           R2 = _s5830::P64;
           Sp = Sp + 8;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c58qy_info" {
     block_c58qy_info:
         const _c58qy;
         const 1;
         const 4294967326;
         const S587Z_srt+112;
 },
 _c58qA() //  []
         { []
         }
     {offset
       c58qA: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c58rD; else goto c58rC;
       c58rD: // global
           HpAlloc = 16;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c58rC: // global
           I64[Hp - 8] = sat_s583c_info;
           R2 = Hp - 8;
           R1 = Data.Type.Equality.$WHRefl_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c58qA_info" {
     block_c58qA_info:
         const _c58qA;
         const 0;
         const 4294967326;
         const S587Z_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.339782542 UTC

[section ""data" . Data.Type.Equality.$fEnum:~~:_$cenumFromThenTo_closure" {
     Data.Type.Equality.$fEnum:~~:_$cenumFromThenTo_closure:
         const Data.Type.Equality.$fEnum:~~:_$cenumFromThenTo_info;
         const 0;
 },
 Data.Type.Equality.$fEnum:~~:_$cenumFromThenTo_entry() //  [R2, R3,
                                                             R4, R5]
         { []
         }
     {offset
       c58sE: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c58sU; else goto c58sV;
       c58sU: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fEnum:~~:_$cenumFromThenTo_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c58sV: // global
           I64[Sp - 32] = block_c58sB_info;
           R1 = R3;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u58t3; else goto c58sC;
       u58t3: // global
           call _c58sB(R1) args: 0, res: 0, upd: 0;
       c58sC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fEnum:~~:_$cenumFromThenTo_info" {
     Data.Type.Equality.$fEnum:~~:_$cenumFromThenTo_info:
         const Data.Type.Equality.$fEnum:~~:_$cenumFromThenTo_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const S587Z_srt+184;
 },
 _c58sB() //  [R1]
         { []
         }
     {offset
       c58sB: // global
           I64[Sp] = block_c58sH_info;
           _s583h::P64 = R1;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s583h::P64;
           if (R1 & 7 != 0) goto u58t2; else goto c58sI;
       u58t2: // global
           call _c58sH(R1) args: 0, res: 0, upd: 0;
       c58sI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c58sB_info" {
     block_c58sB_info:
         const _c58sB;
         const 3;
         const 4294967326;
         const S587Z_srt+184;
 },
 _c58sH() //  [R1]
         { []
         }
     {offset
       c58sH: // global
           I64[Sp] = block_c58sM_info;
           _s583i::P64 = R1;
           R1 = P64[Sp + 24];
           P64[Sp + 24] = _s583i::P64;
           if (R1 & 7 != 0) goto u58t4; else goto c58sN;
       u58t4: // global
           call _c58sM(R1) args: 0, res: 0, upd: 0;
       c58sN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c58sH_info" {
     block_c58sH_info:
         const _c58sH;
         const 3;
         const 4294967326;
         const S587Z_srt+184;
 },
 _c58sM() //  [R1]
         { []
         }
     {offset
       c58sM: // global
           _s583i::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_c58sR_info;
           R5 = R1;
           R4 = _s583i::P64;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call Data.Type.Equality.$w$cenumFromThenTo1_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c58sM_info" {
     block_c58sM_info:
         const _c58sM;
         const 3;
         const 4294967326;
         const S587Z_srt+184;
 },
 _c58sR() //  [R1, R2]
         { []
         }
     {offset
       c58sR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c58t1; else goto c58t0;
       c58t1: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c58t0: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c58sR_info" {
     block_c58sR_info:
         const _c58sR;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.353407173 UTC

[section ""data" . Data.Type.Equality.$fEnum:~~:_closure" {
     Data.Type.Equality.$fEnum:~~:_closure:
         const Data.Type.Equality.$fEnum:~~:_info;
         const 0;
 },
 sat_s583v_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c58tE: // global
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call Data.Type.Equality.$fEnum:~~:_$cenumFromThenTo_entry(R5,
                                                                     R4,
                                                                     R3,
                                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s583v_info" {
     sat_s583v_info:
         const sat_s583v_entry;
         const 1;
         const 4294967305;
         const 12884901911;
         const S587Z_srt+192;
 },
 sat_s583u_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c58tM: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Type.Equality.$fEnum:~~:_$cenumFromTo_entry(R4,
                                                                 R3,
                                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s583u_info" {
     sat_s583u_info:
         const sat_s583u_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S587Z_srt+144;
 },
 sat_s583t_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c58tU: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Type.Equality.$fEnum:~~:_$cenumFromThen_entry(R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s583t_info" {
     sat_s583t_info:
         const sat_s583t_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S587Z_srt+160;
 },
 sat_s583s_entry() //  [R1, R2]
         { []
         }
     {offset
       c58u2: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Type.Equality.$fEnum:~~:_$cenumFrom_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s583s_info" {
     sat_s583s_info:
         const sat_s583s_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S587Z_srt+176;
 },
 sat_s583r_entry() //  [R1, R2]
         { []
         }
     {offset
       c58ua: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Type.Equality.$fEnum:~~:_$cfromEnum_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s583r_info" {
     sat_s583r_info:
         const sat_s583r_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s583q_entry() //  [R1, R2]
         { []
         }
     {offset
       c58ui: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Type.Equality.$fEnum:~~:_$ctoEnum_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s583q_info" {
     sat_s583q_info:
         const sat_s583q_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S587Z_srt+120;
 },
 sat_s583p_entry() //  [R1, R2]
         { []
         }
     {offset
       c58uq: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Type.Equality.$fEnum:~~:_$csucc_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s583p_info" {
     sat_s583p_info:
         const sat_s583p_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S587Z_srt+128;
 },
 sat_s583o_entry() //  [R1, R2]
         { []
         }
     {offset
       c58uy: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Type.Equality.$fEnum:~~:_$csucc_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s583o_info" {
     sat_s583o_info:
         const sat_s583o_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S587Z_srt+128;
 },
 Data.Type.Equality.$fEnum:~~:_entry() //  [R2]
         { []
         }
     {offset
       c58uC: // global
           Hp = Hp + 200;
           if (Hp > HpLim) (likely: False) goto c58uG; else goto c58uF;
       c58uG: // global
           HpAlloc = 200;
           R2 = R2;
           R1 = Data.Type.Equality.$fEnum:~~:_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c58uF: // global
           I64[Hp - 192] = sat_s583v_info;
           P64[Hp - 184] = R2;
           I64[Hp - 176] = sat_s583u_info;
           P64[Hp - 168] = R2;
           I64[Hp - 160] = sat_s583t_info;
           P64[Hp - 152] = R2;
           I64[Hp - 144] = sat_s583s_info;
           P64[Hp - 136] = R2;
           I64[Hp - 128] = sat_s583r_info;
           P64[Hp - 120] = R2;
           I64[Hp - 112] = sat_s583q_info;
           P64[Hp - 104] = R2;
           I64[Hp - 96] = sat_s583p_info;
           P64[Hp - 88] = R2;
           I64[Hp - 80] = sat_s583o_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = GHC.Enum.C:Enum_con_info;
           P64[Hp - 56] = Hp - 79;
           P64[Hp - 48] = Hp - 95;
           P64[Hp - 40] = Hp - 111;
           P64[Hp - 32] = Hp - 127;
           P64[Hp - 24] = Hp - 143;
           P64[Hp - 16] = Hp - 158;
           P64[Hp - 8] = Hp - 174;
           P64[Hp] = Hp - 189;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fEnum:~~:_info" {
     Data.Type.Equality.$fEnum:~~:_info:
         const Data.Type.Equality.$fEnum:~~:_entry;
         const 0;
         const 7331509174286;
         const 4294967301;
         const S587Z_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.372013502 UTC

[section ""data" . Data.Type.Equality.$fTestEqualityk:~:1_closure" {
     Data.Type.Equality.$fTestEqualityk:~:1_closure:
         const GHC.Base.Just_con_info;
         const Data.Type.Equality.$WRefl_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.374867013 UTC

[section ""data" . Data.Type.Equality.$fTestEqualityk:~:_$ctestEquality_closure" {
     Data.Type.Equality.$fTestEqualityk:~:_$ctestEquality_closure:
         const Data.Type.Equality.$fTestEqualityk:~:_$ctestEquality_info;
 },
 Data.Type.Equality.$fTestEqualityk:~:_$ctestEquality_entry() //  [R2,
                                                                   R3]
         { []
         }
     {offset
       c58vz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c58vD; else goto c58vE;
       c58vD: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fTestEqualityk:~:_$ctestEquality_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c58vE: // global
           I64[Sp - 16] = block_c58vw_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u58vM; else goto c58vx;
       u58vM: // global
           call _c58vw() args: 0, res: 0, upd: 0;
       c58vx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fTestEqualityk:~:_$ctestEquality_info" {
     Data.Type.Equality.$fTestEqualityk:~:_$ctestEquality_info:
         const Data.Type.Equality.$fTestEqualityk:~:_$ctestEquality_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c58vw() //  []
         { []
         }
     {offset
       c58vw: // global
           _s583x::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c58vC_info;
           R1 = _s583x::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u58vL; else goto c58vG;
       u58vL: // global
           call _c58vC() args: 0, res: 0, upd: 0;
       c58vG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c58vw_info" {
     block_c58vw_info:
         const _c58vw;
         const 1;
         const 30;
 },
 _c58vC() //  []
         { []
         }
     {offset
       c58vC: // global
           R1 = Data.Type.Equality.$fTestEqualityk:~:1_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c58vC_info" {
     block_c58vC_info:
         const _c58vC;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.382319767 UTC

[section ""data" . Data.Type.Equality.$fTestEqualityk:~:_closure" {
     Data.Type.Equality.$fTestEqualityk:~:_closure:
         const Data.Type.Equality.$fTestEqualityk:~:_info;
 },
 Data.Type.Equality.$fTestEqualityk:~:_entry() //  [R2, R3]
         { []
         }
     {offset
       c58w7: // global
           R3 = R3;
           R2 = R2;
           call Data.Type.Equality.$fTestEqualityk:~:_$ctestEquality_entry(R3,
                                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fTestEqualityk:~:_info" {
     Data.Type.Equality.$fTestEqualityk:~:_info:
         const Data.Type.Equality.$fTestEqualityk:~:_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.38659508 UTC

[section ""data" . Data.Type.Equality.$fTestEqualityk:~~:_$ctestEquality_closure" {
     Data.Type.Equality.$fTestEqualityk:~~:_$ctestEquality_closure:
         const Data.Type.Equality.$fTestEqualityk:~~:_$ctestEquality_info;
 },
 Data.Type.Equality.$fTestEqualityk:~~:_$ctestEquality_entry() //  [R2,
                                                                    R3]
         { []
         }
     {offset
       c58wl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c58wp; else goto c58wq;
       c58wp: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fTestEqualityk:~~:_$ctestEquality_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c58wq: // global
           I64[Sp - 16] = block_c58wi_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u58wy; else goto c58wj;
       u58wy: // global
           call _c58wi() args: 0, res: 0, upd: 0;
       c58wj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fTestEqualityk:~~:_$ctestEquality_info" {
     Data.Type.Equality.$fTestEqualityk:~~:_$ctestEquality_info:
         const Data.Type.Equality.$fTestEqualityk:~~:_$ctestEquality_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c58wi() //  []
         { []
         }
     {offset
       c58wi: // global
           _s583B::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c58wo_info;
           R1 = _s583B::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u58wx; else goto c58ws;
       u58wx: // global
           call _c58wo() args: 0, res: 0, upd: 0;
       c58ws: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c58wi_info" {
     block_c58wi_info:
         const _c58wi;
         const 1;
         const 30;
 },
 _c58wo() //  []
         { []
         }
     {offset
       c58wo: // global
           R1 = Data.Type.Equality.$fTestEqualityk:~:1_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c58wo_info" {
     block_c58wo_info:
         const _c58wo;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.393688717 UTC

[section ""data" . Data.Type.Equality.$fTestEqualityk:~~:_closure" {
     Data.Type.Equality.$fTestEqualityk:~~:_closure:
         const Data.Type.Equality.$fTestEqualityk:~~:_info;
 },
 Data.Type.Equality.$fTestEqualityk:~~:_entry() //  [R2, R3]
         { []
         }
     {offset
       c58wT: // global
           R3 = R3;
           R2 = R2;
           call Data.Type.Equality.$fTestEqualityk:~~:_$ctestEquality_entry(R3,
                                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fTestEqualityk:~~:_info" {
     Data.Type.Equality.$fTestEqualityk:~~:_info:
         const Data.Type.Equality.$fTestEqualityk:~~:_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.398604711 UTC

[section ""data" . Data.Type.Equality.$fEq:~:_$c==_closure" {
     Data.Type.Equality.$fEq:~:_$c==_closure:
         const Data.Type.Equality.$fEq:~:_$c==_info;
 },
 Data.Type.Equality.$fEq:~:_$c==_entry() //  [R2, R3]
         { []
         }
     {offset
       c58x7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c58xb; else goto c58xc;
       c58xb: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fEq:~:_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c58xc: // global
           I64[Sp - 16] = block_c58x4_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u58xk; else goto c58x5;
       u58xk: // global
           call _c58x4() args: 0, res: 0, upd: 0;
       c58x5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fEq:~:_$c==_info" {
     Data.Type.Equality.$fEq:~:_$c==_info:
         const Data.Type.Equality.$fEq:~:_$c==_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c58x4() //  []
         { []
         }
     {offset
       c58x4: // global
           _s583F::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c58xa_info;
           R1 = _s583F::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u58xj; else goto c58xe;
       u58xj: // global
           call _c58xa() args: 0, res: 0, upd: 0;
       c58xe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c58x4_info" {
     block_c58x4_info:
         const _c58x4;
         const 1;
         const 30;
 },
 _c58xa() //  []
         { []
         }
     {offset
       c58xa: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c58xa_info" {
     block_c58xa_info:
         const _c58xa;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.409189055 UTC

[section ""data" . Data.Type.Equality.$fEq:~:_$c/=_closure" {
     Data.Type.Equality.$fEq:~:_$c/=_closure:
         const Data.Type.Equality.$fEq:~:_$c/=_info;
 },
 Data.Type.Equality.$fEq:~:_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       c58xJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c58xN; else goto c58xO;
       c58xN: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fEq:~:_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c58xO: // global
           I64[Sp - 16] = block_c58xG_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u58xW; else goto c58xH;
       u58xW: // global
           call _c58xG() args: 0, res: 0, upd: 0;
       c58xH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fEq:~:_$c/=_info" {
     Data.Type.Equality.$fEq:~:_$c/=_info:
         const Data.Type.Equality.$fEq:~:_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c58xG() //  []
         { []
         }
     {offset
       c58xG: // global
           _s583J::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c58xM_info;
           R1 = _s583J::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u58xV; else goto c58xQ;
       u58xV: // global
           call _c58xM() args: 0, res: 0, upd: 0;
       c58xQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c58xG_info" {
     block_c58xG_info:
         const _c58xG;
         const 1;
         const 30;
 },
 _c58xM() //  []
         { []
         }
     {offset
       c58xM: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c58xM_info" {
     block_c58xM_info:
         const _c58xM;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.41872583 UTC

[section ""data" . Data.Type.Equality.$fEq:~:_closure" {
     Data.Type.Equality.$fEq:~:_closure:
         const GHC.Classes.C:Eq_con_info;
         const Data.Type.Equality.$fEq:~:_$c==_closure+2;
         const Data.Type.Equality.$fEq:~:_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.421085631 UTC

[section ""cstring" . Data.Type.Equality.$fRead:~:3_bytes" {
     Data.Type.Equality.$fRead:~:3_bytes:
         I8[] [82,101,102,108]
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.423965232 UTC

[section ""data" . Data.Type.Equality.$fRead:~:2_closure" {
     Data.Type.Equality.$fRead:~:2_closure:
         const Data.Type.Equality.$fRead:~:2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Type.Equality.$fRead:~:2_entry() //  [R1]
         { []
         }
     {offset
       c58ym: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c58yn; else goto c58yo;
       c58yn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c58yo: // global
           (_c58yj::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c58yj::I64 == 0) goto c58yl; else goto c58yk;
       c58yl: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c58yk: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c58yj::I64;
           R2 = Data.Type.Equality.$fRead:~:3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fRead:~:2_info" {
     Data.Type.Equality.$fRead:~:2_info:
         const Data.Type.Equality.$fRead:~:2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.428779986 UTC

[section ""data" . Data.Type.Equality.$fShow:~:_$cshowsPrec_closure" {
     Data.Type.Equality.$fShow:~:_$cshowsPrec_closure:
         const Data.Type.Equality.$fShow:~:_$cshowsPrec_info;
         const 0;
 },
 Data.Type.Equality.$fShow:~:_$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c58yE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c58yF; else goto c58yG;
       c58yF: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fShow:~:_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c58yG: // global
           I64[Sp - 16] = block_c58yB_info;
           R1 = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u58yK; else goto c58yC;
       u58yK: // global
           call _c58yB() args: 0, res: 0, upd: 0;
       c58yC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fShow:~:_$cshowsPrec_info" {
     Data.Type.Equality.$fShow:~:_$cshowsPrec_info:
         const Data.Type.Equality.$fShow:~:_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S587Z_srt+208;
 },
 _c58yB() //  []
         { []
         }
     {offset
       c58yB: // global
           R3 = P64[Sp + 8];
           R2 = Data.Type.Equality.$fRead:~:2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c58yB_info" {
     block_c58yB_info:
         const _c58yB;
         const 1;
         const 4294967326;
         const S587Z_srt+208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.435155373 UTC

[section ""data" . Data.Type.Equality.$fShow:~:_$cshow_closure" {
     Data.Type.Equality.$fShow:~:_$cshow_closure:
         const Data.Type.Equality.$fShow:~:_$cshow_info;
         const 0;
 },
 Data.Type.Equality.$fShow:~:_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c58z2: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c58z3; else goto c58z4;
       c58z3: // global
           R2 = R2;
           R1 = Data.Type.Equality.$fShow:~:_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c58z4: // global
           I64[Sp - 8] = block_c58yZ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u58z8; else goto c58z0;
       u58z8: // global
           call _c58yZ() args: 0, res: 0, upd: 0;
       c58z0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fShow:~:_$cshow_info" {
     Data.Type.Equality.$fShow:~:_$cshow_info:
         const Data.Type.Equality.$fShow:~:_$cshow_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const S587Z_srt+208;
 },
 _c58yZ() //  []
         { []
         }
     {offset
       c58yZ: // global
           R1 = Data.Type.Equality.$fRead:~:2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c58yZ_info" {
     block_c58yZ_info:
         const _c58yZ;
         const 0;
         const 4294967326;
         const S587Z_srt+208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.440878609 UTC

[section ""data" . Data.Type.Equality.$fShow:~:1_closure" {
     Data.Type.Equality.$fShow:~:1_closure:
         const Data.Type.Equality.$fShow:~:1_info;
         const 0;
 },
 Data.Type.Equality.$fShow:~:1_entry() //  [R2, R3]
         { []
         }
     {offset
       c58zr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c58zs; else goto c58zt;
       c58zs: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fShow:~:1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c58zt: // global
           I64[Sp - 16] = block_c58zo_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u58zx; else goto c58zp;
       u58zx: // global
           call _c58zo() args: 0, res: 0, upd: 0;
       c58zp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fShow:~:1_info" {
     Data.Type.Equality.$fShow:~:1_info:
         const Data.Type.Equality.$fShow:~:1_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const S587Z_srt+208;
 },
 _c58zo() //  []
         { []
         }
     {offset
       c58zo: // global
           R3 = P64[Sp + 8];
           R2 = Data.Type.Equality.$fRead:~:2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c58zo_info" {
     block_c58zo_info:
         const _c58zo;
         const 1;
         const 4294967326;
         const S587Z_srt+208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.447132381 UTC

[section ""data" . Data.Type.Equality.$fShow:~:_$cshowList_closure" {
     Data.Type.Equality.$fShow:~:_$cshowList_closure:
         const Data.Type.Equality.$fShow:~:_$cshowList_info;
         const 0;
 },
 Data.Type.Equality.$fShow:~:_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       c58zM: // global
           R4 = R3;
           R3 = R2;
           R2 = Data.Type.Equality.$fShow:~:1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fShow:~:_$cshowList_info" {
     Data.Type.Equality.$fShow:~:_$cshowList_info:
         const Data.Type.Equality.$fShow:~:_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S587Z_srt+232;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.450270271 UTC

[section ""data" . Data.Type.Equality.$fShow:~:_closure" {
     Data.Type.Equality.$fShow:~:_closure:
         const GHC.Show.C:Show_con_info;
         const Data.Type.Equality.$fShow:~:_$cshowsPrec_closure+3;
         const Data.Type.Equality.$fShow:~:_$cshow_closure+1;
         const Data.Type.Equality.$fShow:~:_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.453030136 UTC

[section ""data" . Data.Type.Equality.$fOrd:~:_$c<_closure" {
     Data.Type.Equality.$fOrd:~:_$c<_closure:
         const Data.Type.Equality.$fOrd:~:_$c<_info;
 },
 Data.Type.Equality.$fOrd:~:_$c<_entry() //  [R2, R3]
         { []
         }
     {offset
       c58A1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c58A5; else goto c58A6;
       c58A5: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fOrd:~:_$c<_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c58A6: // global
           I64[Sp - 16] = block_c58zY_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u58Ae; else goto c58zZ;
       u58Ae: // global
           call _c58zY() args: 0, res: 0, upd: 0;
       c58zZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fOrd:~:_$c<_info" {
     Data.Type.Equality.$fOrd:~:_$c<_info:
         const Data.Type.Equality.$fOrd:~:_$c<_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c58zY() //  []
         { []
         }
     {offset
       c58zY: // global
           _s583Y::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c58A4_info;
           R1 = _s583Y::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u58Ad; else goto c58A8;
       u58Ad: // global
           call _c58A4() args: 0, res: 0, upd: 0;
       c58A8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c58zY_info" {
     block_c58zY_info:
         const _c58zY;
         const 1;
         const 30;
 },
 _c58A4() //  []
         { []
         }
     {offset
       c58A4: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c58A4_info" {
     block_c58A4_info:
         const _c58A4;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.460346119 UTC

[section ""data" . Data.Type.Equality.$fOrd:~:_$ccompare_closure" {
     Data.Type.Equality.$fOrd:~:_$ccompare_closure:
         const Data.Type.Equality.$fOrd:~:_$ccompare_info;
 },
 Data.Type.Equality.$fOrd:~:_$ccompare_entry() //  [R2, R3]
         { []
         }
     {offset
       c58AD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c58AH; else goto c58AI;
       c58AH: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fOrd:~:_$ccompare_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c58AI: // global
           I64[Sp - 16] = block_c58AA_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u58AQ; else goto c58AB;
       u58AQ: // global
           call _c58AA() args: 0, res: 0, upd: 0;
       c58AB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fOrd:~:_$ccompare_info" {
     Data.Type.Equality.$fOrd:~:_$ccompare_info:
         const Data.Type.Equality.$fOrd:~:_$ccompare_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c58AA() //  []
         { []
         }
     {offset
       c58AA: // global
           _s5842::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c58AG_info;
           R1 = _s5842::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u58AP; else goto c58AK;
       u58AP: // global
           call _c58AG() args: 0, res: 0, upd: 0;
       c58AK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c58AA_info" {
     block_c58AA_info:
         const _c58AA;
         const 1;
         const 30;
 },
 _c58AG() //  []
         { []
         }
     {offset
       c58AG: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c58AG_info" {
     block_c58AG_info:
         const _c58AG;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.468446973 UTC

[section ""data" . Data.Type.Equality.$fOrd:~:_$c<=_closure" {
     Data.Type.Equality.$fOrd:~:_$c<=_closure:
         const Data.Type.Equality.$fOrd:~:_$c<=_info;
 },
 Data.Type.Equality.$fOrd:~:_$c<=_entry() //  [R2, R3]
         { []
         }
     {offset
       c58Bf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c58Bj; else goto c58Bk;
       c58Bj: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fOrd:~:_$c<=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c58Bk: // global
           I64[Sp - 16] = block_c58Bc_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u58Bs; else goto c58Bd;
       u58Bs: // global
           call _c58Bc() args: 0, res: 0, upd: 0;
       c58Bd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fOrd:~:_$c<=_info" {
     Data.Type.Equality.$fOrd:~:_$c<=_info:
         const Data.Type.Equality.$fOrd:~:_$c<=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c58Bc() //  []
         { []
         }
     {offset
       c58Bc: // global
           _s5845::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c58Bi_info;
           R1 = _s5845::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u58Br; else goto c58Bm;
       u58Br: // global
           call _c58Bi() args: 0, res: 0, upd: 0;
       c58Bm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c58Bc_info" {
     block_c58Bc_info:
         const _c58Bc;
         const 1;
         const 30;
 },
 _c58Bi() //  []
         { []
         }
     {offset
       c58Bi: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c58Bi_info" {
     block_c58Bi_info:
         const _c58Bi;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.476290883 UTC

[section ""data" . Data.Type.Equality.$fOrd:~:_$cmax_closure" {
     Data.Type.Equality.$fOrd:~:_$cmax_closure:
         const Data.Type.Equality.$fOrd:~:_$cmax_info;
 },
 Data.Type.Equality.$fOrd:~:_$cmax_entry() //  [R2, R3]
         { []
         }
     {offset
       c58BR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c58BS; else goto c58BT;
       c58BS: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fOrd:~:_$cmax_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c58BT: // global
           I64[Sp - 16] = block_c58BO_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u58BX; else goto c58BP;
       u58BX: // global
           call _c58BO() args: 0, res: 0, upd: 0;
       c58BP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fOrd:~:_$cmax_info" {
     Data.Type.Equality.$fOrd:~:_$cmax_info:
         const Data.Type.Equality.$fOrd:~:_$cmax_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c58BO() //  []
         { []
         }
     {offset
       c58BO: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c58BO_info" {
     block_c58BO_info:
         const _c58BO;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.482717966 UTC

[section ""data" . Data.Type.Equality.$fOrd:~:_$c>_closure" {
     Data.Type.Equality.$fOrd:~:_$c>_closure:
         const Data.Type.Equality.$fOrd:~:_$c>_info;
 },
 Data.Type.Equality.$fOrd:~:_$c>_entry() //  [R2, R3]
         { []
         }
     {offset
       c58Ch: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c58Cl; else goto c58Cm;
       c58Cl: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fOrd:~:_$c>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c58Cm: // global
           I64[Sp - 16] = block_c58Ce_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u58Cu; else goto c58Cf;
       u58Cu: // global
           call _c58Ce() args: 0, res: 0, upd: 0;
       c58Cf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fOrd:~:_$c>_info" {
     Data.Type.Equality.$fOrd:~:_$c>_info:
         const Data.Type.Equality.$fOrd:~:_$c>_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c58Ce() //  []
         { []
         }
     {offset
       c58Ce: // global
           _s584c::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c58Ck_info;
           R1 = _s584c::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u58Ct; else goto c58Co;
       u58Ct: // global
           call _c58Ck() args: 0, res: 0, upd: 0;
       c58Co: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c58Ce_info" {
     block_c58Ce_info:
         const _c58Ce;
         const 1;
         const 30;
 },
 _c58Ck() //  []
         { []
         }
     {offset
       c58Ck: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c58Ck_info" {
     block_c58Ck_info:
         const _c58Ck;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.48997571 UTC

[section ""data" . Data.Type.Equality.$fOrd:~:_$cmin_closure" {
     Data.Type.Equality.$fOrd:~:_$cmin_closure:
         const Data.Type.Equality.$fOrd:~:_$cmin_info;
 },
 Data.Type.Equality.$fOrd:~:_$cmin_entry() //  [R2, R3]
         { []
         }
     {offset
       c58CT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c58CU; else goto c58CV;
       c58CU: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fOrd:~:_$cmin_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c58CV: // global
           I64[Sp - 16] = block_c58CQ_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u58CZ; else goto c58CR;
       u58CZ: // global
           call _c58CQ() args: 0, res: 0, upd: 0;
       c58CR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fOrd:~:_$cmin_info" {
     Data.Type.Equality.$fOrd:~:_$cmin_info:
         const Data.Type.Equality.$fOrd:~:_$cmin_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c58CQ() //  []
         { []
         }
     {offset
       c58CQ: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c58CQ_info" {
     block_c58CQ_info:
         const _c58CQ;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.494934478 UTC

[section ""data" . Data.Type.Equality.$fOrd:~:_closure" {
     Data.Type.Equality.$fOrd:~:_closure:
         const GHC.Classes.C:Ord_con_info;
         const Data.Type.Equality.$fEq:~:_closure+1;
         const Data.Type.Equality.$fOrd:~:_$ccompare_closure+2;
         const Data.Type.Equality.$fOrd:~:_$c<_closure+2;
         const Data.Type.Equality.$fOrd:~:_$c<=_closure+2;
         const Data.Type.Equality.$fOrd:~:_$c>_closure+2;
         const Data.Type.Equality.$fEq:~:_$c==_closure+2;
         const Data.Type.Equality.$fOrd:~:_$cmax_closure+2;
         const Data.Type.Equality.$fOrd:~:_$cmin_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.496655406 UTC

[section ""data" . Data.Type.Equality.$fRead:~:_lexeme_closure" {
     Data.Type.Equality.$fRead:~:_lexeme_closure:
         const Text.Read.Lex.Ident_con_info;
         const Data.Type.Equality.$fRead:~:2_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.499763673 UTC

[section ""data" . Data.Type.Equality.$fRead:~:1_closure" {
     Data.Type.Equality.$fRead:~:1_closure:
         const Data.Type.Equality.$fRead:~:1_info;
         const 0;
 },
 sat_s584m_entry() //  [R1]
         { []
         }
     {offset
       c58Dn: // global
           R2 = Data.Type.Equality.$WRefl_closure+1;
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s584m_info" {
     sat_s584m_info:
         const sat_s584m_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Type.Equality.$fRead:~:1_entry() //  [R2, R3]
         { []
         }
     {offset
       c58Dt: // global
           _s584k::P64 = R3;
           _s584j::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c58Du; else goto c58Dv;
       c58Dv: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c58Dx; else goto c58Dw;
       c58Dx: // global
           HpAlloc = 16;
           goto c58Du;
       c58Du: // global
           R3 = _s584k::P64;
           R2 = _s584j::P64;
           R1 = Data.Type.Equality.$fRead:~:1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c58Dw: // global
           I64[Hp - 8] = sat_s584m_info;
           P64[Hp] = _s584k::P64;
           I64[Sp - 8] = block_c58Dq_info;
           R3 = Hp - 7;
           R2 = Data.Type.Equality.$fRead:~:_lexeme_closure+4;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fRead:~:1_info" {
     Data.Type.Equality.$fRead:~:1_info:
         const Data.Type.Equality.$fRead:~:1_entry;
         const 0;
         const 30064771086;
         const 8589934607;
         const S587Z_srt+240;
 },
 _c58Dq() //  [R1]
         { []
         }
     {offset
       c58Dq: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c58DA; else goto c58Dz;
       c58DA: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c58Dz: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c58Dq_info" {
     block_c58Dq_info:
         const _c58Dq;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.507474393 UTC

[section ""data" . Data.Type.Equality.$fRead:~:4_closure" {
     Data.Type.Equality.$fRead:~:4_closure:
         const Data.Type.Equality.$fRead:~:4_info;
         const 0;
 },
 Data.Type.Equality.$fRead:~:4_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c58DW: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c58DX; else goto c58DY;
       c58DX: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fRead:~:4_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c58DY: // global
           I64[Sp - 24] = block_c58DU_info;
           R2 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fRead:~:4_info" {
     Data.Type.Equality.$fRead:~:4_info:
         const Data.Type.Equality.$fRead:~:4_entry;
         const 0;
         const 55834574862;
         const 12884901911;
         const S587Z_srt+248;
 },
 _c58DU() //  []
         { []
         }
     {offset
       c58DU: // global
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = Data.Type.Equality.$fRead:~:1_closure+2;
           Sp = Sp + 24;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c58DU_info" {
     block_c58DU_info:
         const _c58DU;
         const 2;
         const 21474836510;
         const S587Z_srt+248;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.515017732 UTC

[section ""data" . Data.Type.Equality.$fRead:~:_$creadsPrec_closure" {
     Data.Type.Equality.$fRead:~:_$creadsPrec_closure:
         const Data.Type.Equality.$fRead:~:_$creadsPrec_info;
         const 0;
 },
 sat_s584u_entry() //  [R1]
         { []
         }
     {offset
       c58El: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c58Em; else goto c58En;
       c58Em: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c58En: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c58Ej_info;
           R2 = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s584u_info" {
     sat_s584u_info:
         const sat_s584u_entry;
         const 2;
         const 21474836498;
         const S587Z_srt+248;
 },
 _c58Ej() //  []
         { []
         }
     {offset
       c58Ej: // global
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = P64[Sp + 8];
           R2 = Data.Type.Equality.$fRead:~:1_closure+2;
           Sp = Sp + 16;
           call GHC.Read.list3_entry(R4, R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c58Ej_info" {
     block_c58Ej_info:
         const _c58Ej;
         const 1;
         const 21474836510;
         const S587Z_srt+248;
 },
 Data.Type.Equality.$fRead:~:_$creadsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       c58Ep: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c58Eq; else goto c58Er;
       c58Eq: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fRead:~:_$creadsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c58Er: // global
           I64[Sp - 24] = block_c58Ed_info;
           _s584s::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s584s::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fRead:~:_$creadsPrec_info" {
     Data.Type.Equality.$fRead:~:_$creadsPrec_info:
         const Data.Type.Equality.$fRead:~:_$creadsPrec_entry;
         const 0;
         const 90194313230;
         const 8589934607;
         const S587Z_srt+248;
 },
 _c58Ed() //  []
         { []
         }
     {offset
       c58Ed: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c58Eu; else goto c58Et;
       c58Eu: // global
           HpAlloc = 32;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c58Et: // global
           I64[Hp - 24] = sat_s584u_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c58Ed_info" {
     block_c58Ed_info:
         const _c58Ed;
         const 2;
         const 21474836510;
         const S587Z_srt+248;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.526965587 UTC

[section ""data" . Data.Type.Equality.$fRead:~:_$creadListPrec_closure" {
     Data.Type.Equality.$fRead:~:_$creadListPrec_closure:
         const Data.Type.Equality.$fRead:~:_$creadListPrec_info;
         const 0;
 },
 sat_s584y_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c58F6: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c58F7; else goto c58F8;
       c58F7: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c58F8: // global
           I64[Sp - 24] = block_c58F4_info;
           _s584w::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 16] = _s584w::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s584y_info" {
     sat_s584y_info:
         const sat_s584y_entry;
         const 1;
         const 21474836489;
         const 8589934607;
         const S587Z_srt+248;
 },
 _c58F4() //  []
         { []
         }
     {offset
       c58F4: // global
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = Data.Type.Equality.$fRead:~:1_closure+2;
           Sp = Sp + 24;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c58F4_info" {
     block_c58F4_info:
         const _c58F4;
         const 2;
         const 21474836510;
         const S587Z_srt+248;
 },
 Data.Type.Equality.$fRead:~:_$creadListPrec_entry() //  [R2]
         { []
         }
     {offset
       c58Fa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c58Fb; else goto c58Fc;
       c58Fb: // global
           R2 = R2;
           R1 = Data.Type.Equality.$fRead:~:_$creadListPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c58Fc: // global
           I64[Sp - 16] = block_c58EX_info;
           _s584v::P64 = R2;
           R2 = R2;
           P64[Sp - 8] = _s584v::P64;
           Sp = Sp - 16;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fRead:~:_$creadListPrec_info" {
     Data.Type.Equality.$fRead:~:_$creadListPrec_info:
         const Data.Type.Equality.$fRead:~:_$creadListPrec_entry;
         const 0;
         const 433791696910;
         const 4294967301;
         const S587Z_srt+248;
 },
 _c58EX() //  []
         { []
         }
     {offset
       c58EX: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c58Ff; else goto c58Fe;
       c58Ff: // global
           HpAlloc = 16;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c58Fe: // global
           I64[Hp - 8] = sat_s584y_info;
           P64[Hp] = P64[Sp + 8];
           R2 = Hp - 6;
           Sp = Sp + 16;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c58EX_info" {
     block_c58EX_info:
         const _c58EX;
         const 1;
         const 158913789982;
         const S587Z_srt+248;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.537855914 UTC

[section ""data" . Data.Type.Equality.$fRead:~:_$creadList_closure" {
     Data.Type.Equality.$fRead:~:_$creadList_closure:
         const Data.Type.Equality.$fRead:~:_$creadList_info;
         const 0;
 },
 sat_s584C_entry() //  [R2, R3]
         { []
         }
     {offset
       c58FQ: // global
           R4 = R3;
           R3 = R2;
           R2 = Data.Type.Equality.$fRead:~:1_closure+2;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s584C_info" {
     sat_s584C_info:
         const sat_s584C_entry;
         const 4294967296;
         const 21474836490;
         const 8589934607;
         const S587Z_srt+248;
 },
 sat_s584D_entry() //  [R1]
         { []
         }
     {offset
       c58FT: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c58FU; else goto c58FV;
       c58FU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c58FV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c58FJ_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s584D_info" {
     sat_s584D_info:
         const sat_s584D_entry;
         const 1;
         const 158913789968;
         const S587Z_srt+248;
 },
 _c58FJ() //  []
         { []
         }
     {offset
       c58FJ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c58FY; else goto c58FX;
       c58FY: // global
           HpAlloc = 16;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c58FX: // global
           I64[Hp - 8] = sat_s584C_info;
           R2 = Hp - 6;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = GHC.Read.$fRead()7_closure;
           P64[Sp] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 16;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c58FJ_info" {
     block_c58FJ_info:
         const _c58FJ;
         const 0;
         const 158913789982;
         const S587Z_srt+248;
 },
 Data.Type.Equality.$fRead:~:_$creadList_entry() //  [R2]
         { []
         }
     {offset
       c58FZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c58G0; else goto c58G1;
       c58G0: // global
           R2 = R2;
           R1 = Data.Type.Equality.$fRead:~:_$creadList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c58G1: // global
           I64[Sp - 16] = block_c58FD_info;
           _s584z::P64 = R2;
           R2 = R2;
           P64[Sp - 8] = _s584z::P64;
           Sp = Sp - 16;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fRead:~:_$creadList_info" {
     Data.Type.Equality.$fRead:~:_$creadList_info:
         const Data.Type.Equality.$fRead:~:_$creadList_entry;
         const 0;
         const 708669603854;
         const 4294967301;
         const S587Z_srt+248;
 },
 _c58FD() //  []
         { []
         }
     {offset
       c58FD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c58G4; else goto c58G3;
       c58G4: // global
           HpAlloc = 24;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c58G3: // global
           I64[Hp - 16] = sat_s584D_info;
           P64[Hp] = P64[Sp + 8];
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c58FD_info" {
     block_c58FD_info:
         const _c58FD;
         const 1;
         const 158913789982;
         const S587Z_srt+248;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.550593989 UTC

[section ""data" . Data.Type.Equality.$fRead:~:_closure" {
     Data.Type.Equality.$fRead:~:_closure:
         const Data.Type.Equality.$fRead:~:_info;
         const 0;
 },
 sat_s584I_entry() //  [R1]
         { []
         }
     {offset
       c58GG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c58GH; else goto c58GI;
       c58GH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c58GI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Type.Equality.$fRead:~:_$creadListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s584I_info" {
     sat_s584I_info:
         const sat_s584I_entry;
         const 1;
         const 4294967312;
         const S587Z_srt+296;
 },
 sat_s584H_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c58GO: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Type.Equality.$fRead:~:4_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s584H_info" {
     sat_s584H_info:
         const sat_s584H_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S587Z_srt+272;
 },
 sat_s584G_entry() //  [R1]
         { []
         }
     {offset
       c58GV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c58GW; else goto c58GX;
       c58GW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c58GX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Type.Equality.$fRead:~:_$creadList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s584G_info" {
     sat_s584G_info:
         const sat_s584G_entry;
         const 1;
         const 4294967312;
         const S587Z_srt+304;
 },
 sat_s584F_entry() //  [R1, R2]
         { []
         }
     {offset
       c58H3: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Type.Equality.$fRead:~:_$creadsPrec_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s584F_info" {
     sat_s584F_info:
         const sat_s584F_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S587Z_srt+280;
 },
 Data.Type.Equality.$fRead:~:_entry() //  [R2]
         { []
         }
     {offset
       c58H7: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto c58Hb; else goto c58Ha;
       c58Hb: // global
           HpAlloc = 120;
           R2 = R2;
           R1 = Data.Type.Equality.$fRead:~:_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c58Ha: // global
           I64[Hp - 112] = sat_s584I_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_s584H_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_s584G_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = sat_s584F_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 47;
           P64[Hp - 16] = Hp - 72;
           P64[Hp - 8] = Hp - 86;
           P64[Hp] = Hp - 112;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fRead:~:_info" {
     Data.Type.Equality.$fRead:~:_info:
         const Data.Type.Equality.$fRead:~:_entry;
         const 0;
         const 253403070478;
         const 4294967301;
         const S587Z_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.562263296 UTC

[section ""data" . Data.Type.Equality.$fBounded:~:_$cmaxBound_closure" {
     Data.Type.Equality.$fBounded:~:_$cmaxBound_closure:
         const Data.Type.Equality.$fBounded:~:_$cmaxBound_info;
 },
 Data.Type.Equality.$fBounded:~:_$cmaxBound_entry() //  [R2]
         { []
         }
     {offset
       c58HM: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c58HN; else goto c58HO;
       c58HN: // global
           R2 = R2;
           R1 = Data.Type.Equality.$fBounded:~:_$cmaxBound_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c58HO: // global
           I64[Sp - 8] = block_c58HK_info;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fBounded:~:_$cmaxBound_info" {
     Data.Type.Equality.$fBounded:~:_$cmaxBound_info:
         const Data.Type.Equality.$fBounded:~:_$cmaxBound_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c58HK() //  []
         { []
         }
     {offset
       c58HK: // global
           R1 = Data.Type.Equality.$WRefl_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c58HK_info" {
     block_c58HK_info:
         const _c58HK;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.568711013 UTC

[section ""data" . Data.Type.Equality.$fBounded:~:_closure" {
     Data.Type.Equality.$fBounded:~:_closure:
         const Data.Type.Equality.$fBounded:~:_info;
 },
 sat_s584M_entry() //  [R1]
         { []
         }
     {offset
       c58I8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c58I9; else goto c58Ia;
       c58I9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c58Ia: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Type.Equality.$fBounded:~:_$cmaxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s584M_info" {
     sat_s584M_info:
         const sat_s584M_entry;
         const 1;
         const 16;
 },
 sat_s584L_entry() //  [R1]
         { []
         }
     {offset
       c58If: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c58Ig; else goto c58Ih;
       c58Ig: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c58Ih: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Type.Equality.$fBounded:~:_$cmaxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s584L_info" {
     sat_s584L_info:
         const sat_s584L_entry;
         const 1;
         const 16;
 },
 Data.Type.Equality.$fBounded:~:_entry() //  [R2]
         { []
         }
     {offset
       c58Ij: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c58In; else goto c58Im;
       c58In: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Data.Type.Equality.$fBounded:~:_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c58Im: // global
           I64[Hp - 64] = sat_s584M_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s584L_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Enum.C:Bounded_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fBounded:~:_info" {
     Data.Type.Equality.$fBounded:~:_info:
         const Data.Type.Equality.$fBounded:~:_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.57653034 UTC

[section ""data" . Data.Type.Equality.$fEq:~~:_$c==_closure" {
     Data.Type.Equality.$fEq:~~:_$c==_closure:
         const Data.Type.Equality.$fEq:~~:_$c==_info;
 },
 Data.Type.Equality.$fEq:~~:_$c==_entry() //  [R2, R3]
         { []
         }
     {offset
       c58IP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c58IT; else goto c58IU;
       c58IT: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fEq:~~:_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c58IU: // global
           I64[Sp - 16] = block_c58IM_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u58J2; else goto c58IN;
       u58J2: // global
           call _c58IM() args: 0, res: 0, upd: 0;
       c58IN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fEq:~~:_$c==_info" {
     Data.Type.Equality.$fEq:~~:_$c==_info:
         const Data.Type.Equality.$fEq:~~:_$c==_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c58IM() //  []
         { []
         }
     {offset
       c58IM: // global
           _s584O::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c58IS_info;
           R1 = _s584O::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u58J1; else goto c58IW;
       u58J1: // global
           call _c58IS() args: 0, res: 0, upd: 0;
       c58IW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c58IM_info" {
     block_c58IM_info:
         const _c58IM;
         const 1;
         const 30;
 },
 _c58IS() //  []
         { []
         }
     {offset
       c58IS: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c58IS_info" {
     block_c58IS_info:
         const _c58IS;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.583958532 UTC

[section ""data" . Data.Type.Equality.$fEq:~~:_$c/=_closure" {
     Data.Type.Equality.$fEq:~~:_$c/=_closure:
         const Data.Type.Equality.$fEq:~~:_$c/=_info;
 },
 Data.Type.Equality.$fEq:~~:_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       c58Jr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c58Jv; else goto c58Jw;
       c58Jv: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fEq:~~:_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c58Jw: // global
           I64[Sp - 16] = block_c58Jo_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u58JE; else goto c58Jp;
       u58JE: // global
           call _c58Jo() args: 0, res: 0, upd: 0;
       c58Jp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fEq:~~:_$c/=_info" {
     Data.Type.Equality.$fEq:~~:_$c/=_info:
         const Data.Type.Equality.$fEq:~~:_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c58Jo() //  []
         { []
         }
     {offset
       c58Jo: // global
           _s584S::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c58Ju_info;
           R1 = _s584S::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u58JD; else goto c58Jy;
       u58JD: // global
           call _c58Ju() args: 0, res: 0, upd: 0;
       c58Jy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c58Jo_info" {
     block_c58Jo_info:
         const _c58Jo;
         const 1;
         const 30;
 },
 _c58Ju() //  []
         { []
         }
     {offset
       c58Ju: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c58Ju_info" {
     block_c58Ju_info:
         const _c58Ju;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.590855598 UTC

[section ""data" . Data.Type.Equality.$fEq:~~:_closure" {
     Data.Type.Equality.$fEq:~~:_closure:
         const GHC.Classes.C:Eq_con_info;
         const Data.Type.Equality.$fEq:~~:_$c==_closure+2;
         const Data.Type.Equality.$fEq:~~:_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.593322721 UTC

[section ""cstring" . Data.Type.Equality.$fRead:~~:3_bytes" {
     Data.Type.Equality.$fRead:~~:3_bytes:
         I8[] [72,82,101,102,108]
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.598033255 UTC

[section ""data" . Data.Type.Equality.$fRead:~~:2_closure" {
     Data.Type.Equality.$fRead:~~:2_closure:
         const Data.Type.Equality.$fRead:~~:2_info;
         const 0;
         const 0;
         const 0;
 },
 Data.Type.Equality.$fRead:~~:2_entry() //  [R1]
         { []
         }
     {offset
       c58K4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c58K5; else goto c58K6;
       c58K5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c58K6: // global
           (_c58K1::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c58K1::I64 == 0) goto c58K3; else goto c58K2;
       c58K3: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c58K2: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c58K1::I64;
           R2 = Data.Type.Equality.$fRead:~~:3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fRead:~~:2_info" {
     Data.Type.Equality.$fRead:~~:2_info:
         const Data.Type.Equality.$fRead:~~:2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.604679221 UTC

[section ""data" . Data.Type.Equality.$fShow:~~:_$cshowsPrec_closure" {
     Data.Type.Equality.$fShow:~~:_$cshowsPrec_closure:
         const Data.Type.Equality.$fShow:~~:_$cshowsPrec_info;
         const 0;
 },
 Data.Type.Equality.$fShow:~~:_$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c58Km: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c58Kn; else goto c58Ko;
       c58Kn: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fShow:~~:_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c58Ko: // global
           I64[Sp - 16] = block_c58Kj_info;
           R1 = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u58Ks; else goto c58Kk;
       u58Ks: // global
           call _c58Kj() args: 0, res: 0, upd: 0;
       c58Kk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fShow:~~:_$cshowsPrec_info" {
     Data.Type.Equality.$fShow:~~:_$cshowsPrec_info:
         const Data.Type.Equality.$fShow:~~:_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S587Z_srt+320;
 },
 _c58Kj() //  []
         { []
         }
     {offset
       c58Kj: // global
           R3 = P64[Sp + 8];
           R2 = Data.Type.Equality.$fRead:~~:2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c58Kj_info" {
     block_c58Kj_info:
         const _c58Kj;
         const 1;
         const 4294967326;
         const S587Z_srt+320;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.61464074 UTC

[section ""data" . Data.Type.Equality.$fShow:~~:_$cshow_closure" {
     Data.Type.Equality.$fShow:~~:_$cshow_closure:
         const Data.Type.Equality.$fShow:~~:_$cshow_info;
         const 0;
 },
 Data.Type.Equality.$fShow:~~:_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c58KK: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c58KL; else goto c58KM;
       c58KL: // global
           R2 = R2;
           R1 = Data.Type.Equality.$fShow:~~:_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c58KM: // global
           I64[Sp - 8] = block_c58KH_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u58KQ; else goto c58KI;
       u58KQ: // global
           call _c58KH() args: 0, res: 0, upd: 0;
       c58KI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fShow:~~:_$cshow_info" {
     Data.Type.Equality.$fShow:~~:_$cshow_info:
         const Data.Type.Equality.$fShow:~~:_$cshow_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const S587Z_srt+320;
 },
 _c58KH() //  []
         { []
         }
     {offset
       c58KH: // global
           R1 = Data.Type.Equality.$fRead:~~:2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c58KH_info" {
     block_c58KH_info:
         const _c58KH;
         const 0;
         const 4294967326;
         const S587Z_srt+320;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.624384829 UTC

[section ""data" . Data.Type.Equality.$fShow:~~:1_closure" {
     Data.Type.Equality.$fShow:~~:1_closure:
         const Data.Type.Equality.$fShow:~~:1_info;
         const 0;
 },
 Data.Type.Equality.$fShow:~~:1_entry() //  [R2, R3]
         { []
         }
     {offset
       c58L9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c58La; else goto c58Lb;
       c58La: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fShow:~~:1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c58Lb: // global
           I64[Sp - 16] = block_c58L6_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u58Lf; else goto c58L7;
       u58Lf: // global
           call _c58L6() args: 0, res: 0, upd: 0;
       c58L7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fShow:~~:1_info" {
     Data.Type.Equality.$fShow:~~:1_info:
         const Data.Type.Equality.$fShow:~~:1_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const S587Z_srt+320;
 },
 _c58L6() //  []
         { []
         }
     {offset
       c58L6: // global
           R3 = P64[Sp + 8];
           R2 = Data.Type.Equality.$fRead:~~:2_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c58L6_info" {
     block_c58L6_info:
         const _c58L6;
         const 1;
         const 4294967326;
         const S587Z_srt+320;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.630365462 UTC

[section ""data" . Data.Type.Equality.$fShow:~~:_$cshowList_closure" {
     Data.Type.Equality.$fShow:~~:_$cshowList_closure:
         const Data.Type.Equality.$fShow:~~:_$cshowList_info;
         const 0;
 },
 Data.Type.Equality.$fShow:~~:_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       c58Lu: // global
           R4 = R3;
           R3 = R2;
           R2 = Data.Type.Equality.$fShow:~~:1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fShow:~~:_$cshowList_info" {
     Data.Type.Equality.$fShow:~~:_$cshowList_info:
         const Data.Type.Equality.$fShow:~~:_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S587Z_srt+344;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.63381695 UTC

[section ""data" . Data.Type.Equality.$fShow:~~:_closure" {
     Data.Type.Equality.$fShow:~~:_closure:
         const GHC.Show.C:Show_con_info;
         const Data.Type.Equality.$fShow:~~:_$cshowsPrec_closure+3;
         const Data.Type.Equality.$fShow:~~:_$cshow_closure+1;
         const Data.Type.Equality.$fShow:~~:_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.636686485 UTC

[section ""data" . Data.Type.Equality.$fOrd:~~:_$c<_closure" {
     Data.Type.Equality.$fOrd:~~:_$c<_closure:
         const Data.Type.Equality.$fOrd:~~:_$c<_info;
 },
 Data.Type.Equality.$fOrd:~~:_$c<_entry() //  [R2, R3]
         { []
         }
     {offset
       c58LJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c58LN; else goto c58LO;
       c58LN: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fOrd:~~:_$c<_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c58LO: // global
           I64[Sp - 16] = block_c58LG_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u58LW; else goto c58LH;
       u58LW: // global
           call _c58LG() args: 0, res: 0, upd: 0;
       c58LH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fOrd:~~:_$c<_info" {
     Data.Type.Equality.$fOrd:~~:_$c<_info:
         const Data.Type.Equality.$fOrd:~~:_$c<_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c58LG() //  []
         { []
         }
     {offset
       c58LG: // global
           _s5857::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c58LM_info;
           R1 = _s5857::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u58LV; else goto c58LQ;
       u58LV: // global
           call _c58LM() args: 0, res: 0, upd: 0;
       c58LQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c58LG_info" {
     block_c58LG_info:
         const _c58LG;
         const 1;
         const 30;
 },
 _c58LM() //  []
         { []
         }
     {offset
       c58LM: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c58LM_info" {
     block_c58LM_info:
         const _c58LM;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.645706995 UTC

[section ""data" . Data.Type.Equality.$fOrd:~~:_$ccompare_closure" {
     Data.Type.Equality.$fOrd:~~:_$ccompare_closure:
         const Data.Type.Equality.$fOrd:~~:_$ccompare_info;
 },
 Data.Type.Equality.$fOrd:~~:_$ccompare_entry() //  [R2, R3]
         { []
         }
     {offset
       c58Ml: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c58Mp; else goto c58Mq;
       c58Mp: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fOrd:~~:_$ccompare_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c58Mq: // global
           I64[Sp - 16] = block_c58Mi_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u58My; else goto c58Mj;
       u58My: // global
           call _c58Mi() args: 0, res: 0, upd: 0;
       c58Mj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fOrd:~~:_$ccompare_info" {
     Data.Type.Equality.$fOrd:~~:_$ccompare_info:
         const Data.Type.Equality.$fOrd:~~:_$ccompare_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c58Mi() //  []
         { []
         }
     {offset
       c58Mi: // global
           _s585b::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c58Mo_info;
           R1 = _s585b::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u58Mx; else goto c58Ms;
       u58Mx: // global
           call _c58Mo() args: 0, res: 0, upd: 0;
       c58Ms: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c58Mi_info" {
     block_c58Mi_info:
         const _c58Mi;
         const 1;
         const 30;
 },
 _c58Mo() //  []
         { []
         }
     {offset
       c58Mo: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c58Mo_info" {
     block_c58Mo_info:
         const _c58Mo;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.653456373 UTC

[section ""data" . Data.Type.Equality.$fOrd:~~:_$c<=_closure" {
     Data.Type.Equality.$fOrd:~~:_$c<=_closure:
         const Data.Type.Equality.$fOrd:~~:_$c<=_info;
 },
 Data.Type.Equality.$fOrd:~~:_$c<=_entry() //  [R2, R3]
         { []
         }
     {offset
       c58MX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c58N1; else goto c58N2;
       c58N1: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fOrd:~~:_$c<=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c58N2: // global
           I64[Sp - 16] = block_c58MU_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u58Na; else goto c58MV;
       u58Na: // global
           call _c58MU() args: 0, res: 0, upd: 0;
       c58MV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fOrd:~~:_$c<=_info" {
     Data.Type.Equality.$fOrd:~~:_$c<=_info:
         const Data.Type.Equality.$fOrd:~~:_$c<=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c58MU() //  []
         { []
         }
     {offset
       c58MU: // global
           _s585e::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c58N0_info;
           R1 = _s585e::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u58N9; else goto c58N4;
       u58N9: // global
           call _c58N0() args: 0, res: 0, upd: 0;
       c58N4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c58MU_info" {
     block_c58MU_info:
         const _c58MU;
         const 1;
         const 30;
 },
 _c58N0() //  []
         { []
         }
     {offset
       c58N0: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c58N0_info" {
     block_c58N0_info:
         const _c58N0;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.661157295 UTC

[section ""data" . Data.Type.Equality.$fOrd:~~:_$cmax_closure" {
     Data.Type.Equality.$fOrd:~~:_$cmax_closure:
         const Data.Type.Equality.$fOrd:~~:_$cmax_info;
 },
 Data.Type.Equality.$fOrd:~~:_$cmax_entry() //  [R2, R3]
         { []
         }
     {offset
       c58Nz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c58NA; else goto c58NB;
       c58NA: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fOrd:~~:_$cmax_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c58NB: // global
           I64[Sp - 16] = block_c58Nw_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u58NF; else goto c58Nx;
       u58NF: // global
           call _c58Nw() args: 0, res: 0, upd: 0;
       c58Nx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fOrd:~~:_$cmax_info" {
     Data.Type.Equality.$fOrd:~~:_$cmax_info:
         const Data.Type.Equality.$fOrd:~~:_$cmax_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c58Nw() //  []
         { []
         }
     {offset
       c58Nw: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c58Nw_info" {
     block_c58Nw_info:
         const _c58Nw;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.668427859 UTC

[section ""data" . Data.Type.Equality.$fOrd:~~:_$c>_closure" {
     Data.Type.Equality.$fOrd:~~:_$c>_closure:
         const Data.Type.Equality.$fOrd:~~:_$c>_info;
 },
 Data.Type.Equality.$fOrd:~~:_$c>_entry() //  [R2, R3]
         { []
         }
     {offset
       c58NZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c58O3; else goto c58O4;
       c58O3: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fOrd:~~:_$c>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c58O4: // global
           I64[Sp - 16] = block_c58NW_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u58Oc; else goto c58NX;
       u58Oc: // global
           call _c58NW() args: 0, res: 0, upd: 0;
       c58NX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fOrd:~~:_$c>_info" {
     Data.Type.Equality.$fOrd:~~:_$c>_info:
         const Data.Type.Equality.$fOrd:~~:_$c>_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c58NW() //  []
         { []
         }
     {offset
       c58NW: // global
           _s585l::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c58O2_info;
           R1 = _s585l::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u58Ob; else goto c58O6;
       u58Ob: // global
           call _c58O2() args: 0, res: 0, upd: 0;
       c58O6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c58NW_info" {
     block_c58NW_info:
         const _c58NW;
         const 1;
         const 30;
 },
 _c58O2() //  []
         { []
         }
     {offset
       c58O2: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c58O2_info" {
     block_c58O2_info:
         const _c58O2;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.67589282 UTC

[section ""data" . Data.Type.Equality.$fOrd:~~:_$cmin_closure" {
     Data.Type.Equality.$fOrd:~~:_$cmin_closure:
         const Data.Type.Equality.$fOrd:~~:_$cmin_info;
 },
 Data.Type.Equality.$fOrd:~~:_$cmin_entry() //  [R2, R3]
         { []
         }
     {offset
       c58OB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c58OC; else goto c58OD;
       c58OC: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fOrd:~~:_$cmin_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c58OD: // global
           I64[Sp - 16] = block_c58Oy_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u58OH; else goto c58Oz;
       u58OH: // global
           call _c58Oy() args: 0, res: 0, upd: 0;
       c58Oz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fOrd:~~:_$cmin_info" {
     Data.Type.Equality.$fOrd:~~:_$cmin_info:
         const Data.Type.Equality.$fOrd:~~:_$cmin_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c58Oy() //  []
         { []
         }
     {offset
       c58Oy: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c58Oy_info" {
     block_c58Oy_info:
         const _c58Oy;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.681987067 UTC

[section ""data" . Data.Type.Equality.$fOrd:~~:_closure" {
     Data.Type.Equality.$fOrd:~~:_closure:
         const GHC.Classes.C:Ord_con_info;
         const Data.Type.Equality.$fEq:~~:_closure+1;
         const Data.Type.Equality.$fOrd:~~:_$ccompare_closure+2;
         const Data.Type.Equality.$fOrd:~~:_$c<_closure+2;
         const Data.Type.Equality.$fOrd:~~:_$c<=_closure+2;
         const Data.Type.Equality.$fOrd:~~:_$c>_closure+2;
         const Data.Type.Equality.$fEq:~~:_$c==_closure+2;
         const Data.Type.Equality.$fOrd:~~:_$cmax_closure+2;
         const Data.Type.Equality.$fOrd:~~:_$cmin_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.685928965 UTC

[section ""data" . Data.Type.Equality.$fRead:~~:_lexeme_closure" {
     Data.Type.Equality.$fRead:~~:_lexeme_closure:
         const Text.Read.Lex.Ident_con_info;
         const Data.Type.Equality.$fRead:~~:2_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.690803755 UTC

[section ""data" . Data.Type.Equality.$fRead:~~:1_closure" {
     Data.Type.Equality.$fRead:~~:1_closure:
         const Data.Type.Equality.$fRead:~~:1_info;
         const 0;
 },
 sat_s585v_entry() //  [R1]
         { []
         }
     {offset
       c58P5: // global
           R2 = Data.Type.Equality.$WHRefl_closure+1;
           R1 = P64[R1 + 7];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s585v_info" {
     sat_s585v_info:
         const sat_s585v_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 Data.Type.Equality.$fRead:~~:1_entry() //  [R2, R3]
         { []
         }
     {offset
       c58Pb: // global
           _s585t::P64 = R3;
           _s585s::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c58Pc; else goto c58Pd;
       c58Pd: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c58Pf; else goto c58Pe;
       c58Pf: // global
           HpAlloc = 16;
           goto c58Pc;
       c58Pc: // global
           R3 = _s585t::P64;
           R2 = _s585s::P64;
           R1 = Data.Type.Equality.$fRead:~~:1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c58Pe: // global
           I64[Hp - 8] = sat_s585v_info;
           P64[Hp] = _s585t::P64;
           I64[Sp - 8] = block_c58P8_info;
           R3 = Hp - 7;
           R2 = Data.Type.Equality.$fRead:~~:_lexeme_closure+4;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fRead:~~:1_info" {
     Data.Type.Equality.$fRead:~~:1_info:
         const Data.Type.Equality.$fRead:~~:1_entry;
         const 0;
         const 211110527500302;
         const 8589934607;
         const S587Z_srt+240;
 },
 _c58P8() //  [R1]
         { []
         }
     {offset
       c58P8: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c58Pi; else goto c58Ph;
       c58Pi: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c58Ph: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c58P8_info" {
     block_c58P8_info:
         const _c58P8;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.701349264 UTC

[section ""data" . Data.Type.Equality.$fRead:~~:4_closure" {
     Data.Type.Equality.$fRead:~~:4_closure:
         const Data.Type.Equality.$fRead:~~:4_info;
         const 0;
 },
 Data.Type.Equality.$fRead:~~:4_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c58PE: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c58PF; else goto c58PG;
       c58PF: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fRead:~~:4_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c58PG: // global
           I64[Sp - 24] = block_c58PC_info;
           R2 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fRead:~~:4_info" {
     Data.Type.Equality.$fRead:~~:4_info:
         const Data.Type.Equality.$fRead:~~:4_entry;
         const 0;
         const 43984760078350;
         const 12884901911;
         const S587Z_srt+264;
 },
 _c58PC() //  []
         { []
         }
     {offset
       c58PC: // global
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = Data.Type.Equality.$fRead:~~:1_closure+2;
           Sp = Sp + 24;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c58PC_info" {
     block_c58PC_info:
         const _c58PC;
         const 2;
         const 8800387989534;
         const S587Z_srt+264;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.708197917 UTC

[section ""data" . Data.Type.Equality.$fRead:~~:_$creadsPrec_closure" {
     Data.Type.Equality.$fRead:~~:_$creadsPrec_closure:
         const Data.Type.Equality.$fRead:~~:_$creadsPrec_info;
         const 0;
 },
 sat_s585D_entry() //  [R1]
         { []
         }
     {offset
       c58Q3: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c58Q4; else goto c58Q5;
       c58Q4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c58Q5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c58Q1_info;
           R2 = P64[R1 + 16];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s585D_info" {
     sat_s585D_info:
         const sat_s585D_entry;
         const 2;
         const 8800387989522;
         const S587Z_srt+264;
 },
 _c58Q1() //  []
         { []
         }
     {offset
       c58Q1: // global
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = P64[Sp + 8];
           R2 = Data.Type.Equality.$fRead:~~:1_closure+2;
           Sp = Sp + 16;
           call GHC.Read.list3_entry(R4, R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c58Q1_info" {
     block_c58Q1_info:
         const _c58Q1;
         const 1;
         const 8800387989534;
         const S587Z_srt+264;
 },
 Data.Type.Equality.$fRead:~~:_$creadsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       c58Q7: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c58Q8; else goto c58Q9;
       c58Q8: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.$fRead:~~:_$creadsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c58Q9: // global
           I64[Sp - 24] = block_c58PV_info;
           _s585B::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s585B::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fRead:~~:_$creadsPrec_info" {
     Data.Type.Equality.$fRead:~~:_$creadsPrec_info:
         const Data.Type.Equality.$fRead:~~:_$creadsPrec_entry;
         const 0;
         const 79169132167182;
         const 8589934607;
         const S587Z_srt+264;
 },
 _c58PV() //  []
         { []
         }
     {offset
       c58PV: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c58Qc; else goto c58Qb;
       c58Qc: // global
           HpAlloc = 32;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c58Qb: // global
           I64[Hp - 24] = sat_s585D_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           R2 = Hp - 24;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c58PV_info" {
     block_c58PV_info:
         const _c58PV;
         const 2;
         const 8800387989534;
         const S587Z_srt+264;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.718763523 UTC

[section ""data" . Data.Type.Equality.$fRead:~~:_$creadListPrec_closure" {
     Data.Type.Equality.$fRead:~~:_$creadListPrec_closure:
         const Data.Type.Equality.$fRead:~~:_$creadListPrec_info;
         const 0;
 },
 sat_s585H_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c58QO: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c58QP; else goto c58QQ;
       c58QP: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c58QQ: // global
           I64[Sp - 24] = block_c58QM_info;
           _s585F::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 16] = _s585F::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s585H_info" {
     sat_s585H_info:
         const sat_s585H_entry;
         const 1;
         const 8800387989513;
         const 8589934607;
         const S587Z_srt+264;
 },
 _c58QM() //  []
         { []
         }
     {offset
       c58QM: // global
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = Data.Type.Equality.$fRead:~~:1_closure+2;
           Sp = Sp + 24;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c58QM_info" {
     block_c58QM_info:
         const _c58QM;
         const 2;
         const 8800387989534;
         const S587Z_srt+264;
 },
 Data.Type.Equality.$fRead:~~:_$creadListPrec_entry() //  [R2]
         { []
         }
     {offset
       c58QS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c58QT; else goto c58QU;
       c58QT: // global
           R2 = R2;
           R1 = Data.Type.Equality.$fRead:~~:_$creadListPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c58QU: // global
           I64[Sp - 16] = block_c58QF_info;
           _s585E::P64 = R2;
           R2 = R2;
           P64[Sp - 8] = _s585E::P64;
           Sp = Sp - 16;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fRead:~~:_$creadListPrec_info" {
     Data.Type.Equality.$fRead:~~:_$creadListPrec_info:
         const Data.Type.Equality.$fRead:~~:_$creadListPrec_entry;
         const 0;
         const 149572236083214;
         const 4294967301;
         const S587Z_srt+264;
 },
 _c58QF() //  []
         { []
         }
     {offset
       c58QF: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c58QX; else goto c58QW;
       c58QX: // global
           HpAlloc = 16;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c58QW: // global
           I64[Hp - 8] = sat_s585H_info;
           P64[Hp] = P64[Sp + 8];
           R2 = Hp - 6;
           Sp = Sp + 16;
           call GHC.Read.list_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c58QF_info" {
     block_c58QF_info:
         const _c58QF;
         const 1;
         const 8834747727902;
         const S587Z_srt+264;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.730424834 UTC

[section ""data" . Data.Type.Equality.$fRead:~~:_$creadList_closure" {
     Data.Type.Equality.$fRead:~~:_$creadList_closure:
         const Data.Type.Equality.$fRead:~~:_$creadList_info;
         const 0;
 },
 sat_s585L_entry() //  [R2, R3]
         { []
         }
     {offset
       c58Ry: // global
           R4 = R3;
           R3 = R2;
           R2 = Data.Type.Equality.$fRead:~~:1_closure+2;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s585L_info" {
     sat_s585L_info:
         const sat_s585L_entry;
         const 4294967296;
         const 8800387989514;
         const 8589934607;
         const S587Z_srt+264;
 },
 sat_s585M_entry() //  [R1]
         { []
         }
     {offset
       c58RB: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c58RC; else goto c58RD;
       c58RC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c58RD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c58Rr_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s585M_info" {
     sat_s585M_info:
         const sat_s585M_entry;
         const 1;
         const 8834747727888;
         const S587Z_srt+264;
 },
 _c58Rr() //  []
         { []
         }
     {offset
       c58Rr: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c58RG; else goto c58RF;
       c58RG: // global
           HpAlloc = 16;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       c58RF: // global
           I64[Hp - 8] = sat_s585L_info;
           R2 = Hp - 6;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = GHC.Read.$fRead()7_closure;
           P64[Sp] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 16;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c58Rr_info" {
     block_c58Rr_info:
         const _c58Rr;
         const 0;
         const 8834747727902;
         const S587Z_srt+264;
 },
 Data.Type.Equality.$fRead:~~:_$creadList_entry() //  [R2]
         { []
         }
     {offset
       c58RH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c58RI; else goto c58RJ;
       c58RI: // global
           R2 = R2;
           R1 = Data.Type.Equality.$fRead:~~:_$creadList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c58RJ: // global
           I64[Sp - 16] = block_c58Rl_info;
           _s585I::P64 = R2;
           R2 = R2;
           P64[Sp - 8] = _s585I::P64;
           Sp = Sp - 16;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fRead:~~:_$creadList_info" {
     Data.Type.Equality.$fRead:~~:_$creadList_info:
         const Data.Type.Equality.$fRead:~~:_$creadList_entry;
         const 0;
         const 290309724438542;
         const 4294967301;
         const S587Z_srt+264;
 },
 _c58Rl() //  []
         { []
         }
     {offset
       c58Rl: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c58RM; else goto c58RL;
       c58RM: // global
           HpAlloc = 24;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c58RL: // global
           I64[Hp - 16] = sat_s585M_info;
           P64[Hp] = P64[Sp + 8];
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c58Rl_info" {
     block_c58Rl_info:
         const _c58Rl;
         const 1;
         const 8834747727902;
         const S587Z_srt+264;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.743454301 UTC

[section ""data" . Data.Type.Equality.$fRead:~~:_closure" {
     Data.Type.Equality.$fRead:~~:_closure:
         const Data.Type.Equality.$fRead:~~:_info;
         const 0;
 },
 sat_s585R_entry() //  [R1]
         { []
         }
     {offset
       c58So: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c58Sp; else goto c58Sq;
       c58Sp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c58Sq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Type.Equality.$fRead:~~:_$creadListPrec_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s585R_info" {
     sat_s585R_info:
         const sat_s585R_entry;
         const 1;
         const 4294967312;
         const S587Z_srt+384;
 },
 sat_s585Q_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c58Sw: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 6];
           call Data.Type.Equality.$fRead:~~:4_entry(R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s585Q_info" {
     sat_s585Q_info:
         const sat_s585Q_entry;
         const 1;
         const 4294967305;
         const 8589934607;
         const S587Z_srt+368;
 },
 sat_s585P_entry() //  [R1]
         { []
         }
     {offset
       c58SD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c58SE; else goto c58SF;
       c58SE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c58SF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Type.Equality.$fRead:~~:_$creadList_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s585P_info" {
     sat_s585P_info:
         const sat_s585P_entry;
         const 1;
         const 4294967312;
         const S587Z_srt+392;
 },
 sat_s585O_entry() //  [R1, R2]
         { []
         }
     {offset
       c58SL: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call Data.Type.Equality.$fRead:~~:_$creadsPrec_entry(R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s585O_info" {
     sat_s585O_info:
         const sat_s585O_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S587Z_srt+376;
 },
 Data.Type.Equality.$fRead:~~:_entry() //  [R2]
         { []
         }
     {offset
       c58SP: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto c58ST; else goto c58SS;
       c58ST: // global
           HpAlloc = 120;
           R2 = R2;
           R1 = Data.Type.Equality.$fRead:~~:_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c58SS: // global
           I64[Hp - 112] = sat_s585R_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_s585Q_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_s585P_info;
           P64[Hp - 56] = R2;
           I64[Hp - 48] = sat_s585O_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Read.C:Read_con_info;
           P64[Hp - 24] = Hp - 47;
           P64[Hp - 16] = Hp - 72;
           P64[Hp - 8] = Hp - 86;
           P64[Hp] = Hp - 112;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fRead:~~:_info" {
     Data.Type.Equality.$fRead:~~:_info:
         const Data.Type.Equality.$fRead:~~:_entry;
         const 0;
         const 133143986190;
         const 4294967301;
         const S587Z_srt+368;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.753995058 UTC

[section ""data" . Data.Type.Equality.$fBounded:~~:_$cmaxBound_closure" {
     Data.Type.Equality.$fBounded:~~:_$cmaxBound_closure:
         const Data.Type.Equality.$fBounded:~~:_$cmaxBound_info;
 },
 Data.Type.Equality.$fBounded:~~:_$cmaxBound_entry() //  [R2]
         { []
         }
     {offset
       c58Tu: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c58Tv; else goto c58Tw;
       c58Tv: // global
           R2 = R2;
           R1 = Data.Type.Equality.$fBounded:~~:_$cmaxBound_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c58Tw: // global
           I64[Sp - 8] = block_c58Ts_info;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Types.heq_sel_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fBounded:~~:_$cmaxBound_info" {
     Data.Type.Equality.$fBounded:~~:_$cmaxBound_info:
         const Data.Type.Equality.$fBounded:~~:_$cmaxBound_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c58Ts() //  []
         { []
         }
     {offset
       c58Ts: // global
           R1 = Data.Type.Equality.$WHRefl_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c58Ts_info" {
     block_c58Ts_info:
         const _c58Ts;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.760496088 UTC

[section ""data" . Data.Type.Equality.$fBounded:~~:_closure" {
     Data.Type.Equality.$fBounded:~~:_closure:
         const Data.Type.Equality.$fBounded:~~:_info;
 },
 sat_s585V_entry() //  [R1]
         { []
         }
     {offset
       c58TQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c58TR; else goto c58TS;
       c58TR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c58TS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Type.Equality.$fBounded:~~:_$cmaxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s585V_info" {
     sat_s585V_info:
         const sat_s585V_entry;
         const 1;
         const 16;
 },
 sat_s585U_entry() //  [R1]
         { []
         }
     {offset
       c58TX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c58TY; else goto c58TZ;
       c58TY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c58TZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Type.Equality.$fBounded:~~:_$cmaxBound_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s585U_info" {
     sat_s585U_info:
         const sat_s585U_entry;
         const 1;
         const 16;
 },
 Data.Type.Equality.$fBounded:~~:_entry() //  [R2]
         { []
         }
     {offset
       c58U1: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c58U5; else goto c58U4;
       c58U5: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Data.Type.Equality.$fBounded:~~:_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c58U4: // global
           I64[Hp - 64] = sat_s585V_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s585U_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Enum.C:Bounded_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.$fBounded:~~:_info" {
     Data.Type.Equality.$fBounded:~~:_info:
         const Data.Type.Equality.$fBounded:~~:_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.768623113 UTC

[section ""data" . Data.Type.Equality.sym_closure" {
     Data.Type.Equality.sym_closure:
         const Data.Type.Equality.sym_info;
 },
 Data.Type.Equality.sym_entry() //  [R2]
         { []
         }
     {offset
       c58Ux: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c58Uy; else goto c58Uz;
       c58Uy: // global
           R2 = R2;
           R1 = Data.Type.Equality.sym_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c58Uz: // global
           I64[Sp - 8] = block_c58Uu_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u58UD; else goto c58Uv;
       u58UD: // global
           call _c58Uu() args: 0, res: 0, upd: 0;
       c58Uv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.sym_info" {
     Data.Type.Equality.sym_info:
         const Data.Type.Equality.sym_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c58Uu() //  []
         { []
         }
     {offset
       c58Uu: // global
           R1 = Data.Type.Equality.$WRefl_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c58Uu_info" {
     block_c58Uu_info:
         const _c58Uu;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.774658629 UTC

[section ""data" . Data.Type.Equality.trans_closure" {
     Data.Type.Equality.trans_closure:
         const Data.Type.Equality.trans_info;
 },
 Data.Type.Equality.trans_entry() //  [R2, R3]
         { []
         }
     {offset
       c58UW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c58V0; else goto c58V1;
       c58V0: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.trans_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c58V1: // global
           I64[Sp - 16] = block_c58UT_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u58V9; else goto c58UU;
       u58V9: // global
           call _c58UT() args: 0, res: 0, upd: 0;
       c58UU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.trans_info" {
     Data.Type.Equality.trans_info:
         const Data.Type.Equality.trans_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c58UT() //  []
         { []
         }
     {offset
       c58UT: // global
           _s585Z::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c58UZ_info;
           R1 = _s585Z::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u58V8; else goto c58V3;
       u58V8: // global
           call _c58UZ() args: 0, res: 0, upd: 0;
       c58V3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c58UT_info" {
     block_c58UT_info:
         const _c58UT;
         const 1;
         const 30;
 },
 _c58UZ() //  []
         { []
         }
     {offset
       c58UZ: // global
           R1 = Data.Type.Equality.$WRefl_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c58UZ_info" {
     block_c58UZ_info:
         const _c58UZ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.782476393 UTC

[section ""data" . Data.Type.Equality.castWith_closure" {
     Data.Type.Equality.castWith_closure:
         const Data.Type.Equality.castWith_info;
 },
 Data.Type.Equality.castWith_entry() //  [R2, R3]
         { []
         }
     {offset
       c58Vx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c58Vy; else goto c58Vz;
       c58Vy: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.castWith_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c58Vz: // global
           I64[Sp - 16] = block_c58Vu_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u58VD; else goto c58Vv;
       u58VD: // global
           call _c58Vu() args: 0, res: 0, upd: 0;
       c58Vv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.castWith_info" {
     Data.Type.Equality.castWith_info:
         const Data.Type.Equality.castWith_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c58Vu() //  []
         { []
         }
     {offset
       c58Vu: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c58Vu_info" {
     block_c58Vu_info:
         const _c58Vu;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.78853973 UTC

[section ""data" . Data.Type.Equality.gcastWith_closure" {
     Data.Type.Equality.gcastWith_closure:
         const Data.Type.Equality.gcastWith_info;
 },
 Data.Type.Equality.gcastWith_entry() //  [R2, R3]
         { []
         }
     {offset
       c58VV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c58VZ; else goto c58W0;
       c58VZ: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.gcastWith_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c58W0: // global
           I64[Sp - 16] = block_c58VS_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u58W4; else goto c58VT;
       u58W4: // global
           call _c58VS(R1) args: 0, res: 0, upd: 0;
       c58VT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.gcastWith_info" {
     Data.Type.Equality.gcastWith_info:
         const Data.Type.Equality.gcastWith_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c58VS() //  [R1]
         { []
         }
     {offset
       c58VS: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c58W3; else goto c58W2;
       c58W3: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c58W2: // global
           I64[Hp - 8] = GHC.Types.Eq#_con_info;
           R2 = Hp - 7;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c58VS_info" {
     block_c58VS_info:
         const _c58VS;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.796349087 UTC

[section ""data" . Data.Type.Equality.apply_closure" {
     Data.Type.Equality.apply_closure:
         const Data.Type.Equality.apply_info;
 },
 Data.Type.Equality.apply_entry() //  [R2, R3]
         { []
         }
     {offset
       c58Wn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c58Wr; else goto c58Ws;
       c58Wr: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.Type.Equality.apply_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c58Ws: // global
           I64[Sp - 16] = block_c58Wk_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u58WA; else goto c58Wl;
       u58WA: // global
           call _c58Wk() args: 0, res: 0, upd: 0;
       c58Wl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.apply_info" {
     Data.Type.Equality.apply_info:
         const Data.Type.Equality.apply_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c58Wk() //  []
         { []
         }
     {offset
       c58Wk: // global
           _s586a::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c58Wq_info;
           R1 = _s586a::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u58Wz; else goto c58Wu;
       u58Wz: // global
           call _c58Wq() args: 0, res: 0, upd: 0;
       c58Wu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c58Wk_info" {
     block_c58Wk_info:
         const _c58Wk;
         const 1;
         const 30;
 },
 _c58Wq() //  []
         { []
         }
     {offset
       c58Wq: // global
           R1 = Data.Type.Equality.$WRefl_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c58Wq_info" {
     block_c58Wq_info:
         const _c58Wq;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.806500098 UTC

[section ""data" . Data.Type.Equality.inner_closure" {
     Data.Type.Equality.inner_closure:
         const Data.Type.Equality.inner_info;
 },
 Data.Type.Equality.inner_entry() //  [R2]
         { []
         }
     {offset
       c58WY: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c58WZ; else goto c58X0;
       c58WZ: // global
           R2 = R2;
           R1 = Data.Type.Equality.inner_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c58X0: // global
           I64[Sp - 8] = block_c58WV_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u58X4; else goto c58WW;
       u58X4: // global
           call _c58WV() args: 0, res: 0, upd: 0;
       c58WW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.inner_info" {
     Data.Type.Equality.inner_info:
         const Data.Type.Equality.inner_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c58WV() //  []
         { []
         }
     {offset
       c58WV: // global
           R1 = Data.Type.Equality.$WRefl_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c58WV_info" {
     block_c58WV_info:
         const _c58WV;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.81527643 UTC

[section ""data" . Data.Type.Equality.outer_closure" {
     Data.Type.Equality.outer_closure:
         const Data.Type.Equality.outer_info;
 },
 Data.Type.Equality.outer_entry() //  [R2]
         { []
         }
     {offset
       c58Xn: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c58Xo; else goto c58Xp;
       c58Xo: // global
           R2 = R2;
           R1 = Data.Type.Equality.outer_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c58Xp: // global
           I64[Sp - 8] = block_c58Xk_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u58Xt; else goto c58Xl;
       u58Xt: // global
           call _c58Xk() args: 0, res: 0, upd: 0;
       c58Xl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.outer_info" {
     Data.Type.Equality.outer_info:
         const Data.Type.Equality.outer_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c58Xk() //  []
         { []
         }
     {offset
       c58Xk: // global
           R1 = Data.Type.Equality.$WRefl_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c58Xk_info" {
     block_c58Xk_info:
         const _c58Xk;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.82253404 UTC

[section ""cstring" . Data.Type.Equality.$trModule4_bytes" {
     Data.Type.Equality.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.82501892 UTC

[section ""data" . Data.Type.Equality.$trModule3_closure" {
     Data.Type.Equality.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Type.Equality.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.827518672 UTC

[section ""cstring" . Data.Type.Equality.$trModule2_bytes" {
     Data.Type.Equality.$trModule2_bytes:
         I8[] [68,97,116,97,46,84,121,112,101,46,69,113,117,97,108,105,116,121]
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.83065292 UTC

[section ""data" . Data.Type.Equality.$trModule1_closure" {
     Data.Type.Equality.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Type.Equality.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.833126388 UTC

[section ""data" . Data.Type.Equality.$trModule_closure" {
     Data.Type.Equality.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.Type.Equality.$trModule3_closure+1;
         const Data.Type.Equality.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.835688119 UTC

[section ""data" . $krep_r568a_closure" {
     $krep_r568a_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcConstraint_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.838229868 UTC

[section ""data" . $krep1_r568b_closure" {
     $krep1_r568b_closure:
         const GHC.Types.KindRepVar_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.840645764 UTC

[section ""data" . $krep2_r568c_closure" {
     $krep2_r568c_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r568b_closure+2;
         const GHC.Types.krep$*_closure;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.843106492 UTC

[section ""data" . $krep3_r568d_closure" {
     $krep3_r568d_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.845558961 UTC

[section ""data" . Data.Type.Equality.$tc:~~:1_closure" {
     Data.Type.Equality.$tc:~~:1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r568d_closure+2;
         const $krep2_r568c_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.848090723 UTC

[section ""data" . $krep4_r568e_closure" {
     $krep4_r568e_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r568d_closure+2;
         const GHC.Types.krep$*_closure;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.850892636 UTC

[section ""data" . Data.Type.Equality.$tc:~:1_closure" {
     Data.Type.Equality.$tc:~:1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r568d_closure+2;
         const $krep4_r568e_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.852896189 UTC

[section ""data" . Data.Type.Equality.$tcTestEquality1_closure" {
     Data.Type.Equality.$tcTestEquality1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_r568e_closure+4;
         const $krep_r568a_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.855015291 UTC

[section ""data" . $krep5_r568f_closure" {
     $krep5_r568f_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r568d_closure+2;
         const $krep_r568a_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.856727792 UTC

[section ""data" . Data.Type.Equality.$tc~1_closure" {
     Data.Type.Equality.$tc~1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r568d_closure+2;
         const $krep5_r568f_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.858829143 UTC

[section ""data" . $krep6_r568g_closure" {
     $krep6_r568g_closure:
         const GHC.Types.KindRepVar_con_info;
         const 2;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.860490051 UTC

[section ""data" . $krep7_r568h_closure" {
     $krep7_r568h_closure:
         const :_con_info;
         const $krep6_r568g_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.862296361 UTC

[section ""data" . $krep8_r568i_closure" {
     $krep8_r568i_closure:
         const :_con_info;
         const $krep1_r568b_closure+2;
         const $krep7_r568h_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.864008069 UTC

[section ""data" . $krep9_r568j_closure" {
     $krep9_r568j_closure:
         const :_con_info;
         const $krep3_r568d_closure+2;
         const $krep8_r568i_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.865801114 UTC

[section ""data" . $krep10_r568k_closure" {
     $krep10_r568k_closure:
         const :_con_info;
         const $krep3_r568d_closure+2;
         const $krep9_r568j_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.867519552 UTC

[section ""data" . $krep11_r568l_closure" {
     $krep11_r568l_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc~~_closure;
         const $krep10_r568k_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.869211959 UTC

[section ""cstring" . Data.Type.Equality.$tc~3_bytes" {
     Data.Type.Equality.$tc~3_bytes:
         I8[] [126]
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.871022414 UTC

[section ""data" . Data.Type.Equality.$tc~2_closure" {
     Data.Type.Equality.$tc~2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Type.Equality.$tc~3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.87276949 UTC

[section ""data" . Data.Type.Equality.$tc~_closure" {
     Data.Type.Equality.$tc~_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Type.Equality.$trModule_closure+1;
         const Data.Type.Equality.$tc~2_closure+1;
         const Data.Type.Equality.$tc~1_closure+4;
         const 11470827771536267938;
         const 3625512399163125290;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.874651351 UTC

[section ""data" . $krep12_r568m_closure" {
     $krep12_r568m_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Type.Equality.$tc~_closure+1;
         const $krep9_r568j_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.876847906 UTC

[section ""data" . Data.Type.Equality.$tc'C:~1_closure" {
     Data.Type.Equality.$tc'C:~1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep11_r568l_closure+1;
         const $krep12_r568m_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.879376512 UTC

[section ""cstring" . Data.Type.Equality.$tc'C:~3_bytes" {
     Data.Type.Equality.$tc'C:~3_bytes:
         I8[] [39,67,58,126]
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.881039225 UTC

[section ""data" . Data.Type.Equality.$tc'C:~2_closure" {
     Data.Type.Equality.$tc'C:~2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Type.Equality.$tc'C:~3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.882847658 UTC

[section ""data" . Data.Type.Equality.$tc'C:~_closure" {
     Data.Type.Equality.$tc'C:~_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Type.Equality.$trModule_closure+1;
         const Data.Type.Equality.$tc'C:~2_closure+1;
         const Data.Type.Equality.$tc'C:~1_closure+4;
         const 6023002849810837484;
         const 5427525916893308990;
         const 3;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.884584586 UTC

[section ""cstring" . Data.Type.Equality.$tc:~:3_bytes" {
     Data.Type.Equality.$tc:~:3_bytes:
         I8[] [58,126,58]
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.886444302 UTC

[section ""data" . Data.Type.Equality.$tc:~:2_closure" {
     Data.Type.Equality.$tc:~:2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Type.Equality.$tc:~:3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.888146728 UTC

[section ""data" . Data.Type.Equality.$tc:~:_closure" {
     Data.Type.Equality.$tc:~:_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Type.Equality.$trModule_closure+1;
         const Data.Type.Equality.$tc:~:2_closure+1;
         const Data.Type.Equality.$tc:~:1_closure+4;
         const 10597498348876412676;
         const 16281320961088145472;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.889915874 UTC

[section ""data" . $krep13_r568n_closure" {
     $krep13_r568n_closure:
         const :_con_info;
         const $krep1_r568b_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.891647583 UTC

[section ""data" . $krep14_r568o_closure" {
     $krep14_r568o_closure:
         const :_con_info;
         const $krep1_r568b_closure+2;
         const $krep13_r568n_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.893360291 UTC

[section ""data" . $krep15_r568p_closure" {
     $krep15_r568p_closure:
         const :_con_info;
         const $krep3_r568d_closure+2;
         const $krep14_r568o_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.895131385 UTC

[section ""data" . Data.Type.Equality.$tc'Refl1_closure" {
     Data.Type.Equality.$tc'Refl1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Type.Equality.$tc:~:_closure+1;
         const $krep15_r568p_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.896838095 UTC

[section ""cstring" . Data.Type.Equality.$tc'Refl3_bytes" {
     Data.Type.Equality.$tc'Refl3_bytes:
         I8[] [39,82,101,102,108]
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.898509875 UTC

[section ""data" . Data.Type.Equality.$tc'Refl2_closure" {
     Data.Type.Equality.$tc'Refl2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Type.Equality.$tc'Refl3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.900223747 UTC

[section ""data" . Data.Type.Equality.$tc'Refl_closure" {
     Data.Type.Equality.$tc'Refl_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Type.Equality.$trModule_closure+1;
         const Data.Type.Equality.$tc'Refl2_closure+1;
         const Data.Type.Equality.$tc'Refl1_closure+1;
         const 16680242040484769242;
         const 2864388906562808793;
         const 2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.90207941 UTC

[section ""cstring" . Data.Type.Equality.$tc:~~:3_bytes" {
     Data.Type.Equality.$tc:~~:3_bytes:
         I8[] [58,126,126,58]
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.904468031 UTC

[section ""data" . Data.Type.Equality.$tc:~~:2_closure" {
     Data.Type.Equality.$tc:~~:2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Type.Equality.$tc:~~:3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.907251085 UTC

[section ""data" . Data.Type.Equality.$tc:~~:_closure" {
     Data.Type.Equality.$tc:~~:_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Type.Equality.$trModule_closure+1;
         const Data.Type.Equality.$tc:~~:2_closure+1;
         const Data.Type.Equality.$tc:~~:1_closure+4;
         const 4361259188665111259;
         const 11706467685470543992;
         const 2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.909163995 UTC

[section ""data" . $krep16_r568q_closure" {
     $krep16_r568q_closure:
         const :_con_info;
         const $krep3_r568d_closure+2;
         const $krep15_r568p_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.910945774 UTC

[section ""data" . Data.Type.Equality.$tc'HRefl1_closure" {
     Data.Type.Equality.$tc'HRefl1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Type.Equality.$tc:~~:_closure+1;
         const $krep16_r568q_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.912650314 UTC

[section ""cstring" . Data.Type.Equality.$tc'HRefl3_bytes" {
     Data.Type.Equality.$tc'HRefl3_bytes:
         I8[] [39,72,82,101,102,108]
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.914323861 UTC

[section ""data" . Data.Type.Equality.$tc'HRefl2_closure" {
     Data.Type.Equality.$tc'HRefl2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Type.Equality.$tc'HRefl3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.916105861 UTC

[section ""data" . Data.Type.Equality.$tc'HRefl_closure" {
     Data.Type.Equality.$tc'HRefl_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Type.Equality.$trModule_closure+1;
         const Data.Type.Equality.$tc'HRefl2_closure+1;
         const Data.Type.Equality.$tc'HRefl1_closure+1;
         const 4486133906173668740;
         const 6341741464738386857;
         const 2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.917874946 UTC

[section ""cstring" . Data.Type.Equality.$tcTestEquality3_bytes" {
     Data.Type.Equality.$tcTestEquality3_bytes:
         I8[] [84,101,115,116,69,113,117,97,108,105,116,121]
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.91955741 UTC

[section ""data" . Data.Type.Equality.$tcTestEquality2_closure" {
     Data.Type.Equality.$tcTestEquality2_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.Type.Equality.$tcTestEquality3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.921406433 UTC

[section ""data" . Data.Type.Equality.$tcTestEquality_closure" {
     Data.Type.Equality.$tcTestEquality_closure:
         const GHC.Types.TyCon_con_info;
         const Data.Type.Equality.$trModule_closure+1;
         const Data.Type.Equality.$tcTestEquality2_closure+1;
         const Data.Type.Equality.$tcTestEquality1_closure+4;
         const 2944680549948432194;
         const 17791533211054855448;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.923642632 UTC

[section ""data" . Data.Type.Equality.HRefl_closure" {
     Data.Type.Equality.HRefl_closure:
         const Data.Type.Equality.HRefl_info;
 },
 Data.Type.Equality.HRefl_entry() //  []
         { []
         }
     {offset
       c58Yy: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c58YC; else goto c58YB;
       c58YC: // global
           HpAlloc = 16;
           R1 = Data.Type.Equality.HRefl_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c58YB: // global
           I64[Hp - 8] = Data.Type.Equality.HRefl_con_info;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.HRefl_info" {
     Data.Type.Equality.HRefl_info:
         const Data.Type.Equality.HRefl_entry;
         const 0;
         const 14;
         const 8589934595;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.928113588 UTC

[section ""data" . Data.Type.Equality.Refl_closure" {
     Data.Type.Equality.Refl_closure:
         const Data.Type.Equality.Refl_info;
 },
 Data.Type.Equality.Refl_entry() //  []
         { []
         }
     {offset
       c58YO: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c58YS; else goto c58YR;
       c58YS: // global
           HpAlloc = 16;
           R1 = Data.Type.Equality.Refl_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c58YR: // global
           I64[Hp - 8] = Data.Type.Equality.Refl_con_info;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.Refl_info" {
     Data.Type.Equality.Refl_info:
         const Data.Type.Equality.Refl_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.932265002 UTC

[section ""cstring" . i58Z0_str" {
     i58Z0_str:
         I8[] [98,97,115,101,58,68,97,116,97,46,84,121,112,101,46,69,113,117,97,108,105,116,121,46,72,82,101,102,108]
 },
 Data.Type.Equality.HRefl_con_entry() //  [R1]
         { []
         }
     {offset
       c58YZ: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.HRefl_con_info" {
     Data.Type.Equality.HRefl_con_info:
         const Data.Type.Equality.HRefl_con_entry;
         const 4294967296;
         const 3;
         const i58Z0_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.935747696 UTC

[section ""cstring" . i58Z7_str" {
     i58Z7_str:
         I8[] [98,97,115,101,58,68,97,116,97,46,84,121,112,101,46,69,113,117,97,108,105,116,121,46,82,101,102,108]
 },
 Data.Type.Equality.Refl_con_entry() //  [R1]
         { []
         }
     {offset
       c58Z6: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.Type.Equality.Refl_con_info" {
     Data.Type.Equality.Refl_con_info:
         const Data.Type.Equality.Refl_con_entry;
         const 4294967296;
         const 3;
         const i58Z7_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:00:05.939097224 UTC

[section ""relreadonly" . S587Z_srt" {
     S587Z_srt:
         const GHC.Err.errorWithoutStackTrace_closure;
         const Data.Type.Equality.$fEnum:~:1_closure;
         const Data.Type.Equality.$fEnum:~:_$ctoEnum_closure;
         const Data.Type.Equality.$fEnum:~:_$csucc_closure;
         const Data.Type.Equality.$w$cenumFromTo_closure;
         const Data.Type.Equality.$fEnum:~:_$cenumFromTo_closure;
         const Data.Type.Equality.$w$cenumFromThen_closure;
         const Data.Type.Equality.$fEnum:~:2_closure;
         const Data.Type.Equality.$fEnum:~:_$cenumFromThen_closure;
         const Data.Type.Equality.$w$cenumFrom_closure;
         const Data.Type.Equality.$fEnum:~:_$cenumFrom_closure;
         const Data.Type.Equality.$w$cenumFromThenTo_closure;
         const Data.Type.Equality.$fEnum:~:_$cenumFromThenTo_closure;
         const Data.Type.Equality.$fEnum:~:_closure;
         const Data.Type.Equality.$fEnum:~~:1_closure;
         const Data.Type.Equality.$fEnum:~~:_$ctoEnum_closure;
         const Data.Type.Equality.$fEnum:~~:_$csucc_closure;
         const Data.Type.Equality.$w$cenumFromTo1_closure;
         const Data.Type.Equality.$fEnum:~~:_$cenumFromTo_closure;
         const Data.Type.Equality.$w$cenumFromThen1_closure;
         const Data.Type.Equality.$fEnum:~~:_$cenumFromThen_closure;
         const Data.Type.Equality.$w$cenumFrom1_closure;
         const Data.Type.Equality.$fEnum:~~:_$cenumFrom_closure;
         const Data.Type.Equality.$w$cenumFromThenTo1_closure;
         const Data.Type.Equality.$fEnum:~~:_$cenumFromThenTo_closure;
         const Data.Type.Equality.$fEnum:~~:_closure;
         const Data.Type.Equality.$fRead:~:2_closure;
         const Data.Type.Equality.$fShow:~:_$cshowsPrec_closure;
         const Data.Type.Equality.$fShow:~:_$cshow_closure;
         const Data.Type.Equality.$fShow:~:1_closure;
         const Text.Read.Lex.$wexpect_closure;
         const Data.Type.Equality.$fRead:~:1_closure;
         const Data.Type.Equality.$fRead:~:_lexeme_closure;
         const GHC.Read.list3_closure;
         const Data.Type.Equality.$fRead:~:4_closure;
         const Data.Type.Equality.$fRead:~:_$creadsPrec_closure;
         const GHC.Read.list_closure;
         const Data.Type.Equality.$fRead:~:_$creadListPrec_closure;
         const Data.Type.Equality.$fRead:~:_$creadList_closure;
         const Data.Type.Equality.$fRead:~:_closure;
         const Data.Type.Equality.$fRead:~~:2_closure;
         const Data.Type.Equality.$fShow:~~:_$cshowsPrec_closure;
         const Data.Type.Equality.$fShow:~~:_$cshow_closure;
         const Data.Type.Equality.$fShow:~~:1_closure;
         const Data.Type.Equality.$fRead:~~:1_closure;
         const Data.Type.Equality.$fRead:~~:_lexeme_closure;
         const Data.Type.Equality.$fRead:~~:4_closure;
         const Data.Type.Equality.$fRead:~~:_$creadsPrec_closure;
         const Data.Type.Equality.$fRead:~~:_$creadListPrec_closure;
         const Data.Type.Equality.$fRead:~~:_$creadList_closure;
         const Data.Type.Equality.$fRead:~~:_closure;
 }]

