
==================== Raw Cmm ====================
2018-03-16 16:08:35.60428534 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:08:35.606426682 UTC

[section ""data" . Data.List.NonEmpty.nonEmpty_closure" {
     Data.List.NonEmpty.nonEmpty_closure:
         const Data.List.NonEmpty.nonEmpty_info;
 },
 Data.List.NonEmpty.nonEmpty_entry() //  [R2]
         { []
         }
     {offset
       cdqTo: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdqTp; else goto cdqTq;
       cdqTp: // global
           R2 = R2;
           R1 = Data.List.NonEmpty.nonEmpty_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdqTq: // global
           I64[Sp - 8] = block_cdqTh_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udqTB; else goto cdqTi;
       udqTB: // global
           call _cdqTh(R1) args: 0, res: 0, upd: 0;
       cdqTi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.nonEmpty_info" {
     Data.List.NonEmpty.nonEmpty_info:
         const Data.List.NonEmpty.nonEmpty_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdqTh() //  [R1]
         { []
         }
     {offset
       cdqTh: // global
           if (R1 & 7 == 1) goto cdqTl; else goto cdqTm;
       cdqTl: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdqTm: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdqTA; else goto cdqTz;
       cdqTA: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdqTz: // global
           _sdpwy::P64 = P64[R1 + 6];
           _sdpwz::P64 = P64[R1 + 14];
           I64[Hp - 32] = GHC.Base.:|_con_info;
           P64[Hp - 24] = _sdpwy::P64;
           P64[Hp - 16] = _sdpwz::P64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdqTh_info" {
     block_cdqTh_info:
         const _cdqTh;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:35.613813172 UTC

[section ""data" . Data.List.NonEmpty.uncons_closure" {
     Data.List.NonEmpty.uncons_closure:
         const Data.List.NonEmpty.uncons_info;
 },
 sat_sdpwN_entry() //  [R1]
         { []
         }
     {offset
       cdqU1: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdqU2; else goto cdqU3;
       cdqU2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdqU3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cdqTY_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udqUp; else goto cdqTZ;
       udqUp: // global
           call _cdqTY(R1) args: 0, res: 0, upd: 0;
       cdqTZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdpwN_info" {
     sat_sdpwN_info:
         const sat_sdpwN_entry;
         const 1;
         const 16;
 },
 _cdqTY() //  [R1]
         { []
         }
     {offset
       cdqTY: // global
           I64[Sp] = block_cdqU6_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto udqUo; else goto cdqU8;
       udqUo: // global
           call _cdqU6(R1) args: 0, res: 0, upd: 0;
       cdqU8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cdqTY_info" {
     block_cdqTY_info:
         const _cdqTY;
         const 0;
         const 30;
 },
 _cdqU6() //  [R1]
         { []
         }
     {offset
       cdqU6: // global
           if (R1 & 7 == 1) goto cdqUe; else goto cdqUj;
       cdqUe: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdqUj: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdqUm; else goto cdqUl;
       cdqUm: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdqUl: // global
           _sdpwK::P64 = P64[R1 + 6];
           _sdpwL::P64 = P64[R1 + 14];
           I64[Hp - 32] = GHC.Base.:|_con_info;
           P64[Hp - 24] = _sdpwK::P64;
           P64[Hp - 16] = _sdpwL::P64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdqU6_info" {
     block_cdqU6_info:
         const _cdqU6;
         const 0;
         const 30;
 },
 Data.List.NonEmpty.uncons_entry() //  [R2]
         { []
         }
     {offset
       cdqUs: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdqUw; else goto cdqUv;
       cdqUw: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Data.List.NonEmpty.uncons_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdqUv: // global
           I64[Hp - 64] = sat_sdpwN_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.uncons_info" {
     Data.List.NonEmpty.uncons_info:
         const Data.List.NonEmpty.uncons_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:35.626271325 UTC

[section ""data" . Data.List.NonEmpty.$wunfoldr_closure" {
     Data.List.NonEmpty.$wunfoldr_closure:
         const Data.List.NonEmpty.$wunfoldr_info;
 },
 sat_sdpx2_entry() //  [R1]
         { []
         }
     {offset
       cdqVx: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdqVy; else goto cdqVz;
       cdqVy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdqVz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cdqVq_info;
           _sdpwV::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _sdpwV::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udqVG; else goto cdqVr;
       udqVG: // global
           call _cdqVq(R1) args: 0, res: 0, upd: 0;
       cdqVr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdpx2_info" {
     sat_sdpx2_info:
         const sat_sdpx2_entry;
         const 2;
         const 18;
 },
 _cdqVq() //  [R1]
         { []
         }
     {offset
       cdqVq: // global
           if (R1 & 7 == 1) goto cdqVu; else goto cdqVv;
       cdqVu: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdqVv: // global
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_sdpwV_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdqVq_info" {
     block_cdqVq_info:
         const _cdqVq;
         const 1;
         const 30;
 },
 go_sdpwV_entry() //  [R1, R2]
         { []
         }
     {offset
       cdqVH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdqVJ; else goto cdqVK;
       cdqVJ: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdqVK: // global
           I64[Sp - 16] = block_cdqVi_info;
           R2 = R2;
           _sdpwV::P64 = R1;
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _sdpwV::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_sdpwV_info" {
     go_sdpwV_info:
         const go_sdpwV_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cdqVi() //  [R1]
         { []
         }
     {offset
       cdqVi: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdqVN; else goto cdqVM;
       cdqVN: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdqVM: // global
           _sdpwY::P64 = P64[R1 + 7];
           _sdpwZ::P64 = P64[R1 + 15];
           I64[Hp - 48] = sat_sdpx2_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _sdpwZ::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _sdpwY::P64;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdqVi_info" {
     block_cdqVi_info:
         const _cdqVi;
         const 1;
         const 30;
 },
 sat_sdpx3_entry() //  [R1]
         { []
         }
     {offset
       cdqVS: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdqVT; else goto cdqVU;
       cdqVT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdqVU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cdqV7_info;
           _sdpwO::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _sdpwO::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udqW0; else goto cdqV8;
       udqW0: // global
           call _cdqV7(R1) args: 0, res: 0, upd: 0;
       cdqV8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdpx3_info" {
     sat_sdpx3_info:
         const sat_sdpx3_entry;
         const 2;
         const 18;
 },
 _cdqV7() //  [R1]
         { []
         }
     {offset
       cdqV7: // global
           if (R1 & 7 == 1) goto cdqVP; else goto cdqVQ;
       cdqVP: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdqVQ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdqVZ; else goto cdqVY;
       cdqVZ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdqVY: // global
           _sdpwU::P64 = P64[R1 + 6];
           I64[Hp - 8] = go_sdpwV_info;
           P64[Hp] = P64[Sp + 8];
           R2 = _sdpwU::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call go_sdpwV_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdqV7_info" {
     block_cdqV7_info:
         const _cdqV7;
         const 1;
         const 30;
 },
 Data.List.NonEmpty.$wunfoldr_entry() //  [R2, R3]
         { []
         }
     {offset
       cdqW1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdqW2; else goto cdqW3;
       cdqW2: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.$wunfoldr_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdqW3: // global
           I64[Sp - 16] = block_cdqUZ_info;
           _sdpwO::P64 = R2;
           R2 = R3;
           R1 = _sdpwO::P64;
           P64[Sp - 8] = _sdpwO::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.$wunfoldr_info" {
     Data.List.NonEmpty.$wunfoldr_info:
         const Data.List.NonEmpty.$wunfoldr_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cdqUZ() //  [R1]
         { []
         }
     {offset
       cdqUZ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdqW6; else goto cdqW5;
       cdqW6: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdqW5: // global
           _sdpwR::P64 = P64[R1 + 7];
           _sdpwS::P64 = P64[R1 + 15];
           I64[Hp - 24] = sat_sdpx3_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _sdpwS::P64;
           R2 = Hp - 24;
           R1 = _sdpwR::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdqUZ_info" {
     block_cdqUZ_info:
         const _cdqUZ;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:35.644628871 UTC

[section ""data" . Data.List.NonEmpty.unfoldr_closure" {
     Data.List.NonEmpty.unfoldr_closure:
         const Data.List.NonEmpty.unfoldr_info;
 },
 Data.List.NonEmpty.unfoldr_entry() //  [R2, R3]
         { []
         }
     {offset
       cdqWV: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdqWW; else goto cdqWX;
       cdqWW: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.unfoldr_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdqWX: // global
           I64[Sp - 8] = block_cdqWS_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Data.List.NonEmpty.$wunfoldr_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.unfoldr_info" {
     Data.List.NonEmpty.unfoldr_info:
         const Data.List.NonEmpty.unfoldr_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cdqWS() //  [R1, R2]
         { []
         }
     {offset
       cdqWS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdqX0; else goto cdqWZ;
       cdqX0: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cdqWZ: // global
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdqWS_info" {
     block_cdqWS_info:
         const _cdqWS;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:35.650220633 UTC

[section ""data" . Data.List.NonEmpty.head_closure" {
     Data.List.NonEmpty.head_closure:
         const Data.List.NonEmpty.head_info;
 },
 Data.List.NonEmpty.head_entry() //  [R2]
         { []
         }
     {offset
       cdqXh: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdqXi; else goto cdqXj;
       cdqXi: // global
           R2 = R2;
           R1 = Data.List.NonEmpty.head_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdqXj: // global
           I64[Sp - 8] = block_cdqXe_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udqXn; else goto cdqXf;
       udqXn: // global
           call _cdqXe(R1) args: 0, res: 0, upd: 0;
       cdqXf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.head_info" {
     Data.List.NonEmpty.head_info:
         const Data.List.NonEmpty.head_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdqXe() //  [R1]
         { []
         }
     {offset
       cdqXe: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdqXe_info" {
     block_cdqXe_info:
         const _cdqXe;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:35.655849453 UTC

[section ""data" . Data.List.NonEmpty.tail_closure" {
     Data.List.NonEmpty.tail_closure:
         const Data.List.NonEmpty.tail_info;
 },
 Data.List.NonEmpty.tail_entry() //  [R2]
         { []
         }
     {offset
       cdqXE: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdqXF; else goto cdqXG;
       cdqXF: // global
           R2 = R2;
           R1 = Data.List.NonEmpty.tail_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdqXG: // global
           I64[Sp - 8] = block_cdqXB_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udqXK; else goto cdqXC;
       udqXK: // global
           call _cdqXB(R1) args: 0, res: 0, upd: 0;
       cdqXC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.tail_info" {
     Data.List.NonEmpty.tail_info:
         const Data.List.NonEmpty.tail_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdqXB() //  [R1]
         { []
         }
     {offset
       cdqXB: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdqXB_info" {
     block_cdqXB_info:
         const _cdqXB;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:35.661722111 UTC

[section ""data" . poly_go_rdpws_closure" {
     poly_go_rdpws_closure:
         const poly_go_rdpws_info;
 },
 poly_go_rdpws_entry() //  [R2, R3]
         { []
         }
     {offset
       cdqY7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdqY8; else goto udqYg;
       cdqY8: // global
           R3 = R3;
           R2 = R2;
           R1 = poly_go_rdpws_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       udqYg: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _cdqXX() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . poly_go_rdpws_info" {
     poly_go_rdpws_info:
         const poly_go_rdpws_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cdqXX() //  []
         { []
         }
     {offset
       cdqXX: // global
           _sdpxh::P64 = P64[Sp];
           I64[Sp] = block_cdqY0_info;
           R1 = _sdpxh::P64;
           if (R1 & 7 != 0) goto udqYi; else goto cdqY1;
       udqYi: // global
           call _cdqY0(R1) args: 0, res: 0, upd: 0;
       cdqY1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdqY0() //  [R1]
         { []
         }
     {offset
       cdqY0: // global
           if (R1 & 7 == 1) goto cdqY4; else goto cdqY5;
       cdqY4: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cdqY5: // global
           P64[Sp] = P64[R1 + 14];
           P64[Sp + 8] = P64[R1 + 6];
           call _cdqXX() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdqY0_info" {
     block_cdqY0_info:
         const _cdqY0;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:35.667967877 UTC

[section ""data" . Data.List.NonEmpty.last_closure" {
     Data.List.NonEmpty.last_closure:
         const Data.List.NonEmpty.last_info;
         const 0;
 },
 Data.List.NonEmpty.last_entry() //  [R2]
         { []
         }
     {offset
       cdqYH: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdqYL; else goto cdqYK;
       cdqYL: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Data.List.NonEmpty.last_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdqYK: // global
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R3 = GHC.List.lastError_closure;
           R2 = Hp - 14;
           call poly_go_rdpws_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.last_info" {
     Data.List.NonEmpty.last_info:
         const Data.List.NonEmpty.last_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SdpN4_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:35.672813788 UTC

[section ""data" . Data.List.NonEmpty.init_closure" {
     Data.List.NonEmpty.init_closure:
         const Data.List.NonEmpty.init_info;
 },
 Data.List.NonEmpty.init_entry() //  [R2]
         { []
         }
     {offset
       cdqYZ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdqZ0; else goto cdqZ1;
       cdqZ0: // global
           R2 = R2;
           R1 = Data.List.NonEmpty.init_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdqZ1: // global
           I64[Sp - 8] = block_cdqYW_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udqZ5; else goto cdqYX;
       udqZ5: // global
           call _cdqYW(R1) args: 0, res: 0, upd: 0;
       cdqYX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.init_info" {
     Data.List.NonEmpty.init_info:
         const Data.List.NonEmpty.init_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdqYW() //  [R1]
         { []
         }
     {offset
       cdqYW: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.List.init1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdqYW_info" {
     block_cdqYW_info:
         const _cdqYW;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:35.678028958 UTC

[section ""data" . Data.List.NonEmpty.<|_closure" {
     Data.List.NonEmpty.<|_closure:
         const Data.List.NonEmpty.<|_info;
 },
 Data.List.NonEmpty.<|_entry() //  [R2, R3]
         { []
         }
     {offset
       cdqZn: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cdqZr; else goto cdqZq;
       cdqZr: // global
           HpAlloc = 96;
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.<|_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdqZq: // global
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = R3;
           I64[Hp - 64] = stg_sel_0_upd_info;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = Hp - 64;
           P64[Hp - 24] = Hp - 88;
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 38;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.<|_info" {
     Data.List.NonEmpty.<|_info:
         const Data.List.NonEmpty.<|_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:35.681858624 UTC

[section ""data" . Data.List.NonEmpty.cons_closure" {
     Data.List.NonEmpty.cons_closure:
         const Data.List.NonEmpty.cons_info;
 },
 Data.List.NonEmpty.cons_entry() //  [R2, R3]
         { []
         }
     {offset
       cdqZE: // global
           R3 = R3;
           R2 = R2;
           call Data.List.NonEmpty.<|_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.cons_info" {
     Data.List.NonEmpty.cons_info:
         const Data.List.NonEmpty.cons_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:35.68766664 UTC

[section ""data" . Data.List.NonEmpty.$wunfold_closure" {
     Data.List.NonEmpty.$wunfold_closure:
         const Data.List.NonEmpty.$wunfold_info;
 },
 ds1_sdpxS_entry() //  [R1]
         { []
         }
     {offset
       cdr06: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdr07; else goto cdr08;
       cdr07: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdr08: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cdr03_info;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call Data.List.NonEmpty.$wunfold_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds1_sdpxS_info" {
     ds1_sdpxS_info:
         const ds1_sdpxS_entry;
         const 2;
         const 18;
 },
 _cdr03() //  [R1, R2]
         { []
         }
     {offset
       cdr03: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdr0b; else goto cdr0a;
       cdr0b: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cdr0a: // global
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdr03_info" {
     block_cdr03_info:
         const _cdr03;
         const 0;
         const 30;
 },
 Data.List.NonEmpty.$wunfold_entry() //  [R2, R3]
         { []
         }
     {offset
       cdr0c: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdr0d; else goto cdr0e;
       cdr0d: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.$wunfold_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdr0e: // global
           I64[Sp - 16] = block_cdqZP_info;
           _sdpxL::P64 = R2;
           R2 = R3;
           R1 = _sdpxL::P64;
           P64[Sp - 8] = _sdpxL::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.$wunfold_info" {
     Data.List.NonEmpty.$wunfold_info:
         const Data.List.NonEmpty.$wunfold_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cdqZP() //  [R1]
         { []
         }
     {offset
       cdqZP: // global
           I64[Sp - 8] = block_cdqZT_info;
           _sdpxO::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sdpxO::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udr0s; else goto cdqZU;
       udr0s: // global
           call _cdqZT(R1) args: 0, res: 0, upd: 0;
       cdqZU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdqZP_info" {
     block_cdqZP_info:
         const _cdqZP;
         const 1;
         const 30;
 },
 _cdqZT() //  [R1]
         { []
         }
     {offset
       cdqZT: // global
           _sdpxO::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cdr0j; else goto cdr0n;
       cdr0j: // global
           R2 = GHC.Types.[]_closure+1;
           R1 = _sdpxO::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       cdr0n: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cdr0q; else goto cdr0p;
       cdr0q: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdr0p: // global
           _sdpxR::P64 = P64[R1 + 6];
           I64[Hp - 96] = ds1_sdpxS_info;
           P64[Hp - 80] = P64[Sp + 16];
           P64[Hp - 72] = _sdpxR::P64;
           I64[Hp - 64] = stg_sel_1_upd_info;
           _cdqZZ::P64 = Hp - 96;
           P64[Hp - 48] = _cdqZZ::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _cdqZZ::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R2 = Hp - 14;
           R1 = _sdpxO::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdqZT_info" {
     block_cdqZT_info:
         const _cdqZT;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:35.698720949 UTC

[section ""data" . Data.List.NonEmpty.unfold_closure" {
     Data.List.NonEmpty.unfold_closure:
         const Data.List.NonEmpty.unfold_info;
 },
 Data.List.NonEmpty.unfold_entry() //  [R2, R3]
         { []
         }
     {offset
       cdr11: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdr12; else goto cdr13;
       cdr12: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.unfold_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdr13: // global
           I64[Sp - 8] = block_cdr0Y_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Data.List.NonEmpty.$wunfold_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.unfold_info" {
     Data.List.NonEmpty.unfold_info:
         const Data.List.NonEmpty.unfold_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cdr0Y() //  [R1, R2]
         { []
         }
     {offset
       cdr0Y: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdr16; else goto cdr15;
       cdr16: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cdr15: // global
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdr0Y_info" {
     block_cdr0Y_info:
         const _cdr0Y;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:35.704106416 UTC

[section ""cstring" . lvl_rdpwt_bytes" {
     lvl_rdpwt_bytes:
         I8[] [78,111,110,69,109,112,116,121,46,102,114,111,109,76,105,115,116,58,32,101,109,112,116,121,32,108,105,115,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:35.707224004 UTC

[section ""data" . Data.List.NonEmpty.cycle1_closure" {
     Data.List.NonEmpty.cycle1_closure:
         const Data.List.NonEmpty.cycle1_info;
         const 0;
         const 0;
         const 0;
 },
 Data.List.NonEmpty.cycle1_entry() //  [R1]
         { []
         }
     {offset
       cdr1p: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdr1q; else goto cdr1r;
       cdr1q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdr1r: // global
           (_cdr1k::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdr1k::I64 == 0) goto cdr1m; else goto cdr1l;
       cdr1m: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdr1l: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdr1k::I64;
           I64[Sp - 24] = block_cdr1n_info;
           R2 = lvl_rdpwt_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.cycle1_info" {
     Data.List.NonEmpty.cycle1_info:
         const Data.List.NonEmpty.cycle1_entry;
         const 0;
         const 4294967317;
         const SdpN4_srt+16;
 },
 _cdr1n() //  [R1]
         { []
         }
     {offset
       cdr1n: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdr1n_info" {
     block_cdr1n_info:
         const _cdr1n;
         const 0;
         const 4294967326;
         const SdpN4_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:35.715846041 UTC

[section ""data" . Data.List.NonEmpty.fromList_closure" {
     Data.List.NonEmpty.fromList_closure:
         const Data.List.NonEmpty.fromList_info;
         const 0;
 },
 Data.List.NonEmpty.fromList_entry() //  [R2]
         { []
         }
     {offset
       cdr1Q: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdr1R; else goto cdr1S;
       cdr1R: // global
           R2 = R2;
           R1 = Data.List.NonEmpty.fromList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdr1S: // global
           I64[Sp - 8] = block_cdr1J_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udr22; else goto cdr1K;
       udr22: // global
           call _cdr1J(R1) args: 0, res: 0, upd: 0;
       cdr1K: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.fromList_info" {
     Data.List.NonEmpty.fromList_info:
         const Data.List.NonEmpty.fromList_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SdpN4_srt+24;
 },
 _cdr1J() //  [R1]
         { []
         }
     {offset
       cdr1J: // global
           if (R1 & 7 == 1) goto cdr1N; else goto cdr1O;
       cdr1N: // global
           R1 = Data.List.NonEmpty.cycle1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdr1O: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdr21; else goto cdr20;
       cdr21: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdr20: // global
           _sdpyd::P64 = P64[R1 + 6];
           _sdpye::P64 = P64[R1 + 14];
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = _sdpyd::P64;
           P64[Hp] = _sdpye::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdr1J_info" {
     block_cdr1J_info:
         const _cdr1J;
         const 0;
         const 4294967326;
         const SdpN4_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:35.722708071 UTC

[section ""data" . Data.List.NonEmpty.reverse_closure" {
     Data.List.NonEmpty.reverse_closure:
         const Data.List.NonEmpty.reverse_info;
         const 0;
 },
 Data.List.NonEmpty.reverse_entry() //  [R2]
         { []
         }
     {offset
       cdr2t: // global
           _sdpyf::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto cdr2u; else goto cdr2v;
       cdr2v: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdr2x; else goto cdr2w;
       cdr2x: // global
           HpAlloc = 72;
           goto cdr2u;
       cdr2u: // global
           R2 = _sdpyf::P64;
           R1 = Data.List.NonEmpty.reverse_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdr2w: // global
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _sdpyf::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _sdpyf::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           I64[Sp - 8] = block_cdr2n_info;
           R3 = GHC.Types.[]_closure+1;
           R2 = Hp - 14;
           Sp = Sp - 8;
           call GHC.List.reverse1_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.reverse_info" {
     Data.List.NonEmpty.reverse_info:
         const Data.List.NonEmpty.reverse_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SdpN4_srt+32;
 },
 _cdr2n() //  [R1]
         { []
         }
     {offset
       cdr2n: // global
           if (R1 & 7 == 1) goto cdr2q; else goto cdr2r;
       cdr2q: // global
           R1 = Data.List.NonEmpty.cycle1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdr2r: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdr2G; else goto cdr2F;
       cdr2G: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdr2F: // global
           _sdpyr::P64 = P64[R1 + 6];
           _sdpys::P64 = P64[R1 + 14];
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = _sdpyr::P64;
           P64[Hp] = _sdpys::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdr2n_info" {
     block_cdr2n_info:
         const _cdr2n;
         const 0;
         const 4294967326;
         const SdpN4_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:35.730485563 UTC

[section ""data" . Data.List.NonEmpty.sortBy_closure" {
     Data.List.NonEmpty.sortBy_closure:
         const Data.List.NonEmpty.sortBy_info;
         const 0;
 },
 Data.List.NonEmpty.sortBy_entry() //  [R2, R3]
         { []
         }
     {offset
       cdr38: // global
           _sdpyu::P64 = R3;
           _sdpyt::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto cdr39; else goto cdr3a;
       cdr3a: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdr3c; else goto cdr3b;
       cdr3c: // global
           HpAlloc = 72;
           goto cdr39;
       cdr39: // global
           R3 = _sdpyu::P64;
           R2 = _sdpyt::P64;
           R1 = Data.List.NonEmpty.sortBy_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdr3b: // global
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _sdpyu::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _sdpyu::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           I64[Sp - 8] = block_cdr32_info;
           R3 = Hp - 14;
           R2 = _sdpyt::P64;
           Sp = Sp - 8;
           call Data.OldList.sortBy_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.sortBy_info" {
     Data.List.NonEmpty.sortBy_info:
         const Data.List.NonEmpty.sortBy_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const SdpN4_srt+32;
 },
 _cdr32() //  [R1]
         { []
         }
     {offset
       cdr32: // global
           if (R1 & 7 == 1) goto cdr35; else goto cdr36;
       cdr35: // global
           R1 = Data.List.NonEmpty.cycle1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdr36: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdr3l; else goto cdr3k;
       cdr3l: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdr3k: // global
           _sdpyF::P64 = P64[R1 + 6];
           _sdpyG::P64 = P64[R1 + 14];
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = _sdpyF::P64;
           P64[Hp] = _sdpyG::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdr32_info" {
     block_cdr32_info:
         const _cdr32;
         const 0;
         const 4294967326;
         const SdpN4_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:35.739167695 UTC

[section ""data" . Data.List.NonEmpty.sortWith_closure" {
     Data.List.NonEmpty.sortWith_closure:
         const Data.List.NonEmpty.sortWith_info;
         const 0;
 },
 sat_sdpyK_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdr3M: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Ord.comparing_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdpyK_info" {
     sat_sdpyK_info:
         const sat_sdpyK_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 Data.List.NonEmpty.sortWith_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdr3V: // global
           _sdpyJ::P64 = R4;
           _sdpyI::P64 = R3;
           _sdpyH::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto cdr3W; else goto cdr3X;
       cdr3X: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cdr3Z; else goto cdr3Y;
       cdr3Z: // global
           HpAlloc = 96;
           goto cdr3W;
       cdr3W: // global
           R4 = _sdpyJ::P64;
           R3 = _sdpyI::P64;
           R2 = _sdpyH::P64;
           R1 = Data.List.NonEmpty.sortWith_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdr3Y: // global
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _sdpyJ::P64;
           I64[Hp - 64] = stg_sel_0_upd_info;
           P64[Hp - 48] = _sdpyJ::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = Hp - 64;
           P64[Hp - 24] = Hp - 88;
           I64[Hp - 16] = sat_sdpyK_info;
           P64[Hp - 8] = _sdpyH::P64;
           P64[Hp] = _sdpyI::P64;
           I64[Sp - 8] = block_cdr3P_info;
           R3 = Hp - 38;
           R2 = Hp - 14;
           Sp = Sp - 8;
           call Data.OldList.sortBy_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.sortWith_info" {
     Data.List.NonEmpty.sortWith_info:
         const Data.List.NonEmpty.sortWith_entry;
         const 0;
         const 38654705678;
         const 12884901911;
         const SdpN4_srt+32;
 },
 _cdr3P() //  [R1]
         { []
         }
     {offset
       cdr3P: // global
           if (R1 & 7 == 1) goto cdr3S; else goto cdr3T;
       cdr3S: // global
           R1 = Data.List.NonEmpty.cycle1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdr3T: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdr48; else goto cdr47;
       cdr48: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdr47: // global
           _sdpyW::P64 = P64[R1 + 6];
           _sdpyX::P64 = P64[R1 + 14];
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = _sdpyW::P64;
           P64[Hp] = _sdpyX::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdr3P_info" {
     block_cdr3P_info:
         const _cdr3P;
         const 0;
         const 4294967326;
         const SdpN4_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:35.749389888 UTC

[section ""data" . Data.List.NonEmpty.sort_closure" {
     Data.List.NonEmpty.sort_closure:
         const Data.List.NonEmpty.sort_info;
         const 0;
 },
 sat_sdpz0_entry() //  [R1]
         { []
         }
     {offset
       cdr4B: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdr4C; else goto cdr4D;
       cdr4C: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdr4D: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdpz0_info" {
     sat_sdpz0_info:
         const sat_sdpz0_entry;
         const 1;
         const 16;
 },
 Data.List.NonEmpty.sort_entry() //  [R2, R3]
         { []
         }
     {offset
       cdr4K: // global
           _sdpyZ::P64 = R3;
           _sdpyY::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto cdr4L; else goto cdr4M;
       cdr4M: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cdr4O; else goto cdr4N;
       cdr4O: // global
           HpAlloc = 96;
           goto cdr4L;
       cdr4L: // global
           R3 = _sdpyZ::P64;
           R2 = _sdpyY::P64;
           R1 = Data.List.NonEmpty.sort_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdr4N: // global
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _sdpyZ::P64;
           I64[Hp - 64] = stg_sel_0_upd_info;
           P64[Hp - 48] = _sdpyZ::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = Hp - 64;
           P64[Hp - 24] = Hp - 88;
           I64[Hp - 16] = sat_sdpz0_info;
           P64[Hp] = _sdpyY::P64;
           I64[Sp - 8] = block_cdr4E_info;
           R3 = Hp - 38;
           R2 = Hp - 16;
           Sp = Sp - 8;
           call Data.OldList.sortBy_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.sort_info" {
     Data.List.NonEmpty.sort_info:
         const Data.List.NonEmpty.sort_entry;
         const 0;
         const 73014444046;
         const 8589934607;
         const SdpN4_srt+32;
 },
 _cdr4E() //  [R1]
         { []
         }
     {offset
       cdr4E: // global
           if (R1 & 7 == 1) goto cdr4H; else goto cdr4I;
       cdr4H: // global
           R1 = Data.List.NonEmpty.cycle1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdr4I: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdr4X; else goto cdr4W;
       cdr4X: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdr4W: // global
           _sdpzc::P64 = P64[R1 + 6];
           _sdpzd::P64 = P64[R1 + 14];
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = _sdpzc::P64;
           P64[Hp] = _sdpzd::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdr4E_info" {
     block_cdr4E_info:
         const _cdr4E;
         const 0;
         const 4294967326;
         const SdpN4_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:35.759859141 UTC

[section ""data" . Data.List.NonEmpty.inits_closure" {
     Data.List.NonEmpty.inits_closure:
         const Data.List.NonEmpty.inits_info;
         const 0;
 },
 sat_sdpzg_entry() //  [R1]
         { []
         }
     {offset
       cdr5o: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdr5p; else goto cdr5q;
       cdr5p: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdr5q: // global
           R2 = P64[R1 + 16];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[R1 + 24];
           Sp = Sp - 16;
           call Data.Foldable.toList_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdpzg_info" {
     sat_sdpzg_info:
         const sat_sdpzg_entry;
         const 2;
         const 18;
 },
 Data.List.NonEmpty.inits_entry() //  [R2, R3]
         { []
         }
     {offset
       cdr5u: // global
           _sdpzf::P64 = R3;
           _sdpze::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto cdr5v; else goto cdr5w;
       cdr5w: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdr5y; else goto cdr5x;
       cdr5y: // global
           HpAlloc = 32;
           goto cdr5v;
       cdr5v: // global
           R3 = _sdpzf::P64;
           R2 = _sdpze::P64;
           R1 = Data.List.NonEmpty.inits_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdr5x: // global
           I64[Hp - 24] = sat_sdpzg_info;
           P64[Hp - 8] = _sdpze::P64;
           P64[Hp] = _sdpzf::P64;
           I64[Sp - 8] = block_cdr5r_info;
           R2 = Hp - 24;
           Sp = Sp - 8;
           call Data.OldList.$winits_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.inits_info" {
     Data.List.NonEmpty.inits_info:
         const Data.List.NonEmpty.inits_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SdpN4_srt+72;
 },
 _cdr5r() //  [R1, R2]
         { []
         }
     {offset
       cdr5r: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdr5B; else goto cdr5A;
       cdr5B: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cdr5A: // global
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdr5r_info" {
     block_cdr5r_info:
         const _cdr5r;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:35.768228725 UTC

[section ""data" . Data.List.NonEmpty.tails1_closure" {
     Data.List.NonEmpty.tails1_closure:
         const Data.List.NonEmpty.tails1_info;
 },
 sat_sdpzo_entry() //  [R1]
         { []
         }
     {offset
       cdr65: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdr66; else goto cdr67;
       cdr66: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdr67: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cdr5Y_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udr6e; else goto cdr5Z;
       udr6e: // global
           call _cdr5Y(R1) args: 0, res: 0, upd: 0;
       cdr5Z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdpzo_info" {
     sat_sdpzo_info:
         const sat_sdpzo_entry;
         const 1;
         const 16;
 },
 _cdr5Y() //  [R1]
         { []
         }
     {offset
       cdr5Y: // global
           if (R1 & 7 == 1) goto cdr62; else goto cdr63;
       cdr62: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdr63: // global
           R2 = P64[R1 + 14];
           Sp = Sp + 8;
           call Data.List.NonEmpty.tails1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdr5Y_info" {
     block_cdr5Y_info:
         const _cdr5Y;
         const 0;
         const 30;
 },
 Data.List.NonEmpty.tails1_entry() //  [R2]
         { []
         }
     {offset
       cdr6g: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdr6k; else goto cdr6j;
       cdr6k: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = Data.List.NonEmpty.tails1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdr6j: // global
           I64[Hp - 40] = sat_sdpzo_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.tails1_info" {
     Data.List.NonEmpty.tails1_info:
         const Data.List.NonEmpty.tails1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:35.776488052 UTC

[section ""data" . Data.List.NonEmpty.tails_closure" {
     Data.List.NonEmpty.tails_closure:
         const Data.List.NonEmpty.tails_info;
         const 0;
 },
 sat_sdpzr_entry() //  [R1]
         { []
         }
     {offset
       cdr6K: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdr6L; else goto cdr6M;
       cdr6L: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdr6M: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call Data.Foldable.toList_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdpzr_info" {
     sat_sdpzr_info:
         const sat_sdpzr_entry;
         const 2;
         const 18;
 },
 Data.List.NonEmpty.tails_entry() //  [R2, R3]
         { []
         }
     {offset
       cdr6T: // global
           _sdpzq::P64 = R3;
           _sdpzp::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto cdr6U; else goto cdr6V;
       cdr6V: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdr6X; else goto cdr6W;
       cdr6X: // global
           HpAlloc = 32;
           goto cdr6U;
       cdr6U: // global
           R3 = _sdpzq::P64;
           R2 = _sdpzp::P64;
           R1 = Data.List.NonEmpty.tails_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdr6W: // global
           I64[Hp - 24] = sat_sdpzr_info;
           P64[Hp - 8] = _sdpzp::P64;
           P64[Hp] = _sdpzq::P64;
           I64[Sp - 8] = block_cdr6N_info;
           R2 = Hp - 24;
           Sp = Sp - 8;
           call Data.List.NonEmpty.tails1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.tails_info" {
     Data.List.NonEmpty.tails_info:
         const Data.List.NonEmpty.tails_entry;
         const 0;
         const 554050781198;
         const 8589934607;
         const SdpN4_srt+32;
 },
 _cdr6N() //  [R1]
         { []
         }
     {offset
       cdr6N: // global
           if (R1 & 7 == 1) goto cdr6Q; else goto cdr6R;
       cdr6Q: // global
           R1 = Data.List.NonEmpty.cycle1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdr6R: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdr76; else goto cdr75;
       cdr76: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdr75: // global
           _sdpzu::P64 = P64[R1 + 6];
           _sdpzv::P64 = P64[R1 + 14];
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = _sdpzu::P64;
           P64[Hp] = _sdpzv::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdr6N_info" {
     block_cdr6N_info:
         const _cdr6N;
         const 0;
         const 4294967326;
         const SdpN4_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:35.785857428 UTC

[section ""data" . Data.List.NonEmpty.insert_closure" {
     Data.List.NonEmpty.insert_closure:
         const Data.List.NonEmpty.insert_info;
 },
 sat_sdpzA_entry() //  [R1]
         { []
         }
     {offset
       cdr7A: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdr7B; else goto cdr7C;
       cdr7B: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdr7C: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdpzA_info" {
     sat_sdpzA_info:
         const sat_sdpzA_entry;
         const 1;
         const 16;
 },
 Data.List.NonEmpty.insert_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cdr7D: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdr7H; else goto cdr7I;
       cdr7H: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.insert_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdr7I: // global
           I64[Sp - 24] = block_cdr7s_info;
           R2 = R2;
           I64[Sp - 40] = stg_ap_p_info;
           P64[Sp - 32] = R5;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 40;
           call Data.Foldable.toList_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.insert_info" {
     Data.List.NonEmpty.insert_info:
         const Data.List.NonEmpty.insert_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cdr7s() //  [R1]
         { []
         }
     {offset
       cdr7s: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdr7L; else goto cdr7K;
       cdr7L: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdr7K: // global
           I64[Hp - 16] = sat_sdpzA_info;
           P64[Hp] = P64[Sp + 8];
           _sdpzy::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cdr7E_info;
           R4 = R1;
           R3 = _sdpzy::P64;
           R2 = Hp - 16;
           Sp = Sp + 16;
           call Data.OldList.$winsertBy_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdr7s_info" {
     block_cdr7s_info:
         const _cdr7s;
         const 2;
         const 30;
 },
 _cdr7E() //  [R1, R2]
         { []
         }
     {offset
       cdr7E: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdr7O; else goto cdr7N;
       cdr7O: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cdr7N: // global
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdr7E_info" {
     block_cdr7E_info:
         const _cdr7E;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:35.796804473 UTC

[section ""data" . Data.List.NonEmpty.scanl_closure" {
     Data.List.NonEmpty.scanl_closure:
         const Data.List.NonEmpty.scanl_info;
 },
 sat_sdpzJ_entry() //  [R1]
         { []
         }
     {offset
       cdr8i: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdr8j; else goto cdr8k;
       cdr8j: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdr8k: // global
           R2 = P64[R1 + 16];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[R1 + 24];
           Sp = Sp - 16;
           call Data.Foldable.toList_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdpzJ_info" {
     sat_sdpzJ_info:
         const sat_sdpzJ_entry;
         const 2;
         const 18;
 },
 sat_sdpzN_entry() //  [R1]
         { []
         }
     {offset
       cdr8n: // global
           _sdpzN::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cdr8o; else goto cdr8p;
       cdr8p: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdr8r; else goto cdr8q;
       cdr8r: // global
           HpAlloc = 32;
           goto cdr8o;
       cdr8o: // global
           R1 = _sdpzN::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdr8q: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdpzN::P64;
           _sdpzF::P64 = P64[_sdpzN::P64 + 16];
           _sdpzG::P64 = P64[_sdpzN::P64 + 24];
           _sdpzH::P64 = P64[_sdpzN::P64 + 32];
           _sdpzI::P64 = P64[_sdpzN::P64 + 40];
           I64[Hp - 24] = sat_sdpzJ_info;
           P64[Hp - 8] = _sdpzF::P64;
           P64[Hp] = _sdpzI::P64;
           I64[Sp - 24] = block_cdr8l_info;
           R4 = Hp - 24;
           R3 = _sdpzH::P64;
           R2 = _sdpzG::P64;
           Sp = Sp - 24;
           call GHC.List.$wscanlGo_entry(R4, R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdpzN_info" {
     sat_sdpzN_info:
         const sat_sdpzN_entry;
         const 4;
         const 15;
 },
 _cdr8l() //  [R2]
         { []
         }
     {offset
       cdr8l: // global
           R1 = R2 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdr8l_info" {
     block_cdr8l_info:
         const _cdr8l;
         const 0;
         const 30;
 },
 Data.List.NonEmpty.scanl_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cdr8u: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdr8y; else goto cdr8x;
       cdr8y: // global
           HpAlloc = 72;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.scanl_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdr8x: // global
           I64[Hp - 64] = sat_sdpzN_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = R4;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.scanl_info" {
     Data.List.NonEmpty.scanl_info:
         const Data.List.NonEmpty.scanl_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:35.806840581 UTC

[section ""data" . Data.List.NonEmpty.scanr_closure" {
     Data.List.NonEmpty.scanr_closure:
         const Data.List.NonEmpty.scanr_info;
 },
 Data.List.NonEmpty.scanr_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cdr8Z: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdr95; else goto cdr96;
       cdr95: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.scanr_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdr96: // global
           I64[Sp - 24] = block_cdr8X_info;
           R2 = R2;
           I64[Sp - 40] = stg_ap_p_info;
           P64[Sp - 32] = R5;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 40;
           call Data.Foldable.toList_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.scanr_info" {
     Data.List.NonEmpty.scanr_info:
         const Data.List.NonEmpty.scanr_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cdr8X() //  [R1]
         { []
         }
     {offset
       cdr8X: // global
           _sdpzQ::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cdr92_info;
           R4 = R1;
           R3 = _sdpzQ::P64;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.List.$wscanr_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdr8X_info" {
     block_cdr8X_info:
         const _cdr8X;
         const 2;
         const 30;
 },
 _cdr92() //  [R1, R2]
         { []
         }
     {offset
       cdr92: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdr9a; else goto cdr99;
       cdr9a: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cdr99: // global
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdr92_info" {
     block_cdr92_info:
         const _cdr92;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:35.814938179 UTC

[section ""data" . Data.List.NonEmpty.scanl1_closure" {
     Data.List.NonEmpty.scanl1_closure:
         const Data.List.NonEmpty.scanl1_info;
 },
 sat_sdpA8_entry() //  [R1]
         { []
         }
     {offset
       cdr9z: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdr9D; else goto cdr9E;
       cdr9D: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdr9E: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cdr9w_info;
           _sdpzW::P64 = P64[R1 + 16];
           _sdpzY::P64 = P64[R1 + 32];
           R1 = P64[R1 + 24];
           P64[Sp - 32] = _sdpzW::P64;
           P64[Sp - 24] = _sdpzY::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto udr9I; else goto cdr9x;
       udr9I: // global
           call _cdr9w(R1) args: 0, res: 0, upd: 0;
       cdr9x: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdpA8_info" {
     sat_sdpA8_info:
         const sat_sdpA8_entry;
         const 3;
         const 15;
 },
 _cdr9w() //  [R1]
         { []
         }
     {offset
       cdr9w: // global
           _sdpzY::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cdr9C_info;
           R4 = P64[R1 + 15];
           R3 = _sdpzY::P64;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.List.$wscanlGo_entry(R4, R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cdr9w_info" {
     block_cdr9w_info:
         const _cdr9w;
         const 2;
         const 30;
 },
 _cdr9C() //  [R2]
         { []
         }
     {offset
       cdr9C: // global
           R1 = R2 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdr9C_info" {
     block_cdr9C_info:
         const _cdr9C;
         const 0;
         const 30;
 },
 Data.List.NonEmpty.scanl1_entry() //  [R2, R3]
         { []
         }
     {offset
       cdr9K: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdr9O; else goto cdr9N;
       cdr9O: // global
           HpAlloc = 88;
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.scanl1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdr9N: // global
           I64[Hp - 80] = stg_sel_0_upd_info;
           P64[Hp - 64] = R3;
           I64[Hp - 56] = sat_sdpA8_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           _cdr9r::P64 = Hp - 80;
           P64[Hp - 24] = _cdr9r::P64;
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = _cdr9r::P64;
           P64[Hp] = Hp - 56;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.scanl1_info" {
     Data.List.NonEmpty.scanl1_info:
         const Data.List.NonEmpty.scanl1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:35.82480373 UTC

[section ""data" . Data.List.NonEmpty.scanr1_closure" {
     Data.List.NonEmpty.scanr1_closure:
         const Data.List.NonEmpty.scanr1_info;
         const 0;
 },
 Data.List.NonEmpty.scanr1_entry() //  [R2, R3]
         { []
         }
     {offset
       cdral: // global
           _sdpAa::P64 = R3;
           _sdpA9::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto cdram; else goto cdran;
       cdran: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdrap; else goto cdrao;
       cdrap: // global
           HpAlloc = 72;
           goto cdram;
       cdram: // global
           R3 = _sdpAa::P64;
           R2 = _sdpA9::P64;
           R1 = Data.List.NonEmpty.scanr1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdrao: // global
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _sdpAa::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _sdpAa::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           I64[Sp - 8] = block_cdraf_info;
           R3 = Hp - 14;
           R2 = _sdpA9::P64;
           Sp = Sp - 8;
           call GHC.List.scanr1_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.scanr1_info" {
     Data.List.NonEmpty.scanr1_info:
         const Data.List.NonEmpty.scanr1_entry;
         const 0;
         const 3302829850638;
         const 8589934607;
         const SdpN4_srt+32;
 },
 _cdraf() //  [R1]
         { []
         }
     {offset
       cdraf: // global
           if (R1 & 7 == 1) goto cdrai; else goto cdraj;
       cdrai: // global
           R1 = Data.List.NonEmpty.cycle1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdraj: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdray; else goto cdrax;
       cdray: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdrax: // global
           _sdpAl::P64 = P64[R1 + 6];
           _sdpAm::P64 = P64[R1 + 14];
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = _sdpAl::P64;
           P64[Hp] = _sdpAm::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdraf_info" {
     block_cdraf_info:
         const _cdraf;
         const 0;
         const 4294967326;
         const SdpN4_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:35.831041731 UTC

[section ""data" . Data.List.NonEmpty.toList_closure" {
     Data.List.NonEmpty.toList_closure:
         const Data.List.NonEmpty.toList_info;
 },
 Data.List.NonEmpty.toList_entry() //  [R2]
         { []
         }
     {offset
       cdraU: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdraY; else goto cdraX;
       cdraY: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Data.List.NonEmpty.toList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdraX: // global
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.toList_info" {
     Data.List.NonEmpty.toList_info:
         const Data.List.NonEmpty.toList_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:35.836086412 UTC

[section ""data" . Data.List.NonEmpty.$wtake_closure" {
     Data.List.NonEmpty.$wtake_closure:
         const Data.List.NonEmpty.$wtake_info;
 },
 Data.List.NonEmpty.$wtake_entry() //  [R2, R3]
         { []
         }
     {offset
       cdrbf: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdrbj; else goto cdrbi;
       cdrbj: // global
           HpAlloc = 72;
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.$wtake_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdrbi: // global
           if (%MO_S_Ge_W64(0, R2)) goto cdrbd; else goto cdrbe;
       cdrbd: // global
           Hp = Hp - 72;
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdrbe: // global
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R3 = Hp - 14;
           R2 = R2;
           call GHC.List.$wunsafeTake_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.$wtake_info" {
     Data.List.NonEmpty.$wtake_info:
         const Data.List.NonEmpty.$wtake_entry;
         const 0;
         const 14;
         const 8589934605;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:35.840464622 UTC

[section ""data" . Data.List.NonEmpty.take_closure" {
     Data.List.NonEmpty.take_closure:
         const Data.List.NonEmpty.take_info;
 },
 Data.List.NonEmpty.take_entry() //  [R2, R3]
         { []
         }
     {offset
       cdrbD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdrbE; else goto cdrbF;
       cdrbE: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.take_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdrbF: // global
           I64[Sp - 16] = block_cdrbA_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udrbJ; else goto cdrbB;
       udrbJ: // global
           call _cdrbA(R1) args: 0, res: 0, upd: 0;
       cdrbB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.take_info" {
     Data.List.NonEmpty.take_info:
         const Data.List.NonEmpty.take_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cdrbA() //  [R1]
         { []
         }
     {offset
       cdrbA: // global
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 16;
           call Data.List.NonEmpty.$wtake_entry(R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdrbA_info" {
     block_cdrbA_info:
         const _cdrbA;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:35.846544611 UTC

[section ""data" . Data.List.NonEmpty.$wunsafeDrop_closure" {
     Data.List.NonEmpty.$wunsafeDrop_closure:
         const Data.List.NonEmpty.$wunsafeDrop_info;
 },
 Data.List.NonEmpty.$wunsafeDrop_entry() //  [R2, R3]
         { []
         }
     {offset
       cdrc4: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdrc5; else goto udrcj;
       cdrc5: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.$wunsafeDrop_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       udrcj: // global
           I64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _cdrbU() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.$wunsafeDrop_info" {
     Data.List.NonEmpty.$wunsafeDrop_info:
         const Data.List.NonEmpty.$wunsafeDrop_entry;
         const 0;
         const 14;
         const 8589934605;
 },
 _cdrbU() //  []
         { []
         }
     {offset
       cdrbU: // global
           I64[Sp - 8] = block_cdrbX_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udrcl; else goto cdrbY;
       udrcl: // global
           call _cdrbX(R1) args: 0, res: 0, upd: 0;
       cdrbY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdrbX() //  [R1]
         { []
         }
     {offset
       cdrbX: // global
           if (R1 & 7 == 1) goto cdrc1; else goto cdrc2;
       cdrc1: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdrc2: // global
           _sdpAQ::P64 = P64[R1 + 14];
           _sdpAR::I64 = I64[Sp + 8];
           if (_sdpAR::I64 != 1) goto cdrcf; else goto cdrcg;
       cdrcf: // global
           I64[Sp + 8] = _sdpAR::I64 - 1;
           P64[Sp + 16] = _sdpAQ::P64;
           Sp = Sp + 8;
           call _cdrbU() args: 0, res: 0, upd: 0;
       cdrcg: // global
           R1 = _sdpAQ::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdrbX_info" {
     block_cdrbX_info:
         const _cdrbX;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:35.853725467 UTC

[section ""data" . Data.List.NonEmpty.$wdrop_closure" {
     Data.List.NonEmpty.$wdrop_closure:
         const Data.List.NonEmpty.$wdrop_info;
 },
 Data.List.NonEmpty.$wdrop_entry() //  [R2, R3]
         { []
         }
     {offset
       cdrcO: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdrcS; else goto cdrcR;
       cdrcS: // global
           HpAlloc = 72;
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.$wdrop_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdrcR: // global
           if (%MO_S_Gt_W64(R2, 0)) goto cdrcM; else goto cdrcN;
       cdrcM: // global
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R3 = Hp - 14;
           R2 = R2;
           call Data.List.NonEmpty.$wunsafeDrop_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
       cdrcN: // global
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.$wdrop_info" {
     Data.List.NonEmpty.$wdrop_info:
         const Data.List.NonEmpty.$wdrop_entry;
         const 0;
         const 14;
         const 8589934605;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:35.8582086 UTC

[section ""data" . Data.List.NonEmpty.drop_closure" {
     Data.List.NonEmpty.drop_closure:
         const Data.List.NonEmpty.drop_info;
 },
 Data.List.NonEmpty.drop_entry() //  [R2, R3]
         { []
         }
     {offset
       cdrdh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdrdi; else goto cdrdj;
       cdrdi: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.drop_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdrdj: // global
           I64[Sp - 16] = block_cdrde_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udrdn; else goto cdrdf;
       udrdn: // global
           call _cdrde(R1) args: 0, res: 0, upd: 0;
       cdrdf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.drop_info" {
     Data.List.NonEmpty.drop_info:
         const Data.List.NonEmpty.drop_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cdrde() //  [R1]
         { []
         }
     {offset
       cdrde: // global
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 16;
           call Data.List.NonEmpty.$wdrop_entry(R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdrde_info" {
     block_cdrde_info:
         const _cdrde;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:35.864742404 UTC

[section ""data" . Data.List.NonEmpty.splitAt_closure" {
     Data.List.NonEmpty.splitAt_closure:
         const Data.List.NonEmpty.splitAt_info;
 },
 Data.List.NonEmpty.splitAt_entry() //  [R2, R3]
         { []
         }
     {offset
       cdrdE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdrdF; else goto cdrdG;
       cdrdF: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.splitAt_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdrdG: // global
           I64[Sp - 16] = block_cdrdB_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udre6; else goto cdrdC;
       udre6: // global
           call _cdrdB(R1) args: 0, res: 0, upd: 0;
       cdrdC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.splitAt_info" {
     Data.List.NonEmpty.splitAt_info:
         const Data.List.NonEmpty.splitAt_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cdrdB() //  [R1]
         { []
         }
     {offset
       cdrdB: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cdrdL; else goto cdrdK;
       cdrdL: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdrdK: // global
           _sdpBi::P64 = P64[Sp + 8];
           if (%MO_S_Gt_W64(I64[R1 + 7], 0)) goto cdrdW; else goto cdre5;
       cdrdW: // global
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _sdpBi::P64;
           I64[Hp - 64] = stg_sel_0_upd_info;
           P64[Hp - 48] = _sdpBi::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = Hp - 64;
           P64[Hp - 24] = Hp - 88;
           _cdrdR::P64 = Hp - 38;
           Hp = Hp - 24;
           I64[Sp + 8] = block_cdrdS_info;
           R3 = _cdrdR::P64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.List.$wsplitAt'_entry(R3, R2) args: 8, res: 8, upd: 8;
       cdre5: // global
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _sdpBi::P64;
           I64[Hp - 64] = stg_sel_0_upd_info;
           P64[Hp - 48] = _sdpBi::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = Hp - 64;
           P64[Hp - 24] = Hp - 88;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = GHC.Types.[]_closure+1;
           P64[Hp] = Hp - 38;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdrdB_info" {
     block_cdrdB_info:
         const _cdrdB;
         const 1;
         const 30;
 },
 _cdrdS() //  [R1, R2]
         { []
         }
     {offset
       cdrdS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdrdZ; else goto cdrdY;
       cdrdZ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cdrdY: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdrdS_info" {
     block_cdrdS_info:
         const _cdrdS;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:35.873090144 UTC

[section ""data" . Data.List.NonEmpty.takeWhile_closure" {
     Data.List.NonEmpty.takeWhile_closure:
         const Data.List.NonEmpty.takeWhile_info;
 },
 Data.List.NonEmpty.takeWhile_entry() //  [R2, R3]
         { []
         }
     {offset
       cdrex: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdreB; else goto cdreA;
       cdreB: // global
           HpAlloc = 72;
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.takeWhile_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdreA: // global
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R3 = Hp - 14;
           R2 = R2;
           call GHC.List.takeWhile_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.takeWhile_info" {
     Data.List.NonEmpty.takeWhile_info:
         const Data.List.NonEmpty.takeWhile_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:35.877713746 UTC

[section ""data" . Data.List.NonEmpty.dropWhile_closure" {
     Data.List.NonEmpty.dropWhile_closure:
         const Data.List.NonEmpty.dropWhile_info;
 },
 Data.List.NonEmpty.dropWhile_entry() //  [R2, R3]
         { []
         }
     {offset
       cdreP: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdreT; else goto cdreS;
       cdreT: // global
           HpAlloc = 72;
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.dropWhile_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdreS: // global
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R3 = Hp - 14;
           R2 = R2;
           call GHC.List.dropWhile_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.dropWhile_info" {
     Data.List.NonEmpty.dropWhile_info:
         const Data.List.NonEmpty.dropWhile_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:35.882505084 UTC

[section ""data" . Data.List.NonEmpty.span_closure" {
     Data.List.NonEmpty.span_closure:
         const Data.List.NonEmpty.span_info;
 },
 Data.List.NonEmpty.span_entry() //  [R2, R3]
         { []
         }
     {offset
       cdrfa: // global
           _sdpC4::P64 = R3;
           _sdpC3::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto cdrfb; else goto cdrfc;
       cdrfc: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdrfe; else goto cdrfd;
       cdrfe: // global
           HpAlloc = 72;
           goto cdrfb;
       cdrfb: // global
           R3 = _sdpC4::P64;
           R2 = _sdpC3::P64;
           R1 = Data.List.NonEmpty.span_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdrfd: // global
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _sdpC4::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _sdpC4::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           I64[Sp - 8] = block_cdrf7_info;
           R3 = Hp - 14;
           R2 = _sdpC3::P64;
           Sp = Sp - 8;
           call GHC.List.$wspan_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.span_info" {
     Data.List.NonEmpty.span_info:
         const Data.List.NonEmpty.span_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cdrf7() //  [R1, R2]
         { []
         }
     {offset
       cdrf7: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdrfh; else goto cdrfg;
       cdrfh: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cdrfg: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdrf7_info" {
     block_cdrf7_info:
         const _cdrf7;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:35.889068612 UTC

[section ""data" . Data.List.NonEmpty.$wbreak_closure" {
     Data.List.NonEmpty.$wbreak_closure:
         const Data.List.NonEmpty.$wbreak_info;
 },
 sat_sdpCl_entry() //  [R1, R2]
         { []
         }
     {offset
       cdrfL: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdrfM; else goto cdrfN;
       cdrfM: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdrfN: // global
           I64[Sp - 8] = block_cdrfF_info;
           R2 = R2;
           R1 = P64[R1 + 7];
           Sp = Sp - 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdpCl_info" {
     sat_sdpCl_info:
         const sat_sdpCl_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cdrfF() //  [R1]
         { []
         }
     {offset
       cdrfF: // global
           if (R1 & 7 == 1) goto cdrfI; else goto cdrfJ;
       cdrfI: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdrfJ: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdrfF_info" {
     block_cdrfF_info:
         const _cdrfF;
         const 0;
         const 30;
 },
 Data.List.NonEmpty.$wbreak_entry() //  [R2, R3]
         { []
         }
     {offset
       cdrfU: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdrfY; else goto cdrfX;
       cdrfY: // global
           HpAlloc = 88;
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.$wbreak_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdrfX: // global
           I64[Hp - 80] = stg_sel_1_upd_info;
           P64[Hp - 64] = R3;
           I64[Hp - 56] = stg_sel_0_upd_info;
           P64[Hp - 40] = R3;
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 80;
           I64[Hp - 8] = sat_sdpCl_info;
           P64[Hp] = R2;
           R3 = Hp - 30;
           R2 = Hp - 7;
           call GHC.List.$wspan_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.$wbreak_info" {
     Data.List.NonEmpty.$wbreak_info:
         const Data.List.NonEmpty.$wbreak_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:35.89668669 UTC

[section ""data" . Data.List.NonEmpty.break_closure" {
     Data.List.NonEmpty.break_closure:
         const Data.List.NonEmpty.break_info;
 },
 Data.List.NonEmpty.break_entry() //  [R2, R3]
         { []
         }
     {offset
       cdrgn: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdrgo; else goto cdrgp;
       cdrgo: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.break_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdrgp: // global
           I64[Sp - 8] = block_cdrgk_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Data.List.NonEmpty.$wbreak_entry(R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.break_info" {
     Data.List.NonEmpty.break_info:
         const Data.List.NonEmpty.break_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cdrgk() //  [R1, R2]
         { []
         }
     {offset
       cdrgk: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdrgs; else goto cdrgr;
       cdrgs: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cdrgr: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdrgk_info" {
     block_cdrgk_info:
         const _cdrgk;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:35.90263294 UTC

[section ""data" . Data.List.NonEmpty.filter_closure" {
     Data.List.NonEmpty.filter_closure:
         const Data.List.NonEmpty.filter_info;
 },
 Data.List.NonEmpty.filter_entry() //  [R2, R3]
         { []
         }
     {offset
       cdrgJ: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdrgN; else goto cdrgM;
       cdrgN: // global
           HpAlloc = 72;
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.filter_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdrgM: // global
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R3 = Hp - 14;
           R2 = R2;
           call GHC.List.filter_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.filter_info" {
     Data.List.NonEmpty.filter_info:
         const Data.List.NonEmpty.filter_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:35.909537404 UTC

[section ""data" . Data.List.NonEmpty.$wpartition_closure" {
     Data.List.NonEmpty.$wpartition_closure:
         const Data.List.NonEmpty.$wpartition_info;
 },
 w3_sdpCS_entry() //  [R1]
         { []
         }
     {offset
       cdrhg: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdrhh; else goto cdrhi;
       cdrhh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdrhi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cdrhd_info;
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           call $wgo_sdpCN_entry(R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . w3_sdpCS_info" {
     w3_sdpCS_info:
         const w3_sdpCS_entry;
         const 2;
         const 18;
 },
 _cdrhd() //  [R1, R2]
         { []
         }
     {offset
       cdrhd: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdrhl; else goto cdrhk;
       cdrhl: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cdrhk: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdrhd_info" {
     block_cdrhd_info:
         const _cdrhd;
         const 0;
         const 30;
 },
 $wgo_sdpCN_entry() //  [R1, R2]
         { []
         }
     {offset
       cdrhq: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdrhr; else goto cdrhs;
       cdrhr: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdrhs: // global
           I64[Sp - 24] = block_cdrh3_info;
           _sdpCN::P64 = R1;
           _sdpCL::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _sdpCL::P64;
           P64[Sp - 8] = _sdpCN::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udrhU; else goto cdrh4;
       udrhU: // global
           call _cdrh3(R1) args: 0, res: 0, upd: 0;
       cdrh4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wgo_sdpCN_info" {
     $wgo_sdpCN_info:
         const $wgo_sdpCN_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cdrh3() //  [R1]
         { []
         }
     {offset
       cdrh3: // global
           if (R1 & 7 == 1) goto cdrhn; else goto cdrho;
       cdrhn: // global
           R2 = GHC.Types.[]_closure+1;
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       cdrho: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdrhy; else goto cdrhx;
       cdrhy: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdrhx: // global
           _sdpCQ::P64 = P64[R1 + 6];
           _sdpCR::P64 = P64[R1 + 14];
           I64[Hp - 24] = w3_sdpCS_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _sdpCR::P64;
           I64[Sp] = block_cdrhv_info;
           R2 = _sdpCQ::P64;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sdpCQ::P64;
           P64[Sp + 16] = Hp - 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdrh3_info" {
     block_cdrh3_info:
         const _cdrh3;
         const 2;
         const 30;
 },
 _cdrhv() //  [R1]
         { []
         }
     {offset
       cdrhv: // global
           _cdrh9::P64 = P64[Sp + 16];
           _sdpCQ::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cdrhG; else goto cdrhP;
       cdrhG: // global
           Hp = Hp + 72;
           _sdpCW::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdrhS; else goto cdrhI;
       cdrhI: // global
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _cdrh9::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _sdpCQ::P64;
           P64[Hp - 24] = Hp - 64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _cdrh9::P64;
           R2 = Hp - 38;
           R1 = Hp - 16;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       cdrhP: // global
           Hp = Hp + 72;
           _sdpCW::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdrhS; else goto cdrhR;
       cdrhS: // global
           HpAlloc = 72;
           R1 = _sdpCW::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdrhR: // global
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _cdrh9::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _cdrh9::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _sdpCQ::P64;
           P64[Hp] = Hp - 40;
           R2 = Hp - 64;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdrhv_info" {
     block_cdrhv_info:
         const _cdrhv;
         const 2;
         const 30;
 },
 Data.List.NonEmpty.$wpartition_entry() //  [R2, R3]
         { []
         }
     {offset
       cdrhY: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdri2; else goto cdri1;
       cdri2: // global
           HpAlloc = 88;
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.$wpartition_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdri1: // global
           I64[Hp - 80] = $wgo_sdpCN_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R2 = Hp - 14;
           R1 = Hp - 79;
           call $wgo_sdpCN_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.$wpartition_info" {
     Data.List.NonEmpty.$wpartition_info:
         const Data.List.NonEmpty.$wpartition_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:35.923977518 UTC

[section ""data" . Data.List.NonEmpty.partition_closure" {
     Data.List.NonEmpty.partition_closure:
         const Data.List.NonEmpty.partition_info;
 },
 Data.List.NonEmpty.partition_entry() //  [R2, R3]
         { []
         }
     {offset
       cdriK: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdriL; else goto cdriM;
       cdriL: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.partition_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdriM: // global
           I64[Sp - 8] = block_cdriH_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Data.List.NonEmpty.$wpartition_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.partition_info" {
     Data.List.NonEmpty.partition_info:
         const Data.List.NonEmpty.partition_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cdriH() //  [R1, R2]
         { []
         }
     {offset
       cdriH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdriP; else goto cdriO;
       cdriP: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cdriO: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdriH_info" {
     block_cdriH_info:
         const _cdriH;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:35.930708462 UTC

[section ""data" . Data.List.NonEmpty.cycle_closure" {
     Data.List.NonEmpty.cycle_closure:
         const Data.List.NonEmpty.cycle_info;
         const 0;
 },
 xs'_sdpDu_entry() //  [R1]
         { []
         }
     {offset
       cdrja: // global
           _sdpDu::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdrjb; else goto cdrjc;
       cdrjc: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdrje; else goto cdrjd;
       cdrje: // global
           HpAlloc = 72;
           goto cdrjb;
       cdrjb: // global
           R1 = _sdpDu::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdrjd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdpDu::P64;
           _sdpDt::P64 = P64[_sdpDu::P64 + 16];
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _sdpDt::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _sdpDt::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R3 = _sdpDu::P64;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . xs'_sdpDu_info" {
     xs'_sdpDu_info:
         const xs'_sdpDu_entry;
         const 1;
         const 16;
 },
 Data.List.NonEmpty.cycle_entry() //  [R2]
         { []
         }
     {offset
       cdrjm: // global
           _sdpDt::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto cdrjn; else goto cdrjo;
       cdrjo: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdrjq; else goto cdrjp;
       cdrjq: // global
           HpAlloc = 24;
           goto cdrjn;
       cdrjn: // global
           R2 = _sdpDt::P64;
           R1 = Data.List.NonEmpty.cycle_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdrjp: // global
           I64[Hp - 16] = xs'_sdpDu_info;
           P64[Hp] = _sdpDt::P64;
           I64[Sp - 8] = block_cdrjf_info;
           R1 = Hp - 16;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udrjA; else goto cdrjg;
       udrjA: // global
           call _cdrjf(R1) args: 0, res: 0, upd: 0;
       cdrjg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.cycle_info" {
     Data.List.NonEmpty.cycle_info:
         const Data.List.NonEmpty.cycle_entry;
         const 0;
         const 4402341478414;
         const 4294967301;
         const SdpN4_srt+32;
 },
 _cdrjf() //  [R1]
         { []
         }
     {offset
       cdrjf: // global
           if (R1 & 7 == 1) goto cdrjj; else goto cdrjk;
       cdrjj: // global
           R1 = Data.List.NonEmpty.cycle1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdrjk: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdrjz; else goto cdrjy;
       cdrjz: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdrjy: // global
           _sdpDG::P64 = P64[R1 + 6];
           _sdpDH::P64 = P64[R1 + 14];
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = _sdpDG::P64;
           P64[Hp] = _sdpDH::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdrjf_info" {
     block_cdrjf_info:
         const _cdrjf;
         const 0;
         const 4294967326;
         const SdpN4_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:35.943803209 UTC

[section ""data" . Data.List.NonEmpty.$wtranspose_closure" {
     Data.List.NonEmpty.$wtranspose_closure:
         const Data.List.NonEmpty.$wtranspose_info;
         const 0;
 },
 sat_sdpE2_entry() //  [R1]
         { []
         }
     {offset
       cdrk9: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdrka; else goto cdrkb;
       cdrka: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdrkb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cdrk6_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udrkf; else goto cdrk7;
       udrkf: // global
           call _cdrk6(R1) args: 0, res: 0, upd: 0;
       cdrk7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdpE2_info" {
     sat_sdpE2_info:
         const sat_sdpE2_entry;
         const 1;
         const 16;
 },
 _cdrk6() //  [R1]
         { []
         }
     {offset
       cdrk6: // global
           R3 = P64[R1 + 15];
           R2 = Data.List.NonEmpty.toList_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdrk6_info" {
     block_cdrk6_info:
         const _cdrk6;
         const 0;
         const 30;
 },
 sat_sdpDX_entry() //  [R1]
         { []
         }
     {offset
       cdrkn: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdrkr; else goto cdrks;
       cdrkr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdrks: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cdrkk_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udrkA; else goto cdrkl;
       udrkA: // global
           call _cdrkk(R1) args: 0, res: 0, upd: 0;
       cdrkl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdpDX_info" {
     sat_sdpDX_info:
         const sat_sdpDX_entry;
         const 1;
         const 16;
 },
 _cdrkk() //  [R1]
         { []
         }
     {offset
       cdrkk: // global
           I64[Sp] = block_cdrkq_info;
           R1 = P64[R1 + 7];
           if (R1 & 7 != 0) goto udrkz; else goto cdrku;
       udrkz: // global
           call _cdrkq(R1) args: 0, res: 0, upd: 0;
       cdrku: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cdrkk_info" {
     block_cdrkk_info:
         const _cdrkk;
         const 0;
         const 30;
 },
 _cdrkq() //  [R1]
         { []
         }
     {offset
       cdrkq: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdrkq_info" {
     block_cdrkq_info:
         const _cdrkq;
         const 0;
         const 30;
 },
 sat_sdpDQ_entry() //  [R1]
         { []
         }
     {offset
       cdrkI: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdrkM; else goto cdrkN;
       cdrkM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdrkN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cdrkF_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udrkV; else goto cdrkG;
       udrkV: // global
           call _cdrkF(R1) args: 0, res: 0, upd: 0;
       cdrkG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdpDQ_info" {
     sat_sdpDQ_info:
         const sat_sdpDQ_entry;
         const 1;
         const 16;
 },
 _cdrkF() //  [R1]
         { []
         }
     {offset
       cdrkF: // global
           I64[Sp] = block_cdrkL_info;
           R1 = P64[R1 + 7];
           if (R1 & 7 != 0) goto udrkU; else goto cdrkP;
       udrkU: // global
           call _cdrkL(R1) args: 0, res: 0, upd: 0;
       cdrkP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cdrkF_info" {
     block_cdrkF_info:
         const _cdrkF;
         const 0;
         const 30;
 },
 _cdrkL() //  [R1]
         { []
         }
     {offset
       cdrkL: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdrkL_info" {
     block_cdrkL_info:
         const _cdrkL;
         const 0;
         const 30;
 },
 ds_sdpDJ_entry() //  [R1]
         { []
         }
     {offset
       cdrl4: // global
           _sdpDJ::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cdrl5; else goto cdrl6;
       cdrl6: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto cdrl8; else goto cdrl7;
       cdrl8: // global
           HpAlloc = 120;
           goto cdrl5;
       cdrl5: // global
           R1 = _sdpDJ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdrl7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdpDJ::P64;
           _sdpDI::P64 = P64[_sdpDJ::P64 + 16];
           I64[Hp - 112] = sat_sdpE2_info;
           P64[Hp - 96] = _sdpDI::P64;
           I64[Hp - 88] = sat_sdpDX_info;
           P64[Hp - 72] = _sdpDI::P64;
           I64[Hp - 64] = sat_sdpDQ_info;
           P64[Hp - 48] = _sdpDI::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = Hp - 64;
           P64[Hp - 24] = Hp - 88;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = Hp - 112;
           I64[Sp - 24] = block_cdrkY_info;
           R2 = Hp - 14;
           Sp = Sp - 24;
           call Data.OldList.transpose_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds_sdpDJ_info" {
     ds_sdpDJ_info:
         const ds_sdpDJ_entry;
         const 1;
         const 4294967312;
         const SdpN4_srt+32;
 },
 _cdrkY() //  [R1]
         { []
         }
     {offset
       cdrkY: // global
           if (R1 & 7 == 1) goto cdrl1; else goto cdrl2;
       cdrl1: // global
           R1 = Data.List.NonEmpty.cycle1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       cdrl2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdrlh; else goto cdrlg;
       cdrlh: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdrlg: // global
           _sdpE5::P64 = P64[R1 + 6];
           _sdpE6::P64 = P64[R1 + 14];
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = _sdpE5::P64;
           P64[Hp] = _sdpE6::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdrkY_info" {
     block_cdrkY_info:
         const _cdrkY;
         const 0;
         const 4294967326;
         const SdpN4_srt+32;
 },
 sat_sdpEh_entry() //  [R1]
         { []
         }
     {offset
       cdrlp: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdrlq; else goto cdrlr;
       cdrlq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdrlr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cdrlm_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udrlv; else goto cdrln;
       udrlv: // global
           call _cdrlm(R1) args: 0, res: 0, upd: 0;
       cdrln: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdpEh_info" {
     sat_sdpEh_info:
         const sat_sdpEh_entry;
         const 1;
         const 4294967312;
         const SdpN4_srt+24;
 },
 _cdrlm() //  [R1]
         { []
         }
     {offset
       cdrlm: // global
           R3 = P64[R1 + 15];
           R2 = Data.List.NonEmpty.fromList_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdrlm_info" {
     block_cdrlm_info:
         const _cdrlm;
         const 0;
         const 4294967326;
         const SdpN4_srt+24;
 },
 sat_sdpEd_entry() //  [R1]
         { []
         }
     {offset
       cdrlD: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdrlE; else goto cdrlF;
       cdrlE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdrlF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cdrlA_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udrm0; else goto cdrlB;
       udrm0: // global
           call _cdrlA(R1) args: 0, res: 0, upd: 0;
       cdrlB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdpEd_info" {
     sat_sdpEd_info:
         const sat_sdpEd_entry;
         const 1;
         const 4294967312;
         const SdpN4_srt+32;
 },
 _cdrlA() //  [R1]
         { []
         }
     {offset
       cdrlA: // global
           I64[Sp] = block_cdrlI_info;
           R1 = P64[R1 + 7];
           if (R1 & 7 != 0) goto udrlZ; else goto cdrlK;
       udrlZ: // global
           call _cdrlI(R1) args: 0, res: 0, upd: 0;
       cdrlK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cdrlA_info" {
     block_cdrlA_info:
         const _cdrlA;
         const 0;
         const 4294967326;
         const SdpN4_srt+32;
 },
 _cdrlI() //  [R1]
         { []
         }
     {offset
       cdrlI: // global
           if (R1 & 7 == 1) goto cdrlQ; else goto cdrlU;
       cdrlQ: // global
           R1 = Data.List.NonEmpty.cycle1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       cdrlU: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdrlX; else goto cdrlW;
       cdrlX: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdrlW: // global
           _sdpEb::P64 = P64[R1 + 6];
           _sdpEc::P64 = P64[R1 + 14];
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = _sdpEb::P64;
           P64[Hp] = _sdpEc::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdrlI_info" {
     block_cdrlI_info:
         const _cdrlI;
         const 0;
         const 4294967326;
         const SdpN4_srt+32;
 },
 Data.List.NonEmpty.$wtranspose_entry() //  [R2]
         { []
         }
     {offset
       cdrm1: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdrm5; else goto cdrm4;
       cdrm5: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Data.List.NonEmpty.$wtranspose_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdrm4: // global
           I64[Hp - 64] = ds_sdpDJ_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sdpEh_info;
           _cdrjY::P64 = Hp - 64;
           P64[Hp - 24] = _cdrjY::P64;
           I64[Hp - 16] = sat_sdpEd_info;
           P64[Hp] = _cdrjY::P64;
           R2 = Hp - 40;
           R1 = Hp - 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.$wtranspose_info" {
     Data.List.NonEmpty.$wtranspose_info:
         const Data.List.NonEmpty.$wtranspose_entry;
         const 0;
         const 17605070946318;
         const 4294967301;
         const SdpN4_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:35.972994802 UTC

[section ""data" . Data.List.NonEmpty.transpose_closure" {
     Data.List.NonEmpty.transpose_closure:
         const Data.List.NonEmpty.transpose_info;
         const 0;
 },
 Data.List.NonEmpty.transpose_entry() //  [R2]
         { []
         }
     {offset
       cdrnt: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdrnu; else goto cdrnv;
       cdrnu: // global
           R2 = R2;
           R1 = Data.List.NonEmpty.transpose_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdrnv: // global
           I64[Sp - 8] = block_cdrnq_info;
           R2 = R2;
           Sp = Sp - 8;
           call Data.List.NonEmpty.$wtranspose_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.transpose_info" {
     Data.List.NonEmpty.transpose_info:
         const Data.List.NonEmpty.transpose_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SdpN4_srt+120;
 },
 _cdrnq() //  [R1, R2]
         { []
         }
     {offset
       cdrnq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdrny; else goto cdrnx;
       cdrny: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cdrnx: // global
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdrnq_info" {
     block_cdrnq_info:
         const _cdrnq;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:35.979860516 UTC

[section ""data" . Data.List.NonEmpty.map_closure" {
     Data.List.NonEmpty.map_closure:
         const Data.List.NonEmpty.map_info;
 },
 sat_sdpEw_entry() //  [R1]
         { []
         }
     {offset
       cdrnT: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdrnU; else goto cdrnV;
       cdrnU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdrnV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cdrnQ_info;
           _sdpEm::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _sdpEm::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udrnZ; else goto cdrnR;
       udrnZ: // global
           call _cdrnQ(R1) args: 0, res: 0, upd: 0;
       cdrnR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdpEw_info" {
     sat_sdpEw_info:
         const sat_sdpEw_entry;
         const 2;
         const 18;
 },
 _cdrnQ() //  [R1]
         { []
         }
     {offset
       cdrnQ: // global
           R3 = P64[R1 + 15];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdrnQ_info" {
     block_cdrnQ_info:
         const _cdrnQ;
         const 1;
         const 30;
 },
 sat_sdpEs_entry() //  [R1]
         { []
         }
     {offset
       cdro5: // global
           _sdpEs::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdro6; else goto cdro7;
       cdro7: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdro9; else goto cdro8;
       cdro9: // global
           HpAlloc = 24;
           goto cdro6;
       cdro6: // global
           R1 = _sdpEs::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdro8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdpEs::P64;
           _sdpEm::P64 = P64[_sdpEs::P64 + 16];
           _sdpEn::P64 = P64[_sdpEs::P64 + 24];
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _sdpEn::P64;
           R2 = Hp - 16;
           R1 = _sdpEm::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdpEs_info" {
     sat_sdpEs_info:
         const sat_sdpEs_entry;
         const 2;
         const 18;
 },
 Data.List.NonEmpty.map_entry() //  [R2, R3]
         { []
         }
     {offset
       cdrob: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdrof; else goto cdroe;
       cdrof: // global
           HpAlloc = 88;
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.map_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdroe: // global
           I64[Hp - 80] = sat_sdpEw_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R3;
           I64[Hp - 48] = sat_sdpEs_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 80;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.map_info" {
     Data.List.NonEmpty.map_info:
         const Data.List.NonEmpty.map_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:35.989496679 UTC

[section ""data" . Data.List.NonEmpty.some1_closure" {
     Data.List.NonEmpty.some1_closure:
         const Data.List.NonEmpty.some1_info;
 },
 sat_sdpEA_entry() //  [R1]
         { []
         }
     {offset
       cdroH: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdroI; else goto cdroJ;
       cdroI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdroJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Base.many_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdpEA_info" {
     sat_sdpEA_info:
         const sat_sdpEA_entry;
         const 2;
         const 18;
 },
 Data.List.NonEmpty.some1_entry() //  [R2, R3]
         { []
         }
     {offset
       cdroM: // global
           _sdpEy::P64 = R3;
           _sdpEx::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto cdroN; else goto cdroO;
       cdroO: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdroQ; else goto cdroP;
       cdroQ: // global
           HpAlloc = 32;
           goto cdroN;
       cdroN: // global
           R3 = _sdpEy::P64;
           R2 = _sdpEx::P64;
           R1 = Data.List.NonEmpty.some1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdroP: // global
           I64[Hp - 24] = sat_sdpEA_info;
           P64[Hp - 8] = _sdpEx::P64;
           P64[Hp] = _sdpEy::P64;
           I64[Sp - 24] = block_cdroK_info;
           R2 = _sdpEx::P64;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = _sdpEy::P64;
           Sp = Sp - 24;
           call GHC.Base.$p1Alternative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.some1_info" {
     Data.List.NonEmpty.some1_info:
         const Data.List.NonEmpty.some1_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cdroK() //  [R1]
         { []
         }
     {offset
       cdroK: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_ppp_info;
           P64[Sp] = GHC.Base.:|_closure+2;
           _cdroD::P64 = P64[Sp + 8];
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = _cdroD::P64;
           Sp = Sp - 8;
           call GHC.Base.liftA2_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdroK_info" {
     block_cdroK_info:
         const _cdroK;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:35.999046025 UTC

[section ""data" . Data.List.NonEmpty.intersperse_closure" {
     Data.List.NonEmpty.intersperse_closure:
         const Data.List.NonEmpty.intersperse_info;
 },
 sat_sdpEN_entry() //  [R1]
         { []
         }
     {offset
       cdrpw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdrpx; else goto cdrpy;
       cdrpx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdrpy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.OldList.prependToAll_entry(R3,
                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdpEN_info" {
     sat_sdpEN_info:
         const sat_sdpEN_entry;
         const 2;
         const 18;
 },
 sat_sdpEP_entry() //  [R1]
         { []
         }
     {offset
       cdrpz: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdrpA; else goto cdrpB;
       cdrpA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdrpB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cdrph_info;
           _sdpEB::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _sdpEB::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udrpP; else goto cdrpi;
       udrpP: // global
           call _cdrph(R1) args: 0, res: 0, upd: 0;
       cdrpi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdpEP_info" {
     sat_sdpEP_info:
         const sat_sdpEP_entry;
         const 2;
         const 18;
 },
 _cdrph() //  [R1]
         { []
         }
     {offset
       cdrph: // global
           I64[Sp] = block_cdrpm_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto udrpO; else goto cdrpn;
       udrpO: // global
           call _cdrpm(R1) args: 0, res: 0, upd: 0;
       cdrpn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cdrph_info" {
     block_cdrph_info:
         const _cdrph;
         const 1;
         const 30;
 },
 _cdrpm() //  [R1]
         { []
         }
     {offset
       cdrpm: // global
           if (R1 & 7 == 1) goto cdrpG; else goto cdrpJ;
       cdrpG: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdrpJ: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cdrpM; else goto cdrpL;
       cdrpM: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdrpL: // global
           _sdpEL::P64 = P64[R1 + 6];
           _sdpEM::P64 = P64[R1 + 14];
           I64[Hp - 72] = sat_sdpEN_info;
           _sdpEB::P64 = P64[Sp + 8];
           P64[Hp - 56] = _sdpEB::P64;
           P64[Hp - 48] = _sdpEM::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _sdpEL::P64;
           P64[Hp - 24] = Hp - 72;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _sdpEB::P64;
           P64[Hp] = Hp - 38;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdrpm_info" {
     block_cdrpm_info:
         const _cdrpm;
         const 1;
         const 30;
 },
 Data.List.NonEmpty.intersperse_entry() //  [R2, R3]
         { []
         }
     {offset
       cdrpS: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cdrpW; else goto cdrpV;
       cdrpW: // global
           HpAlloc = 80;
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.intersperse_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdrpV: // global
           I64[Hp - 72] = sat_sdpEP_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.intersperse_info" {
     Data.List.NonEmpty.intersperse_info:
         const Data.List.NonEmpty.intersperse_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:36.010197932 UTC

[section ""data" . Data.List.NonEmpty.iterate_closure" {
     Data.List.NonEmpty.iterate_closure:
         const Data.List.NonEmpty.iterate_info;
 },
 sat_sdpEW_entry() //  [R1]
         { []
         }
     {offset
       cdrqC: // global
           _sdpEW::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cdrqD; else goto cdrqE;
       cdrqE: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdrqG; else goto cdrqF;
       cdrqG: // global
           HpAlloc = 32;
           goto cdrqD;
       cdrqD: // global
           R1 = _sdpEW::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdrqF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdpEW::P64;
           _sdpEQ::P64 = P64[_sdpEW::P64 + 16];
           _sdpER::P64 = P64[_sdpEW::P64 + 24];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sdpEQ::P64;
           P64[Hp] = _sdpER::P64;
           I64[Sp - 24] = block_cdrqz_info;
           R3 = Hp - 24;
           R2 = _sdpEQ::P64;
           Sp = Sp - 24;
           call GHC.List.$witerate_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdpEW_info" {
     sat_sdpEW_info:
         const sat_sdpEW_entry;
         const 2;
         const 18;
 },
 _cdrqz() //  [R1, R2]
         { []
         }
     {offset
       cdrqz: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdrqJ; else goto cdrqI;
       cdrqJ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cdrqI: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdrqz_info" {
     block_cdrqz_info:
         const _cdrqz;
         const 0;
         const 30;
 },
 Data.List.NonEmpty.iterate_entry() //  [R2, R3]
         { []
         }
     {offset
       cdrqL: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdrqP; else goto cdrqO;
       cdrqP: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.iterate_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdrqO: // global
           I64[Hp - 48] = sat_sdpEW_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 48;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.iterate_info" {
     Data.List.NonEmpty.iterate_info:
         const Data.List.NonEmpty.iterate_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:36.018113547 UTC

[section ""data" . Data.List.NonEmpty.repeat_closure" {
     Data.List.NonEmpty.repeat_closure:
         const Data.List.NonEmpty.repeat_info;
 },
 sat_sdpEY_entry() //  [R1]
         { []
         }
     {offset
       cdrrc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdrrd; else goto cdrre;
       cdrrd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdrre: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.List.repeat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdpEY_info" {
     sat_sdpEY_info:
         const sat_sdpEY_entry;
         const 1;
         const 16;
 },
 Data.List.NonEmpty.repeat_entry() //  [R2]
         { []
         }
     {offset
       cdrrg: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdrrk; else goto cdrrj;
       cdrrk: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = Data.List.NonEmpty.repeat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdrrj: // global
           I64[Hp - 40] = sat_sdpEY_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.repeat_info" {
     Data.List.NonEmpty.repeat_info:
         const Data.List.NonEmpty.repeat_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:36.025696535 UTC

[section ""data" . Data.List.NonEmpty.groupBy_$sgroupBy_closure" {
     Data.List.NonEmpty.groupBy_$sgroupBy_closure:
         const Data.List.NonEmpty.groupBy_$sgroupBy_info;
 },
 ds_sdpF4_entry() //  [R1]
         { []
         }
     {offset
       cdrrN: // global
           _sdpF4::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cdrrO; else goto cdrrP;
       cdrrP: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdrrR; else goto cdrrQ;
       cdrrR: // global
           HpAlloc = 32;
           goto cdrrO;
       cdrrO: // global
           R1 = _sdpF4::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdrrQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdpF4::P64;
           _sdpEZ::P64 = P64[_sdpF4::P64 + 16];
           _sdpF2::P64 = P64[_sdpF4::P64 + 24];
           _sdpF3::P64 = P64[_sdpF4::P64 + 32];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sdpEZ::P64;
           P64[Hp] = _sdpF2::P64;
           I64[Sp - 24] = block_cdrrK_info;
           R3 = _sdpF3::P64;
           R2 = Hp - 24;
           Sp = Sp - 24;
           call GHC.List.$wspan_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds_sdpF4_info" {
     ds_sdpF4_info:
         const ds_sdpF4_entry;
         const 3;
         const 15;
 },
 _cdrrK() //  [R1, R2]
         { []
         }
     {offset
       cdrrK: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdrrU; else goto cdrrT;
       cdrrU: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cdrrT: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdrrK_info" {
     block_cdrrK_info:
         const _cdrrK;
         const 0;
         const 30;
 },
 sat_sdpFh_entry() //  [R1]
         { []
         }
     {offset
       cdrs2: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdrs3; else goto cdrs4;
       cdrs3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdrs4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cdrrZ_info;
           _sdpEZ::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _sdpEZ::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udrs8; else goto cdrs0;
       udrs8: // global
           call _cdrrZ(R1) args: 0, res: 0, upd: 0;
       cdrs0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdpFh_info" {
     sat_sdpFh_info:
         const sat_sdpFh_entry;
         const 2;
         const 18;
 },
 _cdrrZ() //  [R1]
         { []
         }
     {offset
       cdrrZ: // global
           R3 = P64[R1 + 15];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.List.NonEmpty.groupBy_$sgroupBy_entry(R3,
                                                           R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdrrZ_info" {
     block_cdrrZ_info:
         const _cdrrZ;
         const 1;
         const 30;
 },
 Data.List.NonEmpty.groupBy_$sgroupBy_entry() //  [R2, R3]
         { []
         }
     {offset
       cdrsd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdrse; else goto cdrsf;
       cdrse: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.groupBy_$sgroupBy_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdrsf: // global
           I64[Sp - 16] = block_cdrrz_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udrso; else goto cdrrA;
       udrso: // global
           call _cdrrz(R1) args: 0, res: 0, upd: 0;
       cdrrA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.groupBy_$sgroupBy_info" {
     Data.List.NonEmpty.groupBy_$sgroupBy_info:
         const Data.List.NonEmpty.groupBy_$sgroupBy_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cdrrz() //  [R1]
         { []
         }
     {offset
       cdrrz: // global
           if (R1 & 7 == 1) goto cdrsa; else goto cdrsb;
       cdrsa: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdrsb: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto cdrsn; else goto cdrsm;
       cdrsn: // global
           HpAlloc = 144;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdrsm: // global
           _sdpF2::P64 = P64[R1 + 6];
           _sdpF3::P64 = P64[R1 + 14];
           I64[Hp - 136] = ds_sdpF4_info;
           _sdpEZ::P64 = P64[Sp + 8];
           P64[Hp - 120] = _sdpEZ::P64;
           P64[Hp - 112] = _sdpF2::P64;
           P64[Hp - 104] = _sdpF3::P64;
           I64[Hp - 96] = sat_sdpFh_info;
           P64[Hp - 80] = _sdpEZ::P64;
           _cdrrF::P64 = Hp - 136;
           P64[Hp - 72] = _cdrrF::P64;
           I64[Hp - 64] = stg_sel_0_upd_info;
           P64[Hp - 48] = _cdrrF::P64;
           I64[Hp - 40] = GHC.Base.:|_con_info;
           P64[Hp - 32] = _sdpF2::P64;
           P64[Hp - 24] = Hp - 64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdrrz_info" {
     block_cdrrz_info:
         const _cdrrz;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:36.04150835 UTC

[section ""data" . Data.List.NonEmpty.groupBy_closure" {
     Data.List.NonEmpty.groupBy_closure:
         const Data.List.NonEmpty.groupBy_info;
 },
 ds_sdpFo_entry() //  [R1]
         { []
         }
     {offset
       cdrtc: // global
           _sdpFo::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cdrtd; else goto cdrte;
       cdrte: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdrtg; else goto cdrtf;
       cdrtg: // global
           HpAlloc = 32;
           goto cdrtd;
       cdrtd: // global
           R1 = _sdpFo::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdrtf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdpFo::P64;
           _sdpFj::P64 = P64[_sdpFo::P64 + 16];
           _sdpFm::P64 = P64[_sdpFo::P64 + 24];
           _sdpFn::P64 = P64[_sdpFo::P64 + 32];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sdpFj::P64;
           P64[Hp] = _sdpFm::P64;
           I64[Sp - 24] = block_cdrt9_info;
           R3 = _sdpFn::P64;
           R2 = Hp - 24;
           Sp = Sp - 24;
           call GHC.List.$wspan_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds_sdpFo_info" {
     ds_sdpFo_info:
         const ds_sdpFo_entry;
         const 3;
         const 15;
 },
 _cdrt9() //  [R1, R2]
         { []
         }
     {offset
       cdrt9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdrtj; else goto cdrti;
       cdrtj: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cdrti: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdrt9_info" {
     block_cdrt9_info:
         const _cdrt9;
         const 0;
         const 30;
 },
 sat_sdpFB_entry() //  [R1]
         { []
         }
     {offset
       cdrtr: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdrts; else goto cdrtt;
       cdrts: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdrtt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cdrto_info;
           _sdpFj::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _sdpFj::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udrtx; else goto cdrtp;
       udrtx: // global
           call _cdrto(R1) args: 0, res: 0, upd: 0;
       cdrtp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdpFB_info" {
     sat_sdpFB_info:
         const sat_sdpFB_entry;
         const 2;
         const 18;
 },
 _cdrto() //  [R1]
         { []
         }
     {offset
       cdrto: // global
           R3 = P64[R1 + 15];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.List.NonEmpty.groupBy_$sgroupBy_entry(R3,
                                                           R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdrto_info" {
     block_cdrto_info:
         const _cdrto;
         const 1;
         const 30;
 },
 Data.List.NonEmpty.groupBy_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdrtC: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdrtD; else goto cdrtE;
       cdrtD: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.groupBy_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdrtE: // global
           I64[Sp - 16] = block_cdrsZ_info;
           R2 = R2;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = R4;
           P64[Sp - 8] = R3;
           Sp = Sp - 32;
           call Data.Foldable.toList_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.groupBy_info" {
     Data.List.NonEmpty.groupBy_info:
         const Data.List.NonEmpty.groupBy_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cdrsZ() //  [R1]
         { []
         }
     {offset
       cdrsZ: // global
           if (R1 & 7 == 1) goto cdrtz; else goto cdrtA;
       cdrtz: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdrtA: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto cdrtM; else goto cdrtL;
       cdrtM: // global
           HpAlloc = 144;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdrtL: // global
           _sdpFm::P64 = P64[R1 + 6];
           _sdpFn::P64 = P64[R1 + 14];
           I64[Hp - 136] = ds_sdpFo_info;
           _sdpFj::P64 = P64[Sp + 8];
           P64[Hp - 120] = _sdpFj::P64;
           P64[Hp - 112] = _sdpFm::P64;
           P64[Hp - 104] = _sdpFn::P64;
           I64[Hp - 96] = sat_sdpFB_info;
           P64[Hp - 80] = _sdpFj::P64;
           _cdrt4::P64 = Hp - 136;
           P64[Hp - 72] = _cdrt4::P64;
           I64[Hp - 64] = stg_sel_0_upd_info;
           P64[Hp - 48] = _cdrt4::P64;
           I64[Hp - 40] = GHC.Base.:|_con_info;
           P64[Hp - 32] = _sdpFm::P64;
           P64[Hp - 24] = Hp - 64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdrsZ_info" {
     block_cdrsZ_info:
         const _cdrsZ;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:36.059208198 UTC

[section ""data" . Data.List.NonEmpty.groupWith_closure" {
     Data.List.NonEmpty.groupWith_closure:
         const Data.List.NonEmpty.groupWith_info;
 },
 eq0_sdpFJ_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdruy: // global
           _sdpFL::P64 = R3;
           _sdpFK::P64 = R2;
           _sdpFJ::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cdruz; else goto cdruA;
       cdruA: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdruC; else goto cdruB;
       cdruC: // global
           HpAlloc = 64;
           goto cdruz;
       cdruz: // global
           R3 = _sdpFL::P64;
           R2 = _sdpFK::P64;
           R1 = _sdpFJ::P64;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdruB: // global
           _sdpFD::P64 = P64[_sdpFJ::P64 + 6];
           _sdpFE::P64 = P64[_sdpFJ::P64 + 14];
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = _sdpFE::P64;
           P64[Hp - 32] = _sdpFL::P64;
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sdpFE::P64;
           P64[Hp] = _sdpFK::P64;
           R2 = _sdpFD::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = Hp - 56;
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . eq0_sdpFJ_info" {
     eq0_sdpFJ_info:
         const eq0_sdpFJ_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 sat_sdpFP_entry() //  [R1, R2]
         { []
         }
     {offset
       cdruM: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           call eq0_sdpFJ_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdpFP_info" {
     sat_sdpFP_info:
         const sat_sdpFP_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 ds_sdpFO_entry() //  [R1]
         { []
         }
     {offset
       cdruS: // global
           _sdpFO::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cdruT; else goto cdruU;
       cdruU: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdruW; else goto cdruV;
       cdruW: // global
           HpAlloc = 24;
           goto cdruT;
       cdruT: // global
           R1 = _sdpFO::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdruV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdpFO::P64;
           _sdpFH::P64 = P64[_sdpFO::P64 + 16];
           _sdpFI::P64 = P64[_sdpFO::P64 + 24];
           _sdpFJ::P64 = P64[_sdpFO::P64 + 32];
           I64[Hp - 16] = sat_sdpFP_info;
           P64[Hp - 8] = _sdpFH::P64;
           P64[Hp] = _sdpFJ::P64;
           I64[Sp - 24] = block_cdruP_info;
           R3 = _sdpFI::P64;
           R2 = Hp - 15;
           Sp = Sp - 24;
           call GHC.List.$wspan_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds_sdpFO_info" {
     ds_sdpFO_info:
         const ds_sdpFO_entry;
         const 3;
         const 15;
 },
 _cdruP() //  [R1, R2]
         { []
         }
     {offset
       cdruP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdruZ; else goto cdruY;
       cdruZ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cdruY: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdruP_info" {
     block_cdruP_info:
         const _cdruP;
         const 0;
         const 30;
 },
 sat_sdpG1_entry() //  [R1]
         { []
         }
     {offset
       cdrv7: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdrv8; else goto cdrv9;
       cdrv8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdrv9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cdrv4_info;
           _sdpFJ::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _sdpFJ::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udrvd; else goto cdrv5;
       udrvd: // global
           call _cdrv4(R1) args: 0, res: 0, upd: 0;
       cdrv5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdpG1_info" {
     sat_sdpG1_info:
         const sat_sdpG1_entry;
         const 2;
         const 18;
 },
 _cdrv4() //  [R1]
         { []
         }
     {offset
       cdrv4: // global
           R3 = P64[R1 + 15];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.List.NonEmpty.groupBy_$sgroupBy_entry(R3,
                                                           R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdrv4_info" {
     block_cdrv4_info:
         const _cdrv4;
         const 1;
         const 30;
 },
 Data.List.NonEmpty.groupWith_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cdrvi: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdrvj; else goto cdrvk;
       cdrvj: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.groupWith_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdrvk: // global
           I64[Sp - 24] = block_cdrum_info;
           R2 = R2;
           I64[Sp - 40] = stg_ap_p_info;
           P64[Sp - 32] = R5;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 40;
           call Data.Foldable.toList_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.groupWith_info" {
     Data.List.NonEmpty.groupWith_info:
         const Data.List.NonEmpty.groupWith_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cdrum() //  [R1]
         { []
         }
     {offset
       cdrum: // global
           if (R1 & 7 == 1) goto cdrvf; else goto cdrvg;
       cdrvf: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdrvg: // global
           Hp = Hp + 168;
           if (Hp > HpLim) (likely: False) goto cdrvs; else goto cdrvr;
       cdrvs: // global
           HpAlloc = 168;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdrvr: // global
           _sdpFH::P64 = P64[R1 + 6];
           _sdpFI::P64 = P64[R1 + 14];
           I64[Hp - 160] = eq0_sdpFJ_info;
           P64[Hp - 152] = P64[Sp + 8];
           P64[Hp - 144] = P64[Sp + 16];
           I64[Hp - 136] = ds_sdpFO_info;
           P64[Hp - 120] = _sdpFH::P64;
           P64[Hp - 112] = _sdpFI::P64;
           _cdrur::P64 = Hp - 158;
           P64[Hp - 104] = _cdrur::P64;
           I64[Hp - 96] = sat_sdpG1_info;
           P64[Hp - 80] = _cdrur::P64;
           _cdruD::P64 = Hp - 136;
           P64[Hp - 72] = _cdruD::P64;
           I64[Hp - 64] = stg_sel_0_upd_info;
           P64[Hp - 48] = _cdruD::P64;
           I64[Hp - 40] = GHC.Base.:|_con_info;
           P64[Hp - 32] = _sdpFH::P64;
           P64[Hp - 24] = Hp - 64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdrum_info" {
     block_cdrum_info:
         const _cdrum;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:36.0800712 UTC

[section ""data" . Data.List.NonEmpty.group_closure" {
     Data.List.NonEmpty.group_closure:
         const Data.List.NonEmpty.group_info;
 },
 sat_sdpG5_entry() //  [R1]
         { []
         }
     {offset
       cdrwh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdrwi; else goto cdrwj;
       cdrwi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdrwj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdpG5_info" {
     sat_sdpG5_info:
         const sat_sdpG5_entry;
         const 1;
         const 16;
 },
 Data.List.NonEmpty.group_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdrwk: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdrwo; else goto cdrwn;
       cdrwo: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.group_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdrwn: // global
           I64[Hp - 16] = sat_sdpG5_info;
           P64[Hp] = R3;
           R4 = R4;
           R3 = Hp - 16;
           R2 = R2;
           call Data.List.NonEmpty.groupBy_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.group_info" {
     Data.List.NonEmpty.group_info:
         const Data.List.NonEmpty.group_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:36.088039092 UTC

[section ""data" . Data.List.NonEmpty.isPrefixOf_closure" {
     Data.List.NonEmpty.isPrefixOf_closure:
         const Data.List.NonEmpty.isPrefixOf_info;
 },
 Data.List.NonEmpty.isPrefixOf_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdrwI: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cdrwJ; else goto cdrwK;
       cdrwJ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.isPrefixOf_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdrwK: // global
           I64[Sp - 24] = block_cdrwB_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udrxa; else goto cdrwC;
       udrxa: // global
           call _cdrwB(R1) args: 0, res: 0, upd: 0;
       cdrwC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.isPrefixOf_info" {
     Data.List.NonEmpty.isPrefixOf_info:
         const Data.List.NonEmpty.isPrefixOf_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cdrwB() //  [R1]
         { []
         }
     {offset
       cdrwB: // global
           if (R1 & 7 == 1) goto cdrwF; else goto cdrwG;
       cdrwF: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdrwG: // global
           I64[Sp - 8] = block_cdrwQ_info;
           _sdpGa::P64 = P64[R1 + 6];
           _sdpGb::P64 = P64[R1 + 14];
           R1 = P64[Sp + 16];
           P64[Sp] = _sdpGb::P64;
           P64[Sp + 16] = _sdpGa::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udrx9; else goto cdrwS;
       udrx9: // global
           call _cdrwQ(R1) args: 0, res: 0, upd: 0;
       cdrwS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdrwB_info" {
     block_cdrwB_info:
         const _cdrwB;
         const 2;
         const 30;
 },
 _cdrwQ() //  [R1]
         { []
         }
     {offset
       cdrwQ: // global
           I64[Sp] = block_cdrwW_info;
           R2 = P64[Sp + 16];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 24];
           P64[Sp - 8] = P64[R1 + 7];
           P64[Sp + 24] = P64[R1 + 15];
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdrwQ_info" {
     block_cdrwQ_info:
         const _cdrwQ;
         const 3;
         const 30;
 },
 _cdrwW() //  [R1]
         { []
         }
     {offset
       cdrwW: // global
           if (R1 & 7 == 1) goto cdrx3; else goto cdrx7;
       cdrx3: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdrx7: // global
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 32;
           call Data.OldList.isPrefixOf_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdrwW_info" {
     block_cdrwW_info:
         const _cdrwW;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:36.097059163 UTC

[section ""cstring" . lvl1_rdpwu_bytes" {
     lvl1_rdpwu_bytes:
         I8[] [78,111,110,69,109,112,116,121,46,33,33,32,110,101,103,97,116,105,118,101,32,97,114,103,117,109,101,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:36.099923171 UTC

[section ""data" . Data.List.NonEmpty.!!1_closure" {
     Data.List.NonEmpty.!!1_closure:
         const Data.List.NonEmpty.!!1_info;
         const 0;
         const 0;
         const 0;
 },
 Data.List.NonEmpty.!!1_entry() //  [R1]
         { []
         }
     {offset
       cdrxJ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdrxK; else goto cdrxL;
       cdrxK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdrxL: // global
           (_cdrxE::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdrxE::I64 == 0) goto cdrxG; else goto cdrxF;
       cdrxG: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdrxF: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdrxE::I64;
           I64[Sp - 24] = block_cdrxH_info;
           R2 = lvl1_rdpwu_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.!!1_info" {
     Data.List.NonEmpty.!!1_info:
         const Data.List.NonEmpty.!!1_entry;
         const 0;
         const 4294967317;
         const SdpN4_srt+16;
 },
 _cdrxH() //  [R1]
         { []
         }
     {offset
       cdrxH: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdrxH_info" {
     block_cdrxH_info:
         const _cdrxH;
         const 0;
         const 4294967326;
         const SdpN4_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:36.106029361 UTC

[section ""data" . Data.List.NonEmpty.$w!!_closure" {
     Data.List.NonEmpty.$w!!_closure:
         const Data.List.NonEmpty.$w!!_info;
         const 0;
 },
 Data.List.NonEmpty.$w!!_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdry7: // global
           if (R4 == 0) goto cdry6; else goto cdry5;
       cdry6: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cdry5: // global
           if (%MO_S_Le_W64(R4, 0)) goto cdrye; else goto cdryf;
       cdrye: // global
           R1 = Data.List.NonEmpty.!!1_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cdryf: // global
           _sdpGi::P64 = R3;
           R3 = R4 - 1;
           R2 = _sdpGi::P64;
           call GHC.List.$w!!_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.$w!!_info" {
     Data.List.NonEmpty.$w!!_info:
         const Data.List.NonEmpty.$w!!_entry;
         const 0;
         const 12884901902;
         const 12884901910;
         const SdpN4_srt+136;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:36.110439021 UTC

[section ""data" . Data.List.NonEmpty.!!_closure" {
     Data.List.NonEmpty.!!_closure:
         const Data.List.NonEmpty.!!_info;
         const 0;
 },
 Data.List.NonEmpty.!!_entry() //  [R2, R3]
         { []
         }
     {offset
       cdryu: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdryy; else goto cdryz;
       cdryy: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.!!_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdryz: // global
           I64[Sp - 16] = block_cdryr_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udryH; else goto cdrys;
       udryH: // global
           call _cdryr(R1) args: 0, res: 0, upd: 0;
       cdrys: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.!!_info" {
     Data.List.NonEmpty.!!_info:
         const Data.List.NonEmpty.!!_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SdpN4_srt+152;
 },
 _cdryr() //  [R1]
         { []
         }
     {offset
       cdryr: // global
           I64[Sp - 8] = block_cdryx_info;
           _sdpGq::P64 = P64[R1 + 7];
           _sdpGr::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _sdpGr::P64;
           P64[Sp + 8] = _sdpGq::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udryG; else goto cdryB;
       udryG: // global
           call _cdryx(R1) args: 0, res: 0, upd: 0;
       cdryB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdryr_info" {
     block_cdryr_info:
         const _cdryr;
         const 1;
         const 4294967326;
         const SdpN4_srt+160;
 },
 _cdryx() //  [R1]
         { []
         }
     {offset
       cdryx: // global
           R4 = I64[R1 + 7];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call Data.List.NonEmpty.$w!!_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdryx_info" {
     block_cdryx_info:
         const _cdryx;
         const 2;
         const 4294967326;
         const SdpN4_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:36.118759023 UTC

[section ""data" . Data.List.NonEmpty.zip_closure" {
     Data.List.NonEmpty.zip_closure:
         const Data.List.NonEmpty.zip_info;
 },
 sat_sdpGM_entry() //  [R1]
         { []
         }
     {offset
       cdrz6: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdrza; else goto cdrzb;
       cdrza: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdrzb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cdrz3_info;
           _sdpGv::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sdpGv::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udrzf; else goto cdrz4;
       udrzf: // global
           call _cdrz3(R1) args: 0, res: 0, upd: 0;
       cdrz4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdpGM_info" {
     sat_sdpGM_info:
         const sat_sdpGM_entry;
         const 2;
         const 18;
 },
 _cdrz3() //  [R1]
         { []
         }
     {offset
       cdrz3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdrze; else goto cdrzd;
       cdrze: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdrzd: // global
           _sdpGH::P64 = P64[R1 + 15];
           I64[Hp - 16] = stg_sel_1_noupd_info;
           P64[Hp] = P64[Sp + 8];
           R3 = Hp - 16;
           R2 = _sdpGH::P64;
           Sp = Sp + 16;
           call GHC.List.zip_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdrz3_info" {
     block_cdrz3_info:
         const _cdrz3;
         const 1;
         const 30;
 },
 Data.List.NonEmpty.zip_entry() //  [R2, R3]
         { []
         }
     {offset
       cdrzk: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto cdrzo; else goto cdrzn;
       cdrzo: // global
           HpAlloc = 128;
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.zip_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdrzn: // global
           I64[Hp - 120] = sat_sdpGM_info;
           P64[Hp - 104] = R2;
           P64[Hp - 96] = R3;
           I64[Hp - 88] = stg_sel_0_upd_info;
           P64[Hp - 72] = R3;
           I64[Hp - 64] = stg_sel_0_upd_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = Hp - 64;
           P64[Hp - 24] = Hp - 88;
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 120;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.zip_info" {
     Data.List.NonEmpty.zip_info:
         const Data.List.NonEmpty.zip_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:36.128307632 UTC

[section ""data" . Data.List.NonEmpty.zipWith_closure" {
     Data.List.NonEmpty.zipWith_closure:
         const Data.List.NonEmpty.zipWith_info;
 },
 sat_sdpH6_entry() //  [R1]
         { []
         }
     {offset
       cdrzS: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdrzW; else goto cdrzX;
       cdrzW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdrzX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cdrzP_info;
           _sdpGN::P64 = P64[R1 + 16];
           _sdpGP::P64 = P64[R1 + 32];
           R1 = P64[R1 + 24];
           P64[Sp - 32] = _sdpGN::P64;
           P64[Sp - 24] = _sdpGP::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto udrA1; else goto cdrzQ;
       udrA1: // global
           call _cdrzP(R1) args: 0, res: 0, upd: 0;
       cdrzQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdpH6_info" {
     sat_sdpH6_info:
         const sat_sdpH6_entry;
         const 3;
         const 15;
 },
 _cdrzP() //  [R1]
         { []
         }
     {offset
       cdrzP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdrA0; else goto cdrzZ;
       cdrA0: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdrzZ: // global
           _sdpH1::P64 = P64[R1 + 15];
           I64[Hp - 16] = stg_sel_1_noupd_info;
           P64[Hp] = P64[Sp + 16];
           R4 = Hp - 16;
           R3 = _sdpH1::P64;
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.List.zipWith_entry(R4, R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdrzP_info" {
     block_cdrzP_info:
         const _cdrzP;
         const 2;
         const 30;
 },
 sat_sdpGY_entry() //  [R1]
         { []
         }
     {offset
       cdrA8: // global
           _sdpGY::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdrA9; else goto cdrAa;
       cdrAa: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdrAc; else goto cdrAb;
       cdrAc: // global
           HpAlloc = 48;
           goto cdrA9;
       cdrA9: // global
           R1 = _sdpGY::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdrAb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdpGY::P64;
           _sdpGN::P64 = P64[_sdpGY::P64 + 16];
           _sdpGO::P64 = P64[_sdpGY::P64 + 24];
           _sdpGP::P64 = P64[_sdpGY::P64 + 32];
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _sdpGP::P64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _sdpGO::P64;
           R3 = Hp - 40;
           R2 = Hp - 16;
           R1 = _sdpGN::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdpGY_info" {
     sat_sdpGY_info:
         const sat_sdpGY_entry;
         const 3;
         const 15;
 },
 Data.List.NonEmpty.zipWith_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdrAe: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cdrAi; else goto cdrAh;
       cdrAi: // global
           HpAlloc = 104;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.zipWith_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdrAh: // global
           I64[Hp - 96] = sat_sdpH6_info;
           P64[Hp - 80] = R2;
           P64[Hp - 72] = R3;
           P64[Hp - 64] = R4;
           I64[Hp - 56] = sat_sdpGY_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = Hp - 56;
           P64[Hp] = Hp - 96;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.zipWith_info" {
     Data.List.NonEmpty.zipWith_info:
         const Data.List.NonEmpty.zipWith_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:36.13866774 UTC

[section ""data" . Data.List.NonEmpty.unzip_closure" {
     Data.List.NonEmpty.unzip_closure:
         const Data.List.NonEmpty.unzip_info;
 },
 sat_sdpHa_entry() //  [R1]
         { []
         }
     {offset
       cdrAL: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdrAM; else goto cdrAN;
       cdrAM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdrAN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Tuple.snd_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Base.fmap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdpHa_info" {
     sat_sdpHa_info:
         const sat_sdpHa_entry;
         const 2;
         const 18;
 },
 sat_sdpH9_entry() //  [R1]
         { []
         }
     {offset
       cdrAS: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdrAT; else goto cdrAU;
       cdrAT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdrAU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Tuple.fst_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Base.fmap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdpH9_info" {
     sat_sdpH9_info:
         const sat_sdpH9_entry;
         const 2;
         const 18;
 },
 Data.List.NonEmpty.unzip_entry() //  [R2, R3]
         { []
         }
     {offset
       cdrAW: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdrB0; else goto cdrAZ;
       cdrB0: // global
           HpAlloc = 88;
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.unzip_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdrAZ: // global
           I64[Hp - 80] = sat_sdpHa_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R3;
           I64[Hp - 48] = sat_sdpH9_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 80;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.unzip_info" {
     Data.List.NonEmpty.unzip_info:
         const Data.List.NonEmpty.unzip_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:36.147898131 UTC

[section ""data" . Data.List.NonEmpty.nubBy_closure" {
     Data.List.NonEmpty.nubBy_closure:
         const Data.List.NonEmpty.nubBy_info;
 },
 sat_sdpHi_entry() //  [R1, R2]
         { []
         }
     {offset
       cdrBG: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdrBH; else goto cdrBI;
       cdrBH: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdrBI: // global
           I64[Sp - 8] = block_cdrBA_info;
           R3 = R2;
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           Sp = Sp - 8;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdpHi_info" {
     sat_sdpHi_info:
         const sat_sdpHi_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cdrBA() //  [R1]
         { []
         }
     {offset
       cdrBA: // global
           if (R1 & 7 == 1) goto cdrBD; else goto cdrBE;
       cdrBD: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdrBE: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdrBA_info" {
     block_cdrBA_info:
         const _cdrBA;
         const 0;
         const 30;
 },
 sat_sdpHk_entry() //  [R1]
         { []
         }
     {offset
       cdrBR: // global
           _sdpHk::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cdrBS; else goto cdrBT;
       cdrBT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdrBV; else goto cdrBU;
       cdrBV: // global
           HpAlloc = 24;
           goto cdrBS;
       cdrBS: // global
           R1 = _sdpHk::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdrBU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdpHk::P64;
           _sdpHb::P64 = P64[_sdpHk::P64 + 16];
           _sdpHe::P64 = P64[_sdpHk::P64 + 24];
           _sdpHf::P64 = P64[_sdpHk::P64 + 32];
           I64[Hp - 16] = sat_sdpHi_info;
           P64[Hp - 8] = _sdpHb::P64;
           P64[Hp] = _sdpHe::P64;
           I64[Sp - 32] = block_cdrBP_info;
           R3 = _sdpHf::P64;
           R2 = Hp - 15;
           P64[Sp - 24] = _sdpHb::P64;
           Sp = Sp - 32;
           call GHC.List.filter_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdpHk_info" {
     sat_sdpHk_info:
         const sat_sdpHk_entry;
         const 3;
         const 15;
 },
 _cdrBP() //  [R1]
         { []
         }
     {offset
       cdrBP: // global
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.OldList.nubBy_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdrBP_info" {
     block_cdrBP_info:
         const _cdrBP;
         const 1;
         const 30;
 },
 Data.List.NonEmpty.nubBy_entry() //  [R2, R3]
         { []
         }
     {offset
       cdrBZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdrC1; else goto cdrC2;
       cdrC1: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.nubBy_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdrC2: // global
           I64[Sp - 16] = block_cdrBm_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udrC6; else goto cdrBn;
       udrC6: // global
           call _cdrBm(R1) args: 0, res: 0, upd: 0;
       cdrBn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.nubBy_info" {
     Data.List.NonEmpty.nubBy_info:
         const Data.List.NonEmpty.nubBy_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cdrBm() //  [R1]
         { []
         }
     {offset
       cdrBm: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdrC5; else goto cdrC4;
       cdrC5: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdrC4: // global
           _sdpHe::P64 = P64[R1 + 7];
           _sdpHf::P64 = P64[R1 + 15];
           I64[Hp - 56] = sat_sdpHk_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = _sdpHe::P64;
           P64[Hp - 24] = _sdpHf::P64;
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = _sdpHe::P64;
           P64[Hp] = Hp - 56;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdrBm_info" {
     block_cdrBm_info:
         const _cdrBm;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:36.16244064 UTC

[section ""data" . Data.List.NonEmpty.nub_closure" {
     Data.List.NonEmpty.nub_closure:
         const Data.List.NonEmpty.nub_info;
 },
 w_sdpHq_entry() //  [R1]
         { []
         }
     {offset
       cdrCS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdrCT; else goto cdrCU;
       cdrCT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdrCU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . w_sdpHq_info" {
     w_sdpHq_info:
         const w_sdpHq_entry;
         const 1;
         const 16;
 },
 sat_sdpHt_entry() //  [R1, R2]
         { []
         }
     {offset
       cdrD6: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdrD7; else goto cdrD8;
       cdrD7: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdrD8: // global
           I64[Sp - 8] = block_cdrD0_info;
           R3 = R2;
           R2 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           Sp = Sp - 8;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdpHt_info" {
     sat_sdpHt_info:
         const sat_sdpHt_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cdrD0() //  [R1]
         { []
         }
     {offset
       cdrD0: // global
           if (R1 & 7 == 1) goto cdrD3; else goto cdrD4;
       cdrD3: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdrD4: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdrD0_info" {
     block_cdrD0_info:
         const _cdrD0;
         const 0;
         const 30;
 },
 sat_sdpHv_entry() //  [R1]
         { []
         }
     {offset
       cdrDh: // global
           _sdpHv::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cdrDi; else goto cdrDj;
       cdrDj: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdrDl; else goto cdrDk;
       cdrDl: // global
           HpAlloc = 48;
           goto cdrDi;
       cdrDi: // global
           R1 = _sdpHv::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdrDk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdpHv::P64;
           _sdpHl::P64 = P64[_sdpHv::P64 + 16];
           _sdpHo::P64 = P64[_sdpHv::P64 + 24];
           _sdpHp::P64 = P64[_sdpHv::P64 + 32];
           I64[Hp - 40] = w_sdpHq_info;
           P64[Hp - 24] = _sdpHl::P64;
           I64[Hp - 16] = sat_sdpHt_info;
           P64[Hp - 8] = _sdpHo::P64;
           _cdrCO::P64 = Hp - 40;
           P64[Hp] = _cdrCO::P64;
           I64[Sp - 32] = block_cdrDf_info;
           R3 = _sdpHp::P64;
           R2 = Hp - 15;
           P64[Sp - 24] = _cdrCO::P64;
           Sp = Sp - 32;
           call GHC.List.filter_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdpHv_info" {
     sat_sdpHv_info:
         const sat_sdpHv_entry;
         const 3;
         const 15;
 },
 _cdrDf() //  [R1]
         { []
         }
     {offset
       cdrDf: // global
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.OldList.nubBy_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdrDf_info" {
     block_cdrDf_info:
         const _cdrDf;
         const 1;
         const 30;
 },
 Data.List.NonEmpty.nub_entry() //  [R2, R3]
         { []
         }
     {offset
       cdrDp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdrDr; else goto cdrDs;
       cdrDr: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.nub_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdrDs: // global
           I64[Sp - 16] = block_cdrCF_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udrDw; else goto cdrCG;
       udrDw: // global
           call _cdrCF(R1) args: 0, res: 0, upd: 0;
       cdrCG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.nub_info" {
     Data.List.NonEmpty.nub_info:
         const Data.List.NonEmpty.nub_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cdrCF() //  [R1]
         { []
         }
     {offset
       cdrCF: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdrDv; else goto cdrDu;
       cdrDv: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdrDu: // global
           _sdpHo::P64 = P64[R1 + 7];
           _sdpHp::P64 = P64[R1 + 15];
           I64[Hp - 56] = sat_sdpHv_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = _sdpHo::P64;
           P64[Hp - 24] = _sdpHp::P64;
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = _sdpHo::P64;
           P64[Hp] = Hp - 56;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdrCF_info" {
     block_cdrCF_info:
         const _cdrCF;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:36.175884303 UTC

[section ""cstring" . Data.List.NonEmpty.$trModule4_bytes" {
     Data.List.NonEmpty.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:36.177930266 UTC

[section ""data" . Data.List.NonEmpty.$trModule3_closure" {
     Data.List.NonEmpty.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.List.NonEmpty.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:36.179583111 UTC

[section ""cstring" . Data.List.NonEmpty.$trModule2_bytes" {
     Data.List.NonEmpty.$trModule2_bytes:
         I8[] [68,97,116,97,46,76,105,115,116,46,78,111,110,69,109,112,116,121]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:36.18133756 UTC

[section ""data" . Data.List.NonEmpty.$trModule1_closure" {
     Data.List.NonEmpty.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.List.NonEmpty.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:36.183008155 UTC

[section ""data" . Data.List.NonEmpty.$trModule_closure" {
     Data.List.NonEmpty.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.List.NonEmpty.$trModule3_closure+1;
         const Data.List.NonEmpty.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:36.186963589 UTC

[section ""data" . Data.List.NonEmpty.groupAllWith_closure" {
     Data.List.NonEmpty.groupAllWith_closure:
         const Data.List.NonEmpty.groupAllWith_info;
         const 0;
 },
 sat_sdpHE_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdrEp: // global
           _sdpHB::P64 = R3;
           _sdpHA::P64 = R2;
           _sdpHE::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cdrEq; else goto cdrEr;
       cdrEr: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdrEt; else goto cdrEs;
       cdrEt: // global
           HpAlloc = 64;
           goto cdrEq;
       cdrEq: // global
           R3 = _sdpHB::P64;
           R2 = _sdpHA::P64;
           R1 = _sdpHE::P64;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdrEs: // global
           _sdpHw::P64 = P64[_sdpHE::P64 + 6];
           _sdpHx::P64 = P64[_sdpHE::P64 + 14];
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = _sdpHx::P64;
           P64[Hp - 32] = _sdpHB::P64;
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sdpHx::P64;
           P64[Hp] = _sdpHA::P64;
           R2 = _sdpHw::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = Hp - 56;
           Sp = Sp - 24;
           call GHC.Classes.compare_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdpHE_info" {
     sat_sdpHE_info:
         const sat_sdpHE_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 sat_sdpHF_entry() //  [R1]
         { []
         }
     {offset
       cdrEu: // global
           _sdpHF::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdrEv; else goto cdrEw;
       cdrEw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdrEy; else goto cdrEx;
       cdrEy: // global
           HpAlloc = 24;
           goto cdrEv;
       cdrEv: // global
           R1 = _sdpHF::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdrEx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdpHF::P64;
           _sdpHw::P64 = P64[_sdpHF::P64 + 16];
           _sdpHx::P64 = P64[_sdpHF::P64 + 24];
           _sdpHy::P64 = P64[_sdpHF::P64 + 32];
           I64[Hp - 16] = sat_sdpHE_info;
           P64[Hp - 8] = _sdpHw::P64;
           P64[Hp] = _sdpHx::P64;
           R3 = _sdpHy::P64;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call Data.OldList.sortBy_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdpHF_info" {
     sat_sdpHF_info:
         const sat_sdpHF_entry;
         const 3;
         const 15;
 },
 sat_sdpHz_entry() //  [R1]
         { []
         }
     {offset
       cdrED: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdrEE; else goto cdrEF;
       cdrEE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdrEF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.$p1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdpHz_info" {
     sat_sdpHz_info:
         const sat_sdpHz_entry;
         const 1;
         const 16;
 },
 Data.List.NonEmpty.groupAllWith_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdrEG: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdrEK; else goto cdrEJ;
       cdrEK: // global
           HpAlloc = 64;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.groupAllWith_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdrEJ: // global
           I64[Hp - 56] = sat_sdpHF_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = sat_sdpHz_info;
           P64[Hp] = R2;
           R5 = Hp - 56;
           R4 = R3;
           R3 = Hp - 16;
           R2 = Data.Foldable.$fFoldable[]_closure;
           call Data.List.NonEmpty.groupWith_entry(R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.groupAllWith_info" {
     Data.List.NonEmpty.groupAllWith_info:
         const Data.List.NonEmpty.groupAllWith_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const SdpN4_srt+168;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:36.198933084 UTC

[section ""data" . Data.List.NonEmpty.groupBy1_closure" {
     Data.List.NonEmpty.groupBy1_closure:
         const Data.List.NonEmpty.groupBy1_info;
 },
 ds_sdpHL_entry() //  [R1]
         { []
         }
     {offset
       cdrFk: // global
           _sdpHL::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cdrFl; else goto cdrFm;
       cdrFm: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdrFo; else goto cdrFn;
       cdrFo: // global
           HpAlloc = 32;
           goto cdrFl;
       cdrFl: // global
           R1 = _sdpHL::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdrFn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdpHL::P64;
           _sdpHG::P64 = P64[_sdpHL::P64 + 16];
           _sdpHJ::P64 = P64[_sdpHL::P64 + 24];
           _sdpHK::P64 = P64[_sdpHL::P64 + 32];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sdpHG::P64;
           P64[Hp] = _sdpHJ::P64;
           I64[Sp - 24] = block_cdrFh_info;
           R3 = _sdpHK::P64;
           R2 = Hp - 24;
           Sp = Sp - 24;
           call GHC.List.$wspan_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds_sdpHL_info" {
     ds_sdpHL_info:
         const ds_sdpHL_entry;
         const 3;
         const 15;
 },
 _cdrFh() //  [R1, R2]
         { []
         }
     {offset
       cdrFh: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdrFr; else goto cdrFq;
       cdrFr: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cdrFq: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdrFh_info" {
     block_cdrFh_info:
         const _cdrFh;
         const 0;
         const 30;
 },
 sat_sdpHY_entry() //  [R1]
         { []
         }
     {offset
       cdrFz: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdrFA; else goto cdrFB;
       cdrFA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdrFB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cdrFw_info;
           _sdpHG::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _sdpHG::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udrFF; else goto cdrFx;
       udrFF: // global
           call _cdrFw(R1) args: 0, res: 0, upd: 0;
       cdrFx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdpHY_info" {
     sat_sdpHY_info:
         const sat_sdpHY_entry;
         const 2;
         const 18;
 },
 _cdrFw() //  [R1]
         { []
         }
     {offset
       cdrFw: // global
           R3 = P64[R1 + 15];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.List.NonEmpty.groupBy_$sgroupBy_entry(R3,
                                                           R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdrFw_info" {
     block_cdrFw_info:
         const _cdrFw;
         const 1;
         const 30;
 },
 Data.List.NonEmpty.groupBy1_entry() //  [R2, R3]
         { []
         }
     {offset
       cdrFG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdrFK; else goto cdrFL;
       cdrFK: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.groupBy1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdrFL: // global
           I64[Sp - 16] = block_cdrF7_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udrFP; else goto cdrF8;
       udrFP: // global
           call _cdrF7(R1) args: 0, res: 0, upd: 0;
       cdrF8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.groupBy1_info" {
     Data.List.NonEmpty.groupBy1_info:
         const Data.List.NonEmpty.groupBy1_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cdrF7() //  [R1]
         { []
         }
     {offset
       cdrF7: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto cdrFO; else goto cdrFN;
       cdrFO: // global
           HpAlloc = 144;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdrFN: // global
           _sdpHJ::P64 = P64[R1 + 7];
           _sdpHK::P64 = P64[R1 + 15];
           I64[Hp - 136] = ds_sdpHL_info;
           _sdpHG::P64 = P64[Sp + 8];
           P64[Hp - 120] = _sdpHG::P64;
           P64[Hp - 112] = _sdpHJ::P64;
           P64[Hp - 104] = _sdpHK::P64;
           I64[Hp - 96] = sat_sdpHY_info;
           P64[Hp - 80] = _sdpHG::P64;
           _cdrFc::P64 = Hp - 136;
           P64[Hp - 72] = _cdrFc::P64;
           I64[Hp - 64] = stg_sel_0_upd_info;
           P64[Hp - 48] = _cdrFc::P64;
           I64[Hp - 40] = GHC.Base.:|_con_info;
           P64[Hp - 32] = _sdpHJ::P64;
           P64[Hp - 24] = Hp - 64;
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 96;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdrF7_info" {
     block_cdrF7_info:
         const _cdrF7;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:36.214650804 UTC

[section ""data" . Data.List.NonEmpty.group1_closure" {
     Data.List.NonEmpty.group1_closure:
         const Data.List.NonEmpty.group1_info;
 },
 w_sdpI4_entry() //  [R1]
         { []
         }
     {offset
       cdrGw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdrGx; else goto cdrGy;
       cdrGx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdrGy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . w_sdpI4_info" {
     w_sdpI4_info:
         const w_sdpI4_entry;
         const 1;
         const 16;
 },
 ds_sdpI5_entry() //  [R1]
         { []
         }
     {offset
       cdrGH: // global
           _sdpI5::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cdrGI; else goto cdrGJ;
       cdrGJ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdrGL; else goto cdrGK;
       cdrGL: // global
           HpAlloc = 32;
           goto cdrGI;
       cdrGI: // global
           R1 = _sdpI5::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdrGK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdpI5::P64;
           _sdpI2::P64 = P64[_sdpI5::P64 + 16];
           _sdpI3::P64 = P64[_sdpI5::P64 + 24];
           _sdpI4::P64 = P64[_sdpI5::P64 + 32];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sdpI4::P64;
           P64[Hp] = _sdpI2::P64;
           I64[Sp - 24] = block_cdrGE_info;
           R3 = _sdpI3::P64;
           R2 = Hp - 24;
           Sp = Sp - 24;
           call GHC.List.$wspan_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds_sdpI5_info" {
     ds_sdpI5_info:
         const ds_sdpI5_entry;
         const 3;
         const 15;
 },
 _cdrGE() //  [R1, R2]
         { []
         }
     {offset
       cdrGE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdrGO; else goto cdrGN;
       cdrGO: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cdrGN: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdrGE_info" {
     block_cdrGE_info:
         const _cdrGE;
         const 0;
         const 30;
 },
 sat_sdpIi_entry() //  [R1]
         { []
         }
     {offset
       cdrGW: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdrGX; else goto cdrGY;
       cdrGX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdrGY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cdrGT_info;
           _sdpI4::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _sdpI4::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udrH2; else goto cdrGU;
       udrH2: // global
           call _cdrGT(R1) args: 0, res: 0, upd: 0;
       cdrGU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdpIi_info" {
     sat_sdpIi_info:
         const sat_sdpIi_entry;
         const 2;
         const 18;
 },
 _cdrGT() //  [R1]
         { []
         }
     {offset
       cdrGT: // global
           R3 = P64[R1 + 15];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.List.NonEmpty.groupBy_$sgroupBy_entry(R3,
                                                           R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdrGT_info" {
     block_cdrGT_info:
         const _cdrGT;
         const 1;
         const 30;
 },
 Data.List.NonEmpty.group1_entry() //  [R2, R3]
         { []
         }
     {offset
       cdrH3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdrH7; else goto cdrH8;
       cdrH7: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.group1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdrH8: // global
           I64[Sp - 16] = block_cdrGn_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udrHc; else goto cdrGo;
       udrHc: // global
           call _cdrGn(R1) args: 0, res: 0, upd: 0;
       cdrGo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.group1_info" {
     Data.List.NonEmpty.group1_info:
         const Data.List.NonEmpty.group1_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cdrGn() //  [R1]
         { []
         }
     {offset
       cdrGn: // global
           Hp = Hp + 168;
           if (Hp > HpLim) (likely: False) goto cdrHb; else goto cdrHa;
       cdrHb: // global
           HpAlloc = 168;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdrHa: // global
           _sdpI2::P64 = P64[R1 + 7];
           _sdpI3::P64 = P64[R1 + 15];
           I64[Hp - 160] = w_sdpI4_info;
           P64[Hp - 144] = P64[Sp + 8];
           I64[Hp - 136] = ds_sdpI5_info;
           P64[Hp - 120] = _sdpI2::P64;
           P64[Hp - 112] = _sdpI3::P64;
           _cdrGs::P64 = Hp - 160;
           P64[Hp - 104] = _cdrGs::P64;
           I64[Hp - 96] = sat_sdpIi_info;
           P64[Hp - 80] = _cdrGs::P64;
           _cdrGz::P64 = Hp - 136;
           P64[Hp - 72] = _cdrGz::P64;
           I64[Hp - 64] = stg_sel_0_upd_info;
           P64[Hp - 48] = _cdrGz::P64;
           I64[Hp - 40] = GHC.Base.:|_con_info;
           P64[Hp - 32] = _sdpI2::P64;
           P64[Hp - 24] = Hp - 64;
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 96;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdrGn_info" {
     block_cdrGn_info:
         const _cdrGn;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:36.231458172 UTC

[section ""data" . Data.List.NonEmpty.$wgroupWith1_closure" {
     Data.List.NonEmpty.$wgroupWith1_closure:
         const Data.List.NonEmpty.$wgroupWith1_info;
 },
 eq_sdpIn_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdrHW: // global
           _sdpIp::P64 = R3;
           _sdpIo::P64 = R2;
           _sdpIn::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cdrHX; else goto cdrHY;
       cdrHY: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdrI0; else goto cdrHZ;
       cdrI0: // global
           HpAlloc = 64;
           goto cdrHX;
       cdrHX: // global
           R3 = _sdpIp::P64;
           R2 = _sdpIo::P64;
           R1 = _sdpIn::P64;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdrHZ: // global
           _sdpIj::P64 = P64[_sdpIn::P64 + 6];
           _sdpIk::P64 = P64[_sdpIn::P64 + 14];
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = _sdpIk::P64;
           P64[Hp - 32] = _sdpIp::P64;
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sdpIk::P64;
           P64[Hp] = _sdpIo::P64;
           R2 = _sdpIj::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = Hp - 56;
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . eq_sdpIn_info" {
     eq_sdpIn_info:
         const eq_sdpIn_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 sat_sdpIt_entry() //  [R1, R2]
         { []
         }
     {offset
       cdrIa: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           call eq_sdpIn_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdpIt_info" {
     sat_sdpIt_info:
         const sat_sdpIt_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 ds_sdpIs_entry() //  [R1]
         { []
         }
     {offset
       cdrIg: // global
           _sdpIs::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cdrIh; else goto cdrIi;
       cdrIi: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdrIk; else goto cdrIj;
       cdrIk: // global
           HpAlloc = 24;
           goto cdrIh;
       cdrIh: // global
           R1 = _sdpIs::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdrIj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdpIs::P64;
           _sdpIl::P64 = P64[_sdpIs::P64 + 16];
           _sdpIm::P64 = P64[_sdpIs::P64 + 24];
           _sdpIn::P64 = P64[_sdpIs::P64 + 32];
           I64[Hp - 16] = sat_sdpIt_info;
           P64[Hp - 8] = _sdpIl::P64;
           P64[Hp] = _sdpIn::P64;
           I64[Sp - 24] = block_cdrId_info;
           R3 = _sdpIm::P64;
           R2 = Hp - 15;
           Sp = Sp - 24;
           call GHC.List.$wspan_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds_sdpIs_info" {
     ds_sdpIs_info:
         const ds_sdpIs_entry;
         const 3;
         const 15;
 },
 _cdrId() //  [R1, R2]
         { []
         }
     {offset
       cdrId: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdrIn; else goto cdrIm;
       cdrIn: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cdrIm: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdrId_info" {
     block_cdrId_info:
         const _cdrId;
         const 0;
         const 30;
 },
 sat_sdpIF_entry() //  [R1]
         { []
         }
     {offset
       cdrIv: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdrIw; else goto cdrIx;
       cdrIw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdrIx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cdrIs_info;
           _sdpIn::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _sdpIn::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udrIB; else goto cdrIt;
       udrIB: // global
           call _cdrIs(R1) args: 0, res: 0, upd: 0;
       cdrIt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdpIF_info" {
     sat_sdpIF_info:
         const sat_sdpIF_entry;
         const 2;
         const 18;
 },
 _cdrIs() //  [R1]
         { []
         }
     {offset
       cdrIs: // global
           R3 = P64[R1 + 15];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.List.NonEmpty.groupBy_$sgroupBy_entry(R3,
                                                           R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdrIs_info" {
     block_cdrIs_info:
         const _cdrIs;
         const 1;
         const 30;
 },
 Data.List.NonEmpty.$wgroupWith1_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cdrIE: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto cdrII; else goto cdrIH;
       cdrII: // global
           HpAlloc = 144;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.$wgroupWith1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdrIH: // global
           I64[Hp - 136] = eq_sdpIn_info;
           P64[Hp - 128] = R2;
           P64[Hp - 120] = R3;
           I64[Hp - 112] = ds_sdpIs_info;
           P64[Hp - 96] = R4;
           P64[Hp - 88] = R5;
           _cdrHP::P64 = Hp - 134;
           P64[Hp - 80] = _cdrHP::P64;
           I64[Hp - 72] = sat_sdpIF_info;
           P64[Hp - 56] = _cdrHP::P64;
           _cdrI1::P64 = Hp - 112;
           P64[Hp - 48] = _cdrI1::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _cdrI1::P64;
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = R4;
           P64[Hp] = Hp - 40;
           R2 = Hp - 72;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.$wgroupWith1_info" {
     Data.List.NonEmpty.$wgroupWith1_info:
         const Data.List.NonEmpty.$wgroupWith1_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:36.247053388 UTC

[section ""data" . Data.List.NonEmpty.groupWith1_closure" {
     Data.List.NonEmpty.groupWith1_closure:
         const Data.List.NonEmpty.groupWith1_info;
 },
 Data.List.NonEmpty.groupWith1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdrJl: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdrJr; else goto cdrJs;
       cdrJr: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.groupWith1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdrJs: // global
           I64[Sp - 24] = block_cdrJi_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udrJx; else goto cdrJj;
       udrJx: // global
           call _cdrJi(R1) args: 0, res: 0, upd: 0;
       cdrJj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.groupWith1_info" {
     Data.List.NonEmpty.groupWith1_info:
         const Data.List.NonEmpty.groupWith1_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cdrJi() //  [R1]
         { []
         }
     {offset
       cdrJi: // global
           _sdpIH::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cdrJo_info;
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = _sdpIH::P64;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.List.NonEmpty.$wgroupWith1_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdrJi_info" {
     block_cdrJi_info:
         const _cdrJi;
         const 2;
         const 30;
 },
 _cdrJo() //  [R1, R2]
         { []
         }
     {offset
       cdrJo: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdrJw; else goto cdrJv;
       cdrJw: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cdrJv: // global
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdrJo_info" {
     block_cdrJo_info:
         const _cdrJo;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:36.255471404 UTC

[section ""data" . Data.List.NonEmpty.$wgroupAllWith1_closure" {
     Data.List.NonEmpty.$wgroupAllWith1_closure:
         const Data.List.NonEmpty.$wgroupAllWith1_info;
         const 0;
 },
 sat_sdpIS_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdrJX: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Ord.comparing_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdpIS_info" {
     sat_sdpIS_info:
         const sat_sdpIS_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 sat_sdpJ6_entry() //  [R1]
         { []
         }
     {offset
       cdrK9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdrKa; else goto cdrKb;
       cdrKa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdrKb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.$p1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdpJ6_info" {
     sat_sdpJ6_info:
         const sat_sdpJ6_entry;
         const 1;
         const 16;
 },
 Data.List.NonEmpty.$wgroupAllWith1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdrKg: // global
           _sdpIR::P64 = R4;
           _sdpIQ::P64 = R3;
           _sdpIP::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cdrKh; else goto cdrKi;
       cdrKi: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cdrKk; else goto cdrKj;
       cdrKk: // global
           HpAlloc = 96;
           goto cdrKh;
       cdrKh: // global
           R4 = _sdpIR::P64;
           R3 = _sdpIQ::P64;
           R2 = _sdpIP::P64;
           R1 = Data.List.NonEmpty.$wgroupAllWith1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdrKj: // global
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _sdpIR::P64;
           I64[Hp - 64] = stg_sel_0_upd_info;
           P64[Hp - 48] = _sdpIR::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = Hp - 64;
           P64[Hp - 24] = Hp - 88;
           I64[Hp - 16] = sat_sdpIS_info;
           P64[Hp - 8] = _sdpIP::P64;
           P64[Hp] = _sdpIQ::P64;
           I64[Sp - 24] = block_cdrK0_info;
           R3 = Hp - 38;
           R2 = Hp - 14;
           P64[Sp - 16] = _sdpIP::P64;
           P64[Sp - 8] = _sdpIQ::P64;
           Sp = Sp - 24;
           call Data.OldList.sortBy_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.$wgroupAllWith1_info" {
     Data.List.NonEmpty.$wgroupAllWith1_info:
         const Data.List.NonEmpty.$wgroupAllWith1_entry;
         const 0;
         const 2251804108652558;
         const 12884901911;
         const SdpN4_srt+32;
 },
 _cdrK0() //  [R1]
         { []
         }
     {offset
       cdrK0: // global
           if (R1 & 7 == 1) goto cdrKd; else goto cdrKe;
       cdrKd: // global
           R1 = Data.List.NonEmpty.cycle1_closure;
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdrKe: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdrKp; else goto cdrKo;
       cdrKp: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdrKo: // global
           _sdpJ4::P64 = P64[R1 + 6];
           _sdpJ5::P64 = P64[R1 + 14];
           I64[Hp - 16] = sat_sdpJ6_info;
           P64[Hp] = P64[Sp + 8];
           R5 = _sdpJ5::P64;
           R4 = _sdpJ4::P64;
           R3 = P64[Sp + 16];
           R2 = Hp - 16;
           Sp = Sp + 24;
           call Data.List.NonEmpty.$wgroupWith1_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdrK0_info" {
     block_cdrK0_info:
         const _cdrK0;
         const 2;
         const 4294967326;
         const SdpN4_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:36.265140674 UTC

[section ""data" . Data.List.NonEmpty.groupAllWith1_closure" {
     Data.List.NonEmpty.groupAllWith1_closure:
         const Data.List.NonEmpty.groupAllWith1_info;
         const 0;
 },
 Data.List.NonEmpty.groupAllWith1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdrKS: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdrKT; else goto cdrKU;
       cdrKT: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.groupAllWith1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdrKU: // global
           I64[Sp - 8] = block_cdrKP_info;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Data.List.NonEmpty.$wgroupAllWith1_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.groupAllWith1_info" {
     Data.List.NonEmpty.groupAllWith1_info:
         const Data.List.NonEmpty.groupAllWith1_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const SdpN4_srt+184;
 },
 _cdrKP() //  [R1, R2]
         { []
         }
     {offset
       cdrKP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdrKX; else goto cdrKW;
       cdrKX: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cdrKW: // global
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdrKP_info" {
     block_cdrKP_info:
         const _cdrKP;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:36.272580107 UTC

[section ""data" . Data.List.NonEmpty.$wxor_closure" {
     Data.List.NonEmpty.$wxor_closure:
         const Data.List.NonEmpty.$wxor_info;
 },
 go_sdpJf_entry() //  [R1, R2]
         { []
         }
     {offset
       cdrLn: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdrLo; else goto udrLV;
       cdrLo: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       udrLV: // global
           P64[Sp - 16] = R1;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call _cdrLd() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . go_sdpJf_info" {
     go_sdpJf_info:
         const go_sdpJf_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cdrLd() //  []
         { []
         }
     {offset
       cdrLd: // global
           _sdpJd::P64 = P64[P64[Sp] + 7];
           I64[Sp - 8] = block_cdrLg_info;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sdpJd::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udrLX; else goto cdrLh;
       udrLX: // global
           call _cdrLg(R1) args: 0, res: 0, upd: 0;
       cdrLh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdrLg() //  [R1]
         { []
         }
     {offset
       cdrLg: // global
           if (R1 & 7 == 1) goto cdrLk; else goto cdrLl;
       cdrLk: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdrLl: // global
           I64[Sp] = block_cdrLv_info;
           _sdpJj::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 16] = _sdpJj::P64;
           if (R1 & 7 != 0) goto udrLY; else goto cdrLx;
       udrLY: // global
           call _cdrLv(R1) args: 0, res: 0, upd: 0;
       cdrLx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdrLg_info" {
     block_cdrLg_info:
         const _cdrLg;
         const 2;
         const 30;
 },
 _cdrLv() //  [R1]
         { []
         }
     {offset
       cdrLv: // global
           _sdpJj::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cdrLD; else goto cdrLI;
       cdrLD: // global
           P64[Sp + 16] = _sdpJj::P64;
           Sp = Sp + 8;
           call _cdrLd() args: 0, res: 0, upd: 0;
       cdrLI: // global
           I64[Sp + 16] = block_cdrLG_info;
           R2 = _sdpJj::P64;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_sdpJf_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdrLv_info" {
     block_cdrLv_info:
         const _cdrLv;
         const 2;
         const 30;
 },
 _cdrLG() //  [R1]
         { []
         }
     {offset
       cdrLG: // global
           if (R1 & 7 == 1) goto cdrLO; else goto cdrLS;
       cdrLO: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdrLS: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdrLG_info" {
     block_cdrLG_info:
         const _cdrLG;
         const 0;
         const 30;
 },
 Data.List.NonEmpty.$wxor_entry() //  [R2, R3]
         { []
         }
     {offset
       cdrM1: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdrM5; else goto cdrM4;
       cdrM5: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.$wxor_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdrM4: // global
           I64[Hp - 8] = go_sdpJf_info;
           P64[Hp] = R2;
           R2 = R3;
           R1 = Hp - 7;
           call go_sdpJf_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.$wxor_info" {
     Data.List.NonEmpty.$wxor_info:
         const Data.List.NonEmpty.$wxor_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:36.284402973 UTC

[section ""data" . Data.List.NonEmpty.xor_closure" {
     Data.List.NonEmpty.xor_closure:
         const Data.List.NonEmpty.xor_info;
 },
 Data.List.NonEmpty.xor_entry() //  [R2]
         { []
         }
     {offset
       cdrMJ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdrMK; else goto cdrML;
       cdrMK: // global
           R2 = R2;
           R1 = Data.List.NonEmpty.xor_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdrML: // global
           I64[Sp - 8] = block_cdrMG_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udrMP; else goto cdrMH;
       udrMP: // global
           call _cdrMG(R1) args: 0, res: 0, upd: 0;
       cdrMH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.xor_info" {
     Data.List.NonEmpty.xor_info:
         const Data.List.NonEmpty.xor_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdrMG() //  [R1]
         { []
         }
     {offset
       cdrMG: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call Data.List.NonEmpty.$wxor_entry(R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdrMG_info" {
     block_cdrMG_info:
         const _cdrMG;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:36.290437331 UTC

[section ""data" . Data.List.NonEmpty.length_closure" {
     Data.List.NonEmpty.length_closure:
         const Data.List.NonEmpty.length_info;
 },
 Data.List.NonEmpty.length_entry() //  [R2]
         { []
         }
     {offset
       cdrN6: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdrNh; else goto cdrNi;
       cdrNh: // global
           R2 = R2;
           R1 = Data.List.NonEmpty.length_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdrNi: // global
           I64[Sp - 8] = block_cdrN3_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udrNn; else goto cdrN4;
       udrNn: // global
           call _cdrN3(R1) args: 0, res: 0, upd: 0;
       cdrN4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.length_info" {
     Data.List.NonEmpty.length_info:
         const Data.List.NonEmpty.length_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdrN3() //  [R1]
         { []
         }
     {offset
       cdrN3: // global
           I64[Sp] = block_cdrN9_info;
           R3 = 0;
           R2 = P64[R1 + 15];
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdrN3_info" {
     block_cdrN3_info:
         const _cdrN3;
         const 0;
         const 30;
 },
 _cdrN9() //  [R1]
         { []
         }
     {offset
       cdrN9: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdrNm; else goto cdrNl;
       cdrNm: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cdrNl: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1 + 1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdrN9_info" {
     block_cdrN9_info:
         const _cdrN9;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:36.296891078 UTC

[section ""relreadonly" . SdpN4_srt" {
     SdpN4_srt:
         const GHC.List.lastError_closure;
         const Data.List.NonEmpty.last_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const Data.List.NonEmpty.fromList_closure;
         const Data.List.NonEmpty.cycle1_closure;
         const Data.List.NonEmpty.reverse_closure;
         const Data.List.NonEmpty.sortBy_closure;
         const Data.List.NonEmpty.sortWith_closure;
         const Data.List.NonEmpty.sort_closure;
         const Data.OldList.$winits_closure;
         const Data.List.NonEmpty.inits_closure;
         const Data.List.NonEmpty.tails_closure;
         const GHC.List.scanr1_closure;
         const Data.List.NonEmpty.scanr1_closure;
         const Data.List.NonEmpty.cycle_closure;
         const Data.List.NonEmpty.$wtranspose_closure;
         const Data.List.NonEmpty.transpose_closure;
         const GHC.List.$w!!_closure;
         const Data.List.NonEmpty.!!1_closure;
         const Data.List.NonEmpty.!!_closure;
         const Data.List.NonEmpty.$w!!_closure;
         const Data.Foldable.$fFoldable[]_closure;
         const Data.List.NonEmpty.groupAllWith_closure;
         const Data.List.NonEmpty.$wgroupAllWith1_closure;
         const Data.List.NonEmpty.groupAllWith1_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.330008153 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:08:38.33297497 UTC

[section ""data" . Data.List.NonEmpty.nonEmpty_closure" {
     Data.List.NonEmpty.nonEmpty_closure:
         const Data.List.NonEmpty.nonEmpty_info;
 },
 Data.List.NonEmpty.nonEmpty_entry() //  [R2]
         { []
         }
     {offset
       cds0O: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cds0P; else goto cds0Q;
       cds0P: // global
           R2 = R2;
           R1 = Data.List.NonEmpty.nonEmpty_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cds0Q: // global
           I64[Sp - 8] = block_cds0H_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uds11; else goto cds0I;
       uds11: // global
           call _cds0H(R1) args: 0, res: 0, upd: 0;
       cds0I: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.nonEmpty_info" {
     Data.List.NonEmpty.nonEmpty_info:
         const Data.List.NonEmpty.nonEmpty_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cds0H() //  [R1]
         { []
         }
     {offset
       cds0H: // global
           if (R1 & 7 == 1) goto cds0L; else goto cds0M;
       cds0L: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cds0M: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cds10; else goto cds0Z;
       cds10: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cds0Z: // global
           _sdrNF::P64 = P64[R1 + 6];
           _sdrNG::P64 = P64[R1 + 14];
           I64[Hp - 32] = GHC.Base.:|_con_info;
           P64[Hp - 24] = _sdrNF::P64;
           P64[Hp - 16] = _sdrNG::P64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cds0H_info" {
     block_cds0H_info:
         const _cds0H;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.34256514 UTC

[section ""data" . Data.List.NonEmpty.uncons_closure" {
     Data.List.NonEmpty.uncons_closure:
         const Data.List.NonEmpty.uncons_info;
 },
 sat_sdrNU_entry() //  [R1]
         { []
         }
     {offset
       cds1v: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cds1w; else goto cds1x;
       cds1w: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cds1x: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cds1s_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uds1T; else goto cds1t;
       uds1T: // global
           call _cds1s(R1) args: 0, res: 0, upd: 0;
       cds1t: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdrNU_info" {
     sat_sdrNU_info:
         const sat_sdrNU_entry;
         const 1;
         const 16;
 },
 _cds1s() //  [R1]
         { []
         }
     {offset
       cds1s: // global
           I64[Sp] = block_cds1A_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto uds1S; else goto cds1C;
       uds1S: // global
           call _cds1A(R1) args: 0, res: 0, upd: 0;
       cds1C: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cds1s_info" {
     block_cds1s_info:
         const _cds1s;
         const 0;
         const 30;
 },
 _cds1A() //  [R1]
         { []
         }
     {offset
       cds1A: // global
           if (R1 & 7 == 1) goto cds1I; else goto cds1N;
       cds1I: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cds1N: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cds1Q; else goto cds1P;
       cds1Q: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cds1P: // global
           _sdrNR::P64 = P64[R1 + 6];
           _sdrNS::P64 = P64[R1 + 14];
           I64[Hp - 32] = GHC.Base.:|_con_info;
           P64[Hp - 24] = _sdrNR::P64;
           P64[Hp - 16] = _sdrNS::P64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cds1A_info" {
     block_cds1A_info:
         const _cds1A;
         const 0;
         const 30;
 },
 Data.List.NonEmpty.uncons_entry() //  [R2]
         { []
         }
     {offset
       cds1W: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cds20; else goto cds1Z;
       cds20: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Data.List.NonEmpty.uncons_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cds1Z: // global
           I64[Hp - 64] = sat_sdrNU_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.uncons_info" {
     Data.List.NonEmpty.uncons_info:
         const Data.List.NonEmpty.uncons_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.373495688 UTC

[section ""data" . Data.List.NonEmpty.$wunfoldr_closure" {
     Data.List.NonEmpty.$wunfoldr_closure:
         const Data.List.NonEmpty.$wunfoldr_info;
 },
 sat_sdrO9_entry() //  [R1]
         { []
         }
     {offset
       cds3a: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cds3b; else goto cds3c;
       cds3b: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cds3c: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cds33_info;
           _sdrO2::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _sdrO2::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uds3j; else goto cds34;
       uds3j: // global
           call _cds33(R1) args: 0, res: 0, upd: 0;
       cds34: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdrO9_info" {
     sat_sdrO9_info:
         const sat_sdrO9_entry;
         const 2;
         const 18;
 },
 _cds33() //  [R1]
         { []
         }
     {offset
       cds33: // global
           if (R1 & 7 == 1) goto cds37; else goto cds38;
       cds37: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cds38: // global
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_sdrO2_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cds33_info" {
     block_cds33_info:
         const _cds33;
         const 1;
         const 30;
 },
 go_sdrO2_entry() //  [R1, R2]
         { []
         }
     {offset
       cds3k: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cds3m; else goto cds3n;
       cds3m: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cds3n: // global
           I64[Sp - 16] = block_cds2V_info;
           R2 = R2;
           _sdrO2::P64 = R1;
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _sdrO2::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_sdrO2_info" {
     go_sdrO2_info:
         const go_sdrO2_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cds2V() //  [R1]
         { []
         }
     {offset
       cds2V: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cds3q; else goto cds3p;
       cds3q: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cds3p: // global
           _sdrO5::P64 = P64[R1 + 7];
           _sdrO6::P64 = P64[R1 + 15];
           I64[Hp - 48] = sat_sdrO9_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _sdrO6::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _sdrO5::P64;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cds2V_info" {
     block_cds2V_info:
         const _cds2V;
         const 1;
         const 30;
 },
 sat_sdrOa_entry() //  [R1]
         { []
         }
     {offset
       cds3v: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cds3w; else goto cds3x;
       cds3w: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cds3x: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cds2K_info;
           _sdrNV::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _sdrNV::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uds3D; else goto cds2L;
       uds3D: // global
           call _cds2K(R1) args: 0, res: 0, upd: 0;
       cds2L: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdrOa_info" {
     sat_sdrOa_info:
         const sat_sdrOa_entry;
         const 2;
         const 18;
 },
 _cds2K() //  [R1]
         { []
         }
     {offset
       cds2K: // global
           if (R1 & 7 == 1) goto cds3s; else goto cds3t;
       cds3s: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cds3t: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cds3C; else goto cds3B;
       cds3C: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cds3B: // global
           _sdrO1::P64 = P64[R1 + 6];
           I64[Hp - 8] = go_sdrO2_info;
           P64[Hp] = P64[Sp + 8];
           R2 = _sdrO1::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call go_sdrO2_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cds2K_info" {
     block_cds2K_info:
         const _cds2K;
         const 1;
         const 30;
 },
 Data.List.NonEmpty.$wunfoldr_entry() //  [R2, R3]
         { []
         }
     {offset
       cds3E: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cds3F; else goto cds3G;
       cds3F: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.$wunfoldr_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cds3G: // global
           I64[Sp - 16] = block_cds2C_info;
           _sdrNV::P64 = R2;
           R2 = R3;
           R1 = _sdrNV::P64;
           P64[Sp - 8] = _sdrNV::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.$wunfoldr_info" {
     Data.List.NonEmpty.$wunfoldr_info:
         const Data.List.NonEmpty.$wunfoldr_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cds2C() //  [R1]
         { []
         }
     {offset
       cds2C: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cds3J; else goto cds3I;
       cds3J: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cds3I: // global
           _sdrNY::P64 = P64[R1 + 7];
           _sdrNZ::P64 = P64[R1 + 15];
           I64[Hp - 24] = sat_sdrOa_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _sdrNZ::P64;
           R2 = Hp - 24;
           R1 = _sdrNY::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cds2C_info" {
     block_cds2C_info:
         const _cds2C;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.391270577 UTC

[section ""data" . Data.List.NonEmpty.unfoldr_closure" {
     Data.List.NonEmpty.unfoldr_closure:
         const Data.List.NonEmpty.unfoldr_info;
 },
 Data.List.NonEmpty.unfoldr_entry() //  [R2, R3]
         { []
         }
     {offset
       cds4K: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cds4L; else goto cds4M;
       cds4L: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.unfoldr_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cds4M: // global
           I64[Sp - 8] = block_cds4H_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Data.List.NonEmpty.$wunfoldr_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.unfoldr_info" {
     Data.List.NonEmpty.unfoldr_info:
         const Data.List.NonEmpty.unfoldr_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cds4H() //  [R1, R2]
         { []
         }
     {offset
       cds4H: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cds4P; else goto cds4O;
       cds4P: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cds4O: // global
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cds4H_info" {
     block_cds4H_info:
         const _cds4H;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.39700648 UTC

[section ""data" . Data.List.NonEmpty.head_closure" {
     Data.List.NonEmpty.head_closure:
         const Data.List.NonEmpty.head_info;
 },
 Data.List.NonEmpty.head_entry() //  [R2]
         { []
         }
     {offset
       cds58: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cds59; else goto cds5a;
       cds59: // global
           R2 = R2;
           R1 = Data.List.NonEmpty.head_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cds5a: // global
           I64[Sp - 8] = block_cds55_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uds5e; else goto cds56;
       uds5e: // global
           call _cds55(R1) args: 0, res: 0, upd: 0;
       cds56: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.head_info" {
     Data.List.NonEmpty.head_info:
         const Data.List.NonEmpty.head_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cds55() //  [R1]
         { []
         }
     {offset
       cds55: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cds55_info" {
     block_cds55_info:
         const _cds55;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.402380156 UTC

[section ""data" . Data.List.NonEmpty.tail_closure" {
     Data.List.NonEmpty.tail_closure:
         const Data.List.NonEmpty.tail_info;
 },
 Data.List.NonEmpty.tail_entry() //  [R2]
         { []
         }
     {offset
       cds5w: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cds5x; else goto cds5y;
       cds5x: // global
           R2 = R2;
           R1 = Data.List.NonEmpty.tail_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cds5y: // global
           I64[Sp - 8] = block_cds5t_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uds5C; else goto cds5u;
       uds5C: // global
           call _cds5t(R1) args: 0, res: 0, upd: 0;
       cds5u: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.tail_info" {
     Data.List.NonEmpty.tail_info:
         const Data.List.NonEmpty.tail_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cds5t() //  [R1]
         { []
         }
     {offset
       cds5t: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cds5t_info" {
     block_cds5t_info:
         const _cds5t;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.410557221 UTC

[section ""data" . poly_go_rdpws_closure" {
     poly_go_rdpws_closure:
         const poly_go_rdpws_info;
 },
 poly_go_rdpws_entry() //  [R2, R3]
         { []
         }
     {offset
       cds60: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cds61; else goto uds69;
       cds61: // global
           R3 = R3;
           R2 = R2;
           R1 = poly_go_rdpws_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       uds69: // global
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _cds5Q() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . poly_go_rdpws_info" {
     poly_go_rdpws_info:
         const poly_go_rdpws_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cds5Q() //  []
         { []
         }
     {offset
       cds5Q: // global
           _sdrOo::P64 = P64[Sp];
           I64[Sp] = block_cds5T_info;
           R1 = _sdrOo::P64;
           if (R1 & 7 != 0) goto uds6b; else goto cds5U;
       uds6b: // global
           call _cds5T(R1) args: 0, res: 0, upd: 0;
       cds5U: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cds5T() //  [R1]
         { []
         }
     {offset
       cds5T: // global
           if (R1 & 7 == 1) goto cds5X; else goto cds5Y;
       cds5X: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cds5Y: // global
           P64[Sp] = P64[R1 + 14];
           P64[Sp + 8] = P64[R1 + 6];
           call _cds5Q() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cds5T_info" {
     block_cds5T_info:
         const _cds5T;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.416952775 UTC

[section ""data" . Data.List.NonEmpty.last_closure" {
     Data.List.NonEmpty.last_closure:
         const Data.List.NonEmpty.last_info;
         const 0;
 },
 Data.List.NonEmpty.last_entry() //  [R2]
         { []
         }
     {offset
       cds6B: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cds6F; else goto cds6E;
       cds6F: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Data.List.NonEmpty.last_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cds6E: // global
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R3 = GHC.List.lastError_closure;
           R2 = Hp - 14;
           call poly_go_rdpws_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.last_info" {
     Data.List.NonEmpty.last_info:
         const Data.List.NonEmpty.last_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const Sds6G_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.421901677 UTC

[section ""data" . Data.List.NonEmpty.init_closure" {
     Data.List.NonEmpty.init_closure:
         const Data.List.NonEmpty.init_info;
 },
 Data.List.NonEmpty.init_entry() //  [R2]
         { []
         }
     {offset
       cds6X: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cds6Y; else goto cds6Z;
       cds6Y: // global
           R2 = R2;
           R1 = Data.List.NonEmpty.init_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cds6Z: // global
           I64[Sp - 8] = block_cds6U_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uds73; else goto cds6V;
       uds73: // global
           call _cds6U(R1) args: 0, res: 0, upd: 0;
       cds6V: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.init_info" {
     Data.List.NonEmpty.init_info:
         const Data.List.NonEmpty.init_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cds6U() //  [R1]
         { []
         }
     {offset
       cds6U: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.List.init1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cds6U_info" {
     block_cds6U_info:
         const _cds6U;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.42748457 UTC

[section ""data" . Data.List.NonEmpty.<|_closure" {
     Data.List.NonEmpty.<|_closure:
         const Data.List.NonEmpty.<|_info;
 },
 Data.List.NonEmpty.<|_entry() //  [R2, R3]
         { []
         }
     {offset
       cds7m: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cds7q; else goto cds7p;
       cds7q: // global
           HpAlloc = 96;
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.<|_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cds7p: // global
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = R3;
           I64[Hp - 64] = stg_sel_0_upd_info;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = Hp - 64;
           P64[Hp - 24] = Hp - 88;
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 38;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.<|_info" {
     Data.List.NonEmpty.<|_info:
         const Data.List.NonEmpty.<|_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.431416993 UTC

[section ""data" . Data.List.NonEmpty.cons_closure" {
     Data.List.NonEmpty.cons_closure:
         const Data.List.NonEmpty.cons_info;
 },
 Data.List.NonEmpty.cons_entry() //  [R2, R3]
         { []
         }
     {offset
       cds7H: // global
           R3 = R3;
           R2 = R2;
           call Data.List.NonEmpty.<|_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.cons_info" {
     Data.List.NonEmpty.cons_info:
         const Data.List.NonEmpty.cons_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.436920915 UTC

[section ""data" . Data.List.NonEmpty.$wunfold_closure" {
     Data.List.NonEmpty.$wunfold_closure:
         const Data.List.NonEmpty.$wunfold_info;
 },
 ds1_sdrOZ_entry() //  [R1]
         { []
         }
     {offset
       cds89: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cds8a; else goto cds8b;
       cds8a: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cds8b: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cds86_info;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call Data.List.NonEmpty.$wunfold_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds1_sdrOZ_info" {
     ds1_sdrOZ_info:
         const ds1_sdrOZ_entry;
         const 2;
         const 18;
 },
 _cds86() //  [R1, R2]
         { []
         }
     {offset
       cds86: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cds8e; else goto cds8d;
       cds8e: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cds8d: // global
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cds86_info" {
     block_cds86_info:
         const _cds86;
         const 0;
         const 30;
 },
 Data.List.NonEmpty.$wunfold_entry() //  [R2, R3]
         { []
         }
     {offset
       cds8f: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cds8g; else goto cds8h;
       cds8g: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.$wunfold_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cds8h: // global
           I64[Sp - 16] = block_cds7S_info;
           _sdrOS::P64 = R2;
           R2 = R3;
           R1 = _sdrOS::P64;
           P64[Sp - 8] = _sdrOS::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.$wunfold_info" {
     Data.List.NonEmpty.$wunfold_info:
         const Data.List.NonEmpty.$wunfold_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cds7S() //  [R1]
         { []
         }
     {offset
       cds7S: // global
           I64[Sp - 8] = block_cds7W_info;
           _sdrOV::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _sdrOV::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uds8v; else goto cds7X;
       uds8v: // global
           call _cds7W(R1) args: 0, res: 0, upd: 0;
       cds7X: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cds7S_info" {
     block_cds7S_info:
         const _cds7S;
         const 1;
         const 30;
 },
 _cds7W() //  [R1]
         { []
         }
     {offset
       cds7W: // global
           _sdrOV::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cds8m; else goto cds8q;
       cds8m: // global
           R2 = GHC.Types.[]_closure+1;
           R1 = _sdrOV::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       cds8q: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cds8t; else goto cds8s;
       cds8t: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cds8s: // global
           _sdrOY::P64 = P64[R1 + 6];
           I64[Hp - 96] = ds1_sdrOZ_info;
           P64[Hp - 80] = P64[Sp + 16];
           P64[Hp - 72] = _sdrOY::P64;
           I64[Hp - 64] = stg_sel_1_upd_info;
           _cds82::P64 = Hp - 96;
           P64[Hp - 48] = _cds82::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _cds82::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R2 = Hp - 14;
           R1 = _sdrOV::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cds7W_info" {
     block_cds7W_info:
         const _cds7W;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.449539717 UTC

[section ""data" . Data.List.NonEmpty.unfold_closure" {
     Data.List.NonEmpty.unfold_closure:
         const Data.List.NonEmpty.unfold_info;
 },
 Data.List.NonEmpty.unfold_entry() //  [R2, R3]
         { []
         }
     {offset
       cds9e: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cds9f; else goto cds9g;
       cds9f: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.unfold_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cds9g: // global
           I64[Sp - 8] = block_cds9b_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Data.List.NonEmpty.$wunfold_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.unfold_info" {
     Data.List.NonEmpty.unfold_info:
         const Data.List.NonEmpty.unfold_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cds9b() //  [R1, R2]
         { []
         }
     {offset
       cds9b: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cds9j; else goto cds9i;
       cds9j: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cds9i: // global
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cds9b_info" {
     block_cds9b_info:
         const _cds9b;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.45461155 UTC

[section ""cstring" . lvl_rdpwt_bytes" {
     lvl_rdpwt_bytes:
         I8[] [78,111,110,69,109,112,116,121,46,102,114,111,109,76,105,115,116,58,32,101,109,112,116,121,32,108,105,115,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.457052008 UTC

[section ""data" . Data.List.NonEmpty.cycle1_closure" {
     Data.List.NonEmpty.cycle1_closure:
         const Data.List.NonEmpty.cycle1_info;
         const 0;
         const 0;
         const 0;
 },
 Data.List.NonEmpty.cycle1_entry() //  [R1]
         { []
         }
     {offset
       cds9E: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cds9F; else goto cds9G;
       cds9F: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cds9G: // global
           (_cds9z::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cds9z::I64 == 0) goto cds9B; else goto cds9A;
       cds9B: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cds9A: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cds9z::I64;
           I64[Sp - 24] = block_cds9C_info;
           R2 = lvl_rdpwt_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.cycle1_info" {
     Data.List.NonEmpty.cycle1_info:
         const Data.List.NonEmpty.cycle1_entry;
         const 0;
         const 4294967317;
         const Sds6G_srt+16;
 },
 _cds9C() //  [R1]
         { []
         }
     {offset
       cds9C: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cds9C_info" {
     block_cds9C_info:
         const _cds9C;
         const 0;
         const 4294967326;
         const Sds6G_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.463333782 UTC

[section ""data" . Data.List.NonEmpty.fromList_closure" {
     Data.List.NonEmpty.fromList_closure:
         const Data.List.NonEmpty.fromList_info;
         const 0;
 },
 Data.List.NonEmpty.fromList_entry() //  [R2]
         { []
         }
     {offset
       cdsa7: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdsa8; else goto cdsa9;
       cdsa8: // global
           R2 = R2;
           R1 = Data.List.NonEmpty.fromList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdsa9: // global
           I64[Sp - 8] = block_cdsa0_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udsaj; else goto cdsa1;
       udsaj: // global
           call _cdsa0(R1) args: 0, res: 0, upd: 0;
       cdsa1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.fromList_info" {
     Data.List.NonEmpty.fromList_info:
         const Data.List.NonEmpty.fromList_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const Sds6G_srt+24;
 },
 _cdsa0() //  [R1]
         { []
         }
     {offset
       cdsa0: // global
           if (R1 & 7 == 1) goto cdsa4; else goto cdsa5;
       cdsa4: // global
           R1 = Data.List.NonEmpty.cycle1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdsa5: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdsai; else goto cdsah;
       cdsai: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdsah: // global
           _sdrPk::P64 = P64[R1 + 6];
           _sdrPl::P64 = P64[R1 + 14];
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = _sdrPk::P64;
           P64[Hp] = _sdrPl::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdsa0_info" {
     block_cdsa0_info:
         const _cdsa0;
         const 0;
         const 4294967326;
         const Sds6G_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.46978347 UTC

[section ""data" . Data.List.NonEmpty.reverse_closure" {
     Data.List.NonEmpty.reverse_closure:
         const Data.List.NonEmpty.reverse_info;
         const 0;
 },
 Data.List.NonEmpty.reverse_entry() //  [R2]
         { []
         }
     {offset
       cdsaM: // global
           _sdrPm::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto cdsaN; else goto cdsaO;
       cdsaO: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdsaQ; else goto cdsaP;
       cdsaQ: // global
           HpAlloc = 72;
           goto cdsaN;
       cdsaN: // global
           R2 = _sdrPm::P64;
           R1 = Data.List.NonEmpty.reverse_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdsaP: // global
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _sdrPm::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _sdrPm::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           I64[Sp - 8] = block_cdsaG_info;
           R3 = GHC.Types.[]_closure+1;
           R2 = Hp - 14;
           Sp = Sp - 8;
           call GHC.List.reverse1_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.reverse_info" {
     Data.List.NonEmpty.reverse_info:
         const Data.List.NonEmpty.reverse_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const Sds6G_srt+32;
 },
 _cdsaG() //  [R1]
         { []
         }
     {offset
       cdsaG: // global
           if (R1 & 7 == 1) goto cdsaJ; else goto cdsaK;
       cdsaJ: // global
           R1 = Data.List.NonEmpty.cycle1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdsaK: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdsaZ; else goto cdsaY;
       cdsaZ: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdsaY: // global
           _sdrPy::P64 = P64[R1 + 6];
           _sdrPz::P64 = P64[R1 + 14];
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = _sdrPy::P64;
           P64[Hp] = _sdrPz::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdsaG_info" {
     block_cdsaG_info:
         const _cdsaG;
         const 0;
         const 4294967326;
         const Sds6G_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.476611281 UTC

[section ""data" . Data.List.NonEmpty.sortBy_closure" {
     Data.List.NonEmpty.sortBy_closure:
         const Data.List.NonEmpty.sortBy_info;
         const 0;
 },
 Data.List.NonEmpty.sortBy_entry() //  [R2, R3]
         { []
         }
     {offset
       cdsbx: // global
           _sdrPB::P64 = R3;
           _sdrPA::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto cdsby; else goto cdsbz;
       cdsbz: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdsbB; else goto cdsbA;
       cdsbB: // global
           HpAlloc = 72;
           goto cdsby;
       cdsby: // global
           R3 = _sdrPB::P64;
           R2 = _sdrPA::P64;
           R1 = Data.List.NonEmpty.sortBy_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdsbA: // global
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _sdrPB::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _sdrPB::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           I64[Sp - 8] = block_cdsbr_info;
           R3 = Hp - 14;
           R2 = _sdrPA::P64;
           Sp = Sp - 8;
           call Data.OldList.sortBy_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.sortBy_info" {
     Data.List.NonEmpty.sortBy_info:
         const Data.List.NonEmpty.sortBy_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const Sds6G_srt+32;
 },
 _cdsbr() //  [R1]
         { []
         }
     {offset
       cdsbr: // global
           if (R1 & 7 == 1) goto cdsbu; else goto cdsbv;
       cdsbu: // global
           R1 = Data.List.NonEmpty.cycle1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdsbv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdsbK; else goto cdsbJ;
       cdsbK: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdsbJ: // global
           _sdrPM::P64 = P64[R1 + 6];
           _sdrPN::P64 = P64[R1 + 14];
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = _sdrPM::P64;
           P64[Hp] = _sdrPN::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdsbr_info" {
     block_cdsbr_info:
         const _cdsbr;
         const 0;
         const 4294967326;
         const Sds6G_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.483901691 UTC

[section ""data" . Data.List.NonEmpty.sortWith_closure" {
     Data.List.NonEmpty.sortWith_closure:
         const Data.List.NonEmpty.sortWith_info;
         const 0;
 },
 sat_sdrPR_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdscg: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Ord.comparing_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdrPR_info" {
     sat_sdrPR_info:
         const sat_sdrPR_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 Data.List.NonEmpty.sortWith_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdscp: // global
           _sdrPQ::P64 = R4;
           _sdrPP::P64 = R3;
           _sdrPO::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto cdscq; else goto cdscr;
       cdscr: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cdsct; else goto cdscs;
       cdsct: // global
           HpAlloc = 96;
           goto cdscq;
       cdscq: // global
           R4 = _sdrPQ::P64;
           R3 = _sdrPP::P64;
           R2 = _sdrPO::P64;
           R1 = Data.List.NonEmpty.sortWith_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdscs: // global
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _sdrPQ::P64;
           I64[Hp - 64] = stg_sel_0_upd_info;
           P64[Hp - 48] = _sdrPQ::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = Hp - 64;
           P64[Hp - 24] = Hp - 88;
           I64[Hp - 16] = sat_sdrPR_info;
           P64[Hp - 8] = _sdrPO::P64;
           P64[Hp] = _sdrPP::P64;
           I64[Sp - 8] = block_cdscj_info;
           R3 = Hp - 38;
           R2 = Hp - 14;
           Sp = Sp - 8;
           call Data.OldList.sortBy_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.sortWith_info" {
     Data.List.NonEmpty.sortWith_info:
         const Data.List.NonEmpty.sortWith_entry;
         const 0;
         const 38654705678;
         const 12884901911;
         const Sds6G_srt+32;
 },
 _cdscj() //  [R1]
         { []
         }
     {offset
       cdscj: // global
           if (R1 & 7 == 1) goto cdscm; else goto cdscn;
       cdscm: // global
           R1 = Data.List.NonEmpty.cycle1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdscn: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdscC; else goto cdscB;
       cdscC: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdscB: // global
           _sdrQ3::P64 = P64[R1 + 6];
           _sdrQ4::P64 = P64[R1 + 14];
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = _sdrQ3::P64;
           P64[Hp] = _sdrQ4::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdscj_info" {
     block_cdscj_info:
         const _cdscj;
         const 0;
         const 4294967326;
         const Sds6G_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.49361337 UTC

[section ""data" . Data.List.NonEmpty.sort_closure" {
     Data.List.NonEmpty.sort_closure:
         const Data.List.NonEmpty.sort_info;
         const 0;
 },
 sat_sdrQ7_entry() //  [R1]
         { []
         }
     {offset
       cdsdb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdsdc; else goto cdsdd;
       cdsdc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdsdd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdrQ7_info" {
     sat_sdrQ7_info:
         const sat_sdrQ7_entry;
         const 1;
         const 16;
 },
 Data.List.NonEmpty.sort_entry() //  [R2, R3]
         { []
         }
     {offset
       cdsdk: // global
           _sdrQ6::P64 = R3;
           _sdrQ5::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto cdsdl; else goto cdsdm;
       cdsdm: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cdsdo; else goto cdsdn;
       cdsdo: // global
           HpAlloc = 96;
           goto cdsdl;
       cdsdl: // global
           R3 = _sdrQ6::P64;
           R2 = _sdrQ5::P64;
           R1 = Data.List.NonEmpty.sort_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdsdn: // global
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _sdrQ6::P64;
           I64[Hp - 64] = stg_sel_0_upd_info;
           P64[Hp - 48] = _sdrQ6::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = Hp - 64;
           P64[Hp - 24] = Hp - 88;
           I64[Hp - 16] = sat_sdrQ7_info;
           P64[Hp] = _sdrQ5::P64;
           I64[Sp - 8] = block_cdsde_info;
           R3 = Hp - 38;
           R2 = Hp - 16;
           Sp = Sp - 8;
           call Data.OldList.sortBy_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.sort_info" {
     Data.List.NonEmpty.sort_info:
         const Data.List.NonEmpty.sort_entry;
         const 0;
         const 73014444046;
         const 8589934607;
         const Sds6G_srt+32;
 },
 _cdsde() //  [R1]
         { []
         }
     {offset
       cdsde: // global
           if (R1 & 7 == 1) goto cdsdh; else goto cdsdi;
       cdsdh: // global
           R1 = Data.List.NonEmpty.cycle1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdsdi: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdsdx; else goto cdsdw;
       cdsdx: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdsdw: // global
           _sdrQj::P64 = P64[R1 + 6];
           _sdrQk::P64 = P64[R1 + 14];
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = _sdrQj::P64;
           P64[Hp] = _sdrQk::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdsde_info" {
     block_cdsde_info:
         const _cdsde;
         const 0;
         const 4294967326;
         const Sds6G_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.502017265 UTC

[section ""data" . Data.List.NonEmpty.inits_closure" {
     Data.List.NonEmpty.inits_closure:
         const Data.List.NonEmpty.inits_info;
         const 0;
 },
 sat_sdrQn_entry() //  [R1]
         { []
         }
     {offset
       cdse5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdse6; else goto cdse7;
       cdse6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdse7: // global
           R2 = P64[R1 + 16];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[R1 + 24];
           Sp = Sp - 16;
           call Data.Foldable.toList_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdrQn_info" {
     sat_sdrQn_info:
         const sat_sdrQn_entry;
         const 2;
         const 18;
 },
 Data.List.NonEmpty.inits_entry() //  [R2, R3]
         { []
         }
     {offset
       cdseb: // global
           _sdrQm::P64 = R3;
           _sdrQl::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto cdsec; else goto cdsed;
       cdsed: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdsef; else goto cdsee;
       cdsef: // global
           HpAlloc = 32;
           goto cdsec;
       cdsec: // global
           R3 = _sdrQm::P64;
           R2 = _sdrQl::P64;
           R1 = Data.List.NonEmpty.inits_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdsee: // global
           I64[Hp - 24] = sat_sdrQn_info;
           P64[Hp - 8] = _sdrQl::P64;
           P64[Hp] = _sdrQm::P64;
           I64[Sp - 8] = block_cdse8_info;
           R2 = Hp - 24;
           Sp = Sp - 8;
           call Data.OldList.$winits_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.inits_info" {
     Data.List.NonEmpty.inits_info:
         const Data.List.NonEmpty.inits_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const Sds6G_srt+72;
 },
 _cdse8() //  [R1, R2]
         { []
         }
     {offset
       cdse8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdsei; else goto cdseh;
       cdsei: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cdseh: // global
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdse8_info" {
     block_cdse8_info:
         const _cdse8;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.510449292 UTC

[section ""data" . Data.List.NonEmpty.tails1_closure" {
     Data.List.NonEmpty.tails1_closure:
         const Data.List.NonEmpty.tails1_info;
 },
 sat_sdrQv_entry() //  [R1]
         { []
         }
     {offset
       cdseQ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdseR; else goto cdseS;
       cdseR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdseS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cdseJ_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udseZ; else goto cdseK;
       udseZ: // global
           call _cdseJ(R1) args: 0, res: 0, upd: 0;
       cdseK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdrQv_info" {
     sat_sdrQv_info:
         const sat_sdrQv_entry;
         const 1;
         const 16;
 },
 _cdseJ() //  [R1]
         { []
         }
     {offset
       cdseJ: // global
           if (R1 & 7 == 1) goto cdseN; else goto cdseO;
       cdseN: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdseO: // global
           R2 = P64[R1 + 14];
           Sp = Sp + 8;
           call Data.List.NonEmpty.tails1_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdseJ_info" {
     block_cdseJ_info:
         const _cdseJ;
         const 0;
         const 30;
 },
 Data.List.NonEmpty.tails1_entry() //  [R2]
         { []
         }
     {offset
       cdsf1: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdsf5; else goto cdsf4;
       cdsf5: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = Data.List.NonEmpty.tails1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdsf4: // global
           I64[Hp - 40] = sat_sdrQv_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.tails1_info" {
     Data.List.NonEmpty.tails1_info:
         const Data.List.NonEmpty.tails1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.518597017 UTC

[section ""data" . Data.List.NonEmpty.tails_closure" {
     Data.List.NonEmpty.tails_closure:
         const Data.List.NonEmpty.tails_info;
         const 0;
 },
 sat_sdrQy_entry() //  [R1]
         { []
         }
     {offset
       cdsfA: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdsfB; else goto cdsfC;
       cdsfB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdsfC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call Data.Foldable.toList_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdrQy_info" {
     sat_sdrQy_info:
         const sat_sdrQy_entry;
         const 2;
         const 18;
 },
 Data.List.NonEmpty.tails_entry() //  [R2, R3]
         { []
         }
     {offset
       cdsfJ: // global
           _sdrQx::P64 = R3;
           _sdrQw::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto cdsfK; else goto cdsfL;
       cdsfL: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdsfN; else goto cdsfM;
       cdsfN: // global
           HpAlloc = 32;
           goto cdsfK;
       cdsfK: // global
           R3 = _sdrQx::P64;
           R2 = _sdrQw::P64;
           R1 = Data.List.NonEmpty.tails_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdsfM: // global
           I64[Hp - 24] = sat_sdrQy_info;
           P64[Hp - 8] = _sdrQw::P64;
           P64[Hp] = _sdrQx::P64;
           I64[Sp - 8] = block_cdsfD_info;
           R2 = Hp - 24;
           Sp = Sp - 8;
           call Data.List.NonEmpty.tails1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.tails_info" {
     Data.List.NonEmpty.tails_info:
         const Data.List.NonEmpty.tails_entry;
         const 0;
         const 554050781198;
         const 8589934607;
         const Sds6G_srt+32;
 },
 _cdsfD() //  [R1]
         { []
         }
     {offset
       cdsfD: // global
           if (R1 & 7 == 1) goto cdsfG; else goto cdsfH;
       cdsfG: // global
           R1 = Data.List.NonEmpty.cycle1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdsfH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdsfW; else goto cdsfV;
       cdsfW: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdsfV: // global
           _sdrQB::P64 = P64[R1 + 6];
           _sdrQC::P64 = P64[R1 + 14];
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = _sdrQB::P64;
           P64[Hp] = _sdrQC::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdsfD_info" {
     block_cdsfD_info:
         const _cdsfD;
         const 0;
         const 4294967326;
         const Sds6G_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.528148277 UTC

[section ""data" . Data.List.NonEmpty.insert_closure" {
     Data.List.NonEmpty.insert_closure:
         const Data.List.NonEmpty.insert_info;
 },
 sat_sdrQH_entry() //  [R1]
         { []
         }
     {offset
       cdsgv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdsgw; else goto cdsgx;
       cdsgw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdsgx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.compare_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdrQH_info" {
     sat_sdrQH_info:
         const sat_sdrQH_entry;
         const 1;
         const 16;
 },
 Data.List.NonEmpty.insert_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cdsgy: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdsgC; else goto cdsgD;
       cdsgC: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.insert_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdsgD: // global
           I64[Sp - 24] = block_cdsgn_info;
           R2 = R2;
           I64[Sp - 40] = stg_ap_p_info;
           P64[Sp - 32] = R5;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 40;
           call Data.Foldable.toList_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.insert_info" {
     Data.List.NonEmpty.insert_info:
         const Data.List.NonEmpty.insert_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cdsgn() //  [R1]
         { []
         }
     {offset
       cdsgn: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdsgG; else goto cdsgF;
       cdsgG: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdsgF: // global
           I64[Hp - 16] = sat_sdrQH_info;
           P64[Hp] = P64[Sp + 8];
           _sdrQF::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cdsgz_info;
           R4 = R1;
           R3 = _sdrQF::P64;
           R2 = Hp - 16;
           Sp = Sp + 16;
           call Data.OldList.$winsertBy_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdsgn_info" {
     block_cdsgn_info:
         const _cdsgn;
         const 2;
         const 30;
 },
 _cdsgz() //  [R1, R2]
         { []
         }
     {offset
       cdsgz: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdsgJ; else goto cdsgI;
       cdsgJ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cdsgI: // global
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdsgz_info" {
     block_cdsgz_info:
         const _cdsgz;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.538776465 UTC

[section ""data" . Data.List.NonEmpty.scanl_closure" {
     Data.List.NonEmpty.scanl_closure:
         const Data.List.NonEmpty.scanl_info;
 },
 sat_sdrQQ_entry() //  [R1]
         { []
         }
     {offset
       cdshj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdshk; else goto cdshl;
       cdshk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdshl: // global
           R2 = P64[R1 + 16];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[R1 + 24];
           Sp = Sp - 16;
           call Data.Foldable.toList_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdrQQ_info" {
     sat_sdrQQ_info:
         const sat_sdrQQ_entry;
         const 2;
         const 18;
 },
 sat_sdrQU_entry() //  [R1]
         { []
         }
     {offset
       cdsho: // global
           _sdrQU::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cdshp; else goto cdshq;
       cdshq: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdshs; else goto cdshr;
       cdshs: // global
           HpAlloc = 32;
           goto cdshp;
       cdshp: // global
           R1 = _sdrQU::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdshr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdrQU::P64;
           _sdrQM::P64 = P64[_sdrQU::P64 + 16];
           _sdrQN::P64 = P64[_sdrQU::P64 + 24];
           _sdrQO::P64 = P64[_sdrQU::P64 + 32];
           _sdrQP::P64 = P64[_sdrQU::P64 + 40];
           I64[Hp - 24] = sat_sdrQQ_info;
           P64[Hp - 8] = _sdrQM::P64;
           P64[Hp] = _sdrQP::P64;
           I64[Sp - 24] = block_cdshm_info;
           R4 = Hp - 24;
           R3 = _sdrQO::P64;
           R2 = _sdrQN::P64;
           Sp = Sp - 24;
           call GHC.List.$wscanlGo_entry(R4, R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdrQU_info" {
     sat_sdrQU_info:
         const sat_sdrQU_entry;
         const 4;
         const 15;
 },
 _cdshm() //  [R2]
         { []
         }
     {offset
       cdshm: // global
           R1 = R2 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdshm_info" {
     block_cdshm_info:
         const _cdshm;
         const 0;
         const 30;
 },
 Data.List.NonEmpty.scanl_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cdshv: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdshz; else goto cdshy;
       cdshz: // global
           HpAlloc = 72;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.scanl_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdshy: // global
           I64[Hp - 64] = sat_sdrQU_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = R4;
           P64[Hp] = Hp - 64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.scanl_info" {
     Data.List.NonEmpty.scanl_info:
         const Data.List.NonEmpty.scanl_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.550804934 UTC

[section ""data" . Data.List.NonEmpty.scanr_closure" {
     Data.List.NonEmpty.scanr_closure:
         const Data.List.NonEmpty.scanr_info;
 },
 Data.List.NonEmpty.scanr_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cdsi6: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdsic; else goto cdsid;
       cdsic: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.scanr_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdsid: // global
           I64[Sp - 24] = block_cdsi4_info;
           R2 = R2;
           I64[Sp - 40] = stg_ap_p_info;
           P64[Sp - 32] = R5;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 40;
           call Data.Foldable.toList_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.scanr_info" {
     Data.List.NonEmpty.scanr_info:
         const Data.List.NonEmpty.scanr_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cdsi4() //  [R1]
         { []
         }
     {offset
       cdsi4: // global
           _sdrQX::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cdsi9_info;
           R4 = R1;
           R3 = _sdrQX::P64;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.List.$wscanr_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdsi4_info" {
     block_cdsi4_info:
         const _cdsi4;
         const 2;
         const 30;
 },
 _cdsi9() //  [R1, R2]
         { []
         }
     {offset
       cdsi9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdsih; else goto cdsig;
       cdsih: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cdsig: // global
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdsi9_info" {
     block_cdsi9_info:
         const _cdsi9;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.561744654 UTC

[section ""data" . Data.List.NonEmpty.scanl1_closure" {
     Data.List.NonEmpty.scanl1_closure:
         const Data.List.NonEmpty.scanl1_info;
 },
 sat_sdrRf_entry() //  [R1]
         { []
         }
     {offset
       cdsiK: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdsiO; else goto cdsiP;
       cdsiO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdsiP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cdsiH_info;
           _sdrR3::P64 = P64[R1 + 16];
           _sdrR5::P64 = P64[R1 + 32];
           R1 = P64[R1 + 24];
           P64[Sp - 32] = _sdrR3::P64;
           P64[Sp - 24] = _sdrR5::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto udsiT; else goto cdsiI;
       udsiT: // global
           call _cdsiH(R1) args: 0, res: 0, upd: 0;
       cdsiI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdrRf_info" {
     sat_sdrRf_info:
         const sat_sdrRf_entry;
         const 3;
         const 15;
 },
 _cdsiH() //  [R1]
         { []
         }
     {offset
       cdsiH: // global
           _sdrR5::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cdsiN_info;
           R4 = P64[R1 + 15];
           R3 = _sdrR5::P64;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.List.$wscanlGo_entry(R4, R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cdsiH_info" {
     block_cdsiH_info:
         const _cdsiH;
         const 2;
         const 30;
 },
 _cdsiN() //  [R2]
         { []
         }
     {offset
       cdsiN: // global
           R1 = R2 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdsiN_info" {
     block_cdsiN_info:
         const _cdsiN;
         const 0;
         const 30;
 },
 Data.List.NonEmpty.scanl1_entry() //  [R2, R3]
         { []
         }
     {offset
       cdsiV: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdsiZ; else goto cdsiY;
       cdsiZ: // global
           HpAlloc = 88;
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.scanl1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdsiY: // global
           I64[Hp - 80] = stg_sel_0_upd_info;
           P64[Hp - 64] = R3;
           I64[Hp - 56] = sat_sdrRf_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           _cdsiC::P64 = Hp - 80;
           P64[Hp - 24] = _cdsiC::P64;
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = _cdsiC::P64;
           P64[Hp] = Hp - 56;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.scanl1_info" {
     Data.List.NonEmpty.scanl1_info:
         const Data.List.NonEmpty.scanl1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.573624218 UTC

[section ""data" . Data.List.NonEmpty.scanr1_closure" {
     Data.List.NonEmpty.scanr1_closure:
         const Data.List.NonEmpty.scanr1_info;
         const 0;
 },
 Data.List.NonEmpty.scanr1_entry() //  [R2, R3]
         { []
         }
     {offset
       cdsjC: // global
           _sdrRh::P64 = R3;
           _sdrRg::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto cdsjD; else goto cdsjE;
       cdsjE: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdsjG; else goto cdsjF;
       cdsjG: // global
           HpAlloc = 72;
           goto cdsjD;
       cdsjD: // global
           R3 = _sdrRh::P64;
           R2 = _sdrRg::P64;
           R1 = Data.List.NonEmpty.scanr1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdsjF: // global
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _sdrRh::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _sdrRh::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           I64[Sp - 8] = block_cdsjw_info;
           R3 = Hp - 14;
           R2 = _sdrRg::P64;
           Sp = Sp - 8;
           call GHC.List.scanr1_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.scanr1_info" {
     Data.List.NonEmpty.scanr1_info:
         const Data.List.NonEmpty.scanr1_entry;
         const 0;
         const 3302829850638;
         const 8589934607;
         const Sds6G_srt+32;
 },
 _cdsjw() //  [R1]
         { []
         }
     {offset
       cdsjw: // global
           if (R1 & 7 == 1) goto cdsjz; else goto cdsjA;
       cdsjz: // global
           R1 = Data.List.NonEmpty.cycle1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdsjA: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdsjP; else goto cdsjO;
       cdsjP: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdsjO: // global
           _sdrRs::P64 = P64[R1 + 6];
           _sdrRt::P64 = P64[R1 + 14];
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = _sdrRs::P64;
           P64[Hp] = _sdrRt::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdsjw_info" {
     block_cdsjw_info:
         const _cdsjw;
         const 0;
         const 4294967326;
         const Sds6G_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.579709473 UTC

[section ""data" . Data.List.NonEmpty.toList_closure" {
     Data.List.NonEmpty.toList_closure:
         const Data.List.NonEmpty.toList_info;
 },
 Data.List.NonEmpty.toList_entry() //  [R2]
         { []
         }
     {offset
       cdskg: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdskk; else goto cdskj;
       cdskk: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Data.List.NonEmpty.toList_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdskj: // global
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.toList_info" {
     Data.List.NonEmpty.toList_info:
         const Data.List.NonEmpty.toList_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.584037992 UTC

[section ""data" . Data.List.NonEmpty.$wtake_closure" {
     Data.List.NonEmpty.$wtake_closure:
         const Data.List.NonEmpty.$wtake_info;
 },
 Data.List.NonEmpty.$wtake_entry() //  [R2, R3]
         { []
         }
     {offset
       cdskE: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdskI; else goto cdskH;
       cdskI: // global
           HpAlloc = 72;
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.$wtake_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdskH: // global
           if (%MO_S_Ge_W64(0, R2)) goto cdskC; else goto cdskD;
       cdskC: // global
           Hp = Hp - 72;
           R1 = []_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdskD: // global
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R3 = Hp - 14;
           R2 = R2;
           call GHC.List.$wunsafeTake_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.$wtake_info" {
     Data.List.NonEmpty.$wtake_info:
         const Data.List.NonEmpty.$wtake_entry;
         const 0;
         const 14;
         const 8589934605;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.588626449 UTC

[section ""data" . Data.List.NonEmpty.take_closure" {
     Data.List.NonEmpty.take_closure:
         const Data.List.NonEmpty.take_info;
 },
 Data.List.NonEmpty.take_entry() //  [R2, R3]
         { []
         }
     {offset
       cdsl6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdsl7; else goto cdsl8;
       cdsl7: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.take_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdsl8: // global
           I64[Sp - 16] = block_cdsl3_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udslc; else goto cdsl4;
       udslc: // global
           call _cdsl3(R1) args: 0, res: 0, upd: 0;
       cdsl4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.take_info" {
     Data.List.NonEmpty.take_info:
         const Data.List.NonEmpty.take_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cdsl3() //  [R1]
         { []
         }
     {offset
       cdsl3: // global
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 16;
           call Data.List.NonEmpty.$wtake_entry(R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdsl3_info" {
     block_cdsl3_info:
         const _cdsl3;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.595164699 UTC

[section ""data" . Data.List.NonEmpty.$wunsafeDrop_closure" {
     Data.List.NonEmpty.$wunsafeDrop_closure:
         const Data.List.NonEmpty.$wunsafeDrop_info;
 },
 Data.List.NonEmpty.$wunsafeDrop_entry() //  [R2, R3]
         { []
         }
     {offset
       cdsly: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdslz; else goto udslN;
       cdslz: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.$wunsafeDrop_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       udslN: // global
           I64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _cdslo() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.$wunsafeDrop_info" {
     Data.List.NonEmpty.$wunsafeDrop_info:
         const Data.List.NonEmpty.$wunsafeDrop_entry;
         const 0;
         const 14;
         const 8589934605;
 },
 _cdslo() //  []
         { []
         }
     {offset
       cdslo: // global
           I64[Sp - 8] = block_cdslr_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udslP; else goto cdsls;
       udslP: // global
           call _cdslr(R1) args: 0, res: 0, upd: 0;
       cdsls: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdslr() //  [R1]
         { []
         }
     {offset
       cdslr: // global
           if (R1 & 7 == 1) goto cdslv; else goto cdslw;
       cdslv: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdslw: // global
           _sdrRX::P64 = P64[R1 + 14];
           _sdrRY::I64 = I64[Sp + 8];
           if (_sdrRY::I64 != 1) goto cdslJ; else goto cdslK;
       cdslJ: // global
           I64[Sp + 8] = _sdrRY::I64 - 1;
           P64[Sp + 16] = _sdrRX::P64;
           Sp = Sp + 8;
           call _cdslo() args: 0, res: 0, upd: 0;
       cdslK: // global
           R1 = _sdrRX::P64 & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdslr_info" {
     block_cdslr_info:
         const _cdslr;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.601968494 UTC

[section ""data" . Data.List.NonEmpty.$wdrop_closure" {
     Data.List.NonEmpty.$wdrop_closure:
         const Data.List.NonEmpty.$wdrop_info;
 },
 Data.List.NonEmpty.$wdrop_entry() //  [R2, R3]
         { []
         }
     {offset
       cdsmk: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdsmo; else goto cdsmn;
       cdsmo: // global
           HpAlloc = 72;
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.$wdrop_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdsmn: // global
           if (%MO_S_Gt_W64(R2, 0)) goto cdsmi; else goto cdsmj;
       cdsmi: // global
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R3 = Hp - 14;
           R2 = R2;
           call Data.List.NonEmpty.$wunsafeDrop_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
       cdsmj: // global
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.$wdrop_info" {
     Data.List.NonEmpty.$wdrop_info:
         const Data.List.NonEmpty.$wdrop_entry;
         const 0;
         const 14;
         const 8589934605;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.606592096 UTC

[section ""data" . Data.List.NonEmpty.drop_closure" {
     Data.List.NonEmpty.drop_closure:
         const Data.List.NonEmpty.drop_info;
 },
 Data.List.NonEmpty.drop_entry() //  [R2, R3]
         { []
         }
     {offset
       cdsmT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdsmU; else goto cdsmV;
       cdsmU: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.drop_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdsmV: // global
           I64[Sp - 16] = block_cdsmQ_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udsmZ; else goto cdsmR;
       udsmZ: // global
           call _cdsmQ(R1) args: 0, res: 0, upd: 0;
       cdsmR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.drop_info" {
     Data.List.NonEmpty.drop_info:
         const Data.List.NonEmpty.drop_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cdsmQ() //  [R1]
         { []
         }
     {offset
       cdsmQ: // global
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 16;
           call Data.List.NonEmpty.$wdrop_entry(R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdsmQ_info" {
     block_cdsmQ_info:
         const _cdsmQ;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.613531038 UTC

[section ""data" . Data.List.NonEmpty.splitAt_closure" {
     Data.List.NonEmpty.splitAt_closure:
         const Data.List.NonEmpty.splitAt_info;
 },
 Data.List.NonEmpty.splitAt_entry() //  [R2, R3]
         { []
         }
     {offset
       cdsnh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdsni; else goto cdsnj;
       cdsni: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.splitAt_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdsnj: // global
           I64[Sp - 16] = block_cdsne_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udsnJ; else goto cdsnf;
       udsnJ: // global
           call _cdsne(R1) args: 0, res: 0, upd: 0;
       cdsnf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.splitAt_info" {
     Data.List.NonEmpty.splitAt_info:
         const Data.List.NonEmpty.splitAt_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cdsne() //  [R1]
         { []
         }
     {offset
       cdsne: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cdsno; else goto cdsnn;
       cdsno: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdsnn: // global
           _sdrSp::P64 = P64[Sp + 8];
           if (%MO_S_Gt_W64(I64[R1 + 7], 0)) goto cdsnz; else goto cdsnI;
       cdsnz: // global
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _sdrSp::P64;
           I64[Hp - 64] = stg_sel_0_upd_info;
           P64[Hp - 48] = _sdrSp::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = Hp - 64;
           P64[Hp - 24] = Hp - 88;
           _cdsnu::P64 = Hp - 38;
           Hp = Hp - 24;
           I64[Sp + 8] = block_cdsnv_info;
           R3 = _cdsnu::P64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.List.$wsplitAt'_entry(R3, R2) args: 8, res: 8, upd: 8;
       cdsnI: // global
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _sdrSp::P64;
           I64[Hp - 64] = stg_sel_0_upd_info;
           P64[Hp - 48] = _sdrSp::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = Hp - 64;
           P64[Hp - 24] = Hp - 88;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = GHC.Types.[]_closure+1;
           P64[Hp] = Hp - 38;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdsne_info" {
     block_cdsne_info:
         const _cdsne;
         const 1;
         const 30;
 },
 _cdsnv() //  [R1, R2]
         { []
         }
     {offset
       cdsnv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdsnC; else goto cdsnB;
       cdsnC: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cdsnB: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdsnv_info" {
     block_cdsnv_info:
         const _cdsnv;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.621885659 UTC

[section ""data" . Data.List.NonEmpty.takeWhile_closure" {
     Data.List.NonEmpty.takeWhile_closure:
         const Data.List.NonEmpty.takeWhile_info;
 },
 Data.List.NonEmpty.takeWhile_entry() //  [R2, R3]
         { []
         }
     {offset
       cdsom: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdsoq; else goto cdsop;
       cdsoq: // global
           HpAlloc = 72;
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.takeWhile_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdsop: // global
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R3 = Hp - 14;
           R2 = R2;
           call GHC.List.takeWhile_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.takeWhile_info" {
     Data.List.NonEmpty.takeWhile_info:
         const Data.List.NonEmpty.takeWhile_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.626333325 UTC

[section ""data" . Data.List.NonEmpty.dropWhile_closure" {
     Data.List.NonEmpty.dropWhile_closure:
         const Data.List.NonEmpty.dropWhile_info;
 },
 Data.List.NonEmpty.dropWhile_entry() //  [R2, R3]
         { []
         }
     {offset
       cdsoH: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdsoL; else goto cdsoK;
       cdsoL: // global
           HpAlloc = 72;
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.dropWhile_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdsoK: // global
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R3 = Hp - 14;
           R2 = R2;
           call GHC.List.dropWhile_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.dropWhile_info" {
     Data.List.NonEmpty.dropWhile_info:
         const Data.List.NonEmpty.dropWhile_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.631021194 UTC

[section ""data" . Data.List.NonEmpty.span_closure" {
     Data.List.NonEmpty.span_closure:
         const Data.List.NonEmpty.span_info;
 },
 Data.List.NonEmpty.span_entry() //  [R2, R3]
         { []
         }
     {offset
       cdsp5: // global
           _sdrTb::P64 = R3;
           _sdrTa::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto cdsp6; else goto cdsp7;
       cdsp7: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdsp9; else goto cdsp8;
       cdsp9: // global
           HpAlloc = 72;
           goto cdsp6;
       cdsp6: // global
           R3 = _sdrTb::P64;
           R2 = _sdrTa::P64;
           R1 = Data.List.NonEmpty.span_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdsp8: // global
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _sdrTb::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _sdrTb::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           I64[Sp - 8] = block_cdsp2_info;
           R3 = Hp - 14;
           R2 = _sdrTa::P64;
           Sp = Sp - 8;
           call GHC.List.$wspan_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.span_info" {
     Data.List.NonEmpty.span_info:
         const Data.List.NonEmpty.span_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cdsp2() //  [R1, R2]
         { []
         }
     {offset
       cdsp2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdspc; else goto cdspb;
       cdspc: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cdspb: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdsp2_info" {
     block_cdsp2_info:
         const _cdsp2;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.638312238 UTC

[section ""data" . Data.List.NonEmpty.$wbreak_closure" {
     Data.List.NonEmpty.$wbreak_closure:
         const Data.List.NonEmpty.$wbreak_info;
 },
 sat_sdrTs_entry() //  [R1, R2]
         { []
         }
     {offset
       cdspL: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdspM; else goto cdspN;
       cdspM: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdspN: // global
           I64[Sp - 8] = block_cdspF_info;
           R2 = R2;
           R1 = P64[R1 + 7];
           Sp = Sp - 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdrTs_info" {
     sat_sdrTs_info:
         const sat_sdrTs_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cdspF() //  [R1]
         { []
         }
     {offset
       cdspF: // global
           if (R1 & 7 == 1) goto cdspI; else goto cdspJ;
       cdspI: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdspJ: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdspF_info" {
     block_cdspF_info:
         const _cdspF;
         const 0;
         const 30;
 },
 Data.List.NonEmpty.$wbreak_entry() //  [R2, R3]
         { []
         }
     {offset
       cdspU: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdspY; else goto cdspX;
       cdspY: // global
           HpAlloc = 88;
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.$wbreak_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdspX: // global
           I64[Hp - 80] = stg_sel_1_upd_info;
           P64[Hp - 64] = R3;
           I64[Hp - 56] = stg_sel_0_upd_info;
           P64[Hp - 40] = R3;
           I64[Hp - 32] = :_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 80;
           I64[Hp - 8] = sat_sdrTs_info;
           P64[Hp] = R2;
           R3 = Hp - 30;
           R2 = Hp - 7;
           call GHC.List.$wspan_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.$wbreak_info" {
     Data.List.NonEmpty.$wbreak_info:
         const Data.List.NonEmpty.$wbreak_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.646962303 UTC

[section ""data" . Data.List.NonEmpty.break_closure" {
     Data.List.NonEmpty.break_closure:
         const Data.List.NonEmpty.break_info;
 },
 Data.List.NonEmpty.break_entry() //  [R2, R3]
         { []
         }
     {offset
       cdsqu: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdsqv; else goto cdsqw;
       cdsqv: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.break_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdsqw: // global
           I64[Sp - 8] = block_cdsqr_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Data.List.NonEmpty.$wbreak_entry(R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.break_info" {
     Data.List.NonEmpty.break_info:
         const Data.List.NonEmpty.break_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cdsqr() //  [R1, R2]
         { []
         }
     {offset
       cdsqr: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdsqz; else goto cdsqy;
       cdsqz: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cdsqy: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdsqr_info" {
     block_cdsqr_info:
         const _cdsqr;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.653235477 UTC

[section ""data" . Data.List.NonEmpty.filter_closure" {
     Data.List.NonEmpty.filter_closure:
         const Data.List.NonEmpty.filter_info;
 },
 Data.List.NonEmpty.filter_entry() //  [R2, R3]
         { []
         }
     {offset
       cdsqS: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdsqW; else goto cdsqV;
       cdsqW: // global
           HpAlloc = 72;
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.filter_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdsqV: // global
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R3 = Hp - 14;
           R2 = R2;
           call GHC.List.filter_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.filter_info" {
     Data.List.NonEmpty.filter_info:
         const Data.List.NonEmpty.filter_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.660111395 UTC

[section ""data" . Data.List.NonEmpty.$wpartition_closure" {
     Data.List.NonEmpty.$wpartition_closure:
         const Data.List.NonEmpty.$wpartition_info;
 },
 w3_sdrTZ_entry() //  [R1]
         { []
         }
     {offset
       cdsrs: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdsrt; else goto cdsru;
       cdsrt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdsru: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cdsrp_info;
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           call $wgo_sdrTU_entry(R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . w3_sdrTZ_info" {
     w3_sdrTZ_info:
         const w3_sdrTZ_entry;
         const 2;
         const 18;
 },
 _cdsrp() //  [R1, R2]
         { []
         }
     {offset
       cdsrp: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdsrx; else goto cdsrw;
       cdsrx: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cdsrw: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdsrp_info" {
     block_cdsrp_info:
         const _cdsrp;
         const 0;
         const 30;
 },
 $wgo_sdrTU_entry() //  [R1, R2]
         { []
         }
     {offset
       cdsrC: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdsrD; else goto cdsrE;
       cdsrD: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdsrE: // global
           I64[Sp - 24] = block_cdsrf_info;
           _sdrTU::P64 = R1;
           _sdrTS::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _sdrTS::P64;
           P64[Sp - 8] = _sdrTU::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udss6; else goto cdsrg;
       udss6: // global
           call _cdsrf(R1) args: 0, res: 0, upd: 0;
       cdsrg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wgo_sdrTU_info" {
     $wgo_sdrTU_info:
         const $wgo_sdrTU_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cdsrf() //  [R1]
         { []
         }
     {offset
       cdsrf: // global
           if (R1 & 7 == 1) goto cdsrz; else goto cdsrA;
       cdsrz: // global
           R2 = GHC.Types.[]_closure+1;
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       cdsrA: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdsrK; else goto cdsrJ;
       cdsrK: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdsrJ: // global
           _sdrTX::P64 = P64[R1 + 6];
           _sdrTY::P64 = P64[R1 + 14];
           I64[Hp - 24] = w3_sdrTZ_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _sdrTY::P64;
           I64[Sp] = block_cdsrH_info;
           R2 = _sdrTX::P64;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sdrTX::P64;
           P64[Sp + 16] = Hp - 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdsrf_info" {
     block_cdsrf_info:
         const _cdsrf;
         const 2;
         const 30;
 },
 _cdsrH() //  [R1]
         { []
         }
     {offset
       cdsrH: // global
           _cdsrl::P64 = P64[Sp + 16];
           _sdrTX::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cdsrS; else goto cdss1;
       cdsrS: // global
           Hp = Hp + 72;
           _sdrU3::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdss4; else goto cdsrU;
       cdsrU: // global
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _cdsrl::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _sdrTX::P64;
           P64[Hp - 24] = Hp - 64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _cdsrl::P64;
           R2 = Hp - 38;
           R1 = Hp - 16;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       cdss1: // global
           Hp = Hp + 72;
           _sdrU3::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cdss4; else goto cdss3;
       cdss4: // global
           HpAlloc = 72;
           R1 = _sdrU3::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdss3: // global
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _cdsrl::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _cdsrl::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _sdrTX::P64;
           P64[Hp] = Hp - 40;
           R2 = Hp - 64;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdsrH_info" {
     block_cdsrH_info:
         const _cdsrH;
         const 2;
         const 30;
 },
 Data.List.NonEmpty.$wpartition_entry() //  [R2, R3]
         { []
         }
     {offset
       cdssa: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdsse; else goto cdssd;
       cdsse: // global
           HpAlloc = 88;
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.$wpartition_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdssd: // global
           I64[Hp - 80] = $wgo_sdrTU_info;
           P64[Hp - 72] = R2;
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R2 = Hp - 14;
           R1 = Hp - 79;
           call $wgo_sdrTU_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.$wpartition_info" {
     Data.List.NonEmpty.$wpartition_info:
         const Data.List.NonEmpty.$wpartition_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.674431525 UTC

[section ""data" . Data.List.NonEmpty.partition_closure" {
     Data.List.NonEmpty.partition_closure:
         const Data.List.NonEmpty.partition_info;
 },
 Data.List.NonEmpty.partition_entry() //  [R2, R3]
         { []
         }
     {offset
       cdste: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdstf; else goto cdstg;
       cdstf: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.partition_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdstg: // global
           I64[Sp - 8] = block_cdstb_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Data.List.NonEmpty.$wpartition_entry(R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.partition_info" {
     Data.List.NonEmpty.partition_info:
         const Data.List.NonEmpty.partition_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cdstb() //  [R1, R2]
         { []
         }
     {offset
       cdstb: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdstj; else goto cdsti;
       cdstj: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cdsti: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdstb_info" {
     block_cdstb_info:
         const _cdstb;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.681146319 UTC

[section ""data" . Data.List.NonEmpty.cycle_closure" {
     Data.List.NonEmpty.cycle_closure:
         const Data.List.NonEmpty.cycle_info;
         const 0;
 },
 xs'_sdrUB_entry() //  [R1]
         { []
         }
     {offset
       cdstG: // global
           _sdrUB::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdstH; else goto cdstI;
       cdstI: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdstK; else goto cdstJ;
       cdstK: // global
           HpAlloc = 72;
           goto cdstH;
       cdstH: // global
           R1 = _sdrUB::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdstJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdrUB::P64;
           _sdrUA::P64 = P64[_sdrUB::P64 + 16];
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _sdrUA::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _sdrUA::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R3 = _sdrUB::P64;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . xs'_sdrUB_info" {
     xs'_sdrUB_info:
         const xs'_sdrUB_entry;
         const 1;
         const 16;
 },
 Data.List.NonEmpty.cycle_entry() //  [R2]
         { []
         }
     {offset
       cdstS: // global
           _sdrUA::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto cdstT; else goto cdstU;
       cdstU: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdstW; else goto cdstV;
       cdstW: // global
           HpAlloc = 24;
           goto cdstT;
       cdstT: // global
           R2 = _sdrUA::P64;
           R1 = Data.List.NonEmpty.cycle_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdstV: // global
           I64[Hp - 16] = xs'_sdrUB_info;
           P64[Hp] = _sdrUA::P64;
           I64[Sp - 8] = block_cdstL_info;
           R1 = Hp - 16;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udsu6; else goto cdstM;
       udsu6: // global
           call _cdstL(R1) args: 0, res: 0, upd: 0;
       cdstM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.cycle_info" {
     Data.List.NonEmpty.cycle_info:
         const Data.List.NonEmpty.cycle_entry;
         const 0;
         const 4402341478414;
         const 4294967301;
         const Sds6G_srt+32;
 },
 _cdstL() //  [R1]
         { []
         }
     {offset
       cdstL: // global
           if (R1 & 7 == 1) goto cdstP; else goto cdstQ;
       cdstP: // global
           R1 = Data.List.NonEmpty.cycle1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdstQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdsu5; else goto cdsu4;
       cdsu5: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdsu4: // global
           _sdrUN::P64 = P64[R1 + 6];
           _sdrUO::P64 = P64[R1 + 14];
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = _sdrUN::P64;
           P64[Hp] = _sdrUO::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdstL_info" {
     block_cdstL_info:
         const _cdstL;
         const 0;
         const 4294967326;
         const Sds6G_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.694593175 UTC

[section ""data" . Data.List.NonEmpty.$wtranspose_closure" {
     Data.List.NonEmpty.$wtranspose_closure:
         const Data.List.NonEmpty.$wtranspose_info;
         const 0;
 },
 sat_sdrV9_entry() //  [R1]
         { []
         }
     {offset
       cdsuM: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdsuN; else goto cdsuO;
       cdsuN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdsuO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cdsuJ_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udsuS; else goto cdsuK;
       udsuS: // global
           call _cdsuJ(R1) args: 0, res: 0, upd: 0;
       cdsuK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdrV9_info" {
     sat_sdrV9_info:
         const sat_sdrV9_entry;
         const 1;
         const 16;
 },
 _cdsuJ() //  [R1]
         { []
         }
     {offset
       cdsuJ: // global
           R3 = P64[R1 + 15];
           R2 = Data.List.NonEmpty.toList_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdsuJ_info" {
     block_cdsuJ_info:
         const _cdsuJ;
         const 0;
         const 30;
 },
 sat_sdrV4_entry() //  [R1]
         { []
         }
     {offset
       cdsv0: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdsv4; else goto cdsv5;
       cdsv4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdsv5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cdsuX_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udsvd; else goto cdsuY;
       udsvd: // global
           call _cdsuX(R1) args: 0, res: 0, upd: 0;
       cdsuY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdrV4_info" {
     sat_sdrV4_info:
         const sat_sdrV4_entry;
         const 1;
         const 16;
 },
 _cdsuX() //  [R1]
         { []
         }
     {offset
       cdsuX: // global
           I64[Sp] = block_cdsv3_info;
           R1 = P64[R1 + 7];
           if (R1 & 7 != 0) goto udsvc; else goto cdsv7;
       udsvc: // global
           call _cdsv3(R1) args: 0, res: 0, upd: 0;
       cdsv7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cdsuX_info" {
     block_cdsuX_info:
         const _cdsuX;
         const 0;
         const 30;
 },
 _cdsv3() //  [R1]
         { []
         }
     {offset
       cdsv3: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdsv3_info" {
     block_cdsv3_info:
         const _cdsv3;
         const 0;
         const 30;
 },
 sat_sdrUX_entry() //  [R1]
         { []
         }
     {offset
       cdsvl: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdsvp; else goto cdsvq;
       cdsvp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdsvq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cdsvi_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udsvy; else goto cdsvj;
       udsvy: // global
           call _cdsvi(R1) args: 0, res: 0, upd: 0;
       cdsvj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdrUX_info" {
     sat_sdrUX_info:
         const sat_sdrUX_entry;
         const 1;
         const 16;
 },
 _cdsvi() //  [R1]
         { []
         }
     {offset
       cdsvi: // global
           I64[Sp] = block_cdsvo_info;
           R1 = P64[R1 + 7];
           if (R1 & 7 != 0) goto udsvx; else goto cdsvs;
       udsvx: // global
           call _cdsvo(R1) args: 0, res: 0, upd: 0;
       cdsvs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cdsvi_info" {
     block_cdsvi_info:
         const _cdsvi;
         const 0;
         const 30;
 },
 _cdsvo() //  [R1]
         { []
         }
     {offset
       cdsvo: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdsvo_info" {
     block_cdsvo_info:
         const _cdsvo;
         const 0;
         const 30;
 },
 ds_sdrUQ_entry() //  [R1]
         { []
         }
     {offset
       cdsvH: // global
           _sdrUQ::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cdsvI; else goto cdsvJ;
       cdsvJ: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto cdsvL; else goto cdsvK;
       cdsvL: // global
           HpAlloc = 120;
           goto cdsvI;
       cdsvI: // global
           R1 = _sdrUQ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdsvK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdrUQ::P64;
           _sdrUP::P64 = P64[_sdrUQ::P64 + 16];
           I64[Hp - 112] = sat_sdrV9_info;
           P64[Hp - 96] = _sdrUP::P64;
           I64[Hp - 88] = sat_sdrV4_info;
           P64[Hp - 72] = _sdrUP::P64;
           I64[Hp - 64] = sat_sdrUX_info;
           P64[Hp - 48] = _sdrUP::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = Hp - 64;
           P64[Hp - 24] = Hp - 88;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = Hp - 112;
           I64[Sp - 24] = block_cdsvB_info;
           R2 = Hp - 14;
           Sp = Sp - 24;
           call Data.OldList.transpose_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds_sdrUQ_info" {
     ds_sdrUQ_info:
         const ds_sdrUQ_entry;
         const 1;
         const 4294967312;
         const Sds6G_srt+32;
 },
 _cdsvB() //  [R1]
         { []
         }
     {offset
       cdsvB: // global
           if (R1 & 7 == 1) goto cdsvE; else goto cdsvF;
       cdsvE: // global
           R1 = Data.List.NonEmpty.cycle1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       cdsvF: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdsvU; else goto cdsvT;
       cdsvU: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdsvT: // global
           _sdrVc::P64 = P64[R1 + 6];
           _sdrVd::P64 = P64[R1 + 14];
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = _sdrVc::P64;
           P64[Hp] = _sdrVd::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdsvB_info" {
     block_cdsvB_info:
         const _cdsvB;
         const 0;
         const 4294967326;
         const Sds6G_srt+32;
 },
 sat_sdrVo_entry() //  [R1]
         { []
         }
     {offset
       cdsw2: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdsw3; else goto cdsw4;
       cdsw3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdsw4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cdsvZ_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udsw8; else goto cdsw0;
       udsw8: // global
           call _cdsvZ(R1) args: 0, res: 0, upd: 0;
       cdsw0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdrVo_info" {
     sat_sdrVo_info:
         const sat_sdrVo_entry;
         const 1;
         const 4294967312;
         const Sds6G_srt+24;
 },
 _cdsvZ() //  [R1]
         { []
         }
     {offset
       cdsvZ: // global
           R3 = P64[R1 + 15];
           R2 = Data.List.NonEmpty.fromList_closure+1;
           Sp = Sp + 8;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdsvZ_info" {
     block_cdsvZ_info:
         const _cdsvZ;
         const 0;
         const 4294967326;
         const Sds6G_srt+24;
 },
 sat_sdrVk_entry() //  [R1]
         { []
         }
     {offset
       cdswg: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdswh; else goto cdswi;
       cdswh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdswi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cdswd_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udswD; else goto cdswe;
       udswD: // global
           call _cdswd(R1) args: 0, res: 0, upd: 0;
       cdswe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdrVk_info" {
     sat_sdrVk_info:
         const sat_sdrVk_entry;
         const 1;
         const 4294967312;
         const Sds6G_srt+32;
 },
 _cdswd() //  [R1]
         { []
         }
     {offset
       cdswd: // global
           I64[Sp] = block_cdswl_info;
           R1 = P64[R1 + 7];
           if (R1 & 7 != 0) goto udswC; else goto cdswn;
       udswC: // global
           call _cdswl(R1) args: 0, res: 0, upd: 0;
       cdswn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cdswd_info" {
     block_cdswd_info:
         const _cdswd;
         const 0;
         const 4294967326;
         const Sds6G_srt+32;
 },
 _cdswl() //  [R1]
         { []
         }
     {offset
       cdswl: // global
           if (R1 & 7 == 1) goto cdswt; else goto cdswx;
       cdswt: // global
           R1 = Data.List.NonEmpty.cycle1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       cdswx: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdswA; else goto cdswz;
       cdswA: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdswz: // global
           _sdrVi::P64 = P64[R1 + 6];
           _sdrVj::P64 = P64[R1 + 14];
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = _sdrVi::P64;
           P64[Hp] = _sdrVj::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdswl_info" {
     block_cdswl_info:
         const _cdswl;
         const 0;
         const 4294967326;
         const Sds6G_srt+32;
 },
 Data.List.NonEmpty.$wtranspose_entry() //  [R2]
         { []
         }
     {offset
       cdswE: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cdswI; else goto cdswH;
       cdswI: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = Data.List.NonEmpty.$wtranspose_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdswH: // global
           I64[Hp - 64] = ds_sdrUQ_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_sdrVo_info;
           _cdsuB::P64 = Hp - 64;
           P64[Hp - 24] = _cdsuB::P64;
           I64[Hp - 16] = sat_sdrVk_info;
           P64[Hp] = _cdsuB::P64;
           R2 = Hp - 40;
           R1 = Hp - 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.$wtranspose_info" {
     Data.List.NonEmpty.$wtranspose_info:
         const Data.List.NonEmpty.$wtranspose_entry;
         const 0;
         const 17605070946318;
         const 4294967301;
         const Sds6G_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.72852437 UTC

[section ""data" . Data.List.NonEmpty.transpose_closure" {
     Data.List.NonEmpty.transpose_closure:
         const Data.List.NonEmpty.transpose_info;
         const 0;
 },
 Data.List.NonEmpty.transpose_entry() //  [R2]
         { []
         }
     {offset
       cdsyv: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdsyw; else goto cdsyx;
       cdsyw: // global
           R2 = R2;
           R1 = Data.List.NonEmpty.transpose_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdsyx: // global
           I64[Sp - 8] = block_cdsys_info;
           R2 = R2;
           Sp = Sp - 8;
           call Data.List.NonEmpty.$wtranspose_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.transpose_info" {
     Data.List.NonEmpty.transpose_info:
         const Data.List.NonEmpty.transpose_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const Sds6G_srt+120;
 },
 _cdsys() //  [R1, R2]
         { []
         }
     {offset
       cdsys: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdsyA; else goto cdsyz;
       cdsyA: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cdsyz: // global
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdsys_info" {
     block_cdsys_info:
         const _cdsys;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.73756934 UTC

[section ""data" . Data.List.NonEmpty.map_closure" {
     Data.List.NonEmpty.map_closure:
         const Data.List.NonEmpty.map_info;
 },
 sat_sdrVD_entry() //  [R1]
         { []
         }
     {offset
       cdsyX: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdsyY; else goto cdsyZ;
       cdsyY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdsyZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cdsyU_info;
           _sdrVt::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _sdrVt::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udsz3; else goto cdsyV;
       udsz3: // global
           call _cdsyU(R1) args: 0, res: 0, upd: 0;
       cdsyV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdrVD_info" {
     sat_sdrVD_info:
         const sat_sdrVD_entry;
         const 2;
         const 18;
 },
 _cdsyU() //  [R1]
         { []
         }
     {offset
       cdsyU: // global
           R3 = P64[R1 + 15];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Base.map_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdsyU_info" {
     block_cdsyU_info:
         const _cdsyU;
         const 1;
         const 30;
 },
 sat_sdrVz_entry() //  [R1]
         { []
         }
     {offset
       cdsz9: // global
           _sdrVz::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdsza; else goto cdszb;
       cdszb: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdszd; else goto cdszc;
       cdszd: // global
           HpAlloc = 24;
           goto cdsza;
       cdsza: // global
           R1 = _sdrVz::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdszc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdrVz::P64;
           _sdrVt::P64 = P64[_sdrVz::P64 + 16];
           _sdrVu::P64 = P64[_sdrVz::P64 + 24];
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _sdrVu::P64;
           R2 = Hp - 16;
           R1 = _sdrVt::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdrVz_info" {
     sat_sdrVz_info:
         const sat_sdrVz_entry;
         const 2;
         const 18;
 },
 Data.List.NonEmpty.map_entry() //  [R2, R3]
         { []
         }
     {offset
       cdszf: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdszj; else goto cdszi;
       cdszj: // global
           HpAlloc = 88;
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.map_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdszi: // global
           I64[Hp - 80] = sat_sdrVD_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R3;
           I64[Hp - 48] = sat_sdrVz_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 80;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.map_info" {
     Data.List.NonEmpty.map_info:
         const Data.List.NonEmpty.map_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.74994297 UTC

[section ""data" . Data.List.NonEmpty.some1_closure" {
     Data.List.NonEmpty.some1_closure:
         const Data.List.NonEmpty.some1_info;
 },
 sat_sdrVH_entry() //  [R1]
         { []
         }
     {offset
       cdszS: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdszT; else goto cdszU;
       cdszT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdszU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Base.many_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdrVH_info" {
     sat_sdrVH_info:
         const sat_sdrVH_entry;
         const 2;
         const 18;
 },
 Data.List.NonEmpty.some1_entry() //  [R2, R3]
         { []
         }
     {offset
       cdszX: // global
           _sdrVF::P64 = R3;
           _sdrVE::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto cdszY; else goto cdszZ;
       cdszZ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdsA1; else goto cdsA0;
       cdsA1: // global
           HpAlloc = 32;
           goto cdszY;
       cdszY: // global
           R3 = _sdrVF::P64;
           R2 = _sdrVE::P64;
           R1 = Data.List.NonEmpty.some1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdsA0: // global
           I64[Hp - 24] = sat_sdrVH_info;
           P64[Hp - 8] = _sdrVE::P64;
           P64[Hp] = _sdrVF::P64;
           I64[Sp - 24] = block_cdszV_info;
           R2 = _sdrVE::P64;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = _sdrVF::P64;
           Sp = Sp - 24;
           call GHC.Base.$p1Alternative_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.some1_info" {
     Data.List.NonEmpty.some1_info:
         const Data.List.NonEmpty.some1_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cdszV() //  [R1]
         { []
         }
     {offset
       cdszV: // global
           R2 = R1;
           I64[Sp - 8] = stg_ap_ppp_info;
           P64[Sp] = GHC.Base.:|_closure+2;
           _cdszO::P64 = P64[Sp + 8];
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = _cdszO::P64;
           Sp = Sp - 8;
           call GHC.Base.liftA2_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdszV_info" {
     block_cdszV_info:
         const _cdszV;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.759327587 UTC

[section ""data" . Data.List.NonEmpty.intersperse_closure" {
     Data.List.NonEmpty.intersperse_closure:
         const Data.List.NonEmpty.intersperse_info;
 },
 sat_sdrVU_entry() //  [R1]
         { []
         }
     {offset
       cdsAO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdsAP; else goto cdsAQ;
       cdsAP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdsAQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.OldList.prependToAll_entry(R3,
                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdrVU_info" {
     sat_sdrVU_info:
         const sat_sdrVU_entry;
         const 2;
         const 18;
 },
 sat_sdrVW_entry() //  [R1]
         { []
         }
     {offset
       cdsAR: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdsAS; else goto cdsAT;
       cdsAS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdsAT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cdsAz_info;
           _sdrVI::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _sdrVI::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udsB7; else goto cdsAA;
       udsB7: // global
           call _cdsAz(R1) args: 0, res: 0, upd: 0;
       cdsAA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdrVW_info" {
     sat_sdrVW_info:
         const sat_sdrVW_entry;
         const 2;
         const 18;
 },
 _cdsAz() //  [R1]
         { []
         }
     {offset
       cdsAz: // global
           I64[Sp] = block_cdsAE_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto udsB6; else goto cdsAF;
       udsB6: // global
           call _cdsAE(R1) args: 0, res: 0, upd: 0;
       cdsAF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cdsAz_info" {
     block_cdsAz_info:
         const _cdsAz;
         const 1;
         const 30;
 },
 _cdsAE() //  [R1]
         { []
         }
     {offset
       cdsAE: // global
           if (R1 & 7 == 1) goto cdsAY; else goto cdsB1;
       cdsAY: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdsB1: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cdsB4; else goto cdsB3;
       cdsB4: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdsB3: // global
           _sdrVS::P64 = P64[R1 + 6];
           _sdrVT::P64 = P64[R1 + 14];
           I64[Hp - 72] = sat_sdrVU_info;
           _sdrVI::P64 = P64[Sp + 8];
           P64[Hp - 56] = _sdrVI::P64;
           P64[Hp - 48] = _sdrVT::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = _sdrVS::P64;
           P64[Hp - 24] = Hp - 72;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _sdrVI::P64;
           P64[Hp] = Hp - 38;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdsAE_info" {
     block_cdsAE_info:
         const _cdsAE;
         const 1;
         const 30;
 },
 Data.List.NonEmpty.intersperse_entry() //  [R2, R3]
         { []
         }
     {offset
       cdsBa: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cdsBe; else goto cdsBd;
       cdsBe: // global
           HpAlloc = 80;
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.intersperse_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdsBd: // global
           I64[Hp - 72] = sat_sdrVW_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.intersperse_info" {
     Data.List.NonEmpty.intersperse_info:
         const Data.List.NonEmpty.intersperse_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.771519128 UTC

[section ""data" . Data.List.NonEmpty.iterate_closure" {
     Data.List.NonEmpty.iterate_closure:
         const Data.List.NonEmpty.iterate_info;
 },
 sat_sdrW3_entry() //  [R1]
         { []
         }
     {offset
       cdsC5: // global
           _sdrW3::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cdsC6; else goto cdsC7;
       cdsC7: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdsC9; else goto cdsC8;
       cdsC9: // global
           HpAlloc = 32;
           goto cdsC6;
       cdsC6: // global
           R1 = _sdrW3::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdsC8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdrW3::P64;
           _sdrVX::P64 = P64[_sdrW3::P64 + 16];
           _sdrVY::P64 = P64[_sdrW3::P64 + 24];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sdrVX::P64;
           P64[Hp] = _sdrVY::P64;
           I64[Sp - 24] = block_cdsC2_info;
           R3 = Hp - 24;
           R2 = _sdrVX::P64;
           Sp = Sp - 24;
           call GHC.List.$witerate_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdrW3_info" {
     sat_sdrW3_info:
         const sat_sdrW3_entry;
         const 2;
         const 18;
 },
 _cdsC2() //  [R1, R2]
         { []
         }
     {offset
       cdsC2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdsCc; else goto cdsCb;
       cdsCc: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cdsCb: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdsC2_info" {
     block_cdsC2_info:
         const _cdsC2;
         const 0;
         const 30;
 },
 Data.List.NonEmpty.iterate_entry() //  [R2, R3]
         { []
         }
     {offset
       cdsCe: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdsCi; else goto cdsCh;
       cdsCi: // global
           HpAlloc = 56;
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.iterate_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdsCh: // global
           I64[Hp - 48] = sat_sdrW3_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 48;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.iterate_info" {
     Data.List.NonEmpty.iterate_info:
         const Data.List.NonEmpty.iterate_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.779581975 UTC

[section ""data" . Data.List.NonEmpty.repeat_closure" {
     Data.List.NonEmpty.repeat_closure:
         const Data.List.NonEmpty.repeat_info;
 },
 sat_sdrW5_entry() //  [R1]
         { []
         }
     {offset
       cdsCL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdsCM; else goto cdsCN;
       cdsCM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdsCN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.List.repeat_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdrW5_info" {
     sat_sdrW5_info:
         const sat_sdrW5_entry;
         const 1;
         const 16;
 },
 Data.List.NonEmpty.repeat_entry() //  [R2]
         { []
         }
     {offset
       cdsCP: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdsCT; else goto cdsCS;
       cdsCT: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = Data.List.NonEmpty.repeat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdsCS: // global
           I64[Hp - 40] = sat_sdrW5_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.repeat_info" {
     Data.List.NonEmpty.repeat_info:
         const Data.List.NonEmpty.repeat_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.789213395 UTC

[section ""data" . Data.List.NonEmpty.groupBy_$sgroupBy_closure" {
     Data.List.NonEmpty.groupBy_$sgroupBy_closure:
         const Data.List.NonEmpty.groupBy_$sgroupBy_info;
 },
 ds_sdrWb_entry() //  [R1]
         { []
         }
     {offset
       cdsDp: // global
           _sdrWb::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cdsDq; else goto cdsDr;
       cdsDr: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdsDt; else goto cdsDs;
       cdsDt: // global
           HpAlloc = 32;
           goto cdsDq;
       cdsDq: // global
           R1 = _sdrWb::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdsDs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdrWb::P64;
           _sdrW6::P64 = P64[_sdrWb::P64 + 16];
           _sdrW9::P64 = P64[_sdrWb::P64 + 24];
           _sdrWa::P64 = P64[_sdrWb::P64 + 32];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sdrW6::P64;
           P64[Hp] = _sdrW9::P64;
           I64[Sp - 24] = block_cdsDm_info;
           R3 = _sdrWa::P64;
           R2 = Hp - 24;
           Sp = Sp - 24;
           call GHC.List.$wspan_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds_sdrWb_info" {
     ds_sdrWb_info:
         const ds_sdrWb_entry;
         const 3;
         const 15;
 },
 _cdsDm() //  [R1, R2]
         { []
         }
     {offset
       cdsDm: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdsDw; else goto cdsDv;
       cdsDw: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cdsDv: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdsDm_info" {
     block_cdsDm_info:
         const _cdsDm;
         const 0;
         const 30;
 },
 sat_sdrWo_entry() //  [R1]
         { []
         }
     {offset
       cdsDE: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdsDF; else goto cdsDG;
       cdsDF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdsDG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cdsDB_info;
           _sdrW6::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _sdrW6::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udsDK; else goto cdsDC;
       udsDK: // global
           call _cdsDB(R1) args: 0, res: 0, upd: 0;
       cdsDC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdrWo_info" {
     sat_sdrWo_info:
         const sat_sdrWo_entry;
         const 2;
         const 18;
 },
 _cdsDB() //  [R1]
         { []
         }
     {offset
       cdsDB: // global
           R3 = P64[R1 + 15];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.List.NonEmpty.groupBy_$sgroupBy_entry(R3,
                                                           R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdsDB_info" {
     block_cdsDB_info:
         const _cdsDB;
         const 1;
         const 30;
 },
 Data.List.NonEmpty.groupBy_$sgroupBy_entry() //  [R2, R3]
         { []
         }
     {offset
       cdsDP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdsDQ; else goto cdsDR;
       cdsDQ: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.groupBy_$sgroupBy_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdsDR: // global
           I64[Sp - 16] = block_cdsDb_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udsE0; else goto cdsDc;
       udsE0: // global
           call _cdsDb(R1) args: 0, res: 0, upd: 0;
       cdsDc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.groupBy_$sgroupBy_info" {
     Data.List.NonEmpty.groupBy_$sgroupBy_info:
         const Data.List.NonEmpty.groupBy_$sgroupBy_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cdsDb() //  [R1]
         { []
         }
     {offset
       cdsDb: // global
           if (R1 & 7 == 1) goto cdsDM; else goto cdsDN;
       cdsDM: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdsDN: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto cdsDZ; else goto cdsDY;
       cdsDZ: // global
           HpAlloc = 144;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdsDY: // global
           _sdrW9::P64 = P64[R1 + 6];
           _sdrWa::P64 = P64[R1 + 14];
           I64[Hp - 136] = ds_sdrWb_info;
           _sdrW6::P64 = P64[Sp + 8];
           P64[Hp - 120] = _sdrW6::P64;
           P64[Hp - 112] = _sdrW9::P64;
           P64[Hp - 104] = _sdrWa::P64;
           I64[Hp - 96] = sat_sdrWo_info;
           P64[Hp - 80] = _sdrW6::P64;
           _cdsDh::P64 = Hp - 136;
           P64[Hp - 72] = _cdsDh::P64;
           I64[Hp - 64] = stg_sel_0_upd_info;
           P64[Hp - 48] = _cdsDh::P64;
           I64[Hp - 40] = GHC.Base.:|_con_info;
           P64[Hp - 32] = _sdrW9::P64;
           P64[Hp - 24] = Hp - 64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdsDb_info" {
     block_cdsDb_info:
         const _cdsDb;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.804713528 UTC

[section ""data" . Data.List.NonEmpty.groupBy_closure" {
     Data.List.NonEmpty.groupBy_closure:
         const Data.List.NonEmpty.groupBy_info;
 },
 ds_sdrWv_entry() //  [R1]
         { []
         }
     {offset
       cdsF1: // global
           _sdrWv::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cdsF2; else goto cdsF3;
       cdsF3: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdsF5; else goto cdsF4;
       cdsF5: // global
           HpAlloc = 32;
           goto cdsF2;
       cdsF2: // global
           R1 = _sdrWv::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdsF4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdrWv::P64;
           _sdrWq::P64 = P64[_sdrWv::P64 + 16];
           _sdrWt::P64 = P64[_sdrWv::P64 + 24];
           _sdrWu::P64 = P64[_sdrWv::P64 + 32];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sdrWq::P64;
           P64[Hp] = _sdrWt::P64;
           I64[Sp - 24] = block_cdsEY_info;
           R3 = _sdrWu::P64;
           R2 = Hp - 24;
           Sp = Sp - 24;
           call GHC.List.$wspan_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds_sdrWv_info" {
     ds_sdrWv_info:
         const ds_sdrWv_entry;
         const 3;
         const 15;
 },
 _cdsEY() //  [R1, R2]
         { []
         }
     {offset
       cdsEY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdsF8; else goto cdsF7;
       cdsF8: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cdsF7: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdsEY_info" {
     block_cdsEY_info:
         const _cdsEY;
         const 0;
         const 30;
 },
 sat_sdrWI_entry() //  [R1]
         { []
         }
     {offset
       cdsFg: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdsFh; else goto cdsFi;
       cdsFh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdsFi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cdsFd_info;
           _sdrWq::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _sdrWq::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udsFm; else goto cdsFe;
       udsFm: // global
           call _cdsFd(R1) args: 0, res: 0, upd: 0;
       cdsFe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdrWI_info" {
     sat_sdrWI_info:
         const sat_sdrWI_entry;
         const 2;
         const 18;
 },
 _cdsFd() //  [R1]
         { []
         }
     {offset
       cdsFd: // global
           R3 = P64[R1 + 15];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.List.NonEmpty.groupBy_$sgroupBy_entry(R3,
                                                           R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdsFd_info" {
     block_cdsFd_info:
         const _cdsFd;
         const 1;
         const 30;
 },
 Data.List.NonEmpty.groupBy_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdsFr: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdsFs; else goto cdsFt;
       cdsFs: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.groupBy_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdsFt: // global
           I64[Sp - 16] = block_cdsEO_info;
           R2 = R2;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = R4;
           P64[Sp - 8] = R3;
           Sp = Sp - 32;
           call Data.Foldable.toList_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.groupBy_info" {
     Data.List.NonEmpty.groupBy_info:
         const Data.List.NonEmpty.groupBy_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cdsEO() //  [R1]
         { []
         }
     {offset
       cdsEO: // global
           if (R1 & 7 == 1) goto cdsFo; else goto cdsFp;
       cdsFo: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdsFp: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto cdsFB; else goto cdsFA;
       cdsFB: // global
           HpAlloc = 144;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdsFA: // global
           _sdrWt::P64 = P64[R1 + 6];
           _sdrWu::P64 = P64[R1 + 14];
           I64[Hp - 136] = ds_sdrWv_info;
           _sdrWq::P64 = P64[Sp + 8];
           P64[Hp - 120] = _sdrWq::P64;
           P64[Hp - 112] = _sdrWt::P64;
           P64[Hp - 104] = _sdrWu::P64;
           I64[Hp - 96] = sat_sdrWI_info;
           P64[Hp - 80] = _sdrWq::P64;
           _cdsET::P64 = Hp - 136;
           P64[Hp - 72] = _cdsET::P64;
           I64[Hp - 64] = stg_sel_0_upd_info;
           P64[Hp - 48] = _cdsET::P64;
           I64[Hp - 40] = GHC.Base.:|_con_info;
           P64[Hp - 32] = _sdrWt::P64;
           P64[Hp - 24] = Hp - 64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdsEO_info" {
     block_cdsEO_info:
         const _cdsEO;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.821118639 UTC

[section ""data" . Data.List.NonEmpty.groupWith_closure" {
     Data.List.NonEmpty.groupWith_closure:
         const Data.List.NonEmpty.groupWith_info;
 },
 eq0_sdrWQ_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdsGB: // global
           _sdrWS::P64 = R3;
           _sdrWR::P64 = R2;
           _sdrWQ::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cdsGC; else goto cdsGD;
       cdsGD: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdsGF; else goto cdsGE;
       cdsGF: // global
           HpAlloc = 64;
           goto cdsGC;
       cdsGC: // global
           R3 = _sdrWS::P64;
           R2 = _sdrWR::P64;
           R1 = _sdrWQ::P64;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdsGE: // global
           _sdrWK::P64 = P64[_sdrWQ::P64 + 6];
           _sdrWL::P64 = P64[_sdrWQ::P64 + 14];
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = _sdrWL::P64;
           P64[Hp - 32] = _sdrWS::P64;
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sdrWL::P64;
           P64[Hp] = _sdrWR::P64;
           R2 = _sdrWK::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = Hp - 56;
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . eq0_sdrWQ_info" {
     eq0_sdrWQ_info:
         const eq0_sdrWQ_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 sat_sdrWW_entry() //  [R1, R2]
         { []
         }
     {offset
       cdsGP: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           call eq0_sdrWQ_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdrWW_info" {
     sat_sdrWW_info:
         const sat_sdrWW_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 ds_sdrWV_entry() //  [R1]
         { []
         }
     {offset
       cdsGV: // global
           _sdrWV::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cdsGW; else goto cdsGX;
       cdsGX: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdsGZ; else goto cdsGY;
       cdsGZ: // global
           HpAlloc = 24;
           goto cdsGW;
       cdsGW: // global
           R1 = _sdrWV::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdsGY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdrWV::P64;
           _sdrWO::P64 = P64[_sdrWV::P64 + 16];
           _sdrWP::P64 = P64[_sdrWV::P64 + 24];
           _sdrWQ::P64 = P64[_sdrWV::P64 + 32];
           I64[Hp - 16] = sat_sdrWW_info;
           P64[Hp - 8] = _sdrWO::P64;
           P64[Hp] = _sdrWQ::P64;
           I64[Sp - 24] = block_cdsGS_info;
           R3 = _sdrWP::P64;
           R2 = Hp - 15;
           Sp = Sp - 24;
           call GHC.List.$wspan_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds_sdrWV_info" {
     ds_sdrWV_info:
         const ds_sdrWV_entry;
         const 3;
         const 15;
 },
 _cdsGS() //  [R1, R2]
         { []
         }
     {offset
       cdsGS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdsH2; else goto cdsH1;
       cdsH2: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cdsH1: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdsGS_info" {
     block_cdsGS_info:
         const _cdsGS;
         const 0;
         const 30;
 },
 sat_sdrX8_entry() //  [R1]
         { []
         }
     {offset
       cdsHa: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdsHb; else goto cdsHc;
       cdsHb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdsHc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cdsH7_info;
           _sdrWQ::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _sdrWQ::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udsHg; else goto cdsH8;
       udsHg: // global
           call _cdsH7(R1) args: 0, res: 0, upd: 0;
       cdsH8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdrX8_info" {
     sat_sdrX8_info:
         const sat_sdrX8_entry;
         const 2;
         const 18;
 },
 _cdsH7() //  [R1]
         { []
         }
     {offset
       cdsH7: // global
           R3 = P64[R1 + 15];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.List.NonEmpty.groupBy_$sgroupBy_entry(R3,
                                                           R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdsH7_info" {
     block_cdsH7_info:
         const _cdsH7;
         const 1;
         const 30;
 },
 Data.List.NonEmpty.groupWith_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cdsHl: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdsHm; else goto cdsHn;
       cdsHm: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.groupWith_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdsHn: // global
           I64[Sp - 24] = block_cdsGp_info;
           R2 = R2;
           I64[Sp - 40] = stg_ap_p_info;
           P64[Sp - 32] = R5;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 40;
           call Data.Foldable.toList_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.groupWith_info" {
     Data.List.NonEmpty.groupWith_info:
         const Data.List.NonEmpty.groupWith_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cdsGp() //  [R1]
         { []
         }
     {offset
       cdsGp: // global
           if (R1 & 7 == 1) goto cdsHi; else goto cdsHj;
       cdsHi: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdsHj: // global
           Hp = Hp + 168;
           if (Hp > HpLim) (likely: False) goto cdsHv; else goto cdsHu;
       cdsHv: // global
           HpAlloc = 168;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdsHu: // global
           _sdrWO::P64 = P64[R1 + 6];
           _sdrWP::P64 = P64[R1 + 14];
           I64[Hp - 160] = eq0_sdrWQ_info;
           P64[Hp - 152] = P64[Sp + 8];
           P64[Hp - 144] = P64[Sp + 16];
           I64[Hp - 136] = ds_sdrWV_info;
           P64[Hp - 120] = _sdrWO::P64;
           P64[Hp - 112] = _sdrWP::P64;
           _cdsGu::P64 = Hp - 158;
           P64[Hp - 104] = _cdsGu::P64;
           I64[Hp - 96] = sat_sdrX8_info;
           P64[Hp - 80] = _cdsGu::P64;
           _cdsGG::P64 = Hp - 136;
           P64[Hp - 72] = _cdsGG::P64;
           I64[Hp - 64] = stg_sel_0_upd_info;
           P64[Hp - 48] = _cdsGG::P64;
           I64[Hp - 40] = GHC.Base.:|_con_info;
           P64[Hp - 32] = _sdrWO::P64;
           P64[Hp - 24] = Hp - 64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdsGp_info" {
     block_cdsGp_info:
         const _cdsGp;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.840818122 UTC

[section ""data" . Data.List.NonEmpty.group_closure" {
     Data.List.NonEmpty.group_closure:
         const Data.List.NonEmpty.group_info;
 },
 sat_sdrXc_entry() //  [R1]
         { []
         }
     {offset
       cdsIC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdsID; else goto cdsIE;
       cdsID: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdsIE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdrXc_info" {
     sat_sdrXc_info:
         const sat_sdrXc_entry;
         const 1;
         const 16;
 },
 Data.List.NonEmpty.group_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdsIF: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdsIJ; else goto cdsII;
       cdsIJ: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.group_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdsII: // global
           I64[Hp - 16] = sat_sdrXc_info;
           P64[Hp] = R3;
           R4 = R4;
           R3 = Hp - 16;
           R2 = R2;
           call Data.List.NonEmpty.groupBy_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.group_info" {
     Data.List.NonEmpty.group_info:
         const Data.List.NonEmpty.group_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.84765626 UTC

[section ""data" . Data.List.NonEmpty.isPrefixOf_closure" {
     Data.List.NonEmpty.isPrefixOf_closure:
         const Data.List.NonEmpty.isPrefixOf_info;
 },
 Data.List.NonEmpty.isPrefixOf_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdsJ5: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cdsJ6; else goto cdsJ7;
       cdsJ6: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.isPrefixOf_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdsJ7: // global
           I64[Sp - 24] = block_cdsIY_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udsJx; else goto cdsIZ;
       udsJx: // global
           call _cdsIY(R1) args: 0, res: 0, upd: 0;
       cdsIZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.isPrefixOf_info" {
     Data.List.NonEmpty.isPrefixOf_info:
         const Data.List.NonEmpty.isPrefixOf_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cdsIY() //  [R1]
         { []
         }
     {offset
       cdsIY: // global
           if (R1 & 7 == 1) goto cdsJ2; else goto cdsJ3;
       cdsJ2: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdsJ3: // global
           I64[Sp - 8] = block_cdsJd_info;
           _sdrXh::P64 = P64[R1 + 6];
           _sdrXi::P64 = P64[R1 + 14];
           R1 = P64[Sp + 16];
           P64[Sp] = _sdrXi::P64;
           P64[Sp + 16] = _sdrXh::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udsJw; else goto cdsJf;
       udsJw: // global
           call _cdsJd(R1) args: 0, res: 0, upd: 0;
       cdsJf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdsIY_info" {
     block_cdsIY_info:
         const _cdsIY;
         const 2;
         const 30;
 },
 _cdsJd() //  [R1]
         { []
         }
     {offset
       cdsJd: // global
           I64[Sp] = block_cdsJj_info;
           R2 = P64[Sp + 16];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 24];
           P64[Sp - 8] = P64[R1 + 7];
           P64[Sp + 24] = P64[R1 + 15];
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdsJd_info" {
     block_cdsJd_info:
         const _cdsJd;
         const 3;
         const 30;
 },
 _cdsJj() //  [R1]
         { []
         }
     {offset
       cdsJj: // global
           if (R1 & 7 == 1) goto cdsJq; else goto cdsJu;
       cdsJq: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdsJu: // global
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 32;
           call Data.OldList.isPrefixOf_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdsJj_info" {
     block_cdsJj_info:
         const _cdsJj;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.856133939 UTC

[section ""cstring" . lvl1_rdpwu_bytes" {
     lvl1_rdpwu_bytes:
         I8[] [78,111,110,69,109,112,116,121,46,33,33,32,110,101,103,97,116,105,118,101,32,97,114,103,117,109,101,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.858668602 UTC

[section ""data" . Data.List.NonEmpty.!!1_closure" {
     Data.List.NonEmpty.!!1_closure:
         const Data.List.NonEmpty.!!1_info;
         const 0;
         const 0;
         const 0;
 },
 Data.List.NonEmpty.!!1_entry() //  [R1]
         { []
         }
     {offset
       cdsKc: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdsKd; else goto cdsKe;
       cdsKd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdsKe: // global
           (_cdsK7::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdsK7::I64 == 0) goto cdsK9; else goto cdsK8;
       cdsK9: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdsK8: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdsK7::I64;
           I64[Sp - 24] = block_cdsKa_info;
           R2 = lvl1_rdpwu_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.!!1_info" {
     Data.List.NonEmpty.!!1_info:
         const Data.List.NonEmpty.!!1_entry;
         const 0;
         const 4294967317;
         const Sds6G_srt+16;
 },
 _cdsKa() //  [R1]
         { []
         }
     {offset
       cdsKa: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdsKa_info" {
     block_cdsKa_info:
         const _cdsKa;
         const 0;
         const 4294967326;
         const Sds6G_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.864198647 UTC

[section ""data" . Data.List.NonEmpty.$w!!_closure" {
     Data.List.NonEmpty.$w!!_closure:
         const Data.List.NonEmpty.$w!!_info;
         const 0;
 },
 Data.List.NonEmpty.$w!!_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdsKC: // global
           if (R4 == 0) goto cdsKB; else goto cdsKA;
       cdsKB: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cdsKA: // global
           if (%MO_S_Le_W64(R4, 0)) goto cdsKJ; else goto cdsKK;
       cdsKJ: // global
           R1 = Data.List.NonEmpty.!!1_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cdsKK: // global
           _sdrXp::P64 = R3;
           R3 = R4 - 1;
           R2 = _sdrXp::P64;
           call GHC.List.$w!!_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.$w!!_info" {
     Data.List.NonEmpty.$w!!_info:
         const Data.List.NonEmpty.$w!!_entry;
         const 0;
         const 12884901902;
         const 12884901910;
         const Sds6G_srt+136;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.869111213 UTC

[section ""data" . Data.List.NonEmpty.!!_closure" {
     Data.List.NonEmpty.!!_closure:
         const Data.List.NonEmpty.!!_info;
         const 0;
 },
 Data.List.NonEmpty.!!_entry() //  [R2, R3]
         { []
         }
     {offset
       cdsKZ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdsL3; else goto cdsL4;
       cdsL3: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.!!_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdsL4: // global
           I64[Sp - 16] = block_cdsKW_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udsLc; else goto cdsKX;
       udsLc: // global
           call _cdsKW(R1) args: 0, res: 0, upd: 0;
       cdsKX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.!!_info" {
     Data.List.NonEmpty.!!_info:
         const Data.List.NonEmpty.!!_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const Sds6G_srt+152;
 },
 _cdsKW() //  [R1]
         { []
         }
     {offset
       cdsKW: // global
           I64[Sp - 8] = block_cdsL2_info;
           _sdrXx::P64 = P64[R1 + 7];
           _sdrXy::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _sdrXy::P64;
           P64[Sp + 8] = _sdrXx::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udsLb; else goto cdsL6;
       udsLb: // global
           call _cdsL2(R1) args: 0, res: 0, upd: 0;
       cdsL6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdsKW_info" {
     block_cdsKW_info:
         const _cdsKW;
         const 1;
         const 4294967326;
         const Sds6G_srt+160;
 },
 _cdsL2() //  [R1]
         { []
         }
     {offset
       cdsL2: // global
           R4 = I64[R1 + 7];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call Data.List.NonEmpty.$w!!_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdsL2_info" {
     block_cdsL2_info:
         const _cdsL2;
         const 2;
         const 4294967326;
         const Sds6G_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.878394146 UTC

[section ""data" . Data.List.NonEmpty.zip_closure" {
     Data.List.NonEmpty.zip_closure:
         const Data.List.NonEmpty.zip_info;
 },
 sat_sdrXT_entry() //  [R1]
         { []
         }
     {offset
       cdsLD: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdsLH; else goto cdsLI;
       cdsLH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdsLI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cdsLA_info;
           _sdrXC::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sdrXC::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udsLM; else goto cdsLB;
       udsLM: // global
           call _cdsLA(R1) args: 0, res: 0, upd: 0;
       cdsLB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdrXT_info" {
     sat_sdrXT_info:
         const sat_sdrXT_entry;
         const 2;
         const 18;
 },
 _cdsLA() //  [R1]
         { []
         }
     {offset
       cdsLA: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdsLL; else goto cdsLK;
       cdsLL: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdsLK: // global
           _sdrXO::P64 = P64[R1 + 15];
           I64[Hp - 16] = stg_sel_1_noupd_info;
           P64[Hp] = P64[Sp + 8];
           R3 = Hp - 16;
           R2 = _sdrXO::P64;
           Sp = Sp + 16;
           call GHC.List.zip_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdsLA_info" {
     block_cdsLA_info:
         const _cdsLA;
         const 1;
         const 30;
 },
 Data.List.NonEmpty.zip_entry() //  [R2, R3]
         { []
         }
     {offset
       cdsLR: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto cdsLV; else goto cdsLU;
       cdsLV: // global
           HpAlloc = 128;
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.zip_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdsLU: // global
           I64[Hp - 120] = sat_sdrXT_info;
           P64[Hp - 104] = R2;
           P64[Hp - 96] = R3;
           I64[Hp - 88] = stg_sel_0_upd_info;
           P64[Hp - 72] = R3;
           I64[Hp - 64] = stg_sel_0_upd_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = Hp - 64;
           P64[Hp - 24] = Hp - 88;
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 120;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.zip_info" {
     Data.List.NonEmpty.zip_info:
         const Data.List.NonEmpty.zip_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.887690983 UTC

[section ""data" . Data.List.NonEmpty.zipWith_closure" {
     Data.List.NonEmpty.zipWith_closure:
         const Data.List.NonEmpty.zipWith_info;
 },
 sat_sdrYd_entry() //  [R1]
         { []
         }
     {offset
       cdsMx: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdsMB; else goto cdsMC;
       cdsMB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdsMC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cdsMu_info;
           _sdrXU::P64 = P64[R1 + 16];
           _sdrXW::P64 = P64[R1 + 32];
           R1 = P64[R1 + 24];
           P64[Sp - 32] = _sdrXU::P64;
           P64[Sp - 24] = _sdrXW::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto udsMG; else goto cdsMv;
       udsMG: // global
           call _cdsMu(R1) args: 0, res: 0, upd: 0;
       cdsMv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdrYd_info" {
     sat_sdrYd_info:
         const sat_sdrYd_entry;
         const 3;
         const 15;
 },
 _cdsMu() //  [R1]
         { []
         }
     {offset
       cdsMu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdsMF; else goto cdsME;
       cdsMF: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdsME: // global
           _sdrY8::P64 = P64[R1 + 15];
           I64[Hp - 16] = stg_sel_1_noupd_info;
           P64[Hp] = P64[Sp + 16];
           R4 = Hp - 16;
           R3 = _sdrY8::P64;
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.List.zipWith_entry(R4, R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdsMu_info" {
     block_cdsMu_info:
         const _cdsMu;
         const 2;
         const 30;
 },
 sat_sdrY5_entry() //  [R1]
         { []
         }
     {offset
       cdsMN: // global
           _sdrY5::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdsMO; else goto cdsMP;
       cdsMP: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdsMR; else goto cdsMQ;
       cdsMR: // global
           HpAlloc = 48;
           goto cdsMO;
       cdsMO: // global
           R1 = _sdrY5::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdsMQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdrY5::P64;
           _sdrXU::P64 = P64[_sdrY5::P64 + 16];
           _sdrXV::P64 = P64[_sdrY5::P64 + 24];
           _sdrXW::P64 = P64[_sdrY5::P64 + 32];
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _sdrXW::P64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _sdrXV::P64;
           R3 = Hp - 40;
           R2 = Hp - 16;
           R1 = _sdrXU::P64;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdrY5_info" {
     sat_sdrY5_info:
         const sat_sdrY5_entry;
         const 3;
         const 15;
 },
 Data.List.NonEmpty.zipWith_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdsMT: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cdsMX; else goto cdsMW;
       cdsMX: // global
           HpAlloc = 104;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.zipWith_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdsMW: // global
           I64[Hp - 96] = sat_sdrYd_info;
           P64[Hp - 80] = R2;
           P64[Hp - 72] = R3;
           P64[Hp - 64] = R4;
           I64[Hp - 56] = sat_sdrY5_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = Hp - 56;
           P64[Hp] = Hp - 96;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.zipWith_info" {
     Data.List.NonEmpty.zipWith_info:
         const Data.List.NonEmpty.zipWith_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.898559177 UTC

[section ""data" . Data.List.NonEmpty.unzip_closure" {
     Data.List.NonEmpty.unzip_closure:
         const Data.List.NonEmpty.unzip_info;
 },
 sat_sdrYh_entry() //  [R1]
         { []
         }
     {offset
       cdsNz: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdsNA; else goto cdsNB;
       cdsNA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdsNB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Tuple.snd_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Base.fmap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdrYh_info" {
     sat_sdrYh_info:
         const sat_sdrYh_entry;
         const 2;
         const 18;
 },
 sat_sdrYg_entry() //  [R1]
         { []
         }
     {offset
       cdsNG: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdsNH; else goto cdsNI;
       cdsNH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdsNI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Data.Tuple.fst_closure+1;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Base.fmap_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdrYg_info" {
     sat_sdrYg_info:
         const sat_sdrYg_entry;
         const 2;
         const 18;
 },
 Data.List.NonEmpty.unzip_entry() //  [R2, R3]
         { []
         }
     {offset
       cdsNK: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cdsNO; else goto cdsNN;
       cdsNO: // global
           HpAlloc = 88;
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.unzip_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdsNN: // global
           I64[Hp - 80] = sat_sdrYh_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R3;
           I64[Hp - 48] = sat_sdrYg_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 80;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.unzip_info" {
     Data.List.NonEmpty.unzip_info:
         const Data.List.NonEmpty.unzip_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.908136649 UTC

[section ""data" . Data.List.NonEmpty.nubBy_closure" {
     Data.List.NonEmpty.nubBy_closure:
         const Data.List.NonEmpty.nubBy_info;
 },
 sat_sdrYp_entry() //  [R1, R2]
         { []
         }
     {offset
       cdsOF: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdsOG; else goto cdsOH;
       cdsOG: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdsOH: // global
           I64[Sp - 8] = block_cdsOz_info;
           R3 = R2;
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           Sp = Sp - 8;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdrYp_info" {
     sat_sdrYp_info:
         const sat_sdrYp_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cdsOz() //  [R1]
         { []
         }
     {offset
       cdsOz: // global
           if (R1 & 7 == 1) goto cdsOC; else goto cdsOD;
       cdsOC: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdsOD: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdsOz_info" {
     block_cdsOz_info:
         const _cdsOz;
         const 0;
         const 30;
 },
 sat_sdrYr_entry() //  [R1]
         { []
         }
     {offset
       cdsOQ: // global
           _sdrYr::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cdsOR; else goto cdsOS;
       cdsOS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdsOU; else goto cdsOT;
       cdsOU: // global
           HpAlloc = 24;
           goto cdsOR;
       cdsOR: // global
           R1 = _sdrYr::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdsOT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdrYr::P64;
           _sdrYi::P64 = P64[_sdrYr::P64 + 16];
           _sdrYl::P64 = P64[_sdrYr::P64 + 24];
           _sdrYm::P64 = P64[_sdrYr::P64 + 32];
           I64[Hp - 16] = sat_sdrYp_info;
           P64[Hp - 8] = _sdrYi::P64;
           P64[Hp] = _sdrYl::P64;
           I64[Sp - 32] = block_cdsOO_info;
           R3 = _sdrYm::P64;
           R2 = Hp - 15;
           P64[Sp - 24] = _sdrYi::P64;
           Sp = Sp - 32;
           call GHC.List.filter_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdrYr_info" {
     sat_sdrYr_info:
         const sat_sdrYr_entry;
         const 3;
         const 15;
 },
 _cdsOO() //  [R1]
         { []
         }
     {offset
       cdsOO: // global
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.OldList.nubBy_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdsOO_info" {
     block_cdsOO_info:
         const _cdsOO;
         const 1;
         const 30;
 },
 Data.List.NonEmpty.nubBy_entry() //  [R2, R3]
         { []
         }
     {offset
       cdsOY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdsP0; else goto cdsP1;
       cdsP0: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.nubBy_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdsP1: // global
           I64[Sp - 16] = block_cdsOl_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udsP5; else goto cdsOm;
       udsP5: // global
           call _cdsOl(R1) args: 0, res: 0, upd: 0;
       cdsOm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.nubBy_info" {
     Data.List.NonEmpty.nubBy_info:
         const Data.List.NonEmpty.nubBy_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cdsOl() //  [R1]
         { []
         }
     {offset
       cdsOl: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdsP4; else goto cdsP3;
       cdsP4: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdsP3: // global
           _sdrYl::P64 = P64[R1 + 7];
           _sdrYm::P64 = P64[R1 + 15];
           I64[Hp - 56] = sat_sdrYr_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = _sdrYl::P64;
           P64[Hp - 24] = _sdrYm::P64;
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = _sdrYl::P64;
           P64[Hp] = Hp - 56;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdsOl_info" {
     block_cdsOl_info:
         const _cdsOl;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.923420673 UTC

[section ""data" . Data.List.NonEmpty.nub_closure" {
     Data.List.NonEmpty.nub_closure:
         const Data.List.NonEmpty.nub_info;
 },
 w_sdrYx_entry() //  [R1]
         { []
         }
     {offset
       cdsQ0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdsQ1; else goto cdsQ2;
       cdsQ1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdsQ2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . w_sdrYx_info" {
     w_sdrYx_info:
         const w_sdrYx_entry;
         const 1;
         const 16;
 },
 sat_sdrYA_entry() //  [R1, R2]
         { []
         }
     {offset
       cdsQe: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdsQf; else goto cdsQg;
       cdsQf: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdsQg: // global
           I64[Sp - 8] = block_cdsQ8_info;
           R3 = R2;
           R2 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           Sp = Sp - 8;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdrYA_info" {
     sat_sdrYA_info:
         const sat_sdrYA_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cdsQ8() //  [R1]
         { []
         }
     {offset
       cdsQ8: // global
           if (R1 & 7 == 1) goto cdsQb; else goto cdsQc;
       cdsQb: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdsQc: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdsQ8_info" {
     block_cdsQ8_info:
         const _cdsQ8;
         const 0;
         const 30;
 },
 sat_sdrYC_entry() //  [R1]
         { []
         }
     {offset
       cdsQp: // global
           _sdrYC::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto cdsQq; else goto cdsQr;
       cdsQr: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdsQt; else goto cdsQs;
       cdsQt: // global
           HpAlloc = 48;
           goto cdsQq;
       cdsQq: // global
           R1 = _sdrYC::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdsQs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdrYC::P64;
           _sdrYs::P64 = P64[_sdrYC::P64 + 16];
           _sdrYv::P64 = P64[_sdrYC::P64 + 24];
           _sdrYw::P64 = P64[_sdrYC::P64 + 32];
           I64[Hp - 40] = w_sdrYx_info;
           P64[Hp - 24] = _sdrYs::P64;
           I64[Hp - 16] = sat_sdrYA_info;
           P64[Hp - 8] = _sdrYv::P64;
           _cdsPW::P64 = Hp - 40;
           P64[Hp] = _cdsPW::P64;
           I64[Sp - 32] = block_cdsQn_info;
           R3 = _sdrYw::P64;
           R2 = Hp - 15;
           P64[Sp - 24] = _cdsPW::P64;
           Sp = Sp - 32;
           call GHC.List.filter_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdrYC_info" {
     sat_sdrYC_info:
         const sat_sdrYC_entry;
         const 3;
         const 15;
 },
 _cdsQn() //  [R1]
         { []
         }
     {offset
       cdsQn: // global
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.OldList.nubBy_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdsQn_info" {
     block_cdsQn_info:
         const _cdsQn;
         const 1;
         const 30;
 },
 Data.List.NonEmpty.nub_entry() //  [R2, R3]
         { []
         }
     {offset
       cdsQx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdsQz; else goto cdsQA;
       cdsQz: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.nub_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdsQA: // global
           I64[Sp - 16] = block_cdsPN_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udsQE; else goto cdsPO;
       udsQE: // global
           call _cdsPN(R1) args: 0, res: 0, upd: 0;
       cdsPO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.nub_info" {
     Data.List.NonEmpty.nub_info:
         const Data.List.NonEmpty.nub_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cdsPN() //  [R1]
         { []
         }
     {offset
       cdsPN: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdsQD; else goto cdsQC;
       cdsQD: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdsQC: // global
           _sdrYv::P64 = P64[R1 + 7];
           _sdrYw::P64 = P64[R1 + 15];
           I64[Hp - 56] = sat_sdrYC_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = _sdrYv::P64;
           P64[Hp - 24] = _sdrYw::P64;
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = _sdrYv::P64;
           P64[Hp] = Hp - 56;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdsPN_info" {
     block_cdsPN_info:
         const _cdsPN;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.936946455 UTC

[section ""cstring" . Data.List.NonEmpty.$trModule4_bytes" {
     Data.List.NonEmpty.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.938681379 UTC

[section ""data" . Data.List.NonEmpty.$trModule3_closure" {
     Data.List.NonEmpty.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.List.NonEmpty.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.940378786 UTC

[section ""cstring" . Data.List.NonEmpty.$trModule2_bytes" {
     Data.List.NonEmpty.$trModule2_bytes:
         I8[] [68,97,116,97,46,76,105,115,116,46,78,111,110,69,109,112,116,121]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.942810597 UTC

[section ""data" . Data.List.NonEmpty.$trModule1_closure" {
     Data.List.NonEmpty.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Data.List.NonEmpty.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.944537003 UTC

[section ""data" . Data.List.NonEmpty.$trModule_closure" {
     Data.List.NonEmpty.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Data.List.NonEmpty.$trModule3_closure+1;
         const Data.List.NonEmpty.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.948536715 UTC

[section ""data" . Data.List.NonEmpty.groupAllWith_closure" {
     Data.List.NonEmpty.groupAllWith_closure:
         const Data.List.NonEmpty.groupAllWith_info;
         const 0;
 },
 sat_sdrYL_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdsRI: // global
           _sdrYI::P64 = R3;
           _sdrYH::P64 = R2;
           _sdrYL::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cdsRJ; else goto cdsRK;
       cdsRK: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdsRM; else goto cdsRL;
       cdsRM: // global
           HpAlloc = 64;
           goto cdsRJ;
       cdsRJ: // global
           R3 = _sdrYI::P64;
           R2 = _sdrYH::P64;
           R1 = _sdrYL::P64;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdsRL: // global
           _sdrYD::P64 = P64[_sdrYL::P64 + 6];
           _sdrYE::P64 = P64[_sdrYL::P64 + 14];
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = _sdrYE::P64;
           P64[Hp - 32] = _sdrYI::P64;
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sdrYE::P64;
           P64[Hp] = _sdrYH::P64;
           R2 = _sdrYD::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = Hp - 56;
           Sp = Sp - 24;
           call GHC.Classes.compare_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdrYL_info" {
     sat_sdrYL_info:
         const sat_sdrYL_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 sat_sdrYM_entry() //  [R1]
         { []
         }
     {offset
       cdsRN: // global
           _sdrYM::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdsRO; else goto cdsRP;
       cdsRP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdsRR; else goto cdsRQ;
       cdsRR: // global
           HpAlloc = 24;
           goto cdsRO;
       cdsRO: // global
           R1 = _sdrYM::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdsRQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdrYM::P64;
           _sdrYD::P64 = P64[_sdrYM::P64 + 16];
           _sdrYE::P64 = P64[_sdrYM::P64 + 24];
           _sdrYF::P64 = P64[_sdrYM::P64 + 32];
           I64[Hp - 16] = sat_sdrYL_info;
           P64[Hp - 8] = _sdrYD::P64;
           P64[Hp] = _sdrYE::P64;
           R3 = _sdrYF::P64;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call Data.OldList.sortBy_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdrYM_info" {
     sat_sdrYM_info:
         const sat_sdrYM_entry;
         const 3;
         const 15;
 },
 sat_sdrYG_entry() //  [R1]
         { []
         }
     {offset
       cdsRW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdsRX; else goto cdsRY;
       cdsRX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdsRY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.$p1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdrYG_info" {
     sat_sdrYG_info:
         const sat_sdrYG_entry;
         const 1;
         const 16;
 },
 Data.List.NonEmpty.groupAllWith_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdsRZ: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdsS3; else goto cdsS2;
       cdsS3: // global
           HpAlloc = 64;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.groupAllWith_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdsS2: // global
           I64[Hp - 56] = sat_sdrYM_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = sat_sdrYG_info;
           P64[Hp] = R2;
           R5 = Hp - 56;
           R4 = R3;
           R3 = Hp - 16;
           R2 = Data.Foldable.$fFoldable[]_closure;
           call Data.List.NonEmpty.groupWith_entry(R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.groupAllWith_info" {
     Data.List.NonEmpty.groupAllWith_info:
         const Data.List.NonEmpty.groupAllWith_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const Sds6G_srt+168;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.961212465 UTC

[section ""data" . Data.List.NonEmpty.groupBy1_closure" {
     Data.List.NonEmpty.groupBy1_closure:
         const Data.List.NonEmpty.groupBy1_info;
 },
 ds_sdrYS_entry() //  [R1]
         { []
         }
     {offset
       cdsSL: // global
           _sdrYS::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cdsSM; else goto cdsSN;
       cdsSN: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdsSP; else goto cdsSO;
       cdsSP: // global
           HpAlloc = 32;
           goto cdsSM;
       cdsSM: // global
           R1 = _sdrYS::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdsSO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdrYS::P64;
           _sdrYN::P64 = P64[_sdrYS::P64 + 16];
           _sdrYQ::P64 = P64[_sdrYS::P64 + 24];
           _sdrYR::P64 = P64[_sdrYS::P64 + 32];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sdrYN::P64;
           P64[Hp] = _sdrYQ::P64;
           I64[Sp - 24] = block_cdsSI_info;
           R3 = _sdrYR::P64;
           R2 = Hp - 24;
           Sp = Sp - 24;
           call GHC.List.$wspan_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds_sdrYS_info" {
     ds_sdrYS_info:
         const ds_sdrYS_entry;
         const 3;
         const 15;
 },
 _cdsSI() //  [R1, R2]
         { []
         }
     {offset
       cdsSI: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdsSS; else goto cdsSR;
       cdsSS: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cdsSR: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdsSI_info" {
     block_cdsSI_info:
         const _cdsSI;
         const 0;
         const 30;
 },
 sat_sdrZ5_entry() //  [R1]
         { []
         }
     {offset
       cdsT0: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdsT1; else goto cdsT2;
       cdsT1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdsT2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cdsSX_info;
           _sdrYN::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _sdrYN::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udsT6; else goto cdsSY;
       udsT6: // global
           call _cdsSX(R1) args: 0, res: 0, upd: 0;
       cdsSY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdrZ5_info" {
     sat_sdrZ5_info:
         const sat_sdrZ5_entry;
         const 2;
         const 18;
 },
 _cdsSX() //  [R1]
         { []
         }
     {offset
       cdsSX: // global
           R3 = P64[R1 + 15];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.List.NonEmpty.groupBy_$sgroupBy_entry(R3,
                                                           R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdsSX_info" {
     block_cdsSX_info:
         const _cdsSX;
         const 1;
         const 30;
 },
 Data.List.NonEmpty.groupBy1_entry() //  [R2, R3]
         { []
         }
     {offset
       cdsT7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdsTb; else goto cdsTc;
       cdsTb: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.groupBy1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdsTc: // global
           I64[Sp - 16] = block_cdsSy_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udsTg; else goto cdsSz;
       udsTg: // global
           call _cdsSy(R1) args: 0, res: 0, upd: 0;
       cdsSz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.groupBy1_info" {
     Data.List.NonEmpty.groupBy1_info:
         const Data.List.NonEmpty.groupBy1_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cdsSy() //  [R1]
         { []
         }
     {offset
       cdsSy: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto cdsTf; else goto cdsTe;
       cdsTf: // global
           HpAlloc = 144;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdsTe: // global
           _sdrYQ::P64 = P64[R1 + 7];
           _sdrYR::P64 = P64[R1 + 15];
           I64[Hp - 136] = ds_sdrYS_info;
           _sdrYN::P64 = P64[Sp + 8];
           P64[Hp - 120] = _sdrYN::P64;
           P64[Hp - 112] = _sdrYQ::P64;
           P64[Hp - 104] = _sdrYR::P64;
           I64[Hp - 96] = sat_sdrZ5_info;
           P64[Hp - 80] = _sdrYN::P64;
           _cdsSD::P64 = Hp - 136;
           P64[Hp - 72] = _cdsSD::P64;
           I64[Hp - 64] = stg_sel_0_upd_info;
           P64[Hp - 48] = _cdsSD::P64;
           I64[Hp - 40] = GHC.Base.:|_con_info;
           P64[Hp - 32] = _sdrYQ::P64;
           P64[Hp - 24] = Hp - 64;
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 96;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdsSy_info" {
     block_cdsSy_info:
         const _cdsSy;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.976588571 UTC

[section ""data" . Data.List.NonEmpty.group1_closure" {
     Data.List.NonEmpty.group1_closure:
         const Data.List.NonEmpty.group1_info;
 },
 w_sdrZb_entry() //  [R1]
         { []
         }
     {offset
       cdsU9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdsUa; else goto cdsUb;
       cdsUa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdsUb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.==_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . w_sdrZb_info" {
     w_sdrZb_info:
         const w_sdrZb_entry;
         const 1;
         const 16;
 },
 ds_sdrZc_entry() //  [R1]
         { []
         }
     {offset
       cdsUk: // global
           _sdrZc::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cdsUl; else goto cdsUm;
       cdsUm: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdsUo; else goto cdsUn;
       cdsUo: // global
           HpAlloc = 32;
           goto cdsUl;
       cdsUl: // global
           R1 = _sdrZc::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdsUn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdrZc::P64;
           _sdrZ9::P64 = P64[_sdrZc::P64 + 16];
           _sdrZa::P64 = P64[_sdrZc::P64 + 24];
           _sdrZb::P64 = P64[_sdrZc::P64 + 32];
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sdrZb::P64;
           P64[Hp] = _sdrZ9::P64;
           I64[Sp - 24] = block_cdsUh_info;
           R3 = _sdrZa::P64;
           R2 = Hp - 24;
           Sp = Sp - 24;
           call GHC.List.$wspan_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds_sdrZc_info" {
     ds_sdrZc_info:
         const ds_sdrZc_entry;
         const 3;
         const 15;
 },
 _cdsUh() //  [R1, R2]
         { []
         }
     {offset
       cdsUh: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdsUr; else goto cdsUq;
       cdsUr: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cdsUq: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdsUh_info" {
     block_cdsUh_info:
         const _cdsUh;
         const 0;
         const 30;
 },
 sat_sdrZp_entry() //  [R1]
         { []
         }
     {offset
       cdsUz: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdsUA; else goto cdsUB;
       cdsUA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdsUB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cdsUw_info;
           _sdrZb::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _sdrZb::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udsUF; else goto cdsUx;
       udsUF: // global
           call _cdsUw(R1) args: 0, res: 0, upd: 0;
       cdsUx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdrZp_info" {
     sat_sdrZp_info:
         const sat_sdrZp_entry;
         const 2;
         const 18;
 },
 _cdsUw() //  [R1]
         { []
         }
     {offset
       cdsUw: // global
           R3 = P64[R1 + 15];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.List.NonEmpty.groupBy_$sgroupBy_entry(R3,
                                                           R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdsUw_info" {
     block_cdsUw_info:
         const _cdsUw;
         const 1;
         const 30;
 },
 Data.List.NonEmpty.group1_entry() //  [R2, R3]
         { []
         }
     {offset
       cdsUG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdsUK; else goto cdsUL;
       cdsUK: // global
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.group1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdsUL: // global
           I64[Sp - 16] = block_cdsU0_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udsUP; else goto cdsU1;
       udsUP: // global
           call _cdsU0(R1) args: 0, res: 0, upd: 0;
       cdsU1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.group1_info" {
     Data.List.NonEmpty.group1_info:
         const Data.List.NonEmpty.group1_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cdsU0() //  [R1]
         { []
         }
     {offset
       cdsU0: // global
           Hp = Hp + 168;
           if (Hp > HpLim) (likely: False) goto cdsUO; else goto cdsUN;
       cdsUO: // global
           HpAlloc = 168;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdsUN: // global
           _sdrZ9::P64 = P64[R1 + 7];
           _sdrZa::P64 = P64[R1 + 15];
           I64[Hp - 160] = w_sdrZb_info;
           P64[Hp - 144] = P64[Sp + 8];
           I64[Hp - 136] = ds_sdrZc_info;
           P64[Hp - 120] = _sdrZ9::P64;
           P64[Hp - 112] = _sdrZa::P64;
           _cdsU5::P64 = Hp - 160;
           P64[Hp - 104] = _cdsU5::P64;
           I64[Hp - 96] = sat_sdrZp_info;
           P64[Hp - 80] = _cdsU5::P64;
           _cdsUc::P64 = Hp - 136;
           P64[Hp - 72] = _cdsUc::P64;
           I64[Hp - 64] = stg_sel_0_upd_info;
           P64[Hp - 48] = _cdsUc::P64;
           I64[Hp - 40] = GHC.Base.:|_con_info;
           P64[Hp - 32] = _sdrZ9::P64;
           P64[Hp - 24] = Hp - 64;
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 96;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdsU0_info" {
     block_cdsU0_info:
         const _cdsU0;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:38.994035719 UTC

[section ""data" . Data.List.NonEmpty.$wgroupWith1_closure" {
     Data.List.NonEmpty.$wgroupWith1_closure:
         const Data.List.NonEmpty.$wgroupWith1_info;
 },
 eq_sdrZu_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdsVN: // global
           _sdrZw::P64 = R3;
           _sdrZv::P64 = R2;
           _sdrZu::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cdsVO; else goto cdsVP;
       cdsVP: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdsVR; else goto cdsVQ;
       cdsVR: // global
           HpAlloc = 64;
           goto cdsVO;
       cdsVO: // global
           R3 = _sdrZw::P64;
           R2 = _sdrZv::P64;
           R1 = _sdrZu::P64;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdsVQ: // global
           _sdrZq::P64 = P64[_sdrZu::P64 + 6];
           _sdrZr::P64 = P64[_sdrZu::P64 + 14];
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = _sdrZr::P64;
           P64[Hp - 32] = _sdrZw::P64;
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = _sdrZr::P64;
           P64[Hp] = _sdrZv::P64;
           R2 = _sdrZq::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 24;
           P64[Sp - 8] = Hp - 56;
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . eq_sdrZu_info" {
     eq_sdrZu_info:
         const eq_sdrZu_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 sat_sdrZA_entry() //  [R1, R2]
         { []
         }
     {offset
       cdsW1: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           call eq_sdrZu_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdrZA_info" {
     sat_sdrZA_info:
         const sat_sdrZA_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 ds_sdrZz_entry() //  [R1]
         { []
         }
     {offset
       cdsW7: // global
           _sdrZz::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cdsW8; else goto cdsW9;
       cdsW9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdsWb; else goto cdsWa;
       cdsWb: // global
           HpAlloc = 24;
           goto cdsW8;
       cdsW8: // global
           R1 = _sdrZz::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdsWa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdrZz::P64;
           _sdrZs::P64 = P64[_sdrZz::P64 + 16];
           _sdrZt::P64 = P64[_sdrZz::P64 + 24];
           _sdrZu::P64 = P64[_sdrZz::P64 + 32];
           I64[Hp - 16] = sat_sdrZA_info;
           P64[Hp - 8] = _sdrZs::P64;
           P64[Hp] = _sdrZu::P64;
           I64[Sp - 24] = block_cdsW4_info;
           R3 = _sdrZt::P64;
           R2 = Hp - 15;
           Sp = Sp - 24;
           call GHC.List.$wspan_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds_sdrZz_info" {
     ds_sdrZz_info:
         const ds_sdrZz_entry;
         const 3;
         const 15;
 },
 _cdsW4() //  [R1, R2]
         { []
         }
     {offset
       cdsW4: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdsWe; else goto cdsWd;
       cdsWe: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cdsWd: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdsW4_info" {
     block_cdsW4_info:
         const _cdsW4;
         const 0;
         const 30;
 },
 sat_sdrZM_entry() //  [R1]
         { []
         }
     {offset
       cdsWm: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdsWn; else goto cdsWo;
       cdsWn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdsWo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cdsWj_info;
           _sdrZu::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _sdrZu::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udsWs; else goto cdsWk;
       udsWs: // global
           call _cdsWj(R1) args: 0, res: 0, upd: 0;
       cdsWk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdrZM_info" {
     sat_sdrZM_info:
         const sat_sdrZM_entry;
         const 2;
         const 18;
 },
 _cdsWj() //  [R1]
         { []
         }
     {offset
       cdsWj: // global
           R3 = P64[R1 + 15];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.List.NonEmpty.groupBy_$sgroupBy_entry(R3,
                                                           R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdsWj_info" {
     block_cdsWj_info:
         const _cdsWj;
         const 1;
         const 30;
 },
 Data.List.NonEmpty.$wgroupWith1_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cdsWv: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto cdsWz; else goto cdsWy;
       cdsWz: // global
           HpAlloc = 144;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.$wgroupWith1_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdsWy: // global
           I64[Hp - 136] = eq_sdrZu_info;
           P64[Hp - 128] = R2;
           P64[Hp - 120] = R3;
           I64[Hp - 112] = ds_sdrZz_info;
           P64[Hp - 96] = R4;
           P64[Hp - 88] = R5;
           _cdsVG::P64 = Hp - 134;
           P64[Hp - 80] = _cdsVG::P64;
           I64[Hp - 72] = sat_sdrZM_info;
           P64[Hp - 56] = _cdsVG::P64;
           _cdsVS::P64 = Hp - 112;
           P64[Hp - 48] = _cdsVS::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _cdsVS::P64;
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = R4;
           P64[Hp] = Hp - 40;
           R2 = Hp - 72;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.$wgroupWith1_info" {
     Data.List.NonEmpty.$wgroupWith1_info:
         const Data.List.NonEmpty.$wgroupWith1_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:39.009782202 UTC

[section ""data" . Data.List.NonEmpty.groupWith1_closure" {
     Data.List.NonEmpty.groupWith1_closure:
         const Data.List.NonEmpty.groupWith1_info;
 },
 Data.List.NonEmpty.groupWith1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdsXq: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdsXw; else goto cdsXx;
       cdsXw: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.groupWith1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdsXx: // global
           I64[Sp - 24] = block_cdsXn_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udsXC; else goto cdsXo;
       udsXC: // global
           call _cdsXn(R1) args: 0, res: 0, upd: 0;
       cdsXo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.groupWith1_info" {
     Data.List.NonEmpty.groupWith1_info:
         const Data.List.NonEmpty.groupWith1_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cdsXn() //  [R1]
         { []
         }
     {offset
       cdsXn: // global
           _sdrZO::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cdsXt_info;
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = _sdrZO::P64;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call Data.List.NonEmpty.$wgroupWith1_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdsXn_info" {
     block_cdsXn_info:
         const _cdsXn;
         const 2;
         const 30;
 },
 _cdsXt() //  [R1, R2]
         { []
         }
     {offset
       cdsXt: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdsXB; else goto cdsXA;
       cdsXB: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cdsXA: // global
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdsXt_info" {
     block_cdsXt_info:
         const _cdsXt;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:39.018547933 UTC

[section ""data" . Data.List.NonEmpty.$wgroupAllWith1_closure" {
     Data.List.NonEmpty.$wgroupAllWith1_closure:
         const Data.List.NonEmpty.$wgroupAllWith1_info;
         const 0;
 },
 sat_sdrZZ_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdsY5: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call Data.Ord.comparing_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdrZZ_info" {
     sat_sdrZZ_info:
         const sat_sdrZZ_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 sat_sds0d_entry() //  [R1]
         { []
         }
     {offset
       cdsYh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdsYi; else goto cdsYj;
       cdsYi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdsYj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.$p1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sds0d_info" {
     sat_sds0d_info:
         const sat_sds0d_entry;
         const 1;
         const 16;
 },
 Data.List.NonEmpty.$wgroupAllWith1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdsYo: // global
           _sdrZY::P64 = R4;
           _sdrZX::P64 = R3;
           _sdrZW::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cdsYp; else goto cdsYq;
       cdsYq: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cdsYs; else goto cdsYr;
       cdsYs: // global
           HpAlloc = 96;
           goto cdsYp;
       cdsYp: // global
           R4 = _sdrZY::P64;
           R3 = _sdrZX::P64;
           R2 = _sdrZW::P64;
           R1 = Data.List.NonEmpty.$wgroupAllWith1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdsYr: // global
           I64[Hp - 88] = stg_sel_1_upd_info;
           P64[Hp - 72] = _sdrZY::P64;
           I64[Hp - 64] = stg_sel_0_upd_info;
           P64[Hp - 48] = _sdrZY::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = Hp - 64;
           P64[Hp - 24] = Hp - 88;
           I64[Hp - 16] = sat_sdrZZ_info;
           P64[Hp - 8] = _sdrZW::P64;
           P64[Hp] = _sdrZX::P64;
           I64[Sp - 24] = block_cdsY8_info;
           R3 = Hp - 38;
           R2 = Hp - 14;
           P64[Sp - 16] = _sdrZW::P64;
           P64[Sp - 8] = _sdrZX::P64;
           Sp = Sp - 24;
           call Data.OldList.sortBy_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.$wgroupAllWith1_info" {
     Data.List.NonEmpty.$wgroupAllWith1_info:
         const Data.List.NonEmpty.$wgroupAllWith1_entry;
         const 0;
         const 2251804108652558;
         const 12884901911;
         const Sds6G_srt+32;
 },
 _cdsY8() //  [R1]
         { []
         }
     {offset
       cdsY8: // global
           if (R1 & 7 == 1) goto cdsYl; else goto cdsYm;
       cdsYl: // global
           R1 = Data.List.NonEmpty.cycle1_closure;
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdsYm: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdsYx; else goto cdsYw;
       cdsYx: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdsYw: // global
           _sds0b::P64 = P64[R1 + 6];
           _sds0c::P64 = P64[R1 + 14];
           I64[Hp - 16] = sat_sds0d_info;
           P64[Hp] = P64[Sp + 8];
           R5 = _sds0c::P64;
           R4 = _sds0b::P64;
           R3 = P64[Sp + 16];
           R2 = Hp - 16;
           Sp = Sp + 24;
           call Data.List.NonEmpty.$wgroupWith1_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdsY8_info" {
     block_cdsY8_info:
         const _cdsY8;
         const 2;
         const 4294967326;
         const Sds6G_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:39.02847382 UTC

[section ""data" . Data.List.NonEmpty.groupAllWith1_closure" {
     Data.List.NonEmpty.groupAllWith1_closure:
         const Data.List.NonEmpty.groupAllWith1_info;
         const 0;
 },
 Data.List.NonEmpty.groupAllWith1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdsZ7: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdsZ8; else goto cdsZ9;
       cdsZ8: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.groupAllWith1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdsZ9: // global
           I64[Sp - 8] = block_cdsZ4_info;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call Data.List.NonEmpty.$wgroupAllWith1_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.groupAllWith1_info" {
     Data.List.NonEmpty.groupAllWith1_info:
         const Data.List.NonEmpty.groupAllWith1_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const Sds6G_srt+184;
 },
 _cdsZ4() //  [R1, R2]
         { []
         }
     {offset
       cdsZ4: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdsZc; else goto cdsZb;
       cdsZc: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cdsZb: // global
           I64[Hp - 16] = GHC.Base.:|_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdsZ4_info" {
     block_cdsZ4_info:
         const _cdsZ4;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:39.035771502 UTC

[section ""data" . Data.List.NonEmpty.$wxor_closure" {
     Data.List.NonEmpty.$wxor_closure:
         const Data.List.NonEmpty.$wxor_info;
 },
 go_sds0m_entry() //  [R1, R2]
         { []
         }
     {offset
       cdsZE: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdsZF; else goto udt0c;
       cdsZF: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       udt0c: // global
           P64[Sp - 16] = R1;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call _cdsZu() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . go_sds0m_info" {
     go_sds0m_info:
         const go_sds0m_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cdsZu() //  []
         { []
         }
     {offset
       cdsZu: // global
           _sds0k::P64 = P64[P64[Sp] + 7];
           I64[Sp - 8] = block_cdsZx_info;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sds0k::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udt0e; else goto cdsZy;
       udt0e: // global
           call _cdsZx(R1) args: 0, res: 0, upd: 0;
       cdsZy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdsZx() //  [R1]
         { []
         }
     {offset
       cdsZx: // global
           if (R1 & 7 == 1) goto cdsZB; else goto cdsZC;
       cdsZB: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdsZC: // global
           I64[Sp] = block_cdsZM_info;
           _sds0q::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 16] = _sds0q::P64;
           if (R1 & 7 != 0) goto udt0f; else goto cdsZO;
       udt0f: // global
           call _cdsZM(R1) args: 0, res: 0, upd: 0;
       cdsZO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdsZx_info" {
     block_cdsZx_info:
         const _cdsZx;
         const 2;
         const 30;
 },
 _cdsZM() //  [R1]
         { []
         }
     {offset
       cdsZM: // global
           _sds0q::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cdsZU; else goto cdsZZ;
       cdsZU: // global
           P64[Sp + 16] = _sds0q::P64;
           Sp = Sp + 8;
           call _cdsZu() args: 0, res: 0, upd: 0;
       cdsZZ: // global
           I64[Sp + 16] = block_cdsZX_info;
           R2 = _sds0q::P64;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_sds0m_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdsZM_info" {
     block_cdsZM_info:
         const _cdsZM;
         const 2;
         const 30;
 },
 _cdsZX() //  [R1]
         { []
         }
     {offset
       cdsZX: // global
           if (R1 & 7 == 1) goto cdt05; else goto cdt09;
       cdt05: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdt09: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdsZX_info" {
     block_cdsZX_info:
         const _cdsZX;
         const 0;
         const 30;
 },
 Data.List.NonEmpty.$wxor_entry() //  [R2, R3]
         { []
         }
     {offset
       cdt0i: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdt0m; else goto cdt0l;
       cdt0m: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = Data.List.NonEmpty.$wxor_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdt0l: // global
           I64[Hp - 8] = go_sds0m_info;
           P64[Hp] = R2;
           R2 = R3;
           R1 = Hp - 7;
           call go_sds0m_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.$wxor_info" {
     Data.List.NonEmpty.$wxor_info:
         const Data.List.NonEmpty.$wxor_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:39.047638095 UTC

[section ""data" . Data.List.NonEmpty.xor_closure" {
     Data.List.NonEmpty.xor_closure:
         const Data.List.NonEmpty.xor_info;
 },
 Data.List.NonEmpty.xor_entry() //  [R2]
         { []
         }
     {offset
       cdt16: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdt17; else goto cdt18;
       cdt17: // global
           R2 = R2;
           R1 = Data.List.NonEmpty.xor_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdt18: // global
           I64[Sp - 8] = block_cdt13_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udt1c; else goto cdt14;
       udt1c: // global
           call _cdt13(R1) args: 0, res: 0, upd: 0;
       cdt14: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.xor_info" {
     Data.List.NonEmpty.xor_info:
         const Data.List.NonEmpty.xor_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdt13() //  [R1]
         { []
         }
     {offset
       cdt13: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call Data.List.NonEmpty.$wxor_entry(R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdt13_info" {
     block_cdt13_info:
         const _cdt13;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:39.053569249 UTC

[section ""data" . Data.List.NonEmpty.length_closure" {
     Data.List.NonEmpty.length_closure:
         const Data.List.NonEmpty.length_info;
 },
 Data.List.NonEmpty.length_entry() //  [R2]
         { []
         }
     {offset
       cdt1u: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdt1F; else goto cdt1G;
       cdt1F: // global
           R2 = R2;
           R1 = Data.List.NonEmpty.length_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdt1G: // global
           I64[Sp - 8] = block_cdt1r_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udt1L; else goto cdt1s;
       udt1L: // global
           call _cdt1r(R1) args: 0, res: 0, upd: 0;
       cdt1s: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Data.List.NonEmpty.length_info" {
     Data.List.NonEmpty.length_info:
         const Data.List.NonEmpty.length_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdt1r() //  [R1]
         { []
         }
     {offset
       cdt1r: // global
           I64[Sp] = block_cdt1x_info;
           R3 = 0;
           R2 = P64[R1 + 15];
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdt1r_info" {
     block_cdt1r_info:
         const _cdt1r;
         const 0;
         const 30;
 },
 _cdt1x() //  [R1]
         { []
         }
     {offset
       cdt1x: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdt1K; else goto cdt1J;
       cdt1K: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cdt1J: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1 + 1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdt1x_info" {
     block_cdt1x_info:
         const _cdt1x;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:39.060367836 UTC

[section ""relreadonly" . Sds6G_srt" {
     Sds6G_srt:
         const GHC.List.lastError_closure;
         const Data.List.NonEmpty.last_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const Data.List.NonEmpty.fromList_closure;
         const Data.List.NonEmpty.cycle1_closure;
         const Data.List.NonEmpty.reverse_closure;
         const Data.List.NonEmpty.sortBy_closure;
         const Data.List.NonEmpty.sortWith_closure;
         const Data.List.NonEmpty.sort_closure;
         const Data.OldList.$winits_closure;
         const Data.List.NonEmpty.inits_closure;
         const Data.List.NonEmpty.tails_closure;
         const GHC.List.scanr1_closure;
         const Data.List.NonEmpty.scanr1_closure;
         const Data.List.NonEmpty.cycle_closure;
         const Data.List.NonEmpty.$wtranspose_closure;
         const Data.List.NonEmpty.transpose_closure;
         const GHC.List.$w!!_closure;
         const Data.List.NonEmpty.!!1_closure;
         const Data.List.NonEmpty.!!_closure;
         const Data.List.NonEmpty.$w!!_closure;
         const Data.Foldable.$fFoldable[]_closure;
         const Data.List.NonEmpty.groupAllWith_closure;
         const Data.List.NonEmpty.$wgroupAllWith1_closure;
         const Data.List.NonEmpty.groupAllWith1_closure;
 }]

