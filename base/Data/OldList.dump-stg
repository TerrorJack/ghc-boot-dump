
==================== Pre unarise: ====================
2018-03-16 16:00:18.47124846 UTC

Data.OldList.$WSnocBuilder [InlPrag=INLINE[2]]
  :: forall a.
     GHC.Types.Word -> [a] -> [a] -> Data.OldList.SnocBuilder a
[GblId[DataConWrapper],
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,U><L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [dt_s5kSD dt_s5kSE dt_s5kSF]
        case dt_s5kSD of {
          GHC.Types.W# dt_s5kSH [Occ=Once] ->
              Data.OldList.SnocBuilder [dt_s5kSH dt_s5kSE dt_s5kSF];
        };

Data.OldList.dropWhileEnd
  :: forall a. (a -> GHC.Types.Bool) -> [a] -> [a]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,C(U)><S,1*U>,
 Unf=OtherCon []] =
    [] \r [p_s5kSI eta_s5kSJ]
        let {
          go_s5kSK [Occ=LoopBreaker] :: [a_a5jar] -> [a_a5jar]
          [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
              sat-only [p_s5kSI go_s5kSK] \r [ds_s5kSL]
                  case ds_s5kSL of {
                    [] -> [] [];
                    : y_s5kSN ys_s5kSO [Occ=Once*] ->
                        case p_s5kSI y_s5kSN of {
                          GHC.Types.False ->
                              let {
                                sat_s5kSQ [Occ=Once] :: [a_a5jar]
                                [LclId] =
                                    [go_s5kSK ys_s5kSO] \u [] go_s5kSK ys_s5kSO;
                              } in  : [y_s5kSN sat_s5kSQ];
                          GHC.Types.True ->
                              case go_s5kSK ys_s5kSO of wild2_s5kSR {
                                [] -> [] [];
                                : _ [Occ=Dead] _ [Occ=Dead] -> : [y_s5kSN wild2_s5kSR];
                              };
                        };
                  };
        } in  go_s5kSK eta_s5kSJ;

Data.OldList.stripPrefix [Occ=LoopBreaker]
  :: forall a. GHC.Classes.Eq a => [a] -> [a] -> GHC.Base.Maybe [a]
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U(C(C1(U)),A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dEq_s5kSU ds_s5kSV ys_s5kSW]
        case ds_s5kSV of {
          [] -> GHC.Base.Just [ys_s5kSW];
          : x_s5kSY [Occ=Once] xs_s5kSZ [Occ=Once] ->
              case ys_s5kSW of {
                [] -> GHC.Base.Nothing [];
                : y_s5kT1 [Occ=Once] ys1_s5kT2 [Occ=Once] ->
                    case GHC.Classes.== $dEq_s5kSU x_s5kSY y_s5kT1 of {
                      GHC.Types.False -> GHC.Base.Nothing [];
                      GHC.Types.True ->
                          Data.OldList.stripPrefix $dEq_s5kSU xs_s5kSZ ys1_s5kT2;
                    };
              };
        };

Data.OldList.find
  :: forall a. (a -> GHC.Types.Bool) -> [a] -> GHC.Base.Maybe a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,C(U)><S,1*U>,
 Unf=OtherCon []] =
    [] \r [p_s5kT4 x_s5kT5]
        let-no-escape {
          go_s5kT6 [Occ=LoopBreakerT[1]]
            :: [a_a5j9W] -> GHC.Base.Maybe a_a5j9W
          [LclId[JoinId(1)], Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
              sat-only [p_s5kT4 go_s5kT6] \r [ds_s5kT7]
                  case ds_s5kT7 of {
                    [] -> GHC.Base.Nothing [];
                    : y_s5kT9 ys_s5kTa [Occ=Once] ->
                        case p_s5kT4 y_s5kT9 of {
                          GHC.Types.False -> go_s5kT6 ys_s5kTa;
                          GHC.Types.True -> GHC.Base.Just [y_s5kT9];
                        };
                  };
        } in  go_s5kT6 x_s5kT5;

Data.OldList.elemIndex
  :: forall a.
     GHC.Classes.Eq a =>
     a -> [a] -> GHC.Base.Maybe GHC.Types.Int
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*U(1*C1(C(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dEq_s5kTc x_s5kTd]
        let {
          p_s5kTe [Occ=OnceL!, Dmd=<L,C(U)>] :: a_a5jaa -> GHC.Types.Bool
          [LclId] =
              [$dEq_s5kTc x_s5kTd] \u [] GHC.Classes.== $dEq_s5kTc x_s5kTd; } in
        let {
          sat_s5kTp [Occ=OnceT[0]]
            :: [a_a5jaa] -> GHC.Base.Maybe GHC.Types.Int
          [LclId] =
              [p_s5kTe] \r [x1_s5kTf]
                  let-no-escape {
                    go_s5kTg [Occ=LoopBreakerT[2]]
                      :: [a_a5jaa] -> GHC.Prim.Int# -> GHC.Base.Maybe GHC.Types.Int
                    [LclId[JoinId(2)], Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
                        sat-only [p_s5kTe go_s5kTg] \r [ds_s5kTh eta_s5kTi]
                            case ds_s5kTh of {
                              [] -> GHC.Base.Nothing [];
                              : y_s5kTk [Occ=Once] ys_s5kTl [Occ=Once] ->
                                  case p_s5kTe y_s5kTk of {
                                    GHC.Types.False ->
                                        case +# [eta_s5kTi 1#] of sat_s5kTn {
                                          __DEFAULT -> go_s5kTg ys_s5kTl sat_s5kTn;
                                        };
                                    GHC.Types.True ->
                                        let {
                                          sat_s5kTo [Occ=Once] :: GHC.Types.Int
                                          [LclId] =
                                              CCCS GHC.Types.I#! [eta_s5kTi];
                                        } in  GHC.Base.Just [sat_s5kTo];
                                  };
                            };
                  } in  go_s5kTg x1_s5kTf 0#;
        } in  sat_s5kTp;

Data.OldList.findIndex
  :: forall a.
     (a -> GHC.Types.Bool) -> [a] -> GHC.Base.Maybe GHC.Types.Int
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,C(U)><S,1*U>,
 Unf=OtherCon []] =
    [] \r [p_s5kTq x_s5kTr]
        let-no-escape {
          go_s5kTs [Occ=LoopBreakerT[2]]
            :: [a_a5j9N] -> GHC.Prim.Int# -> GHC.Base.Maybe GHC.Types.Int
          [LclId[JoinId(2)], Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
              sat-only [p_s5kTq go_s5kTs] \r [ds_s5kTt eta_s5kTu]
                  case ds_s5kTt of {
                    [] -> GHC.Base.Nothing [];
                    : y_s5kTw [Occ=Once] ys_s5kTx [Occ=Once] ->
                        case p_s5kTq y_s5kTw of {
                          GHC.Types.False ->
                              case +# [eta_s5kTu 1#] of sat_s5kTz {
                                __DEFAULT -> go_s5kTs ys_s5kTx sat_s5kTz;
                              };
                          GHC.Types.True ->
                              let {
                                sat_s5kTA [Occ=Once] :: GHC.Types.Int
                                [LclId] =
                                    CCCS GHC.Types.I#! [eta_s5kTu];
                              } in  GHC.Base.Just [sat_s5kTA];
                        };
                  };
        } in  go_s5kTs x_s5kTr 0#;

Data.OldList.findIndices [InlPrag=INLINE (sat-args=2)]
  :: forall a. (a -> GHC.Types.Bool) -> [a] -> [GHC.Types.Int]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,C(U)><S,1*U>,
 Unf=OtherCon []] =
    [] \r [p_s5kTB ls_s5kTC]
        let {
          go_s5kTD [Occ=LoopBreaker]
            :: [a_a5j9e] -> GHC.Prim.Int# -> [GHC.Types.Int]
          [LclId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
              sat-only [p_s5kTB go_s5kTD] \r [ds_s5kTE eta_s5kTF]
                  case ds_s5kTE of {
                    [] -> [] [];
                    : y_s5kTH [Occ=Once] ys_s5kTI [Occ=Once*] ->
                        case p_s5kTB y_s5kTH of {
                          GHC.Types.False ->
                              case +# [eta_s5kTF 1#] of sat_s5kTK {
                                __DEFAULT -> go_s5kTD ys_s5kTI sat_s5kTK;
                              };
                          GHC.Types.True ->
                              let {
                                sat_s5kTN [Occ=Once] :: [GHC.Types.Int]
                                [LclId] =
                                    [go_s5kTD eta_s5kTF ys_s5kTI] \u []
                                        case +# [eta_s5kTF 1#] of sat_s5kTM {
                                          __DEFAULT -> go_s5kTD ys_s5kTI sat_s5kTM;
                                        }; } in
                              let {
                                sat_s5kTL [Occ=Once] :: GHC.Types.Int
                                [LclId] =
                                    CCCS GHC.Types.I#! [eta_s5kTF];
                              } in  : [sat_s5kTL sat_s5kTN];
                        };
                  };
        } in  go_s5kTD ls_s5kTC 0#;

Data.OldList.elemIndices
  :: forall a. GHC.Classes.Eq a => a -> [a] -> [GHC.Types.Int]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*U(1*C1(C(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dEq_s5kTO x_s5kTP]
        let {
          sat_s5kTQ [Occ=Once] :: a_a5ja3 -> GHC.Types.Bool
          [LclId] =
              [$dEq_s5kTO x_s5kTP] \u [] GHC.Classes.== $dEq_s5kTO x_s5kTP;
        } in  Data.OldList.findIndices sat_s5kTQ;

Data.OldList.isPrefixOf [Occ=LoopBreaker]
  :: forall a. GHC.Classes.Eq a => [a] -> [a] -> GHC.Types.Bool
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U(C(C1(U)),A)><S,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [$dEq_s5kTR ds_s5kTS ds1_s5kTT]
        case ds_s5kTS of {
          [] -> GHC.Types.True [];
          : ipv_s5kTV [Occ=Once] ipv1_s5kTW [Occ=Once] ->
              case ds1_s5kTT of {
                [] -> GHC.Types.False [];
                : ipv2_s5kTY [Occ=Once] ipv3_s5kTZ [Occ=Once] ->
                    case GHC.Classes.== $dEq_s5kTR ipv_s5kTV ipv2_s5kTY of {
                      GHC.Types.False -> GHC.Types.False [];
                      GHC.Types.True ->
                          Data.OldList.isPrefixOf $dEq_s5kTR ipv1_s5kTW ipv3_s5kTZ;
                    };
              };
        };

Data.OldList.isInfixOf
  :: forall a. GHC.Classes.Eq a => [a] -> [a] -> GHC.Types.Bool
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U(C(C1(U)),A)><S,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dEq_s5kU1 needle_s5kU2 haystack_s5kU3]
        let-no-escape {
          tailsGo_s5kU4 [Occ=LoopBreakerT[1]] :: [a_a5j96] -> GHC.Types.Bool
          [LclId[JoinId(1)], Arity=1, Str=<L,U>, Unf=OtherCon []] =
              sat-only [$dEq_s5kU1 needle_s5kU2 tailsGo_s5kU4] \r [xs_s5kU5]
                  case Data.OldList.isPrefixOf $dEq_s5kU1 needle_s5kU2 xs_s5kU5 of {
                    GHC.Types.False ->
                        case xs_s5kU5 of {
                          [] -> GHC.Types.False [];
                          : _ [Occ=Dead] xs'_s5kU9 [Occ=Once] -> tailsGo_s5kU4 xs'_s5kU9;
                        };
                    GHC.Types.True -> GHC.Types.True [];
                  };
        } in  tailsGo_s5kU4 haystack_s5kU3;

Data.OldList.dropLength [Occ=LoopBreaker]
  :: forall a b. [a] -> [b] -> [b]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s5kUa y_s5kUb]
        case ds_s5kUa of {
          [] -> y_s5kUb;
          : _ [Occ=Dead] ipv1_s5kUe [Occ=Once] ->
              case y_s5kUb of {
                [] -> [] [];
                : _ [Occ=Dead] ipv3_s5kUh [Occ=Once] ->
                    Data.OldList.dropLength ipv1_s5kUe ipv3_s5kUh;
              };
        };

Data.OldList.dropLengthMaybe [Occ=LoopBreaker]
  :: forall a b. [a] -> [b] -> GHC.Base.Maybe [b]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ds_s5kUi y_s5kUj]
        case ds_s5kUi of {
          [] -> GHC.Base.Just [y_s5kUj];
          : _ [Occ=Dead] ipv1_s5kUm [Occ=Once] ->
              case y_s5kUj of {
                [] -> GHC.Base.Nothing [];
                : _ [Occ=Dead] ipv3_s5kUp [Occ=Once] ->
                    Data.OldList.dropLengthMaybe ipv1_s5kUm ipv3_s5kUp;
              };
        };

Data.OldList.isSuffixOf
  :: forall a. GHC.Classes.Eq a => [a] -> [a] -> GHC.Types.Bool
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U(C(C1(U)),A)><S,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dEq_s5kUq ns_s5kUr hs_s5kUs]
        case Data.OldList.dropLengthMaybe ns_s5kUr hs_s5kUs of {
          GHC.Base.Nothing -> GHC.Types.False [];
          GHC.Base.Just x_s5kUu [Occ=Once] ->
              case Data.OldList.dropLength x_s5kUu hs_s5kUs of sat_s5kUv {
                __DEFAULT -> GHC.Classes.$fEq[]_$c== $dEq_s5kUq ns_s5kUr sat_s5kUv;
              };
        };

Data.OldList.elem_by [Occ=LoopBreaker]
  :: forall a.
     (a -> a -> GHC.Types.Bool) -> a -> [a] -> GHC.Types.Bool
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s5kUw ds1_s5kUx ds2_s5kUy]
        case ds2_s5kUy of {
          [] -> GHC.Types.False [];
          : x_s5kUA [Occ=Once] xs_s5kUB [Occ=Once] ->
              case ds_s5kUw x_s5kUA ds1_s5kUx of {
                GHC.Types.False ->
                    Data.OldList.elem_by ds_s5kUw ds1_s5kUx xs_s5kUB;
                GHC.Types.True -> GHC.Types.True [];
              };
        };

Data.OldList.nubBy
  :: forall a. (a -> a -> GHC.Types.Bool) -> [a] -> [a]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><S,1*U>,
 Unf=OtherCon []] =
    [] \r [eq_s5kUD l_s5kUE]
        let {
          nubBy'_s5kUF [Occ=LoopBreaker]
            :: [a_a5j7x] -> [a_a5j7x] -> [a_a5j7x]
          [LclId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
              sat-only [eq_s5kUD nubBy'_s5kUF] \r [ds_s5kUG ds1_s5kUH]
                  case ds_s5kUG of {
                    [] -> [] [];
                    : y_s5kUJ ys_s5kUK [Occ=Once*] ->
                        case Data.OldList.elem_by eq_s5kUD y_s5kUJ ds1_s5kUH of {
                          GHC.Types.False ->
                              let {
                                sat_s5kUN [Occ=Once] :: [a_a5j7x]
                                [LclId] =
                                    [nubBy'_s5kUF ds1_s5kUH y_s5kUJ ys_s5kUK] \u []
                                        let {
                                          sat_s5kUM [Occ=Once] :: [a_a5j7x]
                                          [LclId] =
                                              CCCS :! [y_s5kUJ ds1_s5kUH];
                                        } in  nubBy'_s5kUF ys_s5kUK sat_s5kUM;
                              } in  : [y_s5kUJ sat_s5kUN];
                          GHC.Types.True -> nubBy'_s5kUF ys_s5kUK ds1_s5kUH;
                        };
                  };
        } in  nubBy'_s5kUF l_s5kUE GHC.Types.[];

Data.OldList.nub :: forall a. GHC.Classes.Eq a => [a] -> [a]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*U(1*C(C1(U)),A)><S,1*U>,
 Unf=OtherCon []] =
    [] \r [$dEq_s5kUO eta_s5kUP]
        let {
          sat_s5kUQ [Occ=Once, Dmd=<L,C(C1(U))>]
            :: a_a5j8h -> a_a5j8h -> GHC.Types.Bool
          [LclId] =
              [$dEq_s5kUO] \u [] GHC.Classes.== $dEq_s5kUO;
        } in  Data.OldList.nubBy sat_s5kUQ eta_s5kUP;

Data.OldList.deleteBy [Occ=LoopBreaker]
  :: forall a. (a -> a -> GHC.Types.Bool) -> a -> [a] -> [a]
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s5kUR ds1_s5kUS ds2_s5kUT]
        case ds2_s5kUT of {
          [] -> [] [];
          : y_s5kUV ys_s5kUW [Occ=Once*] ->
              case ds_s5kUR ds1_s5kUS y_s5kUV of {
                GHC.Types.False ->
                    let {
                      sat_s5kUY [Occ=Once] :: [a_a5j6X]
                      [LclId] =
                          [ds_s5kUR ds1_s5kUS ys_s5kUW] \u []
                              Data.OldList.deleteBy ds_s5kUR ds1_s5kUS ys_s5kUW;
                    } in  : [y_s5kUV sat_s5kUY];
                GHC.Types.True -> ys_s5kUW;
              };
        };

Data.OldList.deleteFirstsBy
  :: forall a. (a -> a -> GHC.Types.Bool) -> [a] -> [a] -> [a]
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [eq_s5kUZ eta_s5kV0 eta1_s5kV1]
        let-no-escape {
          go_s5kV2 [Occ=LoopBreakerT[2]]
            :: [a_a5j71] -> [a_a5j71] -> [a_a5j71]
          [LclId[JoinId(2)], Arity=2, Str=<S,1*U><S,1*U>, Unf=OtherCon []] =
              sat-only [eq_s5kUZ go_s5kV2] \r [ds_s5kV3 eta2_s5kV4]
                  case ds_s5kV3 of {
                    [] -> eta2_s5kV4;
                    : y_s5kV6 [Occ=Once] ys_s5kV7 [Occ=Once] ->
                        case
                            Data.OldList.deleteBy eq_s5kUZ y_s5kV6 eta2_s5kV4
                        of
                        sat_s5kV8
                        { __DEFAULT -> go_s5kV2 ys_s5kV7 sat_s5kV8;
                        };
                  };
        } in  go_s5kV2 eta1_s5kV1 eta_s5kV0;

Data.OldList.delete
  :: forall a. GHC.Classes.Eq a => a -> [a] -> [a]
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*U(1*C(C1(U)),A)><L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [$dEq_s5kV9 eta_s5kVa eta1_s5kVb]
        let {
          sat_s5kVc [Occ=Once, Dmd=<L,C(C1(U))>]
            :: a_a5j7c -> a_a5j7c -> GHC.Types.Bool
          [LclId] =
              [$dEq_s5kV9] \u [] GHC.Classes.== $dEq_s5kV9;
        } in  Data.OldList.deleteBy sat_s5kVc eta_s5kVa eta1_s5kVb;

Data.OldList.\\ :: forall a. GHC.Classes.Eq a => [a] -> [a] -> [a]
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*U(1*C(C1(U)),A)><S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [$dEq_s5kVd eta_s5kVe eta1_s5kVf]
        let {
          lvl12_s5kVg [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: a_a5j7j -> a_a5j7j -> GHC.Types.Bool
          [LclId] =
              [$dEq_s5kVd] \u [] GHC.Classes.== $dEq_s5kVd;
        } in 
          let-no-escape {
            go_s5kVh [Occ=LoopBreakerT[2]]
              :: [a_a5j7j] -> [a_a5j7j] -> [a_a5j7j]
            [LclId[JoinId(2)], Arity=2, Str=<S,1*U><S,1*U>, Unf=OtherCon []] =
                sat-only [lvl12_s5kVg go_s5kVh] \r [ds_s5kVi eta2_s5kVj]
                    case ds_s5kVi of {
                      [] -> eta2_s5kVj;
                      : y_s5kVl [Occ=Once] ys_s5kVm [Occ=Once] ->
                          case
                              Data.OldList.deleteBy lvl12_s5kVg y_s5kVl eta2_s5kVj
                          of
                          sat_s5kVn
                          { __DEFAULT -> go_s5kVh ys_s5kVm sat_s5kVn;
                          };
                    };
          } in  go_s5kVh eta1_s5kVf eta_s5kVe;

Data.OldList.unionBy
  :: forall a. (a -> a -> GHC.Types.Bool) -> [a] -> [a] -> [a]
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><S,U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [eq_s5kVo xs_s5kVp ys_s5kVq]
        let {
          sat_s5kVz [Occ=Once, Dmd=<L,1*U>] :: [a_a5j80]
          [LclId] =
              [eq_s5kVo xs_s5kVp ys_s5kVq] \s []
                  case Data.OldList.nubBy eq_s5kVo ys_s5kVq of sat_s5kVy {
                    __DEFAULT ->
                        let-no-escape {
                          go_s5kVr [Occ=LoopBreakerT[2]]
                            :: [a_a5j80] -> [a_a5j80] -> [a_a5j80]
                          [LclId[JoinId(2)], Arity=2, Str=<S,1*U><S,1*U>, Unf=OtherCon []] =
                              sat-only [eq_s5kVo go_s5kVr] \r [ds_s5kVs eta_s5kVt]
                                  case ds_s5kVs of {
                                    [] -> eta_s5kVt;
                                    : y_s5kVv [Occ=Once] ys1_s5kVw [Occ=Once] ->
                                        case
                                            Data.OldList.deleteBy eq_s5kVo y_s5kVv eta_s5kVt
                                        of
                                        sat_s5kVx
                                        { __DEFAULT -> go_s5kVr ys1_s5kVw sat_s5kVx;
                                        };
                                  };
                        } in  go_s5kVr xs_s5kVp sat_s5kVy;
                  };
        } in  GHC.Base.++ xs_s5kVp sat_s5kVz;

Data.OldList.union
  :: forall a. GHC.Classes.Eq a => [a] -> [a] -> [a]
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*U(1*C(C1(U)),A)><S,U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [$dEq_s5kVA eta_s5kVB eta1_s5kVC]
        let {
          sat_s5kVD [Occ=Once, Dmd=<L,C(C1(U))>]
            :: a_a5j8a -> a_a5j8a -> GHC.Types.Bool
          [LclId] =
              [$dEq_s5kVA] \u [] GHC.Classes.== $dEq_s5kVA;
        } in  Data.OldList.unionBy sat_s5kVD eta_s5kVB eta1_s5kVC;

Data.OldList.intersectBy
  :: forall a. (a -> a -> GHC.Types.Bool) -> [a] -> [a] -> [a]
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C(U))><S,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s5kVE ds1_s5kVF ds2_s5kVG]
        case ds1_s5kVF of wild_s5kVH {
          [] -> [] [];
          : _ [Occ=Dead] _ [Occ=Dead] ->
              case ds2_s5kVG of wild1_s5kVK {
                [] -> [] [];
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    let {
                      go_s5kVN [Occ=LoopBreaker] :: [a_a5j6L] -> [a_a5j6L]
                      [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                          sat-only [ds_s5kVE wild1_s5kVK go_s5kVN] \r [ds3_s5kVO]
                              case ds3_s5kVO of {
                                [] -> [] [];
                                : y_s5kVQ ys_s5kVR [Occ=Once*] ->
                                    let {
                                      sat_s5kVS [Occ=Once, Dmd=<L,C(U)>]
                                        :: a_a5j6L -> GHC.Types.Bool
                                      [LclId] =
                                          [ds_s5kVE y_s5kVQ] \u [] ds_s5kVE y_s5kVQ;
                                    } in 
                                      case GHC.List.any sat_s5kVS wild1_s5kVK of {
                                        GHC.Types.False -> go_s5kVN ys_s5kVR;
                                        GHC.Types.True ->
                                            let {
                                              sat_s5kVU [Occ=Once] :: [a_a5j6L]
                                              [LclId] =
                                                  [go_s5kVN ys_s5kVR] \u [] go_s5kVN ys_s5kVR;
                                            } in  : [y_s5kVQ sat_s5kVU];
                                      };
                              };
                    } in  go_s5kVN wild_s5kVH;
              };
        };

Data.OldList.intersect
  :: forall a. GHC.Classes.Eq a => [a] -> [a] -> [a]
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*U(1*C(C(U)),A)><S,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [$dEq_s5kVV eta_s5kVW eta1_s5kVX]
        let {
          sat_s5kVY [Occ=Once, Dmd=<L,C(C(U))>]
            :: a_a5j6Q -> a_a5j6Q -> GHC.Types.Bool
          [LclId] =
              [$dEq_s5kVV] \u [] GHC.Classes.== $dEq_s5kVV;
        } in  Data.OldList.intersectBy sat_s5kVY eta_s5kVW eta1_s5kVX;

Data.OldList.prependToAll [Occ=LoopBreaker]
  :: forall a. a -> [a] -> [a]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s5kVZ ds1_s5kW0]
        case ds1_s5kW0 of {
          [] -> [] [];
          : x_s5kW2 [Occ=Once] xs_s5kW3 [Occ=Once] ->
              let {
                sat_s5kW4 [Occ=Once] :: [a_a5j6w]
                [LclId] =
                    [ds_s5kVZ xs_s5kW3] \u []
                        Data.OldList.prependToAll ds_s5kVZ xs_s5kW3; } in
              let {
                sat_s5kW5 [Occ=Once] :: [a_a5j6w]
                [LclId] =
                    CCCS :! [x_s5kW2 sat_s5kW4];
              } in  : [ds_s5kVZ sat_s5kW5];
        };

Data.OldList.intersperse :: forall a. a -> [a] -> [a]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s5kW6 ds1_s5kW7]
        case ds1_s5kW7 of {
          [] -> [] [];
          : x_s5kW9 [Occ=Once] xs_s5kWa [Occ=Once] ->
              let {
                sat_s5kWb [Occ=Once] :: [a_a5j6B]
                [LclId] =
                    [ds_s5kW6 xs_s5kWa] \u []
                        Data.OldList.prependToAll ds_s5kW6 xs_s5kWa;
              } in  : [x_s5kW9 sat_s5kWb];
        };

Data.OldList.intercalate1 [Occ=LoopBreaker]
  :: forall a. [[a]] -> [a]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s5kWc]
        case ds_s5kWc of {
          [] -> [] [];
          : y_s5kWe [Occ=Once] ys_s5kWf [Occ=Once] ->
              let {
                sat_s5kWg [Occ=Once, Dmd=<L,1*U>] :: [a_a5j6F]
                [LclId] =
                    [ys_s5kWf] \s [] Data.OldList.intercalate1 ys_s5kWf;
              } in  GHC.Base.++ y_s5kWe sat_s5kWg;
        };

Data.OldList.intercalate :: forall a. [a] -> [[a]] -> [a]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [xs_s5kWh xss_s5kWi]
        case xss_s5kWi of {
          [] -> [] [];
          : x_s5kWk [Occ=Once] xs1_s5kWl [Occ=Once] ->
              let {
                sat_s5kWm [Occ=Once] :: [[a_a5j6F]]
                [LclId] =
                    [xs_s5kWh xs1_s5kWl] \u []
                        Data.OldList.prependToAll xs_s5kWh xs1_s5kWl; } in
              let {
                sat_s5kWn [Occ=Once] :: [[a_a5j6F]]
                [LclId] =
                    CCCS :! [x_s5kWk sat_s5kWm];
              } in  Data.OldList.intercalate1 sat_s5kWn;
        };

poly_go_r5kSf :: forall a. [[a]] -> [[a]]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    sat-only [] \r [ds_s5kWo]
        case ds_s5kWo of {
          [] -> [] [];
          : y_s5kWq [Occ=Once!] ys_s5kWr [Occ=Once*] ->
              case y_s5kWq of {
                [] -> poly_go_r5kSf ys_s5kWr;
                : _ [Occ=Dead] t_s5kWu [Occ=Once] ->
                    let {
                      sat_s5kWv [Occ=Once] :: [[a_a5j6n]]
                      [LclId] =
                          [ys_s5kWr] \u [] poly_go_r5kSf ys_s5kWr;
                    } in  : [t_s5kWu sat_s5kWv];
              };
        };

poly_go1_r5kSg :: forall a. [[a]] -> [a]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    sat-only [] \r [ds_s5kWw]
        case ds_s5kWw of {
          [] -> [] [];
          : y_s5kWy [Occ=Once!] ys_s5kWz [Occ=Once*] ->
              case y_s5kWy of {
                [] -> poly_go1_r5kSg ys_s5kWz;
                : h_s5kWB [Occ=Once] _ [Occ=Dead] ->
                    let {
                      sat_s5kWD [Occ=Once] :: [a_a5j6n]
                      [LclId] =
                          [ys_s5kWz] \u [] poly_go1_r5kSg ys_s5kWz;
                    } in  : [h_s5kWB sat_s5kWD];
              };
        };

Data.OldList.transpose [Occ=LoopBreaker]
  :: forall a. [[a]] -> [[a]]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s5kWE]
        case ds_s5kWE of {
          [] -> [] [];
          : ds1_s5kWG [Occ=Once!] xss_s5kWH ->
              case ds1_s5kWG of {
                [] -> Data.OldList.transpose xss_s5kWH;
                : x_s5kWJ [Occ=Once] xs_s5kWK [Occ=Once] ->
                    let {
                      sat_s5kWP [Occ=Once] :: [[a_a5j6n]]
                      [LclId] =
                          [xss_s5kWH xs_s5kWK] \u []
                              let {
                                sat_s5kWN [Occ=Once] :: [[a_a5j6n]]
                                [LclId] =
                                    [xss_s5kWH] \u [] poly_go_r5kSf xss_s5kWH; } in
                              let {
                                sat_s5kWO [Occ=Once] :: [[a_a5j6n]]
                                [LclId] =
                                    CCCS :! [xs_s5kWK sat_s5kWN];
                              } in  Data.OldList.transpose sat_s5kWO; } in
                    let {
                      sat_s5kWL [Occ=Once] :: [a_a5j6n]
                      [LclId] =
                          [xss_s5kWH] \u [] poly_go1_r5kSg xss_s5kWH; } in
                    let {
                      sat_s5kWM [Occ=Once] :: [a_a5j6n]
                      [LclId] =
                          CCCS :! [x_s5kWJ sat_s5kWL];
                    } in  : [sat_s5kWM sat_s5kWP];
              };
        };

Data.OldList.select [InlPrag=NOUSERINLINE[0]]
  :: forall a. (a -> GHC.Types.Bool) -> a -> ([a], [a]) -> ([a], [a])
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<C(S),1*C1(U)><L,U><L,U(1*U,1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s5kWQ w1_s5kWR w2_s5kWS]
        case w_s5kWQ w1_s5kWR of {
          GHC.Types.False ->
              let {
                sat_s5kX1 [Occ=Once] :: [a_s5krI]
                [LclId] =
                    [w2_s5kWS] \u []
                        case w2_s5kWS of {
                          (,) _ [Occ=Dead] fs_s5kX0 [Occ=Once] -> fs_s5kX0;
                        }; } in
              let {
                sat_s5kX2 [Occ=Once] :: [a_s5krI]
                [LclId] =
                    CCCS :! [w1_s5kWR sat_s5kX1]; } in
              let {
                sat_s5kWX [Occ=Once] :: [a_s5krI]
                [LclId] =
                    [w2_s5kWS] \u []
                        case w2_s5kWS of {
                          (,) ts_s5kWV [Occ=Once] _ [Occ=Dead] -> ts_s5kWV;
                        };
              } in  (,) [sat_s5kWX sat_s5kX2];
          GHC.Types.True ->
              let {
                sat_s5kXb [Occ=Once] :: [a_s5krI]
                [LclId] =
                    [w2_s5kWS] \u []
                        case w2_s5kWS of {
                          (,) _ [Occ=Dead] fs_s5kXa [Occ=Once] -> fs_s5kXa;
                        }; } in
              let {
                sat_s5kX6 [Occ=Once] :: [a_s5krI]
                [LclId] =
                    [w2_s5kWS] \u []
                        case w2_s5kWS of {
                          (,) ts_s5kX4 [Occ=Once] _ [Occ=Dead] -> ts_s5kX4;
                        }; } in
              let {
                sat_s5kX7 [Occ=Once] :: [a_s5krI]
                [LclId] =
                    CCCS :! [w1_s5kWR sat_s5kX6];
              } in  (,) [sat_s5kX7 sat_s5kXb];
        };

Data.OldList.partition [InlPrag=INLINE (sat-args=2)]
  :: forall a. (a -> GHC.Types.Bool) -> [a] -> ([a], [a])
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,C(U)><S,1*U>m,
 Unf=OtherCon []] =
    [] \r [p_s5kXc xs_s5kXd]
        let {
          $wgo_s5kXe [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
            :: [a_a5j6i] -> (# [a_a5j6i], [a_a5j6i] #)
          [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
              sat-only [p_s5kXc $wgo_s5kXe] \r [w_s5kXf]
                  case w_s5kXf of {
                    [] -> (#,#) [GHC.Types.[] GHC.Types.[]];
                    : y_s5kXh ys_s5kXi [Occ=Once] ->
                        let {
                          w1_s5kXj [Dmd=<L,U(1*U,1*U)>] :: ([a_a5j6i], [a_a5j6i])
                          [LclId] =
                              [$wgo_s5kXe ys_s5kXi] \u []
                                  case $wgo_s5kXe ys_s5kXi of {
                                    (#,#) ww1_s5kXl [Occ=Once] ww2_s5kXm [Occ=Once] ->
                                        (,) [ww1_s5kXl ww2_s5kXm];
                                  };
                        } in 
                          case p_s5kXc y_s5kXh of {
                            GHC.Types.False ->
                                let {
                                  sat_s5kXv [Occ=Once] :: [a_a5j6i]
                                  [LclId] =
                                      [w1_s5kXj] \u []
                                          case w1_s5kXj of {
                                            (,) _ [Occ=Dead] fs_s5kXu [Occ=Once] -> fs_s5kXu;
                                          }; } in
                                let {
                                  sat_s5kXw [Occ=Once] :: [a_a5j6i]
                                  [LclId] =
                                      CCCS :! [y_s5kXh sat_s5kXv]; } in
                                let {
                                  sat_s5kXr [Occ=Once] :: [a_a5j6i]
                                  [LclId] =
                                      [w1_s5kXj] \u []
                                          case w1_s5kXj of {
                                            (,) ts_s5kXp [Occ=Once] _ [Occ=Dead] -> ts_s5kXp;
                                          };
                                } in  (#,#) [sat_s5kXr sat_s5kXw];
                            GHC.Types.True ->
                                let {
                                  sat_s5kXF [Occ=Once] :: [a_a5j6i]
                                  [LclId] =
                                      [w1_s5kXj] \u []
                                          case w1_s5kXj of {
                                            (,) _ [Occ=Dead] fs_s5kXE [Occ=Once] -> fs_s5kXE;
                                          }; } in
                                let {
                                  sat_s5kXA [Occ=Once] :: [a_a5j6i]
                                  [LclId] =
                                      [w1_s5kXj] \u []
                                          case w1_s5kXj of {
                                            (,) ts_s5kXy [Occ=Once] _ [Occ=Dead] -> ts_s5kXy;
                                          }; } in
                                let {
                                  sat_s5kXB [Occ=Once] :: [a_a5j6i]
                                  [LclId] =
                                      CCCS :! [y_s5kXh sat_s5kXA];
                                } in  (#,#) [sat_s5kXB sat_s5kXF];
                          };
                  };
        } in 
          case $wgo_s5kXe xs_s5kXd of {
            (#,#) ww1_s5kXH [Occ=Once] ww2_s5kXI [Occ=Once] ->
                (,) [ww1_s5kXH ww2_s5kXI];
          };

Data.OldList.pairWithNil [InlPrag=INLINE[0] (sat-args=1)]
  :: forall acc y. acc -> (acc, [y])
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>m, Unf=OtherCon []] =
    [] \r [x_s5kXJ] (,) [x_s5kXJ GHC.Types.[]];

Data.OldList.mapAccumLF [InlPrag=INLINE[0] (sat-args=1)]
  :: forall acc x y.
     (acc -> x -> (acc, y))
     -> x -> (acc -> (acc, [y])) -> acc -> (acc, [y])
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,1*C1(C1(U(1*U,1*U)))><L,U><L,1*C1(U(1*U,1*U))><L,U>m,
 Unf=OtherCon []] =
    [] \r [f_s5kXK x1_s5kXL r_s5kXM v_s5kXN]
        let {
          ds_s5kXO [Dmd=<L,U(1*U,1*U)>] :: (acc_a5j4Z, y_a5j51)
          [LclId] =
              [f_s5kXK x1_s5kXL v_s5kXN] \u [] f_s5kXK v_s5kXN x1_s5kXL; } in
        let {
          ds1_s5kXP [Dmd=<L,U(1*U,1*U)>] :: (acc_a5j4Z, [y_a5j51])
          [LclId] =
              [r_s5kXM ds_s5kXO] \u []
                  let {
                    sat_s5kXT [Occ=Once] :: acc_a5j4Z
                    [LclId] =
                        [ds_s5kXO] \u []
                            case ds_s5kXO of {
                              (,) s'_s5kXR [Occ=Once] _ [Occ=Dead] -> s'_s5kXR;
                            };
                  } in  r_s5kXM sat_s5kXT; } in
        let {
          sat_s5kY5 [Occ=Once] :: [y_a5j51]
          [LclId] =
              [ds1_s5kXP] \u []
                  case ds1_s5kXP of {
                    (,) _ [Occ=Dead] ys_s5kY4 [Occ=Once] -> ys_s5kY4;
                  }; } in
        let {
          sat_s5kY1 [Occ=Once] :: y_a5j51
          [LclId] =
              [ds_s5kXO] \u []
                  case ds_s5kXO of {
                    (,) _ [Occ=Dead] y1_s5kY0 [Occ=Once] -> y1_s5kY0;
                  }; } in
        let {
          sat_s5kY6 [Occ=Once] :: [y_a5j51]
          [LclId] =
              CCCS :! [sat_s5kY1 sat_s5kY5]; } in
        let {
          sat_s5kXX [Occ=Once] :: acc_a5j4Z
          [LclId] =
              [ds1_s5kXP] \u []
                  case ds1_s5kXP of {
                    (,) s''_s5kXV [Occ=Once] _ [Occ=Dead] -> s''_s5kXV;
                  };
        } in  (,) [sat_s5kXX sat_s5kY6];

Data.OldList.$wmapAccumL [InlPrag=NOINLINE[1], Occ=LoopBreaker]
  :: forall acc x y.
     (acc -> x -> (acc, y)) -> acc -> [x] -> (# acc, [y] #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C1(U(1*U,1*U)))><L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_s5kY7 w1_s5kY8 w2_s5kY9]
        case w2_s5kY9 of {
          [] -> (#,#) [w1_s5kY8 GHC.Types.[]];
          : x1_s5kYb [Occ=Once] xs_s5kYc [Occ=Once] ->
              let {
                ds_s5kYd [Dmd=<L,U(1*U,1*U)>] :: (acc_s5kry, y_s5krA)
                [LclId] =
                    [w_s5kY7 w1_s5kY8 x1_s5kYb] \u [] w_s5kY7 w1_s5kY8 x1_s5kYb; } in
              let {
                ds1_s5kYe [Dmd=<L,U(1*U,1*U)>] :: (acc_s5kry, [y_s5krA])
                [LclId] =
                    [w_s5kY7 xs_s5kYc ds_s5kYd] \u []
                        let {
                          sat_s5kYi [Occ=Once] :: acc_s5kry
                          [LclId] =
                              [ds_s5kYd] \u []
                                  case ds_s5kYd of {
                                    (,) s'_s5kYg [Occ=Once] _ [Occ=Dead] -> s'_s5kYg;
                                  };
                        } in 
                          case Data.OldList.$wmapAccumL w_s5kY7 sat_s5kYi xs_s5kYc of {
                            (#,#) ww1_s5kYk [Occ=Once] ww2_s5kYl [Occ=Once] ->
                                (,) [ww1_s5kYk ww2_s5kYl];
                          }; } in
              let {
                sat_s5kYx [Occ=Once] :: [y_s5krA]
                [LclId] =
                    [ds1_s5kYe] \u []
                        case ds1_s5kYe of {
                          (,) _ [Occ=Dead] ys_s5kYw [Occ=Once] -> ys_s5kYw;
                        }; } in
              let {
                sat_s5kYt [Occ=Once] :: y_s5krA
                [LclId] =
                    [ds_s5kYd] \u []
                        case ds_s5kYd of {
                          (,) _ [Occ=Dead] y1_s5kYs [Occ=Once] -> y1_s5kYs;
                        }; } in
              let {
                sat_s5kYy [Occ=Once] :: [y_s5krA]
                [LclId] =
                    CCCS :! [sat_s5kYt sat_s5kYx]; } in
              let {
                sat_s5kYp [Occ=Once] :: acc_s5kry
                [LclId] =
                    [ds1_s5kYe] \u []
                        case ds1_s5kYe of {
                          (,) s''_s5kYn [Occ=Once] _ [Occ=Dead] -> s''_s5kYn;
                        };
              } in  (#,#) [sat_s5kYp sat_s5kYy];
        };

Data.OldList.mapAccumL [InlPrag=NOUSERINLINE[0]]
  :: forall acc x y.
     (acc -> x -> (acc, y)) -> acc -> [x] -> (acc, [y])
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C1(U(1*U,1*U)))><L,U><S,1*U>m,
 Unf=OtherCon []] =
    [] \r [w_s5kYz w1_s5kYA w2_s5kYB]
        case Data.OldList.$wmapAccumL w_s5kYz w1_s5kYA w2_s5kYB of {
          (#,#) ww1_s5kYD [Occ=Once] ww2_s5kYE [Occ=Once] ->
              (,) [ww1_s5kYD ww2_s5kYE];
        };

Data.OldList.$wmapAccumR [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: forall acc x y.
     (acc -> x -> (acc, y)) -> acc -> [x] -> (# acc, [y] #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C1(U(1*U,1*U)))><L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_s5kYF w1_s5kYG w2_s5kYH]
        case w2_s5kYH of {
          [] -> (#,#) [w1_s5kYG GHC.Types.[]];
          : x1_s5kYJ [Occ=Once] xs_s5kYK [Occ=Once] ->
              let {
                ds_s5kYL [Dmd=<L,U(1*U,1*U)>] :: (acc_s5kro, [y_s5krq])
                [LclId] =
                    [w_s5kYF w1_s5kYG xs_s5kYK] \u []
                        case Data.OldList.$wmapAccumR w_s5kYF w1_s5kYG xs_s5kYK of {
                          (#,#) ww1_s5kYN [Occ=Once] ww2_s5kYO [Occ=Once] ->
                              (,) [ww1_s5kYN ww2_s5kYO];
                        }; } in
              let {
                ds1_s5kYP [Dmd=<L,U(1*U,1*U)>] :: (acc_s5kro, y_s5krq)
                [LclId] =
                    [w_s5kYF x1_s5kYJ ds_s5kYL] \u []
                        let {
                          sat_s5kYT [Occ=Once] :: acc_s5kro
                          [LclId] =
                              [ds_s5kYL] \u []
                                  case ds_s5kYL of {
                                    (,) s'_s5kYR [Occ=Once] _ [Occ=Dead] -> s'_s5kYR;
                                  };
                        } in  w_s5kYF sat_s5kYT x1_s5kYJ; } in
              let {
                sat_s5kZ5 [Occ=Once] :: [y_s5krq]
                [LclId] =
                    [ds_s5kYL] \u []
                        case ds_s5kYL of {
                          (,) _ [Occ=Dead] ys_s5kZ4 [Occ=Once] -> ys_s5kZ4;
                        }; } in
              let {
                sat_s5kZ1 [Occ=Once] :: y_s5krq
                [LclId] =
                    [ds1_s5kYP] \u []
                        case ds1_s5kYP of {
                          (,) _ [Occ=Dead] y1_s5kZ0 [Occ=Once] -> y1_s5kZ0;
                        }; } in
              let {
                sat_s5kZ6 [Occ=Once] :: [y_s5krq]
                [LclId] =
                    CCCS :! [sat_s5kZ1 sat_s5kZ5]; } in
              let {
                sat_s5kYX [Occ=Once] :: acc_s5kro
                [LclId] =
                    [ds1_s5kYP] \u []
                        case ds1_s5kYP of {
                          (,) s''_s5kYV [Occ=Once] _ [Occ=Dead] -> s''_s5kYV;
                        };
              } in  (#,#) [sat_s5kYX sat_s5kZ6];
        };

Data.OldList.mapAccumR [InlPrag=NOUSERINLINE[0]]
  :: forall acc x y.
     (acc -> x -> (acc, y)) -> acc -> [x] -> (acc, [y])
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C1(U(1*U,1*U)))><L,U><S,1*U>m,
 Unf=OtherCon []] =
    [] \r [w_s5kZ7 w1_s5kZ8 w2_s5kZ9]
        case Data.OldList.$wmapAccumR w_s5kZ7 w1_s5kZ8 w2_s5kZ9 of {
          (#,#) ww1_s5kZb [Occ=Once] ww2_s5kZc [Occ=Once] ->
              (,) [ww1_s5kZb ww2_s5kZc];
        };

Data.OldList.insertBy [InlPrag=NOUSERINLINE[0]]
  :: forall a. (a -> a -> GHC.Types.Ordering) -> a -> [a] -> [a]
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><L,U><S,1*U>m2,
 Unf=OtherCon []] =
    [] \r [w_s5kZd w1_s5kZe w2_s5kZf]
        case Data.OldList.$winsertBy w_s5kZd w1_s5kZe w2_s5kZf of {
          (#,#) ww1_s5kZh [Occ=Once] ww2_s5kZi [Occ=Once] ->
              : [ww1_s5kZh ww2_s5kZi];
        };
Data.OldList.$winsertBy [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: forall a.
     (a -> a -> GHC.Types.Ordering) -> a -> [a] -> (# a, [a] #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_s5kZj w1_s5kZk w2_s5kZl]
        case w2_s5kZl of wild_s5kZm {
          [] -> (#,#) [w1_s5kZk GHC.Types.[]];
          : y_s5kZn ys'_s5kZo [Occ=Once] ->
              case w_s5kZj w1_s5kZk y_s5kZn of {
                __DEFAULT -> (#,#) [w1_s5kZk wild_s5kZm];
                GHC.Types.GT ->
                    let {
                      sat_s5kZq [Occ=Once] :: [a_s5krg]
                      [LclId] =
                          [w_s5kZj w1_s5kZk ys'_s5kZo] \u []
                              Data.OldList.insertBy w_s5kZj w1_s5kZk ys'_s5kZo;
                    } in  (#,#) [y_s5kZn sat_s5kZq];
              };
        };

Data.OldList.insert
  :: forall a. GHC.Classes.Ord a => a -> [a] -> [a]
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*U(A,1*C(C1(U)),A,A,A,A,A,A)><L,U><S,1*U>m2,
 Unf=OtherCon []] =
    [] \r [$dOrd_s5kZr e_s5kZs ls_s5kZt]
        let {
          sat_s5kZu [Occ=Once, Dmd=<L,C(C1(U))>]
            :: a_a5j4k -> a_a5j4k -> GHC.Types.Ordering
          [LclId] =
              [$dOrd_s5kZr] \u [] GHC.Classes.compare $dOrd_s5kZr;
        } in 
          case Data.OldList.$winsertBy sat_s5kZu e_s5kZs ls_s5kZt of {
            (#,#) ww1_s5kZw [Occ=Once] ww2_s5kZx [Occ=Once] ->
                : [ww1_s5kZw ww2_s5kZx];
          };

lvl_r5kSh :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "List.maximumBy: empty list"#;

Data.OldList.maximumBy1 :: forall a. a
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl_r5kSh of sat_s5kZy {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_s5kZy;
        };

Data.OldList.maximumBy
  :: forall a. (a -> a -> GHC.Types.Ordering) -> [a] -> a
[GblId, Arity=2, Str=<L,C(C1(U))><S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s5kZz ds1_s5kZA]
        case ds1_s5kZA of {
          [] -> Data.OldList.maximumBy1;
          : ipv_s5kZC [Occ=Once] ipv1_s5kZD [Occ=Once] ->
              let-no-escape {
                go_s5kZE [Occ=LoopBreakerT[2]] :: [a_a5j3S] -> a_a5j3S -> a_a5j3S
                [LclId[JoinId(2)], Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
                    sat-only [ds_s5kZz go_s5kZE] \r [ds2_s5kZF eta_s5kZG]
                        case ds2_s5kZF of {
                          [] -> eta_s5kZG;
                          : y_s5kZI ys_s5kZJ [Occ=Once] ->
                              let {
                                sat_s5kZL [Occ=Once] :: a_a5j3S
                                [LclId] =
                                    [ds_s5kZz eta_s5kZG y_s5kZI] \u []
                                        case ds_s5kZz eta_s5kZG y_s5kZI of {
                                          __DEFAULT -> y_s5kZI;
                                          GHC.Types.GT -> eta_s5kZG;
                                        };
                              } in  go_s5kZE ys_s5kZJ sat_s5kZL;
                        };
              } in  go_s5kZE ipv1_s5kZD ipv_s5kZC;
        };

lvl1_r5kSi :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "List.minimumBy: empty list"#;

Data.OldList.minimumBy1 :: forall a. a
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl1_r5kSi of sat_s5kZM {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_s5kZM;
        };

Data.OldList.minimumBy
  :: forall a. (a -> a -> GHC.Types.Ordering) -> [a] -> a
[GblId, Arity=2, Str=<L,C(C1(U))><S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s5kZN ds1_s5kZO]
        case ds1_s5kZO of {
          [] -> Data.OldList.minimumBy1;
          : ipv_s5kZQ [Occ=Once] ipv1_s5kZR [Occ=Once] ->
              let-no-escape {
                go_s5kZS [Occ=LoopBreakerT[2]] :: [a_a5j3v] -> a_a5j3v -> a_a5j3v
                [LclId[JoinId(2)], Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
                    sat-only [ds_s5kZN go_s5kZS] \r [ds2_s5kZT eta_s5kZU]
                        case ds2_s5kZT of {
                          [] -> eta_s5kZU;
                          : y_s5kZW ys_s5kZX [Occ=Once] ->
                              let {
                                sat_s5kZZ [Occ=Once] :: a_a5j3v
                                [LclId] =
                                    [ds_s5kZN eta_s5kZU y_s5kZW] \u []
                                        case ds_s5kZN eta_s5kZU y_s5kZW of {
                                          __DEFAULT -> eta_s5kZU;
                                          GHC.Types.GT -> y_s5kZW;
                                        };
                              } in  go_s5kZS ys_s5kZX sat_s5kZZ;
                        };
              } in  go_s5kZS ipv1_s5kZR ipv_s5kZQ;
        };

sat_s5l00 :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [1#];

sat_s5l01 :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_s5l00 GHC.Types.[]];

Data.OldList.genericLength2 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_s5l01;

Data.OldList.genericLength1 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True GHC.Types.[];

Data.OldList.strictGenericLength
  :: forall i b. GHC.Num.Num i => [b] -> i
[GblId,
 Arity=2,
 Str=<L,U(C(C1(U)),A,A,A,A,A,C(U))><S,1*U>,
 Unf=OtherCon []] =
    [] \r [$dNum_s5l02 l_s5l03]
        let {
          lvl12_s5l04 [Occ=OnceL] :: i_a5j2k
          [LclId] =
              [$dNum_s5l02] \u []
                  GHC.Num.fromInteger $dNum_s5l02 Data.OldList.genericLength2; } in
        let {
          sat_s5l0c [Occ=Once] :: i_a5j2k
          [LclId] =
              [$dNum_s5l02] \u []
                  GHC.Num.fromInteger $dNum_s5l02 Data.OldList.genericLength1;
        } in 
          let-no-escape {
            gl_s5l05 [Occ=LoopBreakerT[2]] :: [b_a5j2l] -> i_a5j2k -> i_a5j2k
            [LclId[JoinId(2)], Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
                sat-only [$dNum_s5l02 lvl12_s5l04 gl_s5l05] \r [ds_s5l06 a_s5l07]
                    case ds_s5l06 of {
                      [] -> a_s5l07;
                      : _ [Occ=Dead] xs_s5l0a [Occ=Once] ->
                          case GHC.Num.+ $dNum_s5l02 a_s5l07 lvl12_s5l04 of a'_s5l0b {
                            __DEFAULT -> gl_s5l05 xs_s5l0a a'_s5l0b;
                          };
                    };
          } in  gl_s5l05 l_s5l03 sat_s5l0c;

Data.OldList.genericLength [InlPrag=NOINLINE[1], Occ=LoopBreaker]
  :: forall i a. GHC.Num.Num i => [a] -> i
[GblId,
 Arity=2,
 Str=<S,U(C(C1(U)),A,A,A,A,A,C(U))><S,1*U>,
 Unf=OtherCon []] =
    [] \r [$dNum_s5l0d ds_s5l0e]
        case ds_s5l0e of {
          [] -> GHC.Num.fromInteger $dNum_s5l0d Data.OldList.genericLength1;
          : _ [Occ=Dead] l_s5l0h [Occ=Once] ->
              let {
                sat_s5l0j [Occ=Once] :: i_a5j3h
                [LclId] =
                    [$dNum_s5l0d l_s5l0h] \u []
                        Data.OldList.genericLength $dNum_s5l0d l_s5l0h; } in
              let {
                sat_s5l0i [Occ=Once] :: i_a5j3h
                [LclId] =
                    [$dNum_s5l0d] \u []
                        GHC.Num.fromInteger $dNum_s5l0d Data.OldList.genericLength2;
              } in  GHC.Num.+ $dNum_s5l0d sat_s5l0i sat_s5l0j;
        };

Data.OldList.genericTake [Occ=LoopBreaker]
  :: forall i a. GHC.Real.Integral i => i -> [a] -> [a]
[GblId,
 Arity=3,
 Str=<S(S(LS(LLLC(C(S))LLLL)L)LLLLLLLL),U(U(U(A,C(C1(U)),A,A,A,A,C(U)),U(A,A,A,C(C1(U)),A,A,A,A),A),A,A,A,A,A,A,A,A)><L,U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [$dIntegral_s5l0k eta_s5l0l eta1_s5l0m]
        case
            GHC.Real.$p1Integral $dIntegral_s5l0k
        of
        $dReal_s5l0n [Dmd=<S(LS(LLLC(C(S))LLLL)L),U(1*U(A,1*C1(C1(U)),A,A,A,A,C(U)),1*U(A,A,A,1*C1(C1(U)),A,A,A,A),A)>]
        { __DEFAULT ->
              let {
                $dNum_s5l0o [Dmd=<L,U(A,1*C1(C1(U)),A,A,A,A,C(U))>]
                  :: GHC.Num.Num i_a5j1U
                [LclId] =
                    [$dReal_s5l0n] \u [] GHC.Real.$p1Real $dReal_s5l0n; } in
              let {
                sat_s5l0q [Occ=Once] :: i_a5j1U
                [LclId] =
                    [$dNum_s5l0o] \u []
                        GHC.Num.fromInteger $dNum_s5l0o Data.OldList.genericLength1;
              } in 
                case GHC.Real.$p2Real $dReal_s5l0n of sat_s5l0p {
                  __DEFAULT ->
                      case GHC.Classes.<= sat_s5l0p eta_s5l0l sat_s5l0q of {
                        GHC.Types.False ->
                            case eta1_s5l0m of {
                              [] -> [] [];
                              : x_s5l0t [Occ=Once] xs_s5l0u [Occ=Once] ->
                                  let {
                                    sat_s5l0x [Occ=Once] :: [a_a5j1V]
                                    [LclId] =
                                        [$dIntegral_s5l0k eta_s5l0l $dNum_s5l0o xs_s5l0u] \u []
                                            let {
                                              sat_s5l0w [Occ=Once] :: i_a5j1U
                                              [LclId] =
                                                  [eta_s5l0l $dNum_s5l0o] \u []
                                                      let {
                                                        sat_s5l0v [Occ=Once] :: i_a5j1U
                                                        [LclId] =
                                                            [$dNum_s5l0o] \u []
                                                                GHC.Num.fromInteger
                                                                    $dNum_s5l0o
                                                                    Data.OldList.genericLength2;
                                                      } in 
                                                        GHC.Num.- $dNum_s5l0o eta_s5l0l sat_s5l0v;
                                            } in 
                                              Data.OldList.genericTake
                                                  $dIntegral_s5l0k sat_s5l0w xs_s5l0u;
                                  } in  : [x_s5l0t sat_s5l0x];
                            };
                        GHC.Types.True -> [] [];
                      };
                };
        };

Data.OldList.genericReplicate
  :: forall i a. GHC.Real.Integral i => i -> a -> [a]
[GblId,
 Arity=3,
 Str=<S(S(LS(LLLC(C(S))LLLL)L)LLLLLLLL),U(U(U(A,C(C1(U)),A,A,A,A,C(U)),U(A,A,A,C(C1(U)),A,A,A,A),A),A,A,A,A,A,A,A,A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dIntegral_s5l0y n_s5l0z x_s5l0A]
        let {
          sat_s5l0B [Occ=Once, Dmd=<L,1*U>] :: [a_a5j2c]
          [LclId] =
              [x_s5l0A] \s [] GHC.List.repeat x_s5l0A;
        } in  Data.OldList.genericTake $dIntegral_s5l0y n_s5l0z sat_s5l0B;

Data.OldList.genericDrop [Occ=LoopBreaker]
  :: forall i a. GHC.Real.Integral i => i -> [a] -> [a]
[GblId,
 Arity=3,
 Str=<S(S(LS(LLLC(C(S))LLLL)L)LLLLLLLL),U(U(U(A,C(C1(U)),A,A,A,A,C(U)),U(A,A,A,C(C1(U)),A,A,A,A),A),A,A,A,A,A,A,A,A)><L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [$dIntegral_s5l0C eta_s5l0D eta1_s5l0E]
        case
            GHC.Real.$p1Integral $dIntegral_s5l0C
        of
        $dReal_s5l0F [Dmd=<S(LS(LLLC(C(S))LLLL)L),U(1*U(A,1*C1(C1(U)),A,A,A,A,C(U)),1*U(A,A,A,1*C1(C1(U)),A,A,A,A),A)>]
        { __DEFAULT ->
              let {
                $dNum_s5l0G [Dmd=<L,U(A,1*C1(C1(U)),A,A,A,A,C(U))>]
                  :: GHC.Num.Num i_a5j1E
                [LclId] =
                    [$dReal_s5l0F] \u [] GHC.Real.$p1Real $dReal_s5l0F; } in
              let {
                sat_s5l0I [Occ=Once] :: i_a5j1E
                [LclId] =
                    [$dNum_s5l0G] \u []
                        GHC.Num.fromInteger $dNum_s5l0G Data.OldList.genericLength1;
              } in 
                case GHC.Real.$p2Real $dReal_s5l0F of sat_s5l0H {
                  __DEFAULT ->
                      case GHC.Classes.<= sat_s5l0H eta_s5l0D sat_s5l0I of {
                        GHC.Types.False ->
                            case eta1_s5l0E of {
                              [] -> [] [];
                              : _ [Occ=Dead] xs_s5l0M [Occ=Once] ->
                                  let {
                                    sat_s5l0O [Occ=Once] :: i_a5j1E
                                    [LclId] =
                                        [eta_s5l0D $dNum_s5l0G] \u []
                                            let {
                                              sat_s5l0N [Occ=Once] :: i_a5j1E
                                              [LclId] =
                                                  [$dNum_s5l0G] \u []
                                                      GHC.Num.fromInteger
                                                          $dNum_s5l0G Data.OldList.genericLength2;
                                            } in  GHC.Num.- $dNum_s5l0G eta_s5l0D sat_s5l0N;
                                  } in 
                                    Data.OldList.genericDrop $dIntegral_s5l0C sat_s5l0O xs_s5l0M;
                            };
                        GHC.Types.True -> eta1_s5l0E;
                      };
                };
        };

Data.OldList.$wgenericSplitAt [InlPrag=NOUSERINLINE[0],
                               Occ=LoopBreaker]
  :: forall i a. GHC.Real.Integral i => i -> [a] -> (# [a], [a] #)
[GblId,
 Arity=3,
 Str=<S(S(LS(LLLC(C(S))LLLL)L)LLLLLLLL),U(U(U(A,C(C1(U)),A,A,A,A,C(U)),U(A,A,A,C(C1(U)),A,A,A,A),A),A,A,A,A,A,A,A,A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [w_s5l0P w1_s5l0Q w2_s5l0R]
        case
            GHC.Real.$p1Integral w_s5l0P
        of
        $dReal_s5l0S [Dmd=<S(LS(LLLC(C(S))LLLL)L),U(1*U(A,1*C1(C1(U)),A,A,A,A,C(U)),1*U(A,A,A,1*C1(C1(U)),A,A,A,A),A)>]
        { __DEFAULT ->
              let {
                $dNum_s5l0T [Dmd=<L,U(A,1*C1(C1(U)),A,A,A,A,C(U))>]
                  :: GHC.Num.Num i_s5kqD
                [LclId] =
                    [$dReal_s5l0S] \u [] GHC.Real.$p1Real $dReal_s5l0S; } in
              let {
                sat_s5l0V [Occ=Once] :: i_s5kqD
                [LclId] =
                    [$dNum_s5l0T] \u []
                        GHC.Num.fromInteger $dNum_s5l0T Data.OldList.genericLength1;
              } in 
                case GHC.Real.$p2Real $dReal_s5l0S of sat_s5l0U {
                  __DEFAULT ->
                      case GHC.Classes.<= sat_s5l0U w1_s5l0Q sat_s5l0V of {
                        GHC.Types.False ->
                            case w2_s5l0R of {
                              [] -> (#,#) [GHC.Types.[] GHC.Types.[]];
                              : x_s5l0Y [Occ=Once] xs_s5l0Z [Occ=Once] ->
                                  let {
                                    ds_s5l10 [Dmd=<L,U(1*U,1*U)>] :: ([a_s5kqE], [a_s5kqE])
                                    [LclId] =
                                        [w_s5l0P w1_s5l0Q $dNum_s5l0T xs_s5l0Z] \u []
                                            let {
                                              sat_s5l12 [Occ=Once] :: i_s5kqD
                                              [LclId] =
                                                  [w1_s5l0Q $dNum_s5l0T] \u []
                                                      let {
                                                        sat_s5l11 [Occ=Once] :: i_s5kqD
                                                        [LclId] =
                                                            [$dNum_s5l0T] \u []
                                                                GHC.Num.fromInteger
                                                                    $dNum_s5l0T
                                                                    Data.OldList.genericLength2;
                                                      } in 
                                                        GHC.Num.- $dNum_s5l0T w1_s5l0Q sat_s5l11;
                                            } in 
                                              case
                                                  Data.OldList.$wgenericSplitAt
                                                      w_s5l0P sat_s5l12 xs_s5l0Z
                                              of
                                              { (#,#) ww1_s5l14 [Occ=Once] ww2_s5l15 [Occ=Once] ->
                                                    (,) [ww1_s5l14 ww2_s5l15];
                                              }; } in
                                  let {
                                    sat_s5l1e [Occ=Once] :: [a_s5kqE]
                                    [LclId] =
                                        [ds_s5l10] \u []
                                            case ds_s5l10 of {
                                              (,) _ [Occ=Dead] xs''_s5l1d [Occ=Once] -> xs''_s5l1d;
                                            }; } in
                                  let {
                                    sat_s5l19 [Occ=Once] :: [a_s5kqE]
                                    [LclId] =
                                        [ds_s5l10] \u []
                                            case ds_s5l10 of {
                                              (,) xs'_s5l17 [Occ=Once] _ [Occ=Dead] -> xs'_s5l17;
                                            }; } in
                                  let {
                                    sat_s5l1a [Occ=Once] :: [a_s5kqE]
                                    [LclId] =
                                        CCCS :! [x_s5l0Y sat_s5l19];
                                  } in  (#,#) [sat_s5l1a sat_s5l1e];
                            };
                        GHC.Types.True -> (#,#) [GHC.Types.[] w2_s5l0R];
                      };
                };
        };

Data.OldList.genericSplitAt [InlPrag=NOUSERINLINE[0]]
  :: forall i a. GHC.Real.Integral i => i -> [a] -> ([a], [a])
[GblId,
 Arity=3,
 Str=<S(S(LS(LLLC(C(S))LLLL)L)LLLLLLLL),U(U(U(A,C(C1(U)),A,A,A,A,C(U)),U(A,A,A,C(C1(U)),A,A,A,A),A),A,A,A,A,A,A,A,A)><L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [w_s5l1f w1_s5l1g w2_s5l1h]
        case Data.OldList.$wgenericSplitAt w_s5l1f w1_s5l1g w2_s5l1h of {
          (#,#) ww1_s5l1j [Occ=Once] ww2_s5l1k [Occ=Once] ->
              (,) [ww1_s5l1j ww2_s5l1k];
        };

lvl2_r5kSj :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "List.genericIndex: negative argument."#;

lvl3_r5kSk :: forall a. a
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl2_r5kSj of sat_s5l1l {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_s5l1l;
        };

lvl4_r5kSl :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "List.genericIndex: index too large."#;

lvl5_r5kSm :: forall a. a
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl4_r5kSl of sat_s5l1m {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_s5l1m;
        };

Data.OldList.genericIndex [Occ=LoopBreaker]
  :: forall i a. GHC.Real.Integral i => [a] -> i -> a
[GblId,
 Arity=3,
 Str=<S(S(LS(S(C(C(S))L)LLLLLLL)L)LLLLLLLL),U(U(U(A,C(C1(U)),A,A,A,A,C(U)),U(U(C(C1(U)),A),A,A,A,C(C1(U)),A,A,A),A),A,A,A,A,A,A,A,A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dIntegral_s5l1n eta_s5l1o eta1_s5l1p]
        case eta_s5l1o of {
          [] -> lvl5_r5kSm;
          : x_s5l1r [Occ=Once] ds_s5l1s [Occ=Once] ->
              case
                  GHC.Real.$p1Integral $dIntegral_s5l1n
              of
              $dReal_s5l1t [Dmd=<S(LS(S(C(C(S))L)LLLLLLL)L),U(1*U(A,1*C1(C1(U)),A,A,A,A,C(U)),1*U(1*U(1*C1(C1(U)),A),A,A,A,1*C1(C1(U)),A,A,A),A)>]
              { __DEFAULT ->
                    let {
                      $dNum_s5l1u [Dmd=<L,U(A,1*C1(C1(U)),A,A,A,A,C(U))>]
                        :: GHC.Num.Num i_a5j0L
                      [LclId] =
                          [$dReal_s5l1t] \u [] GHC.Real.$p1Real $dReal_s5l1t;
                    } in 
                      case
                          GHC.Real.$p2Real $dReal_s5l1t
                      of
                      $dOrd_s5l1v [Dmd=<S(S(C(C(S))L)LLLLLLL),U(1*U(1*C1(C1(U)),A),A,A,A,1*C1(C1(U)),A,A,A)>]
                      { __DEFAULT ->
                            let {
                              sat_s5l1x [Occ=Once] :: i_a5j0L
                              [LclId] =
                                  [$dNum_s5l1u] \u []
                                      GHC.Num.fromInteger $dNum_s5l1u Data.OldList.genericLength1;
                            } in 
                              case GHC.Classes.$p1Ord $dOrd_s5l1v of sat_s5l1w {
                                __DEFAULT ->
                                    case GHC.Classes.== sat_s5l1w eta1_s5l1p sat_s5l1x of {
                                      GHC.Types.False ->
                                          let {
                                            sat_s5l1z [Occ=Once] :: i_a5j0L
                                            [LclId] =
                                                [$dNum_s5l1u] \u []
                                                    GHC.Num.fromInteger
                                                        $dNum_s5l1u Data.OldList.genericLength1;
                                          } in 
                                            case GHC.Classes.> $dOrd_s5l1v eta1_s5l1p sat_s5l1z of {
                                              GHC.Types.False -> lvl3_r5kSk;
                                              GHC.Types.True ->
                                                  let {
                                                    sat_s5l1C [Occ=Once] :: i_a5j0L
                                                    [LclId] =
                                                        [eta1_s5l1p $dNum_s5l1u] \u []
                                                            let {
                                                              sat_s5l1B [Occ=Once] :: i_a5j0L
                                                              [LclId] =
                                                                  [$dNum_s5l1u] \u []
                                                                      GHC.Num.fromInteger
                                                                          $dNum_s5l1u
                                                                          Data.OldList.genericLength2;
                                                            } in 
                                                              GHC.Num.-
                                                                  $dNum_s5l1u eta1_s5l1p sat_s5l1B;
                                                  } in 
                                                    Data.OldList.genericIndex
                                                        $dIntegral_s5l1n ds_s5l1s sat_s5l1C;
                                            };
                                      GHC.Types.True -> x_s5l1r;
                                    };
                              };
                      };
              };
        };

Data.OldList.zipWith4 [Occ=LoopBreaker]
  :: forall a b c d e.
     (a -> b -> c -> d -> e) -> [a] -> [b] -> [c] -> [d] -> [e]
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,C(C1(C1(C1(U))))><S,1*U><L,1*U><L,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [z_s5l1D ds_s5l1E ds1_s5l1F ds2_s5l1G ds3_s5l1H]
        case ds_s5l1E of {
          [] -> [] [];
          : a1_s5l1J [Occ=Once] as_s5l1K [Occ=Once] ->
              case ds1_s5l1F of {
                [] -> [] [];
                : b1_s5l1M [Occ=Once] bs_s5l1N [Occ=Once] ->
                    case ds2_s5l1G of {
                      [] -> [] [];
                      : c1_s5l1P [Occ=Once] cs_s5l1Q [Occ=Once] ->
                          case ds3_s5l1H of {
                            [] -> [] [];
                            : d1_s5l1S [Occ=Once] ds4_s5l1T [Occ=Once] ->
                                let {
                                  sat_s5l1V [Occ=Once] :: [e_a5iZr]
                                  [LclId] =
                                      [z_s5l1D as_s5l1K bs_s5l1N cs_s5l1Q ds4_s5l1T] \u []
                                          Data.OldList.zipWith4
                                              z_s5l1D as_s5l1K bs_s5l1N cs_s5l1Q ds4_s5l1T; } in
                                let {
                                  sat_s5l1U [Occ=Once] :: e_a5iZr
                                  [LclId] =
                                      [z_s5l1D a1_s5l1J b1_s5l1M c1_s5l1P d1_s5l1S] \u []
                                          z_s5l1D a1_s5l1J b1_s5l1M c1_s5l1P d1_s5l1S;
                                } in  : [sat_s5l1U sat_s5l1V];
                          };
                    };
              };
        };

Data.OldList.zip4
  :: forall a b c d. [a] -> [b] -> [c] -> [d] -> [(a, b, c, d)]
[GblId, Arity=4, Caf=NoCafRefs, Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        Data.OldList.zipWith4 GHC.Tuple.(,,,) eta_B4 eta_B3 eta_B2 eta_B1;

Data.OldList.zipWith5 [Occ=LoopBreaker]
  :: forall a b c d e f.
     (a -> b -> c -> d -> e -> f)
     -> [a] -> [b] -> [c] -> [d] -> [e] -> [f]
[GblId,
 Arity=6,
 Caf=NoCafRefs,
 Str=<L,C(C1(C1(C1(C1(U)))))><S,1*U><L,1*U><L,1*U><L,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [z_s5l1W ds_s5l1X ds1_s5l1Y ds2_s5l1Z ds3_s5l20 ds4_s5l21]
        case ds_s5l1X of {
          [] -> [] [];
          : a1_s5l23 [Occ=Once] as_s5l24 [Occ=Once] ->
              case ds1_s5l1Y of {
                [] -> [] [];
                : b1_s5l26 [Occ=Once] bs_s5l27 [Occ=Once] ->
                    case ds2_s5l1Z of {
                      [] -> [] [];
                      : c1_s5l29 [Occ=Once] cs_s5l2a [Occ=Once] ->
                          case ds3_s5l20 of {
                            [] -> [] [];
                            : d1_s5l2c [Occ=Once] ds5_s5l2d [Occ=Once] ->
                                case ds4_s5l21 of {
                                  [] -> [] [];
                                  : e1_s5l2f [Occ=Once] es_s5l2g [Occ=Once] ->
                                      let {
                                        sat_s5l2i [Occ=Once] :: [f_a5iZe]
                                        [LclId] =
                                            [z_s5l1W
                                             as_s5l24
                                             bs_s5l27
                                             cs_s5l2a
                                             ds5_s5l2d
                                             es_s5l2g] \u []
                                                Data.OldList.zipWith5
                                                    z_s5l1W
                                                    as_s5l24
                                                    bs_s5l27
                                                    cs_s5l2a
                                                    ds5_s5l2d
                                                    es_s5l2g; } in
                                      let {
                                        sat_s5l2h [Occ=Once] :: f_a5iZe
                                        [LclId] =
                                            [z_s5l1W
                                             a1_s5l23
                                             b1_s5l26
                                             c1_s5l29
                                             d1_s5l2c
                                             e1_s5l2f] \u []
                                                z_s5l1W
                                                    a1_s5l23 b1_s5l26 c1_s5l29 d1_s5l2c e1_s5l2f;
                                      } in  : [sat_s5l2h sat_s5l2i];
                                };
                          };
                    };
              };
        };

Data.OldList.zip5
  :: forall a b c d e.
     [a] -> [b] -> [c] -> [d] -> [e] -> [(a, b, c, d, e)]
[GblId, Arity=5, Caf=NoCafRefs, Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        Data.OldList.zipWith5
            GHC.Tuple.(,,,,) eta_B5 eta_B4 eta_B3 eta_B2 eta_B1;

Data.OldList.zipWith6 [Occ=LoopBreaker]
  :: forall a b c d e f g.
     (a -> b -> c -> d -> e -> f -> g)
     -> [a] -> [b] -> [c] -> [d] -> [e] -> [f] -> [g]
[GblId,
 Arity=7,
 Caf=NoCafRefs,
 Str=<L,C(C1(C1(C1(C1(C1(U))))))><S,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [z_s5l2j
           ds_s5l2k
           ds1_s5l2l
           ds2_s5l2m
           ds3_s5l2n
           ds4_s5l2o
           ds5_s5l2p]
        case ds_s5l2k of {
          [] -> [] [];
          : a1_s5l2r [Occ=Once] as_s5l2s [Occ=Once] ->
              case ds1_s5l2l of {
                [] -> [] [];
                : b1_s5l2u [Occ=Once] bs_s5l2v [Occ=Once] ->
                    case ds2_s5l2m of {
                      [] -> [] [];
                      : c1_s5l2x [Occ=Once] cs_s5l2y [Occ=Once] ->
                          case ds3_s5l2n of {
                            [] -> [] [];
                            : d1_s5l2A [Occ=Once] ds6_s5l2B [Occ=Once] ->
                                case ds4_s5l2o of {
                                  [] -> [] [];
                                  : e1_s5l2D [Occ=Once] es_s5l2E [Occ=Once] ->
                                      case ds5_s5l2p of {
                                        [] -> [] [];
                                        : f1_s5l2G [Occ=Once] fs_s5l2H [Occ=Once] ->
                                            let {
                                              sat_s5l2J [Occ=Once] :: [g_a5iYZ]
                                              [LclId] =
                                                  [z_s5l2j
                                                   as_s5l2s
                                                   bs_s5l2v
                                                   cs_s5l2y
                                                   ds6_s5l2B
                                                   es_s5l2E
                                                   fs_s5l2H] \u []
                                                      Data.OldList.zipWith6
                                                          z_s5l2j
                                                          as_s5l2s
                                                          bs_s5l2v
                                                          cs_s5l2y
                                                          ds6_s5l2B
                                                          es_s5l2E
                                                          fs_s5l2H; } in
                                            let {
                                              sat_s5l2I [Occ=Once] :: g_a5iYZ
                                              [LclId] =
                                                  [z_s5l2j
                                                   a1_s5l2r
                                                   b1_s5l2u
                                                   c1_s5l2x
                                                   d1_s5l2A
                                                   e1_s5l2D
                                                   f1_s5l2G] \u []
                                                      z_s5l2j
                                                          a1_s5l2r
                                                          b1_s5l2u
                                                          c1_s5l2x
                                                          d1_s5l2A
                                                          e1_s5l2D
                                                          f1_s5l2G;
                                            } in  : [sat_s5l2I sat_s5l2J];
                                      };
                                };
                          };
                    };
              };
        };

Data.OldList.zip6
  :: forall a b c d e f.
     [a] -> [b] -> [c] -> [d] -> [e] -> [f] -> [(a, b, c, d, e, f)]
[GblId, Arity=6, Caf=NoCafRefs, Unf=OtherCon []] =
    [] \r [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        Data.OldList.zipWith6
            GHC.Tuple.(,,,,,) eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1;

Data.OldList.zipWith7 [Occ=LoopBreaker]
  :: forall a b c d e f g h.
     (a -> b -> c -> d -> e -> f -> g -> h)
     -> [a] -> [b] -> [c] -> [d] -> [e] -> [f] -> [g] -> [h]
[GblId,
 Arity=8,
 Caf=NoCafRefs,
 Str=<L,C(C1(C1(C1(C1(C1(C1(U)))))))><S,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [z_s5l2K
           ds_s5l2L
           ds1_s5l2M
           ds2_s5l2N
           ds3_s5l2O
           ds4_s5l2P
           ds5_s5l2Q
           ds6_s5l2R]
        case ds_s5l2L of {
          [] -> [] [];
          : a1_s5l2T [Occ=Once] as_s5l2U [Occ=Once] ->
              case ds1_s5l2M of {
                [] -> [] [];
                : b1_s5l2W [Occ=Once] bs_s5l2X [Occ=Once] ->
                    case ds2_s5l2N of {
                      [] -> [] [];
                      : c1_s5l2Z [Occ=Once] cs_s5l30 [Occ=Once] ->
                          case ds3_s5l2O of {
                            [] -> [] [];
                            : d1_s5l32 [Occ=Once] ds7_s5l33 [Occ=Once] ->
                                case ds4_s5l2P of {
                                  [] -> [] [];
                                  : e1_s5l35 [Occ=Once] es_s5l36 [Occ=Once] ->
                                      case ds5_s5l2Q of {
                                        [] -> [] [];
                                        : f1_s5l38 [Occ=Once] fs_s5l39 [Occ=Once] ->
                                            case ds6_s5l2R of {
                                              [] -> [] [];
                                              : g1_s5l3b [Occ=Once] gs_s5l3c [Occ=Once] ->
                                                  let {
                                                    sat_s5l3e [Occ=Once] :: [h_a5iYI]
                                                    [LclId] =
                                                        [z_s5l2K
                                                         as_s5l2U
                                                         bs_s5l2X
                                                         cs_s5l30
                                                         ds7_s5l33
                                                         es_s5l36
                                                         fs_s5l39
                                                         gs_s5l3c] \u []
                                                            Data.OldList.zipWith7
                                                                z_s5l2K
                                                                as_s5l2U
                                                                bs_s5l2X
                                                                cs_s5l30
                                                                ds7_s5l33
                                                                es_s5l36
                                                                fs_s5l39
                                                                gs_s5l3c; } in
                                                  let {
                                                    sat_s5l3d [Occ=Once] :: h_a5iYI
                                                    [LclId] =
                                                        [z_s5l2K
                                                         a1_s5l2T
                                                         b1_s5l2W
                                                         c1_s5l2Z
                                                         d1_s5l32
                                                         e1_s5l35
                                                         f1_s5l38
                                                         g1_s5l3b] \u []
                                                            z_s5l2K
                                                                a1_s5l2T
                                                                b1_s5l2W
                                                                c1_s5l2Z
                                                                d1_s5l32
                                                                e1_s5l35
                                                                f1_s5l38
                                                                g1_s5l3b;
                                                  } in  : [sat_s5l3d sat_s5l3e];
                                            };
                                      };
                                };
                          };
                    };
              };
        };

Data.OldList.zip7
  :: forall a b c d e f g.
     [a]
     -> [b]
     -> [c]
     -> [d]
     -> [e]
     -> [f]
     -> [g]
     -> [(a, b, c, d, e, f, g)]
[GblId, Arity=7, Caf=NoCafRefs, Unf=OtherCon []] =
    [] \r [eta_B7 eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        Data.OldList.zipWith7
            GHC.Tuple.(,,,,,,)
            eta_B7
            eta_B6
            eta_B5
            eta_B4
            eta_B3
            eta_B2
            eta_B1;

Data.OldList.$wunzip4 [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: forall a b c d. [(a, b, c, d)] -> (# [a], [b], [c], [d] #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [w_s5l3f]
        case w_s5l3f of {
          [] ->
              (#,,,#) [GHC.Types.[] GHC.Types.[] GHC.Types.[] GHC.Types.[]];
          : y_s5l3h [Occ=Once!] ys_s5l3i [Occ=Once] ->
              case y_s5l3h of {
                (,,,) a1_s5l3k [Occ=Once]
                      b1_s5l3l [Occ=Once]
                      c1_s5l3m [Occ=Once]
                      d1_s5l3n [Occ=Once] ->
                    let {
                      ds_s5l3o [Dmd=<L,U(1*U,1*U,1*U,1*U)>]
                        :: ([a_s5kpz], [b_s5kpA], [c_s5kpB], [d_s5kpC])
                      [LclId] =
                          [ys_s5l3i] \u []
                              case Data.OldList.$wunzip4 ys_s5l3i of {
                                (#,,,#) ww1_s5l3q [Occ=Once]
                                        ww2_s5l3r [Occ=Once]
                                        ww3_s5l3s [Occ=Once]
                                        ww4_s5l3t [Occ=Once] ->
                                    (,,,) [ww1_s5l3q ww2_s5l3r ww3_s5l3s ww4_s5l3t];
                              }; } in
                    let {
                      sat_s5l3U [Occ=Once] :: [d_s5kpC]
                      [LclId] =
                          [ds_s5l3o] \u []
                              case ds_s5l3o of {
                                (,,,) _ [Occ=Dead]
                                      _ [Occ=Dead]
                                      _ [Occ=Dead]
                                      ds1_s5l3T [Occ=Once] ->
                                    ds1_s5l3T;
                              }; } in
                    let {
                      sat_s5l3V [Occ=Once] :: [d_s5kpC]
                      [LclId] =
                          CCCS :! [d1_s5l3n sat_s5l3U]; } in
                    let {
                      sat_s5l3N [Occ=Once] :: [c_s5kpB]
                      [LclId] =
                          [ds_s5l3o] \u []
                              case ds_s5l3o of {
                                (,,,) _ [Occ=Dead] _ [Occ=Dead] cs_s5l3L [Occ=Once] _ [Occ=Dead] ->
                                    cs_s5l3L;
                              }; } in
                    let {
                      sat_s5l3O [Occ=Once] :: [c_s5kpB]
                      [LclId] =
                          CCCS :! [c1_s5l3m sat_s5l3N]; } in
                    let {
                      sat_s5l3G [Occ=Once] :: [b_s5kpA]
                      [LclId] =
                          [ds_s5l3o] \u []
                              case ds_s5l3o of {
                                (,,,) _ [Occ=Dead] bs_s5l3D [Occ=Once] _ [Occ=Dead] _ [Occ=Dead] ->
                                    bs_s5l3D;
                              }; } in
                    let {
                      sat_s5l3H [Occ=Once] :: [b_s5kpA]
                      [LclId] =
                          CCCS :! [b1_s5l3l sat_s5l3G]; } in
                    let {
                      sat_s5l3z [Occ=Once] :: [a_s5kpz]
                      [LclId] =
                          [ds_s5l3o] \u []
                              case ds_s5l3o of {
                                (,,,) as_s5l3v [Occ=Once] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
                                    as_s5l3v;
                              }; } in
                    let {
                      sat_s5l3A [Occ=Once] :: [a_s5kpz]
                      [LclId] =
                          CCCS :! [a1_s5l3k sat_s5l3z];
                    } in  (#,,,#) [sat_s5l3A sat_s5l3H sat_s5l3O sat_s5l3V];
              };
        };

Data.OldList.unzip4 [InlPrag=NOUSERINLINE[0]]
  :: forall a b c d. [(a, b, c, d)] -> ([a], [b], [c], [d])
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [w_s5l3W]
        case Data.OldList.$wunzip4 w_s5l3W of {
          (#,,,#) ww1_s5l3Y [Occ=Once]
                  ww2_s5l3Z [Occ=Once]
                  ww3_s5l40 [Occ=Once]
                  ww4_s5l41 [Occ=Once] ->
              (,,,) [ww1_s5l3Y ww2_s5l3Z ww3_s5l40 ww4_s5l41];
        };

Data.OldList.$wunzip5 [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: forall a b c d e.
     [(a, b, c, d, e)] -> (# [a], [b], [c], [d], [e] #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [w_s5l42]
        case w_s5l42 of {
          [] ->
              (#,,,,#) [GHC.Types.[]
                        GHC.Types.[]
                        GHC.Types.[]
                        GHC.Types.[]
                        GHC.Types.[]];
          : y_s5l44 [Occ=Once!] ys_s5l45 [Occ=Once] ->
              case y_s5l44 of {
                (,,,,) a1_s5l47 [Occ=Once]
                       b1_s5l48 [Occ=Once]
                       c1_s5l49 [Occ=Once]
                       d1_s5l4a [Occ=Once]
                       e1_s5l4b [Occ=Once] ->
                    let {
                      ds_s5l4c [Dmd=<L,U(1*U,1*U,1*U,1*U,1*U)>]
                        :: ([a_s5kpp], [b_s5kpq], [c_s5kpr], [d_s5kps], [e_s5kpt])
                      [LclId] =
                          [ys_s5l45] \u []
                              case Data.OldList.$wunzip5 ys_s5l45 of {
                                (#,,,,#) ww1_s5l4e [Occ=Once]
                                         ww2_s5l4f [Occ=Once]
                                         ww3_s5l4g [Occ=Once]
                                         ww4_s5l4h [Occ=Once]
                                         ww5_s5l4i [Occ=Once] ->
                                    (,,,,) [ww1_s5l4e ww2_s5l4f ww3_s5l4g ww4_s5l4h ww5_s5l4i];
                              }; } in
                    let {
                      sat_s5l4V [Occ=Once] :: [e_s5kpt]
                      [LclId] =
                          [ds_s5l4c] \u []
                              case ds_s5l4c of {
                                (,,,,) _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       es_s5l4U [Occ=Once] ->
                                    es_s5l4U;
                              }; } in
                    let {
                      sat_s5l4W [Occ=Once] :: [e_s5kpt]
                      [LclId] =
                          CCCS :! [e1_s5l4b sat_s5l4V]; } in
                    let {
                      sat_s5l4N [Occ=Once] :: [d_s5kps]
                      [LclId] =
                          [ds_s5l4c] \u []
                              case ds_s5l4c of {
                                (,,,,) _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds1_s5l4L [Occ=Once]
                                       _ [Occ=Dead] ->
                                    ds1_s5l4L;
                              }; } in
                    let {
                      sat_s5l4O [Occ=Once] :: [d_s5kps]
                      [LclId] =
                          CCCS :! [d1_s5l4a sat_s5l4N]; } in
                    let {
                      sat_s5l4F [Occ=Once] :: [c_s5kpr]
                      [LclId] =
                          [ds_s5l4c] \u []
                              case ds_s5l4c of {
                                (,,,,) _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       cs_s5l4C [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
                                    cs_s5l4C;
                              }; } in
                    let {
                      sat_s5l4G [Occ=Once] :: [c_s5kpr]
                      [LclId] =
                          CCCS :! [c1_s5l49 sat_s5l4F]; } in
                    let {
                      sat_s5l4x [Occ=Once] :: [b_s5kpq]
                      [LclId] =
                          [ds_s5l4c] \u []
                              case ds_s5l4c of {
                                (,,,,) _ [Occ=Dead]
                                       bs_s5l4t [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
                                    bs_s5l4t;
                              }; } in
                    let {
                      sat_s5l4y [Occ=Once] :: [b_s5kpq]
                      [LclId] =
                          CCCS :! [b1_s5l48 sat_s5l4x]; } in
                    let {
                      sat_s5l4p [Occ=Once] :: [a_s5kpp]
                      [LclId] =
                          [ds_s5l4c] \u []
                              case ds_s5l4c of {
                                (,,,,) as_s5l4k [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
                                    as_s5l4k;
                              }; } in
                    let {
                      sat_s5l4q [Occ=Once] :: [a_s5kpp]
                      [LclId] =
                          CCCS :! [a1_s5l47 sat_s5l4p];
                    } in  (#,,,,#) [sat_s5l4q sat_s5l4y sat_s5l4G sat_s5l4O sat_s5l4W];
              };
        };

Data.OldList.unzip5 [InlPrag=NOUSERINLINE[0]]
  :: forall a b c d e. [(a, b, c, d, e)] -> ([a], [b], [c], [d], [e])
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [w_s5l4X]
        case Data.OldList.$wunzip5 w_s5l4X of {
          (#,,,,#) ww1_s5l4Z [Occ=Once]
                   ww2_s5l50 [Occ=Once]
                   ww3_s5l51 [Occ=Once]
                   ww4_s5l52 [Occ=Once]
                   ww5_s5l53 [Occ=Once] ->
              (,,,,) [ww1_s5l4Z ww2_s5l50 ww3_s5l51 ww4_s5l52 ww5_s5l53];
        };

Data.OldList.$wunzip6 [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: forall a b c d e f.
     [(a, b, c, d, e, f)] -> (# [a], [b], [c], [d], [e], [f] #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [w_s5l54]
        case w_s5l54 of {
          [] ->
              (#,,,,,#) [GHC.Types.[]
                         GHC.Types.[]
                         GHC.Types.[]
                         GHC.Types.[]
                         GHC.Types.[]
                         GHC.Types.[]];
          : y_s5l56 [Occ=Once!] ys_s5l57 [Occ=Once] ->
              case y_s5l56 of {
                (,,,,,) a1_s5l59 [Occ=Once]
                        b1_s5l5a [Occ=Once]
                        c1_s5l5b [Occ=Once]
                        d1_s5l5c [Occ=Once]
                        e1_s5l5d [Occ=Once]
                        f1_s5l5e [Occ=Once] ->
                    let {
                      ds_s5l5f [Dmd=<L,U(1*U,1*U,1*U,1*U,1*U,1*U)>]
                        :: ([a_s5kpe], [b_s5kpf], [c_s5kpg], [d_s5kph], [e_s5kpi],
                            [f_s5kpj])
                      [LclId] =
                          [ys_s5l57] \u []
                              case Data.OldList.$wunzip6 ys_s5l57 of {
                                (#,,,,,#) ww1_s5l5h [Occ=Once]
                                          ww2_s5l5i [Occ=Once]
                                          ww3_s5l5j [Occ=Once]
                                          ww4_s5l5k [Occ=Once]
                                          ww5_s5l5l [Occ=Once]
                                          ww6_s5l5m [Occ=Once] ->
                                    (,,,,,) [ww1_s5l5h
                                             ww2_s5l5i
                                             ww3_s5l5j
                                             ww4_s5l5k
                                             ww5_s5l5l
                                             ww6_s5l5m];
                              }; } in
                    let {
                      sat_s5l6d [Occ=Once] :: [f_s5kpj]
                      [LclId] =
                          [ds_s5l5f] \u []
                              case ds_s5l5f of {
                                (,,,,,) _ [Occ=Dead]
                                        _ [Occ=Dead]
                                        _ [Occ=Dead]
                                        _ [Occ=Dead]
                                        _ [Occ=Dead]
                                        fs_s5l6c [Occ=Once] ->
                                    fs_s5l6c;
                              }; } in
                    let {
                      sat_s5l6e [Occ=Once] :: [f_s5kpj]
                      [LclId] =
                          CCCS :! [f1_s5l5e sat_s5l6d]; } in
                    let {
                      sat_s5l64 [Occ=Once] :: [e_s5kpi]
                      [LclId] =
                          [ds_s5l5f] \u []
                              case ds_s5l5f of {
                                (,,,,,) _ [Occ=Dead]
                                        _ [Occ=Dead]
                                        _ [Occ=Dead]
                                        _ [Occ=Dead]
                                        es_s5l62 [Occ=Once]
                                        _ [Occ=Dead] ->
                                    es_s5l62;
                              }; } in
                    let {
                      sat_s5l65 [Occ=Once] :: [e_s5kpi]
                      [LclId] =
                          CCCS :! [e1_s5l5d sat_s5l64]; } in
                    let {
                      sat_s5l5V [Occ=Once] :: [d_s5kph]
                      [LclId] =
                          [ds_s5l5f] \u []
                              case ds_s5l5f of {
                                (,,,,,) _ [Occ=Dead]
                                        _ [Occ=Dead]
                                        _ [Occ=Dead]
                                        ds1_s5l5S [Occ=Once]
                                        _ [Occ=Dead]
                                        _ [Occ=Dead] ->
                                    ds1_s5l5S;
                              }; } in
                    let {
                      sat_s5l5W [Occ=Once] :: [d_s5kph]
                      [LclId] =
                          CCCS :! [d1_s5l5c sat_s5l5V]; } in
                    let {
                      sat_s5l5M [Occ=Once] :: [c_s5kpg]
                      [LclId] =
                          [ds_s5l5f] \u []
                              case ds_s5l5f of {
                                (,,,,,) _ [Occ=Dead]
                                        _ [Occ=Dead]
                                        cs_s5l5I [Occ=Once]
                                        _ [Occ=Dead]
                                        _ [Occ=Dead]
                                        _ [Occ=Dead] ->
                                    cs_s5l5I;
                              }; } in
                    let {
                      sat_s5l5N [Occ=Once] :: [c_s5kpg]
                      [LclId] =
                          CCCS :! [c1_s5l5b sat_s5l5M]; } in
                    let {
                      sat_s5l5D [Occ=Once] :: [b_s5kpf]
                      [LclId] =
                          [ds_s5l5f] \u []
                              case ds_s5l5f of {
                                (,,,,,) _ [Occ=Dead]
                                        bs_s5l5y [Occ=Once]
                                        _ [Occ=Dead]
                                        _ [Occ=Dead]
                                        _ [Occ=Dead]
                                        _ [Occ=Dead] ->
                                    bs_s5l5y;
                              }; } in
                    let {
                      sat_s5l5E [Occ=Once] :: [b_s5kpf]
                      [LclId] =
                          CCCS :! [b1_s5l5a sat_s5l5D]; } in
                    let {
                      sat_s5l5u [Occ=Once] :: [a_s5kpe]
                      [LclId] =
                          [ds_s5l5f] \u []
                              case ds_s5l5f of {
                                (,,,,,) as_s5l5o [Occ=Once]
                                        _ [Occ=Dead]
                                        _ [Occ=Dead]
                                        _ [Occ=Dead]
                                        _ [Occ=Dead]
                                        _ [Occ=Dead] ->
                                    as_s5l5o;
                              }; } in
                    let {
                      sat_s5l5v [Occ=Once] :: [a_s5kpe]
                      [LclId] =
                          CCCS :! [a1_s5l59 sat_s5l5u];
                    } in 
                      (#,,,,,#) [sat_s5l5v
                                 sat_s5l5E
                                 sat_s5l5N
                                 sat_s5l5W
                                 sat_s5l65
                                 sat_s5l6e];
              };
        };

Data.OldList.unzip6 [InlPrag=NOUSERINLINE[0]]
  :: forall a b c d e f.
     [(a, b, c, d, e, f)] -> ([a], [b], [c], [d], [e], [f])
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [w_s5l6f]
        case Data.OldList.$wunzip6 w_s5l6f of {
          (#,,,,,#) ww1_s5l6h [Occ=Once]
                    ww2_s5l6i [Occ=Once]
                    ww3_s5l6j [Occ=Once]
                    ww4_s5l6k [Occ=Once]
                    ww5_s5l6l [Occ=Once]
                    ww6_s5l6m [Occ=Once] ->
              (,,,,,) [ww1_s5l6h
                       ww2_s5l6i
                       ww3_s5l6j
                       ww4_s5l6k
                       ww5_s5l6l
                       ww6_s5l6m];
        };

Data.OldList.$wunzip7 [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: forall a b c d e f g.
     [(a, b, c, d, e, f, g)] -> (# [a], [b], [c], [d], [e], [f], [g] #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [w_s5l6n]
        case w_s5l6n of {
          [] ->
              (#,,,,,,#) [GHC.Types.[]
                          GHC.Types.[]
                          GHC.Types.[]
                          GHC.Types.[]
                          GHC.Types.[]
                          GHC.Types.[]
                          GHC.Types.[]];
          : y_s5l6p [Occ=Once!] ys_s5l6q [Occ=Once] ->
              case y_s5l6p of {
                (,,,,,,) a1_s5l6s [Occ=Once]
                         b1_s5l6t [Occ=Once]
                         c1_s5l6u [Occ=Once]
                         d1_s5l6v [Occ=Once]
                         e1_s5l6w [Occ=Once]
                         f1_s5l6x [Occ=Once]
                         g1_s5l6y [Occ=Once] ->
                    let {
                      ds_s5l6z [Dmd=<L,U(1*U,1*U,1*U,1*U,1*U,1*U,1*U)>]
                        :: ([a_s5kp2], [b_s5kp3], [c_s5kp4], [d_s5kp5], [e_s5kp6],
                            [f_s5kp7], [g_s5kp8])
                      [LclId] =
                          [ys_s5l6q] \u []
                              case Data.OldList.$wunzip7 ys_s5l6q of {
                                (#,,,,,,#) ww1_s5l6B [Occ=Once]
                                           ww2_s5l6C [Occ=Once]
                                           ww3_s5l6D [Occ=Once]
                                           ww4_s5l6E [Occ=Once]
                                           ww5_s5l6F [Occ=Once]
                                           ww6_s5l6G [Occ=Once]
                                           ww7_s5l6H [Occ=Once] ->
                                    (,,,,,,) [ww1_s5l6B
                                              ww2_s5l6C
                                              ww3_s5l6D
                                              ww4_s5l6E
                                              ww5_s5l6F
                                              ww6_s5l6G
                                              ww7_s5l6H];
                              }; } in
                    let {
                      sat_s5l7O [Occ=Once] :: [g_s5kp8]
                      [LclId] =
                          [ds_s5l6z] \u []
                              case ds_s5l6z of {
                                (,,,,,,) _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         gs_s5l7N [Occ=Once] ->
                                    gs_s5l7N;
                              }; } in
                    let {
                      sat_s5l7P [Occ=Once] :: [g_s5kp8]
                      [LclId] =
                          CCCS :! [g1_s5l6y sat_s5l7O]; } in
                    let {
                      sat_s5l7E [Occ=Once] :: [f_s5kp7]
                      [LclId] =
                          [ds_s5l6z] \u []
                              case ds_s5l6z of {
                                (,,,,,,) _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         fs_s5l7C [Occ=Once]
                                         _ [Occ=Dead] ->
                                    fs_s5l7C;
                              }; } in
                    let {
                      sat_s5l7F [Occ=Once] :: [f_s5kp7]
                      [LclId] =
                          CCCS :! [f1_s5l6x sat_s5l7E]; } in
                    let {
                      sat_s5l7u [Occ=Once] :: [e_s5kp6]
                      [LclId] =
                          [ds_s5l6z] \u []
                              case ds_s5l6z of {
                                (,,,,,,) _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         es_s5l7r [Occ=Once]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead] ->
                                    es_s5l7r;
                              }; } in
                    let {
                      sat_s5l7v [Occ=Once] :: [e_s5kp6]
                      [LclId] =
                          CCCS :! [e1_s5l6w sat_s5l7u]; } in
                    let {
                      sat_s5l7k [Occ=Once] :: [d_s5kp5]
                      [LclId] =
                          [ds_s5l6z] \u []
                              case ds_s5l6z of {
                                (,,,,,,) _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         ds1_s5l7g [Occ=Once]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead] ->
                                    ds1_s5l7g;
                              }; } in
                    let {
                      sat_s5l7l [Occ=Once] :: [d_s5kp5]
                      [LclId] =
                          CCCS :! [d1_s5l6v sat_s5l7k]; } in
                    let {
                      sat_s5l7a [Occ=Once] :: [c_s5kp4]
                      [LclId] =
                          [ds_s5l6z] \u []
                              case ds_s5l6z of {
                                (,,,,,,) _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         cs_s5l75 [Occ=Once]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead] ->
                                    cs_s5l75;
                              }; } in
                    let {
                      sat_s5l7b [Occ=Once] :: [c_s5kp4]
                      [LclId] =
                          CCCS :! [c1_s5l6u sat_s5l7a]; } in
                    let {
                      sat_s5l70 [Occ=Once] :: [b_s5kp3]
                      [LclId] =
                          [ds_s5l6z] \u []
                              case ds_s5l6z of {
                                (,,,,,,) _ [Occ=Dead]
                                         bs_s5l6U [Occ=Once]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead] ->
                                    bs_s5l6U;
                              }; } in
                    let {
                      sat_s5l71 [Occ=Once] :: [b_s5kp3]
                      [LclId] =
                          CCCS :! [b1_s5l6t sat_s5l70]; } in
                    let {
                      sat_s5l6Q [Occ=Once] :: [a_s5kp2]
                      [LclId] =
                          [ds_s5l6z] \u []
                              case ds_s5l6z of {
                                (,,,,,,) as_s5l6J [Occ=Once]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead] ->
                                    as_s5l6J;
                              }; } in
                    let {
                      sat_s5l6R [Occ=Once] :: [a_s5kp2]
                      [LclId] =
                          CCCS :! [a1_s5l6s sat_s5l6Q];
                    } in 
                      (#,,,,,,#) [sat_s5l6R
                                  sat_s5l71
                                  sat_s5l7b
                                  sat_s5l7l
                                  sat_s5l7v
                                  sat_s5l7F
                                  sat_s5l7P];
              };
        };

Data.OldList.unzip7 [InlPrag=NOUSERINLINE[0]]
  :: forall a b c d e f g.
     [(a, b, c, d, e, f, g)] -> ([a], [b], [c], [d], [e], [f], [g])
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [w_s5l7Q]
        case Data.OldList.$wunzip7 w_s5l7Q of {
          (#,,,,,,#) ww1_s5l7S [Occ=Once]
                     ww2_s5l7T [Occ=Once]
                     ww3_s5l7U [Occ=Once]
                     ww4_s5l7V [Occ=Once]
                     ww5_s5l7W [Occ=Once]
                     ww6_s5l7X [Occ=Once]
                     ww7_s5l7Y [Occ=Once] ->
              (,,,,,,) [ww1_s5l7S
                        ww2_s5l7T
                        ww3_s5l7U
                        ww4_s5l7V
                        ww5_s5l7W
                        ww6_s5l7X
                        ww7_s5l7Y];
        };

Data.OldList.groupBy [Occ=LoopBreaker]
  :: forall a. (a -> a -> GHC.Types.Bool) -> [a] -> [[a]]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,C(C(U))><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s5l7Z ds1_s5l80]
        case ds1_s5l80 of {
          [] -> [] [];
          : x_s5l82 xs_s5l83 [Occ=Once] ->
              let {
                ds2_s5l84 [Dmd=<L,U(1*U,1*U)>] :: ([a_a5iWz], [a_a5iWz])
                [LclId] =
                    [ds_s5l7Z x_s5l82 xs_s5l83] \u []
                        let {
                          sat_s5l85 [Occ=Once, Dmd=<L,C(U)>] :: a_a5iWz -> GHC.Types.Bool
                          [LclId] =
                              [ds_s5l7Z x_s5l82] \u [] ds_s5l7Z x_s5l82;
                        } in 
                          case GHC.List.$wspan sat_s5l85 xs_s5l83 of {
                            (#,#) ww1_s5l87 [Occ=Once] ww2_s5l88 [Occ=Once] ->
                                (,) [ww1_s5l87 ww2_s5l88];
                          }; } in
              let {
                sat_s5l8h [Occ=Once] :: [[a_a5iWz]]
                [LclId] =
                    [ds_s5l7Z ds2_s5l84] \u []
                        case ds2_s5l84 of {
                          (,) _ [Occ=Dead] zs_s5l8g [Occ=Once] ->
                              Data.OldList.groupBy ds_s5l7Z zs_s5l8g;
                        }; } in
              let {
                sat_s5l8c [Occ=Once] :: [a_a5iWz]
                [LclId] =
                    [ds2_s5l84] \u []
                        case ds2_s5l84 of {
                          (,) ys_s5l8a [Occ=Once] _ [Occ=Dead] -> ys_s5l8a;
                        }; } in
              let {
                sat_s5l8d [Occ=Once] :: [a_a5iWz]
                [LclId] =
                    CCCS :! [x_s5l82 sat_s5l8c];
              } in  : [sat_s5l8d sat_s5l8h];
        };

Data.OldList.group :: forall a. GHC.Classes.Eq a => [a] -> [[a]]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*U(1*C(C(U)),A)><S,1*U>,
 Unf=OtherCon []] =
    [] \r [$dEq_s5l8i eta_s5l8j]
        let {
          sat_s5l8k [Occ=Once, Dmd=<L,C(C(U))>]
            :: a_a5iWS -> a_a5iWS -> GHC.Types.Bool
          [LclId] =
              [$dEq_s5l8i] \u [] GHC.Classes.== $dEq_s5l8i;
        } in  Data.OldList.groupBy sat_s5l8k eta_s5l8j;

poly_tailsGo_r5kSn :: forall a. [a] -> [[a]]
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>m2, Unf=OtherCon []] =
    sat-only [] \r [xs_s5l8l]
        let {
          sat_s5l8p [Occ=Once] :: [[a_a5iVR]]
          [LclId] =
              [xs_s5l8l] \u []
                  case xs_s5l8l of {
                    [] -> [] [];
                    : _ [Occ=Dead] xs'_s5l8o [Occ=Once] ->
                        poly_tailsGo_r5kSn xs'_s5l8o;
                  };
        } in  : [xs_s5l8l sat_s5l8p];

Data.OldList.tails [InlPrag=INLINABLE] :: forall a. [a] -> [[a]]
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [lst_s5l8q] poly_tailsGo_r5kSn lst_s5l8q;

Data.OldList.nonEmptySubsequences [Occ=LoopBreaker]
  :: forall a. [a] -> [[a]]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s5l8r]
        case ds_s5l8r of {
          [] -> [] [];
          : x_s5l8t xs_s5l8u [Occ=Once] ->
              let {
                sat_s5l8F [Occ=Once] :: [[a_a5iVp]]
                [LclId] =
                    [x_s5l8t xs_s5l8u] \u []
                        let {
                          go_s5l8w [Occ=LoopBreaker] :: [[a_a5iVp]] -> [[a_a5iVp]]
                          [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                              sat-only [x_s5l8t go_s5l8w] \r [ds1_s5l8x]
                                  case ds1_s5l8x of {
                                    [] -> [] [];
                                    : y_s5l8z ys_s5l8A [Occ=Once] ->
                                        let {
                                          sat_s5l8C [Occ=Once] :: [[a_a5iVp]]
                                          [LclId] =
                                              [go_s5l8w ys_s5l8A] \u [] go_s5l8w ys_s5l8A; } in
                                        let {
                                          sat_s5l8B [Occ=Once] :: [a_a5iVp]
                                          [LclId] =
                                              CCCS :! [x_s5l8t y_s5l8z]; } in
                                        let {
                                          sat_s5l8D [Occ=Once] :: [[a_a5iVp]]
                                          [LclId] =
                                              CCCS :! [sat_s5l8B sat_s5l8C];
                                        } in  : [y_s5l8z sat_s5l8D];
                                  };
                        } in 
                          case Data.OldList.nonEmptySubsequences xs_s5l8u of sat_s5l8E {
                            __DEFAULT -> go_s5l8w sat_s5l8E;
                          }; } in
              let {
                sat_s5l8v [Occ=Once] :: [a_a5iVp]
                [LclId] =
                    CCCS :! [x_s5l8t GHC.Types.[]];
              } in  : [sat_s5l8v sat_s5l8F];
        };

Data.OldList.subsequences :: forall a. [a] -> [[a]]
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,1*U>m2, Unf=OtherCon []] =
    [] \r [xs_s5l8G]
        let {
          sat_s5l8H [Occ=Once] :: [[a_a5iVM]]
          [LclId] =
              [xs_s5l8G] \u [] Data.OldList.nonEmptySubsequences xs_s5l8G;
        } in  : [GHC.Types.[] sat_s5l8H];

Data.OldList.permutations1 [Occ=LoopBreaker]
  :: forall a. [a] -> [a] -> [[a]]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ds_s5l8I ds1_s5l8J]
        case ds_s5l8I of {
          [] -> [] [];
          : t_s5l8L ts_s5l8M ->
              let {
                $winterleave'_s5l8N [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
                  :: forall c.
                     ([a_a5iTf] -> c) -> [a_a5iTf] -> [c] -> (# [a_a5iTf], [c] #)
                [LclId, Arity=3, Str=<L,C(U)><S,1*U><L,U>, Unf=OtherCon []] =
                    sat-only [t_s5l8L ts_s5l8M $winterleave'_s5l8N] \r [w_s5l8O
                                                                        w1_s5l8P
                                                                        w2_s5l8Q]
                        case w1_s5l8P of {
                          [] -> (#,#) [ts_s5l8M w2_s5l8Q];
                          : y_s5l8S ys_s5l8T [Occ=Once] ->
                              let {
                                ds2_s5l8U [Dmd=<L,U(1*U,1*U)>] :: ([a_a5iTf], [c_s5koH])
                                [LclId] =
                                    [$winterleave'_s5l8N w_s5l8O w2_s5l8Q y_s5l8S ys_s5l8T] \u []
                                        let {
                                          sat_s5l8X [Occ=Once] :: [a_a5iTf] -> c_s5koH
                                          [LclId] =
                                              [w_s5l8O y_s5l8S] \r [x_s5l8V]
                                                  let {
                                                    sat_s5l8W [Occ=Once] :: [a_a5iTf]
                                                    [LclId] =
                                                        CCCS :! [y_s5l8S x_s5l8V];
                                                  } in  w_s5l8O sat_s5l8W;
                                        } in 
                                          case $winterleave'_s5l8N sat_s5l8X ys_s5l8T w2_s5l8Q of {
                                            (#,#) ww1_s5l8Z [Occ=Once] ww2_s5l90 [Occ=Once] ->
                                                (,) [ww1_s5l8Z ww2_s5l90];
                                          }; } in
                              let {
                                us_s5l91 :: [a_a5iTf]
                                [LclId] =
                                    [ds2_s5l8U] \u []
                                        case ds2_s5l8U of {
                                          (,) us1_s5l93 [Occ=Once] _ [Occ=Dead] -> us1_s5l93;
                                        }; } in
                              let {
                                sat_s5l9c [Occ=Once] :: [c_s5koH]
                                [LclId] =
                                    [ds2_s5l8U] \u []
                                        case ds2_s5l8U of {
                                          (,) _ [Occ=Dead] zs_s5l9b [Occ=Once] -> zs_s5l9b;
                                        }; } in
                              let {
                                sat_s5l98 [Occ=Once] :: c_s5koH
                                [LclId] =
                                    [t_s5l8L w_s5l8O y_s5l8S us_s5l91] \u []
                                        let {
                                          sat_s5l96 [Occ=Once] :: [a_a5iTf]
                                          [LclId] =
                                              CCCS :! [y_s5l8S us_s5l91]; } in
                                        let {
                                          sat_s5l97 [Occ=Once] :: [a_a5iTf]
                                          [LclId] =
                                              CCCS :! [t_s5l8L sat_s5l96];
                                        } in  w_s5l8O sat_s5l97; } in
                              let {
                                sat_s5l9d [Occ=Once] :: [c_s5koH]
                                [LclId] =
                                    CCCS :! [sat_s5l98 sat_s5l9c]; } in
                              let {
                                sat_s5l95 [Occ=Once] :: [a_a5iTf]
                                [LclId] =
                                    CCCS :! [y_s5l8S us_s5l91];
                              } in  (#,#) [sat_s5l95 sat_s5l9d];
                        }; } in
              let {
                z_s5l9e [Occ=OnceL] :: [[a_a5iTf]]
                [LclId] =
                    [ds1_s5l8J t_s5l8L ts_s5l8M] \u []
                        let {
                          sat_s5l9f [Occ=Once] :: [a_a5iTf]
                          [LclId] =
                              CCCS :! [t_s5l8L ds1_s5l8J];
                        } in  Data.OldList.permutations1 ts_s5l8M sat_s5l9f; } in
              let {
                go_s5l9g [Occ=LoopBreaker] :: [[a_a5iTf]] -> [[a_a5iTf]]
                [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                    sat-only [$winterleave'_s5l8N z_s5l9e go_s5l9g] \r [ds2_s5l9h]
                        case ds2_s5l9h of {
                          [] -> z_s5l9e;
                          : y_s5l9j [Occ=Once] ys_s5l9k [Occ=Once] ->
                              let {
                                sat_s5l9l [Occ=Once] :: [[a_a5iTf]]
                                [LclId] =
                                    [go_s5l9g ys_s5l9k] \u [] go_s5l9g ys_s5l9k;
                              } in 
                                case $winterleave'_s5l8N GHC.Base.id y_s5l9j sat_s5l9l of {
                                  (#,#) _ [Occ=Dead] ww2_s5l9o [Occ=Once] -> ww2_s5l9o;
                                };
                        }; } in
              let {
                sat_s5l9p [Occ=Once] :: [[a_a5iTf]]
                [LclId] =
                    [ds1_s5l8J] \u []
                        Data.OldList.permutations1 ds1_s5l8J GHC.Types.[]; } in
              let {
                sat_s5l9q [Occ=Once] :: [[a_a5iTf]]
                [LclId] =
                    CCCS :! [ds1_s5l8J sat_s5l9p];
              } in  go_s5l9g sat_s5l9q;
        };

Data.OldList.permutations :: forall a. [a] -> [[a]]
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [xs0_s5l9r]
        let {
          sat_s5l9s [Occ=Once] :: [[a_a5iTf]]
          [LclId] =
              [xs0_s5l9r] \u []
                  Data.OldList.permutations1 xs0_s5l9r GHC.Types.[];
        } in  : [xs0_s5l9r sat_s5l9s];

lvl6_r5kSo :: forall a. [[a]]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Types.[] GHC.Types.[]];

Data.OldList.sortBy
  :: forall a. (a -> a -> GHC.Types.Ordering) -> [a] -> [a]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><S,1*U>,
 Unf=OtherCon []] =
    [] \r [cmp_s5l9t eta_s5l9u]
        let {
          merge_s5l9v [Occ=LoopBreaker]
            :: [a_a5iQ6] -> [a_a5iQ6] -> [a_a5iQ6]
          [LclId, Arity=2, Str=<S,1*U><S,1*U>, Unf=OtherCon []] =
              sat-only [cmp_s5l9t merge_s5l9v] \r [as_s5l9w bs_s5l9x]
                  case as_s5l9w of wild_s5l9y {
                    [] -> bs_s5l9x;
                    : a1_s5l9z as'_s5l9A [Occ=Once] ->
                        case bs_s5l9x of wild1_s5l9B {
                          [] -> wild_s5l9y;
                          : b_s5l9C bs'_s5l9D [Occ=Once] ->
                              case cmp_s5l9t a1_s5l9z b_s5l9C of {
                                __DEFAULT ->
                                    let {
                                      sat_s5l9F [Occ=Once] :: [a_a5iQ6]
                                      [LclId] =
                                          [merge_s5l9v as'_s5l9A wild1_s5l9B] \u []
                                              merge_s5l9v as'_s5l9A wild1_s5l9B;
                                    } in  : [a1_s5l9z sat_s5l9F];
                                GHC.Types.GT ->
                                    let {
                                      sat_s5l9G [Occ=Once] :: [a_a5iQ6]
                                      [LclId] =
                                          [merge_s5l9v wild_s5l9y bs'_s5l9D] \u []
                                              merge_s5l9v wild_s5l9y bs'_s5l9D;
                                    } in  : [b_s5l9C sat_s5l9G];
                              };
                        };
                  }; } in
        let {
          mergePairs_s5l9H [Occ=LoopBreaker] :: [[a_a5iQ6]] -> [[a_a5iQ6]]
          [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
              sat-only [merge_s5l9v mergePairs_s5l9H] \r [ds_s5l9I]
                  case ds_s5l9I of wild_s5l9J {
                    [] -> [] [];
                    : a1_s5l9K [Occ=Once] ds1_s5l9L [Occ=Once!] ->
                        case ds1_s5l9L of {
                          [] -> wild_s5l9J;
                          : b_s5l9N [Occ=Once] xs_s5l9O [Occ=Once] ->
                              case merge_s5l9v a1_s5l9K b_s5l9N of x_s5l9P {
                                __DEFAULT ->
                                    let {
                                      sat_s5l9Q [Occ=Once] :: [[a_a5iQ6]]
                                      [LclId] =
                                          [mergePairs_s5l9H xs_s5l9O] \u []
                                              mergePairs_s5l9H xs_s5l9O;
                                    } in  : [x_s5l9P sat_s5l9Q];
                              };
                        };
                  }; } in
        let {
          lvl12_s5l9R [Occ=OnceL] :: [[a_a5iQ6]]
          [LclId] =
              [mergePairs_s5l9H] \u [] mergePairs_s5l9H GHC.Types.[]; } in
        let {
          sequences_s5l9S :: [a_a5iQ6] -> [[a_a5iQ6]]
          [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
              sat-only [cmp_s5l9t descending_s5l9U ascending_s5l9V] \r [ds_s5l9W]
                  case ds_s5l9W of wild_s5l9X {
                    [] -> lvl6_r5kSo;
                    : a1_s5l9Y ds1_s5l9Z [Occ=Once!] ->
                        case ds1_s5l9Z of {
                          [] -> : [wild_s5l9X GHC.Types.[]];
                          : b_s5la1 xs_s5la2 [Occ=Once*] ->
                              case cmp_s5l9t a1_s5l9Y b_s5la1 of {
                                __DEFAULT ->
                                    let {
                                      sat_s5la4 [Occ=Once] :: [a_a5iQ6] -> [a_a5iQ6]
                                      [LclId] =
                                          [a1_s5l9Y] \r [eta_B1] : [a1_s5l9Y eta_B1];
                                    } in  ascending_s5l9V b_s5la1 sat_s5la4 xs_s5la2;
                                GHC.Types.GT ->
                                    let {
                                      sat_s5la5 [Occ=Once] :: [a_a5iQ6]
                                      [LclId] =
                                          CCCS :! [a1_s5l9Y GHC.Types.[]];
                                    } in  descending_s5l9U b_s5la1 sat_s5la5 xs_s5la2;
                              };
                        };
                  };
          lvl13_s5l9T :: [[a_a5iQ6]]
          [LclId] =
              [sequences_s5l9S] \u [] sequences_s5l9S GHC.Types.[];
          descending_s5l9U [Occ=LoopBreaker]
            :: a_a5iQ6 -> [a_a5iQ6] -> [a_a5iQ6] -> [[a_a5iQ6]]
          [LclId, Arity=3, Str=<L,U><L,U><S,1*U>, Unf=OtherCon []] =
              sat-only [cmp_s5l9t
                        sequences_s5l9S
                        lvl13_s5l9T
                        descending_s5l9U] \r [a1_s5la6 as_s5la7 ds_s5la8]
                  case ds_s5la8 of wild_s5la9 {
                    [] ->
                        let {
                          sat_s5laa [Occ=Once] :: [a_a5iQ6]
                          [LclId] =
                              CCCS :! [a1_s5la6 as_s5la7];
                        } in  : [sat_s5laa lvl13_s5l9T];
                    : b_s5lab bs_s5lac [Occ=Once] ->
                        case cmp_s5l9t a1_s5la6 b_s5lab of {
                          __DEFAULT ->
                              let {
                                sat_s5laf [Occ=Once] :: [[a_a5iQ6]]
                                [LclId] =
                                    [sequences_s5l9S wild_s5la9] \u []
                                        sequences_s5l9S wild_s5la9; } in
                              let {
                                sat_s5lae [Occ=Once] :: [a_a5iQ6]
                                [LclId] =
                                    CCCS :! [a1_s5la6 as_s5la7];
                              } in  : [sat_s5lae sat_s5laf];
                          GHC.Types.GT ->
                              let {
                                sat_s5lag [Occ=Once] :: [a_a5iQ6]
                                [LclId] =
                                    CCCS :! [a1_s5la6 as_s5la7];
                              } in  descending_s5l9U b_s5lab sat_s5lag bs_s5lac;
                        };
                  };
          ascending_s5l9V [Occ=LoopBreaker]
            :: a_a5iQ6 -> ([a_a5iQ6] -> [a_a5iQ6]) -> [a_a5iQ6] -> [[a_a5iQ6]]
          [LclId, Arity=3, Str=<L,U><C(S),1*C1(U)><S,1*U>, Unf=OtherCon []] =
              sat-only [cmp_s5l9t
                        sequences_s5l9S
                        lvl13_s5l9T
                        ascending_s5l9V] \r [a1_s5lah as_s5lai ds_s5laj]
                  case ds_s5laj of wild_s5lak {
                    [] ->
                        let {
                          sat_s5lal [Occ=Once] :: [a_a5iQ6]
                          [LclId] =
                              CCCS :! [a1_s5lah GHC.Types.[]];
                        } in 
                          case as_s5lai sat_s5lal of x_s5lam {
                            __DEFAULT -> : [x_s5lam lvl13_s5l9T];
                          };
                    : b_s5lan bs_s5lao [Occ=Once] ->
                        case cmp_s5l9t a1_s5lah b_s5lan of {
                          __DEFAULT ->
                              let {
                                sat_s5las [Occ=Once] :: [a_a5iQ6] -> [a_a5iQ6]
                                [LclId] =
                                    [a1_s5lah as_s5lai] \r [ys_s5laq]
                                        let {
                                          sat_s5lar [Occ=Once] :: [a_a5iQ6]
                                          [LclId] =
                                              CCCS :! [a1_s5lah ys_s5laq];
                                        } in  as_s5lai sat_s5lar;
                              } in  ascending_s5l9V b_s5lan sat_s5las bs_s5lao;
                          GHC.Types.GT ->
                              let {
                                sat_s5lat [Occ=Once] :: [a_a5iQ6]
                                [LclId] =
                                    CCCS :! [a1_s5lah GHC.Types.[]];
                              } in 
                                case as_s5lai sat_s5lat of x_s5lau {
                                  __DEFAULT ->
                                      let {
                                        sat_s5lav [Occ=Once] :: [[a_a5iQ6]]
                                        [LclId] =
                                            [sequences_s5l9S wild_s5lak] \u []
                                                sequences_s5l9S wild_s5lak;
                                      } in  : [x_s5lau sat_s5lav];
                                };
                        };
                  };
        } in 
          case sequences_s5l9S eta_s5l9u of sat_s5laF {
            __DEFAULT ->
                let-no-escape {
                  mergeAll_s5law [Occ=LoopBreakerT[1]] :: [[a_a5iQ6]] -> [a_a5iQ6]
                  [LclId[JoinId(1)], Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                      sat-only [mergePairs_s5l9H
                                lvl12_s5l9R
                                mergeAll_s5law] \r [ds_s5lax]
                          case ds_s5lax of wild_s5lay {
                            [] -> mergeAll_s5law lvl12_s5l9R;
                            : x_s5laz [Occ=Once] ds1_s5laA [Occ=Once!] ->
                                case ds1_s5laA of {
                                  [] -> x_s5laz;
                                  : _ [Occ=Dead] _ [Occ=Dead] ->
                                      case mergePairs_s5l9H wild_s5lay of sat_s5laE {
                                        __DEFAULT -> mergeAll_s5law sat_s5laE;
                                      };
                                };
                          };
                } in  mergeAll_s5law sat_s5laF;
          };

Data.OldList.sortOn
  :: forall b a. GHC.Classes.Ord b => (a -> b) -> [a] -> [a]
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U(A,C(C1(U)),A,A,A,A,A,A)><L,C(U)><S,1*U>,
 Unf=OtherCon []] =
    [] \r [$dOrd_s5laG f_s5laH eta_s5laI]
        let {
          sat_s5laW [Occ=Once] :: a_a5iSu -> (b_a5iSt, a_a5iSu)
          [LclId] =
              [f_s5laH] \r [x_s5laU]
                  case f_s5laH x_s5laU of y_s5laV {
                    __DEFAULT -> (,) [y_s5laV x_s5laU];
                  };
        } in 
          case GHC.Base.map sat_s5laW eta_s5laI of sat_s5laX {
            __DEFAULT ->
                let {
                  sat_s5laT [Occ=Once]
                    :: (b_a5iSt, a_a5iSu) -> (b_a5iSt, a_a5iSu) -> GHC.Types.Ordering
                  [LclId] =
                      [$dOrd_s5laG] \r [x_s5laJ y_s5laK]
                          let {
                            sat_s5laS [Occ=Once] :: b_a5iSt
                            [LclId] =
                                [y_s5laK] \u []
                                    case y_s5laK of {
                                      (,) x1_s5laQ [Occ=Once] _ [Occ=Dead] -> x1_s5laQ;
                                    }; } in
                          let {
                            sat_s5laO [Occ=Once] :: b_a5iSt
                            [LclId] =
                                [x_s5laJ] \u []
                                    case x_s5laJ of {
                                      (,) x1_s5laM [Occ=Once] _ [Occ=Dead] -> x1_s5laM;
                                    };
                          } in  GHC.Classes.compare $dOrd_s5laG sat_s5laO sat_s5laS;
                } in 
                  case Data.OldList.sortBy sat_s5laT sat_s5laX of sat_s5laY {
                    __DEFAULT -> GHC.Base.map Data.Tuple.snd sat_s5laY;
                  };
          };

Data.OldList.sort :: forall a. GHC.Classes.Ord a => [a] -> [a]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*U(A,1*C(C1(U)),A,A,A,A,A,A)><S,1*U>,
 Unf=OtherCon []] =
    [] \r [$dOrd_s5laZ eta_s5lb0]
        let {
          sat_s5lb1 [Occ=Once, Dmd=<L,C(C1(U))>]
            :: a_a5iT8 -> a_a5iT8 -> GHC.Types.Ordering
          [LclId] =
              [$dOrd_s5laZ] \u [] GHC.Classes.compare $dOrd_s5laZ;
        } in  Data.OldList.sortBy sat_s5lb1 eta_s5lb0;

Data.OldList.unfoldr [InlPrag=INLINE (sat-args=2)]
  :: forall b a. (b -> GHC.Base.Maybe (a, b)) -> b -> [a]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<C(S),C(U)><L,U>,
 Unf=OtherCon []] =
    [] \r [f_s5lb2 b0_s5lb3]
        let {
          go_s5lb4 [Occ=LoopBreaker] :: b_a5iPE -> [a_a5iPF]
          [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
              sat-only [f_s5lb2 go_s5lb4] \r [b1_s5lb5]
                  case f_s5lb2 b1_s5lb5 of {
                    GHC.Base.Nothing -> [] [];
                    GHC.Base.Just ds_s5lb7 [Occ=Once!] ->
                        case ds_s5lb7 of {
                          (,) a1_s5lb9 [Occ=Once] new_b_s5lba [Occ=Once] ->
                              let {
                                sat_s5lbb [Occ=Once] :: [a_a5iPF]
                                [LclId] =
                                    [go_s5lb4 new_b_s5lba] \u [] go_s5lb4 new_b_s5lba;
                              } in  : [a1_s5lb9 sat_s5lbb];
                        };
                  };
        } in  go_s5lb4 b0_s5lb3;

lvl7_r5kSp :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\n'#];

Data.OldList.unlines [Occ=LoopBreaker]
  :: [GHC.Base.String] -> GHC.Base.String
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s5lbc]
        case ds_s5lbc of {
          [] -> [] [];
          : l_s5lbe [Occ=Once] ls_s5lbf [Occ=Once] ->
              let {
                sat_s5lbg [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [ls_s5lbf] \u [] Data.OldList.unlines ls_s5lbf; } in
              let {
                sat_s5lbh [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    CCCS :! [lvl7_r5kSp sat_s5lbg];
              } in  GHC.Base.++ l_s5lbe sat_s5lbh;
        };

Data.OldList.wordsFB [InlPrag=INLINE[0] (sat-args=2),
                      Occ=LoopBreaker!]
  :: forall b.
     ([GHC.Types.Char] -> b -> b) -> b -> GHC.Base.String -> b
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [c_s5lbi n_s5lbj eta_s5lbk]
        let {
          go_s5lbl [Occ=LoopBreaker] :: [GHC.Types.Char] -> b_a5iOj
          [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
              sat-only [c_s5lbi n_s5lbj go_s5lbl] \r [s_s5lbm]
                  case GHC.List.dropWhile GHC.Unicode.isSpace s_s5lbm of wild_s5lbn {
                    [] -> n_s5lbj;
                    : _ [Occ=Dead] _ [Occ=Dead] ->
                        let {
                          ds_s5lbq [Dmd=<L,U(1*U,1*U)>]
                            :: ([GHC.Types.Char], [GHC.Types.Char])
                          [LclId] =
                              [wild_s5lbn] \u []
                                  case GHC.List.$wbreak GHC.Unicode.isSpace wild_s5lbn of {
                                    (#,#) ww1_s5lbs [Occ=Once] ww2_s5lbt [Occ=Once] ->
                                        (,) [ww1_s5lbs ww2_s5lbt];
                                  }; } in
                        let {
                          sat_s5lbB [Occ=Once] :: b_a5iOj
                          [LclId] =
                              [go_s5lbl ds_s5lbq] \u []
                                  case ds_s5lbq of {
                                    (,) _ [Occ=Dead] s''_s5lbA [Occ=Once] -> go_s5lbl s''_s5lbA;
                                  }; } in
                        let {
                          sat_s5lbx [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              [ds_s5lbq] \u []
                                  case ds_s5lbq of {
                                    (,) w_s5lbv [Occ=Once] _ [Occ=Dead] -> w_s5lbv;
                                  };
                        } in  c_s5lbi sat_s5lbx sat_s5lbB;
                  };
        } in  go_s5lbl eta_s5lbk;
Data.OldList.words [InlPrag=NOINLINE[1], Occ=LoopBreaker]
  :: GHC.Base.String -> [GHC.Base.String]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [s_s5lbC]
        case GHC.List.dropWhile GHC.Unicode.isSpace s_s5lbC of wild_s5lbD {
          [] -> [] [];
          : _ [Occ=Dead] _ [Occ=Dead] ->
              let {
                ds_s5lbG [Dmd=<L,U(1*U,1*U)>]
                  :: ([GHC.Types.Char], [GHC.Types.Char])
                [LclId] =
                    [wild_s5lbD] \u []
                        case GHC.List.$wbreak GHC.Unicode.isSpace wild_s5lbD of {
                          (#,#) ww1_s5lbI [Occ=Once] ww2_s5lbJ [Occ=Once] ->
                              (,) [ww1_s5lbI ww2_s5lbJ];
                        }; } in
              let {
                sat_s5lbR [Occ=Once] :: [[GHC.Types.Char]]
                [LclId] =
                    [ds_s5lbG] \u []
                        case ds_s5lbG of {
                          (,) _ [Occ=Dead] s''_s5lbQ [Occ=Once] ->
                              Data.OldList.words s''_s5lbQ;
                        }; } in
              let {
                sat_s5lbN [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [ds_s5lbG] \u []
                        case ds_s5lbG of {
                          (,) w_s5lbL [Occ=Once] _ [Occ=Dead] -> w_s5lbL;
                        };
              } in  : [sat_s5lbN sat_s5lbR];
        };

lvl8_r5kSq :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! [' '#];

Data.OldList.unwordsFB [InlPrag=INLINE[0] (sat-args=2)]
  :: GHC.Base.String -> GHC.Base.String -> GHC.Base.String
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*U><L,1*U>m2,
 Unf=OtherCon []] =
    [] \r [w_s5lbS r_s5lbT]
        let {
          sat_s5lbU [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [w_s5lbS r_s5lbT] \u [] GHC.Base.++ w_s5lbS r_s5lbT;
        } in  : [lvl8_r5kSq sat_s5lbU];

Data.OldList.unwords_go [Occ=LoopBreaker]
  :: [[GHC.Types.Char]] -> [GHC.Types.Char]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s5lbV]
        case ds_s5lbV of {
          [] -> [] [];
          : v_s5lbX [Occ=Once] vs_s5lbY [Occ=Once] ->
              let {
                sat_s5lc0 [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [v_s5lbX vs_s5lbY] \u []
                        let {
                          sat_s5lbZ [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                          [LclId] =
                              [vs_s5lbY] \s [] Data.OldList.unwords_go vs_s5lbY;
                        } in  GHC.Base.++ v_s5lbX sat_s5lbZ;
              } in  : [lvl8_r5kSq sat_s5lc0];
        };

Data.OldList.tailUnwords [InlPrag=INLINE[0] (sat-args=1),
                          Occ=LoopBreaker!]
  :: GHC.Base.String -> GHC.Base.String
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s5lc1]
        case ds_s5lc1 of {
          [] -> [] [];
          : _ [Occ=Dead] xs_s5lc4 [Occ=Once] -> xs_s5lc4;
        };
Data.OldList.unwords [InlPrag=NOINLINE[1], Occ=LoopBreaker!]
  :: [GHC.Base.String] -> GHC.Base.String
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s5lc5]
        case ds_s5lc5 of {
          [] -> [] [];
          : w_s5lc7 [Occ=Once] ws_s5lc8 [Occ=Once] ->
              let {
                sat_s5lc9 [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                [LclId] =
                    [ws_s5lc8] \s [] Data.OldList.unwords_go ws_s5lc8;
              } in  GHC.Base.++ w_s5lc7 sat_s5lc9;
        };

lvl9_r5kSr :: forall a. [a]
[GblId] =
    [] \u [] GHC.List.reverse1 GHC.Types.[] GHC.Types.[];

lvl10_r5kSs :: forall a. [a]
[GblId] =
    [] \u [] GHC.Base.++ GHC.Types.[] lvl9_r5kSr;

poly_$wgo_r5kSt
  :: forall a. [a] -> GHC.Prim.Word# -> [a] -> [a] -> [[a]]
[GblId, Arity=4, Str=<S,1*U><L,U><L,U><L,U>, Unf=OtherCon []] =
    sat-only [] \r [w_s5lca ww_s5lcb ww1_s5lcc ww2_s5lcd]
        case w_s5lca of {
          [] -> [] [];
          : y_s5lcf [Occ=OnceL*] ys_s5lcg [Occ=Once*] ->
              case plusWord# [ww_s5lcb 1##] of lp_s5lch [Dmd=<S,U>] {
                __DEFAULT ->
                    case ltWord# [lp_s5lch 255##] of {
                      __DEFAULT ->
                          case plusWord# [lp_s5lch 1##] of sat_s5lcj {
                            __DEFAULT ->
                                case and# [lp_s5lch sat_s5lcj] of {
                                  __DEFAULT ->
                                      let {
                                        b'_s5lcl :: [a_s5koc]
                                        [LclId, Unf=OtherCon []] =
                                            CCCS :! [y_s5lcf ww2_s5lcd]; } in
                                      let {
                                        sat_s5lco [Occ=Once] :: [[a_s5koc]]
                                        [LclId] =
                                            [ww1_s5lcc ys_s5lcg lp_s5lch b'_s5lcl] \u []
                                                poly_$wgo_r5kSt
                                                    ys_s5lcg lp_s5lch ww1_s5lcc b'_s5lcl; } in
                                      let {
                                        sat_s5lcn [Occ=Once] :: [a_s5koc]
                                        [LclId] =
                                            [ww1_s5lcc b'_s5lcl] \u []
                                                let {
                                                  sat_s5lcm [Occ=Once, Dmd=<L,1*U>] :: [a_s5koc]
                                                  [LclId] =
                                                      [b'_s5lcl] \s []
                                                          GHC.List.reverse1 b'_s5lcl GHC.Types.[];
                                                } in  GHC.Base.++ ww1_s5lcc sat_s5lcm;
                                      } in  : [sat_s5lcn sat_s5lco];
                                  0## ->
                                      let {
                                        b'_s5lcp :: [a_s5koc]
                                        [LclId] =
                                            [ww1_s5lcc ww2_s5lcd y_s5lcf] \u []
                                                let {
                                                  sat_s5lcr [Occ=Once, Dmd=<L,1*U>] :: [a_s5koc]
                                                  [LclId] =
                                                      [ww2_s5lcd y_s5lcf] \s []
                                                          let {
                                                            sat_s5lcq [Occ=Once] :: [a_s5koc]
                                                            [LclId] =
                                                                CCCS :! [y_s5lcf ww2_s5lcd];
                                                          } in 
                                                            GHC.List.reverse1
                                                                sat_s5lcq GHC.Types.[];
                                                } in  GHC.Base.++ ww1_s5lcc sat_s5lcr; } in
                                      let {
                                        sat_s5lct [Occ=Once] :: [[a_s5koc]]
                                        [LclId] =
                                            [ys_s5lcg lp_s5lch b'_s5lcp] \u []
                                                poly_$wgo_r5kSt
                                                    ys_s5lcg lp_s5lch b'_s5lcp GHC.Types.[]; } in
                                      let {
                                        sat_s5lcs [Occ=Once] :: [a_s5koc]
                                        [LclId] =
                                            [b'_s5lcp] \u [] GHC.Base.++ b'_s5lcp lvl9_r5kSr;
                                      } in  : [sat_s5lcs sat_s5lct];
                                };
                          };
                      1# ->
                          let {
                            b'_s5lcu :: [a_s5koc]
                            [LclId, Unf=OtherCon []] =
                                CCCS :! [y_s5lcf ww2_s5lcd]; } in
                          let {
                            sat_s5lcx [Occ=Once] :: [[a_s5koc]]
                            [LclId] =
                                [ww1_s5lcc ys_s5lcg lp_s5lch b'_s5lcu] \u []
                                    poly_$wgo_r5kSt ys_s5lcg lp_s5lch ww1_s5lcc b'_s5lcu; } in
                          let {
                            sat_s5lcw [Occ=Once] :: [a_s5koc]
                            [LclId] =
                                [ww1_s5lcc b'_s5lcu] \u []
                                    let {
                                      sat_s5lcv [Occ=Once, Dmd=<L,1*U>] :: [a_s5koc]
                                      [LclId] =
                                          [b'_s5lcu] \s [] GHC.List.reverse1 b'_s5lcu GHC.Types.[];
                                    } in  GHC.Base.++ ww1_s5lcc sat_s5lcv;
                          } in  : [sat_s5lcw sat_s5lcx];
                    };
              };
        };

Data.OldList.$winits [InlPrag=NOINLINE]
  :: forall a. [a] -> (# [a], [[a]] #)
[GblId, Arity=1, Str=<L,1*U>, Unf=OtherCon []] =
    [] \r [w_s5lcy]
        let {
          sat_s5lcz [Occ=Once] :: [[a_s5koc]]
          [LclId] =
              [w_s5lcy] \u []
                  poly_$wgo_r5kSt w_s5lcy 0## GHC.Types.[] GHC.Types.[];
        } in  (#,#) [lvl10_r5kSs sat_s5lcz];

Data.OldList.inits [InlPrag=NOUSERINLINE[0]]
  :: forall a. [a] -> [[a]]
[GblId, Arity=1, Str=<L,1*U>m2, Unf=OtherCon []] =
    [] \r [w_s5lcA]
        case Data.OldList.$winits w_s5lcA of {
          (#,#) ww1_s5lcC [Occ=Once] ww2_s5lcD [Occ=Once] ->
              : [ww1_s5lcC ww2_s5lcD];
        };

Data.OldList.$tc'SnocBuilder3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'SnocBuilder"#;

Data.OldList.$tc'SnocBuilder2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.OldList.$tc'SnocBuilder3];

Data.OldList.$tcSnocBuilder2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SnocBuilder"#;

Data.OldList.$tcSnocBuilder1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.OldList.$tcSnocBuilder2];

Data.OldList.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Data.OldList"#;

Data.OldList.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.OldList.$trModule2];

Data.OldList.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Data.OldList.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.OldList.$trModule4];

Data.OldList.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Data.OldList.$trModule3
                                     Data.OldList.$trModule1];

Data.OldList.$tcSnocBuilder :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [17650604350574790456##
                                    3021529305462083578##
                                    Data.OldList.$trModule
                                    Data.OldList.$tcSnocBuilder1
                                    0#
                                    GHC.Types.krep$*Arr*];

$krep_r5kSu :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcWord
                                              GHC.Types.[]];

$krep1_r5kSv :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

$krep2_r5kSw :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep1_r5kSv GHC.Types.[]];

$krep3_r5kSx :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep2_r5kSw];

$krep4_r5kSy :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Data.OldList.$tcSnocBuilder
                                              $krep2_r5kSw];

$krep5_r5kSz :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_r5kSx $krep4_r5kSy];

$krep6_r5kSA :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_r5kSx $krep5_r5kSz];

Data.OldList.$tc'SnocBuilder1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_r5kSu $krep6_r5kSA];

Data.OldList.$tc'SnocBuilder :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [6719263830224029004##
                                    9134053658265160069##
                                    Data.OldList.$trModule
                                    Data.OldList.$tc'SnocBuilder2
                                    1#
                                    Data.OldList.$tc'SnocBuilder1];

lvl11_r5kSB :: GHC.Types.Char -> GHC.Types.Bool
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(1*U)>,
 Unf=OtherCon []] =
    [] \r [ds_s5lcE]
        case ds_s5lcE of {
          GHC.Types.C# x_s5lcG [Occ=Once!] ->
              case x_s5lcG of {
                __DEFAULT -> GHC.Types.False [];
                '\n'# -> GHC.Types.True [];
              };
        };

Data.OldList.lines [Occ=LoopBreaker]
  :: GHC.Base.String -> [GHC.Base.String]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s5lcI]
        case ds_s5lcI of wild_s5lcJ {
          [] -> [] [];
          : _ [Occ=Dead] _ [Occ=Dead] ->
              let {
                ds1_s5lcM [Dmd=<L,U(1*U,1*U)>]
                  :: ([GHC.Types.Char], [[GHC.Types.Char]])
                [LclId] =
                    [wild_s5lcJ] \u []
                        case GHC.List.$wbreak lvl11_r5kSB wild_s5lcJ of {
                          (#,#) ww1_s5lcO [Occ=Once] ww2_s5lcP [Occ=Once!] ->
                              let {
                                sat_s5lcT [Occ=Once] :: [[GHC.Types.Char]]
                                [LclId] =
                                    [ww2_s5lcP] \u []
                                        case ww2_s5lcP of {
                                          [] -> [] [];
                                          : _ [Occ=Dead] s''_s5lcS [Occ=Once] ->
                                              Data.OldList.lines s''_s5lcS;
                                        };
                              } in  (,) [ww1_s5lcO sat_s5lcT];
                        }; } in
              let {
                sat_s5ld1 [Occ=Once] :: [[GHC.Types.Char]]
                [LclId] =
                    [ds1_s5lcM] \u []
                        case ds1_s5lcM of {
                          (,) _ [Occ=Dead] t_s5ld0 [Occ=Once] -> t_s5ld0;
                        }; } in
              let {
                sat_s5lcX [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [ds1_s5lcM] \u []
                        case ds1_s5lcM of {
                          (,) h_s5lcV [Occ=Once] _ [Occ=Dead] -> h_s5lcV;
                        };
              } in  : [sat_s5lcX sat_s5ld1];
        };

Data.OldList.SnocBuilder
  :: forall a.
     GHC.Prim.Word# -> [a] -> [a] -> Data.OldList.SnocBuilder a
[GblId[DataCon],
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        Data.OldList.SnocBuilder [eta_B3 eta_B2 eta_B1];


==================== STG syntax: ====================
2018-03-16 16:00:18.546082414 UTC

Data.OldList.$WSnocBuilder [InlPrag=INLINE[2]]
  :: forall a.
     GHC.Types.Word -> [a] -> [a] -> Data.OldList.SnocBuilder a
[GblId[DataConWrapper],
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,U><L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [dt_s5kSD dt_s5kSE dt_s5kSF]
        case dt_s5kSD of {
          GHC.Types.W# dt_s5kSH [Occ=Once] ->
              Data.OldList.SnocBuilder [dt_s5kSH dt_s5kSE dt_s5kSF];
        };

Data.OldList.dropWhileEnd
  :: forall a. (a -> GHC.Types.Bool) -> [a] -> [a]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,C(U)><S,1*U>,
 Unf=OtherCon []] =
    [] \r [p_s5kSI eta_s5kSJ]
        let {
          go_s5kSK [Occ=LoopBreaker] :: [a_a5jar] -> [a_a5jar]
          [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
              sat-only [p_s5kSI go_s5kSK] \r [ds_s5kSL]
                  case ds_s5kSL of {
                    [] -> [] [];
                    : y_s5kSN ys_s5kSO [Occ=Once*] ->
                        case p_s5kSI y_s5kSN of {
                          GHC.Types.False ->
                              let {
                                sat_s5kSQ [Occ=Once] :: [a_a5jar]
                                [LclId] =
                                    [go_s5kSK ys_s5kSO] \u [] go_s5kSK ys_s5kSO;
                              } in  : [y_s5kSN sat_s5kSQ];
                          GHC.Types.True ->
                              case go_s5kSK ys_s5kSO of wild2_s5kSR {
                                [] -> [] [];
                                : _ [Occ=Dead] _ [Occ=Dead] -> : [y_s5kSN wild2_s5kSR];
                              };
                        };
                  };
        } in  go_s5kSK eta_s5kSJ;

Data.OldList.stripPrefix [Occ=LoopBreaker]
  :: forall a. GHC.Classes.Eq a => [a] -> [a] -> GHC.Base.Maybe [a]
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U(C(C1(U)),A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dEq_s5kSU ds_s5kSV ys_s5kSW]
        case ds_s5kSV of {
          [] -> GHC.Base.Just [ys_s5kSW];
          : x_s5kSY [Occ=Once] xs_s5kSZ [Occ=Once] ->
              case ys_s5kSW of {
                [] -> GHC.Base.Nothing [];
                : y_s5kT1 [Occ=Once] ys1_s5kT2 [Occ=Once] ->
                    case GHC.Classes.== $dEq_s5kSU x_s5kSY y_s5kT1 of {
                      GHC.Types.False -> GHC.Base.Nothing [];
                      GHC.Types.True ->
                          Data.OldList.stripPrefix $dEq_s5kSU xs_s5kSZ ys1_s5kT2;
                    };
              };
        };

Data.OldList.find
  :: forall a. (a -> GHC.Types.Bool) -> [a] -> GHC.Base.Maybe a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,C(U)><S,1*U>,
 Unf=OtherCon []] =
    [] \r [p_s5kT4 x_s5kT5]
        let-no-escape {
          go_s5kT6 [Occ=LoopBreakerT[1]]
            :: [a_a5j9W] -> GHC.Base.Maybe a_a5j9W
          [LclId[JoinId(1)], Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
              sat-only [p_s5kT4 go_s5kT6] \r [ds_s5kT7]
                  case ds_s5kT7 of {
                    [] -> GHC.Base.Nothing [];
                    : y_s5kT9 ys_s5kTa [Occ=Once] ->
                        case p_s5kT4 y_s5kT9 of {
                          GHC.Types.False -> go_s5kT6 ys_s5kTa;
                          GHC.Types.True -> GHC.Base.Just [y_s5kT9];
                        };
                  };
        } in  go_s5kT6 x_s5kT5;

Data.OldList.elemIndex
  :: forall a.
     GHC.Classes.Eq a =>
     a -> [a] -> GHC.Base.Maybe GHC.Types.Int
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*U(1*C1(C(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dEq_s5kTc x_s5kTd]
        let {
          p_s5kTe [Occ=OnceL!, Dmd=<L,C(U)>] :: a_a5jaa -> GHC.Types.Bool
          [LclId] =
              [$dEq_s5kTc x_s5kTd] \u [] GHC.Classes.== $dEq_s5kTc x_s5kTd; } in
        let {
          sat_s5kTp [Occ=OnceT[0]]
            :: [a_a5jaa] -> GHC.Base.Maybe GHC.Types.Int
          [LclId] =
              [p_s5kTe] \r [x1_s5kTf]
                  let-no-escape {
                    go_s5kTg [Occ=LoopBreakerT[2]]
                      :: [a_a5jaa] -> GHC.Prim.Int# -> GHC.Base.Maybe GHC.Types.Int
                    [LclId[JoinId(2)], Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
                        sat-only [p_s5kTe go_s5kTg] \r [ds_s5kTh eta_s5kTi]
                            case ds_s5kTh of {
                              [] -> GHC.Base.Nothing [];
                              : y_s5kTk [Occ=Once] ys_s5kTl [Occ=Once] ->
                                  case p_s5kTe y_s5kTk of {
                                    GHC.Types.False ->
                                        case +# [eta_s5kTi 1#] of sat_s5kTn {
                                          __DEFAULT -> go_s5kTg ys_s5kTl sat_s5kTn;
                                        };
                                    GHC.Types.True ->
                                        let {
                                          sat_s5kTo [Occ=Once] :: GHC.Types.Int
                                          [LclId] =
                                              CCCS GHC.Types.I#! [eta_s5kTi];
                                        } in  GHC.Base.Just [sat_s5kTo];
                                  };
                            };
                  } in  go_s5kTg x1_s5kTf 0#;
        } in  sat_s5kTp;

Data.OldList.findIndex
  :: forall a.
     (a -> GHC.Types.Bool) -> [a] -> GHC.Base.Maybe GHC.Types.Int
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,C(U)><S,1*U>,
 Unf=OtherCon []] =
    [] \r [p_s5kTq x_s5kTr]
        let-no-escape {
          go_s5kTs [Occ=LoopBreakerT[2]]
            :: [a_a5j9N] -> GHC.Prim.Int# -> GHC.Base.Maybe GHC.Types.Int
          [LclId[JoinId(2)], Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
              sat-only [p_s5kTq go_s5kTs] \r [ds_s5kTt eta_s5kTu]
                  case ds_s5kTt of {
                    [] -> GHC.Base.Nothing [];
                    : y_s5kTw [Occ=Once] ys_s5kTx [Occ=Once] ->
                        case p_s5kTq y_s5kTw of {
                          GHC.Types.False ->
                              case +# [eta_s5kTu 1#] of sat_s5kTz {
                                __DEFAULT -> go_s5kTs ys_s5kTx sat_s5kTz;
                              };
                          GHC.Types.True ->
                              let {
                                sat_s5kTA [Occ=Once] :: GHC.Types.Int
                                [LclId] =
                                    CCCS GHC.Types.I#! [eta_s5kTu];
                              } in  GHC.Base.Just [sat_s5kTA];
                        };
                  };
        } in  go_s5kTs x_s5kTr 0#;

Data.OldList.findIndices [InlPrag=INLINE (sat-args=2)]
  :: forall a. (a -> GHC.Types.Bool) -> [a] -> [GHC.Types.Int]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,C(U)><S,1*U>,
 Unf=OtherCon []] =
    [] \r [p_s5kTB ls_s5kTC]
        let {
          go_s5kTD [Occ=LoopBreaker]
            :: [a_a5j9e] -> GHC.Prim.Int# -> [GHC.Types.Int]
          [LclId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
              sat-only [p_s5kTB go_s5kTD] \r [ds_s5kTE eta_s5kTF]
                  case ds_s5kTE of {
                    [] -> [] [];
                    : y_s5kTH [Occ=Once] ys_s5kTI [Occ=Once*] ->
                        case p_s5kTB y_s5kTH of {
                          GHC.Types.False ->
                              case +# [eta_s5kTF 1#] of sat_s5kTK {
                                __DEFAULT -> go_s5kTD ys_s5kTI sat_s5kTK;
                              };
                          GHC.Types.True ->
                              let {
                                sat_s5kTN [Occ=Once] :: [GHC.Types.Int]
                                [LclId] =
                                    [go_s5kTD eta_s5kTF ys_s5kTI] \u []
                                        case +# [eta_s5kTF 1#] of sat_s5kTM {
                                          __DEFAULT -> go_s5kTD ys_s5kTI sat_s5kTM;
                                        }; } in
                              let {
                                sat_s5kTL [Occ=Once] :: GHC.Types.Int
                                [LclId] =
                                    CCCS GHC.Types.I#! [eta_s5kTF];
                              } in  : [sat_s5kTL sat_s5kTN];
                        };
                  };
        } in  go_s5kTD ls_s5kTC 0#;

Data.OldList.elemIndices
  :: forall a. GHC.Classes.Eq a => a -> [a] -> [GHC.Types.Int]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*U(1*C1(C(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dEq_s5kTO x_s5kTP]
        let {
          sat_s5kTQ [Occ=Once] :: a_a5ja3 -> GHC.Types.Bool
          [LclId] =
              [$dEq_s5kTO x_s5kTP] \u [] GHC.Classes.== $dEq_s5kTO x_s5kTP;
        } in  Data.OldList.findIndices sat_s5kTQ;

Data.OldList.isPrefixOf [Occ=LoopBreaker]
  :: forall a. GHC.Classes.Eq a => [a] -> [a] -> GHC.Types.Bool
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U(C(C1(U)),A)><S,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [$dEq_s5kTR ds_s5kTS ds1_s5kTT]
        case ds_s5kTS of {
          [] -> GHC.Types.True [];
          : ipv_s5kTV [Occ=Once] ipv1_s5kTW [Occ=Once] ->
              case ds1_s5kTT of {
                [] -> GHC.Types.False [];
                : ipv2_s5kTY [Occ=Once] ipv3_s5kTZ [Occ=Once] ->
                    case GHC.Classes.== $dEq_s5kTR ipv_s5kTV ipv2_s5kTY of {
                      GHC.Types.False -> GHC.Types.False [];
                      GHC.Types.True ->
                          Data.OldList.isPrefixOf $dEq_s5kTR ipv1_s5kTW ipv3_s5kTZ;
                    };
              };
        };

Data.OldList.isInfixOf
  :: forall a. GHC.Classes.Eq a => [a] -> [a] -> GHC.Types.Bool
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U(C(C1(U)),A)><S,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dEq_s5kU1 needle_s5kU2 haystack_s5kU3]
        let-no-escape {
          tailsGo_s5kU4 [Occ=LoopBreakerT[1]] :: [a_a5j96] -> GHC.Types.Bool
          [LclId[JoinId(1)], Arity=1, Str=<L,U>, Unf=OtherCon []] =
              sat-only [$dEq_s5kU1 needle_s5kU2 tailsGo_s5kU4] \r [xs_s5kU5]
                  case Data.OldList.isPrefixOf $dEq_s5kU1 needle_s5kU2 xs_s5kU5 of {
                    GHC.Types.False ->
                        case xs_s5kU5 of {
                          [] -> GHC.Types.False [];
                          : _ [Occ=Dead] xs'_s5kU9 [Occ=Once] -> tailsGo_s5kU4 xs'_s5kU9;
                        };
                    GHC.Types.True -> GHC.Types.True [];
                  };
        } in  tailsGo_s5kU4 haystack_s5kU3;

Data.OldList.dropLength [Occ=LoopBreaker]
  :: forall a b. [a] -> [b] -> [b]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s5kUa y_s5kUb]
        case ds_s5kUa of {
          [] -> y_s5kUb;
          : _ [Occ=Dead] ipv1_s5kUe [Occ=Once] ->
              case y_s5kUb of {
                [] -> [] [];
                : _ [Occ=Dead] ipv3_s5kUh [Occ=Once] ->
                    Data.OldList.dropLength ipv1_s5kUe ipv3_s5kUh;
              };
        };

Data.OldList.dropLengthMaybe [Occ=LoopBreaker]
  :: forall a b. [a] -> [b] -> GHC.Base.Maybe [b]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ds_s5kUi y_s5kUj]
        case ds_s5kUi of {
          [] -> GHC.Base.Just [y_s5kUj];
          : _ [Occ=Dead] ipv1_s5kUm [Occ=Once] ->
              case y_s5kUj of {
                [] -> GHC.Base.Nothing [];
                : _ [Occ=Dead] ipv3_s5kUp [Occ=Once] ->
                    Data.OldList.dropLengthMaybe ipv1_s5kUm ipv3_s5kUp;
              };
        };

Data.OldList.isSuffixOf
  :: forall a. GHC.Classes.Eq a => [a] -> [a] -> GHC.Types.Bool
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U(C(C1(U)),A)><S,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dEq_s5kUq ns_s5kUr hs_s5kUs]
        case Data.OldList.dropLengthMaybe ns_s5kUr hs_s5kUs of {
          GHC.Base.Nothing -> GHC.Types.False [];
          GHC.Base.Just x_s5kUu [Occ=Once] ->
              case Data.OldList.dropLength x_s5kUu hs_s5kUs of sat_s5kUv {
                __DEFAULT -> GHC.Classes.$fEq[]_$c== $dEq_s5kUq ns_s5kUr sat_s5kUv;
              };
        };

Data.OldList.elem_by [Occ=LoopBreaker]
  :: forall a.
     (a -> a -> GHC.Types.Bool) -> a -> [a] -> GHC.Types.Bool
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s5kUw ds1_s5kUx ds2_s5kUy]
        case ds2_s5kUy of {
          [] -> GHC.Types.False [];
          : x_s5kUA [Occ=Once] xs_s5kUB [Occ=Once] ->
              case ds_s5kUw x_s5kUA ds1_s5kUx of {
                GHC.Types.False ->
                    Data.OldList.elem_by ds_s5kUw ds1_s5kUx xs_s5kUB;
                GHC.Types.True -> GHC.Types.True [];
              };
        };

Data.OldList.nubBy
  :: forall a. (a -> a -> GHC.Types.Bool) -> [a] -> [a]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><S,1*U>,
 Unf=OtherCon []] =
    [] \r [eq_s5kUD l_s5kUE]
        let {
          nubBy'_s5kUF [Occ=LoopBreaker]
            :: [a_a5j7x] -> [a_a5j7x] -> [a_a5j7x]
          [LclId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
              sat-only [eq_s5kUD nubBy'_s5kUF] \r [ds_s5kUG ds1_s5kUH]
                  case ds_s5kUG of {
                    [] -> [] [];
                    : y_s5kUJ ys_s5kUK [Occ=Once*] ->
                        case Data.OldList.elem_by eq_s5kUD y_s5kUJ ds1_s5kUH of {
                          GHC.Types.False ->
                              let {
                                sat_s5kUN [Occ=Once] :: [a_a5j7x]
                                [LclId] =
                                    [nubBy'_s5kUF ds1_s5kUH y_s5kUJ ys_s5kUK] \u []
                                        let {
                                          sat_s5kUM [Occ=Once] :: [a_a5j7x]
                                          [LclId] =
                                              CCCS :! [y_s5kUJ ds1_s5kUH];
                                        } in  nubBy'_s5kUF ys_s5kUK sat_s5kUM;
                              } in  : [y_s5kUJ sat_s5kUN];
                          GHC.Types.True -> nubBy'_s5kUF ys_s5kUK ds1_s5kUH;
                        };
                  };
        } in  nubBy'_s5kUF l_s5kUE GHC.Types.[];

Data.OldList.nub :: forall a. GHC.Classes.Eq a => [a] -> [a]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*U(1*C(C1(U)),A)><S,1*U>,
 Unf=OtherCon []] =
    [] \r [$dEq_s5kUO eta_s5kUP]
        let {
          sat_s5kUQ [Occ=Once, Dmd=<L,C(C1(U))>]
            :: a_a5j8h -> a_a5j8h -> GHC.Types.Bool
          [LclId] =
              [$dEq_s5kUO] \u [] GHC.Classes.== $dEq_s5kUO;
        } in  Data.OldList.nubBy sat_s5kUQ eta_s5kUP;

Data.OldList.deleteBy [Occ=LoopBreaker]
  :: forall a. (a -> a -> GHC.Types.Bool) -> a -> [a] -> [a]
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s5kUR ds1_s5kUS ds2_s5kUT]
        case ds2_s5kUT of {
          [] -> [] [];
          : y_s5kUV ys_s5kUW [Occ=Once*] ->
              case ds_s5kUR ds1_s5kUS y_s5kUV of {
                GHC.Types.False ->
                    let {
                      sat_s5kUY [Occ=Once] :: [a_a5j6X]
                      [LclId] =
                          [ds_s5kUR ds1_s5kUS ys_s5kUW] \u []
                              Data.OldList.deleteBy ds_s5kUR ds1_s5kUS ys_s5kUW;
                    } in  : [y_s5kUV sat_s5kUY];
                GHC.Types.True -> ys_s5kUW;
              };
        };

Data.OldList.deleteFirstsBy
  :: forall a. (a -> a -> GHC.Types.Bool) -> [a] -> [a] -> [a]
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [eq_s5kUZ eta_s5kV0 eta1_s5kV1]
        let-no-escape {
          go_s5kV2 [Occ=LoopBreakerT[2]]
            :: [a_a5j71] -> [a_a5j71] -> [a_a5j71]
          [LclId[JoinId(2)], Arity=2, Str=<S,1*U><S,1*U>, Unf=OtherCon []] =
              sat-only [eq_s5kUZ go_s5kV2] \r [ds_s5kV3 eta2_s5kV4]
                  case ds_s5kV3 of {
                    [] -> eta2_s5kV4;
                    : y_s5kV6 [Occ=Once] ys_s5kV7 [Occ=Once] ->
                        case
                            Data.OldList.deleteBy eq_s5kUZ y_s5kV6 eta2_s5kV4
                        of
                        sat_s5kV8
                        { __DEFAULT -> go_s5kV2 ys_s5kV7 sat_s5kV8;
                        };
                  };
        } in  go_s5kV2 eta1_s5kV1 eta_s5kV0;

Data.OldList.delete
  :: forall a. GHC.Classes.Eq a => a -> [a] -> [a]
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*U(1*C(C1(U)),A)><L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [$dEq_s5kV9 eta_s5kVa eta1_s5kVb]
        let {
          sat_s5kVc [Occ=Once, Dmd=<L,C(C1(U))>]
            :: a_a5j7c -> a_a5j7c -> GHC.Types.Bool
          [LclId] =
              [$dEq_s5kV9] \u [] GHC.Classes.== $dEq_s5kV9;
        } in  Data.OldList.deleteBy sat_s5kVc eta_s5kVa eta1_s5kVb;

Data.OldList.\\ :: forall a. GHC.Classes.Eq a => [a] -> [a] -> [a]
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*U(1*C(C1(U)),A)><S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [$dEq_s5kVd eta_s5kVe eta1_s5kVf]
        let {
          lvl12_s5kVg [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: a_a5j7j -> a_a5j7j -> GHC.Types.Bool
          [LclId] =
              [$dEq_s5kVd] \u [] GHC.Classes.== $dEq_s5kVd;
        } in 
          let-no-escape {
            go_s5kVh [Occ=LoopBreakerT[2]]
              :: [a_a5j7j] -> [a_a5j7j] -> [a_a5j7j]
            [LclId[JoinId(2)], Arity=2, Str=<S,1*U><S,1*U>, Unf=OtherCon []] =
                sat-only [lvl12_s5kVg go_s5kVh] \r [ds_s5kVi eta2_s5kVj]
                    case ds_s5kVi of {
                      [] -> eta2_s5kVj;
                      : y_s5kVl [Occ=Once] ys_s5kVm [Occ=Once] ->
                          case
                              Data.OldList.deleteBy lvl12_s5kVg y_s5kVl eta2_s5kVj
                          of
                          sat_s5kVn
                          { __DEFAULT -> go_s5kVh ys_s5kVm sat_s5kVn;
                          };
                    };
          } in  go_s5kVh eta1_s5kVf eta_s5kVe;

Data.OldList.unionBy
  :: forall a. (a -> a -> GHC.Types.Bool) -> [a] -> [a] -> [a]
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><S,U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [eq_s5kVo xs_s5kVp ys_s5kVq]
        let {
          sat_s5kVz [Occ=Once, Dmd=<L,1*U>] :: [a_a5j80]
          [LclId] =
              [eq_s5kVo xs_s5kVp ys_s5kVq] \s []
                  case Data.OldList.nubBy eq_s5kVo ys_s5kVq of sat_s5kVy {
                    __DEFAULT ->
                        let-no-escape {
                          go_s5kVr [Occ=LoopBreakerT[2]]
                            :: [a_a5j80] -> [a_a5j80] -> [a_a5j80]
                          [LclId[JoinId(2)], Arity=2, Str=<S,1*U><S,1*U>, Unf=OtherCon []] =
                              sat-only [eq_s5kVo go_s5kVr] \r [ds_s5kVs eta_s5kVt]
                                  case ds_s5kVs of {
                                    [] -> eta_s5kVt;
                                    : y_s5kVv [Occ=Once] ys1_s5kVw [Occ=Once] ->
                                        case
                                            Data.OldList.deleteBy eq_s5kVo y_s5kVv eta_s5kVt
                                        of
                                        sat_s5kVx
                                        { __DEFAULT -> go_s5kVr ys1_s5kVw sat_s5kVx;
                                        };
                                  };
                        } in  go_s5kVr xs_s5kVp sat_s5kVy;
                  };
        } in  GHC.Base.++ xs_s5kVp sat_s5kVz;

Data.OldList.union
  :: forall a. GHC.Classes.Eq a => [a] -> [a] -> [a]
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*U(1*C(C1(U)),A)><S,U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [$dEq_s5kVA eta_s5kVB eta1_s5kVC]
        let {
          sat_s5kVD [Occ=Once, Dmd=<L,C(C1(U))>]
            :: a_a5j8a -> a_a5j8a -> GHC.Types.Bool
          [LclId] =
              [$dEq_s5kVA] \u [] GHC.Classes.== $dEq_s5kVA;
        } in  Data.OldList.unionBy sat_s5kVD eta_s5kVB eta1_s5kVC;

Data.OldList.intersectBy
  :: forall a. (a -> a -> GHC.Types.Bool) -> [a] -> [a] -> [a]
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C(U))><S,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s5kVE ds1_s5kVF ds2_s5kVG]
        case ds1_s5kVF of wild_s5kVH {
          [] -> [] [];
          : _ [Occ=Dead] _ [Occ=Dead] ->
              case ds2_s5kVG of wild1_s5kVK {
                [] -> [] [];
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    let {
                      go_s5kVN [Occ=LoopBreaker] :: [a_a5j6L] -> [a_a5j6L]
                      [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                          sat-only [ds_s5kVE wild1_s5kVK go_s5kVN] \r [ds3_s5kVO]
                              case ds3_s5kVO of {
                                [] -> [] [];
                                : y_s5kVQ ys_s5kVR [Occ=Once*] ->
                                    let {
                                      sat_s5kVS [Occ=Once, Dmd=<L,C(U)>]
                                        :: a_a5j6L -> GHC.Types.Bool
                                      [LclId] =
                                          [ds_s5kVE y_s5kVQ] \u [] ds_s5kVE y_s5kVQ;
                                    } in 
                                      case GHC.List.any sat_s5kVS wild1_s5kVK of {
                                        GHC.Types.False -> go_s5kVN ys_s5kVR;
                                        GHC.Types.True ->
                                            let {
                                              sat_s5kVU [Occ=Once] :: [a_a5j6L]
                                              [LclId] =
                                                  [go_s5kVN ys_s5kVR] \u [] go_s5kVN ys_s5kVR;
                                            } in  : [y_s5kVQ sat_s5kVU];
                                      };
                              };
                    } in  go_s5kVN wild_s5kVH;
              };
        };

Data.OldList.intersect
  :: forall a. GHC.Classes.Eq a => [a] -> [a] -> [a]
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*U(1*C(C(U)),A)><S,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [$dEq_s5kVV eta_s5kVW eta1_s5kVX]
        let {
          sat_s5kVY [Occ=Once, Dmd=<L,C(C(U))>]
            :: a_a5j6Q -> a_a5j6Q -> GHC.Types.Bool
          [LclId] =
              [$dEq_s5kVV] \u [] GHC.Classes.== $dEq_s5kVV;
        } in  Data.OldList.intersectBy sat_s5kVY eta_s5kVW eta1_s5kVX;

Data.OldList.prependToAll [Occ=LoopBreaker]
  :: forall a. a -> [a] -> [a]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s5kVZ ds1_s5kW0]
        case ds1_s5kW0 of {
          [] -> [] [];
          : x_s5kW2 [Occ=Once] xs_s5kW3 [Occ=Once] ->
              let {
                sat_s5kW4 [Occ=Once] :: [a_a5j6w]
                [LclId] =
                    [ds_s5kVZ xs_s5kW3] \u []
                        Data.OldList.prependToAll ds_s5kVZ xs_s5kW3; } in
              let {
                sat_s5kW5 [Occ=Once] :: [a_a5j6w]
                [LclId] =
                    CCCS :! [x_s5kW2 sat_s5kW4];
              } in  : [ds_s5kVZ sat_s5kW5];
        };

Data.OldList.intersperse :: forall a. a -> [a] -> [a]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s5kW6 ds1_s5kW7]
        case ds1_s5kW7 of {
          [] -> [] [];
          : x_s5kW9 [Occ=Once] xs_s5kWa [Occ=Once] ->
              let {
                sat_s5kWb [Occ=Once] :: [a_a5j6B]
                [LclId] =
                    [ds_s5kW6 xs_s5kWa] \u []
                        Data.OldList.prependToAll ds_s5kW6 xs_s5kWa;
              } in  : [x_s5kW9 sat_s5kWb];
        };

Data.OldList.intercalate1 [Occ=LoopBreaker]
  :: forall a. [[a]] -> [a]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s5kWc]
        case ds_s5kWc of {
          [] -> [] [];
          : y_s5kWe [Occ=Once] ys_s5kWf [Occ=Once] ->
              let {
                sat_s5kWg [Occ=Once, Dmd=<L,1*U>] :: [a_a5j6F]
                [LclId] =
                    [ys_s5kWf] \s [] Data.OldList.intercalate1 ys_s5kWf;
              } in  GHC.Base.++ y_s5kWe sat_s5kWg;
        };

Data.OldList.intercalate :: forall a. [a] -> [[a]] -> [a]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [xs_s5kWh xss_s5kWi]
        case xss_s5kWi of {
          [] -> [] [];
          : x_s5kWk [Occ=Once] xs1_s5kWl [Occ=Once] ->
              let {
                sat_s5kWm [Occ=Once] :: [[a_a5j6F]]
                [LclId] =
                    [xs_s5kWh xs1_s5kWl] \u []
                        Data.OldList.prependToAll xs_s5kWh xs1_s5kWl; } in
              let {
                sat_s5kWn [Occ=Once] :: [[a_a5j6F]]
                [LclId] =
                    CCCS :! [x_s5kWk sat_s5kWm];
              } in  Data.OldList.intercalate1 sat_s5kWn;
        };

poly_go_r5kSf :: forall a. [[a]] -> [[a]]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    sat-only [] \r [ds_s5kWo]
        case ds_s5kWo of {
          [] -> [] [];
          : y_s5kWq [Occ=Once!] ys_s5kWr [Occ=Once*] ->
              case y_s5kWq of {
                [] -> poly_go_r5kSf ys_s5kWr;
                : _ [Occ=Dead] t_s5kWu [Occ=Once] ->
                    let {
                      sat_s5kWv [Occ=Once] :: [[a_a5j6n]]
                      [LclId] =
                          [ys_s5kWr] \u [] poly_go_r5kSf ys_s5kWr;
                    } in  : [t_s5kWu sat_s5kWv];
              };
        };

poly_go1_r5kSg :: forall a. [[a]] -> [a]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    sat-only [] \r [ds_s5kWw]
        case ds_s5kWw of {
          [] -> [] [];
          : y_s5kWy [Occ=Once!] ys_s5kWz [Occ=Once*] ->
              case y_s5kWy of {
                [] -> poly_go1_r5kSg ys_s5kWz;
                : h_s5kWB [Occ=Once] _ [Occ=Dead] ->
                    let {
                      sat_s5kWD [Occ=Once] :: [a_a5j6n]
                      [LclId] =
                          [ys_s5kWz] \u [] poly_go1_r5kSg ys_s5kWz;
                    } in  : [h_s5kWB sat_s5kWD];
              };
        };

Data.OldList.transpose [Occ=LoopBreaker]
  :: forall a. [[a]] -> [[a]]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s5kWE]
        case ds_s5kWE of {
          [] -> [] [];
          : ds1_s5kWG [Occ=Once!] xss_s5kWH ->
              case ds1_s5kWG of {
                [] -> Data.OldList.transpose xss_s5kWH;
                : x_s5kWJ [Occ=Once] xs_s5kWK [Occ=Once] ->
                    let {
                      sat_s5kWP [Occ=Once] :: [[a_a5j6n]]
                      [LclId] =
                          [xss_s5kWH xs_s5kWK] \u []
                              let {
                                sat_s5kWN [Occ=Once] :: [[a_a5j6n]]
                                [LclId] =
                                    [xss_s5kWH] \u [] poly_go_r5kSf xss_s5kWH; } in
                              let {
                                sat_s5kWO [Occ=Once] :: [[a_a5j6n]]
                                [LclId] =
                                    CCCS :! [xs_s5kWK sat_s5kWN];
                              } in  Data.OldList.transpose sat_s5kWO; } in
                    let {
                      sat_s5kWL [Occ=Once] :: [a_a5j6n]
                      [LclId] =
                          [xss_s5kWH] \u [] poly_go1_r5kSg xss_s5kWH; } in
                    let {
                      sat_s5kWM [Occ=Once] :: [a_a5j6n]
                      [LclId] =
                          CCCS :! [x_s5kWJ sat_s5kWL];
                    } in  : [sat_s5kWM sat_s5kWP];
              };
        };

Data.OldList.select [InlPrag=NOUSERINLINE[0]]
  :: forall a. (a -> GHC.Types.Bool) -> a -> ([a], [a]) -> ([a], [a])
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<C(S),1*C1(U)><L,U><L,U(1*U,1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s5kWQ w1_s5kWR w2_s5kWS]
        case w_s5kWQ w1_s5kWR of {
          GHC.Types.False ->
              let {
                sat_s5kX1 [Occ=Once] :: [a_s5krI]
                [LclId] =
                    [w2_s5kWS] \u []
                        case w2_s5kWS of {
                          (,) _ [Occ=Dead] fs_s5kX0 [Occ=Once] -> fs_s5kX0;
                        }; } in
              let {
                sat_s5kX2 [Occ=Once] :: [a_s5krI]
                [LclId] =
                    CCCS :! [w1_s5kWR sat_s5kX1]; } in
              let {
                sat_s5kWX [Occ=Once] :: [a_s5krI]
                [LclId] =
                    [w2_s5kWS] \u []
                        case w2_s5kWS of {
                          (,) ts_s5kWV [Occ=Once] _ [Occ=Dead] -> ts_s5kWV;
                        };
              } in  (,) [sat_s5kWX sat_s5kX2];
          GHC.Types.True ->
              let {
                sat_s5kXb [Occ=Once] :: [a_s5krI]
                [LclId] =
                    [w2_s5kWS] \u []
                        case w2_s5kWS of {
                          (,) _ [Occ=Dead] fs_s5kXa [Occ=Once] -> fs_s5kXa;
                        }; } in
              let {
                sat_s5kX6 [Occ=Once] :: [a_s5krI]
                [LclId] =
                    [w2_s5kWS] \u []
                        case w2_s5kWS of {
                          (,) ts_s5kX4 [Occ=Once] _ [Occ=Dead] -> ts_s5kX4;
                        }; } in
              let {
                sat_s5kX7 [Occ=Once] :: [a_s5krI]
                [LclId] =
                    CCCS :! [w1_s5kWR sat_s5kX6];
              } in  (,) [sat_s5kX7 sat_s5kXb];
        };

Data.OldList.partition [InlPrag=INLINE (sat-args=2)]
  :: forall a. (a -> GHC.Types.Bool) -> [a] -> ([a], [a])
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,C(U)><S,1*U>m,
 Unf=OtherCon []] =
    [] \r [p_s5kXc xs_s5kXd]
        let {
          $wgo_s5kXe [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
            :: [a_a5j6i] -> (# [a_a5j6i], [a_a5j6i] #)
          [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
              sat-only [p_s5kXc $wgo_s5kXe] \r [w_s5kXf]
                  case w_s5kXf of {
                    [] -> (#,#) [GHC.Types.[] GHC.Types.[]];
                    : y_s5kXh ys_s5kXi [Occ=Once] ->
                        let {
                          w1_s5kXj [Dmd=<L,U(1*U,1*U)>] :: ([a_a5j6i], [a_a5j6i])
                          [LclId] =
                              [$wgo_s5kXe ys_s5kXi] \u []
                                  case $wgo_s5kXe ys_s5kXi of {
                                    (#,#) ww1_s5kXl [Occ=Once] ww2_s5kXm [Occ=Once] ->
                                        (,) [ww1_s5kXl ww2_s5kXm];
                                  };
                        } in 
                          case p_s5kXc y_s5kXh of {
                            GHC.Types.False ->
                                let {
                                  sat_s5kXv [Occ=Once] :: [a_a5j6i]
                                  [LclId] =
                                      [w1_s5kXj] \u []
                                          case w1_s5kXj of {
                                            (,) _ [Occ=Dead] fs_s5kXu [Occ=Once] -> fs_s5kXu;
                                          }; } in
                                let {
                                  sat_s5kXw [Occ=Once] :: [a_a5j6i]
                                  [LclId] =
                                      CCCS :! [y_s5kXh sat_s5kXv]; } in
                                let {
                                  sat_s5kXr [Occ=Once] :: [a_a5j6i]
                                  [LclId] =
                                      [w1_s5kXj] \u []
                                          case w1_s5kXj of {
                                            (,) ts_s5kXp [Occ=Once] _ [Occ=Dead] -> ts_s5kXp;
                                          };
                                } in  (#,#) [sat_s5kXr sat_s5kXw];
                            GHC.Types.True ->
                                let {
                                  sat_s5kXF [Occ=Once] :: [a_a5j6i]
                                  [LclId] =
                                      [w1_s5kXj] \u []
                                          case w1_s5kXj of {
                                            (,) _ [Occ=Dead] fs_s5kXE [Occ=Once] -> fs_s5kXE;
                                          }; } in
                                let {
                                  sat_s5kXA [Occ=Once] :: [a_a5j6i]
                                  [LclId] =
                                      [w1_s5kXj] \u []
                                          case w1_s5kXj of {
                                            (,) ts_s5kXy [Occ=Once] _ [Occ=Dead] -> ts_s5kXy;
                                          }; } in
                                let {
                                  sat_s5kXB [Occ=Once] :: [a_a5j6i]
                                  [LclId] =
                                      CCCS :! [y_s5kXh sat_s5kXA];
                                } in  (#,#) [sat_s5kXB sat_s5kXF];
                          };
                  };
        } in 
          case $wgo_s5kXe xs_s5kXd of {
            (#,#) ww1_s5kXH [Occ=Once] ww2_s5kXI [Occ=Once] ->
                (,) [ww1_s5kXH ww2_s5kXI];
          };

Data.OldList.pairWithNil [InlPrag=INLINE[0] (sat-args=1)]
  :: forall acc y. acc -> (acc, [y])
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>m, Unf=OtherCon []] =
    [] \r [x_s5kXJ] (,) [x_s5kXJ GHC.Types.[]];

Data.OldList.mapAccumLF [InlPrag=INLINE[0] (sat-args=1)]
  :: forall acc x y.
     (acc -> x -> (acc, y))
     -> x -> (acc -> (acc, [y])) -> acc -> (acc, [y])
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,1*C1(C1(U(1*U,1*U)))><L,U><L,1*C1(U(1*U,1*U))><L,U>m,
 Unf=OtherCon []] =
    [] \r [f_s5kXK x1_s5kXL r_s5kXM v_s5kXN]
        let {
          ds_s5kXO [Dmd=<L,U(1*U,1*U)>] :: (acc_a5j4Z, y_a5j51)
          [LclId] =
              [f_s5kXK x1_s5kXL v_s5kXN] \u [] f_s5kXK v_s5kXN x1_s5kXL; } in
        let {
          ds1_s5kXP [Dmd=<L,U(1*U,1*U)>] :: (acc_a5j4Z, [y_a5j51])
          [LclId] =
              [r_s5kXM ds_s5kXO] \u []
                  let {
                    sat_s5kXT [Occ=Once] :: acc_a5j4Z
                    [LclId] =
                        [ds_s5kXO] \u []
                            case ds_s5kXO of {
                              (,) s'_s5kXR [Occ=Once] _ [Occ=Dead] -> s'_s5kXR;
                            };
                  } in  r_s5kXM sat_s5kXT; } in
        let {
          sat_s5kY5 [Occ=Once] :: [y_a5j51]
          [LclId] =
              [ds1_s5kXP] \u []
                  case ds1_s5kXP of {
                    (,) _ [Occ=Dead] ys_s5kY4 [Occ=Once] -> ys_s5kY4;
                  }; } in
        let {
          sat_s5kY1 [Occ=Once] :: y_a5j51
          [LclId] =
              [ds_s5kXO] \u []
                  case ds_s5kXO of {
                    (,) _ [Occ=Dead] y1_s5kY0 [Occ=Once] -> y1_s5kY0;
                  }; } in
        let {
          sat_s5kY6 [Occ=Once] :: [y_a5j51]
          [LclId] =
              CCCS :! [sat_s5kY1 sat_s5kY5]; } in
        let {
          sat_s5kXX [Occ=Once] :: acc_a5j4Z
          [LclId] =
              [ds1_s5kXP] \u []
                  case ds1_s5kXP of {
                    (,) s''_s5kXV [Occ=Once] _ [Occ=Dead] -> s''_s5kXV;
                  };
        } in  (,) [sat_s5kXX sat_s5kY6];

Data.OldList.$wmapAccumL [InlPrag=NOINLINE[1], Occ=LoopBreaker]
  :: forall acc x y.
     (acc -> x -> (acc, y)) -> acc -> [x] -> (# acc, [y] #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C1(U(1*U,1*U)))><L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_s5kY7 w1_s5kY8 w2_s5kY9]
        case w2_s5kY9 of {
          [] -> (#,#) [w1_s5kY8 GHC.Types.[]];
          : x1_s5kYb [Occ=Once] xs_s5kYc [Occ=Once] ->
              let {
                ds_s5kYd [Dmd=<L,U(1*U,1*U)>] :: (acc_s5kry, y_s5krA)
                [LclId] =
                    [w_s5kY7 w1_s5kY8 x1_s5kYb] \u [] w_s5kY7 w1_s5kY8 x1_s5kYb; } in
              let {
                ds1_s5kYe [Dmd=<L,U(1*U,1*U)>] :: (acc_s5kry, [y_s5krA])
                [LclId] =
                    [w_s5kY7 xs_s5kYc ds_s5kYd] \u []
                        let {
                          sat_s5kYi [Occ=Once] :: acc_s5kry
                          [LclId] =
                              [ds_s5kYd] \u []
                                  case ds_s5kYd of {
                                    (,) s'_s5kYg [Occ=Once] _ [Occ=Dead] -> s'_s5kYg;
                                  };
                        } in 
                          case Data.OldList.$wmapAccumL w_s5kY7 sat_s5kYi xs_s5kYc of {
                            (#,#) ww1_s5kYk [Occ=Once] ww2_s5kYl [Occ=Once] ->
                                (,) [ww1_s5kYk ww2_s5kYl];
                          }; } in
              let {
                sat_s5kYx [Occ=Once] :: [y_s5krA]
                [LclId] =
                    [ds1_s5kYe] \u []
                        case ds1_s5kYe of {
                          (,) _ [Occ=Dead] ys_s5kYw [Occ=Once] -> ys_s5kYw;
                        }; } in
              let {
                sat_s5kYt [Occ=Once] :: y_s5krA
                [LclId] =
                    [ds_s5kYd] \u []
                        case ds_s5kYd of {
                          (,) _ [Occ=Dead] y1_s5kYs [Occ=Once] -> y1_s5kYs;
                        }; } in
              let {
                sat_s5kYy [Occ=Once] :: [y_s5krA]
                [LclId] =
                    CCCS :! [sat_s5kYt sat_s5kYx]; } in
              let {
                sat_s5kYp [Occ=Once] :: acc_s5kry
                [LclId] =
                    [ds1_s5kYe] \u []
                        case ds1_s5kYe of {
                          (,) s''_s5kYn [Occ=Once] _ [Occ=Dead] -> s''_s5kYn;
                        };
              } in  (#,#) [sat_s5kYp sat_s5kYy];
        };

Data.OldList.mapAccumL [InlPrag=NOUSERINLINE[0]]
  :: forall acc x y.
     (acc -> x -> (acc, y)) -> acc -> [x] -> (acc, [y])
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C1(U(1*U,1*U)))><L,U><S,1*U>m,
 Unf=OtherCon []] =
    [] \r [w_s5kYz w1_s5kYA w2_s5kYB]
        case Data.OldList.$wmapAccumL w_s5kYz w1_s5kYA w2_s5kYB of {
          (#,#) ww1_s5kYD [Occ=Once] ww2_s5kYE [Occ=Once] ->
              (,) [ww1_s5kYD ww2_s5kYE];
        };

Data.OldList.$wmapAccumR [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: forall acc x y.
     (acc -> x -> (acc, y)) -> acc -> [x] -> (# acc, [y] #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C1(U(1*U,1*U)))><L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_s5kYF w1_s5kYG w2_s5kYH]
        case w2_s5kYH of {
          [] -> (#,#) [w1_s5kYG GHC.Types.[]];
          : x1_s5kYJ [Occ=Once] xs_s5kYK [Occ=Once] ->
              let {
                ds_s5kYL [Dmd=<L,U(1*U,1*U)>] :: (acc_s5kro, [y_s5krq])
                [LclId] =
                    [w_s5kYF w1_s5kYG xs_s5kYK] \u []
                        case Data.OldList.$wmapAccumR w_s5kYF w1_s5kYG xs_s5kYK of {
                          (#,#) ww1_s5kYN [Occ=Once] ww2_s5kYO [Occ=Once] ->
                              (,) [ww1_s5kYN ww2_s5kYO];
                        }; } in
              let {
                ds1_s5kYP [Dmd=<L,U(1*U,1*U)>] :: (acc_s5kro, y_s5krq)
                [LclId] =
                    [w_s5kYF x1_s5kYJ ds_s5kYL] \u []
                        let {
                          sat_s5kYT [Occ=Once] :: acc_s5kro
                          [LclId] =
                              [ds_s5kYL] \u []
                                  case ds_s5kYL of {
                                    (,) s'_s5kYR [Occ=Once] _ [Occ=Dead] -> s'_s5kYR;
                                  };
                        } in  w_s5kYF sat_s5kYT x1_s5kYJ; } in
              let {
                sat_s5kZ5 [Occ=Once] :: [y_s5krq]
                [LclId] =
                    [ds_s5kYL] \u []
                        case ds_s5kYL of {
                          (,) _ [Occ=Dead] ys_s5kZ4 [Occ=Once] -> ys_s5kZ4;
                        }; } in
              let {
                sat_s5kZ1 [Occ=Once] :: y_s5krq
                [LclId] =
                    [ds1_s5kYP] \u []
                        case ds1_s5kYP of {
                          (,) _ [Occ=Dead] y1_s5kZ0 [Occ=Once] -> y1_s5kZ0;
                        }; } in
              let {
                sat_s5kZ6 [Occ=Once] :: [y_s5krq]
                [LclId] =
                    CCCS :! [sat_s5kZ1 sat_s5kZ5]; } in
              let {
                sat_s5kYX [Occ=Once] :: acc_s5kro
                [LclId] =
                    [ds1_s5kYP] \u []
                        case ds1_s5kYP of {
                          (,) s''_s5kYV [Occ=Once] _ [Occ=Dead] -> s''_s5kYV;
                        };
              } in  (#,#) [sat_s5kYX sat_s5kZ6];
        };

Data.OldList.mapAccumR [InlPrag=NOUSERINLINE[0]]
  :: forall acc x y.
     (acc -> x -> (acc, y)) -> acc -> [x] -> (acc, [y])
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C1(U(1*U,1*U)))><L,U><S,1*U>m,
 Unf=OtherCon []] =
    [] \r [w_s5kZ7 w1_s5kZ8 w2_s5kZ9]
        case Data.OldList.$wmapAccumR w_s5kZ7 w1_s5kZ8 w2_s5kZ9 of {
          (#,#) ww1_s5kZb [Occ=Once] ww2_s5kZc [Occ=Once] ->
              (,) [ww1_s5kZb ww2_s5kZc];
        };

Data.OldList.insertBy [InlPrag=NOUSERINLINE[0]]
  :: forall a. (a -> a -> GHC.Types.Ordering) -> a -> [a] -> [a]
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><L,U><S,1*U>m2,
 Unf=OtherCon []] =
    [] \r [w_s5kZd w1_s5kZe w2_s5kZf]
        case Data.OldList.$winsertBy w_s5kZd w1_s5kZe w2_s5kZf of {
          (#,#) ww1_s5kZh [Occ=Once] ww2_s5kZi [Occ=Once] ->
              : [ww1_s5kZh ww2_s5kZi];
        };
Data.OldList.$winsertBy [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: forall a.
     (a -> a -> GHC.Types.Ordering) -> a -> [a] -> (# a, [a] #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_s5kZj w1_s5kZk w2_s5kZl]
        case w2_s5kZl of wild_s5kZm {
          [] -> (#,#) [w1_s5kZk GHC.Types.[]];
          : y_s5kZn ys'_s5kZo [Occ=Once] ->
              case w_s5kZj w1_s5kZk y_s5kZn of {
                __DEFAULT -> (#,#) [w1_s5kZk wild_s5kZm];
                GHC.Types.GT ->
                    let {
                      sat_s5kZq [Occ=Once] :: [a_s5krg]
                      [LclId] =
                          [w_s5kZj w1_s5kZk ys'_s5kZo] \u []
                              Data.OldList.insertBy w_s5kZj w1_s5kZk ys'_s5kZo;
                    } in  (#,#) [y_s5kZn sat_s5kZq];
              };
        };

Data.OldList.insert
  :: forall a. GHC.Classes.Ord a => a -> [a] -> [a]
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*U(A,1*C(C1(U)),A,A,A,A,A,A)><L,U><S,1*U>m2,
 Unf=OtherCon []] =
    [] \r [$dOrd_s5kZr e_s5kZs ls_s5kZt]
        let {
          sat_s5kZu [Occ=Once, Dmd=<L,C(C1(U))>]
            :: a_a5j4k -> a_a5j4k -> GHC.Types.Ordering
          [LclId] =
              [$dOrd_s5kZr] \u [] GHC.Classes.compare $dOrd_s5kZr;
        } in 
          case Data.OldList.$winsertBy sat_s5kZu e_s5kZs ls_s5kZt of {
            (#,#) ww1_s5kZw [Occ=Once] ww2_s5kZx [Occ=Once] ->
                : [ww1_s5kZw ww2_s5kZx];
          };

lvl_r5kSh :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "List.maximumBy: empty list"#;

Data.OldList.maximumBy1 :: forall a. a
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl_r5kSh of sat_s5kZy {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_s5kZy;
        };

Data.OldList.maximumBy
  :: forall a. (a -> a -> GHC.Types.Ordering) -> [a] -> a
[GblId, Arity=2, Str=<L,C(C1(U))><S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s5kZz ds1_s5kZA]
        case ds1_s5kZA of {
          [] -> Data.OldList.maximumBy1;
          : ipv_s5kZC [Occ=Once] ipv1_s5kZD [Occ=Once] ->
              let-no-escape {
                go_s5kZE [Occ=LoopBreakerT[2]] :: [a_a5j3S] -> a_a5j3S -> a_a5j3S
                [LclId[JoinId(2)], Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
                    sat-only [ds_s5kZz go_s5kZE] \r [ds2_s5kZF eta_s5kZG]
                        case ds2_s5kZF of {
                          [] -> eta_s5kZG;
                          : y_s5kZI ys_s5kZJ [Occ=Once] ->
                              let {
                                sat_s5kZL [Occ=Once] :: a_a5j3S
                                [LclId] =
                                    [ds_s5kZz eta_s5kZG y_s5kZI] \u []
                                        case ds_s5kZz eta_s5kZG y_s5kZI of {
                                          __DEFAULT -> y_s5kZI;
                                          GHC.Types.GT -> eta_s5kZG;
                                        };
                              } in  go_s5kZE ys_s5kZJ sat_s5kZL;
                        };
              } in  go_s5kZE ipv1_s5kZD ipv_s5kZC;
        };

lvl1_r5kSi :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "List.minimumBy: empty list"#;

Data.OldList.minimumBy1 :: forall a. a
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl1_r5kSi of sat_s5kZM {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_s5kZM;
        };

Data.OldList.minimumBy
  :: forall a. (a -> a -> GHC.Types.Ordering) -> [a] -> a
[GblId, Arity=2, Str=<L,C(C1(U))><S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s5kZN ds1_s5kZO]
        case ds1_s5kZO of {
          [] -> Data.OldList.minimumBy1;
          : ipv_s5kZQ [Occ=Once] ipv1_s5kZR [Occ=Once] ->
              let-no-escape {
                go_s5kZS [Occ=LoopBreakerT[2]] :: [a_a5j3v] -> a_a5j3v -> a_a5j3v
                [LclId[JoinId(2)], Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
                    sat-only [ds_s5kZN go_s5kZS] \r [ds2_s5kZT eta_s5kZU]
                        case ds2_s5kZT of {
                          [] -> eta_s5kZU;
                          : y_s5kZW ys_s5kZX [Occ=Once] ->
                              let {
                                sat_s5kZZ [Occ=Once] :: a_a5j3v
                                [LclId] =
                                    [ds_s5kZN eta_s5kZU y_s5kZW] \u []
                                        case ds_s5kZN eta_s5kZU y_s5kZW of {
                                          __DEFAULT -> eta_s5kZU;
                                          GHC.Types.GT -> y_s5kZW;
                                        };
                              } in  go_s5kZS ys_s5kZX sat_s5kZZ;
                        };
              } in  go_s5kZS ipv1_s5kZR ipv_s5kZQ;
        };

sat_s5l00 :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [1#];

sat_s5l01 :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_s5l00 GHC.Types.[]];

Data.OldList.genericLength2 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_s5l01;

Data.OldList.genericLength1 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True GHC.Types.[];

Data.OldList.strictGenericLength
  :: forall i b. GHC.Num.Num i => [b] -> i
[GblId,
 Arity=2,
 Str=<L,U(C(C1(U)),A,A,A,A,A,C(U))><S,1*U>,
 Unf=OtherCon []] =
    [] \r [$dNum_s5l02 l_s5l03]
        let {
          lvl12_s5l04 [Occ=OnceL] :: i_a5j2k
          [LclId] =
              [$dNum_s5l02] \u []
                  GHC.Num.fromInteger $dNum_s5l02 Data.OldList.genericLength2; } in
        let {
          sat_s5l0c [Occ=Once] :: i_a5j2k
          [LclId] =
              [$dNum_s5l02] \u []
                  GHC.Num.fromInteger $dNum_s5l02 Data.OldList.genericLength1;
        } in 
          let-no-escape {
            gl_s5l05 [Occ=LoopBreakerT[2]] :: [b_a5j2l] -> i_a5j2k -> i_a5j2k
            [LclId[JoinId(2)], Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
                sat-only [$dNum_s5l02 lvl12_s5l04 gl_s5l05] \r [ds_s5l06 a_s5l07]
                    case ds_s5l06 of {
                      [] -> a_s5l07;
                      : _ [Occ=Dead] xs_s5l0a [Occ=Once] ->
                          case GHC.Num.+ $dNum_s5l02 a_s5l07 lvl12_s5l04 of a'_s5l0b {
                            __DEFAULT -> gl_s5l05 xs_s5l0a a'_s5l0b;
                          };
                    };
          } in  gl_s5l05 l_s5l03 sat_s5l0c;

Data.OldList.genericLength [InlPrag=NOINLINE[1], Occ=LoopBreaker]
  :: forall i a. GHC.Num.Num i => [a] -> i
[GblId,
 Arity=2,
 Str=<S,U(C(C1(U)),A,A,A,A,A,C(U))><S,1*U>,
 Unf=OtherCon []] =
    [] \r [$dNum_s5l0d ds_s5l0e]
        case ds_s5l0e of {
          [] -> GHC.Num.fromInteger $dNum_s5l0d Data.OldList.genericLength1;
          : _ [Occ=Dead] l_s5l0h [Occ=Once] ->
              let {
                sat_s5l0j [Occ=Once] :: i_a5j3h
                [LclId] =
                    [$dNum_s5l0d l_s5l0h] \u []
                        Data.OldList.genericLength $dNum_s5l0d l_s5l0h; } in
              let {
                sat_s5l0i [Occ=Once] :: i_a5j3h
                [LclId] =
                    [$dNum_s5l0d] \u []
                        GHC.Num.fromInteger $dNum_s5l0d Data.OldList.genericLength2;
              } in  GHC.Num.+ $dNum_s5l0d sat_s5l0i sat_s5l0j;
        };

Data.OldList.genericTake [Occ=LoopBreaker]
  :: forall i a. GHC.Real.Integral i => i -> [a] -> [a]
[GblId,
 Arity=3,
 Str=<S(S(LS(LLLC(C(S))LLLL)L)LLLLLLLL),U(U(U(A,C(C1(U)),A,A,A,A,C(U)),U(A,A,A,C(C1(U)),A,A,A,A),A),A,A,A,A,A,A,A,A)><L,U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [$dIntegral_s5l0k eta_s5l0l eta1_s5l0m]
        case
            GHC.Real.$p1Integral $dIntegral_s5l0k
        of
        $dReal_s5l0n [Dmd=<S(LS(LLLC(C(S))LLLL)L),U(1*U(A,1*C1(C1(U)),A,A,A,A,C(U)),1*U(A,A,A,1*C1(C1(U)),A,A,A,A),A)>]
        { __DEFAULT ->
              let {
                $dNum_s5l0o [Dmd=<L,U(A,1*C1(C1(U)),A,A,A,A,C(U))>]
                  :: GHC.Num.Num i_a5j1U
                [LclId] =
                    [$dReal_s5l0n] \u [] GHC.Real.$p1Real $dReal_s5l0n; } in
              let {
                sat_s5l0q [Occ=Once] :: i_a5j1U
                [LclId] =
                    [$dNum_s5l0o] \u []
                        GHC.Num.fromInteger $dNum_s5l0o Data.OldList.genericLength1;
              } in 
                case GHC.Real.$p2Real $dReal_s5l0n of sat_s5l0p {
                  __DEFAULT ->
                      case GHC.Classes.<= sat_s5l0p eta_s5l0l sat_s5l0q of {
                        GHC.Types.False ->
                            case eta1_s5l0m of {
                              [] -> [] [];
                              : x_s5l0t [Occ=Once] xs_s5l0u [Occ=Once] ->
                                  let {
                                    sat_s5l0x [Occ=Once] :: [a_a5j1V]
                                    [LclId] =
                                        [$dIntegral_s5l0k eta_s5l0l $dNum_s5l0o xs_s5l0u] \u []
                                            let {
                                              sat_s5l0w [Occ=Once] :: i_a5j1U
                                              [LclId] =
                                                  [eta_s5l0l $dNum_s5l0o] \u []
                                                      let {
                                                        sat_s5l0v [Occ=Once] :: i_a5j1U
                                                        [LclId] =
                                                            [$dNum_s5l0o] \u []
                                                                GHC.Num.fromInteger
                                                                    $dNum_s5l0o
                                                                    Data.OldList.genericLength2;
                                                      } in 
                                                        GHC.Num.- $dNum_s5l0o eta_s5l0l sat_s5l0v;
                                            } in 
                                              Data.OldList.genericTake
                                                  $dIntegral_s5l0k sat_s5l0w xs_s5l0u;
                                  } in  : [x_s5l0t sat_s5l0x];
                            };
                        GHC.Types.True -> [] [];
                      };
                };
        };

Data.OldList.genericReplicate
  :: forall i a. GHC.Real.Integral i => i -> a -> [a]
[GblId,
 Arity=3,
 Str=<S(S(LS(LLLC(C(S))LLLL)L)LLLLLLLL),U(U(U(A,C(C1(U)),A,A,A,A,C(U)),U(A,A,A,C(C1(U)),A,A,A,A),A),A,A,A,A,A,A,A,A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dIntegral_s5l0y n_s5l0z x_s5l0A]
        let {
          sat_s5l0B [Occ=Once, Dmd=<L,1*U>] :: [a_a5j2c]
          [LclId] =
              [x_s5l0A] \s [] GHC.List.repeat x_s5l0A;
        } in  Data.OldList.genericTake $dIntegral_s5l0y n_s5l0z sat_s5l0B;

Data.OldList.genericDrop [Occ=LoopBreaker]
  :: forall i a. GHC.Real.Integral i => i -> [a] -> [a]
[GblId,
 Arity=3,
 Str=<S(S(LS(LLLC(C(S))LLLL)L)LLLLLLLL),U(U(U(A,C(C1(U)),A,A,A,A,C(U)),U(A,A,A,C(C1(U)),A,A,A,A),A),A,A,A,A,A,A,A,A)><L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [$dIntegral_s5l0C eta_s5l0D eta1_s5l0E]
        case
            GHC.Real.$p1Integral $dIntegral_s5l0C
        of
        $dReal_s5l0F [Dmd=<S(LS(LLLC(C(S))LLLL)L),U(1*U(A,1*C1(C1(U)),A,A,A,A,C(U)),1*U(A,A,A,1*C1(C1(U)),A,A,A,A),A)>]
        { __DEFAULT ->
              let {
                $dNum_s5l0G [Dmd=<L,U(A,1*C1(C1(U)),A,A,A,A,C(U))>]
                  :: GHC.Num.Num i_a5j1E
                [LclId] =
                    [$dReal_s5l0F] \u [] GHC.Real.$p1Real $dReal_s5l0F; } in
              let {
                sat_s5l0I [Occ=Once] :: i_a5j1E
                [LclId] =
                    [$dNum_s5l0G] \u []
                        GHC.Num.fromInteger $dNum_s5l0G Data.OldList.genericLength1;
              } in 
                case GHC.Real.$p2Real $dReal_s5l0F of sat_s5l0H {
                  __DEFAULT ->
                      case GHC.Classes.<= sat_s5l0H eta_s5l0D sat_s5l0I of {
                        GHC.Types.False ->
                            case eta1_s5l0E of {
                              [] -> [] [];
                              : _ [Occ=Dead] xs_s5l0M [Occ=Once] ->
                                  let {
                                    sat_s5l0O [Occ=Once] :: i_a5j1E
                                    [LclId] =
                                        [eta_s5l0D $dNum_s5l0G] \u []
                                            let {
                                              sat_s5l0N [Occ=Once] :: i_a5j1E
                                              [LclId] =
                                                  [$dNum_s5l0G] \u []
                                                      GHC.Num.fromInteger
                                                          $dNum_s5l0G Data.OldList.genericLength2;
                                            } in  GHC.Num.- $dNum_s5l0G eta_s5l0D sat_s5l0N;
                                  } in 
                                    Data.OldList.genericDrop $dIntegral_s5l0C sat_s5l0O xs_s5l0M;
                            };
                        GHC.Types.True -> eta1_s5l0E;
                      };
                };
        };

Data.OldList.$wgenericSplitAt [InlPrag=NOUSERINLINE[0],
                               Occ=LoopBreaker]
  :: forall i a. GHC.Real.Integral i => i -> [a] -> (# [a], [a] #)
[GblId,
 Arity=3,
 Str=<S(S(LS(LLLC(C(S))LLLL)L)LLLLLLLL),U(U(U(A,C(C1(U)),A,A,A,A,C(U)),U(A,A,A,C(C1(U)),A,A,A,A),A),A,A,A,A,A,A,A,A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [w_s5l0P w1_s5l0Q w2_s5l0R]
        case
            GHC.Real.$p1Integral w_s5l0P
        of
        $dReal_s5l0S [Dmd=<S(LS(LLLC(C(S))LLLL)L),U(1*U(A,1*C1(C1(U)),A,A,A,A,C(U)),1*U(A,A,A,1*C1(C1(U)),A,A,A,A),A)>]
        { __DEFAULT ->
              let {
                $dNum_s5l0T [Dmd=<L,U(A,1*C1(C1(U)),A,A,A,A,C(U))>]
                  :: GHC.Num.Num i_s5kqD
                [LclId] =
                    [$dReal_s5l0S] \u [] GHC.Real.$p1Real $dReal_s5l0S; } in
              let {
                sat_s5l0V [Occ=Once] :: i_s5kqD
                [LclId] =
                    [$dNum_s5l0T] \u []
                        GHC.Num.fromInteger $dNum_s5l0T Data.OldList.genericLength1;
              } in 
                case GHC.Real.$p2Real $dReal_s5l0S of sat_s5l0U {
                  __DEFAULT ->
                      case GHC.Classes.<= sat_s5l0U w1_s5l0Q sat_s5l0V of {
                        GHC.Types.False ->
                            case w2_s5l0R of {
                              [] -> (#,#) [GHC.Types.[] GHC.Types.[]];
                              : x_s5l0Y [Occ=Once] xs_s5l0Z [Occ=Once] ->
                                  let {
                                    ds_s5l10 [Dmd=<L,U(1*U,1*U)>] :: ([a_s5kqE], [a_s5kqE])
                                    [LclId] =
                                        [w_s5l0P w1_s5l0Q $dNum_s5l0T xs_s5l0Z] \u []
                                            let {
                                              sat_s5l12 [Occ=Once] :: i_s5kqD
                                              [LclId] =
                                                  [w1_s5l0Q $dNum_s5l0T] \u []
                                                      let {
                                                        sat_s5l11 [Occ=Once] :: i_s5kqD
                                                        [LclId] =
                                                            [$dNum_s5l0T] \u []
                                                                GHC.Num.fromInteger
                                                                    $dNum_s5l0T
                                                                    Data.OldList.genericLength2;
                                                      } in 
                                                        GHC.Num.- $dNum_s5l0T w1_s5l0Q sat_s5l11;
                                            } in 
                                              case
                                                  Data.OldList.$wgenericSplitAt
                                                      w_s5l0P sat_s5l12 xs_s5l0Z
                                              of
                                              { (#,#) ww1_s5l14 [Occ=Once] ww2_s5l15 [Occ=Once] ->
                                                    (,) [ww1_s5l14 ww2_s5l15];
                                              }; } in
                                  let {
                                    sat_s5l1e [Occ=Once] :: [a_s5kqE]
                                    [LclId] =
                                        [ds_s5l10] \u []
                                            case ds_s5l10 of {
                                              (,) _ [Occ=Dead] xs''_s5l1d [Occ=Once] -> xs''_s5l1d;
                                            }; } in
                                  let {
                                    sat_s5l19 [Occ=Once] :: [a_s5kqE]
                                    [LclId] =
                                        [ds_s5l10] \u []
                                            case ds_s5l10 of {
                                              (,) xs'_s5l17 [Occ=Once] _ [Occ=Dead] -> xs'_s5l17;
                                            }; } in
                                  let {
                                    sat_s5l1a [Occ=Once] :: [a_s5kqE]
                                    [LclId] =
                                        CCCS :! [x_s5l0Y sat_s5l19];
                                  } in  (#,#) [sat_s5l1a sat_s5l1e];
                            };
                        GHC.Types.True -> (#,#) [GHC.Types.[] w2_s5l0R];
                      };
                };
        };

Data.OldList.genericSplitAt [InlPrag=NOUSERINLINE[0]]
  :: forall i a. GHC.Real.Integral i => i -> [a] -> ([a], [a])
[GblId,
 Arity=3,
 Str=<S(S(LS(LLLC(C(S))LLLL)L)LLLLLLLL),U(U(U(A,C(C1(U)),A,A,A,A,C(U)),U(A,A,A,C(C1(U)),A,A,A,A),A),A,A,A,A,A,A,A,A)><L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [w_s5l1f w1_s5l1g w2_s5l1h]
        case Data.OldList.$wgenericSplitAt w_s5l1f w1_s5l1g w2_s5l1h of {
          (#,#) ww1_s5l1j [Occ=Once] ww2_s5l1k [Occ=Once] ->
              (,) [ww1_s5l1j ww2_s5l1k];
        };

lvl2_r5kSj :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "List.genericIndex: negative argument."#;

lvl3_r5kSk :: forall a. a
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl2_r5kSj of sat_s5l1l {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_s5l1l;
        };

lvl4_r5kSl :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "List.genericIndex: index too large."#;

lvl5_r5kSm :: forall a. a
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl4_r5kSl of sat_s5l1m {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_s5l1m;
        };

Data.OldList.genericIndex [Occ=LoopBreaker]
  :: forall i a. GHC.Real.Integral i => [a] -> i -> a
[GblId,
 Arity=3,
 Str=<S(S(LS(S(C(C(S))L)LLLLLLL)L)LLLLLLLL),U(U(U(A,C(C1(U)),A,A,A,A,C(U)),U(U(C(C1(U)),A),A,A,A,C(C1(U)),A,A,A),A),A,A,A,A,A,A,A,A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dIntegral_s5l1n eta_s5l1o eta1_s5l1p]
        case eta_s5l1o of {
          [] -> lvl5_r5kSm;
          : x_s5l1r [Occ=Once] ds_s5l1s [Occ=Once] ->
              case
                  GHC.Real.$p1Integral $dIntegral_s5l1n
              of
              $dReal_s5l1t [Dmd=<S(LS(S(C(C(S))L)LLLLLLL)L),U(1*U(A,1*C1(C1(U)),A,A,A,A,C(U)),1*U(1*U(1*C1(C1(U)),A),A,A,A,1*C1(C1(U)),A,A,A),A)>]
              { __DEFAULT ->
                    let {
                      $dNum_s5l1u [Dmd=<L,U(A,1*C1(C1(U)),A,A,A,A,C(U))>]
                        :: GHC.Num.Num i_a5j0L
                      [LclId] =
                          [$dReal_s5l1t] \u [] GHC.Real.$p1Real $dReal_s5l1t;
                    } in 
                      case
                          GHC.Real.$p2Real $dReal_s5l1t
                      of
                      $dOrd_s5l1v [Dmd=<S(S(C(C(S))L)LLLLLLL),U(1*U(1*C1(C1(U)),A),A,A,A,1*C1(C1(U)),A,A,A)>]
                      { __DEFAULT ->
                            let {
                              sat_s5l1x [Occ=Once] :: i_a5j0L
                              [LclId] =
                                  [$dNum_s5l1u] \u []
                                      GHC.Num.fromInteger $dNum_s5l1u Data.OldList.genericLength1;
                            } in 
                              case GHC.Classes.$p1Ord $dOrd_s5l1v of sat_s5l1w {
                                __DEFAULT ->
                                    case GHC.Classes.== sat_s5l1w eta1_s5l1p sat_s5l1x of {
                                      GHC.Types.False ->
                                          let {
                                            sat_s5l1z [Occ=Once] :: i_a5j0L
                                            [LclId] =
                                                [$dNum_s5l1u] \u []
                                                    GHC.Num.fromInteger
                                                        $dNum_s5l1u Data.OldList.genericLength1;
                                          } in 
                                            case GHC.Classes.> $dOrd_s5l1v eta1_s5l1p sat_s5l1z of {
                                              GHC.Types.False -> lvl3_r5kSk;
                                              GHC.Types.True ->
                                                  let {
                                                    sat_s5l1C [Occ=Once] :: i_a5j0L
                                                    [LclId] =
                                                        [eta1_s5l1p $dNum_s5l1u] \u []
                                                            let {
                                                              sat_s5l1B [Occ=Once] :: i_a5j0L
                                                              [LclId] =
                                                                  [$dNum_s5l1u] \u []
                                                                      GHC.Num.fromInteger
                                                                          $dNum_s5l1u
                                                                          Data.OldList.genericLength2;
                                                            } in 
                                                              GHC.Num.-
                                                                  $dNum_s5l1u eta1_s5l1p sat_s5l1B;
                                                  } in 
                                                    Data.OldList.genericIndex
                                                        $dIntegral_s5l1n ds_s5l1s sat_s5l1C;
                                            };
                                      GHC.Types.True -> x_s5l1r;
                                    };
                              };
                      };
              };
        };

Data.OldList.zipWith4 [Occ=LoopBreaker]
  :: forall a b c d e.
     (a -> b -> c -> d -> e) -> [a] -> [b] -> [c] -> [d] -> [e]
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,C(C1(C1(C1(U))))><S,1*U><L,1*U><L,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [z_s5l1D ds_s5l1E ds1_s5l1F ds2_s5l1G ds3_s5l1H]
        case ds_s5l1E of {
          [] -> [] [];
          : a1_s5l1J [Occ=Once] as_s5l1K [Occ=Once] ->
              case ds1_s5l1F of {
                [] -> [] [];
                : b1_s5l1M [Occ=Once] bs_s5l1N [Occ=Once] ->
                    case ds2_s5l1G of {
                      [] -> [] [];
                      : c1_s5l1P [Occ=Once] cs_s5l1Q [Occ=Once] ->
                          case ds3_s5l1H of {
                            [] -> [] [];
                            : d1_s5l1S [Occ=Once] ds4_s5l1T [Occ=Once] ->
                                let {
                                  sat_s5l1V [Occ=Once] :: [e_a5iZr]
                                  [LclId] =
                                      [z_s5l1D as_s5l1K bs_s5l1N cs_s5l1Q ds4_s5l1T] \u []
                                          Data.OldList.zipWith4
                                              z_s5l1D as_s5l1K bs_s5l1N cs_s5l1Q ds4_s5l1T; } in
                                let {
                                  sat_s5l1U [Occ=Once] :: e_a5iZr
                                  [LclId] =
                                      [z_s5l1D a1_s5l1J b1_s5l1M c1_s5l1P d1_s5l1S] \u []
                                          z_s5l1D a1_s5l1J b1_s5l1M c1_s5l1P d1_s5l1S;
                                } in  : [sat_s5l1U sat_s5l1V];
                          };
                    };
              };
        };

Data.OldList.zip4
  :: forall a b c d. [a] -> [b] -> [c] -> [d] -> [(a, b, c, d)]
[GblId, Arity=4, Caf=NoCafRefs, Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        Data.OldList.zipWith4 GHC.Tuple.(,,,) eta_B4 eta_B3 eta_B2 eta_B1;

Data.OldList.zipWith5 [Occ=LoopBreaker]
  :: forall a b c d e f.
     (a -> b -> c -> d -> e -> f)
     -> [a] -> [b] -> [c] -> [d] -> [e] -> [f]
[GblId,
 Arity=6,
 Caf=NoCafRefs,
 Str=<L,C(C1(C1(C1(C1(U)))))><S,1*U><L,1*U><L,1*U><L,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [z_s5l1W ds_s5l1X ds1_s5l1Y ds2_s5l1Z ds3_s5l20 ds4_s5l21]
        case ds_s5l1X of {
          [] -> [] [];
          : a1_s5l23 [Occ=Once] as_s5l24 [Occ=Once] ->
              case ds1_s5l1Y of {
                [] -> [] [];
                : b1_s5l26 [Occ=Once] bs_s5l27 [Occ=Once] ->
                    case ds2_s5l1Z of {
                      [] -> [] [];
                      : c1_s5l29 [Occ=Once] cs_s5l2a [Occ=Once] ->
                          case ds3_s5l20 of {
                            [] -> [] [];
                            : d1_s5l2c [Occ=Once] ds5_s5l2d [Occ=Once] ->
                                case ds4_s5l21 of {
                                  [] -> [] [];
                                  : e1_s5l2f [Occ=Once] es_s5l2g [Occ=Once] ->
                                      let {
                                        sat_s5l2i [Occ=Once] :: [f_a5iZe]
                                        [LclId] =
                                            [z_s5l1W
                                             as_s5l24
                                             bs_s5l27
                                             cs_s5l2a
                                             ds5_s5l2d
                                             es_s5l2g] \u []
                                                Data.OldList.zipWith5
                                                    z_s5l1W
                                                    as_s5l24
                                                    bs_s5l27
                                                    cs_s5l2a
                                                    ds5_s5l2d
                                                    es_s5l2g; } in
                                      let {
                                        sat_s5l2h [Occ=Once] :: f_a5iZe
                                        [LclId] =
                                            [z_s5l1W
                                             a1_s5l23
                                             b1_s5l26
                                             c1_s5l29
                                             d1_s5l2c
                                             e1_s5l2f] \u []
                                                z_s5l1W
                                                    a1_s5l23 b1_s5l26 c1_s5l29 d1_s5l2c e1_s5l2f;
                                      } in  : [sat_s5l2h sat_s5l2i];
                                };
                          };
                    };
              };
        };

Data.OldList.zip5
  :: forall a b c d e.
     [a] -> [b] -> [c] -> [d] -> [e] -> [(a, b, c, d, e)]
[GblId, Arity=5, Caf=NoCafRefs, Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        Data.OldList.zipWith5
            GHC.Tuple.(,,,,) eta_B5 eta_B4 eta_B3 eta_B2 eta_B1;

Data.OldList.zipWith6 [Occ=LoopBreaker]
  :: forall a b c d e f g.
     (a -> b -> c -> d -> e -> f -> g)
     -> [a] -> [b] -> [c] -> [d] -> [e] -> [f] -> [g]
[GblId,
 Arity=7,
 Caf=NoCafRefs,
 Str=<L,C(C1(C1(C1(C1(C1(U))))))><S,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [z_s5l2j
           ds_s5l2k
           ds1_s5l2l
           ds2_s5l2m
           ds3_s5l2n
           ds4_s5l2o
           ds5_s5l2p]
        case ds_s5l2k of {
          [] -> [] [];
          : a1_s5l2r [Occ=Once] as_s5l2s [Occ=Once] ->
              case ds1_s5l2l of {
                [] -> [] [];
                : b1_s5l2u [Occ=Once] bs_s5l2v [Occ=Once] ->
                    case ds2_s5l2m of {
                      [] -> [] [];
                      : c1_s5l2x [Occ=Once] cs_s5l2y [Occ=Once] ->
                          case ds3_s5l2n of {
                            [] -> [] [];
                            : d1_s5l2A [Occ=Once] ds6_s5l2B [Occ=Once] ->
                                case ds4_s5l2o of {
                                  [] -> [] [];
                                  : e1_s5l2D [Occ=Once] es_s5l2E [Occ=Once] ->
                                      case ds5_s5l2p of {
                                        [] -> [] [];
                                        : f1_s5l2G [Occ=Once] fs_s5l2H [Occ=Once] ->
                                            let {
                                              sat_s5l2J [Occ=Once] :: [g_a5iYZ]
                                              [LclId] =
                                                  [z_s5l2j
                                                   as_s5l2s
                                                   bs_s5l2v
                                                   cs_s5l2y
                                                   ds6_s5l2B
                                                   es_s5l2E
                                                   fs_s5l2H] \u []
                                                      Data.OldList.zipWith6
                                                          z_s5l2j
                                                          as_s5l2s
                                                          bs_s5l2v
                                                          cs_s5l2y
                                                          ds6_s5l2B
                                                          es_s5l2E
                                                          fs_s5l2H; } in
                                            let {
                                              sat_s5l2I [Occ=Once] :: g_a5iYZ
                                              [LclId] =
                                                  [z_s5l2j
                                                   a1_s5l2r
                                                   b1_s5l2u
                                                   c1_s5l2x
                                                   d1_s5l2A
                                                   e1_s5l2D
                                                   f1_s5l2G] \u []
                                                      z_s5l2j
                                                          a1_s5l2r
                                                          b1_s5l2u
                                                          c1_s5l2x
                                                          d1_s5l2A
                                                          e1_s5l2D
                                                          f1_s5l2G;
                                            } in  : [sat_s5l2I sat_s5l2J];
                                      };
                                };
                          };
                    };
              };
        };

Data.OldList.zip6
  :: forall a b c d e f.
     [a] -> [b] -> [c] -> [d] -> [e] -> [f] -> [(a, b, c, d, e, f)]
[GblId, Arity=6, Caf=NoCafRefs, Unf=OtherCon []] =
    [] \r [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        Data.OldList.zipWith6
            GHC.Tuple.(,,,,,) eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1;

Data.OldList.zipWith7 [Occ=LoopBreaker]
  :: forall a b c d e f g h.
     (a -> b -> c -> d -> e -> f -> g -> h)
     -> [a] -> [b] -> [c] -> [d] -> [e] -> [f] -> [g] -> [h]
[GblId,
 Arity=8,
 Caf=NoCafRefs,
 Str=<L,C(C1(C1(C1(C1(C1(C1(U)))))))><S,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [z_s5l2K
           ds_s5l2L
           ds1_s5l2M
           ds2_s5l2N
           ds3_s5l2O
           ds4_s5l2P
           ds5_s5l2Q
           ds6_s5l2R]
        case ds_s5l2L of {
          [] -> [] [];
          : a1_s5l2T [Occ=Once] as_s5l2U [Occ=Once] ->
              case ds1_s5l2M of {
                [] -> [] [];
                : b1_s5l2W [Occ=Once] bs_s5l2X [Occ=Once] ->
                    case ds2_s5l2N of {
                      [] -> [] [];
                      : c1_s5l2Z [Occ=Once] cs_s5l30 [Occ=Once] ->
                          case ds3_s5l2O of {
                            [] -> [] [];
                            : d1_s5l32 [Occ=Once] ds7_s5l33 [Occ=Once] ->
                                case ds4_s5l2P of {
                                  [] -> [] [];
                                  : e1_s5l35 [Occ=Once] es_s5l36 [Occ=Once] ->
                                      case ds5_s5l2Q of {
                                        [] -> [] [];
                                        : f1_s5l38 [Occ=Once] fs_s5l39 [Occ=Once] ->
                                            case ds6_s5l2R of {
                                              [] -> [] [];
                                              : g1_s5l3b [Occ=Once] gs_s5l3c [Occ=Once] ->
                                                  let {
                                                    sat_s5l3e [Occ=Once] :: [h_a5iYI]
                                                    [LclId] =
                                                        [z_s5l2K
                                                         as_s5l2U
                                                         bs_s5l2X
                                                         cs_s5l30
                                                         ds7_s5l33
                                                         es_s5l36
                                                         fs_s5l39
                                                         gs_s5l3c] \u []
                                                            Data.OldList.zipWith7
                                                                z_s5l2K
                                                                as_s5l2U
                                                                bs_s5l2X
                                                                cs_s5l30
                                                                ds7_s5l33
                                                                es_s5l36
                                                                fs_s5l39
                                                                gs_s5l3c; } in
                                                  let {
                                                    sat_s5l3d [Occ=Once] :: h_a5iYI
                                                    [LclId] =
                                                        [z_s5l2K
                                                         a1_s5l2T
                                                         b1_s5l2W
                                                         c1_s5l2Z
                                                         d1_s5l32
                                                         e1_s5l35
                                                         f1_s5l38
                                                         g1_s5l3b] \u []
                                                            z_s5l2K
                                                                a1_s5l2T
                                                                b1_s5l2W
                                                                c1_s5l2Z
                                                                d1_s5l32
                                                                e1_s5l35
                                                                f1_s5l38
                                                                g1_s5l3b;
                                                  } in  : [sat_s5l3d sat_s5l3e];
                                            };
                                      };
                                };
                          };
                    };
              };
        };

Data.OldList.zip7
  :: forall a b c d e f g.
     [a]
     -> [b]
     -> [c]
     -> [d]
     -> [e]
     -> [f]
     -> [g]
     -> [(a, b, c, d, e, f, g)]
[GblId, Arity=7, Caf=NoCafRefs, Unf=OtherCon []] =
    [] \r [eta_B7 eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        Data.OldList.zipWith7
            GHC.Tuple.(,,,,,,)
            eta_B7
            eta_B6
            eta_B5
            eta_B4
            eta_B3
            eta_B2
            eta_B1;

Data.OldList.$wunzip4 [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: forall a b c d. [(a, b, c, d)] -> (# [a], [b], [c], [d] #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [w_s5l3f]
        case w_s5l3f of {
          [] ->
              (#,,,#) [GHC.Types.[] GHC.Types.[] GHC.Types.[] GHC.Types.[]];
          : y_s5l3h [Occ=Once!] ys_s5l3i [Occ=Once] ->
              case y_s5l3h of {
                (,,,) a1_s5l3k [Occ=Once]
                      b1_s5l3l [Occ=Once]
                      c1_s5l3m [Occ=Once]
                      d1_s5l3n [Occ=Once] ->
                    let {
                      ds_s5l3o [Dmd=<L,U(1*U,1*U,1*U,1*U)>]
                        :: ([a_s5kpz], [b_s5kpA], [c_s5kpB], [d_s5kpC])
                      [LclId] =
                          [ys_s5l3i] \u []
                              case Data.OldList.$wunzip4 ys_s5l3i of {
                                (#,,,#) ww1_s5l3q [Occ=Once]
                                        ww2_s5l3r [Occ=Once]
                                        ww3_s5l3s [Occ=Once]
                                        ww4_s5l3t [Occ=Once] ->
                                    (,,,) [ww1_s5l3q ww2_s5l3r ww3_s5l3s ww4_s5l3t];
                              }; } in
                    let {
                      sat_s5l3U [Occ=Once] :: [d_s5kpC]
                      [LclId] =
                          [ds_s5l3o] \u []
                              case ds_s5l3o of {
                                (,,,) _ [Occ=Dead]
                                      _ [Occ=Dead]
                                      _ [Occ=Dead]
                                      ds1_s5l3T [Occ=Once] ->
                                    ds1_s5l3T;
                              }; } in
                    let {
                      sat_s5l3V [Occ=Once] :: [d_s5kpC]
                      [LclId] =
                          CCCS :! [d1_s5l3n sat_s5l3U]; } in
                    let {
                      sat_s5l3N [Occ=Once] :: [c_s5kpB]
                      [LclId] =
                          [ds_s5l3o] \u []
                              case ds_s5l3o of {
                                (,,,) _ [Occ=Dead] _ [Occ=Dead] cs_s5l3L [Occ=Once] _ [Occ=Dead] ->
                                    cs_s5l3L;
                              }; } in
                    let {
                      sat_s5l3O [Occ=Once] :: [c_s5kpB]
                      [LclId] =
                          CCCS :! [c1_s5l3m sat_s5l3N]; } in
                    let {
                      sat_s5l3G [Occ=Once] :: [b_s5kpA]
                      [LclId] =
                          [ds_s5l3o] \u []
                              case ds_s5l3o of {
                                (,,,) _ [Occ=Dead] bs_s5l3D [Occ=Once] _ [Occ=Dead] _ [Occ=Dead] ->
                                    bs_s5l3D;
                              }; } in
                    let {
                      sat_s5l3H [Occ=Once] :: [b_s5kpA]
                      [LclId] =
                          CCCS :! [b1_s5l3l sat_s5l3G]; } in
                    let {
                      sat_s5l3z [Occ=Once] :: [a_s5kpz]
                      [LclId] =
                          [ds_s5l3o] \u []
                              case ds_s5l3o of {
                                (,,,) as_s5l3v [Occ=Once] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
                                    as_s5l3v;
                              }; } in
                    let {
                      sat_s5l3A [Occ=Once] :: [a_s5kpz]
                      [LclId] =
                          CCCS :! [a1_s5l3k sat_s5l3z];
                    } in  (#,,,#) [sat_s5l3A sat_s5l3H sat_s5l3O sat_s5l3V];
              };
        };

Data.OldList.unzip4 [InlPrag=NOUSERINLINE[0]]
  :: forall a b c d. [(a, b, c, d)] -> ([a], [b], [c], [d])
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [w_s5l3W]
        case Data.OldList.$wunzip4 w_s5l3W of {
          (#,,,#) ww1_s5l3Y [Occ=Once]
                  ww2_s5l3Z [Occ=Once]
                  ww3_s5l40 [Occ=Once]
                  ww4_s5l41 [Occ=Once] ->
              (,,,) [ww1_s5l3Y ww2_s5l3Z ww3_s5l40 ww4_s5l41];
        };

Data.OldList.$wunzip5 [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: forall a b c d e.
     [(a, b, c, d, e)] -> (# [a], [b], [c], [d], [e] #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [w_s5l42]
        case w_s5l42 of {
          [] ->
              (#,,,,#) [GHC.Types.[]
                        GHC.Types.[]
                        GHC.Types.[]
                        GHC.Types.[]
                        GHC.Types.[]];
          : y_s5l44 [Occ=Once!] ys_s5l45 [Occ=Once] ->
              case y_s5l44 of {
                (,,,,) a1_s5l47 [Occ=Once]
                       b1_s5l48 [Occ=Once]
                       c1_s5l49 [Occ=Once]
                       d1_s5l4a [Occ=Once]
                       e1_s5l4b [Occ=Once] ->
                    let {
                      ds_s5l4c [Dmd=<L,U(1*U,1*U,1*U,1*U,1*U)>]
                        :: ([a_s5kpp], [b_s5kpq], [c_s5kpr], [d_s5kps], [e_s5kpt])
                      [LclId] =
                          [ys_s5l45] \u []
                              case Data.OldList.$wunzip5 ys_s5l45 of {
                                (#,,,,#) ww1_s5l4e [Occ=Once]
                                         ww2_s5l4f [Occ=Once]
                                         ww3_s5l4g [Occ=Once]
                                         ww4_s5l4h [Occ=Once]
                                         ww5_s5l4i [Occ=Once] ->
                                    (,,,,) [ww1_s5l4e ww2_s5l4f ww3_s5l4g ww4_s5l4h ww5_s5l4i];
                              }; } in
                    let {
                      sat_s5l4V [Occ=Once] :: [e_s5kpt]
                      [LclId] =
                          [ds_s5l4c] \u []
                              case ds_s5l4c of {
                                (,,,,) _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       es_s5l4U [Occ=Once] ->
                                    es_s5l4U;
                              }; } in
                    let {
                      sat_s5l4W [Occ=Once] :: [e_s5kpt]
                      [LclId] =
                          CCCS :! [e1_s5l4b sat_s5l4V]; } in
                    let {
                      sat_s5l4N [Occ=Once] :: [d_s5kps]
                      [LclId] =
                          [ds_s5l4c] \u []
                              case ds_s5l4c of {
                                (,,,,) _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds1_s5l4L [Occ=Once]
                                       _ [Occ=Dead] ->
                                    ds1_s5l4L;
                              }; } in
                    let {
                      sat_s5l4O [Occ=Once] :: [d_s5kps]
                      [LclId] =
                          CCCS :! [d1_s5l4a sat_s5l4N]; } in
                    let {
                      sat_s5l4F [Occ=Once] :: [c_s5kpr]
                      [LclId] =
                          [ds_s5l4c] \u []
                              case ds_s5l4c of {
                                (,,,,) _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       cs_s5l4C [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
                                    cs_s5l4C;
                              }; } in
                    let {
                      sat_s5l4G [Occ=Once] :: [c_s5kpr]
                      [LclId] =
                          CCCS :! [c1_s5l49 sat_s5l4F]; } in
                    let {
                      sat_s5l4x [Occ=Once] :: [b_s5kpq]
                      [LclId] =
                          [ds_s5l4c] \u []
                              case ds_s5l4c of {
                                (,,,,) _ [Occ=Dead]
                                       bs_s5l4t [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
                                    bs_s5l4t;
                              }; } in
                    let {
                      sat_s5l4y [Occ=Once] :: [b_s5kpq]
                      [LclId] =
                          CCCS :! [b1_s5l48 sat_s5l4x]; } in
                    let {
                      sat_s5l4p [Occ=Once] :: [a_s5kpp]
                      [LclId] =
                          [ds_s5l4c] \u []
                              case ds_s5l4c of {
                                (,,,,) as_s5l4k [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
                                    as_s5l4k;
                              }; } in
                    let {
                      sat_s5l4q [Occ=Once] :: [a_s5kpp]
                      [LclId] =
                          CCCS :! [a1_s5l47 sat_s5l4p];
                    } in  (#,,,,#) [sat_s5l4q sat_s5l4y sat_s5l4G sat_s5l4O sat_s5l4W];
              };
        };

Data.OldList.unzip5 [InlPrag=NOUSERINLINE[0]]
  :: forall a b c d e. [(a, b, c, d, e)] -> ([a], [b], [c], [d], [e])
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [w_s5l4X]
        case Data.OldList.$wunzip5 w_s5l4X of {
          (#,,,,#) ww1_s5l4Z [Occ=Once]
                   ww2_s5l50 [Occ=Once]
                   ww3_s5l51 [Occ=Once]
                   ww4_s5l52 [Occ=Once]
                   ww5_s5l53 [Occ=Once] ->
              (,,,,) [ww1_s5l4Z ww2_s5l50 ww3_s5l51 ww4_s5l52 ww5_s5l53];
        };

Data.OldList.$wunzip6 [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: forall a b c d e f.
     [(a, b, c, d, e, f)] -> (# [a], [b], [c], [d], [e], [f] #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [w_s5l54]
        case w_s5l54 of {
          [] ->
              (#,,,,,#) [GHC.Types.[]
                         GHC.Types.[]
                         GHC.Types.[]
                         GHC.Types.[]
                         GHC.Types.[]
                         GHC.Types.[]];
          : y_s5l56 [Occ=Once!] ys_s5l57 [Occ=Once] ->
              case y_s5l56 of {
                (,,,,,) a1_s5l59 [Occ=Once]
                        b1_s5l5a [Occ=Once]
                        c1_s5l5b [Occ=Once]
                        d1_s5l5c [Occ=Once]
                        e1_s5l5d [Occ=Once]
                        f1_s5l5e [Occ=Once] ->
                    let {
                      ds_s5l5f [Dmd=<L,U(1*U,1*U,1*U,1*U,1*U,1*U)>]
                        :: ([a_s5kpe], [b_s5kpf], [c_s5kpg], [d_s5kph], [e_s5kpi],
                            [f_s5kpj])
                      [LclId] =
                          [ys_s5l57] \u []
                              case Data.OldList.$wunzip6 ys_s5l57 of {
                                (#,,,,,#) ww1_s5l5h [Occ=Once]
                                          ww2_s5l5i [Occ=Once]
                                          ww3_s5l5j [Occ=Once]
                                          ww4_s5l5k [Occ=Once]
                                          ww5_s5l5l [Occ=Once]
                                          ww6_s5l5m [Occ=Once] ->
                                    (,,,,,) [ww1_s5l5h
                                             ww2_s5l5i
                                             ww3_s5l5j
                                             ww4_s5l5k
                                             ww5_s5l5l
                                             ww6_s5l5m];
                              }; } in
                    let {
                      sat_s5l6d [Occ=Once] :: [f_s5kpj]
                      [LclId] =
                          [ds_s5l5f] \u []
                              case ds_s5l5f of {
                                (,,,,,) _ [Occ=Dead]
                                        _ [Occ=Dead]
                                        _ [Occ=Dead]
                                        _ [Occ=Dead]
                                        _ [Occ=Dead]
                                        fs_s5l6c [Occ=Once] ->
                                    fs_s5l6c;
                              }; } in
                    let {
                      sat_s5l6e [Occ=Once] :: [f_s5kpj]
                      [LclId] =
                          CCCS :! [f1_s5l5e sat_s5l6d]; } in
                    let {
                      sat_s5l64 [Occ=Once] :: [e_s5kpi]
                      [LclId] =
                          [ds_s5l5f] \u []
                              case ds_s5l5f of {
                                (,,,,,) _ [Occ=Dead]
                                        _ [Occ=Dead]
                                        _ [Occ=Dead]
                                        _ [Occ=Dead]
                                        es_s5l62 [Occ=Once]
                                        _ [Occ=Dead] ->
                                    es_s5l62;
                              }; } in
                    let {
                      sat_s5l65 [Occ=Once] :: [e_s5kpi]
                      [LclId] =
                          CCCS :! [e1_s5l5d sat_s5l64]; } in
                    let {
                      sat_s5l5V [Occ=Once] :: [d_s5kph]
                      [LclId] =
                          [ds_s5l5f] \u []
                              case ds_s5l5f of {
                                (,,,,,) _ [Occ=Dead]
                                        _ [Occ=Dead]
                                        _ [Occ=Dead]
                                        ds1_s5l5S [Occ=Once]
                                        _ [Occ=Dead]
                                        _ [Occ=Dead] ->
                                    ds1_s5l5S;
                              }; } in
                    let {
                      sat_s5l5W [Occ=Once] :: [d_s5kph]
                      [LclId] =
                          CCCS :! [d1_s5l5c sat_s5l5V]; } in
                    let {
                      sat_s5l5M [Occ=Once] :: [c_s5kpg]
                      [LclId] =
                          [ds_s5l5f] \u []
                              case ds_s5l5f of {
                                (,,,,,) _ [Occ=Dead]
                                        _ [Occ=Dead]
                                        cs_s5l5I [Occ=Once]
                                        _ [Occ=Dead]
                                        _ [Occ=Dead]
                                        _ [Occ=Dead] ->
                                    cs_s5l5I;
                              }; } in
                    let {
                      sat_s5l5N [Occ=Once] :: [c_s5kpg]
                      [LclId] =
                          CCCS :! [c1_s5l5b sat_s5l5M]; } in
                    let {
                      sat_s5l5D [Occ=Once] :: [b_s5kpf]
                      [LclId] =
                          [ds_s5l5f] \u []
                              case ds_s5l5f of {
                                (,,,,,) _ [Occ=Dead]
                                        bs_s5l5y [Occ=Once]
                                        _ [Occ=Dead]
                                        _ [Occ=Dead]
                                        _ [Occ=Dead]
                                        _ [Occ=Dead] ->
                                    bs_s5l5y;
                              }; } in
                    let {
                      sat_s5l5E [Occ=Once] :: [b_s5kpf]
                      [LclId] =
                          CCCS :! [b1_s5l5a sat_s5l5D]; } in
                    let {
                      sat_s5l5u [Occ=Once] :: [a_s5kpe]
                      [LclId] =
                          [ds_s5l5f] \u []
                              case ds_s5l5f of {
                                (,,,,,) as_s5l5o [Occ=Once]
                                        _ [Occ=Dead]
                                        _ [Occ=Dead]
                                        _ [Occ=Dead]
                                        _ [Occ=Dead]
                                        _ [Occ=Dead] ->
                                    as_s5l5o;
                              }; } in
                    let {
                      sat_s5l5v [Occ=Once] :: [a_s5kpe]
                      [LclId] =
                          CCCS :! [a1_s5l59 sat_s5l5u];
                    } in 
                      (#,,,,,#) [sat_s5l5v
                                 sat_s5l5E
                                 sat_s5l5N
                                 sat_s5l5W
                                 sat_s5l65
                                 sat_s5l6e];
              };
        };

Data.OldList.unzip6 [InlPrag=NOUSERINLINE[0]]
  :: forall a b c d e f.
     [(a, b, c, d, e, f)] -> ([a], [b], [c], [d], [e], [f])
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [w_s5l6f]
        case Data.OldList.$wunzip6 w_s5l6f of {
          (#,,,,,#) ww1_s5l6h [Occ=Once]
                    ww2_s5l6i [Occ=Once]
                    ww3_s5l6j [Occ=Once]
                    ww4_s5l6k [Occ=Once]
                    ww5_s5l6l [Occ=Once]
                    ww6_s5l6m [Occ=Once] ->
              (,,,,,) [ww1_s5l6h
                       ww2_s5l6i
                       ww3_s5l6j
                       ww4_s5l6k
                       ww5_s5l6l
                       ww6_s5l6m];
        };

Data.OldList.$wunzip7 [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: forall a b c d e f g.
     [(a, b, c, d, e, f, g)] -> (# [a], [b], [c], [d], [e], [f], [g] #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [w_s5l6n]
        case w_s5l6n of {
          [] ->
              (#,,,,,,#) [GHC.Types.[]
                          GHC.Types.[]
                          GHC.Types.[]
                          GHC.Types.[]
                          GHC.Types.[]
                          GHC.Types.[]
                          GHC.Types.[]];
          : y_s5l6p [Occ=Once!] ys_s5l6q [Occ=Once] ->
              case y_s5l6p of {
                (,,,,,,) a1_s5l6s [Occ=Once]
                         b1_s5l6t [Occ=Once]
                         c1_s5l6u [Occ=Once]
                         d1_s5l6v [Occ=Once]
                         e1_s5l6w [Occ=Once]
                         f1_s5l6x [Occ=Once]
                         g1_s5l6y [Occ=Once] ->
                    let {
                      ds_s5l6z [Dmd=<L,U(1*U,1*U,1*U,1*U,1*U,1*U,1*U)>]
                        :: ([a_s5kp2], [b_s5kp3], [c_s5kp4], [d_s5kp5], [e_s5kp6],
                            [f_s5kp7], [g_s5kp8])
                      [LclId] =
                          [ys_s5l6q] \u []
                              case Data.OldList.$wunzip7 ys_s5l6q of {
                                (#,,,,,,#) ww1_s5l6B [Occ=Once]
                                           ww2_s5l6C [Occ=Once]
                                           ww3_s5l6D [Occ=Once]
                                           ww4_s5l6E [Occ=Once]
                                           ww5_s5l6F [Occ=Once]
                                           ww6_s5l6G [Occ=Once]
                                           ww7_s5l6H [Occ=Once] ->
                                    (,,,,,,) [ww1_s5l6B
                                              ww2_s5l6C
                                              ww3_s5l6D
                                              ww4_s5l6E
                                              ww5_s5l6F
                                              ww6_s5l6G
                                              ww7_s5l6H];
                              }; } in
                    let {
                      sat_s5l7O [Occ=Once] :: [g_s5kp8]
                      [LclId] =
                          [ds_s5l6z] \u []
                              case ds_s5l6z of {
                                (,,,,,,) _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         gs_s5l7N [Occ=Once] ->
                                    gs_s5l7N;
                              }; } in
                    let {
                      sat_s5l7P [Occ=Once] :: [g_s5kp8]
                      [LclId] =
                          CCCS :! [g1_s5l6y sat_s5l7O]; } in
                    let {
                      sat_s5l7E [Occ=Once] :: [f_s5kp7]
                      [LclId] =
                          [ds_s5l6z] \u []
                              case ds_s5l6z of {
                                (,,,,,,) _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         fs_s5l7C [Occ=Once]
                                         _ [Occ=Dead] ->
                                    fs_s5l7C;
                              }; } in
                    let {
                      sat_s5l7F [Occ=Once] :: [f_s5kp7]
                      [LclId] =
                          CCCS :! [f1_s5l6x sat_s5l7E]; } in
                    let {
                      sat_s5l7u [Occ=Once] :: [e_s5kp6]
                      [LclId] =
                          [ds_s5l6z] \u []
                              case ds_s5l6z of {
                                (,,,,,,) _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         es_s5l7r [Occ=Once]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead] ->
                                    es_s5l7r;
                              }; } in
                    let {
                      sat_s5l7v [Occ=Once] :: [e_s5kp6]
                      [LclId] =
                          CCCS :! [e1_s5l6w sat_s5l7u]; } in
                    let {
                      sat_s5l7k [Occ=Once] :: [d_s5kp5]
                      [LclId] =
                          [ds_s5l6z] \u []
                              case ds_s5l6z of {
                                (,,,,,,) _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         ds1_s5l7g [Occ=Once]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead] ->
                                    ds1_s5l7g;
                              }; } in
                    let {
                      sat_s5l7l [Occ=Once] :: [d_s5kp5]
                      [LclId] =
                          CCCS :! [d1_s5l6v sat_s5l7k]; } in
                    let {
                      sat_s5l7a [Occ=Once] :: [c_s5kp4]
                      [LclId] =
                          [ds_s5l6z] \u []
                              case ds_s5l6z of {
                                (,,,,,,) _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         cs_s5l75 [Occ=Once]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead] ->
                                    cs_s5l75;
                              }; } in
                    let {
                      sat_s5l7b [Occ=Once] :: [c_s5kp4]
                      [LclId] =
                          CCCS :! [c1_s5l6u sat_s5l7a]; } in
                    let {
                      sat_s5l70 [Occ=Once] :: [b_s5kp3]
                      [LclId] =
                          [ds_s5l6z] \u []
                              case ds_s5l6z of {
                                (,,,,,,) _ [Occ=Dead]
                                         bs_s5l6U [Occ=Once]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead] ->
                                    bs_s5l6U;
                              }; } in
                    let {
                      sat_s5l71 [Occ=Once] :: [b_s5kp3]
                      [LclId] =
                          CCCS :! [b1_s5l6t sat_s5l70]; } in
                    let {
                      sat_s5l6Q [Occ=Once] :: [a_s5kp2]
                      [LclId] =
                          [ds_s5l6z] \u []
                              case ds_s5l6z of {
                                (,,,,,,) as_s5l6J [Occ=Once]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead] ->
                                    as_s5l6J;
                              }; } in
                    let {
                      sat_s5l6R [Occ=Once] :: [a_s5kp2]
                      [LclId] =
                          CCCS :! [a1_s5l6s sat_s5l6Q];
                    } in 
                      (#,,,,,,#) [sat_s5l6R
                                  sat_s5l71
                                  sat_s5l7b
                                  sat_s5l7l
                                  sat_s5l7v
                                  sat_s5l7F
                                  sat_s5l7P];
              };
        };

Data.OldList.unzip7 [InlPrag=NOUSERINLINE[0]]
  :: forall a b c d e f g.
     [(a, b, c, d, e, f, g)] -> ([a], [b], [c], [d], [e], [f], [g])
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [w_s5l7Q]
        case Data.OldList.$wunzip7 w_s5l7Q of {
          (#,,,,,,#) ww1_s5l7S [Occ=Once]
                     ww2_s5l7T [Occ=Once]
                     ww3_s5l7U [Occ=Once]
                     ww4_s5l7V [Occ=Once]
                     ww5_s5l7W [Occ=Once]
                     ww6_s5l7X [Occ=Once]
                     ww7_s5l7Y [Occ=Once] ->
              (,,,,,,) [ww1_s5l7S
                        ww2_s5l7T
                        ww3_s5l7U
                        ww4_s5l7V
                        ww5_s5l7W
                        ww6_s5l7X
                        ww7_s5l7Y];
        };

Data.OldList.groupBy [Occ=LoopBreaker]
  :: forall a. (a -> a -> GHC.Types.Bool) -> [a] -> [[a]]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,C(C(U))><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s5l7Z ds1_s5l80]
        case ds1_s5l80 of {
          [] -> [] [];
          : x_s5l82 xs_s5l83 [Occ=Once] ->
              let {
                ds2_s5l84 [Dmd=<L,U(1*U,1*U)>] :: ([a_a5iWz], [a_a5iWz])
                [LclId] =
                    [ds_s5l7Z x_s5l82 xs_s5l83] \u []
                        let {
                          sat_s5l85 [Occ=Once, Dmd=<L,C(U)>] :: a_a5iWz -> GHC.Types.Bool
                          [LclId] =
                              [ds_s5l7Z x_s5l82] \u [] ds_s5l7Z x_s5l82;
                        } in 
                          case GHC.List.$wspan sat_s5l85 xs_s5l83 of {
                            (#,#) ww1_s5l87 [Occ=Once] ww2_s5l88 [Occ=Once] ->
                                (,) [ww1_s5l87 ww2_s5l88];
                          }; } in
              let {
                sat_s5l8h [Occ=Once] :: [[a_a5iWz]]
                [LclId] =
                    [ds_s5l7Z ds2_s5l84] \u []
                        case ds2_s5l84 of {
                          (,) _ [Occ=Dead] zs_s5l8g [Occ=Once] ->
                              Data.OldList.groupBy ds_s5l7Z zs_s5l8g;
                        }; } in
              let {
                sat_s5l8c [Occ=Once] :: [a_a5iWz]
                [LclId] =
                    [ds2_s5l84] \u []
                        case ds2_s5l84 of {
                          (,) ys_s5l8a [Occ=Once] _ [Occ=Dead] -> ys_s5l8a;
                        }; } in
              let {
                sat_s5l8d [Occ=Once] :: [a_a5iWz]
                [LclId] =
                    CCCS :! [x_s5l82 sat_s5l8c];
              } in  : [sat_s5l8d sat_s5l8h];
        };

Data.OldList.group :: forall a. GHC.Classes.Eq a => [a] -> [[a]]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*U(1*C(C(U)),A)><S,1*U>,
 Unf=OtherCon []] =
    [] \r [$dEq_s5l8i eta_s5l8j]
        let {
          sat_s5l8k [Occ=Once, Dmd=<L,C(C(U))>]
            :: a_a5iWS -> a_a5iWS -> GHC.Types.Bool
          [LclId] =
              [$dEq_s5l8i] \u [] GHC.Classes.== $dEq_s5l8i;
        } in  Data.OldList.groupBy sat_s5l8k eta_s5l8j;

poly_tailsGo_r5kSn :: forall a. [a] -> [[a]]
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>m2, Unf=OtherCon []] =
    sat-only [] \r [xs_s5l8l]
        let {
          sat_s5l8p [Occ=Once] :: [[a_a5iVR]]
          [LclId] =
              [xs_s5l8l] \u []
                  case xs_s5l8l of {
                    [] -> [] [];
                    : _ [Occ=Dead] xs'_s5l8o [Occ=Once] ->
                        poly_tailsGo_r5kSn xs'_s5l8o;
                  };
        } in  : [xs_s5l8l sat_s5l8p];

Data.OldList.tails [InlPrag=INLINABLE] :: forall a. [a] -> [[a]]
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [lst_s5l8q] poly_tailsGo_r5kSn lst_s5l8q;

Data.OldList.nonEmptySubsequences [Occ=LoopBreaker]
  :: forall a. [a] -> [[a]]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s5l8r]
        case ds_s5l8r of {
          [] -> [] [];
          : x_s5l8t xs_s5l8u [Occ=Once] ->
              let {
                sat_s5l8F [Occ=Once] :: [[a_a5iVp]]
                [LclId] =
                    [x_s5l8t xs_s5l8u] \u []
                        let {
                          go_s5l8w [Occ=LoopBreaker] :: [[a_a5iVp]] -> [[a_a5iVp]]
                          [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                              sat-only [x_s5l8t go_s5l8w] \r [ds1_s5l8x]
                                  case ds1_s5l8x of {
                                    [] -> [] [];
                                    : y_s5l8z ys_s5l8A [Occ=Once] ->
                                        let {
                                          sat_s5l8C [Occ=Once] :: [[a_a5iVp]]
                                          [LclId] =
                                              [go_s5l8w ys_s5l8A] \u [] go_s5l8w ys_s5l8A; } in
                                        let {
                                          sat_s5l8B [Occ=Once] :: [a_a5iVp]
                                          [LclId] =
                                              CCCS :! [x_s5l8t y_s5l8z]; } in
                                        let {
                                          sat_s5l8D [Occ=Once] :: [[a_a5iVp]]
                                          [LclId] =
                                              CCCS :! [sat_s5l8B sat_s5l8C];
                                        } in  : [y_s5l8z sat_s5l8D];
                                  };
                        } in 
                          case Data.OldList.nonEmptySubsequences xs_s5l8u of sat_s5l8E {
                            __DEFAULT -> go_s5l8w sat_s5l8E;
                          }; } in
              let {
                sat_s5l8v [Occ=Once] :: [a_a5iVp]
                [LclId] =
                    CCCS :! [x_s5l8t GHC.Types.[]];
              } in  : [sat_s5l8v sat_s5l8F];
        };

Data.OldList.subsequences :: forall a. [a] -> [[a]]
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,1*U>m2, Unf=OtherCon []] =
    [] \r [xs_s5l8G]
        let {
          sat_s5l8H [Occ=Once] :: [[a_a5iVM]]
          [LclId] =
              [xs_s5l8G] \u [] Data.OldList.nonEmptySubsequences xs_s5l8G;
        } in  : [GHC.Types.[] sat_s5l8H];

Data.OldList.permutations1 [Occ=LoopBreaker]
  :: forall a. [a] -> [a] -> [[a]]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ds_s5l8I ds1_s5l8J]
        case ds_s5l8I of {
          [] -> [] [];
          : t_s5l8L ts_s5l8M ->
              let {
                $winterleave'_s5l8N [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
                  :: forall c.
                     ([a_a5iTf] -> c) -> [a_a5iTf] -> [c] -> (# [a_a5iTf], [c] #)
                [LclId, Arity=3, Str=<L,C(U)><S,1*U><L,U>, Unf=OtherCon []] =
                    sat-only [t_s5l8L ts_s5l8M $winterleave'_s5l8N] \r [w_s5l8O
                                                                        w1_s5l8P
                                                                        w2_s5l8Q]
                        case w1_s5l8P of {
                          [] -> (#,#) [ts_s5l8M w2_s5l8Q];
                          : y_s5l8S ys_s5l8T [Occ=Once] ->
                              let {
                                ds2_s5l8U [Dmd=<L,U(1*U,1*U)>] :: ([a_a5iTf], [c_s5koH])
                                [LclId] =
                                    [$winterleave'_s5l8N w_s5l8O w2_s5l8Q y_s5l8S ys_s5l8T] \u []
                                        let {
                                          sat_s5l8X [Occ=Once] :: [a_a5iTf] -> c_s5koH
                                          [LclId] =
                                              [w_s5l8O y_s5l8S] \r [x_s5l8V]
                                                  let {
                                                    sat_s5l8W [Occ=Once] :: [a_a5iTf]
                                                    [LclId] =
                                                        CCCS :! [y_s5l8S x_s5l8V];
                                                  } in  w_s5l8O sat_s5l8W;
                                        } in 
                                          case $winterleave'_s5l8N sat_s5l8X ys_s5l8T w2_s5l8Q of {
                                            (#,#) ww1_s5l8Z [Occ=Once] ww2_s5l90 [Occ=Once] ->
                                                (,) [ww1_s5l8Z ww2_s5l90];
                                          }; } in
                              let {
                                us_s5l91 :: [a_a5iTf]
                                [LclId] =
                                    [ds2_s5l8U] \u []
                                        case ds2_s5l8U of {
                                          (,) us1_s5l93 [Occ=Once] _ [Occ=Dead] -> us1_s5l93;
                                        }; } in
                              let {
                                sat_s5l9c [Occ=Once] :: [c_s5koH]
                                [LclId] =
                                    [ds2_s5l8U] \u []
                                        case ds2_s5l8U of {
                                          (,) _ [Occ=Dead] zs_s5l9b [Occ=Once] -> zs_s5l9b;
                                        }; } in
                              let {
                                sat_s5l98 [Occ=Once] :: c_s5koH
                                [LclId] =
                                    [t_s5l8L w_s5l8O y_s5l8S us_s5l91] \u []
                                        let {
                                          sat_s5l96 [Occ=Once] :: [a_a5iTf]
                                          [LclId] =
                                              CCCS :! [y_s5l8S us_s5l91]; } in
                                        let {
                                          sat_s5l97 [Occ=Once] :: [a_a5iTf]
                                          [LclId] =
                                              CCCS :! [t_s5l8L sat_s5l96];
                                        } in  w_s5l8O sat_s5l97; } in
                              let {
                                sat_s5l9d [Occ=Once] :: [c_s5koH]
                                [LclId] =
                                    CCCS :! [sat_s5l98 sat_s5l9c]; } in
                              let {
                                sat_s5l95 [Occ=Once] :: [a_a5iTf]
                                [LclId] =
                                    CCCS :! [y_s5l8S us_s5l91];
                              } in  (#,#) [sat_s5l95 sat_s5l9d];
                        }; } in
              let {
                z_s5l9e [Occ=OnceL] :: [[a_a5iTf]]
                [LclId] =
                    [ds1_s5l8J t_s5l8L ts_s5l8M] \u []
                        let {
                          sat_s5l9f [Occ=Once] :: [a_a5iTf]
                          [LclId] =
                              CCCS :! [t_s5l8L ds1_s5l8J];
                        } in  Data.OldList.permutations1 ts_s5l8M sat_s5l9f; } in
              let {
                go_s5l9g [Occ=LoopBreaker] :: [[a_a5iTf]] -> [[a_a5iTf]]
                [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                    sat-only [$winterleave'_s5l8N z_s5l9e go_s5l9g] \r [ds2_s5l9h]
                        case ds2_s5l9h of {
                          [] -> z_s5l9e;
                          : y_s5l9j [Occ=Once] ys_s5l9k [Occ=Once] ->
                              let {
                                sat_s5l9l [Occ=Once] :: [[a_a5iTf]]
                                [LclId] =
                                    [go_s5l9g ys_s5l9k] \u [] go_s5l9g ys_s5l9k;
                              } in 
                                case $winterleave'_s5l8N GHC.Base.id y_s5l9j sat_s5l9l of {
                                  (#,#) _ [Occ=Dead] ww2_s5l9o [Occ=Once] -> ww2_s5l9o;
                                };
                        }; } in
              let {
                sat_s5l9p [Occ=Once] :: [[a_a5iTf]]
                [LclId] =
                    [ds1_s5l8J] \u []
                        Data.OldList.permutations1 ds1_s5l8J GHC.Types.[]; } in
              let {
                sat_s5l9q [Occ=Once] :: [[a_a5iTf]]
                [LclId] =
                    CCCS :! [ds1_s5l8J sat_s5l9p];
              } in  go_s5l9g sat_s5l9q;
        };

Data.OldList.permutations :: forall a. [a] -> [[a]]
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [xs0_s5l9r]
        let {
          sat_s5l9s [Occ=Once] :: [[a_a5iTf]]
          [LclId] =
              [xs0_s5l9r] \u []
                  Data.OldList.permutations1 xs0_s5l9r GHC.Types.[];
        } in  : [xs0_s5l9r sat_s5l9s];

lvl6_r5kSo :: forall a. [[a]]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Types.[] GHC.Types.[]];

Data.OldList.sortBy
  :: forall a. (a -> a -> GHC.Types.Ordering) -> [a] -> [a]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><S,1*U>,
 Unf=OtherCon []] =
    [] \r [cmp_s5l9t eta_s5l9u]
        let {
          merge_s5l9v [Occ=LoopBreaker]
            :: [a_a5iQ6] -> [a_a5iQ6] -> [a_a5iQ6]
          [LclId, Arity=2, Str=<S,1*U><S,1*U>, Unf=OtherCon []] =
              sat-only [cmp_s5l9t merge_s5l9v] \r [as_s5l9w bs_s5l9x]
                  case as_s5l9w of wild_s5l9y {
                    [] -> bs_s5l9x;
                    : a1_s5l9z as'_s5l9A [Occ=Once] ->
                        case bs_s5l9x of wild1_s5l9B {
                          [] -> wild_s5l9y;
                          : b_s5l9C bs'_s5l9D [Occ=Once] ->
                              case cmp_s5l9t a1_s5l9z b_s5l9C of {
                                __DEFAULT ->
                                    let {
                                      sat_s5l9F [Occ=Once] :: [a_a5iQ6]
                                      [LclId] =
                                          [merge_s5l9v as'_s5l9A wild1_s5l9B] \u []
                                              merge_s5l9v as'_s5l9A wild1_s5l9B;
                                    } in  : [a1_s5l9z sat_s5l9F];
                                GHC.Types.GT ->
                                    let {
                                      sat_s5l9G [Occ=Once] :: [a_a5iQ6]
                                      [LclId] =
                                          [merge_s5l9v wild_s5l9y bs'_s5l9D] \u []
                                              merge_s5l9v wild_s5l9y bs'_s5l9D;
                                    } in  : [b_s5l9C sat_s5l9G];
                              };
                        };
                  }; } in
        let {
          mergePairs_s5l9H [Occ=LoopBreaker] :: [[a_a5iQ6]] -> [[a_a5iQ6]]
          [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
              sat-only [merge_s5l9v mergePairs_s5l9H] \r [ds_s5l9I]
                  case ds_s5l9I of wild_s5l9J {
                    [] -> [] [];
                    : a1_s5l9K [Occ=Once] ds1_s5l9L [Occ=Once!] ->
                        case ds1_s5l9L of {
                          [] -> wild_s5l9J;
                          : b_s5l9N [Occ=Once] xs_s5l9O [Occ=Once] ->
                              case merge_s5l9v a1_s5l9K b_s5l9N of x_s5l9P {
                                __DEFAULT ->
                                    let {
                                      sat_s5l9Q [Occ=Once] :: [[a_a5iQ6]]
                                      [LclId] =
                                          [mergePairs_s5l9H xs_s5l9O] \u []
                                              mergePairs_s5l9H xs_s5l9O;
                                    } in  : [x_s5l9P sat_s5l9Q];
                              };
                        };
                  }; } in
        let {
          lvl12_s5l9R [Occ=OnceL] :: [[a_a5iQ6]]
          [LclId] =
              [mergePairs_s5l9H] \u [] mergePairs_s5l9H GHC.Types.[]; } in
        let {
          sequences_s5l9S :: [a_a5iQ6] -> [[a_a5iQ6]]
          [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
              sat-only [cmp_s5l9t descending_s5l9U ascending_s5l9V] \r [ds_s5l9W]
                  case ds_s5l9W of wild_s5l9X {
                    [] -> lvl6_r5kSo;
                    : a1_s5l9Y ds1_s5l9Z [Occ=Once!] ->
                        case ds1_s5l9Z of {
                          [] -> : [wild_s5l9X GHC.Types.[]];
                          : b_s5la1 xs_s5la2 [Occ=Once*] ->
                              case cmp_s5l9t a1_s5l9Y b_s5la1 of {
                                __DEFAULT ->
                                    let {
                                      sat_s5la4 [Occ=Once] :: [a_a5iQ6] -> [a_a5iQ6]
                                      [LclId] =
                                          [a1_s5l9Y] \r [eta_B1] : [a1_s5l9Y eta_B1];
                                    } in  ascending_s5l9V b_s5la1 sat_s5la4 xs_s5la2;
                                GHC.Types.GT ->
                                    let {
                                      sat_s5la5 [Occ=Once] :: [a_a5iQ6]
                                      [LclId] =
                                          CCCS :! [a1_s5l9Y GHC.Types.[]];
                                    } in  descending_s5l9U b_s5la1 sat_s5la5 xs_s5la2;
                              };
                        };
                  };
          lvl13_s5l9T :: [[a_a5iQ6]]
          [LclId] =
              [sequences_s5l9S] \u [] sequences_s5l9S GHC.Types.[];
          descending_s5l9U [Occ=LoopBreaker]
            :: a_a5iQ6 -> [a_a5iQ6] -> [a_a5iQ6] -> [[a_a5iQ6]]
          [LclId, Arity=3, Str=<L,U><L,U><S,1*U>, Unf=OtherCon []] =
              sat-only [cmp_s5l9t
                        sequences_s5l9S
                        lvl13_s5l9T
                        descending_s5l9U] \r [a1_s5la6 as_s5la7 ds_s5la8]
                  case ds_s5la8 of wild_s5la9 {
                    [] ->
                        let {
                          sat_s5laa [Occ=Once] :: [a_a5iQ6]
                          [LclId] =
                              CCCS :! [a1_s5la6 as_s5la7];
                        } in  : [sat_s5laa lvl13_s5l9T];
                    : b_s5lab bs_s5lac [Occ=Once] ->
                        case cmp_s5l9t a1_s5la6 b_s5lab of {
                          __DEFAULT ->
                              let {
                                sat_s5laf [Occ=Once] :: [[a_a5iQ6]]
                                [LclId] =
                                    [sequences_s5l9S wild_s5la9] \u []
                                        sequences_s5l9S wild_s5la9; } in
                              let {
                                sat_s5lae [Occ=Once] :: [a_a5iQ6]
                                [LclId] =
                                    CCCS :! [a1_s5la6 as_s5la7];
                              } in  : [sat_s5lae sat_s5laf];
                          GHC.Types.GT ->
                              let {
                                sat_s5lag [Occ=Once] :: [a_a5iQ6]
                                [LclId] =
                                    CCCS :! [a1_s5la6 as_s5la7];
                              } in  descending_s5l9U b_s5lab sat_s5lag bs_s5lac;
                        };
                  };
          ascending_s5l9V [Occ=LoopBreaker]
            :: a_a5iQ6 -> ([a_a5iQ6] -> [a_a5iQ6]) -> [a_a5iQ6] -> [[a_a5iQ6]]
          [LclId, Arity=3, Str=<L,U><C(S),1*C1(U)><S,1*U>, Unf=OtherCon []] =
              sat-only [cmp_s5l9t
                        sequences_s5l9S
                        lvl13_s5l9T
                        ascending_s5l9V] \r [a1_s5lah as_s5lai ds_s5laj]
                  case ds_s5laj of wild_s5lak {
                    [] ->
                        let {
                          sat_s5lal [Occ=Once] :: [a_a5iQ6]
                          [LclId] =
                              CCCS :! [a1_s5lah GHC.Types.[]];
                        } in 
                          case as_s5lai sat_s5lal of x_s5lam {
                            __DEFAULT -> : [x_s5lam lvl13_s5l9T];
                          };
                    : b_s5lan bs_s5lao [Occ=Once] ->
                        case cmp_s5l9t a1_s5lah b_s5lan of {
                          __DEFAULT ->
                              let {
                                sat_s5las [Occ=Once] :: [a_a5iQ6] -> [a_a5iQ6]
                                [LclId] =
                                    [a1_s5lah as_s5lai] \r [ys_s5laq]
                                        let {
                                          sat_s5lar [Occ=Once] :: [a_a5iQ6]
                                          [LclId] =
                                              CCCS :! [a1_s5lah ys_s5laq];
                                        } in  as_s5lai sat_s5lar;
                              } in  ascending_s5l9V b_s5lan sat_s5las bs_s5lao;
                          GHC.Types.GT ->
                              let {
                                sat_s5lat [Occ=Once] :: [a_a5iQ6]
                                [LclId] =
                                    CCCS :! [a1_s5lah GHC.Types.[]];
                              } in 
                                case as_s5lai sat_s5lat of x_s5lau {
                                  __DEFAULT ->
                                      let {
                                        sat_s5lav [Occ=Once] :: [[a_a5iQ6]]
                                        [LclId] =
                                            [sequences_s5l9S wild_s5lak] \u []
                                                sequences_s5l9S wild_s5lak;
                                      } in  : [x_s5lau sat_s5lav];
                                };
                        };
                  };
        } in 
          case sequences_s5l9S eta_s5l9u of sat_s5laF {
            __DEFAULT ->
                let-no-escape {
                  mergeAll_s5law [Occ=LoopBreakerT[1]] :: [[a_a5iQ6]] -> [a_a5iQ6]
                  [LclId[JoinId(1)], Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                      sat-only [mergePairs_s5l9H
                                lvl12_s5l9R
                                mergeAll_s5law] \r [ds_s5lax]
                          case ds_s5lax of wild_s5lay {
                            [] -> mergeAll_s5law lvl12_s5l9R;
                            : x_s5laz [Occ=Once] ds1_s5laA [Occ=Once!] ->
                                case ds1_s5laA of {
                                  [] -> x_s5laz;
                                  : _ [Occ=Dead] _ [Occ=Dead] ->
                                      case mergePairs_s5l9H wild_s5lay of sat_s5laE {
                                        __DEFAULT -> mergeAll_s5law sat_s5laE;
                                      };
                                };
                          };
                } in  mergeAll_s5law sat_s5laF;
          };

Data.OldList.sortOn
  :: forall b a. GHC.Classes.Ord b => (a -> b) -> [a] -> [a]
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U(A,C(C1(U)),A,A,A,A,A,A)><L,C(U)><S,1*U>,
 Unf=OtherCon []] =
    [] \r [$dOrd_s5laG f_s5laH eta_s5laI]
        let {
          sat_s5laW [Occ=Once] :: a_a5iSu -> (b_a5iSt, a_a5iSu)
          [LclId] =
              [f_s5laH] \r [x_s5laU]
                  case f_s5laH x_s5laU of y_s5laV {
                    __DEFAULT -> (,) [y_s5laV x_s5laU];
                  };
        } in 
          case GHC.Base.map sat_s5laW eta_s5laI of sat_s5laX {
            __DEFAULT ->
                let {
                  sat_s5laT [Occ=Once]
                    :: (b_a5iSt, a_a5iSu) -> (b_a5iSt, a_a5iSu) -> GHC.Types.Ordering
                  [LclId] =
                      [$dOrd_s5laG] \r [x_s5laJ y_s5laK]
                          let {
                            sat_s5laS [Occ=Once] :: b_a5iSt
                            [LclId] =
                                [y_s5laK] \u []
                                    case y_s5laK of {
                                      (,) x1_s5laQ [Occ=Once] _ [Occ=Dead] -> x1_s5laQ;
                                    }; } in
                          let {
                            sat_s5laO [Occ=Once] :: b_a5iSt
                            [LclId] =
                                [x_s5laJ] \u []
                                    case x_s5laJ of {
                                      (,) x1_s5laM [Occ=Once] _ [Occ=Dead] -> x1_s5laM;
                                    };
                          } in  GHC.Classes.compare $dOrd_s5laG sat_s5laO sat_s5laS;
                } in 
                  case Data.OldList.sortBy sat_s5laT sat_s5laX of sat_s5laY {
                    __DEFAULT -> GHC.Base.map Data.Tuple.snd sat_s5laY;
                  };
          };

Data.OldList.sort :: forall a. GHC.Classes.Ord a => [a] -> [a]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*U(A,1*C(C1(U)),A,A,A,A,A,A)><S,1*U>,
 Unf=OtherCon []] =
    [] \r [$dOrd_s5laZ eta_s5lb0]
        let {
          sat_s5lb1 [Occ=Once, Dmd=<L,C(C1(U))>]
            :: a_a5iT8 -> a_a5iT8 -> GHC.Types.Ordering
          [LclId] =
              [$dOrd_s5laZ] \u [] GHC.Classes.compare $dOrd_s5laZ;
        } in  Data.OldList.sortBy sat_s5lb1 eta_s5lb0;

Data.OldList.unfoldr [InlPrag=INLINE (sat-args=2)]
  :: forall b a. (b -> GHC.Base.Maybe (a, b)) -> b -> [a]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<C(S),C(U)><L,U>,
 Unf=OtherCon []] =
    [] \r [f_s5lb2 b0_s5lb3]
        let {
          go_s5lb4 [Occ=LoopBreaker] :: b_a5iPE -> [a_a5iPF]
          [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
              sat-only [f_s5lb2 go_s5lb4] \r [b1_s5lb5]
                  case f_s5lb2 b1_s5lb5 of {
                    GHC.Base.Nothing -> [] [];
                    GHC.Base.Just ds_s5lb7 [Occ=Once!] ->
                        case ds_s5lb7 of {
                          (,) a1_s5lb9 [Occ=Once] new_b_s5lba [Occ=Once] ->
                              let {
                                sat_s5lbb [Occ=Once] :: [a_a5iPF]
                                [LclId] =
                                    [go_s5lb4 new_b_s5lba] \u [] go_s5lb4 new_b_s5lba;
                              } in  : [a1_s5lb9 sat_s5lbb];
                        };
                  };
        } in  go_s5lb4 b0_s5lb3;

lvl7_r5kSp :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\n'#];

Data.OldList.unlines [Occ=LoopBreaker]
  :: [GHC.Base.String] -> GHC.Base.String
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s5lbc]
        case ds_s5lbc of {
          [] -> [] [];
          : l_s5lbe [Occ=Once] ls_s5lbf [Occ=Once] ->
              let {
                sat_s5lbg [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [ls_s5lbf] \u [] Data.OldList.unlines ls_s5lbf; } in
              let {
                sat_s5lbh [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    CCCS :! [lvl7_r5kSp sat_s5lbg];
              } in  GHC.Base.++ l_s5lbe sat_s5lbh;
        };

Data.OldList.wordsFB [InlPrag=INLINE[0] (sat-args=2),
                      Occ=LoopBreaker!]
  :: forall b.
     ([GHC.Types.Char] -> b -> b) -> b -> GHC.Base.String -> b
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [c_s5lbi n_s5lbj eta_s5lbk]
        let {
          go_s5lbl [Occ=LoopBreaker] :: [GHC.Types.Char] -> b_a5iOj
          [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
              sat-only [c_s5lbi n_s5lbj go_s5lbl] \r [s_s5lbm]
                  case GHC.List.dropWhile GHC.Unicode.isSpace s_s5lbm of wild_s5lbn {
                    [] -> n_s5lbj;
                    : _ [Occ=Dead] _ [Occ=Dead] ->
                        let {
                          ds_s5lbq [Dmd=<L,U(1*U,1*U)>]
                            :: ([GHC.Types.Char], [GHC.Types.Char])
                          [LclId] =
                              [wild_s5lbn] \u []
                                  case GHC.List.$wbreak GHC.Unicode.isSpace wild_s5lbn of {
                                    (#,#) ww1_s5lbs [Occ=Once] ww2_s5lbt [Occ=Once] ->
                                        (,) [ww1_s5lbs ww2_s5lbt];
                                  }; } in
                        let {
                          sat_s5lbB [Occ=Once] :: b_a5iOj
                          [LclId] =
                              [go_s5lbl ds_s5lbq] \u []
                                  case ds_s5lbq of {
                                    (,) _ [Occ=Dead] s''_s5lbA [Occ=Once] -> go_s5lbl s''_s5lbA;
                                  }; } in
                        let {
                          sat_s5lbx [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              [ds_s5lbq] \u []
                                  case ds_s5lbq of {
                                    (,) w_s5lbv [Occ=Once] _ [Occ=Dead] -> w_s5lbv;
                                  };
                        } in  c_s5lbi sat_s5lbx sat_s5lbB;
                  };
        } in  go_s5lbl eta_s5lbk;
Data.OldList.words [InlPrag=NOINLINE[1], Occ=LoopBreaker]
  :: GHC.Base.String -> [GHC.Base.String]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [s_s5lbC]
        case GHC.List.dropWhile GHC.Unicode.isSpace s_s5lbC of wild_s5lbD {
          [] -> [] [];
          : _ [Occ=Dead] _ [Occ=Dead] ->
              let {
                ds_s5lbG [Dmd=<L,U(1*U,1*U)>]
                  :: ([GHC.Types.Char], [GHC.Types.Char])
                [LclId] =
                    [wild_s5lbD] \u []
                        case GHC.List.$wbreak GHC.Unicode.isSpace wild_s5lbD of {
                          (#,#) ww1_s5lbI [Occ=Once] ww2_s5lbJ [Occ=Once] ->
                              (,) [ww1_s5lbI ww2_s5lbJ];
                        }; } in
              let {
                sat_s5lbR [Occ=Once] :: [[GHC.Types.Char]]
                [LclId] =
                    [ds_s5lbG] \u []
                        case ds_s5lbG of {
                          (,) _ [Occ=Dead] s''_s5lbQ [Occ=Once] ->
                              Data.OldList.words s''_s5lbQ;
                        }; } in
              let {
                sat_s5lbN [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [ds_s5lbG] \u []
                        case ds_s5lbG of {
                          (,) w_s5lbL [Occ=Once] _ [Occ=Dead] -> w_s5lbL;
                        };
              } in  : [sat_s5lbN sat_s5lbR];
        };

lvl8_r5kSq :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! [' '#];

Data.OldList.unwordsFB [InlPrag=INLINE[0] (sat-args=2)]
  :: GHC.Base.String -> GHC.Base.String -> GHC.Base.String
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*U><L,1*U>m2,
 Unf=OtherCon []] =
    [] \r [w_s5lbS r_s5lbT]
        let {
          sat_s5lbU [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [w_s5lbS r_s5lbT] \u [] GHC.Base.++ w_s5lbS r_s5lbT;
        } in  : [lvl8_r5kSq sat_s5lbU];

Data.OldList.unwords_go [Occ=LoopBreaker]
  :: [[GHC.Types.Char]] -> [GHC.Types.Char]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s5lbV]
        case ds_s5lbV of {
          [] -> [] [];
          : v_s5lbX [Occ=Once] vs_s5lbY [Occ=Once] ->
              let {
                sat_s5lc0 [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [v_s5lbX vs_s5lbY] \u []
                        let {
                          sat_s5lbZ [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                          [LclId] =
                              [vs_s5lbY] \s [] Data.OldList.unwords_go vs_s5lbY;
                        } in  GHC.Base.++ v_s5lbX sat_s5lbZ;
              } in  : [lvl8_r5kSq sat_s5lc0];
        };

Data.OldList.tailUnwords [InlPrag=INLINE[0] (sat-args=1),
                          Occ=LoopBreaker!]
  :: GHC.Base.String -> GHC.Base.String
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s5lc1]
        case ds_s5lc1 of {
          [] -> [] [];
          : _ [Occ=Dead] xs_s5lc4 [Occ=Once] -> xs_s5lc4;
        };
Data.OldList.unwords [InlPrag=NOINLINE[1], Occ=LoopBreaker!]
  :: [GHC.Base.String] -> GHC.Base.String
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s5lc5]
        case ds_s5lc5 of {
          [] -> [] [];
          : w_s5lc7 [Occ=Once] ws_s5lc8 [Occ=Once] ->
              let {
                sat_s5lc9 [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                [LclId] =
                    [ws_s5lc8] \s [] Data.OldList.unwords_go ws_s5lc8;
              } in  GHC.Base.++ w_s5lc7 sat_s5lc9;
        };

lvl9_r5kSr :: forall a. [a]
[GblId] =
    [] \u [] GHC.List.reverse1 GHC.Types.[] GHC.Types.[];

lvl10_r5kSs :: forall a. [a]
[GblId] =
    [] \u [] GHC.Base.++ GHC.Types.[] lvl9_r5kSr;

poly_$wgo_r5kSt
  :: forall a. [a] -> GHC.Prim.Word# -> [a] -> [a] -> [[a]]
[GblId, Arity=4, Str=<S,1*U><L,U><L,U><L,U>, Unf=OtherCon []] =
    sat-only [] \r [w_s5lca ww_s5lcb ww1_s5lcc ww2_s5lcd]
        case w_s5lca of {
          [] -> [] [];
          : y_s5lcf [Occ=OnceL*] ys_s5lcg [Occ=Once*] ->
              case plusWord# [ww_s5lcb 1##] of lp_s5lch [Dmd=<S,U>] {
                __DEFAULT ->
                    case ltWord# [lp_s5lch 255##] of {
                      __DEFAULT ->
                          case plusWord# [lp_s5lch 1##] of sat_s5lcj {
                            __DEFAULT ->
                                case and# [lp_s5lch sat_s5lcj] of {
                                  __DEFAULT ->
                                      let {
                                        b'_s5lcl :: [a_s5koc]
                                        [LclId, Unf=OtherCon []] =
                                            CCCS :! [y_s5lcf ww2_s5lcd]; } in
                                      let {
                                        sat_s5lco [Occ=Once] :: [[a_s5koc]]
                                        [LclId] =
                                            [ww1_s5lcc ys_s5lcg lp_s5lch b'_s5lcl] \u []
                                                poly_$wgo_r5kSt
                                                    ys_s5lcg lp_s5lch ww1_s5lcc b'_s5lcl; } in
                                      let {
                                        sat_s5lcn [Occ=Once] :: [a_s5koc]
                                        [LclId] =
                                            [ww1_s5lcc b'_s5lcl] \u []
                                                let {
                                                  sat_s5lcm [Occ=Once, Dmd=<L,1*U>] :: [a_s5koc]
                                                  [LclId] =
                                                      [b'_s5lcl] \s []
                                                          GHC.List.reverse1 b'_s5lcl GHC.Types.[];
                                                } in  GHC.Base.++ ww1_s5lcc sat_s5lcm;
                                      } in  : [sat_s5lcn sat_s5lco];
                                  0## ->
                                      let {
                                        b'_s5lcp :: [a_s5koc]
                                        [LclId] =
                                            [ww1_s5lcc ww2_s5lcd y_s5lcf] \u []
                                                let {
                                                  sat_s5lcr [Occ=Once, Dmd=<L,1*U>] :: [a_s5koc]
                                                  [LclId] =
                                                      [ww2_s5lcd y_s5lcf] \s []
                                                          let {
                                                            sat_s5lcq [Occ=Once] :: [a_s5koc]
                                                            [LclId] =
                                                                CCCS :! [y_s5lcf ww2_s5lcd];
                                                          } in 
                                                            GHC.List.reverse1
                                                                sat_s5lcq GHC.Types.[];
                                                } in  GHC.Base.++ ww1_s5lcc sat_s5lcr; } in
                                      let {
                                        sat_s5lct [Occ=Once] :: [[a_s5koc]]
                                        [LclId] =
                                            [ys_s5lcg lp_s5lch b'_s5lcp] \u []
                                                poly_$wgo_r5kSt
                                                    ys_s5lcg lp_s5lch b'_s5lcp GHC.Types.[]; } in
                                      let {
                                        sat_s5lcs [Occ=Once] :: [a_s5koc]
                                        [LclId] =
                                            [b'_s5lcp] \u [] GHC.Base.++ b'_s5lcp lvl9_r5kSr;
                                      } in  : [sat_s5lcs sat_s5lct];
                                };
                          };
                      1# ->
                          let {
                            b'_s5lcu :: [a_s5koc]
                            [LclId, Unf=OtherCon []] =
                                CCCS :! [y_s5lcf ww2_s5lcd]; } in
                          let {
                            sat_s5lcx [Occ=Once] :: [[a_s5koc]]
                            [LclId] =
                                [ww1_s5lcc ys_s5lcg lp_s5lch b'_s5lcu] \u []
                                    poly_$wgo_r5kSt ys_s5lcg lp_s5lch ww1_s5lcc b'_s5lcu; } in
                          let {
                            sat_s5lcw [Occ=Once] :: [a_s5koc]
                            [LclId] =
                                [ww1_s5lcc b'_s5lcu] \u []
                                    let {
                                      sat_s5lcv [Occ=Once, Dmd=<L,1*U>] :: [a_s5koc]
                                      [LclId] =
                                          [b'_s5lcu] \s [] GHC.List.reverse1 b'_s5lcu GHC.Types.[];
                                    } in  GHC.Base.++ ww1_s5lcc sat_s5lcv;
                          } in  : [sat_s5lcw sat_s5lcx];
                    };
              };
        };

Data.OldList.$winits [InlPrag=NOINLINE]
  :: forall a. [a] -> (# [a], [[a]] #)
[GblId, Arity=1, Str=<L,1*U>, Unf=OtherCon []] =
    [] \r [w_s5lcy]
        let {
          sat_s5lcz [Occ=Once] :: [[a_s5koc]]
          [LclId] =
              [w_s5lcy] \u []
                  poly_$wgo_r5kSt w_s5lcy 0## GHC.Types.[] GHC.Types.[];
        } in  (#,#) [lvl10_r5kSs sat_s5lcz];

Data.OldList.inits [InlPrag=NOUSERINLINE[0]]
  :: forall a. [a] -> [[a]]
[GblId, Arity=1, Str=<L,1*U>m2, Unf=OtherCon []] =
    [] \r [w_s5lcA]
        case Data.OldList.$winits w_s5lcA of {
          (#,#) ww1_s5lcC [Occ=Once] ww2_s5lcD [Occ=Once] ->
              : [ww1_s5lcC ww2_s5lcD];
        };

Data.OldList.$tc'SnocBuilder3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'SnocBuilder"#;

Data.OldList.$tc'SnocBuilder2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.OldList.$tc'SnocBuilder3];

Data.OldList.$tcSnocBuilder2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SnocBuilder"#;

Data.OldList.$tcSnocBuilder1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.OldList.$tcSnocBuilder2];

Data.OldList.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Data.OldList"#;

Data.OldList.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.OldList.$trModule2];

Data.OldList.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Data.OldList.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.OldList.$trModule4];

Data.OldList.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Data.OldList.$trModule3
                                     Data.OldList.$trModule1];

Data.OldList.$tcSnocBuilder :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [17650604350574790456##
                                    3021529305462083578##
                                    Data.OldList.$trModule
                                    Data.OldList.$tcSnocBuilder1
                                    0#
                                    GHC.Types.krep$*Arr*];

$krep_r5kSu :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcWord
                                              GHC.Types.[]];

$krep1_r5kSv :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

$krep2_r5kSw :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep1_r5kSv GHC.Types.[]];

$krep3_r5kSx :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep2_r5kSw];

$krep4_r5kSy :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Data.OldList.$tcSnocBuilder
                                              $krep2_r5kSw];

$krep5_r5kSz :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_r5kSx $krep4_r5kSy];

$krep6_r5kSA :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_r5kSx $krep5_r5kSz];

Data.OldList.$tc'SnocBuilder1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_r5kSu $krep6_r5kSA];

Data.OldList.$tc'SnocBuilder :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [6719263830224029004##
                                    9134053658265160069##
                                    Data.OldList.$trModule
                                    Data.OldList.$tc'SnocBuilder2
                                    1#
                                    Data.OldList.$tc'SnocBuilder1];

lvl11_r5kSB :: GHC.Types.Char -> GHC.Types.Bool
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(1*U)>,
 Unf=OtherCon []] =
    [] \r [ds_s5lcE]
        case ds_s5lcE of {
          GHC.Types.C# x_s5lcG [Occ=Once!] ->
              case x_s5lcG of {
                __DEFAULT -> GHC.Types.False [];
                '\n'# -> GHC.Types.True [];
              };
        };

Data.OldList.lines [Occ=LoopBreaker]
  :: GHC.Base.String -> [GHC.Base.String]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s5lcI]
        case ds_s5lcI of wild_s5lcJ {
          [] -> [] [];
          : _ [Occ=Dead] _ [Occ=Dead] ->
              let {
                ds1_s5lcM [Dmd=<L,U(1*U,1*U)>]
                  :: ([GHC.Types.Char], [[GHC.Types.Char]])
                [LclId] =
                    [wild_s5lcJ] \u []
                        case GHC.List.$wbreak lvl11_r5kSB wild_s5lcJ of {
                          (#,#) ww1_s5lcO [Occ=Once] ww2_s5lcP [Occ=Once!] ->
                              let {
                                sat_s5lcT [Occ=Once] :: [[GHC.Types.Char]]
                                [LclId] =
                                    [ww2_s5lcP] \u []
                                        case ww2_s5lcP of {
                                          [] -> [] [];
                                          : _ [Occ=Dead] s''_s5lcS [Occ=Once] ->
                                              Data.OldList.lines s''_s5lcS;
                                        };
                              } in  (,) [ww1_s5lcO sat_s5lcT];
                        }; } in
              let {
                sat_s5ld1 [Occ=Once] :: [[GHC.Types.Char]]
                [LclId] =
                    [ds1_s5lcM] \u []
                        case ds1_s5lcM of {
                          (,) _ [Occ=Dead] t_s5ld0 [Occ=Once] -> t_s5ld0;
                        }; } in
              let {
                sat_s5lcX [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [ds1_s5lcM] \u []
                        case ds1_s5lcM of {
                          (,) h_s5lcV [Occ=Once] _ [Occ=Dead] -> h_s5lcV;
                        };
              } in  : [sat_s5lcX sat_s5ld1];
        };

Data.OldList.SnocBuilder
  :: forall a.
     GHC.Prim.Word# -> [a] -> [a] -> Data.OldList.SnocBuilder a
[GblId[DataCon],
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        Data.OldList.SnocBuilder [eta_B3 eta_B2 eta_B1];


==================== Pre unarise: ====================
2018-03-16 16:00:25.395772297 UTC

Data.OldList.$WSnocBuilder [InlPrag=INLINE[2]]
  :: forall a.
     GHC.Types.Word -> [a] -> [a] -> Data.OldList.SnocBuilder a
[GblId[DataConWrapper],
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,U><L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [dt_s5pkE dt_s5pkF dt_s5pkG]
        case dt_s5pkE of {
          GHC.Types.W# dt_s5pkI [Occ=Once] ->
              Data.OldList.SnocBuilder [dt_s5pkI dt_s5pkF dt_s5pkG];
        };

Data.OldList.dropWhileEnd
  :: forall a. (a -> GHC.Types.Bool) -> [a] -> [a]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,C(U)><S,1*U>,
 Unf=OtherCon []] =
    [] \r [p_s5pkJ eta_s5pkK]
        let {
          go_s5pkL [Occ=LoopBreaker] :: [a_a5jar] -> [a_a5jar]
          [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
              sat-only [p_s5pkJ go_s5pkL] \r [ds_s5pkM]
                  case ds_s5pkM of {
                    [] -> [] [];
                    : y_s5pkO ys_s5pkP [Occ=Once*] ->
                        case p_s5pkJ y_s5pkO of {
                          GHC.Types.False ->
                              let {
                                sat_s5pkR [Occ=Once] :: [a_a5jar]
                                [LclId] =
                                    [go_s5pkL ys_s5pkP] \u [] go_s5pkL ys_s5pkP;
                              } in  : [y_s5pkO sat_s5pkR];
                          GHC.Types.True ->
                              case go_s5pkL ys_s5pkP of wild2_s5pkS {
                                [] -> [] [];
                                : _ [Occ=Dead] _ [Occ=Dead] -> : [y_s5pkO wild2_s5pkS];
                              };
                        };
                  };
        } in  go_s5pkL eta_s5pkK;

Data.OldList.stripPrefix [Occ=LoopBreaker]
  :: forall a. GHC.Classes.Eq a => [a] -> [a] -> GHC.Base.Maybe [a]
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U(C(C1(U)),A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dEq_s5pkV ds_s5pkW ys_s5pkX]
        case ds_s5pkW of {
          [] -> GHC.Base.Just [ys_s5pkX];
          : x_s5pkZ [Occ=Once] xs_s5pl0 [Occ=Once] ->
              case ys_s5pkX of {
                [] -> GHC.Base.Nothing [];
                : y_s5pl2 [Occ=Once] ys1_s5pl3 [Occ=Once] ->
                    case GHC.Classes.== $dEq_s5pkV x_s5pkZ y_s5pl2 of {
                      GHC.Types.False -> GHC.Base.Nothing [];
                      GHC.Types.True ->
                          Data.OldList.stripPrefix $dEq_s5pkV xs_s5pl0 ys1_s5pl3;
                    };
              };
        };

Data.OldList.find
  :: forall a. (a -> GHC.Types.Bool) -> [a] -> GHC.Base.Maybe a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,C(U)><S,1*U>,
 Unf=OtherCon []] =
    [] \r [p_s5pl5 x_s5pl6]
        let-no-escape {
          go_s5pl7 [Occ=LoopBreakerT[1]]
            :: [a_a5j9W] -> GHC.Base.Maybe a_a5j9W
          [LclId[JoinId(1)], Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
              sat-only [p_s5pl5 go_s5pl7] \r [ds_s5pl8]
                  case ds_s5pl8 of {
                    [] -> GHC.Base.Nothing [];
                    : y_s5pla ys_s5plb [Occ=Once] ->
                        case p_s5pl5 y_s5pla of {
                          GHC.Types.False -> go_s5pl7 ys_s5plb;
                          GHC.Types.True -> GHC.Base.Just [y_s5pla];
                        };
                  };
        } in  go_s5pl7 x_s5pl6;

Data.OldList.elemIndex
  :: forall a.
     GHC.Classes.Eq a =>
     a -> [a] -> GHC.Base.Maybe GHC.Types.Int
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*U(1*C1(C(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dEq_s5pld x_s5ple]
        let {
          p_s5plf [Occ=OnceL!, Dmd=<L,C(U)>] :: a_a5jaa -> GHC.Types.Bool
          [LclId] =
              [$dEq_s5pld x_s5ple] \u [] GHC.Classes.== $dEq_s5pld x_s5ple; } in
        let {
          sat_s5plq [Occ=OnceT[0]]
            :: [a_a5jaa] -> GHC.Base.Maybe GHC.Types.Int
          [LclId] =
              [p_s5plf] \r [x1_s5plg]
                  let-no-escape {
                    go_s5plh [Occ=LoopBreakerT[2]]
                      :: [a_a5jaa] -> GHC.Prim.Int# -> GHC.Base.Maybe GHC.Types.Int
                    [LclId[JoinId(2)], Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
                        sat-only [p_s5plf go_s5plh] \r [ds_s5pli eta_s5plj]
                            case ds_s5pli of {
                              [] -> GHC.Base.Nothing [];
                              : y_s5pll [Occ=Once] ys_s5plm [Occ=Once] ->
                                  case p_s5plf y_s5pll of {
                                    GHC.Types.False ->
                                        case +# [eta_s5plj 1#] of sat_s5plo {
                                          __DEFAULT -> go_s5plh ys_s5plm sat_s5plo;
                                        };
                                    GHC.Types.True ->
                                        let {
                                          sat_s5plp [Occ=Once] :: GHC.Types.Int
                                          [LclId] =
                                              CCCS GHC.Types.I#! [eta_s5plj];
                                        } in  GHC.Base.Just [sat_s5plp];
                                  };
                            };
                  } in  go_s5plh x1_s5plg 0#;
        } in  sat_s5plq;

Data.OldList.findIndex
  :: forall a.
     (a -> GHC.Types.Bool) -> [a] -> GHC.Base.Maybe GHC.Types.Int
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,C(U)><S,1*U>,
 Unf=OtherCon []] =
    [] \r [p_s5plr x_s5pls]
        let-no-escape {
          go_s5plt [Occ=LoopBreakerT[2]]
            :: [a_a5j9N] -> GHC.Prim.Int# -> GHC.Base.Maybe GHC.Types.Int
          [LclId[JoinId(2)], Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
              sat-only [p_s5plr go_s5plt] \r [ds_s5plu eta_s5plv]
                  case ds_s5plu of {
                    [] -> GHC.Base.Nothing [];
                    : y_s5plx [Occ=Once] ys_s5ply [Occ=Once] ->
                        case p_s5plr y_s5plx of {
                          GHC.Types.False ->
                              case +# [eta_s5plv 1#] of sat_s5plA {
                                __DEFAULT -> go_s5plt ys_s5ply sat_s5plA;
                              };
                          GHC.Types.True ->
                              let {
                                sat_s5plB [Occ=Once] :: GHC.Types.Int
                                [LclId] =
                                    CCCS GHC.Types.I#! [eta_s5plv];
                              } in  GHC.Base.Just [sat_s5plB];
                        };
                  };
        } in  go_s5plt x_s5pls 0#;

Data.OldList.findIndices [InlPrag=INLINE (sat-args=2)]
  :: forall a. (a -> GHC.Types.Bool) -> [a] -> [GHC.Types.Int]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,C(U)><S,1*U>,
 Unf=OtherCon []] =
    [] \r [p_s5plC ls_s5plD]
        let {
          go_s5plE [Occ=LoopBreaker]
            :: [a_a5j9e] -> GHC.Prim.Int# -> [GHC.Types.Int]
          [LclId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
              sat-only [p_s5plC go_s5plE] \r [ds_s5plF eta_s5plG]
                  case ds_s5plF of {
                    [] -> [] [];
                    : y_s5plI [Occ=Once] ys_s5plJ [Occ=Once*] ->
                        case p_s5plC y_s5plI of {
                          GHC.Types.False ->
                              case +# [eta_s5plG 1#] of sat_s5plL {
                                __DEFAULT -> go_s5plE ys_s5plJ sat_s5plL;
                              };
                          GHC.Types.True ->
                              let {
                                sat_s5plO [Occ=Once] :: [GHC.Types.Int]
                                [LclId] =
                                    [go_s5plE eta_s5plG ys_s5plJ] \u []
                                        case +# [eta_s5plG 1#] of sat_s5plN {
                                          __DEFAULT -> go_s5plE ys_s5plJ sat_s5plN;
                                        }; } in
                              let {
                                sat_s5plM [Occ=Once] :: GHC.Types.Int
                                [LclId] =
                                    CCCS GHC.Types.I#! [eta_s5plG];
                              } in  : [sat_s5plM sat_s5plO];
                        };
                  };
        } in  go_s5plE ls_s5plD 0#;

Data.OldList.elemIndices
  :: forall a. GHC.Classes.Eq a => a -> [a] -> [GHC.Types.Int]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*U(1*C1(C(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dEq_s5plP x_s5plQ]
        let {
          sat_s5plR [Occ=Once] :: a_a5ja3 -> GHC.Types.Bool
          [LclId] =
              [$dEq_s5plP x_s5plQ] \u [] GHC.Classes.== $dEq_s5plP x_s5plQ;
        } in  Data.OldList.findIndices sat_s5plR;

Data.OldList.isPrefixOf [Occ=LoopBreaker]
  :: forall a. GHC.Classes.Eq a => [a] -> [a] -> GHC.Types.Bool
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U(C(C1(U)),A)><S,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [$dEq_s5plS ds_s5plT ds1_s5plU]
        case ds_s5plT of {
          [] -> GHC.Types.True [];
          : ipv_s5plW [Occ=Once] ipv1_s5plX [Occ=Once] ->
              case ds1_s5plU of {
                [] -> GHC.Types.False [];
                : ipv2_s5plZ [Occ=Once] ipv3_s5pm0 [Occ=Once] ->
                    case GHC.Classes.== $dEq_s5plS ipv_s5plW ipv2_s5plZ of {
                      GHC.Types.False -> GHC.Types.False [];
                      GHC.Types.True ->
                          Data.OldList.isPrefixOf $dEq_s5plS ipv1_s5plX ipv3_s5pm0;
                    };
              };
        };

Data.OldList.isInfixOf
  :: forall a. GHC.Classes.Eq a => [a] -> [a] -> GHC.Types.Bool
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U(C(C1(U)),A)><S,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dEq_s5pm2 needle_s5pm3 haystack_s5pm4]
        let-no-escape {
          tailsGo_s5pm5 [Occ=LoopBreakerT[1]] :: [a_a5j96] -> GHC.Types.Bool
          [LclId[JoinId(1)], Arity=1, Str=<L,U>, Unf=OtherCon []] =
              sat-only [$dEq_s5pm2 needle_s5pm3 tailsGo_s5pm5] \r [xs_s5pm6]
                  case Data.OldList.isPrefixOf $dEq_s5pm2 needle_s5pm3 xs_s5pm6 of {
                    GHC.Types.False ->
                        case xs_s5pm6 of {
                          [] -> GHC.Types.False [];
                          : _ [Occ=Dead] xs'_s5pma [Occ=Once] -> tailsGo_s5pm5 xs'_s5pma;
                        };
                    GHC.Types.True -> GHC.Types.True [];
                  };
        } in  tailsGo_s5pm5 haystack_s5pm4;

Data.OldList.dropLength [Occ=LoopBreaker]
  :: forall a b. [a] -> [b] -> [b]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s5pmb y_s5pmc]
        case ds_s5pmb of {
          [] -> y_s5pmc;
          : _ [Occ=Dead] ipv1_s5pmf [Occ=Once] ->
              case y_s5pmc of {
                [] -> [] [];
                : _ [Occ=Dead] ipv3_s5pmi [Occ=Once] ->
                    Data.OldList.dropLength ipv1_s5pmf ipv3_s5pmi;
              };
        };

Data.OldList.dropLengthMaybe [Occ=LoopBreaker]
  :: forall a b. [a] -> [b] -> GHC.Base.Maybe [b]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ds_s5pmj y_s5pmk]
        case ds_s5pmj of {
          [] -> GHC.Base.Just [y_s5pmk];
          : _ [Occ=Dead] ipv1_s5pmn [Occ=Once] ->
              case y_s5pmk of {
                [] -> GHC.Base.Nothing [];
                : _ [Occ=Dead] ipv3_s5pmq [Occ=Once] ->
                    Data.OldList.dropLengthMaybe ipv1_s5pmn ipv3_s5pmq;
              };
        };

Data.OldList.isSuffixOf
  :: forall a. GHC.Classes.Eq a => [a] -> [a] -> GHC.Types.Bool
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U(C(C1(U)),A)><S,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dEq_s5pmr ns_s5pms hs_s5pmt]
        case Data.OldList.dropLengthMaybe ns_s5pms hs_s5pmt of {
          GHC.Base.Nothing -> GHC.Types.False [];
          GHC.Base.Just x_s5pmv [Occ=Once] ->
              case Data.OldList.dropLength x_s5pmv hs_s5pmt of sat_s5pmw {
                __DEFAULT -> GHC.Classes.$fEq[]_$c== $dEq_s5pmr ns_s5pms sat_s5pmw;
              };
        };

Data.OldList.elem_by [Occ=LoopBreaker]
  :: forall a.
     (a -> a -> GHC.Types.Bool) -> a -> [a] -> GHC.Types.Bool
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s5pmx ds1_s5pmy ds2_s5pmz]
        case ds2_s5pmz of {
          [] -> GHC.Types.False [];
          : x_s5pmB [Occ=Once] xs_s5pmC [Occ=Once] ->
              case ds_s5pmx x_s5pmB ds1_s5pmy of {
                GHC.Types.False ->
                    Data.OldList.elem_by ds_s5pmx ds1_s5pmy xs_s5pmC;
                GHC.Types.True -> GHC.Types.True [];
              };
        };

Data.OldList.nubBy
  :: forall a. (a -> a -> GHC.Types.Bool) -> [a] -> [a]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><S,1*U>,
 Unf=OtherCon []] =
    [] \r [eq_s5pmE l_s5pmF]
        let {
          nubBy'_s5pmG [Occ=LoopBreaker]
            :: [a_a5j7x] -> [a_a5j7x] -> [a_a5j7x]
          [LclId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
              sat-only [eq_s5pmE nubBy'_s5pmG] \r [ds_s5pmH ds1_s5pmI]
                  case ds_s5pmH of {
                    [] -> [] [];
                    : y_s5pmK ys_s5pmL [Occ=Once*] ->
                        case Data.OldList.elem_by eq_s5pmE y_s5pmK ds1_s5pmI of {
                          GHC.Types.False ->
                              let {
                                sat_s5pmO [Occ=Once] :: [a_a5j7x]
                                [LclId] =
                                    [nubBy'_s5pmG ds1_s5pmI y_s5pmK ys_s5pmL] \u []
                                        let {
                                          sat_s5pmN [Occ=Once] :: [a_a5j7x]
                                          [LclId] =
                                              CCCS :! [y_s5pmK ds1_s5pmI];
                                        } in  nubBy'_s5pmG ys_s5pmL sat_s5pmN;
                              } in  : [y_s5pmK sat_s5pmO];
                          GHC.Types.True -> nubBy'_s5pmG ys_s5pmL ds1_s5pmI;
                        };
                  };
        } in  nubBy'_s5pmG l_s5pmF GHC.Types.[];

Data.OldList.nub :: forall a. GHC.Classes.Eq a => [a] -> [a]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*U(1*C(C1(U)),A)><S,1*U>,
 Unf=OtherCon []] =
    [] \r [$dEq_s5pmP eta_s5pmQ]
        let {
          sat_s5pmR [Occ=Once, Dmd=<L,C(C1(U))>]
            :: a_a5j8h -> a_a5j8h -> GHC.Types.Bool
          [LclId] =
              [$dEq_s5pmP] \u [] GHC.Classes.== $dEq_s5pmP;
        } in  Data.OldList.nubBy sat_s5pmR eta_s5pmQ;

Data.OldList.deleteBy [Occ=LoopBreaker]
  :: forall a. (a -> a -> GHC.Types.Bool) -> a -> [a] -> [a]
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s5pmS ds1_s5pmT ds2_s5pmU]
        case ds2_s5pmU of {
          [] -> [] [];
          : y_s5pmW ys_s5pmX [Occ=Once*] ->
              case ds_s5pmS ds1_s5pmT y_s5pmW of {
                GHC.Types.False ->
                    let {
                      sat_s5pmZ [Occ=Once] :: [a_a5j6X]
                      [LclId] =
                          [ds_s5pmS ds1_s5pmT ys_s5pmX] \u []
                              Data.OldList.deleteBy ds_s5pmS ds1_s5pmT ys_s5pmX;
                    } in  : [y_s5pmW sat_s5pmZ];
                GHC.Types.True -> ys_s5pmX;
              };
        };

Data.OldList.deleteFirstsBy
  :: forall a. (a -> a -> GHC.Types.Bool) -> [a] -> [a] -> [a]
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [eq_s5pn0 eta_s5pn1 eta1_s5pn2]
        let-no-escape {
          go_s5pn3 [Occ=LoopBreakerT[2]]
            :: [a_a5j71] -> [a_a5j71] -> [a_a5j71]
          [LclId[JoinId(2)], Arity=2, Str=<S,1*U><S,1*U>, Unf=OtherCon []] =
              sat-only [eq_s5pn0 go_s5pn3] \r [ds_s5pn4 eta2_s5pn5]
                  case ds_s5pn4 of {
                    [] -> eta2_s5pn5;
                    : y_s5pn7 [Occ=Once] ys_s5pn8 [Occ=Once] ->
                        case
                            Data.OldList.deleteBy eq_s5pn0 y_s5pn7 eta2_s5pn5
                        of
                        sat_s5pn9
                        { __DEFAULT -> go_s5pn3 ys_s5pn8 sat_s5pn9;
                        };
                  };
        } in  go_s5pn3 eta1_s5pn2 eta_s5pn1;

Data.OldList.delete
  :: forall a. GHC.Classes.Eq a => a -> [a] -> [a]
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*U(1*C(C1(U)),A)><L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [$dEq_s5pna eta_s5pnb eta1_s5pnc]
        let {
          sat_s5pnd [Occ=Once, Dmd=<L,C(C1(U))>]
            :: a_a5j7c -> a_a5j7c -> GHC.Types.Bool
          [LclId] =
              [$dEq_s5pna] \u [] GHC.Classes.== $dEq_s5pna;
        } in  Data.OldList.deleteBy sat_s5pnd eta_s5pnb eta1_s5pnc;

Data.OldList.\\ :: forall a. GHC.Classes.Eq a => [a] -> [a] -> [a]
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*U(1*C(C1(U)),A)><S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [$dEq_s5pne eta_s5pnf eta1_s5png]
        let {
          lvl12_s5pnh [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: a_a5j7j -> a_a5j7j -> GHC.Types.Bool
          [LclId] =
              [$dEq_s5pne] \u [] GHC.Classes.== $dEq_s5pne;
        } in 
          let-no-escape {
            go_s5pni [Occ=LoopBreakerT[2]]
              :: [a_a5j7j] -> [a_a5j7j] -> [a_a5j7j]
            [LclId[JoinId(2)], Arity=2, Str=<S,1*U><S,1*U>, Unf=OtherCon []] =
                sat-only [lvl12_s5pnh go_s5pni] \r [ds_s5pnj eta2_s5pnk]
                    case ds_s5pnj of {
                      [] -> eta2_s5pnk;
                      : y_s5pnm [Occ=Once] ys_s5pnn [Occ=Once] ->
                          case
                              Data.OldList.deleteBy lvl12_s5pnh y_s5pnm eta2_s5pnk
                          of
                          sat_s5pno
                          { __DEFAULT -> go_s5pni ys_s5pnn sat_s5pno;
                          };
                    };
          } in  go_s5pni eta1_s5png eta_s5pnf;

Data.OldList.unionBy
  :: forall a. (a -> a -> GHC.Types.Bool) -> [a] -> [a] -> [a]
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><S,U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [eq_s5pnp xs_s5pnq ys_s5pnr]
        let {
          sat_s5pnA [Occ=Once, Dmd=<L,1*U>] :: [a_a5j80]
          [LclId] =
              [eq_s5pnp xs_s5pnq ys_s5pnr] \s []
                  case Data.OldList.nubBy eq_s5pnp ys_s5pnr of sat_s5pnz {
                    __DEFAULT ->
                        let-no-escape {
                          go_s5pns [Occ=LoopBreakerT[2]]
                            :: [a_a5j80] -> [a_a5j80] -> [a_a5j80]
                          [LclId[JoinId(2)], Arity=2, Str=<S,1*U><S,1*U>, Unf=OtherCon []] =
                              sat-only [eq_s5pnp go_s5pns] \r [ds_s5pnt eta_s5pnu]
                                  case ds_s5pnt of {
                                    [] -> eta_s5pnu;
                                    : y_s5pnw [Occ=Once] ys1_s5pnx [Occ=Once] ->
                                        case
                                            Data.OldList.deleteBy eq_s5pnp y_s5pnw eta_s5pnu
                                        of
                                        sat_s5pny
                                        { __DEFAULT -> go_s5pns ys1_s5pnx sat_s5pny;
                                        };
                                  };
                        } in  go_s5pns xs_s5pnq sat_s5pnz;
                  };
        } in  GHC.Base.++ xs_s5pnq sat_s5pnA;

Data.OldList.union
  :: forall a. GHC.Classes.Eq a => [a] -> [a] -> [a]
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*U(1*C(C1(U)),A)><S,U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [$dEq_s5pnB eta_s5pnC eta1_s5pnD]
        let {
          sat_s5pnE [Occ=Once, Dmd=<L,C(C1(U))>]
            :: a_a5j8a -> a_a5j8a -> GHC.Types.Bool
          [LclId] =
              [$dEq_s5pnB] \u [] GHC.Classes.== $dEq_s5pnB;
        } in  Data.OldList.unionBy sat_s5pnE eta_s5pnC eta1_s5pnD;

Data.OldList.intersectBy
  :: forall a. (a -> a -> GHC.Types.Bool) -> [a] -> [a] -> [a]
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C(U))><S,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s5pnF ds1_s5pnG ds2_s5pnH]
        case ds1_s5pnG of wild_s5pnI {
          [] -> [] [];
          : _ [Occ=Dead] _ [Occ=Dead] ->
              case ds2_s5pnH of wild1_s5pnL {
                [] -> [] [];
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    let {
                      go_s5pnO [Occ=LoopBreaker] :: [a_a5j6L] -> [a_a5j6L]
                      [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                          sat-only [ds_s5pnF wild1_s5pnL go_s5pnO] \r [ds3_s5pnP]
                              case ds3_s5pnP of {
                                [] -> [] [];
                                : y_s5pnR ys_s5pnS [Occ=Once*] ->
                                    let {
                                      sat_s5pnT [Occ=Once, Dmd=<L,C(U)>]
                                        :: a_a5j6L -> GHC.Types.Bool
                                      [LclId] =
                                          [ds_s5pnF y_s5pnR] \u [] ds_s5pnF y_s5pnR;
                                    } in 
                                      case GHC.List.any sat_s5pnT wild1_s5pnL of {
                                        GHC.Types.False -> go_s5pnO ys_s5pnS;
                                        GHC.Types.True ->
                                            let {
                                              sat_s5pnV [Occ=Once] :: [a_a5j6L]
                                              [LclId] =
                                                  [go_s5pnO ys_s5pnS] \u [] go_s5pnO ys_s5pnS;
                                            } in  : [y_s5pnR sat_s5pnV];
                                      };
                              };
                    } in  go_s5pnO wild_s5pnI;
              };
        };

Data.OldList.intersect
  :: forall a. GHC.Classes.Eq a => [a] -> [a] -> [a]
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*U(1*C(C(U)),A)><S,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [$dEq_s5pnW eta_s5pnX eta1_s5pnY]
        let {
          sat_s5pnZ [Occ=Once, Dmd=<L,C(C(U))>]
            :: a_a5j6Q -> a_a5j6Q -> GHC.Types.Bool
          [LclId] =
              [$dEq_s5pnW] \u [] GHC.Classes.== $dEq_s5pnW;
        } in  Data.OldList.intersectBy sat_s5pnZ eta_s5pnX eta1_s5pnY;

Data.OldList.prependToAll [Occ=LoopBreaker]
  :: forall a. a -> [a] -> [a]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s5po0 ds1_s5po1]
        case ds1_s5po1 of {
          [] -> [] [];
          : x_s5po3 [Occ=Once] xs_s5po4 [Occ=Once] ->
              let {
                sat_s5po5 [Occ=Once] :: [a_a5j6w]
                [LclId] =
                    [ds_s5po0 xs_s5po4] \u []
                        Data.OldList.prependToAll ds_s5po0 xs_s5po4; } in
              let {
                sat_s5po6 [Occ=Once] :: [a_a5j6w]
                [LclId] =
                    CCCS :! [x_s5po3 sat_s5po5];
              } in  : [ds_s5po0 sat_s5po6];
        };

Data.OldList.intersperse :: forall a. a -> [a] -> [a]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s5po7 ds1_s5po8]
        case ds1_s5po8 of {
          [] -> [] [];
          : x_s5poa [Occ=Once] xs_s5pob [Occ=Once] ->
              let {
                sat_s5poc [Occ=Once] :: [a_a5j6B]
                [LclId] =
                    [ds_s5po7 xs_s5pob] \u []
                        Data.OldList.prependToAll ds_s5po7 xs_s5pob;
              } in  : [x_s5poa sat_s5poc];
        };

Data.OldList.intercalate1 [Occ=LoopBreaker]
  :: forall a. [[a]] -> [a]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s5pod]
        case ds_s5pod of {
          [] -> [] [];
          : y_s5pof [Occ=Once] ys_s5pog [Occ=Once] ->
              let {
                sat_s5poh [Occ=Once, Dmd=<L,1*U>] :: [a_a5j6F]
                [LclId] =
                    [ys_s5pog] \s [] Data.OldList.intercalate1 ys_s5pog;
              } in  GHC.Base.++ y_s5pof sat_s5poh;
        };

Data.OldList.intercalate :: forall a. [a] -> [[a]] -> [a]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [xs_s5poi xss_s5poj]
        case xss_s5poj of {
          [] -> [] [];
          : x_s5pol [Occ=Once] xs1_s5pom [Occ=Once] ->
              let {
                sat_s5pon [Occ=Once] :: [[a_a5j6F]]
                [LclId] =
                    [xs_s5poi xs1_s5pom] \u []
                        Data.OldList.prependToAll xs_s5poi xs1_s5pom; } in
              let {
                sat_s5poo [Occ=Once] :: [[a_a5j6F]]
                [LclId] =
                    CCCS :! [x_s5pol sat_s5pon];
              } in  Data.OldList.intercalate1 sat_s5poo;
        };

poly_go_r5kSf :: forall a. [[a]] -> [[a]]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    sat-only [] \r [ds_s5pop]
        case ds_s5pop of {
          [] -> [] [];
          : y_s5por [Occ=Once!] ys_s5pos [Occ=Once*] ->
              case y_s5por of {
                [] -> poly_go_r5kSf ys_s5pos;
                : _ [Occ=Dead] t_s5pov [Occ=Once] ->
                    let {
                      sat_s5pow [Occ=Once] :: [[a_a5j6n]]
                      [LclId] =
                          [ys_s5pos] \u [] poly_go_r5kSf ys_s5pos;
                    } in  : [t_s5pov sat_s5pow];
              };
        };

poly_go1_r5kSg :: forall a. [[a]] -> [a]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    sat-only [] \r [ds_s5pox]
        case ds_s5pox of {
          [] -> [] [];
          : y_s5poz [Occ=Once!] ys_s5poA [Occ=Once*] ->
              case y_s5poz of {
                [] -> poly_go1_r5kSg ys_s5poA;
                : h_s5poC [Occ=Once] _ [Occ=Dead] ->
                    let {
                      sat_s5poE [Occ=Once] :: [a_a5j6n]
                      [LclId] =
                          [ys_s5poA] \u [] poly_go1_r5kSg ys_s5poA;
                    } in  : [h_s5poC sat_s5poE];
              };
        };

Data.OldList.transpose [Occ=LoopBreaker]
  :: forall a. [[a]] -> [[a]]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s5poF]
        case ds_s5poF of {
          [] -> [] [];
          : ds1_s5poH [Occ=Once!] xss_s5poI ->
              case ds1_s5poH of {
                [] -> Data.OldList.transpose xss_s5poI;
                : x_s5poK [Occ=Once] xs_s5poL [Occ=Once] ->
                    let {
                      sat_s5poQ [Occ=Once] :: [[a_a5j6n]]
                      [LclId] =
                          [xss_s5poI xs_s5poL] \u []
                              let {
                                sat_s5poO [Occ=Once] :: [[a_a5j6n]]
                                [LclId] =
                                    [xss_s5poI] \u [] poly_go_r5kSf xss_s5poI; } in
                              let {
                                sat_s5poP [Occ=Once] :: [[a_a5j6n]]
                                [LclId] =
                                    CCCS :! [xs_s5poL sat_s5poO];
                              } in  Data.OldList.transpose sat_s5poP; } in
                    let {
                      sat_s5poM [Occ=Once] :: [a_a5j6n]
                      [LclId] =
                          [xss_s5poI] \u [] poly_go1_r5kSg xss_s5poI; } in
                    let {
                      sat_s5poN [Occ=Once] :: [a_a5j6n]
                      [LclId] =
                          CCCS :! [x_s5poK sat_s5poM];
                    } in  : [sat_s5poN sat_s5poQ];
              };
        };

Data.OldList.select [InlPrag=NOUSERINLINE[0]]
  :: forall a. (a -> GHC.Types.Bool) -> a -> ([a], [a]) -> ([a], [a])
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<C(S),1*C1(U)><L,U><L,U(1*U,1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s5poR w1_s5poS w2_s5poT]
        case w_s5poR w1_s5poS of {
          GHC.Types.False ->
              let {
                sat_s5pp2 [Occ=Once] :: [a_s5krI]
                [LclId] =
                    [w2_s5poT] \u []
                        case w2_s5poT of {
                          (,) _ [Occ=Dead] fs_s5pp1 [Occ=Once] -> fs_s5pp1;
                        }; } in
              let {
                sat_s5pp3 [Occ=Once] :: [a_s5krI]
                [LclId] =
                    CCCS :! [w1_s5poS sat_s5pp2]; } in
              let {
                sat_s5poY [Occ=Once] :: [a_s5krI]
                [LclId] =
                    [w2_s5poT] \u []
                        case w2_s5poT of {
                          (,) ts_s5poW [Occ=Once] _ [Occ=Dead] -> ts_s5poW;
                        };
              } in  (,) [sat_s5poY sat_s5pp3];
          GHC.Types.True ->
              let {
                sat_s5ppc [Occ=Once] :: [a_s5krI]
                [LclId] =
                    [w2_s5poT] \u []
                        case w2_s5poT of {
                          (,) _ [Occ=Dead] fs_s5ppb [Occ=Once] -> fs_s5ppb;
                        }; } in
              let {
                sat_s5pp7 [Occ=Once] :: [a_s5krI]
                [LclId] =
                    [w2_s5poT] \u []
                        case w2_s5poT of {
                          (,) ts_s5pp5 [Occ=Once] _ [Occ=Dead] -> ts_s5pp5;
                        }; } in
              let {
                sat_s5pp8 [Occ=Once] :: [a_s5krI]
                [LclId] =
                    CCCS :! [w1_s5poS sat_s5pp7];
              } in  (,) [sat_s5pp8 sat_s5ppc];
        };

Data.OldList.partition [InlPrag=INLINE (sat-args=2)]
  :: forall a. (a -> GHC.Types.Bool) -> [a] -> ([a], [a])
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,C(U)><S,1*U>m,
 Unf=OtherCon []] =
    [] \r [p_s5ppd xs_s5ppe]
        let {
          $wgo_s5ppf [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
            :: [a_a5j6i] -> (# [a_a5j6i], [a_a5j6i] #)
          [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
              sat-only [p_s5ppd $wgo_s5ppf] \r [w_s5ppg]
                  case w_s5ppg of {
                    [] -> (#,#) [GHC.Types.[] GHC.Types.[]];
                    : y_s5ppi ys_s5ppj [Occ=Once] ->
                        let {
                          w1_s5ppk [Dmd=<L,U(1*U,1*U)>] :: ([a_a5j6i], [a_a5j6i])
                          [LclId] =
                              [$wgo_s5ppf ys_s5ppj] \u []
                                  case $wgo_s5ppf ys_s5ppj of {
                                    (#,#) ww1_s5ppm [Occ=Once] ww2_s5ppn [Occ=Once] ->
                                        (,) [ww1_s5ppm ww2_s5ppn];
                                  };
                        } in 
                          case p_s5ppd y_s5ppi of {
                            GHC.Types.False ->
                                let {
                                  sat_s5ppw [Occ=Once] :: [a_a5j6i]
                                  [LclId] =
                                      [w1_s5ppk] \u []
                                          case w1_s5ppk of {
                                            (,) _ [Occ=Dead] fs_s5ppv [Occ=Once] -> fs_s5ppv;
                                          }; } in
                                let {
                                  sat_s5ppx [Occ=Once] :: [a_a5j6i]
                                  [LclId] =
                                      CCCS :! [y_s5ppi sat_s5ppw]; } in
                                let {
                                  sat_s5pps [Occ=Once] :: [a_a5j6i]
                                  [LclId] =
                                      [w1_s5ppk] \u []
                                          case w1_s5ppk of {
                                            (,) ts_s5ppq [Occ=Once] _ [Occ=Dead] -> ts_s5ppq;
                                          };
                                } in  (#,#) [sat_s5pps sat_s5ppx];
                            GHC.Types.True ->
                                let {
                                  sat_s5ppG [Occ=Once] :: [a_a5j6i]
                                  [LclId] =
                                      [w1_s5ppk] \u []
                                          case w1_s5ppk of {
                                            (,) _ [Occ=Dead] fs_s5ppF [Occ=Once] -> fs_s5ppF;
                                          }; } in
                                let {
                                  sat_s5ppB [Occ=Once] :: [a_a5j6i]
                                  [LclId] =
                                      [w1_s5ppk] \u []
                                          case w1_s5ppk of {
                                            (,) ts_s5ppz [Occ=Once] _ [Occ=Dead] -> ts_s5ppz;
                                          }; } in
                                let {
                                  sat_s5ppC [Occ=Once] :: [a_a5j6i]
                                  [LclId] =
                                      CCCS :! [y_s5ppi sat_s5ppB];
                                } in  (#,#) [sat_s5ppC sat_s5ppG];
                          };
                  };
        } in 
          case $wgo_s5ppf xs_s5ppe of {
            (#,#) ww1_s5ppI [Occ=Once] ww2_s5ppJ [Occ=Once] ->
                (,) [ww1_s5ppI ww2_s5ppJ];
          };

Data.OldList.pairWithNil [InlPrag=INLINE[0] (sat-args=1)]
  :: forall acc y. acc -> (acc, [y])
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>m, Unf=OtherCon []] =
    [] \r [x_s5ppK] (,) [x_s5ppK GHC.Types.[]];

Data.OldList.mapAccumLF [InlPrag=INLINE[0] (sat-args=1)]
  :: forall acc x y.
     (acc -> x -> (acc, y))
     -> x -> (acc -> (acc, [y])) -> acc -> (acc, [y])
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,1*C1(C1(U(1*U,1*U)))><L,U><L,1*C1(U(1*U,1*U))><L,U>m,
 Unf=OtherCon []] =
    [] \r [f_s5ppL x1_s5ppM r_s5ppN v_s5ppO]
        let {
          ds_s5ppP [Dmd=<L,U(1*U,1*U)>] :: (acc_a5j4Z, y_a5j51)
          [LclId] =
              [f_s5ppL x1_s5ppM v_s5ppO] \u [] f_s5ppL v_s5ppO x1_s5ppM; } in
        let {
          ds1_s5ppQ [Dmd=<L,U(1*U,1*U)>] :: (acc_a5j4Z, [y_a5j51])
          [LclId] =
              [r_s5ppN ds_s5ppP] \u []
                  let {
                    sat_s5ppU [Occ=Once] :: acc_a5j4Z
                    [LclId] =
                        [ds_s5ppP] \u []
                            case ds_s5ppP of {
                              (,) s'_s5ppS [Occ=Once] _ [Occ=Dead] -> s'_s5ppS;
                            };
                  } in  r_s5ppN sat_s5ppU; } in
        let {
          sat_s5pq6 [Occ=Once] :: [y_a5j51]
          [LclId] =
              [ds1_s5ppQ] \u []
                  case ds1_s5ppQ of {
                    (,) _ [Occ=Dead] ys_s5pq5 [Occ=Once] -> ys_s5pq5;
                  }; } in
        let {
          sat_s5pq2 [Occ=Once] :: y_a5j51
          [LclId] =
              [ds_s5ppP] \u []
                  case ds_s5ppP of {
                    (,) _ [Occ=Dead] y1_s5pq1 [Occ=Once] -> y1_s5pq1;
                  }; } in
        let {
          sat_s5pq7 [Occ=Once] :: [y_a5j51]
          [LclId] =
              CCCS :! [sat_s5pq2 sat_s5pq6]; } in
        let {
          sat_s5ppY [Occ=Once] :: acc_a5j4Z
          [LclId] =
              [ds1_s5ppQ] \u []
                  case ds1_s5ppQ of {
                    (,) s''_s5ppW [Occ=Once] _ [Occ=Dead] -> s''_s5ppW;
                  };
        } in  (,) [sat_s5ppY sat_s5pq7];

Data.OldList.$wmapAccumL [InlPrag=NOINLINE[1], Occ=LoopBreaker]
  :: forall acc x y.
     (acc -> x -> (acc, y)) -> acc -> [x] -> (# acc, [y] #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C1(U(1*U,1*U)))><L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_s5pq8 w1_s5pq9 w2_s5pqa]
        case w2_s5pqa of {
          [] -> (#,#) [w1_s5pq9 GHC.Types.[]];
          : x1_s5pqc [Occ=Once] xs_s5pqd [Occ=Once] ->
              let {
                ds_s5pqe [Dmd=<L,U(1*U,1*U)>] :: (acc_s5kry, y_s5krA)
                [LclId] =
                    [w_s5pq8 w1_s5pq9 x1_s5pqc] \u [] w_s5pq8 w1_s5pq9 x1_s5pqc; } in
              let {
                ds1_s5pqf [Dmd=<L,U(1*U,1*U)>] :: (acc_s5kry, [y_s5krA])
                [LclId] =
                    [w_s5pq8 xs_s5pqd ds_s5pqe] \u []
                        let {
                          sat_s5pqj [Occ=Once] :: acc_s5kry
                          [LclId] =
                              [ds_s5pqe] \u []
                                  case ds_s5pqe of {
                                    (,) s'_s5pqh [Occ=Once] _ [Occ=Dead] -> s'_s5pqh;
                                  };
                        } in 
                          case Data.OldList.$wmapAccumL w_s5pq8 sat_s5pqj xs_s5pqd of {
                            (#,#) ww1_s5pql [Occ=Once] ww2_s5pqm [Occ=Once] ->
                                (,) [ww1_s5pql ww2_s5pqm];
                          }; } in
              let {
                sat_s5pqy [Occ=Once] :: [y_s5krA]
                [LclId] =
                    [ds1_s5pqf] \u []
                        case ds1_s5pqf of {
                          (,) _ [Occ=Dead] ys_s5pqx [Occ=Once] -> ys_s5pqx;
                        }; } in
              let {
                sat_s5pqu [Occ=Once] :: y_s5krA
                [LclId] =
                    [ds_s5pqe] \u []
                        case ds_s5pqe of {
                          (,) _ [Occ=Dead] y1_s5pqt [Occ=Once] -> y1_s5pqt;
                        }; } in
              let {
                sat_s5pqz [Occ=Once] :: [y_s5krA]
                [LclId] =
                    CCCS :! [sat_s5pqu sat_s5pqy]; } in
              let {
                sat_s5pqq [Occ=Once] :: acc_s5kry
                [LclId] =
                    [ds1_s5pqf] \u []
                        case ds1_s5pqf of {
                          (,) s''_s5pqo [Occ=Once] _ [Occ=Dead] -> s''_s5pqo;
                        };
              } in  (#,#) [sat_s5pqq sat_s5pqz];
        };

Data.OldList.mapAccumL [InlPrag=NOUSERINLINE[0]]
  :: forall acc x y.
     (acc -> x -> (acc, y)) -> acc -> [x] -> (acc, [y])
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C1(U(1*U,1*U)))><L,U><S,1*U>m,
 Unf=OtherCon []] =
    [] \r [w_s5pqA w1_s5pqB w2_s5pqC]
        case Data.OldList.$wmapAccumL w_s5pqA w1_s5pqB w2_s5pqC of {
          (#,#) ww1_s5pqE [Occ=Once] ww2_s5pqF [Occ=Once] ->
              (,) [ww1_s5pqE ww2_s5pqF];
        };

Data.OldList.$wmapAccumR [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: forall acc x y.
     (acc -> x -> (acc, y)) -> acc -> [x] -> (# acc, [y] #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C1(U(1*U,1*U)))><L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_s5pqG w1_s5pqH w2_s5pqI]
        case w2_s5pqI of {
          [] -> (#,#) [w1_s5pqH GHC.Types.[]];
          : x1_s5pqK [Occ=Once] xs_s5pqL [Occ=Once] ->
              let {
                ds_s5pqM [Dmd=<L,U(1*U,1*U)>] :: (acc_s5kro, [y_s5krq])
                [LclId] =
                    [w_s5pqG w1_s5pqH xs_s5pqL] \u []
                        case Data.OldList.$wmapAccumR w_s5pqG w1_s5pqH xs_s5pqL of {
                          (#,#) ww1_s5pqO [Occ=Once] ww2_s5pqP [Occ=Once] ->
                              (,) [ww1_s5pqO ww2_s5pqP];
                        }; } in
              let {
                ds1_s5pqQ [Dmd=<L,U(1*U,1*U)>] :: (acc_s5kro, y_s5krq)
                [LclId] =
                    [w_s5pqG x1_s5pqK ds_s5pqM] \u []
                        let {
                          sat_s5pqU [Occ=Once] :: acc_s5kro
                          [LclId] =
                              [ds_s5pqM] \u []
                                  case ds_s5pqM of {
                                    (,) s'_s5pqS [Occ=Once] _ [Occ=Dead] -> s'_s5pqS;
                                  };
                        } in  w_s5pqG sat_s5pqU x1_s5pqK; } in
              let {
                sat_s5pr6 [Occ=Once] :: [y_s5krq]
                [LclId] =
                    [ds_s5pqM] \u []
                        case ds_s5pqM of {
                          (,) _ [Occ=Dead] ys_s5pr5 [Occ=Once] -> ys_s5pr5;
                        }; } in
              let {
                sat_s5pr2 [Occ=Once] :: y_s5krq
                [LclId] =
                    [ds1_s5pqQ] \u []
                        case ds1_s5pqQ of {
                          (,) _ [Occ=Dead] y1_s5pr1 [Occ=Once] -> y1_s5pr1;
                        }; } in
              let {
                sat_s5pr7 [Occ=Once] :: [y_s5krq]
                [LclId] =
                    CCCS :! [sat_s5pr2 sat_s5pr6]; } in
              let {
                sat_s5pqY [Occ=Once] :: acc_s5kro
                [LclId] =
                    [ds1_s5pqQ] \u []
                        case ds1_s5pqQ of {
                          (,) s''_s5pqW [Occ=Once] _ [Occ=Dead] -> s''_s5pqW;
                        };
              } in  (#,#) [sat_s5pqY sat_s5pr7];
        };

Data.OldList.mapAccumR [InlPrag=NOUSERINLINE[0]]
  :: forall acc x y.
     (acc -> x -> (acc, y)) -> acc -> [x] -> (acc, [y])
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C1(U(1*U,1*U)))><L,U><S,1*U>m,
 Unf=OtherCon []] =
    [] \r [w_s5pr8 w1_s5pr9 w2_s5pra]
        case Data.OldList.$wmapAccumR w_s5pr8 w1_s5pr9 w2_s5pra of {
          (#,#) ww1_s5prc [Occ=Once] ww2_s5prd [Occ=Once] ->
              (,) [ww1_s5prc ww2_s5prd];
        };

Data.OldList.insertBy [InlPrag=NOUSERINLINE[0]]
  :: forall a. (a -> a -> GHC.Types.Ordering) -> a -> [a] -> [a]
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><L,U><S,1*U>m2,
 Unf=OtherCon []] =
    [] \r [w_s5pre w1_s5prf w2_s5prg]
        case Data.OldList.$winsertBy w_s5pre w1_s5prf w2_s5prg of {
          (#,#) ww1_s5pri [Occ=Once] ww2_s5prj [Occ=Once] ->
              : [ww1_s5pri ww2_s5prj];
        };
Data.OldList.$winsertBy [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: forall a.
     (a -> a -> GHC.Types.Ordering) -> a -> [a] -> (# a, [a] #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_s5prk w1_s5prl w2_s5prm]
        case w2_s5prm of wild_s5prn {
          [] -> (#,#) [w1_s5prl GHC.Types.[]];
          : y_s5pro ys'_s5prp [Occ=Once] ->
              case w_s5prk w1_s5prl y_s5pro of {
                __DEFAULT -> (#,#) [w1_s5prl wild_s5prn];
                GHC.Types.GT ->
                    let {
                      sat_s5prr [Occ=Once] :: [a_s5krg]
                      [LclId] =
                          [w_s5prk w1_s5prl ys'_s5prp] \u []
                              Data.OldList.insertBy w_s5prk w1_s5prl ys'_s5prp;
                    } in  (#,#) [y_s5pro sat_s5prr];
              };
        };

Data.OldList.insert
  :: forall a. GHC.Classes.Ord a => a -> [a] -> [a]
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*U(A,1*C(C1(U)),A,A,A,A,A,A)><L,U><S,1*U>m2,
 Unf=OtherCon []] =
    [] \r [$dOrd_s5prs e_s5prt ls_s5pru]
        let {
          sat_s5prv [Occ=Once, Dmd=<L,C(C1(U))>]
            :: a_a5j4k -> a_a5j4k -> GHC.Types.Ordering
          [LclId] =
              [$dOrd_s5prs] \u [] GHC.Classes.compare $dOrd_s5prs;
        } in 
          case Data.OldList.$winsertBy sat_s5prv e_s5prt ls_s5pru of {
            (#,#) ww1_s5prx [Occ=Once] ww2_s5pry [Occ=Once] ->
                : [ww1_s5prx ww2_s5pry];
          };

lvl_r5kSh :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "List.maximumBy: empty list"#;

Data.OldList.maximumBy1 :: forall a. a
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl_r5kSh of sat_s5prz {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_s5prz;
        };

Data.OldList.maximumBy
  :: forall a. (a -> a -> GHC.Types.Ordering) -> [a] -> a
[GblId, Arity=2, Str=<L,C(C1(U))><S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s5prA ds1_s5prB]
        case ds1_s5prB of {
          [] -> Data.OldList.maximumBy1;
          : ipv_s5prD [Occ=Once] ipv1_s5prE [Occ=Once] ->
              let-no-escape {
                go_s5prF [Occ=LoopBreakerT[2]] :: [a_a5j3S] -> a_a5j3S -> a_a5j3S
                [LclId[JoinId(2)], Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
                    sat-only [ds_s5prA go_s5prF] \r [ds2_s5prG eta_s5prH]
                        case ds2_s5prG of {
                          [] -> eta_s5prH;
                          : y_s5prJ ys_s5prK [Occ=Once] ->
                              let {
                                sat_s5prM [Occ=Once] :: a_a5j3S
                                [LclId] =
                                    [ds_s5prA eta_s5prH y_s5prJ] \u []
                                        case ds_s5prA eta_s5prH y_s5prJ of {
                                          __DEFAULT -> y_s5prJ;
                                          GHC.Types.GT -> eta_s5prH;
                                        };
                              } in  go_s5prF ys_s5prK sat_s5prM;
                        };
              } in  go_s5prF ipv1_s5prE ipv_s5prD;
        };

lvl1_r5kSi :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "List.minimumBy: empty list"#;

Data.OldList.minimumBy1 :: forall a. a
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl1_r5kSi of sat_s5prN {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_s5prN;
        };

Data.OldList.minimumBy
  :: forall a. (a -> a -> GHC.Types.Ordering) -> [a] -> a
[GblId, Arity=2, Str=<L,C(C1(U))><S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s5prO ds1_s5prP]
        case ds1_s5prP of {
          [] -> Data.OldList.minimumBy1;
          : ipv_s5prR [Occ=Once] ipv1_s5prS [Occ=Once] ->
              let-no-escape {
                go_s5prT [Occ=LoopBreakerT[2]] :: [a_a5j3v] -> a_a5j3v -> a_a5j3v
                [LclId[JoinId(2)], Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
                    sat-only [ds_s5prO go_s5prT] \r [ds2_s5prU eta_s5prV]
                        case ds2_s5prU of {
                          [] -> eta_s5prV;
                          : y_s5prX ys_s5prY [Occ=Once] ->
                              let {
                                sat_s5ps0 [Occ=Once] :: a_a5j3v
                                [LclId] =
                                    [ds_s5prO eta_s5prV y_s5prX] \u []
                                        case ds_s5prO eta_s5prV y_s5prX of {
                                          __DEFAULT -> eta_s5prV;
                                          GHC.Types.GT -> y_s5prX;
                                        };
                              } in  go_s5prT ys_s5prY sat_s5ps0;
                        };
              } in  go_s5prT ipv1_s5prS ipv_s5prR;
        };

sat_s5ps1 :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [1#];

sat_s5ps2 :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_s5ps1 GHC.Types.[]];

Data.OldList.genericLength2 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_s5ps2;

Data.OldList.genericLength1 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True GHC.Types.[];

Data.OldList.strictGenericLength
  :: forall i b. GHC.Num.Num i => [b] -> i
[GblId,
 Arity=2,
 Str=<L,U(C(C1(U)),A,A,A,A,A,C(U))><S,1*U>,
 Unf=OtherCon []] =
    [] \r [$dNum_s5ps3 l_s5ps4]
        let {
          lvl12_s5ps5 [Occ=OnceL] :: i_a5j2k
          [LclId] =
              [$dNum_s5ps3] \u []
                  GHC.Num.fromInteger $dNum_s5ps3 Data.OldList.genericLength2; } in
        let {
          sat_s5psd [Occ=Once] :: i_a5j2k
          [LclId] =
              [$dNum_s5ps3] \u []
                  GHC.Num.fromInteger $dNum_s5ps3 Data.OldList.genericLength1;
        } in 
          let-no-escape {
            gl_s5ps6 [Occ=LoopBreakerT[2]] :: [b_a5j2l] -> i_a5j2k -> i_a5j2k
            [LclId[JoinId(2)], Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
                sat-only [$dNum_s5ps3 lvl12_s5ps5 gl_s5ps6] \r [ds_s5ps7 a_s5ps8]
                    case ds_s5ps7 of {
                      [] -> a_s5ps8;
                      : _ [Occ=Dead] xs_s5psb [Occ=Once] ->
                          case GHC.Num.+ $dNum_s5ps3 a_s5ps8 lvl12_s5ps5 of a'_s5psc {
                            __DEFAULT -> gl_s5ps6 xs_s5psb a'_s5psc;
                          };
                    };
          } in  gl_s5ps6 l_s5ps4 sat_s5psd;

Data.OldList.genericLength [InlPrag=NOINLINE[1], Occ=LoopBreaker]
  :: forall i a. GHC.Num.Num i => [a] -> i
[GblId,
 Arity=2,
 Str=<S,U(C(C1(U)),A,A,A,A,A,C(U))><S,1*U>,
 Unf=OtherCon []] =
    [] \r [$dNum_s5pse ds_s5psf]
        case ds_s5psf of {
          [] -> GHC.Num.fromInteger $dNum_s5pse Data.OldList.genericLength1;
          : _ [Occ=Dead] l_s5psi [Occ=Once] ->
              let {
                sat_s5psk [Occ=Once] :: i_a5j3h
                [LclId] =
                    [$dNum_s5pse l_s5psi] \u []
                        Data.OldList.genericLength $dNum_s5pse l_s5psi; } in
              let {
                sat_s5psj [Occ=Once] :: i_a5j3h
                [LclId] =
                    [$dNum_s5pse] \u []
                        GHC.Num.fromInteger $dNum_s5pse Data.OldList.genericLength2;
              } in  GHC.Num.+ $dNum_s5pse sat_s5psj sat_s5psk;
        };

Data.OldList.genericTake [Occ=LoopBreaker]
  :: forall i a. GHC.Real.Integral i => i -> [a] -> [a]
[GblId,
 Arity=3,
 Str=<S(S(LS(LLLC(C(S))LLLL)L)LLLLLLLL),U(U(U(A,C(C1(U)),A,A,A,A,C(U)),U(A,A,A,C(C1(U)),A,A,A,A),A),A,A,A,A,A,A,A,A)><L,U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [$dIntegral_s5psl eta_s5psm eta1_s5psn]
        case
            GHC.Real.$p1Integral $dIntegral_s5psl
        of
        $dReal_s5pso [Dmd=<S(LS(LLLC(C(S))LLLL)L),U(1*U(A,1*C1(C1(U)),A,A,A,A,C(U)),1*U(A,A,A,1*C1(C1(U)),A,A,A,A),A)>]
        { __DEFAULT ->
              let {
                $dNum_s5psp [Dmd=<L,U(A,1*C1(C1(U)),A,A,A,A,C(U))>]
                  :: GHC.Num.Num i_a5j1U
                [LclId] =
                    [$dReal_s5pso] \u [] GHC.Real.$p1Real $dReal_s5pso; } in
              let {
                sat_s5psr [Occ=Once] :: i_a5j1U
                [LclId] =
                    [$dNum_s5psp] \u []
                        GHC.Num.fromInteger $dNum_s5psp Data.OldList.genericLength1;
              } in 
                case GHC.Real.$p2Real $dReal_s5pso of sat_s5psq {
                  __DEFAULT ->
                      case GHC.Classes.<= sat_s5psq eta_s5psm sat_s5psr of {
                        GHC.Types.False ->
                            case eta1_s5psn of {
                              [] -> [] [];
                              : x_s5psu [Occ=Once] xs_s5psv [Occ=Once] ->
                                  let {
                                    sat_s5psy [Occ=Once] :: [a_a5j1V]
                                    [LclId] =
                                        [$dIntegral_s5psl eta_s5psm $dNum_s5psp xs_s5psv] \u []
                                            let {
                                              sat_s5psx [Occ=Once] :: i_a5j1U
                                              [LclId] =
                                                  [eta_s5psm $dNum_s5psp] \u []
                                                      let {
                                                        sat_s5psw [Occ=Once] :: i_a5j1U
                                                        [LclId] =
                                                            [$dNum_s5psp] \u []
                                                                GHC.Num.fromInteger
                                                                    $dNum_s5psp
                                                                    Data.OldList.genericLength2;
                                                      } in 
                                                        GHC.Num.- $dNum_s5psp eta_s5psm sat_s5psw;
                                            } in 
                                              Data.OldList.genericTake
                                                  $dIntegral_s5psl sat_s5psx xs_s5psv;
                                  } in  : [x_s5psu sat_s5psy];
                            };
                        GHC.Types.True -> [] [];
                      };
                };
        };

Data.OldList.genericReplicate
  :: forall i a. GHC.Real.Integral i => i -> a -> [a]
[GblId,
 Arity=3,
 Str=<S(S(LS(LLLC(C(S))LLLL)L)LLLLLLLL),U(U(U(A,C(C1(U)),A,A,A,A,C(U)),U(A,A,A,C(C1(U)),A,A,A,A),A),A,A,A,A,A,A,A,A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dIntegral_s5psz n_s5psA x_s5psB]
        let {
          sat_s5psC [Occ=Once, Dmd=<L,1*U>] :: [a_a5j2c]
          [LclId] =
              [x_s5psB] \s [] GHC.List.repeat x_s5psB;
        } in  Data.OldList.genericTake $dIntegral_s5psz n_s5psA sat_s5psC;

Data.OldList.genericDrop [Occ=LoopBreaker]
  :: forall i a. GHC.Real.Integral i => i -> [a] -> [a]
[GblId,
 Arity=3,
 Str=<S(S(LS(LLLC(C(S))LLLL)L)LLLLLLLL),U(U(U(A,C(C1(U)),A,A,A,A,C(U)),U(A,A,A,C(C1(U)),A,A,A,A),A),A,A,A,A,A,A,A,A)><L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [$dIntegral_s5psD eta_s5psE eta1_s5psF]
        case
            GHC.Real.$p1Integral $dIntegral_s5psD
        of
        $dReal_s5psG [Dmd=<S(LS(LLLC(C(S))LLLL)L),U(1*U(A,1*C1(C1(U)),A,A,A,A,C(U)),1*U(A,A,A,1*C1(C1(U)),A,A,A,A),A)>]
        { __DEFAULT ->
              let {
                $dNum_s5psH [Dmd=<L,U(A,1*C1(C1(U)),A,A,A,A,C(U))>]
                  :: GHC.Num.Num i_a5j1E
                [LclId] =
                    [$dReal_s5psG] \u [] GHC.Real.$p1Real $dReal_s5psG; } in
              let {
                sat_s5psJ [Occ=Once] :: i_a5j1E
                [LclId] =
                    [$dNum_s5psH] \u []
                        GHC.Num.fromInteger $dNum_s5psH Data.OldList.genericLength1;
              } in 
                case GHC.Real.$p2Real $dReal_s5psG of sat_s5psI {
                  __DEFAULT ->
                      case GHC.Classes.<= sat_s5psI eta_s5psE sat_s5psJ of {
                        GHC.Types.False ->
                            case eta1_s5psF of {
                              [] -> [] [];
                              : _ [Occ=Dead] xs_s5psN [Occ=Once] ->
                                  let {
                                    sat_s5psP [Occ=Once] :: i_a5j1E
                                    [LclId] =
                                        [eta_s5psE $dNum_s5psH] \u []
                                            let {
                                              sat_s5psO [Occ=Once] :: i_a5j1E
                                              [LclId] =
                                                  [$dNum_s5psH] \u []
                                                      GHC.Num.fromInteger
                                                          $dNum_s5psH Data.OldList.genericLength2;
                                            } in  GHC.Num.- $dNum_s5psH eta_s5psE sat_s5psO;
                                  } in 
                                    Data.OldList.genericDrop $dIntegral_s5psD sat_s5psP xs_s5psN;
                            };
                        GHC.Types.True -> eta1_s5psF;
                      };
                };
        };

Data.OldList.$wgenericSplitAt [InlPrag=NOUSERINLINE[0],
                               Occ=LoopBreaker]
  :: forall i a. GHC.Real.Integral i => i -> [a] -> (# [a], [a] #)
[GblId,
 Arity=3,
 Str=<S(S(LS(LLLC(C(S))LLLL)L)LLLLLLLL),U(U(U(A,C(C1(U)),A,A,A,A,C(U)),U(A,A,A,C(C1(U)),A,A,A,A),A),A,A,A,A,A,A,A,A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [w_s5psQ w1_s5psR w2_s5psS]
        case
            GHC.Real.$p1Integral w_s5psQ
        of
        $dReal_s5psT [Dmd=<S(LS(LLLC(C(S))LLLL)L),U(1*U(A,1*C1(C1(U)),A,A,A,A,C(U)),1*U(A,A,A,1*C1(C1(U)),A,A,A,A),A)>]
        { __DEFAULT ->
              let {
                $dNum_s5psU [Dmd=<L,U(A,1*C1(C1(U)),A,A,A,A,C(U))>]
                  :: GHC.Num.Num i_s5kqD
                [LclId] =
                    [$dReal_s5psT] \u [] GHC.Real.$p1Real $dReal_s5psT; } in
              let {
                sat_s5psW [Occ=Once] :: i_s5kqD
                [LclId] =
                    [$dNum_s5psU] \u []
                        GHC.Num.fromInteger $dNum_s5psU Data.OldList.genericLength1;
              } in 
                case GHC.Real.$p2Real $dReal_s5psT of sat_s5psV {
                  __DEFAULT ->
                      case GHC.Classes.<= sat_s5psV w1_s5psR sat_s5psW of {
                        GHC.Types.False ->
                            case w2_s5psS of {
                              [] -> (#,#) [GHC.Types.[] GHC.Types.[]];
                              : x_s5psZ [Occ=Once] xs_s5pt0 [Occ=Once] ->
                                  let {
                                    ds_s5pt1 [Dmd=<L,U(1*U,1*U)>] :: ([a_s5kqE], [a_s5kqE])
                                    [LclId] =
                                        [w_s5psQ w1_s5psR $dNum_s5psU xs_s5pt0] \u []
                                            let {
                                              sat_s5pt3 [Occ=Once] :: i_s5kqD
                                              [LclId] =
                                                  [w1_s5psR $dNum_s5psU] \u []
                                                      let {
                                                        sat_s5pt2 [Occ=Once] :: i_s5kqD
                                                        [LclId] =
                                                            [$dNum_s5psU] \u []
                                                                GHC.Num.fromInteger
                                                                    $dNum_s5psU
                                                                    Data.OldList.genericLength2;
                                                      } in 
                                                        GHC.Num.- $dNum_s5psU w1_s5psR sat_s5pt2;
                                            } in 
                                              case
                                                  Data.OldList.$wgenericSplitAt
                                                      w_s5psQ sat_s5pt3 xs_s5pt0
                                              of
                                              { (#,#) ww1_s5pt5 [Occ=Once] ww2_s5pt6 [Occ=Once] ->
                                                    (,) [ww1_s5pt5 ww2_s5pt6];
                                              }; } in
                                  let {
                                    sat_s5ptf [Occ=Once] :: [a_s5kqE]
                                    [LclId] =
                                        [ds_s5pt1] \u []
                                            case ds_s5pt1 of {
                                              (,) _ [Occ=Dead] xs''_s5pte [Occ=Once] -> xs''_s5pte;
                                            }; } in
                                  let {
                                    sat_s5pta [Occ=Once] :: [a_s5kqE]
                                    [LclId] =
                                        [ds_s5pt1] \u []
                                            case ds_s5pt1 of {
                                              (,) xs'_s5pt8 [Occ=Once] _ [Occ=Dead] -> xs'_s5pt8;
                                            }; } in
                                  let {
                                    sat_s5ptb [Occ=Once] :: [a_s5kqE]
                                    [LclId] =
                                        CCCS :! [x_s5psZ sat_s5pta];
                                  } in  (#,#) [sat_s5ptb sat_s5ptf];
                            };
                        GHC.Types.True -> (#,#) [GHC.Types.[] w2_s5psS];
                      };
                };
        };

Data.OldList.genericSplitAt [InlPrag=NOUSERINLINE[0]]
  :: forall i a. GHC.Real.Integral i => i -> [a] -> ([a], [a])
[GblId,
 Arity=3,
 Str=<S(S(LS(LLLC(C(S))LLLL)L)LLLLLLLL),U(U(U(A,C(C1(U)),A,A,A,A,C(U)),U(A,A,A,C(C1(U)),A,A,A,A),A),A,A,A,A,A,A,A,A)><L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [w_s5ptg w1_s5pth w2_s5pti]
        case Data.OldList.$wgenericSplitAt w_s5ptg w1_s5pth w2_s5pti of {
          (#,#) ww1_s5ptk [Occ=Once] ww2_s5ptl [Occ=Once] ->
              (,) [ww1_s5ptk ww2_s5ptl];
        };

lvl2_r5kSj :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "List.genericIndex: negative argument."#;

lvl3_r5kSk :: forall a. a
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl2_r5kSj of sat_s5ptm {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_s5ptm;
        };

lvl4_r5kSl :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "List.genericIndex: index too large."#;

lvl5_r5kSm :: forall a. a
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl4_r5kSl of sat_s5ptn {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_s5ptn;
        };

Data.OldList.genericIndex [Occ=LoopBreaker]
  :: forall i a. GHC.Real.Integral i => [a] -> i -> a
[GblId,
 Arity=3,
 Str=<S(S(LS(S(C(C(S))L)LLLLLLL)L)LLLLLLLL),U(U(U(A,C(C1(U)),A,A,A,A,C(U)),U(U(C(C1(U)),A),A,A,A,C(C1(U)),A,A,A),A),A,A,A,A,A,A,A,A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dIntegral_s5pto eta_s5ptp eta1_s5ptq]
        case eta_s5ptp of {
          [] -> lvl5_r5kSm;
          : x_s5pts [Occ=Once] ds_s5ptt [Occ=Once] ->
              case
                  GHC.Real.$p1Integral $dIntegral_s5pto
              of
              $dReal_s5ptu [Dmd=<S(LS(S(C(C(S))L)LLLLLLL)L),U(1*U(A,1*C1(C1(U)),A,A,A,A,C(U)),1*U(1*U(1*C1(C1(U)),A),A,A,A,1*C1(C1(U)),A,A,A),A)>]
              { __DEFAULT ->
                    let {
                      $dNum_s5ptv [Dmd=<L,U(A,1*C1(C1(U)),A,A,A,A,C(U))>]
                        :: GHC.Num.Num i_a5j0L
                      [LclId] =
                          [$dReal_s5ptu] \u [] GHC.Real.$p1Real $dReal_s5ptu;
                    } in 
                      case
                          GHC.Real.$p2Real $dReal_s5ptu
                      of
                      $dOrd_s5ptw [Dmd=<S(S(C(C(S))L)LLLLLLL),U(1*U(1*C1(C1(U)),A),A,A,A,1*C1(C1(U)),A,A,A)>]
                      { __DEFAULT ->
                            let {
                              sat_s5pty [Occ=Once] :: i_a5j0L
                              [LclId] =
                                  [$dNum_s5ptv] \u []
                                      GHC.Num.fromInteger $dNum_s5ptv Data.OldList.genericLength1;
                            } in 
                              case GHC.Classes.$p1Ord $dOrd_s5ptw of sat_s5ptx {
                                __DEFAULT ->
                                    case GHC.Classes.== sat_s5ptx eta1_s5ptq sat_s5pty of {
                                      GHC.Types.False ->
                                          let {
                                            sat_s5ptA [Occ=Once] :: i_a5j0L
                                            [LclId] =
                                                [$dNum_s5ptv] \u []
                                                    GHC.Num.fromInteger
                                                        $dNum_s5ptv Data.OldList.genericLength1;
                                          } in 
                                            case GHC.Classes.> $dOrd_s5ptw eta1_s5ptq sat_s5ptA of {
                                              GHC.Types.False -> lvl3_r5kSk;
                                              GHC.Types.True ->
                                                  let {
                                                    sat_s5ptD [Occ=Once] :: i_a5j0L
                                                    [LclId] =
                                                        [eta1_s5ptq $dNum_s5ptv] \u []
                                                            let {
                                                              sat_s5ptC [Occ=Once] :: i_a5j0L
                                                              [LclId] =
                                                                  [$dNum_s5ptv] \u []
                                                                      GHC.Num.fromInteger
                                                                          $dNum_s5ptv
                                                                          Data.OldList.genericLength2;
                                                            } in 
                                                              GHC.Num.-
                                                                  $dNum_s5ptv eta1_s5ptq sat_s5ptC;
                                                  } in 
                                                    Data.OldList.genericIndex
                                                        $dIntegral_s5pto ds_s5ptt sat_s5ptD;
                                            };
                                      GHC.Types.True -> x_s5pts;
                                    };
                              };
                      };
              };
        };

Data.OldList.zipWith4 [Occ=LoopBreaker]
  :: forall a b c d e.
     (a -> b -> c -> d -> e) -> [a] -> [b] -> [c] -> [d] -> [e]
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,C(C1(C1(C1(U))))><S,1*U><L,1*U><L,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [z_s5ptE ds_s5ptF ds1_s5ptG ds2_s5ptH ds3_s5ptI]
        case ds_s5ptF of {
          [] -> [] [];
          : a1_s5ptK [Occ=Once] as_s5ptL [Occ=Once] ->
              case ds1_s5ptG of {
                [] -> [] [];
                : b1_s5ptN [Occ=Once] bs_s5ptO [Occ=Once] ->
                    case ds2_s5ptH of {
                      [] -> [] [];
                      : c1_s5ptQ [Occ=Once] cs_s5ptR [Occ=Once] ->
                          case ds3_s5ptI of {
                            [] -> [] [];
                            : d1_s5ptT [Occ=Once] ds4_s5ptU [Occ=Once] ->
                                let {
                                  sat_s5ptW [Occ=Once] :: [e_a5iZr]
                                  [LclId] =
                                      [z_s5ptE as_s5ptL bs_s5ptO cs_s5ptR ds4_s5ptU] \u []
                                          Data.OldList.zipWith4
                                              z_s5ptE as_s5ptL bs_s5ptO cs_s5ptR ds4_s5ptU; } in
                                let {
                                  sat_s5ptV [Occ=Once] :: e_a5iZr
                                  [LclId] =
                                      [z_s5ptE a1_s5ptK b1_s5ptN c1_s5ptQ d1_s5ptT] \u []
                                          z_s5ptE a1_s5ptK b1_s5ptN c1_s5ptQ d1_s5ptT;
                                } in  : [sat_s5ptV sat_s5ptW];
                          };
                    };
              };
        };

Data.OldList.zip4
  :: forall a b c d. [a] -> [b] -> [c] -> [d] -> [(a, b, c, d)]
[GblId, Arity=4, Caf=NoCafRefs, Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        Data.OldList.zipWith4 GHC.Tuple.(,,,) eta_B4 eta_B3 eta_B2 eta_B1;

Data.OldList.zipWith5 [Occ=LoopBreaker]
  :: forall a b c d e f.
     (a -> b -> c -> d -> e -> f)
     -> [a] -> [b] -> [c] -> [d] -> [e] -> [f]
[GblId,
 Arity=6,
 Caf=NoCafRefs,
 Str=<L,C(C1(C1(C1(C1(U)))))><S,1*U><L,1*U><L,1*U><L,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [z_s5ptX ds_s5ptY ds1_s5ptZ ds2_s5pu0 ds3_s5pu1 ds4_s5pu2]
        case ds_s5ptY of {
          [] -> [] [];
          : a1_s5pu4 [Occ=Once] as_s5pu5 [Occ=Once] ->
              case ds1_s5ptZ of {
                [] -> [] [];
                : b1_s5pu7 [Occ=Once] bs_s5pu8 [Occ=Once] ->
                    case ds2_s5pu0 of {
                      [] -> [] [];
                      : c1_s5pua [Occ=Once] cs_s5pub [Occ=Once] ->
                          case ds3_s5pu1 of {
                            [] -> [] [];
                            : d1_s5pud [Occ=Once] ds5_s5pue [Occ=Once] ->
                                case ds4_s5pu2 of {
                                  [] -> [] [];
                                  : e1_s5pug [Occ=Once] es_s5puh [Occ=Once] ->
                                      let {
                                        sat_s5puj [Occ=Once] :: [f_a5iZe]
                                        [LclId] =
                                            [z_s5ptX
                                             as_s5pu5
                                             bs_s5pu8
                                             cs_s5pub
                                             ds5_s5pue
                                             es_s5puh] \u []
                                                Data.OldList.zipWith5
                                                    z_s5ptX
                                                    as_s5pu5
                                                    bs_s5pu8
                                                    cs_s5pub
                                                    ds5_s5pue
                                                    es_s5puh; } in
                                      let {
                                        sat_s5pui [Occ=Once] :: f_a5iZe
                                        [LclId] =
                                            [z_s5ptX
                                             a1_s5pu4
                                             b1_s5pu7
                                             c1_s5pua
                                             d1_s5pud
                                             e1_s5pug] \u []
                                                z_s5ptX
                                                    a1_s5pu4 b1_s5pu7 c1_s5pua d1_s5pud e1_s5pug;
                                      } in  : [sat_s5pui sat_s5puj];
                                };
                          };
                    };
              };
        };

Data.OldList.zip5
  :: forall a b c d e.
     [a] -> [b] -> [c] -> [d] -> [e] -> [(a, b, c, d, e)]
[GblId, Arity=5, Caf=NoCafRefs, Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        Data.OldList.zipWith5
            GHC.Tuple.(,,,,) eta_B5 eta_B4 eta_B3 eta_B2 eta_B1;

Data.OldList.zipWith6 [Occ=LoopBreaker]
  :: forall a b c d e f g.
     (a -> b -> c -> d -> e -> f -> g)
     -> [a] -> [b] -> [c] -> [d] -> [e] -> [f] -> [g]
[GblId,
 Arity=7,
 Caf=NoCafRefs,
 Str=<L,C(C1(C1(C1(C1(C1(U))))))><S,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [z_s5puk
           ds_s5pul
           ds1_s5pum
           ds2_s5pun
           ds3_s5puo
           ds4_s5pup
           ds5_s5puq]
        case ds_s5pul of {
          [] -> [] [];
          : a1_s5pus [Occ=Once] as_s5put [Occ=Once] ->
              case ds1_s5pum of {
                [] -> [] [];
                : b1_s5puv [Occ=Once] bs_s5puw [Occ=Once] ->
                    case ds2_s5pun of {
                      [] -> [] [];
                      : c1_s5puy [Occ=Once] cs_s5puz [Occ=Once] ->
                          case ds3_s5puo of {
                            [] -> [] [];
                            : d1_s5puB [Occ=Once] ds6_s5puC [Occ=Once] ->
                                case ds4_s5pup of {
                                  [] -> [] [];
                                  : e1_s5puE [Occ=Once] es_s5puF [Occ=Once] ->
                                      case ds5_s5puq of {
                                        [] -> [] [];
                                        : f1_s5puH [Occ=Once] fs_s5puI [Occ=Once] ->
                                            let {
                                              sat_s5puK [Occ=Once] :: [g_a5iYZ]
                                              [LclId] =
                                                  [z_s5puk
                                                   as_s5put
                                                   bs_s5puw
                                                   cs_s5puz
                                                   ds6_s5puC
                                                   es_s5puF
                                                   fs_s5puI] \u []
                                                      Data.OldList.zipWith6
                                                          z_s5puk
                                                          as_s5put
                                                          bs_s5puw
                                                          cs_s5puz
                                                          ds6_s5puC
                                                          es_s5puF
                                                          fs_s5puI; } in
                                            let {
                                              sat_s5puJ [Occ=Once] :: g_a5iYZ
                                              [LclId] =
                                                  [z_s5puk
                                                   a1_s5pus
                                                   b1_s5puv
                                                   c1_s5puy
                                                   d1_s5puB
                                                   e1_s5puE
                                                   f1_s5puH] \u []
                                                      z_s5puk
                                                          a1_s5pus
                                                          b1_s5puv
                                                          c1_s5puy
                                                          d1_s5puB
                                                          e1_s5puE
                                                          f1_s5puH;
                                            } in  : [sat_s5puJ sat_s5puK];
                                      };
                                };
                          };
                    };
              };
        };

Data.OldList.zip6
  :: forall a b c d e f.
     [a] -> [b] -> [c] -> [d] -> [e] -> [f] -> [(a, b, c, d, e, f)]
[GblId, Arity=6, Caf=NoCafRefs, Unf=OtherCon []] =
    [] \r [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        Data.OldList.zipWith6
            GHC.Tuple.(,,,,,) eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1;

Data.OldList.zipWith7 [Occ=LoopBreaker]
  :: forall a b c d e f g h.
     (a -> b -> c -> d -> e -> f -> g -> h)
     -> [a] -> [b] -> [c] -> [d] -> [e] -> [f] -> [g] -> [h]
[GblId,
 Arity=8,
 Caf=NoCafRefs,
 Str=<L,C(C1(C1(C1(C1(C1(C1(U)))))))><S,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [z_s5puL
           ds_s5puM
           ds1_s5puN
           ds2_s5puO
           ds3_s5puP
           ds4_s5puQ
           ds5_s5puR
           ds6_s5puS]
        case ds_s5puM of {
          [] -> [] [];
          : a1_s5puU [Occ=Once] as_s5puV [Occ=Once] ->
              case ds1_s5puN of {
                [] -> [] [];
                : b1_s5puX [Occ=Once] bs_s5puY [Occ=Once] ->
                    case ds2_s5puO of {
                      [] -> [] [];
                      : c1_s5pv0 [Occ=Once] cs_s5pv1 [Occ=Once] ->
                          case ds3_s5puP of {
                            [] -> [] [];
                            : d1_s5pv3 [Occ=Once] ds7_s5pv4 [Occ=Once] ->
                                case ds4_s5puQ of {
                                  [] -> [] [];
                                  : e1_s5pv6 [Occ=Once] es_s5pv7 [Occ=Once] ->
                                      case ds5_s5puR of {
                                        [] -> [] [];
                                        : f1_s5pv9 [Occ=Once] fs_s5pva [Occ=Once] ->
                                            case ds6_s5puS of {
                                              [] -> [] [];
                                              : g1_s5pvc [Occ=Once] gs_s5pvd [Occ=Once] ->
                                                  let {
                                                    sat_s5pvf [Occ=Once] :: [h_a5iYI]
                                                    [LclId] =
                                                        [z_s5puL
                                                         as_s5puV
                                                         bs_s5puY
                                                         cs_s5pv1
                                                         ds7_s5pv4
                                                         es_s5pv7
                                                         fs_s5pva
                                                         gs_s5pvd] \u []
                                                            Data.OldList.zipWith7
                                                                z_s5puL
                                                                as_s5puV
                                                                bs_s5puY
                                                                cs_s5pv1
                                                                ds7_s5pv4
                                                                es_s5pv7
                                                                fs_s5pva
                                                                gs_s5pvd; } in
                                                  let {
                                                    sat_s5pve [Occ=Once] :: h_a5iYI
                                                    [LclId] =
                                                        [z_s5puL
                                                         a1_s5puU
                                                         b1_s5puX
                                                         c1_s5pv0
                                                         d1_s5pv3
                                                         e1_s5pv6
                                                         f1_s5pv9
                                                         g1_s5pvc] \u []
                                                            z_s5puL
                                                                a1_s5puU
                                                                b1_s5puX
                                                                c1_s5pv0
                                                                d1_s5pv3
                                                                e1_s5pv6
                                                                f1_s5pv9
                                                                g1_s5pvc;
                                                  } in  : [sat_s5pve sat_s5pvf];
                                            };
                                      };
                                };
                          };
                    };
              };
        };

Data.OldList.zip7
  :: forall a b c d e f g.
     [a]
     -> [b]
     -> [c]
     -> [d]
     -> [e]
     -> [f]
     -> [g]
     -> [(a, b, c, d, e, f, g)]
[GblId, Arity=7, Caf=NoCafRefs, Unf=OtherCon []] =
    [] \r [eta_B7 eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        Data.OldList.zipWith7
            GHC.Tuple.(,,,,,,)
            eta_B7
            eta_B6
            eta_B5
            eta_B4
            eta_B3
            eta_B2
            eta_B1;

Data.OldList.$wunzip4 [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: forall a b c d. [(a, b, c, d)] -> (# [a], [b], [c], [d] #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [w_s5pvg]
        case w_s5pvg of {
          [] ->
              (#,,,#) [GHC.Types.[] GHC.Types.[] GHC.Types.[] GHC.Types.[]];
          : y_s5pvi [Occ=Once!] ys_s5pvj [Occ=Once] ->
              case y_s5pvi of {
                (,,,) a1_s5pvl [Occ=Once]
                      b1_s5pvm [Occ=Once]
                      c1_s5pvn [Occ=Once]
                      d1_s5pvo [Occ=Once] ->
                    let {
                      ds_s5pvp [Dmd=<L,U(1*U,1*U,1*U,1*U)>]
                        :: ([a_s5kpz], [b_s5kpA], [c_s5kpB], [d_s5kpC])
                      [LclId] =
                          [ys_s5pvj] \u []
                              case Data.OldList.$wunzip4 ys_s5pvj of {
                                (#,,,#) ww1_s5pvr [Occ=Once]
                                        ww2_s5pvs [Occ=Once]
                                        ww3_s5pvt [Occ=Once]
                                        ww4_s5pvu [Occ=Once] ->
                                    (,,,) [ww1_s5pvr ww2_s5pvs ww3_s5pvt ww4_s5pvu];
                              }; } in
                    let {
                      sat_s5pvV [Occ=Once] :: [d_s5kpC]
                      [LclId] =
                          [ds_s5pvp] \u []
                              case ds_s5pvp of {
                                (,,,) _ [Occ=Dead]
                                      _ [Occ=Dead]
                                      _ [Occ=Dead]
                                      ds1_s5pvU [Occ=Once] ->
                                    ds1_s5pvU;
                              }; } in
                    let {
                      sat_s5pvW [Occ=Once] :: [d_s5kpC]
                      [LclId] =
                          CCCS :! [d1_s5pvo sat_s5pvV]; } in
                    let {
                      sat_s5pvO [Occ=Once] :: [c_s5kpB]
                      [LclId] =
                          [ds_s5pvp] \u []
                              case ds_s5pvp of {
                                (,,,) _ [Occ=Dead] _ [Occ=Dead] cs_s5pvM [Occ=Once] _ [Occ=Dead] ->
                                    cs_s5pvM;
                              }; } in
                    let {
                      sat_s5pvP [Occ=Once] :: [c_s5kpB]
                      [LclId] =
                          CCCS :! [c1_s5pvn sat_s5pvO]; } in
                    let {
                      sat_s5pvH [Occ=Once] :: [b_s5kpA]
                      [LclId] =
                          [ds_s5pvp] \u []
                              case ds_s5pvp of {
                                (,,,) _ [Occ=Dead] bs_s5pvE [Occ=Once] _ [Occ=Dead] _ [Occ=Dead] ->
                                    bs_s5pvE;
                              }; } in
                    let {
                      sat_s5pvI [Occ=Once] :: [b_s5kpA]
                      [LclId] =
                          CCCS :! [b1_s5pvm sat_s5pvH]; } in
                    let {
                      sat_s5pvA [Occ=Once] :: [a_s5kpz]
                      [LclId] =
                          [ds_s5pvp] \u []
                              case ds_s5pvp of {
                                (,,,) as_s5pvw [Occ=Once] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
                                    as_s5pvw;
                              }; } in
                    let {
                      sat_s5pvB [Occ=Once] :: [a_s5kpz]
                      [LclId] =
                          CCCS :! [a1_s5pvl sat_s5pvA];
                    } in  (#,,,#) [sat_s5pvB sat_s5pvI sat_s5pvP sat_s5pvW];
              };
        };

Data.OldList.unzip4 [InlPrag=NOUSERINLINE[0]]
  :: forall a b c d. [(a, b, c, d)] -> ([a], [b], [c], [d])
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [w_s5pvX]
        case Data.OldList.$wunzip4 w_s5pvX of {
          (#,,,#) ww1_s5pvZ [Occ=Once]
                  ww2_s5pw0 [Occ=Once]
                  ww3_s5pw1 [Occ=Once]
                  ww4_s5pw2 [Occ=Once] ->
              (,,,) [ww1_s5pvZ ww2_s5pw0 ww3_s5pw1 ww4_s5pw2];
        };

Data.OldList.$wunzip5 [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: forall a b c d e.
     [(a, b, c, d, e)] -> (# [a], [b], [c], [d], [e] #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [w_s5pw3]
        case w_s5pw3 of {
          [] ->
              (#,,,,#) [GHC.Types.[]
                        GHC.Types.[]
                        GHC.Types.[]
                        GHC.Types.[]
                        GHC.Types.[]];
          : y_s5pw5 [Occ=Once!] ys_s5pw6 [Occ=Once] ->
              case y_s5pw5 of {
                (,,,,) a1_s5pw8 [Occ=Once]
                       b1_s5pw9 [Occ=Once]
                       c1_s5pwa [Occ=Once]
                       d1_s5pwb [Occ=Once]
                       e1_s5pwc [Occ=Once] ->
                    let {
                      ds_s5pwd [Dmd=<L,U(1*U,1*U,1*U,1*U,1*U)>]
                        :: ([a_s5kpp], [b_s5kpq], [c_s5kpr], [d_s5kps], [e_s5kpt])
                      [LclId] =
                          [ys_s5pw6] \u []
                              case Data.OldList.$wunzip5 ys_s5pw6 of {
                                (#,,,,#) ww1_s5pwf [Occ=Once]
                                         ww2_s5pwg [Occ=Once]
                                         ww3_s5pwh [Occ=Once]
                                         ww4_s5pwi [Occ=Once]
                                         ww5_s5pwj [Occ=Once] ->
                                    (,,,,) [ww1_s5pwf ww2_s5pwg ww3_s5pwh ww4_s5pwi ww5_s5pwj];
                              }; } in
                    let {
                      sat_s5pwW [Occ=Once] :: [e_s5kpt]
                      [LclId] =
                          [ds_s5pwd] \u []
                              case ds_s5pwd of {
                                (,,,,) _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       es_s5pwV [Occ=Once] ->
                                    es_s5pwV;
                              }; } in
                    let {
                      sat_s5pwX [Occ=Once] :: [e_s5kpt]
                      [LclId] =
                          CCCS :! [e1_s5pwc sat_s5pwW]; } in
                    let {
                      sat_s5pwO [Occ=Once] :: [d_s5kps]
                      [LclId] =
                          [ds_s5pwd] \u []
                              case ds_s5pwd of {
                                (,,,,) _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds1_s5pwM [Occ=Once]
                                       _ [Occ=Dead] ->
                                    ds1_s5pwM;
                              }; } in
                    let {
                      sat_s5pwP [Occ=Once] :: [d_s5kps]
                      [LclId] =
                          CCCS :! [d1_s5pwb sat_s5pwO]; } in
                    let {
                      sat_s5pwG [Occ=Once] :: [c_s5kpr]
                      [LclId] =
                          [ds_s5pwd] \u []
                              case ds_s5pwd of {
                                (,,,,) _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       cs_s5pwD [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
                                    cs_s5pwD;
                              }; } in
                    let {
                      sat_s5pwH [Occ=Once] :: [c_s5kpr]
                      [LclId] =
                          CCCS :! [c1_s5pwa sat_s5pwG]; } in
                    let {
                      sat_s5pwy [Occ=Once] :: [b_s5kpq]
                      [LclId] =
                          [ds_s5pwd] \u []
                              case ds_s5pwd of {
                                (,,,,) _ [Occ=Dead]
                                       bs_s5pwu [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
                                    bs_s5pwu;
                              }; } in
                    let {
                      sat_s5pwz [Occ=Once] :: [b_s5kpq]
                      [LclId] =
                          CCCS :! [b1_s5pw9 sat_s5pwy]; } in
                    let {
                      sat_s5pwq [Occ=Once] :: [a_s5kpp]
                      [LclId] =
                          [ds_s5pwd] \u []
                              case ds_s5pwd of {
                                (,,,,) as_s5pwl [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
                                    as_s5pwl;
                              }; } in
                    let {
                      sat_s5pwr [Occ=Once] :: [a_s5kpp]
                      [LclId] =
                          CCCS :! [a1_s5pw8 sat_s5pwq];
                    } in  (#,,,,#) [sat_s5pwr sat_s5pwz sat_s5pwH sat_s5pwP sat_s5pwX];
              };
        };

Data.OldList.unzip5 [InlPrag=NOUSERINLINE[0]]
  :: forall a b c d e. [(a, b, c, d, e)] -> ([a], [b], [c], [d], [e])
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [w_s5pwY]
        case Data.OldList.$wunzip5 w_s5pwY of {
          (#,,,,#) ww1_s5px0 [Occ=Once]
                   ww2_s5px1 [Occ=Once]
                   ww3_s5px2 [Occ=Once]
                   ww4_s5px3 [Occ=Once]
                   ww5_s5px4 [Occ=Once] ->
              (,,,,) [ww1_s5px0 ww2_s5px1 ww3_s5px2 ww4_s5px3 ww5_s5px4];
        };

Data.OldList.$wunzip6 [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: forall a b c d e f.
     [(a, b, c, d, e, f)] -> (# [a], [b], [c], [d], [e], [f] #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [w_s5px5]
        case w_s5px5 of {
          [] ->
              (#,,,,,#) [GHC.Types.[]
                         GHC.Types.[]
                         GHC.Types.[]
                         GHC.Types.[]
                         GHC.Types.[]
                         GHC.Types.[]];
          : y_s5px7 [Occ=Once!] ys_s5px8 [Occ=Once] ->
              case y_s5px7 of {
                (,,,,,) a1_s5pxa [Occ=Once]
                        b1_s5pxb [Occ=Once]
                        c1_s5pxc [Occ=Once]
                        d1_s5pxd [Occ=Once]
                        e1_s5pxe [Occ=Once]
                        f1_s5pxf [Occ=Once] ->
                    let {
                      ds_s5pxg [Dmd=<L,U(1*U,1*U,1*U,1*U,1*U,1*U)>]
                        :: ([a_s5kpe], [b_s5kpf], [c_s5kpg], [d_s5kph], [e_s5kpi],
                            [f_s5kpj])
                      [LclId] =
                          [ys_s5px8] \u []
                              case Data.OldList.$wunzip6 ys_s5px8 of {
                                (#,,,,,#) ww1_s5pxi [Occ=Once]
                                          ww2_s5pxj [Occ=Once]
                                          ww3_s5pxk [Occ=Once]
                                          ww4_s5pxl [Occ=Once]
                                          ww5_s5pxm [Occ=Once]
                                          ww6_s5pxn [Occ=Once] ->
                                    (,,,,,) [ww1_s5pxi
                                             ww2_s5pxj
                                             ww3_s5pxk
                                             ww4_s5pxl
                                             ww5_s5pxm
                                             ww6_s5pxn];
                              }; } in
                    let {
                      sat_s5pye [Occ=Once] :: [f_s5kpj]
                      [LclId] =
                          [ds_s5pxg] \u []
                              case ds_s5pxg of {
                                (,,,,,) _ [Occ=Dead]
                                        _ [Occ=Dead]
                                        _ [Occ=Dead]
                                        _ [Occ=Dead]
                                        _ [Occ=Dead]
                                        fs_s5pyd [Occ=Once] ->
                                    fs_s5pyd;
                              }; } in
                    let {
                      sat_s5pyf [Occ=Once] :: [f_s5kpj]
                      [LclId] =
                          CCCS :! [f1_s5pxf sat_s5pye]; } in
                    let {
                      sat_s5py5 [Occ=Once] :: [e_s5kpi]
                      [LclId] =
                          [ds_s5pxg] \u []
                              case ds_s5pxg of {
                                (,,,,,) _ [Occ=Dead]
                                        _ [Occ=Dead]
                                        _ [Occ=Dead]
                                        _ [Occ=Dead]
                                        es_s5py3 [Occ=Once]
                                        _ [Occ=Dead] ->
                                    es_s5py3;
                              }; } in
                    let {
                      sat_s5py6 [Occ=Once] :: [e_s5kpi]
                      [LclId] =
                          CCCS :! [e1_s5pxe sat_s5py5]; } in
                    let {
                      sat_s5pxW [Occ=Once] :: [d_s5kph]
                      [LclId] =
                          [ds_s5pxg] \u []
                              case ds_s5pxg of {
                                (,,,,,) _ [Occ=Dead]
                                        _ [Occ=Dead]
                                        _ [Occ=Dead]
                                        ds1_s5pxT [Occ=Once]
                                        _ [Occ=Dead]
                                        _ [Occ=Dead] ->
                                    ds1_s5pxT;
                              }; } in
                    let {
                      sat_s5pxX [Occ=Once] :: [d_s5kph]
                      [LclId] =
                          CCCS :! [d1_s5pxd sat_s5pxW]; } in
                    let {
                      sat_s5pxN [Occ=Once] :: [c_s5kpg]
                      [LclId] =
                          [ds_s5pxg] \u []
                              case ds_s5pxg of {
                                (,,,,,) _ [Occ=Dead]
                                        _ [Occ=Dead]
                                        cs_s5pxJ [Occ=Once]
                                        _ [Occ=Dead]
                                        _ [Occ=Dead]
                                        _ [Occ=Dead] ->
                                    cs_s5pxJ;
                              }; } in
                    let {
                      sat_s5pxO [Occ=Once] :: [c_s5kpg]
                      [LclId] =
                          CCCS :! [c1_s5pxc sat_s5pxN]; } in
                    let {
                      sat_s5pxE [Occ=Once] :: [b_s5kpf]
                      [LclId] =
                          [ds_s5pxg] \u []
                              case ds_s5pxg of {
                                (,,,,,) _ [Occ=Dead]
                                        bs_s5pxz [Occ=Once]
                                        _ [Occ=Dead]
                                        _ [Occ=Dead]
                                        _ [Occ=Dead]
                                        _ [Occ=Dead] ->
                                    bs_s5pxz;
                              }; } in
                    let {
                      sat_s5pxF [Occ=Once] :: [b_s5kpf]
                      [LclId] =
                          CCCS :! [b1_s5pxb sat_s5pxE]; } in
                    let {
                      sat_s5pxv [Occ=Once] :: [a_s5kpe]
                      [LclId] =
                          [ds_s5pxg] \u []
                              case ds_s5pxg of {
                                (,,,,,) as_s5pxp [Occ=Once]
                                        _ [Occ=Dead]
                                        _ [Occ=Dead]
                                        _ [Occ=Dead]
                                        _ [Occ=Dead]
                                        _ [Occ=Dead] ->
                                    as_s5pxp;
                              }; } in
                    let {
                      sat_s5pxw [Occ=Once] :: [a_s5kpe]
                      [LclId] =
                          CCCS :! [a1_s5pxa sat_s5pxv];
                    } in 
                      (#,,,,,#) [sat_s5pxw
                                 sat_s5pxF
                                 sat_s5pxO
                                 sat_s5pxX
                                 sat_s5py6
                                 sat_s5pyf];
              };
        };

Data.OldList.unzip6 [InlPrag=NOUSERINLINE[0]]
  :: forall a b c d e f.
     [(a, b, c, d, e, f)] -> ([a], [b], [c], [d], [e], [f])
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [w_s5pyg]
        case Data.OldList.$wunzip6 w_s5pyg of {
          (#,,,,,#) ww1_s5pyi [Occ=Once]
                    ww2_s5pyj [Occ=Once]
                    ww3_s5pyk [Occ=Once]
                    ww4_s5pyl [Occ=Once]
                    ww5_s5pym [Occ=Once]
                    ww6_s5pyn [Occ=Once] ->
              (,,,,,) [ww1_s5pyi
                       ww2_s5pyj
                       ww3_s5pyk
                       ww4_s5pyl
                       ww5_s5pym
                       ww6_s5pyn];
        };

Data.OldList.$wunzip7 [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: forall a b c d e f g.
     [(a, b, c, d, e, f, g)] -> (# [a], [b], [c], [d], [e], [f], [g] #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [w_s5pyo]
        case w_s5pyo of {
          [] ->
              (#,,,,,,#) [GHC.Types.[]
                          GHC.Types.[]
                          GHC.Types.[]
                          GHC.Types.[]
                          GHC.Types.[]
                          GHC.Types.[]
                          GHC.Types.[]];
          : y_s5pyq [Occ=Once!] ys_s5pyr [Occ=Once] ->
              case y_s5pyq of {
                (,,,,,,) a1_s5pyt [Occ=Once]
                         b1_s5pyu [Occ=Once]
                         c1_s5pyv [Occ=Once]
                         d1_s5pyw [Occ=Once]
                         e1_s5pyx [Occ=Once]
                         f1_s5pyy [Occ=Once]
                         g1_s5pyz [Occ=Once] ->
                    let {
                      ds_s5pyA [Dmd=<L,U(1*U,1*U,1*U,1*U,1*U,1*U,1*U)>]
                        :: ([a_s5kp2], [b_s5kp3], [c_s5kp4], [d_s5kp5], [e_s5kp6],
                            [f_s5kp7], [g_s5kp8])
                      [LclId] =
                          [ys_s5pyr] \u []
                              case Data.OldList.$wunzip7 ys_s5pyr of {
                                (#,,,,,,#) ww1_s5pyC [Occ=Once]
                                           ww2_s5pyD [Occ=Once]
                                           ww3_s5pyE [Occ=Once]
                                           ww4_s5pyF [Occ=Once]
                                           ww5_s5pyG [Occ=Once]
                                           ww6_s5pyH [Occ=Once]
                                           ww7_s5pyI [Occ=Once] ->
                                    (,,,,,,) [ww1_s5pyC
                                              ww2_s5pyD
                                              ww3_s5pyE
                                              ww4_s5pyF
                                              ww5_s5pyG
                                              ww6_s5pyH
                                              ww7_s5pyI];
                              }; } in
                    let {
                      sat_s5pzP [Occ=Once] :: [g_s5kp8]
                      [LclId] =
                          [ds_s5pyA] \u []
                              case ds_s5pyA of {
                                (,,,,,,) _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         gs_s5pzO [Occ=Once] ->
                                    gs_s5pzO;
                              }; } in
                    let {
                      sat_s5pzQ [Occ=Once] :: [g_s5kp8]
                      [LclId] =
                          CCCS :! [g1_s5pyz sat_s5pzP]; } in
                    let {
                      sat_s5pzF [Occ=Once] :: [f_s5kp7]
                      [LclId] =
                          [ds_s5pyA] \u []
                              case ds_s5pyA of {
                                (,,,,,,) _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         fs_s5pzD [Occ=Once]
                                         _ [Occ=Dead] ->
                                    fs_s5pzD;
                              }; } in
                    let {
                      sat_s5pzG [Occ=Once] :: [f_s5kp7]
                      [LclId] =
                          CCCS :! [f1_s5pyy sat_s5pzF]; } in
                    let {
                      sat_s5pzv [Occ=Once] :: [e_s5kp6]
                      [LclId] =
                          [ds_s5pyA] \u []
                              case ds_s5pyA of {
                                (,,,,,,) _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         es_s5pzs [Occ=Once]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead] ->
                                    es_s5pzs;
                              }; } in
                    let {
                      sat_s5pzw [Occ=Once] :: [e_s5kp6]
                      [LclId] =
                          CCCS :! [e1_s5pyx sat_s5pzv]; } in
                    let {
                      sat_s5pzl [Occ=Once] :: [d_s5kp5]
                      [LclId] =
                          [ds_s5pyA] \u []
                              case ds_s5pyA of {
                                (,,,,,,) _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         ds1_s5pzh [Occ=Once]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead] ->
                                    ds1_s5pzh;
                              }; } in
                    let {
                      sat_s5pzm [Occ=Once] :: [d_s5kp5]
                      [LclId] =
                          CCCS :! [d1_s5pyw sat_s5pzl]; } in
                    let {
                      sat_s5pzb [Occ=Once] :: [c_s5kp4]
                      [LclId] =
                          [ds_s5pyA] \u []
                              case ds_s5pyA of {
                                (,,,,,,) _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         cs_s5pz6 [Occ=Once]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead] ->
                                    cs_s5pz6;
                              }; } in
                    let {
                      sat_s5pzc [Occ=Once] :: [c_s5kp4]
                      [LclId] =
                          CCCS :! [c1_s5pyv sat_s5pzb]; } in
                    let {
                      sat_s5pz1 [Occ=Once] :: [b_s5kp3]
                      [LclId] =
                          [ds_s5pyA] \u []
                              case ds_s5pyA of {
                                (,,,,,,) _ [Occ=Dead]
                                         bs_s5pyV [Occ=Once]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead] ->
                                    bs_s5pyV;
                              }; } in
                    let {
                      sat_s5pz2 [Occ=Once] :: [b_s5kp3]
                      [LclId] =
                          CCCS :! [b1_s5pyu sat_s5pz1]; } in
                    let {
                      sat_s5pyR [Occ=Once] :: [a_s5kp2]
                      [LclId] =
                          [ds_s5pyA] \u []
                              case ds_s5pyA of {
                                (,,,,,,) as_s5pyK [Occ=Once]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead] ->
                                    as_s5pyK;
                              }; } in
                    let {
                      sat_s5pyS [Occ=Once] :: [a_s5kp2]
                      [LclId] =
                          CCCS :! [a1_s5pyt sat_s5pyR];
                    } in 
                      (#,,,,,,#) [sat_s5pyS
                                  sat_s5pz2
                                  sat_s5pzc
                                  sat_s5pzm
                                  sat_s5pzw
                                  sat_s5pzG
                                  sat_s5pzQ];
              };
        };

Data.OldList.unzip7 [InlPrag=NOUSERINLINE[0]]
  :: forall a b c d e f g.
     [(a, b, c, d, e, f, g)] -> ([a], [b], [c], [d], [e], [f], [g])
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [w_s5pzR]
        case Data.OldList.$wunzip7 w_s5pzR of {
          (#,,,,,,#) ww1_s5pzT [Occ=Once]
                     ww2_s5pzU [Occ=Once]
                     ww3_s5pzV [Occ=Once]
                     ww4_s5pzW [Occ=Once]
                     ww5_s5pzX [Occ=Once]
                     ww6_s5pzY [Occ=Once]
                     ww7_s5pzZ [Occ=Once] ->
              (,,,,,,) [ww1_s5pzT
                        ww2_s5pzU
                        ww3_s5pzV
                        ww4_s5pzW
                        ww5_s5pzX
                        ww6_s5pzY
                        ww7_s5pzZ];
        };

Data.OldList.groupBy [Occ=LoopBreaker]
  :: forall a. (a -> a -> GHC.Types.Bool) -> [a] -> [[a]]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,C(C(U))><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s5pA0 ds1_s5pA1]
        case ds1_s5pA1 of {
          [] -> [] [];
          : x_s5pA3 xs_s5pA4 [Occ=Once] ->
              let {
                ds2_s5pA5 [Dmd=<L,U(1*U,1*U)>] :: ([a_a5iWz], [a_a5iWz])
                [LclId] =
                    [ds_s5pA0 x_s5pA3 xs_s5pA4] \u []
                        let {
                          sat_s5pA6 [Occ=Once, Dmd=<L,C(U)>] :: a_a5iWz -> GHC.Types.Bool
                          [LclId] =
                              [ds_s5pA0 x_s5pA3] \u [] ds_s5pA0 x_s5pA3;
                        } in 
                          case GHC.List.$wspan sat_s5pA6 xs_s5pA4 of {
                            (#,#) ww1_s5pA8 [Occ=Once] ww2_s5pA9 [Occ=Once] ->
                                (,) [ww1_s5pA8 ww2_s5pA9];
                          }; } in
              let {
                sat_s5pAi [Occ=Once] :: [[a_a5iWz]]
                [LclId] =
                    [ds_s5pA0 ds2_s5pA5] \u []
                        case ds2_s5pA5 of {
                          (,) _ [Occ=Dead] zs_s5pAh [Occ=Once] ->
                              Data.OldList.groupBy ds_s5pA0 zs_s5pAh;
                        }; } in
              let {
                sat_s5pAd [Occ=Once] :: [a_a5iWz]
                [LclId] =
                    [ds2_s5pA5] \u []
                        case ds2_s5pA5 of {
                          (,) ys_s5pAb [Occ=Once] _ [Occ=Dead] -> ys_s5pAb;
                        }; } in
              let {
                sat_s5pAe [Occ=Once] :: [a_a5iWz]
                [LclId] =
                    CCCS :! [x_s5pA3 sat_s5pAd];
              } in  : [sat_s5pAe sat_s5pAi];
        };

Data.OldList.group :: forall a. GHC.Classes.Eq a => [a] -> [[a]]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*U(1*C(C(U)),A)><S,1*U>,
 Unf=OtherCon []] =
    [] \r [$dEq_s5pAj eta_s5pAk]
        let {
          sat_s5pAl [Occ=Once, Dmd=<L,C(C(U))>]
            :: a_a5iWS -> a_a5iWS -> GHC.Types.Bool
          [LclId] =
              [$dEq_s5pAj] \u [] GHC.Classes.== $dEq_s5pAj;
        } in  Data.OldList.groupBy sat_s5pAl eta_s5pAk;

poly_tailsGo_r5kSn :: forall a. [a] -> [[a]]
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>m2, Unf=OtherCon []] =
    sat-only [] \r [xs_s5pAm]
        let {
          sat_s5pAq [Occ=Once] :: [[a_a5iVR]]
          [LclId] =
              [xs_s5pAm] \u []
                  case xs_s5pAm of {
                    [] -> [] [];
                    : _ [Occ=Dead] xs'_s5pAp [Occ=Once] ->
                        poly_tailsGo_r5kSn xs'_s5pAp;
                  };
        } in  : [xs_s5pAm sat_s5pAq];

Data.OldList.tails [InlPrag=INLINABLE] :: forall a. [a] -> [[a]]
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [lst_s5pAr] poly_tailsGo_r5kSn lst_s5pAr;

Data.OldList.nonEmptySubsequences [Occ=LoopBreaker]
  :: forall a. [a] -> [[a]]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s5pAs]
        case ds_s5pAs of {
          [] -> [] [];
          : x_s5pAu xs_s5pAv [Occ=Once] ->
              let {
                sat_s5pAG [Occ=Once] :: [[a_a5iVp]]
                [LclId] =
                    [x_s5pAu xs_s5pAv] \u []
                        let {
                          go_s5pAx [Occ=LoopBreaker] :: [[a_a5iVp]] -> [[a_a5iVp]]
                          [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                              sat-only [x_s5pAu go_s5pAx] \r [ds1_s5pAy]
                                  case ds1_s5pAy of {
                                    [] -> [] [];
                                    : y_s5pAA ys_s5pAB [Occ=Once] ->
                                        let {
                                          sat_s5pAD [Occ=Once] :: [[a_a5iVp]]
                                          [LclId] =
                                              [go_s5pAx ys_s5pAB] \u [] go_s5pAx ys_s5pAB; } in
                                        let {
                                          sat_s5pAC [Occ=Once] :: [a_a5iVp]
                                          [LclId] =
                                              CCCS :! [x_s5pAu y_s5pAA]; } in
                                        let {
                                          sat_s5pAE [Occ=Once] :: [[a_a5iVp]]
                                          [LclId] =
                                              CCCS :! [sat_s5pAC sat_s5pAD];
                                        } in  : [y_s5pAA sat_s5pAE];
                                  };
                        } in 
                          case Data.OldList.nonEmptySubsequences xs_s5pAv of sat_s5pAF {
                            __DEFAULT -> go_s5pAx sat_s5pAF;
                          }; } in
              let {
                sat_s5pAw [Occ=Once] :: [a_a5iVp]
                [LclId] =
                    CCCS :! [x_s5pAu GHC.Types.[]];
              } in  : [sat_s5pAw sat_s5pAG];
        };

Data.OldList.subsequences :: forall a. [a] -> [[a]]
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,1*U>m2, Unf=OtherCon []] =
    [] \r [xs_s5pAH]
        let {
          sat_s5pAI [Occ=Once] :: [[a_a5iVM]]
          [LclId] =
              [xs_s5pAH] \u [] Data.OldList.nonEmptySubsequences xs_s5pAH;
        } in  : [GHC.Types.[] sat_s5pAI];

Data.OldList.permutations1 [Occ=LoopBreaker]
  :: forall a. [a] -> [a] -> [[a]]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ds_s5pAJ ds1_s5pAK]
        case ds_s5pAJ of {
          [] -> [] [];
          : t_s5pAM ts_s5pAN ->
              let {
                $winterleave'_s5pAO [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
                  :: forall c.
                     ([a_a5iTf] -> c) -> [a_a5iTf] -> [c] -> (# [a_a5iTf], [c] #)
                [LclId, Arity=3, Str=<L,C(U)><S,1*U><L,U>, Unf=OtherCon []] =
                    sat-only [t_s5pAM ts_s5pAN $winterleave'_s5pAO] \r [w_s5pAP
                                                                        w1_s5pAQ
                                                                        w2_s5pAR]
                        case w1_s5pAQ of {
                          [] -> (#,#) [ts_s5pAN w2_s5pAR];
                          : y_s5pAT ys_s5pAU [Occ=Once] ->
                              let {
                                ds2_s5pAV [Dmd=<L,U(1*U,1*U)>] :: ([a_a5iTf], [c_s5koH])
                                [LclId] =
                                    [$winterleave'_s5pAO w_s5pAP w2_s5pAR y_s5pAT ys_s5pAU] \u []
                                        let {
                                          sat_s5pAY [Occ=Once] :: [a_a5iTf] -> c_s5koH
                                          [LclId] =
                                              [w_s5pAP y_s5pAT] \r [x_s5pAW]
                                                  let {
                                                    sat_s5pAX [Occ=Once] :: [a_a5iTf]
                                                    [LclId] =
                                                        CCCS :! [y_s5pAT x_s5pAW];
                                                  } in  w_s5pAP sat_s5pAX;
                                        } in 
                                          case $winterleave'_s5pAO sat_s5pAY ys_s5pAU w2_s5pAR of {
                                            (#,#) ww1_s5pB0 [Occ=Once] ww2_s5pB1 [Occ=Once] ->
                                                (,) [ww1_s5pB0 ww2_s5pB1];
                                          }; } in
                              let {
                                us_s5pB2 :: [a_a5iTf]
                                [LclId] =
                                    [ds2_s5pAV] \u []
                                        case ds2_s5pAV of {
                                          (,) us1_s5pB4 [Occ=Once] _ [Occ=Dead] -> us1_s5pB4;
                                        }; } in
                              let {
                                sat_s5pBd [Occ=Once] :: [c_s5koH]
                                [LclId] =
                                    [ds2_s5pAV] \u []
                                        case ds2_s5pAV of {
                                          (,) _ [Occ=Dead] zs_s5pBc [Occ=Once] -> zs_s5pBc;
                                        }; } in
                              let {
                                sat_s5pB9 [Occ=Once] :: c_s5koH
                                [LclId] =
                                    [t_s5pAM w_s5pAP y_s5pAT us_s5pB2] \u []
                                        let {
                                          sat_s5pB7 [Occ=Once] :: [a_a5iTf]
                                          [LclId] =
                                              CCCS :! [y_s5pAT us_s5pB2]; } in
                                        let {
                                          sat_s5pB8 [Occ=Once] :: [a_a5iTf]
                                          [LclId] =
                                              CCCS :! [t_s5pAM sat_s5pB7];
                                        } in  w_s5pAP sat_s5pB8; } in
                              let {
                                sat_s5pBe [Occ=Once] :: [c_s5koH]
                                [LclId] =
                                    CCCS :! [sat_s5pB9 sat_s5pBd]; } in
                              let {
                                sat_s5pB6 [Occ=Once] :: [a_a5iTf]
                                [LclId] =
                                    CCCS :! [y_s5pAT us_s5pB2];
                              } in  (#,#) [sat_s5pB6 sat_s5pBe];
                        }; } in
              let {
                z_s5pBf [Occ=OnceL] :: [[a_a5iTf]]
                [LclId] =
                    [ds1_s5pAK t_s5pAM ts_s5pAN] \u []
                        let {
                          sat_s5pBg [Occ=Once] :: [a_a5iTf]
                          [LclId] =
                              CCCS :! [t_s5pAM ds1_s5pAK];
                        } in  Data.OldList.permutations1 ts_s5pAN sat_s5pBg; } in
              let {
                go_s5pBh [Occ=LoopBreaker] :: [[a_a5iTf]] -> [[a_a5iTf]]
                [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                    sat-only [$winterleave'_s5pAO z_s5pBf go_s5pBh] \r [ds2_s5pBi]
                        case ds2_s5pBi of {
                          [] -> z_s5pBf;
                          : y_s5pBk [Occ=Once] ys_s5pBl [Occ=Once] ->
                              let {
                                sat_s5pBm [Occ=Once] :: [[a_a5iTf]]
                                [LclId] =
                                    [go_s5pBh ys_s5pBl] \u [] go_s5pBh ys_s5pBl;
                              } in 
                                case $winterleave'_s5pAO GHC.Base.id y_s5pBk sat_s5pBm of {
                                  (#,#) _ [Occ=Dead] ww2_s5pBp [Occ=Once] -> ww2_s5pBp;
                                };
                        }; } in
              let {
                sat_s5pBq [Occ=Once] :: [[a_a5iTf]]
                [LclId] =
                    [ds1_s5pAK] \u []
                        Data.OldList.permutations1 ds1_s5pAK GHC.Types.[]; } in
              let {
                sat_s5pBr [Occ=Once] :: [[a_a5iTf]]
                [LclId] =
                    CCCS :! [ds1_s5pAK sat_s5pBq];
              } in  go_s5pBh sat_s5pBr;
        };

Data.OldList.permutations :: forall a. [a] -> [[a]]
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [xs0_s5pBs]
        let {
          sat_s5pBt [Occ=Once] :: [[a_a5iTf]]
          [LclId] =
              [xs0_s5pBs] \u []
                  Data.OldList.permutations1 xs0_s5pBs GHC.Types.[];
        } in  : [xs0_s5pBs sat_s5pBt];

lvl6_r5kSo :: forall a. [[a]]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Types.[] GHC.Types.[]];

Data.OldList.sortBy
  :: forall a. (a -> a -> GHC.Types.Ordering) -> [a] -> [a]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><S,1*U>,
 Unf=OtherCon []] =
    [] \r [cmp_s5pBu eta_s5pBv]
        let {
          merge_s5pBw [Occ=LoopBreaker]
            :: [a_a5iQ6] -> [a_a5iQ6] -> [a_a5iQ6]
          [LclId, Arity=2, Str=<S,1*U><S,1*U>, Unf=OtherCon []] =
              sat-only [cmp_s5pBu merge_s5pBw] \r [as_s5pBx bs_s5pBy]
                  case as_s5pBx of wild_s5pBz {
                    [] -> bs_s5pBy;
                    : a1_s5pBA as'_s5pBB [Occ=Once] ->
                        case bs_s5pBy of wild1_s5pBC {
                          [] -> wild_s5pBz;
                          : b_s5pBD bs'_s5pBE [Occ=Once] ->
                              case cmp_s5pBu a1_s5pBA b_s5pBD of {
                                __DEFAULT ->
                                    let {
                                      sat_s5pBG [Occ=Once] :: [a_a5iQ6]
                                      [LclId] =
                                          [merge_s5pBw as'_s5pBB wild1_s5pBC] \u []
                                              merge_s5pBw as'_s5pBB wild1_s5pBC;
                                    } in  : [a1_s5pBA sat_s5pBG];
                                GHC.Types.GT ->
                                    let {
                                      sat_s5pBH [Occ=Once] :: [a_a5iQ6]
                                      [LclId] =
                                          [merge_s5pBw wild_s5pBz bs'_s5pBE] \u []
                                              merge_s5pBw wild_s5pBz bs'_s5pBE;
                                    } in  : [b_s5pBD sat_s5pBH];
                              };
                        };
                  }; } in
        let {
          mergePairs_s5pBI [Occ=LoopBreaker] :: [[a_a5iQ6]] -> [[a_a5iQ6]]
          [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
              sat-only [merge_s5pBw mergePairs_s5pBI] \r [ds_s5pBJ]
                  case ds_s5pBJ of wild_s5pBK {
                    [] -> [] [];
                    : a1_s5pBL [Occ=Once] ds1_s5pBM [Occ=Once!] ->
                        case ds1_s5pBM of {
                          [] -> wild_s5pBK;
                          : b_s5pBO [Occ=Once] xs_s5pBP [Occ=Once] ->
                              case merge_s5pBw a1_s5pBL b_s5pBO of x_s5pBQ {
                                __DEFAULT ->
                                    let {
                                      sat_s5pBR [Occ=Once] :: [[a_a5iQ6]]
                                      [LclId] =
                                          [mergePairs_s5pBI xs_s5pBP] \u []
                                              mergePairs_s5pBI xs_s5pBP;
                                    } in  : [x_s5pBQ sat_s5pBR];
                              };
                        };
                  }; } in
        let {
          lvl12_s5pBS [Occ=OnceL] :: [[a_a5iQ6]]
          [LclId] =
              [mergePairs_s5pBI] \u [] mergePairs_s5pBI GHC.Types.[]; } in
        let {
          sequences_s5pBT :: [a_a5iQ6] -> [[a_a5iQ6]]
          [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
              sat-only [cmp_s5pBu descending_s5pBV ascending_s5pBW] \r [ds_s5pBX]
                  case ds_s5pBX of wild_s5pBY {
                    [] -> lvl6_r5kSo;
                    : a1_s5pBZ ds1_s5pC0 [Occ=Once!] ->
                        case ds1_s5pC0 of {
                          [] -> : [wild_s5pBY GHC.Types.[]];
                          : b_s5pC2 xs_s5pC3 [Occ=Once*] ->
                              case cmp_s5pBu a1_s5pBZ b_s5pC2 of {
                                __DEFAULT ->
                                    let {
                                      sat_s5pC5 [Occ=Once] :: [a_a5iQ6] -> [a_a5iQ6]
                                      [LclId] =
                                          [a1_s5pBZ] \r [eta_B1] : [a1_s5pBZ eta_B1];
                                    } in  ascending_s5pBW b_s5pC2 sat_s5pC5 xs_s5pC3;
                                GHC.Types.GT ->
                                    let {
                                      sat_s5pC6 [Occ=Once] :: [a_a5iQ6]
                                      [LclId] =
                                          CCCS :! [a1_s5pBZ GHC.Types.[]];
                                    } in  descending_s5pBV b_s5pC2 sat_s5pC6 xs_s5pC3;
                              };
                        };
                  };
          lvl13_s5pBU :: [[a_a5iQ6]]
          [LclId] =
              [sequences_s5pBT] \u [] sequences_s5pBT GHC.Types.[];
          descending_s5pBV [Occ=LoopBreaker]
            :: a_a5iQ6 -> [a_a5iQ6] -> [a_a5iQ6] -> [[a_a5iQ6]]
          [LclId, Arity=3, Str=<L,U><L,U><S,1*U>, Unf=OtherCon []] =
              sat-only [cmp_s5pBu
                        sequences_s5pBT
                        lvl13_s5pBU
                        descending_s5pBV] \r [a1_s5pC7 as_s5pC8 ds_s5pC9]
                  case ds_s5pC9 of wild_s5pCa {
                    [] ->
                        let {
                          sat_s5pCb [Occ=Once] :: [a_a5iQ6]
                          [LclId] =
                              CCCS :! [a1_s5pC7 as_s5pC8];
                        } in  : [sat_s5pCb lvl13_s5pBU];
                    : b_s5pCc bs_s5pCd [Occ=Once] ->
                        case cmp_s5pBu a1_s5pC7 b_s5pCc of {
                          __DEFAULT ->
                              let {
                                sat_s5pCg [Occ=Once] :: [[a_a5iQ6]]
                                [LclId] =
                                    [sequences_s5pBT wild_s5pCa] \u []
                                        sequences_s5pBT wild_s5pCa; } in
                              let {
                                sat_s5pCf [Occ=Once] :: [a_a5iQ6]
                                [LclId] =
                                    CCCS :! [a1_s5pC7 as_s5pC8];
                              } in  : [sat_s5pCf sat_s5pCg];
                          GHC.Types.GT ->
                              let {
                                sat_s5pCh [Occ=Once] :: [a_a5iQ6]
                                [LclId] =
                                    CCCS :! [a1_s5pC7 as_s5pC8];
                              } in  descending_s5pBV b_s5pCc sat_s5pCh bs_s5pCd;
                        };
                  };
          ascending_s5pBW [Occ=LoopBreaker]
            :: a_a5iQ6 -> ([a_a5iQ6] -> [a_a5iQ6]) -> [a_a5iQ6] -> [[a_a5iQ6]]
          [LclId, Arity=3, Str=<L,U><C(S),1*C1(U)><S,1*U>, Unf=OtherCon []] =
              sat-only [cmp_s5pBu
                        sequences_s5pBT
                        lvl13_s5pBU
                        ascending_s5pBW] \r [a1_s5pCi as_s5pCj ds_s5pCk]
                  case ds_s5pCk of wild_s5pCl {
                    [] ->
                        let {
                          sat_s5pCm [Occ=Once] :: [a_a5iQ6]
                          [LclId] =
                              CCCS :! [a1_s5pCi GHC.Types.[]];
                        } in 
                          case as_s5pCj sat_s5pCm of x_s5pCn {
                            __DEFAULT -> : [x_s5pCn lvl13_s5pBU];
                          };
                    : b_s5pCo bs_s5pCp [Occ=Once] ->
                        case cmp_s5pBu a1_s5pCi b_s5pCo of {
                          __DEFAULT ->
                              let {
                                sat_s5pCt [Occ=Once] :: [a_a5iQ6] -> [a_a5iQ6]
                                [LclId] =
                                    [a1_s5pCi as_s5pCj] \r [ys_s5pCr]
                                        let {
                                          sat_s5pCs [Occ=Once] :: [a_a5iQ6]
                                          [LclId] =
                                              CCCS :! [a1_s5pCi ys_s5pCr];
                                        } in  as_s5pCj sat_s5pCs;
                              } in  ascending_s5pBW b_s5pCo sat_s5pCt bs_s5pCp;
                          GHC.Types.GT ->
                              let {
                                sat_s5pCu [Occ=Once] :: [a_a5iQ6]
                                [LclId] =
                                    CCCS :! [a1_s5pCi GHC.Types.[]];
                              } in 
                                case as_s5pCj sat_s5pCu of x_s5pCv {
                                  __DEFAULT ->
                                      let {
                                        sat_s5pCw [Occ=Once] :: [[a_a5iQ6]]
                                        [LclId] =
                                            [sequences_s5pBT wild_s5pCl] \u []
                                                sequences_s5pBT wild_s5pCl;
                                      } in  : [x_s5pCv sat_s5pCw];
                                };
                        };
                  };
        } in 
          case sequences_s5pBT eta_s5pBv of sat_s5pCG {
            __DEFAULT ->
                let-no-escape {
                  mergeAll_s5pCx [Occ=LoopBreakerT[1]] :: [[a_a5iQ6]] -> [a_a5iQ6]
                  [LclId[JoinId(1)], Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                      sat-only [mergePairs_s5pBI
                                lvl12_s5pBS
                                mergeAll_s5pCx] \r [ds_s5pCy]
                          case ds_s5pCy of wild_s5pCz {
                            [] -> mergeAll_s5pCx lvl12_s5pBS;
                            : x_s5pCA [Occ=Once] ds1_s5pCB [Occ=Once!] ->
                                case ds1_s5pCB of {
                                  [] -> x_s5pCA;
                                  : _ [Occ=Dead] _ [Occ=Dead] ->
                                      case mergePairs_s5pBI wild_s5pCz of sat_s5pCF {
                                        __DEFAULT -> mergeAll_s5pCx sat_s5pCF;
                                      };
                                };
                          };
                } in  mergeAll_s5pCx sat_s5pCG;
          };

Data.OldList.sortOn
  :: forall b a. GHC.Classes.Ord b => (a -> b) -> [a] -> [a]
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U(A,C(C1(U)),A,A,A,A,A,A)><L,C(U)><S,1*U>,
 Unf=OtherCon []] =
    [] \r [$dOrd_s5pCH f_s5pCI eta_s5pCJ]
        let {
          sat_s5pCX [Occ=Once] :: a_a5iSu -> (b_a5iSt, a_a5iSu)
          [LclId] =
              [f_s5pCI] \r [x_s5pCV]
                  case f_s5pCI x_s5pCV of y_s5pCW {
                    __DEFAULT -> (,) [y_s5pCW x_s5pCV];
                  };
        } in 
          case GHC.Base.map sat_s5pCX eta_s5pCJ of sat_s5pCY {
            __DEFAULT ->
                let {
                  sat_s5pCU [Occ=Once]
                    :: (b_a5iSt, a_a5iSu) -> (b_a5iSt, a_a5iSu) -> GHC.Types.Ordering
                  [LclId] =
                      [$dOrd_s5pCH] \r [x_s5pCK y_s5pCL]
                          let {
                            sat_s5pCT [Occ=Once] :: b_a5iSt
                            [LclId] =
                                [y_s5pCL] \u []
                                    case y_s5pCL of {
                                      (,) x1_s5pCR [Occ=Once] _ [Occ=Dead] -> x1_s5pCR;
                                    }; } in
                          let {
                            sat_s5pCP [Occ=Once] :: b_a5iSt
                            [LclId] =
                                [x_s5pCK] \u []
                                    case x_s5pCK of {
                                      (,) x1_s5pCN [Occ=Once] _ [Occ=Dead] -> x1_s5pCN;
                                    };
                          } in  GHC.Classes.compare $dOrd_s5pCH sat_s5pCP sat_s5pCT;
                } in 
                  case Data.OldList.sortBy sat_s5pCU sat_s5pCY of sat_s5pCZ {
                    __DEFAULT -> GHC.Base.map Data.Tuple.snd sat_s5pCZ;
                  };
          };

Data.OldList.sort :: forall a. GHC.Classes.Ord a => [a] -> [a]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*U(A,1*C(C1(U)),A,A,A,A,A,A)><S,1*U>,
 Unf=OtherCon []] =
    [] \r [$dOrd_s5pD0 eta_s5pD1]
        let {
          sat_s5pD2 [Occ=Once, Dmd=<L,C(C1(U))>]
            :: a_a5iT8 -> a_a5iT8 -> GHC.Types.Ordering
          [LclId] =
              [$dOrd_s5pD0] \u [] GHC.Classes.compare $dOrd_s5pD0;
        } in  Data.OldList.sortBy sat_s5pD2 eta_s5pD1;

Data.OldList.unfoldr [InlPrag=INLINE (sat-args=2)]
  :: forall b a. (b -> GHC.Base.Maybe (a, b)) -> b -> [a]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<C(S),C(U)><L,U>,
 Unf=OtherCon []] =
    [] \r [f_s5pD3 b0_s5pD4]
        let {
          go_s5pD5 [Occ=LoopBreaker] :: b_a5iPE -> [a_a5iPF]
          [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
              sat-only [f_s5pD3 go_s5pD5] \r [b1_s5pD6]
                  case f_s5pD3 b1_s5pD6 of {
                    GHC.Base.Nothing -> [] [];
                    GHC.Base.Just ds_s5pD8 [Occ=Once!] ->
                        case ds_s5pD8 of {
                          (,) a1_s5pDa [Occ=Once] new_b_s5pDb [Occ=Once] ->
                              let {
                                sat_s5pDc [Occ=Once] :: [a_a5iPF]
                                [LclId] =
                                    [go_s5pD5 new_b_s5pDb] \u [] go_s5pD5 new_b_s5pDb;
                              } in  : [a1_s5pDa sat_s5pDc];
                        };
                  };
        } in  go_s5pD5 b0_s5pD4;

lvl7_r5kSp :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\n'#];

Data.OldList.unlines [Occ=LoopBreaker]
  :: [GHC.Base.String] -> GHC.Base.String
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s5pDd]
        case ds_s5pDd of {
          [] -> [] [];
          : l_s5pDf [Occ=Once] ls_s5pDg [Occ=Once] ->
              let {
                sat_s5pDh [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [ls_s5pDg] \u [] Data.OldList.unlines ls_s5pDg; } in
              let {
                sat_s5pDi [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    CCCS :! [lvl7_r5kSp sat_s5pDh];
              } in  GHC.Base.++ l_s5pDf sat_s5pDi;
        };

Data.OldList.wordsFB [InlPrag=INLINE[0] (sat-args=2),
                      Occ=LoopBreaker!]
  :: forall b.
     ([GHC.Types.Char] -> b -> b) -> b -> GHC.Base.String -> b
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [c_s5pDj n_s5pDk eta_s5pDl]
        let {
          go_s5pDm [Occ=LoopBreaker] :: [GHC.Types.Char] -> b_a5iOj
          [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
              sat-only [c_s5pDj n_s5pDk go_s5pDm] \r [s_s5pDn]
                  case GHC.List.dropWhile GHC.Unicode.isSpace s_s5pDn of wild_s5pDo {
                    [] -> n_s5pDk;
                    : _ [Occ=Dead] _ [Occ=Dead] ->
                        let {
                          ds_s5pDr [Dmd=<L,U(1*U,1*U)>]
                            :: ([GHC.Types.Char], [GHC.Types.Char])
                          [LclId] =
                              [wild_s5pDo] \u []
                                  case GHC.List.$wbreak GHC.Unicode.isSpace wild_s5pDo of {
                                    (#,#) ww1_s5pDt [Occ=Once] ww2_s5pDu [Occ=Once] ->
                                        (,) [ww1_s5pDt ww2_s5pDu];
                                  }; } in
                        let {
                          sat_s5pDC [Occ=Once] :: b_a5iOj
                          [LclId] =
                              [go_s5pDm ds_s5pDr] \u []
                                  case ds_s5pDr of {
                                    (,) _ [Occ=Dead] s''_s5pDB [Occ=Once] -> go_s5pDm s''_s5pDB;
                                  }; } in
                        let {
                          sat_s5pDy [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              [ds_s5pDr] \u []
                                  case ds_s5pDr of {
                                    (,) w_s5pDw [Occ=Once] _ [Occ=Dead] -> w_s5pDw;
                                  };
                        } in  c_s5pDj sat_s5pDy sat_s5pDC;
                  };
        } in  go_s5pDm eta_s5pDl;
Data.OldList.words [InlPrag=NOINLINE[1], Occ=LoopBreaker]
  :: GHC.Base.String -> [GHC.Base.String]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [s_s5pDD]
        case GHC.List.dropWhile GHC.Unicode.isSpace s_s5pDD of wild_s5pDE {
          [] -> [] [];
          : _ [Occ=Dead] _ [Occ=Dead] ->
              let {
                ds_s5pDH [Dmd=<L,U(1*U,1*U)>]
                  :: ([GHC.Types.Char], [GHC.Types.Char])
                [LclId] =
                    [wild_s5pDE] \u []
                        case GHC.List.$wbreak GHC.Unicode.isSpace wild_s5pDE of {
                          (#,#) ww1_s5pDJ [Occ=Once] ww2_s5pDK [Occ=Once] ->
                              (,) [ww1_s5pDJ ww2_s5pDK];
                        }; } in
              let {
                sat_s5pDS [Occ=Once] :: [[GHC.Types.Char]]
                [LclId] =
                    [ds_s5pDH] \u []
                        case ds_s5pDH of {
                          (,) _ [Occ=Dead] s''_s5pDR [Occ=Once] ->
                              Data.OldList.words s''_s5pDR;
                        }; } in
              let {
                sat_s5pDO [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [ds_s5pDH] \u []
                        case ds_s5pDH of {
                          (,) w_s5pDM [Occ=Once] _ [Occ=Dead] -> w_s5pDM;
                        };
              } in  : [sat_s5pDO sat_s5pDS];
        };

lvl8_r5kSq :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! [' '#];

Data.OldList.unwordsFB [InlPrag=INLINE[0] (sat-args=2)]
  :: GHC.Base.String -> GHC.Base.String -> GHC.Base.String
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*U><L,1*U>m2,
 Unf=OtherCon []] =
    [] \r [w_s5pDT r_s5pDU]
        let {
          sat_s5pDV [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [w_s5pDT r_s5pDU] \u [] GHC.Base.++ w_s5pDT r_s5pDU;
        } in  : [lvl8_r5kSq sat_s5pDV];

Data.OldList.unwords_go [Occ=LoopBreaker]
  :: [[GHC.Types.Char]] -> [GHC.Types.Char]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s5pDW]
        case ds_s5pDW of {
          [] -> [] [];
          : v_s5pDY [Occ=Once] vs_s5pDZ [Occ=Once] ->
              let {
                sat_s5pE1 [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [v_s5pDY vs_s5pDZ] \u []
                        let {
                          sat_s5pE0 [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                          [LclId] =
                              [vs_s5pDZ] \s [] Data.OldList.unwords_go vs_s5pDZ;
                        } in  GHC.Base.++ v_s5pDY sat_s5pE0;
              } in  : [lvl8_r5kSq sat_s5pE1];
        };

Data.OldList.tailUnwords [InlPrag=INLINE[0] (sat-args=1),
                          Occ=LoopBreaker!]
  :: GHC.Base.String -> GHC.Base.String
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s5pE2]
        case ds_s5pE2 of {
          [] -> [] [];
          : _ [Occ=Dead] xs_s5pE5 [Occ=Once] -> xs_s5pE5;
        };
Data.OldList.unwords [InlPrag=NOINLINE[1], Occ=LoopBreaker!]
  :: [GHC.Base.String] -> GHC.Base.String
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s5pE6]
        case ds_s5pE6 of {
          [] -> [] [];
          : w_s5pE8 [Occ=Once] ws_s5pE9 [Occ=Once] ->
              let {
                sat_s5pEa [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                [LclId] =
                    [ws_s5pE9] \s [] Data.OldList.unwords_go ws_s5pE9;
              } in  GHC.Base.++ w_s5pE8 sat_s5pEa;
        };

lvl9_r5kSr :: forall a. [a]
[GblId] =
    [] \u [] GHC.List.reverse1 GHC.Types.[] GHC.Types.[];

lvl10_r5kSs :: forall a. [a]
[GblId] =
    [] \u [] GHC.Base.++ GHC.Types.[] lvl9_r5kSr;

poly_$wgo_r5kSt
  :: forall a. [a] -> GHC.Prim.Word# -> [a] -> [a] -> [[a]]
[GblId, Arity=4, Str=<S,1*U><L,U><L,U><L,U>, Unf=OtherCon []] =
    sat-only [] \r [w_s5pEb ww_s5pEc ww1_s5pEd ww2_s5pEe]
        case w_s5pEb of {
          [] -> [] [];
          : y_s5pEg [Occ=OnceL*] ys_s5pEh [Occ=Once*] ->
              case plusWord# [ww_s5pEc 1##] of lp_s5pEi [Dmd=<S,U>] {
                __DEFAULT ->
                    case ltWord# [lp_s5pEi 255##] of {
                      __DEFAULT ->
                          case plusWord# [lp_s5pEi 1##] of sat_s5pEk {
                            __DEFAULT ->
                                case and# [lp_s5pEi sat_s5pEk] of {
                                  __DEFAULT ->
                                      let {
                                        b'_s5pEm :: [a_s5koc]
                                        [LclId, Unf=OtherCon []] =
                                            CCCS :! [y_s5pEg ww2_s5pEe]; } in
                                      let {
                                        sat_s5pEp [Occ=Once] :: [[a_s5koc]]
                                        [LclId] =
                                            [ww1_s5pEd ys_s5pEh lp_s5pEi b'_s5pEm] \u []
                                                poly_$wgo_r5kSt
                                                    ys_s5pEh lp_s5pEi ww1_s5pEd b'_s5pEm; } in
                                      let {
                                        sat_s5pEo [Occ=Once] :: [a_s5koc]
                                        [LclId] =
                                            [ww1_s5pEd b'_s5pEm] \u []
                                                let {
                                                  sat_s5pEn [Occ=Once, Dmd=<L,1*U>] :: [a_s5koc]
                                                  [LclId] =
                                                      [b'_s5pEm] \s []
                                                          GHC.List.reverse1 b'_s5pEm GHC.Types.[];
                                                } in  GHC.Base.++ ww1_s5pEd sat_s5pEn;
                                      } in  : [sat_s5pEo sat_s5pEp];
                                  0## ->
                                      let {
                                        b'_s5pEq :: [a_s5koc]
                                        [LclId] =
                                            [ww1_s5pEd ww2_s5pEe y_s5pEg] \u []
                                                let {
                                                  sat_s5pEs [Occ=Once, Dmd=<L,1*U>] :: [a_s5koc]
                                                  [LclId] =
                                                      [ww2_s5pEe y_s5pEg] \s []
                                                          let {
                                                            sat_s5pEr [Occ=Once] :: [a_s5koc]
                                                            [LclId] =
                                                                CCCS :! [y_s5pEg ww2_s5pEe];
                                                          } in 
                                                            GHC.List.reverse1
                                                                sat_s5pEr GHC.Types.[];
                                                } in  GHC.Base.++ ww1_s5pEd sat_s5pEs; } in
                                      let {
                                        sat_s5pEu [Occ=Once] :: [[a_s5koc]]
                                        [LclId] =
                                            [ys_s5pEh lp_s5pEi b'_s5pEq] \u []
                                                poly_$wgo_r5kSt
                                                    ys_s5pEh lp_s5pEi b'_s5pEq GHC.Types.[]; } in
                                      let {
                                        sat_s5pEt [Occ=Once] :: [a_s5koc]
                                        [LclId] =
                                            [b'_s5pEq] \u [] GHC.Base.++ b'_s5pEq lvl9_r5kSr;
                                      } in  : [sat_s5pEt sat_s5pEu];
                                };
                          };
                      1# ->
                          let {
                            b'_s5pEv :: [a_s5koc]
                            [LclId, Unf=OtherCon []] =
                                CCCS :! [y_s5pEg ww2_s5pEe]; } in
                          let {
                            sat_s5pEy [Occ=Once] :: [[a_s5koc]]
                            [LclId] =
                                [ww1_s5pEd ys_s5pEh lp_s5pEi b'_s5pEv] \u []
                                    poly_$wgo_r5kSt ys_s5pEh lp_s5pEi ww1_s5pEd b'_s5pEv; } in
                          let {
                            sat_s5pEx [Occ=Once] :: [a_s5koc]
                            [LclId] =
                                [ww1_s5pEd b'_s5pEv] \u []
                                    let {
                                      sat_s5pEw [Occ=Once, Dmd=<L,1*U>] :: [a_s5koc]
                                      [LclId] =
                                          [b'_s5pEv] \s [] GHC.List.reverse1 b'_s5pEv GHC.Types.[];
                                    } in  GHC.Base.++ ww1_s5pEd sat_s5pEw;
                          } in  : [sat_s5pEx sat_s5pEy];
                    };
              };
        };

Data.OldList.$winits [InlPrag=NOINLINE]
  :: forall a. [a] -> (# [a], [[a]] #)
[GblId, Arity=1, Str=<L,1*U>, Unf=OtherCon []] =
    [] \r [w_s5pEz]
        let {
          sat_s5pEA [Occ=Once] :: [[a_s5koc]]
          [LclId] =
              [w_s5pEz] \u []
                  poly_$wgo_r5kSt w_s5pEz 0## GHC.Types.[] GHC.Types.[];
        } in  (#,#) [lvl10_r5kSs sat_s5pEA];

Data.OldList.inits [InlPrag=NOUSERINLINE[0]]
  :: forall a. [a] -> [[a]]
[GblId, Arity=1, Str=<L,1*U>m2, Unf=OtherCon []] =
    [] \r [w_s5pEB]
        case Data.OldList.$winits w_s5pEB of {
          (#,#) ww1_s5pED [Occ=Once] ww2_s5pEE [Occ=Once] ->
              : [ww1_s5pED ww2_s5pEE];
        };

Data.OldList.$tc'SnocBuilder3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'SnocBuilder"#;

Data.OldList.$tc'SnocBuilder2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.OldList.$tc'SnocBuilder3];

Data.OldList.$tcSnocBuilder2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SnocBuilder"#;

Data.OldList.$tcSnocBuilder1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.OldList.$tcSnocBuilder2];

Data.OldList.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Data.OldList"#;

Data.OldList.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.OldList.$trModule2];

Data.OldList.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Data.OldList.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.OldList.$trModule4];

Data.OldList.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Data.OldList.$trModule3
                                     Data.OldList.$trModule1];

Data.OldList.$tcSnocBuilder :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [17650604350574790456##
                                    3021529305462083578##
                                    Data.OldList.$trModule
                                    Data.OldList.$tcSnocBuilder1
                                    0#
                                    GHC.Types.krep$*Arr*];

$krep_r5kSu :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcWord
                                              GHC.Types.[]];

$krep1_r5kSv :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

$krep2_r5kSw :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep1_r5kSv GHC.Types.[]];

$krep3_r5kSx :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep2_r5kSw];

$krep4_r5kSy :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Data.OldList.$tcSnocBuilder
                                              $krep2_r5kSw];

$krep5_r5kSz :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_r5kSx $krep4_r5kSy];

$krep6_r5kSA :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_r5kSx $krep5_r5kSz];

Data.OldList.$tc'SnocBuilder1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_r5kSu $krep6_r5kSA];

Data.OldList.$tc'SnocBuilder :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [6719263830224029004##
                                    9134053658265160069##
                                    Data.OldList.$trModule
                                    Data.OldList.$tc'SnocBuilder2
                                    1#
                                    Data.OldList.$tc'SnocBuilder1];

lvl11_r5kSB :: GHC.Types.Char -> GHC.Types.Bool
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(1*U)>,
 Unf=OtherCon []] =
    [] \r [ds_s5pEF]
        case ds_s5pEF of {
          GHC.Types.C# x_s5pEH [Occ=Once!] ->
              case x_s5pEH of {
                __DEFAULT -> GHC.Types.False [];
                '\n'# -> GHC.Types.True [];
              };
        };

Data.OldList.lines [Occ=LoopBreaker]
  :: GHC.Base.String -> [GHC.Base.String]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s5pEJ]
        case ds_s5pEJ of wild_s5pEK {
          [] -> [] [];
          : _ [Occ=Dead] _ [Occ=Dead] ->
              let {
                ds1_s5pEN [Dmd=<L,U(1*U,1*U)>]
                  :: ([GHC.Types.Char], [[GHC.Types.Char]])
                [LclId] =
                    [wild_s5pEK] \u []
                        case GHC.List.$wbreak lvl11_r5kSB wild_s5pEK of {
                          (#,#) ww1_s5pEP [Occ=Once] ww2_s5pEQ [Occ=Once!] ->
                              let {
                                sat_s5pEU [Occ=Once] :: [[GHC.Types.Char]]
                                [LclId] =
                                    [ww2_s5pEQ] \u []
                                        case ww2_s5pEQ of {
                                          [] -> [] [];
                                          : _ [Occ=Dead] s''_s5pET [Occ=Once] ->
                                              Data.OldList.lines s''_s5pET;
                                        };
                              } in  (,) [ww1_s5pEP sat_s5pEU];
                        }; } in
              let {
                sat_s5pF2 [Occ=Once] :: [[GHC.Types.Char]]
                [LclId] =
                    [ds1_s5pEN] \u []
                        case ds1_s5pEN of {
                          (,) _ [Occ=Dead] t_s5pF1 [Occ=Once] -> t_s5pF1;
                        }; } in
              let {
                sat_s5pEY [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [ds1_s5pEN] \u []
                        case ds1_s5pEN of {
                          (,) h_s5pEW [Occ=Once] _ [Occ=Dead] -> h_s5pEW;
                        };
              } in  : [sat_s5pEY sat_s5pF2];
        };

Data.OldList.SnocBuilder
  :: forall a.
     GHC.Prim.Word# -> [a] -> [a] -> Data.OldList.SnocBuilder a
[GblId[DataCon],
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        Data.OldList.SnocBuilder [eta_B3 eta_B2 eta_B1];


==================== STG syntax: ====================
2018-03-16 16:00:25.474909243 UTC

Data.OldList.$WSnocBuilder [InlPrag=INLINE[2]]
  :: forall a.
     GHC.Types.Word -> [a] -> [a] -> Data.OldList.SnocBuilder a
[GblId[DataConWrapper],
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,U><L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [dt_s5pkE dt_s5pkF dt_s5pkG]
        case dt_s5pkE of {
          GHC.Types.W# dt_s5pkI [Occ=Once] ->
              Data.OldList.SnocBuilder [dt_s5pkI dt_s5pkF dt_s5pkG];
        };

Data.OldList.dropWhileEnd
  :: forall a. (a -> GHC.Types.Bool) -> [a] -> [a]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,C(U)><S,1*U>,
 Unf=OtherCon []] =
    [] \r [p_s5pkJ eta_s5pkK]
        let {
          go_s5pkL [Occ=LoopBreaker] :: [a_a5jar] -> [a_a5jar]
          [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
              sat-only [p_s5pkJ go_s5pkL] \r [ds_s5pkM]
                  case ds_s5pkM of {
                    [] -> [] [];
                    : y_s5pkO ys_s5pkP [Occ=Once*] ->
                        case p_s5pkJ y_s5pkO of {
                          GHC.Types.False ->
                              let {
                                sat_s5pkR [Occ=Once] :: [a_a5jar]
                                [LclId] =
                                    [go_s5pkL ys_s5pkP] \u [] go_s5pkL ys_s5pkP;
                              } in  : [y_s5pkO sat_s5pkR];
                          GHC.Types.True ->
                              case go_s5pkL ys_s5pkP of wild2_s5pkS {
                                [] -> [] [];
                                : _ [Occ=Dead] _ [Occ=Dead] -> : [y_s5pkO wild2_s5pkS];
                              };
                        };
                  };
        } in  go_s5pkL eta_s5pkK;

Data.OldList.stripPrefix [Occ=LoopBreaker]
  :: forall a. GHC.Classes.Eq a => [a] -> [a] -> GHC.Base.Maybe [a]
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U(C(C1(U)),A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dEq_s5pkV ds_s5pkW ys_s5pkX]
        case ds_s5pkW of {
          [] -> GHC.Base.Just [ys_s5pkX];
          : x_s5pkZ [Occ=Once] xs_s5pl0 [Occ=Once] ->
              case ys_s5pkX of {
                [] -> GHC.Base.Nothing [];
                : y_s5pl2 [Occ=Once] ys1_s5pl3 [Occ=Once] ->
                    case GHC.Classes.== $dEq_s5pkV x_s5pkZ y_s5pl2 of {
                      GHC.Types.False -> GHC.Base.Nothing [];
                      GHC.Types.True ->
                          Data.OldList.stripPrefix $dEq_s5pkV xs_s5pl0 ys1_s5pl3;
                    };
              };
        };

Data.OldList.find
  :: forall a. (a -> GHC.Types.Bool) -> [a] -> GHC.Base.Maybe a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,C(U)><S,1*U>,
 Unf=OtherCon []] =
    [] \r [p_s5pl5 x_s5pl6]
        let-no-escape {
          go_s5pl7 [Occ=LoopBreakerT[1]]
            :: [a_a5j9W] -> GHC.Base.Maybe a_a5j9W
          [LclId[JoinId(1)], Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
              sat-only [p_s5pl5 go_s5pl7] \r [ds_s5pl8]
                  case ds_s5pl8 of {
                    [] -> GHC.Base.Nothing [];
                    : y_s5pla ys_s5plb [Occ=Once] ->
                        case p_s5pl5 y_s5pla of {
                          GHC.Types.False -> go_s5pl7 ys_s5plb;
                          GHC.Types.True -> GHC.Base.Just [y_s5pla];
                        };
                  };
        } in  go_s5pl7 x_s5pl6;

Data.OldList.elemIndex
  :: forall a.
     GHC.Classes.Eq a =>
     a -> [a] -> GHC.Base.Maybe GHC.Types.Int
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*U(1*C1(C(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dEq_s5pld x_s5ple]
        let {
          p_s5plf [Occ=OnceL!, Dmd=<L,C(U)>] :: a_a5jaa -> GHC.Types.Bool
          [LclId] =
              [$dEq_s5pld x_s5ple] \u [] GHC.Classes.== $dEq_s5pld x_s5ple; } in
        let {
          sat_s5plq [Occ=OnceT[0]]
            :: [a_a5jaa] -> GHC.Base.Maybe GHC.Types.Int
          [LclId] =
              [p_s5plf] \r [x1_s5plg]
                  let-no-escape {
                    go_s5plh [Occ=LoopBreakerT[2]]
                      :: [a_a5jaa] -> GHC.Prim.Int# -> GHC.Base.Maybe GHC.Types.Int
                    [LclId[JoinId(2)], Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
                        sat-only [p_s5plf go_s5plh] \r [ds_s5pli eta_s5plj]
                            case ds_s5pli of {
                              [] -> GHC.Base.Nothing [];
                              : y_s5pll [Occ=Once] ys_s5plm [Occ=Once] ->
                                  case p_s5plf y_s5pll of {
                                    GHC.Types.False ->
                                        case +# [eta_s5plj 1#] of sat_s5plo {
                                          __DEFAULT -> go_s5plh ys_s5plm sat_s5plo;
                                        };
                                    GHC.Types.True ->
                                        let {
                                          sat_s5plp [Occ=Once] :: GHC.Types.Int
                                          [LclId] =
                                              CCCS GHC.Types.I#! [eta_s5plj];
                                        } in  GHC.Base.Just [sat_s5plp];
                                  };
                            };
                  } in  go_s5plh x1_s5plg 0#;
        } in  sat_s5plq;

Data.OldList.findIndex
  :: forall a.
     (a -> GHC.Types.Bool) -> [a] -> GHC.Base.Maybe GHC.Types.Int
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,C(U)><S,1*U>,
 Unf=OtherCon []] =
    [] \r [p_s5plr x_s5pls]
        let-no-escape {
          go_s5plt [Occ=LoopBreakerT[2]]
            :: [a_a5j9N] -> GHC.Prim.Int# -> GHC.Base.Maybe GHC.Types.Int
          [LclId[JoinId(2)], Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
              sat-only [p_s5plr go_s5plt] \r [ds_s5plu eta_s5plv]
                  case ds_s5plu of {
                    [] -> GHC.Base.Nothing [];
                    : y_s5plx [Occ=Once] ys_s5ply [Occ=Once] ->
                        case p_s5plr y_s5plx of {
                          GHC.Types.False ->
                              case +# [eta_s5plv 1#] of sat_s5plA {
                                __DEFAULT -> go_s5plt ys_s5ply sat_s5plA;
                              };
                          GHC.Types.True ->
                              let {
                                sat_s5plB [Occ=Once] :: GHC.Types.Int
                                [LclId] =
                                    CCCS GHC.Types.I#! [eta_s5plv];
                              } in  GHC.Base.Just [sat_s5plB];
                        };
                  };
        } in  go_s5plt x_s5pls 0#;

Data.OldList.findIndices [InlPrag=INLINE (sat-args=2)]
  :: forall a. (a -> GHC.Types.Bool) -> [a] -> [GHC.Types.Int]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,C(U)><S,1*U>,
 Unf=OtherCon []] =
    [] \r [p_s5plC ls_s5plD]
        let {
          go_s5plE [Occ=LoopBreaker]
            :: [a_a5j9e] -> GHC.Prim.Int# -> [GHC.Types.Int]
          [LclId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
              sat-only [p_s5plC go_s5plE] \r [ds_s5plF eta_s5plG]
                  case ds_s5plF of {
                    [] -> [] [];
                    : y_s5plI [Occ=Once] ys_s5plJ [Occ=Once*] ->
                        case p_s5plC y_s5plI of {
                          GHC.Types.False ->
                              case +# [eta_s5plG 1#] of sat_s5plL {
                                __DEFAULT -> go_s5plE ys_s5plJ sat_s5plL;
                              };
                          GHC.Types.True ->
                              let {
                                sat_s5plO [Occ=Once] :: [GHC.Types.Int]
                                [LclId] =
                                    [go_s5plE eta_s5plG ys_s5plJ] \u []
                                        case +# [eta_s5plG 1#] of sat_s5plN {
                                          __DEFAULT -> go_s5plE ys_s5plJ sat_s5plN;
                                        }; } in
                              let {
                                sat_s5plM [Occ=Once] :: GHC.Types.Int
                                [LclId] =
                                    CCCS GHC.Types.I#! [eta_s5plG];
                              } in  : [sat_s5plM sat_s5plO];
                        };
                  };
        } in  go_s5plE ls_s5plD 0#;

Data.OldList.elemIndices
  :: forall a. GHC.Classes.Eq a => a -> [a] -> [GHC.Types.Int]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*U(1*C1(C(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dEq_s5plP x_s5plQ]
        let {
          sat_s5plR [Occ=Once] :: a_a5ja3 -> GHC.Types.Bool
          [LclId] =
              [$dEq_s5plP x_s5plQ] \u [] GHC.Classes.== $dEq_s5plP x_s5plQ;
        } in  Data.OldList.findIndices sat_s5plR;

Data.OldList.isPrefixOf [Occ=LoopBreaker]
  :: forall a. GHC.Classes.Eq a => [a] -> [a] -> GHC.Types.Bool
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U(C(C1(U)),A)><S,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [$dEq_s5plS ds_s5plT ds1_s5plU]
        case ds_s5plT of {
          [] -> GHC.Types.True [];
          : ipv_s5plW [Occ=Once] ipv1_s5plX [Occ=Once] ->
              case ds1_s5plU of {
                [] -> GHC.Types.False [];
                : ipv2_s5plZ [Occ=Once] ipv3_s5pm0 [Occ=Once] ->
                    case GHC.Classes.== $dEq_s5plS ipv_s5plW ipv2_s5plZ of {
                      GHC.Types.False -> GHC.Types.False [];
                      GHC.Types.True ->
                          Data.OldList.isPrefixOf $dEq_s5plS ipv1_s5plX ipv3_s5pm0;
                    };
              };
        };

Data.OldList.isInfixOf
  :: forall a. GHC.Classes.Eq a => [a] -> [a] -> GHC.Types.Bool
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U(C(C1(U)),A)><S,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dEq_s5pm2 needle_s5pm3 haystack_s5pm4]
        let-no-escape {
          tailsGo_s5pm5 [Occ=LoopBreakerT[1]] :: [a_a5j96] -> GHC.Types.Bool
          [LclId[JoinId(1)], Arity=1, Str=<L,U>, Unf=OtherCon []] =
              sat-only [$dEq_s5pm2 needle_s5pm3 tailsGo_s5pm5] \r [xs_s5pm6]
                  case Data.OldList.isPrefixOf $dEq_s5pm2 needle_s5pm3 xs_s5pm6 of {
                    GHC.Types.False ->
                        case xs_s5pm6 of {
                          [] -> GHC.Types.False [];
                          : _ [Occ=Dead] xs'_s5pma [Occ=Once] -> tailsGo_s5pm5 xs'_s5pma;
                        };
                    GHC.Types.True -> GHC.Types.True [];
                  };
        } in  tailsGo_s5pm5 haystack_s5pm4;

Data.OldList.dropLength [Occ=LoopBreaker]
  :: forall a b. [a] -> [b] -> [b]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s5pmb y_s5pmc]
        case ds_s5pmb of {
          [] -> y_s5pmc;
          : _ [Occ=Dead] ipv1_s5pmf [Occ=Once] ->
              case y_s5pmc of {
                [] -> [] [];
                : _ [Occ=Dead] ipv3_s5pmi [Occ=Once] ->
                    Data.OldList.dropLength ipv1_s5pmf ipv3_s5pmi;
              };
        };

Data.OldList.dropLengthMaybe [Occ=LoopBreaker]
  :: forall a b. [a] -> [b] -> GHC.Base.Maybe [b]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ds_s5pmj y_s5pmk]
        case ds_s5pmj of {
          [] -> GHC.Base.Just [y_s5pmk];
          : _ [Occ=Dead] ipv1_s5pmn [Occ=Once] ->
              case y_s5pmk of {
                [] -> GHC.Base.Nothing [];
                : _ [Occ=Dead] ipv3_s5pmq [Occ=Once] ->
                    Data.OldList.dropLengthMaybe ipv1_s5pmn ipv3_s5pmq;
              };
        };

Data.OldList.isSuffixOf
  :: forall a. GHC.Classes.Eq a => [a] -> [a] -> GHC.Types.Bool
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U(C(C1(U)),A)><S,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dEq_s5pmr ns_s5pms hs_s5pmt]
        case Data.OldList.dropLengthMaybe ns_s5pms hs_s5pmt of {
          GHC.Base.Nothing -> GHC.Types.False [];
          GHC.Base.Just x_s5pmv [Occ=Once] ->
              case Data.OldList.dropLength x_s5pmv hs_s5pmt of sat_s5pmw {
                __DEFAULT -> GHC.Classes.$fEq[]_$c== $dEq_s5pmr ns_s5pms sat_s5pmw;
              };
        };

Data.OldList.elem_by [Occ=LoopBreaker]
  :: forall a.
     (a -> a -> GHC.Types.Bool) -> a -> [a] -> GHC.Types.Bool
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s5pmx ds1_s5pmy ds2_s5pmz]
        case ds2_s5pmz of {
          [] -> GHC.Types.False [];
          : x_s5pmB [Occ=Once] xs_s5pmC [Occ=Once] ->
              case ds_s5pmx x_s5pmB ds1_s5pmy of {
                GHC.Types.False ->
                    Data.OldList.elem_by ds_s5pmx ds1_s5pmy xs_s5pmC;
                GHC.Types.True -> GHC.Types.True [];
              };
        };

Data.OldList.nubBy
  :: forall a. (a -> a -> GHC.Types.Bool) -> [a] -> [a]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><S,1*U>,
 Unf=OtherCon []] =
    [] \r [eq_s5pmE l_s5pmF]
        let {
          nubBy'_s5pmG [Occ=LoopBreaker]
            :: [a_a5j7x] -> [a_a5j7x] -> [a_a5j7x]
          [LclId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
              sat-only [eq_s5pmE nubBy'_s5pmG] \r [ds_s5pmH ds1_s5pmI]
                  case ds_s5pmH of {
                    [] -> [] [];
                    : y_s5pmK ys_s5pmL [Occ=Once*] ->
                        case Data.OldList.elem_by eq_s5pmE y_s5pmK ds1_s5pmI of {
                          GHC.Types.False ->
                              let {
                                sat_s5pmO [Occ=Once] :: [a_a5j7x]
                                [LclId] =
                                    [nubBy'_s5pmG ds1_s5pmI y_s5pmK ys_s5pmL] \u []
                                        let {
                                          sat_s5pmN [Occ=Once] :: [a_a5j7x]
                                          [LclId] =
                                              CCCS :! [y_s5pmK ds1_s5pmI];
                                        } in  nubBy'_s5pmG ys_s5pmL sat_s5pmN;
                              } in  : [y_s5pmK sat_s5pmO];
                          GHC.Types.True -> nubBy'_s5pmG ys_s5pmL ds1_s5pmI;
                        };
                  };
        } in  nubBy'_s5pmG l_s5pmF GHC.Types.[];

Data.OldList.nub :: forall a. GHC.Classes.Eq a => [a] -> [a]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*U(1*C(C1(U)),A)><S,1*U>,
 Unf=OtherCon []] =
    [] \r [$dEq_s5pmP eta_s5pmQ]
        let {
          sat_s5pmR [Occ=Once, Dmd=<L,C(C1(U))>]
            :: a_a5j8h -> a_a5j8h -> GHC.Types.Bool
          [LclId] =
              [$dEq_s5pmP] \u [] GHC.Classes.== $dEq_s5pmP;
        } in  Data.OldList.nubBy sat_s5pmR eta_s5pmQ;

Data.OldList.deleteBy [Occ=LoopBreaker]
  :: forall a. (a -> a -> GHC.Types.Bool) -> a -> [a] -> [a]
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s5pmS ds1_s5pmT ds2_s5pmU]
        case ds2_s5pmU of {
          [] -> [] [];
          : y_s5pmW ys_s5pmX [Occ=Once*] ->
              case ds_s5pmS ds1_s5pmT y_s5pmW of {
                GHC.Types.False ->
                    let {
                      sat_s5pmZ [Occ=Once] :: [a_a5j6X]
                      [LclId] =
                          [ds_s5pmS ds1_s5pmT ys_s5pmX] \u []
                              Data.OldList.deleteBy ds_s5pmS ds1_s5pmT ys_s5pmX;
                    } in  : [y_s5pmW sat_s5pmZ];
                GHC.Types.True -> ys_s5pmX;
              };
        };

Data.OldList.deleteFirstsBy
  :: forall a. (a -> a -> GHC.Types.Bool) -> [a] -> [a] -> [a]
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [eq_s5pn0 eta_s5pn1 eta1_s5pn2]
        let-no-escape {
          go_s5pn3 [Occ=LoopBreakerT[2]]
            :: [a_a5j71] -> [a_a5j71] -> [a_a5j71]
          [LclId[JoinId(2)], Arity=2, Str=<S,1*U><S,1*U>, Unf=OtherCon []] =
              sat-only [eq_s5pn0 go_s5pn3] \r [ds_s5pn4 eta2_s5pn5]
                  case ds_s5pn4 of {
                    [] -> eta2_s5pn5;
                    : y_s5pn7 [Occ=Once] ys_s5pn8 [Occ=Once] ->
                        case
                            Data.OldList.deleteBy eq_s5pn0 y_s5pn7 eta2_s5pn5
                        of
                        sat_s5pn9
                        { __DEFAULT -> go_s5pn3 ys_s5pn8 sat_s5pn9;
                        };
                  };
        } in  go_s5pn3 eta1_s5pn2 eta_s5pn1;

Data.OldList.delete
  :: forall a. GHC.Classes.Eq a => a -> [a] -> [a]
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*U(1*C(C1(U)),A)><L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [$dEq_s5pna eta_s5pnb eta1_s5pnc]
        let {
          sat_s5pnd [Occ=Once, Dmd=<L,C(C1(U))>]
            :: a_a5j7c -> a_a5j7c -> GHC.Types.Bool
          [LclId] =
              [$dEq_s5pna] \u [] GHC.Classes.== $dEq_s5pna;
        } in  Data.OldList.deleteBy sat_s5pnd eta_s5pnb eta1_s5pnc;

Data.OldList.\\ :: forall a. GHC.Classes.Eq a => [a] -> [a] -> [a]
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*U(1*C(C1(U)),A)><S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [$dEq_s5pne eta_s5pnf eta1_s5png]
        let {
          lvl12_s5pnh [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: a_a5j7j -> a_a5j7j -> GHC.Types.Bool
          [LclId] =
              [$dEq_s5pne] \u [] GHC.Classes.== $dEq_s5pne;
        } in 
          let-no-escape {
            go_s5pni [Occ=LoopBreakerT[2]]
              :: [a_a5j7j] -> [a_a5j7j] -> [a_a5j7j]
            [LclId[JoinId(2)], Arity=2, Str=<S,1*U><S,1*U>, Unf=OtherCon []] =
                sat-only [lvl12_s5pnh go_s5pni] \r [ds_s5pnj eta2_s5pnk]
                    case ds_s5pnj of {
                      [] -> eta2_s5pnk;
                      : y_s5pnm [Occ=Once] ys_s5pnn [Occ=Once] ->
                          case
                              Data.OldList.deleteBy lvl12_s5pnh y_s5pnm eta2_s5pnk
                          of
                          sat_s5pno
                          { __DEFAULT -> go_s5pni ys_s5pnn sat_s5pno;
                          };
                    };
          } in  go_s5pni eta1_s5png eta_s5pnf;

Data.OldList.unionBy
  :: forall a. (a -> a -> GHC.Types.Bool) -> [a] -> [a] -> [a]
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><S,U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [eq_s5pnp xs_s5pnq ys_s5pnr]
        let {
          sat_s5pnA [Occ=Once, Dmd=<L,1*U>] :: [a_a5j80]
          [LclId] =
              [eq_s5pnp xs_s5pnq ys_s5pnr] \s []
                  case Data.OldList.nubBy eq_s5pnp ys_s5pnr of sat_s5pnz {
                    __DEFAULT ->
                        let-no-escape {
                          go_s5pns [Occ=LoopBreakerT[2]]
                            :: [a_a5j80] -> [a_a5j80] -> [a_a5j80]
                          [LclId[JoinId(2)], Arity=2, Str=<S,1*U><S,1*U>, Unf=OtherCon []] =
                              sat-only [eq_s5pnp go_s5pns] \r [ds_s5pnt eta_s5pnu]
                                  case ds_s5pnt of {
                                    [] -> eta_s5pnu;
                                    : y_s5pnw [Occ=Once] ys1_s5pnx [Occ=Once] ->
                                        case
                                            Data.OldList.deleteBy eq_s5pnp y_s5pnw eta_s5pnu
                                        of
                                        sat_s5pny
                                        { __DEFAULT -> go_s5pns ys1_s5pnx sat_s5pny;
                                        };
                                  };
                        } in  go_s5pns xs_s5pnq sat_s5pnz;
                  };
        } in  GHC.Base.++ xs_s5pnq sat_s5pnA;

Data.OldList.union
  :: forall a. GHC.Classes.Eq a => [a] -> [a] -> [a]
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*U(1*C(C1(U)),A)><S,U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [$dEq_s5pnB eta_s5pnC eta1_s5pnD]
        let {
          sat_s5pnE [Occ=Once, Dmd=<L,C(C1(U))>]
            :: a_a5j8a -> a_a5j8a -> GHC.Types.Bool
          [LclId] =
              [$dEq_s5pnB] \u [] GHC.Classes.== $dEq_s5pnB;
        } in  Data.OldList.unionBy sat_s5pnE eta_s5pnC eta1_s5pnD;

Data.OldList.intersectBy
  :: forall a. (a -> a -> GHC.Types.Bool) -> [a] -> [a] -> [a]
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C(U))><S,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s5pnF ds1_s5pnG ds2_s5pnH]
        case ds1_s5pnG of wild_s5pnI {
          [] -> [] [];
          : _ [Occ=Dead] _ [Occ=Dead] ->
              case ds2_s5pnH of wild1_s5pnL {
                [] -> [] [];
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    let {
                      go_s5pnO [Occ=LoopBreaker] :: [a_a5j6L] -> [a_a5j6L]
                      [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                          sat-only [ds_s5pnF wild1_s5pnL go_s5pnO] \r [ds3_s5pnP]
                              case ds3_s5pnP of {
                                [] -> [] [];
                                : y_s5pnR ys_s5pnS [Occ=Once*] ->
                                    let {
                                      sat_s5pnT [Occ=Once, Dmd=<L,C(U)>]
                                        :: a_a5j6L -> GHC.Types.Bool
                                      [LclId] =
                                          [ds_s5pnF y_s5pnR] \u [] ds_s5pnF y_s5pnR;
                                    } in 
                                      case GHC.List.any sat_s5pnT wild1_s5pnL of {
                                        GHC.Types.False -> go_s5pnO ys_s5pnS;
                                        GHC.Types.True ->
                                            let {
                                              sat_s5pnV [Occ=Once] :: [a_a5j6L]
                                              [LclId] =
                                                  [go_s5pnO ys_s5pnS] \u [] go_s5pnO ys_s5pnS;
                                            } in  : [y_s5pnR sat_s5pnV];
                                      };
                              };
                    } in  go_s5pnO wild_s5pnI;
              };
        };

Data.OldList.intersect
  :: forall a. GHC.Classes.Eq a => [a] -> [a] -> [a]
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*U(1*C(C(U)),A)><S,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [$dEq_s5pnW eta_s5pnX eta1_s5pnY]
        let {
          sat_s5pnZ [Occ=Once, Dmd=<L,C(C(U))>]
            :: a_a5j6Q -> a_a5j6Q -> GHC.Types.Bool
          [LclId] =
              [$dEq_s5pnW] \u [] GHC.Classes.== $dEq_s5pnW;
        } in  Data.OldList.intersectBy sat_s5pnZ eta_s5pnX eta1_s5pnY;

Data.OldList.prependToAll [Occ=LoopBreaker]
  :: forall a. a -> [a] -> [a]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s5po0 ds1_s5po1]
        case ds1_s5po1 of {
          [] -> [] [];
          : x_s5po3 [Occ=Once] xs_s5po4 [Occ=Once] ->
              let {
                sat_s5po5 [Occ=Once] :: [a_a5j6w]
                [LclId] =
                    [ds_s5po0 xs_s5po4] \u []
                        Data.OldList.prependToAll ds_s5po0 xs_s5po4; } in
              let {
                sat_s5po6 [Occ=Once] :: [a_a5j6w]
                [LclId] =
                    CCCS :! [x_s5po3 sat_s5po5];
              } in  : [ds_s5po0 sat_s5po6];
        };

Data.OldList.intersperse :: forall a. a -> [a] -> [a]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s5po7 ds1_s5po8]
        case ds1_s5po8 of {
          [] -> [] [];
          : x_s5poa [Occ=Once] xs_s5pob [Occ=Once] ->
              let {
                sat_s5poc [Occ=Once] :: [a_a5j6B]
                [LclId] =
                    [ds_s5po7 xs_s5pob] \u []
                        Data.OldList.prependToAll ds_s5po7 xs_s5pob;
              } in  : [x_s5poa sat_s5poc];
        };

Data.OldList.intercalate1 [Occ=LoopBreaker]
  :: forall a. [[a]] -> [a]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s5pod]
        case ds_s5pod of {
          [] -> [] [];
          : y_s5pof [Occ=Once] ys_s5pog [Occ=Once] ->
              let {
                sat_s5poh [Occ=Once, Dmd=<L,1*U>] :: [a_a5j6F]
                [LclId] =
                    [ys_s5pog] \s [] Data.OldList.intercalate1 ys_s5pog;
              } in  GHC.Base.++ y_s5pof sat_s5poh;
        };

Data.OldList.intercalate :: forall a. [a] -> [[a]] -> [a]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [xs_s5poi xss_s5poj]
        case xss_s5poj of {
          [] -> [] [];
          : x_s5pol [Occ=Once] xs1_s5pom [Occ=Once] ->
              let {
                sat_s5pon [Occ=Once] :: [[a_a5j6F]]
                [LclId] =
                    [xs_s5poi xs1_s5pom] \u []
                        Data.OldList.prependToAll xs_s5poi xs1_s5pom; } in
              let {
                sat_s5poo [Occ=Once] :: [[a_a5j6F]]
                [LclId] =
                    CCCS :! [x_s5pol sat_s5pon];
              } in  Data.OldList.intercalate1 sat_s5poo;
        };

poly_go_r5kSf :: forall a. [[a]] -> [[a]]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    sat-only [] \r [ds_s5pop]
        case ds_s5pop of {
          [] -> [] [];
          : y_s5por [Occ=Once!] ys_s5pos [Occ=Once*] ->
              case y_s5por of {
                [] -> poly_go_r5kSf ys_s5pos;
                : _ [Occ=Dead] t_s5pov [Occ=Once] ->
                    let {
                      sat_s5pow [Occ=Once] :: [[a_a5j6n]]
                      [LclId] =
                          [ys_s5pos] \u [] poly_go_r5kSf ys_s5pos;
                    } in  : [t_s5pov sat_s5pow];
              };
        };

poly_go1_r5kSg :: forall a. [[a]] -> [a]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    sat-only [] \r [ds_s5pox]
        case ds_s5pox of {
          [] -> [] [];
          : y_s5poz [Occ=Once!] ys_s5poA [Occ=Once*] ->
              case y_s5poz of {
                [] -> poly_go1_r5kSg ys_s5poA;
                : h_s5poC [Occ=Once] _ [Occ=Dead] ->
                    let {
                      sat_s5poE [Occ=Once] :: [a_a5j6n]
                      [LclId] =
                          [ys_s5poA] \u [] poly_go1_r5kSg ys_s5poA;
                    } in  : [h_s5poC sat_s5poE];
              };
        };

Data.OldList.transpose [Occ=LoopBreaker]
  :: forall a. [[a]] -> [[a]]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s5poF]
        case ds_s5poF of {
          [] -> [] [];
          : ds1_s5poH [Occ=Once!] xss_s5poI ->
              case ds1_s5poH of {
                [] -> Data.OldList.transpose xss_s5poI;
                : x_s5poK [Occ=Once] xs_s5poL [Occ=Once] ->
                    let {
                      sat_s5poQ [Occ=Once] :: [[a_a5j6n]]
                      [LclId] =
                          [xss_s5poI xs_s5poL] \u []
                              let {
                                sat_s5poO [Occ=Once] :: [[a_a5j6n]]
                                [LclId] =
                                    [xss_s5poI] \u [] poly_go_r5kSf xss_s5poI; } in
                              let {
                                sat_s5poP [Occ=Once] :: [[a_a5j6n]]
                                [LclId] =
                                    CCCS :! [xs_s5poL sat_s5poO];
                              } in  Data.OldList.transpose sat_s5poP; } in
                    let {
                      sat_s5poM [Occ=Once] :: [a_a5j6n]
                      [LclId] =
                          [xss_s5poI] \u [] poly_go1_r5kSg xss_s5poI; } in
                    let {
                      sat_s5poN [Occ=Once] :: [a_a5j6n]
                      [LclId] =
                          CCCS :! [x_s5poK sat_s5poM];
                    } in  : [sat_s5poN sat_s5poQ];
              };
        };

Data.OldList.select [InlPrag=NOUSERINLINE[0]]
  :: forall a. (a -> GHC.Types.Bool) -> a -> ([a], [a]) -> ([a], [a])
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<C(S),1*C1(U)><L,U><L,U(1*U,1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s5poR w1_s5poS w2_s5poT]
        case w_s5poR w1_s5poS of {
          GHC.Types.False ->
              let {
                sat_s5pp2 [Occ=Once] :: [a_s5krI]
                [LclId] =
                    [w2_s5poT] \u []
                        case w2_s5poT of {
                          (,) _ [Occ=Dead] fs_s5pp1 [Occ=Once] -> fs_s5pp1;
                        }; } in
              let {
                sat_s5pp3 [Occ=Once] :: [a_s5krI]
                [LclId] =
                    CCCS :! [w1_s5poS sat_s5pp2]; } in
              let {
                sat_s5poY [Occ=Once] :: [a_s5krI]
                [LclId] =
                    [w2_s5poT] \u []
                        case w2_s5poT of {
                          (,) ts_s5poW [Occ=Once] _ [Occ=Dead] -> ts_s5poW;
                        };
              } in  (,) [sat_s5poY sat_s5pp3];
          GHC.Types.True ->
              let {
                sat_s5ppc [Occ=Once] :: [a_s5krI]
                [LclId] =
                    [w2_s5poT] \u []
                        case w2_s5poT of {
                          (,) _ [Occ=Dead] fs_s5ppb [Occ=Once] -> fs_s5ppb;
                        }; } in
              let {
                sat_s5pp7 [Occ=Once] :: [a_s5krI]
                [LclId] =
                    [w2_s5poT] \u []
                        case w2_s5poT of {
                          (,) ts_s5pp5 [Occ=Once] _ [Occ=Dead] -> ts_s5pp5;
                        }; } in
              let {
                sat_s5pp8 [Occ=Once] :: [a_s5krI]
                [LclId] =
                    CCCS :! [w1_s5poS sat_s5pp7];
              } in  (,) [sat_s5pp8 sat_s5ppc];
        };

Data.OldList.partition [InlPrag=INLINE (sat-args=2)]
  :: forall a. (a -> GHC.Types.Bool) -> [a] -> ([a], [a])
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,C(U)><S,1*U>m,
 Unf=OtherCon []] =
    [] \r [p_s5ppd xs_s5ppe]
        let {
          $wgo_s5ppf [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
            :: [a_a5j6i] -> (# [a_a5j6i], [a_a5j6i] #)
          [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
              sat-only [p_s5ppd $wgo_s5ppf] \r [w_s5ppg]
                  case w_s5ppg of {
                    [] -> (#,#) [GHC.Types.[] GHC.Types.[]];
                    : y_s5ppi ys_s5ppj [Occ=Once] ->
                        let {
                          w1_s5ppk [Dmd=<L,U(1*U,1*U)>] :: ([a_a5j6i], [a_a5j6i])
                          [LclId] =
                              [$wgo_s5ppf ys_s5ppj] \u []
                                  case $wgo_s5ppf ys_s5ppj of {
                                    (#,#) ww1_s5ppm [Occ=Once] ww2_s5ppn [Occ=Once] ->
                                        (,) [ww1_s5ppm ww2_s5ppn];
                                  };
                        } in 
                          case p_s5ppd y_s5ppi of {
                            GHC.Types.False ->
                                let {
                                  sat_s5ppw [Occ=Once] :: [a_a5j6i]
                                  [LclId] =
                                      [w1_s5ppk] \u []
                                          case w1_s5ppk of {
                                            (,) _ [Occ=Dead] fs_s5ppv [Occ=Once] -> fs_s5ppv;
                                          }; } in
                                let {
                                  sat_s5ppx [Occ=Once] :: [a_a5j6i]
                                  [LclId] =
                                      CCCS :! [y_s5ppi sat_s5ppw]; } in
                                let {
                                  sat_s5pps [Occ=Once] :: [a_a5j6i]
                                  [LclId] =
                                      [w1_s5ppk] \u []
                                          case w1_s5ppk of {
                                            (,) ts_s5ppq [Occ=Once] _ [Occ=Dead] -> ts_s5ppq;
                                          };
                                } in  (#,#) [sat_s5pps sat_s5ppx];
                            GHC.Types.True ->
                                let {
                                  sat_s5ppG [Occ=Once] :: [a_a5j6i]
                                  [LclId] =
                                      [w1_s5ppk] \u []
                                          case w1_s5ppk of {
                                            (,) _ [Occ=Dead] fs_s5ppF [Occ=Once] -> fs_s5ppF;
                                          }; } in
                                let {
                                  sat_s5ppB [Occ=Once] :: [a_a5j6i]
                                  [LclId] =
                                      [w1_s5ppk] \u []
                                          case w1_s5ppk of {
                                            (,) ts_s5ppz [Occ=Once] _ [Occ=Dead] -> ts_s5ppz;
                                          }; } in
                                let {
                                  sat_s5ppC [Occ=Once] :: [a_a5j6i]
                                  [LclId] =
                                      CCCS :! [y_s5ppi sat_s5ppB];
                                } in  (#,#) [sat_s5ppC sat_s5ppG];
                          };
                  };
        } in 
          case $wgo_s5ppf xs_s5ppe of {
            (#,#) ww1_s5ppI [Occ=Once] ww2_s5ppJ [Occ=Once] ->
                (,) [ww1_s5ppI ww2_s5ppJ];
          };

Data.OldList.pairWithNil [InlPrag=INLINE[0] (sat-args=1)]
  :: forall acc y. acc -> (acc, [y])
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>m, Unf=OtherCon []] =
    [] \r [x_s5ppK] (,) [x_s5ppK GHC.Types.[]];

Data.OldList.mapAccumLF [InlPrag=INLINE[0] (sat-args=1)]
  :: forall acc x y.
     (acc -> x -> (acc, y))
     -> x -> (acc -> (acc, [y])) -> acc -> (acc, [y])
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,1*C1(C1(U(1*U,1*U)))><L,U><L,1*C1(U(1*U,1*U))><L,U>m,
 Unf=OtherCon []] =
    [] \r [f_s5ppL x1_s5ppM r_s5ppN v_s5ppO]
        let {
          ds_s5ppP [Dmd=<L,U(1*U,1*U)>] :: (acc_a5j4Z, y_a5j51)
          [LclId] =
              [f_s5ppL x1_s5ppM v_s5ppO] \u [] f_s5ppL v_s5ppO x1_s5ppM; } in
        let {
          ds1_s5ppQ [Dmd=<L,U(1*U,1*U)>] :: (acc_a5j4Z, [y_a5j51])
          [LclId] =
              [r_s5ppN ds_s5ppP] \u []
                  let {
                    sat_s5ppU [Occ=Once] :: acc_a5j4Z
                    [LclId] =
                        [ds_s5ppP] \u []
                            case ds_s5ppP of {
                              (,) s'_s5ppS [Occ=Once] _ [Occ=Dead] -> s'_s5ppS;
                            };
                  } in  r_s5ppN sat_s5ppU; } in
        let {
          sat_s5pq6 [Occ=Once] :: [y_a5j51]
          [LclId] =
              [ds1_s5ppQ] \u []
                  case ds1_s5ppQ of {
                    (,) _ [Occ=Dead] ys_s5pq5 [Occ=Once] -> ys_s5pq5;
                  }; } in
        let {
          sat_s5pq2 [Occ=Once] :: y_a5j51
          [LclId] =
              [ds_s5ppP] \u []
                  case ds_s5ppP of {
                    (,) _ [Occ=Dead] y1_s5pq1 [Occ=Once] -> y1_s5pq1;
                  }; } in
        let {
          sat_s5pq7 [Occ=Once] :: [y_a5j51]
          [LclId] =
              CCCS :! [sat_s5pq2 sat_s5pq6]; } in
        let {
          sat_s5ppY [Occ=Once] :: acc_a5j4Z
          [LclId] =
              [ds1_s5ppQ] \u []
                  case ds1_s5ppQ of {
                    (,) s''_s5ppW [Occ=Once] _ [Occ=Dead] -> s''_s5ppW;
                  };
        } in  (,) [sat_s5ppY sat_s5pq7];

Data.OldList.$wmapAccumL [InlPrag=NOINLINE[1], Occ=LoopBreaker]
  :: forall acc x y.
     (acc -> x -> (acc, y)) -> acc -> [x] -> (# acc, [y] #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C1(U(1*U,1*U)))><L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_s5pq8 w1_s5pq9 w2_s5pqa]
        case w2_s5pqa of {
          [] -> (#,#) [w1_s5pq9 GHC.Types.[]];
          : x1_s5pqc [Occ=Once] xs_s5pqd [Occ=Once] ->
              let {
                ds_s5pqe [Dmd=<L,U(1*U,1*U)>] :: (acc_s5kry, y_s5krA)
                [LclId] =
                    [w_s5pq8 w1_s5pq9 x1_s5pqc] \u [] w_s5pq8 w1_s5pq9 x1_s5pqc; } in
              let {
                ds1_s5pqf [Dmd=<L,U(1*U,1*U)>] :: (acc_s5kry, [y_s5krA])
                [LclId] =
                    [w_s5pq8 xs_s5pqd ds_s5pqe] \u []
                        let {
                          sat_s5pqj [Occ=Once] :: acc_s5kry
                          [LclId] =
                              [ds_s5pqe] \u []
                                  case ds_s5pqe of {
                                    (,) s'_s5pqh [Occ=Once] _ [Occ=Dead] -> s'_s5pqh;
                                  };
                        } in 
                          case Data.OldList.$wmapAccumL w_s5pq8 sat_s5pqj xs_s5pqd of {
                            (#,#) ww1_s5pql [Occ=Once] ww2_s5pqm [Occ=Once] ->
                                (,) [ww1_s5pql ww2_s5pqm];
                          }; } in
              let {
                sat_s5pqy [Occ=Once] :: [y_s5krA]
                [LclId] =
                    [ds1_s5pqf] \u []
                        case ds1_s5pqf of {
                          (,) _ [Occ=Dead] ys_s5pqx [Occ=Once] -> ys_s5pqx;
                        }; } in
              let {
                sat_s5pqu [Occ=Once] :: y_s5krA
                [LclId] =
                    [ds_s5pqe] \u []
                        case ds_s5pqe of {
                          (,) _ [Occ=Dead] y1_s5pqt [Occ=Once] -> y1_s5pqt;
                        }; } in
              let {
                sat_s5pqz [Occ=Once] :: [y_s5krA]
                [LclId] =
                    CCCS :! [sat_s5pqu sat_s5pqy]; } in
              let {
                sat_s5pqq [Occ=Once] :: acc_s5kry
                [LclId] =
                    [ds1_s5pqf] \u []
                        case ds1_s5pqf of {
                          (,) s''_s5pqo [Occ=Once] _ [Occ=Dead] -> s''_s5pqo;
                        };
              } in  (#,#) [sat_s5pqq sat_s5pqz];
        };

Data.OldList.mapAccumL [InlPrag=NOUSERINLINE[0]]
  :: forall acc x y.
     (acc -> x -> (acc, y)) -> acc -> [x] -> (acc, [y])
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C1(U(1*U,1*U)))><L,U><S,1*U>m,
 Unf=OtherCon []] =
    [] \r [w_s5pqA w1_s5pqB w2_s5pqC]
        case Data.OldList.$wmapAccumL w_s5pqA w1_s5pqB w2_s5pqC of {
          (#,#) ww1_s5pqE [Occ=Once] ww2_s5pqF [Occ=Once] ->
              (,) [ww1_s5pqE ww2_s5pqF];
        };

Data.OldList.$wmapAccumR [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: forall acc x y.
     (acc -> x -> (acc, y)) -> acc -> [x] -> (# acc, [y] #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C1(U(1*U,1*U)))><L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_s5pqG w1_s5pqH w2_s5pqI]
        case w2_s5pqI of {
          [] -> (#,#) [w1_s5pqH GHC.Types.[]];
          : x1_s5pqK [Occ=Once] xs_s5pqL [Occ=Once] ->
              let {
                ds_s5pqM [Dmd=<L,U(1*U,1*U)>] :: (acc_s5kro, [y_s5krq])
                [LclId] =
                    [w_s5pqG w1_s5pqH xs_s5pqL] \u []
                        case Data.OldList.$wmapAccumR w_s5pqG w1_s5pqH xs_s5pqL of {
                          (#,#) ww1_s5pqO [Occ=Once] ww2_s5pqP [Occ=Once] ->
                              (,) [ww1_s5pqO ww2_s5pqP];
                        }; } in
              let {
                ds1_s5pqQ [Dmd=<L,U(1*U,1*U)>] :: (acc_s5kro, y_s5krq)
                [LclId] =
                    [w_s5pqG x1_s5pqK ds_s5pqM] \u []
                        let {
                          sat_s5pqU [Occ=Once] :: acc_s5kro
                          [LclId] =
                              [ds_s5pqM] \u []
                                  case ds_s5pqM of {
                                    (,) s'_s5pqS [Occ=Once] _ [Occ=Dead] -> s'_s5pqS;
                                  };
                        } in  w_s5pqG sat_s5pqU x1_s5pqK; } in
              let {
                sat_s5pr6 [Occ=Once] :: [y_s5krq]
                [LclId] =
                    [ds_s5pqM] \u []
                        case ds_s5pqM of {
                          (,) _ [Occ=Dead] ys_s5pr5 [Occ=Once] -> ys_s5pr5;
                        }; } in
              let {
                sat_s5pr2 [Occ=Once] :: y_s5krq
                [LclId] =
                    [ds1_s5pqQ] \u []
                        case ds1_s5pqQ of {
                          (,) _ [Occ=Dead] y1_s5pr1 [Occ=Once] -> y1_s5pr1;
                        }; } in
              let {
                sat_s5pr7 [Occ=Once] :: [y_s5krq]
                [LclId] =
                    CCCS :! [sat_s5pr2 sat_s5pr6]; } in
              let {
                sat_s5pqY [Occ=Once] :: acc_s5kro
                [LclId] =
                    [ds1_s5pqQ] \u []
                        case ds1_s5pqQ of {
                          (,) s''_s5pqW [Occ=Once] _ [Occ=Dead] -> s''_s5pqW;
                        };
              } in  (#,#) [sat_s5pqY sat_s5pr7];
        };

Data.OldList.mapAccumR [InlPrag=NOUSERINLINE[0]]
  :: forall acc x y.
     (acc -> x -> (acc, y)) -> acc -> [x] -> (acc, [y])
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C1(U(1*U,1*U)))><L,U><S,1*U>m,
 Unf=OtherCon []] =
    [] \r [w_s5pr8 w1_s5pr9 w2_s5pra]
        case Data.OldList.$wmapAccumR w_s5pr8 w1_s5pr9 w2_s5pra of {
          (#,#) ww1_s5prc [Occ=Once] ww2_s5prd [Occ=Once] ->
              (,) [ww1_s5prc ww2_s5prd];
        };

Data.OldList.insertBy [InlPrag=NOUSERINLINE[0]]
  :: forall a. (a -> a -> GHC.Types.Ordering) -> a -> [a] -> [a]
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><L,U><S,1*U>m2,
 Unf=OtherCon []] =
    [] \r [w_s5pre w1_s5prf w2_s5prg]
        case Data.OldList.$winsertBy w_s5pre w1_s5prf w2_s5prg of {
          (#,#) ww1_s5pri [Occ=Once] ww2_s5prj [Occ=Once] ->
              : [ww1_s5pri ww2_s5prj];
        };
Data.OldList.$winsertBy [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: forall a.
     (a -> a -> GHC.Types.Ordering) -> a -> [a] -> (# a, [a] #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_s5prk w1_s5prl w2_s5prm]
        case w2_s5prm of wild_s5prn {
          [] -> (#,#) [w1_s5prl GHC.Types.[]];
          : y_s5pro ys'_s5prp [Occ=Once] ->
              case w_s5prk w1_s5prl y_s5pro of {
                __DEFAULT -> (#,#) [w1_s5prl wild_s5prn];
                GHC.Types.GT ->
                    let {
                      sat_s5prr [Occ=Once] :: [a_s5krg]
                      [LclId] =
                          [w_s5prk w1_s5prl ys'_s5prp] \u []
                              Data.OldList.insertBy w_s5prk w1_s5prl ys'_s5prp;
                    } in  (#,#) [y_s5pro sat_s5prr];
              };
        };

Data.OldList.insert
  :: forall a. GHC.Classes.Ord a => a -> [a] -> [a]
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*U(A,1*C(C1(U)),A,A,A,A,A,A)><L,U><S,1*U>m2,
 Unf=OtherCon []] =
    [] \r [$dOrd_s5prs e_s5prt ls_s5pru]
        let {
          sat_s5prv [Occ=Once, Dmd=<L,C(C1(U))>]
            :: a_a5j4k -> a_a5j4k -> GHC.Types.Ordering
          [LclId] =
              [$dOrd_s5prs] \u [] GHC.Classes.compare $dOrd_s5prs;
        } in 
          case Data.OldList.$winsertBy sat_s5prv e_s5prt ls_s5pru of {
            (#,#) ww1_s5prx [Occ=Once] ww2_s5pry [Occ=Once] ->
                : [ww1_s5prx ww2_s5pry];
          };

lvl_r5kSh :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "List.maximumBy: empty list"#;

Data.OldList.maximumBy1 :: forall a. a
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl_r5kSh of sat_s5prz {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_s5prz;
        };

Data.OldList.maximumBy
  :: forall a. (a -> a -> GHC.Types.Ordering) -> [a] -> a
[GblId, Arity=2, Str=<L,C(C1(U))><S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s5prA ds1_s5prB]
        case ds1_s5prB of {
          [] -> Data.OldList.maximumBy1;
          : ipv_s5prD [Occ=Once] ipv1_s5prE [Occ=Once] ->
              let-no-escape {
                go_s5prF [Occ=LoopBreakerT[2]] :: [a_a5j3S] -> a_a5j3S -> a_a5j3S
                [LclId[JoinId(2)], Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
                    sat-only [ds_s5prA go_s5prF] \r [ds2_s5prG eta_s5prH]
                        case ds2_s5prG of {
                          [] -> eta_s5prH;
                          : y_s5prJ ys_s5prK [Occ=Once] ->
                              let {
                                sat_s5prM [Occ=Once] :: a_a5j3S
                                [LclId] =
                                    [ds_s5prA eta_s5prH y_s5prJ] \u []
                                        case ds_s5prA eta_s5prH y_s5prJ of {
                                          __DEFAULT -> y_s5prJ;
                                          GHC.Types.GT -> eta_s5prH;
                                        };
                              } in  go_s5prF ys_s5prK sat_s5prM;
                        };
              } in  go_s5prF ipv1_s5prE ipv_s5prD;
        };

lvl1_r5kSi :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "List.minimumBy: empty list"#;

Data.OldList.minimumBy1 :: forall a. a
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl1_r5kSi of sat_s5prN {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_s5prN;
        };

Data.OldList.minimumBy
  :: forall a. (a -> a -> GHC.Types.Ordering) -> [a] -> a
[GblId, Arity=2, Str=<L,C(C1(U))><S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s5prO ds1_s5prP]
        case ds1_s5prP of {
          [] -> Data.OldList.minimumBy1;
          : ipv_s5prR [Occ=Once] ipv1_s5prS [Occ=Once] ->
              let-no-escape {
                go_s5prT [Occ=LoopBreakerT[2]] :: [a_a5j3v] -> a_a5j3v -> a_a5j3v
                [LclId[JoinId(2)], Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
                    sat-only [ds_s5prO go_s5prT] \r [ds2_s5prU eta_s5prV]
                        case ds2_s5prU of {
                          [] -> eta_s5prV;
                          : y_s5prX ys_s5prY [Occ=Once] ->
                              let {
                                sat_s5ps0 [Occ=Once] :: a_a5j3v
                                [LclId] =
                                    [ds_s5prO eta_s5prV y_s5prX] \u []
                                        case ds_s5prO eta_s5prV y_s5prX of {
                                          __DEFAULT -> eta_s5prV;
                                          GHC.Types.GT -> y_s5prX;
                                        };
                              } in  go_s5prT ys_s5prY sat_s5ps0;
                        };
              } in  go_s5prT ipv1_s5prS ipv_s5prR;
        };

sat_s5ps1 :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [1#];

sat_s5ps2 :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_s5ps1 GHC.Types.[]];

Data.OldList.genericLength2 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_s5ps2;

Data.OldList.genericLength1 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True GHC.Types.[];

Data.OldList.strictGenericLength
  :: forall i b. GHC.Num.Num i => [b] -> i
[GblId,
 Arity=2,
 Str=<L,U(C(C1(U)),A,A,A,A,A,C(U))><S,1*U>,
 Unf=OtherCon []] =
    [] \r [$dNum_s5ps3 l_s5ps4]
        let {
          lvl12_s5ps5 [Occ=OnceL] :: i_a5j2k
          [LclId] =
              [$dNum_s5ps3] \u []
                  GHC.Num.fromInteger $dNum_s5ps3 Data.OldList.genericLength2; } in
        let {
          sat_s5psd [Occ=Once] :: i_a5j2k
          [LclId] =
              [$dNum_s5ps3] \u []
                  GHC.Num.fromInteger $dNum_s5ps3 Data.OldList.genericLength1;
        } in 
          let-no-escape {
            gl_s5ps6 [Occ=LoopBreakerT[2]] :: [b_a5j2l] -> i_a5j2k -> i_a5j2k
            [LclId[JoinId(2)], Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
                sat-only [$dNum_s5ps3 lvl12_s5ps5 gl_s5ps6] \r [ds_s5ps7 a_s5ps8]
                    case ds_s5ps7 of {
                      [] -> a_s5ps8;
                      : _ [Occ=Dead] xs_s5psb [Occ=Once] ->
                          case GHC.Num.+ $dNum_s5ps3 a_s5ps8 lvl12_s5ps5 of a'_s5psc {
                            __DEFAULT -> gl_s5ps6 xs_s5psb a'_s5psc;
                          };
                    };
          } in  gl_s5ps6 l_s5ps4 sat_s5psd;

Data.OldList.genericLength [InlPrag=NOINLINE[1], Occ=LoopBreaker]
  :: forall i a. GHC.Num.Num i => [a] -> i
[GblId,
 Arity=2,
 Str=<S,U(C(C1(U)),A,A,A,A,A,C(U))><S,1*U>,
 Unf=OtherCon []] =
    [] \r [$dNum_s5pse ds_s5psf]
        case ds_s5psf of {
          [] -> GHC.Num.fromInteger $dNum_s5pse Data.OldList.genericLength1;
          : _ [Occ=Dead] l_s5psi [Occ=Once] ->
              let {
                sat_s5psk [Occ=Once] :: i_a5j3h
                [LclId] =
                    [$dNum_s5pse l_s5psi] \u []
                        Data.OldList.genericLength $dNum_s5pse l_s5psi; } in
              let {
                sat_s5psj [Occ=Once] :: i_a5j3h
                [LclId] =
                    [$dNum_s5pse] \u []
                        GHC.Num.fromInteger $dNum_s5pse Data.OldList.genericLength2;
              } in  GHC.Num.+ $dNum_s5pse sat_s5psj sat_s5psk;
        };

Data.OldList.genericTake [Occ=LoopBreaker]
  :: forall i a. GHC.Real.Integral i => i -> [a] -> [a]
[GblId,
 Arity=3,
 Str=<S(S(LS(LLLC(C(S))LLLL)L)LLLLLLLL),U(U(U(A,C(C1(U)),A,A,A,A,C(U)),U(A,A,A,C(C1(U)),A,A,A,A),A),A,A,A,A,A,A,A,A)><L,U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [$dIntegral_s5psl eta_s5psm eta1_s5psn]
        case
            GHC.Real.$p1Integral $dIntegral_s5psl
        of
        $dReal_s5pso [Dmd=<S(LS(LLLC(C(S))LLLL)L),U(1*U(A,1*C1(C1(U)),A,A,A,A,C(U)),1*U(A,A,A,1*C1(C1(U)),A,A,A,A),A)>]
        { __DEFAULT ->
              let {
                $dNum_s5psp [Dmd=<L,U(A,1*C1(C1(U)),A,A,A,A,C(U))>]
                  :: GHC.Num.Num i_a5j1U
                [LclId] =
                    [$dReal_s5pso] \u [] GHC.Real.$p1Real $dReal_s5pso; } in
              let {
                sat_s5psr [Occ=Once] :: i_a5j1U
                [LclId] =
                    [$dNum_s5psp] \u []
                        GHC.Num.fromInteger $dNum_s5psp Data.OldList.genericLength1;
              } in 
                case GHC.Real.$p2Real $dReal_s5pso of sat_s5psq {
                  __DEFAULT ->
                      case GHC.Classes.<= sat_s5psq eta_s5psm sat_s5psr of {
                        GHC.Types.False ->
                            case eta1_s5psn of {
                              [] -> [] [];
                              : x_s5psu [Occ=Once] xs_s5psv [Occ=Once] ->
                                  let {
                                    sat_s5psy [Occ=Once] :: [a_a5j1V]
                                    [LclId] =
                                        [$dIntegral_s5psl eta_s5psm $dNum_s5psp xs_s5psv] \u []
                                            let {
                                              sat_s5psx [Occ=Once] :: i_a5j1U
                                              [LclId] =
                                                  [eta_s5psm $dNum_s5psp] \u []
                                                      let {
                                                        sat_s5psw [Occ=Once] :: i_a5j1U
                                                        [LclId] =
                                                            [$dNum_s5psp] \u []
                                                                GHC.Num.fromInteger
                                                                    $dNum_s5psp
                                                                    Data.OldList.genericLength2;
                                                      } in 
                                                        GHC.Num.- $dNum_s5psp eta_s5psm sat_s5psw;
                                            } in 
                                              Data.OldList.genericTake
                                                  $dIntegral_s5psl sat_s5psx xs_s5psv;
                                  } in  : [x_s5psu sat_s5psy];
                            };
                        GHC.Types.True -> [] [];
                      };
                };
        };

Data.OldList.genericReplicate
  :: forall i a. GHC.Real.Integral i => i -> a -> [a]
[GblId,
 Arity=3,
 Str=<S(S(LS(LLLC(C(S))LLLL)L)LLLLLLLL),U(U(U(A,C(C1(U)),A,A,A,A,C(U)),U(A,A,A,C(C1(U)),A,A,A,A),A),A,A,A,A,A,A,A,A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dIntegral_s5psz n_s5psA x_s5psB]
        let {
          sat_s5psC [Occ=Once, Dmd=<L,1*U>] :: [a_a5j2c]
          [LclId] =
              [x_s5psB] \s [] GHC.List.repeat x_s5psB;
        } in  Data.OldList.genericTake $dIntegral_s5psz n_s5psA sat_s5psC;

Data.OldList.genericDrop [Occ=LoopBreaker]
  :: forall i a. GHC.Real.Integral i => i -> [a] -> [a]
[GblId,
 Arity=3,
 Str=<S(S(LS(LLLC(C(S))LLLL)L)LLLLLLLL),U(U(U(A,C(C1(U)),A,A,A,A,C(U)),U(A,A,A,C(C1(U)),A,A,A,A),A),A,A,A,A,A,A,A,A)><L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [$dIntegral_s5psD eta_s5psE eta1_s5psF]
        case
            GHC.Real.$p1Integral $dIntegral_s5psD
        of
        $dReal_s5psG [Dmd=<S(LS(LLLC(C(S))LLLL)L),U(1*U(A,1*C1(C1(U)),A,A,A,A,C(U)),1*U(A,A,A,1*C1(C1(U)),A,A,A,A),A)>]
        { __DEFAULT ->
              let {
                $dNum_s5psH [Dmd=<L,U(A,1*C1(C1(U)),A,A,A,A,C(U))>]
                  :: GHC.Num.Num i_a5j1E
                [LclId] =
                    [$dReal_s5psG] \u [] GHC.Real.$p1Real $dReal_s5psG; } in
              let {
                sat_s5psJ [Occ=Once] :: i_a5j1E
                [LclId] =
                    [$dNum_s5psH] \u []
                        GHC.Num.fromInteger $dNum_s5psH Data.OldList.genericLength1;
              } in 
                case GHC.Real.$p2Real $dReal_s5psG of sat_s5psI {
                  __DEFAULT ->
                      case GHC.Classes.<= sat_s5psI eta_s5psE sat_s5psJ of {
                        GHC.Types.False ->
                            case eta1_s5psF of {
                              [] -> [] [];
                              : _ [Occ=Dead] xs_s5psN [Occ=Once] ->
                                  let {
                                    sat_s5psP [Occ=Once] :: i_a5j1E
                                    [LclId] =
                                        [eta_s5psE $dNum_s5psH] \u []
                                            let {
                                              sat_s5psO [Occ=Once] :: i_a5j1E
                                              [LclId] =
                                                  [$dNum_s5psH] \u []
                                                      GHC.Num.fromInteger
                                                          $dNum_s5psH Data.OldList.genericLength2;
                                            } in  GHC.Num.- $dNum_s5psH eta_s5psE sat_s5psO;
                                  } in 
                                    Data.OldList.genericDrop $dIntegral_s5psD sat_s5psP xs_s5psN;
                            };
                        GHC.Types.True -> eta1_s5psF;
                      };
                };
        };

Data.OldList.$wgenericSplitAt [InlPrag=NOUSERINLINE[0],
                               Occ=LoopBreaker]
  :: forall i a. GHC.Real.Integral i => i -> [a] -> (# [a], [a] #)
[GblId,
 Arity=3,
 Str=<S(S(LS(LLLC(C(S))LLLL)L)LLLLLLLL),U(U(U(A,C(C1(U)),A,A,A,A,C(U)),U(A,A,A,C(C1(U)),A,A,A,A),A),A,A,A,A,A,A,A,A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [w_s5psQ w1_s5psR w2_s5psS]
        case
            GHC.Real.$p1Integral w_s5psQ
        of
        $dReal_s5psT [Dmd=<S(LS(LLLC(C(S))LLLL)L),U(1*U(A,1*C1(C1(U)),A,A,A,A,C(U)),1*U(A,A,A,1*C1(C1(U)),A,A,A,A),A)>]
        { __DEFAULT ->
              let {
                $dNum_s5psU [Dmd=<L,U(A,1*C1(C1(U)),A,A,A,A,C(U))>]
                  :: GHC.Num.Num i_s5kqD
                [LclId] =
                    [$dReal_s5psT] \u [] GHC.Real.$p1Real $dReal_s5psT; } in
              let {
                sat_s5psW [Occ=Once] :: i_s5kqD
                [LclId] =
                    [$dNum_s5psU] \u []
                        GHC.Num.fromInteger $dNum_s5psU Data.OldList.genericLength1;
              } in 
                case GHC.Real.$p2Real $dReal_s5psT of sat_s5psV {
                  __DEFAULT ->
                      case GHC.Classes.<= sat_s5psV w1_s5psR sat_s5psW of {
                        GHC.Types.False ->
                            case w2_s5psS of {
                              [] -> (#,#) [GHC.Types.[] GHC.Types.[]];
                              : x_s5psZ [Occ=Once] xs_s5pt0 [Occ=Once] ->
                                  let {
                                    ds_s5pt1 [Dmd=<L,U(1*U,1*U)>] :: ([a_s5kqE], [a_s5kqE])
                                    [LclId] =
                                        [w_s5psQ w1_s5psR $dNum_s5psU xs_s5pt0] \u []
                                            let {
                                              sat_s5pt3 [Occ=Once] :: i_s5kqD
                                              [LclId] =
                                                  [w1_s5psR $dNum_s5psU] \u []
                                                      let {
                                                        sat_s5pt2 [Occ=Once] :: i_s5kqD
                                                        [LclId] =
                                                            [$dNum_s5psU] \u []
                                                                GHC.Num.fromInteger
                                                                    $dNum_s5psU
                                                                    Data.OldList.genericLength2;
                                                      } in 
                                                        GHC.Num.- $dNum_s5psU w1_s5psR sat_s5pt2;
                                            } in 
                                              case
                                                  Data.OldList.$wgenericSplitAt
                                                      w_s5psQ sat_s5pt3 xs_s5pt0
                                              of
                                              { (#,#) ww1_s5pt5 [Occ=Once] ww2_s5pt6 [Occ=Once] ->
                                                    (,) [ww1_s5pt5 ww2_s5pt6];
                                              }; } in
                                  let {
                                    sat_s5ptf [Occ=Once] :: [a_s5kqE]
                                    [LclId] =
                                        [ds_s5pt1] \u []
                                            case ds_s5pt1 of {
                                              (,) _ [Occ=Dead] xs''_s5pte [Occ=Once] -> xs''_s5pte;
                                            }; } in
                                  let {
                                    sat_s5pta [Occ=Once] :: [a_s5kqE]
                                    [LclId] =
                                        [ds_s5pt1] \u []
                                            case ds_s5pt1 of {
                                              (,) xs'_s5pt8 [Occ=Once] _ [Occ=Dead] -> xs'_s5pt8;
                                            }; } in
                                  let {
                                    sat_s5ptb [Occ=Once] :: [a_s5kqE]
                                    [LclId] =
                                        CCCS :! [x_s5psZ sat_s5pta];
                                  } in  (#,#) [sat_s5ptb sat_s5ptf];
                            };
                        GHC.Types.True -> (#,#) [GHC.Types.[] w2_s5psS];
                      };
                };
        };

Data.OldList.genericSplitAt [InlPrag=NOUSERINLINE[0]]
  :: forall i a. GHC.Real.Integral i => i -> [a] -> ([a], [a])
[GblId,
 Arity=3,
 Str=<S(S(LS(LLLC(C(S))LLLL)L)LLLLLLLL),U(U(U(A,C(C1(U)),A,A,A,A,C(U)),U(A,A,A,C(C1(U)),A,A,A,A),A),A,A,A,A,A,A,A,A)><L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [w_s5ptg w1_s5pth w2_s5pti]
        case Data.OldList.$wgenericSplitAt w_s5ptg w1_s5pth w2_s5pti of {
          (#,#) ww1_s5ptk [Occ=Once] ww2_s5ptl [Occ=Once] ->
              (,) [ww1_s5ptk ww2_s5ptl];
        };

lvl2_r5kSj :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "List.genericIndex: negative argument."#;

lvl3_r5kSk :: forall a. a
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl2_r5kSj of sat_s5ptm {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_s5ptm;
        };

lvl4_r5kSl :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "List.genericIndex: index too large."#;

lvl5_r5kSm :: forall a. a
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl4_r5kSl of sat_s5ptn {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_s5ptn;
        };

Data.OldList.genericIndex [Occ=LoopBreaker]
  :: forall i a. GHC.Real.Integral i => [a] -> i -> a
[GblId,
 Arity=3,
 Str=<S(S(LS(S(C(C(S))L)LLLLLLL)L)LLLLLLLL),U(U(U(A,C(C1(U)),A,A,A,A,C(U)),U(U(C(C1(U)),A),A,A,A,C(C1(U)),A,A,A),A),A,A,A,A,A,A,A,A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dIntegral_s5pto eta_s5ptp eta1_s5ptq]
        case eta_s5ptp of {
          [] -> lvl5_r5kSm;
          : x_s5pts [Occ=Once] ds_s5ptt [Occ=Once] ->
              case
                  GHC.Real.$p1Integral $dIntegral_s5pto
              of
              $dReal_s5ptu [Dmd=<S(LS(S(C(C(S))L)LLLLLLL)L),U(1*U(A,1*C1(C1(U)),A,A,A,A,C(U)),1*U(1*U(1*C1(C1(U)),A),A,A,A,1*C1(C1(U)),A,A,A),A)>]
              { __DEFAULT ->
                    let {
                      $dNum_s5ptv [Dmd=<L,U(A,1*C1(C1(U)),A,A,A,A,C(U))>]
                        :: GHC.Num.Num i_a5j0L
                      [LclId] =
                          [$dReal_s5ptu] \u [] GHC.Real.$p1Real $dReal_s5ptu;
                    } in 
                      case
                          GHC.Real.$p2Real $dReal_s5ptu
                      of
                      $dOrd_s5ptw [Dmd=<S(S(C(C(S))L)LLLLLLL),U(1*U(1*C1(C1(U)),A),A,A,A,1*C1(C1(U)),A,A,A)>]
                      { __DEFAULT ->
                            let {
                              sat_s5pty [Occ=Once] :: i_a5j0L
                              [LclId] =
                                  [$dNum_s5ptv] \u []
                                      GHC.Num.fromInteger $dNum_s5ptv Data.OldList.genericLength1;
                            } in 
                              case GHC.Classes.$p1Ord $dOrd_s5ptw of sat_s5ptx {
                                __DEFAULT ->
                                    case GHC.Classes.== sat_s5ptx eta1_s5ptq sat_s5pty of {
                                      GHC.Types.False ->
                                          let {
                                            sat_s5ptA [Occ=Once] :: i_a5j0L
                                            [LclId] =
                                                [$dNum_s5ptv] \u []
                                                    GHC.Num.fromInteger
                                                        $dNum_s5ptv Data.OldList.genericLength1;
                                          } in 
                                            case GHC.Classes.> $dOrd_s5ptw eta1_s5ptq sat_s5ptA of {
                                              GHC.Types.False -> lvl3_r5kSk;
                                              GHC.Types.True ->
                                                  let {
                                                    sat_s5ptD [Occ=Once] :: i_a5j0L
                                                    [LclId] =
                                                        [eta1_s5ptq $dNum_s5ptv] \u []
                                                            let {
                                                              sat_s5ptC [Occ=Once] :: i_a5j0L
                                                              [LclId] =
                                                                  [$dNum_s5ptv] \u []
                                                                      GHC.Num.fromInteger
                                                                          $dNum_s5ptv
                                                                          Data.OldList.genericLength2;
                                                            } in 
                                                              GHC.Num.-
                                                                  $dNum_s5ptv eta1_s5ptq sat_s5ptC;
                                                  } in 
                                                    Data.OldList.genericIndex
                                                        $dIntegral_s5pto ds_s5ptt sat_s5ptD;
                                            };
                                      GHC.Types.True -> x_s5pts;
                                    };
                              };
                      };
              };
        };

Data.OldList.zipWith4 [Occ=LoopBreaker]
  :: forall a b c d e.
     (a -> b -> c -> d -> e) -> [a] -> [b] -> [c] -> [d] -> [e]
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,C(C1(C1(C1(U))))><S,1*U><L,1*U><L,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [z_s5ptE ds_s5ptF ds1_s5ptG ds2_s5ptH ds3_s5ptI]
        case ds_s5ptF of {
          [] -> [] [];
          : a1_s5ptK [Occ=Once] as_s5ptL [Occ=Once] ->
              case ds1_s5ptG of {
                [] -> [] [];
                : b1_s5ptN [Occ=Once] bs_s5ptO [Occ=Once] ->
                    case ds2_s5ptH of {
                      [] -> [] [];
                      : c1_s5ptQ [Occ=Once] cs_s5ptR [Occ=Once] ->
                          case ds3_s5ptI of {
                            [] -> [] [];
                            : d1_s5ptT [Occ=Once] ds4_s5ptU [Occ=Once] ->
                                let {
                                  sat_s5ptW [Occ=Once] :: [e_a5iZr]
                                  [LclId] =
                                      [z_s5ptE as_s5ptL bs_s5ptO cs_s5ptR ds4_s5ptU] \u []
                                          Data.OldList.zipWith4
                                              z_s5ptE as_s5ptL bs_s5ptO cs_s5ptR ds4_s5ptU; } in
                                let {
                                  sat_s5ptV [Occ=Once] :: e_a5iZr
                                  [LclId] =
                                      [z_s5ptE a1_s5ptK b1_s5ptN c1_s5ptQ d1_s5ptT] \u []
                                          z_s5ptE a1_s5ptK b1_s5ptN c1_s5ptQ d1_s5ptT;
                                } in  : [sat_s5ptV sat_s5ptW];
                          };
                    };
              };
        };

Data.OldList.zip4
  :: forall a b c d. [a] -> [b] -> [c] -> [d] -> [(a, b, c, d)]
[GblId, Arity=4, Caf=NoCafRefs, Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        Data.OldList.zipWith4 GHC.Tuple.(,,,) eta_B4 eta_B3 eta_B2 eta_B1;

Data.OldList.zipWith5 [Occ=LoopBreaker]
  :: forall a b c d e f.
     (a -> b -> c -> d -> e -> f)
     -> [a] -> [b] -> [c] -> [d] -> [e] -> [f]
[GblId,
 Arity=6,
 Caf=NoCafRefs,
 Str=<L,C(C1(C1(C1(C1(U)))))><S,1*U><L,1*U><L,1*U><L,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [z_s5ptX ds_s5ptY ds1_s5ptZ ds2_s5pu0 ds3_s5pu1 ds4_s5pu2]
        case ds_s5ptY of {
          [] -> [] [];
          : a1_s5pu4 [Occ=Once] as_s5pu5 [Occ=Once] ->
              case ds1_s5ptZ of {
                [] -> [] [];
                : b1_s5pu7 [Occ=Once] bs_s5pu8 [Occ=Once] ->
                    case ds2_s5pu0 of {
                      [] -> [] [];
                      : c1_s5pua [Occ=Once] cs_s5pub [Occ=Once] ->
                          case ds3_s5pu1 of {
                            [] -> [] [];
                            : d1_s5pud [Occ=Once] ds5_s5pue [Occ=Once] ->
                                case ds4_s5pu2 of {
                                  [] -> [] [];
                                  : e1_s5pug [Occ=Once] es_s5puh [Occ=Once] ->
                                      let {
                                        sat_s5puj [Occ=Once] :: [f_a5iZe]
                                        [LclId] =
                                            [z_s5ptX
                                             as_s5pu5
                                             bs_s5pu8
                                             cs_s5pub
                                             ds5_s5pue
                                             es_s5puh] \u []
                                                Data.OldList.zipWith5
                                                    z_s5ptX
                                                    as_s5pu5
                                                    bs_s5pu8
                                                    cs_s5pub
                                                    ds5_s5pue
                                                    es_s5puh; } in
                                      let {
                                        sat_s5pui [Occ=Once] :: f_a5iZe
                                        [LclId] =
                                            [z_s5ptX
                                             a1_s5pu4
                                             b1_s5pu7
                                             c1_s5pua
                                             d1_s5pud
                                             e1_s5pug] \u []
                                                z_s5ptX
                                                    a1_s5pu4 b1_s5pu7 c1_s5pua d1_s5pud e1_s5pug;
                                      } in  : [sat_s5pui sat_s5puj];
                                };
                          };
                    };
              };
        };

Data.OldList.zip5
  :: forall a b c d e.
     [a] -> [b] -> [c] -> [d] -> [e] -> [(a, b, c, d, e)]
[GblId, Arity=5, Caf=NoCafRefs, Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        Data.OldList.zipWith5
            GHC.Tuple.(,,,,) eta_B5 eta_B4 eta_B3 eta_B2 eta_B1;

Data.OldList.zipWith6 [Occ=LoopBreaker]
  :: forall a b c d e f g.
     (a -> b -> c -> d -> e -> f -> g)
     -> [a] -> [b] -> [c] -> [d] -> [e] -> [f] -> [g]
[GblId,
 Arity=7,
 Caf=NoCafRefs,
 Str=<L,C(C1(C1(C1(C1(C1(U))))))><S,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [z_s5puk
           ds_s5pul
           ds1_s5pum
           ds2_s5pun
           ds3_s5puo
           ds4_s5pup
           ds5_s5puq]
        case ds_s5pul of {
          [] -> [] [];
          : a1_s5pus [Occ=Once] as_s5put [Occ=Once] ->
              case ds1_s5pum of {
                [] -> [] [];
                : b1_s5puv [Occ=Once] bs_s5puw [Occ=Once] ->
                    case ds2_s5pun of {
                      [] -> [] [];
                      : c1_s5puy [Occ=Once] cs_s5puz [Occ=Once] ->
                          case ds3_s5puo of {
                            [] -> [] [];
                            : d1_s5puB [Occ=Once] ds6_s5puC [Occ=Once] ->
                                case ds4_s5pup of {
                                  [] -> [] [];
                                  : e1_s5puE [Occ=Once] es_s5puF [Occ=Once] ->
                                      case ds5_s5puq of {
                                        [] -> [] [];
                                        : f1_s5puH [Occ=Once] fs_s5puI [Occ=Once] ->
                                            let {
                                              sat_s5puK [Occ=Once] :: [g_a5iYZ]
                                              [LclId] =
                                                  [z_s5puk
                                                   as_s5put
                                                   bs_s5puw
                                                   cs_s5puz
                                                   ds6_s5puC
                                                   es_s5puF
                                                   fs_s5puI] \u []
                                                      Data.OldList.zipWith6
                                                          z_s5puk
                                                          as_s5put
                                                          bs_s5puw
                                                          cs_s5puz
                                                          ds6_s5puC
                                                          es_s5puF
                                                          fs_s5puI; } in
                                            let {
                                              sat_s5puJ [Occ=Once] :: g_a5iYZ
                                              [LclId] =
                                                  [z_s5puk
                                                   a1_s5pus
                                                   b1_s5puv
                                                   c1_s5puy
                                                   d1_s5puB
                                                   e1_s5puE
                                                   f1_s5puH] \u []
                                                      z_s5puk
                                                          a1_s5pus
                                                          b1_s5puv
                                                          c1_s5puy
                                                          d1_s5puB
                                                          e1_s5puE
                                                          f1_s5puH;
                                            } in  : [sat_s5puJ sat_s5puK];
                                      };
                                };
                          };
                    };
              };
        };

Data.OldList.zip6
  :: forall a b c d e f.
     [a] -> [b] -> [c] -> [d] -> [e] -> [f] -> [(a, b, c, d, e, f)]
[GblId, Arity=6, Caf=NoCafRefs, Unf=OtherCon []] =
    [] \r [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        Data.OldList.zipWith6
            GHC.Tuple.(,,,,,) eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1;

Data.OldList.zipWith7 [Occ=LoopBreaker]
  :: forall a b c d e f g h.
     (a -> b -> c -> d -> e -> f -> g -> h)
     -> [a] -> [b] -> [c] -> [d] -> [e] -> [f] -> [g] -> [h]
[GblId,
 Arity=8,
 Caf=NoCafRefs,
 Str=<L,C(C1(C1(C1(C1(C1(C1(U)))))))><S,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [z_s5puL
           ds_s5puM
           ds1_s5puN
           ds2_s5puO
           ds3_s5puP
           ds4_s5puQ
           ds5_s5puR
           ds6_s5puS]
        case ds_s5puM of {
          [] -> [] [];
          : a1_s5puU [Occ=Once] as_s5puV [Occ=Once] ->
              case ds1_s5puN of {
                [] -> [] [];
                : b1_s5puX [Occ=Once] bs_s5puY [Occ=Once] ->
                    case ds2_s5puO of {
                      [] -> [] [];
                      : c1_s5pv0 [Occ=Once] cs_s5pv1 [Occ=Once] ->
                          case ds3_s5puP of {
                            [] -> [] [];
                            : d1_s5pv3 [Occ=Once] ds7_s5pv4 [Occ=Once] ->
                                case ds4_s5puQ of {
                                  [] -> [] [];
                                  : e1_s5pv6 [Occ=Once] es_s5pv7 [Occ=Once] ->
                                      case ds5_s5puR of {
                                        [] -> [] [];
                                        : f1_s5pv9 [Occ=Once] fs_s5pva [Occ=Once] ->
                                            case ds6_s5puS of {
                                              [] -> [] [];
                                              : g1_s5pvc [Occ=Once] gs_s5pvd [Occ=Once] ->
                                                  let {
                                                    sat_s5pvf [Occ=Once] :: [h_a5iYI]
                                                    [LclId] =
                                                        [z_s5puL
                                                         as_s5puV
                                                         bs_s5puY
                                                         cs_s5pv1
                                                         ds7_s5pv4
                                                         es_s5pv7
                                                         fs_s5pva
                                                         gs_s5pvd] \u []
                                                            Data.OldList.zipWith7
                                                                z_s5puL
                                                                as_s5puV
                                                                bs_s5puY
                                                                cs_s5pv1
                                                                ds7_s5pv4
                                                                es_s5pv7
                                                                fs_s5pva
                                                                gs_s5pvd; } in
                                                  let {
                                                    sat_s5pve [Occ=Once] :: h_a5iYI
                                                    [LclId] =
                                                        [z_s5puL
                                                         a1_s5puU
                                                         b1_s5puX
                                                         c1_s5pv0
                                                         d1_s5pv3
                                                         e1_s5pv6
                                                         f1_s5pv9
                                                         g1_s5pvc] \u []
                                                            z_s5puL
                                                                a1_s5puU
                                                                b1_s5puX
                                                                c1_s5pv0
                                                                d1_s5pv3
                                                                e1_s5pv6
                                                                f1_s5pv9
                                                                g1_s5pvc;
                                                  } in  : [sat_s5pve sat_s5pvf];
                                            };
                                      };
                                };
                          };
                    };
              };
        };

Data.OldList.zip7
  :: forall a b c d e f g.
     [a]
     -> [b]
     -> [c]
     -> [d]
     -> [e]
     -> [f]
     -> [g]
     -> [(a, b, c, d, e, f, g)]
[GblId, Arity=7, Caf=NoCafRefs, Unf=OtherCon []] =
    [] \r [eta_B7 eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        Data.OldList.zipWith7
            GHC.Tuple.(,,,,,,)
            eta_B7
            eta_B6
            eta_B5
            eta_B4
            eta_B3
            eta_B2
            eta_B1;

Data.OldList.$wunzip4 [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: forall a b c d. [(a, b, c, d)] -> (# [a], [b], [c], [d] #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [w_s5pvg]
        case w_s5pvg of {
          [] ->
              (#,,,#) [GHC.Types.[] GHC.Types.[] GHC.Types.[] GHC.Types.[]];
          : y_s5pvi [Occ=Once!] ys_s5pvj [Occ=Once] ->
              case y_s5pvi of {
                (,,,) a1_s5pvl [Occ=Once]
                      b1_s5pvm [Occ=Once]
                      c1_s5pvn [Occ=Once]
                      d1_s5pvo [Occ=Once] ->
                    let {
                      ds_s5pvp [Dmd=<L,U(1*U,1*U,1*U,1*U)>]
                        :: ([a_s5kpz], [b_s5kpA], [c_s5kpB], [d_s5kpC])
                      [LclId] =
                          [ys_s5pvj] \u []
                              case Data.OldList.$wunzip4 ys_s5pvj of {
                                (#,,,#) ww1_s5pvr [Occ=Once]
                                        ww2_s5pvs [Occ=Once]
                                        ww3_s5pvt [Occ=Once]
                                        ww4_s5pvu [Occ=Once] ->
                                    (,,,) [ww1_s5pvr ww2_s5pvs ww3_s5pvt ww4_s5pvu];
                              }; } in
                    let {
                      sat_s5pvV [Occ=Once] :: [d_s5kpC]
                      [LclId] =
                          [ds_s5pvp] \u []
                              case ds_s5pvp of {
                                (,,,) _ [Occ=Dead]
                                      _ [Occ=Dead]
                                      _ [Occ=Dead]
                                      ds1_s5pvU [Occ=Once] ->
                                    ds1_s5pvU;
                              }; } in
                    let {
                      sat_s5pvW [Occ=Once] :: [d_s5kpC]
                      [LclId] =
                          CCCS :! [d1_s5pvo sat_s5pvV]; } in
                    let {
                      sat_s5pvO [Occ=Once] :: [c_s5kpB]
                      [LclId] =
                          [ds_s5pvp] \u []
                              case ds_s5pvp of {
                                (,,,) _ [Occ=Dead] _ [Occ=Dead] cs_s5pvM [Occ=Once] _ [Occ=Dead] ->
                                    cs_s5pvM;
                              }; } in
                    let {
                      sat_s5pvP [Occ=Once] :: [c_s5kpB]
                      [LclId] =
                          CCCS :! [c1_s5pvn sat_s5pvO]; } in
                    let {
                      sat_s5pvH [Occ=Once] :: [b_s5kpA]
                      [LclId] =
                          [ds_s5pvp] \u []
                              case ds_s5pvp of {
                                (,,,) _ [Occ=Dead] bs_s5pvE [Occ=Once] _ [Occ=Dead] _ [Occ=Dead] ->
                                    bs_s5pvE;
                              }; } in
                    let {
                      sat_s5pvI [Occ=Once] :: [b_s5kpA]
                      [LclId] =
                          CCCS :! [b1_s5pvm sat_s5pvH]; } in
                    let {
                      sat_s5pvA [Occ=Once] :: [a_s5kpz]
                      [LclId] =
                          [ds_s5pvp] \u []
                              case ds_s5pvp of {
                                (,,,) as_s5pvw [Occ=Once] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
                                    as_s5pvw;
                              }; } in
                    let {
                      sat_s5pvB [Occ=Once] :: [a_s5kpz]
                      [LclId] =
                          CCCS :! [a1_s5pvl sat_s5pvA];
                    } in  (#,,,#) [sat_s5pvB sat_s5pvI sat_s5pvP sat_s5pvW];
              };
        };

Data.OldList.unzip4 [InlPrag=NOUSERINLINE[0]]
  :: forall a b c d. [(a, b, c, d)] -> ([a], [b], [c], [d])
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [w_s5pvX]
        case Data.OldList.$wunzip4 w_s5pvX of {
          (#,,,#) ww1_s5pvZ [Occ=Once]
                  ww2_s5pw0 [Occ=Once]
                  ww3_s5pw1 [Occ=Once]
                  ww4_s5pw2 [Occ=Once] ->
              (,,,) [ww1_s5pvZ ww2_s5pw0 ww3_s5pw1 ww4_s5pw2];
        };

Data.OldList.$wunzip5 [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: forall a b c d e.
     [(a, b, c, d, e)] -> (# [a], [b], [c], [d], [e] #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [w_s5pw3]
        case w_s5pw3 of {
          [] ->
              (#,,,,#) [GHC.Types.[]
                        GHC.Types.[]
                        GHC.Types.[]
                        GHC.Types.[]
                        GHC.Types.[]];
          : y_s5pw5 [Occ=Once!] ys_s5pw6 [Occ=Once] ->
              case y_s5pw5 of {
                (,,,,) a1_s5pw8 [Occ=Once]
                       b1_s5pw9 [Occ=Once]
                       c1_s5pwa [Occ=Once]
                       d1_s5pwb [Occ=Once]
                       e1_s5pwc [Occ=Once] ->
                    let {
                      ds_s5pwd [Dmd=<L,U(1*U,1*U,1*U,1*U,1*U)>]
                        :: ([a_s5kpp], [b_s5kpq], [c_s5kpr], [d_s5kps], [e_s5kpt])
                      [LclId] =
                          [ys_s5pw6] \u []
                              case Data.OldList.$wunzip5 ys_s5pw6 of {
                                (#,,,,#) ww1_s5pwf [Occ=Once]
                                         ww2_s5pwg [Occ=Once]
                                         ww3_s5pwh [Occ=Once]
                                         ww4_s5pwi [Occ=Once]
                                         ww5_s5pwj [Occ=Once] ->
                                    (,,,,) [ww1_s5pwf ww2_s5pwg ww3_s5pwh ww4_s5pwi ww5_s5pwj];
                              }; } in
                    let {
                      sat_s5pwW [Occ=Once] :: [e_s5kpt]
                      [LclId] =
                          [ds_s5pwd] \u []
                              case ds_s5pwd of {
                                (,,,,) _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       es_s5pwV [Occ=Once] ->
                                    es_s5pwV;
                              }; } in
                    let {
                      sat_s5pwX [Occ=Once] :: [e_s5kpt]
                      [LclId] =
                          CCCS :! [e1_s5pwc sat_s5pwW]; } in
                    let {
                      sat_s5pwO [Occ=Once] :: [d_s5kps]
                      [LclId] =
                          [ds_s5pwd] \u []
                              case ds_s5pwd of {
                                (,,,,) _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       ds1_s5pwM [Occ=Once]
                                       _ [Occ=Dead] ->
                                    ds1_s5pwM;
                              }; } in
                    let {
                      sat_s5pwP [Occ=Once] :: [d_s5kps]
                      [LclId] =
                          CCCS :! [d1_s5pwb sat_s5pwO]; } in
                    let {
                      sat_s5pwG [Occ=Once] :: [c_s5kpr]
                      [LclId] =
                          [ds_s5pwd] \u []
                              case ds_s5pwd of {
                                (,,,,) _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       cs_s5pwD [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
                                    cs_s5pwD;
                              }; } in
                    let {
                      sat_s5pwH [Occ=Once] :: [c_s5kpr]
                      [LclId] =
                          CCCS :! [c1_s5pwa sat_s5pwG]; } in
                    let {
                      sat_s5pwy [Occ=Once] :: [b_s5kpq]
                      [LclId] =
                          [ds_s5pwd] \u []
                              case ds_s5pwd of {
                                (,,,,) _ [Occ=Dead]
                                       bs_s5pwu [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
                                    bs_s5pwu;
                              }; } in
                    let {
                      sat_s5pwz [Occ=Once] :: [b_s5kpq]
                      [LclId] =
                          CCCS :! [b1_s5pw9 sat_s5pwy]; } in
                    let {
                      sat_s5pwq [Occ=Once] :: [a_s5kpp]
                      [LclId] =
                          [ds_s5pwd] \u []
                              case ds_s5pwd of {
                                (,,,,) as_s5pwl [Occ=Once]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead]
                                       _ [Occ=Dead] ->
                                    as_s5pwl;
                              }; } in
                    let {
                      sat_s5pwr [Occ=Once] :: [a_s5kpp]
                      [LclId] =
                          CCCS :! [a1_s5pw8 sat_s5pwq];
                    } in  (#,,,,#) [sat_s5pwr sat_s5pwz sat_s5pwH sat_s5pwP sat_s5pwX];
              };
        };

Data.OldList.unzip5 [InlPrag=NOUSERINLINE[0]]
  :: forall a b c d e. [(a, b, c, d, e)] -> ([a], [b], [c], [d], [e])
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [w_s5pwY]
        case Data.OldList.$wunzip5 w_s5pwY of {
          (#,,,,#) ww1_s5px0 [Occ=Once]
                   ww2_s5px1 [Occ=Once]
                   ww3_s5px2 [Occ=Once]
                   ww4_s5px3 [Occ=Once]
                   ww5_s5px4 [Occ=Once] ->
              (,,,,) [ww1_s5px0 ww2_s5px1 ww3_s5px2 ww4_s5px3 ww5_s5px4];
        };

Data.OldList.$wunzip6 [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: forall a b c d e f.
     [(a, b, c, d, e, f)] -> (# [a], [b], [c], [d], [e], [f] #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [w_s5px5]
        case w_s5px5 of {
          [] ->
              (#,,,,,#) [GHC.Types.[]
                         GHC.Types.[]
                         GHC.Types.[]
                         GHC.Types.[]
                         GHC.Types.[]
                         GHC.Types.[]];
          : y_s5px7 [Occ=Once!] ys_s5px8 [Occ=Once] ->
              case y_s5px7 of {
                (,,,,,) a1_s5pxa [Occ=Once]
                        b1_s5pxb [Occ=Once]
                        c1_s5pxc [Occ=Once]
                        d1_s5pxd [Occ=Once]
                        e1_s5pxe [Occ=Once]
                        f1_s5pxf [Occ=Once] ->
                    let {
                      ds_s5pxg [Dmd=<L,U(1*U,1*U,1*U,1*U,1*U,1*U)>]
                        :: ([a_s5kpe], [b_s5kpf], [c_s5kpg], [d_s5kph], [e_s5kpi],
                            [f_s5kpj])
                      [LclId] =
                          [ys_s5px8] \u []
                              case Data.OldList.$wunzip6 ys_s5px8 of {
                                (#,,,,,#) ww1_s5pxi [Occ=Once]
                                          ww2_s5pxj [Occ=Once]
                                          ww3_s5pxk [Occ=Once]
                                          ww4_s5pxl [Occ=Once]
                                          ww5_s5pxm [Occ=Once]
                                          ww6_s5pxn [Occ=Once] ->
                                    (,,,,,) [ww1_s5pxi
                                             ww2_s5pxj
                                             ww3_s5pxk
                                             ww4_s5pxl
                                             ww5_s5pxm
                                             ww6_s5pxn];
                              }; } in
                    let {
                      sat_s5pye [Occ=Once] :: [f_s5kpj]
                      [LclId] =
                          [ds_s5pxg] \u []
                              case ds_s5pxg of {
                                (,,,,,) _ [Occ=Dead]
                                        _ [Occ=Dead]
                                        _ [Occ=Dead]
                                        _ [Occ=Dead]
                                        _ [Occ=Dead]
                                        fs_s5pyd [Occ=Once] ->
                                    fs_s5pyd;
                              }; } in
                    let {
                      sat_s5pyf [Occ=Once] :: [f_s5kpj]
                      [LclId] =
                          CCCS :! [f1_s5pxf sat_s5pye]; } in
                    let {
                      sat_s5py5 [Occ=Once] :: [e_s5kpi]
                      [LclId] =
                          [ds_s5pxg] \u []
                              case ds_s5pxg of {
                                (,,,,,) _ [Occ=Dead]
                                        _ [Occ=Dead]
                                        _ [Occ=Dead]
                                        _ [Occ=Dead]
                                        es_s5py3 [Occ=Once]
                                        _ [Occ=Dead] ->
                                    es_s5py3;
                              }; } in
                    let {
                      sat_s5py6 [Occ=Once] :: [e_s5kpi]
                      [LclId] =
                          CCCS :! [e1_s5pxe sat_s5py5]; } in
                    let {
                      sat_s5pxW [Occ=Once] :: [d_s5kph]
                      [LclId] =
                          [ds_s5pxg] \u []
                              case ds_s5pxg of {
                                (,,,,,) _ [Occ=Dead]
                                        _ [Occ=Dead]
                                        _ [Occ=Dead]
                                        ds1_s5pxT [Occ=Once]
                                        _ [Occ=Dead]
                                        _ [Occ=Dead] ->
                                    ds1_s5pxT;
                              }; } in
                    let {
                      sat_s5pxX [Occ=Once] :: [d_s5kph]
                      [LclId] =
                          CCCS :! [d1_s5pxd sat_s5pxW]; } in
                    let {
                      sat_s5pxN [Occ=Once] :: [c_s5kpg]
                      [LclId] =
                          [ds_s5pxg] \u []
                              case ds_s5pxg of {
                                (,,,,,) _ [Occ=Dead]
                                        _ [Occ=Dead]
                                        cs_s5pxJ [Occ=Once]
                                        _ [Occ=Dead]
                                        _ [Occ=Dead]
                                        _ [Occ=Dead] ->
                                    cs_s5pxJ;
                              }; } in
                    let {
                      sat_s5pxO [Occ=Once] :: [c_s5kpg]
                      [LclId] =
                          CCCS :! [c1_s5pxc sat_s5pxN]; } in
                    let {
                      sat_s5pxE [Occ=Once] :: [b_s5kpf]
                      [LclId] =
                          [ds_s5pxg] \u []
                              case ds_s5pxg of {
                                (,,,,,) _ [Occ=Dead]
                                        bs_s5pxz [Occ=Once]
                                        _ [Occ=Dead]
                                        _ [Occ=Dead]
                                        _ [Occ=Dead]
                                        _ [Occ=Dead] ->
                                    bs_s5pxz;
                              }; } in
                    let {
                      sat_s5pxF [Occ=Once] :: [b_s5kpf]
                      [LclId] =
                          CCCS :! [b1_s5pxb sat_s5pxE]; } in
                    let {
                      sat_s5pxv [Occ=Once] :: [a_s5kpe]
                      [LclId] =
                          [ds_s5pxg] \u []
                              case ds_s5pxg of {
                                (,,,,,) as_s5pxp [Occ=Once]
                                        _ [Occ=Dead]
                                        _ [Occ=Dead]
                                        _ [Occ=Dead]
                                        _ [Occ=Dead]
                                        _ [Occ=Dead] ->
                                    as_s5pxp;
                              }; } in
                    let {
                      sat_s5pxw [Occ=Once] :: [a_s5kpe]
                      [LclId] =
                          CCCS :! [a1_s5pxa sat_s5pxv];
                    } in 
                      (#,,,,,#) [sat_s5pxw
                                 sat_s5pxF
                                 sat_s5pxO
                                 sat_s5pxX
                                 sat_s5py6
                                 sat_s5pyf];
              };
        };

Data.OldList.unzip6 [InlPrag=NOUSERINLINE[0]]
  :: forall a b c d e f.
     [(a, b, c, d, e, f)] -> ([a], [b], [c], [d], [e], [f])
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [w_s5pyg]
        case Data.OldList.$wunzip6 w_s5pyg of {
          (#,,,,,#) ww1_s5pyi [Occ=Once]
                    ww2_s5pyj [Occ=Once]
                    ww3_s5pyk [Occ=Once]
                    ww4_s5pyl [Occ=Once]
                    ww5_s5pym [Occ=Once]
                    ww6_s5pyn [Occ=Once] ->
              (,,,,,) [ww1_s5pyi
                       ww2_s5pyj
                       ww3_s5pyk
                       ww4_s5pyl
                       ww5_s5pym
                       ww6_s5pyn];
        };

Data.OldList.$wunzip7 [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: forall a b c d e f g.
     [(a, b, c, d, e, f, g)] -> (# [a], [b], [c], [d], [e], [f], [g] #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [w_s5pyo]
        case w_s5pyo of {
          [] ->
              (#,,,,,,#) [GHC.Types.[]
                          GHC.Types.[]
                          GHC.Types.[]
                          GHC.Types.[]
                          GHC.Types.[]
                          GHC.Types.[]
                          GHC.Types.[]];
          : y_s5pyq [Occ=Once!] ys_s5pyr [Occ=Once] ->
              case y_s5pyq of {
                (,,,,,,) a1_s5pyt [Occ=Once]
                         b1_s5pyu [Occ=Once]
                         c1_s5pyv [Occ=Once]
                         d1_s5pyw [Occ=Once]
                         e1_s5pyx [Occ=Once]
                         f1_s5pyy [Occ=Once]
                         g1_s5pyz [Occ=Once] ->
                    let {
                      ds_s5pyA [Dmd=<L,U(1*U,1*U,1*U,1*U,1*U,1*U,1*U)>]
                        :: ([a_s5kp2], [b_s5kp3], [c_s5kp4], [d_s5kp5], [e_s5kp6],
                            [f_s5kp7], [g_s5kp8])
                      [LclId] =
                          [ys_s5pyr] \u []
                              case Data.OldList.$wunzip7 ys_s5pyr of {
                                (#,,,,,,#) ww1_s5pyC [Occ=Once]
                                           ww2_s5pyD [Occ=Once]
                                           ww3_s5pyE [Occ=Once]
                                           ww4_s5pyF [Occ=Once]
                                           ww5_s5pyG [Occ=Once]
                                           ww6_s5pyH [Occ=Once]
                                           ww7_s5pyI [Occ=Once] ->
                                    (,,,,,,) [ww1_s5pyC
                                              ww2_s5pyD
                                              ww3_s5pyE
                                              ww4_s5pyF
                                              ww5_s5pyG
                                              ww6_s5pyH
                                              ww7_s5pyI];
                              }; } in
                    let {
                      sat_s5pzP [Occ=Once] :: [g_s5kp8]
                      [LclId] =
                          [ds_s5pyA] \u []
                              case ds_s5pyA of {
                                (,,,,,,) _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         gs_s5pzO [Occ=Once] ->
                                    gs_s5pzO;
                              }; } in
                    let {
                      sat_s5pzQ [Occ=Once] :: [g_s5kp8]
                      [LclId] =
                          CCCS :! [g1_s5pyz sat_s5pzP]; } in
                    let {
                      sat_s5pzF [Occ=Once] :: [f_s5kp7]
                      [LclId] =
                          [ds_s5pyA] \u []
                              case ds_s5pyA of {
                                (,,,,,,) _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         fs_s5pzD [Occ=Once]
                                         _ [Occ=Dead] ->
                                    fs_s5pzD;
                              }; } in
                    let {
                      sat_s5pzG [Occ=Once] :: [f_s5kp7]
                      [LclId] =
                          CCCS :! [f1_s5pyy sat_s5pzF]; } in
                    let {
                      sat_s5pzv [Occ=Once] :: [e_s5kp6]
                      [LclId] =
                          [ds_s5pyA] \u []
                              case ds_s5pyA of {
                                (,,,,,,) _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         es_s5pzs [Occ=Once]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead] ->
                                    es_s5pzs;
                              }; } in
                    let {
                      sat_s5pzw [Occ=Once] :: [e_s5kp6]
                      [LclId] =
                          CCCS :! [e1_s5pyx sat_s5pzv]; } in
                    let {
                      sat_s5pzl [Occ=Once] :: [d_s5kp5]
                      [LclId] =
                          [ds_s5pyA] \u []
                              case ds_s5pyA of {
                                (,,,,,,) _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         ds1_s5pzh [Occ=Once]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead] ->
                                    ds1_s5pzh;
                              }; } in
                    let {
                      sat_s5pzm [Occ=Once] :: [d_s5kp5]
                      [LclId] =
                          CCCS :! [d1_s5pyw sat_s5pzl]; } in
                    let {
                      sat_s5pzb [Occ=Once] :: [c_s5kp4]
                      [LclId] =
                          [ds_s5pyA] \u []
                              case ds_s5pyA of {
                                (,,,,,,) _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         cs_s5pz6 [Occ=Once]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead] ->
                                    cs_s5pz6;
                              }; } in
                    let {
                      sat_s5pzc [Occ=Once] :: [c_s5kp4]
                      [LclId] =
                          CCCS :! [c1_s5pyv sat_s5pzb]; } in
                    let {
                      sat_s5pz1 [Occ=Once] :: [b_s5kp3]
                      [LclId] =
                          [ds_s5pyA] \u []
                              case ds_s5pyA of {
                                (,,,,,,) _ [Occ=Dead]
                                         bs_s5pyV [Occ=Once]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead] ->
                                    bs_s5pyV;
                              }; } in
                    let {
                      sat_s5pz2 [Occ=Once] :: [b_s5kp3]
                      [LclId] =
                          CCCS :! [b1_s5pyu sat_s5pz1]; } in
                    let {
                      sat_s5pyR [Occ=Once] :: [a_s5kp2]
                      [LclId] =
                          [ds_s5pyA] \u []
                              case ds_s5pyA of {
                                (,,,,,,) as_s5pyK [Occ=Once]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead] ->
                                    as_s5pyK;
                              }; } in
                    let {
                      sat_s5pyS [Occ=Once] :: [a_s5kp2]
                      [LclId] =
                          CCCS :! [a1_s5pyt sat_s5pyR];
                    } in 
                      (#,,,,,,#) [sat_s5pyS
                                  sat_s5pz2
                                  sat_s5pzc
                                  sat_s5pzm
                                  sat_s5pzw
                                  sat_s5pzG
                                  sat_s5pzQ];
              };
        };

Data.OldList.unzip7 [InlPrag=NOUSERINLINE[0]]
  :: forall a b c d e f g.
     [(a, b, c, d, e, f, g)] -> ([a], [b], [c], [d], [e], [f], [g])
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [w_s5pzR]
        case Data.OldList.$wunzip7 w_s5pzR of {
          (#,,,,,,#) ww1_s5pzT [Occ=Once]
                     ww2_s5pzU [Occ=Once]
                     ww3_s5pzV [Occ=Once]
                     ww4_s5pzW [Occ=Once]
                     ww5_s5pzX [Occ=Once]
                     ww6_s5pzY [Occ=Once]
                     ww7_s5pzZ [Occ=Once] ->
              (,,,,,,) [ww1_s5pzT
                        ww2_s5pzU
                        ww3_s5pzV
                        ww4_s5pzW
                        ww5_s5pzX
                        ww6_s5pzY
                        ww7_s5pzZ];
        };

Data.OldList.groupBy [Occ=LoopBreaker]
  :: forall a. (a -> a -> GHC.Types.Bool) -> [a] -> [[a]]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,C(C(U))><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s5pA0 ds1_s5pA1]
        case ds1_s5pA1 of {
          [] -> [] [];
          : x_s5pA3 xs_s5pA4 [Occ=Once] ->
              let {
                ds2_s5pA5 [Dmd=<L,U(1*U,1*U)>] :: ([a_a5iWz], [a_a5iWz])
                [LclId] =
                    [ds_s5pA0 x_s5pA3 xs_s5pA4] \u []
                        let {
                          sat_s5pA6 [Occ=Once, Dmd=<L,C(U)>] :: a_a5iWz -> GHC.Types.Bool
                          [LclId] =
                              [ds_s5pA0 x_s5pA3] \u [] ds_s5pA0 x_s5pA3;
                        } in 
                          case GHC.List.$wspan sat_s5pA6 xs_s5pA4 of {
                            (#,#) ww1_s5pA8 [Occ=Once] ww2_s5pA9 [Occ=Once] ->
                                (,) [ww1_s5pA8 ww2_s5pA9];
                          }; } in
              let {
                sat_s5pAi [Occ=Once] :: [[a_a5iWz]]
                [LclId] =
                    [ds_s5pA0 ds2_s5pA5] \u []
                        case ds2_s5pA5 of {
                          (,) _ [Occ=Dead] zs_s5pAh [Occ=Once] ->
                              Data.OldList.groupBy ds_s5pA0 zs_s5pAh;
                        }; } in
              let {
                sat_s5pAd [Occ=Once] :: [a_a5iWz]
                [LclId] =
                    [ds2_s5pA5] \u []
                        case ds2_s5pA5 of {
                          (,) ys_s5pAb [Occ=Once] _ [Occ=Dead] -> ys_s5pAb;
                        }; } in
              let {
                sat_s5pAe [Occ=Once] :: [a_a5iWz]
                [LclId] =
                    CCCS :! [x_s5pA3 sat_s5pAd];
              } in  : [sat_s5pAe sat_s5pAi];
        };

Data.OldList.group :: forall a. GHC.Classes.Eq a => [a] -> [[a]]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*U(1*C(C(U)),A)><S,1*U>,
 Unf=OtherCon []] =
    [] \r [$dEq_s5pAj eta_s5pAk]
        let {
          sat_s5pAl [Occ=Once, Dmd=<L,C(C(U))>]
            :: a_a5iWS -> a_a5iWS -> GHC.Types.Bool
          [LclId] =
              [$dEq_s5pAj] \u [] GHC.Classes.== $dEq_s5pAj;
        } in  Data.OldList.groupBy sat_s5pAl eta_s5pAk;

poly_tailsGo_r5kSn :: forall a. [a] -> [[a]]
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>m2, Unf=OtherCon []] =
    sat-only [] \r [xs_s5pAm]
        let {
          sat_s5pAq [Occ=Once] :: [[a_a5iVR]]
          [LclId] =
              [xs_s5pAm] \u []
                  case xs_s5pAm of {
                    [] -> [] [];
                    : _ [Occ=Dead] xs'_s5pAp [Occ=Once] ->
                        poly_tailsGo_r5kSn xs'_s5pAp;
                  };
        } in  : [xs_s5pAm sat_s5pAq];

Data.OldList.tails [InlPrag=INLINABLE] :: forall a. [a] -> [[a]]
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [lst_s5pAr] poly_tailsGo_r5kSn lst_s5pAr;

Data.OldList.nonEmptySubsequences [Occ=LoopBreaker]
  :: forall a. [a] -> [[a]]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s5pAs]
        case ds_s5pAs of {
          [] -> [] [];
          : x_s5pAu xs_s5pAv [Occ=Once] ->
              let {
                sat_s5pAG [Occ=Once] :: [[a_a5iVp]]
                [LclId] =
                    [x_s5pAu xs_s5pAv] \u []
                        let {
                          go_s5pAx [Occ=LoopBreaker] :: [[a_a5iVp]] -> [[a_a5iVp]]
                          [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                              sat-only [x_s5pAu go_s5pAx] \r [ds1_s5pAy]
                                  case ds1_s5pAy of {
                                    [] -> [] [];
                                    : y_s5pAA ys_s5pAB [Occ=Once] ->
                                        let {
                                          sat_s5pAD [Occ=Once] :: [[a_a5iVp]]
                                          [LclId] =
                                              [go_s5pAx ys_s5pAB] \u [] go_s5pAx ys_s5pAB; } in
                                        let {
                                          sat_s5pAC [Occ=Once] :: [a_a5iVp]
                                          [LclId] =
                                              CCCS :! [x_s5pAu y_s5pAA]; } in
                                        let {
                                          sat_s5pAE [Occ=Once] :: [[a_a5iVp]]
                                          [LclId] =
                                              CCCS :! [sat_s5pAC sat_s5pAD];
                                        } in  : [y_s5pAA sat_s5pAE];
                                  };
                        } in 
                          case Data.OldList.nonEmptySubsequences xs_s5pAv of sat_s5pAF {
                            __DEFAULT -> go_s5pAx sat_s5pAF;
                          }; } in
              let {
                sat_s5pAw [Occ=Once] :: [a_a5iVp]
                [LclId] =
                    CCCS :! [x_s5pAu GHC.Types.[]];
              } in  : [sat_s5pAw sat_s5pAG];
        };

Data.OldList.subsequences :: forall a. [a] -> [[a]]
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,1*U>m2, Unf=OtherCon []] =
    [] \r [xs_s5pAH]
        let {
          sat_s5pAI [Occ=Once] :: [[a_a5iVM]]
          [LclId] =
              [xs_s5pAH] \u [] Data.OldList.nonEmptySubsequences xs_s5pAH;
        } in  : [GHC.Types.[] sat_s5pAI];

Data.OldList.permutations1 [Occ=LoopBreaker]
  :: forall a. [a] -> [a] -> [[a]]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ds_s5pAJ ds1_s5pAK]
        case ds_s5pAJ of {
          [] -> [] [];
          : t_s5pAM ts_s5pAN ->
              let {
                $winterleave'_s5pAO [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
                  :: forall c.
                     ([a_a5iTf] -> c) -> [a_a5iTf] -> [c] -> (# [a_a5iTf], [c] #)
                [LclId, Arity=3, Str=<L,C(U)><S,1*U><L,U>, Unf=OtherCon []] =
                    sat-only [t_s5pAM ts_s5pAN $winterleave'_s5pAO] \r [w_s5pAP
                                                                        w1_s5pAQ
                                                                        w2_s5pAR]
                        case w1_s5pAQ of {
                          [] -> (#,#) [ts_s5pAN w2_s5pAR];
                          : y_s5pAT ys_s5pAU [Occ=Once] ->
                              let {
                                ds2_s5pAV [Dmd=<L,U(1*U,1*U)>] :: ([a_a5iTf], [c_s5koH])
                                [LclId] =
                                    [$winterleave'_s5pAO w_s5pAP w2_s5pAR y_s5pAT ys_s5pAU] \u []
                                        let {
                                          sat_s5pAY [Occ=Once] :: [a_a5iTf] -> c_s5koH
                                          [LclId] =
                                              [w_s5pAP y_s5pAT] \r [x_s5pAW]
                                                  let {
                                                    sat_s5pAX [Occ=Once] :: [a_a5iTf]
                                                    [LclId] =
                                                        CCCS :! [y_s5pAT x_s5pAW];
                                                  } in  w_s5pAP sat_s5pAX;
                                        } in 
                                          case $winterleave'_s5pAO sat_s5pAY ys_s5pAU w2_s5pAR of {
                                            (#,#) ww1_s5pB0 [Occ=Once] ww2_s5pB1 [Occ=Once] ->
                                                (,) [ww1_s5pB0 ww2_s5pB1];
                                          }; } in
                              let {
                                us_s5pB2 :: [a_a5iTf]
                                [LclId] =
                                    [ds2_s5pAV] \u []
                                        case ds2_s5pAV of {
                                          (,) us1_s5pB4 [Occ=Once] _ [Occ=Dead] -> us1_s5pB4;
                                        }; } in
                              let {
                                sat_s5pBd [Occ=Once] :: [c_s5koH]
                                [LclId] =
                                    [ds2_s5pAV] \u []
                                        case ds2_s5pAV of {
                                          (,) _ [Occ=Dead] zs_s5pBc [Occ=Once] -> zs_s5pBc;
                                        }; } in
                              let {
                                sat_s5pB9 [Occ=Once] :: c_s5koH
                                [LclId] =
                                    [t_s5pAM w_s5pAP y_s5pAT us_s5pB2] \u []
                                        let {
                                          sat_s5pB7 [Occ=Once] :: [a_a5iTf]
                                          [LclId] =
                                              CCCS :! [y_s5pAT us_s5pB2]; } in
                                        let {
                                          sat_s5pB8 [Occ=Once] :: [a_a5iTf]
                                          [LclId] =
                                              CCCS :! [t_s5pAM sat_s5pB7];
                                        } in  w_s5pAP sat_s5pB8; } in
                              let {
                                sat_s5pBe [Occ=Once] :: [c_s5koH]
                                [LclId] =
                                    CCCS :! [sat_s5pB9 sat_s5pBd]; } in
                              let {
                                sat_s5pB6 [Occ=Once] :: [a_a5iTf]
                                [LclId] =
                                    CCCS :! [y_s5pAT us_s5pB2];
                              } in  (#,#) [sat_s5pB6 sat_s5pBe];
                        }; } in
              let {
                z_s5pBf [Occ=OnceL] :: [[a_a5iTf]]
                [LclId] =
                    [ds1_s5pAK t_s5pAM ts_s5pAN] \u []
                        let {
                          sat_s5pBg [Occ=Once] :: [a_a5iTf]
                          [LclId] =
                              CCCS :! [t_s5pAM ds1_s5pAK];
                        } in  Data.OldList.permutations1 ts_s5pAN sat_s5pBg; } in
              let {
                go_s5pBh [Occ=LoopBreaker] :: [[a_a5iTf]] -> [[a_a5iTf]]
                [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                    sat-only [$winterleave'_s5pAO z_s5pBf go_s5pBh] \r [ds2_s5pBi]
                        case ds2_s5pBi of {
                          [] -> z_s5pBf;
                          : y_s5pBk [Occ=Once] ys_s5pBl [Occ=Once] ->
                              let {
                                sat_s5pBm [Occ=Once] :: [[a_a5iTf]]
                                [LclId] =
                                    [go_s5pBh ys_s5pBl] \u [] go_s5pBh ys_s5pBl;
                              } in 
                                case $winterleave'_s5pAO GHC.Base.id y_s5pBk sat_s5pBm of {
                                  (#,#) _ [Occ=Dead] ww2_s5pBp [Occ=Once] -> ww2_s5pBp;
                                };
                        }; } in
              let {
                sat_s5pBq [Occ=Once] :: [[a_a5iTf]]
                [LclId] =
                    [ds1_s5pAK] \u []
                        Data.OldList.permutations1 ds1_s5pAK GHC.Types.[]; } in
              let {
                sat_s5pBr [Occ=Once] :: [[a_a5iTf]]
                [LclId] =
                    CCCS :! [ds1_s5pAK sat_s5pBq];
              } in  go_s5pBh sat_s5pBr;
        };

Data.OldList.permutations :: forall a. [a] -> [[a]]
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [xs0_s5pBs]
        let {
          sat_s5pBt [Occ=Once] :: [[a_a5iTf]]
          [LclId] =
              [xs0_s5pBs] \u []
                  Data.OldList.permutations1 xs0_s5pBs GHC.Types.[];
        } in  : [xs0_s5pBs sat_s5pBt];

lvl6_r5kSo :: forall a. [[a]]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Types.[] GHC.Types.[]];

Data.OldList.sortBy
  :: forall a. (a -> a -> GHC.Types.Ordering) -> [a] -> [a]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><S,1*U>,
 Unf=OtherCon []] =
    [] \r [cmp_s5pBu eta_s5pBv]
        let {
          merge_s5pBw [Occ=LoopBreaker]
            :: [a_a5iQ6] -> [a_a5iQ6] -> [a_a5iQ6]
          [LclId, Arity=2, Str=<S,1*U><S,1*U>, Unf=OtherCon []] =
              sat-only [cmp_s5pBu merge_s5pBw] \r [as_s5pBx bs_s5pBy]
                  case as_s5pBx of wild_s5pBz {
                    [] -> bs_s5pBy;
                    : a1_s5pBA as'_s5pBB [Occ=Once] ->
                        case bs_s5pBy of wild1_s5pBC {
                          [] -> wild_s5pBz;
                          : b_s5pBD bs'_s5pBE [Occ=Once] ->
                              case cmp_s5pBu a1_s5pBA b_s5pBD of {
                                __DEFAULT ->
                                    let {
                                      sat_s5pBG [Occ=Once] :: [a_a5iQ6]
                                      [LclId] =
                                          [merge_s5pBw as'_s5pBB wild1_s5pBC] \u []
                                              merge_s5pBw as'_s5pBB wild1_s5pBC;
                                    } in  : [a1_s5pBA sat_s5pBG];
                                GHC.Types.GT ->
                                    let {
                                      sat_s5pBH [Occ=Once] :: [a_a5iQ6]
                                      [LclId] =
                                          [merge_s5pBw wild_s5pBz bs'_s5pBE] \u []
                                              merge_s5pBw wild_s5pBz bs'_s5pBE;
                                    } in  : [b_s5pBD sat_s5pBH];
                              };
                        };
                  }; } in
        let {
          mergePairs_s5pBI [Occ=LoopBreaker] :: [[a_a5iQ6]] -> [[a_a5iQ6]]
          [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
              sat-only [merge_s5pBw mergePairs_s5pBI] \r [ds_s5pBJ]
                  case ds_s5pBJ of wild_s5pBK {
                    [] -> [] [];
                    : a1_s5pBL [Occ=Once] ds1_s5pBM [Occ=Once!] ->
                        case ds1_s5pBM of {
                          [] -> wild_s5pBK;
                          : b_s5pBO [Occ=Once] xs_s5pBP [Occ=Once] ->
                              case merge_s5pBw a1_s5pBL b_s5pBO of x_s5pBQ {
                                __DEFAULT ->
                                    let {
                                      sat_s5pBR [Occ=Once] :: [[a_a5iQ6]]
                                      [LclId] =
                                          [mergePairs_s5pBI xs_s5pBP] \u []
                                              mergePairs_s5pBI xs_s5pBP;
                                    } in  : [x_s5pBQ sat_s5pBR];
                              };
                        };
                  }; } in
        let {
          lvl12_s5pBS [Occ=OnceL] :: [[a_a5iQ6]]
          [LclId] =
              [mergePairs_s5pBI] \u [] mergePairs_s5pBI GHC.Types.[]; } in
        let {
          sequences_s5pBT :: [a_a5iQ6] -> [[a_a5iQ6]]
          [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
              sat-only [cmp_s5pBu descending_s5pBV ascending_s5pBW] \r [ds_s5pBX]
                  case ds_s5pBX of wild_s5pBY {
                    [] -> lvl6_r5kSo;
                    : a1_s5pBZ ds1_s5pC0 [Occ=Once!] ->
                        case ds1_s5pC0 of {
                          [] -> : [wild_s5pBY GHC.Types.[]];
                          : b_s5pC2 xs_s5pC3 [Occ=Once*] ->
                              case cmp_s5pBu a1_s5pBZ b_s5pC2 of {
                                __DEFAULT ->
                                    let {
                                      sat_s5pC5 [Occ=Once] :: [a_a5iQ6] -> [a_a5iQ6]
                                      [LclId] =
                                          [a1_s5pBZ] \r [eta_B1] : [a1_s5pBZ eta_B1];
                                    } in  ascending_s5pBW b_s5pC2 sat_s5pC5 xs_s5pC3;
                                GHC.Types.GT ->
                                    let {
                                      sat_s5pC6 [Occ=Once] :: [a_a5iQ6]
                                      [LclId] =
                                          CCCS :! [a1_s5pBZ GHC.Types.[]];
                                    } in  descending_s5pBV b_s5pC2 sat_s5pC6 xs_s5pC3;
                              };
                        };
                  };
          lvl13_s5pBU :: [[a_a5iQ6]]
          [LclId] =
              [sequences_s5pBT] \u [] sequences_s5pBT GHC.Types.[];
          descending_s5pBV [Occ=LoopBreaker]
            :: a_a5iQ6 -> [a_a5iQ6] -> [a_a5iQ6] -> [[a_a5iQ6]]
          [LclId, Arity=3, Str=<L,U><L,U><S,1*U>, Unf=OtherCon []] =
              sat-only [cmp_s5pBu
                        sequences_s5pBT
                        lvl13_s5pBU
                        descending_s5pBV] \r [a1_s5pC7 as_s5pC8 ds_s5pC9]
                  case ds_s5pC9 of wild_s5pCa {
                    [] ->
                        let {
                          sat_s5pCb [Occ=Once] :: [a_a5iQ6]
                          [LclId] =
                              CCCS :! [a1_s5pC7 as_s5pC8];
                        } in  : [sat_s5pCb lvl13_s5pBU];
                    : b_s5pCc bs_s5pCd [Occ=Once] ->
                        case cmp_s5pBu a1_s5pC7 b_s5pCc of {
                          __DEFAULT ->
                              let {
                                sat_s5pCg [Occ=Once] :: [[a_a5iQ6]]
                                [LclId] =
                                    [sequences_s5pBT wild_s5pCa] \u []
                                        sequences_s5pBT wild_s5pCa; } in
                              let {
                                sat_s5pCf [Occ=Once] :: [a_a5iQ6]
                                [LclId] =
                                    CCCS :! [a1_s5pC7 as_s5pC8];
                              } in  : [sat_s5pCf sat_s5pCg];
                          GHC.Types.GT ->
                              let {
                                sat_s5pCh [Occ=Once] :: [a_a5iQ6]
                                [LclId] =
                                    CCCS :! [a1_s5pC7 as_s5pC8];
                              } in  descending_s5pBV b_s5pCc sat_s5pCh bs_s5pCd;
                        };
                  };
          ascending_s5pBW [Occ=LoopBreaker]
            :: a_a5iQ6 -> ([a_a5iQ6] -> [a_a5iQ6]) -> [a_a5iQ6] -> [[a_a5iQ6]]
          [LclId, Arity=3, Str=<L,U><C(S),1*C1(U)><S,1*U>, Unf=OtherCon []] =
              sat-only [cmp_s5pBu
                        sequences_s5pBT
                        lvl13_s5pBU
                        ascending_s5pBW] \r [a1_s5pCi as_s5pCj ds_s5pCk]
                  case ds_s5pCk of wild_s5pCl {
                    [] ->
                        let {
                          sat_s5pCm [Occ=Once] :: [a_a5iQ6]
                          [LclId] =
                              CCCS :! [a1_s5pCi GHC.Types.[]];
                        } in 
                          case as_s5pCj sat_s5pCm of x_s5pCn {
                            __DEFAULT -> : [x_s5pCn lvl13_s5pBU];
                          };
                    : b_s5pCo bs_s5pCp [Occ=Once] ->
                        case cmp_s5pBu a1_s5pCi b_s5pCo of {
                          __DEFAULT ->
                              let {
                                sat_s5pCt [Occ=Once] :: [a_a5iQ6] -> [a_a5iQ6]
                                [LclId] =
                                    [a1_s5pCi as_s5pCj] \r [ys_s5pCr]
                                        let {
                                          sat_s5pCs [Occ=Once] :: [a_a5iQ6]
                                          [LclId] =
                                              CCCS :! [a1_s5pCi ys_s5pCr];
                                        } in  as_s5pCj sat_s5pCs;
                              } in  ascending_s5pBW b_s5pCo sat_s5pCt bs_s5pCp;
                          GHC.Types.GT ->
                              let {
                                sat_s5pCu [Occ=Once] :: [a_a5iQ6]
                                [LclId] =
                                    CCCS :! [a1_s5pCi GHC.Types.[]];
                              } in 
                                case as_s5pCj sat_s5pCu of x_s5pCv {
                                  __DEFAULT ->
                                      let {
                                        sat_s5pCw [Occ=Once] :: [[a_a5iQ6]]
                                        [LclId] =
                                            [sequences_s5pBT wild_s5pCl] \u []
                                                sequences_s5pBT wild_s5pCl;
                                      } in  : [x_s5pCv sat_s5pCw];
                                };
                        };
                  };
        } in 
          case sequences_s5pBT eta_s5pBv of sat_s5pCG {
            __DEFAULT ->
                let-no-escape {
                  mergeAll_s5pCx [Occ=LoopBreakerT[1]] :: [[a_a5iQ6]] -> [a_a5iQ6]
                  [LclId[JoinId(1)], Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                      sat-only [mergePairs_s5pBI
                                lvl12_s5pBS
                                mergeAll_s5pCx] \r [ds_s5pCy]
                          case ds_s5pCy of wild_s5pCz {
                            [] -> mergeAll_s5pCx lvl12_s5pBS;
                            : x_s5pCA [Occ=Once] ds1_s5pCB [Occ=Once!] ->
                                case ds1_s5pCB of {
                                  [] -> x_s5pCA;
                                  : _ [Occ=Dead] _ [Occ=Dead] ->
                                      case mergePairs_s5pBI wild_s5pCz of sat_s5pCF {
                                        __DEFAULT -> mergeAll_s5pCx sat_s5pCF;
                                      };
                                };
                          };
                } in  mergeAll_s5pCx sat_s5pCG;
          };

Data.OldList.sortOn
  :: forall b a. GHC.Classes.Ord b => (a -> b) -> [a] -> [a]
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U(A,C(C1(U)),A,A,A,A,A,A)><L,C(U)><S,1*U>,
 Unf=OtherCon []] =
    [] \r [$dOrd_s5pCH f_s5pCI eta_s5pCJ]
        let {
          sat_s5pCX [Occ=Once] :: a_a5iSu -> (b_a5iSt, a_a5iSu)
          [LclId] =
              [f_s5pCI] \r [x_s5pCV]
                  case f_s5pCI x_s5pCV of y_s5pCW {
                    __DEFAULT -> (,) [y_s5pCW x_s5pCV];
                  };
        } in 
          case GHC.Base.map sat_s5pCX eta_s5pCJ of sat_s5pCY {
            __DEFAULT ->
                let {
                  sat_s5pCU [Occ=Once]
                    :: (b_a5iSt, a_a5iSu) -> (b_a5iSt, a_a5iSu) -> GHC.Types.Ordering
                  [LclId] =
                      [$dOrd_s5pCH] \r [x_s5pCK y_s5pCL]
                          let {
                            sat_s5pCT [Occ=Once] :: b_a5iSt
                            [LclId] =
                                [y_s5pCL] \u []
                                    case y_s5pCL of {
                                      (,) x1_s5pCR [Occ=Once] _ [Occ=Dead] -> x1_s5pCR;
                                    }; } in
                          let {
                            sat_s5pCP [Occ=Once] :: b_a5iSt
                            [LclId] =
                                [x_s5pCK] \u []
                                    case x_s5pCK of {
                                      (,) x1_s5pCN [Occ=Once] _ [Occ=Dead] -> x1_s5pCN;
                                    };
                          } in  GHC.Classes.compare $dOrd_s5pCH sat_s5pCP sat_s5pCT;
                } in 
                  case Data.OldList.sortBy sat_s5pCU sat_s5pCY of sat_s5pCZ {
                    __DEFAULT -> GHC.Base.map Data.Tuple.snd sat_s5pCZ;
                  };
          };

Data.OldList.sort :: forall a. GHC.Classes.Ord a => [a] -> [a]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*U(A,1*C(C1(U)),A,A,A,A,A,A)><S,1*U>,
 Unf=OtherCon []] =
    [] \r [$dOrd_s5pD0 eta_s5pD1]
        let {
          sat_s5pD2 [Occ=Once, Dmd=<L,C(C1(U))>]
            :: a_a5iT8 -> a_a5iT8 -> GHC.Types.Ordering
          [LclId] =
              [$dOrd_s5pD0] \u [] GHC.Classes.compare $dOrd_s5pD0;
        } in  Data.OldList.sortBy sat_s5pD2 eta_s5pD1;

Data.OldList.unfoldr [InlPrag=INLINE (sat-args=2)]
  :: forall b a. (b -> GHC.Base.Maybe (a, b)) -> b -> [a]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<C(S),C(U)><L,U>,
 Unf=OtherCon []] =
    [] \r [f_s5pD3 b0_s5pD4]
        let {
          go_s5pD5 [Occ=LoopBreaker] :: b_a5iPE -> [a_a5iPF]
          [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
              sat-only [f_s5pD3 go_s5pD5] \r [b1_s5pD6]
                  case f_s5pD3 b1_s5pD6 of {
                    GHC.Base.Nothing -> [] [];
                    GHC.Base.Just ds_s5pD8 [Occ=Once!] ->
                        case ds_s5pD8 of {
                          (,) a1_s5pDa [Occ=Once] new_b_s5pDb [Occ=Once] ->
                              let {
                                sat_s5pDc [Occ=Once] :: [a_a5iPF]
                                [LclId] =
                                    [go_s5pD5 new_b_s5pDb] \u [] go_s5pD5 new_b_s5pDb;
                              } in  : [a1_s5pDa sat_s5pDc];
                        };
                  };
        } in  go_s5pD5 b0_s5pD4;

lvl7_r5kSp :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\n'#];

Data.OldList.unlines [Occ=LoopBreaker]
  :: [GHC.Base.String] -> GHC.Base.String
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s5pDd]
        case ds_s5pDd of {
          [] -> [] [];
          : l_s5pDf [Occ=Once] ls_s5pDg [Occ=Once] ->
              let {
                sat_s5pDh [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [ls_s5pDg] \u [] Data.OldList.unlines ls_s5pDg; } in
              let {
                sat_s5pDi [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    CCCS :! [lvl7_r5kSp sat_s5pDh];
              } in  GHC.Base.++ l_s5pDf sat_s5pDi;
        };

Data.OldList.wordsFB [InlPrag=INLINE[0] (sat-args=2),
                      Occ=LoopBreaker!]
  :: forall b.
     ([GHC.Types.Char] -> b -> b) -> b -> GHC.Base.String -> b
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><L,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [c_s5pDj n_s5pDk eta_s5pDl]
        let {
          go_s5pDm [Occ=LoopBreaker] :: [GHC.Types.Char] -> b_a5iOj
          [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
              sat-only [c_s5pDj n_s5pDk go_s5pDm] \r [s_s5pDn]
                  case GHC.List.dropWhile GHC.Unicode.isSpace s_s5pDn of wild_s5pDo {
                    [] -> n_s5pDk;
                    : _ [Occ=Dead] _ [Occ=Dead] ->
                        let {
                          ds_s5pDr [Dmd=<L,U(1*U,1*U)>]
                            :: ([GHC.Types.Char], [GHC.Types.Char])
                          [LclId] =
                              [wild_s5pDo] \u []
                                  case GHC.List.$wbreak GHC.Unicode.isSpace wild_s5pDo of {
                                    (#,#) ww1_s5pDt [Occ=Once] ww2_s5pDu [Occ=Once] ->
                                        (,) [ww1_s5pDt ww2_s5pDu];
                                  }; } in
                        let {
                          sat_s5pDC [Occ=Once] :: b_a5iOj
                          [LclId] =
                              [go_s5pDm ds_s5pDr] \u []
                                  case ds_s5pDr of {
                                    (,) _ [Occ=Dead] s''_s5pDB [Occ=Once] -> go_s5pDm s''_s5pDB;
                                  }; } in
                        let {
                          sat_s5pDy [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              [ds_s5pDr] \u []
                                  case ds_s5pDr of {
                                    (,) w_s5pDw [Occ=Once] _ [Occ=Dead] -> w_s5pDw;
                                  };
                        } in  c_s5pDj sat_s5pDy sat_s5pDC;
                  };
        } in  go_s5pDm eta_s5pDl;
Data.OldList.words [InlPrag=NOINLINE[1], Occ=LoopBreaker]
  :: GHC.Base.String -> [GHC.Base.String]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [s_s5pDD]
        case GHC.List.dropWhile GHC.Unicode.isSpace s_s5pDD of wild_s5pDE {
          [] -> [] [];
          : _ [Occ=Dead] _ [Occ=Dead] ->
              let {
                ds_s5pDH [Dmd=<L,U(1*U,1*U)>]
                  :: ([GHC.Types.Char], [GHC.Types.Char])
                [LclId] =
                    [wild_s5pDE] \u []
                        case GHC.List.$wbreak GHC.Unicode.isSpace wild_s5pDE of {
                          (#,#) ww1_s5pDJ [Occ=Once] ww2_s5pDK [Occ=Once] ->
                              (,) [ww1_s5pDJ ww2_s5pDK];
                        }; } in
              let {
                sat_s5pDS [Occ=Once] :: [[GHC.Types.Char]]
                [LclId] =
                    [ds_s5pDH] \u []
                        case ds_s5pDH of {
                          (,) _ [Occ=Dead] s''_s5pDR [Occ=Once] ->
                              Data.OldList.words s''_s5pDR;
                        }; } in
              let {
                sat_s5pDO [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [ds_s5pDH] \u []
                        case ds_s5pDH of {
                          (,) w_s5pDM [Occ=Once] _ [Occ=Dead] -> w_s5pDM;
                        };
              } in  : [sat_s5pDO sat_s5pDS];
        };

lvl8_r5kSq :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! [' '#];

Data.OldList.unwordsFB [InlPrag=INLINE[0] (sat-args=2)]
  :: GHC.Base.String -> GHC.Base.String -> GHC.Base.String
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*U><L,1*U>m2,
 Unf=OtherCon []] =
    [] \r [w_s5pDT r_s5pDU]
        let {
          sat_s5pDV [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [w_s5pDT r_s5pDU] \u [] GHC.Base.++ w_s5pDT r_s5pDU;
        } in  : [lvl8_r5kSq sat_s5pDV];

Data.OldList.unwords_go [Occ=LoopBreaker]
  :: [[GHC.Types.Char]] -> [GHC.Types.Char]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s5pDW]
        case ds_s5pDW of {
          [] -> [] [];
          : v_s5pDY [Occ=Once] vs_s5pDZ [Occ=Once] ->
              let {
                sat_s5pE1 [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [v_s5pDY vs_s5pDZ] \u []
                        let {
                          sat_s5pE0 [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                          [LclId] =
                              [vs_s5pDZ] \s [] Data.OldList.unwords_go vs_s5pDZ;
                        } in  GHC.Base.++ v_s5pDY sat_s5pE0;
              } in  : [lvl8_r5kSq sat_s5pE1];
        };

Data.OldList.tailUnwords [InlPrag=INLINE[0] (sat-args=1),
                          Occ=LoopBreaker!]
  :: GHC.Base.String -> GHC.Base.String
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s5pE2]
        case ds_s5pE2 of {
          [] -> [] [];
          : _ [Occ=Dead] xs_s5pE5 [Occ=Once] -> xs_s5pE5;
        };
Data.OldList.unwords [InlPrag=NOINLINE[1], Occ=LoopBreaker!]
  :: [GHC.Base.String] -> GHC.Base.String
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s5pE6]
        case ds_s5pE6 of {
          [] -> [] [];
          : w_s5pE8 [Occ=Once] ws_s5pE9 [Occ=Once] ->
              let {
                sat_s5pEa [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                [LclId] =
                    [ws_s5pE9] \s [] Data.OldList.unwords_go ws_s5pE9;
              } in  GHC.Base.++ w_s5pE8 sat_s5pEa;
        };

lvl9_r5kSr :: forall a. [a]
[GblId] =
    [] \u [] GHC.List.reverse1 GHC.Types.[] GHC.Types.[];

lvl10_r5kSs :: forall a. [a]
[GblId] =
    [] \u [] GHC.Base.++ GHC.Types.[] lvl9_r5kSr;

poly_$wgo_r5kSt
  :: forall a. [a] -> GHC.Prim.Word# -> [a] -> [a] -> [[a]]
[GblId, Arity=4, Str=<S,1*U><L,U><L,U><L,U>, Unf=OtherCon []] =
    sat-only [] \r [w_s5pEb ww_s5pEc ww1_s5pEd ww2_s5pEe]
        case w_s5pEb of {
          [] -> [] [];
          : y_s5pEg [Occ=OnceL*] ys_s5pEh [Occ=Once*] ->
              case plusWord# [ww_s5pEc 1##] of lp_s5pEi [Dmd=<S,U>] {
                __DEFAULT ->
                    case ltWord# [lp_s5pEi 255##] of {
                      __DEFAULT ->
                          case plusWord# [lp_s5pEi 1##] of sat_s5pEk {
                            __DEFAULT ->
                                case and# [lp_s5pEi sat_s5pEk] of {
                                  __DEFAULT ->
                                      let {
                                        b'_s5pEm :: [a_s5koc]
                                        [LclId, Unf=OtherCon []] =
                                            CCCS :! [y_s5pEg ww2_s5pEe]; } in
                                      let {
                                        sat_s5pEp [Occ=Once] :: [[a_s5koc]]
                                        [LclId] =
                                            [ww1_s5pEd ys_s5pEh lp_s5pEi b'_s5pEm] \u []
                                                poly_$wgo_r5kSt
                                                    ys_s5pEh lp_s5pEi ww1_s5pEd b'_s5pEm; } in
                                      let {
                                        sat_s5pEo [Occ=Once] :: [a_s5koc]
                                        [LclId] =
                                            [ww1_s5pEd b'_s5pEm] \u []
                                                let {
                                                  sat_s5pEn [Occ=Once, Dmd=<L,1*U>] :: [a_s5koc]
                                                  [LclId] =
                                                      [b'_s5pEm] \s []
                                                          GHC.List.reverse1 b'_s5pEm GHC.Types.[];
                                                } in  GHC.Base.++ ww1_s5pEd sat_s5pEn;
                                      } in  : [sat_s5pEo sat_s5pEp];
                                  0## ->
                                      let {
                                        b'_s5pEq :: [a_s5koc]
                                        [LclId] =
                                            [ww1_s5pEd ww2_s5pEe y_s5pEg] \u []
                                                let {
                                                  sat_s5pEs [Occ=Once, Dmd=<L,1*U>] :: [a_s5koc]
                                                  [LclId] =
                                                      [ww2_s5pEe y_s5pEg] \s []
                                                          let {
                                                            sat_s5pEr [Occ=Once] :: [a_s5koc]
                                                            [LclId] =
                                                                CCCS :! [y_s5pEg ww2_s5pEe];
                                                          } in 
                                                            GHC.List.reverse1
                                                                sat_s5pEr GHC.Types.[];
                                                } in  GHC.Base.++ ww1_s5pEd sat_s5pEs; } in
                                      let {
                                        sat_s5pEu [Occ=Once] :: [[a_s5koc]]
                                        [LclId] =
                                            [ys_s5pEh lp_s5pEi b'_s5pEq] \u []
                                                poly_$wgo_r5kSt
                                                    ys_s5pEh lp_s5pEi b'_s5pEq GHC.Types.[]; } in
                                      let {
                                        sat_s5pEt [Occ=Once] :: [a_s5koc]
                                        [LclId] =
                                            [b'_s5pEq] \u [] GHC.Base.++ b'_s5pEq lvl9_r5kSr;
                                      } in  : [sat_s5pEt sat_s5pEu];
                                };
                          };
                      1# ->
                          let {
                            b'_s5pEv :: [a_s5koc]
                            [LclId, Unf=OtherCon []] =
                                CCCS :! [y_s5pEg ww2_s5pEe]; } in
                          let {
                            sat_s5pEy [Occ=Once] :: [[a_s5koc]]
                            [LclId] =
                                [ww1_s5pEd ys_s5pEh lp_s5pEi b'_s5pEv] \u []
                                    poly_$wgo_r5kSt ys_s5pEh lp_s5pEi ww1_s5pEd b'_s5pEv; } in
                          let {
                            sat_s5pEx [Occ=Once] :: [a_s5koc]
                            [LclId] =
                                [ww1_s5pEd b'_s5pEv] \u []
                                    let {
                                      sat_s5pEw [Occ=Once, Dmd=<L,1*U>] :: [a_s5koc]
                                      [LclId] =
                                          [b'_s5pEv] \s [] GHC.List.reverse1 b'_s5pEv GHC.Types.[];
                                    } in  GHC.Base.++ ww1_s5pEd sat_s5pEw;
                          } in  : [sat_s5pEx sat_s5pEy];
                    };
              };
        };

Data.OldList.$winits [InlPrag=NOINLINE]
  :: forall a. [a] -> (# [a], [[a]] #)
[GblId, Arity=1, Str=<L,1*U>, Unf=OtherCon []] =
    [] \r [w_s5pEz]
        let {
          sat_s5pEA [Occ=Once] :: [[a_s5koc]]
          [LclId] =
              [w_s5pEz] \u []
                  poly_$wgo_r5kSt w_s5pEz 0## GHC.Types.[] GHC.Types.[];
        } in  (#,#) [lvl10_r5kSs sat_s5pEA];

Data.OldList.inits [InlPrag=NOUSERINLINE[0]]
  :: forall a. [a] -> [[a]]
[GblId, Arity=1, Str=<L,1*U>m2, Unf=OtherCon []] =
    [] \r [w_s5pEB]
        case Data.OldList.$winits w_s5pEB of {
          (#,#) ww1_s5pED [Occ=Once] ww2_s5pEE [Occ=Once] ->
              : [ww1_s5pED ww2_s5pEE];
        };

Data.OldList.$tc'SnocBuilder3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'SnocBuilder"#;

Data.OldList.$tc'SnocBuilder2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.OldList.$tc'SnocBuilder3];

Data.OldList.$tcSnocBuilder2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SnocBuilder"#;

Data.OldList.$tcSnocBuilder1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.OldList.$tcSnocBuilder2];

Data.OldList.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Data.OldList"#;

Data.OldList.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.OldList.$trModule2];

Data.OldList.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Data.OldList.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.OldList.$trModule4];

Data.OldList.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Data.OldList.$trModule3
                                     Data.OldList.$trModule1];

Data.OldList.$tcSnocBuilder :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [17650604350574790456##
                                    3021529305462083578##
                                    Data.OldList.$trModule
                                    Data.OldList.$tcSnocBuilder1
                                    0#
                                    GHC.Types.krep$*Arr*];

$krep_r5kSu :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcWord
                                              GHC.Types.[]];

$krep1_r5kSv :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

$krep2_r5kSw :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep1_r5kSv GHC.Types.[]];

$krep3_r5kSx :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep2_r5kSw];

$krep4_r5kSy :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Data.OldList.$tcSnocBuilder
                                              $krep2_r5kSw];

$krep5_r5kSz :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_r5kSx $krep4_r5kSy];

$krep6_r5kSA :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_r5kSx $krep5_r5kSz];

Data.OldList.$tc'SnocBuilder1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_r5kSu $krep6_r5kSA];

Data.OldList.$tc'SnocBuilder :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [6719263830224029004##
                                    9134053658265160069##
                                    Data.OldList.$trModule
                                    Data.OldList.$tc'SnocBuilder2
                                    1#
                                    Data.OldList.$tc'SnocBuilder1];

lvl11_r5kSB :: GHC.Types.Char -> GHC.Types.Bool
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(1*U)>,
 Unf=OtherCon []] =
    [] \r [ds_s5pEF]
        case ds_s5pEF of {
          GHC.Types.C# x_s5pEH [Occ=Once!] ->
              case x_s5pEH of {
                __DEFAULT -> GHC.Types.False [];
                '\n'# -> GHC.Types.True [];
              };
        };

Data.OldList.lines [Occ=LoopBreaker]
  :: GHC.Base.String -> [GHC.Base.String]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s5pEJ]
        case ds_s5pEJ of wild_s5pEK {
          [] -> [] [];
          : _ [Occ=Dead] _ [Occ=Dead] ->
              let {
                ds1_s5pEN [Dmd=<L,U(1*U,1*U)>]
                  :: ([GHC.Types.Char], [[GHC.Types.Char]])
                [LclId] =
                    [wild_s5pEK] \u []
                        case GHC.List.$wbreak lvl11_r5kSB wild_s5pEK of {
                          (#,#) ww1_s5pEP [Occ=Once] ww2_s5pEQ [Occ=Once!] ->
                              let {
                                sat_s5pEU [Occ=Once] :: [[GHC.Types.Char]]
                                [LclId] =
                                    [ww2_s5pEQ] \u []
                                        case ww2_s5pEQ of {
                                          [] -> [] [];
                                          : _ [Occ=Dead] s''_s5pET [Occ=Once] ->
                                              Data.OldList.lines s''_s5pET;
                                        };
                              } in  (,) [ww1_s5pEP sat_s5pEU];
                        }; } in
              let {
                sat_s5pF2 [Occ=Once] :: [[GHC.Types.Char]]
                [LclId] =
                    [ds1_s5pEN] \u []
                        case ds1_s5pEN of {
                          (,) _ [Occ=Dead] t_s5pF1 [Occ=Once] -> t_s5pF1;
                        }; } in
              let {
                sat_s5pEY [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [ds1_s5pEN] \u []
                        case ds1_s5pEN of {
                          (,) h_s5pEW [Occ=Once] _ [Occ=Dead] -> h_s5pEW;
                        };
              } in  : [sat_s5pEY sat_s5pF2];
        };

Data.OldList.SnocBuilder
  :: forall a.
     GHC.Prim.Word# -> [a] -> [a] -> Data.OldList.SnocBuilder a
[GblId[DataCon],
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        Data.OldList.SnocBuilder [eta_B3 eta_B2 eta_B1];

