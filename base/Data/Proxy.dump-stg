
==================== Pre unarise: ====================
2018-03-16 16:00:08.805538074 UTC

Data.Proxy.$fEqProxy_$c==
  :: forall k (s :: k).
     Data.Proxy.Proxy s -> Data.Proxy.Proxy s -> GHC.Types.Bool
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><L,A>, Unf=OtherCon []] =
    [] \r [ds_s5bEL ds1_s5bEM] GHC.Types.True [];

Data.Proxy.$fEqProxy_$c/= [InlPrag=INLINE (sat-args=2)]
  :: forall k (s :: k).
     Data.Proxy.Proxy s -> Data.Proxy.Proxy s -> GHC.Types.Bool
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><L,A>, Unf=OtherCon []] =
    [] \r [eta_s5bEN eta1_s5bEO] GHC.Types.False [];

Data.Proxy.$fEqProxy [InlPrag=NOUSERINLINE CONLIKE]
  :: forall k (s :: k). GHC.Classes.Eq (Data.Proxy.Proxy s)
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [Data.Proxy.$fEqProxy_$c==
                                     Data.Proxy.$fEqProxy_$c/=];

Data.Proxy.$fOrdProxy_$ccompare
  :: forall k (s :: k).
     Data.Proxy.Proxy s -> Data.Proxy.Proxy s -> GHC.Types.Ordering
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><L,A>, Unf=OtherCon []] =
    [] \r [ds_s5bEP ds1_s5bEQ] GHC.Types.EQ [];

Data.Proxy.$fOrdProxy_$c<
  :: forall k (s :: k).
     Data.Proxy.Proxy s -> Data.Proxy.Proxy s -> GHC.Types.Bool
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><L,A>, Unf=OtherCon []] =
    [] \r [x_s5bER y_s5bES] GHC.Types.False [];

Data.Proxy.$fOrdProxy_$cmax
  :: forall k (s :: k).
     Data.Proxy.Proxy s -> Data.Proxy.Proxy s -> Data.Proxy.Proxy s
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><S,1*U()>m,
 Unf=OtherCon []] =
    [] \r [x_s5bET y_s5bEU] y_s5bEU;

Data.Proxy.$fOrdProxy_$cmin
  :: forall k (s :: k).
     Data.Proxy.Proxy s -> Data.Proxy.Proxy s -> Data.Proxy.Proxy s
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U()><L,A>m,
 Unf=OtherCon []] =
    [] \r [x_s5bEV y_s5bEW] x_s5bEV;

Data.Proxy.$fOrdProxy [InlPrag=NOUSERINLINE CONLIKE]
  :: forall k (s :: k). GHC.Classes.Ord (Data.Proxy.Proxy s)
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [Data.Proxy.$fEqProxy
                                      Data.Proxy.$fOrdProxy_$ccompare
                                      Data.Proxy.$fOrdProxy_$c<
                                      Data.Proxy.$fEqProxy_$c==
                                      Data.Proxy.$fOrdProxy_$c<
                                      Data.Proxy.$fEqProxy_$c==
                                      Data.Proxy.$fOrdProxy_$cmax
                                      Data.Proxy.$fOrdProxy_$cmin];

Data.Proxy.$fReadProxy4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Proxy"#;

Data.Proxy.$fReadProxy3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Data.Proxy.$fReadProxy4;

Data.Proxy.$fShowProxy2 :: [GHC.Types.Char] -> [GHC.Types.Char]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Base.++ Data.Proxy.$fReadProxy3 eta_B1;

Data.Proxy.$fShowProxy_$cshowsPrec
  :: forall k (s :: k).
     GHC.Types.Int -> Data.Proxy.Proxy s -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><L,A>, Unf=OtherCon []] =
    [] \r [ds_s5bEX ds1_s5bEY eta_B1] Data.Proxy.$fShowProxy2 eta_B1;

Data.Proxy.$fShowProxy_$cshow
  :: forall k (s :: k). Data.Proxy.Proxy s -> GHC.Base.String
[GblId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
    [] \r [x_s5bEZ] Data.Proxy.$fReadProxy3;

Data.Proxy.$fShowProxy1
  :: forall k (s :: k).
     Data.Proxy.Proxy s -> [GHC.Types.Char] -> [GHC.Types.Char]
[GblId, Arity=2, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds_s5bF0 eta_B1] Data.Proxy.$fShowProxy2 eta_B1;

Data.Proxy.$fShowProxy_$cshowList
  :: forall k (s :: k). [Data.Proxy.Proxy s] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s5bF1 s1_s5bF2]
        GHC.Show.showList__ Data.Proxy.$fShowProxy1 ls_s5bF1 s1_s5bF2;

Data.Proxy.$fShowProxy [InlPrag=NOUSERINLINE CONLIKE]
  :: forall k (s :: k). GHC.Show.Show (Data.Proxy.Proxy s)
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [Data.Proxy.$fShowProxy_$cshowsPrec
                                    Data.Proxy.$fShowProxy_$cshow
                                    Data.Proxy.$fShowProxy_$cshowList];

Data.Proxy.$fEnumProxy1 :: forall k (s :: k). [Data.Proxy.Proxy s]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [Data.Proxy.Proxy GHC.Types.[]];

Data.Proxy.$fEnumProxy_$cenumFromThenTo
  :: forall k (s :: k).
     Data.Proxy.Proxy s
     -> Data.Proxy.Proxy s -> Data.Proxy.Proxy s -> [Data.Proxy.Proxy s]
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,A><L,A><L,A>m2,
 Unf=OtherCon []] =
    [] \r [ds_s5bF3 ds1_s5bF4 ds2_s5bF5] Data.Proxy.$fEnumProxy1;

Data.Proxy.$fEnumProxy_$cenumFromTo
  :: forall k (s :: k).
     Data.Proxy.Proxy s -> Data.Proxy.Proxy s -> [Data.Proxy.Proxy s]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><L,A>m2,
 Unf=OtherCon []] =
    [] \r [ds_s5bF6 ds1_s5bF7] Data.Proxy.$fEnumProxy1;

Data.Proxy.$fEnumProxy_$cenumFrom
  :: forall k (s :: k). Data.Proxy.Proxy s -> [Data.Proxy.Proxy s]
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m2, Unf=OtherCon []] =
    [] \r [ds_s5bF8] Data.Proxy.$fEnumProxy1;

Data.Proxy.$fEnumProxy2 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

Data.Proxy.$fEnumProxy_$cfromEnum
  :: forall k (s :: k). Data.Proxy.Proxy s -> GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m, Unf=OtherCon []] =
    [] \r [ds_s5bF9] Data.Proxy.$fEnumProxy2;

lvl_r5bED :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Proxy.toEnum: 0 expected"#;

Data.Proxy.$fEnumProxy3 :: forall k (s :: k). Data.Proxy.Proxy s
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl_r5bED of sat_s5bFa {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_s5bFa;
        };

Data.Proxy.$fEnumProxy_$ctoEnum
  :: forall k (s :: k). GHC.Types.Int -> Data.Proxy.Proxy s
[GblId, Arity=1, Str=<S(S),1*U(1*U)>, Unf=OtherCon []] =
    [] \r [ds_s5bFb]
        case ds_s5bFb of {
          GHC.Types.I# ds1_s5bFd [Occ=Once!] ->
              case ds1_s5bFd of {
                __DEFAULT -> Data.Proxy.$fEnumProxy3;
                0# -> Data.Proxy.Proxy [];
              };
        };

Data.Proxy.$fEnumProxy5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Proxy.pred"#;

Data.Proxy.$fEnumProxy4 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Data.Proxy.$fEnumProxy5;

Data.Proxy.$fEnumProxy_$cpred
  :: forall k (s :: k). Data.Proxy.Proxy s -> Data.Proxy.Proxy s
[GblId, Arity=1, Str=<B,A>x, Unf=OtherCon []] =
    [] \r [ds_s5bFf]
        GHC.Err.errorWithoutStackTrace Data.Proxy.$fEnumProxy4;

Data.Proxy.$fEnumProxy7 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Proxy.succ"#;

Data.Proxy.$fEnumProxy6 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Data.Proxy.$fEnumProxy7;

Data.Proxy.$fEnumProxy_$csucc
  :: forall k (s :: k). Data.Proxy.Proxy s -> Data.Proxy.Proxy s
[GblId, Arity=1, Str=<B,A>x, Unf=OtherCon []] =
    [] \r [ds_s5bFg]
        GHC.Err.errorWithoutStackTrace Data.Proxy.$fEnumProxy6;

Data.Proxy.$fEnumProxy [InlPrag=NOUSERINLINE CONLIKE]
  :: forall k (s :: k). GHC.Enum.Enum (Data.Proxy.Proxy s)
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Enum! [Data.Proxy.$fEnumProxy_$csucc
                                    Data.Proxy.$fEnumProxy_$cpred
                                    Data.Proxy.$fEnumProxy_$ctoEnum
                                    Data.Proxy.$fEnumProxy_$cfromEnum
                                    Data.Proxy.$fEnumProxy_$cenumFrom
                                    Data.Proxy.$fEnumProxy_$cenumFromTo
                                    Data.Proxy.$fEnumProxy_$cenumFromTo
                                    Data.Proxy.$fEnumProxy_$cenumFromThenTo];

Data.Proxy.$fIxProxy1 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [1#];

Data.Proxy.$fIxProxy_$cunsafeRangeSize
  :: forall k (s :: k).
     (Data.Proxy.Proxy s, Data.Proxy.Proxy s) -> GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m, Unf=OtherCon []] =
    [] \r [ds_s5bFh] Data.Proxy.$fIxProxy1;

Data.Proxy.$fIxProxy_$cinRange
  :: forall k (s :: k).
     (Data.Proxy.Proxy s, Data.Proxy.Proxy s)
     -> Data.Proxy.Proxy s -> GHC.Types.Bool
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><L,A>, Unf=OtherCon []] =
    [] \r [ds_s5bFi ds1_s5bFj] GHC.Types.True [];

Data.Proxy.$fIxProxy_$cunsafeIndex
  :: forall k (s :: k).
     (Data.Proxy.Proxy s, Data.Proxy.Proxy s)
     -> Data.Proxy.Proxy s -> GHC.Types.Int
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><L,A>m, Unf=OtherCon []] =
    [] \r [ds_s5bFk ds1_s5bFl] Data.Proxy.$fEnumProxy2;

Data.Proxy.$fIxProxy_$crange
  :: forall k (s :: k).
     (Data.Proxy.Proxy s, Data.Proxy.Proxy s) -> [Data.Proxy.Proxy s]
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m2, Unf=OtherCon []] =
    [] \r [ds_s5bFm] Data.Proxy.$fEnumProxy1;

Data.Proxy.$fIxProxy [InlPrag=NOUSERINLINE CONLIKE]
  :: forall k (s :: k). GHC.Arr.Ix (Data.Proxy.Proxy s)
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Arr.C:Ix! [Data.Proxy.$fOrdProxy
                                 Data.Proxy.$fIxProxy_$crange
                                 Data.Proxy.$fIxProxy_$cunsafeIndex
                                 Data.Proxy.$fIxProxy_$cunsafeIndex
                                 Data.Proxy.$fIxProxy_$cinRange
                                 Data.Proxy.$fIxProxy_$cunsafeRangeSize
                                 Data.Proxy.$fIxProxy_$cunsafeRangeSize];

Data.Proxy.$fSemigroupProxy_$cstimes
  :: forall k (s :: k) b.
     GHC.Real.Integral b =>
     b -> Data.Proxy.Proxy s -> Data.Proxy.Proxy s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,A><L,A><L,A>,
 Unf=OtherCon []] =
    [] \r [$dIntegral_s5bFn ds_s5bFo ds1_s5bFp] Data.Proxy.Proxy [];

Data.Proxy.$fSemigroupProxy_$csconcat
  :: forall k (s :: k).
     GHC.Base.NonEmpty (Data.Proxy.Proxy s) -> Data.Proxy.Proxy s
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds_s5bFq] Data.Proxy.Proxy [];

Data.Proxy.$fMonoidProxy_$c<>
  :: forall k (s :: k).
     Data.Proxy.Proxy s -> Data.Proxy.Proxy s -> Data.Proxy.Proxy s
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><L,A>, Unf=OtherCon []] =
    [] \r [ds_s5bFr ds1_s5bFs] Data.Proxy.Proxy [];

Data.Proxy.$fSemigroupProxy [InlPrag=NOUSERINLINE CONLIKE]
  :: forall k (s :: k). GHC.Base.Semigroup (Data.Proxy.Proxy s)
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Base.C:Semigroup! [Data.Proxy.$fMonoidProxy_$c<>
                                         Data.Proxy.$fSemigroupProxy_$csconcat
                                         Data.Proxy.$fSemigroupProxy_$cstimes];

Data.Proxy.$fMonoidProxy_$cmconcat
  :: forall k (s :: k). [Data.Proxy.Proxy s] -> Data.Proxy.Proxy s
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds_s5bFt] Data.Proxy.Proxy [];

Data.Proxy.$fMonoidProxy [InlPrag=NOUSERINLINE CONLIKE]
  :: forall k (s :: k). GHC.Base.Monoid (Data.Proxy.Proxy s)
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Base.C:Monoid! [Data.Proxy.$fSemigroupProxy
                                      Data.Proxy.Proxy
                                      Data.Proxy.$fMonoidProxy_$c<>
                                      Data.Proxy.$fMonoidProxy_$cmconcat];

Data.Proxy.$fFunctorProxy_$cfmap [InlPrag=INLINE (sat-args=2)]
  :: forall a b. (a -> b) -> Data.Proxy.Proxy a -> Data.Proxy.Proxy b
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><L,A>, Unf=OtherCon []] =
    [] \r [ds_s5bFu ds1_s5bFv] Data.Proxy.Proxy [];

Data.Proxy.$fFunctorProxy_$c<$
  :: forall a b. a -> Data.Proxy.Proxy b -> Data.Proxy.Proxy a
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><L,A>, Unf=OtherCon []] =
    [] \r [x_s5bFw eta_s5bFx] Data.Proxy.Proxy [];

Data.Proxy.$fFunctorProxy [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Base.Functor Data.Proxy.Proxy
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Base.C:Functor! [Data.Proxy.$fFunctorProxy_$cfmap
                                       Data.Proxy.$fFunctorProxy_$c<$];

Data.Proxy.$fApplicativeProxy_$c<*> [InlPrag=INLINE (sat-args=2)]
  :: forall a b.
     Data.Proxy.Proxy (a -> b)
     -> Data.Proxy.Proxy a -> Data.Proxy.Proxy b
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><L,A>, Unf=OtherCon []] =
    [] \r [ds_s5bFy ds1_s5bFz] Data.Proxy.Proxy [];

Data.Proxy.$fApplicativeProxy_$cpure [InlPrag=INLINE (sat-args=1)]
  :: forall a. a -> Data.Proxy.Proxy a
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds_s5bFA] Data.Proxy.Proxy [];

Data.Proxy.$fApplicativeProxy1
  :: forall b c. Data.Proxy.Proxy b -> Data.Proxy.Proxy c
[GblId, Arity=1, Caf=NoCafRefs, Unf=OtherCon []] =
    [] \r [eta_B1]
        Data.Proxy.$fApplicativeProxy_$c<*> Data.Proxy.Proxy eta_B1;

Data.Proxy.$fApplicativeProxy_$cliftA2
  :: forall a b c.
     (a -> b -> c)
     -> Data.Proxy.Proxy a -> Data.Proxy.Proxy b -> Data.Proxy.Proxy c
[GblId, Arity=3, Caf=NoCafRefs, Str=<L,A><L,A>, Unf=OtherCon []] =
    [] \r [f1_s5bFB x_s5bFC eta_B1]
        Data.Proxy.$fApplicativeProxy1 eta_B1;

Data.Proxy.$fApplicativeProxy_$c*>
  :: forall a b.
     Data.Proxy.Proxy a -> Data.Proxy.Proxy b -> Data.Proxy.Proxy b
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><L,A>, Unf=OtherCon []] =
    [] \r [a1_s5bFD a2_s5bFE] Data.Proxy.Proxy [];

Data.Proxy.$fApplicativeProxy_$c<*
  :: forall a b.
     Data.Proxy.Proxy a -> Data.Proxy.Proxy b -> Data.Proxy.Proxy a
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []] =
    [] \r [x_s5bFF eta_B1] Data.Proxy.$fApplicativeProxy1 eta_B1;

Data.Proxy.$fApplicativeProxy [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Base.Applicative Data.Proxy.Proxy
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Base.C:Applicative! [Data.Proxy.$fFunctorProxy
                                           Data.Proxy.$fApplicativeProxy_$cpure
                                           Data.Proxy.$fApplicativeProxy_$c<*>
                                           Data.Proxy.$fApplicativeProxy_$cliftA2
                                           Data.Proxy.$fApplicativeProxy_$c*>
                                           Data.Proxy.$fApplicativeProxy_$c<*];

Data.Proxy.$fAlternativeProxy_$c<|> [InlPrag=INLINE (sat-args=2)]
  :: forall a.
     Data.Proxy.Proxy a -> Data.Proxy.Proxy a -> Data.Proxy.Proxy a
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><L,A>, Unf=OtherCon []] =
    [] \r [ds_s5bFG ds1_s5bFH] Data.Proxy.Proxy [];

Data.Proxy.$fAlternativeProxy_$csome
  :: forall a. Data.Proxy.Proxy a -> Data.Proxy.Proxy [a]
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []] =
    [] \r [v_s5bFI] Data.Proxy.Proxy [];

Data.Proxy.$fAlternativeProxy [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Base.Alternative Data.Proxy.Proxy
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Base.C:Alternative! [Data.Proxy.$fApplicativeProxy
                                           Data.Proxy.Proxy
                                           Data.Proxy.$fAlternativeProxy_$c<|>
                                           Data.Proxy.$fAlternativeProxy_$csome
                                           Data.Proxy.$fAlternativeProxy_$csome];

Data.Proxy.$fMonadProxy_$c>>= [InlPrag=INLINE (sat-args=2)]
  :: forall a b.
     Data.Proxy.Proxy a
     -> (a -> Data.Proxy.Proxy b) -> Data.Proxy.Proxy b
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><L,A>, Unf=OtherCon []] =
    [] \r [ds_s5bFJ ds1_s5bFK] Data.Proxy.Proxy [];

Data.Proxy.$fMonadProxy_$c>> [InlPrag=INLINE (sat-args=2)]
  :: forall a b.
     Data.Proxy.Proxy a -> Data.Proxy.Proxy b -> Data.Proxy.Proxy b
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><L,A>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        Data.Proxy.$fApplicativeProxy_$c*> eta_B2 eta_B1;

lvl1_r5bEE :: forall a. [GHC.Types.Char] -> Data.Proxy.Proxy a
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [eta_s5bFL] GHC.Err.errorWithoutStackTrace eta_s5bFL;

Data.Proxy.$fMonadProxy [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Base.Monad Data.Proxy.Proxy
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Base.C:Monad! [Data.Proxy.$fApplicativeProxy
                                     Data.Proxy.$fMonadProxy_$c>>=
                                     Data.Proxy.$fMonadProxy_$c>>
                                     Data.Proxy.$fApplicativeProxy_$cpure
                                     lvl1_r5bEE];

Data.Proxy.$fMonadPlusProxy [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Base.MonadPlus Data.Proxy.Proxy
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Base.C:MonadPlus! [Data.Proxy.$fAlternativeProxy
                                         Data.Proxy.$fMonadProxy
                                         Data.Proxy.Proxy
                                         Data.Proxy.$fAlternativeProxy_$c<|>];

Data.Proxy.$fReadProxy_lexeme :: Text.Read.Lex.Lexeme
[GblId, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Ident! [Data.Proxy.$fReadProxy3];

Data.Proxy.$fReadProxy2
  :: forall k (t :: k).
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (Data.Proxy.Proxy t -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,A><L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [n_s5bFM eta_s5bFN]
        let {
          sat_s5bFP [Occ=Once]
            :: () -> Text.ParserCombinators.ReadP.P b_a3ngn
          [LclId] =
              [eta_s5bFN] \r [a1_s5bFO] eta_s5bFN Data.Proxy.Proxy;
        } in 
          case
              Text.Read.Lex.$wexpect Data.Proxy.$fReadProxy_lexeme sat_s5bFP
          of
          { Unit# ww1_s5bFR [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s5bFR];
          };

Data.Proxy.$fReadProxy1
  :: forall k (t :: k).
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (Data.Proxy.Proxy t -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Read.list3 Data.Proxy.$fReadProxy2 eta_B2 eta_B1;

Data.Proxy.$fReadProxy_$creadsPrec
  :: forall k (t :: k).
     GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS (Data.Proxy.Proxy t)
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s5bFS]
        let {
          sat_s5bFT [Occ=Once]
            :: Text.ParserCombinators.ReadP.P (Data.Proxy.Proxy t_a5brZ)
          [LclId] =
              [n_s5bFS] \u []
                  GHC.Read.list3
                      Data.Proxy.$fReadProxy2
                      n_s5bFS
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s5bFT;

Data.Proxy.$fReadProxy_$creadListPrec
  :: forall k (t :: k).
     Text.ParserCombinators.ReadPrec.ReadPrec [Data.Proxy.Proxy t]
[GblId] =
    [] \u [] GHC.Read.list Data.Proxy.$fReadProxy1;

Data.Proxy.$fReadProxy5
  :: forall k (t :: k).
     Text.ParserCombinators.ReadP.P [Data.Proxy.Proxy t]
[GblId] =
    [] \u []
        Data.Proxy.$fReadProxy_$creadListPrec
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

Data.Proxy.$fReadProxy_$creadList
  :: forall k (t :: k).
     Text.ParserCombinators.ReadP.ReadS [Data.Proxy.Proxy t]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run Data.Proxy.$fReadProxy5 eta_B1;

Data.Proxy.$fReadProxy [InlPrag=NOUSERINLINE CONLIKE]
  :: forall k (t :: k). GHC.Read.Read (Data.Proxy.Proxy t)
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [Data.Proxy.$fReadProxy_$creadsPrec
                                    Data.Proxy.$fReadProxy_$creadList
                                    Data.Proxy.$fReadProxy1
                                    Data.Proxy.$fReadProxy_$creadListPrec];

Data.Proxy.$fBoundedProxy [InlPrag=NOUSERINLINE CONLIKE]
  :: forall k (t :: k). GHC.Enum.Bounded (Data.Proxy.Proxy t)
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Bounded! [Data.Proxy.Proxy
                                       Data.Proxy.Proxy];

Data.Proxy.asProxyTypeOf [InlPrag=INLINE (sat-args=0)]
  :: forall a (proxy :: * -> *). a -> proxy a -> a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,A>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Base.const eta_B2 eta_B1;

Data.Proxy.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Data.Proxy.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Proxy.$trModule4];

Data.Proxy.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Data.Proxy"#;

Data.Proxy.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Proxy.$trModule2];

Data.Proxy.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Data.Proxy.$trModule3
                                     Data.Proxy.$trModule1];

$krep_r5bEF :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

Data.Proxy.$tcProxy1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_r5bEF GHC.Types.krep$*];

$krep1_r5bEG :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [1#];

Data.Proxy.$tcProxy2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Proxy.$fReadProxy4];

Data.Proxy.$tcProxy :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [11117694004322800938##
                                    2653577047990140727##
                                    Data.Proxy.$trModule
                                    Data.Proxy.$tcProxy2
                                    1#
                                    Data.Proxy.$tcProxy1];

$krep2_r5bEH :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep1_r5bEG GHC.Types.[]];

$krep3_r5bEI :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r5bEF $krep2_r5bEH];

Data.Proxy.$tc'Proxy1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Data.Proxy.$tcProxy
                                              $krep3_r5bEI];

Data.Proxy.$tc'Proxy3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Proxy"#;

Data.Proxy.$tc'Proxy2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Proxy.$tc'Proxy3];

Data.Proxy.$tc'Proxy :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [14415442874167749476##
                                    5236148037739324872##
                                    Data.Proxy.$trModule
                                    Data.Proxy.$tc'Proxy2
                                    2#
                                    Data.Proxy.$tc'Proxy1];

Data.Proxy.$tcKProxy2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "KProxy"#;

Data.Proxy.$tcKProxy1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Proxy.$tcKProxy2];

Data.Proxy.$tcKProxy :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [8448499740867508124##
                                    2482783599294208243##
                                    Data.Proxy.$trModule
                                    Data.Proxy.$tcKProxy1
                                    0#
                                    GHC.Types.krep$*Arr*];

$krep4_r5bEJ :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r5bEF GHC.Types.[]];

Data.Proxy.$tc'KProxy1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Data.Proxy.$tcKProxy
                                              $krep4_r5bEJ];

Data.Proxy.$tc'KProxy3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'KProxy"#;

Data.Proxy.$tc'KProxy2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Proxy.$tc'KProxy3];

Data.Proxy.$tc'KProxy :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [13347977177506077081##
                                    15425068275281601281##
                                    Data.Proxy.$trModule
                                    Data.Proxy.$tc'KProxy2
                                    1#
                                    Data.Proxy.$tc'KProxy1];

Data.Proxy.KProxy :: forall t. Data.Proxy.KProxy t
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE Data.Proxy.KProxy! [];

Data.Proxy.Proxy :: forall k (t :: k). Data.Proxy.Proxy t
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE Data.Proxy.Proxy! [];


==================== STG syntax: ====================
2018-03-16 16:00:08.818057569 UTC

Data.Proxy.$fEqProxy_$c==
  :: forall k (s :: k).
     Data.Proxy.Proxy s -> Data.Proxy.Proxy s -> GHC.Types.Bool
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><L,A>, Unf=OtherCon []] =
    [] \r [ds_s5bEL ds1_s5bEM] GHC.Types.True [];

Data.Proxy.$fEqProxy_$c/= [InlPrag=INLINE (sat-args=2)]
  :: forall k (s :: k).
     Data.Proxy.Proxy s -> Data.Proxy.Proxy s -> GHC.Types.Bool
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><L,A>, Unf=OtherCon []] =
    [] \r [eta_s5bEN eta1_s5bEO] GHC.Types.False [];

Data.Proxy.$fEqProxy [InlPrag=NOUSERINLINE CONLIKE]
  :: forall k (s :: k). GHC.Classes.Eq (Data.Proxy.Proxy s)
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [Data.Proxy.$fEqProxy_$c==
                                     Data.Proxy.$fEqProxy_$c/=];

Data.Proxy.$fOrdProxy_$ccompare
  :: forall k (s :: k).
     Data.Proxy.Proxy s -> Data.Proxy.Proxy s -> GHC.Types.Ordering
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><L,A>, Unf=OtherCon []] =
    [] \r [ds_s5bEP ds1_s5bEQ] GHC.Types.EQ [];

Data.Proxy.$fOrdProxy_$c<
  :: forall k (s :: k).
     Data.Proxy.Proxy s -> Data.Proxy.Proxy s -> GHC.Types.Bool
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><L,A>, Unf=OtherCon []] =
    [] \r [x_s5bER y_s5bES] GHC.Types.False [];

Data.Proxy.$fOrdProxy_$cmax
  :: forall k (s :: k).
     Data.Proxy.Proxy s -> Data.Proxy.Proxy s -> Data.Proxy.Proxy s
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><S,1*U()>m,
 Unf=OtherCon []] =
    [] \r [x_s5bET y_s5bEU] y_s5bEU;

Data.Proxy.$fOrdProxy_$cmin
  :: forall k (s :: k).
     Data.Proxy.Proxy s -> Data.Proxy.Proxy s -> Data.Proxy.Proxy s
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U()><L,A>m,
 Unf=OtherCon []] =
    [] \r [x_s5bEV y_s5bEW] x_s5bEV;

Data.Proxy.$fOrdProxy [InlPrag=NOUSERINLINE CONLIKE]
  :: forall k (s :: k). GHC.Classes.Ord (Data.Proxy.Proxy s)
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [Data.Proxy.$fEqProxy
                                      Data.Proxy.$fOrdProxy_$ccompare
                                      Data.Proxy.$fOrdProxy_$c<
                                      Data.Proxy.$fEqProxy_$c==
                                      Data.Proxy.$fOrdProxy_$c<
                                      Data.Proxy.$fEqProxy_$c==
                                      Data.Proxy.$fOrdProxy_$cmax
                                      Data.Proxy.$fOrdProxy_$cmin];

Data.Proxy.$fReadProxy4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Proxy"#;

Data.Proxy.$fReadProxy3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Data.Proxy.$fReadProxy4;

Data.Proxy.$fShowProxy2 :: [GHC.Types.Char] -> [GHC.Types.Char]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Base.++ Data.Proxy.$fReadProxy3 eta_B1;

Data.Proxy.$fShowProxy_$cshowsPrec
  :: forall k (s :: k).
     GHC.Types.Int -> Data.Proxy.Proxy s -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><L,A>, Unf=OtherCon []] =
    [] \r [ds_s5bEX ds1_s5bEY eta_B1] Data.Proxy.$fShowProxy2 eta_B1;

Data.Proxy.$fShowProxy_$cshow
  :: forall k (s :: k). Data.Proxy.Proxy s -> GHC.Base.String
[GblId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
    [] \r [x_s5bEZ] Data.Proxy.$fReadProxy3;

Data.Proxy.$fShowProxy1
  :: forall k (s :: k).
     Data.Proxy.Proxy s -> [GHC.Types.Char] -> [GHC.Types.Char]
[GblId, Arity=2, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds_s5bF0 eta_B1] Data.Proxy.$fShowProxy2 eta_B1;

Data.Proxy.$fShowProxy_$cshowList
  :: forall k (s :: k). [Data.Proxy.Proxy s] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s5bF1 s1_s5bF2]
        GHC.Show.showList__ Data.Proxy.$fShowProxy1 ls_s5bF1 s1_s5bF2;

Data.Proxy.$fShowProxy [InlPrag=NOUSERINLINE CONLIKE]
  :: forall k (s :: k). GHC.Show.Show (Data.Proxy.Proxy s)
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [Data.Proxy.$fShowProxy_$cshowsPrec
                                    Data.Proxy.$fShowProxy_$cshow
                                    Data.Proxy.$fShowProxy_$cshowList];

Data.Proxy.$fEnumProxy1 :: forall k (s :: k). [Data.Proxy.Proxy s]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [Data.Proxy.Proxy GHC.Types.[]];

Data.Proxy.$fEnumProxy_$cenumFromThenTo
  :: forall k (s :: k).
     Data.Proxy.Proxy s
     -> Data.Proxy.Proxy s -> Data.Proxy.Proxy s -> [Data.Proxy.Proxy s]
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,A><L,A><L,A>m2,
 Unf=OtherCon []] =
    [] \r [ds_s5bF3 ds1_s5bF4 ds2_s5bF5] Data.Proxy.$fEnumProxy1;

Data.Proxy.$fEnumProxy_$cenumFromTo
  :: forall k (s :: k).
     Data.Proxy.Proxy s -> Data.Proxy.Proxy s -> [Data.Proxy.Proxy s]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><L,A>m2,
 Unf=OtherCon []] =
    [] \r [ds_s5bF6 ds1_s5bF7] Data.Proxy.$fEnumProxy1;

Data.Proxy.$fEnumProxy_$cenumFrom
  :: forall k (s :: k). Data.Proxy.Proxy s -> [Data.Proxy.Proxy s]
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m2, Unf=OtherCon []] =
    [] \r [ds_s5bF8] Data.Proxy.$fEnumProxy1;

Data.Proxy.$fEnumProxy2 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

Data.Proxy.$fEnumProxy_$cfromEnum
  :: forall k (s :: k). Data.Proxy.Proxy s -> GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m, Unf=OtherCon []] =
    [] \r [ds_s5bF9] Data.Proxy.$fEnumProxy2;

lvl_r5bED :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Proxy.toEnum: 0 expected"#;

Data.Proxy.$fEnumProxy3 :: forall k (s :: k). Data.Proxy.Proxy s
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl_r5bED of sat_s5bFa {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_s5bFa;
        };

Data.Proxy.$fEnumProxy_$ctoEnum
  :: forall k (s :: k). GHC.Types.Int -> Data.Proxy.Proxy s
[GblId, Arity=1, Str=<S(S),1*U(1*U)>, Unf=OtherCon []] =
    [] \r [ds_s5bFb]
        case ds_s5bFb of {
          GHC.Types.I# ds1_s5bFd [Occ=Once!] ->
              case ds1_s5bFd of {
                __DEFAULT -> Data.Proxy.$fEnumProxy3;
                0# -> Data.Proxy.Proxy [];
              };
        };

Data.Proxy.$fEnumProxy5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Proxy.pred"#;

Data.Proxy.$fEnumProxy4 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Data.Proxy.$fEnumProxy5;

Data.Proxy.$fEnumProxy_$cpred
  :: forall k (s :: k). Data.Proxy.Proxy s -> Data.Proxy.Proxy s
[GblId, Arity=1, Str=<B,A>x, Unf=OtherCon []] =
    [] \r [ds_s5bFf]
        GHC.Err.errorWithoutStackTrace Data.Proxy.$fEnumProxy4;

Data.Proxy.$fEnumProxy7 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Proxy.succ"#;

Data.Proxy.$fEnumProxy6 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Data.Proxy.$fEnumProxy7;

Data.Proxy.$fEnumProxy_$csucc
  :: forall k (s :: k). Data.Proxy.Proxy s -> Data.Proxy.Proxy s
[GblId, Arity=1, Str=<B,A>x, Unf=OtherCon []] =
    [] \r [ds_s5bFg]
        GHC.Err.errorWithoutStackTrace Data.Proxy.$fEnumProxy6;

Data.Proxy.$fEnumProxy [InlPrag=NOUSERINLINE CONLIKE]
  :: forall k (s :: k). GHC.Enum.Enum (Data.Proxy.Proxy s)
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Enum! [Data.Proxy.$fEnumProxy_$csucc
                                    Data.Proxy.$fEnumProxy_$cpred
                                    Data.Proxy.$fEnumProxy_$ctoEnum
                                    Data.Proxy.$fEnumProxy_$cfromEnum
                                    Data.Proxy.$fEnumProxy_$cenumFrom
                                    Data.Proxy.$fEnumProxy_$cenumFromTo
                                    Data.Proxy.$fEnumProxy_$cenumFromTo
                                    Data.Proxy.$fEnumProxy_$cenumFromThenTo];

Data.Proxy.$fIxProxy1 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [1#];

Data.Proxy.$fIxProxy_$cunsafeRangeSize
  :: forall k (s :: k).
     (Data.Proxy.Proxy s, Data.Proxy.Proxy s) -> GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m, Unf=OtherCon []] =
    [] \r [ds_s5bFh] Data.Proxy.$fIxProxy1;

Data.Proxy.$fIxProxy_$cinRange
  :: forall k (s :: k).
     (Data.Proxy.Proxy s, Data.Proxy.Proxy s)
     -> Data.Proxy.Proxy s -> GHC.Types.Bool
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><L,A>, Unf=OtherCon []] =
    [] \r [ds_s5bFi ds1_s5bFj] GHC.Types.True [];

Data.Proxy.$fIxProxy_$cunsafeIndex
  :: forall k (s :: k).
     (Data.Proxy.Proxy s, Data.Proxy.Proxy s)
     -> Data.Proxy.Proxy s -> GHC.Types.Int
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><L,A>m, Unf=OtherCon []] =
    [] \r [ds_s5bFk ds1_s5bFl] Data.Proxy.$fEnumProxy2;

Data.Proxy.$fIxProxy_$crange
  :: forall k (s :: k).
     (Data.Proxy.Proxy s, Data.Proxy.Proxy s) -> [Data.Proxy.Proxy s]
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m2, Unf=OtherCon []] =
    [] \r [ds_s5bFm] Data.Proxy.$fEnumProxy1;

Data.Proxy.$fIxProxy [InlPrag=NOUSERINLINE CONLIKE]
  :: forall k (s :: k). GHC.Arr.Ix (Data.Proxy.Proxy s)
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Arr.C:Ix! [Data.Proxy.$fOrdProxy
                                 Data.Proxy.$fIxProxy_$crange
                                 Data.Proxy.$fIxProxy_$cunsafeIndex
                                 Data.Proxy.$fIxProxy_$cunsafeIndex
                                 Data.Proxy.$fIxProxy_$cinRange
                                 Data.Proxy.$fIxProxy_$cunsafeRangeSize
                                 Data.Proxy.$fIxProxy_$cunsafeRangeSize];

Data.Proxy.$fSemigroupProxy_$cstimes
  :: forall k (s :: k) b.
     GHC.Real.Integral b =>
     b -> Data.Proxy.Proxy s -> Data.Proxy.Proxy s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,A><L,A><L,A>,
 Unf=OtherCon []] =
    [] \r [$dIntegral_s5bFn ds_s5bFo ds1_s5bFp] Data.Proxy.Proxy [];

Data.Proxy.$fSemigroupProxy_$csconcat
  :: forall k (s :: k).
     GHC.Base.NonEmpty (Data.Proxy.Proxy s) -> Data.Proxy.Proxy s
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds_s5bFq] Data.Proxy.Proxy [];

Data.Proxy.$fMonoidProxy_$c<>
  :: forall k (s :: k).
     Data.Proxy.Proxy s -> Data.Proxy.Proxy s -> Data.Proxy.Proxy s
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><L,A>, Unf=OtherCon []] =
    [] \r [ds_s5bFr ds1_s5bFs] Data.Proxy.Proxy [];

Data.Proxy.$fSemigroupProxy [InlPrag=NOUSERINLINE CONLIKE]
  :: forall k (s :: k). GHC.Base.Semigroup (Data.Proxy.Proxy s)
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Base.C:Semigroup! [Data.Proxy.$fMonoidProxy_$c<>
                                         Data.Proxy.$fSemigroupProxy_$csconcat
                                         Data.Proxy.$fSemigroupProxy_$cstimes];

Data.Proxy.$fMonoidProxy_$cmconcat
  :: forall k (s :: k). [Data.Proxy.Proxy s] -> Data.Proxy.Proxy s
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds_s5bFt] Data.Proxy.Proxy [];

Data.Proxy.$fMonoidProxy [InlPrag=NOUSERINLINE CONLIKE]
  :: forall k (s :: k). GHC.Base.Monoid (Data.Proxy.Proxy s)
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Base.C:Monoid! [Data.Proxy.$fSemigroupProxy
                                      Data.Proxy.Proxy
                                      Data.Proxy.$fMonoidProxy_$c<>
                                      Data.Proxy.$fMonoidProxy_$cmconcat];

Data.Proxy.$fFunctorProxy_$cfmap [InlPrag=INLINE (sat-args=2)]
  :: forall a b. (a -> b) -> Data.Proxy.Proxy a -> Data.Proxy.Proxy b
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><L,A>, Unf=OtherCon []] =
    [] \r [ds_s5bFu ds1_s5bFv] Data.Proxy.Proxy [];

Data.Proxy.$fFunctorProxy_$c<$
  :: forall a b. a -> Data.Proxy.Proxy b -> Data.Proxy.Proxy a
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><L,A>, Unf=OtherCon []] =
    [] \r [x_s5bFw eta_s5bFx] Data.Proxy.Proxy [];

Data.Proxy.$fFunctorProxy [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Base.Functor Data.Proxy.Proxy
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Base.C:Functor! [Data.Proxy.$fFunctorProxy_$cfmap
                                       Data.Proxy.$fFunctorProxy_$c<$];

Data.Proxy.$fApplicativeProxy_$c<*> [InlPrag=INLINE (sat-args=2)]
  :: forall a b.
     Data.Proxy.Proxy (a -> b)
     -> Data.Proxy.Proxy a -> Data.Proxy.Proxy b
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><L,A>, Unf=OtherCon []] =
    [] \r [ds_s5bFy ds1_s5bFz] Data.Proxy.Proxy [];

Data.Proxy.$fApplicativeProxy_$cpure [InlPrag=INLINE (sat-args=1)]
  :: forall a. a -> Data.Proxy.Proxy a
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds_s5bFA] Data.Proxy.Proxy [];

Data.Proxy.$fApplicativeProxy1
  :: forall b c. Data.Proxy.Proxy b -> Data.Proxy.Proxy c
[GblId, Arity=1, Caf=NoCafRefs, Unf=OtherCon []] =
    [] \r [eta_B1]
        Data.Proxy.$fApplicativeProxy_$c<*> Data.Proxy.Proxy eta_B1;

Data.Proxy.$fApplicativeProxy_$cliftA2
  :: forall a b c.
     (a -> b -> c)
     -> Data.Proxy.Proxy a -> Data.Proxy.Proxy b -> Data.Proxy.Proxy c
[GblId, Arity=3, Caf=NoCafRefs, Str=<L,A><L,A>, Unf=OtherCon []] =
    [] \r [f1_s5bFB x_s5bFC eta_B1]
        Data.Proxy.$fApplicativeProxy1 eta_B1;

Data.Proxy.$fApplicativeProxy_$c*>
  :: forall a b.
     Data.Proxy.Proxy a -> Data.Proxy.Proxy b -> Data.Proxy.Proxy b
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><L,A>, Unf=OtherCon []] =
    [] \r [a1_s5bFD a2_s5bFE] Data.Proxy.Proxy [];

Data.Proxy.$fApplicativeProxy_$c<*
  :: forall a b.
     Data.Proxy.Proxy a -> Data.Proxy.Proxy b -> Data.Proxy.Proxy a
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []] =
    [] \r [x_s5bFF eta_B1] Data.Proxy.$fApplicativeProxy1 eta_B1;

Data.Proxy.$fApplicativeProxy [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Base.Applicative Data.Proxy.Proxy
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Base.C:Applicative! [Data.Proxy.$fFunctorProxy
                                           Data.Proxy.$fApplicativeProxy_$cpure
                                           Data.Proxy.$fApplicativeProxy_$c<*>
                                           Data.Proxy.$fApplicativeProxy_$cliftA2
                                           Data.Proxy.$fApplicativeProxy_$c*>
                                           Data.Proxy.$fApplicativeProxy_$c<*];

Data.Proxy.$fAlternativeProxy_$c<|> [InlPrag=INLINE (sat-args=2)]
  :: forall a.
     Data.Proxy.Proxy a -> Data.Proxy.Proxy a -> Data.Proxy.Proxy a
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><L,A>, Unf=OtherCon []] =
    [] \r [ds_s5bFG ds1_s5bFH] Data.Proxy.Proxy [];

Data.Proxy.$fAlternativeProxy_$csome
  :: forall a. Data.Proxy.Proxy a -> Data.Proxy.Proxy [a]
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []] =
    [] \r [v_s5bFI] Data.Proxy.Proxy [];

Data.Proxy.$fAlternativeProxy [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Base.Alternative Data.Proxy.Proxy
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Base.C:Alternative! [Data.Proxy.$fApplicativeProxy
                                           Data.Proxy.Proxy
                                           Data.Proxy.$fAlternativeProxy_$c<|>
                                           Data.Proxy.$fAlternativeProxy_$csome
                                           Data.Proxy.$fAlternativeProxy_$csome];

Data.Proxy.$fMonadProxy_$c>>= [InlPrag=INLINE (sat-args=2)]
  :: forall a b.
     Data.Proxy.Proxy a
     -> (a -> Data.Proxy.Proxy b) -> Data.Proxy.Proxy b
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><L,A>, Unf=OtherCon []] =
    [] \r [ds_s5bFJ ds1_s5bFK] Data.Proxy.Proxy [];

Data.Proxy.$fMonadProxy_$c>> [InlPrag=INLINE (sat-args=2)]
  :: forall a b.
     Data.Proxy.Proxy a -> Data.Proxy.Proxy b -> Data.Proxy.Proxy b
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><L,A>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        Data.Proxy.$fApplicativeProxy_$c*> eta_B2 eta_B1;

lvl1_r5bEE :: forall a. [GHC.Types.Char] -> Data.Proxy.Proxy a
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [eta_s5bFL] GHC.Err.errorWithoutStackTrace eta_s5bFL;

Data.Proxy.$fMonadProxy [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Base.Monad Data.Proxy.Proxy
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Base.C:Monad! [Data.Proxy.$fApplicativeProxy
                                     Data.Proxy.$fMonadProxy_$c>>=
                                     Data.Proxy.$fMonadProxy_$c>>
                                     Data.Proxy.$fApplicativeProxy_$cpure
                                     lvl1_r5bEE];

Data.Proxy.$fMonadPlusProxy [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Base.MonadPlus Data.Proxy.Proxy
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Base.C:MonadPlus! [Data.Proxy.$fAlternativeProxy
                                         Data.Proxy.$fMonadProxy
                                         Data.Proxy.Proxy
                                         Data.Proxy.$fAlternativeProxy_$c<|>];

Data.Proxy.$fReadProxy_lexeme :: Text.Read.Lex.Lexeme
[GblId, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Ident! [Data.Proxy.$fReadProxy3];

Data.Proxy.$fReadProxy2
  :: forall k (t :: k).
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (Data.Proxy.Proxy t -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,A><L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [n_s5bFM eta_s5bFN]
        let {
          sat_s5bFP [Occ=Once]
            :: () -> Text.ParserCombinators.ReadP.P b_a3ngn
          [LclId] =
              [eta_s5bFN] \r [a1_s5bFO] eta_s5bFN Data.Proxy.Proxy;
        } in 
          case
              Text.Read.Lex.$wexpect Data.Proxy.$fReadProxy_lexeme sat_s5bFP
          of
          { Unit# ww1_s5bFR [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s5bFR];
          };

Data.Proxy.$fReadProxy1
  :: forall k (t :: k).
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (Data.Proxy.Proxy t -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Read.list3 Data.Proxy.$fReadProxy2 eta_B2 eta_B1;

Data.Proxy.$fReadProxy_$creadsPrec
  :: forall k (t :: k).
     GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS (Data.Proxy.Proxy t)
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s5bFS]
        let {
          sat_s5bFT [Occ=Once]
            :: Text.ParserCombinators.ReadP.P (Data.Proxy.Proxy t_a5brZ)
          [LclId] =
              [n_s5bFS] \u []
                  GHC.Read.list3
                      Data.Proxy.$fReadProxy2
                      n_s5bFS
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s5bFT;

Data.Proxy.$fReadProxy_$creadListPrec
  :: forall k (t :: k).
     Text.ParserCombinators.ReadPrec.ReadPrec [Data.Proxy.Proxy t]
[GblId] =
    [] \u [] GHC.Read.list Data.Proxy.$fReadProxy1;

Data.Proxy.$fReadProxy5
  :: forall k (t :: k).
     Text.ParserCombinators.ReadP.P [Data.Proxy.Proxy t]
[GblId] =
    [] \u []
        Data.Proxy.$fReadProxy_$creadListPrec
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

Data.Proxy.$fReadProxy_$creadList
  :: forall k (t :: k).
     Text.ParserCombinators.ReadP.ReadS [Data.Proxy.Proxy t]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run Data.Proxy.$fReadProxy5 eta_B1;

Data.Proxy.$fReadProxy [InlPrag=NOUSERINLINE CONLIKE]
  :: forall k (t :: k). GHC.Read.Read (Data.Proxy.Proxy t)
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [Data.Proxy.$fReadProxy_$creadsPrec
                                    Data.Proxy.$fReadProxy_$creadList
                                    Data.Proxy.$fReadProxy1
                                    Data.Proxy.$fReadProxy_$creadListPrec];

Data.Proxy.$fBoundedProxy [InlPrag=NOUSERINLINE CONLIKE]
  :: forall k (t :: k). GHC.Enum.Bounded (Data.Proxy.Proxy t)
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Bounded! [Data.Proxy.Proxy
                                       Data.Proxy.Proxy];

Data.Proxy.asProxyTypeOf [InlPrag=INLINE (sat-args=0)]
  :: forall a (proxy :: * -> *). a -> proxy a -> a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,A>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Base.const eta_B2 eta_B1;

Data.Proxy.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Data.Proxy.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Proxy.$trModule4];

Data.Proxy.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Data.Proxy"#;

Data.Proxy.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Proxy.$trModule2];

Data.Proxy.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Data.Proxy.$trModule3
                                     Data.Proxy.$trModule1];

$krep_r5bEF :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

Data.Proxy.$tcProxy1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_r5bEF GHC.Types.krep$*];

$krep1_r5bEG :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [1#];

Data.Proxy.$tcProxy2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Proxy.$fReadProxy4];

Data.Proxy.$tcProxy :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [11117694004322800938##
                                    2653577047990140727##
                                    Data.Proxy.$trModule
                                    Data.Proxy.$tcProxy2
                                    1#
                                    Data.Proxy.$tcProxy1];

$krep2_r5bEH :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep1_r5bEG GHC.Types.[]];

$krep3_r5bEI :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r5bEF $krep2_r5bEH];

Data.Proxy.$tc'Proxy1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Data.Proxy.$tcProxy
                                              $krep3_r5bEI];

Data.Proxy.$tc'Proxy3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Proxy"#;

Data.Proxy.$tc'Proxy2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Proxy.$tc'Proxy3];

Data.Proxy.$tc'Proxy :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [14415442874167749476##
                                    5236148037739324872##
                                    Data.Proxy.$trModule
                                    Data.Proxy.$tc'Proxy2
                                    2#
                                    Data.Proxy.$tc'Proxy1];

Data.Proxy.$tcKProxy2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "KProxy"#;

Data.Proxy.$tcKProxy1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Proxy.$tcKProxy2];

Data.Proxy.$tcKProxy :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [8448499740867508124##
                                    2482783599294208243##
                                    Data.Proxy.$trModule
                                    Data.Proxy.$tcKProxy1
                                    0#
                                    GHC.Types.krep$*Arr*];

$krep4_r5bEJ :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r5bEF GHC.Types.[]];

Data.Proxy.$tc'KProxy1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Data.Proxy.$tcKProxy
                                              $krep4_r5bEJ];

Data.Proxy.$tc'KProxy3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'KProxy"#;

Data.Proxy.$tc'KProxy2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Proxy.$tc'KProxy3];

Data.Proxy.$tc'KProxy :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [13347977177506077081##
                                    15425068275281601281##
                                    Data.Proxy.$trModule
                                    Data.Proxy.$tc'KProxy2
                                    1#
                                    Data.Proxy.$tc'KProxy1];

Data.Proxy.KProxy :: forall t. Data.Proxy.KProxy t
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE Data.Proxy.KProxy! [];

Data.Proxy.Proxy :: forall k (t :: k). Data.Proxy.Proxy t
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE Data.Proxy.Proxy! [];


==================== Pre unarise: ====================
2018-03-16 16:00:09.755960817 UTC

Data.Proxy.$fEqProxy_$c==
  :: forall k (s :: k).
     Data.Proxy.Proxy s -> Data.Proxy.Proxy s -> GHC.Types.Bool
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><L,A>, Unf=OtherCon []] =
    [] \r [ds_s5c4S ds1_s5c4T] GHC.Types.True [];

Data.Proxy.$fEqProxy_$c/= [InlPrag=INLINE (sat-args=2)]
  :: forall k (s :: k).
     Data.Proxy.Proxy s -> Data.Proxy.Proxy s -> GHC.Types.Bool
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><L,A>, Unf=OtherCon []] =
    [] \r [eta_s5c4U eta1_s5c4V] GHC.Types.False [];

Data.Proxy.$fEqProxy [InlPrag=NOUSERINLINE CONLIKE]
  :: forall k (s :: k). GHC.Classes.Eq (Data.Proxy.Proxy s)
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [Data.Proxy.$fEqProxy_$c==
                                     Data.Proxy.$fEqProxy_$c/=];

Data.Proxy.$fOrdProxy_$ccompare
  :: forall k (s :: k).
     Data.Proxy.Proxy s -> Data.Proxy.Proxy s -> GHC.Types.Ordering
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><L,A>, Unf=OtherCon []] =
    [] \r [ds_s5c4W ds1_s5c4X] GHC.Types.EQ [];

Data.Proxy.$fOrdProxy_$c<
  :: forall k (s :: k).
     Data.Proxy.Proxy s -> Data.Proxy.Proxy s -> GHC.Types.Bool
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><L,A>, Unf=OtherCon []] =
    [] \r [x_s5c4Y y_s5c4Z] GHC.Types.False [];

Data.Proxy.$fOrdProxy_$cmax
  :: forall k (s :: k).
     Data.Proxy.Proxy s -> Data.Proxy.Proxy s -> Data.Proxy.Proxy s
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><S,1*U()>m,
 Unf=OtherCon []] =
    [] \r [x_s5c50 y_s5c51] y_s5c51;

Data.Proxy.$fOrdProxy_$cmin
  :: forall k (s :: k).
     Data.Proxy.Proxy s -> Data.Proxy.Proxy s -> Data.Proxy.Proxy s
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U()><L,A>m,
 Unf=OtherCon []] =
    [] \r [x_s5c52 y_s5c53] x_s5c52;

Data.Proxy.$fOrdProxy [InlPrag=NOUSERINLINE CONLIKE]
  :: forall k (s :: k). GHC.Classes.Ord (Data.Proxy.Proxy s)
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [Data.Proxy.$fEqProxy
                                      Data.Proxy.$fOrdProxy_$ccompare
                                      Data.Proxy.$fOrdProxy_$c<
                                      Data.Proxy.$fEqProxy_$c==
                                      Data.Proxy.$fOrdProxy_$c<
                                      Data.Proxy.$fEqProxy_$c==
                                      Data.Proxy.$fOrdProxy_$cmax
                                      Data.Proxy.$fOrdProxy_$cmin];

Data.Proxy.$fReadProxy4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Proxy"#;

Data.Proxy.$fReadProxy3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Data.Proxy.$fReadProxy4;

Data.Proxy.$fShowProxy2 :: [GHC.Types.Char] -> [GHC.Types.Char]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Base.++ Data.Proxy.$fReadProxy3 eta_B1;

Data.Proxy.$fShowProxy_$cshowsPrec
  :: forall k (s :: k).
     GHC.Types.Int -> Data.Proxy.Proxy s -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><L,A>, Unf=OtherCon []] =
    [] \r [ds_s5c54 ds1_s5c55 eta_B1] Data.Proxy.$fShowProxy2 eta_B1;

Data.Proxy.$fShowProxy_$cshow
  :: forall k (s :: k). Data.Proxy.Proxy s -> GHC.Base.String
[GblId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
    [] \r [x_s5c56] Data.Proxy.$fReadProxy3;

Data.Proxy.$fShowProxy1
  :: forall k (s :: k).
     Data.Proxy.Proxy s -> [GHC.Types.Char] -> [GHC.Types.Char]
[GblId, Arity=2, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds_s5c57 eta_B1] Data.Proxy.$fShowProxy2 eta_B1;

Data.Proxy.$fShowProxy_$cshowList
  :: forall k (s :: k). [Data.Proxy.Proxy s] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s5c58 s1_s5c59]
        GHC.Show.showList__ Data.Proxy.$fShowProxy1 ls_s5c58 s1_s5c59;

Data.Proxy.$fShowProxy [InlPrag=NOUSERINLINE CONLIKE]
  :: forall k (s :: k). GHC.Show.Show (Data.Proxy.Proxy s)
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [Data.Proxy.$fShowProxy_$cshowsPrec
                                    Data.Proxy.$fShowProxy_$cshow
                                    Data.Proxy.$fShowProxy_$cshowList];

Data.Proxy.$fEnumProxy1 :: forall k (s :: k). [Data.Proxy.Proxy s]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [Data.Proxy.Proxy GHC.Types.[]];

Data.Proxy.$fEnumProxy_$cenumFromThenTo
  :: forall k (s :: k).
     Data.Proxy.Proxy s
     -> Data.Proxy.Proxy s -> Data.Proxy.Proxy s -> [Data.Proxy.Proxy s]
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,A><L,A><L,A>m2,
 Unf=OtherCon []] =
    [] \r [ds_s5c5a ds1_s5c5b ds2_s5c5c] Data.Proxy.$fEnumProxy1;

Data.Proxy.$fEnumProxy_$cenumFromTo
  :: forall k (s :: k).
     Data.Proxy.Proxy s -> Data.Proxy.Proxy s -> [Data.Proxy.Proxy s]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><L,A>m2,
 Unf=OtherCon []] =
    [] \r [ds_s5c5d ds1_s5c5e] Data.Proxy.$fEnumProxy1;

Data.Proxy.$fEnumProxy_$cenumFrom
  :: forall k (s :: k). Data.Proxy.Proxy s -> [Data.Proxy.Proxy s]
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m2, Unf=OtherCon []] =
    [] \r [ds_s5c5f] Data.Proxy.$fEnumProxy1;

Data.Proxy.$fEnumProxy2 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

Data.Proxy.$fEnumProxy_$cfromEnum
  :: forall k (s :: k). Data.Proxy.Proxy s -> GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m, Unf=OtherCon []] =
    [] \r [ds_s5c5g] Data.Proxy.$fEnumProxy2;

lvl_r5bED :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Proxy.toEnum: 0 expected"#;

Data.Proxy.$fEnumProxy3 :: forall k (s :: k). Data.Proxy.Proxy s
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl_r5bED of sat_s5c5h {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_s5c5h;
        };

Data.Proxy.$fEnumProxy_$ctoEnum
  :: forall k (s :: k). GHC.Types.Int -> Data.Proxy.Proxy s
[GblId, Arity=1, Str=<S(S),1*U(1*U)>, Unf=OtherCon []] =
    [] \r [ds_s5c5i]
        case ds_s5c5i of {
          GHC.Types.I# ds1_s5c5k [Occ=Once!] ->
              case ds1_s5c5k of {
                __DEFAULT -> Data.Proxy.$fEnumProxy3;
                0# -> Data.Proxy.Proxy [];
              };
        };

Data.Proxy.$fEnumProxy5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Proxy.pred"#;

Data.Proxy.$fEnumProxy4 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Data.Proxy.$fEnumProxy5;

Data.Proxy.$fEnumProxy_$cpred
  :: forall k (s :: k). Data.Proxy.Proxy s -> Data.Proxy.Proxy s
[GblId, Arity=1, Str=<B,A>x, Unf=OtherCon []] =
    [] \r [ds_s5c5m]
        GHC.Err.errorWithoutStackTrace Data.Proxy.$fEnumProxy4;

Data.Proxy.$fEnumProxy7 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Proxy.succ"#;

Data.Proxy.$fEnumProxy6 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Data.Proxy.$fEnumProxy7;

Data.Proxy.$fEnumProxy_$csucc
  :: forall k (s :: k). Data.Proxy.Proxy s -> Data.Proxy.Proxy s
[GblId, Arity=1, Str=<B,A>x, Unf=OtherCon []] =
    [] \r [ds_s5c5n]
        GHC.Err.errorWithoutStackTrace Data.Proxy.$fEnumProxy6;

Data.Proxy.$fEnumProxy [InlPrag=NOUSERINLINE CONLIKE]
  :: forall k (s :: k). GHC.Enum.Enum (Data.Proxy.Proxy s)
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Enum! [Data.Proxy.$fEnumProxy_$csucc
                                    Data.Proxy.$fEnumProxy_$cpred
                                    Data.Proxy.$fEnumProxy_$ctoEnum
                                    Data.Proxy.$fEnumProxy_$cfromEnum
                                    Data.Proxy.$fEnumProxy_$cenumFrom
                                    Data.Proxy.$fEnumProxy_$cenumFromTo
                                    Data.Proxy.$fEnumProxy_$cenumFromTo
                                    Data.Proxy.$fEnumProxy_$cenumFromThenTo];

Data.Proxy.$fIxProxy1 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [1#];

Data.Proxy.$fIxProxy_$cunsafeRangeSize
  :: forall k (s :: k).
     (Data.Proxy.Proxy s, Data.Proxy.Proxy s) -> GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m, Unf=OtherCon []] =
    [] \r [ds_s5c5o] Data.Proxy.$fIxProxy1;

Data.Proxy.$fIxProxy_$cinRange
  :: forall k (s :: k).
     (Data.Proxy.Proxy s, Data.Proxy.Proxy s)
     -> Data.Proxy.Proxy s -> GHC.Types.Bool
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><L,A>, Unf=OtherCon []] =
    [] \r [ds_s5c5p ds1_s5c5q] GHC.Types.True [];

Data.Proxy.$fIxProxy_$cunsafeIndex
  :: forall k (s :: k).
     (Data.Proxy.Proxy s, Data.Proxy.Proxy s)
     -> Data.Proxy.Proxy s -> GHC.Types.Int
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><L,A>m, Unf=OtherCon []] =
    [] \r [ds_s5c5r ds1_s5c5s] Data.Proxy.$fEnumProxy2;

Data.Proxy.$fIxProxy_$crange
  :: forall k (s :: k).
     (Data.Proxy.Proxy s, Data.Proxy.Proxy s) -> [Data.Proxy.Proxy s]
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m2, Unf=OtherCon []] =
    [] \r [ds_s5c5t] Data.Proxy.$fEnumProxy1;

Data.Proxy.$fIxProxy [InlPrag=NOUSERINLINE CONLIKE]
  :: forall k (s :: k). GHC.Arr.Ix (Data.Proxy.Proxy s)
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Arr.C:Ix! [Data.Proxy.$fOrdProxy
                                 Data.Proxy.$fIxProxy_$crange
                                 Data.Proxy.$fIxProxy_$cunsafeIndex
                                 Data.Proxy.$fIxProxy_$cunsafeIndex
                                 Data.Proxy.$fIxProxy_$cinRange
                                 Data.Proxy.$fIxProxy_$cunsafeRangeSize
                                 Data.Proxy.$fIxProxy_$cunsafeRangeSize];

Data.Proxy.$fSemigroupProxy_$cstimes
  :: forall k (s :: k) b.
     GHC.Real.Integral b =>
     b -> Data.Proxy.Proxy s -> Data.Proxy.Proxy s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,A><L,A><L,A>,
 Unf=OtherCon []] =
    [] \r [$dIntegral_s5c5u ds_s5c5v ds1_s5c5w] Data.Proxy.Proxy [];

Data.Proxy.$fSemigroupProxy_$csconcat
  :: forall k (s :: k).
     GHC.Base.NonEmpty (Data.Proxy.Proxy s) -> Data.Proxy.Proxy s
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds_s5c5x] Data.Proxy.Proxy [];

Data.Proxy.$fMonoidProxy_$c<>
  :: forall k (s :: k).
     Data.Proxy.Proxy s -> Data.Proxy.Proxy s -> Data.Proxy.Proxy s
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><L,A>, Unf=OtherCon []] =
    [] \r [ds_s5c5y ds1_s5c5z] Data.Proxy.Proxy [];

Data.Proxy.$fSemigroupProxy [InlPrag=NOUSERINLINE CONLIKE]
  :: forall k (s :: k). GHC.Base.Semigroup (Data.Proxy.Proxy s)
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Base.C:Semigroup! [Data.Proxy.$fMonoidProxy_$c<>
                                         Data.Proxy.$fSemigroupProxy_$csconcat
                                         Data.Proxy.$fSemigroupProxy_$cstimes];

Data.Proxy.$fMonoidProxy_$cmconcat
  :: forall k (s :: k). [Data.Proxy.Proxy s] -> Data.Proxy.Proxy s
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds_s5c5A] Data.Proxy.Proxy [];

Data.Proxy.$fMonoidProxy [InlPrag=NOUSERINLINE CONLIKE]
  :: forall k (s :: k). GHC.Base.Monoid (Data.Proxy.Proxy s)
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Base.C:Monoid! [Data.Proxy.$fSemigroupProxy
                                      Data.Proxy.Proxy
                                      Data.Proxy.$fMonoidProxy_$c<>
                                      Data.Proxy.$fMonoidProxy_$cmconcat];

Data.Proxy.$fFunctorProxy_$cfmap [InlPrag=INLINE (sat-args=2)]
  :: forall a b. (a -> b) -> Data.Proxy.Proxy a -> Data.Proxy.Proxy b
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><L,A>, Unf=OtherCon []] =
    [] \r [ds_s5c5B ds1_s5c5C] Data.Proxy.Proxy [];

Data.Proxy.$fFunctorProxy_$c<$
  :: forall a b. a -> Data.Proxy.Proxy b -> Data.Proxy.Proxy a
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><L,A>, Unf=OtherCon []] =
    [] \r [x_s5c5D eta_s5c5E] Data.Proxy.Proxy [];

Data.Proxy.$fFunctorProxy [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Base.Functor Data.Proxy.Proxy
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Base.C:Functor! [Data.Proxy.$fFunctorProxy_$cfmap
                                       Data.Proxy.$fFunctorProxy_$c<$];

Data.Proxy.$fApplicativeProxy_$c<*> [InlPrag=INLINE (sat-args=2)]
  :: forall a b.
     Data.Proxy.Proxy (a -> b)
     -> Data.Proxy.Proxy a -> Data.Proxy.Proxy b
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><L,A>, Unf=OtherCon []] =
    [] \r [ds_s5c5F ds1_s5c5G] Data.Proxy.Proxy [];

Data.Proxy.$fApplicativeProxy_$cpure [InlPrag=INLINE (sat-args=1)]
  :: forall a. a -> Data.Proxy.Proxy a
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds_s5c5H] Data.Proxy.Proxy [];

Data.Proxy.$fApplicativeProxy1
  :: forall b c. Data.Proxy.Proxy b -> Data.Proxy.Proxy c
[GblId, Arity=1, Caf=NoCafRefs, Unf=OtherCon []] =
    [] \r [eta_B1]
        Data.Proxy.$fApplicativeProxy_$c<*> Data.Proxy.Proxy eta_B1;

Data.Proxy.$fApplicativeProxy_$cliftA2
  :: forall a b c.
     (a -> b -> c)
     -> Data.Proxy.Proxy a -> Data.Proxy.Proxy b -> Data.Proxy.Proxy c
[GblId, Arity=3, Caf=NoCafRefs, Str=<L,A><L,A>, Unf=OtherCon []] =
    [] \r [f1_s5c5I x_s5c5J eta_B1]
        Data.Proxy.$fApplicativeProxy1 eta_B1;

Data.Proxy.$fApplicativeProxy_$c*>
  :: forall a b.
     Data.Proxy.Proxy a -> Data.Proxy.Proxy b -> Data.Proxy.Proxy b
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><L,A>, Unf=OtherCon []] =
    [] \r [a1_s5c5K a2_s5c5L] Data.Proxy.Proxy [];

Data.Proxy.$fApplicativeProxy_$c<*
  :: forall a b.
     Data.Proxy.Proxy a -> Data.Proxy.Proxy b -> Data.Proxy.Proxy a
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []] =
    [] \r [x_s5c5M eta_B1] Data.Proxy.$fApplicativeProxy1 eta_B1;

Data.Proxy.$fApplicativeProxy [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Base.Applicative Data.Proxy.Proxy
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Base.C:Applicative! [Data.Proxy.$fFunctorProxy
                                           Data.Proxy.$fApplicativeProxy_$cpure
                                           Data.Proxy.$fApplicativeProxy_$c<*>
                                           Data.Proxy.$fApplicativeProxy_$cliftA2
                                           Data.Proxy.$fApplicativeProxy_$c*>
                                           Data.Proxy.$fApplicativeProxy_$c<*];

Data.Proxy.$fAlternativeProxy_$c<|> [InlPrag=INLINE (sat-args=2)]
  :: forall a.
     Data.Proxy.Proxy a -> Data.Proxy.Proxy a -> Data.Proxy.Proxy a
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><L,A>, Unf=OtherCon []] =
    [] \r [ds_s5c5N ds1_s5c5O] Data.Proxy.Proxy [];

Data.Proxy.$fAlternativeProxy_$csome
  :: forall a. Data.Proxy.Proxy a -> Data.Proxy.Proxy [a]
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []] =
    [] \r [v_s5c5P] Data.Proxy.Proxy [];

Data.Proxy.$fAlternativeProxy [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Base.Alternative Data.Proxy.Proxy
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Base.C:Alternative! [Data.Proxy.$fApplicativeProxy
                                           Data.Proxy.Proxy
                                           Data.Proxy.$fAlternativeProxy_$c<|>
                                           Data.Proxy.$fAlternativeProxy_$csome
                                           Data.Proxy.$fAlternativeProxy_$csome];

Data.Proxy.$fMonadProxy_$c>>= [InlPrag=INLINE (sat-args=2)]
  :: forall a b.
     Data.Proxy.Proxy a
     -> (a -> Data.Proxy.Proxy b) -> Data.Proxy.Proxy b
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><L,A>, Unf=OtherCon []] =
    [] \r [ds_s5c5Q ds1_s5c5R] Data.Proxy.Proxy [];

Data.Proxy.$fMonadProxy_$c>> [InlPrag=INLINE (sat-args=2)]
  :: forall a b.
     Data.Proxy.Proxy a -> Data.Proxy.Proxy b -> Data.Proxy.Proxy b
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><L,A>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        Data.Proxy.$fApplicativeProxy_$c*> eta_B2 eta_B1;

lvl1_r5bEE :: forall a. [GHC.Types.Char] -> Data.Proxy.Proxy a
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [eta_s5c5S] GHC.Err.errorWithoutStackTrace eta_s5c5S;

Data.Proxy.$fMonadProxy [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Base.Monad Data.Proxy.Proxy
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Base.C:Monad! [Data.Proxy.$fApplicativeProxy
                                     Data.Proxy.$fMonadProxy_$c>>=
                                     Data.Proxy.$fMonadProxy_$c>>
                                     Data.Proxy.$fApplicativeProxy_$cpure
                                     lvl1_r5bEE];

Data.Proxy.$fMonadPlusProxy [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Base.MonadPlus Data.Proxy.Proxy
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Base.C:MonadPlus! [Data.Proxy.$fAlternativeProxy
                                         Data.Proxy.$fMonadProxy
                                         Data.Proxy.Proxy
                                         Data.Proxy.$fAlternativeProxy_$c<|>];

Data.Proxy.$fReadProxy_lexeme :: Text.Read.Lex.Lexeme
[GblId, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Ident! [Data.Proxy.$fReadProxy3];

Data.Proxy.$fReadProxy2
  :: forall k (t :: k).
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (Data.Proxy.Proxy t -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,A><L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [n_s5c5T eta_s5c5U]
        let {
          sat_s5c5W [Occ=Once]
            :: () -> Text.ParserCombinators.ReadP.P b_a3ngn
          [LclId] =
              [eta_s5c5U] \r [a1_s5c5V] eta_s5c5U Data.Proxy.Proxy;
        } in 
          case
              Text.Read.Lex.$wexpect Data.Proxy.$fReadProxy_lexeme sat_s5c5W
          of
          { Unit# ww1_s5c5Y [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s5c5Y];
          };

Data.Proxy.$fReadProxy1
  :: forall k (t :: k).
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (Data.Proxy.Proxy t -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Read.list3 Data.Proxy.$fReadProxy2 eta_B2 eta_B1;

Data.Proxy.$fReadProxy_$creadsPrec
  :: forall k (t :: k).
     GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS (Data.Proxy.Proxy t)
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s5c5Z]
        let {
          sat_s5c60 [Occ=Once]
            :: Text.ParserCombinators.ReadP.P (Data.Proxy.Proxy t_a5brZ)
          [LclId] =
              [n_s5c5Z] \u []
                  GHC.Read.list3
                      Data.Proxy.$fReadProxy2
                      n_s5c5Z
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s5c60;

Data.Proxy.$fReadProxy_$creadListPrec
  :: forall k (t :: k).
     Text.ParserCombinators.ReadPrec.ReadPrec [Data.Proxy.Proxy t]
[GblId] =
    [] \u [] GHC.Read.list Data.Proxy.$fReadProxy1;

Data.Proxy.$fReadProxy5
  :: forall k (t :: k).
     Text.ParserCombinators.ReadP.P [Data.Proxy.Proxy t]
[GblId] =
    [] \u []
        Data.Proxy.$fReadProxy_$creadListPrec
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

Data.Proxy.$fReadProxy_$creadList
  :: forall k (t :: k).
     Text.ParserCombinators.ReadP.ReadS [Data.Proxy.Proxy t]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run Data.Proxy.$fReadProxy5 eta_B1;

Data.Proxy.$fReadProxy [InlPrag=NOUSERINLINE CONLIKE]
  :: forall k (t :: k). GHC.Read.Read (Data.Proxy.Proxy t)
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [Data.Proxy.$fReadProxy_$creadsPrec
                                    Data.Proxy.$fReadProxy_$creadList
                                    Data.Proxy.$fReadProxy1
                                    Data.Proxy.$fReadProxy_$creadListPrec];

Data.Proxy.$fBoundedProxy [InlPrag=NOUSERINLINE CONLIKE]
  :: forall k (t :: k). GHC.Enum.Bounded (Data.Proxy.Proxy t)
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Bounded! [Data.Proxy.Proxy
                                       Data.Proxy.Proxy];

Data.Proxy.asProxyTypeOf [InlPrag=INLINE (sat-args=0)]
  :: forall a (proxy :: * -> *). a -> proxy a -> a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,A>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Base.const eta_B2 eta_B1;

Data.Proxy.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Data.Proxy.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Proxy.$trModule4];

Data.Proxy.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Data.Proxy"#;

Data.Proxy.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Proxy.$trModule2];

Data.Proxy.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Data.Proxy.$trModule3
                                     Data.Proxy.$trModule1];

$krep_r5bEF :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

Data.Proxy.$tcProxy1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_r5bEF GHC.Types.krep$*];

$krep1_r5bEG :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [1#];

Data.Proxy.$tcProxy2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Proxy.$fReadProxy4];

Data.Proxy.$tcProxy :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [11117694004322800938##
                                    2653577047990140727##
                                    Data.Proxy.$trModule
                                    Data.Proxy.$tcProxy2
                                    1#
                                    Data.Proxy.$tcProxy1];

$krep2_r5bEH :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep1_r5bEG GHC.Types.[]];

$krep3_r5bEI :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r5bEF $krep2_r5bEH];

Data.Proxy.$tc'Proxy1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Data.Proxy.$tcProxy
                                              $krep3_r5bEI];

Data.Proxy.$tc'Proxy3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Proxy"#;

Data.Proxy.$tc'Proxy2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Proxy.$tc'Proxy3];

Data.Proxy.$tc'Proxy :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [14415442874167749476##
                                    5236148037739324872##
                                    Data.Proxy.$trModule
                                    Data.Proxy.$tc'Proxy2
                                    2#
                                    Data.Proxy.$tc'Proxy1];

Data.Proxy.$tcKProxy2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "KProxy"#;

Data.Proxy.$tcKProxy1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Proxy.$tcKProxy2];

Data.Proxy.$tcKProxy :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [8448499740867508124##
                                    2482783599294208243##
                                    Data.Proxy.$trModule
                                    Data.Proxy.$tcKProxy1
                                    0#
                                    GHC.Types.krep$*Arr*];

$krep4_r5bEJ :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r5bEF GHC.Types.[]];

Data.Proxy.$tc'KProxy1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Data.Proxy.$tcKProxy
                                              $krep4_r5bEJ];

Data.Proxy.$tc'KProxy3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'KProxy"#;

Data.Proxy.$tc'KProxy2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Proxy.$tc'KProxy3];

Data.Proxy.$tc'KProxy :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [13347977177506077081##
                                    15425068275281601281##
                                    Data.Proxy.$trModule
                                    Data.Proxy.$tc'KProxy2
                                    1#
                                    Data.Proxy.$tc'KProxy1];

Data.Proxy.KProxy :: forall t. Data.Proxy.KProxy t
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE Data.Proxy.KProxy! [];

Data.Proxy.Proxy :: forall k (t :: k). Data.Proxy.Proxy t
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE Data.Proxy.Proxy! [];


==================== STG syntax: ====================
2018-03-16 16:00:09.771076912 UTC

Data.Proxy.$fEqProxy_$c==
  :: forall k (s :: k).
     Data.Proxy.Proxy s -> Data.Proxy.Proxy s -> GHC.Types.Bool
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><L,A>, Unf=OtherCon []] =
    [] \r [ds_s5c4S ds1_s5c4T] GHC.Types.True [];

Data.Proxy.$fEqProxy_$c/= [InlPrag=INLINE (sat-args=2)]
  :: forall k (s :: k).
     Data.Proxy.Proxy s -> Data.Proxy.Proxy s -> GHC.Types.Bool
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><L,A>, Unf=OtherCon []] =
    [] \r [eta_s5c4U eta1_s5c4V] GHC.Types.False [];

Data.Proxy.$fEqProxy [InlPrag=NOUSERINLINE CONLIKE]
  :: forall k (s :: k). GHC.Classes.Eq (Data.Proxy.Proxy s)
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [Data.Proxy.$fEqProxy_$c==
                                     Data.Proxy.$fEqProxy_$c/=];

Data.Proxy.$fOrdProxy_$ccompare
  :: forall k (s :: k).
     Data.Proxy.Proxy s -> Data.Proxy.Proxy s -> GHC.Types.Ordering
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><L,A>, Unf=OtherCon []] =
    [] \r [ds_s5c4W ds1_s5c4X] GHC.Types.EQ [];

Data.Proxy.$fOrdProxy_$c<
  :: forall k (s :: k).
     Data.Proxy.Proxy s -> Data.Proxy.Proxy s -> GHC.Types.Bool
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><L,A>, Unf=OtherCon []] =
    [] \r [x_s5c4Y y_s5c4Z] GHC.Types.False [];

Data.Proxy.$fOrdProxy_$cmax
  :: forall k (s :: k).
     Data.Proxy.Proxy s -> Data.Proxy.Proxy s -> Data.Proxy.Proxy s
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><S,1*U()>m,
 Unf=OtherCon []] =
    [] \r [x_s5c50 y_s5c51] y_s5c51;

Data.Proxy.$fOrdProxy_$cmin
  :: forall k (s :: k).
     Data.Proxy.Proxy s -> Data.Proxy.Proxy s -> Data.Proxy.Proxy s
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U()><L,A>m,
 Unf=OtherCon []] =
    [] \r [x_s5c52 y_s5c53] x_s5c52;

Data.Proxy.$fOrdProxy [InlPrag=NOUSERINLINE CONLIKE]
  :: forall k (s :: k). GHC.Classes.Ord (Data.Proxy.Proxy s)
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [Data.Proxy.$fEqProxy
                                      Data.Proxy.$fOrdProxy_$ccompare
                                      Data.Proxy.$fOrdProxy_$c<
                                      Data.Proxy.$fEqProxy_$c==
                                      Data.Proxy.$fOrdProxy_$c<
                                      Data.Proxy.$fEqProxy_$c==
                                      Data.Proxy.$fOrdProxy_$cmax
                                      Data.Proxy.$fOrdProxy_$cmin];

Data.Proxy.$fReadProxy4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Proxy"#;

Data.Proxy.$fReadProxy3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Data.Proxy.$fReadProxy4;

Data.Proxy.$fShowProxy2 :: [GHC.Types.Char] -> [GHC.Types.Char]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Base.++ Data.Proxy.$fReadProxy3 eta_B1;

Data.Proxy.$fShowProxy_$cshowsPrec
  :: forall k (s :: k).
     GHC.Types.Int -> Data.Proxy.Proxy s -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><L,A>, Unf=OtherCon []] =
    [] \r [ds_s5c54 ds1_s5c55 eta_B1] Data.Proxy.$fShowProxy2 eta_B1;

Data.Proxy.$fShowProxy_$cshow
  :: forall k (s :: k). Data.Proxy.Proxy s -> GHC.Base.String
[GblId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
    [] \r [x_s5c56] Data.Proxy.$fReadProxy3;

Data.Proxy.$fShowProxy1
  :: forall k (s :: k).
     Data.Proxy.Proxy s -> [GHC.Types.Char] -> [GHC.Types.Char]
[GblId, Arity=2, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds_s5c57 eta_B1] Data.Proxy.$fShowProxy2 eta_B1;

Data.Proxy.$fShowProxy_$cshowList
  :: forall k (s :: k). [Data.Proxy.Proxy s] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s5c58 s1_s5c59]
        GHC.Show.showList__ Data.Proxy.$fShowProxy1 ls_s5c58 s1_s5c59;

Data.Proxy.$fShowProxy [InlPrag=NOUSERINLINE CONLIKE]
  :: forall k (s :: k). GHC.Show.Show (Data.Proxy.Proxy s)
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [Data.Proxy.$fShowProxy_$cshowsPrec
                                    Data.Proxy.$fShowProxy_$cshow
                                    Data.Proxy.$fShowProxy_$cshowList];

Data.Proxy.$fEnumProxy1 :: forall k (s :: k). [Data.Proxy.Proxy s]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [Data.Proxy.Proxy GHC.Types.[]];

Data.Proxy.$fEnumProxy_$cenumFromThenTo
  :: forall k (s :: k).
     Data.Proxy.Proxy s
     -> Data.Proxy.Proxy s -> Data.Proxy.Proxy s -> [Data.Proxy.Proxy s]
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,A><L,A><L,A>m2,
 Unf=OtherCon []] =
    [] \r [ds_s5c5a ds1_s5c5b ds2_s5c5c] Data.Proxy.$fEnumProxy1;

Data.Proxy.$fEnumProxy_$cenumFromTo
  :: forall k (s :: k).
     Data.Proxy.Proxy s -> Data.Proxy.Proxy s -> [Data.Proxy.Proxy s]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><L,A>m2,
 Unf=OtherCon []] =
    [] \r [ds_s5c5d ds1_s5c5e] Data.Proxy.$fEnumProxy1;

Data.Proxy.$fEnumProxy_$cenumFrom
  :: forall k (s :: k). Data.Proxy.Proxy s -> [Data.Proxy.Proxy s]
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m2, Unf=OtherCon []] =
    [] \r [ds_s5c5f] Data.Proxy.$fEnumProxy1;

Data.Proxy.$fEnumProxy2 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

Data.Proxy.$fEnumProxy_$cfromEnum
  :: forall k (s :: k). Data.Proxy.Proxy s -> GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m, Unf=OtherCon []] =
    [] \r [ds_s5c5g] Data.Proxy.$fEnumProxy2;

lvl_r5bED :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Proxy.toEnum: 0 expected"#;

Data.Proxy.$fEnumProxy3 :: forall k (s :: k). Data.Proxy.Proxy s
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl_r5bED of sat_s5c5h {
          __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_s5c5h;
        };

Data.Proxy.$fEnumProxy_$ctoEnum
  :: forall k (s :: k). GHC.Types.Int -> Data.Proxy.Proxy s
[GblId, Arity=1, Str=<S(S),1*U(1*U)>, Unf=OtherCon []] =
    [] \r [ds_s5c5i]
        case ds_s5c5i of {
          GHC.Types.I# ds1_s5c5k [Occ=Once!] ->
              case ds1_s5c5k of {
                __DEFAULT -> Data.Proxy.$fEnumProxy3;
                0# -> Data.Proxy.Proxy [];
              };
        };

Data.Proxy.$fEnumProxy5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Proxy.pred"#;

Data.Proxy.$fEnumProxy4 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Data.Proxy.$fEnumProxy5;

Data.Proxy.$fEnumProxy_$cpred
  :: forall k (s :: k). Data.Proxy.Proxy s -> Data.Proxy.Proxy s
[GblId, Arity=1, Str=<B,A>x, Unf=OtherCon []] =
    [] \r [ds_s5c5m]
        GHC.Err.errorWithoutStackTrace Data.Proxy.$fEnumProxy4;

Data.Proxy.$fEnumProxy7 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Proxy.succ"#;

Data.Proxy.$fEnumProxy6 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Data.Proxy.$fEnumProxy7;

Data.Proxy.$fEnumProxy_$csucc
  :: forall k (s :: k). Data.Proxy.Proxy s -> Data.Proxy.Proxy s
[GblId, Arity=1, Str=<B,A>x, Unf=OtherCon []] =
    [] \r [ds_s5c5n]
        GHC.Err.errorWithoutStackTrace Data.Proxy.$fEnumProxy6;

Data.Proxy.$fEnumProxy [InlPrag=NOUSERINLINE CONLIKE]
  :: forall k (s :: k). GHC.Enum.Enum (Data.Proxy.Proxy s)
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Enum! [Data.Proxy.$fEnumProxy_$csucc
                                    Data.Proxy.$fEnumProxy_$cpred
                                    Data.Proxy.$fEnumProxy_$ctoEnum
                                    Data.Proxy.$fEnumProxy_$cfromEnum
                                    Data.Proxy.$fEnumProxy_$cenumFrom
                                    Data.Proxy.$fEnumProxy_$cenumFromTo
                                    Data.Proxy.$fEnumProxy_$cenumFromTo
                                    Data.Proxy.$fEnumProxy_$cenumFromThenTo];

Data.Proxy.$fIxProxy1 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [1#];

Data.Proxy.$fIxProxy_$cunsafeRangeSize
  :: forall k (s :: k).
     (Data.Proxy.Proxy s, Data.Proxy.Proxy s) -> GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m, Unf=OtherCon []] =
    [] \r [ds_s5c5o] Data.Proxy.$fIxProxy1;

Data.Proxy.$fIxProxy_$cinRange
  :: forall k (s :: k).
     (Data.Proxy.Proxy s, Data.Proxy.Proxy s)
     -> Data.Proxy.Proxy s -> GHC.Types.Bool
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><L,A>, Unf=OtherCon []] =
    [] \r [ds_s5c5p ds1_s5c5q] GHC.Types.True [];

Data.Proxy.$fIxProxy_$cunsafeIndex
  :: forall k (s :: k).
     (Data.Proxy.Proxy s, Data.Proxy.Proxy s)
     -> Data.Proxy.Proxy s -> GHC.Types.Int
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><L,A>m, Unf=OtherCon []] =
    [] \r [ds_s5c5r ds1_s5c5s] Data.Proxy.$fEnumProxy2;

Data.Proxy.$fIxProxy_$crange
  :: forall k (s :: k).
     (Data.Proxy.Proxy s, Data.Proxy.Proxy s) -> [Data.Proxy.Proxy s]
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m2, Unf=OtherCon []] =
    [] \r [ds_s5c5t] Data.Proxy.$fEnumProxy1;

Data.Proxy.$fIxProxy [InlPrag=NOUSERINLINE CONLIKE]
  :: forall k (s :: k). GHC.Arr.Ix (Data.Proxy.Proxy s)
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Arr.C:Ix! [Data.Proxy.$fOrdProxy
                                 Data.Proxy.$fIxProxy_$crange
                                 Data.Proxy.$fIxProxy_$cunsafeIndex
                                 Data.Proxy.$fIxProxy_$cunsafeIndex
                                 Data.Proxy.$fIxProxy_$cinRange
                                 Data.Proxy.$fIxProxy_$cunsafeRangeSize
                                 Data.Proxy.$fIxProxy_$cunsafeRangeSize];

Data.Proxy.$fSemigroupProxy_$cstimes
  :: forall k (s :: k) b.
     GHC.Real.Integral b =>
     b -> Data.Proxy.Proxy s -> Data.Proxy.Proxy s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,A><L,A><L,A>,
 Unf=OtherCon []] =
    [] \r [$dIntegral_s5c5u ds_s5c5v ds1_s5c5w] Data.Proxy.Proxy [];

Data.Proxy.$fSemigroupProxy_$csconcat
  :: forall k (s :: k).
     GHC.Base.NonEmpty (Data.Proxy.Proxy s) -> Data.Proxy.Proxy s
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds_s5c5x] Data.Proxy.Proxy [];

Data.Proxy.$fMonoidProxy_$c<>
  :: forall k (s :: k).
     Data.Proxy.Proxy s -> Data.Proxy.Proxy s -> Data.Proxy.Proxy s
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><L,A>, Unf=OtherCon []] =
    [] \r [ds_s5c5y ds1_s5c5z] Data.Proxy.Proxy [];

Data.Proxy.$fSemigroupProxy [InlPrag=NOUSERINLINE CONLIKE]
  :: forall k (s :: k). GHC.Base.Semigroup (Data.Proxy.Proxy s)
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Base.C:Semigroup! [Data.Proxy.$fMonoidProxy_$c<>
                                         Data.Proxy.$fSemigroupProxy_$csconcat
                                         Data.Proxy.$fSemigroupProxy_$cstimes];

Data.Proxy.$fMonoidProxy_$cmconcat
  :: forall k (s :: k). [Data.Proxy.Proxy s] -> Data.Proxy.Proxy s
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds_s5c5A] Data.Proxy.Proxy [];

Data.Proxy.$fMonoidProxy [InlPrag=NOUSERINLINE CONLIKE]
  :: forall k (s :: k). GHC.Base.Monoid (Data.Proxy.Proxy s)
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Base.C:Monoid! [Data.Proxy.$fSemigroupProxy
                                      Data.Proxy.Proxy
                                      Data.Proxy.$fMonoidProxy_$c<>
                                      Data.Proxy.$fMonoidProxy_$cmconcat];

Data.Proxy.$fFunctorProxy_$cfmap [InlPrag=INLINE (sat-args=2)]
  :: forall a b. (a -> b) -> Data.Proxy.Proxy a -> Data.Proxy.Proxy b
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><L,A>, Unf=OtherCon []] =
    [] \r [ds_s5c5B ds1_s5c5C] Data.Proxy.Proxy [];

Data.Proxy.$fFunctorProxy_$c<$
  :: forall a b. a -> Data.Proxy.Proxy b -> Data.Proxy.Proxy a
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><L,A>, Unf=OtherCon []] =
    [] \r [x_s5c5D eta_s5c5E] Data.Proxy.Proxy [];

Data.Proxy.$fFunctorProxy [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Base.Functor Data.Proxy.Proxy
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Base.C:Functor! [Data.Proxy.$fFunctorProxy_$cfmap
                                       Data.Proxy.$fFunctorProxy_$c<$];

Data.Proxy.$fApplicativeProxy_$c<*> [InlPrag=INLINE (sat-args=2)]
  :: forall a b.
     Data.Proxy.Proxy (a -> b)
     -> Data.Proxy.Proxy a -> Data.Proxy.Proxy b
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><L,A>, Unf=OtherCon []] =
    [] \r [ds_s5c5F ds1_s5c5G] Data.Proxy.Proxy [];

Data.Proxy.$fApplicativeProxy_$cpure [InlPrag=INLINE (sat-args=1)]
  :: forall a. a -> Data.Proxy.Proxy a
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds_s5c5H] Data.Proxy.Proxy [];

Data.Proxy.$fApplicativeProxy1
  :: forall b c. Data.Proxy.Proxy b -> Data.Proxy.Proxy c
[GblId, Arity=1, Caf=NoCafRefs, Unf=OtherCon []] =
    [] \r [eta_B1]
        Data.Proxy.$fApplicativeProxy_$c<*> Data.Proxy.Proxy eta_B1;

Data.Proxy.$fApplicativeProxy_$cliftA2
  :: forall a b c.
     (a -> b -> c)
     -> Data.Proxy.Proxy a -> Data.Proxy.Proxy b -> Data.Proxy.Proxy c
[GblId, Arity=3, Caf=NoCafRefs, Str=<L,A><L,A>, Unf=OtherCon []] =
    [] \r [f1_s5c5I x_s5c5J eta_B1]
        Data.Proxy.$fApplicativeProxy1 eta_B1;

Data.Proxy.$fApplicativeProxy_$c*>
  :: forall a b.
     Data.Proxy.Proxy a -> Data.Proxy.Proxy b -> Data.Proxy.Proxy b
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><L,A>, Unf=OtherCon []] =
    [] \r [a1_s5c5K a2_s5c5L] Data.Proxy.Proxy [];

Data.Proxy.$fApplicativeProxy_$c<*
  :: forall a b.
     Data.Proxy.Proxy a -> Data.Proxy.Proxy b -> Data.Proxy.Proxy a
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []] =
    [] \r [x_s5c5M eta_B1] Data.Proxy.$fApplicativeProxy1 eta_B1;

Data.Proxy.$fApplicativeProxy [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Base.Applicative Data.Proxy.Proxy
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Base.C:Applicative! [Data.Proxy.$fFunctorProxy
                                           Data.Proxy.$fApplicativeProxy_$cpure
                                           Data.Proxy.$fApplicativeProxy_$c<*>
                                           Data.Proxy.$fApplicativeProxy_$cliftA2
                                           Data.Proxy.$fApplicativeProxy_$c*>
                                           Data.Proxy.$fApplicativeProxy_$c<*];

Data.Proxy.$fAlternativeProxy_$c<|> [InlPrag=INLINE (sat-args=2)]
  :: forall a.
     Data.Proxy.Proxy a -> Data.Proxy.Proxy a -> Data.Proxy.Proxy a
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><L,A>, Unf=OtherCon []] =
    [] \r [ds_s5c5N ds1_s5c5O] Data.Proxy.Proxy [];

Data.Proxy.$fAlternativeProxy_$csome
  :: forall a. Data.Proxy.Proxy a -> Data.Proxy.Proxy [a]
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []] =
    [] \r [v_s5c5P] Data.Proxy.Proxy [];

Data.Proxy.$fAlternativeProxy [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Base.Alternative Data.Proxy.Proxy
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Base.C:Alternative! [Data.Proxy.$fApplicativeProxy
                                           Data.Proxy.Proxy
                                           Data.Proxy.$fAlternativeProxy_$c<|>
                                           Data.Proxy.$fAlternativeProxy_$csome
                                           Data.Proxy.$fAlternativeProxy_$csome];

Data.Proxy.$fMonadProxy_$c>>= [InlPrag=INLINE (sat-args=2)]
  :: forall a b.
     Data.Proxy.Proxy a
     -> (a -> Data.Proxy.Proxy b) -> Data.Proxy.Proxy b
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><L,A>, Unf=OtherCon []] =
    [] \r [ds_s5c5Q ds1_s5c5R] Data.Proxy.Proxy [];

Data.Proxy.$fMonadProxy_$c>> [InlPrag=INLINE (sat-args=2)]
  :: forall a b.
     Data.Proxy.Proxy a -> Data.Proxy.Proxy b -> Data.Proxy.Proxy b
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><L,A>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        Data.Proxy.$fApplicativeProxy_$c*> eta_B2 eta_B1;

lvl1_r5bEE :: forall a. [GHC.Types.Char] -> Data.Proxy.Proxy a
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [eta_s5c5S] GHC.Err.errorWithoutStackTrace eta_s5c5S;

Data.Proxy.$fMonadProxy [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Base.Monad Data.Proxy.Proxy
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Base.C:Monad! [Data.Proxy.$fApplicativeProxy
                                     Data.Proxy.$fMonadProxy_$c>>=
                                     Data.Proxy.$fMonadProxy_$c>>
                                     Data.Proxy.$fApplicativeProxy_$cpure
                                     lvl1_r5bEE];

Data.Proxy.$fMonadPlusProxy [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Base.MonadPlus Data.Proxy.Proxy
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Base.C:MonadPlus! [Data.Proxy.$fAlternativeProxy
                                         Data.Proxy.$fMonadProxy
                                         Data.Proxy.Proxy
                                         Data.Proxy.$fAlternativeProxy_$c<|>];

Data.Proxy.$fReadProxy_lexeme :: Text.Read.Lex.Lexeme
[GblId, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Ident! [Data.Proxy.$fReadProxy3];

Data.Proxy.$fReadProxy2
  :: forall k (t :: k).
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (Data.Proxy.Proxy t -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,A><L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [n_s5c5T eta_s5c5U]
        let {
          sat_s5c5W [Occ=Once]
            :: () -> Text.ParserCombinators.ReadP.P b_a3ngn
          [LclId] =
              [eta_s5c5U] \r [a1_s5c5V] eta_s5c5U Data.Proxy.Proxy;
        } in 
          case
              Text.Read.Lex.$wexpect Data.Proxy.$fReadProxy_lexeme sat_s5c5W
          of
          { Unit# ww1_s5c5Y [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s5c5Y];
          };

Data.Proxy.$fReadProxy1
  :: forall k (t :: k).
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (Data.Proxy.Proxy t -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Read.list3 Data.Proxy.$fReadProxy2 eta_B2 eta_B1;

Data.Proxy.$fReadProxy_$creadsPrec
  :: forall k (t :: k).
     GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS (Data.Proxy.Proxy t)
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s5c5Z]
        let {
          sat_s5c60 [Occ=Once]
            :: Text.ParserCombinators.ReadP.P (Data.Proxy.Proxy t_a5brZ)
          [LclId] =
              [n_s5c5Z] \u []
                  GHC.Read.list3
                      Data.Proxy.$fReadProxy2
                      n_s5c5Z
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s5c60;

Data.Proxy.$fReadProxy_$creadListPrec
  :: forall k (t :: k).
     Text.ParserCombinators.ReadPrec.ReadPrec [Data.Proxy.Proxy t]
[GblId] =
    [] \u [] GHC.Read.list Data.Proxy.$fReadProxy1;

Data.Proxy.$fReadProxy5
  :: forall k (t :: k).
     Text.ParserCombinators.ReadP.P [Data.Proxy.Proxy t]
[GblId] =
    [] \u []
        Data.Proxy.$fReadProxy_$creadListPrec
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

Data.Proxy.$fReadProxy_$creadList
  :: forall k (t :: k).
     Text.ParserCombinators.ReadP.ReadS [Data.Proxy.Proxy t]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run Data.Proxy.$fReadProxy5 eta_B1;

Data.Proxy.$fReadProxy [InlPrag=NOUSERINLINE CONLIKE]
  :: forall k (t :: k). GHC.Read.Read (Data.Proxy.Proxy t)
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [Data.Proxy.$fReadProxy_$creadsPrec
                                    Data.Proxy.$fReadProxy_$creadList
                                    Data.Proxy.$fReadProxy1
                                    Data.Proxy.$fReadProxy_$creadListPrec];

Data.Proxy.$fBoundedProxy [InlPrag=NOUSERINLINE CONLIKE]
  :: forall k (t :: k). GHC.Enum.Bounded (Data.Proxy.Proxy t)
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Bounded! [Data.Proxy.Proxy
                                       Data.Proxy.Proxy];

Data.Proxy.asProxyTypeOf [InlPrag=INLINE (sat-args=0)]
  :: forall a (proxy :: * -> *). a -> proxy a -> a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,A>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Base.const eta_B2 eta_B1;

Data.Proxy.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Data.Proxy.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Proxy.$trModule4];

Data.Proxy.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Data.Proxy"#;

Data.Proxy.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Proxy.$trModule2];

Data.Proxy.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Data.Proxy.$trModule3
                                     Data.Proxy.$trModule1];

$krep_r5bEF :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

Data.Proxy.$tcProxy1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_r5bEF GHC.Types.krep$*];

$krep1_r5bEG :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [1#];

Data.Proxy.$tcProxy2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Proxy.$fReadProxy4];

Data.Proxy.$tcProxy :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [11117694004322800938##
                                    2653577047990140727##
                                    Data.Proxy.$trModule
                                    Data.Proxy.$tcProxy2
                                    1#
                                    Data.Proxy.$tcProxy1];

$krep2_r5bEH :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep1_r5bEG GHC.Types.[]];

$krep3_r5bEI :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r5bEF $krep2_r5bEH];

Data.Proxy.$tc'Proxy1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Data.Proxy.$tcProxy
                                              $krep3_r5bEI];

Data.Proxy.$tc'Proxy3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Proxy"#;

Data.Proxy.$tc'Proxy2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Proxy.$tc'Proxy3];

Data.Proxy.$tc'Proxy :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [14415442874167749476##
                                    5236148037739324872##
                                    Data.Proxy.$trModule
                                    Data.Proxy.$tc'Proxy2
                                    2#
                                    Data.Proxy.$tc'Proxy1];

Data.Proxy.$tcKProxy2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "KProxy"#;

Data.Proxy.$tcKProxy1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Proxy.$tcKProxy2];

Data.Proxy.$tcKProxy :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [8448499740867508124##
                                    2482783599294208243##
                                    Data.Proxy.$trModule
                                    Data.Proxy.$tcKProxy1
                                    0#
                                    GHC.Types.krep$*Arr*];

$krep4_r5bEJ :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r5bEF GHC.Types.[]];

Data.Proxy.$tc'KProxy1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Data.Proxy.$tcKProxy
                                              $krep4_r5bEJ];

Data.Proxy.$tc'KProxy3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'KProxy"#;

Data.Proxy.$tc'KProxy2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Data.Proxy.$tc'KProxy3];

Data.Proxy.$tc'KProxy :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [13347977177506077081##
                                    15425068275281601281##
                                    Data.Proxy.$trModule
                                    Data.Proxy.$tc'KProxy2
                                    1#
                                    Data.Proxy.$tc'KProxy1];

Data.Proxy.KProxy :: forall t. Data.Proxy.KProxy t
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE Data.Proxy.KProxy! [];

Data.Proxy.Proxy :: forall k (t :: k). Data.Proxy.Proxy t
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE Data.Proxy.Proxy! [];

