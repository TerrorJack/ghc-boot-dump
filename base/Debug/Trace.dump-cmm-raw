
==================== Raw Cmm ====================
2018-03-16 16:06:56.469168271 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:06:56.4709673 UTC

[section ""data" . Debug.Trace.traceEventIO2_closure" {
     Debug.Trace.traceEventIO2_closure:
         const Debug.Trace.traceEventIO2_info;
 },
 Debug.Trace.traceEventIO2_entry() //  [R2]
         { []
         }
     {offset
       cc2KC: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cc2KG; else goto cc2KH;
       cc2KG: // global
           R2 = R2;
           R1 = Debug.Trace.traceEventIO2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc2KH: // global
           I64[Sp - 8] = block_cc2Kz_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uc2KL; else goto cc2KA;
       uc2KL: // global
           call _cc2Kz(R1) args: 0, res: 0, upd: 0;
       cc2KA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Debug.Trace.traceEventIO2_info" {
     Debug.Trace.traceEventIO2_info:
         const Debug.Trace.traceEventIO2_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _cc2Kz() //  [R1]
         { []
         }
     {offset
       cc2Kz: // global
           I64[Sp] = block_cc2KF_info;
           R1 = I64[R1 + 7];
           call stg_traceEvent#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc2Kz_info" {
     block_cc2Kz_info:
         const _cc2Kz;
         const 0;
         const 30;
 },
 _cc2KF() //  []
         { []
         }
     {offset
       cc2KF: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc2KF_info" {
     block_cc2KF_info:
         const _cc2KF;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:56.477219944 UTC

[section ""data" . Debug.Trace.traceEventIO1_closure" {
     Debug.Trace.traceEventIO1_closure:
         const Debug.Trace.traceEventIO1_info;
         const 0;
 },
 Debug.Trace.traceEventIO1_entry() //  [R2]
         { []
         }
     {offset
       cc2L3: // global
           R4 = Debug.Trace.traceEventIO2_closure+2;
           R3 = R2;
           R2 = GHC.IO.Encoding.UTF8.utf8_closure;
           call GHC.Foreign.charIsRepresentable3_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Debug.Trace.traceEventIO1_info" {
     Debug.Trace.traceEventIO1_info:
         const Debug.Trace.traceEventIO1_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const Sc2we_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:56.480676176 UTC

[section ""data" . Debug.Trace.traceEventIO_closure" {
     Debug.Trace.traceEventIO_closure:
         const Debug.Trace.traceEventIO_info;
         const 0;
 },
 Debug.Trace.traceEventIO_entry() //  [R2]
         { []
         }
     {offset
       cc2Le: // global
           R2 = R2;
           call Debug.Trace.traceEventIO1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Debug.Trace.traceEventIO_info" {
     Debug.Trace.traceEventIO_info:
         const Debug.Trace.traceEventIO_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const Sc2we_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:56.484808163 UTC

[section ""data" . Debug.Trace.traceMarkerIO2_closure" {
     Debug.Trace.traceMarkerIO2_closure:
         const Debug.Trace.traceMarkerIO2_info;
 },
 Debug.Trace.traceMarkerIO2_entry() //  [R2]
         { []
         }
     {offset
       cc2Ls: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cc2Lw; else goto cc2Lx;
       cc2Lw: // global
           R2 = R2;
           R1 = Debug.Trace.traceMarkerIO2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc2Lx: // global
           I64[Sp - 8] = block_cc2Lp_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uc2LB; else goto cc2Lq;
       uc2LB: // global
           call _cc2Lp(R1) args: 0, res: 0, upd: 0;
       cc2Lq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Debug.Trace.traceMarkerIO2_info" {
     Debug.Trace.traceMarkerIO2_info:
         const Debug.Trace.traceMarkerIO2_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _cc2Lp() //  [R1]
         { []
         }
     {offset
       cc2Lp: // global
           I64[Sp] = block_cc2Lv_info;
           R1 = I64[R1 + 7];
           call stg_traceMarker#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc2Lp_info" {
     block_cc2Lp_info:
         const _cc2Lp;
         const 0;
         const 30;
 },
 _cc2Lv() //  []
         { []
         }
     {offset
       cc2Lv: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc2Lv_info" {
     block_cc2Lv_info:
         const _cc2Lv;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:56.491469693 UTC

[section ""data" . Debug.Trace.traceMarkerIO1_closure" {
     Debug.Trace.traceMarkerIO1_closure:
         const Debug.Trace.traceMarkerIO1_info;
         const 0;
 },
 Debug.Trace.traceMarkerIO1_entry() //  [R2]
         { []
         }
     {offset
       cc2LT: // global
           R4 = Debug.Trace.traceMarkerIO2_closure+2;
           R3 = R2;
           R2 = GHC.IO.Encoding.UTF8.utf8_closure;
           call GHC.Foreign.charIsRepresentable3_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Debug.Trace.traceMarkerIO1_info" {
     Debug.Trace.traceMarkerIO1_info:
         const Debug.Trace.traceMarkerIO1_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const Sc2we_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:56.495150241 UTC

[section ""data" . Debug.Trace.traceMarkerIO_closure" {
     Debug.Trace.traceMarkerIO_closure:
         const Debug.Trace.traceMarkerIO_info;
         const 0;
 },
 Debug.Trace.traceMarkerIO_entry() //  [R2]
         { []
         }
     {offset
       cc2M4: // global
           R2 = R2;
           call Debug.Trace.traceMarkerIO1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Debug.Trace.traceMarkerIO_info" {
     Debug.Trace.traceMarkerIO_info:
         const Debug.Trace.traceMarkerIO_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const Sc2we_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:56.49824423 UTC

[section ""cstring" . Debug.Trace.$trModule4_bytes" {
     Debug.Trace.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:56.499818734 UTC

[section ""data" . Debug.Trace.$trModule3_closure" {
     Debug.Trace.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Debug.Trace.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:56.501451148 UTC

[section ""cstring" . Debug.Trace.$trModule2_bytes" {
     Debug.Trace.$trModule2_bytes:
         I8[] [68,101,98,117,103,46,84,114,97,99,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:56.503075135 UTC

[section ""data" . Debug.Trace.$trModule1_closure" {
     Debug.Trace.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Debug.Trace.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:56.504800182 UTC

[section ""data" . Debug.Trace.$trModule_closure" {
     Debug.Trace.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Debug.Trace.$trModule3_closure+1;
         const Debug.Trace.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:56.507605556 UTC

[section ""data" . Debug.Trace.traceMarker_closure" {
     Debug.Trace.traceMarker_closure:
         const Debug.Trace.traceMarker_info;
         const 0;
 },
 Debug.Trace.traceMarker_entry() //  [R2, R3]
         { []
         }
     {offset
       cc2Mp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc2Mq; else goto cc2Mr;
       cc2Mq: // global
           R3 = R3;
           R2 = R2;
           R1 = Debug.Trace.traceMarker_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc2Mr: // global
           I64[Sp - 16] = block_cc2Mk_info;
           R4 = Debug.Trace.traceMarkerIO2_closure+2;
           _sc2tx::P64 = R3;
           R3 = R2;
           R2 = GHC.IO.Encoding.UTF8.utf8_closure;
           P64[Sp - 8] = _sc2tx::P64;
           Sp = Sp - 16;
           call GHC.Foreign.charIsRepresentable3_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Debug.Trace.traceMarker_info" {
     Debug.Trace.traceMarker_info:
         const Debug.Trace.traceMarker_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const Sc2we_srt;
 },
 _cc2Mk() //  []
         { []
         }
     {offset
       cc2Mk: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc2Mk_info" {
     block_cc2Mk_info:
         const _cc2Mk;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:56.513352827 UTC

[section ""data" . Debug.Trace.traceEvent_closure" {
     Debug.Trace.traceEvent_closure:
         const Debug.Trace.traceEvent_info;
         const 0;
 },
 Debug.Trace.traceEvent_entry() //  [R2, R3]
         { []
         }
     {offset
       cc2ML: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc2MM; else goto cc2MN;
       cc2MM: // global
           R3 = R3;
           R2 = R2;
           R1 = Debug.Trace.traceEvent_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc2MN: // global
           I64[Sp - 16] = block_cc2MG_info;
           R4 = Debug.Trace.traceEventIO2_closure+2;
           _sc2tF::P64 = R3;
           R3 = R2;
           R2 = GHC.IO.Encoding.UTF8.utf8_closure;
           P64[Sp - 8] = _sc2tF::P64;
           Sp = Sp - 16;
           call GHC.Foreign.charIsRepresentable3_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Debug.Trace.traceEvent_info" {
     Debug.Trace.traceEvent_info:
         const Debug.Trace.traceEvent_entry;
         const 0;
         const 73014444046;
         const 8589934607;
         const Sc2we_srt;
 },
 _cc2MG() //  []
         { []
         }
     {offset
       cc2MG: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc2MG_info" {
     block_cc2MG_info:
         const _cc2MG;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:56.518487682 UTC

[section ""cstring" . Debug.Trace.putTraceMsg5_bytes" {
     Debug.Trace.putTraceMsg5_bytes:
         I8[] [37,115,10]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:56.520625069 UTC

[section ""data" . Debug.Trace.putTraceMsg4_closure" {
     Debug.Trace.putTraceMsg4_closure:
         const Debug.Trace.putTraceMsg4_info;
         const 0;
         const 0;
         const 0;
 },
 Debug.Trace.putTraceMsg4_entry() //  [R1]
         { []
         }
     {offset
       cc2N5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc2N6; else goto cc2N7;
       cc2N6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc2N7: // global
           (_cc2N2::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cc2N2::I64 == 0) goto cc2N4; else goto cc2N3;
       cc2N4: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cc2N3: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cc2N2::I64;
           R2 = Debug.Trace.putTraceMsg5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Debug.Trace.putTraceMsg4_info" {
     Debug.Trace.putTraceMsg4_info:
         const Debug.Trace.putTraceMsg4_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:56.524479519 UTC

[section ""cstring" . Debug.Trace.putTraceMsg3_bytes" {
     Debug.Trace.putTraceMsg3_bytes:
         I8[] [87,65,82,78,73,78,71,58,32,112,114,101,118,105,111,117,115,32,116,114,97,99,101,32,109,101,115,115,97,103,101,32,104,97,100,32,110,117,108,108,32,98,121,116,101,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:56.526749721 UTC

[section ""data" . Debug.Trace.putTraceMsg2_closure" {
     Debug.Trace.putTraceMsg2_closure:
         const Debug.Trace.putTraceMsg2_info;
         const 0;
         const 0;
         const 0;
 },
 Debug.Trace.putTraceMsg2_entry() //  [R1]
         { []
         }
     {offset
       cc2Nm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc2Nn; else goto cc2No;
       cc2Nn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc2No: // global
           (_cc2Nj::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cc2Nj::I64 == 0) goto cc2Nl; else goto cc2Nk;
       cc2Nl: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cc2Nk: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cc2Nj::I64;
           R2 = Debug.Trace.putTraceMsg3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Debug.Trace.putTraceMsg2_info" {
     Debug.Trace.putTraceMsg2_info:
         const Debug.Trace.putTraceMsg2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:56.532938255 UTC

[section ""data" . Debug.Trace.$wgo_closure" {
     Debug.Trace.$wgo_closure:
         const Debug.Trace.$wgo_info;
 },
 w2_sc2tS_entry() //  [R1]
         { []
         }
     {offset
       cc2NS: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cc2NT; else goto cc2NU;
       cc2NT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc2NU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cc2NP_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call Debug.Trace.$wgo_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . w2_sc2tS_info" {
     w2_sc2tS_info:
         const w2_sc2tS_entry;
         const 1;
         const 16;
 },
 _cc2NP() //  [R1, R2]
         { []
         }
     {offset
       cc2NP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cc2NX; else goto cc2NW;
       cc2NX: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cc2NW: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cc2NP_info" {
     block_cc2NP_info:
         const _cc2NP;
         const 0;
         const 30;
 },
 Debug.Trace.$wgo_entry() //  [R2]
         { []
         }
     {offset
       cc2O2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc2O3; else goto cc2O4;
       cc2O3: // global
           R2 = R2;
           R1 = Debug.Trace.$wgo_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc2O4: // global
           I64[Sp - 8] = block_cc2NA_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uc2Oo; else goto cc2NB;
       uc2Oo: // global
           call _cc2NA(R1) args: 0, res: 0, upd: 0;
       cc2NB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Debug.Trace.$wgo_info" {
     Debug.Trace.$wgo_info:
         const Debug.Trace.$wgo_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cc2NA() //  [R1]
         { []
         }
     {offset
       cc2NA: // global
           if (R1 & 7 == 1) goto cc2NZ; else goto cc2O0;
       cc2NZ: // global
           R2 = GHC.Types.[]_closure+1;
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       cc2O0: // global
           I64[Sp - 8] = block_cc2NG_info;
           _sc2tP::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _sc2tP::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uc2On; else goto cc2NH;
       uc2On: // global
           call _cc2NG(R1) args: 0, res: 0, upd: 0;
       cc2NH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc2NA_info" {
     block_cc2NA_info:
         const _cc2NA;
         const 0;
         const 30;
 },
 _cc2NG() //  [R1]
         { []
         }
     {offset
       cc2NG: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cc2Oa; else goto cc2O9;
       cc2Oa: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc2O9: // global
           _sc2tR::I64 = I64[R1 + 7];
           I64[Hp - 88] = w2_sc2tS_info;
           P64[Hp - 72] = P64[Sp + 8];
           _cc2NL::P64 = Hp - 88;
           if (_sc2tR::I64 == 0) goto cc2Om; else goto cc2Oh;
       cc2Om: // global
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _cc2NL::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _cc2NL::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 40;
           R2 = Hp - 64;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       cc2Oh: // global
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _cc2NL::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = R1;
           P64[Hp - 24] = Hp - 64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _cc2NL::P64;
           R2 = Hp - 38;
           R1 = Hp - 16;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc2NG_info" {
     block_cc2NG_info:
         const _cc2NG;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:56.549574904 UTC

[section ""data" . Debug.Trace.putTraceMsg1_closure" {
     Debug.Trace.putTraceMsg1_closure:
         const Debug.Trace.putTraceMsg1_info;
         const 0;
 },
 ds_sc2uk_entry() //  [R1]
         { []
         }
     {offset
       cc2P5: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cc2P6; else goto cc2P7;
       cc2P6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc2P7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cc2P2_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call Debug.Trace.$wgo_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds_sc2uk_info" {
     ds_sc2uk_info:
         const ds_sc2uk_entry;
         const 1;
         const 16;
 },
 _cc2P2() //  [R1, R2]
         { []
         }
     {offset
       cc2P2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cc2Pa; else goto cc2P9;
       cc2Pa: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cc2P9: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cc2P2_info" {
     block_cc2P2_info:
         const _cc2P2;
         const 0;
         const 30;
 },
 sat_sc2uG_entry() //  [R1, R2]
         { []
         }
     {offset
       cc2Pr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc2Pv; else goto cc2Pw;
       cc2Pv: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc2Pw: // global
           I64[Sp - 16] = block_cc2Po_info;
           R1 = P64[R1 + 6];
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uc2PH; else goto cc2Pp;
       uc2PH: // global
           call _cc2Po(R1) args: 0, res: 0, upd: 0;
       cc2Pp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc2uG_info" {
     sat_sc2uG_info:
         const sat_sc2uG_entry;
         const 1;
         const 9;
         const 8589934597;
 },
 _cc2Po() //  [R1]
         { []
         }
     {offset
       cc2Po: // global
           I64[Sp] = block_cc2Pu_info;
           _sc2uA::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _sc2uA::I64;
           if (R1 & 7 != 0) goto uc2PG; else goto cc2Py;
       uc2PG: // global
           call _cc2Pu(R1) args: 0, res: 0, upd: 0;
       cc2Py: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc2Po_info" {
     block_cc2Po_info:
         const _cc2Po;
         const 1;
         const 30;
 },
 _cc2Pu() //  [R1]
         { []
         }
     {offset
       cc2Pu: // global
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] debugBelch2(I64[Sp + 8], I64[R1 + 7]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc2Pu_info" {
     block_cc2Pu_info:
         const _cc2Pu;
         const 65;
         const 30;
 },
 sat_sc2v2_entry() //  [R1, R2]
         { []
         }
     {offset
       cc2Q5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc2Q9; else goto cc2Qa;
       cc2Q9: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc2Qa: // global
           I64[Sp - 16] = block_cc2Q2_info;
           R1 = P64[R1 + 6];
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uc2Ql; else goto cc2Q3;
       uc2Ql: // global
           call _cc2Q2(R1) args: 0, res: 0, upd: 0;
       cc2Q3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc2v2_info" {
     sat_sc2v2_info:
         const sat_sc2v2_entry;
         const 1;
         const 9;
         const 8589934597;
 },
 _cc2Q2() //  [R1]
         { []
         }
     {offset
       cc2Q2: // global
           I64[Sp] = block_cc2Q8_info;
           _sc2uW::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _sc2uW::I64;
           if (R1 & 7 != 0) goto uc2Qk; else goto cc2Qc;
       uc2Qk: // global
           call _cc2Q8(R1) args: 0, res: 0, upd: 0;
       cc2Qc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc2Q2_info" {
     block_cc2Q2_info:
         const _cc2Q2;
         const 1;
         const 30;
 },
 _cc2Q8() //  [R1]
         { []
         }
     {offset
       cc2Q8: // global
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] debugBelch2(I64[Sp + 8], I64[R1 + 7]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc2Q8_info" {
     block_cc2Q8_info:
         const _cc2Q8;
         const 65;
         const 30;
 },
 sat_sc2v3_entry() //  [R1, R2]
         { []
         }
     {offset
       cc2Qm: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cc2Qn; else goto cc2Qo;
       cc2Qn: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc2Qo: // global
           I64[Sp - 32] = block_cc2Ph_info;
           _sc2uk::P64 = P64[R1 + 6];
           _sc2uo::P64 = P64[R1 + 14];
           R1 = GHC.IO.Encoding.getForeignEncoding_closure;
           P64[Sp - 24] = _sc2uk::P64;
           P64[Sp - 16] = _sc2uo::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 32;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc2v3_info" {
     sat_sc2v3_info:
         const sat_sc2v3_entry;
         const 2;
         const 12884901899;
         const 8589934597;
         const Sc2we_srt+40;
 },
 _cc2Ph() //  [R1]
         { []
         }
     {offset
       cc2Ph: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cc2Qr; else goto cc2Qq;
       cc2Qr: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc2Qq: // global
           I64[Hp - 8] = sat_sc2uG_info;
           P64[Hp] = P64[Sp + 24];
           I64[Sp] = block_cc2PI_info;
           R4 = Hp - 6;
           R3 = P64[Sp + 16];
           R2 = R1;
           call GHC.Foreign.charIsRepresentable3_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc2Ph_info" {
     block_cc2Ph_info:
         const _cc2Ph;
         const 3;
         const 12884901918;
         const Sc2we_srt+40;
 },
 _cc2PI() //  []
         { []
         }
     {offset
       cc2PI: // global
           I64[Sp + 16] = block_cc2PK_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto uc2QE; else goto cc2PL;
       uc2QE: // global
           call _cc2PK(R1) args: 0, res: 0, upd: 0;
       cc2PL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc2PI_info" {
     block_cc2PI_info:
         const _cc2PI;
         const 131;
         const 12884901918;
         const Sc2we_srt+40;
 },
 _cc2PK() //  [R1]
         { []
         }
     {offset
       cc2PK: // global
           I64[Sp] = block_cc2PP_info;
           R1 = P64[R1 + 7];
           if (R1 & 7 != 0) goto uc2QF; else goto cc2PQ;
       uc2QF: // global
           call _cc2PP(R1) args: 0, res: 0, upd: 0;
       cc2PQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc2PK_info" {
     block_cc2PK_info:
         const _cc2PK;
         const 1;
         const 12884901918;
         const Sc2we_srt+40;
 },
 _cc2PP() //  [R1]
         { []
         }
     {offset
       cc2PP: // global
           if (R1 & 7 == 1) goto cc2Qx; else goto cc2Qz;
       cc2Qx: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cc2Qz: // global
           I64[Sp] = block_cc2PV_info;
           R1 = GHC.IO.Encoding.getForeignEncoding_closure;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc2PP_info" {
     block_cc2PP_info:
         const _cc2PP;
         const 1;
         const 12884901918;
         const Sc2we_srt+40;
 },
 _cc2PV() //  [R1]
         { []
         }
     {offset
       cc2PV: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cc2QC; else goto cc2QB;
       cc2QC: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc2QB: // global
           I64[Hp - 8] = sat_sc2v2_info;
           P64[Hp] = P64[Sp + 8];
           R4 = Hp - 6;
           R3 = Debug.Trace.putTraceMsg2_closure;
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Foreign.charIsRepresentable3_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc2PV_info" {
     block_cc2PV_info:
         const _cc2PV;
         const 1;
         const 4294967326;
         const Sc2we_srt+48;
 },
 Debug.Trace.putTraceMsg1_entry() //  [R2]
         { []
         }
     {offset
       cc2QG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc2QH; else goto cc2QI;
       cc2QH: // global
           R2 = R2;
           R1 = Debug.Trace.putTraceMsg1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc2QI: // global
           I64[Sp - 16] = block_cc2OW_info;
           R1 = GHC.IO.Encoding.getForeignEncoding_closure;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Debug.Trace.putTraceMsg1_info" {
     Debug.Trace.putTraceMsg1_info:
         const Debug.Trace.putTraceMsg1_entry;
         const 0;
         const 64424509454;
         const 8589934597;
         const Sc2we_srt+40;
 },
 _cc2OW() //  [R1]
         { []
         }
     {offset
       cc2OW: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cc2QL; else goto cc2QK;
       cc2QL: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc2QK: // global
           I64[Hp - 64] = ds_sc2uk_info;
           P64[Hp - 48] = P64[Sp + 8];
           I64[Hp - 40] = stg_sel_1_upd_info;
           _cc2OY::P64 = Hp - 64;
           P64[Hp - 24] = _cc2OY::P64;
           I64[Hp - 16] = sat_sc2v3_info;
           P64[Hp - 8] = _cc2OY::P64;
           P64[Hp] = Hp - 40;
           R4 = Hp - 14;
           R3 = Debug.Trace.putTraceMsg4_closure;
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Foreign.charIsRepresentable3_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc2OW_info" {
     block_cc2OW_info:
         const _cc2OW;
         const 1;
         const 47244640286;
         const Sc2we_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:56.577656909 UTC

[section ""data" . Debug.Trace.traceIO_closure" {
     Debug.Trace.traceIO_closure:
         const Debug.Trace.traceIO_info;
         const 0;
 },
 Debug.Trace.traceIO_entry() //  [R2]
         { []
         }
     {offset
       cc2RY: // global
           R2 = R2;
           call Debug.Trace.putTraceMsg1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Debug.Trace.traceIO_info" {
     Debug.Trace.traceIO_info:
         const Debug.Trace.traceIO_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const Sc2we_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:56.581366608 UTC

[section ""data" . Debug.Trace.putTraceMsg_closure" {
     Debug.Trace.putTraceMsg_closure:
         const Debug.Trace.putTraceMsg_info;
         const 0;
 },
 Debug.Trace.putTraceMsg_entry() //  [R2]
         { []
         }
     {offset
       cc2S9: // global
           R2 = R2;
           call Debug.Trace.putTraceMsg1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Debug.Trace.putTraceMsg_info" {
     Debug.Trace.putTraceMsg_info:
         const Debug.Trace.putTraceMsg_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const Sc2we_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:56.585068711 UTC

[section ""data" . Debug.Trace.trace_closure" {
     Debug.Trace.trace_closure:
         const Debug.Trace.trace_info;
         const 0;
 },
 Debug.Trace.trace_entry() //  [R2, R3]
         { []
         }
     {offset
       cc2Sr: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cc2Ss; else goto cc2St;
       cc2Ss: // global
           R3 = R3;
           R2 = R2;
           R1 = Debug.Trace.trace_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc2St: // global
           I64[Sp - 24] = block_cc2Sk_info;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Debug.Trace.trace_info" {
     Debug.Trace.trace_info:
         const Debug.Trace.trace_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const Sc2we_srt+56;
 },
 _cc2Sk() //  []
         { []
         }
     {offset
       cc2Sk: // global
           _sc2v4::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cc2Sm_info;
           R2 = _sc2v4::P64;
           Sp = Sp + 8;
           call Debug.Trace.putTraceMsg1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc2Sk_info" {
     block_cc2Sk_info:
         const _cc2Sk;
         const 2;
         const 4294967326;
         const Sc2we_srt+56;
 },
 _cc2Sm() //  []
         { []
         }
     {offset
       cc2Sm: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc2Sm_info" {
     block_cc2Sm_info:
         const _cc2Sm;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:56.591870402 UTC

[section ""data" . Debug.Trace.traceId_closure" {
     Debug.Trace.traceId_closure:
         const Debug.Trace.traceId_info;
         const 0;
 },
 Debug.Trace.traceId_entry() //  [R2]
         { []
         }
     {offset
       cc2SM: // global
           R3 = R2;
           R2 = R2;
           call Debug.Trace.trace_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Debug.Trace.traceId_info" {
     Debug.Trace.traceId_info:
         const Debug.Trace.traceId_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const Sc2we_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:56.596219887 UTC

[section ""data" . Debug.Trace.traceShow_closure" {
     Debug.Trace.traceShow_closure:
         const Debug.Trace.traceShow_info;
         const 0;
 },
 sat_sc2vg_entry() //  [R1]
         { []
         }
     {offset
       cc2T1: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cc2T2; else goto cc2T3;
       cc2T2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc2T3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Show.show_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc2vg_info" {
     sat_sc2vg_info:
         const sat_sc2vg_entry;
         const 2;
         const 18;
 },
 Debug.Trace.traceShow_entry() //  [R2, R3]
         { []
         }
     {offset
       cc2T4: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cc2T8; else goto cc2T7;
       cc2T8: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Debug.Trace.traceShow_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc2T7: // global
           I64[Hp - 24] = sat_sc2vg_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = Debug.Trace.trace_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Debug.Trace.traceShow_info" {
     Debug.Trace.traceShow_info:
         const Debug.Trace.traceShow_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const Sc2we_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:56.602305975 UTC

[section ""data" . Debug.Trace.traceShowId_closure" {
     Debug.Trace.traceShowId_closure:
         const Debug.Trace.traceShowId_info;
         const 0;
 },
 sat_sc2vj_entry() //  [R1]
         { []
         }
     {offset
       cc2Tq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc2Tr; else goto cc2Ts;
       cc2Tr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc2Ts: // global
           R2 = P64[R1 + 16];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[R1 + 24];
           Sp = Sp - 16;
           call GHC.Show.show_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc2vj_info" {
     sat_sc2vj_info:
         const sat_sc2vj_entry;
         const 2;
         const 18;
 },
 Debug.Trace.traceShowId_entry() //  [R2, R3]
         { []
         }
     {offset
       cc2Tt: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cc2Tx; else goto cc2Tw;
       cc2Tx: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Debug.Trace.traceShowId_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc2Tw: // global
           I64[Hp - 24] = sat_sc2vj_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R3 = R3;
           R2 = Hp - 24;
           call Debug.Trace.trace_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Debug.Trace.traceShowId_info" {
     Debug.Trace.traceShowId_info:
         const Debug.Trace.traceShowId_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const Sc2we_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:56.608440002 UTC

[section ""data" . Debug.Trace.traceM_closure" {
     Debug.Trace.traceM_closure:
         const Debug.Trace.traceM_info;
         const 0;
 },
 sat_sc2vm_entry() //  [R1]
         { []
         }
     {offset
       cc2TP: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cc2TQ; else goto cc2TR;
       cc2TQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc2TR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Tuple.()_closure+1;
           Sp = Sp - 32;
           call GHC.Base.pure_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc2vm_info" {
     sat_sc2vm_info:
         const sat_sc2vm_entry;
         const 1;
         const 16;
 },
 Debug.Trace.traceM_entry() //  [R2, R3]
         { []
         }
     {offset
       cc2TS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cc2TW; else goto cc2TV;
       cc2TW: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Debug.Trace.traceM_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc2TV: // global
           I64[Hp - 16] = sat_sc2vm_info;
           P64[Hp] = R2;
           _sc2vl::P64 = R3;
           R3 = Hp - 16;
           R2 = _sc2vl::P64;
           call Debug.Trace.trace_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Debug.Trace.traceM_info" {
     Debug.Trace.traceM_info:
         const Debug.Trace.traceM_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const Sc2we_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:56.615046105 UTC

[section ""data" . Debug.Trace.traceShowM_closure" {
     Debug.Trace.traceShowM_closure:
         const Debug.Trace.traceShowM_info;
         const 0;
 },
 sat_sc2vr_entry() //  [R1]
         { []
         }
     {offset
       cc2Ud: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cc2Ue; else goto cc2Uf;
       cc2Ue: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc2Uf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Tuple.()_closure+1;
           Sp = Sp - 32;
           call GHC.Base.pure_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc2vr_info" {
     sat_sc2vr_info:
         const sat_sc2vr_entry;
         const 1;
         const 16;
 },
 sat_sc2vq_entry() //  [R1]
         { []
         }
     {offset
       cc2Uk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc2Ul; else goto cc2Um;
       cc2Ul: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc2Um: // global
           R2 = P64[R1 + 16];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[R1 + 24];
           Sp = Sp - 16;
           call GHC.Show.show_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc2vq_info" {
     sat_sc2vq_info:
         const sat_sc2vq_entry;
         const 2;
         const 18;
 },
 Debug.Trace.traceShowM_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cc2Un: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cc2Ur; else goto cc2Uq;
       cc2Ur: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Debug.Trace.traceShowM_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc2Uq: // global
           I64[Hp - 48] = sat_sc2vr_info;
           P64[Hp - 32] = R3;
           I64[Hp - 24] = sat_sc2vq_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R4;
           R3 = Hp - 48;
           R2 = Hp - 24;
           call Debug.Trace.trace_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Debug.Trace.traceShowM_info" {
     Debug.Trace.traceShowM_info:
         const Debug.Trace.traceShowM_entry;
         const 0;
         const 73014444046;
         const 12884901911;
         const Sc2we_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:56.624886993 UTC

[section ""data" . Debug.Trace.traceStack_closure" {
     Debug.Trace.traceStack_closure:
         const Debug.Trace.traceStack_info;
         const 0;
 },
 sat_sc2vI_entry() //  [R1]
         { []
         }
     {offset
       cc2V5: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cc2V6; else goto cc2V7;
       cc2V6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc2V7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cc2V3_info;
           R3 = GHC.Types.[]_closure+1;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.List.reverse1_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc2vI_info" {
     sat_sc2vI_info:
         const sat_sc2vI_entry;
         const 1;
         const 4294967312;
         const Sc2we_srt+112;
 },
 _cc2V3() //  [R1]
         { []
         }
     {offset
       cc2V3: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Stack.CCS.renderStack_go_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cc2V3_info" {
     block_cc2V3_info:
         const _cc2V3;
         const 0;
         const 4294967326;
         const Sc2we_srt+112;
 },
 sat_sc2vJ_entry() //  [R1]
         { []
         }
     {offset
       cc2Vb: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cc2Vf; else goto cc2Ve;
       cc2Vf: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc2Ve: // global
           _sc2vE::P64 = P64[R1 + 16];
           I64[Hp - 16] = sat_sc2vI_info;
           P64[Hp] = _sc2vE::P64;
           R3 = Hp - 16;
           R2 = GHC.Stack.CCS.renderStack1_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc2vJ_info" {
     sat_sc2vJ_info:
         const sat_sc2vJ_entry;
         const 1;
         const 4294967312;
         const Sc2we_srt+112;
 },
 Debug.Trace.traceStack_entry() //  [R2, R3]
         { []
         }
     {offset
       cc2Vn: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cc2Vo; else goto cc2Vp;
       cc2Vo: // global
           R3 = R3;
           R2 = R2;
           R1 = Debug.Trace.traceStack_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc2Vp: // global
           I64[Sp - 24] = block_cc2UJ_info;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Debug.Trace.traceStack_info" {
     Debug.Trace.traceStack_info:
         const Debug.Trace.traceStack_entry;
         const 0;
         const 3852585664526;
         const 8589934607;
         const Sc2we_srt+56;
 },
 _cc2UJ() //  []
         { []
         }
     {offset
       cc2UJ: // global
           _sc2vs::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cc2UL_info;
           R2 = _sc2vs::P64;
           Sp = Sp + 8;
           call Debug.Trace.putTraceMsg1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc2UJ_info" {
     block_cc2UJ_info:
         const _cc2UJ;
         const 2;
         const 1653562408990;
         const Sc2we_srt+56;
 },
 _cc2UL() //  []
         { []
         }
     {offset
       cc2UL: // global
           I64[Sp] = block_cc2UN_info;
           R3 = GHC.Types.[]_closure+1;
           R2 = CCCS;
           call GHC.Stack.CCS.$wgo_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc2UL_info" {
     block_cc2UL_info:
         const _cc2UL;
         const 1;
         const 1653562408990;
         const Sc2we_srt+56;
 },
 _cc2UN() //  [R1]
         { []
         }
     {offset
       cc2UN: // global
           I64[Sp] = block_cc2UP_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uc2VE; else goto cc2UQ;
       uc2VE: // global
           call _cc2UP(R1) args: 0, res: 0, upd: 0;
       cc2UQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc2UN_info" {
     block_cc2UN_info:
         const _cc2UN;
         const 1;
         const 554050781214;
         const Sc2we_srt+56;
 },
 _cc2UP() //  [R1]
         { []
         }
     {offset
       cc2UP: // global
           if (R1 & 7 == 1) goto cc2Vh; else goto cc2Vi;
       cc2Vh: // global
           P64[Sp + 8] = P64[Sp + 8];
           Sp = Sp + 8;
           call _cc2Vg() args: 0, res: 0, upd: 0;
       cc2Vi: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cc2Vy; else goto cc2Vx;
       cc2Vy: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc2Vx: // global
           I64[Hp - 16] = sat_sc2vJ_info;
           P64[Hp] = R1;
           I64[Sp] = block_cc2Vv_info;
           R2 = Hp - 16;
           call Debug.Trace.putTraceMsg1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc2UP_info" {
     block_cc2UP_info:
         const _cc2UP;
         const 1;
         const 554050781214;
         const Sc2we_srt+56;
 },
 _cc2Vv() //  []
         { []
         }
     {offset
       cc2Vv: // global
           P64[Sp + 8] = P64[Sp + 8];
           Sp = Sp + 8;
           call _cc2Vg() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cc2Vv_info" {
     block_cc2Vv_info:
         const _cc2Vv;
         const 1;
         const 30;
 },
 _cc2Vg() //  []
         { []
         }
     {offset
       cc2Vg: // global
           R1 = P64[Sp];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:56.642110972 UTC

[section ""relreadonly" . Sc2we_srt" {
     Sc2we_srt:
         const GHC.IO.Encoding.UTF8.utf8_closure;
         const Debug.Trace.traceEventIO1_closure;
         const Debug.Trace.traceMarkerIO1_closure;
         const Debug.Trace.traceMarker_closure;
         const Debug.Trace.traceEvent_closure;
         const GHC.IO.Encoding.getForeignEncoding_closure;
         const Debug.Trace.putTraceMsg2_closure;
         const Debug.Trace.putTraceMsg1_closure;
         const Debug.Trace.putTraceMsg4_closure;
         const Debug.Trace.trace_closure;
         const Debug.Trace.traceShow_closure;
         const Debug.Trace.traceShowId_closure;
         const Debug.Trace.traceM_closure;
         const Debug.Trace.traceShowM_closure;
         const GHC.Stack.CCS.renderStack_go_closure;
         const GHC.Stack.CCS.$wgo_closure;
         const Debug.Trace.traceStack_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:57.262720306 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:06:57.264783289 UTC

[section ""data" . Debug.Trace.traceEventIO2_closure" {
     Debug.Trace.traceEventIO2_closure:
         const Debug.Trace.traceEventIO2_info;
 },
 Debug.Trace.traceEventIO2_entry() //  [R2]
         { []
         }
     {offset
       cc2YY: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cc2Z2; else goto cc2Z3;
       cc2Z2: // global
           R2 = R2;
           R1 = Debug.Trace.traceEventIO2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc2Z3: // global
           I64[Sp - 8] = block_cc2YV_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uc2Z7; else goto cc2YW;
       uc2Z7: // global
           call _cc2YV(R1) args: 0, res: 0, upd: 0;
       cc2YW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Debug.Trace.traceEventIO2_info" {
     Debug.Trace.traceEventIO2_info:
         const Debug.Trace.traceEventIO2_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _cc2YV() //  [R1]
         { []
         }
     {offset
       cc2YV: // global
           I64[Sp] = block_cc2Z1_info;
           R1 = I64[R1 + 7];
           call stg_traceEvent#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc2YV_info" {
     block_cc2YV_info:
         const _cc2YV;
         const 0;
         const 30;
 },
 _cc2Z1() //  []
         { []
         }
     {offset
       cc2Z1: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc2Z1_info" {
     block_cc2Z1_info:
         const _cc2Z1;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:57.272059731 UTC

[section ""data" . Debug.Trace.traceEventIO1_closure" {
     Debug.Trace.traceEventIO1_closure:
         const Debug.Trace.traceEventIO1_info;
         const 0;
 },
 Debug.Trace.traceEventIO1_entry() //  [R2]
         { []
         }
     {offset
       cc2Zs: // global
           R4 = Debug.Trace.traceEventIO2_closure+2;
           R3 = R2;
           R2 = GHC.IO.Encoding.UTF8.utf8_closure;
           call GHC.Foreign.charIsRepresentable3_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Debug.Trace.traceEventIO1_info" {
     Debug.Trace.traceEventIO1_info:
         const Debug.Trace.traceEventIO1_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const Sc2Zv_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:57.275218127 UTC

[section ""data" . Debug.Trace.traceEventIO_closure" {
     Debug.Trace.traceEventIO_closure:
         const Debug.Trace.traceEventIO_info;
         const 0;
 },
 Debug.Trace.traceEventIO_entry() //  [R2]
         { []
         }
     {offset
       cc2ZE: // global
           R2 = R2;
           call Debug.Trace.traceEventIO1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Debug.Trace.traceEventIO_info" {
     Debug.Trace.traceEventIO_info:
         const Debug.Trace.traceEventIO_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const Sc2Zv_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:57.279060862 UTC

[section ""data" . Debug.Trace.traceMarkerIO2_closure" {
     Debug.Trace.traceMarkerIO2_closure:
         const Debug.Trace.traceMarkerIO2_info;
 },
 Debug.Trace.traceMarkerIO2_entry() //  [R2]
         { []
         }
     {offset
       cc2ZS: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cc2ZW; else goto cc2ZX;
       cc2ZW: // global
           R2 = R2;
           R1 = Debug.Trace.traceMarkerIO2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc2ZX: // global
           I64[Sp - 8] = block_cc2ZP_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uc301; else goto cc2ZQ;
       uc301: // global
           call _cc2ZP(R1) args: 0, res: 0, upd: 0;
       cc2ZQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Debug.Trace.traceMarkerIO2_info" {
     Debug.Trace.traceMarkerIO2_info:
         const Debug.Trace.traceMarkerIO2_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _cc2ZP() //  [R1]
         { []
         }
     {offset
       cc2ZP: // global
           I64[Sp] = block_cc2ZV_info;
           R1 = I64[R1 + 7];
           call stg_traceMarker#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc2ZP_info" {
     block_cc2ZP_info:
         const _cc2ZP;
         const 0;
         const 30;
 },
 _cc2ZV() //  []
         { []
         }
     {offset
       cc2ZV: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc2ZV_info" {
     block_cc2ZV_info:
         const _cc2ZV;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:57.285132767 UTC

[section ""data" . Debug.Trace.traceMarkerIO1_closure" {
     Debug.Trace.traceMarkerIO1_closure:
         const Debug.Trace.traceMarkerIO1_info;
         const 0;
 },
 Debug.Trace.traceMarkerIO1_entry() //  [R2]
         { []
         }
     {offset
       cc30m: // global
           R4 = Debug.Trace.traceMarkerIO2_closure+2;
           R3 = R2;
           R2 = GHC.IO.Encoding.UTF8.utf8_closure;
           call GHC.Foreign.charIsRepresentable3_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Debug.Trace.traceMarkerIO1_info" {
     Debug.Trace.traceMarkerIO1_info:
         const Debug.Trace.traceMarkerIO1_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const Sc2Zv_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:57.288388966 UTC

[section ""data" . Debug.Trace.traceMarkerIO_closure" {
     Debug.Trace.traceMarkerIO_closure:
         const Debug.Trace.traceMarkerIO_info;
         const 0;
 },
 Debug.Trace.traceMarkerIO_entry() //  [R2]
         { []
         }
     {offset
       cc30x: // global
           R2 = R2;
           call Debug.Trace.traceMarkerIO1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Debug.Trace.traceMarkerIO_info" {
     Debug.Trace.traceMarkerIO_info:
         const Debug.Trace.traceMarkerIO_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const Sc2Zv_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:57.291612296 UTC

[section ""cstring" . Debug.Trace.$trModule4_bytes" {
     Debug.Trace.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:57.293147135 UTC

[section ""data" . Debug.Trace.$trModule3_closure" {
     Debug.Trace.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const Debug.Trace.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:57.295395802 UTC

[section ""cstring" . Debug.Trace.$trModule2_bytes" {
     Debug.Trace.$trModule2_bytes:
         I8[] [68,101,98,117,103,46,84,114,97,99,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:57.296972341 UTC

[section ""data" . Debug.Trace.$trModule1_closure" {
     Debug.Trace.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const Debug.Trace.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:57.298675651 UTC

[section ""data" . Debug.Trace.$trModule_closure" {
     Debug.Trace.$trModule_closure:
         const GHC.Types.Module_con_info;
         const Debug.Trace.$trModule3_closure+1;
         const Debug.Trace.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:57.301096735 UTC

[section ""data" . Debug.Trace.traceMarker_closure" {
     Debug.Trace.traceMarker_closure:
         const Debug.Trace.traceMarker_info;
         const 0;
 },
 Debug.Trace.traceMarker_entry() //  [R2, R3]
         { []
         }
     {offset
       cc30S: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc30T; else goto cc30U;
       cc30T: // global
           R3 = R3;
           R2 = R2;
           R1 = Debug.Trace.traceMarker_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc30U: // global
           I64[Sp - 16] = block_cc30N_info;
           R4 = Debug.Trace.traceMarkerIO2_closure+2;
           _sc2Wy::P64 = R3;
           R3 = R2;
           R2 = GHC.IO.Encoding.UTF8.utf8_closure;
           P64[Sp - 8] = _sc2Wy::P64;
           Sp = Sp - 16;
           call GHC.Foreign.charIsRepresentable3_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Debug.Trace.traceMarker_info" {
     Debug.Trace.traceMarker_info:
         const Debug.Trace.traceMarker_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const Sc2Zv_srt;
 },
 _cc30N() //  []
         { []
         }
     {offset
       cc30N: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc30N_info" {
     block_cc30N_info:
         const _cc30N;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:57.306770276 UTC

[section ""data" . Debug.Trace.traceEvent_closure" {
     Debug.Trace.traceEvent_closure:
         const Debug.Trace.traceEvent_info;
         const 0;
 },
 Debug.Trace.traceEvent_entry() //  [R2, R3]
         { []
         }
     {offset
       cc31f: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc31g; else goto cc31h;
       cc31g: // global
           R3 = R3;
           R2 = R2;
           R1 = Debug.Trace.traceEvent_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc31h: // global
           I64[Sp - 16] = block_cc31a_info;
           R4 = Debug.Trace.traceEventIO2_closure+2;
           _sc2WG::P64 = R3;
           R3 = R2;
           R2 = GHC.IO.Encoding.UTF8.utf8_closure;
           P64[Sp - 8] = _sc2WG::P64;
           Sp = Sp - 16;
           call GHC.Foreign.charIsRepresentable3_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Debug.Trace.traceEvent_info" {
     Debug.Trace.traceEvent_info:
         const Debug.Trace.traceEvent_entry;
         const 0;
         const 73014444046;
         const 8589934607;
         const Sc2Zv_srt;
 },
 _cc31a() //  []
         { []
         }
     {offset
       cc31a: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc31a_info" {
     block_cc31a_info:
         const _cc31a;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:57.311302142 UTC

[section ""cstring" . Debug.Trace.putTraceMsg5_bytes" {
     Debug.Trace.putTraceMsg5_bytes:
         I8[] [37,115,10]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:57.313384172 UTC

[section ""data" . Debug.Trace.putTraceMsg4_closure" {
     Debug.Trace.putTraceMsg4_closure:
         const Debug.Trace.putTraceMsg4_info;
         const 0;
         const 0;
         const 0;
 },
 Debug.Trace.putTraceMsg4_entry() //  [R1]
         { []
         }
     {offset
       cc31A: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc31B; else goto cc31C;
       cc31B: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc31C: // global
           (_cc31x::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cc31x::I64 == 0) goto cc31z; else goto cc31y;
       cc31z: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cc31y: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cc31x::I64;
           R2 = Debug.Trace.putTraceMsg5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Debug.Trace.putTraceMsg4_info" {
     Debug.Trace.putTraceMsg4_info:
         const Debug.Trace.putTraceMsg4_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:57.316728647 UTC

[section ""cstring" . Debug.Trace.putTraceMsg3_bytes" {
     Debug.Trace.putTraceMsg3_bytes:
         I8[] [87,65,82,78,73,78,71,58,32,112,114,101,118,105,111,117,115,32,116,114,97,99,101,32,109,101,115,115,97,103,101,32,104,97,100,32,110,117,108,108,32,98,121,116,101,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:57.318917785 UTC

[section ""data" . Debug.Trace.putTraceMsg2_closure" {
     Debug.Trace.putTraceMsg2_closure:
         const Debug.Trace.putTraceMsg2_info;
         const 0;
         const 0;
         const 0;
 },
 Debug.Trace.putTraceMsg2_entry() //  [R1]
         { []
         }
     {offset
       cc31S: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc31T; else goto cc31U;
       cc31T: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc31U: // global
           (_cc31P::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cc31P::I64 == 0) goto cc31R; else goto cc31Q;
       cc31R: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cc31Q: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cc31P::I64;
           R2 = Debug.Trace.putTraceMsg3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . Debug.Trace.putTraceMsg2_info" {
     Debug.Trace.putTraceMsg2_info:
         const Debug.Trace.putTraceMsg2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:57.324656704 UTC

[section ""data" . Debug.Trace.$wgo_closure" {
     Debug.Trace.$wgo_closure:
         const Debug.Trace.$wgo_info;
 },
 w2_sc2WT_entry() //  [R1]
         { []
         }
     {offset
       cc32p: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cc32q; else goto cc32r;
       cc32q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc32r: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cc32m_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call Debug.Trace.$wgo_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . w2_sc2WT_info" {
     w2_sc2WT_info:
         const w2_sc2WT_entry;
         const 1;
         const 16;
 },
 _cc32m() //  [R1, R2]
         { []
         }
     {offset
       cc32m: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cc32u; else goto cc32t;
       cc32u: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cc32t: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cc32m_info" {
     block_cc32m_info:
         const _cc32m;
         const 0;
         const 30;
 },
 Debug.Trace.$wgo_entry() //  [R2]
         { []
         }
     {offset
       cc32z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc32A; else goto cc32B;
       cc32A: // global
           R2 = R2;
           R1 = Debug.Trace.$wgo_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc32B: // global
           I64[Sp - 8] = block_cc327_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uc32V; else goto cc328;
       uc32V: // global
           call _cc327(R1) args: 0, res: 0, upd: 0;
       cc328: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Debug.Trace.$wgo_info" {
     Debug.Trace.$wgo_info:
         const Debug.Trace.$wgo_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cc327() //  [R1]
         { []
         }
     {offset
       cc327: // global
           if (R1 & 7 == 1) goto cc32w; else goto cc32x;
       cc32w: // global
           R2 = GHC.Types.[]_closure+1;
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       cc32x: // global
           I64[Sp - 8] = block_cc32d_info;
           _sc2WQ::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _sc2WQ::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uc32U; else goto cc32e;
       uc32U: // global
           call _cc32d(R1) args: 0, res: 0, upd: 0;
       cc32e: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc327_info" {
     block_cc327_info:
         const _cc327;
         const 0;
         const 30;
 },
 _cc32d() //  [R1]
         { []
         }
     {offset
       cc32d: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cc32H; else goto cc32G;
       cc32H: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc32G: // global
           _sc2WS::I64 = I64[R1 + 7];
           I64[Hp - 88] = w2_sc2WT_info;
           P64[Hp - 72] = P64[Sp + 8];
           _cc32i::P64 = Hp - 88;
           if (_sc2WS::I64 == 0) goto cc32T; else goto cc32O;
       cc32T: // global
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _cc32i::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _cc32i::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 40;
           R2 = Hp - 64;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       cc32O: // global
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _cc32i::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = R1;
           P64[Hp - 24] = Hp - 64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _cc32i::P64;
           R2 = Hp - 38;
           R1 = Hp - 16;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc32d_info" {
     block_cc32d_info:
         const _cc32d;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:57.341036559 UTC

[section ""data" . Debug.Trace.putTraceMsg1_closure" {
     Debug.Trace.putTraceMsg1_closure:
         const Debug.Trace.putTraceMsg1_info;
         const 0;
 },
 ds_sc2Xl_entry() //  [R1]
         { []
         }
     {offset
       cc33Q: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cc33R; else goto cc33S;
       cc33R: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc33S: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cc33N_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call Debug.Trace.$wgo_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds_sc2Xl_info" {
     ds_sc2Xl_info:
         const ds_sc2Xl_entry;
         const 1;
         const 16;
 },
 _cc33N() //  [R1, R2]
         { []
         }
     {offset
       cc33N: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cc33V; else goto cc33U;
       cc33V: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cc33U: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cc33N_info" {
     block_cc33N_info:
         const _cc33N;
         const 0;
         const 30;
 },
 sat_sc2XH_entry() //  [R1, R2]
         { []
         }
     {offset
       cc34c: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc34g; else goto cc34h;
       cc34g: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc34h: // global
           I64[Sp - 16] = block_cc349_info;
           R1 = P64[R1 + 6];
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uc34s; else goto cc34a;
       uc34s: // global
           call _cc349(R1) args: 0, res: 0, upd: 0;
       cc34a: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc2XH_info" {
     sat_sc2XH_info:
         const sat_sc2XH_entry;
         const 1;
         const 9;
         const 8589934597;
 },
 _cc349() //  [R1]
         { []
         }
     {offset
       cc349: // global
           I64[Sp] = block_cc34f_info;
           _sc2XB::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _sc2XB::I64;
           if (R1 & 7 != 0) goto uc34r; else goto cc34j;
       uc34r: // global
           call _cc34f(R1) args: 0, res: 0, upd: 0;
       cc34j: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc349_info" {
     block_cc349_info:
         const _cc349;
         const 1;
         const 30;
 },
 _cc34f() //  [R1]
         { []
         }
     {offset
       cc34f: // global
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] debugBelch2(I64[Sp + 8], I64[R1 + 7]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc34f_info" {
     block_cc34f_info:
         const _cc34f;
         const 65;
         const 30;
 },
 sat_sc2Y3_entry() //  [R1, R2]
         { []
         }
     {offset
       cc34Q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc34U; else goto cc34V;
       cc34U: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc34V: // global
           I64[Sp - 16] = block_cc34N_info;
           R1 = P64[R1 + 6];
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uc356; else goto cc34O;
       uc356: // global
           call _cc34N(R1) args: 0, res: 0, upd: 0;
       cc34O: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc2Y3_info" {
     sat_sc2Y3_info:
         const sat_sc2Y3_entry;
         const 1;
         const 9;
         const 8589934597;
 },
 _cc34N() //  [R1]
         { []
         }
     {offset
       cc34N: // global
           I64[Sp] = block_cc34T_info;
           _sc2XX::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _sc2XX::I64;
           if (R1 & 7 != 0) goto uc355; else goto cc34X;
       uc355: // global
           call _cc34T(R1) args: 0, res: 0, upd: 0;
       cc34X: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc34N_info" {
     block_cc34N_info:
         const _cc34N;
         const 1;
         const 30;
 },
 _cc34T() //  [R1]
         { []
         }
     {offset
       cc34T: // global
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] debugBelch2(I64[Sp + 8], I64[R1 + 7]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc34T_info" {
     block_cc34T_info:
         const _cc34T;
         const 65;
         const 30;
 },
 sat_sc2Y4_entry() //  [R1, R2]
         { []
         }
     {offset
       cc357: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cc358; else goto cc359;
       cc358: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc359: // global
           I64[Sp - 32] = block_cc342_info;
           _sc2Xl::P64 = P64[R1 + 6];
           _sc2Xp::P64 = P64[R1 + 14];
           R1 = GHC.IO.Encoding.getForeignEncoding_closure;
           P64[Sp - 24] = _sc2Xl::P64;
           P64[Sp - 16] = _sc2Xp::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 32;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc2Y4_info" {
     sat_sc2Y4_info:
         const sat_sc2Y4_entry;
         const 2;
         const 12884901899;
         const 8589934597;
         const Sc2Zv_srt+40;
 },
 _cc342() //  [R1]
         { []
         }
     {offset
       cc342: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cc35c; else goto cc35b;
       cc35c: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc35b: // global
           I64[Hp - 8] = sat_sc2XH_info;
           P64[Hp] = P64[Sp + 24];
           I64[Sp] = block_cc34t_info;
           R4 = Hp - 6;
           R3 = P64[Sp + 16];
           R2 = R1;
           call GHC.Foreign.charIsRepresentable3_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc342_info" {
     block_cc342_info:
         const _cc342;
         const 3;
         const 12884901918;
         const Sc2Zv_srt+40;
 },
 _cc34t() //  []
         { []
         }
     {offset
       cc34t: // global
           I64[Sp + 16] = block_cc34v_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto uc35p; else goto cc34w;
       uc35p: // global
           call _cc34v(R1) args: 0, res: 0, upd: 0;
       cc34w: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc34t_info" {
     block_cc34t_info:
         const _cc34t;
         const 131;
         const 12884901918;
         const Sc2Zv_srt+40;
 },
 _cc34v() //  [R1]
         { []
         }
     {offset
       cc34v: // global
           I64[Sp] = block_cc34A_info;
           R1 = P64[R1 + 7];
           if (R1 & 7 != 0) goto uc35q; else goto cc34B;
       uc35q: // global
           call _cc34A(R1) args: 0, res: 0, upd: 0;
       cc34B: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc34v_info" {
     block_cc34v_info:
         const _cc34v;
         const 1;
         const 12884901918;
         const Sc2Zv_srt+40;
 },
 _cc34A() //  [R1]
         { []
         }
     {offset
       cc34A: // global
           if (R1 & 7 == 1) goto cc35i; else goto cc35k;
       cc35i: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cc35k: // global
           I64[Sp] = block_cc34G_info;
           R1 = GHC.IO.Encoding.getForeignEncoding_closure;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc34A_info" {
     block_cc34A_info:
         const _cc34A;
         const 1;
         const 12884901918;
         const Sc2Zv_srt+40;
 },
 _cc34G() //  [R1]
         { []
         }
     {offset
       cc34G: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cc35n; else goto cc35m;
       cc35n: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc35m: // global
           I64[Hp - 8] = sat_sc2Y3_info;
           P64[Hp] = P64[Sp + 8];
           R4 = Hp - 6;
           R3 = Debug.Trace.putTraceMsg2_closure;
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Foreign.charIsRepresentable3_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc34G_info" {
     block_cc34G_info:
         const _cc34G;
         const 1;
         const 4294967326;
         const Sc2Zv_srt+48;
 },
 Debug.Trace.putTraceMsg1_entry() //  [R2]
         { []
         }
     {offset
       cc35r: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc35s; else goto cc35t;
       cc35s: // global
           R2 = R2;
           R1 = Debug.Trace.putTraceMsg1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cc35t: // global
           I64[Sp - 16] = block_cc33H_info;
           R1 = GHC.IO.Encoding.getForeignEncoding_closure;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Debug.Trace.putTraceMsg1_info" {
     Debug.Trace.putTraceMsg1_info:
         const Debug.Trace.putTraceMsg1_entry;
         const 0;
         const 64424509454;
         const 8589934597;
         const Sc2Zv_srt+40;
 },
 _cc33H() //  [R1]
         { []
         }
     {offset
       cc33H: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cc35w; else goto cc35v;
       cc35w: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc35v: // global
           I64[Hp - 64] = ds_sc2Xl_info;
           P64[Hp - 48] = P64[Sp + 8];
           I64[Hp - 40] = stg_sel_1_upd_info;
           _cc33J::P64 = Hp - 64;
           P64[Hp - 24] = _cc33J::P64;
           I64[Hp - 16] = sat_sc2Y4_info;
           P64[Hp - 8] = _cc33J::P64;
           P64[Hp] = Hp - 40;
           R4 = Hp - 14;
           R3 = Debug.Trace.putTraceMsg4_closure;
           R2 = R1;
           Sp = Sp + 16;
           call GHC.Foreign.charIsRepresentable3_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc33H_info" {
     block_cc33H_info:
         const _cc33H;
         const 1;
         const 47244640286;
         const Sc2Zv_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:57.369114694 UTC

[section ""data" . Debug.Trace.traceIO_closure" {
     Debug.Trace.traceIO_closure:
         const Debug.Trace.traceIO_info;
         const 0;
 },
 Debug.Trace.traceIO_entry() //  [R2]
         { []
         }
     {offset
       cc374: // global
           R2 = R2;
           call Debug.Trace.putTraceMsg1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Debug.Trace.traceIO_info" {
     Debug.Trace.traceIO_info:
         const Debug.Trace.traceIO_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const Sc2Zv_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:57.372582734 UTC

[section ""data" . Debug.Trace.putTraceMsg_closure" {
     Debug.Trace.putTraceMsg_closure:
         const Debug.Trace.putTraceMsg_info;
         const 0;
 },
 Debug.Trace.putTraceMsg_entry() //  [R2]
         { []
         }
     {offset
       cc37f: // global
           R2 = R2;
           call Debug.Trace.putTraceMsg1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Debug.Trace.putTraceMsg_info" {
     Debug.Trace.putTraceMsg_info:
         const Debug.Trace.putTraceMsg_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const Sc2Zv_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:57.376188926 UTC

[section ""data" . Debug.Trace.trace_closure" {
     Debug.Trace.trace_closure:
         const Debug.Trace.trace_info;
         const 0;
 },
 Debug.Trace.trace_entry() //  [R2, R3]
         { []
         }
     {offset
       cc37x: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cc37y; else goto cc37z;
       cc37y: // global
           R3 = R3;
           R2 = R2;
           R1 = Debug.Trace.trace_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc37z: // global
           I64[Sp - 24] = block_cc37q_info;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Debug.Trace.trace_info" {
     Debug.Trace.trace_info:
         const Debug.Trace.trace_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const Sc2Zv_srt+56;
 },
 _cc37q() //  []
         { []
         }
     {offset
       cc37q: // global
           _sc2Y5::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cc37s_info;
           R2 = _sc2Y5::P64;
           Sp = Sp + 8;
           call Debug.Trace.putTraceMsg1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc37q_info" {
     block_cc37q_info:
         const _cc37q;
         const 2;
         const 4294967326;
         const Sc2Zv_srt+56;
 },
 _cc37s() //  []
         { []
         }
     {offset
       cc37s: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cc37s_info" {
     block_cc37s_info:
         const _cc37s;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:57.382390441 UTC

[section ""data" . Debug.Trace.traceId_closure" {
     Debug.Trace.traceId_closure:
         const Debug.Trace.traceId_info;
         const 0;
 },
 Debug.Trace.traceId_entry() //  [R2]
         { []
         }
     {offset
       cc37U: // global
           R3 = R2;
           R2 = R2;
           call Debug.Trace.trace_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Debug.Trace.traceId_info" {
     Debug.Trace.traceId_info:
         const Debug.Trace.traceId_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const Sc2Zv_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:57.386289821 UTC

[section ""data" . Debug.Trace.traceShow_closure" {
     Debug.Trace.traceShow_closure:
         const Debug.Trace.traceShow_info;
         const 0;
 },
 sat_sc2Yh_entry() //  [R1]
         { []
         }
     {offset
       cc389: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cc38a; else goto cc38b;
       cc38a: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc38b: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Show.show_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc2Yh_info" {
     sat_sc2Yh_info:
         const sat_sc2Yh_entry;
         const 2;
         const 18;
 },
 Debug.Trace.traceShow_entry() //  [R2, R3]
         { []
         }
     {offset
       cc38c: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cc38g; else goto cc38f;
       cc38g: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Debug.Trace.traceShow_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc38f: // global
           I64[Hp - 24] = sat_sc2Yh_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R2 = Hp - 24;
           R1 = Debug.Trace.trace_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Debug.Trace.traceShow_info" {
     Debug.Trace.traceShow_info:
         const Debug.Trace.traceShow_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const Sc2Zv_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:57.392453983 UTC

[section ""data" . Debug.Trace.traceShowId_closure" {
     Debug.Trace.traceShowId_closure:
         const Debug.Trace.traceShowId_info;
         const 0;
 },
 sat_sc2Yk_entry() //  [R1]
         { []
         }
     {offset
       cc38B: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc38C; else goto cc38D;
       cc38C: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc38D: // global
           R2 = P64[R1 + 16];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[R1 + 24];
           Sp = Sp - 16;
           call GHC.Show.show_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc2Yk_info" {
     sat_sc2Yk_info:
         const sat_sc2Yk_entry;
         const 2;
         const 18;
 },
 Debug.Trace.traceShowId_entry() //  [R2, R3]
         { []
         }
     {offset
       cc38E: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cc38I; else goto cc38H;
       cc38I: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = Debug.Trace.traceShowId_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc38H: // global
           I64[Hp - 24] = sat_sc2Yk_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R3 = R3;
           R2 = Hp - 24;
           call Debug.Trace.trace_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Debug.Trace.traceShowId_info" {
     Debug.Trace.traceShowId_info:
         const Debug.Trace.traceShowId_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const Sc2Zv_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:57.397987404 UTC

[section ""data" . Debug.Trace.traceM_closure" {
     Debug.Trace.traceM_closure:
         const Debug.Trace.traceM_info;
         const 0;
 },
 sat_sc2Yn_entry() //  [R1]
         { []
         }
     {offset
       cc392: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cc393; else goto cc394;
       cc393: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc394: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Tuple.()_closure+1;
           Sp = Sp - 32;
           call GHC.Base.pure_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc2Yn_info" {
     sat_sc2Yn_info:
         const sat_sc2Yn_entry;
         const 1;
         const 16;
 },
 Debug.Trace.traceM_entry() //  [R2, R3]
         { []
         }
     {offset
       cc395: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cc399; else goto cc398;
       cc399: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = Debug.Trace.traceM_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc398: // global
           I64[Hp - 16] = sat_sc2Yn_info;
           P64[Hp] = R2;
           _sc2Ym::P64 = R3;
           R3 = Hp - 16;
           R2 = _sc2Ym::P64;
           call Debug.Trace.trace_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Debug.Trace.traceM_info" {
     Debug.Trace.traceM_info:
         const Debug.Trace.traceM_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const Sc2Zv_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:57.404554516 UTC

[section ""data" . Debug.Trace.traceShowM_closure" {
     Debug.Trace.traceShowM_closure:
         const Debug.Trace.traceShowM_info;
         const 0;
 },
 sat_sc2Ys_entry() //  [R1]
         { []
         }
     {offset
       cc39v: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cc39w; else goto cc39x;
       cc39w: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc39x: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = GHC.Tuple.()_closure+1;
           Sp = Sp - 32;
           call GHC.Base.pure_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc2Ys_info" {
     sat_sc2Ys_info:
         const sat_sc2Ys_entry;
         const 1;
         const 16;
 },
 sat_sc2Yr_entry() //  [R1]
         { []
         }
     {offset
       cc39C: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cc39D; else goto cc39E;
       cc39D: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc39E: // global
           R2 = P64[R1 + 16];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[R1 + 24];
           Sp = Sp - 16;
           call GHC.Show.show_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc2Yr_info" {
     sat_sc2Yr_info:
         const sat_sc2Yr_entry;
         const 2;
         const 18;
 },
 Debug.Trace.traceShowM_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cc39F: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cc39J; else goto cc39I;
       cc39J: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = Debug.Trace.traceShowM_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cc39I: // global
           I64[Hp - 48] = sat_sc2Ys_info;
           P64[Hp - 32] = R3;
           I64[Hp - 24] = sat_sc2Yr_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R4;
           R3 = Hp - 48;
           R2 = Hp - 24;
           call Debug.Trace.trace_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . Debug.Trace.traceShowM_info" {
     Debug.Trace.traceShowM_info:
         const Debug.Trace.traceShowM_entry;
         const 0;
         const 73014444046;
         const 12884901911;
         const Sc2Zv_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:57.414274699 UTC

[section ""data" . Debug.Trace.traceStack_closure" {
     Debug.Trace.traceStack_closure:
         const Debug.Trace.traceStack_info;
         const 0;
 },
 sat_sc2YJ_entry() //  [R1]
         { []
         }
     {offset
       cc3au: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cc3av; else goto cc3aw;
       cc3av: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc3aw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cc3as_info;
           R3 = GHC.Types.[]_closure+1;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.List.reverse1_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sc2YJ_info" {
     sat_sc2YJ_info:
         const sat_sc2YJ_entry;
         const 1;
         const 4294967312;
         const Sc2Zv_srt+112;
 },
 _cc3as() //  [R1]
         { []
         }
     {offset
       cc3as: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Stack.CCS.renderStack_go_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cc3as_info" {
     block_cc3as_info:
         const _cc3as;
         const 0;
         const 4294967326;
         const Sc2Zv_srt+112;
 },
 sat_sc2YK_entry() //  [R1]
         { []
         }
     {offset
       cc3aA: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cc3aE; else goto cc3aD;
       cc3aE: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cc3aD: // global
           _sc2YF::P64 = P64[R1 + 16];
           I64[Hp - 16] = sat_sc2YJ_info;
           P64[Hp] = _sc2YF::P64;
           R3 = Hp - 16;
           R2 = GHC.Stack.CCS.renderStack1_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sc2YK_info" {
     sat_sc2YK_info:
         const sat_sc2YK_entry;
         const 1;
         const 4294967312;
         const Sc2Zv_srt+112;
 },
 Debug.Trace.traceStack_entry() //  [R2, R3]
         { []
         }
     {offset
       cc3aM: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cc3aN; else goto cc3aO;
       cc3aN: // global
           R3 = R3;
           R2 = R2;
           R1 = Debug.Trace.traceStack_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cc3aO: // global
           I64[Sp - 24] = block_cc3a8_info;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . Debug.Trace.traceStack_info" {
     Debug.Trace.traceStack_info:
         const Debug.Trace.traceStack_entry;
         const 0;
         const 3852585664526;
         const 8589934607;
         const Sc2Zv_srt+56;
 },
 _cc3a8() //  []
         { []
         }
     {offset
       cc3a8: // global
           _sc2Yt::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cc3aa_info;
           R2 = _sc2Yt::P64;
           Sp = Sp + 8;
           call Debug.Trace.putTraceMsg1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc3a8_info" {
     block_cc3a8_info:
         const _cc3a8;
         const 2;
         const 1653562408990;
         const Sc2Zv_srt+56;
 },
 _cc3aa() //  []
         { []
         }
     {offset
       cc3aa: // global
           I64[Sp] = block_cc3ac_info;
           R3 = GHC.Types.[]_closure+1;
           R2 = CCCS;
           call GHC.Stack.CCS.$wgo_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc3aa_info" {
     block_cc3aa_info:
         const _cc3aa;
         const 1;
         const 1653562408990;
         const Sc2Zv_srt+56;
 },
 _cc3ac() //  [R1]
         { []
         }
     {offset
       cc3ac: // global
           I64[Sp] = block_cc3ae_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uc3b3; else goto cc3af;
       uc3b3: // global
           call _cc3ae(R1) args: 0, res: 0, upd: 0;
       cc3af: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc3ac_info" {
     block_cc3ac_info:
         const _cc3ac;
         const 1;
         const 554050781214;
         const Sc2Zv_srt+56;
 },
 _cc3ae() //  [R1]
         { []
         }
     {offset
       cc3ae: // global
           if (R1 & 7 == 1) goto cc3aG; else goto cc3aH;
       cc3aG: // global
           P64[Sp + 8] = P64[Sp + 8];
           Sp = Sp + 8;
           call _cc3aF() args: 0, res: 0, upd: 0;
       cc3aH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cc3aX; else goto cc3aW;
       cc3aX: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cc3aW: // global
           I64[Hp - 16] = sat_sc2YK_info;
           P64[Hp] = R1;
           I64[Sp] = block_cc3aU_info;
           R2 = Hp - 16;
           call Debug.Trace.putTraceMsg1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cc3ae_info" {
     block_cc3ae_info:
         const _cc3ae;
         const 1;
         const 554050781214;
         const Sc2Zv_srt+56;
 },
 _cc3aU() //  []
         { []
         }
     {offset
       cc3aU: // global
           P64[Sp + 8] = P64[Sp + 8];
           Sp = Sp + 8;
           call _cc3aF() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cc3aU_info" {
     block_cc3aU_info:
         const _cc3aU;
         const 1;
         const 30;
 },
 _cc3aF() //  []
         { []
         }
     {offset
       cc3aF: // global
           R1 = P64[Sp];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:57.43000806 UTC

[section ""relreadonly" . Sc2Zv_srt" {
     Sc2Zv_srt:
         const GHC.IO.Encoding.UTF8.utf8_closure;
         const Debug.Trace.traceEventIO1_closure;
         const Debug.Trace.traceMarkerIO1_closure;
         const Debug.Trace.traceMarker_closure;
         const Debug.Trace.traceEvent_closure;
         const GHC.IO.Encoding.getForeignEncoding_closure;
         const Debug.Trace.putTraceMsg2_closure;
         const Debug.Trace.putTraceMsg1_closure;
         const Debug.Trace.putTraceMsg4_closure;
         const Debug.Trace.trace_closure;
         const Debug.Trace.traceShow_closure;
         const Debug.Trace.traceShowId_closure;
         const Debug.Trace.traceM_closure;
         const Debug.Trace.traceShowM_closure;
         const GHC.Stack.CCS.renderStack_go_closure;
         const GHC.Stack.CCS.$wgo_closure;
         const Debug.Trace.traceStack_closure;
 }]

