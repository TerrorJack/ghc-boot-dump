
==================== Pre unarise: ====================
2018-03-16 16:06:56.371392485 UTC

Debug.Trace.traceEventIO2
  :: GHC.Ptr.Ptr Foreign.C.Types.CChar
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_sc2ti eta_sc2tj]
        case ds_sc2ti of {
          GHC.Ptr.Ptr p_sc2tl [Occ=Once] ->
              case traceEvent# [p_sc2tl eta_sc2tj] of s'_sc2tm {
                __DEFAULT -> (#,#) [s'_sc2tm GHC.Tuple.()];
              };
        };

Debug.Trace.traceEventIO1
  :: GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [msg_sc2tn eta_sc2to]
        GHC.Foreign.charIsRepresentable3
            GHC.IO.Encoding.UTF8.utf8
            msg_sc2tn
            Debug.Trace.traceEventIO2
            eta_sc2to;

Debug.Trace.traceEventIO :: GHC.Base.String -> GHC.Types.IO ()
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] Debug.Trace.traceEventIO1 eta_B2 eta_B1;

Debug.Trace.traceMarkerIO2
  :: GHC.Ptr.Ptr Foreign.C.Types.CChar
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_sc2tp eta_sc2tq]
        case ds_sc2tp of {
          GHC.Ptr.Ptr p_sc2ts [Occ=Once] ->
              case traceMarker# [p_sc2ts eta_sc2tq] of s'_sc2tt {
                __DEFAULT -> (#,#) [s'_sc2tt GHC.Tuple.()];
              };
        };

Debug.Trace.traceMarkerIO1
  :: GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [msg_sc2tu eta_sc2tv]
        GHC.Foreign.charIsRepresentable3
            GHC.IO.Encoding.UTF8.utf8
            msg_sc2tu
            Debug.Trace.traceMarkerIO2
            eta_sc2tv;

Debug.Trace.traceMarkerIO :: GHC.Base.String -> GHC.Types.IO ()
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] Debug.Trace.traceMarkerIO1 eta_B2 eta_B1;

Debug.Trace.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Debug.Trace.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Debug.Trace.$trModule4];

Debug.Trace.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Debug.Trace"#;

Debug.Trace.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Debug.Trace.$trModule2];

Debug.Trace.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Debug.Trace.$trModule3
                                     Debug.Trace.$trModule1];

Debug.Trace.traceMarker [InlPrag=NOINLINE]
  :: forall a. GHC.Base.String -> a -> a
[GblId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [msg_sc2tw expr_sc2tx]
        case
            case
                GHC.Foreign.charIsRepresentable3
                    GHC.IO.Encoding.UTF8.utf8
                    msg_sc2tw
                    Debug.Trace.traceMarkerIO2
                    GHC.Prim.realWorld#
            of
            { (#,#) ipv_sc2tz [Occ=Once] _ [Occ=Dead] ->
                  (#,#) [ipv_sc2tz expr_sc2tx];
            }
        of
        { (#,#) _ [Occ=Dead] ipv1_sc2tD [Occ=Once] -> ipv1_sc2tD;
        };

Debug.Trace.traceEvent [InlPrag=NOINLINE]
  :: forall a. GHC.Base.String -> a -> a
[GblId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [msg_sc2tE expr_sc2tF]
        case
            case
                GHC.Foreign.charIsRepresentable3
                    GHC.IO.Encoding.UTF8.utf8
                    msg_sc2tE
                    Debug.Trace.traceEventIO2
                    GHC.Prim.realWorld#
            of
            { (#,#) ipv_sc2tH [Occ=Once] _ [Occ=Dead] ->
                  (#,#) [ipv_sc2tH expr_sc2tF];
            }
        of
        { (#,#) _ [Occ=Dead] ipv1_sc2tL [Occ=Once] -> ipv1_sc2tL;
        };

Debug.Trace.putTraceMsg5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "%s\n"#;

Debug.Trace.putTraceMsg4 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Debug.Trace.putTraceMsg5;

Debug.Trace.putTraceMsg3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "WARNING: previous trace message had null bytes"#;

Debug.Trace.putTraceMsg2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Debug.Trace.putTraceMsg3;

Debug.Trace.$wgo [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: [GHC.Types.Char] -> (# [GHC.Types.Char], [GHC.Types.Char] #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [w_sc2tM]
        case w_sc2tM of {
          [] -> (#,#) [GHC.Types.[] GHC.Types.[]];
          : y_sc2tO [Occ=Once!] ys_sc2tP [Occ=Once] ->
              case y_sc2tO of wild1_sc2tQ {
                GHC.Types.C# x_sc2tR [Occ=Once!] ->
                    let {
                      w2_sc2tS [Dmd=<L,U(1*U,1*U)>]
                        :: ([GHC.Types.Char], [GHC.Types.Char])
                      [LclId] =
                          [ys_sc2tP] \u []
                              case Debug.Trace.$wgo ys_sc2tP of {
                                (#,#) ww1_sc2tU [Occ=Once] ww2_sc2tV [Occ=Once] ->
                                    (,) [ww1_sc2tU ww2_sc2tV];
                              };
                    } in 
                      case x_sc2tR of {
                        __DEFAULT ->
                            let {
                              sat_sc2u4 [Occ=Once] :: [GHC.Types.Char]
                              [LclId] =
                                  [w2_sc2tS] \u []
                                      case w2_sc2tS of {
                                        (,) _ [Occ=Dead] fs_sc2u3 [Occ=Once] -> fs_sc2u3;
                                      }; } in
                            let {
                              sat_sc2u5 [Occ=Once] :: [GHC.Types.Char]
                              [LclId] =
                                  CCCS :! [wild1_sc2tQ sat_sc2u4]; } in
                            let {
                              sat_sc2u0 [Occ=Once] :: [GHC.Types.Char]
                              [LclId] =
                                  [w2_sc2tS] \u []
                                      case w2_sc2tS of {
                                        (,) ts_sc2tY [Occ=Once] _ [Occ=Dead] -> ts_sc2tY;
                                      };
                            } in  (#,#) [sat_sc2u0 sat_sc2u5];
                        '\NUL'# ->
                            let {
                              sat_sc2ue [Occ=Once] :: [GHC.Types.Char]
                              [LclId] =
                                  [w2_sc2tS] \u []
                                      case w2_sc2tS of {
                                        (,) _ [Occ=Dead] fs_sc2ud [Occ=Once] -> fs_sc2ud;
                                      }; } in
                            let {
                              sat_sc2u9 [Occ=Once] :: [GHC.Types.Char]
                              [LclId] =
                                  [w2_sc2tS] \u []
                                      case w2_sc2tS of {
                                        (,) ts_sc2u7 [Occ=Once] _ [Occ=Dead] -> ts_sc2u7;
                                      }; } in
                            let {
                              sat_sc2ua [Occ=Once] :: [GHC.Types.Char]
                              [LclId] =
                                  CCCS :! [wild1_sc2tQ sat_sc2u9];
                            } in  (#,#) [sat_sc2ua sat_sc2ue];
                      };
              };
        };

Debug.Trace.putTraceMsg1
  :: GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<L,1*U><S,U>, Unf=OtherCon []] =
    [] \r [msg_sc2uf s1_sc2ug]
        case GHC.IO.Encoding.getForeignEncoding s1_sc2ug of {
          (#,#) ipv_sc2ui [Occ=Once] ipv1_sc2uj [Occ=Once] ->
              let {
                ds_sc2uk [Dmd=<L,U(U,1*U)>] :: ([GHC.Types.Char], [GHC.Types.Char])
                [LclId] =
                    [msg_sc2uf] \u []
                        case Debug.Trace.$wgo msg_sc2uf of {
                          (#,#) ww1_sc2um [Occ=Once] ww2_sc2un [Occ=Once] ->
                              (,) [ww1_sc2um ww2_sc2un];
                        }; } in
              let {
                lvl_sc2uo [Occ=OnceL] :: GHC.Base.String
                [LclId] =
                    [ds_sc2uk] \u []
                        case ds_sc2uk of {
                          (,) _ [Occ=Dead] msg'_sc2ur [Occ=Once] -> msg'_sc2ur;
                        }; } in
              let {
                sat_sc2v3 [Occ=Once] :: GHC.Foreign.CString -> GHC.Types.IO ()
                [LclId] =
                    [ds_sc2uk lvl_sc2uo] \r [cfmt_sc2us eta_sc2ut]
                        case GHC.IO.Encoding.getForeignEncoding eta_sc2ut of {
                          (#,#) ipv2_sc2uv [Occ=Once] ipv3_sc2uw [Occ=Once] ->
                              let {
                                sat_sc2uG [Occ=Once] :: GHC.Foreign.CString -> GHC.Types.IO ()
                                [LclId] =
                                    [cfmt_sc2us] \r [cmsg_sc2ux eta1_sc2uy]
                                        case cfmt_sc2us of {
                                          GHC.Ptr.Ptr ds4_sc2uA [Occ=Once] ->
                                              case cmsg_sc2ux of {
                                                GHC.Ptr.Ptr ds6_sc2uC [Occ=Once] ->
                                                    case
                                                        __pkg_ccall base-4.11.0.0 [ds4_sc2uA
                                                                                   ds6_sc2uC
                                                                                   eta1_sc2uy]
                                                    of
                                                    { Unit# ds7_sc2uF [Occ=Once] ->
                                                          (#,#) [ds7_sc2uF GHC.Tuple.()];
                                                    };
                                              };
                                        };
                              } in 
                                case
                                    GHC.Foreign.charIsRepresentable3
                                        ipv3_sc2uw lvl_sc2uo sat_sc2uG ipv2_sc2uv
                                of
                                { (#,#) ipv4_sc2uI [Occ=Once*] _ [Occ=Dead] ->
                                      case ds_sc2uk of {
                                        (,) nulls_sc2uL [Occ=Once!] _ [Occ=Dead] ->
                                            case nulls_sc2uL of {
                                              [] -> (#,#) [ipv4_sc2uI GHC.Tuple.()];
                                              : _ [Occ=Dead] _ [Occ=Dead] ->
                                                  case
                                                      GHC.IO.Encoding.getForeignEncoding ipv4_sc2uI
                                                  of
                                                  { (#,#) ipv6_sc2uR [Occ=Once]
                                                          ipv7_sc2uS [Occ=Once] ->
                                                        let {
                                                          sat_sc2v2 [Occ=Once]
                                                            :: GHC.Foreign.CString
                                                               -> GHC.Types.IO ()
                                                          [LclId] =
                                                              [cfmt_sc2us] \r [cmsg_sc2uT
                                                                               eta1_sc2uU]
                                                                  case cfmt_sc2us of {
                                                                    GHC.Ptr.Ptr ds8_sc2uW [Occ=Once] ->
                                                                        case cmsg_sc2uT of {
                                                                          GHC.Ptr.Ptr ds10_sc2uY [Occ=Once] ->
                                                                              case
                                                                                  __pkg_ccall base-4.11.0.0 [ds8_sc2uW
                                                                                                             ds10_sc2uY
                                                                                                             eta1_sc2uU]
                                                                              of
                                                                              { Unit# ds11_sc2v1 [Occ=Once] ->
                                                                                    (#,#) [ds11_sc2v1
                                                                                           GHC.Tuple.()];
                                                                              };
                                                                        };
                                                                  };
                                                        } in 
                                                          GHC.Foreign.charIsRepresentable3
                                                              ipv7_sc2uS
                                                              Debug.Trace.putTraceMsg2
                                                              sat_sc2v2
                                                              ipv6_sc2uR;
                                                  };
                                            };
                                      };
                                };
                        };
              } in 
                GHC.Foreign.charIsRepresentable3
                    ipv1_sc2uj Debug.Trace.putTraceMsg4 sat_sc2v3 ipv_sc2ui;
        };

Debug.Trace.traceIO :: GHC.Base.String -> GHC.Types.IO ()
[GblId, Arity=2, Str=<L,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] Debug.Trace.putTraceMsg1 eta_B2 eta_B1;

Debug.Trace.putTraceMsg :: GHC.Base.String -> GHC.Types.IO ()
[GblId, Arity=2, Str=<L,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] Debug.Trace.putTraceMsg1 eta_B2 eta_B1;

Debug.Trace.trace [InlPrag=NOINLINE]
  :: forall a. GHC.Base.String -> a -> a
[GblId, Arity=2, Str=<L,1*U><L,U>, Unf=OtherCon []] =
    [] \r [string_sc2v4 expr_sc2v5]
        case
            case noDuplicate# [GHC.Prim.realWorld#] of s'_sc2v6 {
              __DEFAULT ->
                  case Debug.Trace.putTraceMsg1 string_sc2v4 s'_sc2v6 of {
                    (#,#) ipv_sc2v8 [Occ=Once] _ [Occ=Dead] ->
                        (#,#) [ipv_sc2v8 expr_sc2v5];
                  };
            }
        of
        { (#,#) _ [Occ=Dead] ipv1_sc2vc [Occ=Once] -> ipv1_sc2vc;
        };

Debug.Trace.traceId :: GHC.Base.String -> GHC.Base.String
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [a_sc2vd] Debug.Trace.trace a_sc2vd a_sc2vd;

Debug.Trace.traceShow :: forall a b. GHC.Show.Show a => a -> b -> b
[GblId, Arity=2, Str=<L,1*U(A,1*C1(U),A)><L,U>, Unf=OtherCon []] =
    [] \r [$dShow_sc2ve eta_sc2vf]
        let {
          sat_sc2vg [Occ=Once] :: GHC.Base.String
          [LclId] =
              [$dShow_sc2ve eta_sc2vf] \u []
                  GHC.Show.show $dShow_sc2ve eta_sc2vf;
        } in  Debug.Trace.trace sat_sc2vg;

Debug.Trace.traceShowId :: forall a. GHC.Show.Show a => a -> a
[GblId, Arity=2, Str=<L,1*U(A,1*C1(U),A)><L,U>, Unf=OtherCon []] =
    [] \r [$dShow_sc2vh a1_sc2vi]
        let {
          sat_sc2vj [Occ=Once, Dmd=<L,1*U>] :: GHC.Base.String
          [LclId] =
              [$dShow_sc2vh a1_sc2vi] \s [] GHC.Show.show $dShow_sc2vh a1_sc2vi;
        } in  Debug.Trace.trace sat_sc2vj a1_sc2vi;

Debug.Trace.traceM
  :: forall (f :: * -> *).
     GHC.Base.Applicative f =>
     GHC.Base.String -> f ()
[GblId,
 Arity=2,
 Str=<L,1*U(A,1*C1(U),A,A,A,A)><L,1*U>,
 Unf=OtherCon []] =
    [] \r [$dApplicative_sc2vk string_sc2vl]
        let {
          sat_sc2vm [Occ=Once] :: f_ac2au ()
          [LclId] =
              [$dApplicative_sc2vk] \u []
                  GHC.Base.pure $dApplicative_sc2vk GHC.Tuple.();
        } in  Debug.Trace.trace string_sc2vl sat_sc2vm;

Debug.Trace.traceShowM
  :: forall a (f :: * -> *).
     (GHC.Show.Show a, GHC.Base.Applicative f) =>
     a -> f ()
[GblId,
 Arity=3,
 Str=<L,1*U(A,1*C1(U),A)><L,1*U(A,1*C1(U),A,A,A,A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sc2vn $dApplicative_sc2vo eta_sc2vp]
        let {
          sat_sc2vr [Occ=Once] :: f_ac2aF ()
          [LclId] =
              [$dApplicative_sc2vo] \u []
                  GHC.Base.pure $dApplicative_sc2vo GHC.Tuple.(); } in
        let {
          sat_sc2vq [Occ=Once, Dmd=<L,1*U>] :: GHC.Base.String
          [LclId] =
              [$dShow_sc2vn eta_sc2vp] \s []
                  GHC.Show.show $dShow_sc2vn eta_sc2vp;
        } in  Debug.Trace.trace sat_sc2vq sat_sc2vr;

Debug.Trace.traceStack :: forall a. GHC.Base.String -> a -> a
[GblId, Arity=2, Str=<L,1*U><L,U>, Unf=OtherCon []] =
    [] \r [str_sc2vs expr_sc2vt]
        case
            case noDuplicate# [GHC.Prim.realWorld#] of s'_sc2vu {
              __DEFAULT ->
                  case Debug.Trace.putTraceMsg1 str_sc2vs s'_sc2vu of {
                    (#,#) ipv_sc2vw [Occ=Once] _ [Occ=Dead] ->
                        case getCurrentCCS# [GHC.Tuple.() ipv_sc2vw] of {
                          (#,#) s'1_sc2vz [Occ=Once] addr_sc2vA [Occ=Once] ->
                              case GHC.Stack.CCS.$wgo addr_sc2vA GHC.Types.[] s'1_sc2vz of {
                                (#,#) ipv2_sc2vC [Occ=Once*] ipv3_sc2vD [Occ=Once!] ->
                                    case ipv3_sc2vD of wild1_sc2vE {
                                      [] -> (#,#) [ipv2_sc2vC expr_sc2vt];
                                      : _ [Occ=Dead] _ [Occ=Dead] ->
                                          let {
                                            sat_sc2vJ [Occ=Once, Dmd=<L,1*U>] :: GHC.Base.String
                                            [LclId] =
                                                [wild1_sc2vE] \s []
                                                    let {
                                                      sat_sc2vI [Occ=Once] :: [GHC.Types.Char]
                                                      [LclId] =
                                                          [wild1_sc2vE] \u []
                                                              case
                                                                  GHC.List.reverse1
                                                                      wild1_sc2vE GHC.Types.[]
                                                              of
                                                              sat_sc2vH
                                                              { __DEFAULT ->
                                                                    GHC.Stack.CCS.renderStack_go
                                                                        sat_sc2vH;
                                                              };
                                                    } in 
                                                      GHC.CString.unpackAppendCString#
                                                          GHC.Stack.CCS.renderStack1 sat_sc2vI;
                                          } in 
                                            case Debug.Trace.putTraceMsg1 sat_sc2vJ ipv2_sc2vC of {
                                              (#,#) ipv4_sc2vL [Occ=Once] _ [Occ=Dead] ->
                                                  (#,#) [ipv4_sc2vL expr_sc2vt];
                                            };
                                    };
                              };
                        };
                  };
            }
        of
        { (#,#) _ [Occ=Dead] ipv1_sc2vP [Occ=Once] -> ipv1_sc2vP;
        };


==================== STG syntax: ====================
2018-03-16 16:06:56.378435161 UTC

Debug.Trace.traceEventIO2
  :: GHC.Ptr.Ptr Foreign.C.Types.CChar
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_sc2ti void_0E]
        case ds_sc2ti of {
          GHC.Ptr.Ptr p_sc2tl [Occ=Once] ->
              case traceEvent# [p_sc2tl GHC.Prim.void#] of s'_sc2tm {
                (##) -> Unit# [GHC.Tuple.()];
              };
        };

Debug.Trace.traceEventIO1
  :: GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [msg_sc2tn void_0E]
        GHC.Foreign.charIsRepresentable3
            GHC.IO.Encoding.UTF8.utf8
            msg_sc2tn
            Debug.Trace.traceEventIO2
            GHC.Prim.void#;

Debug.Trace.traceEventIO :: GHC.Base.String -> GHC.Types.IO ()
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        Debug.Trace.traceEventIO1 eta_B2 GHC.Prim.void#;

Debug.Trace.traceMarkerIO2
  :: GHC.Ptr.Ptr Foreign.C.Types.CChar
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_sc2tp void_0E]
        case ds_sc2tp of {
          GHC.Ptr.Ptr p_sc2ts [Occ=Once] ->
              case traceMarker# [p_sc2ts GHC.Prim.void#] of s'_sc2tt {
                (##) -> Unit# [GHC.Tuple.()];
              };
        };

Debug.Trace.traceMarkerIO1
  :: GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [msg_sc2tu void_0E]
        GHC.Foreign.charIsRepresentable3
            GHC.IO.Encoding.UTF8.utf8
            msg_sc2tu
            Debug.Trace.traceMarkerIO2
            GHC.Prim.void#;

Debug.Trace.traceMarkerIO :: GHC.Base.String -> GHC.Types.IO ()
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        Debug.Trace.traceMarkerIO1 eta_B2 GHC.Prim.void#;

Debug.Trace.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Debug.Trace.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Debug.Trace.$trModule4];

Debug.Trace.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Debug.Trace"#;

Debug.Trace.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Debug.Trace.$trModule2];

Debug.Trace.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Debug.Trace.$trModule3
                                     Debug.Trace.$trModule1];

Debug.Trace.traceMarker [InlPrag=NOINLINE]
  :: forall a. GHC.Base.String -> a -> a
[GblId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [msg_sc2tw expr_sc2tx]
        case
            case
                GHC.Foreign.charIsRepresentable3
                    GHC.IO.Encoding.UTF8.utf8
                    msg_sc2tw
                    Debug.Trace.traceMarkerIO2
                    GHC.Prim.realWorld#
            of
            { Unit# _ [Occ=Dead] -> Unit# [expr_sc2tx];
            }
        of
        { Unit# ipv1_sc2tD [Occ=Once] -> ipv1_sc2tD;
        };

Debug.Trace.traceEvent [InlPrag=NOINLINE]
  :: forall a. GHC.Base.String -> a -> a
[GblId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [msg_sc2tE expr_sc2tF]
        case
            case
                GHC.Foreign.charIsRepresentable3
                    GHC.IO.Encoding.UTF8.utf8
                    msg_sc2tE
                    Debug.Trace.traceEventIO2
                    GHC.Prim.realWorld#
            of
            { Unit# _ [Occ=Dead] -> Unit# [expr_sc2tF];
            }
        of
        { Unit# ipv1_sc2tL [Occ=Once] -> ipv1_sc2tL;
        };

Debug.Trace.putTraceMsg5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "%s\n"#;

Debug.Trace.putTraceMsg4 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Debug.Trace.putTraceMsg5;

Debug.Trace.putTraceMsg3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "WARNING: previous trace message had null bytes"#;

Debug.Trace.putTraceMsg2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Debug.Trace.putTraceMsg3;

Debug.Trace.$wgo [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: [GHC.Types.Char] -> (# [GHC.Types.Char], [GHC.Types.Char] #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [w_sc2tM]
        case w_sc2tM of {
          [] -> (#,#) [GHC.Types.[] GHC.Types.[]];
          : y_sc2tO [Occ=Once!] ys_sc2tP [Occ=Once] ->
              case y_sc2tO of wild1_sc2tQ {
                GHC.Types.C# x_sc2tR [Occ=Once!] ->
                    let {
                      w2_sc2tS [Dmd=<L,U(1*U,1*U)>]
                        :: ([GHC.Types.Char], [GHC.Types.Char])
                      [LclId] =
                          [ys_sc2tP] \u []
                              case Debug.Trace.$wgo ys_sc2tP of {
                                (#,#) ww1_sc2tU [Occ=Once] ww2_sc2tV [Occ=Once] ->
                                    (,) [ww1_sc2tU ww2_sc2tV];
                              };
                    } in 
                      case x_sc2tR of {
                        __DEFAULT ->
                            let {
                              sat_sc2u4 [Occ=Once] :: [GHC.Types.Char]
                              [LclId] =
                                  [w2_sc2tS] \u []
                                      case w2_sc2tS of {
                                        (,) _ [Occ=Dead] fs_sc2u3 [Occ=Once] -> fs_sc2u3;
                                      }; } in
                            let {
                              sat_sc2u5 [Occ=Once] :: [GHC.Types.Char]
                              [LclId] =
                                  CCCS :! [wild1_sc2tQ sat_sc2u4]; } in
                            let {
                              sat_sc2u0 [Occ=Once] :: [GHC.Types.Char]
                              [LclId] =
                                  [w2_sc2tS] \u []
                                      case w2_sc2tS of {
                                        (,) ts_sc2tY [Occ=Once] _ [Occ=Dead] -> ts_sc2tY;
                                      };
                            } in  (#,#) [sat_sc2u0 sat_sc2u5];
                        '\NUL'# ->
                            let {
                              sat_sc2ue [Occ=Once] :: [GHC.Types.Char]
                              [LclId] =
                                  [w2_sc2tS] \u []
                                      case w2_sc2tS of {
                                        (,) _ [Occ=Dead] fs_sc2ud [Occ=Once] -> fs_sc2ud;
                                      }; } in
                            let {
                              sat_sc2u9 [Occ=Once] :: [GHC.Types.Char]
                              [LclId] =
                                  [w2_sc2tS] \u []
                                      case w2_sc2tS of {
                                        (,) ts_sc2u7 [Occ=Once] _ [Occ=Dead] -> ts_sc2u7;
                                      }; } in
                            let {
                              sat_sc2ua [Occ=Once] :: [GHC.Types.Char]
                              [LclId] =
                                  CCCS :! [wild1_sc2tQ sat_sc2u9];
                            } in  (#,#) [sat_sc2ua sat_sc2ue];
                      };
              };
        };

Debug.Trace.putTraceMsg1
  :: GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<L,1*U><S,U>, Unf=OtherCon []] =
    [] \r [msg_sc2uf void_0E]
        case GHC.IO.Encoding.getForeignEncoding GHC.Prim.void# of {
          Unit# ipv1_sc2uj [Occ=Once] ->
              let {
                ds_sc2uk [Dmd=<L,U(U,1*U)>] :: ([GHC.Types.Char], [GHC.Types.Char])
                [LclId] =
                    [msg_sc2uf] \u []
                        case Debug.Trace.$wgo msg_sc2uf of {
                          (#,#) ww1_sc2um [Occ=Once] ww2_sc2un [Occ=Once] ->
                              (,) [ww1_sc2um ww2_sc2un];
                        }; } in
              let {
                lvl_sc2uo [Occ=OnceL] :: GHC.Base.String
                [LclId] =
                    [ds_sc2uk] \u []
                        case ds_sc2uk of {
                          (,) _ [Occ=Dead] msg'_sc2ur [Occ=Once] -> msg'_sc2ur;
                        }; } in
              let {
                sat_sc2v3 [Occ=Once] :: GHC.Foreign.CString -> GHC.Types.IO ()
                [LclId] =
                    [ds_sc2uk lvl_sc2uo] \r [cfmt_sc2us void_0E]
                        case GHC.IO.Encoding.getForeignEncoding GHC.Prim.void# of {
                          Unit# ipv3_sc2uw [Occ=Once] ->
                              let {
                                sat_sc2uG [Occ=Once] :: GHC.Foreign.CString -> GHC.Types.IO ()
                                [LclId] =
                                    [cfmt_sc2us] \r [cmsg_sc2ux void_0E]
                                        case cfmt_sc2us of {
                                          GHC.Ptr.Ptr ds4_sc2uA [Occ=Once] ->
                                              case cmsg_sc2ux of {
                                                GHC.Ptr.Ptr ds6_sc2uC [Occ=Once] ->
                                                    case
                                                        __pkg_ccall base-4.11.0.0 [ds4_sc2uA
                                                                                   ds6_sc2uC
                                                                                   GHC.Prim.void#]
                                                    of
                                                    { (##) -> Unit# [GHC.Tuple.()];
                                                    };
                                              };
                                        };
                              } in 
                                case
                                    GHC.Foreign.charIsRepresentable3
                                        ipv3_sc2uw lvl_sc2uo sat_sc2uG GHC.Prim.void#
                                of
                                { Unit# _ [Occ=Dead] ->
                                      case ds_sc2uk of {
                                        (,) nulls_sc2uL [Occ=Once!] _ [Occ=Dead] ->
                                            case nulls_sc2uL of {
                                              [] -> Unit# [GHC.Tuple.()];
                                              : _ [Occ=Dead] _ [Occ=Dead] ->
                                                  case
                                                      GHC.IO.Encoding.getForeignEncoding
                                                          GHC.Prim.void#
                                                  of
                                                  { Unit# ipv7_sc2uS [Occ=Once] ->
                                                        let {
                                                          sat_sc2v2 [Occ=Once]
                                                            :: GHC.Foreign.CString
                                                               -> GHC.Types.IO ()
                                                          [LclId] =
                                                              [cfmt_sc2us] \r [cmsg_sc2uT void_0E]
                                                                  case cfmt_sc2us of {
                                                                    GHC.Ptr.Ptr ds8_sc2uW [Occ=Once] ->
                                                                        case cmsg_sc2uT of {
                                                                          GHC.Ptr.Ptr ds10_sc2uY [Occ=Once] ->
                                                                              case
                                                                                  __pkg_ccall base-4.11.0.0 [ds8_sc2uW
                                                                                                             ds10_sc2uY
                                                                                                             GHC.Prim.void#]
                                                                              of
                                                                              { (##) ->
                                                                                    Unit# [GHC.Tuple.()];
                                                                              };
                                                                        };
                                                                  };
                                                        } in 
                                                          GHC.Foreign.charIsRepresentable3
                                                              ipv7_sc2uS
                                                              Debug.Trace.putTraceMsg2
                                                              sat_sc2v2
                                                              GHC.Prim.void#;
                                                  };
                                            };
                                      };
                                };
                        };
              } in 
                GHC.Foreign.charIsRepresentable3
                    ipv1_sc2uj Debug.Trace.putTraceMsg4 sat_sc2v3 GHC.Prim.void#;
        };

Debug.Trace.traceIO :: GHC.Base.String -> GHC.Types.IO ()
[GblId, Arity=2, Str=<L,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        Debug.Trace.putTraceMsg1 eta_B2 GHC.Prim.void#;

Debug.Trace.putTraceMsg :: GHC.Base.String -> GHC.Types.IO ()
[GblId, Arity=2, Str=<L,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        Debug.Trace.putTraceMsg1 eta_B2 GHC.Prim.void#;

Debug.Trace.trace [InlPrag=NOINLINE]
  :: forall a. GHC.Base.String -> a -> a
[GblId, Arity=2, Str=<L,1*U><L,U>, Unf=OtherCon []] =
    [] \r [string_sc2v4 expr_sc2v5]
        case
            case noDuplicate# [GHC.Prim.realWorld#] of s'_sc2v6 {
              (##) ->
                  case Debug.Trace.putTraceMsg1 string_sc2v4 GHC.Prim.void# of {
                    Unit# _ [Occ=Dead] -> Unit# [expr_sc2v5];
                  };
            }
        of
        { Unit# ipv1_sc2vc [Occ=Once] -> ipv1_sc2vc;
        };

Debug.Trace.traceId :: GHC.Base.String -> GHC.Base.String
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [a_sc2vd] Debug.Trace.trace a_sc2vd a_sc2vd;

Debug.Trace.traceShow :: forall a b. GHC.Show.Show a => a -> b -> b
[GblId, Arity=2, Str=<L,1*U(A,1*C1(U),A)><L,U>, Unf=OtherCon []] =
    [] \r [$dShow_sc2ve eta_sc2vf]
        let {
          sat_sc2vg [Occ=Once] :: GHC.Base.String
          [LclId] =
              [$dShow_sc2ve eta_sc2vf] \u []
                  GHC.Show.show $dShow_sc2ve eta_sc2vf;
        } in  Debug.Trace.trace sat_sc2vg;

Debug.Trace.traceShowId :: forall a. GHC.Show.Show a => a -> a
[GblId, Arity=2, Str=<L,1*U(A,1*C1(U),A)><L,U>, Unf=OtherCon []] =
    [] \r [$dShow_sc2vh a1_sc2vi]
        let {
          sat_sc2vj [Occ=Once, Dmd=<L,1*U>] :: GHC.Base.String
          [LclId] =
              [$dShow_sc2vh a1_sc2vi] \s [] GHC.Show.show $dShow_sc2vh a1_sc2vi;
        } in  Debug.Trace.trace sat_sc2vj a1_sc2vi;

Debug.Trace.traceM
  :: forall (f :: * -> *).
     GHC.Base.Applicative f =>
     GHC.Base.String -> f ()
[GblId,
 Arity=2,
 Str=<L,1*U(A,1*C1(U),A,A,A,A)><L,1*U>,
 Unf=OtherCon []] =
    [] \r [$dApplicative_sc2vk string_sc2vl]
        let {
          sat_sc2vm [Occ=Once] :: f_ac2au ()
          [LclId] =
              [$dApplicative_sc2vk] \u []
                  GHC.Base.pure $dApplicative_sc2vk GHC.Tuple.();
        } in  Debug.Trace.trace string_sc2vl sat_sc2vm;

Debug.Trace.traceShowM
  :: forall a (f :: * -> *).
     (GHC.Show.Show a, GHC.Base.Applicative f) =>
     a -> f ()
[GblId,
 Arity=3,
 Str=<L,1*U(A,1*C1(U),A)><L,1*U(A,1*C1(U),A,A,A,A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sc2vn $dApplicative_sc2vo eta_sc2vp]
        let {
          sat_sc2vr [Occ=Once] :: f_ac2aF ()
          [LclId] =
              [$dApplicative_sc2vo] \u []
                  GHC.Base.pure $dApplicative_sc2vo GHC.Tuple.(); } in
        let {
          sat_sc2vq [Occ=Once, Dmd=<L,1*U>] :: GHC.Base.String
          [LclId] =
              [$dShow_sc2vn eta_sc2vp] \s []
                  GHC.Show.show $dShow_sc2vn eta_sc2vp;
        } in  Debug.Trace.trace sat_sc2vq sat_sc2vr;

Debug.Trace.traceStack :: forall a. GHC.Base.String -> a -> a
[GblId, Arity=2, Str=<L,1*U><L,U>, Unf=OtherCon []] =
    [] \r [str_sc2vs expr_sc2vt]
        case
            case noDuplicate# [GHC.Prim.realWorld#] of s'_sc2vu {
              (##) ->
                  case Debug.Trace.putTraceMsg1 str_sc2vs GHC.Prim.void# of {
                    Unit# _ [Occ=Dead] ->
                        case getCurrentCCS# [GHC.Tuple.() GHC.Prim.void#] of {
                          Unit# addr_sc2vA [Occ=Once] ->
                              case GHC.Stack.CCS.$wgo addr_sc2vA GHC.Types.[] GHC.Prim.void# of {
                                Unit# ipv3_sc2vD [Occ=Once!] ->
                                    case ipv3_sc2vD of wild1_sc2vE {
                                      [] -> Unit# [expr_sc2vt];
                                      : _ [Occ=Dead] _ [Occ=Dead] ->
                                          let {
                                            sat_sc2vJ [Occ=Once, Dmd=<L,1*U>] :: GHC.Base.String
                                            [LclId] =
                                                [wild1_sc2vE] \s []
                                                    let {
                                                      sat_sc2vI [Occ=Once] :: [GHC.Types.Char]
                                                      [LclId] =
                                                          [wild1_sc2vE] \u []
                                                              case
                                                                  GHC.List.reverse1
                                                                      wild1_sc2vE GHC.Types.[]
                                                              of
                                                              sat_sc2vH
                                                              { __DEFAULT ->
                                                                    GHC.Stack.CCS.renderStack_go
                                                                        sat_sc2vH;
                                                              };
                                                    } in 
                                                      GHC.CString.unpackAppendCString#
                                                          GHC.Stack.CCS.renderStack1 sat_sc2vI;
                                          } in 
                                            case
                                                Debug.Trace.putTraceMsg1 sat_sc2vJ GHC.Prim.void#
                                            of
                                            { Unit# _ [Occ=Dead] -> Unit# [expr_sc2vt];
                                            };
                                    };
                              };
                        };
                  };
            }
        of
        { Unit# ipv1_sc2vP [Occ=Once] -> ipv1_sc2vP;
        };


==================== Pre unarise: ====================
2018-03-16 16:06:57.247277931 UTC

Debug.Trace.traceEventIO2
  :: GHC.Ptr.Ptr Foreign.C.Types.CChar
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_sc2Wj eta_sc2Wk]
        case ds_sc2Wj of {
          GHC.Ptr.Ptr p_sc2Wm [Occ=Once] ->
              case traceEvent# [p_sc2Wm eta_sc2Wk] of s'_sc2Wn {
                __DEFAULT -> (#,#) [s'_sc2Wn GHC.Tuple.()];
              };
        };

Debug.Trace.traceEventIO1
  :: GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [msg_sc2Wo eta_sc2Wp]
        GHC.Foreign.charIsRepresentable3
            GHC.IO.Encoding.UTF8.utf8
            msg_sc2Wo
            Debug.Trace.traceEventIO2
            eta_sc2Wp;

Debug.Trace.traceEventIO :: GHC.Base.String -> GHC.Types.IO ()
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] Debug.Trace.traceEventIO1 eta_B2 eta_B1;

Debug.Trace.traceMarkerIO2
  :: GHC.Ptr.Ptr Foreign.C.Types.CChar
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_sc2Wq eta_sc2Wr]
        case ds_sc2Wq of {
          GHC.Ptr.Ptr p_sc2Wt [Occ=Once] ->
              case traceMarker# [p_sc2Wt eta_sc2Wr] of s'_sc2Wu {
                __DEFAULT -> (#,#) [s'_sc2Wu GHC.Tuple.()];
              };
        };

Debug.Trace.traceMarkerIO1
  :: GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [msg_sc2Wv eta_sc2Ww]
        GHC.Foreign.charIsRepresentable3
            GHC.IO.Encoding.UTF8.utf8
            msg_sc2Wv
            Debug.Trace.traceMarkerIO2
            eta_sc2Ww;

Debug.Trace.traceMarkerIO :: GHC.Base.String -> GHC.Types.IO ()
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] Debug.Trace.traceMarkerIO1 eta_B2 eta_B1;

Debug.Trace.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Debug.Trace.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Debug.Trace.$trModule4];

Debug.Trace.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Debug.Trace"#;

Debug.Trace.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Debug.Trace.$trModule2];

Debug.Trace.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Debug.Trace.$trModule3
                                     Debug.Trace.$trModule1];

Debug.Trace.traceMarker [InlPrag=NOINLINE]
  :: forall a. GHC.Base.String -> a -> a
[GblId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [msg_sc2Wx expr_sc2Wy]
        case
            case
                GHC.Foreign.charIsRepresentable3
                    GHC.IO.Encoding.UTF8.utf8
                    msg_sc2Wx
                    Debug.Trace.traceMarkerIO2
                    GHC.Prim.realWorld#
            of
            { (#,#) ipv_sc2WA [Occ=Once] _ [Occ=Dead] ->
                  (#,#) [ipv_sc2WA expr_sc2Wy];
            }
        of
        { (#,#) _ [Occ=Dead] ipv1_sc2WE [Occ=Once] -> ipv1_sc2WE;
        };

Debug.Trace.traceEvent [InlPrag=NOINLINE]
  :: forall a. GHC.Base.String -> a -> a
[GblId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [msg_sc2WF expr_sc2WG]
        case
            case
                GHC.Foreign.charIsRepresentable3
                    GHC.IO.Encoding.UTF8.utf8
                    msg_sc2WF
                    Debug.Trace.traceEventIO2
                    GHC.Prim.realWorld#
            of
            { (#,#) ipv_sc2WI [Occ=Once] _ [Occ=Dead] ->
                  (#,#) [ipv_sc2WI expr_sc2WG];
            }
        of
        { (#,#) _ [Occ=Dead] ipv1_sc2WM [Occ=Once] -> ipv1_sc2WM;
        };

Debug.Trace.putTraceMsg5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "%s\n"#;

Debug.Trace.putTraceMsg4 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Debug.Trace.putTraceMsg5;

Debug.Trace.putTraceMsg3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "WARNING: previous trace message had null bytes"#;

Debug.Trace.putTraceMsg2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Debug.Trace.putTraceMsg3;

Debug.Trace.$wgo [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: [GHC.Types.Char] -> (# [GHC.Types.Char], [GHC.Types.Char] #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [w_sc2WN]
        case w_sc2WN of {
          [] -> (#,#) [GHC.Types.[] GHC.Types.[]];
          : y_sc2WP [Occ=Once!] ys_sc2WQ [Occ=Once] ->
              case y_sc2WP of wild1_sc2WR {
                GHC.Types.C# x_sc2WS [Occ=Once!] ->
                    let {
                      w2_sc2WT [Dmd=<L,U(1*U,1*U)>]
                        :: ([GHC.Types.Char], [GHC.Types.Char])
                      [LclId] =
                          [ys_sc2WQ] \u []
                              case Debug.Trace.$wgo ys_sc2WQ of {
                                (#,#) ww1_sc2WV [Occ=Once] ww2_sc2WW [Occ=Once] ->
                                    (,) [ww1_sc2WV ww2_sc2WW];
                              };
                    } in 
                      case x_sc2WS of {
                        __DEFAULT ->
                            let {
                              sat_sc2X5 [Occ=Once] :: [GHC.Types.Char]
                              [LclId] =
                                  [w2_sc2WT] \u []
                                      case w2_sc2WT of {
                                        (,) _ [Occ=Dead] fs_sc2X4 [Occ=Once] -> fs_sc2X4;
                                      }; } in
                            let {
                              sat_sc2X6 [Occ=Once] :: [GHC.Types.Char]
                              [LclId] =
                                  CCCS :! [wild1_sc2WR sat_sc2X5]; } in
                            let {
                              sat_sc2X1 [Occ=Once] :: [GHC.Types.Char]
                              [LclId] =
                                  [w2_sc2WT] \u []
                                      case w2_sc2WT of {
                                        (,) ts_sc2WZ [Occ=Once] _ [Occ=Dead] -> ts_sc2WZ;
                                      };
                            } in  (#,#) [sat_sc2X1 sat_sc2X6];
                        '\NUL'# ->
                            let {
                              sat_sc2Xf [Occ=Once] :: [GHC.Types.Char]
                              [LclId] =
                                  [w2_sc2WT] \u []
                                      case w2_sc2WT of {
                                        (,) _ [Occ=Dead] fs_sc2Xe [Occ=Once] -> fs_sc2Xe;
                                      }; } in
                            let {
                              sat_sc2Xa [Occ=Once] :: [GHC.Types.Char]
                              [LclId] =
                                  [w2_sc2WT] \u []
                                      case w2_sc2WT of {
                                        (,) ts_sc2X8 [Occ=Once] _ [Occ=Dead] -> ts_sc2X8;
                                      }; } in
                            let {
                              sat_sc2Xb [Occ=Once] :: [GHC.Types.Char]
                              [LclId] =
                                  CCCS :! [wild1_sc2WR sat_sc2Xa];
                            } in  (#,#) [sat_sc2Xb sat_sc2Xf];
                      };
              };
        };

Debug.Trace.putTraceMsg1
  :: GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<L,1*U><S,U>, Unf=OtherCon []] =
    [] \r [msg_sc2Xg s1_sc2Xh]
        case GHC.IO.Encoding.getForeignEncoding s1_sc2Xh of {
          (#,#) ipv_sc2Xj [Occ=Once] ipv1_sc2Xk [Occ=Once] ->
              let {
                ds_sc2Xl [Dmd=<L,U(U,1*U)>] :: ([GHC.Types.Char], [GHC.Types.Char])
                [LclId] =
                    [msg_sc2Xg] \u []
                        case Debug.Trace.$wgo msg_sc2Xg of {
                          (#,#) ww1_sc2Xn [Occ=Once] ww2_sc2Xo [Occ=Once] ->
                              (,) [ww1_sc2Xn ww2_sc2Xo];
                        }; } in
              let {
                lvl_sc2Xp [Occ=OnceL] :: GHC.Base.String
                [LclId] =
                    [ds_sc2Xl] \u []
                        case ds_sc2Xl of {
                          (,) _ [Occ=Dead] msg'_sc2Xs [Occ=Once] -> msg'_sc2Xs;
                        }; } in
              let {
                sat_sc2Y4 [Occ=Once] :: GHC.Foreign.CString -> GHC.Types.IO ()
                [LclId] =
                    [ds_sc2Xl lvl_sc2Xp] \r [cfmt_sc2Xt eta_sc2Xu]
                        case GHC.IO.Encoding.getForeignEncoding eta_sc2Xu of {
                          (#,#) ipv2_sc2Xw [Occ=Once] ipv3_sc2Xx [Occ=Once] ->
                              let {
                                sat_sc2XH [Occ=Once] :: GHC.Foreign.CString -> GHC.Types.IO ()
                                [LclId] =
                                    [cfmt_sc2Xt] \r [cmsg_sc2Xy eta1_sc2Xz]
                                        case cfmt_sc2Xt of {
                                          GHC.Ptr.Ptr ds4_sc2XB [Occ=Once] ->
                                              case cmsg_sc2Xy of {
                                                GHC.Ptr.Ptr ds6_sc2XD [Occ=Once] ->
                                                    case
                                                        __pkg_ccall base-4.11.0.0 [ds4_sc2XB
                                                                                   ds6_sc2XD
                                                                                   eta1_sc2Xz]
                                                    of
                                                    { Unit# ds7_sc2XG [Occ=Once] ->
                                                          (#,#) [ds7_sc2XG GHC.Tuple.()];
                                                    };
                                              };
                                        };
                              } in 
                                case
                                    GHC.Foreign.charIsRepresentable3
                                        ipv3_sc2Xx lvl_sc2Xp sat_sc2XH ipv2_sc2Xw
                                of
                                { (#,#) ipv4_sc2XJ [Occ=Once*] _ [Occ=Dead] ->
                                      case ds_sc2Xl of {
                                        (,) nulls_sc2XM [Occ=Once!] _ [Occ=Dead] ->
                                            case nulls_sc2XM of {
                                              [] -> (#,#) [ipv4_sc2XJ GHC.Tuple.()];
                                              : _ [Occ=Dead] _ [Occ=Dead] ->
                                                  case
                                                      GHC.IO.Encoding.getForeignEncoding ipv4_sc2XJ
                                                  of
                                                  { (#,#) ipv6_sc2XS [Occ=Once]
                                                          ipv7_sc2XT [Occ=Once] ->
                                                        let {
                                                          sat_sc2Y3 [Occ=Once]
                                                            :: GHC.Foreign.CString
                                                               -> GHC.Types.IO ()
                                                          [LclId] =
                                                              [cfmt_sc2Xt] \r [cmsg_sc2XU
                                                                               eta1_sc2XV]
                                                                  case cfmt_sc2Xt of {
                                                                    GHC.Ptr.Ptr ds8_sc2XX [Occ=Once] ->
                                                                        case cmsg_sc2XU of {
                                                                          GHC.Ptr.Ptr ds10_sc2XZ [Occ=Once] ->
                                                                              case
                                                                                  __pkg_ccall base-4.11.0.0 [ds8_sc2XX
                                                                                                             ds10_sc2XZ
                                                                                                             eta1_sc2XV]
                                                                              of
                                                                              { Unit# ds11_sc2Y2 [Occ=Once] ->
                                                                                    (#,#) [ds11_sc2Y2
                                                                                           GHC.Tuple.()];
                                                                              };
                                                                        };
                                                                  };
                                                        } in 
                                                          GHC.Foreign.charIsRepresentable3
                                                              ipv7_sc2XT
                                                              Debug.Trace.putTraceMsg2
                                                              sat_sc2Y3
                                                              ipv6_sc2XS;
                                                  };
                                            };
                                      };
                                };
                        };
              } in 
                GHC.Foreign.charIsRepresentable3
                    ipv1_sc2Xk Debug.Trace.putTraceMsg4 sat_sc2Y4 ipv_sc2Xj;
        };

Debug.Trace.traceIO :: GHC.Base.String -> GHC.Types.IO ()
[GblId, Arity=2, Str=<L,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] Debug.Trace.putTraceMsg1 eta_B2 eta_B1;

Debug.Trace.putTraceMsg :: GHC.Base.String -> GHC.Types.IO ()
[GblId, Arity=2, Str=<L,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] Debug.Trace.putTraceMsg1 eta_B2 eta_B1;

Debug.Trace.trace [InlPrag=NOINLINE]
  :: forall a. GHC.Base.String -> a -> a
[GblId, Arity=2, Str=<L,1*U><L,U>, Unf=OtherCon []] =
    [] \r [string_sc2Y5 expr_sc2Y6]
        case
            case noDuplicate# [GHC.Prim.realWorld#] of s'_sc2Y7 {
              __DEFAULT ->
                  case Debug.Trace.putTraceMsg1 string_sc2Y5 s'_sc2Y7 of {
                    (#,#) ipv_sc2Y9 [Occ=Once] _ [Occ=Dead] ->
                        (#,#) [ipv_sc2Y9 expr_sc2Y6];
                  };
            }
        of
        { (#,#) _ [Occ=Dead] ipv1_sc2Yd [Occ=Once] -> ipv1_sc2Yd;
        };

Debug.Trace.traceId :: GHC.Base.String -> GHC.Base.String
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [a_sc2Ye] Debug.Trace.trace a_sc2Ye a_sc2Ye;

Debug.Trace.traceShow :: forall a b. GHC.Show.Show a => a -> b -> b
[GblId, Arity=2, Str=<L,1*U(A,1*C1(U),A)><L,U>, Unf=OtherCon []] =
    [] \r [$dShow_sc2Yf eta_sc2Yg]
        let {
          sat_sc2Yh [Occ=Once] :: GHC.Base.String
          [LclId] =
              [$dShow_sc2Yf eta_sc2Yg] \u []
                  GHC.Show.show $dShow_sc2Yf eta_sc2Yg;
        } in  Debug.Trace.trace sat_sc2Yh;

Debug.Trace.traceShowId :: forall a. GHC.Show.Show a => a -> a
[GblId, Arity=2, Str=<L,1*U(A,1*C1(U),A)><L,U>, Unf=OtherCon []] =
    [] \r [$dShow_sc2Yi a1_sc2Yj]
        let {
          sat_sc2Yk [Occ=Once, Dmd=<L,1*U>] :: GHC.Base.String
          [LclId] =
              [$dShow_sc2Yi a1_sc2Yj] \s [] GHC.Show.show $dShow_sc2Yi a1_sc2Yj;
        } in  Debug.Trace.trace sat_sc2Yk a1_sc2Yj;

Debug.Trace.traceM
  :: forall (f :: * -> *).
     GHC.Base.Applicative f =>
     GHC.Base.String -> f ()
[GblId,
 Arity=2,
 Str=<L,1*U(A,1*C1(U),A,A,A,A)><L,1*U>,
 Unf=OtherCon []] =
    [] \r [$dApplicative_sc2Yl string_sc2Ym]
        let {
          sat_sc2Yn [Occ=Once] :: f_ac2au ()
          [LclId] =
              [$dApplicative_sc2Yl] \u []
                  GHC.Base.pure $dApplicative_sc2Yl GHC.Tuple.();
        } in  Debug.Trace.trace string_sc2Ym sat_sc2Yn;

Debug.Trace.traceShowM
  :: forall a (f :: * -> *).
     (GHC.Show.Show a, GHC.Base.Applicative f) =>
     a -> f ()
[GblId,
 Arity=3,
 Str=<L,1*U(A,1*C1(U),A)><L,1*U(A,1*C1(U),A,A,A,A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sc2Yo $dApplicative_sc2Yp eta_sc2Yq]
        let {
          sat_sc2Ys [Occ=Once] :: f_ac2aF ()
          [LclId] =
              [$dApplicative_sc2Yp] \u []
                  GHC.Base.pure $dApplicative_sc2Yp GHC.Tuple.(); } in
        let {
          sat_sc2Yr [Occ=Once, Dmd=<L,1*U>] :: GHC.Base.String
          [LclId] =
              [$dShow_sc2Yo eta_sc2Yq] \s []
                  GHC.Show.show $dShow_sc2Yo eta_sc2Yq;
        } in  Debug.Trace.trace sat_sc2Yr sat_sc2Ys;

Debug.Trace.traceStack :: forall a. GHC.Base.String -> a -> a
[GblId, Arity=2, Str=<L,1*U><L,U>, Unf=OtherCon []] =
    [] \r [str_sc2Yt expr_sc2Yu]
        case
            case noDuplicate# [GHC.Prim.realWorld#] of s'_sc2Yv {
              __DEFAULT ->
                  case Debug.Trace.putTraceMsg1 str_sc2Yt s'_sc2Yv of {
                    (#,#) ipv_sc2Yx [Occ=Once] _ [Occ=Dead] ->
                        case getCurrentCCS# [GHC.Tuple.() ipv_sc2Yx] of {
                          (#,#) s'1_sc2YA [Occ=Once] addr_sc2YB [Occ=Once] ->
                              case GHC.Stack.CCS.$wgo addr_sc2YB GHC.Types.[] s'1_sc2YA of {
                                (#,#) ipv2_sc2YD [Occ=Once*] ipv3_sc2YE [Occ=Once!] ->
                                    case ipv3_sc2YE of wild1_sc2YF {
                                      [] -> (#,#) [ipv2_sc2YD expr_sc2Yu];
                                      : _ [Occ=Dead] _ [Occ=Dead] ->
                                          let {
                                            sat_sc2YK [Occ=Once, Dmd=<L,1*U>] :: GHC.Base.String
                                            [LclId] =
                                                [wild1_sc2YF] \s []
                                                    let {
                                                      sat_sc2YJ [Occ=Once] :: [GHC.Types.Char]
                                                      [LclId] =
                                                          [wild1_sc2YF] \u []
                                                              case
                                                                  GHC.List.reverse1
                                                                      wild1_sc2YF GHC.Types.[]
                                                              of
                                                              sat_sc2YI
                                                              { __DEFAULT ->
                                                                    GHC.Stack.CCS.renderStack_go
                                                                        sat_sc2YI;
                                                              };
                                                    } in 
                                                      GHC.CString.unpackAppendCString#
                                                          GHC.Stack.CCS.renderStack1 sat_sc2YJ;
                                          } in 
                                            case Debug.Trace.putTraceMsg1 sat_sc2YK ipv2_sc2YD of {
                                              (#,#) ipv4_sc2YM [Occ=Once] _ [Occ=Dead] ->
                                                  (#,#) [ipv4_sc2YM expr_sc2Yu];
                                            };
                                    };
                              };
                        };
                  };
            }
        of
        { (#,#) _ [Occ=Dead] ipv1_sc2YQ [Occ=Once] -> ipv1_sc2YQ;
        };


==================== STG syntax: ====================
2018-03-16 16:06:57.255241913 UTC

Debug.Trace.traceEventIO2
  :: GHC.Ptr.Ptr Foreign.C.Types.CChar
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_sc2Wj void_0E]
        case ds_sc2Wj of {
          GHC.Ptr.Ptr p_sc2Wm [Occ=Once] ->
              case traceEvent# [p_sc2Wm GHC.Prim.void#] of s'_sc2Wn {
                (##) -> Unit# [GHC.Tuple.()];
              };
        };

Debug.Trace.traceEventIO1
  :: GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [msg_sc2Wo void_0E]
        GHC.Foreign.charIsRepresentable3
            GHC.IO.Encoding.UTF8.utf8
            msg_sc2Wo
            Debug.Trace.traceEventIO2
            GHC.Prim.void#;

Debug.Trace.traceEventIO :: GHC.Base.String -> GHC.Types.IO ()
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        Debug.Trace.traceEventIO1 eta_B2 GHC.Prim.void#;

Debug.Trace.traceMarkerIO2
  :: GHC.Ptr.Ptr Foreign.C.Types.CChar
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [ds_sc2Wq void_0E]
        case ds_sc2Wq of {
          GHC.Ptr.Ptr p_sc2Wt [Occ=Once] ->
              case traceMarker# [p_sc2Wt GHC.Prim.void#] of s'_sc2Wu {
                (##) -> Unit# [GHC.Tuple.()];
              };
        };

Debug.Trace.traceMarkerIO1
  :: GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [msg_sc2Wv void_0E]
        GHC.Foreign.charIsRepresentable3
            GHC.IO.Encoding.UTF8.utf8
            msg_sc2Wv
            Debug.Trace.traceMarkerIO2
            GHC.Prim.void#;

Debug.Trace.traceMarkerIO :: GHC.Base.String -> GHC.Types.IO ()
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        Debug.Trace.traceMarkerIO1 eta_B2 GHC.Prim.void#;

Debug.Trace.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

Debug.Trace.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Debug.Trace.$trModule4];

Debug.Trace.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Debug.Trace"#;

Debug.Trace.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [Debug.Trace.$trModule2];

Debug.Trace.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [Debug.Trace.$trModule3
                                     Debug.Trace.$trModule1];

Debug.Trace.traceMarker [InlPrag=NOINLINE]
  :: forall a. GHC.Base.String -> a -> a
[GblId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [msg_sc2Wx expr_sc2Wy]
        case
            case
                GHC.Foreign.charIsRepresentable3
                    GHC.IO.Encoding.UTF8.utf8
                    msg_sc2Wx
                    Debug.Trace.traceMarkerIO2
                    GHC.Prim.realWorld#
            of
            { Unit# _ [Occ=Dead] -> Unit# [expr_sc2Wy];
            }
        of
        { Unit# ipv1_sc2WE [Occ=Once] -> ipv1_sc2WE;
        };

Debug.Trace.traceEvent [InlPrag=NOINLINE]
  :: forall a. GHC.Base.String -> a -> a
[GblId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [msg_sc2WF expr_sc2WG]
        case
            case
                GHC.Foreign.charIsRepresentable3
                    GHC.IO.Encoding.UTF8.utf8
                    msg_sc2WF
                    Debug.Trace.traceEventIO2
                    GHC.Prim.realWorld#
            of
            { Unit# _ [Occ=Dead] -> Unit# [expr_sc2WG];
            }
        of
        { Unit# ipv1_sc2WM [Occ=Once] -> ipv1_sc2WM;
        };

Debug.Trace.putTraceMsg5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "%s\n"#;

Debug.Trace.putTraceMsg4 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Debug.Trace.putTraceMsg5;

Debug.Trace.putTraceMsg3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "WARNING: previous trace message had null bytes"#;

Debug.Trace.putTraceMsg2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# Debug.Trace.putTraceMsg3;

Debug.Trace.$wgo [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: [GHC.Types.Char] -> (# [GHC.Types.Char], [GHC.Types.Char] #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [w_sc2WN]
        case w_sc2WN of {
          [] -> (#,#) [GHC.Types.[] GHC.Types.[]];
          : y_sc2WP [Occ=Once!] ys_sc2WQ [Occ=Once] ->
              case y_sc2WP of wild1_sc2WR {
                GHC.Types.C# x_sc2WS [Occ=Once!] ->
                    let {
                      w2_sc2WT [Dmd=<L,U(1*U,1*U)>]
                        :: ([GHC.Types.Char], [GHC.Types.Char])
                      [LclId] =
                          [ys_sc2WQ] \u []
                              case Debug.Trace.$wgo ys_sc2WQ of {
                                (#,#) ww1_sc2WV [Occ=Once] ww2_sc2WW [Occ=Once] ->
                                    (,) [ww1_sc2WV ww2_sc2WW];
                              };
                    } in 
                      case x_sc2WS of {
                        __DEFAULT ->
                            let {
                              sat_sc2X5 [Occ=Once] :: [GHC.Types.Char]
                              [LclId] =
                                  [w2_sc2WT] \u []
                                      case w2_sc2WT of {
                                        (,) _ [Occ=Dead] fs_sc2X4 [Occ=Once] -> fs_sc2X4;
                                      }; } in
                            let {
                              sat_sc2X6 [Occ=Once] :: [GHC.Types.Char]
                              [LclId] =
                                  CCCS :! [wild1_sc2WR sat_sc2X5]; } in
                            let {
                              sat_sc2X1 [Occ=Once] :: [GHC.Types.Char]
                              [LclId] =
                                  [w2_sc2WT] \u []
                                      case w2_sc2WT of {
                                        (,) ts_sc2WZ [Occ=Once] _ [Occ=Dead] -> ts_sc2WZ;
                                      };
                            } in  (#,#) [sat_sc2X1 sat_sc2X6];
                        '\NUL'# ->
                            let {
                              sat_sc2Xf [Occ=Once] :: [GHC.Types.Char]
                              [LclId] =
                                  [w2_sc2WT] \u []
                                      case w2_sc2WT of {
                                        (,) _ [Occ=Dead] fs_sc2Xe [Occ=Once] -> fs_sc2Xe;
                                      }; } in
                            let {
                              sat_sc2Xa [Occ=Once] :: [GHC.Types.Char]
                              [LclId] =
                                  [w2_sc2WT] \u []
                                      case w2_sc2WT of {
                                        (,) ts_sc2X8 [Occ=Once] _ [Occ=Dead] -> ts_sc2X8;
                                      }; } in
                            let {
                              sat_sc2Xb [Occ=Once] :: [GHC.Types.Char]
                              [LclId] =
                                  CCCS :! [wild1_sc2WR sat_sc2Xa];
                            } in  (#,#) [sat_sc2Xb sat_sc2Xf];
                      };
              };
        };

Debug.Trace.putTraceMsg1
  :: GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<L,1*U><S,U>, Unf=OtherCon []] =
    [] \r [msg_sc2Xg void_0E]
        case GHC.IO.Encoding.getForeignEncoding GHC.Prim.void# of {
          Unit# ipv1_sc2Xk [Occ=Once] ->
              let {
                ds_sc2Xl [Dmd=<L,U(U,1*U)>] :: ([GHC.Types.Char], [GHC.Types.Char])
                [LclId] =
                    [msg_sc2Xg] \u []
                        case Debug.Trace.$wgo msg_sc2Xg of {
                          (#,#) ww1_sc2Xn [Occ=Once] ww2_sc2Xo [Occ=Once] ->
                              (,) [ww1_sc2Xn ww2_sc2Xo];
                        }; } in
              let {
                lvl_sc2Xp [Occ=OnceL] :: GHC.Base.String
                [LclId] =
                    [ds_sc2Xl] \u []
                        case ds_sc2Xl of {
                          (,) _ [Occ=Dead] msg'_sc2Xs [Occ=Once] -> msg'_sc2Xs;
                        }; } in
              let {
                sat_sc2Y4 [Occ=Once] :: GHC.Foreign.CString -> GHC.Types.IO ()
                [LclId] =
                    [ds_sc2Xl lvl_sc2Xp] \r [cfmt_sc2Xt void_0E]
                        case GHC.IO.Encoding.getForeignEncoding GHC.Prim.void# of {
                          Unit# ipv3_sc2Xx [Occ=Once] ->
                              let {
                                sat_sc2XH [Occ=Once] :: GHC.Foreign.CString -> GHC.Types.IO ()
                                [LclId] =
                                    [cfmt_sc2Xt] \r [cmsg_sc2Xy void_0E]
                                        case cfmt_sc2Xt of {
                                          GHC.Ptr.Ptr ds4_sc2XB [Occ=Once] ->
                                              case cmsg_sc2Xy of {
                                                GHC.Ptr.Ptr ds6_sc2XD [Occ=Once] ->
                                                    case
                                                        __pkg_ccall base-4.11.0.0 [ds4_sc2XB
                                                                                   ds6_sc2XD
                                                                                   GHC.Prim.void#]
                                                    of
                                                    { (##) -> Unit# [GHC.Tuple.()];
                                                    };
                                              };
                                        };
                              } in 
                                case
                                    GHC.Foreign.charIsRepresentable3
                                        ipv3_sc2Xx lvl_sc2Xp sat_sc2XH GHC.Prim.void#
                                of
                                { Unit# _ [Occ=Dead] ->
                                      case ds_sc2Xl of {
                                        (,) nulls_sc2XM [Occ=Once!] _ [Occ=Dead] ->
                                            case nulls_sc2XM of {
                                              [] -> Unit# [GHC.Tuple.()];
                                              : _ [Occ=Dead] _ [Occ=Dead] ->
                                                  case
                                                      GHC.IO.Encoding.getForeignEncoding
                                                          GHC.Prim.void#
                                                  of
                                                  { Unit# ipv7_sc2XT [Occ=Once] ->
                                                        let {
                                                          sat_sc2Y3 [Occ=Once]
                                                            :: GHC.Foreign.CString
                                                               -> GHC.Types.IO ()
                                                          [LclId] =
                                                              [cfmt_sc2Xt] \r [cmsg_sc2XU void_0E]
                                                                  case cfmt_sc2Xt of {
                                                                    GHC.Ptr.Ptr ds8_sc2XX [Occ=Once] ->
                                                                        case cmsg_sc2XU of {
                                                                          GHC.Ptr.Ptr ds10_sc2XZ [Occ=Once] ->
                                                                              case
                                                                                  __pkg_ccall base-4.11.0.0 [ds8_sc2XX
                                                                                                             ds10_sc2XZ
                                                                                                             GHC.Prim.void#]
                                                                              of
                                                                              { (##) ->
                                                                                    Unit# [GHC.Tuple.()];
                                                                              };
                                                                        };
                                                                  };
                                                        } in 
                                                          GHC.Foreign.charIsRepresentable3
                                                              ipv7_sc2XT
                                                              Debug.Trace.putTraceMsg2
                                                              sat_sc2Y3
                                                              GHC.Prim.void#;
                                                  };
                                            };
                                      };
                                };
                        };
              } in 
                GHC.Foreign.charIsRepresentable3
                    ipv1_sc2Xk Debug.Trace.putTraceMsg4 sat_sc2Y4 GHC.Prim.void#;
        };

Debug.Trace.traceIO :: GHC.Base.String -> GHC.Types.IO ()
[GblId, Arity=2, Str=<L,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        Debug.Trace.putTraceMsg1 eta_B2 GHC.Prim.void#;

Debug.Trace.putTraceMsg :: GHC.Base.String -> GHC.Types.IO ()
[GblId, Arity=2, Str=<L,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        Debug.Trace.putTraceMsg1 eta_B2 GHC.Prim.void#;

Debug.Trace.trace [InlPrag=NOINLINE]
  :: forall a. GHC.Base.String -> a -> a
[GblId, Arity=2, Str=<L,1*U><L,U>, Unf=OtherCon []] =
    [] \r [string_sc2Y5 expr_sc2Y6]
        case
            case noDuplicate# [GHC.Prim.realWorld#] of s'_sc2Y7 {
              (##) ->
                  case Debug.Trace.putTraceMsg1 string_sc2Y5 GHC.Prim.void# of {
                    Unit# _ [Occ=Dead] -> Unit# [expr_sc2Y6];
                  };
            }
        of
        { Unit# ipv1_sc2Yd [Occ=Once] -> ipv1_sc2Yd;
        };

Debug.Trace.traceId :: GHC.Base.String -> GHC.Base.String
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [a_sc2Ye] Debug.Trace.trace a_sc2Ye a_sc2Ye;

Debug.Trace.traceShow :: forall a b. GHC.Show.Show a => a -> b -> b
[GblId, Arity=2, Str=<L,1*U(A,1*C1(U),A)><L,U>, Unf=OtherCon []] =
    [] \r [$dShow_sc2Yf eta_sc2Yg]
        let {
          sat_sc2Yh [Occ=Once] :: GHC.Base.String
          [LclId] =
              [$dShow_sc2Yf eta_sc2Yg] \u []
                  GHC.Show.show $dShow_sc2Yf eta_sc2Yg;
        } in  Debug.Trace.trace sat_sc2Yh;

Debug.Trace.traceShowId :: forall a. GHC.Show.Show a => a -> a
[GblId, Arity=2, Str=<L,1*U(A,1*C1(U),A)><L,U>, Unf=OtherCon []] =
    [] \r [$dShow_sc2Yi a1_sc2Yj]
        let {
          sat_sc2Yk [Occ=Once, Dmd=<L,1*U>] :: GHC.Base.String
          [LclId] =
              [$dShow_sc2Yi a1_sc2Yj] \s [] GHC.Show.show $dShow_sc2Yi a1_sc2Yj;
        } in  Debug.Trace.trace sat_sc2Yk a1_sc2Yj;

Debug.Trace.traceM
  :: forall (f :: * -> *).
     GHC.Base.Applicative f =>
     GHC.Base.String -> f ()
[GblId,
 Arity=2,
 Str=<L,1*U(A,1*C1(U),A,A,A,A)><L,1*U>,
 Unf=OtherCon []] =
    [] \r [$dApplicative_sc2Yl string_sc2Ym]
        let {
          sat_sc2Yn [Occ=Once] :: f_ac2au ()
          [LclId] =
              [$dApplicative_sc2Yl] \u []
                  GHC.Base.pure $dApplicative_sc2Yl GHC.Tuple.();
        } in  Debug.Trace.trace string_sc2Ym sat_sc2Yn;

Debug.Trace.traceShowM
  :: forall a (f :: * -> *).
     (GHC.Show.Show a, GHC.Base.Applicative f) =>
     a -> f ()
[GblId,
 Arity=3,
 Str=<L,1*U(A,1*C1(U),A)><L,1*U(A,1*C1(U),A,A,A,A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sc2Yo $dApplicative_sc2Yp eta_sc2Yq]
        let {
          sat_sc2Ys [Occ=Once] :: f_ac2aF ()
          [LclId] =
              [$dApplicative_sc2Yp] \u []
                  GHC.Base.pure $dApplicative_sc2Yp GHC.Tuple.(); } in
        let {
          sat_sc2Yr [Occ=Once, Dmd=<L,1*U>] :: GHC.Base.String
          [LclId] =
              [$dShow_sc2Yo eta_sc2Yq] \s []
                  GHC.Show.show $dShow_sc2Yo eta_sc2Yq;
        } in  Debug.Trace.trace sat_sc2Yr sat_sc2Ys;

Debug.Trace.traceStack :: forall a. GHC.Base.String -> a -> a
[GblId, Arity=2, Str=<L,1*U><L,U>, Unf=OtherCon []] =
    [] \r [str_sc2Yt expr_sc2Yu]
        case
            case noDuplicate# [GHC.Prim.realWorld#] of s'_sc2Yv {
              (##) ->
                  case Debug.Trace.putTraceMsg1 str_sc2Yt GHC.Prim.void# of {
                    Unit# _ [Occ=Dead] ->
                        case getCurrentCCS# [GHC.Tuple.() GHC.Prim.void#] of {
                          Unit# addr_sc2YB [Occ=Once] ->
                              case GHC.Stack.CCS.$wgo addr_sc2YB GHC.Types.[] GHC.Prim.void# of {
                                Unit# ipv3_sc2YE [Occ=Once!] ->
                                    case ipv3_sc2YE of wild1_sc2YF {
                                      [] -> Unit# [expr_sc2Yu];
                                      : _ [Occ=Dead] _ [Occ=Dead] ->
                                          let {
                                            sat_sc2YK [Occ=Once, Dmd=<L,1*U>] :: GHC.Base.String
                                            [LclId] =
                                                [wild1_sc2YF] \s []
                                                    let {
                                                      sat_sc2YJ [Occ=Once] :: [GHC.Types.Char]
                                                      [LclId] =
                                                          [wild1_sc2YF] \u []
                                                              case
                                                                  GHC.List.reverse1
                                                                      wild1_sc2YF GHC.Types.[]
                                                              of
                                                              sat_sc2YI
                                                              { __DEFAULT ->
                                                                    GHC.Stack.CCS.renderStack_go
                                                                        sat_sc2YI;
                                                              };
                                                    } in 
                                                      GHC.CString.unpackAppendCString#
                                                          GHC.Stack.CCS.renderStack1 sat_sc2YJ;
                                          } in 
                                            case
                                                Debug.Trace.putTraceMsg1 sat_sc2YK GHC.Prim.void#
                                            of
                                            { Unit# _ [Occ=Dead] -> Unit# [expr_sc2Yu];
                                            };
                                    };
                              };
                        };
                  };
            }
        of
        { Unit# ipv1_sc2YQ [Occ=Once] -> ipv1_sc2YQ;
        };

