
==================== Pre unarise: ====================
2018-03-16 15:58:27.283694009 UTC

GHC.Read.readsPrec
  :: forall a.
     GHC.Read.Read a =>
     GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS a
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SLLL),U(U,A,A,A)>] =
    [] \r [v_s3N5O]
        case v_s3N5O of {
          GHC.Read.C:Read v_s3N5Q [Occ=Once]
                          _ [Occ=Dead]
                          _ [Occ=Dead]
                          _ [Occ=Dead] ->
              v_s3N5Q;
        };

GHC.Read.readList
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadP.ReadS [a]
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LSLL),U(A,U,A,A)>] =
    [] \r [v_s3N5U]
        case v_s3N5U of {
          GHC.Read.C:Read _ [Occ=Dead]
                          v_s3N5X [Occ=Once]
                          _ [Occ=Dead]
                          _ [Occ=Dead] ->
              v_s3N5X;
        };

GHC.Read.readPrec
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadPrec.ReadPrec a
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLSL),U(A,A,U,A)>] =
    [] \r [v_s3N60]
        case v_s3N60 of {
          GHC.Read.C:Read _ [Occ=Dead]
                          _ [Occ=Dead]
                          v_s3N64 [Occ=Once]
                          _ [Occ=Dead] ->
              v_s3N64;
        };

GHC.Read.readListPrec
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadPrec.ReadPrec [a]
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLS),U(A,A,A,U)>] =
    [] \r [v_s3N66]
        case v_s3N66 of {
          GHC.Read.C:Read _ [Occ=Dead]
                          _ [Occ=Dead]
                          _ [Occ=Dead]
                          v_s3N6b [Occ=Once] ->
              v_s3N6b;
        };

$dmreadListPrec1_r3N5i
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        ([a] -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*U(A,1*C(U),A,A)><L,A><L,C(U)>m2,
 Unf=OtherCon []] =
    sat-only [] \r [$dRead_s3N6c n_s3N6d eta_s3N6e]
        let {
          sat_s3N6f [Occ=Once, Dmd=<L,C(U)>]
            :: Text.ParserCombinators.ReadP.ReadS [a_a3K2E]
          [LclId] =
              [$dRead_s3N6c] \u [] GHC.Read.readList $dRead_s3N6c;
        } in 
          case
              Text.ParserCombinators.ReadP.$wreadS_to_P sat_s3N6f eta_s3N6e
          of
          { Unit# ww1_s3N6h [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3N6h];
          };

GHC.Read.$dmreadListPrec
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadPrec.ReadPrec [a]
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*U(A,1*C(U),A,A)><L,A><L,C(U)>m2,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        $dmreadListPrec1_r3N5i eta_B3 eta_B2 eta_B1;

$dmreadPrec1_r3N5j
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*U(1*C1(C(U)),A,A,A)><L,U>,
 Unf=OtherCon []] =
    sat-only [] \r [$dRead_s3N6i eta_s3N6j]
        let {
          w_s3N6k [Occ=OnceL, Dmd=<L,C(U)>]
            :: Text.ParserCombinators.ReadP.ReadS a_X3K6w
          [LclId] =
              [$dRead_s3N6i eta_s3N6j] \u []
                  GHC.Read.readsPrec $dRead_s3N6i eta_s3N6j; } in
        let {
          sat_s3N6o [Occ=Once]
            :: forall b.
               (a_X3K6w -> Text.ParserCombinators.ReadP.P b)
               -> Text.ParserCombinators.ReadP.P b
          [LclId] =
              [w_s3N6k] \r [w1_s3N6l]
                  case
                      Text.ParserCombinators.ReadP.$wreadS_to_P w_s3N6k w1_s3N6l
                  of
                  { Unit# ww1_s3N6n [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Look [ww1_s3N6n];
                  };
        } in  sat_s3N6o;

GHC.Read.$dmreadPrec
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadPrec.ReadPrec a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*U(1*C1(C(U)),A,A,A)><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] $dmreadPrec1_r3N5j eta_B2 eta_B1;

GHC.Read.$dmreadsPrec
  :: forall a.
     GHC.Read.Read a =>
     GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*U(A,A,1*C1(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3N6p eta_s3N6q]
        let {
          sat_s3N6r [Occ=Once] :: Text.ParserCombinators.ReadP.P a_X3K6x
          [LclId] =
              [$dRead_s3N6p eta_s3N6q] \u []
                  GHC.Read.readPrec
                      $dRead_s3N6p
                      eta_s3N6q
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3N6r;

GHC.Read.$fRead()7 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

GHC.Read.readListDefault
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadP.ReadS [a]
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,1*U(A,A,A,1*C1(C1(U)))>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3N6s]
        let {
          sat_s3N6t [Occ=Once] :: Text.ParserCombinators.ReadP.P [a_a3Ksg]
          [LclId] =
              [$dRead_s3N6s] \u []
                  GHC.Read.readListPrec
                      $dRead_s3N6s
                      GHC.Read.$fRead()7
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3N6t;

GHC.Read.lex1 :: Text.ParserCombinators.ReadP.P GHC.Base.String
[GblId] =
    [] \u []
        case
            Text.Read.Lex.$whsLex
                Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
        of
        { Unit# ww1_s3N6v [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3N6v];
        };

GHC.Read.lex :: Text.ParserCombinators.ReadP.ReadS GHC.Base.String
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [s_s3N6w]
        Text.ParserCombinators.ReadP.run GHC.Read.lex1 s_s3N6w;

GHC.Read.readParen1 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     a
     -> GHC.Base.String
     -> [(a, GHC.Base.String)]
     -> [(a, GHC.Base.String)]
[GblId, Arity=3, Str=<L,U><L,U><L,U>, Unf=OtherCon []] =
    [] \r [ww_s3N6x ww1_s3N6y w_s3N6z]
        let {
          go_s3N6A [Occ=LoopBreaker]
            :: [(GHC.Base.String, GHC.Base.String)]
               -> [(a_a3Ksn, GHC.Base.String)]
          [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
              sat-only [ww_s3N6x w_s3N6z go_s3N6A] \r [ds_s3N6B]
                  case ds_s3N6B of {
                    [] -> w_s3N6z;
                    : y_s3N6D [Occ=Once!] ys_s3N6E [Occ=Once*] ->
                        case y_s3N6D of {
                          (,) ds1_s3N6G [Occ=Once!] u_s3N6H [Occ=Once] ->
                              case ds1_s3N6G of {
                                [] -> go_s3N6A ys_s3N6E;
                                : ds2_s3N6J [Occ=Once!] ds3_s3N6K [Occ=Once!] ->
                                    case ds2_s3N6J of {
                                      GHC.Types.C# ds4_s3N6M [Occ=Once!] ->
                                          case ds4_s3N6M of {
                                            __DEFAULT -> go_s3N6A ys_s3N6E;
                                            ')'# ->
                                                case ds3_s3N6K of {
                                                  [] ->
                                                      let {
                                                        sat_s3N6Q [Occ=Once]
                                                          :: [(a_a3Ksn, GHC.Base.String)]
                                                        [LclId] =
                                                            [go_s3N6A ys_s3N6E] \u []
                                                                go_s3N6A ys_s3N6E; } in
                                                      let {
                                                        sat_s3N6P [Occ=Once]
                                                          :: (a_a3Ksn, GHC.Base.String)
                                                        [LclId] =
                                                            CCCS (,)! [ww_s3N6x u_s3N6H];
                                                      } in  : [sat_s3N6P sat_s3N6Q];
                                                  : _ [Occ=Dead] _ [Occ=Dead] -> go_s3N6A ys_s3N6E;
                                                };
                                          };
                                    };
                              };
                        };
                  };
        } in 
          case
              Text.ParserCombinators.ReadP.run GHC.Read.lex1 ww1_s3N6y
          of
          sat_s3N6T
          { __DEFAULT -> go_s3N6A sat_s3N6T;
          };

GHC.Read.readParen
  :: forall a.
     GHC.Types.Bool
     -> Text.ParserCombinators.ReadP.ReadS a
     -> Text.ParserCombinators.ReadP.ReadS a
[GblId, Arity=3, Str=<S,1*U><L,C(U)><L,U>, Unf=OtherCon []] =
    [] \r [b_s3N6U g_s3N6V eta_s3N6W]
        let {
          go_s3N6X [Occ=LoopBreaker]
            :: [(GHC.Base.String, GHC.Base.String)]
               -> [(a_a3Ksn, GHC.Base.String)]
          [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
              sat-only [g_s3N6V go_s3N6X] \r [ds_s3N6Y]
                  case ds_s3N6Y of {
                    [] -> [] [];
                    : y_s3N70 [Occ=Once!] ys_s3N71 [Occ=Once*] ->
                        case y_s3N70 of {
                          (,) ds1_s3N73 [Occ=Once!] s_s3N74 ->
                              case ds1_s3N73 of {
                                [] -> go_s3N6X ys_s3N71;
                                : ds2_s3N76 [Occ=Once!] ds3_s3N77 [Occ=Once!] ->
                                    case ds2_s3N76 of {
                                      GHC.Types.C# ds4_s3N79 [Occ=Once!] ->
                                          case ds4_s3N79 of {
                                            __DEFAULT -> go_s3N6X ys_s3N71;
                                            '('# ->
                                                case ds3_s3N77 of {
                                                  [] ->
                                                      let {
                                                        z_s3N7c [Occ=OnceL]
                                                          :: [(a_a3Ksn, GHC.Base.String)]
                                                        [LclId] =
                                                            [go_s3N6X ys_s3N71 s_s3N74] \u []
                                                                let {
                                                                  z1_s3N7d [Occ=OnceL]
                                                                    :: [(a_a3Ksn, GHC.Base.String)]
                                                                  [LclId] =
                                                                      [go_s3N6X ys_s3N71] \u []
                                                                          go_s3N6X ys_s3N71; } in
                                                                let {
                                                                  go1_s3N7e [Occ=LoopBreaker]
                                                                    :: [(a_a3Ksn, GHC.Base.String)]
                                                                       -> [(a_a3Ksn,
                                                                            GHC.Base.String)]
                                                                  [LclId,
                                                                   Arity=1,
                                                                   Str=<S,1*U>,
                                                                   Unf=OtherCon []] =
                                                                      sat-only [z1_s3N7d
                                                                                go1_s3N7e] \r [ds6_s3N7f]
                                                                          case ds6_s3N7f of {
                                                                            [] -> z1_s3N7d;
                                                                            : y1_s3N7h [Occ=Once!]
                                                                              ys1_s3N7i [Occ=Once] ->
                                                                                case y1_s3N7h of {
                                                                                  (,) ww1_s3N7k [Occ=Once]
                                                                                      ww2_s3N7l [Occ=Once] ->
                                                                                      let {
                                                                                        sat_s3N7m [Occ=Once]
                                                                                          :: [(a_a3Ksn,
                                                                                               GHC.Base.String)]
                                                                                        [LclId] =
                                                                                            [go1_s3N7e
                                                                                             ys1_s3N7i] \u []
                                                                                                go1_s3N7e
                                                                                                    ys1_s3N7i;
                                                                                      } in 
                                                                                        GHC.Read.readParen1
                                                                                            ww1_s3N7k
                                                                                            ww2_s3N7l
                                                                                            sat_s3N7m;
                                                                                };
                                                                          };
                                                                } in 
                                                                  case
                                                                      Text.ParserCombinators.ReadP.run
                                                                          GHC.Read.lex1 s_s3N74
                                                                  of
                                                                  sat_s3N7n
                                                                  { __DEFAULT ->
                                                                        case
                                                                            go_s3N6X sat_s3N7n
                                                                        of
                                                                        sat_s3N7o
                                                                        { __DEFAULT ->
                                                                              go1_s3N7e sat_s3N7o;
                                                                        };
                                                                  }; } in
                                                      let {
                                                        go1_s3N7p [Occ=LoopBreaker]
                                                          :: [(a_a3Ksn, GHC.Base.String)]
                                                             -> [(a_a3Ksn, GHC.Base.String)]
                                                        [LclId,
                                                         Arity=1,
                                                         Str=<S,1*U>,
                                                         Unf=OtherCon []] =
                                                            sat-only [z_s3N7c
                                                                      go1_s3N7p] \r [ds6_s3N7q]
                                                                case ds6_s3N7q of {
                                                                  [] -> z_s3N7c;
                                                                  : y1_s3N7s [Occ=Once!]
                                                                    ys1_s3N7t [Occ=Once] ->
                                                                      case y1_s3N7s of {
                                                                        (,) ww1_s3N7v [Occ=Once]
                                                                            ww2_s3N7w [Occ=Once] ->
                                                                            let {
                                                                              sat_s3N7x [Occ=Once]
                                                                                :: [(a_a3Ksn,
                                                                                     GHC.Base.String)]
                                                                              [LclId] =
                                                                                  [go1_s3N7p
                                                                                   ys1_s3N7t] \u []
                                                                                      go1_s3N7p
                                                                                          ys1_s3N7t;
                                                                            } in 
                                                                              GHC.Read.readParen1
                                                                                  ww1_s3N7v
                                                                                  ww2_s3N7w
                                                                                  sat_s3N7x;
                                                                      };
                                                                };
                                                      } in 
                                                        case g_s3N6V s_s3N74 of sat_s3N7y {
                                                          __DEFAULT -> go1_s3N7p sat_s3N7y;
                                                        };
                                                  : _ [Occ=Dead] _ [Occ=Dead] -> go_s3N6X ys_s3N71;
                                                };
                                          };
                                    };
                              };
                        };
                  };
        } in 
          case b_s3N6U of {
            GHC.Types.False ->
                let {
                  sat_s3N7E [Occ=Once, Dmd=<L,1*U>] :: [(a_a3Ksn, GHC.Base.String)]
                  [LclId] =
                      [eta_s3N6W go_s3N6X] \s []
                          case
                              Text.ParserCombinators.ReadP.run GHC.Read.lex1 eta_s3N6W
                          of
                          sat_s3N7D
                          { __DEFAULT -> go_s3N6X sat_s3N7D;
                          };
                } in 
                  case g_s3N6V eta_s3N6W of sat_s3N7C {
                    __DEFAULT -> GHC.Base.++ sat_s3N7C sat_s3N7E;
                  };
            GHC.Types.True ->
                case
                    Text.ParserCombinators.ReadP.run GHC.Read.lex1 eta_s3N6W
                of
                sat_s3N7F
                { __DEFAULT -> go_s3N6X sat_s3N7F;
                };
          };

GHC.Read.readLitChar1
  :: Text.ParserCombinators.ReadP.P GHC.Types.Char
[GblId] =
    [] \u []
        case
            Text.Read.Lex.$wlexChar
                Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
        of
        { Unit# ww1_s3N7H [Occ=Once] ->
              Text.ParserCombinators.ReadP.Get [ww1_s3N7H];
        };

GHC.Read.readLitChar
  :: Text.ParserCombinators.ReadP.ReadS GHC.Types.Char
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.readLitChar1 eta_B1;

GHC.Read.$www1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Char# -> Text.ParserCombinators.ReadP.P GHC.Base.String
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [ww_s3N7I]
        case ord# [ww_s3N7I] of sat_s3N7J {
          __DEFAULT ->
              case -# [sat_s3N7J 48#] of sat_s3N7K {
                __DEFAULT ->
                    case int2Word# [sat_s3N7K] of sat_s3N7L {
                      __DEFAULT ->
                          case leWord# [sat_s3N7L 9##] of {
                            __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                            1# ->
                                let {
                                  wild_s3N7N [Occ=OnceL] :: GHC.Types.Char
                                  [LclId, Unf=OtherCon []] =
                                      CCCS GHC.Types.C#! [ww_s3N7I]; } in
                                let {
                                  sat_s3N7Q [Occ=Once]
                                    :: GHC.Base.String
                                       -> Text.ParserCombinators.ReadP.P GHC.Base.String
                                  [LclId] =
                                      [wild_s3N7N] \r [a1_s3N7O]
                                          let {
                                            sat_s3N7P [Occ=Once] :: GHC.Base.String
                                            [LclId] =
                                                CCCS :! [wild_s3N7N a1_s3N7O];
                                          } in 
                                            Text.ParserCombinators.ReadP.Result [sat_s3N7P
                                                                                 Text.ParserCombinators.ReadP.Fail];
                                } in 
                                  case
                                      Text.ParserCombinators.ReadP.$wmunch
                                          GHC.Unicode.isDigit sat_s3N7Q
                                  of
                                  { Unit# ww2_s3N7S [Occ=Once] ->
                                        Text.ParserCombinators.ReadP.Look [ww2_s3N7S];
                                  };
                          };
                    };
              };
        };

GHC.Read.lexDigits_ww1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P GHC.Base.String
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [w_s3N7T]
        case w_s3N7T of {
          GHC.Types.C# ww1_s3N7V [Occ=Once] -> GHC.Read.$www1 ww1_s3N7V;
        };

GHC.Read.lexDigits1
  :: Text.ParserCombinators.ReadP.P GHC.Base.String
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE Text.ParserCombinators.ReadP.Get! [GHC.Read.lexDigits_ww1];

GHC.Read.lexDigits
  :: Text.ParserCombinators.ReadP.ReadS GHC.Base.String
[GblId, Arity=1, Caf=NoCafRefs, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.lexDigits1 eta_B1;

GHC.Read.$fReadLexeme1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        (Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=2, Str=<L,A><L,U>m2, Unf=OtherCon []] =
    [] \r [ds_s3N7W eta_s3N7X] Text.Read.Lex.lex1 eta_s3N7X;

GHC.Read.lexP
  :: Text.ParserCombinators.ReadPrec.ReadPrec Text.Read.Lex.Lexeme
[GblId, Arity=2, Str=<L,A><L,U>m2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Read.$fReadLexeme1 eta_B2 eta_B1;

GHC.Read.$fReadChar4
  :: forall b. GHC.Base.String -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [a3_s3N7Y]
        case a3_s3N7Y of {
          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
        };

GHC.Read.$fReadChar3 :: forall b. Text.ParserCombinators.ReadP.P b
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE Text.ParserCombinators.ReadP.Look! [GHC.Read.$fReadChar4];

GHC.Read.$fReadGeneralCategory36
  :: forall a.
     (GHC.Base.String, Text.ParserCombinators.ReadPrec.ReadPrec a)
     -> Text.ParserCombinators.ReadPrec.ReadPrec a
     -> Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP a
[GblId,
 Arity=3,
 Str=<L,U(U,C(C1(U)))><L,1*C1(C(U))><L,U>,
 Unf=OtherCon []] =
    [] \r [x_s3N80 eta_s3N81 eta1_s3N82]
        let {
          ds3_s3N83 [Occ=OnceL, Dmd=<L,C(U)>]
            :: Text.ParserCombinators.ReadP.ReadP a_a3Kqu
          [LclId] =
              [eta_s3N81 eta1_s3N82] \u [] eta_s3N81 eta1_s3N82; } in
        let {
          sat_s3N8o [Occ=Once]
            :: forall b.
               (a_a3Kqu -> Text.ParserCombinators.ReadP.P b)
               -> Text.ParserCombinators.ReadP.P b
          [LclId] =
              [x_s3N80 eta1_s3N82 ds3_s3N83] \r [k_s3N84]
                  case x_s3N80 of {
                    (,) s_s3N86 [Occ=OnceL*] p_s3N87 ->
                        let {
                          lvl116_s3N88 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b_a3nvJ
                          [LclId] =
                              [eta1_s3N82 k_s3N84 s_s3N86 p_s3N87] \u []
                                  let {
                                    sat_s3N8h [Occ=Once] :: Text.ParserCombinators.ReadP.P b_a3nvJ
                                    [LclId] =
                                        [eta1_s3N82 k_s3N84 s_s3N86 p_s3N87] \u []
                                            let {
                                              lvl2_s3N89 [Occ=OnceL*]
                                                :: Text.ParserCombinators.ReadP.P b_a3nvJ
                                              [LclId] =
                                                  [eta1_s3N82 k_s3N84 p_s3N87] \u []
                                                      p_s3N87 eta1_s3N82 k_s3N84; } in
                                            let {
                                              sat_s3N8g [Occ=Once]
                                                :: Text.Read.Lex.Lexeme
                                                   -> Text.ParserCombinators.ReadP.P b_a3nvJ
                                              [LclId] =
                                                  [s_s3N86 lvl2_s3N89] \r [a1_s3N8a]
                                                      case a1_s3N8a of {
                                                        __DEFAULT ->
                                                            Text.ParserCombinators.ReadP.Fail [];
                                                        Text.Read.Lex.Ident s'_s3N8c [Occ=Once] ->
                                                            case
                                                                GHC.Base.eqString s_s3N86 s'_s3N8c
                                                            of
                                                            { GHC.Types.False ->
                                                                  Text.ParserCombinators.ReadP.Fail [];
                                                              GHC.Types.True -> lvl2_s3N89;
                                                            };
                                                        Text.Read.Lex.Symbol s'_s3N8e [Occ=Once] ->
                                                            case
                                                                GHC.Base.eqString s_s3N86 s'_s3N8e
                                                            of
                                                            { GHC.Types.False ->
                                                                  Text.ParserCombinators.ReadP.Fail [];
                                                              GHC.Types.True -> lvl2_s3N89;
                                                            };
                                                      };
                                            } in  Text.Read.Lex.expect2 sat_s3N8g;
                                  } in 
                                    Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                        GHC.Read.$fReadChar3 sat_s3N8h; } in
                        let {
                          k1_s3N8i [Occ=OnceL, Dmd=<L,C(U)>]
                            :: () -> Text.ParserCombinators.ReadP.P b_a3nvJ
                          [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
                              [lvl116_s3N88] \r [a3_s3N8j] lvl116_s3N88; } in
                        let {
                          sat_s3N8n [Occ=Once] :: Text.ParserCombinators.ReadP.P b_a3nvJ
                          [LclId] =
                              [ds3_s3N83 k_s3N84] \u [] ds3_s3N83 k_s3N84; } in
                        let {
                          sat_s3N8l [Occ=Once]
                            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b_a3nvJ
                          [LclId] =
                              [k1_s3N8i] \r [a1_s3N8k]
                                  Text.ParserCombinators.ReadP.skipSpaces2 a1_s3N8k k1_s3N8i; } in
                        let {
                          sat_s3N8m [Occ=Once] :: Text.ParserCombinators.ReadP.P b_a3nvJ
                          [LclId] =
                              CCCS Text.ParserCombinators.ReadP.Look! [sat_s3N8l];
                        } in 
                          Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                              sat_s3N8m sat_s3N8n;
                  };
        } in  sat_s3N8o;

lvl_r3N5k
  :: forall a b.
     (a -> Text.ParserCombinators.ReadP.P b)
     -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []] =
    [] \r [eta_s3N8p] Text.ParserCombinators.ReadP.Fail [];

GHC.Read.choose2 [Occ=LoopBreaker]
  :: forall a.
     [(GHC.Base.String, Text.ParserCombinators.ReadPrec.ReadPrec a)]
     -> Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP a
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ds_s3N8q eta_s3N8r]
        case ds_s3N8q of {
          [] -> lvl_r3N5k;
          : y_s3N8t [Occ=Once] ys_s3N8u [Occ=OnceL] ->
              let {
                sat_s3N8v [Occ=Once]
                  :: Text.ParserCombinators.ReadPrec.ReadPrec a_a3Kqu
                [LclId] =
                    [ys_s3N8u] \r [eta_B1] GHC.Read.choose2 ys_s3N8u eta_B1;
              } in  GHC.Read.$fReadGeneralCategory36 y_s3N8t sat_s3N8v eta_s3N8r;
        };

GHC.Read.choose1
  :: forall a.
     [(GHC.Base.String, Text.ParserCombinators.ReadPrec.ReadPrec a)]
     -> Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP a
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [sps_s3N8w eta_s3N8x] GHC.Read.choose2 sps_s3N8w eta_s3N8x;

GHC.Read.choose
  :: forall a.
     [(GHC.Base.String, Text.ParserCombinators.ReadPrec.ReadPrec a)]
     -> Text.ParserCombinators.ReadPrec.ReadPrec a
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Read.choose1 eta_B2 eta_B1;

GHC.Read.expectP1
  :: Text.Read.Lex.Lexeme
     -> Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (() -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=3, Str=<L,U><L,A><L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [lexeme_s3N8y eta_s3N8z eta1_s3N8A]
        Text.Read.Lex.expect1 lexeme_s3N8y eta1_s3N8A;

GHC.Read.expectP
  :: Text.Read.Lex.Lexeme
     -> Text.ParserCombinators.ReadPrec.ReadPrec ()
[GblId, Arity=3, Str=<L,U><L,A><L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.Read.expectP1 eta_B3 eta_B2 eta_B1;

GHC.Read.readField3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "="#;

GHC.Read.readField2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Read.readField3;

GHC.Read.readField_lexeme :: Text.Read.Lex.Lexeme
[GblId, Str=m3, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Punc! [GHC.Read.readField2];

GHC.Read.$wreadField [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Base.String
     -> Text.ParserCombinators.ReadPrec.ReadPrec a
     -> Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> (# GHC.Base.String -> Text.ParserCombinators.ReadP.P b #)
[GblId,
 Arity=4,
 Str=<L,U><L,1*C1(C1(U))><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [w_s3N8B w1_s3N8C w2_s3N8D w3_s3N8E]
        let {
          sat_s3N8L [Occ=Once]
            :: () -> Text.ParserCombinators.ReadP.P b_s3MnQ
          [LclId] =
              [w1_s3N8C w2_s3N8D w3_s3N8E] \r [a1_s3N8G]
                  let {
                    sat_s3N8I [Occ=Once]
                      :: () -> Text.ParserCombinators.ReadP.P b_s3MnQ
                    [LclId] =
                        [w1_s3N8C w2_s3N8D w3_s3N8E] \r [a2_s3N8H]
                            w1_s3N8C w2_s3N8D w3_s3N8E;
                  } in 
                    case
                        Text.Read.Lex.$wexpect GHC.Read.readField_lexeme sat_s3N8I
                    of
                    { Unit# ww1_s3N8K [Occ=Once] ->
                          Text.ParserCombinators.ReadP.Look [ww1_s3N8K];
                    }; } in
        let {
          sat_s3N8F [Occ=Once] :: Text.Read.Lex.Lexeme
          [LclId] =
              CCCS Text.Read.Lex.Ident! [w_s3N8B];
        } in  Text.Read.Lex.$wexpect sat_s3N8F sat_s3N8L;

GHC.Read.readField1 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Base.String
     -> Text.ParserCombinators.ReadPrec.ReadPrec a
     -> Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=4,
 Str=<L,U><L,1*C1(C1(U))><L,U><L,U>m2,
 Unf=OtherCon []] =
    [] \r [w_s3N8M w1_s3N8N w2_s3N8O w3_s3N8P]
        case GHC.Read.$wreadField w_s3N8M w1_s3N8N w2_s3N8O w3_s3N8P of {
          Unit# ww1_s3N8R [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3N8R];
        };

GHC.Read.readField [InlPrag=NOINLINE]
  :: forall a.
     GHC.Base.String
     -> Text.ParserCombinators.ReadPrec.ReadPrec a
     -> Text.ParserCombinators.ReadPrec.ReadPrec a
[GblId,
 Arity=4,
 Str=<L,U><L,1*C1(C1(U))><L,U><L,U>m2,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.Read.readField1 eta_B4 eta_B3 eta_B2 eta_B1;

GHC.Read.readSymField5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "("#;

GHC.Read.readSymField4 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Read.readSymField5;

GHC.Read.readSymField_lexeme1 :: Text.Read.Lex.Lexeme
[GblId, Str=m3, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Punc! [GHC.Read.readSymField4];

GHC.Read.readSymField3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ")"#;

GHC.Read.readSymField2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Read.readSymField3;

GHC.Read.readSymField_lexeme :: Text.Read.Lex.Lexeme
[GblId, Str=m3, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Punc! [GHC.Read.readSymField2];

GHC.Read.$wreadSymField [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Base.String
     -> Text.ParserCombinators.ReadPrec.ReadPrec a
     -> Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> (# GHC.Base.String -> Text.ParserCombinators.ReadP.P b #)
[GblId,
 Arity=4,
 Str=<L,U><L,1*C1(C1(U))><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [w_s3N8S w1_s3N8T w2_s3N8U w3_s3N8V]
        let {
          sat_s3N9a [Occ=Once]
            :: () -> Text.ParserCombinators.ReadP.P b_s3Mo0
          [LclId] =
              [w_s3N8S w1_s3N8T w2_s3N8U w3_s3N8V] \r [a1_s3N8W]
                  let {
                    sat_s3N97 [Occ=Once]
                      :: () -> Text.ParserCombinators.ReadP.P b_s3Mo0
                    [LclId] =
                        [w1_s3N8T w2_s3N8U w3_s3N8V] \r [a2_s3N8Y]
                            let {
                              sat_s3N94 [Occ=Once]
                                :: () -> Text.ParserCombinators.ReadP.P b_s3Mo0
                              [LclId] =
                                  [w1_s3N8T w2_s3N8U w3_s3N8V] \r [a3_s3N8Z]
                                      let {
                                        sat_s3N91 [Occ=Once]
                                          :: () -> Text.ParserCombinators.ReadP.P b_s3Mo0
                                        [LclId] =
                                            [w1_s3N8T w2_s3N8U w3_s3N8V] \r [a4_s3N90]
                                                w1_s3N8T w2_s3N8U w3_s3N8V;
                                      } in 
                                        case
                                            Text.Read.Lex.$wexpect
                                                GHC.Read.readField_lexeme sat_s3N91
                                        of
                                        { Unit# ww1_s3N93 [Occ=Once] ->
                                              Text.ParserCombinators.ReadP.Look [ww1_s3N93];
                                        };
                            } in 
                              case
                                  Text.Read.Lex.$wexpect GHC.Read.readSymField_lexeme sat_s3N94
                              of
                              { Unit# ww1_s3N96 [Occ=Once] ->
                                    Text.ParserCombinators.ReadP.Look [ww1_s3N96];
                              }; } in
                  let {
                    sat_s3N8X [Occ=Once] :: Text.Read.Lex.Lexeme
                    [LclId] =
                        CCCS Text.Read.Lex.Symbol! [w_s3N8S];
                  } in 
                    case Text.Read.Lex.$wexpect sat_s3N8X sat_s3N97 of {
                      Unit# ww1_s3N99 [Occ=Once] ->
                          Text.ParserCombinators.ReadP.Look [ww1_s3N99];
                    };
        } in 
          Text.Read.Lex.$wexpect GHC.Read.readSymField_lexeme1 sat_s3N9a;

GHC.Read.readSymField1 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Base.String
     -> Text.ParserCombinators.ReadPrec.ReadPrec a
     -> Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=4,
 Str=<L,U><L,1*C1(C1(U))><L,U><L,U>m2,
 Unf=OtherCon []] =
    [] \r [w_s3N9b w1_s3N9c w2_s3N9d w3_s3N9e]
        case
            GHC.Read.$wreadSymField w_s3N9b w1_s3N9c w2_s3N9d w3_s3N9e
        of
        { Unit# ww1_s3N9g [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3N9g];
        };

GHC.Read.readSymField [InlPrag=NOINLINE]
  :: forall a.
     GHC.Base.String
     -> Text.ParserCombinators.ReadPrec.ReadPrec a
     -> Text.ParserCombinators.ReadPrec.ReadPrec a
[GblId,
 Arity=4,
 Str=<L,U><L,1*C1(C1(U))><L,U><L,U>m2,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.Read.readSymField1 eta_B4 eta_B3 eta_B2 eta_B1;

GHC.Read.$fRead(,)4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ","#;

GHC.Read.$fRead(,)3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Read.$fRead(,)4;

GHC.Read.$fRead(,)_lexeme :: Text.Read.Lex.Lexeme
[GblId, Str=m3, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Punc! [GHC.Read.$fRead(,)3];

GHC.Read.$fRead(,)2
  :: forall a b.
     (GHC.Read.Read a, GHC.Read.Read b) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP (a, b)
[GblId,
 Arity=3,
 Str=<L,1*U(A,A,1*C1(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3N9h $dRead1_s3N9i eta_s3N9j]
        let {
          ds1_s3N9k [Occ=OnceL, Dmd=<L,C(U)>]
            :: Text.ParserCombinators.ReadP.ReadP a_a3KnF
          [LclId] =
              [$dRead_s3N9h eta_s3N9j] \u []
                  GHC.Read.readPrec $dRead_s3N9h eta_s3N9j; } in
        let {
          sat_s3N9v [Occ=Once]
            :: forall b1.
               ((a_a3KnF, b_a3KnG) -> Text.ParserCombinators.ReadP.P b1)
               -> Text.ParserCombinators.ReadP.P b1
          [LclId] =
              [$dRead1_s3N9i eta_s3N9j ds1_s3N9k] \r [k1_s3N9l]
                  let {
                    sat_s3N9u [Occ=Once]
                      :: a_a3KnF -> Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId] =
                        [$dRead1_s3N9i eta_s3N9j k1_s3N9l] \r [a1_s3N9m]
                            let {
                              sat_s3N9r [Occ=Once]
                                :: () -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [$dRead1_s3N9i eta_s3N9j k1_s3N9l a1_s3N9m] \r [a2_s3N9n]
                                      let {
                                        sat_s3N9q [Occ=Once]
                                          :: b_a3KnG -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            [k1_s3N9l a1_s3N9m] \r [a3_s3N9o]
                                                let {
                                                  sat_s3N9p [Occ=Once] :: (a_a3KnF, b_a3KnG)
                                                  [LclId] =
                                                      CCCS (,)! [a1_s3N9m a3_s3N9o];
                                                } in  k1_s3N9l sat_s3N9p;
                                      } in  GHC.Read.readPrec $dRead1_s3N9i eta_s3N9j sat_s3N9q;
                            } in 
                              case
                                  Text.Read.Lex.$wexpect GHC.Read.$fRead(,)_lexeme sat_s3N9r
                              of
                              { Unit# ww1_s3N9t [Occ=Once] ->
                                    Text.ParserCombinators.ReadP.Look [ww1_s3N9t];
                              };
                  } in  ds1_s3N9k sat_s3N9u;
        } in  sat_s3N9v;

GHC.Read.$fRead(,,,)2
  :: forall a b c d.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP (a, b, c, d)
[GblId,
 Arity=5,
 Str=<L,1*U(A,A,1*C1(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3N9w
           $dRead1_s3N9x
           $dRead2_s3N9y
           $dRead3_s3N9z
           eta_s3N9A]
        let {
          ds1_s3N9B [Occ=OnceL, Dmd=<L,C(U)>]
            :: Text.ParserCombinators.ReadP.ReadP (a_a3Ko6, b_a3Ko7)
          [LclId] =
              [$dRead_s3N9w $dRead1_s3N9x eta_s3N9A] \u []
                  GHC.Read.$fRead(,)2 $dRead_s3N9w $dRead1_s3N9x eta_s3N9A; } in
        let {
          sat_s3N9S [Occ=Once]
            :: forall b1.
               ((a_a3Ko6, b_a3Ko7, c_a3Ko8, d_a3Ko9)
                -> Text.ParserCombinators.ReadP.P b1)
               -> Text.ParserCombinators.ReadP.P b1
          [LclId] =
              [$dRead2_s3N9y $dRead3_s3N9z eta_s3N9A ds1_s3N9B] \r [k1_s3N9C]
                  let {
                    sat_s3N9R [Occ=Once]
                      :: (a_a3Ko6, b_a3Ko7) -> Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId] =
                        [$dRead2_s3N9y $dRead3_s3N9z eta_s3N9A k1_s3N9C] \r [a1_s3N9D]
                            case a1_s3N9D of {
                              (,) a2_s3N9F [Occ=OnceL] b2_s3N9G [Occ=OnceL] ->
                                  let {
                                    sat_s3N9O [Occ=Once]
                                      :: () -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                    [LclId] =
                                        [$dRead2_s3N9y
                                         $dRead3_s3N9z
                                         eta_s3N9A
                                         k1_s3N9C
                                         a2_s3N9F
                                         b2_s3N9G] \r [a3_s3N9H]
                                            let {
                                              sat_s3N9N [Occ=Once]
                                                :: (c_a3Ko8, d_a3Ko9)
                                                   -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                              [LclId] =
                                                  [k1_s3N9C a2_s3N9F b2_s3N9G] \r [a4_s3N9I]
                                                      case a4_s3N9I of {
                                                        (,) c1_s3N9K [Occ=Once]
                                                            d1_s3N9L [Occ=Once] ->
                                                            let {
                                                              sat_s3N9M [Occ=Once]
                                                                :: (a_a3Ko6, b_a3Ko7, c_a3Ko8,
                                                                    d_a3Ko9)
                                                              [LclId] =
                                                                  CCCS (,,,)! [a2_s3N9F
                                                                               b2_s3N9G
                                                                               c1_s3N9K
                                                                               d1_s3N9L];
                                                            } in  k1_s3N9C sat_s3N9M;
                                                      };
                                            } in 
                                              GHC.Read.$fRead(,)2
                                                  $dRead2_s3N9y $dRead3_s3N9z eta_s3N9A sat_s3N9N;
                                  } in 
                                    case
                                        Text.Read.Lex.$wexpect GHC.Read.$fRead(,)_lexeme sat_s3N9O
                                    of
                                    { Unit# ww1_s3N9Q [Occ=Once] ->
                                          Text.ParserCombinators.ReadP.Look [ww1_s3N9Q];
                                    };
                            };
                  } in  ds1_s3N9B sat_s3N9R;
        } in  sat_s3N9S;

GHC.Read.$fRead(,,,,,,,)2
  :: forall a b c d e f g h.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP (a, b, c, d, e, f, g, h)
[GblId,
 Arity=9,
 Str=<L,1*U(A,A,1*C1(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3N9T
           $dRead1_s3N9U
           $dRead2_s3N9V
           $dRead3_s3N9W
           $dRead4_s3N9X
           $dRead5_s3N9Y
           $dRead6_s3N9Z
           $dRead7_s3Na0
           eta_s3Na1]
        let {
          ds1_s3Na2 [Occ=OnceL, Dmd=<L,C(U)>]
            :: Text.ParserCombinators.ReadP.ReadP
                 (a_a3KoH, b_a3KoI, c_a3KoJ, d_a3KoK)
          [LclId] =
              [$dRead_s3N9T
               $dRead1_s3N9U
               $dRead2_s3N9V
               $dRead3_s3N9W
               eta_s3Na1] \u []
                  GHC.Read.$fRead(,,,)2
                      $dRead_s3N9T
                      $dRead1_s3N9U
                      $dRead2_s3N9V
                      $dRead3_s3N9W
                      eta_s3Na1; } in
        let {
          sat_s3Nan [Occ=Once]
            :: forall b1.
               ((a_a3KoH, b_a3KoI, c_a3KoJ, d_a3KoK, e_a3KoL, f_a3KoM, g_a3KoN,
                 h_a3KoO)
                -> Text.ParserCombinators.ReadP.P b1)
               -> Text.ParserCombinators.ReadP.P b1
          [LclId] =
              [$dRead4_s3N9X
               $dRead5_s3N9Y
               $dRead6_s3N9Z
               $dRead7_s3Na0
               eta_s3Na1
               ds1_s3Na2] \r [k1_s3Na3]
                  let {
                    sat_s3Nam [Occ=Once]
                      :: (a_a3KoH, b_a3KoI, c_a3KoJ, d_a3KoK)
                         -> Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId] =
                        [$dRead4_s3N9X
                         $dRead5_s3N9Y
                         $dRead6_s3N9Z
                         $dRead7_s3Na0
                         eta_s3Na1
                         k1_s3Na3] \r [a1_s3Na4]
                            case a1_s3Na4 of {
                              (,,,) a2_s3Na6 [Occ=OnceL]
                                    b2_s3Na7 [Occ=OnceL]
                                    c1_s3Na8 [Occ=OnceL]
                                    d1_s3Na9 [Occ=OnceL] ->
                                  let {
                                    sat_s3Naj [Occ=Once]
                                      :: () -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                    [LclId] =
                                        [$dRead4_s3N9X
                                         $dRead5_s3N9Y
                                         $dRead6_s3N9Z
                                         $dRead7_s3Na0
                                         eta_s3Na1
                                         k1_s3Na3
                                         a2_s3Na6
                                         b2_s3Na7
                                         c1_s3Na8
                                         d1_s3Na9] \r [a3_s3Naa]
                                            let {
                                              sat_s3Nai [Occ=Once]
                                                :: (e_a3KoL, f_a3KoM, g_a3KoN, h_a3KoO)
                                                   -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                              [LclId] =
                                                  [k1_s3Na3
                                                   a2_s3Na6
                                                   b2_s3Na7
                                                   c1_s3Na8
                                                   d1_s3Na9] \r [a4_s3Nab]
                                                      case a4_s3Nab of {
                                                        (,,,) e1_s3Nad [Occ=Once]
                                                              f1_s3Nae [Occ=Once]
                                                              g1_s3Naf [Occ=Once]
                                                              h1_s3Nag [Occ=Once] ->
                                                            let {
                                                              sat_s3Nah [Occ=Once]
                                                                :: (a_a3KoH, b_a3KoI, c_a3KoJ,
                                                                    d_a3KoK, e_a3KoL, f_a3KoM,
                                                                    g_a3KoN, h_a3KoO)
                                                              [LclId] =
                                                                  CCCS (,,,,,,,)! [a2_s3Na6
                                                                                   b2_s3Na7
                                                                                   c1_s3Na8
                                                                                   d1_s3Na9
                                                                                   e1_s3Nad
                                                                                   f1_s3Nae
                                                                                   g1_s3Naf
                                                                                   h1_s3Nag];
                                                            } in  k1_s3Na3 sat_s3Nah;
                                                      };
                                            } in 
                                              GHC.Read.$fRead(,,,)2
                                                  $dRead4_s3N9X
                                                  $dRead5_s3N9Y
                                                  $dRead6_s3N9Z
                                                  $dRead7_s3Na0
                                                  eta_s3Na1
                                                  sat_s3Nai;
                                  } in 
                                    case
                                        Text.Read.Lex.$wexpect GHC.Read.$fRead(,)_lexeme sat_s3Naj
                                    of
                                    { Unit# ww1_s3Nal [Occ=Once] ->
                                          Text.ParserCombinators.ReadP.Look [ww1_s3Nal];
                                    };
                            };
                  } in  ds1_s3Na2 sat_s3Nam;
        } in  sat_s3Nan;

GHC.Read.$wskipSpacesThenP [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     Text.ParserCombinators.ReadPrec.ReadPrec a
     -> Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> (# GHC.Base.String -> Text.ParserCombinators.ReadP.P b #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [w_s3Nao w1_s3Nap w2_s3Naq]
        let {
          skip_s3Nar [Occ=LoopBreaker]
            :: [GHC.Types.Char]
               -> Text.ParserCombinators.ReadPrec.Prec
               -> forall b1.
                  (a_s3MoF -> Text.ParserCombinators.ReadP.P b1)
                  -> Text.ParserCombinators.ReadP.P b1
          [LclId, Arity=3, Str=<S,1*U><L,U><L,U>, Unf=OtherCon []] =
              sat-only [w_s3Nao skip_s3Nar] \r [ds_s3Nas eta_s3Nat eta1_s3Nau]
                  case ds_s3Nas of {
                    [] -> w_s3Nao eta_s3Nat eta1_s3Nau;
                    : c_s3Naw [Occ=Once!] s_s3Nax [Occ=Once] ->
                        case c_s3Naw of {
                          GHC.Types.C# ww1_s3Naz ->
                              case ord# [ww1_s3Naz] of sat_s3NaB {
                                __DEFAULT ->
                                    case int2Word# [sat_s3NaB] of x_s3NaA [Dmd=<S,U>] {
                                      __DEFAULT ->
                                          let-no-escape {
                                            $j_s3NaC [Occ=Once*T[0], Dmd=<L,1*U>]
                                              :: Text.ParserCombinators.ReadP.P b1_X3nqq
                                            [LclId[JoinId(0)], Unf=OtherCon []] =
                                                [skip_s3Nar eta_s3Nat eta1_s3Nau s_s3Nax] \r []
                                                    let {
                                                      lvl2_s3NaD [Occ=OnceL]
                                                        :: Text.ParserCombinators.ReadP.P b1_X3nqq
                                                      [LclId] =
                                                          [skip_s3Nar
                                                           eta_s3Nat
                                                           eta1_s3Nau
                                                           s_s3Nax] \u []
                                                              let {
                                                                sat_s3NaF [Occ=Once]
                                                                  :: a_s3MoF
                                                                     -> Text.ParserCombinators.ReadP.P
                                                                          b1_X3nqq
                                                                [LclId] =
                                                                    [eta1_s3Nau] \r [a4_s3NaE]
                                                                        eta1_s3Nau a4_s3NaE;
                                                              } in 
                                                                skip_s3Nar
                                                                    s_s3Nax
                                                                    eta_s3Nat
                                                                    sat_s3NaF; } in
                                                    let {
                                                      sat_s3NaH [Occ=Once]
                                                        :: GHC.Types.Char
                                                           -> Text.ParserCombinators.ReadP.P
                                                                b1_X3nqq
                                                      [LclId] =
                                                          [lvl2_s3NaD] \r [x1_s3NaG] lvl2_s3NaD;
                                                    } in 
                                                      Text.ParserCombinators.ReadP.Get [sat_s3NaH];
                                          } in 
                                            case leWord# [x_s3NaA 887##] of {
                                              __DEFAULT ->
                                                  case ord# [ww1_s3Naz] of sat_s3NaK {
                                                    __DEFAULT ->
                                                        case
                                                            __pkg_ccall base-4.11.0.0 [sat_s3NaK
                                                                                       GHC.Prim.realWorld#]
                                                        of
                                                        { (#,#) _ [Occ=Dead]
                                                                ds2_s3NaN [Occ=Once!] ->
                                                              case ds2_s3NaN of {
                                                                __DEFAULT -> $j_s3NaC;
                                                                0# -> w_s3Nao eta_s3Nat eta1_s3Nau;
                                                              };
                                                        };
                                                  };
                                              1# ->
                                                  case x_s3NaA of wild1_s3NaP {
                                                    __DEFAULT ->
                                                        case
                                                            minusWord# [wild1_s3NaP 9##]
                                                        of
                                                        sat_s3NaQ
                                                        { __DEFAULT ->
                                                              case leWord# [sat_s3NaQ 4##] of {
                                                                __DEFAULT ->
                                                                    case wild1_s3NaP of {
                                                                      __DEFAULT ->
                                                                          w_s3Nao
                                                                              eta_s3Nat eta1_s3Nau;
                                                                      160## -> $j_s3NaC;
                                                                    };
                                                                1# -> $j_s3NaC;
                                                              };
                                                        };
                                                    32## -> $j_s3NaC;
                                                  };
                                            };
                                    };
                              };
                        };
                  }; } in
        let {
          sat_s3NaU [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b_s3MoI
          [LclId] =
              [w1_s3Nap w2_s3Naq skip_s3Nar] \r [a1_s3NaT]
                  skip_s3Nar a1_s3NaT w1_s3Nap w2_s3Naq;
        } in  Unit# [sat_s3NaU];

GHC.Read.$fRead()5 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     Text.ParserCombinators.ReadPrec.ReadPrec a
     -> Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><L,U><L,U>m2,
 Unf=OtherCon []] =
    [] \r [w_s3NaV w1_s3NaW w2_s3NaX]
        case GHC.Read.$wskipSpacesThenP w_s3NaV w1_s3NaW w2_s3NaX of {
          Unit# ww1_s3NaZ [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3NaZ];
        };

GHC.Read.$wparen' [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     Text.ParserCombinators.ReadPrec.ReadPrec a
     -> Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> (# GHC.Types.Char -> Text.ParserCombinators.ReadP.P b #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*C1(C1(U))><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [w_s3Nb0 w1_s3Nb1 w2_s3Nb2]
        let {
          lvl2_s3Nb3 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b_s3MoR
          [LclId] =
              [w_s3Nb0 w1_s3Nb1 w2_s3Nb2] \u []
                  let {
                    sat_s3Nbg [Occ=Once]
                      :: a_s3MoO -> Text.ParserCombinators.ReadP.P b_s3MoR
                    [LclId] =
                        [w1_s3Nb1 w2_s3Nb2] \r [a1_s3Nb4]
                            let {
                              sat_s3Nbd [Occ=Once]
                                :: Text.ParserCombinators.ReadPrec.ReadPrec a_s3MoO
                              [LclId] =
                                  [a1_s3Nb4] \r [n_s3Nb5 k1_s3Nb6]
                                      let {
                                        lvl3_s3Nb7 [Occ=OnceL]
                                          :: Text.ParserCombinators.ReadP.P b1_X3nNG
                                        [LclId] =
                                            [a1_s3Nb4 k1_s3Nb6] \u [] k1_s3Nb6 a1_s3Nb4; } in
                                      let {
                                        sat_s3Nbc [Occ=Once]
                                          :: GHC.Types.Char
                                             -> Text.ParserCombinators.ReadP.P b1_X3nNG
                                        [LclId] =
                                            [lvl3_s3Nb7] \r [a2_s3Nb8]
                                                case a2_s3Nb8 of {
                                                  GHC.Types.C# x_s3Nba [Occ=Once!] ->
                                                      case x_s3Nba of {
                                                        __DEFAULT ->
                                                            Text.ParserCombinators.ReadP.Fail [];
                                                        ')'# -> lvl3_s3Nb7;
                                                      };
                                                };
                                      } in  Text.ParserCombinators.ReadP.Get [sat_s3Nbc];
                            } in 
                              case GHC.Read.$wskipSpacesThenP sat_s3Nbd w1_s3Nb1 w2_s3Nb2 of {
                                Unit# ww1_s3Nbf [Occ=Once] ->
                                    Text.ParserCombinators.ReadP.Look [ww1_s3Nbf];
                              };
                  } in 
                    w_s3Nb0 Text.ParserCombinators.ReadPrec.minPrec sat_s3Nbg; } in
        let {
          sat_s3Nbl [Occ=Once]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b_s3MoR
          [LclId] =
              [lvl2_s3Nb3] \r [a1_s3Nbh]
                  case a1_s3Nbh of {
                    GHC.Types.C# x_s3Nbj [Occ=Once!] ->
                        case x_s3Nbj of {
                          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                          '('# -> lvl2_s3Nb3;
                        };
                  };
        } in  Unit# [sat_s3Nbl];

GHC.Read.paren2 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     Text.ParserCombinators.ReadPrec.ReadPrec a
     -> Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*C1(C1(U))><L,U><L,U>m1,
 Unf=OtherCon []] =
    [] \r [w_s3Nbm w1_s3Nbn w2_s3Nbo]
        case GHC.Read.$wparen' w_s3Nbm w1_s3Nbn w2_s3Nbo of {
          Unit# ww1_s3Nbq [Occ=Once] ->
              Text.ParserCombinators.ReadP.Get [ww1_s3Nbq];
        };

GHC.Read.paren1
  :: forall a.
     Text.ParserCombinators.ReadPrec.ReadPrec a
     -> Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><L,U><L,U>m2,
 Unf=OtherCon []] =
    [] \r [p_s3Nbr eta_s3Nbs eta1_s3Nbt]
        let {
          sat_s3Nbu [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec a_a3KmL
          [LclId] =
              [p_s3Nbr] \r [eta_B2 eta_B1] GHC.Read.paren2 p_s3Nbr eta_B2 eta_B1;
        } in 
          case GHC.Read.$wskipSpacesThenP sat_s3Nbu eta_s3Nbs eta1_s3Nbt of {
            Unit# ww1_s3Nbw [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3Nbw];
          };

GHC.Read.paren
  :: forall a.
     Text.ParserCombinators.ReadPrec.ReadPrec a
     -> Text.ParserCombinators.ReadPrec.ReadPrec a
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><L,U><L,U>m2,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] GHC.Read.paren1 eta_B3 eta_B2 eta_B1;

GHC.Read.list3
  :: forall a.
     Text.ParserCombinators.ReadPrec.ReadPrec a
     -> Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=3, Str=<L,C(C(U))><L,U><L,U>, Unf=OtherCon []] =
    [] \r [p_s3Nbx eta_s3Nby eta1_s3Nbz]
        let {
          optional_s3NbA [Occ=OnceL]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> Text.ParserCombinators.ReadP.ReadP a_a3KmP
          [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
              [p_s3Nbx optional1_s3NbB] \r [n_s3NbC]
                  let {
                    ds2_s3NbD [Occ=OnceL, Dmd=<L,C(U)>]
                      :: Text.ParserCombinators.ReadP.ReadP a_a3KmP
                    [LclId] =
                        [p_s3Nbx n_s3NbC] \u [] p_s3Nbx n_s3NbC; } in
                  let {
                    sat_s3NbJ [Occ=Once]
                      :: forall b1.
                         (a_a3KmP -> Text.ParserCombinators.ReadP.P b1)
                         -> Text.ParserCombinators.ReadP.P b1
                    [LclId] =
                        [optional1_s3NbB n_s3NbC ds2_s3NbD] \r [k_s3NbE]
                            let {
                              sat_s3NbI [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_a3nvJ
                              [LclId] =
                                  [optional1_s3NbB n_s3NbC k_s3NbE] \u []
                                      case GHC.Read.$wparen' optional1_s3NbB n_s3NbC k_s3NbE of {
                                        Unit# ww1_s3NbH [Occ=Once] ->
                                            Text.ParserCombinators.ReadP.Get [ww1_s3NbH];
                                      };
                            } in 
                              case ds2_s3NbD k_s3NbE of sat_s3NbF {
                                __DEFAULT ->
                                    Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                        sat_s3NbF sat_s3NbI;
                              };
                  } in  sat_s3NbJ;
          optional1_s3NbB [Occ=LoopBreaker]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> forall b1.
                  (a_a3KmP -> Text.ParserCombinators.ReadP.P b1)
                  -> Text.ParserCombinators.ReadP.P b1
          [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
              [optional_s3NbA] \r [w_s3NbK w1_s3NbL]
                  case
                      GHC.Read.$wskipSpacesThenP optional_s3NbA w_s3NbK w1_s3NbL
                  of
                  { Unit# ww1_s3NbN [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Look [ww1_s3NbN];
                  };
        } in  optional1_s3NbB eta_s3Nby eta1_s3Nbz;

GHC.Read.parens
  :: forall a.
     Text.ParserCombinators.ReadPrec.ReadPrec a
     -> Text.ParserCombinators.ReadPrec.ReadPrec a
[GblId, Arity=3, Str=<L,C(C(U))><L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] GHC.Read.list3 eta_B3 eta_B2 eta_B1;

GHC.Read.$fRead(,,,,,,,,,,,,,,)1
  :: forall a b c d e f g h i j k l m n o.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l, GHC.Read.Read m, GHC.Read.Read n,
      GHC.Read.Read o) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        ((a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)
         -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=17,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3NbO
           $dRead1_s3NbP
           $dRead2_s3NbQ
           $dRead3_s3NbR
           $dRead4_s3NbS
           $dRead5_s3NbT
           $dRead6_s3NbU
           $dRead7_s3NbV
           $dRead8_s3NbW
           $dRead9_s3NbX
           $dRead10_s3NbY
           $dRead11_s3NbZ
           $dRead12_s3Nc0
           $dRead13_s3Nc1
           $dRead14_s3Nc2
           eta_s3Nc3
           eta1_s3Nc4]
        let {
          p_s3Nc5 [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> Text.ParserCombinators.ReadP.ReadP
                    (a_a3Kwb, b_a3Kwc, c_a3Kwd, d_a3Kwe, e_a3Kwf, f_a3Kwg, g_a3Kwh,
                     h_a3Kwi, i_a3Kwj, j_a3Kwk, k_a3Kwl, l_a3Kwm, m_a3Kwn, n_a3Kwo,
                     o_a3Kwp)
          [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
              [$dRead_s3NbO
               $dRead1_s3NbP
               $dRead2_s3NbQ
               $dRead3_s3NbR
               $dRead4_s3NbS
               $dRead5_s3NbT
               $dRead6_s3NbU
               $dRead7_s3NbV
               $dRead8_s3NbW
               $dRead9_s3NbX
               $dRead10_s3NbY
               $dRead11_s3NbZ
               $dRead12_s3Nc0
               $dRead13_s3Nc1
               $dRead14_s3Nc2] \r [n1_s3Nc6]
                  let {
                    ds1_s3Nc7 [Occ=OnceL, Dmd=<L,C(U)>]
                      :: Text.ParserCombinators.ReadP.ReadP
                           (a_a3Kwb, b_a3Kwc, c_a3Kwd, d_a3Kwe, e_a3Kwf, f_a3Kwg, g_a3Kwh,
                            h_a3Kwi)
                    [LclId] =
                        [$dRead_s3NbO
                         $dRead1_s3NbP
                         $dRead2_s3NbQ
                         $dRead3_s3NbR
                         $dRead4_s3NbS
                         $dRead5_s3NbT
                         $dRead6_s3NbU
                         $dRead7_s3NbV
                         n1_s3Nc6] \u []
                            GHC.Read.$fRead(,,,,,,,)2
                                $dRead_s3NbO
                                $dRead1_s3NbP
                                $dRead2_s3NbQ
                                $dRead3_s3NbR
                                $dRead4_s3NbS
                                $dRead5_s3NbT
                                $dRead6_s3NbU
                                $dRead7_s3NbV
                                n1_s3Nc6; } in
                  let {
                    sat_s3NcL [Occ=Once]
                      :: forall b2.
                         ((a_a3Kwb, b_a3Kwc, c_a3Kwd, d_a3Kwe, e_a3Kwf, f_a3Kwg, g_a3Kwh,
                           h_a3Kwi, i_a3Kwj, j_a3Kwk, k_a3Kwl, l_a3Kwm, m_a3Kwn, n_a3Kwo,
                           o_a3Kwp)
                          -> Text.ParserCombinators.ReadP.P b2)
                         -> Text.ParserCombinators.ReadP.P b2
                    [LclId] =
                        [$dRead8_s3NbW
                         $dRead9_s3NbX
                         $dRead10_s3NbY
                         $dRead11_s3NbZ
                         $dRead12_s3Nc0
                         $dRead13_s3Nc1
                         $dRead14_s3Nc2
                         n1_s3Nc6
                         ds1_s3Nc7] \r [k1_s3Nc8]
                            let {
                              sat_s3NcK [Occ=Once]
                                :: (a_a3Kwb, b_a3Kwc, c_a3Kwd, d_a3Kwe, e_a3Kwf, f_a3Kwg, g_a3Kwh,
                                    h_a3Kwi)
                                   -> Text.ParserCombinators.ReadP.P b2_a3nIU
                              [LclId] =
                                  [$dRead8_s3NbW
                                   $dRead9_s3NbX
                                   $dRead10_s3NbY
                                   $dRead11_s3NbZ
                                   $dRead12_s3Nc0
                                   $dRead13_s3Nc1
                                   $dRead14_s3Nc2
                                   n1_s3Nc6
                                   k1_s3Nc8] \r [a1_s3Nc9]
                                      case a1_s3Nc9 of {
                                        (,,,,,,,) a2_s3Ncb [Occ=OnceL]
                                                  b3_s3Ncc [Occ=OnceL]
                                                  c1_s3Ncd [Occ=OnceL]
                                                  d1_s3Nce [Occ=OnceL]
                                                  e1_s3Ncf [Occ=OnceL]
                                                  f1_s3Ncg [Occ=OnceL]
                                                  g1_s3Nch [Occ=OnceL]
                                                  h1_s3Nci [Occ=OnceL] ->
                                            let {
                                              sat_s3NcH [Occ=Once]
                                                :: () -> Text.ParserCombinators.ReadP.P b2_a3nIU
                                              [LclId] =
                                                  [$dRead8_s3NbW
                                                   $dRead9_s3NbX
                                                   $dRead10_s3NbY
                                                   $dRead11_s3NbZ
                                                   $dRead12_s3Nc0
                                                   $dRead13_s3Nc1
                                                   $dRead14_s3Nc2
                                                   n1_s3Nc6
                                                   k1_s3Nc8
                                                   a2_s3Ncb
                                                   b3_s3Ncc
                                                   c1_s3Ncd
                                                   d1_s3Nce
                                                   e1_s3Ncf
                                                   f1_s3Ncg
                                                   g1_s3Nch
                                                   h1_s3Nci] \r [a3_s3Ncj]
                                                      let {
                                                        sat_s3NcG [Occ=Once]
                                                          :: (i_a3Kwj, j_a3Kwk, k_a3Kwl, l_a3Kwm)
                                                             -> Text.ParserCombinators.ReadP.P
                                                                  b2_a3nIU
                                                        [LclId] =
                                                            [$dRead12_s3Nc0
                                                             $dRead13_s3Nc1
                                                             $dRead14_s3Nc2
                                                             n1_s3Nc6
                                                             k1_s3Nc8
                                                             a2_s3Ncb
                                                             b3_s3Ncc
                                                             c1_s3Ncd
                                                             d1_s3Nce
                                                             e1_s3Ncf
                                                             f1_s3Ncg
                                                             g1_s3Nch
                                                             h1_s3Nci] \r [a4_s3Nck]
                                                                case a4_s3Nck of {
                                                                  (,,,) i1_s3Ncm [Occ=OnceL]
                                                                        j1_s3Ncn [Occ=OnceL]
                                                                        k2_s3Nco [Occ=OnceL]
                                                                        l1_s3Ncp [Occ=OnceL] ->
                                                                      let {
                                                                        sat_s3NcD [Occ=Once]
                                                                          :: ()
                                                                             -> Text.ParserCombinators.ReadP.P
                                                                                  b2_a3nIU
                                                                        [LclId] =
                                                                            [$dRead12_s3Nc0
                                                                             $dRead13_s3Nc1
                                                                             $dRead14_s3Nc2
                                                                             n1_s3Nc6
                                                                             k1_s3Nc8
                                                                             a2_s3Ncb
                                                                             b3_s3Ncc
                                                                             c1_s3Ncd
                                                                             d1_s3Nce
                                                                             e1_s3Ncf
                                                                             f1_s3Ncg
                                                                             g1_s3Nch
                                                                             h1_s3Nci
                                                                             i1_s3Ncm
                                                                             j1_s3Ncn
                                                                             k2_s3Nco
                                                                             l1_s3Ncp] \r [a5_s3Ncq]
                                                                                let {
                                                                                  sat_s3NcC [Occ=Once]
                                                                                    :: (m_a3Kwn,
                                                                                        n_a3Kwo)
                                                                                       -> Text.ParserCombinators.ReadP.P
                                                                                            b2_a3nIU
                                                                                  [LclId] =
                                                                                      [$dRead14_s3Nc2
                                                                                       n1_s3Nc6
                                                                                       k1_s3Nc8
                                                                                       a2_s3Ncb
                                                                                       b3_s3Ncc
                                                                                       c1_s3Ncd
                                                                                       d1_s3Nce
                                                                                       e1_s3Ncf
                                                                                       f1_s3Ncg
                                                                                       g1_s3Nch
                                                                                       h1_s3Nci
                                                                                       i1_s3Ncm
                                                                                       j1_s3Ncn
                                                                                       k2_s3Nco
                                                                                       l1_s3Ncp] \r [a6_s3Ncr]
                                                                                          case
                                                                                              a6_s3Ncr
                                                                                          of
                                                                                          { (,) m1_s3Nct [Occ=OnceL]
                                                                                                n2_s3Ncu [Occ=OnceL] ->
                                                                                                let {
                                                                                                  sat_s3Ncz [Occ=Once]
                                                                                                    :: ()
                                                                                                       -> Text.ParserCombinators.ReadP.P
                                                                                                            b2_a3nIU
                                                                                                  [LclId] =
                                                                                                      [$dRead14_s3Nc2
                                                                                                       n1_s3Nc6
                                                                                                       k1_s3Nc8
                                                                                                       a2_s3Ncb
                                                                                                       b3_s3Ncc
                                                                                                       c1_s3Ncd
                                                                                                       d1_s3Nce
                                                                                                       e1_s3Ncf
                                                                                                       f1_s3Ncg
                                                                                                       g1_s3Nch
                                                                                                       h1_s3Nci
                                                                                                       i1_s3Ncm
                                                                                                       j1_s3Ncn
                                                                                                       k2_s3Nco
                                                                                                       l1_s3Ncp
                                                                                                       m1_s3Nct
                                                                                                       n2_s3Ncu] \r [a7_s3Ncv]
                                                                                                          let {
                                                                                                            sat_s3Ncy [Occ=Once]
                                                                                                              :: o_a3Kwp
                                                                                                                 -> Text.ParserCombinators.ReadP.P
                                                                                                                      b2_a3nIU
                                                                                                            [LclId] =
                                                                                                                [k1_s3Nc8
                                                                                                                 a2_s3Ncb
                                                                                                                 b3_s3Ncc
                                                                                                                 c1_s3Ncd
                                                                                                                 d1_s3Nce
                                                                                                                 e1_s3Ncf
                                                                                                                 f1_s3Ncg
                                                                                                                 g1_s3Nch
                                                                                                                 h1_s3Nci
                                                                                                                 i1_s3Ncm
                                                                                                                 j1_s3Ncn
                                                                                                                 k2_s3Nco
                                                                                                                 l1_s3Ncp
                                                                                                                 m1_s3Nct
                                                                                                                 n2_s3Ncu] \r [a8_s3Ncw]
                                                                                                                    let {
                                                                                                                      sat_s3Ncx [Occ=Once]
                                                                                                                        :: (a_a3Kwb,
                                                                                                                            b_a3Kwc,
                                                                                                                            c_a3Kwd,
                                                                                                                            d_a3Kwe,
                                                                                                                            e_a3Kwf,
                                                                                                                            f_a3Kwg,
                                                                                                                            g_a3Kwh,
                                                                                                                            h_a3Kwi,
                                                                                                                            i_a3Kwj,
                                                                                                                            j_a3Kwk,
                                                                                                                            k_a3Kwl,
                                                                                                                            l_a3Kwm,
                                                                                                                            m_a3Kwn,
                                                                                                                            n_a3Kwo,
                                                                                                                            o_a3Kwp)
                                                                                                                      [LclId] =
                                                                                                                          CCCS (,,,,,,,,,,,,,,)! [a2_s3Ncb
                                                                                                                                                  b3_s3Ncc
                                                                                                                                                  c1_s3Ncd
                                                                                                                                                  d1_s3Nce
                                                                                                                                                  e1_s3Ncf
                                                                                                                                                  f1_s3Ncg
                                                                                                                                                  g1_s3Nch
                                                                                                                                                  h1_s3Nci
                                                                                                                                                  i1_s3Ncm
                                                                                                                                                  j1_s3Ncn
                                                                                                                                                  k2_s3Nco
                                                                                                                                                  l1_s3Ncp
                                                                                                                                                  m1_s3Nct
                                                                                                                                                  n2_s3Ncu
                                                                                                                                                  a8_s3Ncw];
                                                                                                                    } in 
                                                                                                                      k1_s3Nc8
                                                                                                                          sat_s3Ncx;
                                                                                                          } in 
                                                                                                            GHC.Read.readPrec
                                                                                                                $dRead14_s3Nc2
                                                                                                                n1_s3Nc6
                                                                                                                sat_s3Ncy;
                                                                                                } in 
                                                                                                  case
                                                                                                      Text.Read.Lex.$wexpect
                                                                                                          GHC.Read.$fRead(,)_lexeme
                                                                                                          sat_s3Ncz
                                                                                                  of
                                                                                                  { Unit# ww1_s3NcB [Occ=Once] ->
                                                                                                        Text.ParserCombinators.ReadP.Look [ww1_s3NcB];
                                                                                                  };
                                                                                          };
                                                                                } in 
                                                                                  GHC.Read.$fRead(,)2
                                                                                      $dRead12_s3Nc0
                                                                                      $dRead13_s3Nc1
                                                                                      n1_s3Nc6
                                                                                      sat_s3NcC;
                                                                      } in 
                                                                        case
                                                                            Text.Read.Lex.$wexpect
                                                                                GHC.Read.$fRead(,)_lexeme
                                                                                sat_s3NcD
                                                                        of
                                                                        { Unit# ww1_s3NcF [Occ=Once] ->
                                                                              Text.ParserCombinators.ReadP.Look [ww1_s3NcF];
                                                                        };
                                                                };
                                                      } in 
                                                        GHC.Read.$fRead(,,,)2
                                                            $dRead8_s3NbW
                                                            $dRead9_s3NbX
                                                            $dRead10_s3NbY
                                                            $dRead11_s3NbZ
                                                            n1_s3Nc6
                                                            sat_s3NcG;
                                            } in 
                                              case
                                                  Text.Read.Lex.$wexpect
                                                      GHC.Read.$fRead(,)_lexeme sat_s3NcH
                                              of
                                              { Unit# ww1_s3NcJ [Occ=Once] ->
                                                    Text.ParserCombinators.ReadP.Look [ww1_s3NcJ];
                                              };
                                      };
                            } in  ds1_s3Nc7 sat_s3NcK;
                  } in  sat_s3NcL; } in
        let {
          lvl2_s3NcM [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> forall b2.
                  ((a_a3Kwb, b_a3Kwc, c_a3Kwd, d_a3Kwe, e_a3Kwf, f_a3Kwg, g_a3Kwh,
                    h_a3Kwi, i_a3Kwj, j_a3Kwk, k_a3Kwl, l_a3Kwm, m_a3Kwn, n_a3Kwo,
                    o_a3Kwp)
                   -> Text.ParserCombinators.ReadP.P b2)
                  -> Text.ParserCombinators.ReadP.P b2
          [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
              [p_s3Nc5] \r [w_s3NcN w1_s3NcO]
                  case GHC.Read.$wparen' p_s3Nc5 w_s3NcN w1_s3NcO of {
                    Unit# ww1_s3NcQ [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Get [ww1_s3NcQ];
                  }; } in
        let {
          sat_s3NcV [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_a3Kwb, b_a3Kwc, c_a3Kwd, d_a3Kwe, e_a3Kwf, f_a3Kwg, g_a3Kwh,
                  h_a3Kwi, i_a3Kwj, j_a3Kwk, k_a3Kwl, l_a3Kwm, m_a3Kwn, n_a3Kwo,
                  o_a3Kwp)
          [LclId] =
              [lvl2_s3NcM] \r [eta2_s3NcR eta3_s3NcS]
                  case
                      GHC.Read.$wskipSpacesThenP lvl2_s3NcM eta2_s3NcR eta3_s3NcS
                  of
                  { Unit# ww1_s3NcU [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Look [ww1_s3NcU];
                  };
        } in  GHC.Read.list3 sat_s3NcV eta_s3Nc3 eta1_s3Nc4;

GHC.Read.$fRead(,,,,,,,,,,,,,)1
  :: forall a b c d e f g h i j k l m n.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l, GHC.Read.Read m, GHC.Read.Read n) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        ((a, b, c, d, e, f, g, h, i, j, k, l, m, n)
         -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=16,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3NcW
           $dRead1_s3NcX
           $dRead2_s3NcY
           $dRead3_s3NcZ
           $dRead4_s3Nd0
           $dRead5_s3Nd1
           $dRead6_s3Nd2
           $dRead7_s3Nd3
           $dRead8_s3Nd4
           $dRead9_s3Nd5
           $dRead10_s3Nd6
           $dRead11_s3Nd7
           $dRead12_s3Nd8
           $dRead13_s3Nd9
           eta_s3Nda
           eta1_s3Ndb]
        let {
          p_s3Ndc [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> Text.ParserCombinators.ReadP.ReadP
                    (a_a3Kyh, b_a3Kyi, c_a3Kyj, d_a3Kyk, e_a3Kyl, f_a3Kym, g_a3Kyn,
                     h_a3Kyo, i_a3Kyp, j_a3Kyq, k_a3Kyr, l_a3Kys, m_a3Kyt, n_a3Kyu)
          [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
              [$dRead_s3NcW
               $dRead1_s3NcX
               $dRead2_s3NcY
               $dRead3_s3NcZ
               $dRead4_s3Nd0
               $dRead5_s3Nd1
               $dRead6_s3Nd2
               $dRead7_s3Nd3
               $dRead8_s3Nd4
               $dRead9_s3Nd5
               $dRead10_s3Nd6
               $dRead11_s3Nd7
               $dRead12_s3Nd8
               $dRead13_s3Nd9] \r [n1_s3Ndd]
                  let {
                    ds1_s3Nde [Occ=OnceL, Dmd=<L,C(U)>]
                      :: Text.ParserCombinators.ReadP.ReadP
                           (a_a3Kyh, b_a3Kyi, c_a3Kyj, d_a3Kyk, e_a3Kyl, f_a3Kym, g_a3Kyn,
                            h_a3Kyo)
                    [LclId] =
                        [$dRead_s3NcW
                         $dRead1_s3NcX
                         $dRead2_s3NcY
                         $dRead3_s3NcZ
                         $dRead4_s3Nd0
                         $dRead5_s3Nd1
                         $dRead6_s3Nd2
                         $dRead7_s3Nd3
                         n1_s3Ndd] \u []
                            GHC.Read.$fRead(,,,,,,,)2
                                $dRead_s3NcW
                                $dRead1_s3NcX
                                $dRead2_s3NcY
                                $dRead3_s3NcZ
                                $dRead4_s3Nd0
                                $dRead5_s3Nd1
                                $dRead6_s3Nd2
                                $dRead7_s3Nd3
                                n1_s3Ndd; } in
                  let {
                    sat_s3NdM [Occ=Once]
                      :: forall b2.
                         ((a_a3Kyh, b_a3Kyi, c_a3Kyj, d_a3Kyk, e_a3Kyl, f_a3Kym, g_a3Kyn,
                           h_a3Kyo, i_a3Kyp, j_a3Kyq, k_a3Kyr, l_a3Kys, m_a3Kyt, n_a3Kyu)
                          -> Text.ParserCombinators.ReadP.P b2)
                         -> Text.ParserCombinators.ReadP.P b2
                    [LclId] =
                        [$dRead8_s3Nd4
                         $dRead9_s3Nd5
                         $dRead10_s3Nd6
                         $dRead11_s3Nd7
                         $dRead12_s3Nd8
                         $dRead13_s3Nd9
                         n1_s3Ndd
                         ds1_s3Nde] \r [k1_s3Ndf]
                            let {
                              sat_s3NdL [Occ=Once]
                                :: (a_a3Kyh, b_a3Kyi, c_a3Kyj, d_a3Kyk, e_a3Kyl, f_a3Kym, g_a3Kyn,
                                    h_a3Kyo)
                                   -> Text.ParserCombinators.ReadP.P b2_a3nIU
                              [LclId] =
                                  [$dRead8_s3Nd4
                                   $dRead9_s3Nd5
                                   $dRead10_s3Nd6
                                   $dRead11_s3Nd7
                                   $dRead12_s3Nd8
                                   $dRead13_s3Nd9
                                   n1_s3Ndd
                                   k1_s3Ndf] \r [a1_s3Ndg]
                                      case a1_s3Ndg of {
                                        (,,,,,,,) a2_s3Ndi [Occ=OnceL]
                                                  b3_s3Ndj [Occ=OnceL]
                                                  c1_s3Ndk [Occ=OnceL]
                                                  d1_s3Ndl [Occ=OnceL]
                                                  e1_s3Ndm [Occ=OnceL]
                                                  f1_s3Ndn [Occ=OnceL]
                                                  g1_s3Ndo [Occ=OnceL]
                                                  h1_s3Ndp [Occ=OnceL] ->
                                            let {
                                              sat_s3NdI [Occ=Once]
                                                :: () -> Text.ParserCombinators.ReadP.P b2_a3nIU
                                              [LclId] =
                                                  [$dRead8_s3Nd4
                                                   $dRead9_s3Nd5
                                                   $dRead10_s3Nd6
                                                   $dRead11_s3Nd7
                                                   $dRead12_s3Nd8
                                                   $dRead13_s3Nd9
                                                   n1_s3Ndd
                                                   k1_s3Ndf
                                                   a2_s3Ndi
                                                   b3_s3Ndj
                                                   c1_s3Ndk
                                                   d1_s3Ndl
                                                   e1_s3Ndm
                                                   f1_s3Ndn
                                                   g1_s3Ndo
                                                   h1_s3Ndp] \r [a3_s3Ndq]
                                                      let {
                                                        sat_s3NdH [Occ=Once]
                                                          :: (i_a3Kyp, j_a3Kyq, k_a3Kyr, l_a3Kys)
                                                             -> Text.ParserCombinators.ReadP.P
                                                                  b2_a3nIU
                                                        [LclId] =
                                                            [$dRead12_s3Nd8
                                                             $dRead13_s3Nd9
                                                             n1_s3Ndd
                                                             k1_s3Ndf
                                                             a2_s3Ndi
                                                             b3_s3Ndj
                                                             c1_s3Ndk
                                                             d1_s3Ndl
                                                             e1_s3Ndm
                                                             f1_s3Ndn
                                                             g1_s3Ndo
                                                             h1_s3Ndp] \r [a4_s3Ndr]
                                                                case a4_s3Ndr of {
                                                                  (,,,) i1_s3Ndt [Occ=OnceL]
                                                                        j1_s3Ndu [Occ=OnceL]
                                                                        k2_s3Ndv [Occ=OnceL]
                                                                        l1_s3Ndw [Occ=OnceL] ->
                                                                      let {
                                                                        sat_s3NdE [Occ=Once]
                                                                          :: ()
                                                                             -> Text.ParserCombinators.ReadP.P
                                                                                  b2_a3nIU
                                                                        [LclId] =
                                                                            [$dRead12_s3Nd8
                                                                             $dRead13_s3Nd9
                                                                             n1_s3Ndd
                                                                             k1_s3Ndf
                                                                             a2_s3Ndi
                                                                             b3_s3Ndj
                                                                             c1_s3Ndk
                                                                             d1_s3Ndl
                                                                             e1_s3Ndm
                                                                             f1_s3Ndn
                                                                             g1_s3Ndo
                                                                             h1_s3Ndp
                                                                             i1_s3Ndt
                                                                             j1_s3Ndu
                                                                             k2_s3Ndv
                                                                             l1_s3Ndw] \r [a5_s3Ndx]
                                                                                let {
                                                                                  sat_s3NdD [Occ=Once]
                                                                                    :: (m_a3Kyt,
                                                                                        n_a3Kyu)
                                                                                       -> Text.ParserCombinators.ReadP.P
                                                                                            b2_a3nIU
                                                                                  [LclId] =
                                                                                      [k1_s3Ndf
                                                                                       a2_s3Ndi
                                                                                       b3_s3Ndj
                                                                                       c1_s3Ndk
                                                                                       d1_s3Ndl
                                                                                       e1_s3Ndm
                                                                                       f1_s3Ndn
                                                                                       g1_s3Ndo
                                                                                       h1_s3Ndp
                                                                                       i1_s3Ndt
                                                                                       j1_s3Ndu
                                                                                       k2_s3Ndv
                                                                                       l1_s3Ndw] \r [a6_s3Ndy]
                                                                                          case
                                                                                              a6_s3Ndy
                                                                                          of
                                                                                          { (,) m1_s3NdA [Occ=Once]
                                                                                                n2_s3NdB [Occ=Once] ->
                                                                                                let {
                                                                                                  sat_s3NdC [Occ=Once]
                                                                                                    :: (a_a3Kyh,
                                                                                                        b_a3Kyi,
                                                                                                        c_a3Kyj,
                                                                                                        d_a3Kyk,
                                                                                                        e_a3Kyl,
                                                                                                        f_a3Kym,
                                                                                                        g_a3Kyn,
                                                                                                        h_a3Kyo,
                                                                                                        i_a3Kyp,
                                                                                                        j_a3Kyq,
                                                                                                        k_a3Kyr,
                                                                                                        l_a3Kys,
                                                                                                        m_a3Kyt,
                                                                                                        n_a3Kyu)
                                                                                                  [LclId] =
                                                                                                      CCCS (,,,,,,,,,,,,,)! [a2_s3Ndi
                                                                                                                             b3_s3Ndj
                                                                                                                             c1_s3Ndk
                                                                                                                             d1_s3Ndl
                                                                                                                             e1_s3Ndm
                                                                                                                             f1_s3Ndn
                                                                                                                             g1_s3Ndo
                                                                                                                             h1_s3Ndp
                                                                                                                             i1_s3Ndt
                                                                                                                             j1_s3Ndu
                                                                                                                             k2_s3Ndv
                                                                                                                             l1_s3Ndw
                                                                                                                             m1_s3NdA
                                                                                                                             n2_s3NdB];
                                                                                                } in 
                                                                                                  k1_s3Ndf
                                                                                                      sat_s3NdC;
                                                                                          };
                                                                                } in 
                                                                                  GHC.Read.$fRead(,)2
                                                                                      $dRead12_s3Nd8
                                                                                      $dRead13_s3Nd9
                                                                                      n1_s3Ndd
                                                                                      sat_s3NdD;
                                                                      } in 
                                                                        case
                                                                            Text.Read.Lex.$wexpect
                                                                                GHC.Read.$fRead(,)_lexeme
                                                                                sat_s3NdE
                                                                        of
                                                                        { Unit# ww1_s3NdG [Occ=Once] ->
                                                                              Text.ParserCombinators.ReadP.Look [ww1_s3NdG];
                                                                        };
                                                                };
                                                      } in 
                                                        GHC.Read.$fRead(,,,)2
                                                            $dRead8_s3Nd4
                                                            $dRead9_s3Nd5
                                                            $dRead10_s3Nd6
                                                            $dRead11_s3Nd7
                                                            n1_s3Ndd
                                                            sat_s3NdH;
                                            } in 
                                              case
                                                  Text.Read.Lex.$wexpect
                                                      GHC.Read.$fRead(,)_lexeme sat_s3NdI
                                              of
                                              { Unit# ww1_s3NdK [Occ=Once] ->
                                                    Text.ParserCombinators.ReadP.Look [ww1_s3NdK];
                                              };
                                      };
                            } in  ds1_s3Nde sat_s3NdL;
                  } in  sat_s3NdM; } in
        let {
          lvl2_s3NdN [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> forall b2.
                  ((a_a3Kyh, b_a3Kyi, c_a3Kyj, d_a3Kyk, e_a3Kyl, f_a3Kym, g_a3Kyn,
                    h_a3Kyo, i_a3Kyp, j_a3Kyq, k_a3Kyr, l_a3Kys, m_a3Kyt, n_a3Kyu)
                   -> Text.ParserCombinators.ReadP.P b2)
                  -> Text.ParserCombinators.ReadP.P b2
          [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
              [p_s3Ndc] \r [w_s3NdO w1_s3NdP]
                  case GHC.Read.$wparen' p_s3Ndc w_s3NdO w1_s3NdP of {
                    Unit# ww1_s3NdR [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Get [ww1_s3NdR];
                  }; } in
        let {
          sat_s3NdW [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_a3Kyh, b_a3Kyi, c_a3Kyj, d_a3Kyk, e_a3Kyl, f_a3Kym, g_a3Kyn,
                  h_a3Kyo, i_a3Kyp, j_a3Kyq, k_a3Kyr, l_a3Kys, m_a3Kyt, n_a3Kyu)
          [LclId] =
              [lvl2_s3NdN] \r [eta2_s3NdS eta3_s3NdT]
                  case
                      GHC.Read.$wskipSpacesThenP lvl2_s3NdN eta2_s3NdS eta3_s3NdT
                  of
                  { Unit# ww1_s3NdV [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Look [ww1_s3NdV];
                  };
        } in  GHC.Read.list3 sat_s3NdW eta_s3Nda eta1_s3Ndb;

GHC.Read.$fRead(,,,,,,,,,,,,)1
  :: forall a b c d e f g h i j k l m.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l, GHC.Read.Read m) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        ((a, b, c, d, e, f, g, h, i, j, k, l, m)
         -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=15,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3NdX
           $dRead1_s3NdY
           $dRead2_s3NdZ
           $dRead3_s3Ne0
           $dRead4_s3Ne1
           $dRead5_s3Ne2
           $dRead6_s3Ne3
           $dRead7_s3Ne4
           $dRead8_s3Ne5
           $dRead9_s3Ne6
           $dRead10_s3Ne7
           $dRead11_s3Ne8
           $dRead12_s3Ne9
           eta_s3Nea
           eta1_s3Neb]
        let {
          p_s3Nec [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> Text.ParserCombinators.ReadP.ReadP
                    (a_a3KAa, b_a3KAb, c_a3KAc, d_a3KAd, e_a3KAe, f_a3KAf, g_a3KAg,
                     h_a3KAh, i_a3KAi, j_a3KAj, k_a3KAk, l_a3KAl, m_a3KAm)
          [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
              [$dRead_s3NdX
               $dRead1_s3NdY
               $dRead2_s3NdZ
               $dRead3_s3Ne0
               $dRead4_s3Ne1
               $dRead5_s3Ne2
               $dRead6_s3Ne3
               $dRead7_s3Ne4
               $dRead8_s3Ne5
               $dRead9_s3Ne6
               $dRead10_s3Ne7
               $dRead11_s3Ne8
               $dRead12_s3Ne9] \r [n_s3Ned]
                  let {
                    ds1_s3Nee [Occ=OnceL, Dmd=<L,C(U)>]
                      :: Text.ParserCombinators.ReadP.ReadP
                           (a_a3KAa, b_a3KAb, c_a3KAc, d_a3KAd, e_a3KAe, f_a3KAf, g_a3KAg,
                            h_a3KAh)
                    [LclId] =
                        [$dRead_s3NdX
                         $dRead1_s3NdY
                         $dRead2_s3NdZ
                         $dRead3_s3Ne0
                         $dRead4_s3Ne1
                         $dRead5_s3Ne2
                         $dRead6_s3Ne3
                         $dRead7_s3Ne4
                         n_s3Ned] \u []
                            GHC.Read.$fRead(,,,,,,,)2
                                $dRead_s3NdX
                                $dRead1_s3NdY
                                $dRead2_s3NdZ
                                $dRead3_s3Ne0
                                $dRead4_s3Ne1
                                $dRead5_s3Ne2
                                $dRead6_s3Ne3
                                $dRead7_s3Ne4
                                n_s3Ned; } in
                  let {
                    sat_s3NeJ [Occ=Once]
                      :: forall b2.
                         ((a_a3KAa, b_a3KAb, c_a3KAc, d_a3KAd, e_a3KAe, f_a3KAf, g_a3KAg,
                           h_a3KAh, i_a3KAi, j_a3KAj, k_a3KAk, l_a3KAl, m_a3KAm)
                          -> Text.ParserCombinators.ReadP.P b2)
                         -> Text.ParserCombinators.ReadP.P b2
                    [LclId] =
                        [$dRead8_s3Ne5
                         $dRead9_s3Ne6
                         $dRead10_s3Ne7
                         $dRead11_s3Ne8
                         $dRead12_s3Ne9
                         n_s3Ned
                         ds1_s3Nee] \r [k1_s3Nef]
                            let {
                              sat_s3NeI [Occ=Once]
                                :: (a_a3KAa, b_a3KAb, c_a3KAc, d_a3KAd, e_a3KAe, f_a3KAf, g_a3KAg,
                                    h_a3KAh)
                                   -> Text.ParserCombinators.ReadP.P b2_a3nIU
                              [LclId] =
                                  [$dRead8_s3Ne5
                                   $dRead9_s3Ne6
                                   $dRead10_s3Ne7
                                   $dRead11_s3Ne8
                                   $dRead12_s3Ne9
                                   n_s3Ned
                                   k1_s3Nef] \r [a1_s3Neg]
                                      case a1_s3Neg of {
                                        (,,,,,,,) a2_s3Nei [Occ=OnceL]
                                                  b3_s3Nej [Occ=OnceL]
                                                  c1_s3Nek [Occ=OnceL]
                                                  d1_s3Nel [Occ=OnceL]
                                                  e1_s3Nem [Occ=OnceL]
                                                  f1_s3Nen [Occ=OnceL]
                                                  g1_s3Neo [Occ=OnceL]
                                                  h1_s3Nep [Occ=OnceL] ->
                                            let {
                                              sat_s3NeF [Occ=Once]
                                                :: () -> Text.ParserCombinators.ReadP.P b2_a3nIU
                                              [LclId] =
                                                  [$dRead8_s3Ne5
                                                   $dRead9_s3Ne6
                                                   $dRead10_s3Ne7
                                                   $dRead11_s3Ne8
                                                   $dRead12_s3Ne9
                                                   n_s3Ned
                                                   k1_s3Nef
                                                   a2_s3Nei
                                                   b3_s3Nej
                                                   c1_s3Nek
                                                   d1_s3Nel
                                                   e1_s3Nem
                                                   f1_s3Nen
                                                   g1_s3Neo
                                                   h1_s3Nep] \r [a3_s3Neq]
                                                      let {
                                                        sat_s3NeE [Occ=Once]
                                                          :: (i_a3KAi, j_a3KAj, k_a3KAk, l_a3KAl)
                                                             -> Text.ParserCombinators.ReadP.P
                                                                  b2_a3nIU
                                                        [LclId] =
                                                            [$dRead12_s3Ne9
                                                             n_s3Ned
                                                             k1_s3Nef
                                                             a2_s3Nei
                                                             b3_s3Nej
                                                             c1_s3Nek
                                                             d1_s3Nel
                                                             e1_s3Nem
                                                             f1_s3Nen
                                                             g1_s3Neo
                                                             h1_s3Nep] \r [a4_s3Ner]
                                                                case a4_s3Ner of {
                                                                  (,,,) i1_s3Net [Occ=OnceL]
                                                                        j1_s3Neu [Occ=OnceL]
                                                                        k2_s3Nev [Occ=OnceL]
                                                                        l1_s3New [Occ=OnceL] ->
                                                                      let {
                                                                        sat_s3NeB [Occ=Once]
                                                                          :: ()
                                                                             -> Text.ParserCombinators.ReadP.P
                                                                                  b2_a3nIU
                                                                        [LclId] =
                                                                            [$dRead12_s3Ne9
                                                                             n_s3Ned
                                                                             k1_s3Nef
                                                                             a2_s3Nei
                                                                             b3_s3Nej
                                                                             c1_s3Nek
                                                                             d1_s3Nel
                                                                             e1_s3Nem
                                                                             f1_s3Nen
                                                                             g1_s3Neo
                                                                             h1_s3Nep
                                                                             i1_s3Net
                                                                             j1_s3Neu
                                                                             k2_s3Nev
                                                                             l1_s3New] \r [a5_s3Nex]
                                                                                let {
                                                                                  sat_s3NeA [Occ=Once]
                                                                                    :: m_a3KAm
                                                                                       -> Text.ParserCombinators.ReadP.P
                                                                                            b2_a3nIU
                                                                                  [LclId] =
                                                                                      [k1_s3Nef
                                                                                       a2_s3Nei
                                                                                       b3_s3Nej
                                                                                       c1_s3Nek
                                                                                       d1_s3Nel
                                                                                       e1_s3Nem
                                                                                       f1_s3Nen
                                                                                       g1_s3Neo
                                                                                       h1_s3Nep
                                                                                       i1_s3Net
                                                                                       j1_s3Neu
                                                                                       k2_s3Nev
                                                                                       l1_s3New] \r [a6_s3Ney]
                                                                                          let {
                                                                                            sat_s3Nez [Occ=Once]
                                                                                              :: (a_a3KAa,
                                                                                                  b_a3KAb,
                                                                                                  c_a3KAc,
                                                                                                  d_a3KAd,
                                                                                                  e_a3KAe,
                                                                                                  f_a3KAf,
                                                                                                  g_a3KAg,
                                                                                                  h_a3KAh,
                                                                                                  i_a3KAi,
                                                                                                  j_a3KAj,
                                                                                                  k_a3KAk,
                                                                                                  l_a3KAl,
                                                                                                  m_a3KAm)
                                                                                            [LclId] =
                                                                                                CCCS (,,,,,,,,,,,,)! [a2_s3Nei
                                                                                                                      b3_s3Nej
                                                                                                                      c1_s3Nek
                                                                                                                      d1_s3Nel
                                                                                                                      e1_s3Nem
                                                                                                                      f1_s3Nen
                                                                                                                      g1_s3Neo
                                                                                                                      h1_s3Nep
                                                                                                                      i1_s3Net
                                                                                                                      j1_s3Neu
                                                                                                                      k2_s3Nev
                                                                                                                      l1_s3New
                                                                                                                      a6_s3Ney];
                                                                                          } in 
                                                                                            k1_s3Nef
                                                                                                sat_s3Nez;
                                                                                } in 
                                                                                  GHC.Read.readPrec
                                                                                      $dRead12_s3Ne9
                                                                                      n_s3Ned
                                                                                      sat_s3NeA;
                                                                      } in 
                                                                        case
                                                                            Text.Read.Lex.$wexpect
                                                                                GHC.Read.$fRead(,)_lexeme
                                                                                sat_s3NeB
                                                                        of
                                                                        { Unit# ww1_s3NeD [Occ=Once] ->
                                                                              Text.ParserCombinators.ReadP.Look [ww1_s3NeD];
                                                                        };
                                                                };
                                                      } in 
                                                        GHC.Read.$fRead(,,,)2
                                                            $dRead8_s3Ne5
                                                            $dRead9_s3Ne6
                                                            $dRead10_s3Ne7
                                                            $dRead11_s3Ne8
                                                            n_s3Ned
                                                            sat_s3NeE;
                                            } in 
                                              case
                                                  Text.Read.Lex.$wexpect
                                                      GHC.Read.$fRead(,)_lexeme sat_s3NeF
                                              of
                                              { Unit# ww1_s3NeH [Occ=Once] ->
                                                    Text.ParserCombinators.ReadP.Look [ww1_s3NeH];
                                              };
                                      };
                            } in  ds1_s3Nee sat_s3NeI;
                  } in  sat_s3NeJ; } in
        let {
          lvl2_s3NeK [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> forall b2.
                  ((a_a3KAa, b_a3KAb, c_a3KAc, d_a3KAd, e_a3KAe, f_a3KAf, g_a3KAg,
                    h_a3KAh, i_a3KAi, j_a3KAj, k_a3KAk, l_a3KAl, m_a3KAm)
                   -> Text.ParserCombinators.ReadP.P b2)
                  -> Text.ParserCombinators.ReadP.P b2
          [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
              [p_s3Nec] \r [w_s3NeL w1_s3NeM]
                  case GHC.Read.$wparen' p_s3Nec w_s3NeL w1_s3NeM of {
                    Unit# ww1_s3NeO [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Get [ww1_s3NeO];
                  }; } in
        let {
          sat_s3NeT [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_a3KAa, b_a3KAb, c_a3KAc, d_a3KAd, e_a3KAe, f_a3KAf, g_a3KAg,
                  h_a3KAh, i_a3KAi, j_a3KAj, k_a3KAk, l_a3KAl, m_a3KAm)
          [LclId] =
              [lvl2_s3NeK] \r [eta2_s3NeP eta3_s3NeQ]
                  case
                      GHC.Read.$wskipSpacesThenP lvl2_s3NeK eta2_s3NeP eta3_s3NeQ
                  of
                  { Unit# ww1_s3NeS [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Look [ww1_s3NeS];
                  };
        } in  GHC.Read.list3 sat_s3NeT eta_s3Nea eta1_s3Neb;

GHC.Read.$fRead(,,,,,,,,,,,)1
  :: forall a b c d e f g h i j k l.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        ((a, b, c, d, e, f, g, h, i, j, k, l)
         -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=14,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3NeU
           $dRead1_s3NeV
           $dRead2_s3NeW
           $dRead3_s3NeX
           $dRead4_s3NeY
           $dRead5_s3NeZ
           $dRead6_s3Nf0
           $dRead7_s3Nf1
           $dRead8_s3Nf2
           $dRead9_s3Nf3
           $dRead10_s3Nf4
           $dRead11_s3Nf5
           eta_s3Nf6
           eta1_s3Nf7]
        let {
          p_s3Nf8 [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> Text.ParserCombinators.ReadP.ReadP
                    (a_a3KBY, b_a3KBZ, c_a3KC0, d_a3KC1, e_a3KC2, f_a3KC3, g_a3KC4,
                     h_a3KC5, i_a3KC6, j_a3KC7, k_a3KC8, l_a3KC9)
          [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
              [$dRead_s3NeU
               $dRead1_s3NeV
               $dRead2_s3NeW
               $dRead3_s3NeX
               $dRead4_s3NeY
               $dRead5_s3NeZ
               $dRead6_s3Nf0
               $dRead7_s3Nf1
               $dRead8_s3Nf2
               $dRead9_s3Nf3
               $dRead10_s3Nf4
               $dRead11_s3Nf5] \r [n_s3Nf9]
                  let {
                    ds1_s3Nfa [Occ=OnceL, Dmd=<L,C(U)>]
                      :: Text.ParserCombinators.ReadP.ReadP
                           (a_a3KBY, b_a3KBZ, c_a3KC0, d_a3KC1, e_a3KC2, f_a3KC3, g_a3KC4,
                            h_a3KC5)
                    [LclId] =
                        [$dRead_s3NeU
                         $dRead1_s3NeV
                         $dRead2_s3NeW
                         $dRead3_s3NeX
                         $dRead4_s3NeY
                         $dRead5_s3NeZ
                         $dRead6_s3Nf0
                         $dRead7_s3Nf1
                         n_s3Nf9] \u []
                            GHC.Read.$fRead(,,,,,,,)2
                                $dRead_s3NeU
                                $dRead1_s3NeV
                                $dRead2_s3NeW
                                $dRead3_s3NeX
                                $dRead4_s3NeY
                                $dRead5_s3NeZ
                                $dRead6_s3Nf0
                                $dRead7_s3Nf1
                                n_s3Nf9; } in
                  let {
                    sat_s3Nfz [Occ=Once]
                      :: forall b2.
                         ((a_a3KBY, b_a3KBZ, c_a3KC0, d_a3KC1, e_a3KC2, f_a3KC3, g_a3KC4,
                           h_a3KC5, i_a3KC6, j_a3KC7, k_a3KC8, l_a3KC9)
                          -> Text.ParserCombinators.ReadP.P b2)
                         -> Text.ParserCombinators.ReadP.P b2
                    [LclId] =
                        [$dRead8_s3Nf2
                         $dRead9_s3Nf3
                         $dRead10_s3Nf4
                         $dRead11_s3Nf5
                         n_s3Nf9
                         ds1_s3Nfa] \r [k1_s3Nfb]
                            let {
                              sat_s3Nfy [Occ=Once]
                                :: (a_a3KBY, b_a3KBZ, c_a3KC0, d_a3KC1, e_a3KC2, f_a3KC3, g_a3KC4,
                                    h_a3KC5)
                                   -> Text.ParserCombinators.ReadP.P b2_a3nIU
                              [LclId] =
                                  [$dRead8_s3Nf2
                                   $dRead9_s3Nf3
                                   $dRead10_s3Nf4
                                   $dRead11_s3Nf5
                                   n_s3Nf9
                                   k1_s3Nfb] \r [a1_s3Nfc]
                                      case a1_s3Nfc of {
                                        (,,,,,,,) a2_s3Nfe [Occ=OnceL]
                                                  b3_s3Nff [Occ=OnceL]
                                                  c1_s3Nfg [Occ=OnceL]
                                                  d1_s3Nfh [Occ=OnceL]
                                                  e1_s3Nfi [Occ=OnceL]
                                                  f1_s3Nfj [Occ=OnceL]
                                                  g1_s3Nfk [Occ=OnceL]
                                                  h1_s3Nfl [Occ=OnceL] ->
                                            let {
                                              sat_s3Nfv [Occ=Once]
                                                :: () -> Text.ParserCombinators.ReadP.P b2_a3nIU
                                              [LclId] =
                                                  [$dRead8_s3Nf2
                                                   $dRead9_s3Nf3
                                                   $dRead10_s3Nf4
                                                   $dRead11_s3Nf5
                                                   n_s3Nf9
                                                   k1_s3Nfb
                                                   a2_s3Nfe
                                                   b3_s3Nff
                                                   c1_s3Nfg
                                                   d1_s3Nfh
                                                   e1_s3Nfi
                                                   f1_s3Nfj
                                                   g1_s3Nfk
                                                   h1_s3Nfl] \r [a3_s3Nfm]
                                                      let {
                                                        sat_s3Nfu [Occ=Once]
                                                          :: (i_a3KC6, j_a3KC7, k_a3KC8, l_a3KC9)
                                                             -> Text.ParserCombinators.ReadP.P
                                                                  b2_a3nIU
                                                        [LclId] =
                                                            [k1_s3Nfb
                                                             a2_s3Nfe
                                                             b3_s3Nff
                                                             c1_s3Nfg
                                                             d1_s3Nfh
                                                             e1_s3Nfi
                                                             f1_s3Nfj
                                                             g1_s3Nfk
                                                             h1_s3Nfl] \r [a4_s3Nfn]
                                                                case a4_s3Nfn of {
                                                                  (,,,) i1_s3Nfp [Occ=Once]
                                                                        j1_s3Nfq [Occ=Once]
                                                                        k2_s3Nfr [Occ=Once]
                                                                        l1_s3Nfs [Occ=Once] ->
                                                                      let {
                                                                        sat_s3Nft [Occ=Once]
                                                                          :: (a_a3KBY, b_a3KBZ,
                                                                              c_a3KC0, d_a3KC1,
                                                                              e_a3KC2, f_a3KC3,
                                                                              g_a3KC4, h_a3KC5,
                                                                              i_a3KC6, j_a3KC7,
                                                                              k_a3KC8, l_a3KC9)
                                                                        [LclId] =
                                                                            CCCS (,,,,,,,,,,,)! [a2_s3Nfe
                                                                                                 b3_s3Nff
                                                                                                 c1_s3Nfg
                                                                                                 d1_s3Nfh
                                                                                                 e1_s3Nfi
                                                                                                 f1_s3Nfj
                                                                                                 g1_s3Nfk
                                                                                                 h1_s3Nfl
                                                                                                 i1_s3Nfp
                                                                                                 j1_s3Nfq
                                                                                                 k2_s3Nfr
                                                                                                 l1_s3Nfs];
                                                                      } in  k1_s3Nfb sat_s3Nft;
                                                                };
                                                      } in 
                                                        GHC.Read.$fRead(,,,)2
                                                            $dRead8_s3Nf2
                                                            $dRead9_s3Nf3
                                                            $dRead10_s3Nf4
                                                            $dRead11_s3Nf5
                                                            n_s3Nf9
                                                            sat_s3Nfu;
                                            } in 
                                              case
                                                  Text.Read.Lex.$wexpect
                                                      GHC.Read.$fRead(,)_lexeme sat_s3Nfv
                                              of
                                              { Unit# ww1_s3Nfx [Occ=Once] ->
                                                    Text.ParserCombinators.ReadP.Look [ww1_s3Nfx];
                                              };
                                      };
                            } in  ds1_s3Nfa sat_s3Nfy;
                  } in  sat_s3Nfz; } in
        let {
          lvl2_s3NfA [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> forall b2.
                  ((a_a3KBY, b_a3KBZ, c_a3KC0, d_a3KC1, e_a3KC2, f_a3KC3, g_a3KC4,
                    h_a3KC5, i_a3KC6, j_a3KC7, k_a3KC8, l_a3KC9)
                   -> Text.ParserCombinators.ReadP.P b2)
                  -> Text.ParserCombinators.ReadP.P b2
          [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
              [p_s3Nf8] \r [w_s3NfB w1_s3NfC]
                  case GHC.Read.$wparen' p_s3Nf8 w_s3NfB w1_s3NfC of {
                    Unit# ww1_s3NfE [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Get [ww1_s3NfE];
                  }; } in
        let {
          sat_s3NfJ [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_a3KBY, b_a3KBZ, c_a3KC0, d_a3KC1, e_a3KC2, f_a3KC3, g_a3KC4,
                  h_a3KC5, i_a3KC6, j_a3KC7, k_a3KC8, l_a3KC9)
          [LclId] =
              [lvl2_s3NfA] \r [eta2_s3NfF eta3_s3NfG]
                  case
                      GHC.Read.$wskipSpacesThenP lvl2_s3NfA eta2_s3NfF eta3_s3NfG
                  of
                  { Unit# ww1_s3NfI [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Look [ww1_s3NfI];
                  };
        } in  GHC.Read.list3 sat_s3NfJ eta_s3Nf6 eta1_s3Nf7;

GHC.Read.$fRead(,,,,,,,,,,)1
  :: forall a b c d e f g h i j k.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j,
      GHC.Read.Read k) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        ((a, b, c, d, e, f, g, h, i, j, k)
         -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=13,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3NfK
           $dRead1_s3NfL
           $dRead2_s3NfM
           $dRead3_s3NfN
           $dRead4_s3NfO
           $dRead5_s3NfP
           $dRead6_s3NfQ
           $dRead7_s3NfR
           $dRead8_s3NfS
           $dRead9_s3NfT
           $dRead10_s3NfU
           eta_s3NfV
           eta1_s3NfW]
        let {
          p_s3NfX [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> Text.ParserCombinators.ReadP.ReadP
                    (a_a3KDz, b_a3KDA, c_a3KDB, d_a3KDC, e_a3KDD, f_a3KDE, g_a3KDF,
                     h_a3KDG, i_a3KDH, j_a3KDI, k_a3KDJ)
          [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
              [$dRead_s3NfK
               $dRead1_s3NfL
               $dRead2_s3NfM
               $dRead3_s3NfN
               $dRead4_s3NfO
               $dRead5_s3NfP
               $dRead6_s3NfQ
               $dRead7_s3NfR
               $dRead8_s3NfS
               $dRead9_s3NfT
               $dRead10_s3NfU] \r [n_s3NfY]
                  let {
                    ds1_s3NfZ [Occ=OnceL, Dmd=<L,C(U)>]
                      :: Text.ParserCombinators.ReadP.ReadP
                           (a_a3KDz, b_a3KDA, c_a3KDB, d_a3KDC, e_a3KDD, f_a3KDE, g_a3KDF,
                            h_a3KDG)
                    [LclId] =
                        [$dRead_s3NfK
                         $dRead1_s3NfL
                         $dRead2_s3NfM
                         $dRead3_s3NfN
                         $dRead4_s3NfO
                         $dRead5_s3NfP
                         $dRead6_s3NfQ
                         $dRead7_s3NfR
                         n_s3NfY] \u []
                            GHC.Read.$fRead(,,,,,,,)2
                                $dRead_s3NfK
                                $dRead1_s3NfL
                                $dRead2_s3NfM
                                $dRead3_s3NfN
                                $dRead4_s3NfO
                                $dRead5_s3NfP
                                $dRead6_s3NfQ
                                $dRead7_s3NfR
                                n_s3NfY; } in
                  let {
                    sat_s3Ngs [Occ=Once]
                      :: forall b2.
                         ((a_a3KDz, b_a3KDA, c_a3KDB, d_a3KDC, e_a3KDD, f_a3KDE, g_a3KDF,
                           h_a3KDG, i_a3KDH, j_a3KDI, k_a3KDJ)
                          -> Text.ParserCombinators.ReadP.P b2)
                         -> Text.ParserCombinators.ReadP.P b2
                    [LclId] =
                        [$dRead8_s3NfS
                         $dRead9_s3NfT
                         $dRead10_s3NfU
                         n_s3NfY
                         ds1_s3NfZ] \r [k1_s3Ng0]
                            let {
                              sat_s3Ngr [Occ=Once]
                                :: (a_a3KDz, b_a3KDA, c_a3KDB, d_a3KDC, e_a3KDD, f_a3KDE, g_a3KDF,
                                    h_a3KDG)
                                   -> Text.ParserCombinators.ReadP.P b2_a3nIU
                              [LclId] =
                                  [$dRead8_s3NfS
                                   $dRead9_s3NfT
                                   $dRead10_s3NfU
                                   n_s3NfY
                                   k1_s3Ng0] \r [a1_s3Ng1]
                                      case a1_s3Ng1 of {
                                        (,,,,,,,) a2_s3Ng3 [Occ=OnceL]
                                                  b3_s3Ng4 [Occ=OnceL]
                                                  c1_s3Ng5 [Occ=OnceL]
                                                  d1_s3Ng6 [Occ=OnceL]
                                                  e1_s3Ng7 [Occ=OnceL]
                                                  f1_s3Ng8 [Occ=OnceL]
                                                  g1_s3Ng9 [Occ=OnceL]
                                                  h1_s3Nga [Occ=OnceL] ->
                                            let {
                                              sat_s3Ngo [Occ=Once]
                                                :: () -> Text.ParserCombinators.ReadP.P b2_a3nIU
                                              [LclId] =
                                                  [$dRead8_s3NfS
                                                   $dRead9_s3NfT
                                                   $dRead10_s3NfU
                                                   n_s3NfY
                                                   k1_s3Ng0
                                                   a2_s3Ng3
                                                   b3_s3Ng4
                                                   c1_s3Ng5
                                                   d1_s3Ng6
                                                   e1_s3Ng7
                                                   f1_s3Ng8
                                                   g1_s3Ng9
                                                   h1_s3Nga] \r [a3_s3Ngb]
                                                      let {
                                                        sat_s3Ngn [Occ=Once]
                                                          :: (i_a3KDH, j_a3KDI)
                                                             -> Text.ParserCombinators.ReadP.P
                                                                  b2_a3nIU
                                                        [LclId] =
                                                            [$dRead10_s3NfU
                                                             n_s3NfY
                                                             k1_s3Ng0
                                                             a2_s3Ng3
                                                             b3_s3Ng4
                                                             c1_s3Ng5
                                                             d1_s3Ng6
                                                             e1_s3Ng7
                                                             f1_s3Ng8
                                                             g1_s3Ng9
                                                             h1_s3Nga] \r [a4_s3Ngc]
                                                                case a4_s3Ngc of {
                                                                  (,) i1_s3Nge [Occ=OnceL]
                                                                      j1_s3Ngf [Occ=OnceL] ->
                                                                      let {
                                                                        sat_s3Ngk [Occ=Once]
                                                                          :: ()
                                                                             -> Text.ParserCombinators.ReadP.P
                                                                                  b2_a3nIU
                                                                        [LclId] =
                                                                            [$dRead10_s3NfU
                                                                             n_s3NfY
                                                                             k1_s3Ng0
                                                                             a2_s3Ng3
                                                                             b3_s3Ng4
                                                                             c1_s3Ng5
                                                                             d1_s3Ng6
                                                                             e1_s3Ng7
                                                                             f1_s3Ng8
                                                                             g1_s3Ng9
                                                                             h1_s3Nga
                                                                             i1_s3Nge
                                                                             j1_s3Ngf] \r [a5_s3Ngg]
                                                                                let {
                                                                                  sat_s3Ngj [Occ=Once]
                                                                                    :: k_a3KDJ
                                                                                       -> Text.ParserCombinators.ReadP.P
                                                                                            b2_a3nIU
                                                                                  [LclId] =
                                                                                      [k1_s3Ng0
                                                                                       a2_s3Ng3
                                                                                       b3_s3Ng4
                                                                                       c1_s3Ng5
                                                                                       d1_s3Ng6
                                                                                       e1_s3Ng7
                                                                                       f1_s3Ng8
                                                                                       g1_s3Ng9
                                                                                       h1_s3Nga
                                                                                       i1_s3Nge
                                                                                       j1_s3Ngf] \r [a6_s3Ngh]
                                                                                          let {
                                                                                            sat_s3Ngi [Occ=Once]
                                                                                              :: (a_a3KDz,
                                                                                                  b_a3KDA,
                                                                                                  c_a3KDB,
                                                                                                  d_a3KDC,
                                                                                                  e_a3KDD,
                                                                                                  f_a3KDE,
                                                                                                  g_a3KDF,
                                                                                                  h_a3KDG,
                                                                                                  i_a3KDH,
                                                                                                  j_a3KDI,
                                                                                                  k_a3KDJ)
                                                                                            [LclId] =
                                                                                                CCCS (,,,,,,,,,,)! [a2_s3Ng3
                                                                                                                    b3_s3Ng4
                                                                                                                    c1_s3Ng5
                                                                                                                    d1_s3Ng6
                                                                                                                    e1_s3Ng7
                                                                                                                    f1_s3Ng8
                                                                                                                    g1_s3Ng9
                                                                                                                    h1_s3Nga
                                                                                                                    i1_s3Nge
                                                                                                                    j1_s3Ngf
                                                                                                                    a6_s3Ngh];
                                                                                          } in 
                                                                                            k1_s3Ng0
                                                                                                sat_s3Ngi;
                                                                                } in 
                                                                                  GHC.Read.readPrec
                                                                                      $dRead10_s3NfU
                                                                                      n_s3NfY
                                                                                      sat_s3Ngj;
                                                                      } in 
                                                                        case
                                                                            Text.Read.Lex.$wexpect
                                                                                GHC.Read.$fRead(,)_lexeme
                                                                                sat_s3Ngk
                                                                        of
                                                                        { Unit# ww1_s3Ngm [Occ=Once] ->
                                                                              Text.ParserCombinators.ReadP.Look [ww1_s3Ngm];
                                                                        };
                                                                };
                                                      } in 
                                                        GHC.Read.$fRead(,)2
                                                            $dRead8_s3NfS
                                                            $dRead9_s3NfT
                                                            n_s3NfY
                                                            sat_s3Ngn;
                                            } in 
                                              case
                                                  Text.Read.Lex.$wexpect
                                                      GHC.Read.$fRead(,)_lexeme sat_s3Ngo
                                              of
                                              { Unit# ww1_s3Ngq [Occ=Once] ->
                                                    Text.ParserCombinators.ReadP.Look [ww1_s3Ngq];
                                              };
                                      };
                            } in  ds1_s3NfZ sat_s3Ngr;
                  } in  sat_s3Ngs; } in
        let {
          lvl2_s3Ngt [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> forall b2.
                  ((a_a3KDz, b_a3KDA, c_a3KDB, d_a3KDC, e_a3KDD, f_a3KDE, g_a3KDF,
                    h_a3KDG, i_a3KDH, j_a3KDI, k_a3KDJ)
                   -> Text.ParserCombinators.ReadP.P b2)
                  -> Text.ParserCombinators.ReadP.P b2
          [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
              [p_s3NfX] \r [w_s3Ngu w1_s3Ngv]
                  case GHC.Read.$wparen' p_s3NfX w_s3Ngu w1_s3Ngv of {
                    Unit# ww1_s3Ngx [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Get [ww1_s3Ngx];
                  }; } in
        let {
          sat_s3NgC [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_a3KDz, b_a3KDA, c_a3KDB, d_a3KDC, e_a3KDD, f_a3KDE, g_a3KDF,
                  h_a3KDG, i_a3KDH, j_a3KDI, k_a3KDJ)
          [LclId] =
              [lvl2_s3Ngt] \r [eta2_s3Ngy eta3_s3Ngz]
                  case
                      GHC.Read.$wskipSpacesThenP lvl2_s3Ngt eta2_s3Ngy eta3_s3Ngz
                  of
                  { Unit# ww1_s3NgB [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Look [ww1_s3NgB];
                  };
        } in  GHC.Read.list3 sat_s3NgC eta_s3NfV eta1_s3NfW;

GHC.Read.$fRead(,,,,,,,,,)1
  :: forall a b c d e f g h i j.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        ((a, b, c, d, e, f, g, h, i, j)
         -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=12,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3NgD
           $dRead1_s3NgE
           $dRead2_s3NgF
           $dRead3_s3NgG
           $dRead4_s3NgH
           $dRead5_s3NgI
           $dRead6_s3NgJ
           $dRead7_s3NgK
           $dRead8_s3NgL
           $dRead9_s3NgM
           eta_s3NgN
           eta1_s3NgO]
        let {
          p_s3NgP [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> Text.ParserCombinators.ReadP.ReadP
                    (a_a3KFd, b_a3KFe, c_a3KFf, d_a3KFg, e_a3KFh, f_a3KFi, g_a3KFj,
                     h_a3KFk, i_a3KFl, j_a3KFm)
          [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
              [$dRead_s3NgD
               $dRead1_s3NgE
               $dRead2_s3NgF
               $dRead3_s3NgG
               $dRead4_s3NgH
               $dRead5_s3NgI
               $dRead6_s3NgJ
               $dRead7_s3NgK
               $dRead8_s3NgL
               $dRead9_s3NgM] \r [n_s3NgQ]
                  let {
                    ds1_s3NgR [Occ=OnceL, Dmd=<L,C(U)>]
                      :: Text.ParserCombinators.ReadP.ReadP
                           (a_a3KFd, b_a3KFe, c_a3KFf, d_a3KFg, e_a3KFh, f_a3KFi, g_a3KFj,
                            h_a3KFk)
                    [LclId] =
                        [$dRead_s3NgD
                         $dRead1_s3NgE
                         $dRead2_s3NgF
                         $dRead3_s3NgG
                         $dRead4_s3NgH
                         $dRead5_s3NgI
                         $dRead6_s3NgJ
                         $dRead7_s3NgK
                         n_s3NgQ] \u []
                            GHC.Read.$fRead(,,,,,,,)2
                                $dRead_s3NgD
                                $dRead1_s3NgE
                                $dRead2_s3NgF
                                $dRead3_s3NgG
                                $dRead4_s3NgH
                                $dRead5_s3NgI
                                $dRead6_s3NgJ
                                $dRead7_s3NgK
                                n_s3NgQ; } in
                  let {
                    sat_s3Nhe [Occ=Once]
                      :: forall b2.
                         ((a_a3KFd, b_a3KFe, c_a3KFf, d_a3KFg, e_a3KFh, f_a3KFi, g_a3KFj,
                           h_a3KFk, i_a3KFl, j_a3KFm)
                          -> Text.ParserCombinators.ReadP.P b2)
                         -> Text.ParserCombinators.ReadP.P b2
                    [LclId] =
                        [$dRead8_s3NgL $dRead9_s3NgM n_s3NgQ ds1_s3NgR] \r [k1_s3NgS]
                            let {
                              sat_s3Nhd [Occ=Once]
                                :: (a_a3KFd, b_a3KFe, c_a3KFf, d_a3KFg, e_a3KFh, f_a3KFi, g_a3KFj,
                                    h_a3KFk)
                                   -> Text.ParserCombinators.ReadP.P b2_a3nIU
                              [LclId] =
                                  [$dRead8_s3NgL $dRead9_s3NgM n_s3NgQ k1_s3NgS] \r [a1_s3NgT]
                                      case a1_s3NgT of {
                                        (,,,,,,,) a2_s3NgV [Occ=OnceL]
                                                  b3_s3NgW [Occ=OnceL]
                                                  c1_s3NgX [Occ=OnceL]
                                                  d1_s3NgY [Occ=OnceL]
                                                  e1_s3NgZ [Occ=OnceL]
                                                  f1_s3Nh0 [Occ=OnceL]
                                                  g1_s3Nh1 [Occ=OnceL]
                                                  h1_s3Nh2 [Occ=OnceL] ->
                                            let {
                                              sat_s3Nha [Occ=Once]
                                                :: () -> Text.ParserCombinators.ReadP.P b2_a3nIU
                                              [LclId] =
                                                  [$dRead8_s3NgL
                                                   $dRead9_s3NgM
                                                   n_s3NgQ
                                                   k1_s3NgS
                                                   a2_s3NgV
                                                   b3_s3NgW
                                                   c1_s3NgX
                                                   d1_s3NgY
                                                   e1_s3NgZ
                                                   f1_s3Nh0
                                                   g1_s3Nh1
                                                   h1_s3Nh2] \r [a3_s3Nh3]
                                                      let {
                                                        sat_s3Nh9 [Occ=Once]
                                                          :: (i_a3KFl, j_a3KFm)
                                                             -> Text.ParserCombinators.ReadP.P
                                                                  b2_a3nIU
                                                        [LclId] =
                                                            [k1_s3NgS
                                                             a2_s3NgV
                                                             b3_s3NgW
                                                             c1_s3NgX
                                                             d1_s3NgY
                                                             e1_s3NgZ
                                                             f1_s3Nh0
                                                             g1_s3Nh1
                                                             h1_s3Nh2] \r [a4_s3Nh4]
                                                                case a4_s3Nh4 of {
                                                                  (,) i1_s3Nh6 [Occ=Once]
                                                                      j1_s3Nh7 [Occ=Once] ->
                                                                      let {
                                                                        sat_s3Nh8 [Occ=Once]
                                                                          :: (a_a3KFd, b_a3KFe,
                                                                              c_a3KFf, d_a3KFg,
                                                                              e_a3KFh, f_a3KFi,
                                                                              g_a3KFj, h_a3KFk,
                                                                              i_a3KFl, j_a3KFm)
                                                                        [LclId] =
                                                                            CCCS (,,,,,,,,,)! [a2_s3NgV
                                                                                               b3_s3NgW
                                                                                               c1_s3NgX
                                                                                               d1_s3NgY
                                                                                               e1_s3NgZ
                                                                                               f1_s3Nh0
                                                                                               g1_s3Nh1
                                                                                               h1_s3Nh2
                                                                                               i1_s3Nh6
                                                                                               j1_s3Nh7];
                                                                      } in  k1_s3NgS sat_s3Nh8;
                                                                };
                                                      } in 
                                                        GHC.Read.$fRead(,)2
                                                            $dRead8_s3NgL
                                                            $dRead9_s3NgM
                                                            n_s3NgQ
                                                            sat_s3Nh9;
                                            } in 
                                              case
                                                  Text.Read.Lex.$wexpect
                                                      GHC.Read.$fRead(,)_lexeme sat_s3Nha
                                              of
                                              { Unit# ww1_s3Nhc [Occ=Once] ->
                                                    Text.ParserCombinators.ReadP.Look [ww1_s3Nhc];
                                              };
                                      };
                            } in  ds1_s3NgR sat_s3Nhd;
                  } in  sat_s3Nhe; } in
        let {
          lvl2_s3Nhf [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> forall b2.
                  ((a_a3KFd, b_a3KFe, c_a3KFf, d_a3KFg, e_a3KFh, f_a3KFi, g_a3KFj,
                    h_a3KFk, i_a3KFl, j_a3KFm)
                   -> Text.ParserCombinators.ReadP.P b2)
                  -> Text.ParserCombinators.ReadP.P b2
          [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
              [p_s3NgP] \r [w_s3Nhg w1_s3Nhh]
                  case GHC.Read.$wparen' p_s3NgP w_s3Nhg w1_s3Nhh of {
                    Unit# ww1_s3Nhj [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Get [ww1_s3Nhj];
                  }; } in
        let {
          sat_s3Nho [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_a3KFd, b_a3KFe, c_a3KFf, d_a3KFg, e_a3KFh, f_a3KFi, g_a3KFj,
                  h_a3KFk, i_a3KFl, j_a3KFm)
          [LclId] =
              [lvl2_s3Nhf] \r [eta2_s3Nhk eta3_s3Nhl]
                  case
                      GHC.Read.$wskipSpacesThenP lvl2_s3Nhf eta2_s3Nhk eta3_s3Nhl
                  of
                  { Unit# ww1_s3Nhn [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Look [ww1_s3Nhn];
                  };
        } in  GHC.Read.list3 sat_s3Nho eta_s3NgN eta1_s3NgO;

GHC.Read.$fRead(,,,,,,,,)1
  :: forall a b c d e f g h i.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        ((a, b, c, d, e, f, g, h, i) -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=11,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Nhp
           $dRead1_s3Nhq
           $dRead2_s3Nhr
           $dRead3_s3Nhs
           $dRead4_s3Nht
           $dRead5_s3Nhu
           $dRead6_s3Nhv
           $dRead7_s3Nhw
           $dRead8_s3Nhx
           eta_s3Nhy
           eta1_s3Nhz]
        let {
          p_s3NhA [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> Text.ParserCombinators.ReadP.ReadP
                    (a_a3KGE, b_a3KGF, c_a3KGG, d_a3KGH, e_a3KGI, f_a3KGJ, g_a3KGK,
                     h_a3KGL, i_a3KGM)
          [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
              [$dRead_s3Nhp
               $dRead1_s3Nhq
               $dRead2_s3Nhr
               $dRead3_s3Nhs
               $dRead4_s3Nht
               $dRead5_s3Nhu
               $dRead6_s3Nhv
               $dRead7_s3Nhw
               $dRead8_s3Nhx] \r [n_s3NhB]
                  let {
                    ds1_s3NhC [Occ=OnceL, Dmd=<L,C(U)>]
                      :: Text.ParserCombinators.ReadP.ReadP
                           (a_a3KGE, b_a3KGF, c_a3KGG, d_a3KGH, e_a3KGI, f_a3KGJ, g_a3KGK,
                            h_a3KGL)
                    [LclId] =
                        [$dRead_s3Nhp
                         $dRead1_s3Nhq
                         $dRead2_s3Nhr
                         $dRead3_s3Nhs
                         $dRead4_s3Nht
                         $dRead5_s3Nhu
                         $dRead6_s3Nhv
                         $dRead7_s3Nhw
                         n_s3NhB] \u []
                            GHC.Read.$fRead(,,,,,,,)2
                                $dRead_s3Nhp
                                $dRead1_s3Nhq
                                $dRead2_s3Nhr
                                $dRead3_s3Nhs
                                $dRead4_s3Nht
                                $dRead5_s3Nhu
                                $dRead6_s3Nhv
                                $dRead7_s3Nhw
                                n_s3NhB; } in
                  let {
                    sat_s3NhW [Occ=Once]
                      :: forall b2.
                         ((a_a3KGE, b_a3KGF, c_a3KGG, d_a3KGH, e_a3KGI, f_a3KGJ, g_a3KGK,
                           h_a3KGL, i_a3KGM)
                          -> Text.ParserCombinators.ReadP.P b2)
                         -> Text.ParserCombinators.ReadP.P b2
                    [LclId] =
                        [$dRead8_s3Nhx n_s3NhB ds1_s3NhC] \r [k1_s3NhD]
                            let {
                              sat_s3NhV [Occ=Once]
                                :: (a_a3KGE, b_a3KGF, c_a3KGG, d_a3KGH, e_a3KGI, f_a3KGJ, g_a3KGK,
                                    h_a3KGL)
                                   -> Text.ParserCombinators.ReadP.P b2_a3nIU
                              [LclId] =
                                  [$dRead8_s3Nhx n_s3NhB k1_s3NhD] \r [a1_s3NhE]
                                      case a1_s3NhE of {
                                        (,,,,,,,) a2_s3NhG [Occ=OnceL]
                                                  b3_s3NhH [Occ=OnceL]
                                                  c1_s3NhI [Occ=OnceL]
                                                  d1_s3NhJ [Occ=OnceL]
                                                  e1_s3NhK [Occ=OnceL]
                                                  f1_s3NhL [Occ=OnceL]
                                                  g1_s3NhM [Occ=OnceL]
                                                  h1_s3NhN [Occ=OnceL] ->
                                            let {
                                              sat_s3NhS [Occ=Once]
                                                :: () -> Text.ParserCombinators.ReadP.P b2_a3nIU
                                              [LclId] =
                                                  [$dRead8_s3Nhx
                                                   n_s3NhB
                                                   k1_s3NhD
                                                   a2_s3NhG
                                                   b3_s3NhH
                                                   c1_s3NhI
                                                   d1_s3NhJ
                                                   e1_s3NhK
                                                   f1_s3NhL
                                                   g1_s3NhM
                                                   h1_s3NhN] \r [a3_s3NhO]
                                                      let {
                                                        sat_s3NhR [Occ=Once]
                                                          :: i_a3KGM
                                                             -> Text.ParserCombinators.ReadP.P
                                                                  b2_a3nIU
                                                        [LclId] =
                                                            [k1_s3NhD
                                                             a2_s3NhG
                                                             b3_s3NhH
                                                             c1_s3NhI
                                                             d1_s3NhJ
                                                             e1_s3NhK
                                                             f1_s3NhL
                                                             g1_s3NhM
                                                             h1_s3NhN] \r [a4_s3NhP]
                                                                let {
                                                                  sat_s3NhQ [Occ=Once]
                                                                    :: (a_a3KGE, b_a3KGF, c_a3KGG,
                                                                        d_a3KGH, e_a3KGI, f_a3KGJ,
                                                                        g_a3KGK, h_a3KGL, i_a3KGM)
                                                                  [LclId] =
                                                                      CCCS (,,,,,,,,)! [a2_s3NhG
                                                                                        b3_s3NhH
                                                                                        c1_s3NhI
                                                                                        d1_s3NhJ
                                                                                        e1_s3NhK
                                                                                        f1_s3NhL
                                                                                        g1_s3NhM
                                                                                        h1_s3NhN
                                                                                        a4_s3NhP];
                                                                } in  k1_s3NhD sat_s3NhQ;
                                                      } in 
                                                        GHC.Read.readPrec
                                                            $dRead8_s3Nhx n_s3NhB sat_s3NhR;
                                            } in 
                                              case
                                                  Text.Read.Lex.$wexpect
                                                      GHC.Read.$fRead(,)_lexeme sat_s3NhS
                                              of
                                              { Unit# ww1_s3NhU [Occ=Once] ->
                                                    Text.ParserCombinators.ReadP.Look [ww1_s3NhU];
                                              };
                                      };
                            } in  ds1_s3NhC sat_s3NhV;
                  } in  sat_s3NhW; } in
        let {
          lvl2_s3NhX [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> forall b2.
                  ((a_a3KGE, b_a3KGF, c_a3KGG, d_a3KGH, e_a3KGI, f_a3KGJ, g_a3KGK,
                    h_a3KGL, i_a3KGM)
                   -> Text.ParserCombinators.ReadP.P b2)
                  -> Text.ParserCombinators.ReadP.P b2
          [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
              [p_s3NhA] \r [w_s3NhY w1_s3NhZ]
                  case GHC.Read.$wparen' p_s3NhA w_s3NhY w1_s3NhZ of {
                    Unit# ww1_s3Ni1 [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Get [ww1_s3Ni1];
                  }; } in
        let {
          sat_s3Ni6 [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_a3KGE, b_a3KGF, c_a3KGG, d_a3KGH, e_a3KGI, f_a3KGJ, g_a3KGK,
                  h_a3KGL, i_a3KGM)
          [LclId] =
              [lvl2_s3NhX] \r [eta2_s3Ni2 eta3_s3Ni3]
                  case
                      GHC.Read.$wskipSpacesThenP lvl2_s3NhX eta2_s3Ni2 eta3_s3Ni3
                  of
                  { Unit# ww1_s3Ni5 [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Look [ww1_s3Ni5];
                  };
        } in  GHC.Read.list3 sat_s3Ni6 eta_s3Nhy eta1_s3Nhz;

GHC.Read.$fRead(,,,,,,,)1
  :: forall a b c d e f g h.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        ((a, b, c, d, e, f, g, h) -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=10,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Ni7
           $dRead1_s3Ni8
           $dRead2_s3Ni9
           $dRead3_s3Nia
           $dRead4_s3Nib
           $dRead5_s3Nic
           $dRead6_s3Nid
           $dRead7_s3Nie
           eta_s3Nif
           eta1_s3Nig]
        let {
          p_s3Nih [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> Text.ParserCombinators.ReadP.ReadP
                    (a_a3KI0, b_a3KI1, c_a3KI2, d_a3KI3, e_a3KI4, f_a3KI5, g_a3KI6,
                     h_a3KI7)
          [LclId, Arity=1, Unf=OtherCon []] =
              [$dRead_s3Ni7
               $dRead1_s3Ni8
               $dRead2_s3Ni9
               $dRead3_s3Nia
               $dRead4_s3Nib
               $dRead5_s3Nic
               $dRead6_s3Nid
               $dRead7_s3Nie] \r [eta_B1]
                  GHC.Read.$fRead(,,,,,,,)2
                      $dRead_s3Ni7
                      $dRead1_s3Ni8
                      $dRead2_s3Ni9
                      $dRead3_s3Nia
                      $dRead4_s3Nib
                      $dRead5_s3Nic
                      $dRead6_s3Nid
                      $dRead7_s3Nie
                      eta_B1; } in
        let {
          lvl2_s3Nii [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> forall b2.
                  ((a_a3KI0, b_a3KI1, c_a3KI2, d_a3KI3, e_a3KI4, f_a3KI5, g_a3KI6,
                    h_a3KI7)
                   -> Text.ParserCombinators.ReadP.P b2)
                  -> Text.ParserCombinators.ReadP.P b2
          [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
              [p_s3Nih] \r [w_s3Nij w1_s3Nik]
                  case GHC.Read.$wparen' p_s3Nih w_s3Nij w1_s3Nik of {
                    Unit# ww1_s3Nim [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Get [ww1_s3Nim];
                  }; } in
        let {
          sat_s3Nir [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_a3KI0, b_a3KI1, c_a3KI2, d_a3KI3, e_a3KI4, f_a3KI5, g_a3KI6,
                  h_a3KI7)
          [LclId] =
              [lvl2_s3Nii] \r [eta2_s3Nin eta3_s3Nio]
                  case
                      GHC.Read.$wskipSpacesThenP lvl2_s3Nii eta2_s3Nin eta3_s3Nio
                  of
                  { Unit# ww1_s3Niq [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Look [ww1_s3Niq];
                  };
        } in  GHC.Read.list3 sat_s3Nir eta_s3Nif eta1_s3Nig;

GHC.Read.$fRead(,,,,,,)1
  :: forall a b c d e f g.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f,
      GHC.Read.Read g) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        ((a, b, c, d, e, f, g) -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=9,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Nis
           $dRead1_s3Nit
           $dRead2_s3Niu
           $dRead3_s3Niv
           $dRead4_s3Niw
           $dRead5_s3Nix
           $dRead6_s3Niy
           eta_s3Niz
           eta1_s3NiA]
        let {
          p_s3NiB [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> Text.ParserCombinators.ReadP.ReadP
                    (a_a3KIU, b_a3KIV, c_a3KIW, d_a3KIX, e_a3KIY, f_a3KIZ, g_a3KJ0)
          [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
              [$dRead_s3Nis
               $dRead1_s3Nit
               $dRead2_s3Niu
               $dRead3_s3Niv
               $dRead4_s3Niw
               $dRead5_s3Nix
               $dRead6_s3Niy] \r [n_s3NiC]
                  let {
                    ds1_s3NiD [Occ=OnceL, Dmd=<L,C(U)>]
                      :: Text.ParserCombinators.ReadP.ReadP
                           (a_a3KIU, b_a3KIV, c_a3KIW, d_a3KIX)
                    [LclId] =
                        [$dRead_s3Nis
                         $dRead1_s3Nit
                         $dRead2_s3Niu
                         $dRead3_s3Niv
                         n_s3NiC] \u []
                            GHC.Read.$fRead(,,,)2
                                $dRead_s3Nis
                                $dRead1_s3Nit
                                $dRead2_s3Niu
                                $dRead3_s3Niv
                                n_s3NiC; } in
                  let {
                    sat_s3Nj2 [Occ=Once]
                      :: forall b2.
                         ((a_a3KIU, b_a3KIV, c_a3KIW, d_a3KIX, e_a3KIY, f_a3KIZ, g_a3KJ0)
                          -> Text.ParserCombinators.ReadP.P b2)
                         -> Text.ParserCombinators.ReadP.P b2
                    [LclId] =
                        [$dRead4_s3Niw
                         $dRead5_s3Nix
                         $dRead6_s3Niy
                         n_s3NiC
                         ds1_s3NiD] \r [k1_s3NiE]
                            let {
                              sat_s3Nj1 [Occ=Once]
                                :: (a_a3KIU, b_a3KIV, c_a3KIW, d_a3KIX)
                                   -> Text.ParserCombinators.ReadP.P b2_a3nIU
                              [LclId] =
                                  [$dRead4_s3Niw
                                   $dRead5_s3Nix
                                   $dRead6_s3Niy
                                   n_s3NiC
                                   k1_s3NiE] \r [a1_s3NiF]
                                      case a1_s3NiF of {
                                        (,,,) a2_s3NiH [Occ=OnceL]
                                              b3_s3NiI [Occ=OnceL]
                                              c1_s3NiJ [Occ=OnceL]
                                              d1_s3NiK [Occ=OnceL] ->
                                            let {
                                              sat_s3NiY [Occ=Once]
                                                :: () -> Text.ParserCombinators.ReadP.P b2_a3nIU
                                              [LclId] =
                                                  [$dRead4_s3Niw
                                                   $dRead5_s3Nix
                                                   $dRead6_s3Niy
                                                   n_s3NiC
                                                   k1_s3NiE
                                                   a2_s3NiH
                                                   b3_s3NiI
                                                   c1_s3NiJ
                                                   d1_s3NiK] \r [a3_s3NiL]
                                                      let {
                                                        sat_s3NiX [Occ=Once]
                                                          :: (e_a3KIY, f_a3KIZ)
                                                             -> Text.ParserCombinators.ReadP.P
                                                                  b2_a3nIU
                                                        [LclId] =
                                                            [$dRead6_s3Niy
                                                             n_s3NiC
                                                             k1_s3NiE
                                                             a2_s3NiH
                                                             b3_s3NiI
                                                             c1_s3NiJ
                                                             d1_s3NiK] \r [a4_s3NiM]
                                                                case a4_s3NiM of {
                                                                  (,) e1_s3NiO [Occ=OnceL]
                                                                      f1_s3NiP [Occ=OnceL] ->
                                                                      let {
                                                                        sat_s3NiU [Occ=Once]
                                                                          :: ()
                                                                             -> Text.ParserCombinators.ReadP.P
                                                                                  b2_a3nIU
                                                                        [LclId] =
                                                                            [$dRead6_s3Niy
                                                                             n_s3NiC
                                                                             k1_s3NiE
                                                                             a2_s3NiH
                                                                             b3_s3NiI
                                                                             c1_s3NiJ
                                                                             d1_s3NiK
                                                                             e1_s3NiO
                                                                             f1_s3NiP] \r [a5_s3NiQ]
                                                                                let {
                                                                                  sat_s3NiT [Occ=Once]
                                                                                    :: g_a3KJ0
                                                                                       -> Text.ParserCombinators.ReadP.P
                                                                                            b2_a3nIU
                                                                                  [LclId] =
                                                                                      [k1_s3NiE
                                                                                       a2_s3NiH
                                                                                       b3_s3NiI
                                                                                       c1_s3NiJ
                                                                                       d1_s3NiK
                                                                                       e1_s3NiO
                                                                                       f1_s3NiP] \r [a6_s3NiR]
                                                                                          let {
                                                                                            sat_s3NiS [Occ=Once]
                                                                                              :: (a_a3KIU,
                                                                                                  b_a3KIV,
                                                                                                  c_a3KIW,
                                                                                                  d_a3KIX,
                                                                                                  e_a3KIY,
                                                                                                  f_a3KIZ,
                                                                                                  g_a3KJ0)
                                                                                            [LclId] =
                                                                                                CCCS (,,,,,,)! [a2_s3NiH
                                                                                                                b3_s3NiI
                                                                                                                c1_s3NiJ
                                                                                                                d1_s3NiK
                                                                                                                e1_s3NiO
                                                                                                                f1_s3NiP
                                                                                                                a6_s3NiR];
                                                                                          } in 
                                                                                            k1_s3NiE
                                                                                                sat_s3NiS;
                                                                                } in 
                                                                                  GHC.Read.readPrec
                                                                                      $dRead6_s3Niy
                                                                                      n_s3NiC
                                                                                      sat_s3NiT;
                                                                      } in 
                                                                        case
                                                                            Text.Read.Lex.$wexpect
                                                                                GHC.Read.$fRead(,)_lexeme
                                                                                sat_s3NiU
                                                                        of
                                                                        { Unit# ww1_s3NiW [Occ=Once] ->
                                                                              Text.ParserCombinators.ReadP.Look [ww1_s3NiW];
                                                                        };
                                                                };
                                                      } in 
                                                        GHC.Read.$fRead(,)2
                                                            $dRead4_s3Niw
                                                            $dRead5_s3Nix
                                                            n_s3NiC
                                                            sat_s3NiX;
                                            } in 
                                              case
                                                  Text.Read.Lex.$wexpect
                                                      GHC.Read.$fRead(,)_lexeme sat_s3NiY
                                              of
                                              { Unit# ww1_s3Nj0 [Occ=Once] ->
                                                    Text.ParserCombinators.ReadP.Look [ww1_s3Nj0];
                                              };
                                      };
                            } in  ds1_s3NiD sat_s3Nj1;
                  } in  sat_s3Nj2; } in
        let {
          lvl2_s3Nj3 [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> forall b2.
                  ((a_a3KIU, b_a3KIV, c_a3KIW, d_a3KIX, e_a3KIY, f_a3KIZ, g_a3KJ0)
                   -> Text.ParserCombinators.ReadP.P b2)
                  -> Text.ParserCombinators.ReadP.P b2
          [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
              [p_s3NiB] \r [w_s3Nj4 w1_s3Nj5]
                  case GHC.Read.$wparen' p_s3NiB w_s3Nj4 w1_s3Nj5 of {
                    Unit# ww1_s3Nj7 [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Get [ww1_s3Nj7];
                  }; } in
        let {
          sat_s3Njc [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_a3KIU, b_a3KIV, c_a3KIW, d_a3KIX, e_a3KIY, f_a3KIZ, g_a3KJ0)
          [LclId] =
              [lvl2_s3Nj3] \r [eta2_s3Nj8 eta3_s3Nj9]
                  case
                      GHC.Read.$wskipSpacesThenP lvl2_s3Nj3 eta2_s3Nj8 eta3_s3Nj9
                  of
                  { Unit# ww1_s3Njb [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Look [ww1_s3Njb];
                  };
        } in  GHC.Read.list3 sat_s3Njc eta_s3Niz eta1_s3NiA;

GHC.Read.$fRead(,,,,,)1
  :: forall a b c d e f.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        ((a, b, c, d, e, f) -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=8,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Njd
           $dRead1_s3Nje
           $dRead2_s3Njf
           $dRead3_s3Njg
           $dRead4_s3Njh
           $dRead5_s3Nji
           eta_s3Njj
           eta1_s3Njk]
        let {
          p_s3Njl [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> Text.ParserCombinators.ReadP.ReadP
                    (a_a3KKe, b_a3KKf, c_a3KKg, d_a3KKh, e_a3KKi, f_a3KKj)
          [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
              [$dRead_s3Njd
               $dRead1_s3Nje
               $dRead2_s3Njf
               $dRead3_s3Njg
               $dRead4_s3Njh
               $dRead5_s3Nji] \r [n_s3Njm]
                  let {
                    ds1_s3Njn [Occ=OnceL, Dmd=<L,C(U)>]
                      :: Text.ParserCombinators.ReadP.ReadP
                           (a_a3KKe, b_a3KKf, c_a3KKg, d_a3KKh)
                    [LclId] =
                        [$dRead_s3Njd
                         $dRead1_s3Nje
                         $dRead2_s3Njf
                         $dRead3_s3Njg
                         n_s3Njm] \u []
                            GHC.Read.$fRead(,,,)2
                                $dRead_s3Njd
                                $dRead1_s3Nje
                                $dRead2_s3Njf
                                $dRead3_s3Njg
                                n_s3Njm; } in
                  let {
                    sat_s3NjG [Occ=Once]
                      :: forall b2.
                         ((a_a3KKe, b_a3KKf, c_a3KKg, d_a3KKh, e_a3KKi, f_a3KKj)
                          -> Text.ParserCombinators.ReadP.P b2)
                         -> Text.ParserCombinators.ReadP.P b2
                    [LclId] =
                        [$dRead4_s3Njh $dRead5_s3Nji n_s3Njm ds1_s3Njn] \r [k1_s3Njo]
                            let {
                              sat_s3NjF [Occ=Once]
                                :: (a_a3KKe, b_a3KKf, c_a3KKg, d_a3KKh)
                                   -> Text.ParserCombinators.ReadP.P b2_a3nIU
                              [LclId] =
                                  [$dRead4_s3Njh $dRead5_s3Nji n_s3Njm k1_s3Njo] \r [a1_s3Njp]
                                      case a1_s3Njp of {
                                        (,,,) a2_s3Njr [Occ=OnceL]
                                              b3_s3Njs [Occ=OnceL]
                                              c1_s3Njt [Occ=OnceL]
                                              d1_s3Nju [Occ=OnceL] ->
                                            let {
                                              sat_s3NjC [Occ=Once]
                                                :: () -> Text.ParserCombinators.ReadP.P b2_a3nIU
                                              [LclId] =
                                                  [$dRead4_s3Njh
                                                   $dRead5_s3Nji
                                                   n_s3Njm
                                                   k1_s3Njo
                                                   a2_s3Njr
                                                   b3_s3Njs
                                                   c1_s3Njt
                                                   d1_s3Nju] \r [a3_s3Njv]
                                                      let {
                                                        sat_s3NjB [Occ=Once]
                                                          :: (e_a3KKi, f_a3KKj)
                                                             -> Text.ParserCombinators.ReadP.P
                                                                  b2_a3nIU
                                                        [LclId] =
                                                            [k1_s3Njo
                                                             a2_s3Njr
                                                             b3_s3Njs
                                                             c1_s3Njt
                                                             d1_s3Nju] \r [a4_s3Njw]
                                                                case a4_s3Njw of {
                                                                  (,) e1_s3Njy [Occ=Once]
                                                                      f1_s3Njz [Occ=Once] ->
                                                                      let {
                                                                        sat_s3NjA [Occ=Once]
                                                                          :: (a_a3KKe, b_a3KKf,
                                                                              c_a3KKg, d_a3KKh,
                                                                              e_a3KKi, f_a3KKj)
                                                                        [LclId] =
                                                                            CCCS (,,,,,)! [a2_s3Njr
                                                                                           b3_s3Njs
                                                                                           c1_s3Njt
                                                                                           d1_s3Nju
                                                                                           e1_s3Njy
                                                                                           f1_s3Njz];
                                                                      } in  k1_s3Njo sat_s3NjA;
                                                                };
                                                      } in 
                                                        GHC.Read.$fRead(,)2
                                                            $dRead4_s3Njh
                                                            $dRead5_s3Nji
                                                            n_s3Njm
                                                            sat_s3NjB;
                                            } in 
                                              case
                                                  Text.Read.Lex.$wexpect
                                                      GHC.Read.$fRead(,)_lexeme sat_s3NjC
                                              of
                                              { Unit# ww1_s3NjE [Occ=Once] ->
                                                    Text.ParserCombinators.ReadP.Look [ww1_s3NjE];
                                              };
                                      };
                            } in  ds1_s3Njn sat_s3NjF;
                  } in  sat_s3NjG; } in
        let {
          lvl2_s3NjH [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> forall b2.
                  ((a_a3KKe, b_a3KKf, c_a3KKg, d_a3KKh, e_a3KKi, f_a3KKj)
                   -> Text.ParserCombinators.ReadP.P b2)
                  -> Text.ParserCombinators.ReadP.P b2
          [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
              [p_s3Njl] \r [w_s3NjI w1_s3NjJ]
                  case GHC.Read.$wparen' p_s3Njl w_s3NjI w1_s3NjJ of {
                    Unit# ww1_s3NjL [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Get [ww1_s3NjL];
                  }; } in
        let {
          sat_s3NjQ [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_a3KKe, b_a3KKf, c_a3KKg, d_a3KKh, e_a3KKi, f_a3KKj)
          [LclId] =
              [lvl2_s3NjH] \r [eta2_s3NjM eta3_s3NjN]
                  case
                      GHC.Read.$wskipSpacesThenP lvl2_s3NjH eta2_s3NjM eta3_s3NjN
                  of
                  { Unit# ww1_s3NjP [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Look [ww1_s3NjP];
                  };
        } in  GHC.Read.list3 sat_s3NjQ eta_s3Njj eta1_s3Njk;

GHC.Read.$fRead(,,,,)1
  :: forall a b c d e.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        ((a, b, c, d, e) -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=7,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3NjR
           $dRead1_s3NjS
           $dRead2_s3NjT
           $dRead3_s3NjU
           $dRead4_s3NjV
           eta_s3NjW
           eta1_s3NjX]
        let {
          p_s3NjY [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> Text.ParserCombinators.ReadP.ReadP
                    (a_a3KLl, b_a3KLm, c_a3KLn, d_a3KLo, e_a3KLp)
          [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
              [$dRead_s3NjR
               $dRead1_s3NjS
               $dRead2_s3NjT
               $dRead3_s3NjU
               $dRead4_s3NjV] \r [n_s3NjZ]
                  let {
                    ds1_s3Nk0 [Occ=OnceL, Dmd=<L,C(U)>]
                      :: Text.ParserCombinators.ReadP.ReadP
                           (a_a3KLl, b_a3KLm, c_a3KLn, d_a3KLo)
                    [LclId] =
                        [$dRead_s3NjR
                         $dRead1_s3NjS
                         $dRead2_s3NjT
                         $dRead3_s3NjU
                         n_s3NjZ] \u []
                            GHC.Read.$fRead(,,,)2
                                $dRead_s3NjR
                                $dRead1_s3NjS
                                $dRead2_s3NjT
                                $dRead3_s3NjU
                                n_s3NjZ; } in
                  let {
                    sat_s3Nkg [Occ=Once]
                      :: forall b2.
                         ((a_a3KLl, b_a3KLm, c_a3KLn, d_a3KLo, e_a3KLp)
                          -> Text.ParserCombinators.ReadP.P b2)
                         -> Text.ParserCombinators.ReadP.P b2
                    [LclId] =
                        [$dRead4_s3NjV n_s3NjZ ds1_s3Nk0] \r [k1_s3Nk1]
                            let {
                              sat_s3Nkf [Occ=Once]
                                :: (a_a3KLl, b_a3KLm, c_a3KLn, d_a3KLo)
                                   -> Text.ParserCombinators.ReadP.P b2_a3nIU
                              [LclId] =
                                  [$dRead4_s3NjV n_s3NjZ k1_s3Nk1] \r [a1_s3Nk2]
                                      case a1_s3Nk2 of {
                                        (,,,) a2_s3Nk4 [Occ=OnceL]
                                              b3_s3Nk5 [Occ=OnceL]
                                              c1_s3Nk6 [Occ=OnceL]
                                              d1_s3Nk7 [Occ=OnceL] ->
                                            let {
                                              sat_s3Nkc [Occ=Once]
                                                :: () -> Text.ParserCombinators.ReadP.P b2_a3nIU
                                              [LclId] =
                                                  [$dRead4_s3NjV
                                                   n_s3NjZ
                                                   k1_s3Nk1
                                                   a2_s3Nk4
                                                   b3_s3Nk5
                                                   c1_s3Nk6
                                                   d1_s3Nk7] \r [a3_s3Nk8]
                                                      let {
                                                        sat_s3Nkb [Occ=Once]
                                                          :: e_a3KLp
                                                             -> Text.ParserCombinators.ReadP.P
                                                                  b2_a3nIU
                                                        [LclId] =
                                                            [k1_s3Nk1
                                                             a2_s3Nk4
                                                             b3_s3Nk5
                                                             c1_s3Nk6
                                                             d1_s3Nk7] \r [a4_s3Nk9]
                                                                let {
                                                                  sat_s3Nka [Occ=Once]
                                                                    :: (a_a3KLl, b_a3KLm, c_a3KLn,
                                                                        d_a3KLo, e_a3KLp)
                                                                  [LclId] =
                                                                      CCCS (,,,,)! [a2_s3Nk4
                                                                                    b3_s3Nk5
                                                                                    c1_s3Nk6
                                                                                    d1_s3Nk7
                                                                                    a4_s3Nk9];
                                                                } in  k1_s3Nk1 sat_s3Nka;
                                                      } in 
                                                        GHC.Read.readPrec
                                                            $dRead4_s3NjV n_s3NjZ sat_s3Nkb;
                                            } in 
                                              case
                                                  Text.Read.Lex.$wexpect
                                                      GHC.Read.$fRead(,)_lexeme sat_s3Nkc
                                              of
                                              { Unit# ww1_s3Nke [Occ=Once] ->
                                                    Text.ParserCombinators.ReadP.Look [ww1_s3Nke];
                                              };
                                      };
                            } in  ds1_s3Nk0 sat_s3Nkf;
                  } in  sat_s3Nkg; } in
        let {
          lvl2_s3Nkh [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> forall b2.
                  ((a_a3KLl, b_a3KLm, c_a3KLn, d_a3KLo, e_a3KLp)
                   -> Text.ParserCombinators.ReadP.P b2)
                  -> Text.ParserCombinators.ReadP.P b2
          [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
              [p_s3NjY] \r [w_s3Nki w1_s3Nkj]
                  case GHC.Read.$wparen' p_s3NjY w_s3Nki w1_s3Nkj of {
                    Unit# ww1_s3Nkl [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Get [ww1_s3Nkl];
                  }; } in
        let {
          sat_s3Nkq [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_a3KLl, b_a3KLm, c_a3KLn, d_a3KLo, e_a3KLp)
          [LclId] =
              [lvl2_s3Nkh] \r [eta2_s3Nkm eta3_s3Nkn]
                  case
                      GHC.Read.$wskipSpacesThenP lvl2_s3Nkh eta2_s3Nkm eta3_s3Nkn
                  of
                  { Unit# ww1_s3Nkp [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Look [ww1_s3Nkp];
                  };
        } in  GHC.Read.list3 sat_s3Nkq eta_s3NjW eta1_s3NjX;

GHC.Read.$fRead(,,,)1
  :: forall a b c d.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        ((a, b, c, d) -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=6,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Nkr
           $dRead1_s3Nks
           $dRead2_s3Nkt
           $dRead3_s3Nku
           eta_s3Nkv
           eta1_s3Nkw]
        let {
          p_s3Nkx [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> Text.ParserCombinators.ReadP.ReadP
                    (a_a3KMn, b_a3KMo, c_a3KMp, d_a3KMq)
          [LclId, Arity=1, Unf=OtherCon []] =
              [$dRead_s3Nkr
               $dRead1_s3Nks
               $dRead2_s3Nkt
               $dRead3_s3Nku] \r [eta_B1]
                  GHC.Read.$fRead(,,,)2
                      $dRead_s3Nkr $dRead1_s3Nks $dRead2_s3Nkt $dRead3_s3Nku eta_B1; } in
        let {
          lvl2_s3Nky [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> forall b2.
                  ((a_a3KMn, b_a3KMo, c_a3KMp, d_a3KMq)
                   -> Text.ParserCombinators.ReadP.P b2)
                  -> Text.ParserCombinators.ReadP.P b2
          [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
              [p_s3Nkx] \r [w_s3Nkz w1_s3NkA]
                  case GHC.Read.$wparen' p_s3Nkx w_s3Nkz w1_s3NkA of {
                    Unit# ww1_s3NkC [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Get [ww1_s3NkC];
                  }; } in
        let {
          sat_s3NkH [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_a3KMn, b_a3KMo, c_a3KMp, d_a3KMq)
          [LclId] =
              [lvl2_s3Nky] \r [eta2_s3NkD eta3_s3NkE]
                  case
                      GHC.Read.$wskipSpacesThenP lvl2_s3Nky eta2_s3NkD eta3_s3NkE
                  of
                  { Unit# ww1_s3NkG [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Look [ww1_s3NkG];
                  };
        } in  GHC.Read.list3 sat_s3NkH eta_s3Nkv eta1_s3Nkw;

GHC.Read.$fRead(,,)1
  :: forall a b c.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        ((a, b, c) -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=5,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3NkI
           $dRead1_s3NkJ
           $dRead2_s3NkK
           eta_s3NkL
           eta1_s3NkM]
        let {
          p_s3NkN [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> Text.ParserCombinators.ReadP.ReadP (a_a3KN1, b_a3KN2, c_a3KN3)
          [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
              [$dRead_s3NkI $dRead1_s3NkJ $dRead2_s3NkK] \r [n_s3NkO]
                  let {
                    ds1_s3NkP [Occ=OnceL, Dmd=<L,C(U)>]
                      :: Text.ParserCombinators.ReadP.ReadP (a_a3KN1, b_a3KN2)
                    [LclId] =
                        [$dRead_s3NkI $dRead1_s3NkJ n_s3NkO] \u []
                            GHC.Read.$fRead(,)2 $dRead_s3NkI $dRead1_s3NkJ n_s3NkO; } in
                  let {
                    sat_s3Nl3 [Occ=Once]
                      :: forall b2.
                         ((a_a3KN1, b_a3KN2, c_a3KN3) -> Text.ParserCombinators.ReadP.P b2)
                         -> Text.ParserCombinators.ReadP.P b2
                    [LclId] =
                        [$dRead2_s3NkK n_s3NkO ds1_s3NkP] \r [k1_s3NkQ]
                            let {
                              sat_s3Nl2 [Occ=Once]
                                :: (a_a3KN1, b_a3KN2) -> Text.ParserCombinators.ReadP.P b2_a3nIU
                              [LclId] =
                                  [$dRead2_s3NkK n_s3NkO k1_s3NkQ] \r [a1_s3NkR]
                                      case a1_s3NkR of {
                                        (,) a2_s3NkT [Occ=OnceL] b3_s3NkU [Occ=OnceL] ->
                                            let {
                                              sat_s3NkZ [Occ=Once]
                                                :: () -> Text.ParserCombinators.ReadP.P b2_a3nIU
                                              [LclId] =
                                                  [$dRead2_s3NkK
                                                   n_s3NkO
                                                   k1_s3NkQ
                                                   a2_s3NkT
                                                   b3_s3NkU] \r [a3_s3NkV]
                                                      let {
                                                        sat_s3NkY [Occ=Once]
                                                          :: c_a3KN3
                                                             -> Text.ParserCombinators.ReadP.P
                                                                  b2_a3nIU
                                                        [LclId] =
                                                            [k1_s3NkQ
                                                             a2_s3NkT
                                                             b3_s3NkU] \r [a4_s3NkW]
                                                                let {
                                                                  sat_s3NkX [Occ=Once]
                                                                    :: (a_a3KN1, b_a3KN2, c_a3KN3)
                                                                  [LclId] =
                                                                      CCCS (,,)! [a2_s3NkT
                                                                                  b3_s3NkU
                                                                                  a4_s3NkW];
                                                                } in  k1_s3NkQ sat_s3NkX;
                                                      } in 
                                                        GHC.Read.readPrec
                                                            $dRead2_s3NkK n_s3NkO sat_s3NkY;
                                            } in 
                                              case
                                                  Text.Read.Lex.$wexpect
                                                      GHC.Read.$fRead(,)_lexeme sat_s3NkZ
                                              of
                                              { Unit# ww1_s3Nl1 [Occ=Once] ->
                                                    Text.ParserCombinators.ReadP.Look [ww1_s3Nl1];
                                              };
                                      };
                            } in  ds1_s3NkP sat_s3Nl2;
                  } in  sat_s3Nl3; } in
        let {
          lvl2_s3Nl4 [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> forall b2.
                  ((a_a3KN1, b_a3KN2, c_a3KN3) -> Text.ParserCombinators.ReadP.P b2)
                  -> Text.ParserCombinators.ReadP.P b2
          [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
              [p_s3NkN] \r [w_s3Nl5 w1_s3Nl6]
                  case GHC.Read.$wparen' p_s3NkN w_s3Nl5 w1_s3Nl6 of {
                    Unit# ww1_s3Nl8 [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Get [ww1_s3Nl8];
                  }; } in
        let {
          sat_s3Nld [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_a3KN1, b_a3KN2, c_a3KN3)
          [LclId] =
              [lvl2_s3Nl4] \r [eta2_s3Nl9 eta3_s3Nla]
                  case
                      GHC.Read.$wskipSpacesThenP lvl2_s3Nl4 eta2_s3Nl9 eta3_s3Nla
                  of
                  { Unit# ww1_s3Nlc [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Look [ww1_s3Nlc];
                  };
        } in  GHC.Read.list3 sat_s3Nld eta_s3NkL eta1_s3NkM;

GHC.Read.$fRead(,)1
  :: forall a b.
     (GHC.Read.Read a, GHC.Read.Read b) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        ((a, b) -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=4,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Nle $dRead1_s3Nlf eta_s3Nlg eta1_s3Nlh]
        let {
          p_s3Nli [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> Text.ParserCombinators.ReadP.ReadP (a_a3KNT, b_a3KNU)
          [LclId, Arity=1, Unf=OtherCon []] =
              [$dRead_s3Nle $dRead1_s3Nlf] \r [eta_B1]
                  GHC.Read.$fRead(,)2 $dRead_s3Nle $dRead1_s3Nlf eta_B1; } in
        let {
          lvl2_s3Nlj [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> forall b2.
                  ((a_a3KNT, b_a3KNU) -> Text.ParserCombinators.ReadP.P b2)
                  -> Text.ParserCombinators.ReadP.P b2
          [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
              [p_s3Nli] \r [w_s3Nlk w1_s3Nll]
                  case GHC.Read.$wparen' p_s3Nli w_s3Nlk w1_s3Nll of {
                    Unit# ww1_s3Nln [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Get [ww1_s3Nln];
                  }; } in
        let {
          sat_s3Nls [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec (a_a3KNT, b_a3KNU)
          [LclId] =
              [lvl2_s3Nlj] \r [eta2_s3Nlo eta3_s3Nlp]
                  case
                      GHC.Read.$wskipSpacesThenP lvl2_s3Nlj eta2_s3Nlo eta3_s3Nlp
                  of
                  { Unit# ww1_s3Nlr [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Look [ww1_s3Nlr];
                  };
        } in  GHC.Read.list3 sat_s3Nls eta_s3Nlg eta1_s3Nlh;

GHC.Read.list2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "["#;

GHC.Read.list1 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Read.list2;

GHC.Read.list_lexeme :: Text.Read.Lex.Lexeme
[GblId, Str=m3, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Punc! [GHC.Read.list1];

GHC.Read.list
  :: forall a.
     Text.ParserCombinators.ReadPrec.ReadPrec a
     -> Text.ParserCombinators.ReadPrec.ReadPrec [a]
[GblId, Arity=1, Str=<L,1*C1(C(U))>, Unf=OtherCon []] =
    [] \r [readx_s3Nlt]
        let {
          ds1_s3Nlu [Dmd=<L,C(U)>]
            :: Text.ParserCombinators.ReadP.ReadP a_a3KpE
          [LclId] =
              [readx_s3Nlt] \u []
                  readx_s3Nlt Text.ParserCombinators.ReadPrec.minPrec; } in
        let {
          $wlistRest_s3Nlv [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
            :: GHC.Types.Bool
               -> forall b1.
                  ([a_a3KpE] -> Text.ParserCombinators.ReadP.P b1)
                  -> Text.ParserCombinators.ReadP.P b1
          [LclId, Arity=2, Str=<L,U><L,C(U)>, Unf=OtherCon []] =
              sat-only [ds1_s3Nlu $wlistRest_s3Nlv] \r [w_s3Nlw w1_s3Nlx]
                  let {
                    lvl116_s3Nly [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3MtN
                    [LclId] =
                        [ds1_s3Nlu $wlistRest_s3Nlv w_s3Nlw w1_s3Nlx] \u []
                            let {
                              lvl2_s3Nlz [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3MtN
                              [LclId] =
                                  [w1_s3Nlx] \u [] w1_s3Nlx GHC.Types.[]; } in
                            let {
                              lvl3_s3NlA [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3MtN
                              [LclId] =
                                  [ds1_s3Nlu $wlistRest_s3Nlv w1_s3Nlx] \u []
                                      let {
                                        sat_s3NlF [Occ=Once]
                                          :: a_a3KpE -> Text.ParserCombinators.ReadP.P b1_s3MtN
                                        [LclId] =
                                            [$wlistRest_s3Nlv w1_s3Nlx] \r [a1_s3NlB]
                                                let {
                                                  sat_s3NlE [Occ=Once]
                                                    :: [a_a3KpE]
                                                       -> Text.ParserCombinators.ReadP.P b1_s3MtN
                                                  [LclId] =
                                                      [w1_s3Nlx a1_s3NlB] \r [a2_s3NlC]
                                                          let {
                                                            sat_s3NlD [Occ=Once] :: [a_a3KpE]
                                                            [LclId] =
                                                                CCCS :! [a1_s3NlB a2_s3NlC];
                                                          } in  w1_s3Nlx sat_s3NlD;
                                                } in  $wlistRest_s3Nlv GHC.Types.True sat_s3NlE;
                                      } in  ds1_s3Nlu sat_s3NlF; } in
                            let {
                              sat_s3Nm1 [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_s3MtN
                              [LclId] =
                                  [w_s3Nlw lvl2_s3Nlz lvl3_s3NlA] \u []
                                      let {
                                        sat_s3Nm0 [Occ=Once]
                                          :: Text.Read.Lex.Lexeme
                                             -> Text.ParserCombinators.ReadP.P b1_s3MtN
                                        [LclId] =
                                            [w_s3Nlw lvl2_s3Nlz lvl3_s3NlA] \r [a1_s3NlK]
                                                case a1_s3NlK of {
                                                  __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                                                  Text.Read.Lex.Punc c_s3NlM [Occ=Once!] ->
                                                      case c_s3NlM of {
                                                        [] -> Text.ParserCombinators.ReadP.Fail [];
                                                        : ds_s3NlO [Occ=Once!]
                                                          ds2_s3NlP [Occ=Once*!] ->
                                                            case ds_s3NlO of {
                                                              GHC.Types.C# ds3_s3NlR [Occ=Once!] ->
                                                                  case ds3_s3NlR of {
                                                                    __DEFAULT ->
                                                                        Text.ParserCombinators.ReadP.Fail [];
                                                                    ','# ->
                                                                        case ds2_s3NlP of {
                                                                          [] ->
                                                                              case w_s3Nlw of {
                                                                                GHC.Types.False ->
                                                                                    Text.ParserCombinators.ReadP.Fail [];
                                                                                GHC.Types.True ->
                                                                                    lvl3_s3NlA;
                                                                              };
                                                                          : _ [Occ=Dead]
                                                                            _ [Occ=Dead] ->
                                                                              Text.ParserCombinators.ReadP.Fail [];
                                                                        };
                                                                    ']'# ->
                                                                        case ds2_s3NlP of {
                                                                          [] -> lvl2_s3Nlz;
                                                                          : _ [Occ=Dead]
                                                                            _ [Occ=Dead] ->
                                                                              Text.ParserCombinators.ReadP.Fail [];
                                                                        };
                                                                  };
                                                            };
                                                      };
                                                };
                                      } in  Text.Read.Lex.expect2 sat_s3Nm0; } in
                            let {
                              sat_s3NlI [Occ=OnceL]
                                :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3MtN
                              [LclId] =
                                  [] \r [a3_s3NlG]
                                      case a3_s3NlG of {
                                        __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                                      }; } in
                            let {
                              sat_s3NlJ [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_s3MtN
                              [LclId] =
                                  CCCS Text.ParserCombinators.ReadP.Look! [sat_s3NlI];
                            } in 
                              Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                  sat_s3NlJ sat_s3Nm1; } in
                  let {
                    k_s3Nm2 [Occ=OnceL, Dmd=<L,C(U)>]
                      :: () -> Text.ParserCombinators.ReadP.P b1_s3MtN
                    [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
                        [lvl116_s3Nly] \r [a3_s3Nm3] lvl116_s3Nly; } in
                  let {
                    sat_s3Nm5 [Occ=Once]
                      :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3MtN
                    [LclId] =
                        [k_s3Nm2] \r [a1_s3Nm4]
                            Text.ParserCombinators.ReadP.skipSpaces2 a1_s3Nm4 k_s3Nm2;
                  } in  Text.ParserCombinators.ReadP.Look [sat_s3Nm5]; } in
        let {
          sat_s3Nmj [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec [a_a3KpE]
          [LclId] =
              [ds1_s3Nlu $wlistRest_s3Nlv] \r [n_s3Nm6 eta_s3Nm7]
                  let {
                    sat_s3Nmg [Occ=Once]
                      :: () -> Text.ParserCombinators.ReadP.P b_a3ngn
                    [LclId] =
                        [ds1_s3Nlu $wlistRest_s3Nlv eta_s3Nm7] \r [a1_s3Nm8]
                            let {
                              sat_s3Nmf [Occ=Once] :: Text.ParserCombinators.ReadP.P b_a3ngn
                              [LclId] =
                                  [ds1_s3Nlu $wlistRest_s3Nlv eta_s3Nm7] \u []
                                      let {
                                        sat_s3Nme [Occ=Once]
                                          :: a_a3KpE -> Text.ParserCombinators.ReadP.P b_a3ngn
                                        [LclId] =
                                            [$wlistRest_s3Nlv eta_s3Nm7] \r [a2_s3Nma]
                                                let {
                                                  sat_s3Nmd [Occ=Once]
                                                    :: [a_a3KpE]
                                                       -> Text.ParserCombinators.ReadP.P b_a3ngn
                                                  [LclId] =
                                                      [eta_s3Nm7 a2_s3Nma] \r [a3_s3Nmb]
                                                          let {
                                                            sat_s3Nmc [Occ=Once] :: [a_a3KpE]
                                                            [LclId] =
                                                                CCCS :! [a2_s3Nma a3_s3Nmb];
                                                          } in  eta_s3Nm7 sat_s3Nmc;
                                                } in  $wlistRest_s3Nlv GHC.Types.True sat_s3Nmd;
                                      } in  ds1_s3Nlu sat_s3Nme;
                            } in 
                              case $wlistRest_s3Nlv GHC.Types.False eta_s3Nm7 of sat_s3Nm9 {
                                __DEFAULT ->
                                    Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                        sat_s3Nm9 sat_s3Nmf;
                              };
                  } in 
                    case Text.Read.Lex.$wexpect GHC.Read.list_lexeme sat_s3Nmg of {
                      Unit# ww1_s3Nmi [Occ=Once] ->
                          Text.ParserCombinators.ReadP.Look [ww1_s3Nmi];
                    };
        } in  GHC.Read.list3 sat_s3Nmj;

GHC.Read.readListPrecDefault
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadPrec.ReadPrec [a]
[GblId, Arity=1, Str=<L,1*U(A,A,1*C1(C(U)),A)>, Unf=OtherCon []] =
    [] \r [$dRead_s3Nmk]
        let {
          sat_s3Nml [Occ=Once, Dmd=<L,1*C1(C(U))>]
            :: Text.ParserCombinators.ReadPrec.ReadPrec a_a3Ks9
          [LclId] =
              [$dRead_s3Nmk] \s [] GHC.Read.readPrec $dRead_s3Nmk;
        } in  GHC.Read.list sat_s3Nml;

GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadListPrec
  :: forall a b c d e f g h i j k l m n o.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l, GHC.Read.Read m, GHC.Read.Read n,
      GHC.Read.Read o) =>
     Text.ParserCombinators.ReadPrec.ReadPrec
       [(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)]
[GblId,
 Arity=15,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Nmm
           $dRead1_s3Nmn
           $dRead2_s3Nmo
           $dRead3_s3Nmp
           $dRead4_s3Nmq
           $dRead5_s3Nmr
           $dRead6_s3Nms
           $dRead7_s3Nmt
           $dRead8_s3Nmu
           $dRead9_s3Nmv
           $dRead10_s3Nmw
           $dRead11_s3Nmx
           $dRead12_s3Nmy
           $dRead13_s3Nmz
           $dRead14_s3NmA]
        let {
          sat_s3NmB [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KGz, b_X3KGB, c_X3KGD, d_X3KGF, e_X3KGH, f_X3KGJ, g_X3KGL,
                  h_X3KGN, i_X3KGP, j_X3KGR, k_X3KGT, l_X3KGV, m_X3KGX, n_X3KGZ,
                  o_X3KH1)
          [LclId] =
              [$dRead_s3Nmm
               $dRead1_s3Nmn
               $dRead2_s3Nmo
               $dRead3_s3Nmp
               $dRead4_s3Nmq
               $dRead5_s3Nmr
               $dRead6_s3Nms
               $dRead7_s3Nmt
               $dRead8_s3Nmu
               $dRead9_s3Nmv
               $dRead10_s3Nmw
               $dRead11_s3Nmx
               $dRead12_s3Nmy
               $dRead13_s3Nmz
               $dRead14_s3NmA] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,,,,,,,,,,)1
                      $dRead_s3Nmm
                      $dRead1_s3Nmn
                      $dRead2_s3Nmo
                      $dRead3_s3Nmp
                      $dRead4_s3Nmq
                      $dRead5_s3Nmr
                      $dRead6_s3Nms
                      $dRead7_s3Nmt
                      $dRead8_s3Nmu
                      $dRead9_s3Nmv
                      $dRead10_s3Nmw
                      $dRead11_s3Nmx
                      $dRead12_s3Nmy
                      $dRead13_s3Nmz
                      $dRead14_s3NmA
                      eta_B2
                      eta_B1;
        } in  GHC.Read.list sat_s3NmB;

GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadsPrec
  :: forall a b c d e f g h i j k l m n o.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l, GHC.Read.Read m, GHC.Read.Read n,
      GHC.Read.Read o) =>
     GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS
          (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)
[GblId,
 Arity=16,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3NmC
           $dRead1_s3NmD
           $dRead2_s3NmE
           $dRead3_s3NmF
           $dRead4_s3NmG
           $dRead5_s3NmH
           $dRead6_s3NmI
           $dRead7_s3NmJ
           $dRead8_s3NmK
           $dRead9_s3NmL
           $dRead10_s3NmM
           $dRead11_s3NmN
           $dRead12_s3NmO
           $dRead13_s3NmP
           $dRead14_s3NmQ
           n1_s3NmR]
        let {
          sat_s3NmS [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 (a_X3KGA, b_X3KGC, c_X3KGE, d_X3KGG, e_X3KGI, f_X3KGK, g_X3KGM,
                  h_X3KGO, i_X3KGQ, j_X3KGS, k_X3KGU, l_X3KGW, m_X3KGY, n_X3KH0,
                  o_X3KH2)
          [LclId] =
              [$dRead_s3NmC
               $dRead1_s3NmD
               $dRead2_s3NmE
               $dRead3_s3NmF
               $dRead4_s3NmG
               $dRead5_s3NmH
               $dRead6_s3NmI
               $dRead7_s3NmJ
               $dRead8_s3NmK
               $dRead9_s3NmL
               $dRead10_s3NmM
               $dRead11_s3NmN
               $dRead12_s3NmO
               $dRead13_s3NmP
               $dRead14_s3NmQ
               n1_s3NmR] \u []
                  GHC.Read.$fRead(,,,,,,,,,,,,,,)1
                      $dRead_s3NmC
                      $dRead1_s3NmD
                      $dRead2_s3NmE
                      $dRead3_s3NmF
                      $dRead4_s3NmG
                      $dRead5_s3NmH
                      $dRead6_s3NmI
                      $dRead7_s3NmJ
                      $dRead8_s3NmK
                      $dRead9_s3NmL
                      $dRead10_s3NmM
                      $dRead11_s3NmN
                      $dRead12_s3NmO
                      $dRead13_s3NmP
                      $dRead14_s3NmQ
                      n1_s3NmR
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NmS;

GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadList
  :: forall a b c d e f g h i j k l m n o.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l, GHC.Read.Read m, GHC.Read.Read n,
      GHC.Read.Read o) =>
     Text.ParserCombinators.ReadP.ReadS
       [(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)]
[GblId,
 Arity=15,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3NmT
           $dRead1_s3NmU
           $dRead2_s3NmV
           $dRead3_s3NmW
           $dRead4_s3NmX
           $dRead5_s3NmY
           $dRead6_s3NmZ
           $dRead7_s3Nn0
           $dRead8_s3Nn1
           $dRead9_s3Nn2
           $dRead10_s3Nn3
           $dRead11_s3Nn4
           $dRead12_s3Nn5
           $dRead13_s3Nn6
           $dRead14_s3Nn7]
        let {
          sat_s3Nn9 [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 [(a_X3KGB, b_X3KGD, c_X3KGF, d_X3KGH, e_X3KGJ, f_X3KGL, g_X3KGN,
                   h_X3KGP, i_X3KGR, j_X3KGT, k_X3KGV, l_X3KGX, m_X3KGZ, n_X3KH1,
                   o_X3KH3)]
          [LclId] =
              [$dRead_s3NmT
               $dRead1_s3NmU
               $dRead2_s3NmV
               $dRead3_s3NmW
               $dRead4_s3NmX
               $dRead5_s3NmY
               $dRead6_s3NmZ
               $dRead7_s3Nn0
               $dRead8_s3Nn1
               $dRead9_s3Nn2
               $dRead10_s3Nn3
               $dRead11_s3Nn4
               $dRead12_s3Nn5
               $dRead13_s3Nn6
               $dRead14_s3Nn7] \u []
                  let {
                    sat_s3Nn8 [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec
                           (a_X3KGB, b_X3KGD, c_X3KGF, d_X3KGH, e_X3KGJ, f_X3KGL, g_X3KGN,
                            h_X3KGP, i_X3KGR, j_X3KGT, k_X3KGV, l_X3KGX, m_X3KGZ, n_X3KH1,
                            o_X3KH3)
                    [LclId] =
                        [$dRead_s3NmT
                         $dRead1_s3NmU
                         $dRead2_s3NmV
                         $dRead3_s3NmW
                         $dRead4_s3NmX
                         $dRead5_s3NmY
                         $dRead6_s3NmZ
                         $dRead7_s3Nn0
                         $dRead8_s3Nn1
                         $dRead9_s3Nn2
                         $dRead10_s3Nn3
                         $dRead11_s3Nn4
                         $dRead12_s3Nn5
                         $dRead13_s3Nn6
                         $dRead14_s3Nn7] \r [eta_B2 eta_B1]
                            GHC.Read.$fRead(,,,,,,,,,,,,,,)1
                                $dRead_s3NmT
                                $dRead1_s3NmU
                                $dRead2_s3NmV
                                $dRead3_s3NmW
                                $dRead4_s3NmX
                                $dRead5_s3NmY
                                $dRead6_s3NmZ
                                $dRead7_s3Nn0
                                $dRead8_s3Nn1
                                $dRead9_s3Nn2
                                $dRead10_s3Nn3
                                $dRead11_s3Nn4
                                $dRead12_s3Nn5
                                $dRead13_s3Nn6
                                $dRead14_s3Nn7
                                eta_B2
                                eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s3Nn8
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3Nn9;

GHC.Read.$fRead(,,,,,,,,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h i j k l m n o.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l, GHC.Read.Read m, GHC.Read.Read n,
      GHC.Read.Read o) =>
     GHC.Read.Read (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)
[GblId[DFunId],
 Arity=15,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>m] =
    [] \r [$dRead_s3Nna
           $dRead1_s3Nnb
           $dRead2_s3Nnc
           $dRead3_s3Nnd
           $dRead4_s3Nne
           $dRead5_s3Nnf
           $dRead6_s3Nng
           $dRead7_s3Nnh
           $dRead8_s3Nni
           $dRead9_s3Nnj
           $dRead10_s3Nnk
           $dRead11_s3Nnl
           $dRead12_s3Nnm
           $dRead13_s3Nnn
           $dRead14_s3Nno]
        let {
          sat_s3Nns [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 [(a_X3KGC, b_X3KGE, c_X3KGG, d_X3KGI, e_X3KGK, f_X3KGM, g_X3KGO,
                   h_X3KGQ, i_X3KGS, j_X3KGU, k_X3KGW, l_X3KGY, m_X3KH0, n_X3KH2,
                   o_X3KH4)]
          [LclId] =
              [$dRead_s3Nna
               $dRead1_s3Nnb
               $dRead2_s3Nnc
               $dRead3_s3Nnd
               $dRead4_s3Nne
               $dRead5_s3Nnf
               $dRead6_s3Nng
               $dRead7_s3Nnh
               $dRead8_s3Nni
               $dRead9_s3Nnj
               $dRead10_s3Nnk
               $dRead11_s3Nnl
               $dRead12_s3Nnm
               $dRead13_s3Nnn
               $dRead14_s3Nno] \u []
                  GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadListPrec
                      $dRead_s3Nna
                      $dRead1_s3Nnb
                      $dRead2_s3Nnc
                      $dRead3_s3Nnd
                      $dRead4_s3Nne
                      $dRead5_s3Nnf
                      $dRead6_s3Nng
                      $dRead7_s3Nnh
                      $dRead8_s3Nni
                      $dRead9_s3Nnj
                      $dRead10_s3Nnk
                      $dRead11_s3Nnl
                      $dRead12_s3Nnm
                      $dRead13_s3Nnn
                      $dRead14_s3Nno; } in
        let {
          sat_s3Nnr [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KGC, b_X3KGE, c_X3KGG, d_X3KGI, e_X3KGK, f_X3KGM, g_X3KGO,
                  h_X3KGQ, i_X3KGS, j_X3KGU, k_X3KGW, l_X3KGY, m_X3KH0, n_X3KH2,
                  o_X3KH4)
          [LclId] =
              [$dRead_s3Nna
               $dRead1_s3Nnb
               $dRead2_s3Nnc
               $dRead3_s3Nnd
               $dRead4_s3Nne
               $dRead5_s3Nnf
               $dRead6_s3Nng
               $dRead7_s3Nnh
               $dRead8_s3Nni
               $dRead9_s3Nnj
               $dRead10_s3Nnk
               $dRead11_s3Nnl
               $dRead12_s3Nnm
               $dRead13_s3Nnn
               $dRead14_s3Nno] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,,,,,,,,,,)1
                      $dRead_s3Nna
                      $dRead1_s3Nnb
                      $dRead2_s3Nnc
                      $dRead3_s3Nnd
                      $dRead4_s3Nne
                      $dRead5_s3Nnf
                      $dRead6_s3Nng
                      $dRead7_s3Nnh
                      $dRead8_s3Nni
                      $dRead9_s3Nnj
                      $dRead10_s3Nnk
                      $dRead11_s3Nnl
                      $dRead12_s3Nnm
                      $dRead13_s3Nnn
                      $dRead14_s3Nno
                      eta_B2
                      eta_B1; } in
        let {
          sat_s3Nnq [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS
                 [(a_X3KGC, b_X3KGE, c_X3KGG, d_X3KGI, e_X3KGK, f_X3KGM, g_X3KGO,
                   h_X3KGQ, i_X3KGS, j_X3KGU, k_X3KGW, l_X3KGY, m_X3KH0, n_X3KH2,
                   o_X3KH4)]
          [LclId] =
              [$dRead_s3Nna
               $dRead1_s3Nnb
               $dRead2_s3Nnc
               $dRead3_s3Nnd
               $dRead4_s3Nne
               $dRead5_s3Nnf
               $dRead6_s3Nng
               $dRead7_s3Nnh
               $dRead8_s3Nni
               $dRead9_s3Nnj
               $dRead10_s3Nnk
               $dRead11_s3Nnl
               $dRead12_s3Nnm
               $dRead13_s3Nnn
               $dRead14_s3Nno] \u []
                  GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadList
                      $dRead_s3Nna
                      $dRead1_s3Nnb
                      $dRead2_s3Nnc
                      $dRead3_s3Nnd
                      $dRead4_s3Nne
                      $dRead5_s3Nnf
                      $dRead6_s3Nng
                      $dRead7_s3Nnh
                      $dRead8_s3Nni
                      $dRead9_s3Nnj
                      $dRead10_s3Nnk
                      $dRead11_s3Nnl
                      $dRead12_s3Nnm
                      $dRead13_s3Nnn
                      $dRead14_s3Nno; } in
        let {
          sat_s3Nnp [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS
                    (a_X3KGC, b_X3KGE, c_X3KGG, d_X3KGI, e_X3KGK, f_X3KGM, g_X3KGO,
                     h_X3KGQ, i_X3KGS, j_X3KGU, k_X3KGW, l_X3KGY, m_X3KH0, n_X3KH2,
                     o_X3KH4)
          [LclId] =
              [$dRead_s3Nna
               $dRead1_s3Nnb
               $dRead2_s3Nnc
               $dRead3_s3Nnd
               $dRead4_s3Nne
               $dRead5_s3Nnf
               $dRead6_s3Nng
               $dRead7_s3Nnh
               $dRead8_s3Nni
               $dRead9_s3Nnj
               $dRead10_s3Nnk
               $dRead11_s3Nnl
               $dRead12_s3Nnm
               $dRead13_s3Nnn
               $dRead14_s3Nno] \r [eta_B1]
                  GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadsPrec
                      $dRead_s3Nna
                      $dRead1_s3Nnb
                      $dRead2_s3Nnc
                      $dRead3_s3Nnd
                      $dRead4_s3Nne
                      $dRead5_s3Nnf
                      $dRead6_s3Nng
                      $dRead7_s3Nnh
                      $dRead8_s3Nni
                      $dRead9_s3Nnj
                      $dRead10_s3Nnk
                      $dRead11_s3Nnl
                      $dRead12_s3Nnm
                      $dRead13_s3Nnn
                      $dRead14_s3Nno
                      eta_B1;
        } in  GHC.Read.C:Read [sat_s3Nnp sat_s3Nnq sat_s3Nnr sat_s3Nns];

GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadListPrec
  :: forall a b c d e f g h i j k l m n.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l, GHC.Read.Read m, GHC.Read.Read n) =>
     Text.ParserCombinators.ReadPrec.ReadPrec
       [(a, b, c, d, e, f, g, h, i, j, k, l, m, n)]
[GblId,
 Arity=14,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Nnt
           $dRead1_s3Nnu
           $dRead2_s3Nnv
           $dRead3_s3Nnw
           $dRead4_s3Nnx
           $dRead5_s3Nny
           $dRead6_s3Nnz
           $dRead7_s3NnA
           $dRead8_s3NnB
           $dRead9_s3NnC
           $dRead10_s3NnD
           $dRead11_s3NnE
           $dRead12_s3NnF
           $dRead13_s3NnG]
        let {
          sat_s3NnH [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KIJ, b_X3KIL, c_X3KIN, d_X3KIP, e_X3KIR, f_X3KIT, g_X3KIV,
                  h_X3KIX, i_X3KIZ, j_X3KJ1, k_X3KJ3, l_X3KJ5, m_X3KJ7, n_X3KJ9)
          [LclId] =
              [$dRead_s3Nnt
               $dRead1_s3Nnu
               $dRead2_s3Nnv
               $dRead3_s3Nnw
               $dRead4_s3Nnx
               $dRead5_s3Nny
               $dRead6_s3Nnz
               $dRead7_s3NnA
               $dRead8_s3NnB
               $dRead9_s3NnC
               $dRead10_s3NnD
               $dRead11_s3NnE
               $dRead12_s3NnF
               $dRead13_s3NnG] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,,,,,,,,,)1
                      $dRead_s3Nnt
                      $dRead1_s3Nnu
                      $dRead2_s3Nnv
                      $dRead3_s3Nnw
                      $dRead4_s3Nnx
                      $dRead5_s3Nny
                      $dRead6_s3Nnz
                      $dRead7_s3NnA
                      $dRead8_s3NnB
                      $dRead9_s3NnC
                      $dRead10_s3NnD
                      $dRead11_s3NnE
                      $dRead12_s3NnF
                      $dRead13_s3NnG
                      eta_B2
                      eta_B1;
        } in  GHC.Read.list sat_s3NnH;

GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadsPrec
  :: forall a b c d e f g h i j k l m n.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l, GHC.Read.Read m, GHC.Read.Read n) =>
     GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS
          (a, b, c, d, e, f, g, h, i, j, k, l, m, n)
[GblId,
 Arity=15,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3NnI
           $dRead1_s3NnJ
           $dRead2_s3NnK
           $dRead3_s3NnL
           $dRead4_s3NnM
           $dRead5_s3NnN
           $dRead6_s3NnO
           $dRead7_s3NnP
           $dRead8_s3NnQ
           $dRead9_s3NnR
           $dRead10_s3NnS
           $dRead11_s3NnT
           $dRead12_s3NnU
           $dRead13_s3NnV
           n1_s3NnW]
        let {
          sat_s3NnX [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 (a_X3KIK, b_X3KIM, c_X3KIO, d_X3KIQ, e_X3KIS, f_X3KIU, g_X3KIW,
                  h_X3KIY, i_X3KJ0, j_X3KJ2, k_X3KJ4, l_X3KJ6, m_X3KJ8, n_X3KJa)
          [LclId] =
              [$dRead_s3NnI
               $dRead1_s3NnJ
               $dRead2_s3NnK
               $dRead3_s3NnL
               $dRead4_s3NnM
               $dRead5_s3NnN
               $dRead6_s3NnO
               $dRead7_s3NnP
               $dRead8_s3NnQ
               $dRead9_s3NnR
               $dRead10_s3NnS
               $dRead11_s3NnT
               $dRead12_s3NnU
               $dRead13_s3NnV
               n1_s3NnW] \u []
                  GHC.Read.$fRead(,,,,,,,,,,,,,)1
                      $dRead_s3NnI
                      $dRead1_s3NnJ
                      $dRead2_s3NnK
                      $dRead3_s3NnL
                      $dRead4_s3NnM
                      $dRead5_s3NnN
                      $dRead6_s3NnO
                      $dRead7_s3NnP
                      $dRead8_s3NnQ
                      $dRead9_s3NnR
                      $dRead10_s3NnS
                      $dRead11_s3NnT
                      $dRead12_s3NnU
                      $dRead13_s3NnV
                      n1_s3NnW
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NnX;

GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadList
  :: forall a b c d e f g h i j k l m n.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l, GHC.Read.Read m, GHC.Read.Read n) =>
     Text.ParserCombinators.ReadP.ReadS
       [(a, b, c, d, e, f, g, h, i, j, k, l, m, n)]
[GblId,
 Arity=14,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3NnY
           $dRead1_s3NnZ
           $dRead2_s3No0
           $dRead3_s3No1
           $dRead4_s3No2
           $dRead5_s3No3
           $dRead6_s3No4
           $dRead7_s3No5
           $dRead8_s3No6
           $dRead9_s3No7
           $dRead10_s3No8
           $dRead11_s3No9
           $dRead12_s3Noa
           $dRead13_s3Nob]
        let {
          sat_s3Nod [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 [(a_X3KIL, b_X3KIN, c_X3KIP, d_X3KIR, e_X3KIT, f_X3KIV, g_X3KIX,
                   h_X3KIZ, i_X3KJ1, j_X3KJ3, k_X3KJ5, l_X3KJ7, m_X3KJ9, n_X3KJb)]
          [LclId] =
              [$dRead_s3NnY
               $dRead1_s3NnZ
               $dRead2_s3No0
               $dRead3_s3No1
               $dRead4_s3No2
               $dRead5_s3No3
               $dRead6_s3No4
               $dRead7_s3No5
               $dRead8_s3No6
               $dRead9_s3No7
               $dRead10_s3No8
               $dRead11_s3No9
               $dRead12_s3Noa
               $dRead13_s3Nob] \u []
                  let {
                    sat_s3Noc [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec
                           (a_X3KIL, b_X3KIN, c_X3KIP, d_X3KIR, e_X3KIT, f_X3KIV, g_X3KIX,
                            h_X3KIZ, i_X3KJ1, j_X3KJ3, k_X3KJ5, l_X3KJ7, m_X3KJ9, n_X3KJb)
                    [LclId] =
                        [$dRead_s3NnY
                         $dRead1_s3NnZ
                         $dRead2_s3No0
                         $dRead3_s3No1
                         $dRead4_s3No2
                         $dRead5_s3No3
                         $dRead6_s3No4
                         $dRead7_s3No5
                         $dRead8_s3No6
                         $dRead9_s3No7
                         $dRead10_s3No8
                         $dRead11_s3No9
                         $dRead12_s3Noa
                         $dRead13_s3Nob] \r [eta_B2 eta_B1]
                            GHC.Read.$fRead(,,,,,,,,,,,,,)1
                                $dRead_s3NnY
                                $dRead1_s3NnZ
                                $dRead2_s3No0
                                $dRead3_s3No1
                                $dRead4_s3No2
                                $dRead5_s3No3
                                $dRead6_s3No4
                                $dRead7_s3No5
                                $dRead8_s3No6
                                $dRead9_s3No7
                                $dRead10_s3No8
                                $dRead11_s3No9
                                $dRead12_s3Noa
                                $dRead13_s3Nob
                                eta_B2
                                eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s3Noc
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3Nod;

GHC.Read.$fRead(,,,,,,,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h i j k l m n.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l, GHC.Read.Read m, GHC.Read.Read n) =>
     GHC.Read.Read (a, b, c, d, e, f, g, h, i, j, k, l, m, n)
[GblId[DFunId],
 Arity=14,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>m] =
    [] \r [$dRead_s3Noe
           $dRead1_s3Nof
           $dRead2_s3Nog
           $dRead3_s3Noh
           $dRead4_s3Noi
           $dRead5_s3Noj
           $dRead6_s3Nok
           $dRead7_s3Nol
           $dRead8_s3Nom
           $dRead9_s3Non
           $dRead10_s3Noo
           $dRead11_s3Nop
           $dRead12_s3Noq
           $dRead13_s3Nor]
        let {
          sat_s3Nov [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 [(a_X3KIM, b_X3KIO, c_X3KIQ, d_X3KIS, e_X3KIU, f_X3KIW, g_X3KIY,
                   h_X3KJ0, i_X3KJ2, j_X3KJ4, k_X3KJ6, l_X3KJ8, m_X3KJa, n_X3KJc)]
          [LclId] =
              [$dRead_s3Noe
               $dRead1_s3Nof
               $dRead2_s3Nog
               $dRead3_s3Noh
               $dRead4_s3Noi
               $dRead5_s3Noj
               $dRead6_s3Nok
               $dRead7_s3Nol
               $dRead8_s3Nom
               $dRead9_s3Non
               $dRead10_s3Noo
               $dRead11_s3Nop
               $dRead12_s3Noq
               $dRead13_s3Nor] \u []
                  GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadListPrec
                      $dRead_s3Noe
                      $dRead1_s3Nof
                      $dRead2_s3Nog
                      $dRead3_s3Noh
                      $dRead4_s3Noi
                      $dRead5_s3Noj
                      $dRead6_s3Nok
                      $dRead7_s3Nol
                      $dRead8_s3Nom
                      $dRead9_s3Non
                      $dRead10_s3Noo
                      $dRead11_s3Nop
                      $dRead12_s3Noq
                      $dRead13_s3Nor; } in
        let {
          sat_s3Nou [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KIM, b_X3KIO, c_X3KIQ, d_X3KIS, e_X3KIU, f_X3KIW, g_X3KIY,
                  h_X3KJ0, i_X3KJ2, j_X3KJ4, k_X3KJ6, l_X3KJ8, m_X3KJa, n_X3KJc)
          [LclId] =
              [$dRead_s3Noe
               $dRead1_s3Nof
               $dRead2_s3Nog
               $dRead3_s3Noh
               $dRead4_s3Noi
               $dRead5_s3Noj
               $dRead6_s3Nok
               $dRead7_s3Nol
               $dRead8_s3Nom
               $dRead9_s3Non
               $dRead10_s3Noo
               $dRead11_s3Nop
               $dRead12_s3Noq
               $dRead13_s3Nor] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,,,,,,,,,)1
                      $dRead_s3Noe
                      $dRead1_s3Nof
                      $dRead2_s3Nog
                      $dRead3_s3Noh
                      $dRead4_s3Noi
                      $dRead5_s3Noj
                      $dRead6_s3Nok
                      $dRead7_s3Nol
                      $dRead8_s3Nom
                      $dRead9_s3Non
                      $dRead10_s3Noo
                      $dRead11_s3Nop
                      $dRead12_s3Noq
                      $dRead13_s3Nor
                      eta_B2
                      eta_B1; } in
        let {
          sat_s3Not [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS
                 [(a_X3KIM, b_X3KIO, c_X3KIQ, d_X3KIS, e_X3KIU, f_X3KIW, g_X3KIY,
                   h_X3KJ0, i_X3KJ2, j_X3KJ4, k_X3KJ6, l_X3KJ8, m_X3KJa, n_X3KJc)]
          [LclId] =
              [$dRead_s3Noe
               $dRead1_s3Nof
               $dRead2_s3Nog
               $dRead3_s3Noh
               $dRead4_s3Noi
               $dRead5_s3Noj
               $dRead6_s3Nok
               $dRead7_s3Nol
               $dRead8_s3Nom
               $dRead9_s3Non
               $dRead10_s3Noo
               $dRead11_s3Nop
               $dRead12_s3Noq
               $dRead13_s3Nor] \u []
                  GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadList
                      $dRead_s3Noe
                      $dRead1_s3Nof
                      $dRead2_s3Nog
                      $dRead3_s3Noh
                      $dRead4_s3Noi
                      $dRead5_s3Noj
                      $dRead6_s3Nok
                      $dRead7_s3Nol
                      $dRead8_s3Nom
                      $dRead9_s3Non
                      $dRead10_s3Noo
                      $dRead11_s3Nop
                      $dRead12_s3Noq
                      $dRead13_s3Nor; } in
        let {
          sat_s3Nos [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS
                    (a_X3KIM, b_X3KIO, c_X3KIQ, d_X3KIS, e_X3KIU, f_X3KIW, g_X3KIY,
                     h_X3KJ0, i_X3KJ2, j_X3KJ4, k_X3KJ6, l_X3KJ8, m_X3KJa, n_X3KJc)
          [LclId] =
              [$dRead_s3Noe
               $dRead1_s3Nof
               $dRead2_s3Nog
               $dRead3_s3Noh
               $dRead4_s3Noi
               $dRead5_s3Noj
               $dRead6_s3Nok
               $dRead7_s3Nol
               $dRead8_s3Nom
               $dRead9_s3Non
               $dRead10_s3Noo
               $dRead11_s3Nop
               $dRead12_s3Noq
               $dRead13_s3Nor] \r [eta_B1]
                  GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadsPrec
                      $dRead_s3Noe
                      $dRead1_s3Nof
                      $dRead2_s3Nog
                      $dRead3_s3Noh
                      $dRead4_s3Noi
                      $dRead5_s3Noj
                      $dRead6_s3Nok
                      $dRead7_s3Nol
                      $dRead8_s3Nom
                      $dRead9_s3Non
                      $dRead10_s3Noo
                      $dRead11_s3Nop
                      $dRead12_s3Noq
                      $dRead13_s3Nor
                      eta_B1;
        } in  GHC.Read.C:Read [sat_s3Nos sat_s3Not sat_s3Nou sat_s3Nov];

GHC.Read.$fRead(,,,,,,,,,,,,)_$creadListPrec
  :: forall a b c d e f g h i j k l m.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l, GHC.Read.Read m) =>
     Text.ParserCombinators.ReadPrec.ReadPrec
       [(a, b, c, d, e, f, g, h, i, j, k, l, m)]
[GblId,
 Arity=13,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Now
           $dRead1_s3Nox
           $dRead2_s3Noy
           $dRead3_s3Noz
           $dRead4_s3NoA
           $dRead5_s3NoB
           $dRead6_s3NoC
           $dRead7_s3NoD
           $dRead8_s3NoE
           $dRead9_s3NoF
           $dRead10_s3NoG
           $dRead11_s3NoH
           $dRead12_s3NoI]
        let {
          sat_s3NoJ [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KKG, b_X3KKI, c_X3KKK, d_X3KKM, e_X3KKO, f_X3KKQ, g_X3KKS,
                  h_X3KKU, i_X3KKW, j_X3KKY, k_X3KL0, l_X3KL2, m_X3KL4)
          [LclId] =
              [$dRead_s3Now
               $dRead1_s3Nox
               $dRead2_s3Noy
               $dRead3_s3Noz
               $dRead4_s3NoA
               $dRead5_s3NoB
               $dRead6_s3NoC
               $dRead7_s3NoD
               $dRead8_s3NoE
               $dRead9_s3NoF
               $dRead10_s3NoG
               $dRead11_s3NoH
               $dRead12_s3NoI] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,,,,,,,,)1
                      $dRead_s3Now
                      $dRead1_s3Nox
                      $dRead2_s3Noy
                      $dRead3_s3Noz
                      $dRead4_s3NoA
                      $dRead5_s3NoB
                      $dRead6_s3NoC
                      $dRead7_s3NoD
                      $dRead8_s3NoE
                      $dRead9_s3NoF
                      $dRead10_s3NoG
                      $dRead11_s3NoH
                      $dRead12_s3NoI
                      eta_B2
                      eta_B1;
        } in  GHC.Read.list sat_s3NoJ;

GHC.Read.$fRead(,,,,,,,,,,,,)_$creadsPrec
  :: forall a b c d e f g h i j k l m.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l, GHC.Read.Read m) =>
     GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS
          (a, b, c, d, e, f, g, h, i, j, k, l, m)
[GblId,
 Arity=14,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3NoK
           $dRead1_s3NoL
           $dRead2_s3NoM
           $dRead3_s3NoN
           $dRead4_s3NoO
           $dRead5_s3NoP
           $dRead6_s3NoQ
           $dRead7_s3NoR
           $dRead8_s3NoS
           $dRead9_s3NoT
           $dRead10_s3NoU
           $dRead11_s3NoV
           $dRead12_s3NoW
           n_s3NoX]
        let {
          sat_s3NoY [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 (a_X3KKH, b_X3KKJ, c_X3KKL, d_X3KKN, e_X3KKP, f_X3KKR, g_X3KKT,
                  h_X3KKV, i_X3KKX, j_X3KKZ, k_X3KL1, l_X3KL3, m_X3KL5)
          [LclId] =
              [$dRead_s3NoK
               $dRead1_s3NoL
               $dRead2_s3NoM
               $dRead3_s3NoN
               $dRead4_s3NoO
               $dRead5_s3NoP
               $dRead6_s3NoQ
               $dRead7_s3NoR
               $dRead8_s3NoS
               $dRead9_s3NoT
               $dRead10_s3NoU
               $dRead11_s3NoV
               $dRead12_s3NoW
               n_s3NoX] \u []
                  GHC.Read.$fRead(,,,,,,,,,,,,)1
                      $dRead_s3NoK
                      $dRead1_s3NoL
                      $dRead2_s3NoM
                      $dRead3_s3NoN
                      $dRead4_s3NoO
                      $dRead5_s3NoP
                      $dRead6_s3NoQ
                      $dRead7_s3NoR
                      $dRead8_s3NoS
                      $dRead9_s3NoT
                      $dRead10_s3NoU
                      $dRead11_s3NoV
                      $dRead12_s3NoW
                      n_s3NoX
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NoY;

GHC.Read.$fRead(,,,,,,,,,,,,)_$creadList
  :: forall a b c d e f g h i j k l m.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l, GHC.Read.Read m) =>
     Text.ParserCombinators.ReadP.ReadS
       [(a, b, c, d, e, f, g, h, i, j, k, l, m)]
[GblId,
 Arity=13,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3NoZ
           $dRead1_s3Np0
           $dRead2_s3Np1
           $dRead3_s3Np2
           $dRead4_s3Np3
           $dRead5_s3Np4
           $dRead6_s3Np5
           $dRead7_s3Np6
           $dRead8_s3Np7
           $dRead9_s3Np8
           $dRead10_s3Np9
           $dRead11_s3Npa
           $dRead12_s3Npb]
        let {
          sat_s3Npd [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 [(a_X3KKI, b_X3KKK, c_X3KKM, d_X3KKO, e_X3KKQ, f_X3KKS, g_X3KKU,
                   h_X3KKW, i_X3KKY, j_X3KL0, k_X3KL2, l_X3KL4, m_X3KL6)]
          [LclId] =
              [$dRead_s3NoZ
               $dRead1_s3Np0
               $dRead2_s3Np1
               $dRead3_s3Np2
               $dRead4_s3Np3
               $dRead5_s3Np4
               $dRead6_s3Np5
               $dRead7_s3Np6
               $dRead8_s3Np7
               $dRead9_s3Np8
               $dRead10_s3Np9
               $dRead11_s3Npa
               $dRead12_s3Npb] \u []
                  let {
                    sat_s3Npc [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec
                           (a_X3KKI, b_X3KKK, c_X3KKM, d_X3KKO, e_X3KKQ, f_X3KKS, g_X3KKU,
                            h_X3KKW, i_X3KKY, j_X3KL0, k_X3KL2, l_X3KL4, m_X3KL6)
                    [LclId] =
                        [$dRead_s3NoZ
                         $dRead1_s3Np0
                         $dRead2_s3Np1
                         $dRead3_s3Np2
                         $dRead4_s3Np3
                         $dRead5_s3Np4
                         $dRead6_s3Np5
                         $dRead7_s3Np6
                         $dRead8_s3Np7
                         $dRead9_s3Np8
                         $dRead10_s3Np9
                         $dRead11_s3Npa
                         $dRead12_s3Npb] \r [eta_B2 eta_B1]
                            GHC.Read.$fRead(,,,,,,,,,,,,)1
                                $dRead_s3NoZ
                                $dRead1_s3Np0
                                $dRead2_s3Np1
                                $dRead3_s3Np2
                                $dRead4_s3Np3
                                $dRead5_s3Np4
                                $dRead6_s3Np5
                                $dRead7_s3Np6
                                $dRead8_s3Np7
                                $dRead9_s3Np8
                                $dRead10_s3Np9
                                $dRead11_s3Npa
                                $dRead12_s3Npb
                                eta_B2
                                eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s3Npc
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3Npd;

GHC.Read.$fRead(,,,,,,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h i j k l m.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l, GHC.Read.Read m) =>
     GHC.Read.Read (a, b, c, d, e, f, g, h, i, j, k, l, m)
[GblId[DFunId],
 Arity=13,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>m] =
    [] \r [$dRead_s3Npe
           $dRead1_s3Npf
           $dRead2_s3Npg
           $dRead3_s3Nph
           $dRead4_s3Npi
           $dRead5_s3Npj
           $dRead6_s3Npk
           $dRead7_s3Npl
           $dRead8_s3Npm
           $dRead9_s3Npn
           $dRead10_s3Npo
           $dRead11_s3Npp
           $dRead12_s3Npq]
        let {
          sat_s3Npu [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 [(a_X3KKJ, b_X3KKL, c_X3KKN, d_X3KKP, e_X3KKR, f_X3KKT, g_X3KKV,
                   h_X3KKX, i_X3KKZ, j_X3KL1, k_X3KL3, l_X3KL5, m_X3KL7)]
          [LclId] =
              [$dRead_s3Npe
               $dRead1_s3Npf
               $dRead2_s3Npg
               $dRead3_s3Nph
               $dRead4_s3Npi
               $dRead5_s3Npj
               $dRead6_s3Npk
               $dRead7_s3Npl
               $dRead8_s3Npm
               $dRead9_s3Npn
               $dRead10_s3Npo
               $dRead11_s3Npp
               $dRead12_s3Npq] \u []
                  GHC.Read.$fRead(,,,,,,,,,,,,)_$creadListPrec
                      $dRead_s3Npe
                      $dRead1_s3Npf
                      $dRead2_s3Npg
                      $dRead3_s3Nph
                      $dRead4_s3Npi
                      $dRead5_s3Npj
                      $dRead6_s3Npk
                      $dRead7_s3Npl
                      $dRead8_s3Npm
                      $dRead9_s3Npn
                      $dRead10_s3Npo
                      $dRead11_s3Npp
                      $dRead12_s3Npq; } in
        let {
          sat_s3Npt [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KKJ, b_X3KKL, c_X3KKN, d_X3KKP, e_X3KKR, f_X3KKT, g_X3KKV,
                  h_X3KKX, i_X3KKZ, j_X3KL1, k_X3KL3, l_X3KL5, m_X3KL7)
          [LclId] =
              [$dRead_s3Npe
               $dRead1_s3Npf
               $dRead2_s3Npg
               $dRead3_s3Nph
               $dRead4_s3Npi
               $dRead5_s3Npj
               $dRead6_s3Npk
               $dRead7_s3Npl
               $dRead8_s3Npm
               $dRead9_s3Npn
               $dRead10_s3Npo
               $dRead11_s3Npp
               $dRead12_s3Npq] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,,,,,,,,)1
                      $dRead_s3Npe
                      $dRead1_s3Npf
                      $dRead2_s3Npg
                      $dRead3_s3Nph
                      $dRead4_s3Npi
                      $dRead5_s3Npj
                      $dRead6_s3Npk
                      $dRead7_s3Npl
                      $dRead8_s3Npm
                      $dRead9_s3Npn
                      $dRead10_s3Npo
                      $dRead11_s3Npp
                      $dRead12_s3Npq
                      eta_B2
                      eta_B1; } in
        let {
          sat_s3Nps [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS
                 [(a_X3KKJ, b_X3KKL, c_X3KKN, d_X3KKP, e_X3KKR, f_X3KKT, g_X3KKV,
                   h_X3KKX, i_X3KKZ, j_X3KL1, k_X3KL3, l_X3KL5, m_X3KL7)]
          [LclId] =
              [$dRead_s3Npe
               $dRead1_s3Npf
               $dRead2_s3Npg
               $dRead3_s3Nph
               $dRead4_s3Npi
               $dRead5_s3Npj
               $dRead6_s3Npk
               $dRead7_s3Npl
               $dRead8_s3Npm
               $dRead9_s3Npn
               $dRead10_s3Npo
               $dRead11_s3Npp
               $dRead12_s3Npq] \u []
                  GHC.Read.$fRead(,,,,,,,,,,,,)_$creadList
                      $dRead_s3Npe
                      $dRead1_s3Npf
                      $dRead2_s3Npg
                      $dRead3_s3Nph
                      $dRead4_s3Npi
                      $dRead5_s3Npj
                      $dRead6_s3Npk
                      $dRead7_s3Npl
                      $dRead8_s3Npm
                      $dRead9_s3Npn
                      $dRead10_s3Npo
                      $dRead11_s3Npp
                      $dRead12_s3Npq; } in
        let {
          sat_s3Npr [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS
                    (a_X3KKJ, b_X3KKL, c_X3KKN, d_X3KKP, e_X3KKR, f_X3KKT, g_X3KKV,
                     h_X3KKX, i_X3KKZ, j_X3KL1, k_X3KL3, l_X3KL5, m_X3KL7)
          [LclId] =
              [$dRead_s3Npe
               $dRead1_s3Npf
               $dRead2_s3Npg
               $dRead3_s3Nph
               $dRead4_s3Npi
               $dRead5_s3Npj
               $dRead6_s3Npk
               $dRead7_s3Npl
               $dRead8_s3Npm
               $dRead9_s3Npn
               $dRead10_s3Npo
               $dRead11_s3Npp
               $dRead12_s3Npq] \r [eta_B1]
                  GHC.Read.$fRead(,,,,,,,,,,,,)_$creadsPrec
                      $dRead_s3Npe
                      $dRead1_s3Npf
                      $dRead2_s3Npg
                      $dRead3_s3Nph
                      $dRead4_s3Npi
                      $dRead5_s3Npj
                      $dRead6_s3Npk
                      $dRead7_s3Npl
                      $dRead8_s3Npm
                      $dRead9_s3Npn
                      $dRead10_s3Npo
                      $dRead11_s3Npp
                      $dRead12_s3Npq
                      eta_B1;
        } in  GHC.Read.C:Read [sat_s3Npr sat_s3Nps sat_s3Npt sat_s3Npu];

GHC.Read.$fRead(,,,,,,,,,,,)_$creadListPrec
  :: forall a b c d e f g h i j k l.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l) =>
     Text.ParserCombinators.ReadPrec.ReadPrec
       [(a, b, c, d, e, f, g, h, i, j, k, l)]
[GblId,
 Arity=12,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Npv
           $dRead1_s3Npw
           $dRead2_s3Npx
           $dRead3_s3Npy
           $dRead4_s3Npz
           $dRead5_s3NpA
           $dRead6_s3NpB
           $dRead7_s3NpC
           $dRead8_s3NpD
           $dRead9_s3NpE
           $dRead10_s3NpF
           $dRead11_s3NpG]
        let {
          sat_s3NpH [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KMy, b_X3KMA, c_X3KMC, d_X3KME, e_X3KMG, f_X3KMI, g_X3KMK,
                  h_X3KMM, i_X3KMO, j_X3KMQ, k_X3KMS, l_X3KMU)
          [LclId] =
              [$dRead_s3Npv
               $dRead1_s3Npw
               $dRead2_s3Npx
               $dRead3_s3Npy
               $dRead4_s3Npz
               $dRead5_s3NpA
               $dRead6_s3NpB
               $dRead7_s3NpC
               $dRead8_s3NpD
               $dRead9_s3NpE
               $dRead10_s3NpF
               $dRead11_s3NpG] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,,,,,,,)1
                      $dRead_s3Npv
                      $dRead1_s3Npw
                      $dRead2_s3Npx
                      $dRead3_s3Npy
                      $dRead4_s3Npz
                      $dRead5_s3NpA
                      $dRead6_s3NpB
                      $dRead7_s3NpC
                      $dRead8_s3NpD
                      $dRead9_s3NpE
                      $dRead10_s3NpF
                      $dRead11_s3NpG
                      eta_B2
                      eta_B1;
        } in  GHC.Read.list sat_s3NpH;

GHC.Read.$fRead(,,,,,,,,,,,)_$creadsPrec
  :: forall a b c d e f g h i j k l.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l) =>
     GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS
          (a, b, c, d, e, f, g, h, i, j, k, l)
[GblId,
 Arity=13,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3NpI
           $dRead1_s3NpJ
           $dRead2_s3NpK
           $dRead3_s3NpL
           $dRead4_s3NpM
           $dRead5_s3NpN
           $dRead6_s3NpO
           $dRead7_s3NpP
           $dRead8_s3NpQ
           $dRead9_s3NpR
           $dRead10_s3NpS
           $dRead11_s3NpT
           n_s3NpU]
        let {
          sat_s3NpV [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 (a_X3KMz, b_X3KMB, c_X3KMD, d_X3KMF, e_X3KMH, f_X3KMJ, g_X3KML,
                  h_X3KMN, i_X3KMP, j_X3KMR, k_X3KMT, l_X3KMV)
          [LclId] =
              [$dRead_s3NpI
               $dRead1_s3NpJ
               $dRead2_s3NpK
               $dRead3_s3NpL
               $dRead4_s3NpM
               $dRead5_s3NpN
               $dRead6_s3NpO
               $dRead7_s3NpP
               $dRead8_s3NpQ
               $dRead9_s3NpR
               $dRead10_s3NpS
               $dRead11_s3NpT
               n_s3NpU] \u []
                  GHC.Read.$fRead(,,,,,,,,,,,)1
                      $dRead_s3NpI
                      $dRead1_s3NpJ
                      $dRead2_s3NpK
                      $dRead3_s3NpL
                      $dRead4_s3NpM
                      $dRead5_s3NpN
                      $dRead6_s3NpO
                      $dRead7_s3NpP
                      $dRead8_s3NpQ
                      $dRead9_s3NpR
                      $dRead10_s3NpS
                      $dRead11_s3NpT
                      n_s3NpU
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NpV;

GHC.Read.$fRead(,,,,,,,,,,,)_$creadList
  :: forall a b c d e f g h i j k l.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l) =>
     Text.ParserCombinators.ReadP.ReadS
       [(a, b, c, d, e, f, g, h, i, j, k, l)]
[GblId,
 Arity=12,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3NpW
           $dRead1_s3NpX
           $dRead2_s3NpY
           $dRead3_s3NpZ
           $dRead4_s3Nq0
           $dRead5_s3Nq1
           $dRead6_s3Nq2
           $dRead7_s3Nq3
           $dRead8_s3Nq4
           $dRead9_s3Nq5
           $dRead10_s3Nq6
           $dRead11_s3Nq7]
        let {
          sat_s3Nq9 [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 [(a_X3KMA, b_X3KMC, c_X3KME, d_X3KMG, e_X3KMI, f_X3KMK, g_X3KMM,
                   h_X3KMO, i_X3KMQ, j_X3KMS, k_X3KMU, l_X3KMW)]
          [LclId] =
              [$dRead_s3NpW
               $dRead1_s3NpX
               $dRead2_s3NpY
               $dRead3_s3NpZ
               $dRead4_s3Nq0
               $dRead5_s3Nq1
               $dRead6_s3Nq2
               $dRead7_s3Nq3
               $dRead8_s3Nq4
               $dRead9_s3Nq5
               $dRead10_s3Nq6
               $dRead11_s3Nq7] \u []
                  let {
                    sat_s3Nq8 [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec
                           (a_X3KMA, b_X3KMC, c_X3KME, d_X3KMG, e_X3KMI, f_X3KMK, g_X3KMM,
                            h_X3KMO, i_X3KMQ, j_X3KMS, k_X3KMU, l_X3KMW)
                    [LclId] =
                        [$dRead_s3NpW
                         $dRead1_s3NpX
                         $dRead2_s3NpY
                         $dRead3_s3NpZ
                         $dRead4_s3Nq0
                         $dRead5_s3Nq1
                         $dRead6_s3Nq2
                         $dRead7_s3Nq3
                         $dRead8_s3Nq4
                         $dRead9_s3Nq5
                         $dRead10_s3Nq6
                         $dRead11_s3Nq7] \r [eta_B2 eta_B1]
                            GHC.Read.$fRead(,,,,,,,,,,,)1
                                $dRead_s3NpW
                                $dRead1_s3NpX
                                $dRead2_s3NpY
                                $dRead3_s3NpZ
                                $dRead4_s3Nq0
                                $dRead5_s3Nq1
                                $dRead6_s3Nq2
                                $dRead7_s3Nq3
                                $dRead8_s3Nq4
                                $dRead9_s3Nq5
                                $dRead10_s3Nq6
                                $dRead11_s3Nq7
                                eta_B2
                                eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s3Nq8
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3Nq9;

GHC.Read.$fRead(,,,,,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h i j k l.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l) =>
     GHC.Read.Read (a, b, c, d, e, f, g, h, i, j, k, l)
[GblId[DFunId],
 Arity=12,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>m] =
    [] \r [$dRead_s3Nqa
           $dRead1_s3Nqb
           $dRead2_s3Nqc
           $dRead3_s3Nqd
           $dRead4_s3Nqe
           $dRead5_s3Nqf
           $dRead6_s3Nqg
           $dRead7_s3Nqh
           $dRead8_s3Nqi
           $dRead9_s3Nqj
           $dRead10_s3Nqk
           $dRead11_s3Nql]
        let {
          sat_s3Nqp [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 [(a_X3KMB, b_X3KMD, c_X3KMF, d_X3KMH, e_X3KMJ, f_X3KML, g_X3KMN,
                   h_X3KMP, i_X3KMR, j_X3KMT, k_X3KMV, l_X3KMX)]
          [LclId] =
              [$dRead_s3Nqa
               $dRead1_s3Nqb
               $dRead2_s3Nqc
               $dRead3_s3Nqd
               $dRead4_s3Nqe
               $dRead5_s3Nqf
               $dRead6_s3Nqg
               $dRead7_s3Nqh
               $dRead8_s3Nqi
               $dRead9_s3Nqj
               $dRead10_s3Nqk
               $dRead11_s3Nql] \u []
                  GHC.Read.$fRead(,,,,,,,,,,,)_$creadListPrec
                      $dRead_s3Nqa
                      $dRead1_s3Nqb
                      $dRead2_s3Nqc
                      $dRead3_s3Nqd
                      $dRead4_s3Nqe
                      $dRead5_s3Nqf
                      $dRead6_s3Nqg
                      $dRead7_s3Nqh
                      $dRead8_s3Nqi
                      $dRead9_s3Nqj
                      $dRead10_s3Nqk
                      $dRead11_s3Nql; } in
        let {
          sat_s3Nqo [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KMB, b_X3KMD, c_X3KMF, d_X3KMH, e_X3KMJ, f_X3KML, g_X3KMN,
                  h_X3KMP, i_X3KMR, j_X3KMT, k_X3KMV, l_X3KMX)
          [LclId] =
              [$dRead_s3Nqa
               $dRead1_s3Nqb
               $dRead2_s3Nqc
               $dRead3_s3Nqd
               $dRead4_s3Nqe
               $dRead5_s3Nqf
               $dRead6_s3Nqg
               $dRead7_s3Nqh
               $dRead8_s3Nqi
               $dRead9_s3Nqj
               $dRead10_s3Nqk
               $dRead11_s3Nql] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,,,,,,,)1
                      $dRead_s3Nqa
                      $dRead1_s3Nqb
                      $dRead2_s3Nqc
                      $dRead3_s3Nqd
                      $dRead4_s3Nqe
                      $dRead5_s3Nqf
                      $dRead6_s3Nqg
                      $dRead7_s3Nqh
                      $dRead8_s3Nqi
                      $dRead9_s3Nqj
                      $dRead10_s3Nqk
                      $dRead11_s3Nql
                      eta_B2
                      eta_B1; } in
        let {
          sat_s3Nqn [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS
                 [(a_X3KMB, b_X3KMD, c_X3KMF, d_X3KMH, e_X3KMJ, f_X3KML, g_X3KMN,
                   h_X3KMP, i_X3KMR, j_X3KMT, k_X3KMV, l_X3KMX)]
          [LclId] =
              [$dRead_s3Nqa
               $dRead1_s3Nqb
               $dRead2_s3Nqc
               $dRead3_s3Nqd
               $dRead4_s3Nqe
               $dRead5_s3Nqf
               $dRead6_s3Nqg
               $dRead7_s3Nqh
               $dRead8_s3Nqi
               $dRead9_s3Nqj
               $dRead10_s3Nqk
               $dRead11_s3Nql] \u []
                  GHC.Read.$fRead(,,,,,,,,,,,)_$creadList
                      $dRead_s3Nqa
                      $dRead1_s3Nqb
                      $dRead2_s3Nqc
                      $dRead3_s3Nqd
                      $dRead4_s3Nqe
                      $dRead5_s3Nqf
                      $dRead6_s3Nqg
                      $dRead7_s3Nqh
                      $dRead8_s3Nqi
                      $dRead9_s3Nqj
                      $dRead10_s3Nqk
                      $dRead11_s3Nql; } in
        let {
          sat_s3Nqm [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS
                    (a_X3KMB, b_X3KMD, c_X3KMF, d_X3KMH, e_X3KMJ, f_X3KML, g_X3KMN,
                     h_X3KMP, i_X3KMR, j_X3KMT, k_X3KMV, l_X3KMX)
          [LclId] =
              [$dRead_s3Nqa
               $dRead1_s3Nqb
               $dRead2_s3Nqc
               $dRead3_s3Nqd
               $dRead4_s3Nqe
               $dRead5_s3Nqf
               $dRead6_s3Nqg
               $dRead7_s3Nqh
               $dRead8_s3Nqi
               $dRead9_s3Nqj
               $dRead10_s3Nqk
               $dRead11_s3Nql] \r [eta_B1]
                  GHC.Read.$fRead(,,,,,,,,,,,)_$creadsPrec
                      $dRead_s3Nqa
                      $dRead1_s3Nqb
                      $dRead2_s3Nqc
                      $dRead3_s3Nqd
                      $dRead4_s3Nqe
                      $dRead5_s3Nqf
                      $dRead6_s3Nqg
                      $dRead7_s3Nqh
                      $dRead8_s3Nqi
                      $dRead9_s3Nqj
                      $dRead10_s3Nqk
                      $dRead11_s3Nql
                      eta_B1;
        } in  GHC.Read.C:Read [sat_s3Nqm sat_s3Nqn sat_s3Nqo sat_s3Nqp];

GHC.Read.$fRead(,,,,,,,,,,)_$creadListPrec
  :: forall a b c d e f g h i j k.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j,
      GHC.Read.Read k) =>
     Text.ParserCombinators.ReadPrec.ReadPrec
       [(a, b, c, d, e, f, g, h, i, j, k)]
[GblId,
 Arity=11,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Nqq
           $dRead1_s3Nqr
           $dRead2_s3Nqs
           $dRead3_s3Nqt
           $dRead4_s3Nqu
           $dRead5_s3Nqv
           $dRead6_s3Nqw
           $dRead7_s3Nqx
           $dRead8_s3Nqy
           $dRead9_s3Nqz
           $dRead10_s3NqA]
        let {
          sat_s3NqB [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KOd, b_X3KOf, c_X3KOh, d_X3KOj, e_X3KOl, f_X3KOn, g_X3KOp,
                  h_X3KOr, i_X3KOt, j_X3KOv, k_X3KOx)
          [LclId] =
              [$dRead_s3Nqq
               $dRead1_s3Nqr
               $dRead2_s3Nqs
               $dRead3_s3Nqt
               $dRead4_s3Nqu
               $dRead5_s3Nqv
               $dRead6_s3Nqw
               $dRead7_s3Nqx
               $dRead8_s3Nqy
               $dRead9_s3Nqz
               $dRead10_s3NqA] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,,,,,,)1
                      $dRead_s3Nqq
                      $dRead1_s3Nqr
                      $dRead2_s3Nqs
                      $dRead3_s3Nqt
                      $dRead4_s3Nqu
                      $dRead5_s3Nqv
                      $dRead6_s3Nqw
                      $dRead7_s3Nqx
                      $dRead8_s3Nqy
                      $dRead9_s3Nqz
                      $dRead10_s3NqA
                      eta_B2
                      eta_B1;
        } in  GHC.Read.list sat_s3NqB;

GHC.Read.$fRead(,,,,,,,,,,)_$creadsPrec
  :: forall a b c d e f g h i j k.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j,
      GHC.Read.Read k) =>
     GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS
          (a, b, c, d, e, f, g, h, i, j, k)
[GblId,
 Arity=12,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3NqC
           $dRead1_s3NqD
           $dRead2_s3NqE
           $dRead3_s3NqF
           $dRead4_s3NqG
           $dRead5_s3NqH
           $dRead6_s3NqI
           $dRead7_s3NqJ
           $dRead8_s3NqK
           $dRead9_s3NqL
           $dRead10_s3NqM
           n_s3NqN]
        let {
          sat_s3NqO [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 (a_X3KOe, b_X3KOg, c_X3KOi, d_X3KOk, e_X3KOm, f_X3KOo, g_X3KOq,
                  h_X3KOs, i_X3KOu, j_X3KOw, k_X3KOy)
          [LclId] =
              [$dRead_s3NqC
               $dRead1_s3NqD
               $dRead2_s3NqE
               $dRead3_s3NqF
               $dRead4_s3NqG
               $dRead5_s3NqH
               $dRead6_s3NqI
               $dRead7_s3NqJ
               $dRead8_s3NqK
               $dRead9_s3NqL
               $dRead10_s3NqM
               n_s3NqN] \u []
                  GHC.Read.$fRead(,,,,,,,,,,)1
                      $dRead_s3NqC
                      $dRead1_s3NqD
                      $dRead2_s3NqE
                      $dRead3_s3NqF
                      $dRead4_s3NqG
                      $dRead5_s3NqH
                      $dRead6_s3NqI
                      $dRead7_s3NqJ
                      $dRead8_s3NqK
                      $dRead9_s3NqL
                      $dRead10_s3NqM
                      n_s3NqN
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NqO;

GHC.Read.$fRead(,,,,,,,,,,)_$creadList
  :: forall a b c d e f g h i j k.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j,
      GHC.Read.Read k) =>
     Text.ParserCombinators.ReadP.ReadS
       [(a, b, c, d, e, f, g, h, i, j, k)]
[GblId,
 Arity=11,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3NqP
           $dRead1_s3NqQ
           $dRead2_s3NqR
           $dRead3_s3NqS
           $dRead4_s3NqT
           $dRead5_s3NqU
           $dRead6_s3NqV
           $dRead7_s3NqW
           $dRead8_s3NqX
           $dRead9_s3NqY
           $dRead10_s3NqZ]
        let {
          sat_s3Nr1 [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 [(a_X3KOf, b_X3KOh, c_X3KOj, d_X3KOl, e_X3KOn, f_X3KOp, g_X3KOr,
                   h_X3KOt, i_X3KOv, j_X3KOx, k_X3KOz)]
          [LclId] =
              [$dRead_s3NqP
               $dRead1_s3NqQ
               $dRead2_s3NqR
               $dRead3_s3NqS
               $dRead4_s3NqT
               $dRead5_s3NqU
               $dRead6_s3NqV
               $dRead7_s3NqW
               $dRead8_s3NqX
               $dRead9_s3NqY
               $dRead10_s3NqZ] \u []
                  let {
                    sat_s3Nr0 [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec
                           (a_X3KOf, b_X3KOh, c_X3KOj, d_X3KOl, e_X3KOn, f_X3KOp, g_X3KOr,
                            h_X3KOt, i_X3KOv, j_X3KOx, k_X3KOz)
                    [LclId] =
                        [$dRead_s3NqP
                         $dRead1_s3NqQ
                         $dRead2_s3NqR
                         $dRead3_s3NqS
                         $dRead4_s3NqT
                         $dRead5_s3NqU
                         $dRead6_s3NqV
                         $dRead7_s3NqW
                         $dRead8_s3NqX
                         $dRead9_s3NqY
                         $dRead10_s3NqZ] \r [eta_B2 eta_B1]
                            GHC.Read.$fRead(,,,,,,,,,,)1
                                $dRead_s3NqP
                                $dRead1_s3NqQ
                                $dRead2_s3NqR
                                $dRead3_s3NqS
                                $dRead4_s3NqT
                                $dRead5_s3NqU
                                $dRead6_s3NqV
                                $dRead7_s3NqW
                                $dRead8_s3NqX
                                $dRead9_s3NqY
                                $dRead10_s3NqZ
                                eta_B2
                                eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s3Nr0
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3Nr1;

GHC.Read.$fRead(,,,,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h i j k.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j,
      GHC.Read.Read k) =>
     GHC.Read.Read (a, b, c, d, e, f, g, h, i, j, k)
[GblId[DFunId],
 Arity=11,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>m] =
    [] \r [$dRead_s3Nr2
           $dRead1_s3Nr3
           $dRead2_s3Nr4
           $dRead3_s3Nr5
           $dRead4_s3Nr6
           $dRead5_s3Nr7
           $dRead6_s3Nr8
           $dRead7_s3Nr9
           $dRead8_s3Nra
           $dRead9_s3Nrb
           $dRead10_s3Nrc]
        let {
          sat_s3Nrg [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 [(a_X3KOg, b_X3KOi, c_X3KOk, d_X3KOm, e_X3KOo, f_X3KOq, g_X3KOs,
                   h_X3KOu, i_X3KOw, j_X3KOy, k_X3KOA)]
          [LclId] =
              [$dRead_s3Nr2
               $dRead1_s3Nr3
               $dRead2_s3Nr4
               $dRead3_s3Nr5
               $dRead4_s3Nr6
               $dRead5_s3Nr7
               $dRead6_s3Nr8
               $dRead7_s3Nr9
               $dRead8_s3Nra
               $dRead9_s3Nrb
               $dRead10_s3Nrc] \u []
                  GHC.Read.$fRead(,,,,,,,,,,)_$creadListPrec
                      $dRead_s3Nr2
                      $dRead1_s3Nr3
                      $dRead2_s3Nr4
                      $dRead3_s3Nr5
                      $dRead4_s3Nr6
                      $dRead5_s3Nr7
                      $dRead6_s3Nr8
                      $dRead7_s3Nr9
                      $dRead8_s3Nra
                      $dRead9_s3Nrb
                      $dRead10_s3Nrc; } in
        let {
          sat_s3Nrf [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KOg, b_X3KOi, c_X3KOk, d_X3KOm, e_X3KOo, f_X3KOq, g_X3KOs,
                  h_X3KOu, i_X3KOw, j_X3KOy, k_X3KOA)
          [LclId] =
              [$dRead_s3Nr2
               $dRead1_s3Nr3
               $dRead2_s3Nr4
               $dRead3_s3Nr5
               $dRead4_s3Nr6
               $dRead5_s3Nr7
               $dRead6_s3Nr8
               $dRead7_s3Nr9
               $dRead8_s3Nra
               $dRead9_s3Nrb
               $dRead10_s3Nrc] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,,,,,,)1
                      $dRead_s3Nr2
                      $dRead1_s3Nr3
                      $dRead2_s3Nr4
                      $dRead3_s3Nr5
                      $dRead4_s3Nr6
                      $dRead5_s3Nr7
                      $dRead6_s3Nr8
                      $dRead7_s3Nr9
                      $dRead8_s3Nra
                      $dRead9_s3Nrb
                      $dRead10_s3Nrc
                      eta_B2
                      eta_B1; } in
        let {
          sat_s3Nre [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS
                 [(a_X3KOg, b_X3KOi, c_X3KOk, d_X3KOm, e_X3KOo, f_X3KOq, g_X3KOs,
                   h_X3KOu, i_X3KOw, j_X3KOy, k_X3KOA)]
          [LclId] =
              [$dRead_s3Nr2
               $dRead1_s3Nr3
               $dRead2_s3Nr4
               $dRead3_s3Nr5
               $dRead4_s3Nr6
               $dRead5_s3Nr7
               $dRead6_s3Nr8
               $dRead7_s3Nr9
               $dRead8_s3Nra
               $dRead9_s3Nrb
               $dRead10_s3Nrc] \u []
                  GHC.Read.$fRead(,,,,,,,,,,)_$creadList
                      $dRead_s3Nr2
                      $dRead1_s3Nr3
                      $dRead2_s3Nr4
                      $dRead3_s3Nr5
                      $dRead4_s3Nr6
                      $dRead5_s3Nr7
                      $dRead6_s3Nr8
                      $dRead7_s3Nr9
                      $dRead8_s3Nra
                      $dRead9_s3Nrb
                      $dRead10_s3Nrc; } in
        let {
          sat_s3Nrd [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS
                    (a_X3KOg, b_X3KOi, c_X3KOk, d_X3KOm, e_X3KOo, f_X3KOq, g_X3KOs,
                     h_X3KOu, i_X3KOw, j_X3KOy, k_X3KOA)
          [LclId] =
              [$dRead_s3Nr2
               $dRead1_s3Nr3
               $dRead2_s3Nr4
               $dRead3_s3Nr5
               $dRead4_s3Nr6
               $dRead5_s3Nr7
               $dRead6_s3Nr8
               $dRead7_s3Nr9
               $dRead8_s3Nra
               $dRead9_s3Nrb
               $dRead10_s3Nrc] \r [eta_B1]
                  GHC.Read.$fRead(,,,,,,,,,,)_$creadsPrec
                      $dRead_s3Nr2
                      $dRead1_s3Nr3
                      $dRead2_s3Nr4
                      $dRead3_s3Nr5
                      $dRead4_s3Nr6
                      $dRead5_s3Nr7
                      $dRead6_s3Nr8
                      $dRead7_s3Nr9
                      $dRead8_s3Nra
                      $dRead9_s3Nrb
                      $dRead10_s3Nrc
                      eta_B1;
        } in  GHC.Read.C:Read [sat_s3Nrd sat_s3Nre sat_s3Nrf sat_s3Nrg];

GHC.Read.$fRead(,,,,,,,,,)_$creadListPrec
  :: forall a b c d e f g h i j.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j) =>
     Text.ParserCombinators.ReadPrec.ReadPrec
       [(a, b, c, d, e, f, g, h, i, j)]
[GblId,
 Arity=10,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Nrh
           $dRead1_s3Nri
           $dRead2_s3Nrj
           $dRead3_s3Nrk
           $dRead4_s3Nrl
           $dRead5_s3Nrm
           $dRead6_s3Nrn
           $dRead7_s3Nro
           $dRead8_s3Nrp
           $dRead9_s3Nrq]
        let {
          sat_s3Nrr [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KPV, b_X3KPX, c_X3KPZ, d_X3KQ1, e_X3KQ3, f_X3KQ5, g_X3KQ7,
                  h_X3KQ9, i_X3KQb, j_X3KQd)
          [LclId] =
              [$dRead_s3Nrh
               $dRead1_s3Nri
               $dRead2_s3Nrj
               $dRead3_s3Nrk
               $dRead4_s3Nrl
               $dRead5_s3Nrm
               $dRead6_s3Nrn
               $dRead7_s3Nro
               $dRead8_s3Nrp
               $dRead9_s3Nrq] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,,,,,)1
                      $dRead_s3Nrh
                      $dRead1_s3Nri
                      $dRead2_s3Nrj
                      $dRead3_s3Nrk
                      $dRead4_s3Nrl
                      $dRead5_s3Nrm
                      $dRead6_s3Nrn
                      $dRead7_s3Nro
                      $dRead8_s3Nrp
                      $dRead9_s3Nrq
                      eta_B2
                      eta_B1;
        } in  GHC.Read.list sat_s3Nrr;

GHC.Read.$fRead(,,,,,,,,,)_$creadsPrec
  :: forall a b c d e f g h i j.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j) =>
     GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS
          (a, b, c, d, e, f, g, h, i, j)
[GblId,
 Arity=11,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Nrs
           $dRead1_s3Nrt
           $dRead2_s3Nru
           $dRead3_s3Nrv
           $dRead4_s3Nrw
           $dRead5_s3Nrx
           $dRead6_s3Nry
           $dRead7_s3Nrz
           $dRead8_s3NrA
           $dRead9_s3NrB
           n_s3NrC]
        let {
          sat_s3NrD [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 (a_X3KPW, b_X3KPY, c_X3KQ0, d_X3KQ2, e_X3KQ4, f_X3KQ6, g_X3KQ8,
                  h_X3KQa, i_X3KQc, j_X3KQe)
          [LclId] =
              [$dRead_s3Nrs
               $dRead1_s3Nrt
               $dRead2_s3Nru
               $dRead3_s3Nrv
               $dRead4_s3Nrw
               $dRead5_s3Nrx
               $dRead6_s3Nry
               $dRead7_s3Nrz
               $dRead8_s3NrA
               $dRead9_s3NrB
               n_s3NrC] \u []
                  GHC.Read.$fRead(,,,,,,,,,)1
                      $dRead_s3Nrs
                      $dRead1_s3Nrt
                      $dRead2_s3Nru
                      $dRead3_s3Nrv
                      $dRead4_s3Nrw
                      $dRead5_s3Nrx
                      $dRead6_s3Nry
                      $dRead7_s3Nrz
                      $dRead8_s3NrA
                      $dRead9_s3NrB
                      n_s3NrC
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NrD;

GHC.Read.$fRead(,,,,,,,,,)_$creadList
  :: forall a b c d e f g h i j.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j) =>
     Text.ParserCombinators.ReadP.ReadS [(a, b, c, d, e, f, g, h, i, j)]
[GblId,
 Arity=10,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3NrE
           $dRead1_s3NrF
           $dRead2_s3NrG
           $dRead3_s3NrH
           $dRead4_s3NrI
           $dRead5_s3NrJ
           $dRead6_s3NrK
           $dRead7_s3NrL
           $dRead8_s3NrM
           $dRead9_s3NrN]
        let {
          sat_s3NrP [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 [(a_X3KPX, b_X3KPZ, c_X3KQ1, d_X3KQ3, e_X3KQ5, f_X3KQ7, g_X3KQ9,
                   h_X3KQb, i_X3KQd, j_X3KQf)]
          [LclId] =
              [$dRead_s3NrE
               $dRead1_s3NrF
               $dRead2_s3NrG
               $dRead3_s3NrH
               $dRead4_s3NrI
               $dRead5_s3NrJ
               $dRead6_s3NrK
               $dRead7_s3NrL
               $dRead8_s3NrM
               $dRead9_s3NrN] \u []
                  let {
                    sat_s3NrO [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec
                           (a_X3KPX, b_X3KPZ, c_X3KQ1, d_X3KQ3, e_X3KQ5, f_X3KQ7, g_X3KQ9,
                            h_X3KQb, i_X3KQd, j_X3KQf)
                    [LclId] =
                        [$dRead_s3NrE
                         $dRead1_s3NrF
                         $dRead2_s3NrG
                         $dRead3_s3NrH
                         $dRead4_s3NrI
                         $dRead5_s3NrJ
                         $dRead6_s3NrK
                         $dRead7_s3NrL
                         $dRead8_s3NrM
                         $dRead9_s3NrN] \r [eta_B2 eta_B1]
                            GHC.Read.$fRead(,,,,,,,,,)1
                                $dRead_s3NrE
                                $dRead1_s3NrF
                                $dRead2_s3NrG
                                $dRead3_s3NrH
                                $dRead4_s3NrI
                                $dRead5_s3NrJ
                                $dRead6_s3NrK
                                $dRead7_s3NrL
                                $dRead8_s3NrM
                                $dRead9_s3NrN
                                eta_B2
                                eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s3NrO
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NrP;

GHC.Read.$fRead(,,,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h i j.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j) =>
     GHC.Read.Read (a, b, c, d, e, f, g, h, i, j)
[GblId[DFunId],
 Arity=10,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>m] =
    [] \r [$dRead_s3NrQ
           $dRead1_s3NrR
           $dRead2_s3NrS
           $dRead3_s3NrT
           $dRead4_s3NrU
           $dRead5_s3NrV
           $dRead6_s3NrW
           $dRead7_s3NrX
           $dRead8_s3NrY
           $dRead9_s3NrZ]
        let {
          sat_s3Ns3 [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 [(a_X3KPY, b_X3KQ0, c_X3KQ2, d_X3KQ4, e_X3KQ6, f_X3KQ8, g_X3KQa,
                   h_X3KQc, i_X3KQe, j_X3KQg)]
          [LclId] =
              [$dRead_s3NrQ
               $dRead1_s3NrR
               $dRead2_s3NrS
               $dRead3_s3NrT
               $dRead4_s3NrU
               $dRead5_s3NrV
               $dRead6_s3NrW
               $dRead7_s3NrX
               $dRead8_s3NrY
               $dRead9_s3NrZ] \u []
                  GHC.Read.$fRead(,,,,,,,,,)_$creadListPrec
                      $dRead_s3NrQ
                      $dRead1_s3NrR
                      $dRead2_s3NrS
                      $dRead3_s3NrT
                      $dRead4_s3NrU
                      $dRead5_s3NrV
                      $dRead6_s3NrW
                      $dRead7_s3NrX
                      $dRead8_s3NrY
                      $dRead9_s3NrZ; } in
        let {
          sat_s3Ns2 [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KPY, b_X3KQ0, c_X3KQ2, d_X3KQ4, e_X3KQ6, f_X3KQ8, g_X3KQa,
                  h_X3KQc, i_X3KQe, j_X3KQg)
          [LclId] =
              [$dRead_s3NrQ
               $dRead1_s3NrR
               $dRead2_s3NrS
               $dRead3_s3NrT
               $dRead4_s3NrU
               $dRead5_s3NrV
               $dRead6_s3NrW
               $dRead7_s3NrX
               $dRead8_s3NrY
               $dRead9_s3NrZ] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,,,,,)1
                      $dRead_s3NrQ
                      $dRead1_s3NrR
                      $dRead2_s3NrS
                      $dRead3_s3NrT
                      $dRead4_s3NrU
                      $dRead5_s3NrV
                      $dRead6_s3NrW
                      $dRead7_s3NrX
                      $dRead8_s3NrY
                      $dRead9_s3NrZ
                      eta_B2
                      eta_B1; } in
        let {
          sat_s3Ns1 [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS
                 [(a_X3KPY, b_X3KQ0, c_X3KQ2, d_X3KQ4, e_X3KQ6, f_X3KQ8, g_X3KQa,
                   h_X3KQc, i_X3KQe, j_X3KQg)]
          [LclId] =
              [$dRead_s3NrQ
               $dRead1_s3NrR
               $dRead2_s3NrS
               $dRead3_s3NrT
               $dRead4_s3NrU
               $dRead5_s3NrV
               $dRead6_s3NrW
               $dRead7_s3NrX
               $dRead8_s3NrY
               $dRead9_s3NrZ] \u []
                  GHC.Read.$fRead(,,,,,,,,,)_$creadList
                      $dRead_s3NrQ
                      $dRead1_s3NrR
                      $dRead2_s3NrS
                      $dRead3_s3NrT
                      $dRead4_s3NrU
                      $dRead5_s3NrV
                      $dRead6_s3NrW
                      $dRead7_s3NrX
                      $dRead8_s3NrY
                      $dRead9_s3NrZ; } in
        let {
          sat_s3Ns0 [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS
                    (a_X3KPY, b_X3KQ0, c_X3KQ2, d_X3KQ4, e_X3KQ6, f_X3KQ8, g_X3KQa,
                     h_X3KQc, i_X3KQe, j_X3KQg)
          [LclId] =
              [$dRead_s3NrQ
               $dRead1_s3NrR
               $dRead2_s3NrS
               $dRead3_s3NrT
               $dRead4_s3NrU
               $dRead5_s3NrV
               $dRead6_s3NrW
               $dRead7_s3NrX
               $dRead8_s3NrY
               $dRead9_s3NrZ] \r [eta_B1]
                  GHC.Read.$fRead(,,,,,,,,,)_$creadsPrec
                      $dRead_s3NrQ
                      $dRead1_s3NrR
                      $dRead2_s3NrS
                      $dRead3_s3NrT
                      $dRead4_s3NrU
                      $dRead5_s3NrV
                      $dRead6_s3NrW
                      $dRead7_s3NrX
                      $dRead8_s3NrY
                      $dRead9_s3NrZ
                      eta_B1;
        } in  GHC.Read.C:Read [sat_s3Ns0 sat_s3Ns1 sat_s3Ns2 sat_s3Ns3];

GHC.Read.$fRead(,,,,,,,,)_$creadListPrec
  :: forall a b c d e f g h i.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i) =>
     Text.ParserCombinators.ReadPrec.ReadPrec
       [(a, b, c, d, e, f, g, h, i)]
[GblId,
 Arity=9,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Ns4
           $dRead1_s3Ns5
           $dRead2_s3Ns6
           $dRead3_s3Ns7
           $dRead4_s3Ns8
           $dRead5_s3Ns9
           $dRead6_s3Nsa
           $dRead7_s3Nsb
           $dRead8_s3Nsc]
        let {
          sat_s3Nsd [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KRq, b_X3KRs, c_X3KRu, d_X3KRw, e_X3KRy, f_X3KRA, g_X3KRC,
                  h_X3KRE, i_X3KRG)
          [LclId] =
              [$dRead_s3Ns4
               $dRead1_s3Ns5
               $dRead2_s3Ns6
               $dRead3_s3Ns7
               $dRead4_s3Ns8
               $dRead5_s3Ns9
               $dRead6_s3Nsa
               $dRead7_s3Nsb
               $dRead8_s3Nsc] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,,,,)1
                      $dRead_s3Ns4
                      $dRead1_s3Ns5
                      $dRead2_s3Ns6
                      $dRead3_s3Ns7
                      $dRead4_s3Ns8
                      $dRead5_s3Ns9
                      $dRead6_s3Nsa
                      $dRead7_s3Nsb
                      $dRead8_s3Nsc
                      eta_B2
                      eta_B1;
        } in  GHC.Read.list sat_s3Nsd;

GHC.Read.$fRead(,,,,,,,,)_$creadsPrec
  :: forall a b c d e f g h i.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i) =>
     GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS (a, b, c, d, e, f, g, h, i)
[GblId,
 Arity=10,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Nse
           $dRead1_s3Nsf
           $dRead2_s3Nsg
           $dRead3_s3Nsh
           $dRead4_s3Nsi
           $dRead5_s3Nsj
           $dRead6_s3Nsk
           $dRead7_s3Nsl
           $dRead8_s3Nsm
           n_s3Nsn]
        let {
          sat_s3Nso [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 (a_X3KRr, b_X3KRt, c_X3KRv, d_X3KRx, e_X3KRz, f_X3KRB, g_X3KRD,
                  h_X3KRF, i_X3KRH)
          [LclId] =
              [$dRead_s3Nse
               $dRead1_s3Nsf
               $dRead2_s3Nsg
               $dRead3_s3Nsh
               $dRead4_s3Nsi
               $dRead5_s3Nsj
               $dRead6_s3Nsk
               $dRead7_s3Nsl
               $dRead8_s3Nsm
               n_s3Nsn] \u []
                  GHC.Read.$fRead(,,,,,,,,)1
                      $dRead_s3Nse
                      $dRead1_s3Nsf
                      $dRead2_s3Nsg
                      $dRead3_s3Nsh
                      $dRead4_s3Nsi
                      $dRead5_s3Nsj
                      $dRead6_s3Nsk
                      $dRead7_s3Nsl
                      $dRead8_s3Nsm
                      n_s3Nsn
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3Nso;

GHC.Read.$fRead(,,,,,,,,)_$creadList
  :: forall a b c d e f g h i.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i) =>
     Text.ParserCombinators.ReadP.ReadS [(a, b, c, d, e, f, g, h, i)]
[GblId,
 Arity=9,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Nsp
           $dRead1_s3Nsq
           $dRead2_s3Nsr
           $dRead3_s3Nss
           $dRead4_s3Nst
           $dRead5_s3Nsu
           $dRead6_s3Nsv
           $dRead7_s3Nsw
           $dRead8_s3Nsx]
        let {
          sat_s3Nsz [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 [(a_X3KRs, b_X3KRu, c_X3KRw, d_X3KRy, e_X3KRA, f_X3KRC, g_X3KRE,
                   h_X3KRG, i_X3KRI)]
          [LclId] =
              [$dRead_s3Nsp
               $dRead1_s3Nsq
               $dRead2_s3Nsr
               $dRead3_s3Nss
               $dRead4_s3Nst
               $dRead5_s3Nsu
               $dRead6_s3Nsv
               $dRead7_s3Nsw
               $dRead8_s3Nsx] \u []
                  let {
                    sat_s3Nsy [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec
                           (a_X3KRs, b_X3KRu, c_X3KRw, d_X3KRy, e_X3KRA, f_X3KRC, g_X3KRE,
                            h_X3KRG, i_X3KRI)
                    [LclId] =
                        [$dRead_s3Nsp
                         $dRead1_s3Nsq
                         $dRead2_s3Nsr
                         $dRead3_s3Nss
                         $dRead4_s3Nst
                         $dRead5_s3Nsu
                         $dRead6_s3Nsv
                         $dRead7_s3Nsw
                         $dRead8_s3Nsx] \r [eta_B2 eta_B1]
                            GHC.Read.$fRead(,,,,,,,,)1
                                $dRead_s3Nsp
                                $dRead1_s3Nsq
                                $dRead2_s3Nsr
                                $dRead3_s3Nss
                                $dRead4_s3Nst
                                $dRead5_s3Nsu
                                $dRead6_s3Nsv
                                $dRead7_s3Nsw
                                $dRead8_s3Nsx
                                eta_B2
                                eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s3Nsy
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3Nsz;

GHC.Read.$fRead(,,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h i.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i) =>
     GHC.Read.Read (a, b, c, d, e, f, g, h, i)
[GblId[DFunId],
 Arity=9,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>m] =
    [] \r [$dRead_s3NsA
           $dRead1_s3NsB
           $dRead2_s3NsC
           $dRead3_s3NsD
           $dRead4_s3NsE
           $dRead5_s3NsF
           $dRead6_s3NsG
           $dRead7_s3NsH
           $dRead8_s3NsI]
        let {
          sat_s3NsM [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 [(a_X3KRt, b_X3KRv, c_X3KRx, d_X3KRz, e_X3KRB, f_X3KRD, g_X3KRF,
                   h_X3KRH, i_X3KRJ)]
          [LclId] =
              [$dRead_s3NsA
               $dRead1_s3NsB
               $dRead2_s3NsC
               $dRead3_s3NsD
               $dRead4_s3NsE
               $dRead5_s3NsF
               $dRead6_s3NsG
               $dRead7_s3NsH
               $dRead8_s3NsI] \u []
                  GHC.Read.$fRead(,,,,,,,,)_$creadListPrec
                      $dRead_s3NsA
                      $dRead1_s3NsB
                      $dRead2_s3NsC
                      $dRead3_s3NsD
                      $dRead4_s3NsE
                      $dRead5_s3NsF
                      $dRead6_s3NsG
                      $dRead7_s3NsH
                      $dRead8_s3NsI; } in
        let {
          sat_s3NsL [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KRt, b_X3KRv, c_X3KRx, d_X3KRz, e_X3KRB, f_X3KRD, g_X3KRF,
                  h_X3KRH, i_X3KRJ)
          [LclId] =
              [$dRead_s3NsA
               $dRead1_s3NsB
               $dRead2_s3NsC
               $dRead3_s3NsD
               $dRead4_s3NsE
               $dRead5_s3NsF
               $dRead6_s3NsG
               $dRead7_s3NsH
               $dRead8_s3NsI] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,,,,)1
                      $dRead_s3NsA
                      $dRead1_s3NsB
                      $dRead2_s3NsC
                      $dRead3_s3NsD
                      $dRead4_s3NsE
                      $dRead5_s3NsF
                      $dRead6_s3NsG
                      $dRead7_s3NsH
                      $dRead8_s3NsI
                      eta_B2
                      eta_B1; } in
        let {
          sat_s3NsK [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS
                 [(a_X3KRt, b_X3KRv, c_X3KRx, d_X3KRz, e_X3KRB, f_X3KRD, g_X3KRF,
                   h_X3KRH, i_X3KRJ)]
          [LclId] =
              [$dRead_s3NsA
               $dRead1_s3NsB
               $dRead2_s3NsC
               $dRead3_s3NsD
               $dRead4_s3NsE
               $dRead5_s3NsF
               $dRead6_s3NsG
               $dRead7_s3NsH
               $dRead8_s3NsI] \u []
                  GHC.Read.$fRead(,,,,,,,,)_$creadList
                      $dRead_s3NsA
                      $dRead1_s3NsB
                      $dRead2_s3NsC
                      $dRead3_s3NsD
                      $dRead4_s3NsE
                      $dRead5_s3NsF
                      $dRead6_s3NsG
                      $dRead7_s3NsH
                      $dRead8_s3NsI; } in
        let {
          sat_s3NsJ [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS
                    (a_X3KRt, b_X3KRv, c_X3KRx, d_X3KRz, e_X3KRB, f_X3KRD, g_X3KRF,
                     h_X3KRH, i_X3KRJ)
          [LclId] =
              [$dRead_s3NsA
               $dRead1_s3NsB
               $dRead2_s3NsC
               $dRead3_s3NsD
               $dRead4_s3NsE
               $dRead5_s3NsF
               $dRead6_s3NsG
               $dRead7_s3NsH
               $dRead8_s3NsI] \r [eta_B1]
                  GHC.Read.$fRead(,,,,,,,,)_$creadsPrec
                      $dRead_s3NsA
                      $dRead1_s3NsB
                      $dRead2_s3NsC
                      $dRead3_s3NsD
                      $dRead4_s3NsE
                      $dRead5_s3NsF
                      $dRead6_s3NsG
                      $dRead7_s3NsH
                      $dRead8_s3NsI
                      eta_B1;
        } in  GHC.Read.C:Read [sat_s3NsJ sat_s3NsK sat_s3NsL sat_s3NsM];

GHC.Read.$fRead(,,,,,,,)_$creadListPrec
  :: forall a b c d e f g h.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h) =>
     Text.ParserCombinators.ReadPrec.ReadPrec [(a, b, c, d, e, f, g, h)]
[GblId,
 Arity=8,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3NsN
           $dRead1_s3NsO
           $dRead2_s3NsP
           $dRead3_s3NsQ
           $dRead4_s3NsR
           $dRead5_s3NsS
           $dRead6_s3NsT
           $dRead7_s3NsU]
        let {
          sat_s3NsV [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KSQ, b_X3KSS, c_X3KSU, d_X3KSW, e_X3KSY, f_X3KT0, g_X3KT2,
                  h_X3KT4)
          [LclId] =
              [$dRead_s3NsN
               $dRead1_s3NsO
               $dRead2_s3NsP
               $dRead3_s3NsQ
               $dRead4_s3NsR
               $dRead5_s3NsS
               $dRead6_s3NsT
               $dRead7_s3NsU] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,,,)1
                      $dRead_s3NsN
                      $dRead1_s3NsO
                      $dRead2_s3NsP
                      $dRead3_s3NsQ
                      $dRead4_s3NsR
                      $dRead5_s3NsS
                      $dRead6_s3NsT
                      $dRead7_s3NsU
                      eta_B2
                      eta_B1;
        } in  GHC.Read.list sat_s3NsV;

GHC.Read.$fRead(,,,,,,,)_$creadsPrec
  :: forall a b c d e f g h.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h) =>
     GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS (a, b, c, d, e, f, g, h)
[GblId,
 Arity=9,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3NsW
           $dRead1_s3NsX
           $dRead2_s3NsY
           $dRead3_s3NsZ
           $dRead4_s3Nt0
           $dRead5_s3Nt1
           $dRead6_s3Nt2
           $dRead7_s3Nt3
           n_s3Nt4]
        let {
          sat_s3Nt5 [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 (a_X3KSR, b_X3KST, c_X3KSV, d_X3KSX, e_X3KSZ, f_X3KT1, g_X3KT3,
                  h_X3KT5)
          [LclId] =
              [$dRead_s3NsW
               $dRead1_s3NsX
               $dRead2_s3NsY
               $dRead3_s3NsZ
               $dRead4_s3Nt0
               $dRead5_s3Nt1
               $dRead6_s3Nt2
               $dRead7_s3Nt3
               n_s3Nt4] \u []
                  GHC.Read.$fRead(,,,,,,,)1
                      $dRead_s3NsW
                      $dRead1_s3NsX
                      $dRead2_s3NsY
                      $dRead3_s3NsZ
                      $dRead4_s3Nt0
                      $dRead5_s3Nt1
                      $dRead6_s3Nt2
                      $dRead7_s3Nt3
                      n_s3Nt4
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3Nt5;

GHC.Read.$fRead(,,,,,,,)_$creadList
  :: forall a b c d e f g h.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h) =>
     Text.ParserCombinators.ReadP.ReadS [(a, b, c, d, e, f, g, h)]
[GblId,
 Arity=8,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Nt6
           $dRead1_s3Nt7
           $dRead2_s3Nt8
           $dRead3_s3Nt9
           $dRead4_s3Nta
           $dRead5_s3Ntb
           $dRead6_s3Ntc
           $dRead7_s3Ntd]
        let {
          sat_s3Ntf [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 [(a_X3KSS, b_X3KSU, c_X3KSW, d_X3KSY, e_X3KT0, f_X3KT2, g_X3KT4,
                   h_X3KT6)]
          [LclId] =
              [$dRead_s3Nt6
               $dRead1_s3Nt7
               $dRead2_s3Nt8
               $dRead3_s3Nt9
               $dRead4_s3Nta
               $dRead5_s3Ntb
               $dRead6_s3Ntc
               $dRead7_s3Ntd] \u []
                  let {
                    sat_s3Nte [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec
                           (a_X3KSS, b_X3KSU, c_X3KSW, d_X3KSY, e_X3KT0, f_X3KT2, g_X3KT4,
                            h_X3KT6)
                    [LclId] =
                        [$dRead_s3Nt6
                         $dRead1_s3Nt7
                         $dRead2_s3Nt8
                         $dRead3_s3Nt9
                         $dRead4_s3Nta
                         $dRead5_s3Ntb
                         $dRead6_s3Ntc
                         $dRead7_s3Ntd] \r [eta_B2 eta_B1]
                            GHC.Read.$fRead(,,,,,,,)1
                                $dRead_s3Nt6
                                $dRead1_s3Nt7
                                $dRead2_s3Nt8
                                $dRead3_s3Nt9
                                $dRead4_s3Nta
                                $dRead5_s3Ntb
                                $dRead6_s3Ntc
                                $dRead7_s3Ntd
                                eta_B2
                                eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s3Nte
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3Ntf;

GHC.Read.$fRead(,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h) =>
     GHC.Read.Read (a, b, c, d, e, f, g, h)
[GblId[DFunId],
 Arity=8,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>m] =
    [] \r [$dRead_s3Ntg
           $dRead1_s3Nth
           $dRead2_s3Nti
           $dRead3_s3Ntj
           $dRead4_s3Ntk
           $dRead5_s3Ntl
           $dRead6_s3Ntm
           $dRead7_s3Ntn]
        let {
          sat_s3Ntr [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 [(a_X3KST, b_X3KSV, c_X3KSX, d_X3KSZ, e_X3KT1, f_X3KT3, g_X3KT5,
                   h_X3KT7)]
          [LclId] =
              [$dRead_s3Ntg
               $dRead1_s3Nth
               $dRead2_s3Nti
               $dRead3_s3Ntj
               $dRead4_s3Ntk
               $dRead5_s3Ntl
               $dRead6_s3Ntm
               $dRead7_s3Ntn] \u []
                  GHC.Read.$fRead(,,,,,,,)_$creadListPrec
                      $dRead_s3Ntg
                      $dRead1_s3Nth
                      $dRead2_s3Nti
                      $dRead3_s3Ntj
                      $dRead4_s3Ntk
                      $dRead5_s3Ntl
                      $dRead6_s3Ntm
                      $dRead7_s3Ntn; } in
        let {
          sat_s3Ntq [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KST, b_X3KSV, c_X3KSX, d_X3KSZ, e_X3KT1, f_X3KT3, g_X3KT5,
                  h_X3KT7)
          [LclId] =
              [$dRead_s3Ntg
               $dRead1_s3Nth
               $dRead2_s3Nti
               $dRead3_s3Ntj
               $dRead4_s3Ntk
               $dRead5_s3Ntl
               $dRead6_s3Ntm
               $dRead7_s3Ntn] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,,,)1
                      $dRead_s3Ntg
                      $dRead1_s3Nth
                      $dRead2_s3Nti
                      $dRead3_s3Ntj
                      $dRead4_s3Ntk
                      $dRead5_s3Ntl
                      $dRead6_s3Ntm
                      $dRead7_s3Ntn
                      eta_B2
                      eta_B1; } in
        let {
          sat_s3Ntp [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS
                 [(a_X3KST, b_X3KSV, c_X3KSX, d_X3KSZ, e_X3KT1, f_X3KT3, g_X3KT5,
                   h_X3KT7)]
          [LclId] =
              [$dRead_s3Ntg
               $dRead1_s3Nth
               $dRead2_s3Nti
               $dRead3_s3Ntj
               $dRead4_s3Ntk
               $dRead5_s3Ntl
               $dRead6_s3Ntm
               $dRead7_s3Ntn] \u []
                  GHC.Read.$fRead(,,,,,,,)_$creadList
                      $dRead_s3Ntg
                      $dRead1_s3Nth
                      $dRead2_s3Nti
                      $dRead3_s3Ntj
                      $dRead4_s3Ntk
                      $dRead5_s3Ntl
                      $dRead6_s3Ntm
                      $dRead7_s3Ntn; } in
        let {
          sat_s3Nto [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS
                    (a_X3KST, b_X3KSV, c_X3KSX, d_X3KSZ, e_X3KT1, f_X3KT3, g_X3KT5,
                     h_X3KT7)
          [LclId] =
              [$dRead_s3Ntg
               $dRead1_s3Nth
               $dRead2_s3Nti
               $dRead3_s3Ntj
               $dRead4_s3Ntk
               $dRead5_s3Ntl
               $dRead6_s3Ntm
               $dRead7_s3Ntn] \r [eta_B1]
                  GHC.Read.$fRead(,,,,,,,)_$creadsPrec
                      $dRead_s3Ntg
                      $dRead1_s3Nth
                      $dRead2_s3Nti
                      $dRead3_s3Ntj
                      $dRead4_s3Ntk
                      $dRead5_s3Ntl
                      $dRead6_s3Ntm
                      $dRead7_s3Ntn
                      eta_B1;
        } in  GHC.Read.C:Read [sat_s3Nto sat_s3Ntp sat_s3Ntq sat_s3Ntr];

GHC.Read.$fRead(,,,,,,)_$creadListPrec
  :: forall a b c d e f g.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f,
      GHC.Read.Read g) =>
     Text.ParserCombinators.ReadPrec.ReadPrec [(a, b, c, d, e, f, g)]
[GblId,
 Arity=7,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Nts
           $dRead1_s3Ntt
           $dRead2_s3Ntu
           $dRead3_s3Ntv
           $dRead4_s3Ntw
           $dRead5_s3Ntx
           $dRead6_s3Nty]
        let {
          sat_s3Ntz [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KTO, b_X3KTQ, c_X3KTS, d_X3KTU, e_X3KTW, f_X3KTY, g_X3KU0)
          [LclId] =
              [$dRead_s3Nts
               $dRead1_s3Ntt
               $dRead2_s3Ntu
               $dRead3_s3Ntv
               $dRead4_s3Ntw
               $dRead5_s3Ntx
               $dRead6_s3Nty] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,,)1
                      $dRead_s3Nts
                      $dRead1_s3Ntt
                      $dRead2_s3Ntu
                      $dRead3_s3Ntv
                      $dRead4_s3Ntw
                      $dRead5_s3Ntx
                      $dRead6_s3Nty
                      eta_B2
                      eta_B1;
        } in  GHC.Read.list sat_s3Ntz;

GHC.Read.$fRead(,,,,,,)_$creadsPrec
  :: forall a b c d e f g.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f,
      GHC.Read.Read g) =>
     GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS (a, b, c, d, e, f, g)
[GblId,
 Arity=8,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3NtA
           $dRead1_s3NtB
           $dRead2_s3NtC
           $dRead3_s3NtD
           $dRead4_s3NtE
           $dRead5_s3NtF
           $dRead6_s3NtG
           n_s3NtH]
        let {
          sat_s3NtI [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 (a_X3KTP, b_X3KTR, c_X3KTT, d_X3KTV, e_X3KTX, f_X3KTZ, g_X3KU1)
          [LclId] =
              [$dRead_s3NtA
               $dRead1_s3NtB
               $dRead2_s3NtC
               $dRead3_s3NtD
               $dRead4_s3NtE
               $dRead5_s3NtF
               $dRead6_s3NtG
               n_s3NtH] \u []
                  GHC.Read.$fRead(,,,,,,)1
                      $dRead_s3NtA
                      $dRead1_s3NtB
                      $dRead2_s3NtC
                      $dRead3_s3NtD
                      $dRead4_s3NtE
                      $dRead5_s3NtF
                      $dRead6_s3NtG
                      n_s3NtH
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NtI;

GHC.Read.$fRead(,,,,,,)_$creadList
  :: forall a b c d e f g.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f,
      GHC.Read.Read g) =>
     Text.ParserCombinators.ReadP.ReadS [(a, b, c, d, e, f, g)]
[GblId,
 Arity=7,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3NtJ
           $dRead1_s3NtK
           $dRead2_s3NtL
           $dRead3_s3NtM
           $dRead4_s3NtN
           $dRead5_s3NtO
           $dRead6_s3NtP]
        let {
          sat_s3NtR [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 [(a_X3KTQ, b_X3KTS, c_X3KTU, d_X3KTW, e_X3KTY, f_X3KU0, g_X3KU2)]
          [LclId] =
              [$dRead_s3NtJ
               $dRead1_s3NtK
               $dRead2_s3NtL
               $dRead3_s3NtM
               $dRead4_s3NtN
               $dRead5_s3NtO
               $dRead6_s3NtP] \u []
                  let {
                    sat_s3NtQ [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec
                           (a_X3KTQ, b_X3KTS, c_X3KTU, d_X3KTW, e_X3KTY, f_X3KU0, g_X3KU2)
                    [LclId] =
                        [$dRead_s3NtJ
                         $dRead1_s3NtK
                         $dRead2_s3NtL
                         $dRead3_s3NtM
                         $dRead4_s3NtN
                         $dRead5_s3NtO
                         $dRead6_s3NtP] \r [eta_B2 eta_B1]
                            GHC.Read.$fRead(,,,,,,)1
                                $dRead_s3NtJ
                                $dRead1_s3NtK
                                $dRead2_s3NtL
                                $dRead3_s3NtM
                                $dRead4_s3NtN
                                $dRead5_s3NtO
                                $dRead6_s3NtP
                                eta_B2
                                eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s3NtQ
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NtR;

GHC.Read.$fRead(,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f,
      GHC.Read.Read g) =>
     GHC.Read.Read (a, b, c, d, e, f, g)
[GblId[DFunId],
 Arity=7,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>m] =
    [] \r [$dRead_s3NtS
           $dRead1_s3NtT
           $dRead2_s3NtU
           $dRead3_s3NtV
           $dRead4_s3NtW
           $dRead5_s3NtX
           $dRead6_s3NtY]
        let {
          sat_s3Nu2 [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 [(a_X3KTR, b_X3KTT, c_X3KTV, d_X3KTX, e_X3KTZ, f_X3KU1, g_X3KU3)]
          [LclId] =
              [$dRead_s3NtS
               $dRead1_s3NtT
               $dRead2_s3NtU
               $dRead3_s3NtV
               $dRead4_s3NtW
               $dRead5_s3NtX
               $dRead6_s3NtY] \u []
                  GHC.Read.$fRead(,,,,,,)_$creadListPrec
                      $dRead_s3NtS
                      $dRead1_s3NtT
                      $dRead2_s3NtU
                      $dRead3_s3NtV
                      $dRead4_s3NtW
                      $dRead5_s3NtX
                      $dRead6_s3NtY; } in
        let {
          sat_s3Nu1 [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KTR, b_X3KTT, c_X3KTV, d_X3KTX, e_X3KTZ, f_X3KU1, g_X3KU3)
          [LclId] =
              [$dRead_s3NtS
               $dRead1_s3NtT
               $dRead2_s3NtU
               $dRead3_s3NtV
               $dRead4_s3NtW
               $dRead5_s3NtX
               $dRead6_s3NtY] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,,)1
                      $dRead_s3NtS
                      $dRead1_s3NtT
                      $dRead2_s3NtU
                      $dRead3_s3NtV
                      $dRead4_s3NtW
                      $dRead5_s3NtX
                      $dRead6_s3NtY
                      eta_B2
                      eta_B1; } in
        let {
          sat_s3Nu0 [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS
                 [(a_X3KTR, b_X3KTT, c_X3KTV, d_X3KTX, e_X3KTZ, f_X3KU1, g_X3KU3)]
          [LclId] =
              [$dRead_s3NtS
               $dRead1_s3NtT
               $dRead2_s3NtU
               $dRead3_s3NtV
               $dRead4_s3NtW
               $dRead5_s3NtX
               $dRead6_s3NtY] \u []
                  GHC.Read.$fRead(,,,,,,)_$creadList
                      $dRead_s3NtS
                      $dRead1_s3NtT
                      $dRead2_s3NtU
                      $dRead3_s3NtV
                      $dRead4_s3NtW
                      $dRead5_s3NtX
                      $dRead6_s3NtY; } in
        let {
          sat_s3NtZ [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS
                    (a_X3KTR, b_X3KTT, c_X3KTV, d_X3KTX, e_X3KTZ, f_X3KU1, g_X3KU3)
          [LclId] =
              [$dRead_s3NtS
               $dRead1_s3NtT
               $dRead2_s3NtU
               $dRead3_s3NtV
               $dRead4_s3NtW
               $dRead5_s3NtX
               $dRead6_s3NtY] \r [eta_B1]
                  GHC.Read.$fRead(,,,,,,)_$creadsPrec
                      $dRead_s3NtS
                      $dRead1_s3NtT
                      $dRead2_s3NtU
                      $dRead3_s3NtV
                      $dRead4_s3NtW
                      $dRead5_s3NtX
                      $dRead6_s3NtY
                      eta_B1;
        } in  GHC.Read.C:Read [sat_s3NtZ sat_s3Nu0 sat_s3Nu1 sat_s3Nu2];

GHC.Read.$fRead(,,,,,)_$creadListPrec
  :: forall a b c d e f.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f) =>
     Text.ParserCombinators.ReadPrec.ReadPrec [(a, b, c, d, e, f)]
[GblId,
 Arity=6,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Nu3
           $dRead1_s3Nu4
           $dRead2_s3Nu5
           $dRead3_s3Nu6
           $dRead4_s3Nu7
           $dRead5_s3Nu8]
        let {
          sat_s3Nu9 [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KVc, b_X3KVe, c_X3KVg, d_X3KVi, e_X3KVk, f_X3KVm)
          [LclId] =
              [$dRead_s3Nu3
               $dRead1_s3Nu4
               $dRead2_s3Nu5
               $dRead3_s3Nu6
               $dRead4_s3Nu7
               $dRead5_s3Nu8] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,)1
                      $dRead_s3Nu3
                      $dRead1_s3Nu4
                      $dRead2_s3Nu5
                      $dRead3_s3Nu6
                      $dRead4_s3Nu7
                      $dRead5_s3Nu8
                      eta_B2
                      eta_B1;
        } in  GHC.Read.list sat_s3Nu9;

GHC.Read.$fRead(,,,,,)_$creadsPrec
  :: forall a b c d e f.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f) =>
     GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS (a, b, c, d, e, f)
[GblId,
 Arity=7,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Nua
           $dRead1_s3Nub
           $dRead2_s3Nuc
           $dRead3_s3Nud
           $dRead4_s3Nue
           $dRead5_s3Nuf
           n_s3Nug]
        let {
          sat_s3Nuh [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 (a_X3KVd, b_X3KVf, c_X3KVh, d_X3KVj, e_X3KVl, f_X3KVn)
          [LclId] =
              [$dRead_s3Nua
               $dRead1_s3Nub
               $dRead2_s3Nuc
               $dRead3_s3Nud
               $dRead4_s3Nue
               $dRead5_s3Nuf
               n_s3Nug] \u []
                  GHC.Read.$fRead(,,,,,)1
                      $dRead_s3Nua
                      $dRead1_s3Nub
                      $dRead2_s3Nuc
                      $dRead3_s3Nud
                      $dRead4_s3Nue
                      $dRead5_s3Nuf
                      n_s3Nug
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3Nuh;

GHC.Read.$fRead(,,,,,)_$creadList
  :: forall a b c d e f.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f) =>
     Text.ParserCombinators.ReadP.ReadS [(a, b, c, d, e, f)]
[GblId,
 Arity=6,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Nui
           $dRead1_s3Nuj
           $dRead2_s3Nuk
           $dRead3_s3Nul
           $dRead4_s3Num
           $dRead5_s3Nun]
        let {
          sat_s3Nup [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 [(a_X3KVe, b_X3KVg, c_X3KVi, d_X3KVk, e_X3KVm, f_X3KVo)]
          [LclId] =
              [$dRead_s3Nui
               $dRead1_s3Nuj
               $dRead2_s3Nuk
               $dRead3_s3Nul
               $dRead4_s3Num
               $dRead5_s3Nun] \u []
                  let {
                    sat_s3Nuo [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec
                           (a_X3KVe, b_X3KVg, c_X3KVi, d_X3KVk, e_X3KVm, f_X3KVo)
                    [LclId] =
                        [$dRead_s3Nui
                         $dRead1_s3Nuj
                         $dRead2_s3Nuk
                         $dRead3_s3Nul
                         $dRead4_s3Num
                         $dRead5_s3Nun] \r [eta_B2 eta_B1]
                            GHC.Read.$fRead(,,,,,)1
                                $dRead_s3Nui
                                $dRead1_s3Nuj
                                $dRead2_s3Nuk
                                $dRead3_s3Nul
                                $dRead4_s3Num
                                $dRead5_s3Nun
                                eta_B2
                                eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s3Nuo
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3Nup;

GHC.Read.$fRead(,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f) =>
     GHC.Read.Read (a, b, c, d, e, f)
[GblId[DFunId],
 Arity=6,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>m] =
    [] \r [$dRead_s3Nuq
           $dRead1_s3Nur
           $dRead2_s3Nus
           $dRead3_s3Nut
           $dRead4_s3Nuu
           $dRead5_s3Nuv]
        let {
          sat_s3Nuz [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 [(a_X3KVf, b_X3KVh, c_X3KVj, d_X3KVl, e_X3KVn, f_X3KVp)]
          [LclId] =
              [$dRead_s3Nuq
               $dRead1_s3Nur
               $dRead2_s3Nus
               $dRead3_s3Nut
               $dRead4_s3Nuu
               $dRead5_s3Nuv] \u []
                  GHC.Read.$fRead(,,,,,)_$creadListPrec
                      $dRead_s3Nuq
                      $dRead1_s3Nur
                      $dRead2_s3Nus
                      $dRead3_s3Nut
                      $dRead4_s3Nuu
                      $dRead5_s3Nuv; } in
        let {
          sat_s3Nuy [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KVf, b_X3KVh, c_X3KVj, d_X3KVl, e_X3KVn, f_X3KVp)
          [LclId] =
              [$dRead_s3Nuq
               $dRead1_s3Nur
               $dRead2_s3Nus
               $dRead3_s3Nut
               $dRead4_s3Nuu
               $dRead5_s3Nuv] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,)1
                      $dRead_s3Nuq
                      $dRead1_s3Nur
                      $dRead2_s3Nus
                      $dRead3_s3Nut
                      $dRead4_s3Nuu
                      $dRead5_s3Nuv
                      eta_B2
                      eta_B1; } in
        let {
          sat_s3Nux [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS
                 [(a_X3KVf, b_X3KVh, c_X3KVj, d_X3KVl, e_X3KVn, f_X3KVp)]
          [LclId] =
              [$dRead_s3Nuq
               $dRead1_s3Nur
               $dRead2_s3Nus
               $dRead3_s3Nut
               $dRead4_s3Nuu
               $dRead5_s3Nuv] \u []
                  GHC.Read.$fRead(,,,,,)_$creadList
                      $dRead_s3Nuq
                      $dRead1_s3Nur
                      $dRead2_s3Nus
                      $dRead3_s3Nut
                      $dRead4_s3Nuu
                      $dRead5_s3Nuv; } in
        let {
          sat_s3Nuw [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS
                    (a_X3KVf, b_X3KVh, c_X3KVj, d_X3KVl, e_X3KVn, f_X3KVp)
          [LclId] =
              [$dRead_s3Nuq
               $dRead1_s3Nur
               $dRead2_s3Nus
               $dRead3_s3Nut
               $dRead4_s3Nuu
               $dRead5_s3Nuv] \r [eta_B1]
                  GHC.Read.$fRead(,,,,,)_$creadsPrec
                      $dRead_s3Nuq
                      $dRead1_s3Nur
                      $dRead2_s3Nus
                      $dRead3_s3Nut
                      $dRead4_s3Nuu
                      $dRead5_s3Nuv
                      eta_B1;
        } in  GHC.Read.C:Read [sat_s3Nuw sat_s3Nux sat_s3Nuy sat_s3Nuz];

GHC.Read.$fRead(,,,,)_$creadListPrec
  :: forall a b c d e.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e) =>
     Text.ParserCombinators.ReadPrec.ReadPrec [(a, b, c, d, e)]
[GblId,
 Arity=5,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3NuA
           $dRead1_s3NuB
           $dRead2_s3NuC
           $dRead3_s3NuD
           $dRead4_s3NuE]
        let {
          sat_s3NuF [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KWn, b_X3KWp, c_X3KWr, d_X3KWt, e_X3KWv)
          [LclId] =
              [$dRead_s3NuA
               $dRead1_s3NuB
               $dRead2_s3NuC
               $dRead3_s3NuD
               $dRead4_s3NuE] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,)1
                      $dRead_s3NuA
                      $dRead1_s3NuB
                      $dRead2_s3NuC
                      $dRead3_s3NuD
                      $dRead4_s3NuE
                      eta_B2
                      eta_B1;
        } in  GHC.Read.list sat_s3NuF;

GHC.Read.$fRead(,,,,)_$creadsPrec
  :: forall a b c d e.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e) =>
     GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS (a, b, c, d, e)
[GblId,
 Arity=6,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3NuG
           $dRead1_s3NuH
           $dRead2_s3NuI
           $dRead3_s3NuJ
           $dRead4_s3NuK
           n_s3NuL]
        let {
          sat_s3NuM [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 (a_X3KWo, b_X3KWq, c_X3KWs, d_X3KWu, e_X3KWw)
          [LclId] =
              [$dRead_s3NuG
               $dRead1_s3NuH
               $dRead2_s3NuI
               $dRead3_s3NuJ
               $dRead4_s3NuK
               n_s3NuL] \u []
                  GHC.Read.$fRead(,,,,)1
                      $dRead_s3NuG
                      $dRead1_s3NuH
                      $dRead2_s3NuI
                      $dRead3_s3NuJ
                      $dRead4_s3NuK
                      n_s3NuL
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NuM;

GHC.Read.$fRead(,,,,)_$creadList
  :: forall a b c d e.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e) =>
     Text.ParserCombinators.ReadP.ReadS [(a, b, c, d, e)]
[GblId,
 Arity=5,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3NuN
           $dRead1_s3NuO
           $dRead2_s3NuP
           $dRead3_s3NuQ
           $dRead4_s3NuR]
        let {
          sat_s3NuT [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 [(a_X3KWp, b_X3KWr, c_X3KWt, d_X3KWv, e_X3KWx)]
          [LclId] =
              [$dRead_s3NuN
               $dRead1_s3NuO
               $dRead2_s3NuP
               $dRead3_s3NuQ
               $dRead4_s3NuR] \u []
                  let {
                    sat_s3NuS [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec
                           (a_X3KWp, b_X3KWr, c_X3KWt, d_X3KWv, e_X3KWx)
                    [LclId] =
                        [$dRead_s3NuN
                         $dRead1_s3NuO
                         $dRead2_s3NuP
                         $dRead3_s3NuQ
                         $dRead4_s3NuR] \r [eta_B2 eta_B1]
                            GHC.Read.$fRead(,,,,)1
                                $dRead_s3NuN
                                $dRead1_s3NuO
                                $dRead2_s3NuP
                                $dRead3_s3NuQ
                                $dRead4_s3NuR
                                eta_B2
                                eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s3NuS
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NuT;

GHC.Read.$fRead(,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e) =>
     GHC.Read.Read (a, b, c, d, e)
[GblId[DFunId],
 Arity=5,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>m] =
    [] \r [$dRead_s3NuU
           $dRead1_s3NuV
           $dRead2_s3NuW
           $dRead3_s3NuX
           $dRead4_s3NuY]
        let {
          sat_s3Nv2 [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 [(a_X3KWq, b_X3KWs, c_X3KWu, d_X3KWw, e_X3KWy)]
          [LclId] =
              [$dRead_s3NuU
               $dRead1_s3NuV
               $dRead2_s3NuW
               $dRead3_s3NuX
               $dRead4_s3NuY] \u []
                  GHC.Read.$fRead(,,,,)_$creadListPrec
                      $dRead_s3NuU
                      $dRead1_s3NuV
                      $dRead2_s3NuW
                      $dRead3_s3NuX
                      $dRead4_s3NuY; } in
        let {
          sat_s3Nv1 [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KWq, b_X3KWs, c_X3KWu, d_X3KWw, e_X3KWy)
          [LclId] =
              [$dRead_s3NuU
               $dRead1_s3NuV
               $dRead2_s3NuW
               $dRead3_s3NuX
               $dRead4_s3NuY] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,)1
                      $dRead_s3NuU
                      $dRead1_s3NuV
                      $dRead2_s3NuW
                      $dRead3_s3NuX
                      $dRead4_s3NuY
                      eta_B2
                      eta_B1; } in
        let {
          sat_s3Nv0 [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS
                 [(a_X3KWq, b_X3KWs, c_X3KWu, d_X3KWw, e_X3KWy)]
          [LclId] =
              [$dRead_s3NuU
               $dRead1_s3NuV
               $dRead2_s3NuW
               $dRead3_s3NuX
               $dRead4_s3NuY] \u []
                  GHC.Read.$fRead(,,,,)_$creadList
                      $dRead_s3NuU
                      $dRead1_s3NuV
                      $dRead2_s3NuW
                      $dRead3_s3NuX
                      $dRead4_s3NuY; } in
        let {
          sat_s3NuZ [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS
                    (a_X3KWq, b_X3KWs, c_X3KWu, d_X3KWw, e_X3KWy)
          [LclId] =
              [$dRead_s3NuU
               $dRead1_s3NuV
               $dRead2_s3NuW
               $dRead3_s3NuX
               $dRead4_s3NuY] \r [eta_B1]
                  GHC.Read.$fRead(,,,,)_$creadsPrec
                      $dRead_s3NuU
                      $dRead1_s3NuV
                      $dRead2_s3NuW
                      $dRead3_s3NuX
                      $dRead4_s3NuY
                      eta_B1;
        } in  GHC.Read.C:Read [sat_s3NuZ sat_s3Nv0 sat_s3Nv1 sat_s3Nv2];

GHC.Read.$fRead(,,,)_$creadListPrec
  :: forall a b c d.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d) =>
     Text.ParserCombinators.ReadPrec.ReadPrec [(a, b, c, d)]
[GblId,
 Arity=4,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Nv3 $dRead1_s3Nv4 $dRead2_s3Nv5 $dRead3_s3Nv6]
        let {
          sat_s3Nv7 [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KXt, b_X3KXv, c_X3KXx, d_X3KXz)
          [LclId] =
              [$dRead_s3Nv3 $dRead1_s3Nv4 $dRead2_s3Nv5 $dRead3_s3Nv6] \r [eta_B2
                                                                           eta_B1]
                  GHC.Read.$fRead(,,,)1
                      $dRead_s3Nv3
                      $dRead1_s3Nv4
                      $dRead2_s3Nv5
                      $dRead3_s3Nv6
                      eta_B2
                      eta_B1;
        } in  GHC.Read.list sat_s3Nv7;

GHC.Read.$fRead(,,,)_$creadsPrec
  :: forall a b c d.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d) =>
     GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS (a, b, c, d)
[GblId,
 Arity=5,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Nv8
           $dRead1_s3Nv9
           $dRead2_s3Nva
           $dRead3_s3Nvb
           n_s3Nvc]
        let {
          sat_s3Nvd [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 (a_X3KXu, b_X3KXw, c_X3KXy, d_X3KXA)
          [LclId] =
              [$dRead_s3Nv8
               $dRead1_s3Nv9
               $dRead2_s3Nva
               $dRead3_s3Nvb
               n_s3Nvc] \u []
                  GHC.Read.$fRead(,,,)1
                      $dRead_s3Nv8
                      $dRead1_s3Nv9
                      $dRead2_s3Nva
                      $dRead3_s3Nvb
                      n_s3Nvc
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3Nvd;

GHC.Read.$fRead(,,,)_$creadList
  :: forall a b c d.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d) =>
     Text.ParserCombinators.ReadP.ReadS [(a, b, c, d)]
[GblId,
 Arity=4,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Nve $dRead1_s3Nvf $dRead2_s3Nvg $dRead3_s3Nvh]
        let {
          sat_s3Nvj [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 [(a_X3KXv, b_X3KXx, c_X3KXz, d_X3KXB)]
          [LclId] =
              [$dRead_s3Nve $dRead1_s3Nvf $dRead2_s3Nvg $dRead3_s3Nvh] \u []
                  let {
                    sat_s3Nvi [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec
                           (a_X3KXv, b_X3KXx, c_X3KXz, d_X3KXB)
                    [LclId] =
                        [$dRead_s3Nve $dRead1_s3Nvf $dRead2_s3Nvg $dRead3_s3Nvh] \r [eta_B2
                                                                                     eta_B1]
                            GHC.Read.$fRead(,,,)1
                                $dRead_s3Nve
                                $dRead1_s3Nvf
                                $dRead2_s3Nvg
                                $dRead3_s3Nvh
                                eta_B2
                                eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s3Nvi
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3Nvj;

GHC.Read.$fRead(,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d) =>
     GHC.Read.Read (a, b, c, d)
[GblId[DFunId],
 Arity=4,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>m] =
    [] \r [$dRead_s3Nvk $dRead1_s3Nvl $dRead2_s3Nvm $dRead3_s3Nvn]
        let {
          sat_s3Nvr [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 [(a_X3KXw, b_X3KXy, c_X3KXA, d_X3KXC)]
          [LclId] =
              [$dRead_s3Nvk $dRead1_s3Nvl $dRead2_s3Nvm $dRead3_s3Nvn] \u []
                  GHC.Read.$fRead(,,,)_$creadListPrec
                      $dRead_s3Nvk $dRead1_s3Nvl $dRead2_s3Nvm $dRead3_s3Nvn; } in
        let {
          sat_s3Nvq [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KXw, b_X3KXy, c_X3KXA, d_X3KXC)
          [LclId] =
              [$dRead_s3Nvk $dRead1_s3Nvl $dRead2_s3Nvm $dRead3_s3Nvn] \r [eta_B2
                                                                           eta_B1]
                  GHC.Read.$fRead(,,,)1
                      $dRead_s3Nvk
                      $dRead1_s3Nvl
                      $dRead2_s3Nvm
                      $dRead3_s3Nvn
                      eta_B2
                      eta_B1; } in
        let {
          sat_s3Nvp [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS
                 [(a_X3KXw, b_X3KXy, c_X3KXA, d_X3KXC)]
          [LclId] =
              [$dRead_s3Nvk $dRead1_s3Nvl $dRead2_s3Nvm $dRead3_s3Nvn] \u []
                  GHC.Read.$fRead(,,,)_$creadList
                      $dRead_s3Nvk $dRead1_s3Nvl $dRead2_s3Nvm $dRead3_s3Nvn; } in
        let {
          sat_s3Nvo [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS
                    (a_X3KXw, b_X3KXy, c_X3KXA, d_X3KXC)
          [LclId] =
              [$dRead_s3Nvk
               $dRead1_s3Nvl
               $dRead2_s3Nvm
               $dRead3_s3Nvn] \r [eta_B1]
                  GHC.Read.$fRead(,,,)_$creadsPrec
                      $dRead_s3Nvk $dRead1_s3Nvl $dRead2_s3Nvm $dRead3_s3Nvn eta_B1;
        } in  GHC.Read.C:Read [sat_s3Nvo sat_s3Nvp sat_s3Nvq sat_s3Nvr];

GHC.Read.$fRead(,,)_$creadListPrec
  :: forall a b c.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c) =>
     Text.ParserCombinators.ReadPrec.ReadPrec [(a, b, c)]
[GblId,
 Arity=3,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Nvs $dRead1_s3Nvt $dRead2_s3Nvu]
        let {
          sat_s3Nvv [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KYb, b_X3KYd, c_X3KYf)
          [LclId] =
              [$dRead_s3Nvs $dRead1_s3Nvt $dRead2_s3Nvu] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,)1
                      $dRead_s3Nvs $dRead1_s3Nvt $dRead2_s3Nvu eta_B2 eta_B1;
        } in  GHC.Read.list sat_s3Nvv;

GHC.Read.$fRead(,,)_$creadsPrec
  :: forall a b c.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c) =>
     GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS (a, b, c)
[GblId,
 Arity=4,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Nvw $dRead1_s3Nvx $dRead2_s3Nvy n_s3Nvz]
        let {
          sat_s3NvA [Occ=Once]
            :: Text.ParserCombinators.ReadP.P (a_X3KYc, b_X3KYe, c_X3KYg)
          [LclId] =
              [$dRead_s3Nvw $dRead1_s3Nvx $dRead2_s3Nvy n_s3Nvz] \u []
                  GHC.Read.$fRead(,,)1
                      $dRead_s3Nvw
                      $dRead1_s3Nvx
                      $dRead2_s3Nvy
                      n_s3Nvz
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NvA;

GHC.Read.$fRead(,,)_$creadList
  :: forall a b c.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c) =>
     Text.ParserCombinators.ReadP.ReadS [(a, b, c)]
[GblId,
 Arity=3,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3NvB $dRead1_s3NvC $dRead2_s3NvD]
        let {
          sat_s3NvF [Occ=Once]
            :: Text.ParserCombinators.ReadP.P [(a_X3KYd, b_X3KYf, c_X3KYh)]
          [LclId] =
              [$dRead_s3NvB $dRead1_s3NvC $dRead2_s3NvD] \u []
                  let {
                    sat_s3NvE [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec
                           (a_X3KYd, b_X3KYf, c_X3KYh)
                    [LclId] =
                        [$dRead_s3NvB $dRead1_s3NvC $dRead2_s3NvD] \r [eta_B2 eta_B1]
                            GHC.Read.$fRead(,,)1
                                $dRead_s3NvB $dRead1_s3NvC $dRead2_s3NvD eta_B2 eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s3NvE
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NvF;

GHC.Read.$fRead(,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c) =>
     GHC.Read.Read (a, b, c)
[GblId[DFunId],
 Arity=3,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>m] =
    [] \r [$dRead_s3NvG $dRead1_s3NvH $dRead2_s3NvI]
        let {
          sat_s3NvM [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 [(a_X3KYe, b_X3KYg, c_X3KYi)]
          [LclId] =
              [$dRead_s3NvG $dRead1_s3NvH $dRead2_s3NvI] \u []
                  GHC.Read.$fRead(,,)_$creadListPrec
                      $dRead_s3NvG $dRead1_s3NvH $dRead2_s3NvI; } in
        let {
          sat_s3NvL [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KYe, b_X3KYg, c_X3KYi)
          [LclId] =
              [$dRead_s3NvG $dRead1_s3NvH $dRead2_s3NvI] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,)1
                      $dRead_s3NvG $dRead1_s3NvH $dRead2_s3NvI eta_B2 eta_B1; } in
        let {
          sat_s3NvK [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS [(a_X3KYe, b_X3KYg, c_X3KYi)]
          [LclId] =
              [$dRead_s3NvG $dRead1_s3NvH $dRead2_s3NvI] \u []
                  GHC.Read.$fRead(,,)_$creadList
                      $dRead_s3NvG $dRead1_s3NvH $dRead2_s3NvI; } in
        let {
          sat_s3NvJ [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS (a_X3KYe, b_X3KYg, c_X3KYi)
          [LclId] =
              [$dRead_s3NvG $dRead1_s3NvH $dRead2_s3NvI] \r [eta_B1]
                  GHC.Read.$fRead(,,)_$creadsPrec
                      $dRead_s3NvG $dRead1_s3NvH $dRead2_s3NvI eta_B1;
        } in  GHC.Read.C:Read [sat_s3NvJ sat_s3NvK sat_s3NvL sat_s3NvM];

GHC.Read.$fRead(,)_$creadListPrec
  :: forall a b.
     (GHC.Read.Read a, GHC.Read.Read b) =>
     Text.ParserCombinators.ReadPrec.ReadPrec [(a, b)]
[GblId,
 Arity=2,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3NvN $dRead1_s3NvO]
        let {
          sat_s3NvP [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec (a_X3KZ7, b_X3KZ9)
          [LclId] =
              [$dRead_s3NvN $dRead1_s3NvO] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,)1 $dRead_s3NvN $dRead1_s3NvO eta_B2 eta_B1;
        } in  GHC.Read.list sat_s3NvP;

GHC.Read.$fRead(,)_$creadsPrec
  :: forall a b.
     (GHC.Read.Read a, GHC.Read.Read b) =>
     GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS (a, b)
[GblId,
 Arity=3,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3NvQ $dRead1_s3NvR n_s3NvS]
        let {
          sat_s3NvT [Occ=Once]
            :: Text.ParserCombinators.ReadP.P (a_X3KZ8, b_X3KZa)
          [LclId] =
              [$dRead_s3NvQ $dRead1_s3NvR n_s3NvS] \u []
                  GHC.Read.$fRead(,)1
                      $dRead_s3NvQ
                      $dRead1_s3NvR
                      n_s3NvS
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NvT;

GHC.Read.$fRead(,)_$creadList
  :: forall a b.
     (GHC.Read.Read a, GHC.Read.Read b) =>
     Text.ParserCombinators.ReadP.ReadS [(a, b)]
[GblId,
 Arity=2,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3NvU $dRead1_s3NvV]
        let {
          sat_s3NvX [Occ=Once]
            :: Text.ParserCombinators.ReadP.P [(a_X3KZ9, b_X3KZb)]
          [LclId] =
              [$dRead_s3NvU $dRead1_s3NvV] \u []
                  let {
                    sat_s3NvW [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec (a_X3KZ9, b_X3KZb)
                    [LclId] =
                        [$dRead_s3NvU $dRead1_s3NvV] \r [eta_B2 eta_B1]
                            GHC.Read.$fRead(,)1 $dRead_s3NvU $dRead1_s3NvV eta_B2 eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s3NvW
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NvX;

GHC.Read.$fRead(,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b.
     (GHC.Read.Read a, GHC.Read.Read b) =>
     GHC.Read.Read (a, b)
[GblId[DFunId],
 Arity=2,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>m] =
    [] \r [$dRead_s3NvY $dRead1_s3NvZ]
        let {
          sat_s3Nw3 [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec [(a_X3KZa, b_X3KZc)]
          [LclId] =
              [$dRead_s3NvY $dRead1_s3NvZ] \u []
                  GHC.Read.$fRead(,)_$creadListPrec $dRead_s3NvY $dRead1_s3NvZ; } in
        let {
          sat_s3Nw2 [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec (a_X3KZa, b_X3KZc)
          [LclId] =
              [$dRead_s3NvY $dRead1_s3NvZ] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,)1 $dRead_s3NvY $dRead1_s3NvZ eta_B2 eta_B1; } in
        let {
          sat_s3Nw1 [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS [(a_X3KZa, b_X3KZc)]
          [LclId] =
              [$dRead_s3NvY $dRead1_s3NvZ] \u []
                  GHC.Read.$fRead(,)_$creadList $dRead_s3NvY $dRead1_s3NvZ; } in
        let {
          sat_s3Nw0 [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS (a_X3KZa, b_X3KZc)
          [LclId] =
              [$dRead_s3NvY $dRead1_s3NvZ] \r [eta_B1]
                  GHC.Read.$fRead(,)_$creadsPrec $dRead_s3NvY $dRead1_s3NvZ eta_B1;
        } in  GHC.Read.C:Read [sat_s3Nw0 sat_s3Nw1 sat_s3Nw2 sat_s3Nw3];

GHC.Read.$fReadLexeme_$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec [Text.Read.Lex.Lexeme]
[GblId] =
    [] \u [] GHC.Read.list GHC.Read.$fReadLexeme1;

GHC.Read.$fReadLexeme_lvl117
  :: Text.ParserCombinators.ReadP.P Text.Read.Lex.Lexeme
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE Text.ParserCombinators.ReadP.Result! [Text.Read.Lex.EOF
                                                        Text.ParserCombinators.ReadP.Fail];

GHC.Read.$fReadLexeme8
  :: GHC.Base.String
     -> Text.ParserCombinators.ReadP.P Text.Read.Lex.Lexeme
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [a3_s3Nw4]
        case a3_s3Nw4 of {
          [] -> GHC.Read.$fReadLexeme_lvl117;
          : _ [Occ=Dead] _ [Occ=Dead] ->
              Text.ParserCombinators.ReadP.Fail [];
        };

GHC.Read.$fReadLexeme7
  :: Text.ParserCombinators.ReadP.P Text.Read.Lex.Lexeme
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE Text.ParserCombinators.ReadP.Look! [GHC.Read.$fReadLexeme8];

GHC.Read.$fReadLexeme6
  :: Text.ParserCombinators.ReadP.P Text.Read.Lex.Lexeme
[GblId] =
    [] \u []
        Text.Read.Lex.expect2
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fReadLexeme_lvl116
  :: Text.ParserCombinators.ReadP.P Text.Read.Lex.Lexeme
[GblId] =
    [] \u []
        Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
            GHC.Read.$fReadLexeme7 GHC.Read.$fReadLexeme6;

GHC.Read.$fReadLexeme_k
  :: () -> Text.ParserCombinators.ReadP.P Text.Read.Lex.Lexeme
[GblId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
    [] \r [a3_s3Nw8] GHC.Read.$fReadLexeme_lvl116;

GHC.Read.$fReadLexeme5
  :: GHC.Base.String
     -> Text.ParserCombinators.ReadP.P Text.Read.Lex.Lexeme
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [a_s3Nw9]
        Text.ParserCombinators.ReadP.skipSpaces2
            a_s3Nw9 GHC.Read.$fReadLexeme_k;

GHC.Read.$fReadLexeme4
  :: Text.ParserCombinators.ReadP.P Text.Read.Lex.Lexeme
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE Text.ParserCombinators.ReadP.Look! [GHC.Read.$fReadLexeme5];

GHC.Read.$fReadLexeme3
  :: Text.ParserCombinators.ReadP.ReadS Text.Read.Lex.Lexeme
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.$fReadLexeme4 eta_B1;

GHC.Read.$fReadLexeme_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS Text.Read.Lex.Lexeme
[GblId, Arity=2, Str=<L,A>, Unf=OtherCon []] =
    [] \r [n_s3Nwa eta_B1] GHC.Read.$fReadLexeme3 eta_B1;

GHC.Read.$fReadLexeme2
  :: Text.ParserCombinators.ReadP.P [Text.Read.Lex.Lexeme]
[GblId] =
    [] \u []
        GHC.Read.$fReadLexeme_$creadListPrec
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fReadLexeme_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [Text.Read.Lex.Lexeme]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.$fReadLexeme2 eta_B1;

GHC.Read.$fReadLexeme [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read Text.Read.Lex.Lexeme
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fReadLexeme_$creadsPrec
                                    GHC.Read.$fReadLexeme_$creadList
                                    GHC.Read.$fReadLexeme1
                                    GHC.Read.$fReadLexeme_$creadListPrec];

GHC.Read.$dmreadList
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadP.ReadS [a]
[GblId, Arity=1, Str=<L,1*U(A,A,1*C1(C(U)),A)>, Unf=OtherCon []] =
    [] \r [$dRead_s3Nwb]
        let {
          sat_s3Nwd [Occ=Once] :: Text.ParserCombinators.ReadP.P [a_X3K8l]
          [LclId] =
              [$dRead_s3Nwb] \u []
                  let {
                    sat_s3Nwc [Occ=Once, Dmd=<L,1*C1(C(U))>]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec a_X3K8l
                    [LclId] =
                        [$dRead_s3Nwb] \s [] GHC.Read.readPrec $dRead_s3Nwb;
                  } in 
                    GHC.Read.list
                        sat_s3Nwc
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3Nwd;

GHC.Read.$fReadInteger_$sreadNumber
  :: (Text.Read.Lex.Lexeme
      -> Text.ParserCombinators.ReadPrec.ReadPrec
           GHC.Integer.Type.Integer)
     -> Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Integer.Type.Integer -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=3, Str=<L,C(C1(C1(U)))><L,U><L,U>, Unf=OtherCon []] =
    [] \r [convert_s3Nwe eta_s3Nwf eta1_s3Nwg]
        let {
          sat_s3Nx2 [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 GHC.Integer.Type.Integer
          [LclId] =
              [convert_s3Nwe] \r [n_s3Nwh k1_s3Nwi]
                  let {
                    lvl116_s3Nwj [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId] =
                        [convert_s3Nwe n_s3Nwh k1_s3Nwi] \u []
                            let {
                              lvl2_s3Nwk [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [convert_s3Nwe n_s3Nwh k1_s3Nwi] \u []
                                      let {
                                        lvl3_s3Nwl
                                          :: GHC.Integer.Type.Integer
                                             -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId, Arity=1, Str=<L,1*U>, Unf=OtherCon []] =
                                            [k1_s3Nwi] \r [a1_s3Nwm]
                                                let {
                                                  sat_s3Nwn [Occ=Once] :: GHC.Integer.Type.Integer
                                                  [LclId] =
                                                      [a1_s3Nwm] \u []
                                                          GHC.Integer.Type.negateInteger a1_s3Nwm;
                                                } in  k1_s3Nwi sat_s3Nwn; } in
                                      let {
                                        lvl117_s3Nwo [Occ=OnceL]
                                          :: Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            [convert_s3Nwe n_s3Nwh lvl3_s3Nwl] \u []
                                                convert_s3Nwe
                                                    Text.Read.Lex.EOF n_s3Nwh lvl3_s3Nwl; } in
                                      let {
                                        sat_s3Nwx [Occ=Once]
                                          :: Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            [convert_s3Nwe n_s3Nwh lvl3_s3Nwl] \u []
                                                let {
                                                  sat_s3Nww [Occ=Once]
                                                    :: Text.Read.Lex.Lexeme
                                                       -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                                  [LclId] =
                                                      [convert_s3Nwe
                                                       n_s3Nwh
                                                       lvl3_s3Nwl] \r [a1_s3Nwv]
                                                          convert_s3Nwe a1_s3Nwv n_s3Nwh lvl3_s3Nwl;
                                                } in  Text.Read.Lex.expect2 sat_s3Nww; } in
                                      let {
                                        sat_s3Nwt [Occ=OnceL]
                                          :: GHC.Base.String
                                             -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            [lvl117_s3Nwo] \r [a3_s3Nwp]
                                                case a3_s3Nwp of {
                                                  [] -> lvl117_s3Nwo;
                                                  : _ [Occ=Dead] _ [Occ=Dead] ->
                                                      Text.ParserCombinators.ReadP.Fail [];
                                                }; } in
                                      let {
                                        sat_s3Nwu [Occ=Once]
                                          :: Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            CCCS Text.ParserCombinators.ReadP.Look! [sat_s3Nwt];
                                      } in 
                                        Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                            sat_s3Nwu sat_s3Nwx; } in
                            let {
                              k_s3Nwy [Occ=OnceL, Dmd=<L,C(U)>]
                                :: () -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
                                  [lvl2_s3Nwk] \r [a3_s3Nwz] lvl2_s3Nwk; } in
                            let {
                              lvl3_s3NwA [Occ=OnceL]
                                :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                  [k_s3Nwy] \r [a_s3NwB]
                                      Text.ParserCombinators.ReadP.skipSpaces2 a_s3NwB k_s3Nwy; } in
                            let {
                              lvl4_s3NwC [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Unf=OtherCon []] =
                                  CCCS Text.ParserCombinators.ReadP.Look! [lvl3_s3NwA]; } in
                            let {
                              w2_s3NwD
                                :: Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                  [convert_s3Nwe n_s3Nwh k1_s3Nwi lvl4_s3NwC] \r [a1_s3NwE]
                                      case a1_s3NwE of wild_s3NwF {
                                        __DEFAULT -> convert_s3Nwe wild_s3NwF n_s3Nwh k1_s3Nwi;
                                        Text.Read.Lex.Symbol ds_s3NwG [Occ=Once!] ->
                                            case ds_s3NwG of {
                                              [] -> convert_s3Nwe wild_s3NwF n_s3Nwh k1_s3Nwi;
                                              : ds1_s3NwI [Occ=Once!] ds2_s3NwJ [Occ=Once!] ->
                                                  case ds1_s3NwI of {
                                                    GHC.Types.C# ds3_s3NwL [Occ=Once!] ->
                                                        case ds3_s3NwL of {
                                                          __DEFAULT ->
                                                              convert_s3Nwe
                                                                  wild_s3NwF n_s3Nwh k1_s3Nwi;
                                                          '-'# ->
                                                              case ds2_s3NwJ of {
                                                                [] -> lvl4_s3NwC;
                                                                : _ [Occ=Dead] _ [Occ=Dead] ->
                                                                    convert_s3Nwe
                                                                        wild_s3NwF n_s3Nwh k1_s3Nwi;
                                                              };
                                                        };
                                                  };
                                            };
                                      }; } in
                            let {
                              lvl117_s3NwQ [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [w2_s3NwD] \u [] w2_s3NwD Text.Read.Lex.EOF; } in
                            let {
                              sat_s3NwX [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [w2_s3NwD] \u [] Text.Read.Lex.expect2 w2_s3NwD; } in
                            let {
                              sat_s3NwV [Occ=OnceL]
                                :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [lvl117_s3NwQ] \r [a3_s3NwR]
                                      case a3_s3NwR of {
                                        [] -> lvl117_s3NwQ;
                                        : _ [Occ=Dead] _ [Occ=Dead] ->
                                            Text.ParserCombinators.ReadP.Fail [];
                                      }; } in
                            let {
                              sat_s3NwW [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  CCCS Text.ParserCombinators.ReadP.Look! [sat_s3NwV];
                            } in 
                              Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                  sat_s3NwW sat_s3NwX; } in
                  let {
                    k_s3NwY [Occ=OnceL, Dmd=<L,C(U)>]
                      :: () -> Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
                        [lvl116_s3Nwj] \r [a3_s3NwZ] lvl116_s3Nwj; } in
                  let {
                    sat_s3Nx1 [Occ=Once]
                      :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId] =
                        [k_s3NwY] \r [a_s3Nx0]
                            Text.ParserCombinators.ReadP.skipSpaces2 a_s3Nx0 k_s3NwY;
                  } in  Text.ParserCombinators.ReadP.Look [sat_s3Nx1];
        } in  GHC.Read.list3 sat_s3Nx2 eta_s3Nwf eta1_s3Nwg;

GHC.Read.$fReadDouble_$sreadNumber
  :: (Text.Read.Lex.Lexeme
      -> Text.ParserCombinators.ReadPrec.ReadPrec GHC.Types.Double)
     -> Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Types.Double -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=3, Str=<L,C(C1(C1(U)))><L,U><L,U>, Unf=OtherCon []] =
    [] \r [convert_s3Nx3 eta_s3Nx4 eta1_s3Nx5]
        let {
          sat_s3NxR [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec GHC.Types.Double
          [LclId] =
              [convert_s3Nx3] \r [n_s3Nx6 k1_s3Nx7]
                  let {
                    lvl116_s3Nx8 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId] =
                        [convert_s3Nx3 n_s3Nx6 k1_s3Nx7] \u []
                            let {
                              lvl2_s3Nx9 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [convert_s3Nx3 n_s3Nx6 k1_s3Nx7] \u []
                                      let {
                                        lvl3_s3Nxa
                                          :: GHC.Types.Double
                                             -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId, Arity=1, Str=<L,1*U(U)>, Unf=OtherCon []] =
                                            [k1_s3Nx7] \r [a1_s3Nxb]
                                                let {
                                                  sat_s3Nxc [Occ=Once] :: GHC.Types.Double
                                                  [LclId] =
                                                      [a1_s3Nxb] \u []
                                                          GHC.Float.negateDouble a1_s3Nxb;
                                                } in  k1_s3Nx7 sat_s3Nxc; } in
                                      let {
                                        lvl117_s3Nxd [Occ=OnceL]
                                          :: Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            [convert_s3Nx3 n_s3Nx6 lvl3_s3Nxa] \u []
                                                convert_s3Nx3
                                                    Text.Read.Lex.EOF n_s3Nx6 lvl3_s3Nxa; } in
                                      let {
                                        sat_s3Nxm [Occ=Once]
                                          :: Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            [convert_s3Nx3 n_s3Nx6 lvl3_s3Nxa] \u []
                                                let {
                                                  sat_s3Nxl [Occ=Once]
                                                    :: Text.Read.Lex.Lexeme
                                                       -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                                  [LclId] =
                                                      [convert_s3Nx3
                                                       n_s3Nx6
                                                       lvl3_s3Nxa] \r [a1_s3Nxk]
                                                          convert_s3Nx3 a1_s3Nxk n_s3Nx6 lvl3_s3Nxa;
                                                } in  Text.Read.Lex.expect2 sat_s3Nxl; } in
                                      let {
                                        sat_s3Nxi [Occ=OnceL]
                                          :: GHC.Base.String
                                             -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            [lvl117_s3Nxd] \r [a3_s3Nxe]
                                                case a3_s3Nxe of {
                                                  [] -> lvl117_s3Nxd;
                                                  : _ [Occ=Dead] _ [Occ=Dead] ->
                                                      Text.ParserCombinators.ReadP.Fail [];
                                                }; } in
                                      let {
                                        sat_s3Nxj [Occ=Once]
                                          :: Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            CCCS Text.ParserCombinators.ReadP.Look! [sat_s3Nxi];
                                      } in 
                                        Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                            sat_s3Nxj sat_s3Nxm; } in
                            let {
                              k_s3Nxn [Occ=OnceL, Dmd=<L,C(U)>]
                                :: () -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
                                  [lvl2_s3Nx9] \r [a3_s3Nxo] lvl2_s3Nx9; } in
                            let {
                              lvl3_s3Nxp [Occ=OnceL]
                                :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                  [k_s3Nxn] \r [a_s3Nxq]
                                      Text.ParserCombinators.ReadP.skipSpaces2 a_s3Nxq k_s3Nxn; } in
                            let {
                              lvl4_s3Nxr [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Unf=OtherCon []] =
                                  CCCS Text.ParserCombinators.ReadP.Look! [lvl3_s3Nxp]; } in
                            let {
                              w2_s3Nxs
                                :: Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                  [convert_s3Nx3 n_s3Nx6 k1_s3Nx7 lvl4_s3Nxr] \r [a1_s3Nxt]
                                      case a1_s3Nxt of wild_s3Nxu {
                                        __DEFAULT -> convert_s3Nx3 wild_s3Nxu n_s3Nx6 k1_s3Nx7;
                                        Text.Read.Lex.Symbol ds_s3Nxv [Occ=Once!] ->
                                            case ds_s3Nxv of {
                                              [] -> convert_s3Nx3 wild_s3Nxu n_s3Nx6 k1_s3Nx7;
                                              : ds1_s3Nxx [Occ=Once!] ds2_s3Nxy [Occ=Once!] ->
                                                  case ds1_s3Nxx of {
                                                    GHC.Types.C# ds3_s3NxA [Occ=Once!] ->
                                                        case ds3_s3NxA of {
                                                          __DEFAULT ->
                                                              convert_s3Nx3
                                                                  wild_s3Nxu n_s3Nx6 k1_s3Nx7;
                                                          '-'# ->
                                                              case ds2_s3Nxy of {
                                                                [] -> lvl4_s3Nxr;
                                                                : _ [Occ=Dead] _ [Occ=Dead] ->
                                                                    convert_s3Nx3
                                                                        wild_s3Nxu n_s3Nx6 k1_s3Nx7;
                                                              };
                                                        };
                                                  };
                                            };
                                      }; } in
                            let {
                              lvl117_s3NxF [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [w2_s3Nxs] \u [] w2_s3Nxs Text.Read.Lex.EOF; } in
                            let {
                              sat_s3NxM [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [w2_s3Nxs] \u [] Text.Read.Lex.expect2 w2_s3Nxs; } in
                            let {
                              sat_s3NxK [Occ=OnceL]
                                :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [lvl117_s3NxF] \r [a3_s3NxG]
                                      case a3_s3NxG of {
                                        [] -> lvl117_s3NxF;
                                        : _ [Occ=Dead] _ [Occ=Dead] ->
                                            Text.ParserCombinators.ReadP.Fail [];
                                      }; } in
                            let {
                              sat_s3NxL [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  CCCS Text.ParserCombinators.ReadP.Look! [sat_s3NxK];
                            } in 
                              Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                  sat_s3NxL sat_s3NxM; } in
                  let {
                    k_s3NxN [Occ=OnceL, Dmd=<L,C(U)>]
                      :: () -> Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
                        [lvl116_s3Nx8] \r [a3_s3NxO] lvl116_s3Nx8; } in
                  let {
                    sat_s3NxQ [Occ=Once]
                      :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId] =
                        [k_s3NxN] \r [a_s3NxP]
                            Text.ParserCombinators.ReadP.skipSpaces2 a_s3NxP k_s3NxN;
                  } in  Text.ParserCombinators.ReadP.Look [sat_s3NxQ];
        } in  GHC.Read.list3 sat_s3NxR eta_s3Nx4 eta1_s3Nx5;

GHC.Read.$fReadFloat_$sreadNumber
  :: (Text.Read.Lex.Lexeme
      -> Text.ParserCombinators.ReadPrec.ReadPrec GHC.Types.Float)
     -> Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Types.Float -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=3, Str=<L,C(C1(C1(U)))><L,U><L,U>, Unf=OtherCon []] =
    [] \r [convert_s3NxS eta_s3NxT eta1_s3NxU]
        let {
          sat_s3NyG [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec GHC.Types.Float
          [LclId] =
              [convert_s3NxS] \r [n_s3NxV k1_s3NxW]
                  let {
                    lvl116_s3NxX [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId] =
                        [convert_s3NxS n_s3NxV k1_s3NxW] \u []
                            let {
                              lvl2_s3NxY [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [convert_s3NxS n_s3NxV k1_s3NxW] \u []
                                      let {
                                        lvl3_s3NxZ
                                          :: GHC.Types.Float
                                             -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId, Arity=1, Str=<L,1*U(U)>, Unf=OtherCon []] =
                                            [k1_s3NxW] \r [a1_s3Ny0]
                                                let {
                                                  sat_s3Ny1 [Occ=Once] :: GHC.Types.Float
                                                  [LclId] =
                                                      [a1_s3Ny0] \u []
                                                          GHC.Float.negateFloat a1_s3Ny0;
                                                } in  k1_s3NxW sat_s3Ny1; } in
                                      let {
                                        lvl117_s3Ny2 [Occ=OnceL]
                                          :: Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            [convert_s3NxS n_s3NxV lvl3_s3NxZ] \u []
                                                convert_s3NxS
                                                    Text.Read.Lex.EOF n_s3NxV lvl3_s3NxZ; } in
                                      let {
                                        sat_s3Nyb [Occ=Once]
                                          :: Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            [convert_s3NxS n_s3NxV lvl3_s3NxZ] \u []
                                                let {
                                                  sat_s3Nya [Occ=Once]
                                                    :: Text.Read.Lex.Lexeme
                                                       -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                                  [LclId] =
                                                      [convert_s3NxS
                                                       n_s3NxV
                                                       lvl3_s3NxZ] \r [a1_s3Ny9]
                                                          convert_s3NxS a1_s3Ny9 n_s3NxV lvl3_s3NxZ;
                                                } in  Text.Read.Lex.expect2 sat_s3Nya; } in
                                      let {
                                        sat_s3Ny7 [Occ=OnceL]
                                          :: GHC.Base.String
                                             -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            [lvl117_s3Ny2] \r [a3_s3Ny3]
                                                case a3_s3Ny3 of {
                                                  [] -> lvl117_s3Ny2;
                                                  : _ [Occ=Dead] _ [Occ=Dead] ->
                                                      Text.ParserCombinators.ReadP.Fail [];
                                                }; } in
                                      let {
                                        sat_s3Ny8 [Occ=Once]
                                          :: Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            CCCS Text.ParserCombinators.ReadP.Look! [sat_s3Ny7];
                                      } in 
                                        Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                            sat_s3Ny8 sat_s3Nyb; } in
                            let {
                              k_s3Nyc [Occ=OnceL, Dmd=<L,C(U)>]
                                :: () -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
                                  [lvl2_s3NxY] \r [a3_s3Nyd] lvl2_s3NxY; } in
                            let {
                              lvl3_s3Nye [Occ=OnceL]
                                :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                  [k_s3Nyc] \r [a_s3Nyf]
                                      Text.ParserCombinators.ReadP.skipSpaces2 a_s3Nyf k_s3Nyc; } in
                            let {
                              lvl4_s3Nyg [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Unf=OtherCon []] =
                                  CCCS Text.ParserCombinators.ReadP.Look! [lvl3_s3Nye]; } in
                            let {
                              w2_s3Nyh
                                :: Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                  [convert_s3NxS n_s3NxV k1_s3NxW lvl4_s3Nyg] \r [a1_s3Nyi]
                                      case a1_s3Nyi of wild_s3Nyj {
                                        __DEFAULT -> convert_s3NxS wild_s3Nyj n_s3NxV k1_s3NxW;
                                        Text.Read.Lex.Symbol ds_s3Nyk [Occ=Once!] ->
                                            case ds_s3Nyk of {
                                              [] -> convert_s3NxS wild_s3Nyj n_s3NxV k1_s3NxW;
                                              : ds1_s3Nym [Occ=Once!] ds2_s3Nyn [Occ=Once!] ->
                                                  case ds1_s3Nym of {
                                                    GHC.Types.C# ds3_s3Nyp [Occ=Once!] ->
                                                        case ds3_s3Nyp of {
                                                          __DEFAULT ->
                                                              convert_s3NxS
                                                                  wild_s3Nyj n_s3NxV k1_s3NxW;
                                                          '-'# ->
                                                              case ds2_s3Nyn of {
                                                                [] -> lvl4_s3Nyg;
                                                                : _ [Occ=Dead] _ [Occ=Dead] ->
                                                                    convert_s3NxS
                                                                        wild_s3Nyj n_s3NxV k1_s3NxW;
                                                              };
                                                        };
                                                  };
                                            };
                                      }; } in
                            let {
                              lvl117_s3Nyu [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [w2_s3Nyh] \u [] w2_s3Nyh Text.Read.Lex.EOF; } in
                            let {
                              sat_s3NyB [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [w2_s3Nyh] \u [] Text.Read.Lex.expect2 w2_s3Nyh; } in
                            let {
                              sat_s3Nyz [Occ=OnceL]
                                :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [lvl117_s3Nyu] \r [a3_s3Nyv]
                                      case a3_s3Nyv of {
                                        [] -> lvl117_s3Nyu;
                                        : _ [Occ=Dead] _ [Occ=Dead] ->
                                            Text.ParserCombinators.ReadP.Fail [];
                                      }; } in
                            let {
                              sat_s3NyA [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  CCCS Text.ParserCombinators.ReadP.Look! [sat_s3Nyz];
                            } in 
                              Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                  sat_s3NyA sat_s3NyB; } in
                  let {
                    k_s3NyC [Occ=OnceL, Dmd=<L,C(U)>]
                      :: () -> Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
                        [lvl116_s3NxX] \r [a3_s3NyD] lvl116_s3NxX; } in
                  let {
                    sat_s3NyF [Occ=Once]
                      :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId] =
                        [k_s3NyC] \r [a_s3NyE]
                            Text.ParserCombinators.ReadP.skipSpaces2 a_s3NyE k_s3NyC;
                  } in  Text.ParserCombinators.ReadP.Look [sat_s3NyF];
        } in  GHC.Read.list3 sat_s3NyG eta_s3NxT eta1_s3NxU;

GHC.Read.$fReadInt_$sreadNumber
  :: (Text.Read.Lex.Lexeme
      -> Text.ParserCombinators.ReadPrec.ReadPrec GHC.Types.Int)
     -> Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Types.Int -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=3, Str=<L,C(C1(C1(U)))><L,U><L,U>, Unf=OtherCon []] =
    [] \r [convert_s3NyH eta_s3NyI eta1_s3NyJ]
        let {
          sat_s3Nzv [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec GHC.Types.Int
          [LclId] =
              [convert_s3NyH] \r [n_s3NyK k1_s3NyL]
                  let {
                    lvl116_s3NyM [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId] =
                        [convert_s3NyH n_s3NyK k1_s3NyL] \u []
                            let {
                              lvl2_s3NyN [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [convert_s3NyH n_s3NyK k1_s3NyL] \u []
                                      let {
                                        lvl3_s3NyO
                                          :: GHC.Types.Int
                                             -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId, Arity=1, Str=<L,1*U(U)>, Unf=OtherCon []] =
                                            [k1_s3NyL] \r [a1_s3NyP]
                                                let {
                                                  sat_s3NyQ [Occ=Once] :: GHC.Types.Int
                                                  [LclId] =
                                                      [a1_s3NyP] \u []
                                                          GHC.Num.$fNumInt_$cnegate a1_s3NyP;
                                                } in  k1_s3NyL sat_s3NyQ; } in
                                      let {
                                        lvl117_s3NyR [Occ=OnceL]
                                          :: Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            [convert_s3NyH n_s3NyK lvl3_s3NyO] \u []
                                                convert_s3NyH
                                                    Text.Read.Lex.EOF n_s3NyK lvl3_s3NyO; } in
                                      let {
                                        sat_s3Nz0 [Occ=Once]
                                          :: Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            [convert_s3NyH n_s3NyK lvl3_s3NyO] \u []
                                                let {
                                                  sat_s3NyZ [Occ=Once]
                                                    :: Text.Read.Lex.Lexeme
                                                       -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                                  [LclId] =
                                                      [convert_s3NyH
                                                       n_s3NyK
                                                       lvl3_s3NyO] \r [a1_s3NyY]
                                                          convert_s3NyH a1_s3NyY n_s3NyK lvl3_s3NyO;
                                                } in  Text.Read.Lex.expect2 sat_s3NyZ; } in
                                      let {
                                        sat_s3NyW [Occ=OnceL]
                                          :: GHC.Base.String
                                             -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            [lvl117_s3NyR] \r [a3_s3NyS]
                                                case a3_s3NyS of {
                                                  [] -> lvl117_s3NyR;
                                                  : _ [Occ=Dead] _ [Occ=Dead] ->
                                                      Text.ParserCombinators.ReadP.Fail [];
                                                }; } in
                                      let {
                                        sat_s3NyX [Occ=Once]
                                          :: Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            CCCS Text.ParserCombinators.ReadP.Look! [sat_s3NyW];
                                      } in 
                                        Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                            sat_s3NyX sat_s3Nz0; } in
                            let {
                              k_s3Nz1 [Occ=OnceL, Dmd=<L,C(U)>]
                                :: () -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
                                  [lvl2_s3NyN] \r [a3_s3Nz2] lvl2_s3NyN; } in
                            let {
                              lvl3_s3Nz3 [Occ=OnceL]
                                :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                  [k_s3Nz1] \r [a_s3Nz4]
                                      Text.ParserCombinators.ReadP.skipSpaces2 a_s3Nz4 k_s3Nz1; } in
                            let {
                              lvl4_s3Nz5 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Unf=OtherCon []] =
                                  CCCS Text.ParserCombinators.ReadP.Look! [lvl3_s3Nz3]; } in
                            let {
                              w2_s3Nz6
                                :: Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                  [convert_s3NyH n_s3NyK k1_s3NyL lvl4_s3Nz5] \r [a1_s3Nz7]
                                      case a1_s3Nz7 of wild_s3Nz8 {
                                        __DEFAULT -> convert_s3NyH wild_s3Nz8 n_s3NyK k1_s3NyL;
                                        Text.Read.Lex.Symbol ds_s3Nz9 [Occ=Once!] ->
                                            case ds_s3Nz9 of {
                                              [] -> convert_s3NyH wild_s3Nz8 n_s3NyK k1_s3NyL;
                                              : ds1_s3Nzb [Occ=Once!] ds2_s3Nzc [Occ=Once!] ->
                                                  case ds1_s3Nzb of {
                                                    GHC.Types.C# ds3_s3Nze [Occ=Once!] ->
                                                        case ds3_s3Nze of {
                                                          __DEFAULT ->
                                                              convert_s3NyH
                                                                  wild_s3Nz8 n_s3NyK k1_s3NyL;
                                                          '-'# ->
                                                              case ds2_s3Nzc of {
                                                                [] -> lvl4_s3Nz5;
                                                                : _ [Occ=Dead] _ [Occ=Dead] ->
                                                                    convert_s3NyH
                                                                        wild_s3Nz8 n_s3NyK k1_s3NyL;
                                                              };
                                                        };
                                                  };
                                            };
                                      }; } in
                            let {
                              lvl117_s3Nzj [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [w2_s3Nz6] \u [] w2_s3Nz6 Text.Read.Lex.EOF; } in
                            let {
                              sat_s3Nzq [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [w2_s3Nz6] \u [] Text.Read.Lex.expect2 w2_s3Nz6; } in
                            let {
                              sat_s3Nzo [Occ=OnceL]
                                :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [lvl117_s3Nzj] \r [a3_s3Nzk]
                                      case a3_s3Nzk of {
                                        [] -> lvl117_s3Nzj;
                                        : _ [Occ=Dead] _ [Occ=Dead] ->
                                            Text.ParserCombinators.ReadP.Fail [];
                                      }; } in
                            let {
                              sat_s3Nzp [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  CCCS Text.ParserCombinators.ReadP.Look! [sat_s3Nzo];
                            } in 
                              Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                  sat_s3Nzp sat_s3Nzq; } in
                  let {
                    k_s3Nzr [Occ=OnceL, Dmd=<L,C(U)>]
                      :: () -> Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
                        [lvl116_s3NyM] \r [a3_s3Nzs] lvl116_s3NyM; } in
                  let {
                    sat_s3Nzu [Occ=Once]
                      :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId] =
                        [k_s3Nzr] \r [a_s3Nzt]
                            Text.ParserCombinators.ReadP.skipSpaces2 a_s3Nzt k_s3Nzr;
                  } in  Text.ParserCombinators.ReadP.Look [sat_s3Nzu];
        } in  GHC.Read.list3 sat_s3Nzv eta_s3NyI eta1_s3NyJ;

GHC.Read.readNumber1
  :: forall a.
     GHC.Num.Num a =>
     (Text.Read.Lex.Lexeme
      -> Text.ParserCombinators.ReadPrec.ReadPrec a)
     -> Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=4,
 Str=<L,U(A,A,A,C(U),A,A,A)><L,C(C1(C1(U)))><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dNum_s3Nzw convert_s3Nzx eta_s3Nzy eta1_s3Nzz]
        let {
          sat_s3NAl [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec a_a3Kr6
          [LclId] =
              [$dNum_s3Nzw convert_s3Nzx] \r [n_s3NzA k1_s3NzB]
                  let {
                    lvl116_s3NzC [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId] =
                        [$dNum_s3Nzw convert_s3Nzx n_s3NzA k1_s3NzB] \u []
                            let {
                              lvl2_s3NzD [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [$dNum_s3Nzw convert_s3Nzx n_s3NzA k1_s3NzB] \u []
                                      let {
                                        lvl3_s3NzE
                                          :: a_a3Kr6 -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
                                            [$dNum_s3Nzw k1_s3NzB] \r [a1_s3NzF]
                                                let {
                                                  sat_s3NzG [Occ=Once] :: a_a3Kr6
                                                  [LclId] =
                                                      [$dNum_s3Nzw a1_s3NzF] \u []
                                                          GHC.Num.negate $dNum_s3Nzw a1_s3NzF;
                                                } in  k1_s3NzB sat_s3NzG; } in
                                      let {
                                        lvl117_s3NzH [Occ=OnceL]
                                          :: Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            [convert_s3Nzx n_s3NzA lvl3_s3NzE] \u []
                                                convert_s3Nzx
                                                    Text.Read.Lex.EOF n_s3NzA lvl3_s3NzE; } in
                                      let {
                                        sat_s3NzQ [Occ=Once]
                                          :: Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            [convert_s3Nzx n_s3NzA lvl3_s3NzE] \u []
                                                let {
                                                  sat_s3NzP [Occ=Once]
                                                    :: Text.Read.Lex.Lexeme
                                                       -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                                  [LclId] =
                                                      [convert_s3Nzx
                                                       n_s3NzA
                                                       lvl3_s3NzE] \r [a1_s3NzO]
                                                          convert_s3Nzx a1_s3NzO n_s3NzA lvl3_s3NzE;
                                                } in  Text.Read.Lex.expect2 sat_s3NzP; } in
                                      let {
                                        sat_s3NzM [Occ=OnceL]
                                          :: GHC.Base.String
                                             -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            [lvl117_s3NzH] \r [a3_s3NzI]
                                                case a3_s3NzI of {
                                                  [] -> lvl117_s3NzH;
                                                  : _ [Occ=Dead] _ [Occ=Dead] ->
                                                      Text.ParserCombinators.ReadP.Fail [];
                                                }; } in
                                      let {
                                        sat_s3NzN [Occ=Once]
                                          :: Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            CCCS Text.ParserCombinators.ReadP.Look! [sat_s3NzM];
                                      } in 
                                        Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                            sat_s3NzN sat_s3NzQ; } in
                            let {
                              k_s3NzR [Occ=OnceL, Dmd=<L,C(U)>]
                                :: () -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
                                  [lvl2_s3NzD] \r [a3_s3NzS] lvl2_s3NzD; } in
                            let {
                              lvl3_s3NzT [Occ=OnceL]
                                :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                  [k_s3NzR] \r [a1_s3NzU]
                                      Text.ParserCombinators.ReadP.skipSpaces2
                                          a1_s3NzU k_s3NzR; } in
                            let {
                              lvl4_s3NzV [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Unf=OtherCon []] =
                                  CCCS Text.ParserCombinators.ReadP.Look! [lvl3_s3NzT]; } in
                            let {
                              w2_s3NzW
                                :: Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                  [convert_s3Nzx n_s3NzA k1_s3NzB lvl4_s3NzV] \r [a1_s3NzX]
                                      case a1_s3NzX of wild_s3NzY {
                                        __DEFAULT -> convert_s3Nzx wild_s3NzY n_s3NzA k1_s3NzB;
                                        Text.Read.Lex.Symbol ds_s3NzZ [Occ=Once!] ->
                                            case ds_s3NzZ of {
                                              [] -> convert_s3Nzx wild_s3NzY n_s3NzA k1_s3NzB;
                                              : ds1_s3NA1 [Occ=Once!] ds2_s3NA2 [Occ=Once!] ->
                                                  case ds1_s3NA1 of {
                                                    GHC.Types.C# ds3_s3NA4 [Occ=Once!] ->
                                                        case ds3_s3NA4 of {
                                                          __DEFAULT ->
                                                              convert_s3Nzx
                                                                  wild_s3NzY n_s3NzA k1_s3NzB;
                                                          '-'# ->
                                                              case ds2_s3NA2 of {
                                                                [] -> lvl4_s3NzV;
                                                                : _ [Occ=Dead] _ [Occ=Dead] ->
                                                                    convert_s3Nzx
                                                                        wild_s3NzY n_s3NzA k1_s3NzB;
                                                              };
                                                        };
                                                  };
                                            };
                                      }; } in
                            let {
                              lvl117_s3NA9 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [w2_s3NzW] \u [] w2_s3NzW Text.Read.Lex.EOF; } in
                            let {
                              sat_s3NAg [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [w2_s3NzW] \u [] Text.Read.Lex.expect2 w2_s3NzW; } in
                            let {
                              sat_s3NAe [Occ=OnceL]
                                :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [lvl117_s3NA9] \r [a3_s3NAa]
                                      case a3_s3NAa of {
                                        [] -> lvl117_s3NA9;
                                        : _ [Occ=Dead] _ [Occ=Dead] ->
                                            Text.ParserCombinators.ReadP.Fail [];
                                      }; } in
                            let {
                              sat_s3NAf [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  CCCS Text.ParserCombinators.ReadP.Look! [sat_s3NAe];
                            } in 
                              Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                  sat_s3NAf sat_s3NAg; } in
                  let {
                    k_s3NAh [Occ=OnceL, Dmd=<L,C(U)>]
                      :: () -> Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
                        [lvl116_s3NzC] \r [a3_s3NAi] lvl116_s3NzC; } in
                  let {
                    sat_s3NAk [Occ=Once]
                      :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId] =
                        [k_s3NAh] \r [a1_s3NAj]
                            Text.ParserCombinators.ReadP.skipSpaces2 a1_s3NAj k_s3NAh;
                  } in  Text.ParserCombinators.ReadP.Look [sat_s3NAk];
        } in  GHC.Read.list3 sat_s3NAl eta_s3Nzy eta1_s3Nzz;

GHC.Read.readNumber
  :: forall a.
     GHC.Num.Num a =>
     (Text.Read.Lex.Lexeme
      -> Text.ParserCombinators.ReadPrec.ReadPrec a)
     -> Text.ParserCombinators.ReadPrec.ReadPrec a
[GblId,
 Arity=4,
 Str=<L,U(A,A,A,C(U),A,A,A)><L,C(C1(C1(U)))><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.Read.readNumber1 eta_B4 eta_B3 eta_B2 eta_B1;

GHC.Read.$fReadGeneralCategory152 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "UppercaseLetter"#;

GHC.Read.$fReadGeneralCategory151 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory152;

GHC.Read.$fReadGeneralCategory150
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3NAm k_s3NAn] k_s3NAn GHC.Unicode.UppercaseLetter;

GHC.Read.$fReadGeneralCategory149
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory151
                        GHC.Read.$fReadGeneralCategory150];

GHC.Read.$fReadGeneralCategory148 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "LowercaseLetter"#;

GHC.Read.$fReadGeneralCategory147 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory148;

GHC.Read.$fReadGeneralCategory146
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3NAo k_s3NAp] k_s3NAp GHC.Unicode.LowercaseLetter;

GHC.Read.$fReadGeneralCategory145
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory147
                        GHC.Read.$fReadGeneralCategory146];

GHC.Read.$fReadGeneralCategory144 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "TitlecaseLetter"#;

GHC.Read.$fReadGeneralCategory143 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory144;

GHC.Read.$fReadGeneralCategory142
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3NAq k_s3NAr] k_s3NAr GHC.Unicode.TitlecaseLetter;

GHC.Read.$fReadGeneralCategory141
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory143
                        GHC.Read.$fReadGeneralCategory142];

GHC.Read.$fReadGeneralCategory140 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ModifierLetter"#;

GHC.Read.$fReadGeneralCategory139 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory140;

GHC.Read.$fReadGeneralCategory138
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3NAs k_s3NAt] k_s3NAt GHC.Unicode.ModifierLetter;

GHC.Read.$fReadGeneralCategory137
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory139
                        GHC.Read.$fReadGeneralCategory138];

GHC.Read.$fReadGeneralCategory136 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "OtherLetter"#;

GHC.Read.$fReadGeneralCategory135 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory136;

GHC.Read.$fReadGeneralCategory134
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3NAu k_s3NAv] k_s3NAv GHC.Unicode.OtherLetter;

GHC.Read.$fReadGeneralCategory133
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory135
                        GHC.Read.$fReadGeneralCategory134];

GHC.Read.$fReadGeneralCategory132 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "NonSpacingMark"#;

GHC.Read.$fReadGeneralCategory131 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory132;

GHC.Read.$fReadGeneralCategory130
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3NAw k_s3NAx] k_s3NAx GHC.Unicode.NonSpacingMark;

GHC.Read.$fReadGeneralCategory129
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory131
                        GHC.Read.$fReadGeneralCategory130];

GHC.Read.$fReadGeneralCategory128 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SpacingCombiningMark"#;

GHC.Read.$fReadGeneralCategory127 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory128;

GHC.Read.$fReadGeneralCategory126
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3NAy k_s3NAz] k_s3NAz GHC.Unicode.SpacingCombiningMark;

GHC.Read.$fReadGeneralCategory125
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory127
                        GHC.Read.$fReadGeneralCategory126];

GHC.Read.$fReadGeneralCategory124 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "EnclosingMark"#;

GHC.Read.$fReadGeneralCategory123 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory124;

GHC.Read.$fReadGeneralCategory122
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3NAA k_s3NAB] k_s3NAB GHC.Unicode.EnclosingMark;

GHC.Read.$fReadGeneralCategory121
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory123
                        GHC.Read.$fReadGeneralCategory122];

GHC.Read.$fReadGeneralCategory120 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "DecimalNumber"#;

GHC.Read.$fReadGeneralCategory119 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory120;

GHC.Read.$fReadGeneralCategory118
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3NAC k_s3NAD] k_s3NAD GHC.Unicode.DecimalNumber;

GHC.Read.$fReadGeneralCategory117
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory119
                        GHC.Read.$fReadGeneralCategory118];

GHC.Read.$fReadGeneralCategory116 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "LetterNumber"#;

GHC.Read.$fReadGeneralCategory115 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory116;

GHC.Read.$fReadGeneralCategory114
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3NAE k_s3NAF] k_s3NAF GHC.Unicode.LetterNumber;

GHC.Read.$fReadGeneralCategory113
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory115
                        GHC.Read.$fReadGeneralCategory114];

GHC.Read.$fReadGeneralCategory112 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "OtherNumber"#;

GHC.Read.$fReadGeneralCategory111 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory112;

GHC.Read.$fReadGeneralCategory110
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3NAG k_s3NAH] k_s3NAH GHC.Unicode.OtherNumber;

GHC.Read.$fReadGeneralCategory109
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory111
                        GHC.Read.$fReadGeneralCategory110];

GHC.Read.$fReadGeneralCategory108 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ConnectorPunctuation"#;

GHC.Read.$fReadGeneralCategory107 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory108;

GHC.Read.$fReadGeneralCategory106
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3NAI k_s3NAJ] k_s3NAJ GHC.Unicode.ConnectorPunctuation;

GHC.Read.$fReadGeneralCategory105
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory107
                        GHC.Read.$fReadGeneralCategory106];

GHC.Read.$fReadGeneralCategory104 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "DashPunctuation"#;

GHC.Read.$fReadGeneralCategory103 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory104;

GHC.Read.$fReadGeneralCategory102
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3NAK k_s3NAL] k_s3NAL GHC.Unicode.DashPunctuation;

GHC.Read.$fReadGeneralCategory101
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory103
                        GHC.Read.$fReadGeneralCategory102];

GHC.Read.$fReadGeneralCategory100 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "OpenPunctuation"#;

GHC.Read.$fReadGeneralCategory99 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory100;

GHC.Read.$fReadGeneralCategory98
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3NAM k_s3NAN] k_s3NAN GHC.Unicode.OpenPunctuation;

GHC.Read.$fReadGeneralCategory97
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory99
                        GHC.Read.$fReadGeneralCategory98];

GHC.Read.$fReadGeneralCategory96 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ClosePunctuation"#;

GHC.Read.$fReadGeneralCategory95 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory96;

GHC.Read.$fReadGeneralCategory94
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3NAO k_s3NAP] k_s3NAP GHC.Unicode.ClosePunctuation;

GHC.Read.$fReadGeneralCategory93
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory95
                        GHC.Read.$fReadGeneralCategory94];

GHC.Read.$fReadGeneralCategory92 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "InitialQuote"#;

GHC.Read.$fReadGeneralCategory91 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory92;

GHC.Read.$fReadGeneralCategory90
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3NAQ k_s3NAR] k_s3NAR GHC.Unicode.InitialQuote;

GHC.Read.$fReadGeneralCategory89
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory91
                        GHC.Read.$fReadGeneralCategory90];

GHC.Read.$fReadGeneralCategory88 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "FinalQuote"#;

GHC.Read.$fReadGeneralCategory87 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory88;

GHC.Read.$fReadGeneralCategory86
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3NAS k_s3NAT] k_s3NAT GHC.Unicode.FinalQuote;

GHC.Read.$fReadGeneralCategory85
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory87
                        GHC.Read.$fReadGeneralCategory86];

GHC.Read.$fReadGeneralCategory84 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "OtherPunctuation"#;

GHC.Read.$fReadGeneralCategory83 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory84;

GHC.Read.$fReadGeneralCategory82
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3NAU k_s3NAV] k_s3NAV GHC.Unicode.OtherPunctuation;

GHC.Read.$fReadGeneralCategory81
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory83
                        GHC.Read.$fReadGeneralCategory82];

GHC.Read.$fReadGeneralCategory80 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "MathSymbol"#;

GHC.Read.$fReadGeneralCategory79 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory80;

GHC.Read.$fReadGeneralCategory78
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3NAW k_s3NAX] k_s3NAX GHC.Unicode.MathSymbol;

GHC.Read.$fReadGeneralCategory77
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory79
                        GHC.Read.$fReadGeneralCategory78];

GHC.Read.$fReadGeneralCategory76 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "CurrencySymbol"#;

GHC.Read.$fReadGeneralCategory75 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory76;

GHC.Read.$fReadGeneralCategory74
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3NAY k_s3NAZ] k_s3NAZ GHC.Unicode.CurrencySymbol;

GHC.Read.$fReadGeneralCategory73
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory75
                        GHC.Read.$fReadGeneralCategory74];

GHC.Read.$fReadGeneralCategory72 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ModifierSymbol"#;

GHC.Read.$fReadGeneralCategory71 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory72;

GHC.Read.$fReadGeneralCategory70
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3NB0 k_s3NB1] k_s3NB1 GHC.Unicode.ModifierSymbol;

GHC.Read.$fReadGeneralCategory69
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory71
                        GHC.Read.$fReadGeneralCategory70];

GHC.Read.$fReadGeneralCategory68 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "OtherSymbol"#;

GHC.Read.$fReadGeneralCategory67 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory68;

GHC.Read.$fReadGeneralCategory66
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3NB2 k_s3NB3] k_s3NB3 GHC.Unicode.OtherSymbol;

GHC.Read.$fReadGeneralCategory65
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory67
                        GHC.Read.$fReadGeneralCategory66];

GHC.Read.$fReadGeneralCategory64 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Space"#;

GHC.Read.$fReadGeneralCategory63 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory64;

GHC.Read.$fReadGeneralCategory62
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3NB4 k_s3NB5] k_s3NB5 GHC.Unicode.Space;

GHC.Read.$fReadGeneralCategory61
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory63
                        GHC.Read.$fReadGeneralCategory62];

GHC.Read.$fReadGeneralCategory60 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "LineSeparator"#;

GHC.Read.$fReadGeneralCategory59 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory60;

GHC.Read.$fReadGeneralCategory58
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3NB6 k_s3NB7] k_s3NB7 GHC.Unicode.LineSeparator;

GHC.Read.$fReadGeneralCategory57
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory59
                        GHC.Read.$fReadGeneralCategory58];

GHC.Read.$fReadGeneralCategory56 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ParagraphSeparator"#;

GHC.Read.$fReadGeneralCategory55 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory56;

GHC.Read.$fReadGeneralCategory54
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3NB8 k_s3NB9] k_s3NB9 GHC.Unicode.ParagraphSeparator;

GHC.Read.$fReadGeneralCategory53
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory55
                        GHC.Read.$fReadGeneralCategory54];

GHC.Read.$fReadGeneralCategory52 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Control"#;

GHC.Read.$fReadGeneralCategory51 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory52;

GHC.Read.$fReadGeneralCategory50
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3NBa k_s3NBb] k_s3NBb GHC.Unicode.Control;

GHC.Read.$fReadGeneralCategory49
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory51
                        GHC.Read.$fReadGeneralCategory50];

GHC.Read.$fReadGeneralCategory48 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Format"#;

GHC.Read.$fReadGeneralCategory47 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory48;

GHC.Read.$fReadGeneralCategory46
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3NBc k_s3NBd] k_s3NBd GHC.Unicode.Format;

GHC.Read.$fReadGeneralCategory45
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory47
                        GHC.Read.$fReadGeneralCategory46];

GHC.Read.$fReadGeneralCategory44 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Surrogate"#;

GHC.Read.$fReadGeneralCategory43 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory44;

GHC.Read.$fReadGeneralCategory42
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3NBe k_s3NBf] k_s3NBf GHC.Unicode.Surrogate;

GHC.Read.$fReadGeneralCategory41
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory43
                        GHC.Read.$fReadGeneralCategory42];

GHC.Read.$fReadGeneralCategory40 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "PrivateUse"#;

GHC.Read.$fReadGeneralCategory39 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory40;

GHC.Read.$fReadGeneralCategory38
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3NBg k_s3NBh] k_s3NBh GHC.Unicode.PrivateUse;

GHC.Read.$fReadGeneralCategory37
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory39
                        GHC.Read.$fReadGeneralCategory38];

GHC.Read.$fReadGeneralCategory35 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "NotAssigned"#;

GHC.Read.$fReadGeneralCategory34 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory35;

GHC.Read.$fReadGeneralCategory33
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3NBi k_s3NBj] k_s3NBj GHC.Unicode.NotAssigned;

GHC.Read.$fReadGeneralCategory32
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory34
                        GHC.Read.$fReadGeneralCategory33];

GHC.Read.$fReadGeneralCategory31
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory32
            Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4
            eta_B1;

GHC.Read.$fReadGeneralCategory30
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory37
            GHC.Read.$fReadGeneralCategory31
            eta_B1;

GHC.Read.$fReadGeneralCategory29
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory41
            GHC.Read.$fReadGeneralCategory30
            eta_B1;

GHC.Read.$fReadGeneralCategory28
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory45
            GHC.Read.$fReadGeneralCategory29
            eta_B1;

GHC.Read.$fReadGeneralCategory27
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory49
            GHC.Read.$fReadGeneralCategory28
            eta_B1;

GHC.Read.$fReadGeneralCategory26
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory53
            GHC.Read.$fReadGeneralCategory27
            eta_B1;

GHC.Read.$fReadGeneralCategory25
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory57
            GHC.Read.$fReadGeneralCategory26
            eta_B1;

GHC.Read.$fReadGeneralCategory24
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory61
            GHC.Read.$fReadGeneralCategory25
            eta_B1;

GHC.Read.$fReadGeneralCategory23
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory65
            GHC.Read.$fReadGeneralCategory24
            eta_B1;

GHC.Read.$fReadGeneralCategory22
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory69
            GHC.Read.$fReadGeneralCategory23
            eta_B1;

GHC.Read.$fReadGeneralCategory21
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory73
            GHC.Read.$fReadGeneralCategory22
            eta_B1;

GHC.Read.$fReadGeneralCategory20
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory77
            GHC.Read.$fReadGeneralCategory21
            eta_B1;

GHC.Read.$fReadGeneralCategory19
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory81
            GHC.Read.$fReadGeneralCategory20
            eta_B1;

GHC.Read.$fReadGeneralCategory18
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory85
            GHC.Read.$fReadGeneralCategory19
            eta_B1;

GHC.Read.$fReadGeneralCategory17
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory89
            GHC.Read.$fReadGeneralCategory18
            eta_B1;

GHC.Read.$fReadGeneralCategory16
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory93
            GHC.Read.$fReadGeneralCategory17
            eta_B1;

GHC.Read.$fReadGeneralCategory15
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory97
            GHC.Read.$fReadGeneralCategory16
            eta_B1;

GHC.Read.$fReadGeneralCategory14
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory101
            GHC.Read.$fReadGeneralCategory15
            eta_B1;

GHC.Read.$fReadGeneralCategory13
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory105
            GHC.Read.$fReadGeneralCategory14
            eta_B1;

GHC.Read.$fReadGeneralCategory12
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory109
            GHC.Read.$fReadGeneralCategory13
            eta_B1;

GHC.Read.$fReadGeneralCategory11
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory113
            GHC.Read.$fReadGeneralCategory12
            eta_B1;

GHC.Read.$fReadGeneralCategory10
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory117
            GHC.Read.$fReadGeneralCategory11
            eta_B1;

GHC.Read.$fReadGeneralCategory9
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory121
            GHC.Read.$fReadGeneralCategory10
            eta_B1;

GHC.Read.$fReadGeneralCategory8
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory125
            GHC.Read.$fReadGeneralCategory9
            eta_B1;

GHC.Read.$fReadGeneralCategory7
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory129
            GHC.Read.$fReadGeneralCategory8
            eta_B1;

GHC.Read.$fReadGeneralCategory6
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory133
            GHC.Read.$fReadGeneralCategory7
            eta_B1;

GHC.Read.$fReadGeneralCategory5
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory137
            GHC.Read.$fReadGeneralCategory6
            eta_B1;

GHC.Read.$fReadGeneralCategory4
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory141
            GHC.Read.$fReadGeneralCategory5
            eta_B1;

GHC.Read.$fReadGeneralCategory3
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory145
            GHC.Read.$fReadGeneralCategory4
            eta_B1;

GHC.Read.$fReadGeneralCategory2
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory149
            GHC.Read.$fReadGeneralCategory3
            eta_B1;

GHC.Read.$fReadGeneralCategory1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Read.list3 GHC.Read.$fReadGeneralCategory2 eta_B2 eta_B1;

GHC.Read.$fReadGeneralCategory_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.Unicode.GeneralCategory
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s3NBk]
        let {
          sat_s3NBl [Occ=Once]
            :: Text.ParserCombinators.ReadP.P GHC.Unicode.GeneralCategory
          [LclId] =
              [n_s3NBk] \u []
                  GHC.Read.list3
                      GHC.Read.$fReadGeneralCategory2
                      n_s3NBk
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NBl;

GHC.Read.$fReadGeneralCategory_$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec
       [GHC.Unicode.GeneralCategory]
[GblId] =
    [] \u [] GHC.Read.list GHC.Read.$fReadGeneralCategory1;

GHC.Read.$fReadGeneralCategory153
  :: Text.ParserCombinators.ReadP.P [GHC.Unicode.GeneralCategory]
[GblId] =
    [] \u []
        GHC.Read.$fReadGeneralCategory_$creadListPrec
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fReadGeneralCategory_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.Unicode.GeneralCategory]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run
            GHC.Read.$fReadGeneralCategory153 eta_B1;

GHC.Read.$fReadGeneralCategory [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.Unicode.GeneralCategory
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fReadGeneralCategory_$creadsPrec
                                    GHC.Read.$fReadGeneralCategory_$creadList
                                    GHC.Read.$fReadGeneralCategory1
                                    GHC.Read.$fReadGeneralCategory_$creadListPrec];

GHC.Read.$fRead()4
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (() -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3NBm k_s3NBn] k_s3NBn GHC.Tuple.();

GHC.Read.$fRead()3
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (() -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m1,
 Unf=OtherCon []] =
    [] \r [w_s3NBo w1_s3NBp]
        case GHC.Read.$wparen' GHC.Read.$fRead()4 w_s3NBo w1_s3NBp of {
          Unit# ww1_s3NBr [Occ=Once] ->
              Text.ParserCombinators.ReadP.Get [ww1_s3NBr];
        };

GHC.Read.$fRead()2
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (() -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m2,
 Unf=OtherCon []] =
    [] \r [eta_s3NBs eta1_s3NBt]
        case
            GHC.Read.$wskipSpacesThenP GHC.Read.$fRead()3 eta_s3NBs eta1_s3NBt
        of
        { Unit# ww1_s3NBv [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3NBv];
        };

GHC.Read.$fRead()1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (() -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Read.list3 GHC.Read.$fRead()2 eta_B2 eta_B1;

GHC.Read.$fRead()_$creadsPrec
  :: GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS ()
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s3NBw]
        let {
          sat_s3NBx [Occ=Once] :: Text.ParserCombinators.ReadP.P ()
          [LclId] =
              [n_s3NBw] \u []
                  GHC.Read.list3
                      GHC.Read.$fRead()2
                      n_s3NBw
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NBx;

GHC.Read.$fRead()_$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec [()]
[GblId] =
    [] \u [] GHC.Read.list GHC.Read.$fRead()1;

GHC.Read.$fRead()6 :: Text.ParserCombinators.ReadP.P [()]
[GblId] =
    [] \u []
        GHC.Read.$fRead()_$creadListPrec
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fRead()_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [()]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.$fRead()6 eta_B1;

GHC.Read.$fRead() [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read ()
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fRead()_$creadsPrec
                                    GHC.Read.$fRead()_$creadList
                                    GHC.Read.$fRead()1
                                    GHC.Read.$fRead()_$creadListPrec];

GHC.Read.$fReadRatio5 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [8#];

GHC.Read.$fReadRatio4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "%"#;

GHC.Read.$fReadRatio3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Read.$fReadRatio4;

GHC.Read.$fReadRatio2 :: Text.Read.Lex.Lexeme
[GblId, Str=m5, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Symbol! [GHC.Read.$fReadRatio3];

GHC.Read.$fReadRatio1
  :: forall a.
     (GHC.Real.Integral a, GHC.Read.Read a) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Real.Ratio a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=4,
 Str=<L,U(U(U(A,A,C(C1(U)),A,C(U),C(U),C(U)),U(U(C(C1(U)),A),A,A,A,A,A,A,A),A),A,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,1*U(A,A,1*C1(C(U)),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dIntegral_s3NBy $dRead_s3NBz eta_s3NBA eta1_s3NBB]
        let {
          ds1_s3NBC [Dmd=<L,C(U)>]
            :: Text.ParserCombinators.ReadP.ReadP a_a3KOR
          [LclId] =
              [$dRead_s3NBz] \u []
                  GHC.Read.readPrec $dRead_s3NBz GHC.Read.$fReadRatio5; } in
        let {
          sat_s3NBR [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (GHC.Real.Ratio a_a3KOR)
          [LclId] =
              [$dIntegral_s3NBy ds1_s3NBC] \r [c_s3NBD eta2_s3NBE]
                  case c_s3NBD of {
                    GHC.Types.I# x_s3NBG [Occ=Once] ->
                        case <=# [x_s3NBG 7#] of {
                          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                          1# ->
                              let {
                                sat_s3NBQ [Occ=Once]
                                  :: a_a3KOR -> Text.ParserCombinators.ReadP.P b1_a3ngn
                                [LclId] =
                                    [$dIntegral_s3NBy ds1_s3NBC eta2_s3NBE] \r [a1_s3NBI]
                                        let {
                                          sat_s3NBN [Occ=Once]
                                            :: () -> Text.ParserCombinators.ReadP.P b1_a3ngn
                                          [LclId] =
                                              [$dIntegral_s3NBy
                                               ds1_s3NBC
                                               eta2_s3NBE
                                               a1_s3NBI] \r [a2_s3NBJ]
                                                  let {
                                                    sat_s3NBM [Occ=Once]
                                                      :: a_a3KOR
                                                         -> Text.ParserCombinators.ReadP.P b1_a3ngn
                                                    [LclId] =
                                                        [$dIntegral_s3NBy
                                                         eta2_s3NBE
                                                         a1_s3NBI] \r [a3_s3NBK]
                                                            let {
                                                              sat_s3NBL [Occ=Once]
                                                                :: GHC.Real.Ratio a_a3KOR
                                                              [LclId] =
                                                                  [$dIntegral_s3NBy
                                                                   a1_s3NBI
                                                                   a3_s3NBK] \u []
                                                                      GHC.Real.%
                                                                          $dIntegral_s3NBy
                                                                          a1_s3NBI
                                                                          a3_s3NBK;
                                                            } in  eta2_s3NBE sat_s3NBL;
                                                  } in  ds1_s3NBC sat_s3NBM;
                                        } in 
                                          case
                                              Text.Read.Lex.$wexpect GHC.Read.$fReadRatio2 sat_s3NBN
                                          of
                                          { Unit# ww1_s3NBP [Occ=Once] ->
                                                Text.ParserCombinators.ReadP.Look [ww1_s3NBP];
                                          };
                              } in  ds1_s3NBC sat_s3NBQ;
                        };
                  };
        } in  GHC.Read.list3 sat_s3NBR eta_s3NBA eta1_s3NBB;

GHC.Read.$fReadRatio_$creadsPrec
  :: forall a.
     (GHC.Real.Integral a, GHC.Read.Read a) =>
     GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS (GHC.Real.Ratio a)
[GblId,
 Arity=3,
 Str=<L,U(U(U(A,A,C(C1(U)),A,C(U),C(U),C(U)),U(U(C(C1(U)),A),A,A,A,A,A,A,A),A),A,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,1*U(A,A,1*C1(C(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dIntegral_s3NBS $dRead_s3NBT n_s3NBU]
        let {
          sat_s3NBV [Occ=Once]
            :: Text.ParserCombinators.ReadP.P (GHC.Real.Ratio a_X3L0L)
          [LclId] =
              [$dIntegral_s3NBS $dRead_s3NBT n_s3NBU] \u []
                  GHC.Read.$fReadRatio1
                      $dIntegral_s3NBS
                      $dRead_s3NBT
                      n_s3NBU
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NBV;

GHC.Read.$fReadRatio_$creadListPrec
  :: forall a.
     (GHC.Real.Integral a, GHC.Read.Read a) =>
     Text.ParserCombinators.ReadPrec.ReadPrec [GHC.Real.Ratio a]
[GblId,
 Arity=2,
 Str=<L,U(U(U(A,A,C(C1(U)),A,C(U),C(U),C(U)),U(U(C(C1(U)),A),A,A,A,A,A,A,A),A),A,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U(A,A,C(C(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dIntegral_s3NBW $dRead_s3NBX]
        let {
          sat_s3NBY [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (GHC.Real.Ratio a_X3L0M)
          [LclId] =
              [$dIntegral_s3NBW $dRead_s3NBX] \r [eta_B2 eta_B1]
                  GHC.Read.$fReadRatio1 $dIntegral_s3NBW $dRead_s3NBX eta_B2 eta_B1;
        } in  GHC.Read.list sat_s3NBY;

GHC.Read.$fReadRatio_$creadList
  :: forall a.
     (GHC.Real.Integral a, GHC.Read.Read a) =>
     Text.ParserCombinators.ReadP.ReadS [GHC.Real.Ratio a]
[GblId,
 Arity=2,
 Str=<L,U(U(U(A,A,C(C1(U)),A,C(U),C(U),C(U)),U(U(C(C1(U)),A),A,A,A,A,A,A,A),A),A,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U(A,A,C(C(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dIntegral_s3NBZ $dRead_s3NC0]
        let {
          sat_s3NC2 [Occ=Once]
            :: Text.ParserCombinators.ReadP.P [GHC.Real.Ratio a_X3L0N]
          [LclId] =
              [$dIntegral_s3NBZ $dRead_s3NC0] \u []
                  let {
                    sat_s3NC1 [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec
                           (GHC.Real.Ratio a_X3L0N)
                    [LclId] =
                        [$dIntegral_s3NBZ $dRead_s3NC0] \r [eta_B2 eta_B1]
                            GHC.Read.$fReadRatio1 $dIntegral_s3NBZ $dRead_s3NC0 eta_B2 eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s3NC1
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NC2;

GHC.Read.$fReadRatio [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a.
     (GHC.Real.Integral a, GHC.Read.Read a) =>
     GHC.Read.Read (GHC.Real.Ratio a)
[GblId[DFunId],
 Arity=2,
 Str=<L,U(U(U(A,A,C(C1(U)),A,C(U),C(U),C(U)),U(U(C(C1(U)),A),A,A,A,A,A,A,A),A),A,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U(A,A,C(C(U)),A)>m] =
    [] \r [$dIntegral_s3NC3 $dRead_s3NC4]
        let {
          sat_s3NC8 [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 [GHC.Real.Ratio a_X3L0O]
          [LclId] =
              [$dIntegral_s3NC3 $dRead_s3NC4] \u []
                  GHC.Read.$fReadRatio_$creadListPrec
                      $dIntegral_s3NC3 $dRead_s3NC4; } in
        let {
          sat_s3NC7 [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (GHC.Real.Ratio a_X3L0O)
          [LclId] =
              [$dIntegral_s3NC3 $dRead_s3NC4] \r [eta_B2 eta_B1]
                  GHC.Read.$fReadRatio1
                      $dIntegral_s3NC3 $dRead_s3NC4 eta_B2 eta_B1; } in
        let {
          sat_s3NC6 [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS [GHC.Real.Ratio a_X3L0O]
          [LclId] =
              [$dIntegral_s3NC3 $dRead_s3NC4] \u []
                  GHC.Read.$fReadRatio_$creadList $dIntegral_s3NC3 $dRead_s3NC4; } in
        let {
          sat_s3NC5 [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS (GHC.Real.Ratio a_X3L0O)
          [LclId] =
              [$dIntegral_s3NC3 $dRead_s3NC4] \r [eta_B1]
                  GHC.Read.$fReadRatio_$creadsPrec
                      $dIntegral_s3NC3 $dRead_s3NC4 eta_B1;
        } in  GHC.Read.C:Read [sat_s3NC5 sat_s3NC6 sat_s3NC7 sat_s3NC8];

GHC.Read.$fReadMaybe5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Nothing"#;

GHC.Read.$fReadMaybe4 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Read.$fReadMaybe5;

GHC.Read.$fReadMaybe_lexeme1 :: Text.Read.Lex.Lexeme
[GblId, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Ident! [GHC.Read.$fReadMaybe4];

GHC.Read.$fReadMaybe3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Just"#;

GHC.Read.$fReadMaybe2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Read.$fReadMaybe3;

GHC.Read.$fReadMaybe_lexeme :: Text.Read.Lex.Lexeme
[GblId, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Ident! [GHC.Read.$fReadMaybe2];

GHC.Read.$fReadArray2 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [11#];

GHC.Read.$fReadMaybe1
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Base.Maybe a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=3,
 Str=<L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3NC9 eta_s3NCa eta1_s3NCb]
        let {
          sat_s3NCu [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (GHC.Base.Maybe a_a3KVO)
          [LclId] =
              [$dRead_s3NC9] \r [n_s3NCc eta2_s3NCd]
                  let {
                    sat_s3NCf [Occ=Once]
                      :: () -> Text.ParserCombinators.ReadP.P b1_X3nsy
                    [LclId] =
                        [eta2_s3NCd] \r [a1_s3NCe] eta2_s3NCd GHC.Base.Nothing;
                  } in 
                    case
                        Text.Read.Lex.$wexpect GHC.Read.$fReadMaybe_lexeme1 sat_s3NCf
                    of
                    { Unit# ww1_s3NCh [Occ=Once] ->
                          let {
                            sat_s3NCt [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_X3nsy
                            [LclId] =
                                [$dRead_s3NC9 n_s3NCc eta2_s3NCd] \u []
                                    case n_s3NCc of {
                                      GHC.Types.I# x_s3NCk [Occ=Once] ->
                                          case <=# [x_s3NCk 10#] of {
                                            __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                                            1# ->
                                                let {
                                                  sat_s3NCq [Occ=Once]
                                                    :: () -> Text.ParserCombinators.ReadP.P b1_X3nsy
                                                  [LclId] =
                                                      [$dRead_s3NC9 eta2_s3NCd] \r [a1_s3NCm]
                                                          let {
                                                            sat_s3NCp [Occ=Once]
                                                              :: a_a3KVO
                                                                 -> Text.ParserCombinators.ReadP.P
                                                                      b1_X3nsy
                                                            [LclId] =
                                                                [eta2_s3NCd] \r [a2_s3NCn]
                                                                    let {
                                                                      sat_s3NCo [Occ=Once]
                                                                        :: GHC.Base.Maybe a_a3KVO
                                                                      [LclId] =
                                                                          CCCS GHC.Base.Just! [a2_s3NCn];
                                                                    } in  eta2_s3NCd sat_s3NCo;
                                                          } in 
                                                            GHC.Read.readPrec
                                                                $dRead_s3NC9
                                                                GHC.Read.$fReadArray2
                                                                sat_s3NCp;
                                                } in 
                                                  case
                                                      Text.Read.Lex.$wexpect
                                                          GHC.Read.$fReadMaybe_lexeme sat_s3NCq
                                                  of
                                                  { Unit# ww3_s3NCs [Occ=Once] ->
                                                        Text.ParserCombinators.ReadP.Look [ww3_s3NCs];
                                                  };
                                          };
                                    }; } in
                          let {
                            sat_s3NCi [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_X3nsy
                            [LclId] =
                                CCCS Text.ParserCombinators.ReadP.Look! [ww1_s3NCh];
                          } in 
                            Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                sat_s3NCi sat_s3NCt;
                    };
        } in  GHC.Read.list3 sat_s3NCu eta_s3NCa eta1_s3NCb;

GHC.Read.$fReadMaybe_$creadsPrec
  :: forall a.
     GHC.Read.Read a =>
     GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS (GHC.Base.Maybe a)
[GblId, Arity=2, Str=<L,U(A,A,C(C1(U)),A)><L,U>, Unf=OtherCon []] =
    [] \r [$dRead_s3NCv n_s3NCw]
        let {
          sat_s3NCx [Occ=Once]
            :: Text.ParserCombinators.ReadP.P (GHC.Base.Maybe a_X3L7Q)
          [LclId] =
              [$dRead_s3NCv n_s3NCw] \u []
                  GHC.Read.$fReadMaybe1
                      $dRead_s3NCv
                      n_s3NCw
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NCx;

GHC.Read.$fReadMaybe_$creadListPrec
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadPrec.ReadPrec [GHC.Base.Maybe a]
[GblId, Arity=1, Str=<L,U(A,A,C(C1(U)),A)>, Unf=OtherCon []] =
    [] \r [$dRead_s3NCy]
        let {
          sat_s3NCz [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (GHC.Base.Maybe a_X3L7R)
          [LclId] =
              [$dRead_s3NCy] \r [eta_B2 eta_B1]
                  GHC.Read.$fReadMaybe1 $dRead_s3NCy eta_B2 eta_B1;
        } in  GHC.Read.list sat_s3NCz;

GHC.Read.$fReadMaybe_$creadList
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadP.ReadS [GHC.Base.Maybe a]
[GblId, Arity=1, Str=<L,U(A,A,C(C1(U)),A)>, Unf=OtherCon []] =
    [] \r [$dRead_s3NCA]
        let {
          sat_s3NCC [Occ=Once]
            :: Text.ParserCombinators.ReadP.P [GHC.Base.Maybe a_X3L7S]
          [LclId] =
              [$dRead_s3NCA] \u []
                  let {
                    sat_s3NCB [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec
                           (GHC.Base.Maybe a_X3L7S)
                    [LclId] =
                        [$dRead_s3NCA] \r [eta_B2 eta_B1]
                            GHC.Read.$fReadMaybe1 $dRead_s3NCA eta_B2 eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s3NCB
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NCC;

GHC.Read.$fReadMaybe [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Read.Read a => GHC.Read.Read (GHC.Base.Maybe a)
[GblId[DFunId], Arity=1, Str=<L,U(A,A,C(C1(U)),A)>m] =
    [] \r [$dRead_s3NCD]
        let {
          sat_s3NCH [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 [GHC.Base.Maybe a_X3L7T]
          [LclId] =
              [$dRead_s3NCD] \u []
                  GHC.Read.$fReadMaybe_$creadListPrec $dRead_s3NCD; } in
        let {
          sat_s3NCG [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (GHC.Base.Maybe a_X3L7T)
          [LclId] =
              [$dRead_s3NCD] \r [eta_B2 eta_B1]
                  GHC.Read.$fReadMaybe1 $dRead_s3NCD eta_B2 eta_B1; } in
        let {
          sat_s3NCF [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS [GHC.Base.Maybe a_X3L7T]
          [LclId] =
              [$dRead_s3NCD] \u []
                  GHC.Read.$fReadMaybe_$creadList $dRead_s3NCD; } in
        let {
          sat_s3NCE [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS (GHC.Base.Maybe a_X3L7T)
          [LclId] =
              [$dRead_s3NCD] \r [eta_B1]
                  GHC.Read.$fReadMaybe_$creadsPrec $dRead_s3NCD eta_B1;
        } in  GHC.Read.C:Read [sat_s3NCE sat_s3NCF sat_s3NCG sat_s3NCH];

GHC.Read.$fReadOrdering4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "LT"#;

GHC.Read.$fReadOrdering3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Read.$fReadOrdering4;

GHC.Read.$fReadOrdering6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GT"#;

GHC.Read.$fReadOrdering5 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Read.$fReadOrdering6;

GHC.Read.$fReadOrdering8 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "EQ"#;

GHC.Read.$fReadOrdering7 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Read.$fReadOrdering8;

GHC.Read.$w$creadPrec2 [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (GHC.Types.Ordering -> Text.ParserCombinators.ReadP.P b1)
     -> (# GHC.Base.String -> Text.ParserCombinators.ReadP.P b1 #)
[GblId, Arity=1, Str=<L,C(U)>, Unf=OtherCon []] =
    [] \r [w_s3NCI]
        let {
          lvl116_s3NCJ [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3Muw
          [LclId] =
              [w_s3NCI] \u []
                  let {
                    lvl2_s3NCK [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3Muw
                    [LclId] =
                        [w_s3NCI] \u [] w_s3NCI GHC.Types.EQ; } in
                  let {
                    lvl3_s3NCL [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3Muw
                    [LclId] =
                        [w_s3NCI] \u [] w_s3NCI GHC.Types.GT; } in
                  let {
                    lvl4_s3NCM [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3Muw
                    [LclId] =
                        [w_s3NCI] \u [] w_s3NCI GHC.Types.LT; } in
                  let {
                    w2_s3NCN
                      :: Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.P b1_s3Muw
                    [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                        [lvl2_s3NCK lvl3_s3NCL lvl4_s3NCM] \r [a1_s3NCO]
                            case a1_s3NCO of {
                              __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                              Text.Read.Lex.Ident s_s3NCQ ->
                                  case GHC.Base.eqString s_s3NCQ GHC.Read.$fReadOrdering7 of {
                                    GHC.Types.False ->
                                        case GHC.Base.eqString s_s3NCQ GHC.Read.$fReadOrdering5 of {
                                          GHC.Types.False ->
                                              case
                                                  GHC.Base.eqString s_s3NCQ GHC.Read.$fReadOrdering3
                                              of
                                              { GHC.Types.False ->
                                                    Text.ParserCombinators.ReadP.Fail [];
                                                GHC.Types.True -> lvl4_s3NCM;
                                              };
                                          GHC.Types.True -> lvl3_s3NCL;
                                        };
                                    GHC.Types.True -> lvl2_s3NCK;
                                  };
                            }; } in
                  let {
                    lvl117_s3NCU [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3Muw
                    [LclId] =
                        [w2_s3NCN] \u [] w2_s3NCN Text.Read.Lex.EOF; } in
                  let {
                    sat_s3ND1 [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_s3Muw
                    [LclId] =
                        [w2_s3NCN] \u [] Text.Read.Lex.expect2 w2_s3NCN; } in
                  let {
                    sat_s3NCZ [Occ=OnceL]
                      :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3Muw
                    [LclId] =
                        [lvl117_s3NCU] \r [a3_s3NCV]
                            case a3_s3NCV of {
                              [] -> lvl117_s3NCU;
                              : _ [Occ=Dead] _ [Occ=Dead] ->
                                  Text.ParserCombinators.ReadP.Fail [];
                            }; } in
                  let {
                    sat_s3ND0 [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_s3Muw
                    [LclId] =
                        CCCS Text.ParserCombinators.ReadP.Look! [sat_s3NCZ];
                  } in 
                    Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                        sat_s3ND0 sat_s3ND1; } in
        let {
          k_s3ND2 [Occ=OnceL, Dmd=<L,C(U)>]
            :: () -> Text.ParserCombinators.ReadP.P b1_s3Muw
          [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
              [lvl116_s3NCJ] \r [a3_s3ND3] lvl116_s3NCJ; } in
        let {
          sat_s3ND5 [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3Muw
          [LclId] =
              [k_s3ND2] \r [a_s3ND4]
                  Text.ParserCombinators.ReadP.skipSpaces2 a_s3ND4 k_s3ND2;
        } in  Unit# [sat_s3ND5];

GHC.Read.$fReadOrdering2 [InlPrag=NOUSERINLINE[0]]
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        (GHC.Types.Ordering -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=2, Str=<L,A><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [w_s3ND6 w1_s3ND7]
        case GHC.Read.$w$creadPrec2 w1_s3ND7 of {
          Unit# ww1_s3ND9 [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3ND9];
        };

GHC.Read.$fReadOrdering1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Types.Ordering -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Read.list3 GHC.Read.$fReadOrdering2 eta_B2 eta_B1;

GHC.Read.$fReadOrdering_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.Types.Ordering
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s3NDa]
        let {
          sat_s3NDb [Occ=Once]
            :: Text.ParserCombinators.ReadP.P GHC.Types.Ordering
          [LclId] =
              [n_s3NDa] \u []
                  GHC.Read.list3
                      GHC.Read.$fReadOrdering2
                      n_s3NDa
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NDb;

GHC.Read.$fReadOrdering_$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec [GHC.Types.Ordering]
[GblId] =
    [] \u [] GHC.Read.list GHC.Read.$fReadOrdering1;

GHC.Read.$fReadOrdering9
  :: Text.ParserCombinators.ReadP.P [GHC.Types.Ordering]
[GblId] =
    [] \u []
        GHC.Read.$fReadOrdering_$creadListPrec
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fReadOrdering_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.Types.Ordering]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.$fReadOrdering9 eta_B1;

GHC.Read.$fReadOrdering [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.Types.Ordering
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fReadOrdering_$creadsPrec
                                    GHC.Read.$fReadOrdering_$creadList
                                    GHC.Read.$fReadOrdering1
                                    GHC.Read.$fReadOrdering_$creadListPrec];

GHC.Read.$fReadBool4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "True"#;

GHC.Read.$fReadBool3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Read.$fReadBool4;

GHC.Read.$fReadBool6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "False"#;

GHC.Read.$fReadBool5 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Read.$fReadBool6;

GHC.Read.$w$creadPrec [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (GHC.Types.Bool -> Text.ParserCombinators.ReadP.P b1)
     -> (# GHC.Base.String -> Text.ParserCombinators.ReadP.P b1 #)
[GblId, Arity=1, Str=<L,C(U)>, Unf=OtherCon []] =
    [] \r [w_s3NDc]
        let {
          lvl116_s3NDd [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3MuE
          [LclId] =
              [w_s3NDc] \u []
                  let {
                    lvl2_s3NDe [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3MuE
                    [LclId] =
                        [w_s3NDc] \u [] w_s3NDc GHC.Types.False; } in
                  let {
                    lvl3_s3NDf [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3MuE
                    [LclId] =
                        [w_s3NDc] \u [] w_s3NDc GHC.Types.True; } in
                  let {
                    sat_s3NDq [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_s3MuE
                    [LclId] =
                        [lvl2_s3NDe lvl3_s3NDf] \u []
                            let {
                              sat_s3NDp [Occ=Once]
                                :: Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.P b1_s3MuE
                              [LclId] =
                                  [lvl2_s3NDe lvl3_s3NDf] \r [a1_s3NDk]
                                      case a1_s3NDk of {
                                        __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                                        Text.Read.Lex.Ident s_s3NDm ->
                                            case GHC.Base.eqString s_s3NDm GHC.Read.$fReadBool5 of {
                                              GHC.Types.False ->
                                                  case
                                                      GHC.Base.eqString s_s3NDm GHC.Read.$fReadBool3
                                                  of
                                                  { GHC.Types.False ->
                                                        Text.ParserCombinators.ReadP.Fail [];
                                                    GHC.Types.True -> lvl3_s3NDf;
                                                  };
                                              GHC.Types.True -> lvl2_s3NDe;
                                            };
                                      };
                            } in  Text.Read.Lex.expect2 sat_s3NDp; } in
                  let {
                    sat_s3NDi [Occ=OnceL]
                      :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3MuE
                    [LclId] =
                        [] \r [a3_s3NDg]
                            case a3_s3NDg of {
                              __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                            }; } in
                  let {
                    sat_s3NDj [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_s3MuE
                    [LclId] =
                        CCCS Text.ParserCombinators.ReadP.Look! [sat_s3NDi];
                  } in 
                    Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                        sat_s3NDj sat_s3NDq; } in
        let {
          k_s3NDr [Occ=OnceL, Dmd=<L,C(U)>]
            :: () -> Text.ParserCombinators.ReadP.P b1_s3MuE
          [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
              [lvl116_s3NDd] \r [a3_s3NDs] lvl116_s3NDd; } in
        let {
          sat_s3NDu [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3MuE
          [LclId] =
              [k_s3NDr] \r [a_s3NDt]
                  Text.ParserCombinators.ReadP.skipSpaces2 a_s3NDt k_s3NDr;
        } in  Unit# [sat_s3NDu];

GHC.Read.$fReadBool2 [InlPrag=NOUSERINLINE[0]]
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        (GHC.Types.Bool -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=2, Str=<L,A><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [w_s3NDv w1_s3NDw]
        case GHC.Read.$w$creadPrec w1_s3NDw of {
          Unit# ww1_s3NDy [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3NDy];
        };

GHC.Read.$fReadBool1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Types.Bool -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Read.list3 GHC.Read.$fReadBool2 eta_B2 eta_B1;

GHC.Read.$fReadBool_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.Types.Bool
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s3NDz]
        let {
          sat_s3NDA [Occ=Once]
            :: Text.ParserCombinators.ReadP.P GHC.Types.Bool
          [LclId] =
              [n_s3NDz] \u []
                  GHC.Read.list3
                      GHC.Read.$fReadBool2
                      n_s3NDz
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NDA;

GHC.Read.$fReadBool_$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec [GHC.Types.Bool]
[GblId] =
    [] \u [] GHC.Read.list GHC.Read.$fReadBool1;

GHC.Read.$fReadBool7
  :: Text.ParserCombinators.ReadP.P [GHC.Types.Bool]
[GblId] =
    [] \u []
        GHC.Read.$fReadBool_$creadListPrec
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fReadBool_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.Types.Bool]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.$fReadBool7 eta_B1;

GHC.Read.$fReadBool [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.Types.Bool
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fReadBool_$creadsPrec
                                    GHC.Read.$fReadBool_$creadList
                                    GHC.Read.$fReadBool1
                                    GHC.Read.$fReadBool_$creadListPrec];

GHC.Read.$w$creadPrec1 [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> (# GHC.Base.String -> Text.ParserCombinators.ReadP.P b1 #)
[GblId, Arity=1, Str=<L,C(U)>, Unf=OtherCon []] =
    [] \r [w_s3NDB]
        let {
          lvl116_s3NDC [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3MuL
          [LclId] =
              [w_s3NDB] \u []
                  let {
                    sat_s3NDH [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_s3MuL
                    [LclId] =
                        [w_s3NDB] \u []
                            let {
                              sat_s3NDG [Occ=Once]
                                :: Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.P b1_s3MuL
                              [LclId] =
                                  [w_s3NDB] \r [a1_s3NDD]
                                      case a1_s3NDD of {
                                        __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                                        Text.Read.Lex.Char c_s3NDF [Occ=Once] -> w_s3NDB c_s3NDF;
                                      };
                            } in  Text.Read.Lex.expect2 sat_s3NDG;
                  } in 
                    Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                        GHC.Read.$fReadChar3 sat_s3NDH; } in
        let {
          k_s3NDI [Occ=OnceL, Dmd=<L,C(U)>]
            :: () -> Text.ParserCombinators.ReadP.P b1_s3MuL
          [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
              [lvl116_s3NDC] \r [a3_s3NDJ] lvl116_s3NDC; } in
        let {
          sat_s3NDL [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3MuL
          [LclId] =
              [k_s3NDI] \r [a_s3NDK]
                  Text.ParserCombinators.ReadP.skipSpaces2 a_s3NDK k_s3NDI;
        } in  Unit# [sat_s3NDL];

GHC.Read.$fReadChar7 [InlPrag=NOUSERINLINE[0]]
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=2, Str=<L,A><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [w_s3NDM w1_s3NDN]
        case GHC.Read.$w$creadPrec1 w1_s3NDN of {
          Unit# ww1_s3NDP [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3NDP];
        };

GHC.Read.$fReadChar6
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Read.list3 GHC.Read.$fReadChar7 eta_B2 eta_B1;

GHC.Read.$fReadInteger2
  :: Text.Read.Lex.Lexeme
     -> Text.ParserCombinators.ReadPrec.ReadPrec
          GHC.Integer.Type.Integer
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3NDQ]
        case ds_s3NDQ of {
          __DEFAULT ->
              Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4;
          Text.Read.Lex.Number n_s3NDS [Occ=Once] ->
              case Text.Read.Lex.numberToInteger n_s3NDS of {
                GHC.Base.Nothing ->
                    Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4;
                GHC.Base.Just i_s3NDU [Occ=OnceL] ->
                    let {
                      sat_s3NDX [Occ=Once]
                        :: Text.ParserCombinators.ReadPrec.Prec
                           -> forall b.
                              (GHC.Integer.Type.Integer -> Text.ParserCombinators.ReadP.P b)
                              -> Text.ParserCombinators.ReadP.P b
                      [LclId] =
                          [i_s3NDU] \r [ds1_s3NDV k_s3NDW] k_s3NDW i_s3NDU;
                    } in  sat_s3NDX;
              };
        };

GHC.Read.$fReadInteger1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Integer.Type.Integer -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Read.$fReadInteger_$sreadNumber
            GHC.Read.$fReadInteger2 eta_B2 eta_B1;

GHC.Read.$fReadInteger_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.Integer.Type.Integer
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s3NDY]
        let {
          sat_s3NDZ [Occ=Once]
            :: Text.ParserCombinators.ReadP.P GHC.Integer.Type.Integer
          [LclId] =
              [n_s3NDY] \u []
                  GHC.Read.$fReadInteger_$sreadNumber
                      GHC.Read.$fReadInteger2
                      n_s3NDY
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NDZ;

GHC.Read.$fReadInteger_$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec
       [GHC.Integer.Type.Integer]
[GblId] =
    [] \u [] GHC.Read.list GHC.Read.$fReadInteger1;

GHC.Read.$fReadInteger3
  :: Text.ParserCombinators.ReadP.P [GHC.Integer.Type.Integer]
[GblId] =
    [] \u []
        GHC.Read.$fReadInteger_$creadListPrec
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fReadInteger_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.Integer.Type.Integer]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.$fReadInteger3 eta_B1;

GHC.Read.$fReadInteger [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.Integer.Type.Integer
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fReadInteger_$creadsPrec
                                    GHC.Read.$fReadInteger_$creadList
                                    GHC.Read.$fReadInteger1
                                    GHC.Read.$fReadInteger_$creadListPrec];

GHC.Read.$fReadWord64_go [Occ=LoopBreaker]
  :: [(GHC.Integer.Type.Integer, GHC.Base.String)]
     -> [(GHC.Word.Word64, GHC.Base.String)]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3NE0]
        case ds_s3NE0 of {
          [] -> [] [];
          : y_s3NE2 [Occ=Once!] ys_s3NE3 [Occ=Once] ->
              case y_s3NE2 of {
                (,) x_s3NE5 [Occ=Once] r_s3NE6 [Occ=Once] ->
                    let {
                      sat_s3NE9 [Occ=Once] :: [(GHC.Word.Word64, GHC.Base.String)]
                      [LclId] =
                          [ys_s3NE3] \u [] GHC.Read.$fReadWord64_go ys_s3NE3; } in
                    let {
                      sat_s3NE7 [Occ=Once] :: GHC.Word.Word64
                      [LclId] =
                          [x_s3NE5] \u [] GHC.Word.$fNumWord64_$cfromInteger x_s3NE5; } in
                    let {
                      sat_s3NE8 [Occ=Once] :: (GHC.Word.Word64, GHC.Base.String)
                      [LclId] =
                          CCCS (,)! [sat_s3NE7 r_s3NE6];
                    } in  : [sat_s3NE8 sat_s3NE9];
              };
        };

GHC.Read.$fReadWord64_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.Word.Word64
[GblId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [p_s3NEa s_s3NEb]
        case
            GHC.Read.$fReadInteger_$sreadNumber
                GHC.Read.$fReadInteger2
                p_s3NEa
                Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
        of
        sat_s3NEc
        { __DEFAULT ->
              case
                  Text.ParserCombinators.ReadP.run sat_s3NEc s_s3NEb
              of
              sat_s3NEd
              { __DEFAULT -> GHC.Read.$fReadWord64_go sat_s3NEd;
              };
        };

GHC.Read.$fReadWord13
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Word.Word64 -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,U><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s3NEe eta_s3NEf]
        let {
          sat_s3NEg [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS GHC.Word.Word64
          [LclId] =
              [n_s3NEe] \r [eta_B1]
                  GHC.Read.$fReadWord64_$creadsPrec n_s3NEe eta_B1;
        } in 
          case
              Text.ParserCombinators.ReadP.$wreadS_to_P sat_s3NEg eta_s3NEf
          of
          { Unit# ww1_s3NEi [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3NEi];
          };

GHC.Read.$fReadWord12
  :: Text.ParserCombinators.ReadP.P [GHC.Word.Word64]
[GblId] =
    [] \u []
        GHC.Read.list
            GHC.Read.$fReadWord13
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fReadWord64_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.Word.Word64]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.$fReadWord12 eta_B1;

GHC.Read.$fReadWord11
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        ([GHC.Word.Word64] -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,A><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s3NEj w1_s3NEk]
        case
            Text.ParserCombinators.ReadP.$wreadS_to_P
                GHC.Read.$fReadWord64_$creadList w1_s3NEk
        of
        { Unit# ww1_s3NEm [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3NEm];
        };

GHC.Read.$fReadWord64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.Word.Word64
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fReadWord64_$creadsPrec
                                    GHC.Read.$fReadWord64_$creadList
                                    GHC.Read.$fReadWord13
                                    GHC.Read.$fReadWord11];

GHC.Read.$fReadWord_go [Occ=LoopBreaker]
  :: [(GHC.Integer.Type.Integer, GHC.Base.String)]
     -> [(GHC.Types.Word, GHC.Base.String)]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3NEn]
        case ds_s3NEn of {
          [] -> [] [];
          : y_s3NEp [Occ=Once!] ys_s3NEq [Occ=Once] ->
              case y_s3NEp of {
                (,) x_s3NEs [Occ=Once] r_s3NEt [Occ=Once] ->
                    let {
                      sat_s3NEw [Occ=Once] :: [(GHC.Types.Word, GHC.Base.String)]
                      [LclId] =
                          [ys_s3NEq] \u [] GHC.Read.$fReadWord_go ys_s3NEq; } in
                    let {
                      sat_s3NEu [Occ=Once] :: GHC.Types.Word
                      [LclId] =
                          [x_s3NEs] \u [] GHC.Num.$fNumWord_$cfromInteger x_s3NEs; } in
                    let {
                      sat_s3NEv [Occ=Once] :: (GHC.Types.Word, GHC.Base.String)
                      [LclId] =
                          CCCS (,)! [sat_s3NEu r_s3NEt];
                    } in  : [sat_s3NEv sat_s3NEw];
              };
        };

GHC.Read.$fReadWord_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.Types.Word
[GblId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [p_s3NEx s_s3NEy]
        case
            GHC.Read.$fReadInteger_$sreadNumber
                GHC.Read.$fReadInteger2
                p_s3NEx
                Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
        of
        sat_s3NEz
        { __DEFAULT ->
              case
                  Text.ParserCombinators.ReadP.run sat_s3NEz s_s3NEy
              of
              sat_s3NEA
              { __DEFAULT -> GHC.Read.$fReadWord_go sat_s3NEA;
              };
        };

GHC.Read.$fReadWord3
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Types.Word -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,U><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s3NEB eta_s3NEC]
        let {
          sat_s3NED [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS GHC.Types.Word
          [LclId] =
              [n_s3NEB] \r [eta_B1]
                  GHC.Read.$fReadWord_$creadsPrec n_s3NEB eta_B1;
        } in 
          case
              Text.ParserCombinators.ReadP.$wreadS_to_P sat_s3NED eta_s3NEC
          of
          { Unit# ww1_s3NEF [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3NEF];
          };

GHC.Read.$fReadWord2
  :: Text.ParserCombinators.ReadP.P [GHC.Types.Word]
[GblId] =
    [] \u []
        GHC.Read.list
            GHC.Read.$fReadWord3
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fReadWord_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.Types.Word]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.$fReadWord2 eta_B1;

GHC.Read.$fReadWord1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        ([GHC.Types.Word] -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,A><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s3NEG w1_s3NEH]
        case
            Text.ParserCombinators.ReadP.$wreadS_to_P
                GHC.Read.$fReadWord_$creadList w1_s3NEH
        of
        { Unit# ww1_s3NEJ [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3NEJ];
        };

GHC.Read.$fReadWord [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.Types.Word
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fReadWord_$creadsPrec
                                    GHC.Read.$fReadWord_$creadList
                                    GHC.Read.$fReadWord3
                                    GHC.Read.$fReadWord1];

GHC.Read.$fReadInt2
  :: Text.Read.Lex.Lexeme
     -> Text.ParserCombinators.ReadPrec.ReadPrec GHC.Types.Int
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3NEK]
        case ds_s3NEK of {
          __DEFAULT ->
              Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4;
          Text.Read.Lex.Number n_s3NEM [Occ=Once] ->
              case Text.Read.Lex.numberToInteger n_s3NEM of {
                GHC.Base.Nothing ->
                    Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4;
                GHC.Base.Just i_s3NEO [Occ=Once] ->
                    let {
                      x_s3NEP [Occ=OnceL] :: GHC.Types.Int
                      [LclId] =
                          [i_s3NEO] \u []
                              case GHC.Integer.Type.integerToInt i_s3NEO of wild2_s3NEQ {
                                __DEFAULT -> GHC.Types.I# [wild2_s3NEQ];
                              }; } in
                    let {
                      sat_s3NET [Occ=Once]
                        :: Text.ParserCombinators.ReadPrec.Prec
                           -> forall b.
                              (GHC.Types.Int -> Text.ParserCombinators.ReadP.P b)
                              -> Text.ParserCombinators.ReadP.P b
                      [LclId] =
                          [x_s3NEP] \r [ds1_s3NER k_s3NES] k_s3NES x_s3NEP;
                    } in  sat_s3NET;
              };
        };

GHC.Read.$fReadInt1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Types.Int -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Read.$fReadInt_$sreadNumber GHC.Read.$fReadInt2 eta_B2 eta_B1;

GHC.Read.$fReadDouble_x1 :: GHC.Types.Double
[GblId] =
    [] \u []
        case /## [0.0## 0.0##] of wild2_s3NEU {
          __DEFAULT -> GHC.Types.D# [wild2_s3NEU];
        };

GHC.Read.$fReadDouble3
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Types.Double -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,A><C(S),1*C1(U)>, Unf=OtherCon []] =
    [] \r [ds_s3NEV k_s3NEW] k_s3NEW GHC.Read.$fReadDouble_x1;

GHC.Read.$fReadDouble5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "NaN"#;

GHC.Read.$fReadDouble4 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Read.$fReadDouble5;

GHC.Read.$fReadDouble_x :: GHC.Types.Double
[GblId] =
    [] \u []
        case /## [1.0## 0.0##] of wild2_s3NEX {
          __DEFAULT -> GHC.Types.D# [wild2_s3NEX];
        };

GHC.Read.$fReadDouble2
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Types.Double -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,A><C(S),1*C1(U)>, Unf=OtherCon []] =
    [] \r [ds_s3NEY k_s3NEZ] k_s3NEZ GHC.Read.$fReadDouble_x;

GHC.Read.$fReadDouble7 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Infinity"#;

GHC.Read.$fReadDouble6 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Read.$fReadDouble7;

GHC.Read.$fReadDouble_$sconvertFrac
  :: Text.Read.Lex.Lexeme
     -> Text.ParserCombinators.ReadPrec.ReadPrec GHC.Types.Double
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [eta_s3NF0]
        case eta_s3NF0 of {
          __DEFAULT ->
              Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4;
          Text.Read.Lex.Ident ds_s3NF2 ->
              case GHC.Base.eqString ds_s3NF2 GHC.Read.$fReadDouble6 of {
                GHC.Types.False ->
                    case GHC.Base.eqString ds_s3NF2 GHC.Read.$fReadDouble4 of {
                      GHC.Types.False ->
                          Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4;
                      GHC.Types.True -> GHC.Read.$fReadDouble3;
                    };
                GHC.Types.True -> GHC.Read.$fReadDouble2;
              };
          Text.Read.Lex.Number n_s3NF5 [Occ=Once] ->
              case
                  Text.Read.Lex.$wnumberToRangedRational
                      GHC.Float.$fRealFloatDouble3 GHC.Float.$fRealFloatDouble2 n_s3NF5
              of
              { GHC.Base.Nothing -> GHC.Read.$fReadDouble2;
                GHC.Base.Just rat_s3NF7 [Occ=Once!] ->
                    let {
                      x_s3NF8 [Occ=OnceL] :: GHC.Types.Double
                      [LclId] =
                          [rat_s3NF7] \u []
                              case rat_s3NF7 of {
                                GHC.Real.:% n1_s3NFa [Occ=Once] d_s3NFb [Occ=Once] ->
                                    GHC.Float.rationalToDouble n1_s3NFa d_s3NFb;
                              }; } in
                    let {
                      sat_s3NFe [Occ=Once]
                        :: Text.ParserCombinators.ReadPrec.Prec
                           -> forall b.
                              (GHC.Types.Double -> Text.ParserCombinators.ReadP.P b)
                              -> Text.ParserCombinators.ReadP.P b
                      [LclId] =
                          [x_s3NF8] \r [ds_s3NFc k_s3NFd] k_s3NFd x_s3NF8;
                    } in  sat_s3NFe;
              };
        };

GHC.Read.$fReadFloat_x1 :: GHC.Types.Float
[GblId] =
    [] \u []
        case divideFloat# [0.0# 0.0#] of wild2_s3NFf {
          __DEFAULT -> GHC.Types.F# [wild2_s3NFf];
        };

GHC.Read.$fReadFloat3
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Types.Float -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,A><C(S),1*C1(U)>, Unf=OtherCon []] =
    [] \r [ds_s3NFg k_s3NFh] k_s3NFh GHC.Read.$fReadFloat_x1;

GHC.Read.$fReadFloat_x :: GHC.Types.Float
[GblId] =
    [] \u []
        case divideFloat# [1.0# 0.0#] of wild2_s3NFi {
          __DEFAULT -> GHC.Types.F# [wild2_s3NFi];
        };

GHC.Read.$fReadFloat2
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Types.Float -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,A><C(S),1*C1(U)>, Unf=OtherCon []] =
    [] \r [ds_s3NFj k_s3NFk] k_s3NFk GHC.Read.$fReadFloat_x;

GHC.Read.$fReadFloat_$sconvertFrac
  :: Text.Read.Lex.Lexeme
     -> Text.ParserCombinators.ReadPrec.ReadPrec GHC.Types.Float
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [eta_s3NFl]
        case eta_s3NFl of {
          __DEFAULT ->
              Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4;
          Text.Read.Lex.Ident ds_s3NFn ->
              case GHC.Base.eqString ds_s3NFn GHC.Read.$fReadDouble6 of {
                GHC.Types.False ->
                    case GHC.Base.eqString ds_s3NFn GHC.Read.$fReadDouble4 of {
                      GHC.Types.False ->
                          Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4;
                      GHC.Types.True -> GHC.Read.$fReadFloat3;
                    };
                GHC.Types.True -> GHC.Read.$fReadFloat2;
              };
          Text.Read.Lex.Number n_s3NFq [Occ=Once] ->
              case
                  Text.Read.Lex.$wnumberToRangedRational
                      GHC.Float.$fRealFloatFloat3 GHC.Float.$fRealFloatFloat2 n_s3NFq
              of
              { GHC.Base.Nothing -> GHC.Read.$fReadFloat2;
                GHC.Base.Just rat_s3NFs [Occ=Once!] ->
                    let {
                      x_s3NFt [Occ=OnceL] :: GHC.Types.Float
                      [LclId] =
                          [rat_s3NFs] \u []
                              case rat_s3NFs of {
                                GHC.Real.:% n1_s3NFv [Occ=Once] d_s3NFw [Occ=Once] ->
                                    GHC.Float.rationalToFloat n1_s3NFv d_s3NFw;
                              }; } in
                    let {
                      sat_s3NFz [Occ=Once]
                        :: Text.ParserCombinators.ReadPrec.Prec
                           -> forall b.
                              (GHC.Types.Float -> Text.ParserCombinators.ReadP.P b)
                              -> Text.ParserCombinators.ReadP.P b
                      [LclId] =
                          [x_s3NFt] \r [ds_s3NFx k_s3NFy] k_s3NFy x_s3NFt;
                    } in  sat_s3NFz;
              };
        };

GHC.Read.$fReadDouble1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Types.Double -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Read.$fReadDouble_$sreadNumber
            GHC.Read.$fReadDouble_$sconvertFrac eta_B2 eta_B1;

GHC.Read.$fReadDouble_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.Types.Double
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s3NFA]
        let {
          sat_s3NFB [Occ=Once]
            :: Text.ParserCombinators.ReadP.P GHC.Types.Double
          [LclId] =
              [n_s3NFA] \u []
                  GHC.Read.$fReadDouble_$sreadNumber
                      GHC.Read.$fReadDouble_$sconvertFrac
                      n_s3NFA
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NFB;

GHC.Read.$fReadDouble_$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec [GHC.Types.Double]
[GblId] =
    [] \u [] GHC.Read.list GHC.Read.$fReadDouble1;

GHC.Read.$fReadDouble8
  :: Text.ParserCombinators.ReadP.P [GHC.Types.Double]
[GblId] =
    [] \u []
        GHC.Read.$fReadDouble_$creadListPrec
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fReadDouble_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.Types.Double]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.$fReadDouble8 eta_B1;

GHC.Read.$fReadDouble [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.Types.Double
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fReadDouble_$creadsPrec
                                    GHC.Read.$fReadDouble_$creadList
                                    GHC.Read.$fReadDouble1
                                    GHC.Read.$fReadDouble_$creadListPrec];

GHC.Read.$fReadFloat1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Types.Float -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Read.$fReadFloat_$sreadNumber
            GHC.Read.$fReadFloat_$sconvertFrac eta_B2 eta_B1;

GHC.Read.$fReadFloat_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.Types.Float
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s3NFC]
        let {
          sat_s3NFD [Occ=Once]
            :: Text.ParserCombinators.ReadP.P GHC.Types.Float
          [LclId] =
              [n_s3NFC] \u []
                  GHC.Read.$fReadFloat_$sreadNumber
                      GHC.Read.$fReadFloat_$sconvertFrac
                      n_s3NFC
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NFD;

GHC.Read.$fReadFloat_$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec [GHC.Types.Float]
[GblId] =
    [] \u [] GHC.Read.list GHC.Read.$fReadFloat1;

GHC.Read.$fReadFloat4
  :: Text.ParserCombinators.ReadP.P [GHC.Types.Float]
[GblId] =
    [] \u []
        GHC.Read.$fReadFloat_$creadListPrec
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fReadFloat_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.Types.Float]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.$fReadFloat4 eta_B1;

GHC.Read.$fReadFloat [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.Types.Float
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fReadFloat_$creadsPrec
                                    GHC.Read.$fReadFloat_$creadList
                                    GHC.Read.$fReadFloat1
                                    GHC.Read.$fReadFloat_$creadListPrec];

GHC.Read.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.Read.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Read.$trModule4];

GHC.Read.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.Read"#;

GHC.Read.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Read.$trModule2];

GHC.Read.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.Read.$trModule3
                                     GHC.Read.$trModule1];

$krep_r3N5l :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcChar
                                              GHC.Types.[]];

$krep1_r3N5m :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcInt
                                              GHC.Types.[]];

$krep2_r3N5n :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcConstraint
                                              GHC.Types.[]];

$krep3_r3N5o :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r3N5l GHC.Types.[]];

$krep4_r3N5p :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep3_r3N5o];

GHC.Read.$tcRead1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.Types.krep$*
                                         $krep2_r3N5n];

$krep5_r3N5q :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

$krep6_r3N5r :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep4_r3N5p GHC.Types.[]];

$krep7_r3N5s :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep5_r3N5q $krep6_r3N5r];

$krep8_r3N5t :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Tuple.$tc(,)
                                              $krep7_r3N5s];

$krep9_r3N5u :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep8_r3N5t GHC.Types.[]];

$krep10_r3N5v :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep9_r3N5u];

$krep11_r3N5w :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep4_r3N5p $krep10_r3N5v];

$krep12_r3N5x :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep1_r3N5m $krep11_r3N5w];

$krep13_r3N5y :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep5_r3N5q GHC.Types.[]];

$krep14_r3N5z :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep13_r3N5y];

$krep15_r3N5A :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep14_r3N5z $krep6_r3N5r];

$krep16_r3N5B :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Tuple.$tc(,)
                                              $krep15_r3N5A];

$krep17_r3N5C :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep16_r3N5B GHC.Types.[]];

$krep18_r3N5D :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep17_r3N5C];

$krep19_r3N5E :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep4_r3N5p $krep18_r3N5D];

$krep20_r3N5F :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep14_r3N5z GHC.Types.[]];

$krep21_r3N5G :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Text.ParserCombinators.ReadPrec.$tcReadPrec
                                              $krep20_r3N5F];

$krep22_r3N5H :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Text.ParserCombinators.ReadPrec.$tcReadPrec
                                              $krep13_r3N5y];

GHC.Read.$tcRead3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Read"#;

GHC.Read.$tcRead2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Read.$tcRead3];

GHC.Read.$tcRead :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2005723268194049725##
                                    6708234688584993214##
                                    GHC.Read.$trModule
                                    GHC.Read.$tcRead2
                                    0#
                                    GHC.Read.$tcRead1];

$krep23_r3N5I :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Read.$tcRead
                                              $krep13_r3N5y];

$krep24_r3N5J :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep21_r3N5G $krep23_r3N5I];

$krep25_r3N5K :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep22_r3N5H $krep24_r3N5J];

$krep26_r3N5L :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep19_r3N5E $krep25_r3N5K];

GHC.Read.$tc'C:Read1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep12_r3N5x $krep26_r3N5L];

GHC.Read.$tc'C:Read3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'C:Read"#;

GHC.Read.$tc'C:Read2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Read.$tc'C:Read3];

GHC.Read.$tc'C:Read :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [14808553548329602455##
                                    6533111827003124976##
                                    GHC.Read.$trModule
                                    GHC.Read.$tc'C:Read2
                                    1#
                                    GHC.Read.$tc'C:Read1];

GHC.Read.$fReadInt_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.Types.Int
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s3NFE]
        let {
          sat_s3NFF [Occ=Once]
            :: Text.ParserCombinators.ReadP.P GHC.Types.Int
          [LclId] =
              [n_s3NFE] \u []
                  GHC.Read.$fReadInt_$sreadNumber
                      GHC.Read.$fReadInt2
                      n_s3NFE
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NFF;

GHC.Read.$fReadInt_$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec [GHC.Types.Int]
[GblId] =
    [] \u [] GHC.Read.list GHC.Read.$fReadInt1;

GHC.Read.$fReadInt3
  :: Text.ParserCombinators.ReadP.P [GHC.Types.Int]
[GblId] =
    [] \u []
        GHC.Read.$fReadInt_$creadListPrec
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fReadInt_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.Types.Int]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.$fReadInt3 eta_B1;

GHC.Read.$fReadInt [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.Types.Int
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fReadInt_$creadsPrec
                                    GHC.Read.$fReadInt_$creadList
                                    GHC.Read.$fReadInt1
                                    GHC.Read.$fReadInt_$creadListPrec];

GHC.Read.$fReadWord32_go [Occ=LoopBreaker]
  :: [(GHC.Types.Int, GHC.Base.String)]
     -> [(GHC.Word.Word32, GHC.Base.String)]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3NFG]
        case ds_s3NFG of {
          [] -> [] [];
          : y_s3NFI [Occ=Once!] ys_s3NFJ [Occ=Once] ->
              case y_s3NFI of {
                (,) x_s3NFL [Occ=Once!] r_s3NFM [Occ=Once] ->
                    let {
                      sat_s3NFT [Occ=Once] :: [(GHC.Word.Word32, GHC.Base.String)]
                      [LclId] =
                          [ys_s3NFJ] \u [] GHC.Read.$fReadWord32_go ys_s3NFJ; } in
                    let {
                      sat_s3NFR [Occ=Once] :: GHC.Word.Word32
                      [LclId] =
                          [x_s3NFL] \u []
                              case x_s3NFL of {
                                GHC.Types.I# x#_s3NFO [Occ=Once] ->
                                    case int2Word# [x#_s3NFO] of sat_s3NFP {
                                      __DEFAULT ->
                                          case narrow32Word# [sat_s3NFP] of sat_s3NFQ {
                                            __DEFAULT -> GHC.Word.W32# [sat_s3NFQ];
                                          };
                                    };
                              }; } in
                    let {
                      sat_s3NFS [Occ=Once] :: (GHC.Word.Word32, GHC.Base.String)
                      [LclId] =
                          CCCS (,)! [sat_s3NFR r_s3NFM];
                    } in  : [sat_s3NFS sat_s3NFT];
              };
        };

GHC.Read.$fReadWord32_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.Word.Word32
[GblId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [p_s3NFU s_s3NFV]
        case
            GHC.Read.$fReadInt_$sreadNumber
                GHC.Read.$fReadInt2
                p_s3NFU
                Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
        of
        sat_s3NFW
        { __DEFAULT ->
              case
                  Text.ParserCombinators.ReadP.run sat_s3NFW s_s3NFV
              of
              sat_s3NFX
              { __DEFAULT -> GHC.Read.$fReadWord32_go sat_s3NFX;
              };
        };

GHC.Read.$fReadWord10
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Word.Word32 -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,U><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s3NFY eta_s3NFZ]
        let {
          sat_s3NG0 [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS GHC.Word.Word32
          [LclId] =
              [n_s3NFY] \r [eta_B1]
                  GHC.Read.$fReadWord32_$creadsPrec n_s3NFY eta_B1;
        } in 
          case
              Text.ParserCombinators.ReadP.$wreadS_to_P sat_s3NG0 eta_s3NFZ
          of
          { Unit# ww1_s3NG2 [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3NG2];
          };

GHC.Read.$fReadWord9
  :: Text.ParserCombinators.ReadP.P [GHC.Word.Word32]
[GblId] =
    [] \u []
        GHC.Read.list
            GHC.Read.$fReadWord10
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fReadWord32_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.Word.Word32]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.$fReadWord9 eta_B1;

GHC.Read.$fReadWord7
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        ([GHC.Word.Word32] -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,A><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s3NG3 w1_s3NG4]
        case
            Text.ParserCombinators.ReadP.$wreadS_to_P
                GHC.Read.$fReadWord32_$creadList w1_s3NG4
        of
        { Unit# ww1_s3NG6 [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3NG6];
        };

GHC.Read.$fReadWord32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.Word.Word32
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fReadWord32_$creadsPrec
                                    GHC.Read.$fReadWord32_$creadList
                                    GHC.Read.$fReadWord10
                                    GHC.Read.$fReadWord7];

GHC.Read.$fReadWord16_go [Occ=LoopBreaker]
  :: [(GHC.Types.Int, GHC.Base.String)]
     -> [(GHC.Word.Word16, GHC.Base.String)]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3NG7]
        case ds_s3NG7 of {
          [] -> [] [];
          : y_s3NG9 [Occ=Once!] ys_s3NGa [Occ=Once] ->
              case y_s3NG9 of {
                (,) x_s3NGc [Occ=Once!] r_s3NGd [Occ=Once] ->
                    let {
                      sat_s3NGk [Occ=Once] :: [(GHC.Word.Word16, GHC.Base.String)]
                      [LclId] =
                          [ys_s3NGa] \u [] GHC.Read.$fReadWord16_go ys_s3NGa; } in
                    let {
                      sat_s3NGi [Occ=Once] :: GHC.Word.Word16
                      [LclId] =
                          [x_s3NGc] \u []
                              case x_s3NGc of {
                                GHC.Types.I# x#_s3NGf [Occ=Once] ->
                                    case int2Word# [x#_s3NGf] of sat_s3NGg {
                                      __DEFAULT ->
                                          case narrow16Word# [sat_s3NGg] of sat_s3NGh {
                                            __DEFAULT -> GHC.Word.W16# [sat_s3NGh];
                                          };
                                    };
                              }; } in
                    let {
                      sat_s3NGj [Occ=Once] :: (GHC.Word.Word16, GHC.Base.String)
                      [LclId] =
                          CCCS (,)! [sat_s3NGi r_s3NGd];
                    } in  : [sat_s3NGj sat_s3NGk];
              };
        };

GHC.Read.$fReadWord16_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.Word.Word16
[GblId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [p_s3NGl s_s3NGm]
        case
            GHC.Read.$fReadInt_$sreadNumber
                GHC.Read.$fReadInt2
                p_s3NGl
                Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
        of
        sat_s3NGn
        { __DEFAULT ->
              case
                  Text.ParserCombinators.ReadP.run sat_s3NGn s_s3NGm
              of
              sat_s3NGo
              { __DEFAULT -> GHC.Read.$fReadWord16_go sat_s3NGo;
              };
        };

GHC.Read.$fReadWord6
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Word.Word16 -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,U><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s3NGp eta_s3NGq]
        let {
          sat_s3NGr [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS GHC.Word.Word16
          [LclId] =
              [n_s3NGp] \r [eta_B1]
                  GHC.Read.$fReadWord16_$creadsPrec n_s3NGp eta_B1;
        } in 
          case
              Text.ParserCombinators.ReadP.$wreadS_to_P sat_s3NGr eta_s3NGq
          of
          { Unit# ww1_s3NGt [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3NGt];
          };

GHC.Read.$fReadWord5
  :: Text.ParserCombinators.ReadP.P [GHC.Word.Word16]
[GblId] =
    [] \u []
        GHC.Read.list
            GHC.Read.$fReadWord6
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fReadWord16_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.Word.Word16]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.$fReadWord5 eta_B1;

GHC.Read.$fReadWord4
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        ([GHC.Word.Word16] -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,A><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s3NGu w1_s3NGv]
        case
            Text.ParserCombinators.ReadP.$wreadS_to_P
                GHC.Read.$fReadWord16_$creadList w1_s3NGv
        of
        { Unit# ww1_s3NGx [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3NGx];
        };

GHC.Read.$fReadWord16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.Word.Word16
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fReadWord16_$creadsPrec
                                    GHC.Read.$fReadWord16_$creadList
                                    GHC.Read.$fReadWord6
                                    GHC.Read.$fReadWord4];

GHC.Read.$fReadWord8_go [Occ=LoopBreaker]
  :: [(GHC.Types.Int, GHC.Base.String)]
     -> [(GHC.Word.Word8, GHC.Base.String)]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3NGy]
        case ds_s3NGy of {
          [] -> [] [];
          : y_s3NGA [Occ=Once!] ys_s3NGB [Occ=Once] ->
              case y_s3NGA of {
                (,) x_s3NGD [Occ=Once!] r_s3NGE [Occ=Once] ->
                    let {
                      sat_s3NGL [Occ=Once] :: [(GHC.Word.Word8, GHC.Base.String)]
                      [LclId] =
                          [ys_s3NGB] \u [] GHC.Read.$fReadWord8_go ys_s3NGB; } in
                    let {
                      sat_s3NGJ [Occ=Once] :: GHC.Word.Word8
                      [LclId] =
                          [x_s3NGD] \u []
                              case x_s3NGD of {
                                GHC.Types.I# x#_s3NGG [Occ=Once] ->
                                    case int2Word# [x#_s3NGG] of sat_s3NGH {
                                      __DEFAULT ->
                                          case narrow8Word# [sat_s3NGH] of sat_s3NGI {
                                            __DEFAULT -> GHC.Word.W8# [sat_s3NGI];
                                          };
                                    };
                              }; } in
                    let {
                      sat_s3NGK [Occ=Once] :: (GHC.Word.Word8, GHC.Base.String)
                      [LclId] =
                          CCCS (,)! [sat_s3NGJ r_s3NGE];
                    } in  : [sat_s3NGK sat_s3NGL];
              };
        };

GHC.Read.$fReadWord8_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.Word.Word8
[GblId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [p_s3NGM s_s3NGN]
        case
            GHC.Read.$fReadInt_$sreadNumber
                GHC.Read.$fReadInt2
                p_s3NGM
                Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
        of
        sat_s3NGO
        { __DEFAULT ->
              case
                  Text.ParserCombinators.ReadP.run sat_s3NGO s_s3NGN
              of
              sat_s3NGP
              { __DEFAULT -> GHC.Read.$fReadWord8_go sat_s3NGP;
              };
        };

GHC.Read.$fReadWord17
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Word.Word8 -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,U><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s3NGQ eta_s3NGR]
        let {
          sat_s3NGS [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS GHC.Word.Word8
          [LclId] =
              [n_s3NGQ] \r [eta_B1]
                  GHC.Read.$fReadWord8_$creadsPrec n_s3NGQ eta_B1;
        } in 
          case
              Text.ParserCombinators.ReadP.$wreadS_to_P sat_s3NGS eta_s3NGR
          of
          { Unit# ww1_s3NGU [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3NGU];
          };

GHC.Read.$fReadWord15
  :: Text.ParserCombinators.ReadP.P [GHC.Word.Word8]
[GblId] =
    [] \u []
        GHC.Read.list
            GHC.Read.$fReadWord17
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fReadWord8_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.Word.Word8]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.$fReadWord15 eta_B1;

GHC.Read.$fReadWord14
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        ([GHC.Word.Word8] -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,A><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s3NGV w1_s3NGW]
        case
            Text.ParserCombinators.ReadP.$wreadS_to_P
                GHC.Read.$fReadWord8_$creadList w1_s3NGW
        of
        { Unit# ww1_s3NGY [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3NGY];
        };

GHC.Read.$fReadWord8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.Word.Word8
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fReadWord8_$creadsPrec
                                    GHC.Read.$fReadWord8_$creadList
                                    GHC.Read.$fReadWord17
                                    GHC.Read.$fReadWord14];

GHC.Read.$fReadChar_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.Types.Char
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s3NGZ]
        let {
          sat_s3NH0 [Occ=Once]
            :: Text.ParserCombinators.ReadP.P GHC.Types.Char
          [LclId] =
              [n_s3NGZ] \u []
                  GHC.Read.list3
                      GHC.Read.$fReadChar7
                      n_s3NGZ
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NH0;

GHC.Read.$fReadChar5
  :: Text.ParserCombinators.ReadPrec.ReadPrec [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.Read.list GHC.Read.$fReadChar6;

GHC.Read.$fReadChar2
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Base.String
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s3NH1]
        let {
          ds3_s3NH2 [Occ=OnceL, Dmd=<L,C(U)>]
            :: Text.ParserCombinators.ReadP.ReadP GHC.Base.String
          [LclId] =
              [n_s3NH1] \u [] GHC.Read.$fReadChar5 n_s3NH1; } in
        let {
          sat_s3NHg [Occ=Once]
            :: forall b.
               (GHC.Base.String -> Text.ParserCombinators.ReadP.P b)
               -> Text.ParserCombinators.ReadP.P b
          [LclId] =
              [ds3_s3NH2] \r [k_s3NH3]
                  let {
                    lvl116_s3NH4 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b_a3nvJ
                    [LclId] =
                        [k_s3NH3] \u []
                            let {
                              sat_s3NH9 [Occ=Once] :: Text.ParserCombinators.ReadP.P b_a3nvJ
                              [LclId] =
                                  [k_s3NH3] \u []
                                      let {
                                        sat_s3NH8 [Occ=Once]
                                          :: Text.Read.Lex.Lexeme
                                             -> Text.ParserCombinators.ReadP.P b_a3nvJ
                                        [LclId] =
                                            [k_s3NH3] \r [a1_s3NH5]
                                                case a1_s3NH5 of {
                                                  __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                                                  Text.Read.Lex.String s_s3NH7 [Occ=Once] ->
                                                      k_s3NH3 s_s3NH7;
                                                };
                                      } in  Text.Read.Lex.expect2 sat_s3NH8;
                            } in 
                              Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                  GHC.Read.$fReadChar3 sat_s3NH9; } in
                  let {
                    k1_s3NHa [Occ=OnceL, Dmd=<L,C(U)>]
                      :: () -> Text.ParserCombinators.ReadP.P b_a3nvJ
                    [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
                        [lvl116_s3NH4] \r [a3_s3NHb] lvl116_s3NH4; } in
                  let {
                    sat_s3NHf [Occ=Once] :: Text.ParserCombinators.ReadP.P b_a3nvJ
                    [LclId] =
                        [ds3_s3NH2 k_s3NH3] \u [] ds3_s3NH2 k_s3NH3; } in
                  let {
                    sat_s3NHd [Occ=Once]
                      :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b_a3nvJ
                    [LclId] =
                        [k1_s3NHa] \r [a_s3NHc]
                            Text.ParserCombinators.ReadP.skipSpaces2 a_s3NHc k1_s3NHa; } in
                  let {
                    sat_s3NHe [Occ=Once] :: Text.ParserCombinators.ReadP.P b_a3nvJ
                    [LclId] =
                        CCCS Text.ParserCombinators.ReadP.Look! [sat_s3NHd];
                  } in 
                    Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                        sat_s3NHe sat_s3NHf;
        } in  sat_s3NHg;

GHC.Read.$fReadChar1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Base.String -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Read.list3 GHC.Read.$fReadChar2 eta_B2 eta_B1;

GHC.Read.$fReadChar8
  :: Text.ParserCombinators.ReadP.P [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.Read.list3
            GHC.Read.$fReadChar2
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fReadChar_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.Types.Char]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.$fReadChar8 eta_B1;

GHC.Read.$fReadChar [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.Types.Char
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fReadChar_$creadsPrec
                                    GHC.Read.$fReadChar_$creadList
                                    GHC.Read.$fReadChar6
                                    GHC.Read.$fReadChar1];

GHC.Read.$fRead[]_$s$creadListPrec1
  :: Text.ParserCombinators.ReadPrec.ReadPrec [[GHC.Types.Char]]
[GblId] =
    [] \u [] GHC.Read.list GHC.Read.$fReadChar1;

GHC.Read.$fRead[]2
  :: Text.ParserCombinators.ReadP.P [[GHC.Types.Char]]
[GblId] =
    [] \u []
        GHC.Read.$fRead[]_$s$creadListPrec1
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fRead[]_$s$creadList1
  :: Text.ParserCombinators.ReadP.ReadS [[GHC.Types.Char]]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.$fRead[]2 eta_B1;

GHC.Read.$fRead[]_$s$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec [[GHC.Types.Int]]
[GblId] =
    [] \u [] GHC.Read.list GHC.Read.$fReadInt_$creadListPrec;

GHC.Read.$fRead[]1
  :: Text.ParserCombinators.ReadP.P [[GHC.Types.Int]]
[GblId] =
    [] \u []
        GHC.Read.$fRead[]_$s$creadListPrec
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fRead[]_$s$creadList
  :: Text.ParserCombinators.ReadP.ReadS [[GHC.Types.Int]]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.$fRead[]1 eta_B1;

GHC.Read.$fRead[]_$s$creadsPrec1
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS [GHC.Types.Char]
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s3NHh]
        let {
          sat_s3NHi [Occ=Once]
            :: Text.ParserCombinators.ReadP.P [GHC.Types.Char]
          [LclId] =
              [n_s3NHh] \u []
                  GHC.Read.list3
                      GHC.Read.$fReadChar2
                      n_s3NHh
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NHi;

GHC.Read.$fRead[]_$s$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS [GHC.Types.Int]
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s3NHj]
        let {
          sat_s3NHk [Occ=Once]
            :: Text.ParserCombinators.ReadP.P [GHC.Types.Int]
          [LclId] =
              [n_s3NHj] \u []
                  GHC.Read.$fReadInt_$creadListPrec
                      n_s3NHj Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NHk;

GHC.Read.$fRead[]_$s$fRead[] [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read [GHC.Types.Int]
[GblId, Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fRead[]_$s$creadsPrec
                                    GHC.Read.$fRead[]_$s$creadList
                                    GHC.Read.$fReadInt_$creadListPrec
                                    GHC.Read.$fRead[]_$s$creadListPrec];

GHC.Read.$fRead[]_$s$fRead[]1 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read [GHC.Types.Char]
[GblId, Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fRead[]_$s$creadsPrec1
                                    GHC.Read.$fRead[]_$s$creadList1
                                    GHC.Read.$fReadChar1
                                    GHC.Read.$fRead[]_$s$creadListPrec1];

GHC.Read.$fRead[]_$s$creadsPrec2
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS [GHC.Base.String]
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s3NHl]
        let {
          sat_s3NHm [Occ=Once]
            :: Text.ParserCombinators.ReadP.P [GHC.Base.String]
          [LclId] =
              [n_s3NHl] \u []
                  GHC.Read.$fRead[]_$s$creadListPrec1
                      n_s3NHl Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NHm;

GHC.Read.$fRead[]_$creadsPrec
  :: forall a.
     GHC.Read.Read a =>
     GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS [a]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*U(A,A,A,1*C1(C1(U)))><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3NHn eta_s3NHo]
        let {
          sat_s3NHp [Occ=Once] :: Text.ParserCombinators.ReadP.P [a_a3KVb]
          [LclId] =
              [$dRead_s3NHn eta_s3NHo] \u []
                  GHC.Read.readListPrec
                      $dRead_s3NHn
                      eta_s3NHo
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NHp;

GHC.Read.$fRead[]_$s$creadListPrec2
  :: Text.ParserCombinators.ReadPrec.ReadPrec [[GHC.Base.String]]
[GblId] =
    [] \u [] GHC.Read.list GHC.Read.$fRead[]_$s$creadListPrec1;

GHC.Read.$fRead[]_$creadListPrec
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadPrec.ReadPrec [[a]]
[GblId, Arity=1, Str=<L,1*U(A,A,A,1*C1(C(U)))>, Unf=OtherCon []] =
    [] \r [$dRead_s3NHq]
        let {
          sat_s3NHr [Occ=Once, Dmd=<L,1*C1(C(U))>]
            :: Text.ParserCombinators.ReadPrec.ReadPrec [a_a3KVb]
          [LclId] =
              [$dRead_s3NHq] \s [] GHC.Read.readListPrec $dRead_s3NHq;
        } in  GHC.Read.list sat_s3NHr;

GHC.Read.$fRead[]3
  :: Text.ParserCombinators.ReadP.P [[GHC.Base.String]]
[GblId] =
    [] \u []
        GHC.Read.$fRead[]_$s$creadListPrec2
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fRead[]_$s$creadList2
  :: Text.ParserCombinators.ReadP.ReadS [[GHC.Base.String]]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.$fRead[]3 eta_B1;

GHC.Read.$fRead[]_$s$fRead[]2 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read [GHC.Base.String]
[GblId, Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fRead[]_$s$creadsPrec2
                                    GHC.Read.$fRead[]_$s$creadList2
                                    GHC.Read.$fRead[]_$s$creadListPrec1
                                    GHC.Read.$fRead[]_$s$creadListPrec2];

GHC.Read.$fRead[]_$creadList
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadP.ReadS [[a]]
[GblId, Arity=1, Str=<L,1*U(A,A,A,1*C1(C(U)))>, Unf=OtherCon []] =
    [] \r [$dRead_s3NHs]
        let {
          sat_s3NHu [Occ=Once] :: Text.ParserCombinators.ReadP.P [[a_a3KVb]]
          [LclId] =
              [$dRead_s3NHs] \u []
                  let {
                    sat_s3NHt [Occ=Once, Dmd=<L,1*C1(C(U))>]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec [a_a3KVb]
                    [LclId] =
                        [$dRead_s3NHs] \s [] GHC.Read.readListPrec $dRead_s3NHs;
                  } in 
                    GHC.Read.list
                        sat_s3NHt
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NHu;

GHC.Read.$fRead[] [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Read.Read a => GHC.Read.Read [a]
[GblId[DFunId], Arity=1, Str=<L,U(A,A,A,U)>m] =
    [] \r [$dRead_s3NHv]
        let {
          sat_s3NHz [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec [[a_a3KVb]]
          [LclId] =
              [$dRead_s3NHv] \u []
                  GHC.Read.$fRead[]_$creadListPrec $dRead_s3NHv; } in
        let {
          sat_s3NHy [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec [a_a3KVb]
          [LclId] =
              [$dRead_s3NHv] \u [] GHC.Read.readListPrec $dRead_s3NHv; } in
        let {
          sat_s3NHx [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS [[a_a3KVb]]
          [LclId] =
              [$dRead_s3NHv] \u []
                  GHC.Read.$fRead[]_$creadList $dRead_s3NHv; } in
        let {
          sat_s3NHw [Occ=Once]
            :: GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS [a_a3KVb]
          [LclId] =
              [$dRead_s3NHv] \r [eta_B1]
                  GHC.Read.$fRead[]_$creadsPrec $dRead_s3NHv eta_B1;
        } in  GHC.Read.C:Read [sat_s3NHw sat_s3NHx sat_s3NHy sat_s3NHz];

GHC.Read.$fReadNonEmpty5 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [6#];

GHC.Read.$fReadNonEmpty4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ":|"#;

GHC.Read.$fReadNonEmpty3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Read.$fReadNonEmpty4;

GHC.Read.$fReadNonEmpty2 :: Text.Read.Lex.Lexeme
[GblId, Str=m5, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Symbol! [GHC.Read.$fReadNonEmpty3];

GHC.Read.$fReadNonEmpty1
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Base.NonEmpty a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=3,
 Str=<L,U(A,A,1*C1(C(U)),C(C1(U)))><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3NHA eta_s3NHB eta1_s3NHC]
        let {
          ds1_s3NHD [Occ=OnceL, Dmd=<L,C(U)>]
            :: Text.ParserCombinators.ReadP.ReadP a_a3Ktx
          [LclId] =
              [$dRead_s3NHA] \u []
                  GHC.Read.readPrec $dRead_s3NHA GHC.Read.$fReadNonEmpty5; } in
        let {
          sat_s3NHS [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (GHC.Base.NonEmpty a_a3Ktx)
          [LclId] =
              [$dRead_s3NHA ds1_s3NHD] \r [c_s3NHE eta2_s3NHF]
                  case c_s3NHE of {
                    GHC.Types.I# x_s3NHH [Occ=Once] ->
                        case <=# [x_s3NHH 5#] of {
                          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                          1# ->
                              let {
                                sat_s3NHR [Occ=Once]
                                  :: a_a3Ktx -> Text.ParserCombinators.ReadP.P b1_X3nwX
                                [LclId] =
                                    [$dRead_s3NHA eta2_s3NHF] \r [a1_s3NHJ]
                                        let {
                                          sat_s3NHO [Occ=Once]
                                            :: () -> Text.ParserCombinators.ReadP.P b1_X3nwX
                                          [LclId] =
                                              [$dRead_s3NHA eta2_s3NHF a1_s3NHJ] \r [a2_s3NHK]
                                                  let {
                                                    sat_s3NHN [Occ=Once]
                                                      :: [a_a3Ktx]
                                                         -> Text.ParserCombinators.ReadP.P b1_X3nwX
                                                    [LclId] =
                                                        [eta2_s3NHF a1_s3NHJ] \r [a3_s3NHL]
                                                            let {
                                                              sat_s3NHM [Occ=Once]
                                                                :: GHC.Base.NonEmpty a_a3Ktx
                                                              [LclId] =
                                                                  CCCS GHC.Base.:|! [a1_s3NHJ
                                                                                     a3_s3NHL];
                                                            } in  eta2_s3NHF sat_s3NHM;
                                                  } in 
                                                    GHC.Read.readListPrec
                                                        $dRead_s3NHA
                                                        GHC.Read.$fReadNonEmpty5
                                                        sat_s3NHN;
                                        } in 
                                          case
                                              Text.Read.Lex.$wexpect
                                                  GHC.Read.$fReadNonEmpty2 sat_s3NHO
                                          of
                                          { Unit# ww1_s3NHQ [Occ=Once] ->
                                                Text.ParserCombinators.ReadP.Look [ww1_s3NHQ];
                                          };
                              } in  ds1_s3NHD sat_s3NHR;
                        };
                  };
        } in  GHC.Read.list3 sat_s3NHS eta_s3NHB eta1_s3NHC;

GHC.Read.$fReadNonEmpty_$creadsPrec
  :: forall a.
     GHC.Read.Read a =>
     GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS (GHC.Base.NonEmpty a)
[GblId,
 Arity=2,
 Str=<L,U(A,A,C(C(U)),C(C1(U)))><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3NHT eta_s3NHU]
        let {
          sat_s3NHV [Occ=Once]
            :: Text.ParserCombinators.ReadP.P (GHC.Base.NonEmpty a_X3KIs)
          [LclId] =
              [$dRead_s3NHT eta_s3NHU] \u []
                  GHC.Read.$fReadNonEmpty1
                      $dRead_s3NHT
                      eta_s3NHU
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NHV;

GHC.Read.$fReadNonEmpty_$creadListPrec
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadPrec.ReadPrec [GHC.Base.NonEmpty a]
[GblId,
 Arity=1,
 Str=<L,U(A,A,C(C(U)),C(C1(U)))>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3NHW]
        let {
          sat_s3NHX [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (GHC.Base.NonEmpty a_X3KIt)
          [LclId] =
              [$dRead_s3NHW] \r [eta_B2 eta_B1]
                  GHC.Read.$fReadNonEmpty1 $dRead_s3NHW eta_B2 eta_B1;
        } in  GHC.Read.list sat_s3NHX;

GHC.Read.$fReadNonEmpty_$creadList
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadP.ReadS [GHC.Base.NonEmpty a]
[GblId,
 Arity=1,
 Str=<L,U(A,A,C(C(U)),C(C1(U)))>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3NHY]
        let {
          sat_s3NI0 [Occ=Once]
            :: Text.ParserCombinators.ReadP.P [GHC.Base.NonEmpty a_X3KIu]
          [LclId] =
              [$dRead_s3NHY] \u []
                  let {
                    sat_s3NHZ [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec
                           (GHC.Base.NonEmpty a_X3KIu)
                    [LclId] =
                        [$dRead_s3NHY] \r [eta_B2 eta_B1]
                            GHC.Read.$fReadNonEmpty1 $dRead_s3NHY eta_B2 eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s3NHZ
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NI0;

GHC.Read.$fReadNonEmpty [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Read.Read a => GHC.Read.Read (GHC.Base.NonEmpty a)
[GblId[DFunId], Arity=1, Str=<L,U(A,A,C(C(U)),C(C1(U)))>m] =
    [] \r [$dRead_s3NI1]
        let {
          sat_s3NI5 [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 [GHC.Base.NonEmpty a_X3KIv]
          [LclId] =
              [$dRead_s3NI1] \u []
                  GHC.Read.$fReadNonEmpty_$creadListPrec $dRead_s3NI1; } in
        let {
          sat_s3NI4 [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (GHC.Base.NonEmpty a_X3KIv)
          [LclId] =
              [$dRead_s3NI1] \r [eta_B2 eta_B1]
                  GHC.Read.$fReadNonEmpty1 $dRead_s3NI1 eta_B2 eta_B1; } in
        let {
          sat_s3NI3 [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS [GHC.Base.NonEmpty a_X3KIv]
          [LclId] =
              [$dRead_s3NI1] \u []
                  GHC.Read.$fReadNonEmpty_$creadList $dRead_s3NI1; } in
        let {
          sat_s3NI2 [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS (GHC.Base.NonEmpty a_X3KIv)
          [LclId] =
              [$dRead_s3NI1] \r [eta_B1]
                  GHC.Read.$fReadNonEmpty_$creadsPrec $dRead_s3NI1 eta_B1;
        } in  GHC.Read.C:Read [sat_s3NI2 sat_s3NI3 sat_s3NI4 sat_s3NI5];

GHC.Read.$fReadArray4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "array"#;

GHC.Read.$fReadArray3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Read.$fReadArray4;

GHC.Read.$fReadArray_lexeme :: Text.Read.Lex.Lexeme
[GblId, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Ident! [GHC.Read.$fReadArray3];

GHC.Read.$fReadArray1
  :: forall a b.
     (GHC.Arr.Ix a, GHC.Read.Read a, GHC.Read.Read b) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        (GHC.Arr.Array a b -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=5,
 Str=<L,U(A,A,C(C1(U(U))),A,A,C(U(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dIx_s3NI6 $dRead_s3NI7 $dRead1_s3NI8 eta_s3NI9 eta1_s3NIa]
        let {
          lvl2_s3NIb [Occ=OnceL, Dmd=<L,C(C(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> forall b2.
                  ((a_a3KUf, b_a3KUg) -> Text.ParserCombinators.ReadP.P b2)
                  -> Text.ParserCombinators.ReadP.P b2
          [LclId, Arity=2, Unf=OtherCon []] =
              [$dRead_s3NI7 $dRead1_s3NI8] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,)1 $dRead_s3NI7 $dRead1_s3NI8 eta_B2 eta_B1; } in
        let {
          sat_s3NIq [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (GHC.Arr.Array a_a3KUf b_a3KUg)
          [LclId] =
              [$dIx_s3NI6 $dRead_s3NI7 lvl2_s3NIb] \r [c_s3NIc eta2_s3NId]
                  case c_s3NIc of {
                    GHC.Types.I# x_s3NIf [Occ=Once] ->
                        case <=# [x_s3NIf 10#] of {
                          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                          1# ->
                              let {
                                sat_s3NIn [Occ=Once]
                                  :: () -> Text.ParserCombinators.ReadP.P b2_X3nvw
                                [LclId] =
                                    [$dIx_s3NI6 $dRead_s3NI7 lvl2_s3NIb eta2_s3NId] \r [a1_s3NIh]
                                        let {
                                          sat_s3NIm [Occ=Once]
                                            :: (a_a3KUf, a_a3KUf)
                                               -> Text.ParserCombinators.ReadP.P b2_X3nvw
                                          [LclId] =
                                              [$dIx_s3NI6 lvl2_s3NIb eta2_s3NId] \r [a2_s3NIi]
                                                  let {
                                                    sat_s3NIl [Occ=Once]
                                                      :: [(a_a3KUf, b_a3KUg)]
                                                         -> Text.ParserCombinators.ReadP.P b2_X3nvw
                                                    [LclId] =
                                                        [$dIx_s3NI6
                                                         eta2_s3NId
                                                         a2_s3NIi] \r [a3_s3NIj]
                                                            let {
                                                              sat_s3NIk [Occ=Once]
                                                                :: GHC.Arr.Array a_a3KUf b_a3KUg
                                                              [LclId] =
                                                                  [$dIx_s3NI6
                                                                   a2_s3NIi
                                                                   a3_s3NIj] \u []
                                                                      GHC.Arr.array
                                                                          $dIx_s3NI6
                                                                          a2_s3NIi
                                                                          a3_s3NIj;
                                                            } in  eta2_s3NId sat_s3NIk;
                                                  } in 
                                                    GHC.Read.list
                                                        lvl2_s3NIb GHC.Read.$fReadArray2 sat_s3NIl;
                                        } in 
                                          GHC.Read.$fRead(,)1
                                              $dRead_s3NI7
                                              $dRead_s3NI7
                                              GHC.Read.$fReadArray2
                                              sat_s3NIm;
                              } in 
                                case
                                    Text.Read.Lex.$wexpect GHC.Read.$fReadArray_lexeme sat_s3NIn
                                of
                                { Unit# ww1_s3NIp [Occ=Once] ->
                                      Text.ParserCombinators.ReadP.Look [ww1_s3NIp];
                                };
                        };
                  };
        } in  GHC.Read.list3 sat_s3NIq eta_s3NI9 eta1_s3NIa;

GHC.Read.$fReadArray_$creadsPrec
  :: forall a b.
     (GHC.Arr.Ix a, GHC.Read.Read a, GHC.Read.Read b) =>
     GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS (GHC.Arr.Array a b)
[GblId,
 Arity=4,
 Str=<L,U(A,A,C(C1(U(U))),A,A,C(U(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dIx_s3NIr $dRead_s3NIs $dRead1_s3NIt n_s3NIu]
        let {
          sat_s3NIv [Occ=Once]
            :: Text.ParserCombinators.ReadP.P (GHC.Arr.Array a_X3L9l b_X3L9n)
          [LclId] =
              [$dIx_s3NIr $dRead_s3NIs $dRead1_s3NIt n_s3NIu] \u []
                  GHC.Read.$fReadArray1
                      $dIx_s3NIr
                      $dRead_s3NIs
                      $dRead1_s3NIt
                      n_s3NIu
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NIv;

GHC.Read.$fReadArray_$creadListPrec
  :: forall a b.
     (GHC.Arr.Ix a, GHC.Read.Read a, GHC.Read.Read b) =>
     Text.ParserCombinators.ReadPrec.ReadPrec [GHC.Arr.Array a b]
[GblId,
 Arity=3,
 Str=<L,U(A,A,C(C1(U(U))),A,A,C(U(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dIx_s3NIw $dRead_s3NIx $dRead1_s3NIy]
        let {
          sat_s3NIz [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (GHC.Arr.Array a_X3L9m b_X3L9o)
          [LclId] =
              [$dIx_s3NIw $dRead_s3NIx $dRead1_s3NIy] \r [eta_B2 eta_B1]
                  GHC.Read.$fReadArray1
                      $dIx_s3NIw $dRead_s3NIx $dRead1_s3NIy eta_B2 eta_B1;
        } in  GHC.Read.list sat_s3NIz;

GHC.Read.$fReadArray_$creadList
  :: forall a b.
     (GHC.Arr.Ix a, GHC.Read.Read a, GHC.Read.Read b) =>
     Text.ParserCombinators.ReadP.ReadS [GHC.Arr.Array a b]
[GblId,
 Arity=3,
 Str=<L,U(A,A,C(C1(U(U))),A,A,C(U(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dIx_s3NIA $dRead_s3NIB $dRead1_s3NIC]
        let {
          sat_s3NIE [Occ=Once]
            :: Text.ParserCombinators.ReadP.P [GHC.Arr.Array a_X3L9n b_X3L9p]
          [LclId] =
              [$dIx_s3NIA $dRead_s3NIB $dRead1_s3NIC] \u []
                  let {
                    sat_s3NID [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec
                           (GHC.Arr.Array a_X3L9n b_X3L9p)
                    [LclId] =
                        [$dIx_s3NIA $dRead_s3NIB $dRead1_s3NIC] \r [eta_B2 eta_B1]
                            GHC.Read.$fReadArray1
                                $dIx_s3NIA $dRead_s3NIB $dRead1_s3NIC eta_B2 eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s3NID
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NIE;

GHC.Read.$fReadArray [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b.
     (GHC.Arr.Ix a, GHC.Read.Read a, GHC.Read.Read b) =>
     GHC.Read.Read (GHC.Arr.Array a b)
[GblId[DFunId],
 Arity=3,
 Str=<L,U(A,A,C(C1(U(U))),A,A,C(U(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>m] =
    [] \r [$dIx_s3NIF $dRead_s3NIG $dRead1_s3NIH]
        let {
          sat_s3NIL [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 [GHC.Arr.Array a_X3L9o b_X3L9q]
          [LclId] =
              [$dIx_s3NIF $dRead_s3NIG $dRead1_s3NIH] \u []
                  GHC.Read.$fReadArray_$creadListPrec
                      $dIx_s3NIF $dRead_s3NIG $dRead1_s3NIH; } in
        let {
          sat_s3NIK [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (GHC.Arr.Array a_X3L9o b_X3L9q)
          [LclId] =
              [$dIx_s3NIF $dRead_s3NIG $dRead1_s3NIH] \r [eta_B2 eta_B1]
                  GHC.Read.$fReadArray1
                      $dIx_s3NIF $dRead_s3NIG $dRead1_s3NIH eta_B2 eta_B1; } in
        let {
          sat_s3NIJ [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS
                 [GHC.Arr.Array a_X3L9o b_X3L9q]
          [LclId] =
              [$dIx_s3NIF $dRead_s3NIG $dRead1_s3NIH] \u []
                  GHC.Read.$fReadArray_$creadList
                      $dIx_s3NIF $dRead_s3NIG $dRead1_s3NIH; } in
        let {
          sat_s3NII [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS
                    (GHC.Arr.Array a_X3L9o b_X3L9q)
          [LclId] =
              [$dIx_s3NIF $dRead_s3NIG $dRead1_s3NIH] \r [eta_B1]
                  GHC.Read.$fReadArray_$creadsPrec
                      $dIx_s3NIF $dRead_s3NIG $dRead1_s3NIH eta_B1;
        } in  GHC.Read.C:Read [sat_s3NII sat_s3NIJ sat_s3NIK sat_s3NIL];

lvl1_r3N5M :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.Read.lexLitChar_removeNulls GHC.Types.[];
GHC.Read.lexLitChar_removeNulls [Occ=LoopBreaker]
  :: [GHC.Types.Char] -> [GHC.Types.Char]
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3NIM]
        case ds_s3NIM of {
          [] -> [] [];
          : ds1_s3NIO [Occ=Once!] ds2_s3NIP [Occ=Once*] ->
              case ds1_s3NIO of wild1_s3NIQ {
                GHC.Types.C# ds3_s3NIR [Occ=Once!] ->
                    case ds3_s3NIR of {
                      __DEFAULT ->
                          let {
                            sat_s3NIT [Occ=Once] :: [GHC.Types.Char]
                            [LclId] =
                                [ds2_s3NIP] \u [] GHC.Read.lexLitChar_removeNulls ds2_s3NIP;
                          } in  : [wild1_s3NIQ sat_s3NIT];
                      '\\'# ->
                          case ds2_s3NIP of wild2_s3NIU {
                            [] -> : [wild1_s3NIQ lvl1_r3N5M];
                            : ds5_s3NIV [Occ=Once!] xs_s3NIW [Occ=Once] ->
                                case ds5_s3NIV of {
                                  GHC.Types.C# ds6_s3NIY [Occ=Once!] ->
                                      case ds6_s3NIY of {
                                        __DEFAULT ->
                                            let {
                                              sat_s3NJ0 [Occ=Once] :: [GHC.Types.Char]
                                              [LclId] =
                                                  [wild2_s3NIU] \u []
                                                      GHC.Read.lexLitChar_removeNulls wild2_s3NIU;
                                            } in  : [wild1_s3NIQ sat_s3NJ0];
                                        '&'# -> GHC.Read.lexLitChar_removeNulls xs_s3NIW;
                                      };
                                };
                          };
                    };
              };
        };

GHC.Read.lexLitChar4
  :: GHC.Base.String
     -> Text.ParserCombinators.ReadP.P [GHC.Types.Char]
[GblId, Arity=1, Str=<L,1*U>m4, Unf=OtherCon []] =
    [] \r [s_s3NJ1]
        let {
          sat_s3NJ2 [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [s_s3NJ1] \u [] GHC.Read.lexLitChar_removeNulls s_s3NJ1;
        } in 
          Text.ParserCombinators.ReadP.Result [sat_s3NJ2
                                               Text.ParserCombinators.ReadP.Fail];

GHC.Read.lexLitChar3
  :: Text.ParserCombinators.ReadP.P
       (GHC.Base.String
        -> Text.ParserCombinators.ReadP.P [GHC.Types.Char])
[GblId, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE Text.ParserCombinators.ReadP.Result! [GHC.Read.lexLitChar4
                                                        Text.ParserCombinators.ReadP.Fail];

GHC.Read.lexLitChar2
  :: GHC.Types.Char
     -> Text.ParserCombinators.ReadP.P
          (GHC.Base.String
           -> Text.ParserCombinators.ReadP.P [GHC.Types.Char])
[GblId, Arity=1, Str=<L,A>m4, Unf=OtherCon []] =
    [] \r [a1_s3NJ3] GHC.Read.lexLitChar3;

GHC.Read.lexLitChar1
  :: Text.ParserCombinators.ReadP.P [GHC.Types.Char]
[GblId] =
    [] \u []
        case Text.Read.Lex.$wlexChar GHC.Read.lexLitChar2 of {
          Unit# ww1_s3NJ5 [Occ=Once] ->
              let {
                sat_s3NJ6 [Occ=Once]
                  :: Text.ParserCombinators.ReadP.P
                       (GHC.Base.String
                        -> Text.ParserCombinators.ReadP.P [GHC.Types.Char])
                [LclId] =
                    CCCS Text.ParserCombinators.ReadP.Get! [ww1_s3NJ5];
              } in 
                Text.ParserCombinators.ReadP.gather_gath GHC.Base.id sat_s3NJ6;
        };

GHC.Read.lexLitChar
  :: Text.ParserCombinators.ReadP.ReadS GHC.Base.String
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.lexLitChar1 eta_B1;

GHC.Read.C:Read
  :: forall a.
     (GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS a)
     -> Text.ParserCombinators.ReadP.ReadS [a]
     -> Text.ParserCombinators.ReadPrec.ReadPrec a
     -> Text.ParserCombinators.ReadPrec.ReadPrec [a]
     -> GHC.Read.Read a
[GblId[DataCon],
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.Read.C:Read [eta_B4 eta_B3 eta_B2 eta_B1];


==================== STG syntax: ====================
2018-03-16 15:58:27.5610073 UTC

GHC.Read.readsPrec
  :: forall a.
     GHC.Read.Read a =>
     GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS a
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SLLL),U(U,A,A,A)>] =
    [] \r [v_s3N5O]
        case v_s3N5O of {
          GHC.Read.C:Read v_s3N5Q [Occ=Once]
                          _ [Occ=Dead]
                          _ [Occ=Dead]
                          _ [Occ=Dead] ->
              v_s3N5Q;
        };

GHC.Read.readList
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadP.ReadS [a]
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LSLL),U(A,U,A,A)>] =
    [] \r [v_s3N5U]
        case v_s3N5U of {
          GHC.Read.C:Read _ [Occ=Dead]
                          v_s3N5X [Occ=Once]
                          _ [Occ=Dead]
                          _ [Occ=Dead] ->
              v_s3N5X;
        };

GHC.Read.readPrec
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadPrec.ReadPrec a
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLSL),U(A,A,U,A)>] =
    [] \r [v_s3N60]
        case v_s3N60 of {
          GHC.Read.C:Read _ [Occ=Dead]
                          _ [Occ=Dead]
                          v_s3N64 [Occ=Once]
                          _ [Occ=Dead] ->
              v_s3N64;
        };

GHC.Read.readListPrec
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadPrec.ReadPrec [a]
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLS),U(A,A,A,U)>] =
    [] \r [v_s3N66]
        case v_s3N66 of {
          GHC.Read.C:Read _ [Occ=Dead]
                          _ [Occ=Dead]
                          _ [Occ=Dead]
                          v_s3N6b [Occ=Once] ->
              v_s3N6b;
        };

$dmreadListPrec1_r3N5i
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        ([a] -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*U(A,1*C(U),A,A)><L,A><L,C(U)>m2,
 Unf=OtherCon []] =
    sat-only [] \r [$dRead_s3N6c n_s3N6d eta_s3N6e]
        let {
          sat_s3N6f [Occ=Once, Dmd=<L,C(U)>]
            :: Text.ParserCombinators.ReadP.ReadS [a_a3K2E]
          [LclId] =
              [$dRead_s3N6c] \u [] GHC.Read.readList $dRead_s3N6c;
        } in 
          case
              Text.ParserCombinators.ReadP.$wreadS_to_P sat_s3N6f eta_s3N6e
          of
          { Unit# ww1_s3N6h [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3N6h];
          };

GHC.Read.$dmreadListPrec
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadPrec.ReadPrec [a]
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*U(A,1*C(U),A,A)><L,A><L,C(U)>m2,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        $dmreadListPrec1_r3N5i eta_B3 eta_B2 eta_B1;

$dmreadPrec1_r3N5j
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*U(1*C1(C(U)),A,A,A)><L,U>,
 Unf=OtherCon []] =
    sat-only [] \r [$dRead_s3N6i eta_s3N6j]
        let {
          w_s3N6k [Occ=OnceL, Dmd=<L,C(U)>]
            :: Text.ParserCombinators.ReadP.ReadS a_X3K6w
          [LclId] =
              [$dRead_s3N6i eta_s3N6j] \u []
                  GHC.Read.readsPrec $dRead_s3N6i eta_s3N6j; } in
        let {
          sat_s3N6o [Occ=Once]
            :: forall b.
               (a_X3K6w -> Text.ParserCombinators.ReadP.P b)
               -> Text.ParserCombinators.ReadP.P b
          [LclId] =
              [w_s3N6k] \r [w1_s3N6l]
                  case
                      Text.ParserCombinators.ReadP.$wreadS_to_P w_s3N6k w1_s3N6l
                  of
                  { Unit# ww1_s3N6n [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Look [ww1_s3N6n];
                  };
        } in  sat_s3N6o;

GHC.Read.$dmreadPrec
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadPrec.ReadPrec a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*U(1*C1(C(U)),A,A,A)><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] $dmreadPrec1_r3N5j eta_B2 eta_B1;

GHC.Read.$dmreadsPrec
  :: forall a.
     GHC.Read.Read a =>
     GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*U(A,A,1*C1(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3N6p eta_s3N6q]
        let {
          sat_s3N6r [Occ=Once] :: Text.ParserCombinators.ReadP.P a_X3K6x
          [LclId] =
              [$dRead_s3N6p eta_s3N6q] \u []
                  GHC.Read.readPrec
                      $dRead_s3N6p
                      eta_s3N6q
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3N6r;

GHC.Read.$fRead()7 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

GHC.Read.readListDefault
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadP.ReadS [a]
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,1*U(A,A,A,1*C1(C1(U)))>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3N6s]
        let {
          sat_s3N6t [Occ=Once] :: Text.ParserCombinators.ReadP.P [a_a3Ksg]
          [LclId] =
              [$dRead_s3N6s] \u []
                  GHC.Read.readListPrec
                      $dRead_s3N6s
                      GHC.Read.$fRead()7
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3N6t;

GHC.Read.lex1 :: Text.ParserCombinators.ReadP.P GHC.Base.String
[GblId] =
    [] \u []
        case
            Text.Read.Lex.$whsLex
                Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
        of
        { Unit# ww1_s3N6v [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3N6v];
        };

GHC.Read.lex :: Text.ParserCombinators.ReadP.ReadS GHC.Base.String
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [s_s3N6w]
        Text.ParserCombinators.ReadP.run GHC.Read.lex1 s_s3N6w;

GHC.Read.readParen1 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     a
     -> GHC.Base.String
     -> [(a, GHC.Base.String)]
     -> [(a, GHC.Base.String)]
[GblId, Arity=3, Str=<L,U><L,U><L,U>, Unf=OtherCon []] =
    [] \r [ww_s3N6x ww1_s3N6y w_s3N6z]
        let {
          go_s3N6A [Occ=LoopBreaker]
            :: [(GHC.Base.String, GHC.Base.String)]
               -> [(a_a3Ksn, GHC.Base.String)]
          [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
              sat-only [ww_s3N6x w_s3N6z go_s3N6A] \r [ds_s3N6B]
                  case ds_s3N6B of {
                    [] -> w_s3N6z;
                    : y_s3N6D [Occ=Once!] ys_s3N6E [Occ=Once*] ->
                        case y_s3N6D of {
                          (,) ds1_s3N6G [Occ=Once!] u_s3N6H [Occ=Once] ->
                              case ds1_s3N6G of {
                                [] -> go_s3N6A ys_s3N6E;
                                : ds2_s3N6J [Occ=Once!] ds3_s3N6K [Occ=Once!] ->
                                    case ds2_s3N6J of {
                                      GHC.Types.C# ds4_s3N6M [Occ=Once!] ->
                                          case ds4_s3N6M of {
                                            __DEFAULT -> go_s3N6A ys_s3N6E;
                                            ')'# ->
                                                case ds3_s3N6K of {
                                                  [] ->
                                                      let {
                                                        sat_s3N6Q [Occ=Once]
                                                          :: [(a_a3Ksn, GHC.Base.String)]
                                                        [LclId] =
                                                            [go_s3N6A ys_s3N6E] \u []
                                                                go_s3N6A ys_s3N6E; } in
                                                      let {
                                                        sat_s3N6P [Occ=Once]
                                                          :: (a_a3Ksn, GHC.Base.String)
                                                        [LclId] =
                                                            CCCS (,)! [ww_s3N6x u_s3N6H];
                                                      } in  : [sat_s3N6P sat_s3N6Q];
                                                  : _ [Occ=Dead] _ [Occ=Dead] -> go_s3N6A ys_s3N6E;
                                                };
                                          };
                                    };
                              };
                        };
                  };
        } in 
          case
              Text.ParserCombinators.ReadP.run GHC.Read.lex1 ww1_s3N6y
          of
          sat_s3N6T
          { __DEFAULT -> go_s3N6A sat_s3N6T;
          };

GHC.Read.readParen
  :: forall a.
     GHC.Types.Bool
     -> Text.ParserCombinators.ReadP.ReadS a
     -> Text.ParserCombinators.ReadP.ReadS a
[GblId, Arity=3, Str=<S,1*U><L,C(U)><L,U>, Unf=OtherCon []] =
    [] \r [b_s3N6U g_s3N6V eta_s3N6W]
        let {
          go_s3N6X [Occ=LoopBreaker]
            :: [(GHC.Base.String, GHC.Base.String)]
               -> [(a_a3Ksn, GHC.Base.String)]
          [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
              sat-only [g_s3N6V go_s3N6X] \r [ds_s3N6Y]
                  case ds_s3N6Y of {
                    [] -> [] [];
                    : y_s3N70 [Occ=Once!] ys_s3N71 [Occ=Once*] ->
                        case y_s3N70 of {
                          (,) ds1_s3N73 [Occ=Once!] s_s3N74 ->
                              case ds1_s3N73 of {
                                [] -> go_s3N6X ys_s3N71;
                                : ds2_s3N76 [Occ=Once!] ds3_s3N77 [Occ=Once!] ->
                                    case ds2_s3N76 of {
                                      GHC.Types.C# ds4_s3N79 [Occ=Once!] ->
                                          case ds4_s3N79 of {
                                            __DEFAULT -> go_s3N6X ys_s3N71;
                                            '('# ->
                                                case ds3_s3N77 of {
                                                  [] ->
                                                      let {
                                                        z_s3N7c [Occ=OnceL]
                                                          :: [(a_a3Ksn, GHC.Base.String)]
                                                        [LclId] =
                                                            [go_s3N6X ys_s3N71 s_s3N74] \u []
                                                                let {
                                                                  z1_s3N7d [Occ=OnceL]
                                                                    :: [(a_a3Ksn, GHC.Base.String)]
                                                                  [LclId] =
                                                                      [go_s3N6X ys_s3N71] \u []
                                                                          go_s3N6X ys_s3N71; } in
                                                                let {
                                                                  go1_s3N7e [Occ=LoopBreaker]
                                                                    :: [(a_a3Ksn, GHC.Base.String)]
                                                                       -> [(a_a3Ksn,
                                                                            GHC.Base.String)]
                                                                  [LclId,
                                                                   Arity=1,
                                                                   Str=<S,1*U>,
                                                                   Unf=OtherCon []] =
                                                                      sat-only [z1_s3N7d
                                                                                go1_s3N7e] \r [ds6_s3N7f]
                                                                          case ds6_s3N7f of {
                                                                            [] -> z1_s3N7d;
                                                                            : y1_s3N7h [Occ=Once!]
                                                                              ys1_s3N7i [Occ=Once] ->
                                                                                case y1_s3N7h of {
                                                                                  (,) ww1_s3N7k [Occ=Once]
                                                                                      ww2_s3N7l [Occ=Once] ->
                                                                                      let {
                                                                                        sat_s3N7m [Occ=Once]
                                                                                          :: [(a_a3Ksn,
                                                                                               GHC.Base.String)]
                                                                                        [LclId] =
                                                                                            [go1_s3N7e
                                                                                             ys1_s3N7i] \u []
                                                                                                go1_s3N7e
                                                                                                    ys1_s3N7i;
                                                                                      } in 
                                                                                        GHC.Read.readParen1
                                                                                            ww1_s3N7k
                                                                                            ww2_s3N7l
                                                                                            sat_s3N7m;
                                                                                };
                                                                          };
                                                                } in 
                                                                  case
                                                                      Text.ParserCombinators.ReadP.run
                                                                          GHC.Read.lex1 s_s3N74
                                                                  of
                                                                  sat_s3N7n
                                                                  { __DEFAULT ->
                                                                        case
                                                                            go_s3N6X sat_s3N7n
                                                                        of
                                                                        sat_s3N7o
                                                                        { __DEFAULT ->
                                                                              go1_s3N7e sat_s3N7o;
                                                                        };
                                                                  }; } in
                                                      let {
                                                        go1_s3N7p [Occ=LoopBreaker]
                                                          :: [(a_a3Ksn, GHC.Base.String)]
                                                             -> [(a_a3Ksn, GHC.Base.String)]
                                                        [LclId,
                                                         Arity=1,
                                                         Str=<S,1*U>,
                                                         Unf=OtherCon []] =
                                                            sat-only [z_s3N7c
                                                                      go1_s3N7p] \r [ds6_s3N7q]
                                                                case ds6_s3N7q of {
                                                                  [] -> z_s3N7c;
                                                                  : y1_s3N7s [Occ=Once!]
                                                                    ys1_s3N7t [Occ=Once] ->
                                                                      case y1_s3N7s of {
                                                                        (,) ww1_s3N7v [Occ=Once]
                                                                            ww2_s3N7w [Occ=Once] ->
                                                                            let {
                                                                              sat_s3N7x [Occ=Once]
                                                                                :: [(a_a3Ksn,
                                                                                     GHC.Base.String)]
                                                                              [LclId] =
                                                                                  [go1_s3N7p
                                                                                   ys1_s3N7t] \u []
                                                                                      go1_s3N7p
                                                                                          ys1_s3N7t;
                                                                            } in 
                                                                              GHC.Read.readParen1
                                                                                  ww1_s3N7v
                                                                                  ww2_s3N7w
                                                                                  sat_s3N7x;
                                                                      };
                                                                };
                                                      } in 
                                                        case g_s3N6V s_s3N74 of sat_s3N7y {
                                                          __DEFAULT -> go1_s3N7p sat_s3N7y;
                                                        };
                                                  : _ [Occ=Dead] _ [Occ=Dead] -> go_s3N6X ys_s3N71;
                                                };
                                          };
                                    };
                              };
                        };
                  };
        } in 
          case b_s3N6U of {
            GHC.Types.False ->
                let {
                  sat_s3N7E [Occ=Once, Dmd=<L,1*U>] :: [(a_a3Ksn, GHC.Base.String)]
                  [LclId] =
                      [eta_s3N6W go_s3N6X] \s []
                          case
                              Text.ParserCombinators.ReadP.run GHC.Read.lex1 eta_s3N6W
                          of
                          sat_s3N7D
                          { __DEFAULT -> go_s3N6X sat_s3N7D;
                          };
                } in 
                  case g_s3N6V eta_s3N6W of sat_s3N7C {
                    __DEFAULT -> GHC.Base.++ sat_s3N7C sat_s3N7E;
                  };
            GHC.Types.True ->
                case
                    Text.ParserCombinators.ReadP.run GHC.Read.lex1 eta_s3N6W
                of
                sat_s3N7F
                { __DEFAULT -> go_s3N6X sat_s3N7F;
                };
          };

GHC.Read.readLitChar1
  :: Text.ParserCombinators.ReadP.P GHC.Types.Char
[GblId] =
    [] \u []
        case
            Text.Read.Lex.$wlexChar
                Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
        of
        { Unit# ww1_s3N7H [Occ=Once] ->
              Text.ParserCombinators.ReadP.Get [ww1_s3N7H];
        };

GHC.Read.readLitChar
  :: Text.ParserCombinators.ReadP.ReadS GHC.Types.Char
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.readLitChar1 eta_B1;

GHC.Read.$www1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Char# -> Text.ParserCombinators.ReadP.P GHC.Base.String
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [ww_s3N7I]
        case ord# [ww_s3N7I] of sat_s3N7J {
          __DEFAULT ->
              case -# [sat_s3N7J 48#] of sat_s3N7K {
                __DEFAULT ->
                    case int2Word# [sat_s3N7K] of sat_s3N7L {
                      __DEFAULT ->
                          case leWord# [sat_s3N7L 9##] of {
                            __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                            1# ->
                                let {
                                  wild_s3N7N [Occ=OnceL] :: GHC.Types.Char
                                  [LclId, Unf=OtherCon []] =
                                      CCCS GHC.Types.C#! [ww_s3N7I]; } in
                                let {
                                  sat_s3N7Q [Occ=Once]
                                    :: GHC.Base.String
                                       -> Text.ParserCombinators.ReadP.P GHC.Base.String
                                  [LclId] =
                                      [wild_s3N7N] \r [a1_s3N7O]
                                          let {
                                            sat_s3N7P [Occ=Once] :: GHC.Base.String
                                            [LclId] =
                                                CCCS :! [wild_s3N7N a1_s3N7O];
                                          } in 
                                            Text.ParserCombinators.ReadP.Result [sat_s3N7P
                                                                                 Text.ParserCombinators.ReadP.Fail];
                                } in 
                                  case
                                      Text.ParserCombinators.ReadP.$wmunch
                                          GHC.Unicode.isDigit sat_s3N7Q
                                  of
                                  { Unit# ww2_s3N7S [Occ=Once] ->
                                        Text.ParserCombinators.ReadP.Look [ww2_s3N7S];
                                  };
                          };
                    };
              };
        };

GHC.Read.lexDigits_ww1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P GHC.Base.String
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [w_s3N7T]
        case w_s3N7T of {
          GHC.Types.C# ww1_s3N7V [Occ=Once] -> GHC.Read.$www1 ww1_s3N7V;
        };

GHC.Read.lexDigits1
  :: Text.ParserCombinators.ReadP.P GHC.Base.String
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE Text.ParserCombinators.ReadP.Get! [GHC.Read.lexDigits_ww1];

GHC.Read.lexDigits
  :: Text.ParserCombinators.ReadP.ReadS GHC.Base.String
[GblId, Arity=1, Caf=NoCafRefs, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.lexDigits1 eta_B1;

GHC.Read.$fReadLexeme1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        (Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=2, Str=<L,A><L,U>m2, Unf=OtherCon []] =
    [] \r [ds_s3N7W eta_s3N7X] Text.Read.Lex.lex1 eta_s3N7X;

GHC.Read.lexP
  :: Text.ParserCombinators.ReadPrec.ReadPrec Text.Read.Lex.Lexeme
[GblId, Arity=2, Str=<L,A><L,U>m2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Read.$fReadLexeme1 eta_B2 eta_B1;

GHC.Read.$fReadChar4
  :: forall b. GHC.Base.String -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [a3_s3N7Y]
        case a3_s3N7Y of {
          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
        };

GHC.Read.$fReadChar3 :: forall b. Text.ParserCombinators.ReadP.P b
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE Text.ParserCombinators.ReadP.Look! [GHC.Read.$fReadChar4];

GHC.Read.$fReadGeneralCategory36
  :: forall a.
     (GHC.Base.String, Text.ParserCombinators.ReadPrec.ReadPrec a)
     -> Text.ParserCombinators.ReadPrec.ReadPrec a
     -> Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP a
[GblId,
 Arity=3,
 Str=<L,U(U,C(C1(U)))><L,1*C1(C(U))><L,U>,
 Unf=OtherCon []] =
    [] \r [x_s3N80 eta_s3N81 eta1_s3N82]
        let {
          ds3_s3N83 [Occ=OnceL, Dmd=<L,C(U)>]
            :: Text.ParserCombinators.ReadP.ReadP a_a3Kqu
          [LclId] =
              [eta_s3N81 eta1_s3N82] \u [] eta_s3N81 eta1_s3N82; } in
        let {
          sat_s3N8o [Occ=Once]
            :: forall b.
               (a_a3Kqu -> Text.ParserCombinators.ReadP.P b)
               -> Text.ParserCombinators.ReadP.P b
          [LclId] =
              [x_s3N80 eta1_s3N82 ds3_s3N83] \r [k_s3N84]
                  case x_s3N80 of {
                    (,) s_s3N86 [Occ=OnceL*] p_s3N87 ->
                        let {
                          lvl116_s3N88 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b_a3nvJ
                          [LclId] =
                              [eta1_s3N82 k_s3N84 s_s3N86 p_s3N87] \u []
                                  let {
                                    sat_s3N8h [Occ=Once] :: Text.ParserCombinators.ReadP.P b_a3nvJ
                                    [LclId] =
                                        [eta1_s3N82 k_s3N84 s_s3N86 p_s3N87] \u []
                                            let {
                                              lvl2_s3N89 [Occ=OnceL*]
                                                :: Text.ParserCombinators.ReadP.P b_a3nvJ
                                              [LclId] =
                                                  [eta1_s3N82 k_s3N84 p_s3N87] \u []
                                                      p_s3N87 eta1_s3N82 k_s3N84; } in
                                            let {
                                              sat_s3N8g [Occ=Once]
                                                :: Text.Read.Lex.Lexeme
                                                   -> Text.ParserCombinators.ReadP.P b_a3nvJ
                                              [LclId] =
                                                  [s_s3N86 lvl2_s3N89] \r [a1_s3N8a]
                                                      case a1_s3N8a of {
                                                        __DEFAULT ->
                                                            Text.ParserCombinators.ReadP.Fail [];
                                                        Text.Read.Lex.Ident s'_s3N8c [Occ=Once] ->
                                                            case
                                                                GHC.Base.eqString s_s3N86 s'_s3N8c
                                                            of
                                                            { GHC.Types.False ->
                                                                  Text.ParserCombinators.ReadP.Fail [];
                                                              GHC.Types.True -> lvl2_s3N89;
                                                            };
                                                        Text.Read.Lex.Symbol s'_s3N8e [Occ=Once] ->
                                                            case
                                                                GHC.Base.eqString s_s3N86 s'_s3N8e
                                                            of
                                                            { GHC.Types.False ->
                                                                  Text.ParserCombinators.ReadP.Fail [];
                                                              GHC.Types.True -> lvl2_s3N89;
                                                            };
                                                      };
                                            } in  Text.Read.Lex.expect2 sat_s3N8g;
                                  } in 
                                    Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                        GHC.Read.$fReadChar3 sat_s3N8h; } in
                        let {
                          k1_s3N8i [Occ=OnceL, Dmd=<L,C(U)>]
                            :: () -> Text.ParserCombinators.ReadP.P b_a3nvJ
                          [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
                              [lvl116_s3N88] \r [a3_s3N8j] lvl116_s3N88; } in
                        let {
                          sat_s3N8n [Occ=Once] :: Text.ParserCombinators.ReadP.P b_a3nvJ
                          [LclId] =
                              [ds3_s3N83 k_s3N84] \u [] ds3_s3N83 k_s3N84; } in
                        let {
                          sat_s3N8l [Occ=Once]
                            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b_a3nvJ
                          [LclId] =
                              [k1_s3N8i] \r [a1_s3N8k]
                                  Text.ParserCombinators.ReadP.skipSpaces2 a1_s3N8k k1_s3N8i; } in
                        let {
                          sat_s3N8m [Occ=Once] :: Text.ParserCombinators.ReadP.P b_a3nvJ
                          [LclId] =
                              CCCS Text.ParserCombinators.ReadP.Look! [sat_s3N8l];
                        } in 
                          Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                              sat_s3N8m sat_s3N8n;
                  };
        } in  sat_s3N8o;

lvl_r3N5k
  :: forall a b.
     (a -> Text.ParserCombinators.ReadP.P b)
     -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []] =
    [] \r [eta_s3N8p] Text.ParserCombinators.ReadP.Fail [];

GHC.Read.choose2 [Occ=LoopBreaker]
  :: forall a.
     [(GHC.Base.String, Text.ParserCombinators.ReadPrec.ReadPrec a)]
     -> Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP a
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ds_s3N8q eta_s3N8r]
        case ds_s3N8q of {
          [] -> lvl_r3N5k;
          : y_s3N8t [Occ=Once] ys_s3N8u [Occ=OnceL] ->
              let {
                sat_s3N8v [Occ=Once]
                  :: Text.ParserCombinators.ReadPrec.ReadPrec a_a3Kqu
                [LclId] =
                    [ys_s3N8u] \r [eta_B1] GHC.Read.choose2 ys_s3N8u eta_B1;
              } in  GHC.Read.$fReadGeneralCategory36 y_s3N8t sat_s3N8v eta_s3N8r;
        };

GHC.Read.choose1
  :: forall a.
     [(GHC.Base.String, Text.ParserCombinators.ReadPrec.ReadPrec a)]
     -> Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP a
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [sps_s3N8w eta_s3N8x] GHC.Read.choose2 sps_s3N8w eta_s3N8x;

GHC.Read.choose
  :: forall a.
     [(GHC.Base.String, Text.ParserCombinators.ReadPrec.ReadPrec a)]
     -> Text.ParserCombinators.ReadPrec.ReadPrec a
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Read.choose1 eta_B2 eta_B1;

GHC.Read.expectP1
  :: Text.Read.Lex.Lexeme
     -> Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (() -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=3, Str=<L,U><L,A><L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [lexeme_s3N8y eta_s3N8z eta1_s3N8A]
        Text.Read.Lex.expect1 lexeme_s3N8y eta1_s3N8A;

GHC.Read.expectP
  :: Text.Read.Lex.Lexeme
     -> Text.ParserCombinators.ReadPrec.ReadPrec ()
[GblId, Arity=3, Str=<L,U><L,A><L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.Read.expectP1 eta_B3 eta_B2 eta_B1;

GHC.Read.readField3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "="#;

GHC.Read.readField2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Read.readField3;

GHC.Read.readField_lexeme :: Text.Read.Lex.Lexeme
[GblId, Str=m3, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Punc! [GHC.Read.readField2];

GHC.Read.$wreadField [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Base.String
     -> Text.ParserCombinators.ReadPrec.ReadPrec a
     -> Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> (# GHC.Base.String -> Text.ParserCombinators.ReadP.P b #)
[GblId,
 Arity=4,
 Str=<L,U><L,1*C1(C1(U))><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [w_s3N8B w1_s3N8C w2_s3N8D w3_s3N8E]
        let {
          sat_s3N8L [Occ=Once]
            :: () -> Text.ParserCombinators.ReadP.P b_s3MnQ
          [LclId] =
              [w1_s3N8C w2_s3N8D w3_s3N8E] \r [a1_s3N8G]
                  let {
                    sat_s3N8I [Occ=Once]
                      :: () -> Text.ParserCombinators.ReadP.P b_s3MnQ
                    [LclId] =
                        [w1_s3N8C w2_s3N8D w3_s3N8E] \r [a2_s3N8H]
                            w1_s3N8C w2_s3N8D w3_s3N8E;
                  } in 
                    case
                        Text.Read.Lex.$wexpect GHC.Read.readField_lexeme sat_s3N8I
                    of
                    { Unit# ww1_s3N8K [Occ=Once] ->
                          Text.ParserCombinators.ReadP.Look [ww1_s3N8K];
                    }; } in
        let {
          sat_s3N8F [Occ=Once] :: Text.Read.Lex.Lexeme
          [LclId] =
              CCCS Text.Read.Lex.Ident! [w_s3N8B];
        } in  Text.Read.Lex.$wexpect sat_s3N8F sat_s3N8L;

GHC.Read.readField1 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Base.String
     -> Text.ParserCombinators.ReadPrec.ReadPrec a
     -> Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=4,
 Str=<L,U><L,1*C1(C1(U))><L,U><L,U>m2,
 Unf=OtherCon []] =
    [] \r [w_s3N8M w1_s3N8N w2_s3N8O w3_s3N8P]
        case GHC.Read.$wreadField w_s3N8M w1_s3N8N w2_s3N8O w3_s3N8P of {
          Unit# ww1_s3N8R [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3N8R];
        };

GHC.Read.readField [InlPrag=NOINLINE]
  :: forall a.
     GHC.Base.String
     -> Text.ParserCombinators.ReadPrec.ReadPrec a
     -> Text.ParserCombinators.ReadPrec.ReadPrec a
[GblId,
 Arity=4,
 Str=<L,U><L,1*C1(C1(U))><L,U><L,U>m2,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.Read.readField1 eta_B4 eta_B3 eta_B2 eta_B1;

GHC.Read.readSymField5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "("#;

GHC.Read.readSymField4 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Read.readSymField5;

GHC.Read.readSymField_lexeme1 :: Text.Read.Lex.Lexeme
[GblId, Str=m3, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Punc! [GHC.Read.readSymField4];

GHC.Read.readSymField3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ")"#;

GHC.Read.readSymField2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Read.readSymField3;

GHC.Read.readSymField_lexeme :: Text.Read.Lex.Lexeme
[GblId, Str=m3, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Punc! [GHC.Read.readSymField2];

GHC.Read.$wreadSymField [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Base.String
     -> Text.ParserCombinators.ReadPrec.ReadPrec a
     -> Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> (# GHC.Base.String -> Text.ParserCombinators.ReadP.P b #)
[GblId,
 Arity=4,
 Str=<L,U><L,1*C1(C1(U))><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [w_s3N8S w1_s3N8T w2_s3N8U w3_s3N8V]
        let {
          sat_s3N9a [Occ=Once]
            :: () -> Text.ParserCombinators.ReadP.P b_s3Mo0
          [LclId] =
              [w_s3N8S w1_s3N8T w2_s3N8U w3_s3N8V] \r [a1_s3N8W]
                  let {
                    sat_s3N97 [Occ=Once]
                      :: () -> Text.ParserCombinators.ReadP.P b_s3Mo0
                    [LclId] =
                        [w1_s3N8T w2_s3N8U w3_s3N8V] \r [a2_s3N8Y]
                            let {
                              sat_s3N94 [Occ=Once]
                                :: () -> Text.ParserCombinators.ReadP.P b_s3Mo0
                              [LclId] =
                                  [w1_s3N8T w2_s3N8U w3_s3N8V] \r [a3_s3N8Z]
                                      let {
                                        sat_s3N91 [Occ=Once]
                                          :: () -> Text.ParserCombinators.ReadP.P b_s3Mo0
                                        [LclId] =
                                            [w1_s3N8T w2_s3N8U w3_s3N8V] \r [a4_s3N90]
                                                w1_s3N8T w2_s3N8U w3_s3N8V;
                                      } in 
                                        case
                                            Text.Read.Lex.$wexpect
                                                GHC.Read.readField_lexeme sat_s3N91
                                        of
                                        { Unit# ww1_s3N93 [Occ=Once] ->
                                              Text.ParserCombinators.ReadP.Look [ww1_s3N93];
                                        };
                            } in 
                              case
                                  Text.Read.Lex.$wexpect GHC.Read.readSymField_lexeme sat_s3N94
                              of
                              { Unit# ww1_s3N96 [Occ=Once] ->
                                    Text.ParserCombinators.ReadP.Look [ww1_s3N96];
                              }; } in
                  let {
                    sat_s3N8X [Occ=Once] :: Text.Read.Lex.Lexeme
                    [LclId] =
                        CCCS Text.Read.Lex.Symbol! [w_s3N8S];
                  } in 
                    case Text.Read.Lex.$wexpect sat_s3N8X sat_s3N97 of {
                      Unit# ww1_s3N99 [Occ=Once] ->
                          Text.ParserCombinators.ReadP.Look [ww1_s3N99];
                    };
        } in 
          Text.Read.Lex.$wexpect GHC.Read.readSymField_lexeme1 sat_s3N9a;

GHC.Read.readSymField1 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Base.String
     -> Text.ParserCombinators.ReadPrec.ReadPrec a
     -> Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=4,
 Str=<L,U><L,1*C1(C1(U))><L,U><L,U>m2,
 Unf=OtherCon []] =
    [] \r [w_s3N9b w1_s3N9c w2_s3N9d w3_s3N9e]
        case
            GHC.Read.$wreadSymField w_s3N9b w1_s3N9c w2_s3N9d w3_s3N9e
        of
        { Unit# ww1_s3N9g [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3N9g];
        };

GHC.Read.readSymField [InlPrag=NOINLINE]
  :: forall a.
     GHC.Base.String
     -> Text.ParserCombinators.ReadPrec.ReadPrec a
     -> Text.ParserCombinators.ReadPrec.ReadPrec a
[GblId,
 Arity=4,
 Str=<L,U><L,1*C1(C1(U))><L,U><L,U>m2,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.Read.readSymField1 eta_B4 eta_B3 eta_B2 eta_B1;

GHC.Read.$fRead(,)4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ","#;

GHC.Read.$fRead(,)3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Read.$fRead(,)4;

GHC.Read.$fRead(,)_lexeme :: Text.Read.Lex.Lexeme
[GblId, Str=m3, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Punc! [GHC.Read.$fRead(,)3];

GHC.Read.$fRead(,)2
  :: forall a b.
     (GHC.Read.Read a, GHC.Read.Read b) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP (a, b)
[GblId,
 Arity=3,
 Str=<L,1*U(A,A,1*C1(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3N9h $dRead1_s3N9i eta_s3N9j]
        let {
          ds1_s3N9k [Occ=OnceL, Dmd=<L,C(U)>]
            :: Text.ParserCombinators.ReadP.ReadP a_a3KnF
          [LclId] =
              [$dRead_s3N9h eta_s3N9j] \u []
                  GHC.Read.readPrec $dRead_s3N9h eta_s3N9j; } in
        let {
          sat_s3N9v [Occ=Once]
            :: forall b1.
               ((a_a3KnF, b_a3KnG) -> Text.ParserCombinators.ReadP.P b1)
               -> Text.ParserCombinators.ReadP.P b1
          [LclId] =
              [$dRead1_s3N9i eta_s3N9j ds1_s3N9k] \r [k1_s3N9l]
                  let {
                    sat_s3N9u [Occ=Once]
                      :: a_a3KnF -> Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId] =
                        [$dRead1_s3N9i eta_s3N9j k1_s3N9l] \r [a1_s3N9m]
                            let {
                              sat_s3N9r [Occ=Once]
                                :: () -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [$dRead1_s3N9i eta_s3N9j k1_s3N9l a1_s3N9m] \r [a2_s3N9n]
                                      let {
                                        sat_s3N9q [Occ=Once]
                                          :: b_a3KnG -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            [k1_s3N9l a1_s3N9m] \r [a3_s3N9o]
                                                let {
                                                  sat_s3N9p [Occ=Once] :: (a_a3KnF, b_a3KnG)
                                                  [LclId] =
                                                      CCCS (,)! [a1_s3N9m a3_s3N9o];
                                                } in  k1_s3N9l sat_s3N9p;
                                      } in  GHC.Read.readPrec $dRead1_s3N9i eta_s3N9j sat_s3N9q;
                            } in 
                              case
                                  Text.Read.Lex.$wexpect GHC.Read.$fRead(,)_lexeme sat_s3N9r
                              of
                              { Unit# ww1_s3N9t [Occ=Once] ->
                                    Text.ParserCombinators.ReadP.Look [ww1_s3N9t];
                              };
                  } in  ds1_s3N9k sat_s3N9u;
        } in  sat_s3N9v;

GHC.Read.$fRead(,,,)2
  :: forall a b c d.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP (a, b, c, d)
[GblId,
 Arity=5,
 Str=<L,1*U(A,A,1*C1(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3N9w
           $dRead1_s3N9x
           $dRead2_s3N9y
           $dRead3_s3N9z
           eta_s3N9A]
        let {
          ds1_s3N9B [Occ=OnceL, Dmd=<L,C(U)>]
            :: Text.ParserCombinators.ReadP.ReadP (a_a3Ko6, b_a3Ko7)
          [LclId] =
              [$dRead_s3N9w $dRead1_s3N9x eta_s3N9A] \u []
                  GHC.Read.$fRead(,)2 $dRead_s3N9w $dRead1_s3N9x eta_s3N9A; } in
        let {
          sat_s3N9S [Occ=Once]
            :: forall b1.
               ((a_a3Ko6, b_a3Ko7, c_a3Ko8, d_a3Ko9)
                -> Text.ParserCombinators.ReadP.P b1)
               -> Text.ParserCombinators.ReadP.P b1
          [LclId] =
              [$dRead2_s3N9y $dRead3_s3N9z eta_s3N9A ds1_s3N9B] \r [k1_s3N9C]
                  let {
                    sat_s3N9R [Occ=Once]
                      :: (a_a3Ko6, b_a3Ko7) -> Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId] =
                        [$dRead2_s3N9y $dRead3_s3N9z eta_s3N9A k1_s3N9C] \r [a1_s3N9D]
                            case a1_s3N9D of {
                              (,) a2_s3N9F [Occ=OnceL] b2_s3N9G [Occ=OnceL] ->
                                  let {
                                    sat_s3N9O [Occ=Once]
                                      :: () -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                    [LclId] =
                                        [$dRead2_s3N9y
                                         $dRead3_s3N9z
                                         eta_s3N9A
                                         k1_s3N9C
                                         a2_s3N9F
                                         b2_s3N9G] \r [a3_s3N9H]
                                            let {
                                              sat_s3N9N [Occ=Once]
                                                :: (c_a3Ko8, d_a3Ko9)
                                                   -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                              [LclId] =
                                                  [k1_s3N9C a2_s3N9F b2_s3N9G] \r [a4_s3N9I]
                                                      case a4_s3N9I of {
                                                        (,) c1_s3N9K [Occ=Once]
                                                            d1_s3N9L [Occ=Once] ->
                                                            let {
                                                              sat_s3N9M [Occ=Once]
                                                                :: (a_a3Ko6, b_a3Ko7, c_a3Ko8,
                                                                    d_a3Ko9)
                                                              [LclId] =
                                                                  CCCS (,,,)! [a2_s3N9F
                                                                               b2_s3N9G
                                                                               c1_s3N9K
                                                                               d1_s3N9L];
                                                            } in  k1_s3N9C sat_s3N9M;
                                                      };
                                            } in 
                                              GHC.Read.$fRead(,)2
                                                  $dRead2_s3N9y $dRead3_s3N9z eta_s3N9A sat_s3N9N;
                                  } in 
                                    case
                                        Text.Read.Lex.$wexpect GHC.Read.$fRead(,)_lexeme sat_s3N9O
                                    of
                                    { Unit# ww1_s3N9Q [Occ=Once] ->
                                          Text.ParserCombinators.ReadP.Look [ww1_s3N9Q];
                                    };
                            };
                  } in  ds1_s3N9B sat_s3N9R;
        } in  sat_s3N9S;

GHC.Read.$fRead(,,,,,,,)2
  :: forall a b c d e f g h.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP (a, b, c, d, e, f, g, h)
[GblId,
 Arity=9,
 Str=<L,1*U(A,A,1*C1(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3N9T
           $dRead1_s3N9U
           $dRead2_s3N9V
           $dRead3_s3N9W
           $dRead4_s3N9X
           $dRead5_s3N9Y
           $dRead6_s3N9Z
           $dRead7_s3Na0
           eta_s3Na1]
        let {
          ds1_s3Na2 [Occ=OnceL, Dmd=<L,C(U)>]
            :: Text.ParserCombinators.ReadP.ReadP
                 (a_a3KoH, b_a3KoI, c_a3KoJ, d_a3KoK)
          [LclId] =
              [$dRead_s3N9T
               $dRead1_s3N9U
               $dRead2_s3N9V
               $dRead3_s3N9W
               eta_s3Na1] \u []
                  GHC.Read.$fRead(,,,)2
                      $dRead_s3N9T
                      $dRead1_s3N9U
                      $dRead2_s3N9V
                      $dRead3_s3N9W
                      eta_s3Na1; } in
        let {
          sat_s3Nan [Occ=Once]
            :: forall b1.
               ((a_a3KoH, b_a3KoI, c_a3KoJ, d_a3KoK, e_a3KoL, f_a3KoM, g_a3KoN,
                 h_a3KoO)
                -> Text.ParserCombinators.ReadP.P b1)
               -> Text.ParserCombinators.ReadP.P b1
          [LclId] =
              [$dRead4_s3N9X
               $dRead5_s3N9Y
               $dRead6_s3N9Z
               $dRead7_s3Na0
               eta_s3Na1
               ds1_s3Na2] \r [k1_s3Na3]
                  let {
                    sat_s3Nam [Occ=Once]
                      :: (a_a3KoH, b_a3KoI, c_a3KoJ, d_a3KoK)
                         -> Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId] =
                        [$dRead4_s3N9X
                         $dRead5_s3N9Y
                         $dRead6_s3N9Z
                         $dRead7_s3Na0
                         eta_s3Na1
                         k1_s3Na3] \r [a1_s3Na4]
                            case a1_s3Na4 of {
                              (,,,) a2_s3Na6 [Occ=OnceL]
                                    b2_s3Na7 [Occ=OnceL]
                                    c1_s3Na8 [Occ=OnceL]
                                    d1_s3Na9 [Occ=OnceL] ->
                                  let {
                                    sat_s3Naj [Occ=Once]
                                      :: () -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                    [LclId] =
                                        [$dRead4_s3N9X
                                         $dRead5_s3N9Y
                                         $dRead6_s3N9Z
                                         $dRead7_s3Na0
                                         eta_s3Na1
                                         k1_s3Na3
                                         a2_s3Na6
                                         b2_s3Na7
                                         c1_s3Na8
                                         d1_s3Na9] \r [a3_s3Naa]
                                            let {
                                              sat_s3Nai [Occ=Once]
                                                :: (e_a3KoL, f_a3KoM, g_a3KoN, h_a3KoO)
                                                   -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                              [LclId] =
                                                  [k1_s3Na3
                                                   a2_s3Na6
                                                   b2_s3Na7
                                                   c1_s3Na8
                                                   d1_s3Na9] \r [a4_s3Nab]
                                                      case a4_s3Nab of {
                                                        (,,,) e1_s3Nad [Occ=Once]
                                                              f1_s3Nae [Occ=Once]
                                                              g1_s3Naf [Occ=Once]
                                                              h1_s3Nag [Occ=Once] ->
                                                            let {
                                                              sat_s3Nah [Occ=Once]
                                                                :: (a_a3KoH, b_a3KoI, c_a3KoJ,
                                                                    d_a3KoK, e_a3KoL, f_a3KoM,
                                                                    g_a3KoN, h_a3KoO)
                                                              [LclId] =
                                                                  CCCS (,,,,,,,)! [a2_s3Na6
                                                                                   b2_s3Na7
                                                                                   c1_s3Na8
                                                                                   d1_s3Na9
                                                                                   e1_s3Nad
                                                                                   f1_s3Nae
                                                                                   g1_s3Naf
                                                                                   h1_s3Nag];
                                                            } in  k1_s3Na3 sat_s3Nah;
                                                      };
                                            } in 
                                              GHC.Read.$fRead(,,,)2
                                                  $dRead4_s3N9X
                                                  $dRead5_s3N9Y
                                                  $dRead6_s3N9Z
                                                  $dRead7_s3Na0
                                                  eta_s3Na1
                                                  sat_s3Nai;
                                  } in 
                                    case
                                        Text.Read.Lex.$wexpect GHC.Read.$fRead(,)_lexeme sat_s3Naj
                                    of
                                    { Unit# ww1_s3Nal [Occ=Once] ->
                                          Text.ParserCombinators.ReadP.Look [ww1_s3Nal];
                                    };
                            };
                  } in  ds1_s3Na2 sat_s3Nam;
        } in  sat_s3Nan;

GHC.Read.$wskipSpacesThenP [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     Text.ParserCombinators.ReadPrec.ReadPrec a
     -> Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> (# GHC.Base.String -> Text.ParserCombinators.ReadP.P b #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [w_s3Nao w1_s3Nap w2_s3Naq]
        let {
          skip_s3Nar [Occ=LoopBreaker]
            :: [GHC.Types.Char]
               -> Text.ParserCombinators.ReadPrec.Prec
               -> forall b1.
                  (a_s3MoF -> Text.ParserCombinators.ReadP.P b1)
                  -> Text.ParserCombinators.ReadP.P b1
          [LclId, Arity=3, Str=<S,1*U><L,U><L,U>, Unf=OtherCon []] =
              sat-only [w_s3Nao skip_s3Nar] \r [ds_s3Nas eta_s3Nat eta1_s3Nau]
                  case ds_s3Nas of {
                    [] -> w_s3Nao eta_s3Nat eta1_s3Nau;
                    : c_s3Naw [Occ=Once!] s_s3Nax [Occ=Once] ->
                        case c_s3Naw of {
                          GHC.Types.C# ww1_s3Naz ->
                              case ord# [ww1_s3Naz] of sat_s3NaB {
                                __DEFAULT ->
                                    case int2Word# [sat_s3NaB] of x_s3NaA [Dmd=<S,U>] {
                                      __DEFAULT ->
                                          let-no-escape {
                                            $j_s3NaC [Occ=Once*T[0], Dmd=<L,1*U>]
                                              :: Text.ParserCombinators.ReadP.P b1_X3nqq
                                            [LclId[JoinId(0)], Unf=OtherCon []] =
                                                [skip_s3Nar eta_s3Nat eta1_s3Nau s_s3Nax] \r []
                                                    let {
                                                      lvl2_s3NaD [Occ=OnceL]
                                                        :: Text.ParserCombinators.ReadP.P b1_X3nqq
                                                      [LclId] =
                                                          [skip_s3Nar
                                                           eta_s3Nat
                                                           eta1_s3Nau
                                                           s_s3Nax] \u []
                                                              let {
                                                                sat_s3NaF [Occ=Once]
                                                                  :: a_s3MoF
                                                                     -> Text.ParserCombinators.ReadP.P
                                                                          b1_X3nqq
                                                                [LclId] =
                                                                    [eta1_s3Nau] \r [a4_s3NaE]
                                                                        eta1_s3Nau a4_s3NaE;
                                                              } in 
                                                                skip_s3Nar
                                                                    s_s3Nax
                                                                    eta_s3Nat
                                                                    sat_s3NaF; } in
                                                    let {
                                                      sat_s3NaH [Occ=Once]
                                                        :: GHC.Types.Char
                                                           -> Text.ParserCombinators.ReadP.P
                                                                b1_X3nqq
                                                      [LclId] =
                                                          [lvl2_s3NaD] \r [x1_s3NaG] lvl2_s3NaD;
                                                    } in 
                                                      Text.ParserCombinators.ReadP.Get [sat_s3NaH];
                                          } in 
                                            case leWord# [x_s3NaA 887##] of {
                                              __DEFAULT ->
                                                  case ord# [ww1_s3Naz] of sat_s3NaK {
                                                    __DEFAULT ->
                                                        case
                                                            __pkg_ccall base-4.11.0.0 [sat_s3NaK
                                                                                       GHC.Prim.realWorld#]
                                                        of
                                                        { Unit# ds2_s3NaN [Occ=Once!] ->
                                                              case ds2_s3NaN of {
                                                                __DEFAULT -> $j_s3NaC;
                                                                0# -> w_s3Nao eta_s3Nat eta1_s3Nau;
                                                              };
                                                        };
                                                  };
                                              1# ->
                                                  case x_s3NaA of wild1_s3NaP {
                                                    __DEFAULT ->
                                                        case
                                                            minusWord# [wild1_s3NaP 9##]
                                                        of
                                                        sat_s3NaQ
                                                        { __DEFAULT ->
                                                              case leWord# [sat_s3NaQ 4##] of {
                                                                __DEFAULT ->
                                                                    case wild1_s3NaP of {
                                                                      __DEFAULT ->
                                                                          w_s3Nao
                                                                              eta_s3Nat eta1_s3Nau;
                                                                      160## -> $j_s3NaC;
                                                                    };
                                                                1# -> $j_s3NaC;
                                                              };
                                                        };
                                                    32## -> $j_s3NaC;
                                                  };
                                            };
                                    };
                              };
                        };
                  }; } in
        let {
          sat_s3NaU [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b_s3MoI
          [LclId] =
              [w1_s3Nap w2_s3Naq skip_s3Nar] \r [a1_s3NaT]
                  skip_s3Nar a1_s3NaT w1_s3Nap w2_s3Naq;
        } in  Unit# [sat_s3NaU];

GHC.Read.$fRead()5 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     Text.ParserCombinators.ReadPrec.ReadPrec a
     -> Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><L,U><L,U>m2,
 Unf=OtherCon []] =
    [] \r [w_s3NaV w1_s3NaW w2_s3NaX]
        case GHC.Read.$wskipSpacesThenP w_s3NaV w1_s3NaW w2_s3NaX of {
          Unit# ww1_s3NaZ [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3NaZ];
        };

GHC.Read.$wparen' [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     Text.ParserCombinators.ReadPrec.ReadPrec a
     -> Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> (# GHC.Types.Char -> Text.ParserCombinators.ReadP.P b #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*C1(C1(U))><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [w_s3Nb0 w1_s3Nb1 w2_s3Nb2]
        let {
          lvl2_s3Nb3 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b_s3MoR
          [LclId] =
              [w_s3Nb0 w1_s3Nb1 w2_s3Nb2] \u []
                  let {
                    sat_s3Nbg [Occ=Once]
                      :: a_s3MoO -> Text.ParserCombinators.ReadP.P b_s3MoR
                    [LclId] =
                        [w1_s3Nb1 w2_s3Nb2] \r [a1_s3Nb4]
                            let {
                              sat_s3Nbd [Occ=Once]
                                :: Text.ParserCombinators.ReadPrec.ReadPrec a_s3MoO
                              [LclId] =
                                  [a1_s3Nb4] \r [n_s3Nb5 k1_s3Nb6]
                                      let {
                                        lvl3_s3Nb7 [Occ=OnceL]
                                          :: Text.ParserCombinators.ReadP.P b1_X3nNG
                                        [LclId] =
                                            [a1_s3Nb4 k1_s3Nb6] \u [] k1_s3Nb6 a1_s3Nb4; } in
                                      let {
                                        sat_s3Nbc [Occ=Once]
                                          :: GHC.Types.Char
                                             -> Text.ParserCombinators.ReadP.P b1_X3nNG
                                        [LclId] =
                                            [lvl3_s3Nb7] \r [a2_s3Nb8]
                                                case a2_s3Nb8 of {
                                                  GHC.Types.C# x_s3Nba [Occ=Once!] ->
                                                      case x_s3Nba of {
                                                        __DEFAULT ->
                                                            Text.ParserCombinators.ReadP.Fail [];
                                                        ')'# -> lvl3_s3Nb7;
                                                      };
                                                };
                                      } in  Text.ParserCombinators.ReadP.Get [sat_s3Nbc];
                            } in 
                              case GHC.Read.$wskipSpacesThenP sat_s3Nbd w1_s3Nb1 w2_s3Nb2 of {
                                Unit# ww1_s3Nbf [Occ=Once] ->
                                    Text.ParserCombinators.ReadP.Look [ww1_s3Nbf];
                              };
                  } in 
                    w_s3Nb0 Text.ParserCombinators.ReadPrec.minPrec sat_s3Nbg; } in
        let {
          sat_s3Nbl [Occ=Once]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b_s3MoR
          [LclId] =
              [lvl2_s3Nb3] \r [a1_s3Nbh]
                  case a1_s3Nbh of {
                    GHC.Types.C# x_s3Nbj [Occ=Once!] ->
                        case x_s3Nbj of {
                          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                          '('# -> lvl2_s3Nb3;
                        };
                  };
        } in  Unit# [sat_s3Nbl];

GHC.Read.paren2 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     Text.ParserCombinators.ReadPrec.ReadPrec a
     -> Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*C1(C1(U))><L,U><L,U>m1,
 Unf=OtherCon []] =
    [] \r [w_s3Nbm w1_s3Nbn w2_s3Nbo]
        case GHC.Read.$wparen' w_s3Nbm w1_s3Nbn w2_s3Nbo of {
          Unit# ww1_s3Nbq [Occ=Once] ->
              Text.ParserCombinators.ReadP.Get [ww1_s3Nbq];
        };

GHC.Read.paren1
  :: forall a.
     Text.ParserCombinators.ReadPrec.ReadPrec a
     -> Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><L,U><L,U>m2,
 Unf=OtherCon []] =
    [] \r [p_s3Nbr eta_s3Nbs eta1_s3Nbt]
        let {
          sat_s3Nbu [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec a_a3KmL
          [LclId] =
              [p_s3Nbr] \r [eta_B2 eta_B1] GHC.Read.paren2 p_s3Nbr eta_B2 eta_B1;
        } in 
          case GHC.Read.$wskipSpacesThenP sat_s3Nbu eta_s3Nbs eta1_s3Nbt of {
            Unit# ww1_s3Nbw [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3Nbw];
          };

GHC.Read.paren
  :: forall a.
     Text.ParserCombinators.ReadPrec.ReadPrec a
     -> Text.ParserCombinators.ReadPrec.ReadPrec a
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><L,U><L,U>m2,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] GHC.Read.paren1 eta_B3 eta_B2 eta_B1;

GHC.Read.list3
  :: forall a.
     Text.ParserCombinators.ReadPrec.ReadPrec a
     -> Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=3, Str=<L,C(C(U))><L,U><L,U>, Unf=OtherCon []] =
    [] \r [p_s3Nbx eta_s3Nby eta1_s3Nbz]
        let {
          optional_s3NbA [Occ=OnceL]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> Text.ParserCombinators.ReadP.ReadP a_a3KmP
          [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
              [p_s3Nbx optional1_s3NbB] \r [n_s3NbC]
                  let {
                    ds2_s3NbD [Occ=OnceL, Dmd=<L,C(U)>]
                      :: Text.ParserCombinators.ReadP.ReadP a_a3KmP
                    [LclId] =
                        [p_s3Nbx n_s3NbC] \u [] p_s3Nbx n_s3NbC; } in
                  let {
                    sat_s3NbJ [Occ=Once]
                      :: forall b1.
                         (a_a3KmP -> Text.ParserCombinators.ReadP.P b1)
                         -> Text.ParserCombinators.ReadP.P b1
                    [LclId] =
                        [optional1_s3NbB n_s3NbC ds2_s3NbD] \r [k_s3NbE]
                            let {
                              sat_s3NbI [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_a3nvJ
                              [LclId] =
                                  [optional1_s3NbB n_s3NbC k_s3NbE] \u []
                                      case GHC.Read.$wparen' optional1_s3NbB n_s3NbC k_s3NbE of {
                                        Unit# ww1_s3NbH [Occ=Once] ->
                                            Text.ParserCombinators.ReadP.Get [ww1_s3NbH];
                                      };
                            } in 
                              case ds2_s3NbD k_s3NbE of sat_s3NbF {
                                __DEFAULT ->
                                    Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                        sat_s3NbF sat_s3NbI;
                              };
                  } in  sat_s3NbJ;
          optional1_s3NbB [Occ=LoopBreaker]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> forall b1.
                  (a_a3KmP -> Text.ParserCombinators.ReadP.P b1)
                  -> Text.ParserCombinators.ReadP.P b1
          [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
              [optional_s3NbA] \r [w_s3NbK w1_s3NbL]
                  case
                      GHC.Read.$wskipSpacesThenP optional_s3NbA w_s3NbK w1_s3NbL
                  of
                  { Unit# ww1_s3NbN [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Look [ww1_s3NbN];
                  };
        } in  optional1_s3NbB eta_s3Nby eta1_s3Nbz;

GHC.Read.parens
  :: forall a.
     Text.ParserCombinators.ReadPrec.ReadPrec a
     -> Text.ParserCombinators.ReadPrec.ReadPrec a
[GblId, Arity=3, Str=<L,C(C(U))><L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] GHC.Read.list3 eta_B3 eta_B2 eta_B1;

GHC.Read.$fRead(,,,,,,,,,,,,,,)1
  :: forall a b c d e f g h i j k l m n o.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l, GHC.Read.Read m, GHC.Read.Read n,
      GHC.Read.Read o) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        ((a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)
         -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=17,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3NbO
           $dRead1_s3NbP
           $dRead2_s3NbQ
           $dRead3_s3NbR
           $dRead4_s3NbS
           $dRead5_s3NbT
           $dRead6_s3NbU
           $dRead7_s3NbV
           $dRead8_s3NbW
           $dRead9_s3NbX
           $dRead10_s3NbY
           $dRead11_s3NbZ
           $dRead12_s3Nc0
           $dRead13_s3Nc1
           $dRead14_s3Nc2
           eta_s3Nc3
           eta1_s3Nc4]
        let {
          p_s3Nc5 [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> Text.ParserCombinators.ReadP.ReadP
                    (a_a3Kwb, b_a3Kwc, c_a3Kwd, d_a3Kwe, e_a3Kwf, f_a3Kwg, g_a3Kwh,
                     h_a3Kwi, i_a3Kwj, j_a3Kwk, k_a3Kwl, l_a3Kwm, m_a3Kwn, n_a3Kwo,
                     o_a3Kwp)
          [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
              [$dRead_s3NbO
               $dRead1_s3NbP
               $dRead2_s3NbQ
               $dRead3_s3NbR
               $dRead4_s3NbS
               $dRead5_s3NbT
               $dRead6_s3NbU
               $dRead7_s3NbV
               $dRead8_s3NbW
               $dRead9_s3NbX
               $dRead10_s3NbY
               $dRead11_s3NbZ
               $dRead12_s3Nc0
               $dRead13_s3Nc1
               $dRead14_s3Nc2] \r [n1_s3Nc6]
                  let {
                    ds1_s3Nc7 [Occ=OnceL, Dmd=<L,C(U)>]
                      :: Text.ParserCombinators.ReadP.ReadP
                           (a_a3Kwb, b_a3Kwc, c_a3Kwd, d_a3Kwe, e_a3Kwf, f_a3Kwg, g_a3Kwh,
                            h_a3Kwi)
                    [LclId] =
                        [$dRead_s3NbO
                         $dRead1_s3NbP
                         $dRead2_s3NbQ
                         $dRead3_s3NbR
                         $dRead4_s3NbS
                         $dRead5_s3NbT
                         $dRead6_s3NbU
                         $dRead7_s3NbV
                         n1_s3Nc6] \u []
                            GHC.Read.$fRead(,,,,,,,)2
                                $dRead_s3NbO
                                $dRead1_s3NbP
                                $dRead2_s3NbQ
                                $dRead3_s3NbR
                                $dRead4_s3NbS
                                $dRead5_s3NbT
                                $dRead6_s3NbU
                                $dRead7_s3NbV
                                n1_s3Nc6; } in
                  let {
                    sat_s3NcL [Occ=Once]
                      :: forall b2.
                         ((a_a3Kwb, b_a3Kwc, c_a3Kwd, d_a3Kwe, e_a3Kwf, f_a3Kwg, g_a3Kwh,
                           h_a3Kwi, i_a3Kwj, j_a3Kwk, k_a3Kwl, l_a3Kwm, m_a3Kwn, n_a3Kwo,
                           o_a3Kwp)
                          -> Text.ParserCombinators.ReadP.P b2)
                         -> Text.ParserCombinators.ReadP.P b2
                    [LclId] =
                        [$dRead8_s3NbW
                         $dRead9_s3NbX
                         $dRead10_s3NbY
                         $dRead11_s3NbZ
                         $dRead12_s3Nc0
                         $dRead13_s3Nc1
                         $dRead14_s3Nc2
                         n1_s3Nc6
                         ds1_s3Nc7] \r [k1_s3Nc8]
                            let {
                              sat_s3NcK [Occ=Once]
                                :: (a_a3Kwb, b_a3Kwc, c_a3Kwd, d_a3Kwe, e_a3Kwf, f_a3Kwg, g_a3Kwh,
                                    h_a3Kwi)
                                   -> Text.ParserCombinators.ReadP.P b2_a3nIU
                              [LclId] =
                                  [$dRead8_s3NbW
                                   $dRead9_s3NbX
                                   $dRead10_s3NbY
                                   $dRead11_s3NbZ
                                   $dRead12_s3Nc0
                                   $dRead13_s3Nc1
                                   $dRead14_s3Nc2
                                   n1_s3Nc6
                                   k1_s3Nc8] \r [a1_s3Nc9]
                                      case a1_s3Nc9 of {
                                        (,,,,,,,) a2_s3Ncb [Occ=OnceL]
                                                  b3_s3Ncc [Occ=OnceL]
                                                  c1_s3Ncd [Occ=OnceL]
                                                  d1_s3Nce [Occ=OnceL]
                                                  e1_s3Ncf [Occ=OnceL]
                                                  f1_s3Ncg [Occ=OnceL]
                                                  g1_s3Nch [Occ=OnceL]
                                                  h1_s3Nci [Occ=OnceL] ->
                                            let {
                                              sat_s3NcH [Occ=Once]
                                                :: () -> Text.ParserCombinators.ReadP.P b2_a3nIU
                                              [LclId] =
                                                  [$dRead8_s3NbW
                                                   $dRead9_s3NbX
                                                   $dRead10_s3NbY
                                                   $dRead11_s3NbZ
                                                   $dRead12_s3Nc0
                                                   $dRead13_s3Nc1
                                                   $dRead14_s3Nc2
                                                   n1_s3Nc6
                                                   k1_s3Nc8
                                                   a2_s3Ncb
                                                   b3_s3Ncc
                                                   c1_s3Ncd
                                                   d1_s3Nce
                                                   e1_s3Ncf
                                                   f1_s3Ncg
                                                   g1_s3Nch
                                                   h1_s3Nci] \r [a3_s3Ncj]
                                                      let {
                                                        sat_s3NcG [Occ=Once]
                                                          :: (i_a3Kwj, j_a3Kwk, k_a3Kwl, l_a3Kwm)
                                                             -> Text.ParserCombinators.ReadP.P
                                                                  b2_a3nIU
                                                        [LclId] =
                                                            [$dRead12_s3Nc0
                                                             $dRead13_s3Nc1
                                                             $dRead14_s3Nc2
                                                             n1_s3Nc6
                                                             k1_s3Nc8
                                                             a2_s3Ncb
                                                             b3_s3Ncc
                                                             c1_s3Ncd
                                                             d1_s3Nce
                                                             e1_s3Ncf
                                                             f1_s3Ncg
                                                             g1_s3Nch
                                                             h1_s3Nci] \r [a4_s3Nck]
                                                                case a4_s3Nck of {
                                                                  (,,,) i1_s3Ncm [Occ=OnceL]
                                                                        j1_s3Ncn [Occ=OnceL]
                                                                        k2_s3Nco [Occ=OnceL]
                                                                        l1_s3Ncp [Occ=OnceL] ->
                                                                      let {
                                                                        sat_s3NcD [Occ=Once]
                                                                          :: ()
                                                                             -> Text.ParserCombinators.ReadP.P
                                                                                  b2_a3nIU
                                                                        [LclId] =
                                                                            [$dRead12_s3Nc0
                                                                             $dRead13_s3Nc1
                                                                             $dRead14_s3Nc2
                                                                             n1_s3Nc6
                                                                             k1_s3Nc8
                                                                             a2_s3Ncb
                                                                             b3_s3Ncc
                                                                             c1_s3Ncd
                                                                             d1_s3Nce
                                                                             e1_s3Ncf
                                                                             f1_s3Ncg
                                                                             g1_s3Nch
                                                                             h1_s3Nci
                                                                             i1_s3Ncm
                                                                             j1_s3Ncn
                                                                             k2_s3Nco
                                                                             l1_s3Ncp] \r [a5_s3Ncq]
                                                                                let {
                                                                                  sat_s3NcC [Occ=Once]
                                                                                    :: (m_a3Kwn,
                                                                                        n_a3Kwo)
                                                                                       -> Text.ParserCombinators.ReadP.P
                                                                                            b2_a3nIU
                                                                                  [LclId] =
                                                                                      [$dRead14_s3Nc2
                                                                                       n1_s3Nc6
                                                                                       k1_s3Nc8
                                                                                       a2_s3Ncb
                                                                                       b3_s3Ncc
                                                                                       c1_s3Ncd
                                                                                       d1_s3Nce
                                                                                       e1_s3Ncf
                                                                                       f1_s3Ncg
                                                                                       g1_s3Nch
                                                                                       h1_s3Nci
                                                                                       i1_s3Ncm
                                                                                       j1_s3Ncn
                                                                                       k2_s3Nco
                                                                                       l1_s3Ncp] \r [a6_s3Ncr]
                                                                                          case
                                                                                              a6_s3Ncr
                                                                                          of
                                                                                          { (,) m1_s3Nct [Occ=OnceL]
                                                                                                n2_s3Ncu [Occ=OnceL] ->
                                                                                                let {
                                                                                                  sat_s3Ncz [Occ=Once]
                                                                                                    :: ()
                                                                                                       -> Text.ParserCombinators.ReadP.P
                                                                                                            b2_a3nIU
                                                                                                  [LclId] =
                                                                                                      [$dRead14_s3Nc2
                                                                                                       n1_s3Nc6
                                                                                                       k1_s3Nc8
                                                                                                       a2_s3Ncb
                                                                                                       b3_s3Ncc
                                                                                                       c1_s3Ncd
                                                                                                       d1_s3Nce
                                                                                                       e1_s3Ncf
                                                                                                       f1_s3Ncg
                                                                                                       g1_s3Nch
                                                                                                       h1_s3Nci
                                                                                                       i1_s3Ncm
                                                                                                       j1_s3Ncn
                                                                                                       k2_s3Nco
                                                                                                       l1_s3Ncp
                                                                                                       m1_s3Nct
                                                                                                       n2_s3Ncu] \r [a7_s3Ncv]
                                                                                                          let {
                                                                                                            sat_s3Ncy [Occ=Once]
                                                                                                              :: o_a3Kwp
                                                                                                                 -> Text.ParserCombinators.ReadP.P
                                                                                                                      b2_a3nIU
                                                                                                            [LclId] =
                                                                                                                [k1_s3Nc8
                                                                                                                 a2_s3Ncb
                                                                                                                 b3_s3Ncc
                                                                                                                 c1_s3Ncd
                                                                                                                 d1_s3Nce
                                                                                                                 e1_s3Ncf
                                                                                                                 f1_s3Ncg
                                                                                                                 g1_s3Nch
                                                                                                                 h1_s3Nci
                                                                                                                 i1_s3Ncm
                                                                                                                 j1_s3Ncn
                                                                                                                 k2_s3Nco
                                                                                                                 l1_s3Ncp
                                                                                                                 m1_s3Nct
                                                                                                                 n2_s3Ncu] \r [a8_s3Ncw]
                                                                                                                    let {
                                                                                                                      sat_s3Ncx [Occ=Once]
                                                                                                                        :: (a_a3Kwb,
                                                                                                                            b_a3Kwc,
                                                                                                                            c_a3Kwd,
                                                                                                                            d_a3Kwe,
                                                                                                                            e_a3Kwf,
                                                                                                                            f_a3Kwg,
                                                                                                                            g_a3Kwh,
                                                                                                                            h_a3Kwi,
                                                                                                                            i_a3Kwj,
                                                                                                                            j_a3Kwk,
                                                                                                                            k_a3Kwl,
                                                                                                                            l_a3Kwm,
                                                                                                                            m_a3Kwn,
                                                                                                                            n_a3Kwo,
                                                                                                                            o_a3Kwp)
                                                                                                                      [LclId] =
                                                                                                                          CCCS (,,,,,,,,,,,,,,)! [a2_s3Ncb
                                                                                                                                                  b3_s3Ncc
                                                                                                                                                  c1_s3Ncd
                                                                                                                                                  d1_s3Nce
                                                                                                                                                  e1_s3Ncf
                                                                                                                                                  f1_s3Ncg
                                                                                                                                                  g1_s3Nch
                                                                                                                                                  h1_s3Nci
                                                                                                                                                  i1_s3Ncm
                                                                                                                                                  j1_s3Ncn
                                                                                                                                                  k2_s3Nco
                                                                                                                                                  l1_s3Ncp
                                                                                                                                                  m1_s3Nct
                                                                                                                                                  n2_s3Ncu
                                                                                                                                                  a8_s3Ncw];
                                                                                                                    } in 
                                                                                                                      k1_s3Nc8
                                                                                                                          sat_s3Ncx;
                                                                                                          } in 
                                                                                                            GHC.Read.readPrec
                                                                                                                $dRead14_s3Nc2
                                                                                                                n1_s3Nc6
                                                                                                                sat_s3Ncy;
                                                                                                } in 
                                                                                                  case
                                                                                                      Text.Read.Lex.$wexpect
                                                                                                          GHC.Read.$fRead(,)_lexeme
                                                                                                          sat_s3Ncz
                                                                                                  of
                                                                                                  { Unit# ww1_s3NcB [Occ=Once] ->
                                                                                                        Text.ParserCombinators.ReadP.Look [ww1_s3NcB];
                                                                                                  };
                                                                                          };
                                                                                } in 
                                                                                  GHC.Read.$fRead(,)2
                                                                                      $dRead12_s3Nc0
                                                                                      $dRead13_s3Nc1
                                                                                      n1_s3Nc6
                                                                                      sat_s3NcC;
                                                                      } in 
                                                                        case
                                                                            Text.Read.Lex.$wexpect
                                                                                GHC.Read.$fRead(,)_lexeme
                                                                                sat_s3NcD
                                                                        of
                                                                        { Unit# ww1_s3NcF [Occ=Once] ->
                                                                              Text.ParserCombinators.ReadP.Look [ww1_s3NcF];
                                                                        };
                                                                };
                                                      } in 
                                                        GHC.Read.$fRead(,,,)2
                                                            $dRead8_s3NbW
                                                            $dRead9_s3NbX
                                                            $dRead10_s3NbY
                                                            $dRead11_s3NbZ
                                                            n1_s3Nc6
                                                            sat_s3NcG;
                                            } in 
                                              case
                                                  Text.Read.Lex.$wexpect
                                                      GHC.Read.$fRead(,)_lexeme sat_s3NcH
                                              of
                                              { Unit# ww1_s3NcJ [Occ=Once] ->
                                                    Text.ParserCombinators.ReadP.Look [ww1_s3NcJ];
                                              };
                                      };
                            } in  ds1_s3Nc7 sat_s3NcK;
                  } in  sat_s3NcL; } in
        let {
          lvl2_s3NcM [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> forall b2.
                  ((a_a3Kwb, b_a3Kwc, c_a3Kwd, d_a3Kwe, e_a3Kwf, f_a3Kwg, g_a3Kwh,
                    h_a3Kwi, i_a3Kwj, j_a3Kwk, k_a3Kwl, l_a3Kwm, m_a3Kwn, n_a3Kwo,
                    o_a3Kwp)
                   -> Text.ParserCombinators.ReadP.P b2)
                  -> Text.ParserCombinators.ReadP.P b2
          [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
              [p_s3Nc5] \r [w_s3NcN w1_s3NcO]
                  case GHC.Read.$wparen' p_s3Nc5 w_s3NcN w1_s3NcO of {
                    Unit# ww1_s3NcQ [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Get [ww1_s3NcQ];
                  }; } in
        let {
          sat_s3NcV [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_a3Kwb, b_a3Kwc, c_a3Kwd, d_a3Kwe, e_a3Kwf, f_a3Kwg, g_a3Kwh,
                  h_a3Kwi, i_a3Kwj, j_a3Kwk, k_a3Kwl, l_a3Kwm, m_a3Kwn, n_a3Kwo,
                  o_a3Kwp)
          [LclId] =
              [lvl2_s3NcM] \r [eta2_s3NcR eta3_s3NcS]
                  case
                      GHC.Read.$wskipSpacesThenP lvl2_s3NcM eta2_s3NcR eta3_s3NcS
                  of
                  { Unit# ww1_s3NcU [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Look [ww1_s3NcU];
                  };
        } in  GHC.Read.list3 sat_s3NcV eta_s3Nc3 eta1_s3Nc4;

GHC.Read.$fRead(,,,,,,,,,,,,,)1
  :: forall a b c d e f g h i j k l m n.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l, GHC.Read.Read m, GHC.Read.Read n) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        ((a, b, c, d, e, f, g, h, i, j, k, l, m, n)
         -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=16,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3NcW
           $dRead1_s3NcX
           $dRead2_s3NcY
           $dRead3_s3NcZ
           $dRead4_s3Nd0
           $dRead5_s3Nd1
           $dRead6_s3Nd2
           $dRead7_s3Nd3
           $dRead8_s3Nd4
           $dRead9_s3Nd5
           $dRead10_s3Nd6
           $dRead11_s3Nd7
           $dRead12_s3Nd8
           $dRead13_s3Nd9
           eta_s3Nda
           eta1_s3Ndb]
        let {
          p_s3Ndc [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> Text.ParserCombinators.ReadP.ReadP
                    (a_a3Kyh, b_a3Kyi, c_a3Kyj, d_a3Kyk, e_a3Kyl, f_a3Kym, g_a3Kyn,
                     h_a3Kyo, i_a3Kyp, j_a3Kyq, k_a3Kyr, l_a3Kys, m_a3Kyt, n_a3Kyu)
          [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
              [$dRead_s3NcW
               $dRead1_s3NcX
               $dRead2_s3NcY
               $dRead3_s3NcZ
               $dRead4_s3Nd0
               $dRead5_s3Nd1
               $dRead6_s3Nd2
               $dRead7_s3Nd3
               $dRead8_s3Nd4
               $dRead9_s3Nd5
               $dRead10_s3Nd6
               $dRead11_s3Nd7
               $dRead12_s3Nd8
               $dRead13_s3Nd9] \r [n1_s3Ndd]
                  let {
                    ds1_s3Nde [Occ=OnceL, Dmd=<L,C(U)>]
                      :: Text.ParserCombinators.ReadP.ReadP
                           (a_a3Kyh, b_a3Kyi, c_a3Kyj, d_a3Kyk, e_a3Kyl, f_a3Kym, g_a3Kyn,
                            h_a3Kyo)
                    [LclId] =
                        [$dRead_s3NcW
                         $dRead1_s3NcX
                         $dRead2_s3NcY
                         $dRead3_s3NcZ
                         $dRead4_s3Nd0
                         $dRead5_s3Nd1
                         $dRead6_s3Nd2
                         $dRead7_s3Nd3
                         n1_s3Ndd] \u []
                            GHC.Read.$fRead(,,,,,,,)2
                                $dRead_s3NcW
                                $dRead1_s3NcX
                                $dRead2_s3NcY
                                $dRead3_s3NcZ
                                $dRead4_s3Nd0
                                $dRead5_s3Nd1
                                $dRead6_s3Nd2
                                $dRead7_s3Nd3
                                n1_s3Ndd; } in
                  let {
                    sat_s3NdM [Occ=Once]
                      :: forall b2.
                         ((a_a3Kyh, b_a3Kyi, c_a3Kyj, d_a3Kyk, e_a3Kyl, f_a3Kym, g_a3Kyn,
                           h_a3Kyo, i_a3Kyp, j_a3Kyq, k_a3Kyr, l_a3Kys, m_a3Kyt, n_a3Kyu)
                          -> Text.ParserCombinators.ReadP.P b2)
                         -> Text.ParserCombinators.ReadP.P b2
                    [LclId] =
                        [$dRead8_s3Nd4
                         $dRead9_s3Nd5
                         $dRead10_s3Nd6
                         $dRead11_s3Nd7
                         $dRead12_s3Nd8
                         $dRead13_s3Nd9
                         n1_s3Ndd
                         ds1_s3Nde] \r [k1_s3Ndf]
                            let {
                              sat_s3NdL [Occ=Once]
                                :: (a_a3Kyh, b_a3Kyi, c_a3Kyj, d_a3Kyk, e_a3Kyl, f_a3Kym, g_a3Kyn,
                                    h_a3Kyo)
                                   -> Text.ParserCombinators.ReadP.P b2_a3nIU
                              [LclId] =
                                  [$dRead8_s3Nd4
                                   $dRead9_s3Nd5
                                   $dRead10_s3Nd6
                                   $dRead11_s3Nd7
                                   $dRead12_s3Nd8
                                   $dRead13_s3Nd9
                                   n1_s3Ndd
                                   k1_s3Ndf] \r [a1_s3Ndg]
                                      case a1_s3Ndg of {
                                        (,,,,,,,) a2_s3Ndi [Occ=OnceL]
                                                  b3_s3Ndj [Occ=OnceL]
                                                  c1_s3Ndk [Occ=OnceL]
                                                  d1_s3Ndl [Occ=OnceL]
                                                  e1_s3Ndm [Occ=OnceL]
                                                  f1_s3Ndn [Occ=OnceL]
                                                  g1_s3Ndo [Occ=OnceL]
                                                  h1_s3Ndp [Occ=OnceL] ->
                                            let {
                                              sat_s3NdI [Occ=Once]
                                                :: () -> Text.ParserCombinators.ReadP.P b2_a3nIU
                                              [LclId] =
                                                  [$dRead8_s3Nd4
                                                   $dRead9_s3Nd5
                                                   $dRead10_s3Nd6
                                                   $dRead11_s3Nd7
                                                   $dRead12_s3Nd8
                                                   $dRead13_s3Nd9
                                                   n1_s3Ndd
                                                   k1_s3Ndf
                                                   a2_s3Ndi
                                                   b3_s3Ndj
                                                   c1_s3Ndk
                                                   d1_s3Ndl
                                                   e1_s3Ndm
                                                   f1_s3Ndn
                                                   g1_s3Ndo
                                                   h1_s3Ndp] \r [a3_s3Ndq]
                                                      let {
                                                        sat_s3NdH [Occ=Once]
                                                          :: (i_a3Kyp, j_a3Kyq, k_a3Kyr, l_a3Kys)
                                                             -> Text.ParserCombinators.ReadP.P
                                                                  b2_a3nIU
                                                        [LclId] =
                                                            [$dRead12_s3Nd8
                                                             $dRead13_s3Nd9
                                                             n1_s3Ndd
                                                             k1_s3Ndf
                                                             a2_s3Ndi
                                                             b3_s3Ndj
                                                             c1_s3Ndk
                                                             d1_s3Ndl
                                                             e1_s3Ndm
                                                             f1_s3Ndn
                                                             g1_s3Ndo
                                                             h1_s3Ndp] \r [a4_s3Ndr]
                                                                case a4_s3Ndr of {
                                                                  (,,,) i1_s3Ndt [Occ=OnceL]
                                                                        j1_s3Ndu [Occ=OnceL]
                                                                        k2_s3Ndv [Occ=OnceL]
                                                                        l1_s3Ndw [Occ=OnceL] ->
                                                                      let {
                                                                        sat_s3NdE [Occ=Once]
                                                                          :: ()
                                                                             -> Text.ParserCombinators.ReadP.P
                                                                                  b2_a3nIU
                                                                        [LclId] =
                                                                            [$dRead12_s3Nd8
                                                                             $dRead13_s3Nd9
                                                                             n1_s3Ndd
                                                                             k1_s3Ndf
                                                                             a2_s3Ndi
                                                                             b3_s3Ndj
                                                                             c1_s3Ndk
                                                                             d1_s3Ndl
                                                                             e1_s3Ndm
                                                                             f1_s3Ndn
                                                                             g1_s3Ndo
                                                                             h1_s3Ndp
                                                                             i1_s3Ndt
                                                                             j1_s3Ndu
                                                                             k2_s3Ndv
                                                                             l1_s3Ndw] \r [a5_s3Ndx]
                                                                                let {
                                                                                  sat_s3NdD [Occ=Once]
                                                                                    :: (m_a3Kyt,
                                                                                        n_a3Kyu)
                                                                                       -> Text.ParserCombinators.ReadP.P
                                                                                            b2_a3nIU
                                                                                  [LclId] =
                                                                                      [k1_s3Ndf
                                                                                       a2_s3Ndi
                                                                                       b3_s3Ndj
                                                                                       c1_s3Ndk
                                                                                       d1_s3Ndl
                                                                                       e1_s3Ndm
                                                                                       f1_s3Ndn
                                                                                       g1_s3Ndo
                                                                                       h1_s3Ndp
                                                                                       i1_s3Ndt
                                                                                       j1_s3Ndu
                                                                                       k2_s3Ndv
                                                                                       l1_s3Ndw] \r [a6_s3Ndy]
                                                                                          case
                                                                                              a6_s3Ndy
                                                                                          of
                                                                                          { (,) m1_s3NdA [Occ=Once]
                                                                                                n2_s3NdB [Occ=Once] ->
                                                                                                let {
                                                                                                  sat_s3NdC [Occ=Once]
                                                                                                    :: (a_a3Kyh,
                                                                                                        b_a3Kyi,
                                                                                                        c_a3Kyj,
                                                                                                        d_a3Kyk,
                                                                                                        e_a3Kyl,
                                                                                                        f_a3Kym,
                                                                                                        g_a3Kyn,
                                                                                                        h_a3Kyo,
                                                                                                        i_a3Kyp,
                                                                                                        j_a3Kyq,
                                                                                                        k_a3Kyr,
                                                                                                        l_a3Kys,
                                                                                                        m_a3Kyt,
                                                                                                        n_a3Kyu)
                                                                                                  [LclId] =
                                                                                                      CCCS (,,,,,,,,,,,,,)! [a2_s3Ndi
                                                                                                                             b3_s3Ndj
                                                                                                                             c1_s3Ndk
                                                                                                                             d1_s3Ndl
                                                                                                                             e1_s3Ndm
                                                                                                                             f1_s3Ndn
                                                                                                                             g1_s3Ndo
                                                                                                                             h1_s3Ndp
                                                                                                                             i1_s3Ndt
                                                                                                                             j1_s3Ndu
                                                                                                                             k2_s3Ndv
                                                                                                                             l1_s3Ndw
                                                                                                                             m1_s3NdA
                                                                                                                             n2_s3NdB];
                                                                                                } in 
                                                                                                  k1_s3Ndf
                                                                                                      sat_s3NdC;
                                                                                          };
                                                                                } in 
                                                                                  GHC.Read.$fRead(,)2
                                                                                      $dRead12_s3Nd8
                                                                                      $dRead13_s3Nd9
                                                                                      n1_s3Ndd
                                                                                      sat_s3NdD;
                                                                      } in 
                                                                        case
                                                                            Text.Read.Lex.$wexpect
                                                                                GHC.Read.$fRead(,)_lexeme
                                                                                sat_s3NdE
                                                                        of
                                                                        { Unit# ww1_s3NdG [Occ=Once] ->
                                                                              Text.ParserCombinators.ReadP.Look [ww1_s3NdG];
                                                                        };
                                                                };
                                                      } in 
                                                        GHC.Read.$fRead(,,,)2
                                                            $dRead8_s3Nd4
                                                            $dRead9_s3Nd5
                                                            $dRead10_s3Nd6
                                                            $dRead11_s3Nd7
                                                            n1_s3Ndd
                                                            sat_s3NdH;
                                            } in 
                                              case
                                                  Text.Read.Lex.$wexpect
                                                      GHC.Read.$fRead(,)_lexeme sat_s3NdI
                                              of
                                              { Unit# ww1_s3NdK [Occ=Once] ->
                                                    Text.ParserCombinators.ReadP.Look [ww1_s3NdK];
                                              };
                                      };
                            } in  ds1_s3Nde sat_s3NdL;
                  } in  sat_s3NdM; } in
        let {
          lvl2_s3NdN [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> forall b2.
                  ((a_a3Kyh, b_a3Kyi, c_a3Kyj, d_a3Kyk, e_a3Kyl, f_a3Kym, g_a3Kyn,
                    h_a3Kyo, i_a3Kyp, j_a3Kyq, k_a3Kyr, l_a3Kys, m_a3Kyt, n_a3Kyu)
                   -> Text.ParserCombinators.ReadP.P b2)
                  -> Text.ParserCombinators.ReadP.P b2
          [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
              [p_s3Ndc] \r [w_s3NdO w1_s3NdP]
                  case GHC.Read.$wparen' p_s3Ndc w_s3NdO w1_s3NdP of {
                    Unit# ww1_s3NdR [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Get [ww1_s3NdR];
                  }; } in
        let {
          sat_s3NdW [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_a3Kyh, b_a3Kyi, c_a3Kyj, d_a3Kyk, e_a3Kyl, f_a3Kym, g_a3Kyn,
                  h_a3Kyo, i_a3Kyp, j_a3Kyq, k_a3Kyr, l_a3Kys, m_a3Kyt, n_a3Kyu)
          [LclId] =
              [lvl2_s3NdN] \r [eta2_s3NdS eta3_s3NdT]
                  case
                      GHC.Read.$wskipSpacesThenP lvl2_s3NdN eta2_s3NdS eta3_s3NdT
                  of
                  { Unit# ww1_s3NdV [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Look [ww1_s3NdV];
                  };
        } in  GHC.Read.list3 sat_s3NdW eta_s3Nda eta1_s3Ndb;

GHC.Read.$fRead(,,,,,,,,,,,,)1
  :: forall a b c d e f g h i j k l m.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l, GHC.Read.Read m) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        ((a, b, c, d, e, f, g, h, i, j, k, l, m)
         -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=15,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3NdX
           $dRead1_s3NdY
           $dRead2_s3NdZ
           $dRead3_s3Ne0
           $dRead4_s3Ne1
           $dRead5_s3Ne2
           $dRead6_s3Ne3
           $dRead7_s3Ne4
           $dRead8_s3Ne5
           $dRead9_s3Ne6
           $dRead10_s3Ne7
           $dRead11_s3Ne8
           $dRead12_s3Ne9
           eta_s3Nea
           eta1_s3Neb]
        let {
          p_s3Nec [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> Text.ParserCombinators.ReadP.ReadP
                    (a_a3KAa, b_a3KAb, c_a3KAc, d_a3KAd, e_a3KAe, f_a3KAf, g_a3KAg,
                     h_a3KAh, i_a3KAi, j_a3KAj, k_a3KAk, l_a3KAl, m_a3KAm)
          [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
              [$dRead_s3NdX
               $dRead1_s3NdY
               $dRead2_s3NdZ
               $dRead3_s3Ne0
               $dRead4_s3Ne1
               $dRead5_s3Ne2
               $dRead6_s3Ne3
               $dRead7_s3Ne4
               $dRead8_s3Ne5
               $dRead9_s3Ne6
               $dRead10_s3Ne7
               $dRead11_s3Ne8
               $dRead12_s3Ne9] \r [n_s3Ned]
                  let {
                    ds1_s3Nee [Occ=OnceL, Dmd=<L,C(U)>]
                      :: Text.ParserCombinators.ReadP.ReadP
                           (a_a3KAa, b_a3KAb, c_a3KAc, d_a3KAd, e_a3KAe, f_a3KAf, g_a3KAg,
                            h_a3KAh)
                    [LclId] =
                        [$dRead_s3NdX
                         $dRead1_s3NdY
                         $dRead2_s3NdZ
                         $dRead3_s3Ne0
                         $dRead4_s3Ne1
                         $dRead5_s3Ne2
                         $dRead6_s3Ne3
                         $dRead7_s3Ne4
                         n_s3Ned] \u []
                            GHC.Read.$fRead(,,,,,,,)2
                                $dRead_s3NdX
                                $dRead1_s3NdY
                                $dRead2_s3NdZ
                                $dRead3_s3Ne0
                                $dRead4_s3Ne1
                                $dRead5_s3Ne2
                                $dRead6_s3Ne3
                                $dRead7_s3Ne4
                                n_s3Ned; } in
                  let {
                    sat_s3NeJ [Occ=Once]
                      :: forall b2.
                         ((a_a3KAa, b_a3KAb, c_a3KAc, d_a3KAd, e_a3KAe, f_a3KAf, g_a3KAg,
                           h_a3KAh, i_a3KAi, j_a3KAj, k_a3KAk, l_a3KAl, m_a3KAm)
                          -> Text.ParserCombinators.ReadP.P b2)
                         -> Text.ParserCombinators.ReadP.P b2
                    [LclId] =
                        [$dRead8_s3Ne5
                         $dRead9_s3Ne6
                         $dRead10_s3Ne7
                         $dRead11_s3Ne8
                         $dRead12_s3Ne9
                         n_s3Ned
                         ds1_s3Nee] \r [k1_s3Nef]
                            let {
                              sat_s3NeI [Occ=Once]
                                :: (a_a3KAa, b_a3KAb, c_a3KAc, d_a3KAd, e_a3KAe, f_a3KAf, g_a3KAg,
                                    h_a3KAh)
                                   -> Text.ParserCombinators.ReadP.P b2_a3nIU
                              [LclId] =
                                  [$dRead8_s3Ne5
                                   $dRead9_s3Ne6
                                   $dRead10_s3Ne7
                                   $dRead11_s3Ne8
                                   $dRead12_s3Ne9
                                   n_s3Ned
                                   k1_s3Nef] \r [a1_s3Neg]
                                      case a1_s3Neg of {
                                        (,,,,,,,) a2_s3Nei [Occ=OnceL]
                                                  b3_s3Nej [Occ=OnceL]
                                                  c1_s3Nek [Occ=OnceL]
                                                  d1_s3Nel [Occ=OnceL]
                                                  e1_s3Nem [Occ=OnceL]
                                                  f1_s3Nen [Occ=OnceL]
                                                  g1_s3Neo [Occ=OnceL]
                                                  h1_s3Nep [Occ=OnceL] ->
                                            let {
                                              sat_s3NeF [Occ=Once]
                                                :: () -> Text.ParserCombinators.ReadP.P b2_a3nIU
                                              [LclId] =
                                                  [$dRead8_s3Ne5
                                                   $dRead9_s3Ne6
                                                   $dRead10_s3Ne7
                                                   $dRead11_s3Ne8
                                                   $dRead12_s3Ne9
                                                   n_s3Ned
                                                   k1_s3Nef
                                                   a2_s3Nei
                                                   b3_s3Nej
                                                   c1_s3Nek
                                                   d1_s3Nel
                                                   e1_s3Nem
                                                   f1_s3Nen
                                                   g1_s3Neo
                                                   h1_s3Nep] \r [a3_s3Neq]
                                                      let {
                                                        sat_s3NeE [Occ=Once]
                                                          :: (i_a3KAi, j_a3KAj, k_a3KAk, l_a3KAl)
                                                             -> Text.ParserCombinators.ReadP.P
                                                                  b2_a3nIU
                                                        [LclId] =
                                                            [$dRead12_s3Ne9
                                                             n_s3Ned
                                                             k1_s3Nef
                                                             a2_s3Nei
                                                             b3_s3Nej
                                                             c1_s3Nek
                                                             d1_s3Nel
                                                             e1_s3Nem
                                                             f1_s3Nen
                                                             g1_s3Neo
                                                             h1_s3Nep] \r [a4_s3Ner]
                                                                case a4_s3Ner of {
                                                                  (,,,) i1_s3Net [Occ=OnceL]
                                                                        j1_s3Neu [Occ=OnceL]
                                                                        k2_s3Nev [Occ=OnceL]
                                                                        l1_s3New [Occ=OnceL] ->
                                                                      let {
                                                                        sat_s3NeB [Occ=Once]
                                                                          :: ()
                                                                             -> Text.ParserCombinators.ReadP.P
                                                                                  b2_a3nIU
                                                                        [LclId] =
                                                                            [$dRead12_s3Ne9
                                                                             n_s3Ned
                                                                             k1_s3Nef
                                                                             a2_s3Nei
                                                                             b3_s3Nej
                                                                             c1_s3Nek
                                                                             d1_s3Nel
                                                                             e1_s3Nem
                                                                             f1_s3Nen
                                                                             g1_s3Neo
                                                                             h1_s3Nep
                                                                             i1_s3Net
                                                                             j1_s3Neu
                                                                             k2_s3Nev
                                                                             l1_s3New] \r [a5_s3Nex]
                                                                                let {
                                                                                  sat_s3NeA [Occ=Once]
                                                                                    :: m_a3KAm
                                                                                       -> Text.ParserCombinators.ReadP.P
                                                                                            b2_a3nIU
                                                                                  [LclId] =
                                                                                      [k1_s3Nef
                                                                                       a2_s3Nei
                                                                                       b3_s3Nej
                                                                                       c1_s3Nek
                                                                                       d1_s3Nel
                                                                                       e1_s3Nem
                                                                                       f1_s3Nen
                                                                                       g1_s3Neo
                                                                                       h1_s3Nep
                                                                                       i1_s3Net
                                                                                       j1_s3Neu
                                                                                       k2_s3Nev
                                                                                       l1_s3New] \r [a6_s3Ney]
                                                                                          let {
                                                                                            sat_s3Nez [Occ=Once]
                                                                                              :: (a_a3KAa,
                                                                                                  b_a3KAb,
                                                                                                  c_a3KAc,
                                                                                                  d_a3KAd,
                                                                                                  e_a3KAe,
                                                                                                  f_a3KAf,
                                                                                                  g_a3KAg,
                                                                                                  h_a3KAh,
                                                                                                  i_a3KAi,
                                                                                                  j_a3KAj,
                                                                                                  k_a3KAk,
                                                                                                  l_a3KAl,
                                                                                                  m_a3KAm)
                                                                                            [LclId] =
                                                                                                CCCS (,,,,,,,,,,,,)! [a2_s3Nei
                                                                                                                      b3_s3Nej
                                                                                                                      c1_s3Nek
                                                                                                                      d1_s3Nel
                                                                                                                      e1_s3Nem
                                                                                                                      f1_s3Nen
                                                                                                                      g1_s3Neo
                                                                                                                      h1_s3Nep
                                                                                                                      i1_s3Net
                                                                                                                      j1_s3Neu
                                                                                                                      k2_s3Nev
                                                                                                                      l1_s3New
                                                                                                                      a6_s3Ney];
                                                                                          } in 
                                                                                            k1_s3Nef
                                                                                                sat_s3Nez;
                                                                                } in 
                                                                                  GHC.Read.readPrec
                                                                                      $dRead12_s3Ne9
                                                                                      n_s3Ned
                                                                                      sat_s3NeA;
                                                                      } in 
                                                                        case
                                                                            Text.Read.Lex.$wexpect
                                                                                GHC.Read.$fRead(,)_lexeme
                                                                                sat_s3NeB
                                                                        of
                                                                        { Unit# ww1_s3NeD [Occ=Once] ->
                                                                              Text.ParserCombinators.ReadP.Look [ww1_s3NeD];
                                                                        };
                                                                };
                                                      } in 
                                                        GHC.Read.$fRead(,,,)2
                                                            $dRead8_s3Ne5
                                                            $dRead9_s3Ne6
                                                            $dRead10_s3Ne7
                                                            $dRead11_s3Ne8
                                                            n_s3Ned
                                                            sat_s3NeE;
                                            } in 
                                              case
                                                  Text.Read.Lex.$wexpect
                                                      GHC.Read.$fRead(,)_lexeme sat_s3NeF
                                              of
                                              { Unit# ww1_s3NeH [Occ=Once] ->
                                                    Text.ParserCombinators.ReadP.Look [ww1_s3NeH];
                                              };
                                      };
                            } in  ds1_s3Nee sat_s3NeI;
                  } in  sat_s3NeJ; } in
        let {
          lvl2_s3NeK [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> forall b2.
                  ((a_a3KAa, b_a3KAb, c_a3KAc, d_a3KAd, e_a3KAe, f_a3KAf, g_a3KAg,
                    h_a3KAh, i_a3KAi, j_a3KAj, k_a3KAk, l_a3KAl, m_a3KAm)
                   -> Text.ParserCombinators.ReadP.P b2)
                  -> Text.ParserCombinators.ReadP.P b2
          [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
              [p_s3Nec] \r [w_s3NeL w1_s3NeM]
                  case GHC.Read.$wparen' p_s3Nec w_s3NeL w1_s3NeM of {
                    Unit# ww1_s3NeO [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Get [ww1_s3NeO];
                  }; } in
        let {
          sat_s3NeT [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_a3KAa, b_a3KAb, c_a3KAc, d_a3KAd, e_a3KAe, f_a3KAf, g_a3KAg,
                  h_a3KAh, i_a3KAi, j_a3KAj, k_a3KAk, l_a3KAl, m_a3KAm)
          [LclId] =
              [lvl2_s3NeK] \r [eta2_s3NeP eta3_s3NeQ]
                  case
                      GHC.Read.$wskipSpacesThenP lvl2_s3NeK eta2_s3NeP eta3_s3NeQ
                  of
                  { Unit# ww1_s3NeS [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Look [ww1_s3NeS];
                  };
        } in  GHC.Read.list3 sat_s3NeT eta_s3Nea eta1_s3Neb;

GHC.Read.$fRead(,,,,,,,,,,,)1
  :: forall a b c d e f g h i j k l.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        ((a, b, c, d, e, f, g, h, i, j, k, l)
         -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=14,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3NeU
           $dRead1_s3NeV
           $dRead2_s3NeW
           $dRead3_s3NeX
           $dRead4_s3NeY
           $dRead5_s3NeZ
           $dRead6_s3Nf0
           $dRead7_s3Nf1
           $dRead8_s3Nf2
           $dRead9_s3Nf3
           $dRead10_s3Nf4
           $dRead11_s3Nf5
           eta_s3Nf6
           eta1_s3Nf7]
        let {
          p_s3Nf8 [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> Text.ParserCombinators.ReadP.ReadP
                    (a_a3KBY, b_a3KBZ, c_a3KC0, d_a3KC1, e_a3KC2, f_a3KC3, g_a3KC4,
                     h_a3KC5, i_a3KC6, j_a3KC7, k_a3KC8, l_a3KC9)
          [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
              [$dRead_s3NeU
               $dRead1_s3NeV
               $dRead2_s3NeW
               $dRead3_s3NeX
               $dRead4_s3NeY
               $dRead5_s3NeZ
               $dRead6_s3Nf0
               $dRead7_s3Nf1
               $dRead8_s3Nf2
               $dRead9_s3Nf3
               $dRead10_s3Nf4
               $dRead11_s3Nf5] \r [n_s3Nf9]
                  let {
                    ds1_s3Nfa [Occ=OnceL, Dmd=<L,C(U)>]
                      :: Text.ParserCombinators.ReadP.ReadP
                           (a_a3KBY, b_a3KBZ, c_a3KC0, d_a3KC1, e_a3KC2, f_a3KC3, g_a3KC4,
                            h_a3KC5)
                    [LclId] =
                        [$dRead_s3NeU
                         $dRead1_s3NeV
                         $dRead2_s3NeW
                         $dRead3_s3NeX
                         $dRead4_s3NeY
                         $dRead5_s3NeZ
                         $dRead6_s3Nf0
                         $dRead7_s3Nf1
                         n_s3Nf9] \u []
                            GHC.Read.$fRead(,,,,,,,)2
                                $dRead_s3NeU
                                $dRead1_s3NeV
                                $dRead2_s3NeW
                                $dRead3_s3NeX
                                $dRead4_s3NeY
                                $dRead5_s3NeZ
                                $dRead6_s3Nf0
                                $dRead7_s3Nf1
                                n_s3Nf9; } in
                  let {
                    sat_s3Nfz [Occ=Once]
                      :: forall b2.
                         ((a_a3KBY, b_a3KBZ, c_a3KC0, d_a3KC1, e_a3KC2, f_a3KC3, g_a3KC4,
                           h_a3KC5, i_a3KC6, j_a3KC7, k_a3KC8, l_a3KC9)
                          -> Text.ParserCombinators.ReadP.P b2)
                         -> Text.ParserCombinators.ReadP.P b2
                    [LclId] =
                        [$dRead8_s3Nf2
                         $dRead9_s3Nf3
                         $dRead10_s3Nf4
                         $dRead11_s3Nf5
                         n_s3Nf9
                         ds1_s3Nfa] \r [k1_s3Nfb]
                            let {
                              sat_s3Nfy [Occ=Once]
                                :: (a_a3KBY, b_a3KBZ, c_a3KC0, d_a3KC1, e_a3KC2, f_a3KC3, g_a3KC4,
                                    h_a3KC5)
                                   -> Text.ParserCombinators.ReadP.P b2_a3nIU
                              [LclId] =
                                  [$dRead8_s3Nf2
                                   $dRead9_s3Nf3
                                   $dRead10_s3Nf4
                                   $dRead11_s3Nf5
                                   n_s3Nf9
                                   k1_s3Nfb] \r [a1_s3Nfc]
                                      case a1_s3Nfc of {
                                        (,,,,,,,) a2_s3Nfe [Occ=OnceL]
                                                  b3_s3Nff [Occ=OnceL]
                                                  c1_s3Nfg [Occ=OnceL]
                                                  d1_s3Nfh [Occ=OnceL]
                                                  e1_s3Nfi [Occ=OnceL]
                                                  f1_s3Nfj [Occ=OnceL]
                                                  g1_s3Nfk [Occ=OnceL]
                                                  h1_s3Nfl [Occ=OnceL] ->
                                            let {
                                              sat_s3Nfv [Occ=Once]
                                                :: () -> Text.ParserCombinators.ReadP.P b2_a3nIU
                                              [LclId] =
                                                  [$dRead8_s3Nf2
                                                   $dRead9_s3Nf3
                                                   $dRead10_s3Nf4
                                                   $dRead11_s3Nf5
                                                   n_s3Nf9
                                                   k1_s3Nfb
                                                   a2_s3Nfe
                                                   b3_s3Nff
                                                   c1_s3Nfg
                                                   d1_s3Nfh
                                                   e1_s3Nfi
                                                   f1_s3Nfj
                                                   g1_s3Nfk
                                                   h1_s3Nfl] \r [a3_s3Nfm]
                                                      let {
                                                        sat_s3Nfu [Occ=Once]
                                                          :: (i_a3KC6, j_a3KC7, k_a3KC8, l_a3KC9)
                                                             -> Text.ParserCombinators.ReadP.P
                                                                  b2_a3nIU
                                                        [LclId] =
                                                            [k1_s3Nfb
                                                             a2_s3Nfe
                                                             b3_s3Nff
                                                             c1_s3Nfg
                                                             d1_s3Nfh
                                                             e1_s3Nfi
                                                             f1_s3Nfj
                                                             g1_s3Nfk
                                                             h1_s3Nfl] \r [a4_s3Nfn]
                                                                case a4_s3Nfn of {
                                                                  (,,,) i1_s3Nfp [Occ=Once]
                                                                        j1_s3Nfq [Occ=Once]
                                                                        k2_s3Nfr [Occ=Once]
                                                                        l1_s3Nfs [Occ=Once] ->
                                                                      let {
                                                                        sat_s3Nft [Occ=Once]
                                                                          :: (a_a3KBY, b_a3KBZ,
                                                                              c_a3KC0, d_a3KC1,
                                                                              e_a3KC2, f_a3KC3,
                                                                              g_a3KC4, h_a3KC5,
                                                                              i_a3KC6, j_a3KC7,
                                                                              k_a3KC8, l_a3KC9)
                                                                        [LclId] =
                                                                            CCCS (,,,,,,,,,,,)! [a2_s3Nfe
                                                                                                 b3_s3Nff
                                                                                                 c1_s3Nfg
                                                                                                 d1_s3Nfh
                                                                                                 e1_s3Nfi
                                                                                                 f1_s3Nfj
                                                                                                 g1_s3Nfk
                                                                                                 h1_s3Nfl
                                                                                                 i1_s3Nfp
                                                                                                 j1_s3Nfq
                                                                                                 k2_s3Nfr
                                                                                                 l1_s3Nfs];
                                                                      } in  k1_s3Nfb sat_s3Nft;
                                                                };
                                                      } in 
                                                        GHC.Read.$fRead(,,,)2
                                                            $dRead8_s3Nf2
                                                            $dRead9_s3Nf3
                                                            $dRead10_s3Nf4
                                                            $dRead11_s3Nf5
                                                            n_s3Nf9
                                                            sat_s3Nfu;
                                            } in 
                                              case
                                                  Text.Read.Lex.$wexpect
                                                      GHC.Read.$fRead(,)_lexeme sat_s3Nfv
                                              of
                                              { Unit# ww1_s3Nfx [Occ=Once] ->
                                                    Text.ParserCombinators.ReadP.Look [ww1_s3Nfx];
                                              };
                                      };
                            } in  ds1_s3Nfa sat_s3Nfy;
                  } in  sat_s3Nfz; } in
        let {
          lvl2_s3NfA [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> forall b2.
                  ((a_a3KBY, b_a3KBZ, c_a3KC0, d_a3KC1, e_a3KC2, f_a3KC3, g_a3KC4,
                    h_a3KC5, i_a3KC6, j_a3KC7, k_a3KC8, l_a3KC9)
                   -> Text.ParserCombinators.ReadP.P b2)
                  -> Text.ParserCombinators.ReadP.P b2
          [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
              [p_s3Nf8] \r [w_s3NfB w1_s3NfC]
                  case GHC.Read.$wparen' p_s3Nf8 w_s3NfB w1_s3NfC of {
                    Unit# ww1_s3NfE [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Get [ww1_s3NfE];
                  }; } in
        let {
          sat_s3NfJ [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_a3KBY, b_a3KBZ, c_a3KC0, d_a3KC1, e_a3KC2, f_a3KC3, g_a3KC4,
                  h_a3KC5, i_a3KC6, j_a3KC7, k_a3KC8, l_a3KC9)
          [LclId] =
              [lvl2_s3NfA] \r [eta2_s3NfF eta3_s3NfG]
                  case
                      GHC.Read.$wskipSpacesThenP lvl2_s3NfA eta2_s3NfF eta3_s3NfG
                  of
                  { Unit# ww1_s3NfI [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Look [ww1_s3NfI];
                  };
        } in  GHC.Read.list3 sat_s3NfJ eta_s3Nf6 eta1_s3Nf7;

GHC.Read.$fRead(,,,,,,,,,,)1
  :: forall a b c d e f g h i j k.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j,
      GHC.Read.Read k) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        ((a, b, c, d, e, f, g, h, i, j, k)
         -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=13,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3NfK
           $dRead1_s3NfL
           $dRead2_s3NfM
           $dRead3_s3NfN
           $dRead4_s3NfO
           $dRead5_s3NfP
           $dRead6_s3NfQ
           $dRead7_s3NfR
           $dRead8_s3NfS
           $dRead9_s3NfT
           $dRead10_s3NfU
           eta_s3NfV
           eta1_s3NfW]
        let {
          p_s3NfX [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> Text.ParserCombinators.ReadP.ReadP
                    (a_a3KDz, b_a3KDA, c_a3KDB, d_a3KDC, e_a3KDD, f_a3KDE, g_a3KDF,
                     h_a3KDG, i_a3KDH, j_a3KDI, k_a3KDJ)
          [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
              [$dRead_s3NfK
               $dRead1_s3NfL
               $dRead2_s3NfM
               $dRead3_s3NfN
               $dRead4_s3NfO
               $dRead5_s3NfP
               $dRead6_s3NfQ
               $dRead7_s3NfR
               $dRead8_s3NfS
               $dRead9_s3NfT
               $dRead10_s3NfU] \r [n_s3NfY]
                  let {
                    ds1_s3NfZ [Occ=OnceL, Dmd=<L,C(U)>]
                      :: Text.ParserCombinators.ReadP.ReadP
                           (a_a3KDz, b_a3KDA, c_a3KDB, d_a3KDC, e_a3KDD, f_a3KDE, g_a3KDF,
                            h_a3KDG)
                    [LclId] =
                        [$dRead_s3NfK
                         $dRead1_s3NfL
                         $dRead2_s3NfM
                         $dRead3_s3NfN
                         $dRead4_s3NfO
                         $dRead5_s3NfP
                         $dRead6_s3NfQ
                         $dRead7_s3NfR
                         n_s3NfY] \u []
                            GHC.Read.$fRead(,,,,,,,)2
                                $dRead_s3NfK
                                $dRead1_s3NfL
                                $dRead2_s3NfM
                                $dRead3_s3NfN
                                $dRead4_s3NfO
                                $dRead5_s3NfP
                                $dRead6_s3NfQ
                                $dRead7_s3NfR
                                n_s3NfY; } in
                  let {
                    sat_s3Ngs [Occ=Once]
                      :: forall b2.
                         ((a_a3KDz, b_a3KDA, c_a3KDB, d_a3KDC, e_a3KDD, f_a3KDE, g_a3KDF,
                           h_a3KDG, i_a3KDH, j_a3KDI, k_a3KDJ)
                          -> Text.ParserCombinators.ReadP.P b2)
                         -> Text.ParserCombinators.ReadP.P b2
                    [LclId] =
                        [$dRead8_s3NfS
                         $dRead9_s3NfT
                         $dRead10_s3NfU
                         n_s3NfY
                         ds1_s3NfZ] \r [k1_s3Ng0]
                            let {
                              sat_s3Ngr [Occ=Once]
                                :: (a_a3KDz, b_a3KDA, c_a3KDB, d_a3KDC, e_a3KDD, f_a3KDE, g_a3KDF,
                                    h_a3KDG)
                                   -> Text.ParserCombinators.ReadP.P b2_a3nIU
                              [LclId] =
                                  [$dRead8_s3NfS
                                   $dRead9_s3NfT
                                   $dRead10_s3NfU
                                   n_s3NfY
                                   k1_s3Ng0] \r [a1_s3Ng1]
                                      case a1_s3Ng1 of {
                                        (,,,,,,,) a2_s3Ng3 [Occ=OnceL]
                                                  b3_s3Ng4 [Occ=OnceL]
                                                  c1_s3Ng5 [Occ=OnceL]
                                                  d1_s3Ng6 [Occ=OnceL]
                                                  e1_s3Ng7 [Occ=OnceL]
                                                  f1_s3Ng8 [Occ=OnceL]
                                                  g1_s3Ng9 [Occ=OnceL]
                                                  h1_s3Nga [Occ=OnceL] ->
                                            let {
                                              sat_s3Ngo [Occ=Once]
                                                :: () -> Text.ParserCombinators.ReadP.P b2_a3nIU
                                              [LclId] =
                                                  [$dRead8_s3NfS
                                                   $dRead9_s3NfT
                                                   $dRead10_s3NfU
                                                   n_s3NfY
                                                   k1_s3Ng0
                                                   a2_s3Ng3
                                                   b3_s3Ng4
                                                   c1_s3Ng5
                                                   d1_s3Ng6
                                                   e1_s3Ng7
                                                   f1_s3Ng8
                                                   g1_s3Ng9
                                                   h1_s3Nga] \r [a3_s3Ngb]
                                                      let {
                                                        sat_s3Ngn [Occ=Once]
                                                          :: (i_a3KDH, j_a3KDI)
                                                             -> Text.ParserCombinators.ReadP.P
                                                                  b2_a3nIU
                                                        [LclId] =
                                                            [$dRead10_s3NfU
                                                             n_s3NfY
                                                             k1_s3Ng0
                                                             a2_s3Ng3
                                                             b3_s3Ng4
                                                             c1_s3Ng5
                                                             d1_s3Ng6
                                                             e1_s3Ng7
                                                             f1_s3Ng8
                                                             g1_s3Ng9
                                                             h1_s3Nga] \r [a4_s3Ngc]
                                                                case a4_s3Ngc of {
                                                                  (,) i1_s3Nge [Occ=OnceL]
                                                                      j1_s3Ngf [Occ=OnceL] ->
                                                                      let {
                                                                        sat_s3Ngk [Occ=Once]
                                                                          :: ()
                                                                             -> Text.ParserCombinators.ReadP.P
                                                                                  b2_a3nIU
                                                                        [LclId] =
                                                                            [$dRead10_s3NfU
                                                                             n_s3NfY
                                                                             k1_s3Ng0
                                                                             a2_s3Ng3
                                                                             b3_s3Ng4
                                                                             c1_s3Ng5
                                                                             d1_s3Ng6
                                                                             e1_s3Ng7
                                                                             f1_s3Ng8
                                                                             g1_s3Ng9
                                                                             h1_s3Nga
                                                                             i1_s3Nge
                                                                             j1_s3Ngf] \r [a5_s3Ngg]
                                                                                let {
                                                                                  sat_s3Ngj [Occ=Once]
                                                                                    :: k_a3KDJ
                                                                                       -> Text.ParserCombinators.ReadP.P
                                                                                            b2_a3nIU
                                                                                  [LclId] =
                                                                                      [k1_s3Ng0
                                                                                       a2_s3Ng3
                                                                                       b3_s3Ng4
                                                                                       c1_s3Ng5
                                                                                       d1_s3Ng6
                                                                                       e1_s3Ng7
                                                                                       f1_s3Ng8
                                                                                       g1_s3Ng9
                                                                                       h1_s3Nga
                                                                                       i1_s3Nge
                                                                                       j1_s3Ngf] \r [a6_s3Ngh]
                                                                                          let {
                                                                                            sat_s3Ngi [Occ=Once]
                                                                                              :: (a_a3KDz,
                                                                                                  b_a3KDA,
                                                                                                  c_a3KDB,
                                                                                                  d_a3KDC,
                                                                                                  e_a3KDD,
                                                                                                  f_a3KDE,
                                                                                                  g_a3KDF,
                                                                                                  h_a3KDG,
                                                                                                  i_a3KDH,
                                                                                                  j_a3KDI,
                                                                                                  k_a3KDJ)
                                                                                            [LclId] =
                                                                                                CCCS (,,,,,,,,,,)! [a2_s3Ng3
                                                                                                                    b3_s3Ng4
                                                                                                                    c1_s3Ng5
                                                                                                                    d1_s3Ng6
                                                                                                                    e1_s3Ng7
                                                                                                                    f1_s3Ng8
                                                                                                                    g1_s3Ng9
                                                                                                                    h1_s3Nga
                                                                                                                    i1_s3Nge
                                                                                                                    j1_s3Ngf
                                                                                                                    a6_s3Ngh];
                                                                                          } in 
                                                                                            k1_s3Ng0
                                                                                                sat_s3Ngi;
                                                                                } in 
                                                                                  GHC.Read.readPrec
                                                                                      $dRead10_s3NfU
                                                                                      n_s3NfY
                                                                                      sat_s3Ngj;
                                                                      } in 
                                                                        case
                                                                            Text.Read.Lex.$wexpect
                                                                                GHC.Read.$fRead(,)_lexeme
                                                                                sat_s3Ngk
                                                                        of
                                                                        { Unit# ww1_s3Ngm [Occ=Once] ->
                                                                              Text.ParserCombinators.ReadP.Look [ww1_s3Ngm];
                                                                        };
                                                                };
                                                      } in 
                                                        GHC.Read.$fRead(,)2
                                                            $dRead8_s3NfS
                                                            $dRead9_s3NfT
                                                            n_s3NfY
                                                            sat_s3Ngn;
                                            } in 
                                              case
                                                  Text.Read.Lex.$wexpect
                                                      GHC.Read.$fRead(,)_lexeme sat_s3Ngo
                                              of
                                              { Unit# ww1_s3Ngq [Occ=Once] ->
                                                    Text.ParserCombinators.ReadP.Look [ww1_s3Ngq];
                                              };
                                      };
                            } in  ds1_s3NfZ sat_s3Ngr;
                  } in  sat_s3Ngs; } in
        let {
          lvl2_s3Ngt [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> forall b2.
                  ((a_a3KDz, b_a3KDA, c_a3KDB, d_a3KDC, e_a3KDD, f_a3KDE, g_a3KDF,
                    h_a3KDG, i_a3KDH, j_a3KDI, k_a3KDJ)
                   -> Text.ParserCombinators.ReadP.P b2)
                  -> Text.ParserCombinators.ReadP.P b2
          [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
              [p_s3NfX] \r [w_s3Ngu w1_s3Ngv]
                  case GHC.Read.$wparen' p_s3NfX w_s3Ngu w1_s3Ngv of {
                    Unit# ww1_s3Ngx [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Get [ww1_s3Ngx];
                  }; } in
        let {
          sat_s3NgC [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_a3KDz, b_a3KDA, c_a3KDB, d_a3KDC, e_a3KDD, f_a3KDE, g_a3KDF,
                  h_a3KDG, i_a3KDH, j_a3KDI, k_a3KDJ)
          [LclId] =
              [lvl2_s3Ngt] \r [eta2_s3Ngy eta3_s3Ngz]
                  case
                      GHC.Read.$wskipSpacesThenP lvl2_s3Ngt eta2_s3Ngy eta3_s3Ngz
                  of
                  { Unit# ww1_s3NgB [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Look [ww1_s3NgB];
                  };
        } in  GHC.Read.list3 sat_s3NgC eta_s3NfV eta1_s3NfW;

GHC.Read.$fRead(,,,,,,,,,)1
  :: forall a b c d e f g h i j.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        ((a, b, c, d, e, f, g, h, i, j)
         -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=12,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3NgD
           $dRead1_s3NgE
           $dRead2_s3NgF
           $dRead3_s3NgG
           $dRead4_s3NgH
           $dRead5_s3NgI
           $dRead6_s3NgJ
           $dRead7_s3NgK
           $dRead8_s3NgL
           $dRead9_s3NgM
           eta_s3NgN
           eta1_s3NgO]
        let {
          p_s3NgP [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> Text.ParserCombinators.ReadP.ReadP
                    (a_a3KFd, b_a3KFe, c_a3KFf, d_a3KFg, e_a3KFh, f_a3KFi, g_a3KFj,
                     h_a3KFk, i_a3KFl, j_a3KFm)
          [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
              [$dRead_s3NgD
               $dRead1_s3NgE
               $dRead2_s3NgF
               $dRead3_s3NgG
               $dRead4_s3NgH
               $dRead5_s3NgI
               $dRead6_s3NgJ
               $dRead7_s3NgK
               $dRead8_s3NgL
               $dRead9_s3NgM] \r [n_s3NgQ]
                  let {
                    ds1_s3NgR [Occ=OnceL, Dmd=<L,C(U)>]
                      :: Text.ParserCombinators.ReadP.ReadP
                           (a_a3KFd, b_a3KFe, c_a3KFf, d_a3KFg, e_a3KFh, f_a3KFi, g_a3KFj,
                            h_a3KFk)
                    [LclId] =
                        [$dRead_s3NgD
                         $dRead1_s3NgE
                         $dRead2_s3NgF
                         $dRead3_s3NgG
                         $dRead4_s3NgH
                         $dRead5_s3NgI
                         $dRead6_s3NgJ
                         $dRead7_s3NgK
                         n_s3NgQ] \u []
                            GHC.Read.$fRead(,,,,,,,)2
                                $dRead_s3NgD
                                $dRead1_s3NgE
                                $dRead2_s3NgF
                                $dRead3_s3NgG
                                $dRead4_s3NgH
                                $dRead5_s3NgI
                                $dRead6_s3NgJ
                                $dRead7_s3NgK
                                n_s3NgQ; } in
                  let {
                    sat_s3Nhe [Occ=Once]
                      :: forall b2.
                         ((a_a3KFd, b_a3KFe, c_a3KFf, d_a3KFg, e_a3KFh, f_a3KFi, g_a3KFj,
                           h_a3KFk, i_a3KFl, j_a3KFm)
                          -> Text.ParserCombinators.ReadP.P b2)
                         -> Text.ParserCombinators.ReadP.P b2
                    [LclId] =
                        [$dRead8_s3NgL $dRead9_s3NgM n_s3NgQ ds1_s3NgR] \r [k1_s3NgS]
                            let {
                              sat_s3Nhd [Occ=Once]
                                :: (a_a3KFd, b_a3KFe, c_a3KFf, d_a3KFg, e_a3KFh, f_a3KFi, g_a3KFj,
                                    h_a3KFk)
                                   -> Text.ParserCombinators.ReadP.P b2_a3nIU
                              [LclId] =
                                  [$dRead8_s3NgL $dRead9_s3NgM n_s3NgQ k1_s3NgS] \r [a1_s3NgT]
                                      case a1_s3NgT of {
                                        (,,,,,,,) a2_s3NgV [Occ=OnceL]
                                                  b3_s3NgW [Occ=OnceL]
                                                  c1_s3NgX [Occ=OnceL]
                                                  d1_s3NgY [Occ=OnceL]
                                                  e1_s3NgZ [Occ=OnceL]
                                                  f1_s3Nh0 [Occ=OnceL]
                                                  g1_s3Nh1 [Occ=OnceL]
                                                  h1_s3Nh2 [Occ=OnceL] ->
                                            let {
                                              sat_s3Nha [Occ=Once]
                                                :: () -> Text.ParserCombinators.ReadP.P b2_a3nIU
                                              [LclId] =
                                                  [$dRead8_s3NgL
                                                   $dRead9_s3NgM
                                                   n_s3NgQ
                                                   k1_s3NgS
                                                   a2_s3NgV
                                                   b3_s3NgW
                                                   c1_s3NgX
                                                   d1_s3NgY
                                                   e1_s3NgZ
                                                   f1_s3Nh0
                                                   g1_s3Nh1
                                                   h1_s3Nh2] \r [a3_s3Nh3]
                                                      let {
                                                        sat_s3Nh9 [Occ=Once]
                                                          :: (i_a3KFl, j_a3KFm)
                                                             -> Text.ParserCombinators.ReadP.P
                                                                  b2_a3nIU
                                                        [LclId] =
                                                            [k1_s3NgS
                                                             a2_s3NgV
                                                             b3_s3NgW
                                                             c1_s3NgX
                                                             d1_s3NgY
                                                             e1_s3NgZ
                                                             f1_s3Nh0
                                                             g1_s3Nh1
                                                             h1_s3Nh2] \r [a4_s3Nh4]
                                                                case a4_s3Nh4 of {
                                                                  (,) i1_s3Nh6 [Occ=Once]
                                                                      j1_s3Nh7 [Occ=Once] ->
                                                                      let {
                                                                        sat_s3Nh8 [Occ=Once]
                                                                          :: (a_a3KFd, b_a3KFe,
                                                                              c_a3KFf, d_a3KFg,
                                                                              e_a3KFh, f_a3KFi,
                                                                              g_a3KFj, h_a3KFk,
                                                                              i_a3KFl, j_a3KFm)
                                                                        [LclId] =
                                                                            CCCS (,,,,,,,,,)! [a2_s3NgV
                                                                                               b3_s3NgW
                                                                                               c1_s3NgX
                                                                                               d1_s3NgY
                                                                                               e1_s3NgZ
                                                                                               f1_s3Nh0
                                                                                               g1_s3Nh1
                                                                                               h1_s3Nh2
                                                                                               i1_s3Nh6
                                                                                               j1_s3Nh7];
                                                                      } in  k1_s3NgS sat_s3Nh8;
                                                                };
                                                      } in 
                                                        GHC.Read.$fRead(,)2
                                                            $dRead8_s3NgL
                                                            $dRead9_s3NgM
                                                            n_s3NgQ
                                                            sat_s3Nh9;
                                            } in 
                                              case
                                                  Text.Read.Lex.$wexpect
                                                      GHC.Read.$fRead(,)_lexeme sat_s3Nha
                                              of
                                              { Unit# ww1_s3Nhc [Occ=Once] ->
                                                    Text.ParserCombinators.ReadP.Look [ww1_s3Nhc];
                                              };
                                      };
                            } in  ds1_s3NgR sat_s3Nhd;
                  } in  sat_s3Nhe; } in
        let {
          lvl2_s3Nhf [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> forall b2.
                  ((a_a3KFd, b_a3KFe, c_a3KFf, d_a3KFg, e_a3KFh, f_a3KFi, g_a3KFj,
                    h_a3KFk, i_a3KFl, j_a3KFm)
                   -> Text.ParserCombinators.ReadP.P b2)
                  -> Text.ParserCombinators.ReadP.P b2
          [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
              [p_s3NgP] \r [w_s3Nhg w1_s3Nhh]
                  case GHC.Read.$wparen' p_s3NgP w_s3Nhg w1_s3Nhh of {
                    Unit# ww1_s3Nhj [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Get [ww1_s3Nhj];
                  }; } in
        let {
          sat_s3Nho [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_a3KFd, b_a3KFe, c_a3KFf, d_a3KFg, e_a3KFh, f_a3KFi, g_a3KFj,
                  h_a3KFk, i_a3KFl, j_a3KFm)
          [LclId] =
              [lvl2_s3Nhf] \r [eta2_s3Nhk eta3_s3Nhl]
                  case
                      GHC.Read.$wskipSpacesThenP lvl2_s3Nhf eta2_s3Nhk eta3_s3Nhl
                  of
                  { Unit# ww1_s3Nhn [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Look [ww1_s3Nhn];
                  };
        } in  GHC.Read.list3 sat_s3Nho eta_s3NgN eta1_s3NgO;

GHC.Read.$fRead(,,,,,,,,)1
  :: forall a b c d e f g h i.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        ((a, b, c, d, e, f, g, h, i) -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=11,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Nhp
           $dRead1_s3Nhq
           $dRead2_s3Nhr
           $dRead3_s3Nhs
           $dRead4_s3Nht
           $dRead5_s3Nhu
           $dRead6_s3Nhv
           $dRead7_s3Nhw
           $dRead8_s3Nhx
           eta_s3Nhy
           eta1_s3Nhz]
        let {
          p_s3NhA [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> Text.ParserCombinators.ReadP.ReadP
                    (a_a3KGE, b_a3KGF, c_a3KGG, d_a3KGH, e_a3KGI, f_a3KGJ, g_a3KGK,
                     h_a3KGL, i_a3KGM)
          [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
              [$dRead_s3Nhp
               $dRead1_s3Nhq
               $dRead2_s3Nhr
               $dRead3_s3Nhs
               $dRead4_s3Nht
               $dRead5_s3Nhu
               $dRead6_s3Nhv
               $dRead7_s3Nhw
               $dRead8_s3Nhx] \r [n_s3NhB]
                  let {
                    ds1_s3NhC [Occ=OnceL, Dmd=<L,C(U)>]
                      :: Text.ParserCombinators.ReadP.ReadP
                           (a_a3KGE, b_a3KGF, c_a3KGG, d_a3KGH, e_a3KGI, f_a3KGJ, g_a3KGK,
                            h_a3KGL)
                    [LclId] =
                        [$dRead_s3Nhp
                         $dRead1_s3Nhq
                         $dRead2_s3Nhr
                         $dRead3_s3Nhs
                         $dRead4_s3Nht
                         $dRead5_s3Nhu
                         $dRead6_s3Nhv
                         $dRead7_s3Nhw
                         n_s3NhB] \u []
                            GHC.Read.$fRead(,,,,,,,)2
                                $dRead_s3Nhp
                                $dRead1_s3Nhq
                                $dRead2_s3Nhr
                                $dRead3_s3Nhs
                                $dRead4_s3Nht
                                $dRead5_s3Nhu
                                $dRead6_s3Nhv
                                $dRead7_s3Nhw
                                n_s3NhB; } in
                  let {
                    sat_s3NhW [Occ=Once]
                      :: forall b2.
                         ((a_a3KGE, b_a3KGF, c_a3KGG, d_a3KGH, e_a3KGI, f_a3KGJ, g_a3KGK,
                           h_a3KGL, i_a3KGM)
                          -> Text.ParserCombinators.ReadP.P b2)
                         -> Text.ParserCombinators.ReadP.P b2
                    [LclId] =
                        [$dRead8_s3Nhx n_s3NhB ds1_s3NhC] \r [k1_s3NhD]
                            let {
                              sat_s3NhV [Occ=Once]
                                :: (a_a3KGE, b_a3KGF, c_a3KGG, d_a3KGH, e_a3KGI, f_a3KGJ, g_a3KGK,
                                    h_a3KGL)
                                   -> Text.ParserCombinators.ReadP.P b2_a3nIU
                              [LclId] =
                                  [$dRead8_s3Nhx n_s3NhB k1_s3NhD] \r [a1_s3NhE]
                                      case a1_s3NhE of {
                                        (,,,,,,,) a2_s3NhG [Occ=OnceL]
                                                  b3_s3NhH [Occ=OnceL]
                                                  c1_s3NhI [Occ=OnceL]
                                                  d1_s3NhJ [Occ=OnceL]
                                                  e1_s3NhK [Occ=OnceL]
                                                  f1_s3NhL [Occ=OnceL]
                                                  g1_s3NhM [Occ=OnceL]
                                                  h1_s3NhN [Occ=OnceL] ->
                                            let {
                                              sat_s3NhS [Occ=Once]
                                                :: () -> Text.ParserCombinators.ReadP.P b2_a3nIU
                                              [LclId] =
                                                  [$dRead8_s3Nhx
                                                   n_s3NhB
                                                   k1_s3NhD
                                                   a2_s3NhG
                                                   b3_s3NhH
                                                   c1_s3NhI
                                                   d1_s3NhJ
                                                   e1_s3NhK
                                                   f1_s3NhL
                                                   g1_s3NhM
                                                   h1_s3NhN] \r [a3_s3NhO]
                                                      let {
                                                        sat_s3NhR [Occ=Once]
                                                          :: i_a3KGM
                                                             -> Text.ParserCombinators.ReadP.P
                                                                  b2_a3nIU
                                                        [LclId] =
                                                            [k1_s3NhD
                                                             a2_s3NhG
                                                             b3_s3NhH
                                                             c1_s3NhI
                                                             d1_s3NhJ
                                                             e1_s3NhK
                                                             f1_s3NhL
                                                             g1_s3NhM
                                                             h1_s3NhN] \r [a4_s3NhP]
                                                                let {
                                                                  sat_s3NhQ [Occ=Once]
                                                                    :: (a_a3KGE, b_a3KGF, c_a3KGG,
                                                                        d_a3KGH, e_a3KGI, f_a3KGJ,
                                                                        g_a3KGK, h_a3KGL, i_a3KGM)
                                                                  [LclId] =
                                                                      CCCS (,,,,,,,,)! [a2_s3NhG
                                                                                        b3_s3NhH
                                                                                        c1_s3NhI
                                                                                        d1_s3NhJ
                                                                                        e1_s3NhK
                                                                                        f1_s3NhL
                                                                                        g1_s3NhM
                                                                                        h1_s3NhN
                                                                                        a4_s3NhP];
                                                                } in  k1_s3NhD sat_s3NhQ;
                                                      } in 
                                                        GHC.Read.readPrec
                                                            $dRead8_s3Nhx n_s3NhB sat_s3NhR;
                                            } in 
                                              case
                                                  Text.Read.Lex.$wexpect
                                                      GHC.Read.$fRead(,)_lexeme sat_s3NhS
                                              of
                                              { Unit# ww1_s3NhU [Occ=Once] ->
                                                    Text.ParserCombinators.ReadP.Look [ww1_s3NhU];
                                              };
                                      };
                            } in  ds1_s3NhC sat_s3NhV;
                  } in  sat_s3NhW; } in
        let {
          lvl2_s3NhX [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> forall b2.
                  ((a_a3KGE, b_a3KGF, c_a3KGG, d_a3KGH, e_a3KGI, f_a3KGJ, g_a3KGK,
                    h_a3KGL, i_a3KGM)
                   -> Text.ParserCombinators.ReadP.P b2)
                  -> Text.ParserCombinators.ReadP.P b2
          [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
              [p_s3NhA] \r [w_s3NhY w1_s3NhZ]
                  case GHC.Read.$wparen' p_s3NhA w_s3NhY w1_s3NhZ of {
                    Unit# ww1_s3Ni1 [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Get [ww1_s3Ni1];
                  }; } in
        let {
          sat_s3Ni6 [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_a3KGE, b_a3KGF, c_a3KGG, d_a3KGH, e_a3KGI, f_a3KGJ, g_a3KGK,
                  h_a3KGL, i_a3KGM)
          [LclId] =
              [lvl2_s3NhX] \r [eta2_s3Ni2 eta3_s3Ni3]
                  case
                      GHC.Read.$wskipSpacesThenP lvl2_s3NhX eta2_s3Ni2 eta3_s3Ni3
                  of
                  { Unit# ww1_s3Ni5 [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Look [ww1_s3Ni5];
                  };
        } in  GHC.Read.list3 sat_s3Ni6 eta_s3Nhy eta1_s3Nhz;

GHC.Read.$fRead(,,,,,,,)1
  :: forall a b c d e f g h.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        ((a, b, c, d, e, f, g, h) -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=10,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Ni7
           $dRead1_s3Ni8
           $dRead2_s3Ni9
           $dRead3_s3Nia
           $dRead4_s3Nib
           $dRead5_s3Nic
           $dRead6_s3Nid
           $dRead7_s3Nie
           eta_s3Nif
           eta1_s3Nig]
        let {
          p_s3Nih [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> Text.ParserCombinators.ReadP.ReadP
                    (a_a3KI0, b_a3KI1, c_a3KI2, d_a3KI3, e_a3KI4, f_a3KI5, g_a3KI6,
                     h_a3KI7)
          [LclId, Arity=1, Unf=OtherCon []] =
              [$dRead_s3Ni7
               $dRead1_s3Ni8
               $dRead2_s3Ni9
               $dRead3_s3Nia
               $dRead4_s3Nib
               $dRead5_s3Nic
               $dRead6_s3Nid
               $dRead7_s3Nie] \r [eta_B1]
                  GHC.Read.$fRead(,,,,,,,)2
                      $dRead_s3Ni7
                      $dRead1_s3Ni8
                      $dRead2_s3Ni9
                      $dRead3_s3Nia
                      $dRead4_s3Nib
                      $dRead5_s3Nic
                      $dRead6_s3Nid
                      $dRead7_s3Nie
                      eta_B1; } in
        let {
          lvl2_s3Nii [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> forall b2.
                  ((a_a3KI0, b_a3KI1, c_a3KI2, d_a3KI3, e_a3KI4, f_a3KI5, g_a3KI6,
                    h_a3KI7)
                   -> Text.ParserCombinators.ReadP.P b2)
                  -> Text.ParserCombinators.ReadP.P b2
          [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
              [p_s3Nih] \r [w_s3Nij w1_s3Nik]
                  case GHC.Read.$wparen' p_s3Nih w_s3Nij w1_s3Nik of {
                    Unit# ww1_s3Nim [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Get [ww1_s3Nim];
                  }; } in
        let {
          sat_s3Nir [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_a3KI0, b_a3KI1, c_a3KI2, d_a3KI3, e_a3KI4, f_a3KI5, g_a3KI6,
                  h_a3KI7)
          [LclId] =
              [lvl2_s3Nii] \r [eta2_s3Nin eta3_s3Nio]
                  case
                      GHC.Read.$wskipSpacesThenP lvl2_s3Nii eta2_s3Nin eta3_s3Nio
                  of
                  { Unit# ww1_s3Niq [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Look [ww1_s3Niq];
                  };
        } in  GHC.Read.list3 sat_s3Nir eta_s3Nif eta1_s3Nig;

GHC.Read.$fRead(,,,,,,)1
  :: forall a b c d e f g.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f,
      GHC.Read.Read g) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        ((a, b, c, d, e, f, g) -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=9,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Nis
           $dRead1_s3Nit
           $dRead2_s3Niu
           $dRead3_s3Niv
           $dRead4_s3Niw
           $dRead5_s3Nix
           $dRead6_s3Niy
           eta_s3Niz
           eta1_s3NiA]
        let {
          p_s3NiB [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> Text.ParserCombinators.ReadP.ReadP
                    (a_a3KIU, b_a3KIV, c_a3KIW, d_a3KIX, e_a3KIY, f_a3KIZ, g_a3KJ0)
          [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
              [$dRead_s3Nis
               $dRead1_s3Nit
               $dRead2_s3Niu
               $dRead3_s3Niv
               $dRead4_s3Niw
               $dRead5_s3Nix
               $dRead6_s3Niy] \r [n_s3NiC]
                  let {
                    ds1_s3NiD [Occ=OnceL, Dmd=<L,C(U)>]
                      :: Text.ParserCombinators.ReadP.ReadP
                           (a_a3KIU, b_a3KIV, c_a3KIW, d_a3KIX)
                    [LclId] =
                        [$dRead_s3Nis
                         $dRead1_s3Nit
                         $dRead2_s3Niu
                         $dRead3_s3Niv
                         n_s3NiC] \u []
                            GHC.Read.$fRead(,,,)2
                                $dRead_s3Nis
                                $dRead1_s3Nit
                                $dRead2_s3Niu
                                $dRead3_s3Niv
                                n_s3NiC; } in
                  let {
                    sat_s3Nj2 [Occ=Once]
                      :: forall b2.
                         ((a_a3KIU, b_a3KIV, c_a3KIW, d_a3KIX, e_a3KIY, f_a3KIZ, g_a3KJ0)
                          -> Text.ParserCombinators.ReadP.P b2)
                         -> Text.ParserCombinators.ReadP.P b2
                    [LclId] =
                        [$dRead4_s3Niw
                         $dRead5_s3Nix
                         $dRead6_s3Niy
                         n_s3NiC
                         ds1_s3NiD] \r [k1_s3NiE]
                            let {
                              sat_s3Nj1 [Occ=Once]
                                :: (a_a3KIU, b_a3KIV, c_a3KIW, d_a3KIX)
                                   -> Text.ParserCombinators.ReadP.P b2_a3nIU
                              [LclId] =
                                  [$dRead4_s3Niw
                                   $dRead5_s3Nix
                                   $dRead6_s3Niy
                                   n_s3NiC
                                   k1_s3NiE] \r [a1_s3NiF]
                                      case a1_s3NiF of {
                                        (,,,) a2_s3NiH [Occ=OnceL]
                                              b3_s3NiI [Occ=OnceL]
                                              c1_s3NiJ [Occ=OnceL]
                                              d1_s3NiK [Occ=OnceL] ->
                                            let {
                                              sat_s3NiY [Occ=Once]
                                                :: () -> Text.ParserCombinators.ReadP.P b2_a3nIU
                                              [LclId] =
                                                  [$dRead4_s3Niw
                                                   $dRead5_s3Nix
                                                   $dRead6_s3Niy
                                                   n_s3NiC
                                                   k1_s3NiE
                                                   a2_s3NiH
                                                   b3_s3NiI
                                                   c1_s3NiJ
                                                   d1_s3NiK] \r [a3_s3NiL]
                                                      let {
                                                        sat_s3NiX [Occ=Once]
                                                          :: (e_a3KIY, f_a3KIZ)
                                                             -> Text.ParserCombinators.ReadP.P
                                                                  b2_a3nIU
                                                        [LclId] =
                                                            [$dRead6_s3Niy
                                                             n_s3NiC
                                                             k1_s3NiE
                                                             a2_s3NiH
                                                             b3_s3NiI
                                                             c1_s3NiJ
                                                             d1_s3NiK] \r [a4_s3NiM]
                                                                case a4_s3NiM of {
                                                                  (,) e1_s3NiO [Occ=OnceL]
                                                                      f1_s3NiP [Occ=OnceL] ->
                                                                      let {
                                                                        sat_s3NiU [Occ=Once]
                                                                          :: ()
                                                                             -> Text.ParserCombinators.ReadP.P
                                                                                  b2_a3nIU
                                                                        [LclId] =
                                                                            [$dRead6_s3Niy
                                                                             n_s3NiC
                                                                             k1_s3NiE
                                                                             a2_s3NiH
                                                                             b3_s3NiI
                                                                             c1_s3NiJ
                                                                             d1_s3NiK
                                                                             e1_s3NiO
                                                                             f1_s3NiP] \r [a5_s3NiQ]
                                                                                let {
                                                                                  sat_s3NiT [Occ=Once]
                                                                                    :: g_a3KJ0
                                                                                       -> Text.ParserCombinators.ReadP.P
                                                                                            b2_a3nIU
                                                                                  [LclId] =
                                                                                      [k1_s3NiE
                                                                                       a2_s3NiH
                                                                                       b3_s3NiI
                                                                                       c1_s3NiJ
                                                                                       d1_s3NiK
                                                                                       e1_s3NiO
                                                                                       f1_s3NiP] \r [a6_s3NiR]
                                                                                          let {
                                                                                            sat_s3NiS [Occ=Once]
                                                                                              :: (a_a3KIU,
                                                                                                  b_a3KIV,
                                                                                                  c_a3KIW,
                                                                                                  d_a3KIX,
                                                                                                  e_a3KIY,
                                                                                                  f_a3KIZ,
                                                                                                  g_a3KJ0)
                                                                                            [LclId] =
                                                                                                CCCS (,,,,,,)! [a2_s3NiH
                                                                                                                b3_s3NiI
                                                                                                                c1_s3NiJ
                                                                                                                d1_s3NiK
                                                                                                                e1_s3NiO
                                                                                                                f1_s3NiP
                                                                                                                a6_s3NiR];
                                                                                          } in 
                                                                                            k1_s3NiE
                                                                                                sat_s3NiS;
                                                                                } in 
                                                                                  GHC.Read.readPrec
                                                                                      $dRead6_s3Niy
                                                                                      n_s3NiC
                                                                                      sat_s3NiT;
                                                                      } in 
                                                                        case
                                                                            Text.Read.Lex.$wexpect
                                                                                GHC.Read.$fRead(,)_lexeme
                                                                                sat_s3NiU
                                                                        of
                                                                        { Unit# ww1_s3NiW [Occ=Once] ->
                                                                              Text.ParserCombinators.ReadP.Look [ww1_s3NiW];
                                                                        };
                                                                };
                                                      } in 
                                                        GHC.Read.$fRead(,)2
                                                            $dRead4_s3Niw
                                                            $dRead5_s3Nix
                                                            n_s3NiC
                                                            sat_s3NiX;
                                            } in 
                                              case
                                                  Text.Read.Lex.$wexpect
                                                      GHC.Read.$fRead(,)_lexeme sat_s3NiY
                                              of
                                              { Unit# ww1_s3Nj0 [Occ=Once] ->
                                                    Text.ParserCombinators.ReadP.Look [ww1_s3Nj0];
                                              };
                                      };
                            } in  ds1_s3NiD sat_s3Nj1;
                  } in  sat_s3Nj2; } in
        let {
          lvl2_s3Nj3 [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> forall b2.
                  ((a_a3KIU, b_a3KIV, c_a3KIW, d_a3KIX, e_a3KIY, f_a3KIZ, g_a3KJ0)
                   -> Text.ParserCombinators.ReadP.P b2)
                  -> Text.ParserCombinators.ReadP.P b2
          [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
              [p_s3NiB] \r [w_s3Nj4 w1_s3Nj5]
                  case GHC.Read.$wparen' p_s3NiB w_s3Nj4 w1_s3Nj5 of {
                    Unit# ww1_s3Nj7 [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Get [ww1_s3Nj7];
                  }; } in
        let {
          sat_s3Njc [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_a3KIU, b_a3KIV, c_a3KIW, d_a3KIX, e_a3KIY, f_a3KIZ, g_a3KJ0)
          [LclId] =
              [lvl2_s3Nj3] \r [eta2_s3Nj8 eta3_s3Nj9]
                  case
                      GHC.Read.$wskipSpacesThenP lvl2_s3Nj3 eta2_s3Nj8 eta3_s3Nj9
                  of
                  { Unit# ww1_s3Njb [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Look [ww1_s3Njb];
                  };
        } in  GHC.Read.list3 sat_s3Njc eta_s3Niz eta1_s3NiA;

GHC.Read.$fRead(,,,,,)1
  :: forall a b c d e f.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        ((a, b, c, d, e, f) -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=8,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Njd
           $dRead1_s3Nje
           $dRead2_s3Njf
           $dRead3_s3Njg
           $dRead4_s3Njh
           $dRead5_s3Nji
           eta_s3Njj
           eta1_s3Njk]
        let {
          p_s3Njl [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> Text.ParserCombinators.ReadP.ReadP
                    (a_a3KKe, b_a3KKf, c_a3KKg, d_a3KKh, e_a3KKi, f_a3KKj)
          [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
              [$dRead_s3Njd
               $dRead1_s3Nje
               $dRead2_s3Njf
               $dRead3_s3Njg
               $dRead4_s3Njh
               $dRead5_s3Nji] \r [n_s3Njm]
                  let {
                    ds1_s3Njn [Occ=OnceL, Dmd=<L,C(U)>]
                      :: Text.ParserCombinators.ReadP.ReadP
                           (a_a3KKe, b_a3KKf, c_a3KKg, d_a3KKh)
                    [LclId] =
                        [$dRead_s3Njd
                         $dRead1_s3Nje
                         $dRead2_s3Njf
                         $dRead3_s3Njg
                         n_s3Njm] \u []
                            GHC.Read.$fRead(,,,)2
                                $dRead_s3Njd
                                $dRead1_s3Nje
                                $dRead2_s3Njf
                                $dRead3_s3Njg
                                n_s3Njm; } in
                  let {
                    sat_s3NjG [Occ=Once]
                      :: forall b2.
                         ((a_a3KKe, b_a3KKf, c_a3KKg, d_a3KKh, e_a3KKi, f_a3KKj)
                          -> Text.ParserCombinators.ReadP.P b2)
                         -> Text.ParserCombinators.ReadP.P b2
                    [LclId] =
                        [$dRead4_s3Njh $dRead5_s3Nji n_s3Njm ds1_s3Njn] \r [k1_s3Njo]
                            let {
                              sat_s3NjF [Occ=Once]
                                :: (a_a3KKe, b_a3KKf, c_a3KKg, d_a3KKh)
                                   -> Text.ParserCombinators.ReadP.P b2_a3nIU
                              [LclId] =
                                  [$dRead4_s3Njh $dRead5_s3Nji n_s3Njm k1_s3Njo] \r [a1_s3Njp]
                                      case a1_s3Njp of {
                                        (,,,) a2_s3Njr [Occ=OnceL]
                                              b3_s3Njs [Occ=OnceL]
                                              c1_s3Njt [Occ=OnceL]
                                              d1_s3Nju [Occ=OnceL] ->
                                            let {
                                              sat_s3NjC [Occ=Once]
                                                :: () -> Text.ParserCombinators.ReadP.P b2_a3nIU
                                              [LclId] =
                                                  [$dRead4_s3Njh
                                                   $dRead5_s3Nji
                                                   n_s3Njm
                                                   k1_s3Njo
                                                   a2_s3Njr
                                                   b3_s3Njs
                                                   c1_s3Njt
                                                   d1_s3Nju] \r [a3_s3Njv]
                                                      let {
                                                        sat_s3NjB [Occ=Once]
                                                          :: (e_a3KKi, f_a3KKj)
                                                             -> Text.ParserCombinators.ReadP.P
                                                                  b2_a3nIU
                                                        [LclId] =
                                                            [k1_s3Njo
                                                             a2_s3Njr
                                                             b3_s3Njs
                                                             c1_s3Njt
                                                             d1_s3Nju] \r [a4_s3Njw]
                                                                case a4_s3Njw of {
                                                                  (,) e1_s3Njy [Occ=Once]
                                                                      f1_s3Njz [Occ=Once] ->
                                                                      let {
                                                                        sat_s3NjA [Occ=Once]
                                                                          :: (a_a3KKe, b_a3KKf,
                                                                              c_a3KKg, d_a3KKh,
                                                                              e_a3KKi, f_a3KKj)
                                                                        [LclId] =
                                                                            CCCS (,,,,,)! [a2_s3Njr
                                                                                           b3_s3Njs
                                                                                           c1_s3Njt
                                                                                           d1_s3Nju
                                                                                           e1_s3Njy
                                                                                           f1_s3Njz];
                                                                      } in  k1_s3Njo sat_s3NjA;
                                                                };
                                                      } in 
                                                        GHC.Read.$fRead(,)2
                                                            $dRead4_s3Njh
                                                            $dRead5_s3Nji
                                                            n_s3Njm
                                                            sat_s3NjB;
                                            } in 
                                              case
                                                  Text.Read.Lex.$wexpect
                                                      GHC.Read.$fRead(,)_lexeme sat_s3NjC
                                              of
                                              { Unit# ww1_s3NjE [Occ=Once] ->
                                                    Text.ParserCombinators.ReadP.Look [ww1_s3NjE];
                                              };
                                      };
                            } in  ds1_s3Njn sat_s3NjF;
                  } in  sat_s3NjG; } in
        let {
          lvl2_s3NjH [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> forall b2.
                  ((a_a3KKe, b_a3KKf, c_a3KKg, d_a3KKh, e_a3KKi, f_a3KKj)
                   -> Text.ParserCombinators.ReadP.P b2)
                  -> Text.ParserCombinators.ReadP.P b2
          [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
              [p_s3Njl] \r [w_s3NjI w1_s3NjJ]
                  case GHC.Read.$wparen' p_s3Njl w_s3NjI w1_s3NjJ of {
                    Unit# ww1_s3NjL [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Get [ww1_s3NjL];
                  }; } in
        let {
          sat_s3NjQ [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_a3KKe, b_a3KKf, c_a3KKg, d_a3KKh, e_a3KKi, f_a3KKj)
          [LclId] =
              [lvl2_s3NjH] \r [eta2_s3NjM eta3_s3NjN]
                  case
                      GHC.Read.$wskipSpacesThenP lvl2_s3NjH eta2_s3NjM eta3_s3NjN
                  of
                  { Unit# ww1_s3NjP [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Look [ww1_s3NjP];
                  };
        } in  GHC.Read.list3 sat_s3NjQ eta_s3Njj eta1_s3Njk;

GHC.Read.$fRead(,,,,)1
  :: forall a b c d e.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        ((a, b, c, d, e) -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=7,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3NjR
           $dRead1_s3NjS
           $dRead2_s3NjT
           $dRead3_s3NjU
           $dRead4_s3NjV
           eta_s3NjW
           eta1_s3NjX]
        let {
          p_s3NjY [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> Text.ParserCombinators.ReadP.ReadP
                    (a_a3KLl, b_a3KLm, c_a3KLn, d_a3KLo, e_a3KLp)
          [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
              [$dRead_s3NjR
               $dRead1_s3NjS
               $dRead2_s3NjT
               $dRead3_s3NjU
               $dRead4_s3NjV] \r [n_s3NjZ]
                  let {
                    ds1_s3Nk0 [Occ=OnceL, Dmd=<L,C(U)>]
                      :: Text.ParserCombinators.ReadP.ReadP
                           (a_a3KLl, b_a3KLm, c_a3KLn, d_a3KLo)
                    [LclId] =
                        [$dRead_s3NjR
                         $dRead1_s3NjS
                         $dRead2_s3NjT
                         $dRead3_s3NjU
                         n_s3NjZ] \u []
                            GHC.Read.$fRead(,,,)2
                                $dRead_s3NjR
                                $dRead1_s3NjS
                                $dRead2_s3NjT
                                $dRead3_s3NjU
                                n_s3NjZ; } in
                  let {
                    sat_s3Nkg [Occ=Once]
                      :: forall b2.
                         ((a_a3KLl, b_a3KLm, c_a3KLn, d_a3KLo, e_a3KLp)
                          -> Text.ParserCombinators.ReadP.P b2)
                         -> Text.ParserCombinators.ReadP.P b2
                    [LclId] =
                        [$dRead4_s3NjV n_s3NjZ ds1_s3Nk0] \r [k1_s3Nk1]
                            let {
                              sat_s3Nkf [Occ=Once]
                                :: (a_a3KLl, b_a3KLm, c_a3KLn, d_a3KLo)
                                   -> Text.ParserCombinators.ReadP.P b2_a3nIU
                              [LclId] =
                                  [$dRead4_s3NjV n_s3NjZ k1_s3Nk1] \r [a1_s3Nk2]
                                      case a1_s3Nk2 of {
                                        (,,,) a2_s3Nk4 [Occ=OnceL]
                                              b3_s3Nk5 [Occ=OnceL]
                                              c1_s3Nk6 [Occ=OnceL]
                                              d1_s3Nk7 [Occ=OnceL] ->
                                            let {
                                              sat_s3Nkc [Occ=Once]
                                                :: () -> Text.ParserCombinators.ReadP.P b2_a3nIU
                                              [LclId] =
                                                  [$dRead4_s3NjV
                                                   n_s3NjZ
                                                   k1_s3Nk1
                                                   a2_s3Nk4
                                                   b3_s3Nk5
                                                   c1_s3Nk6
                                                   d1_s3Nk7] \r [a3_s3Nk8]
                                                      let {
                                                        sat_s3Nkb [Occ=Once]
                                                          :: e_a3KLp
                                                             -> Text.ParserCombinators.ReadP.P
                                                                  b2_a3nIU
                                                        [LclId] =
                                                            [k1_s3Nk1
                                                             a2_s3Nk4
                                                             b3_s3Nk5
                                                             c1_s3Nk6
                                                             d1_s3Nk7] \r [a4_s3Nk9]
                                                                let {
                                                                  sat_s3Nka [Occ=Once]
                                                                    :: (a_a3KLl, b_a3KLm, c_a3KLn,
                                                                        d_a3KLo, e_a3KLp)
                                                                  [LclId] =
                                                                      CCCS (,,,,)! [a2_s3Nk4
                                                                                    b3_s3Nk5
                                                                                    c1_s3Nk6
                                                                                    d1_s3Nk7
                                                                                    a4_s3Nk9];
                                                                } in  k1_s3Nk1 sat_s3Nka;
                                                      } in 
                                                        GHC.Read.readPrec
                                                            $dRead4_s3NjV n_s3NjZ sat_s3Nkb;
                                            } in 
                                              case
                                                  Text.Read.Lex.$wexpect
                                                      GHC.Read.$fRead(,)_lexeme sat_s3Nkc
                                              of
                                              { Unit# ww1_s3Nke [Occ=Once] ->
                                                    Text.ParserCombinators.ReadP.Look [ww1_s3Nke];
                                              };
                                      };
                            } in  ds1_s3Nk0 sat_s3Nkf;
                  } in  sat_s3Nkg; } in
        let {
          lvl2_s3Nkh [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> forall b2.
                  ((a_a3KLl, b_a3KLm, c_a3KLn, d_a3KLo, e_a3KLp)
                   -> Text.ParserCombinators.ReadP.P b2)
                  -> Text.ParserCombinators.ReadP.P b2
          [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
              [p_s3NjY] \r [w_s3Nki w1_s3Nkj]
                  case GHC.Read.$wparen' p_s3NjY w_s3Nki w1_s3Nkj of {
                    Unit# ww1_s3Nkl [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Get [ww1_s3Nkl];
                  }; } in
        let {
          sat_s3Nkq [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_a3KLl, b_a3KLm, c_a3KLn, d_a3KLo, e_a3KLp)
          [LclId] =
              [lvl2_s3Nkh] \r [eta2_s3Nkm eta3_s3Nkn]
                  case
                      GHC.Read.$wskipSpacesThenP lvl2_s3Nkh eta2_s3Nkm eta3_s3Nkn
                  of
                  { Unit# ww1_s3Nkp [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Look [ww1_s3Nkp];
                  };
        } in  GHC.Read.list3 sat_s3Nkq eta_s3NjW eta1_s3NjX;

GHC.Read.$fRead(,,,)1
  :: forall a b c d.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        ((a, b, c, d) -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=6,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Nkr
           $dRead1_s3Nks
           $dRead2_s3Nkt
           $dRead3_s3Nku
           eta_s3Nkv
           eta1_s3Nkw]
        let {
          p_s3Nkx [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> Text.ParserCombinators.ReadP.ReadP
                    (a_a3KMn, b_a3KMo, c_a3KMp, d_a3KMq)
          [LclId, Arity=1, Unf=OtherCon []] =
              [$dRead_s3Nkr
               $dRead1_s3Nks
               $dRead2_s3Nkt
               $dRead3_s3Nku] \r [eta_B1]
                  GHC.Read.$fRead(,,,)2
                      $dRead_s3Nkr $dRead1_s3Nks $dRead2_s3Nkt $dRead3_s3Nku eta_B1; } in
        let {
          lvl2_s3Nky [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> forall b2.
                  ((a_a3KMn, b_a3KMo, c_a3KMp, d_a3KMq)
                   -> Text.ParserCombinators.ReadP.P b2)
                  -> Text.ParserCombinators.ReadP.P b2
          [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
              [p_s3Nkx] \r [w_s3Nkz w1_s3NkA]
                  case GHC.Read.$wparen' p_s3Nkx w_s3Nkz w1_s3NkA of {
                    Unit# ww1_s3NkC [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Get [ww1_s3NkC];
                  }; } in
        let {
          sat_s3NkH [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_a3KMn, b_a3KMo, c_a3KMp, d_a3KMq)
          [LclId] =
              [lvl2_s3Nky] \r [eta2_s3NkD eta3_s3NkE]
                  case
                      GHC.Read.$wskipSpacesThenP lvl2_s3Nky eta2_s3NkD eta3_s3NkE
                  of
                  { Unit# ww1_s3NkG [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Look [ww1_s3NkG];
                  };
        } in  GHC.Read.list3 sat_s3NkH eta_s3Nkv eta1_s3Nkw;

GHC.Read.$fRead(,,)1
  :: forall a b c.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        ((a, b, c) -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=5,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3NkI
           $dRead1_s3NkJ
           $dRead2_s3NkK
           eta_s3NkL
           eta1_s3NkM]
        let {
          p_s3NkN [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> Text.ParserCombinators.ReadP.ReadP (a_a3KN1, b_a3KN2, c_a3KN3)
          [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
              [$dRead_s3NkI $dRead1_s3NkJ $dRead2_s3NkK] \r [n_s3NkO]
                  let {
                    ds1_s3NkP [Occ=OnceL, Dmd=<L,C(U)>]
                      :: Text.ParserCombinators.ReadP.ReadP (a_a3KN1, b_a3KN2)
                    [LclId] =
                        [$dRead_s3NkI $dRead1_s3NkJ n_s3NkO] \u []
                            GHC.Read.$fRead(,)2 $dRead_s3NkI $dRead1_s3NkJ n_s3NkO; } in
                  let {
                    sat_s3Nl3 [Occ=Once]
                      :: forall b2.
                         ((a_a3KN1, b_a3KN2, c_a3KN3) -> Text.ParserCombinators.ReadP.P b2)
                         -> Text.ParserCombinators.ReadP.P b2
                    [LclId] =
                        [$dRead2_s3NkK n_s3NkO ds1_s3NkP] \r [k1_s3NkQ]
                            let {
                              sat_s3Nl2 [Occ=Once]
                                :: (a_a3KN1, b_a3KN2) -> Text.ParserCombinators.ReadP.P b2_a3nIU
                              [LclId] =
                                  [$dRead2_s3NkK n_s3NkO k1_s3NkQ] \r [a1_s3NkR]
                                      case a1_s3NkR of {
                                        (,) a2_s3NkT [Occ=OnceL] b3_s3NkU [Occ=OnceL] ->
                                            let {
                                              sat_s3NkZ [Occ=Once]
                                                :: () -> Text.ParserCombinators.ReadP.P b2_a3nIU
                                              [LclId] =
                                                  [$dRead2_s3NkK
                                                   n_s3NkO
                                                   k1_s3NkQ
                                                   a2_s3NkT
                                                   b3_s3NkU] \r [a3_s3NkV]
                                                      let {
                                                        sat_s3NkY [Occ=Once]
                                                          :: c_a3KN3
                                                             -> Text.ParserCombinators.ReadP.P
                                                                  b2_a3nIU
                                                        [LclId] =
                                                            [k1_s3NkQ
                                                             a2_s3NkT
                                                             b3_s3NkU] \r [a4_s3NkW]
                                                                let {
                                                                  sat_s3NkX [Occ=Once]
                                                                    :: (a_a3KN1, b_a3KN2, c_a3KN3)
                                                                  [LclId] =
                                                                      CCCS (,,)! [a2_s3NkT
                                                                                  b3_s3NkU
                                                                                  a4_s3NkW];
                                                                } in  k1_s3NkQ sat_s3NkX;
                                                      } in 
                                                        GHC.Read.readPrec
                                                            $dRead2_s3NkK n_s3NkO sat_s3NkY;
                                            } in 
                                              case
                                                  Text.Read.Lex.$wexpect
                                                      GHC.Read.$fRead(,)_lexeme sat_s3NkZ
                                              of
                                              { Unit# ww1_s3Nl1 [Occ=Once] ->
                                                    Text.ParserCombinators.ReadP.Look [ww1_s3Nl1];
                                              };
                                      };
                            } in  ds1_s3NkP sat_s3Nl2;
                  } in  sat_s3Nl3; } in
        let {
          lvl2_s3Nl4 [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> forall b2.
                  ((a_a3KN1, b_a3KN2, c_a3KN3) -> Text.ParserCombinators.ReadP.P b2)
                  -> Text.ParserCombinators.ReadP.P b2
          [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
              [p_s3NkN] \r [w_s3Nl5 w1_s3Nl6]
                  case GHC.Read.$wparen' p_s3NkN w_s3Nl5 w1_s3Nl6 of {
                    Unit# ww1_s3Nl8 [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Get [ww1_s3Nl8];
                  }; } in
        let {
          sat_s3Nld [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_a3KN1, b_a3KN2, c_a3KN3)
          [LclId] =
              [lvl2_s3Nl4] \r [eta2_s3Nl9 eta3_s3Nla]
                  case
                      GHC.Read.$wskipSpacesThenP lvl2_s3Nl4 eta2_s3Nl9 eta3_s3Nla
                  of
                  { Unit# ww1_s3Nlc [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Look [ww1_s3Nlc];
                  };
        } in  GHC.Read.list3 sat_s3Nld eta_s3NkL eta1_s3NkM;

GHC.Read.$fRead(,)1
  :: forall a b.
     (GHC.Read.Read a, GHC.Read.Read b) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        ((a, b) -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=4,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Nle $dRead1_s3Nlf eta_s3Nlg eta1_s3Nlh]
        let {
          p_s3Nli [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> Text.ParserCombinators.ReadP.ReadP (a_a3KNT, b_a3KNU)
          [LclId, Arity=1, Unf=OtherCon []] =
              [$dRead_s3Nle $dRead1_s3Nlf] \r [eta_B1]
                  GHC.Read.$fRead(,)2 $dRead_s3Nle $dRead1_s3Nlf eta_B1; } in
        let {
          lvl2_s3Nlj [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> forall b2.
                  ((a_a3KNT, b_a3KNU) -> Text.ParserCombinators.ReadP.P b2)
                  -> Text.ParserCombinators.ReadP.P b2
          [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
              [p_s3Nli] \r [w_s3Nlk w1_s3Nll]
                  case GHC.Read.$wparen' p_s3Nli w_s3Nlk w1_s3Nll of {
                    Unit# ww1_s3Nln [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Get [ww1_s3Nln];
                  }; } in
        let {
          sat_s3Nls [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec (a_a3KNT, b_a3KNU)
          [LclId] =
              [lvl2_s3Nlj] \r [eta2_s3Nlo eta3_s3Nlp]
                  case
                      GHC.Read.$wskipSpacesThenP lvl2_s3Nlj eta2_s3Nlo eta3_s3Nlp
                  of
                  { Unit# ww1_s3Nlr [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Look [ww1_s3Nlr];
                  };
        } in  GHC.Read.list3 sat_s3Nls eta_s3Nlg eta1_s3Nlh;

GHC.Read.list2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "["#;

GHC.Read.list1 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Read.list2;

GHC.Read.list_lexeme :: Text.Read.Lex.Lexeme
[GblId, Str=m3, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Punc! [GHC.Read.list1];

GHC.Read.list
  :: forall a.
     Text.ParserCombinators.ReadPrec.ReadPrec a
     -> Text.ParserCombinators.ReadPrec.ReadPrec [a]
[GblId, Arity=1, Str=<L,1*C1(C(U))>, Unf=OtherCon []] =
    [] \r [readx_s3Nlt]
        let {
          ds1_s3Nlu [Dmd=<L,C(U)>]
            :: Text.ParserCombinators.ReadP.ReadP a_a3KpE
          [LclId] =
              [readx_s3Nlt] \u []
                  readx_s3Nlt Text.ParserCombinators.ReadPrec.minPrec; } in
        let {
          $wlistRest_s3Nlv [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
            :: GHC.Types.Bool
               -> forall b1.
                  ([a_a3KpE] -> Text.ParserCombinators.ReadP.P b1)
                  -> Text.ParserCombinators.ReadP.P b1
          [LclId, Arity=2, Str=<L,U><L,C(U)>, Unf=OtherCon []] =
              sat-only [ds1_s3Nlu $wlistRest_s3Nlv] \r [w_s3Nlw w1_s3Nlx]
                  let {
                    lvl116_s3Nly [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3MtN
                    [LclId] =
                        [ds1_s3Nlu $wlistRest_s3Nlv w_s3Nlw w1_s3Nlx] \u []
                            let {
                              lvl2_s3Nlz [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3MtN
                              [LclId] =
                                  [w1_s3Nlx] \u [] w1_s3Nlx GHC.Types.[]; } in
                            let {
                              lvl3_s3NlA [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3MtN
                              [LclId] =
                                  [ds1_s3Nlu $wlistRest_s3Nlv w1_s3Nlx] \u []
                                      let {
                                        sat_s3NlF [Occ=Once]
                                          :: a_a3KpE -> Text.ParserCombinators.ReadP.P b1_s3MtN
                                        [LclId] =
                                            [$wlistRest_s3Nlv w1_s3Nlx] \r [a1_s3NlB]
                                                let {
                                                  sat_s3NlE [Occ=Once]
                                                    :: [a_a3KpE]
                                                       -> Text.ParserCombinators.ReadP.P b1_s3MtN
                                                  [LclId] =
                                                      [w1_s3Nlx a1_s3NlB] \r [a2_s3NlC]
                                                          let {
                                                            sat_s3NlD [Occ=Once] :: [a_a3KpE]
                                                            [LclId] =
                                                                CCCS :! [a1_s3NlB a2_s3NlC];
                                                          } in  w1_s3Nlx sat_s3NlD;
                                                } in  $wlistRest_s3Nlv GHC.Types.True sat_s3NlE;
                                      } in  ds1_s3Nlu sat_s3NlF; } in
                            let {
                              sat_s3Nm1 [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_s3MtN
                              [LclId] =
                                  [w_s3Nlw lvl2_s3Nlz lvl3_s3NlA] \u []
                                      let {
                                        sat_s3Nm0 [Occ=Once]
                                          :: Text.Read.Lex.Lexeme
                                             -> Text.ParserCombinators.ReadP.P b1_s3MtN
                                        [LclId] =
                                            [w_s3Nlw lvl2_s3Nlz lvl3_s3NlA] \r [a1_s3NlK]
                                                case a1_s3NlK of {
                                                  __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                                                  Text.Read.Lex.Punc c_s3NlM [Occ=Once!] ->
                                                      case c_s3NlM of {
                                                        [] -> Text.ParserCombinators.ReadP.Fail [];
                                                        : ds_s3NlO [Occ=Once!]
                                                          ds2_s3NlP [Occ=Once*!] ->
                                                            case ds_s3NlO of {
                                                              GHC.Types.C# ds3_s3NlR [Occ=Once!] ->
                                                                  case ds3_s3NlR of {
                                                                    __DEFAULT ->
                                                                        Text.ParserCombinators.ReadP.Fail [];
                                                                    ','# ->
                                                                        case ds2_s3NlP of {
                                                                          [] ->
                                                                              case w_s3Nlw of {
                                                                                GHC.Types.False ->
                                                                                    Text.ParserCombinators.ReadP.Fail [];
                                                                                GHC.Types.True ->
                                                                                    lvl3_s3NlA;
                                                                              };
                                                                          : _ [Occ=Dead]
                                                                            _ [Occ=Dead] ->
                                                                              Text.ParserCombinators.ReadP.Fail [];
                                                                        };
                                                                    ']'# ->
                                                                        case ds2_s3NlP of {
                                                                          [] -> lvl2_s3Nlz;
                                                                          : _ [Occ=Dead]
                                                                            _ [Occ=Dead] ->
                                                                              Text.ParserCombinators.ReadP.Fail [];
                                                                        };
                                                                  };
                                                            };
                                                      };
                                                };
                                      } in  Text.Read.Lex.expect2 sat_s3Nm0; } in
                            let {
                              sat_s3NlI [Occ=OnceL]
                                :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3MtN
                              [LclId] =
                                  [] \r [a3_s3NlG]
                                      case a3_s3NlG of {
                                        __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                                      }; } in
                            let {
                              sat_s3NlJ [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_s3MtN
                              [LclId] =
                                  CCCS Text.ParserCombinators.ReadP.Look! [sat_s3NlI];
                            } in 
                              Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                  sat_s3NlJ sat_s3Nm1; } in
                  let {
                    k_s3Nm2 [Occ=OnceL, Dmd=<L,C(U)>]
                      :: () -> Text.ParserCombinators.ReadP.P b1_s3MtN
                    [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
                        [lvl116_s3Nly] \r [a3_s3Nm3] lvl116_s3Nly; } in
                  let {
                    sat_s3Nm5 [Occ=Once]
                      :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3MtN
                    [LclId] =
                        [k_s3Nm2] \r [a1_s3Nm4]
                            Text.ParserCombinators.ReadP.skipSpaces2 a1_s3Nm4 k_s3Nm2;
                  } in  Text.ParserCombinators.ReadP.Look [sat_s3Nm5]; } in
        let {
          sat_s3Nmj [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec [a_a3KpE]
          [LclId] =
              [ds1_s3Nlu $wlistRest_s3Nlv] \r [n_s3Nm6 eta_s3Nm7]
                  let {
                    sat_s3Nmg [Occ=Once]
                      :: () -> Text.ParserCombinators.ReadP.P b_a3ngn
                    [LclId] =
                        [ds1_s3Nlu $wlistRest_s3Nlv eta_s3Nm7] \r [a1_s3Nm8]
                            let {
                              sat_s3Nmf [Occ=Once] :: Text.ParserCombinators.ReadP.P b_a3ngn
                              [LclId] =
                                  [ds1_s3Nlu $wlistRest_s3Nlv eta_s3Nm7] \u []
                                      let {
                                        sat_s3Nme [Occ=Once]
                                          :: a_a3KpE -> Text.ParserCombinators.ReadP.P b_a3ngn
                                        [LclId] =
                                            [$wlistRest_s3Nlv eta_s3Nm7] \r [a2_s3Nma]
                                                let {
                                                  sat_s3Nmd [Occ=Once]
                                                    :: [a_a3KpE]
                                                       -> Text.ParserCombinators.ReadP.P b_a3ngn
                                                  [LclId] =
                                                      [eta_s3Nm7 a2_s3Nma] \r [a3_s3Nmb]
                                                          let {
                                                            sat_s3Nmc [Occ=Once] :: [a_a3KpE]
                                                            [LclId] =
                                                                CCCS :! [a2_s3Nma a3_s3Nmb];
                                                          } in  eta_s3Nm7 sat_s3Nmc;
                                                } in  $wlistRest_s3Nlv GHC.Types.True sat_s3Nmd;
                                      } in  ds1_s3Nlu sat_s3Nme;
                            } in 
                              case $wlistRest_s3Nlv GHC.Types.False eta_s3Nm7 of sat_s3Nm9 {
                                __DEFAULT ->
                                    Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                        sat_s3Nm9 sat_s3Nmf;
                              };
                  } in 
                    case Text.Read.Lex.$wexpect GHC.Read.list_lexeme sat_s3Nmg of {
                      Unit# ww1_s3Nmi [Occ=Once] ->
                          Text.ParserCombinators.ReadP.Look [ww1_s3Nmi];
                    };
        } in  GHC.Read.list3 sat_s3Nmj;

GHC.Read.readListPrecDefault
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadPrec.ReadPrec [a]
[GblId, Arity=1, Str=<L,1*U(A,A,1*C1(C(U)),A)>, Unf=OtherCon []] =
    [] \r [$dRead_s3Nmk]
        let {
          sat_s3Nml [Occ=Once, Dmd=<L,1*C1(C(U))>]
            :: Text.ParserCombinators.ReadPrec.ReadPrec a_a3Ks9
          [LclId] =
              [$dRead_s3Nmk] \s [] GHC.Read.readPrec $dRead_s3Nmk;
        } in  GHC.Read.list sat_s3Nml;

GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadListPrec
  :: forall a b c d e f g h i j k l m n o.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l, GHC.Read.Read m, GHC.Read.Read n,
      GHC.Read.Read o) =>
     Text.ParserCombinators.ReadPrec.ReadPrec
       [(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)]
[GblId,
 Arity=15,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Nmm
           $dRead1_s3Nmn
           $dRead2_s3Nmo
           $dRead3_s3Nmp
           $dRead4_s3Nmq
           $dRead5_s3Nmr
           $dRead6_s3Nms
           $dRead7_s3Nmt
           $dRead8_s3Nmu
           $dRead9_s3Nmv
           $dRead10_s3Nmw
           $dRead11_s3Nmx
           $dRead12_s3Nmy
           $dRead13_s3Nmz
           $dRead14_s3NmA]
        let {
          sat_s3NmB [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KGz, b_X3KGB, c_X3KGD, d_X3KGF, e_X3KGH, f_X3KGJ, g_X3KGL,
                  h_X3KGN, i_X3KGP, j_X3KGR, k_X3KGT, l_X3KGV, m_X3KGX, n_X3KGZ,
                  o_X3KH1)
          [LclId] =
              [$dRead_s3Nmm
               $dRead1_s3Nmn
               $dRead2_s3Nmo
               $dRead3_s3Nmp
               $dRead4_s3Nmq
               $dRead5_s3Nmr
               $dRead6_s3Nms
               $dRead7_s3Nmt
               $dRead8_s3Nmu
               $dRead9_s3Nmv
               $dRead10_s3Nmw
               $dRead11_s3Nmx
               $dRead12_s3Nmy
               $dRead13_s3Nmz
               $dRead14_s3NmA] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,,,,,,,,,,)1
                      $dRead_s3Nmm
                      $dRead1_s3Nmn
                      $dRead2_s3Nmo
                      $dRead3_s3Nmp
                      $dRead4_s3Nmq
                      $dRead5_s3Nmr
                      $dRead6_s3Nms
                      $dRead7_s3Nmt
                      $dRead8_s3Nmu
                      $dRead9_s3Nmv
                      $dRead10_s3Nmw
                      $dRead11_s3Nmx
                      $dRead12_s3Nmy
                      $dRead13_s3Nmz
                      $dRead14_s3NmA
                      eta_B2
                      eta_B1;
        } in  GHC.Read.list sat_s3NmB;

GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadsPrec
  :: forall a b c d e f g h i j k l m n o.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l, GHC.Read.Read m, GHC.Read.Read n,
      GHC.Read.Read o) =>
     GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS
          (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)
[GblId,
 Arity=16,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3NmC
           $dRead1_s3NmD
           $dRead2_s3NmE
           $dRead3_s3NmF
           $dRead4_s3NmG
           $dRead5_s3NmH
           $dRead6_s3NmI
           $dRead7_s3NmJ
           $dRead8_s3NmK
           $dRead9_s3NmL
           $dRead10_s3NmM
           $dRead11_s3NmN
           $dRead12_s3NmO
           $dRead13_s3NmP
           $dRead14_s3NmQ
           n1_s3NmR]
        let {
          sat_s3NmS [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 (a_X3KGA, b_X3KGC, c_X3KGE, d_X3KGG, e_X3KGI, f_X3KGK, g_X3KGM,
                  h_X3KGO, i_X3KGQ, j_X3KGS, k_X3KGU, l_X3KGW, m_X3KGY, n_X3KH0,
                  o_X3KH2)
          [LclId] =
              [$dRead_s3NmC
               $dRead1_s3NmD
               $dRead2_s3NmE
               $dRead3_s3NmF
               $dRead4_s3NmG
               $dRead5_s3NmH
               $dRead6_s3NmI
               $dRead7_s3NmJ
               $dRead8_s3NmK
               $dRead9_s3NmL
               $dRead10_s3NmM
               $dRead11_s3NmN
               $dRead12_s3NmO
               $dRead13_s3NmP
               $dRead14_s3NmQ
               n1_s3NmR] \u []
                  GHC.Read.$fRead(,,,,,,,,,,,,,,)1
                      $dRead_s3NmC
                      $dRead1_s3NmD
                      $dRead2_s3NmE
                      $dRead3_s3NmF
                      $dRead4_s3NmG
                      $dRead5_s3NmH
                      $dRead6_s3NmI
                      $dRead7_s3NmJ
                      $dRead8_s3NmK
                      $dRead9_s3NmL
                      $dRead10_s3NmM
                      $dRead11_s3NmN
                      $dRead12_s3NmO
                      $dRead13_s3NmP
                      $dRead14_s3NmQ
                      n1_s3NmR
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NmS;

GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadList
  :: forall a b c d e f g h i j k l m n o.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l, GHC.Read.Read m, GHC.Read.Read n,
      GHC.Read.Read o) =>
     Text.ParserCombinators.ReadP.ReadS
       [(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)]
[GblId,
 Arity=15,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3NmT
           $dRead1_s3NmU
           $dRead2_s3NmV
           $dRead3_s3NmW
           $dRead4_s3NmX
           $dRead5_s3NmY
           $dRead6_s3NmZ
           $dRead7_s3Nn0
           $dRead8_s3Nn1
           $dRead9_s3Nn2
           $dRead10_s3Nn3
           $dRead11_s3Nn4
           $dRead12_s3Nn5
           $dRead13_s3Nn6
           $dRead14_s3Nn7]
        let {
          sat_s3Nn9 [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 [(a_X3KGB, b_X3KGD, c_X3KGF, d_X3KGH, e_X3KGJ, f_X3KGL, g_X3KGN,
                   h_X3KGP, i_X3KGR, j_X3KGT, k_X3KGV, l_X3KGX, m_X3KGZ, n_X3KH1,
                   o_X3KH3)]
          [LclId] =
              [$dRead_s3NmT
               $dRead1_s3NmU
               $dRead2_s3NmV
               $dRead3_s3NmW
               $dRead4_s3NmX
               $dRead5_s3NmY
               $dRead6_s3NmZ
               $dRead7_s3Nn0
               $dRead8_s3Nn1
               $dRead9_s3Nn2
               $dRead10_s3Nn3
               $dRead11_s3Nn4
               $dRead12_s3Nn5
               $dRead13_s3Nn6
               $dRead14_s3Nn7] \u []
                  let {
                    sat_s3Nn8 [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec
                           (a_X3KGB, b_X3KGD, c_X3KGF, d_X3KGH, e_X3KGJ, f_X3KGL, g_X3KGN,
                            h_X3KGP, i_X3KGR, j_X3KGT, k_X3KGV, l_X3KGX, m_X3KGZ, n_X3KH1,
                            o_X3KH3)
                    [LclId] =
                        [$dRead_s3NmT
                         $dRead1_s3NmU
                         $dRead2_s3NmV
                         $dRead3_s3NmW
                         $dRead4_s3NmX
                         $dRead5_s3NmY
                         $dRead6_s3NmZ
                         $dRead7_s3Nn0
                         $dRead8_s3Nn1
                         $dRead9_s3Nn2
                         $dRead10_s3Nn3
                         $dRead11_s3Nn4
                         $dRead12_s3Nn5
                         $dRead13_s3Nn6
                         $dRead14_s3Nn7] \r [eta_B2 eta_B1]
                            GHC.Read.$fRead(,,,,,,,,,,,,,,)1
                                $dRead_s3NmT
                                $dRead1_s3NmU
                                $dRead2_s3NmV
                                $dRead3_s3NmW
                                $dRead4_s3NmX
                                $dRead5_s3NmY
                                $dRead6_s3NmZ
                                $dRead7_s3Nn0
                                $dRead8_s3Nn1
                                $dRead9_s3Nn2
                                $dRead10_s3Nn3
                                $dRead11_s3Nn4
                                $dRead12_s3Nn5
                                $dRead13_s3Nn6
                                $dRead14_s3Nn7
                                eta_B2
                                eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s3Nn8
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3Nn9;

GHC.Read.$fRead(,,,,,,,,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h i j k l m n o.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l, GHC.Read.Read m, GHC.Read.Read n,
      GHC.Read.Read o) =>
     GHC.Read.Read (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)
[GblId[DFunId],
 Arity=15,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>m] =
    [] \r [$dRead_s3Nna
           $dRead1_s3Nnb
           $dRead2_s3Nnc
           $dRead3_s3Nnd
           $dRead4_s3Nne
           $dRead5_s3Nnf
           $dRead6_s3Nng
           $dRead7_s3Nnh
           $dRead8_s3Nni
           $dRead9_s3Nnj
           $dRead10_s3Nnk
           $dRead11_s3Nnl
           $dRead12_s3Nnm
           $dRead13_s3Nnn
           $dRead14_s3Nno]
        let {
          sat_s3Nns [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 [(a_X3KGC, b_X3KGE, c_X3KGG, d_X3KGI, e_X3KGK, f_X3KGM, g_X3KGO,
                   h_X3KGQ, i_X3KGS, j_X3KGU, k_X3KGW, l_X3KGY, m_X3KH0, n_X3KH2,
                   o_X3KH4)]
          [LclId] =
              [$dRead_s3Nna
               $dRead1_s3Nnb
               $dRead2_s3Nnc
               $dRead3_s3Nnd
               $dRead4_s3Nne
               $dRead5_s3Nnf
               $dRead6_s3Nng
               $dRead7_s3Nnh
               $dRead8_s3Nni
               $dRead9_s3Nnj
               $dRead10_s3Nnk
               $dRead11_s3Nnl
               $dRead12_s3Nnm
               $dRead13_s3Nnn
               $dRead14_s3Nno] \u []
                  GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadListPrec
                      $dRead_s3Nna
                      $dRead1_s3Nnb
                      $dRead2_s3Nnc
                      $dRead3_s3Nnd
                      $dRead4_s3Nne
                      $dRead5_s3Nnf
                      $dRead6_s3Nng
                      $dRead7_s3Nnh
                      $dRead8_s3Nni
                      $dRead9_s3Nnj
                      $dRead10_s3Nnk
                      $dRead11_s3Nnl
                      $dRead12_s3Nnm
                      $dRead13_s3Nnn
                      $dRead14_s3Nno; } in
        let {
          sat_s3Nnr [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KGC, b_X3KGE, c_X3KGG, d_X3KGI, e_X3KGK, f_X3KGM, g_X3KGO,
                  h_X3KGQ, i_X3KGS, j_X3KGU, k_X3KGW, l_X3KGY, m_X3KH0, n_X3KH2,
                  o_X3KH4)
          [LclId] =
              [$dRead_s3Nna
               $dRead1_s3Nnb
               $dRead2_s3Nnc
               $dRead3_s3Nnd
               $dRead4_s3Nne
               $dRead5_s3Nnf
               $dRead6_s3Nng
               $dRead7_s3Nnh
               $dRead8_s3Nni
               $dRead9_s3Nnj
               $dRead10_s3Nnk
               $dRead11_s3Nnl
               $dRead12_s3Nnm
               $dRead13_s3Nnn
               $dRead14_s3Nno] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,,,,,,,,,,)1
                      $dRead_s3Nna
                      $dRead1_s3Nnb
                      $dRead2_s3Nnc
                      $dRead3_s3Nnd
                      $dRead4_s3Nne
                      $dRead5_s3Nnf
                      $dRead6_s3Nng
                      $dRead7_s3Nnh
                      $dRead8_s3Nni
                      $dRead9_s3Nnj
                      $dRead10_s3Nnk
                      $dRead11_s3Nnl
                      $dRead12_s3Nnm
                      $dRead13_s3Nnn
                      $dRead14_s3Nno
                      eta_B2
                      eta_B1; } in
        let {
          sat_s3Nnq [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS
                 [(a_X3KGC, b_X3KGE, c_X3KGG, d_X3KGI, e_X3KGK, f_X3KGM, g_X3KGO,
                   h_X3KGQ, i_X3KGS, j_X3KGU, k_X3KGW, l_X3KGY, m_X3KH0, n_X3KH2,
                   o_X3KH4)]
          [LclId] =
              [$dRead_s3Nna
               $dRead1_s3Nnb
               $dRead2_s3Nnc
               $dRead3_s3Nnd
               $dRead4_s3Nne
               $dRead5_s3Nnf
               $dRead6_s3Nng
               $dRead7_s3Nnh
               $dRead8_s3Nni
               $dRead9_s3Nnj
               $dRead10_s3Nnk
               $dRead11_s3Nnl
               $dRead12_s3Nnm
               $dRead13_s3Nnn
               $dRead14_s3Nno] \u []
                  GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadList
                      $dRead_s3Nna
                      $dRead1_s3Nnb
                      $dRead2_s3Nnc
                      $dRead3_s3Nnd
                      $dRead4_s3Nne
                      $dRead5_s3Nnf
                      $dRead6_s3Nng
                      $dRead7_s3Nnh
                      $dRead8_s3Nni
                      $dRead9_s3Nnj
                      $dRead10_s3Nnk
                      $dRead11_s3Nnl
                      $dRead12_s3Nnm
                      $dRead13_s3Nnn
                      $dRead14_s3Nno; } in
        let {
          sat_s3Nnp [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS
                    (a_X3KGC, b_X3KGE, c_X3KGG, d_X3KGI, e_X3KGK, f_X3KGM, g_X3KGO,
                     h_X3KGQ, i_X3KGS, j_X3KGU, k_X3KGW, l_X3KGY, m_X3KH0, n_X3KH2,
                     o_X3KH4)
          [LclId] =
              [$dRead_s3Nna
               $dRead1_s3Nnb
               $dRead2_s3Nnc
               $dRead3_s3Nnd
               $dRead4_s3Nne
               $dRead5_s3Nnf
               $dRead6_s3Nng
               $dRead7_s3Nnh
               $dRead8_s3Nni
               $dRead9_s3Nnj
               $dRead10_s3Nnk
               $dRead11_s3Nnl
               $dRead12_s3Nnm
               $dRead13_s3Nnn
               $dRead14_s3Nno] \r [eta_B1]
                  GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadsPrec
                      $dRead_s3Nna
                      $dRead1_s3Nnb
                      $dRead2_s3Nnc
                      $dRead3_s3Nnd
                      $dRead4_s3Nne
                      $dRead5_s3Nnf
                      $dRead6_s3Nng
                      $dRead7_s3Nnh
                      $dRead8_s3Nni
                      $dRead9_s3Nnj
                      $dRead10_s3Nnk
                      $dRead11_s3Nnl
                      $dRead12_s3Nnm
                      $dRead13_s3Nnn
                      $dRead14_s3Nno
                      eta_B1;
        } in  GHC.Read.C:Read [sat_s3Nnp sat_s3Nnq sat_s3Nnr sat_s3Nns];

GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadListPrec
  :: forall a b c d e f g h i j k l m n.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l, GHC.Read.Read m, GHC.Read.Read n) =>
     Text.ParserCombinators.ReadPrec.ReadPrec
       [(a, b, c, d, e, f, g, h, i, j, k, l, m, n)]
[GblId,
 Arity=14,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Nnt
           $dRead1_s3Nnu
           $dRead2_s3Nnv
           $dRead3_s3Nnw
           $dRead4_s3Nnx
           $dRead5_s3Nny
           $dRead6_s3Nnz
           $dRead7_s3NnA
           $dRead8_s3NnB
           $dRead9_s3NnC
           $dRead10_s3NnD
           $dRead11_s3NnE
           $dRead12_s3NnF
           $dRead13_s3NnG]
        let {
          sat_s3NnH [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KIJ, b_X3KIL, c_X3KIN, d_X3KIP, e_X3KIR, f_X3KIT, g_X3KIV,
                  h_X3KIX, i_X3KIZ, j_X3KJ1, k_X3KJ3, l_X3KJ5, m_X3KJ7, n_X3KJ9)
          [LclId] =
              [$dRead_s3Nnt
               $dRead1_s3Nnu
               $dRead2_s3Nnv
               $dRead3_s3Nnw
               $dRead4_s3Nnx
               $dRead5_s3Nny
               $dRead6_s3Nnz
               $dRead7_s3NnA
               $dRead8_s3NnB
               $dRead9_s3NnC
               $dRead10_s3NnD
               $dRead11_s3NnE
               $dRead12_s3NnF
               $dRead13_s3NnG] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,,,,,,,,,)1
                      $dRead_s3Nnt
                      $dRead1_s3Nnu
                      $dRead2_s3Nnv
                      $dRead3_s3Nnw
                      $dRead4_s3Nnx
                      $dRead5_s3Nny
                      $dRead6_s3Nnz
                      $dRead7_s3NnA
                      $dRead8_s3NnB
                      $dRead9_s3NnC
                      $dRead10_s3NnD
                      $dRead11_s3NnE
                      $dRead12_s3NnF
                      $dRead13_s3NnG
                      eta_B2
                      eta_B1;
        } in  GHC.Read.list sat_s3NnH;

GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadsPrec
  :: forall a b c d e f g h i j k l m n.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l, GHC.Read.Read m, GHC.Read.Read n) =>
     GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS
          (a, b, c, d, e, f, g, h, i, j, k, l, m, n)
[GblId,
 Arity=15,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3NnI
           $dRead1_s3NnJ
           $dRead2_s3NnK
           $dRead3_s3NnL
           $dRead4_s3NnM
           $dRead5_s3NnN
           $dRead6_s3NnO
           $dRead7_s3NnP
           $dRead8_s3NnQ
           $dRead9_s3NnR
           $dRead10_s3NnS
           $dRead11_s3NnT
           $dRead12_s3NnU
           $dRead13_s3NnV
           n1_s3NnW]
        let {
          sat_s3NnX [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 (a_X3KIK, b_X3KIM, c_X3KIO, d_X3KIQ, e_X3KIS, f_X3KIU, g_X3KIW,
                  h_X3KIY, i_X3KJ0, j_X3KJ2, k_X3KJ4, l_X3KJ6, m_X3KJ8, n_X3KJa)
          [LclId] =
              [$dRead_s3NnI
               $dRead1_s3NnJ
               $dRead2_s3NnK
               $dRead3_s3NnL
               $dRead4_s3NnM
               $dRead5_s3NnN
               $dRead6_s3NnO
               $dRead7_s3NnP
               $dRead8_s3NnQ
               $dRead9_s3NnR
               $dRead10_s3NnS
               $dRead11_s3NnT
               $dRead12_s3NnU
               $dRead13_s3NnV
               n1_s3NnW] \u []
                  GHC.Read.$fRead(,,,,,,,,,,,,,)1
                      $dRead_s3NnI
                      $dRead1_s3NnJ
                      $dRead2_s3NnK
                      $dRead3_s3NnL
                      $dRead4_s3NnM
                      $dRead5_s3NnN
                      $dRead6_s3NnO
                      $dRead7_s3NnP
                      $dRead8_s3NnQ
                      $dRead9_s3NnR
                      $dRead10_s3NnS
                      $dRead11_s3NnT
                      $dRead12_s3NnU
                      $dRead13_s3NnV
                      n1_s3NnW
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NnX;

GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadList
  :: forall a b c d e f g h i j k l m n.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l, GHC.Read.Read m, GHC.Read.Read n) =>
     Text.ParserCombinators.ReadP.ReadS
       [(a, b, c, d, e, f, g, h, i, j, k, l, m, n)]
[GblId,
 Arity=14,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3NnY
           $dRead1_s3NnZ
           $dRead2_s3No0
           $dRead3_s3No1
           $dRead4_s3No2
           $dRead5_s3No3
           $dRead6_s3No4
           $dRead7_s3No5
           $dRead8_s3No6
           $dRead9_s3No7
           $dRead10_s3No8
           $dRead11_s3No9
           $dRead12_s3Noa
           $dRead13_s3Nob]
        let {
          sat_s3Nod [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 [(a_X3KIL, b_X3KIN, c_X3KIP, d_X3KIR, e_X3KIT, f_X3KIV, g_X3KIX,
                   h_X3KIZ, i_X3KJ1, j_X3KJ3, k_X3KJ5, l_X3KJ7, m_X3KJ9, n_X3KJb)]
          [LclId] =
              [$dRead_s3NnY
               $dRead1_s3NnZ
               $dRead2_s3No0
               $dRead3_s3No1
               $dRead4_s3No2
               $dRead5_s3No3
               $dRead6_s3No4
               $dRead7_s3No5
               $dRead8_s3No6
               $dRead9_s3No7
               $dRead10_s3No8
               $dRead11_s3No9
               $dRead12_s3Noa
               $dRead13_s3Nob] \u []
                  let {
                    sat_s3Noc [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec
                           (a_X3KIL, b_X3KIN, c_X3KIP, d_X3KIR, e_X3KIT, f_X3KIV, g_X3KIX,
                            h_X3KIZ, i_X3KJ1, j_X3KJ3, k_X3KJ5, l_X3KJ7, m_X3KJ9, n_X3KJb)
                    [LclId] =
                        [$dRead_s3NnY
                         $dRead1_s3NnZ
                         $dRead2_s3No0
                         $dRead3_s3No1
                         $dRead4_s3No2
                         $dRead5_s3No3
                         $dRead6_s3No4
                         $dRead7_s3No5
                         $dRead8_s3No6
                         $dRead9_s3No7
                         $dRead10_s3No8
                         $dRead11_s3No9
                         $dRead12_s3Noa
                         $dRead13_s3Nob] \r [eta_B2 eta_B1]
                            GHC.Read.$fRead(,,,,,,,,,,,,,)1
                                $dRead_s3NnY
                                $dRead1_s3NnZ
                                $dRead2_s3No0
                                $dRead3_s3No1
                                $dRead4_s3No2
                                $dRead5_s3No3
                                $dRead6_s3No4
                                $dRead7_s3No5
                                $dRead8_s3No6
                                $dRead9_s3No7
                                $dRead10_s3No8
                                $dRead11_s3No9
                                $dRead12_s3Noa
                                $dRead13_s3Nob
                                eta_B2
                                eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s3Noc
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3Nod;

GHC.Read.$fRead(,,,,,,,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h i j k l m n.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l, GHC.Read.Read m, GHC.Read.Read n) =>
     GHC.Read.Read (a, b, c, d, e, f, g, h, i, j, k, l, m, n)
[GblId[DFunId],
 Arity=14,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>m] =
    [] \r [$dRead_s3Noe
           $dRead1_s3Nof
           $dRead2_s3Nog
           $dRead3_s3Noh
           $dRead4_s3Noi
           $dRead5_s3Noj
           $dRead6_s3Nok
           $dRead7_s3Nol
           $dRead8_s3Nom
           $dRead9_s3Non
           $dRead10_s3Noo
           $dRead11_s3Nop
           $dRead12_s3Noq
           $dRead13_s3Nor]
        let {
          sat_s3Nov [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 [(a_X3KIM, b_X3KIO, c_X3KIQ, d_X3KIS, e_X3KIU, f_X3KIW, g_X3KIY,
                   h_X3KJ0, i_X3KJ2, j_X3KJ4, k_X3KJ6, l_X3KJ8, m_X3KJa, n_X3KJc)]
          [LclId] =
              [$dRead_s3Noe
               $dRead1_s3Nof
               $dRead2_s3Nog
               $dRead3_s3Noh
               $dRead4_s3Noi
               $dRead5_s3Noj
               $dRead6_s3Nok
               $dRead7_s3Nol
               $dRead8_s3Nom
               $dRead9_s3Non
               $dRead10_s3Noo
               $dRead11_s3Nop
               $dRead12_s3Noq
               $dRead13_s3Nor] \u []
                  GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadListPrec
                      $dRead_s3Noe
                      $dRead1_s3Nof
                      $dRead2_s3Nog
                      $dRead3_s3Noh
                      $dRead4_s3Noi
                      $dRead5_s3Noj
                      $dRead6_s3Nok
                      $dRead7_s3Nol
                      $dRead8_s3Nom
                      $dRead9_s3Non
                      $dRead10_s3Noo
                      $dRead11_s3Nop
                      $dRead12_s3Noq
                      $dRead13_s3Nor; } in
        let {
          sat_s3Nou [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KIM, b_X3KIO, c_X3KIQ, d_X3KIS, e_X3KIU, f_X3KIW, g_X3KIY,
                  h_X3KJ0, i_X3KJ2, j_X3KJ4, k_X3KJ6, l_X3KJ8, m_X3KJa, n_X3KJc)
          [LclId] =
              [$dRead_s3Noe
               $dRead1_s3Nof
               $dRead2_s3Nog
               $dRead3_s3Noh
               $dRead4_s3Noi
               $dRead5_s3Noj
               $dRead6_s3Nok
               $dRead7_s3Nol
               $dRead8_s3Nom
               $dRead9_s3Non
               $dRead10_s3Noo
               $dRead11_s3Nop
               $dRead12_s3Noq
               $dRead13_s3Nor] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,,,,,,,,,)1
                      $dRead_s3Noe
                      $dRead1_s3Nof
                      $dRead2_s3Nog
                      $dRead3_s3Noh
                      $dRead4_s3Noi
                      $dRead5_s3Noj
                      $dRead6_s3Nok
                      $dRead7_s3Nol
                      $dRead8_s3Nom
                      $dRead9_s3Non
                      $dRead10_s3Noo
                      $dRead11_s3Nop
                      $dRead12_s3Noq
                      $dRead13_s3Nor
                      eta_B2
                      eta_B1; } in
        let {
          sat_s3Not [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS
                 [(a_X3KIM, b_X3KIO, c_X3KIQ, d_X3KIS, e_X3KIU, f_X3KIW, g_X3KIY,
                   h_X3KJ0, i_X3KJ2, j_X3KJ4, k_X3KJ6, l_X3KJ8, m_X3KJa, n_X3KJc)]
          [LclId] =
              [$dRead_s3Noe
               $dRead1_s3Nof
               $dRead2_s3Nog
               $dRead3_s3Noh
               $dRead4_s3Noi
               $dRead5_s3Noj
               $dRead6_s3Nok
               $dRead7_s3Nol
               $dRead8_s3Nom
               $dRead9_s3Non
               $dRead10_s3Noo
               $dRead11_s3Nop
               $dRead12_s3Noq
               $dRead13_s3Nor] \u []
                  GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadList
                      $dRead_s3Noe
                      $dRead1_s3Nof
                      $dRead2_s3Nog
                      $dRead3_s3Noh
                      $dRead4_s3Noi
                      $dRead5_s3Noj
                      $dRead6_s3Nok
                      $dRead7_s3Nol
                      $dRead8_s3Nom
                      $dRead9_s3Non
                      $dRead10_s3Noo
                      $dRead11_s3Nop
                      $dRead12_s3Noq
                      $dRead13_s3Nor; } in
        let {
          sat_s3Nos [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS
                    (a_X3KIM, b_X3KIO, c_X3KIQ, d_X3KIS, e_X3KIU, f_X3KIW, g_X3KIY,
                     h_X3KJ0, i_X3KJ2, j_X3KJ4, k_X3KJ6, l_X3KJ8, m_X3KJa, n_X3KJc)
          [LclId] =
              [$dRead_s3Noe
               $dRead1_s3Nof
               $dRead2_s3Nog
               $dRead3_s3Noh
               $dRead4_s3Noi
               $dRead5_s3Noj
               $dRead6_s3Nok
               $dRead7_s3Nol
               $dRead8_s3Nom
               $dRead9_s3Non
               $dRead10_s3Noo
               $dRead11_s3Nop
               $dRead12_s3Noq
               $dRead13_s3Nor] \r [eta_B1]
                  GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadsPrec
                      $dRead_s3Noe
                      $dRead1_s3Nof
                      $dRead2_s3Nog
                      $dRead3_s3Noh
                      $dRead4_s3Noi
                      $dRead5_s3Noj
                      $dRead6_s3Nok
                      $dRead7_s3Nol
                      $dRead8_s3Nom
                      $dRead9_s3Non
                      $dRead10_s3Noo
                      $dRead11_s3Nop
                      $dRead12_s3Noq
                      $dRead13_s3Nor
                      eta_B1;
        } in  GHC.Read.C:Read [sat_s3Nos sat_s3Not sat_s3Nou sat_s3Nov];

GHC.Read.$fRead(,,,,,,,,,,,,)_$creadListPrec
  :: forall a b c d e f g h i j k l m.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l, GHC.Read.Read m) =>
     Text.ParserCombinators.ReadPrec.ReadPrec
       [(a, b, c, d, e, f, g, h, i, j, k, l, m)]
[GblId,
 Arity=13,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Now
           $dRead1_s3Nox
           $dRead2_s3Noy
           $dRead3_s3Noz
           $dRead4_s3NoA
           $dRead5_s3NoB
           $dRead6_s3NoC
           $dRead7_s3NoD
           $dRead8_s3NoE
           $dRead9_s3NoF
           $dRead10_s3NoG
           $dRead11_s3NoH
           $dRead12_s3NoI]
        let {
          sat_s3NoJ [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KKG, b_X3KKI, c_X3KKK, d_X3KKM, e_X3KKO, f_X3KKQ, g_X3KKS,
                  h_X3KKU, i_X3KKW, j_X3KKY, k_X3KL0, l_X3KL2, m_X3KL4)
          [LclId] =
              [$dRead_s3Now
               $dRead1_s3Nox
               $dRead2_s3Noy
               $dRead3_s3Noz
               $dRead4_s3NoA
               $dRead5_s3NoB
               $dRead6_s3NoC
               $dRead7_s3NoD
               $dRead8_s3NoE
               $dRead9_s3NoF
               $dRead10_s3NoG
               $dRead11_s3NoH
               $dRead12_s3NoI] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,,,,,,,,)1
                      $dRead_s3Now
                      $dRead1_s3Nox
                      $dRead2_s3Noy
                      $dRead3_s3Noz
                      $dRead4_s3NoA
                      $dRead5_s3NoB
                      $dRead6_s3NoC
                      $dRead7_s3NoD
                      $dRead8_s3NoE
                      $dRead9_s3NoF
                      $dRead10_s3NoG
                      $dRead11_s3NoH
                      $dRead12_s3NoI
                      eta_B2
                      eta_B1;
        } in  GHC.Read.list sat_s3NoJ;

GHC.Read.$fRead(,,,,,,,,,,,,)_$creadsPrec
  :: forall a b c d e f g h i j k l m.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l, GHC.Read.Read m) =>
     GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS
          (a, b, c, d, e, f, g, h, i, j, k, l, m)
[GblId,
 Arity=14,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3NoK
           $dRead1_s3NoL
           $dRead2_s3NoM
           $dRead3_s3NoN
           $dRead4_s3NoO
           $dRead5_s3NoP
           $dRead6_s3NoQ
           $dRead7_s3NoR
           $dRead8_s3NoS
           $dRead9_s3NoT
           $dRead10_s3NoU
           $dRead11_s3NoV
           $dRead12_s3NoW
           n_s3NoX]
        let {
          sat_s3NoY [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 (a_X3KKH, b_X3KKJ, c_X3KKL, d_X3KKN, e_X3KKP, f_X3KKR, g_X3KKT,
                  h_X3KKV, i_X3KKX, j_X3KKZ, k_X3KL1, l_X3KL3, m_X3KL5)
          [LclId] =
              [$dRead_s3NoK
               $dRead1_s3NoL
               $dRead2_s3NoM
               $dRead3_s3NoN
               $dRead4_s3NoO
               $dRead5_s3NoP
               $dRead6_s3NoQ
               $dRead7_s3NoR
               $dRead8_s3NoS
               $dRead9_s3NoT
               $dRead10_s3NoU
               $dRead11_s3NoV
               $dRead12_s3NoW
               n_s3NoX] \u []
                  GHC.Read.$fRead(,,,,,,,,,,,,)1
                      $dRead_s3NoK
                      $dRead1_s3NoL
                      $dRead2_s3NoM
                      $dRead3_s3NoN
                      $dRead4_s3NoO
                      $dRead5_s3NoP
                      $dRead6_s3NoQ
                      $dRead7_s3NoR
                      $dRead8_s3NoS
                      $dRead9_s3NoT
                      $dRead10_s3NoU
                      $dRead11_s3NoV
                      $dRead12_s3NoW
                      n_s3NoX
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NoY;

GHC.Read.$fRead(,,,,,,,,,,,,)_$creadList
  :: forall a b c d e f g h i j k l m.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l, GHC.Read.Read m) =>
     Text.ParserCombinators.ReadP.ReadS
       [(a, b, c, d, e, f, g, h, i, j, k, l, m)]
[GblId,
 Arity=13,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3NoZ
           $dRead1_s3Np0
           $dRead2_s3Np1
           $dRead3_s3Np2
           $dRead4_s3Np3
           $dRead5_s3Np4
           $dRead6_s3Np5
           $dRead7_s3Np6
           $dRead8_s3Np7
           $dRead9_s3Np8
           $dRead10_s3Np9
           $dRead11_s3Npa
           $dRead12_s3Npb]
        let {
          sat_s3Npd [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 [(a_X3KKI, b_X3KKK, c_X3KKM, d_X3KKO, e_X3KKQ, f_X3KKS, g_X3KKU,
                   h_X3KKW, i_X3KKY, j_X3KL0, k_X3KL2, l_X3KL4, m_X3KL6)]
          [LclId] =
              [$dRead_s3NoZ
               $dRead1_s3Np0
               $dRead2_s3Np1
               $dRead3_s3Np2
               $dRead4_s3Np3
               $dRead5_s3Np4
               $dRead6_s3Np5
               $dRead7_s3Np6
               $dRead8_s3Np7
               $dRead9_s3Np8
               $dRead10_s3Np9
               $dRead11_s3Npa
               $dRead12_s3Npb] \u []
                  let {
                    sat_s3Npc [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec
                           (a_X3KKI, b_X3KKK, c_X3KKM, d_X3KKO, e_X3KKQ, f_X3KKS, g_X3KKU,
                            h_X3KKW, i_X3KKY, j_X3KL0, k_X3KL2, l_X3KL4, m_X3KL6)
                    [LclId] =
                        [$dRead_s3NoZ
                         $dRead1_s3Np0
                         $dRead2_s3Np1
                         $dRead3_s3Np2
                         $dRead4_s3Np3
                         $dRead5_s3Np4
                         $dRead6_s3Np5
                         $dRead7_s3Np6
                         $dRead8_s3Np7
                         $dRead9_s3Np8
                         $dRead10_s3Np9
                         $dRead11_s3Npa
                         $dRead12_s3Npb] \r [eta_B2 eta_B1]
                            GHC.Read.$fRead(,,,,,,,,,,,,)1
                                $dRead_s3NoZ
                                $dRead1_s3Np0
                                $dRead2_s3Np1
                                $dRead3_s3Np2
                                $dRead4_s3Np3
                                $dRead5_s3Np4
                                $dRead6_s3Np5
                                $dRead7_s3Np6
                                $dRead8_s3Np7
                                $dRead9_s3Np8
                                $dRead10_s3Np9
                                $dRead11_s3Npa
                                $dRead12_s3Npb
                                eta_B2
                                eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s3Npc
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3Npd;

GHC.Read.$fRead(,,,,,,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h i j k l m.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l, GHC.Read.Read m) =>
     GHC.Read.Read (a, b, c, d, e, f, g, h, i, j, k, l, m)
[GblId[DFunId],
 Arity=13,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>m] =
    [] \r [$dRead_s3Npe
           $dRead1_s3Npf
           $dRead2_s3Npg
           $dRead3_s3Nph
           $dRead4_s3Npi
           $dRead5_s3Npj
           $dRead6_s3Npk
           $dRead7_s3Npl
           $dRead8_s3Npm
           $dRead9_s3Npn
           $dRead10_s3Npo
           $dRead11_s3Npp
           $dRead12_s3Npq]
        let {
          sat_s3Npu [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 [(a_X3KKJ, b_X3KKL, c_X3KKN, d_X3KKP, e_X3KKR, f_X3KKT, g_X3KKV,
                   h_X3KKX, i_X3KKZ, j_X3KL1, k_X3KL3, l_X3KL5, m_X3KL7)]
          [LclId] =
              [$dRead_s3Npe
               $dRead1_s3Npf
               $dRead2_s3Npg
               $dRead3_s3Nph
               $dRead4_s3Npi
               $dRead5_s3Npj
               $dRead6_s3Npk
               $dRead7_s3Npl
               $dRead8_s3Npm
               $dRead9_s3Npn
               $dRead10_s3Npo
               $dRead11_s3Npp
               $dRead12_s3Npq] \u []
                  GHC.Read.$fRead(,,,,,,,,,,,,)_$creadListPrec
                      $dRead_s3Npe
                      $dRead1_s3Npf
                      $dRead2_s3Npg
                      $dRead3_s3Nph
                      $dRead4_s3Npi
                      $dRead5_s3Npj
                      $dRead6_s3Npk
                      $dRead7_s3Npl
                      $dRead8_s3Npm
                      $dRead9_s3Npn
                      $dRead10_s3Npo
                      $dRead11_s3Npp
                      $dRead12_s3Npq; } in
        let {
          sat_s3Npt [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KKJ, b_X3KKL, c_X3KKN, d_X3KKP, e_X3KKR, f_X3KKT, g_X3KKV,
                  h_X3KKX, i_X3KKZ, j_X3KL1, k_X3KL3, l_X3KL5, m_X3KL7)
          [LclId] =
              [$dRead_s3Npe
               $dRead1_s3Npf
               $dRead2_s3Npg
               $dRead3_s3Nph
               $dRead4_s3Npi
               $dRead5_s3Npj
               $dRead6_s3Npk
               $dRead7_s3Npl
               $dRead8_s3Npm
               $dRead9_s3Npn
               $dRead10_s3Npo
               $dRead11_s3Npp
               $dRead12_s3Npq] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,,,,,,,,)1
                      $dRead_s3Npe
                      $dRead1_s3Npf
                      $dRead2_s3Npg
                      $dRead3_s3Nph
                      $dRead4_s3Npi
                      $dRead5_s3Npj
                      $dRead6_s3Npk
                      $dRead7_s3Npl
                      $dRead8_s3Npm
                      $dRead9_s3Npn
                      $dRead10_s3Npo
                      $dRead11_s3Npp
                      $dRead12_s3Npq
                      eta_B2
                      eta_B1; } in
        let {
          sat_s3Nps [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS
                 [(a_X3KKJ, b_X3KKL, c_X3KKN, d_X3KKP, e_X3KKR, f_X3KKT, g_X3KKV,
                   h_X3KKX, i_X3KKZ, j_X3KL1, k_X3KL3, l_X3KL5, m_X3KL7)]
          [LclId] =
              [$dRead_s3Npe
               $dRead1_s3Npf
               $dRead2_s3Npg
               $dRead3_s3Nph
               $dRead4_s3Npi
               $dRead5_s3Npj
               $dRead6_s3Npk
               $dRead7_s3Npl
               $dRead8_s3Npm
               $dRead9_s3Npn
               $dRead10_s3Npo
               $dRead11_s3Npp
               $dRead12_s3Npq] \u []
                  GHC.Read.$fRead(,,,,,,,,,,,,)_$creadList
                      $dRead_s3Npe
                      $dRead1_s3Npf
                      $dRead2_s3Npg
                      $dRead3_s3Nph
                      $dRead4_s3Npi
                      $dRead5_s3Npj
                      $dRead6_s3Npk
                      $dRead7_s3Npl
                      $dRead8_s3Npm
                      $dRead9_s3Npn
                      $dRead10_s3Npo
                      $dRead11_s3Npp
                      $dRead12_s3Npq; } in
        let {
          sat_s3Npr [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS
                    (a_X3KKJ, b_X3KKL, c_X3KKN, d_X3KKP, e_X3KKR, f_X3KKT, g_X3KKV,
                     h_X3KKX, i_X3KKZ, j_X3KL1, k_X3KL3, l_X3KL5, m_X3KL7)
          [LclId] =
              [$dRead_s3Npe
               $dRead1_s3Npf
               $dRead2_s3Npg
               $dRead3_s3Nph
               $dRead4_s3Npi
               $dRead5_s3Npj
               $dRead6_s3Npk
               $dRead7_s3Npl
               $dRead8_s3Npm
               $dRead9_s3Npn
               $dRead10_s3Npo
               $dRead11_s3Npp
               $dRead12_s3Npq] \r [eta_B1]
                  GHC.Read.$fRead(,,,,,,,,,,,,)_$creadsPrec
                      $dRead_s3Npe
                      $dRead1_s3Npf
                      $dRead2_s3Npg
                      $dRead3_s3Nph
                      $dRead4_s3Npi
                      $dRead5_s3Npj
                      $dRead6_s3Npk
                      $dRead7_s3Npl
                      $dRead8_s3Npm
                      $dRead9_s3Npn
                      $dRead10_s3Npo
                      $dRead11_s3Npp
                      $dRead12_s3Npq
                      eta_B1;
        } in  GHC.Read.C:Read [sat_s3Npr sat_s3Nps sat_s3Npt sat_s3Npu];

GHC.Read.$fRead(,,,,,,,,,,,)_$creadListPrec
  :: forall a b c d e f g h i j k l.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l) =>
     Text.ParserCombinators.ReadPrec.ReadPrec
       [(a, b, c, d, e, f, g, h, i, j, k, l)]
[GblId,
 Arity=12,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Npv
           $dRead1_s3Npw
           $dRead2_s3Npx
           $dRead3_s3Npy
           $dRead4_s3Npz
           $dRead5_s3NpA
           $dRead6_s3NpB
           $dRead7_s3NpC
           $dRead8_s3NpD
           $dRead9_s3NpE
           $dRead10_s3NpF
           $dRead11_s3NpG]
        let {
          sat_s3NpH [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KMy, b_X3KMA, c_X3KMC, d_X3KME, e_X3KMG, f_X3KMI, g_X3KMK,
                  h_X3KMM, i_X3KMO, j_X3KMQ, k_X3KMS, l_X3KMU)
          [LclId] =
              [$dRead_s3Npv
               $dRead1_s3Npw
               $dRead2_s3Npx
               $dRead3_s3Npy
               $dRead4_s3Npz
               $dRead5_s3NpA
               $dRead6_s3NpB
               $dRead7_s3NpC
               $dRead8_s3NpD
               $dRead9_s3NpE
               $dRead10_s3NpF
               $dRead11_s3NpG] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,,,,,,,)1
                      $dRead_s3Npv
                      $dRead1_s3Npw
                      $dRead2_s3Npx
                      $dRead3_s3Npy
                      $dRead4_s3Npz
                      $dRead5_s3NpA
                      $dRead6_s3NpB
                      $dRead7_s3NpC
                      $dRead8_s3NpD
                      $dRead9_s3NpE
                      $dRead10_s3NpF
                      $dRead11_s3NpG
                      eta_B2
                      eta_B1;
        } in  GHC.Read.list sat_s3NpH;

GHC.Read.$fRead(,,,,,,,,,,,)_$creadsPrec
  :: forall a b c d e f g h i j k l.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l) =>
     GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS
          (a, b, c, d, e, f, g, h, i, j, k, l)
[GblId,
 Arity=13,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3NpI
           $dRead1_s3NpJ
           $dRead2_s3NpK
           $dRead3_s3NpL
           $dRead4_s3NpM
           $dRead5_s3NpN
           $dRead6_s3NpO
           $dRead7_s3NpP
           $dRead8_s3NpQ
           $dRead9_s3NpR
           $dRead10_s3NpS
           $dRead11_s3NpT
           n_s3NpU]
        let {
          sat_s3NpV [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 (a_X3KMz, b_X3KMB, c_X3KMD, d_X3KMF, e_X3KMH, f_X3KMJ, g_X3KML,
                  h_X3KMN, i_X3KMP, j_X3KMR, k_X3KMT, l_X3KMV)
          [LclId] =
              [$dRead_s3NpI
               $dRead1_s3NpJ
               $dRead2_s3NpK
               $dRead3_s3NpL
               $dRead4_s3NpM
               $dRead5_s3NpN
               $dRead6_s3NpO
               $dRead7_s3NpP
               $dRead8_s3NpQ
               $dRead9_s3NpR
               $dRead10_s3NpS
               $dRead11_s3NpT
               n_s3NpU] \u []
                  GHC.Read.$fRead(,,,,,,,,,,,)1
                      $dRead_s3NpI
                      $dRead1_s3NpJ
                      $dRead2_s3NpK
                      $dRead3_s3NpL
                      $dRead4_s3NpM
                      $dRead5_s3NpN
                      $dRead6_s3NpO
                      $dRead7_s3NpP
                      $dRead8_s3NpQ
                      $dRead9_s3NpR
                      $dRead10_s3NpS
                      $dRead11_s3NpT
                      n_s3NpU
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NpV;

GHC.Read.$fRead(,,,,,,,,,,,)_$creadList
  :: forall a b c d e f g h i j k l.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l) =>
     Text.ParserCombinators.ReadP.ReadS
       [(a, b, c, d, e, f, g, h, i, j, k, l)]
[GblId,
 Arity=12,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3NpW
           $dRead1_s3NpX
           $dRead2_s3NpY
           $dRead3_s3NpZ
           $dRead4_s3Nq0
           $dRead5_s3Nq1
           $dRead6_s3Nq2
           $dRead7_s3Nq3
           $dRead8_s3Nq4
           $dRead9_s3Nq5
           $dRead10_s3Nq6
           $dRead11_s3Nq7]
        let {
          sat_s3Nq9 [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 [(a_X3KMA, b_X3KMC, c_X3KME, d_X3KMG, e_X3KMI, f_X3KMK, g_X3KMM,
                   h_X3KMO, i_X3KMQ, j_X3KMS, k_X3KMU, l_X3KMW)]
          [LclId] =
              [$dRead_s3NpW
               $dRead1_s3NpX
               $dRead2_s3NpY
               $dRead3_s3NpZ
               $dRead4_s3Nq0
               $dRead5_s3Nq1
               $dRead6_s3Nq2
               $dRead7_s3Nq3
               $dRead8_s3Nq4
               $dRead9_s3Nq5
               $dRead10_s3Nq6
               $dRead11_s3Nq7] \u []
                  let {
                    sat_s3Nq8 [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec
                           (a_X3KMA, b_X3KMC, c_X3KME, d_X3KMG, e_X3KMI, f_X3KMK, g_X3KMM,
                            h_X3KMO, i_X3KMQ, j_X3KMS, k_X3KMU, l_X3KMW)
                    [LclId] =
                        [$dRead_s3NpW
                         $dRead1_s3NpX
                         $dRead2_s3NpY
                         $dRead3_s3NpZ
                         $dRead4_s3Nq0
                         $dRead5_s3Nq1
                         $dRead6_s3Nq2
                         $dRead7_s3Nq3
                         $dRead8_s3Nq4
                         $dRead9_s3Nq5
                         $dRead10_s3Nq6
                         $dRead11_s3Nq7] \r [eta_B2 eta_B1]
                            GHC.Read.$fRead(,,,,,,,,,,,)1
                                $dRead_s3NpW
                                $dRead1_s3NpX
                                $dRead2_s3NpY
                                $dRead3_s3NpZ
                                $dRead4_s3Nq0
                                $dRead5_s3Nq1
                                $dRead6_s3Nq2
                                $dRead7_s3Nq3
                                $dRead8_s3Nq4
                                $dRead9_s3Nq5
                                $dRead10_s3Nq6
                                $dRead11_s3Nq7
                                eta_B2
                                eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s3Nq8
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3Nq9;

GHC.Read.$fRead(,,,,,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h i j k l.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l) =>
     GHC.Read.Read (a, b, c, d, e, f, g, h, i, j, k, l)
[GblId[DFunId],
 Arity=12,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>m] =
    [] \r [$dRead_s3Nqa
           $dRead1_s3Nqb
           $dRead2_s3Nqc
           $dRead3_s3Nqd
           $dRead4_s3Nqe
           $dRead5_s3Nqf
           $dRead6_s3Nqg
           $dRead7_s3Nqh
           $dRead8_s3Nqi
           $dRead9_s3Nqj
           $dRead10_s3Nqk
           $dRead11_s3Nql]
        let {
          sat_s3Nqp [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 [(a_X3KMB, b_X3KMD, c_X3KMF, d_X3KMH, e_X3KMJ, f_X3KML, g_X3KMN,
                   h_X3KMP, i_X3KMR, j_X3KMT, k_X3KMV, l_X3KMX)]
          [LclId] =
              [$dRead_s3Nqa
               $dRead1_s3Nqb
               $dRead2_s3Nqc
               $dRead3_s3Nqd
               $dRead4_s3Nqe
               $dRead5_s3Nqf
               $dRead6_s3Nqg
               $dRead7_s3Nqh
               $dRead8_s3Nqi
               $dRead9_s3Nqj
               $dRead10_s3Nqk
               $dRead11_s3Nql] \u []
                  GHC.Read.$fRead(,,,,,,,,,,,)_$creadListPrec
                      $dRead_s3Nqa
                      $dRead1_s3Nqb
                      $dRead2_s3Nqc
                      $dRead3_s3Nqd
                      $dRead4_s3Nqe
                      $dRead5_s3Nqf
                      $dRead6_s3Nqg
                      $dRead7_s3Nqh
                      $dRead8_s3Nqi
                      $dRead9_s3Nqj
                      $dRead10_s3Nqk
                      $dRead11_s3Nql; } in
        let {
          sat_s3Nqo [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KMB, b_X3KMD, c_X3KMF, d_X3KMH, e_X3KMJ, f_X3KML, g_X3KMN,
                  h_X3KMP, i_X3KMR, j_X3KMT, k_X3KMV, l_X3KMX)
          [LclId] =
              [$dRead_s3Nqa
               $dRead1_s3Nqb
               $dRead2_s3Nqc
               $dRead3_s3Nqd
               $dRead4_s3Nqe
               $dRead5_s3Nqf
               $dRead6_s3Nqg
               $dRead7_s3Nqh
               $dRead8_s3Nqi
               $dRead9_s3Nqj
               $dRead10_s3Nqk
               $dRead11_s3Nql] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,,,,,,,)1
                      $dRead_s3Nqa
                      $dRead1_s3Nqb
                      $dRead2_s3Nqc
                      $dRead3_s3Nqd
                      $dRead4_s3Nqe
                      $dRead5_s3Nqf
                      $dRead6_s3Nqg
                      $dRead7_s3Nqh
                      $dRead8_s3Nqi
                      $dRead9_s3Nqj
                      $dRead10_s3Nqk
                      $dRead11_s3Nql
                      eta_B2
                      eta_B1; } in
        let {
          sat_s3Nqn [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS
                 [(a_X3KMB, b_X3KMD, c_X3KMF, d_X3KMH, e_X3KMJ, f_X3KML, g_X3KMN,
                   h_X3KMP, i_X3KMR, j_X3KMT, k_X3KMV, l_X3KMX)]
          [LclId] =
              [$dRead_s3Nqa
               $dRead1_s3Nqb
               $dRead2_s3Nqc
               $dRead3_s3Nqd
               $dRead4_s3Nqe
               $dRead5_s3Nqf
               $dRead6_s3Nqg
               $dRead7_s3Nqh
               $dRead8_s3Nqi
               $dRead9_s3Nqj
               $dRead10_s3Nqk
               $dRead11_s3Nql] \u []
                  GHC.Read.$fRead(,,,,,,,,,,,)_$creadList
                      $dRead_s3Nqa
                      $dRead1_s3Nqb
                      $dRead2_s3Nqc
                      $dRead3_s3Nqd
                      $dRead4_s3Nqe
                      $dRead5_s3Nqf
                      $dRead6_s3Nqg
                      $dRead7_s3Nqh
                      $dRead8_s3Nqi
                      $dRead9_s3Nqj
                      $dRead10_s3Nqk
                      $dRead11_s3Nql; } in
        let {
          sat_s3Nqm [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS
                    (a_X3KMB, b_X3KMD, c_X3KMF, d_X3KMH, e_X3KMJ, f_X3KML, g_X3KMN,
                     h_X3KMP, i_X3KMR, j_X3KMT, k_X3KMV, l_X3KMX)
          [LclId] =
              [$dRead_s3Nqa
               $dRead1_s3Nqb
               $dRead2_s3Nqc
               $dRead3_s3Nqd
               $dRead4_s3Nqe
               $dRead5_s3Nqf
               $dRead6_s3Nqg
               $dRead7_s3Nqh
               $dRead8_s3Nqi
               $dRead9_s3Nqj
               $dRead10_s3Nqk
               $dRead11_s3Nql] \r [eta_B1]
                  GHC.Read.$fRead(,,,,,,,,,,,)_$creadsPrec
                      $dRead_s3Nqa
                      $dRead1_s3Nqb
                      $dRead2_s3Nqc
                      $dRead3_s3Nqd
                      $dRead4_s3Nqe
                      $dRead5_s3Nqf
                      $dRead6_s3Nqg
                      $dRead7_s3Nqh
                      $dRead8_s3Nqi
                      $dRead9_s3Nqj
                      $dRead10_s3Nqk
                      $dRead11_s3Nql
                      eta_B1;
        } in  GHC.Read.C:Read [sat_s3Nqm sat_s3Nqn sat_s3Nqo sat_s3Nqp];

GHC.Read.$fRead(,,,,,,,,,,)_$creadListPrec
  :: forall a b c d e f g h i j k.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j,
      GHC.Read.Read k) =>
     Text.ParserCombinators.ReadPrec.ReadPrec
       [(a, b, c, d, e, f, g, h, i, j, k)]
[GblId,
 Arity=11,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Nqq
           $dRead1_s3Nqr
           $dRead2_s3Nqs
           $dRead3_s3Nqt
           $dRead4_s3Nqu
           $dRead5_s3Nqv
           $dRead6_s3Nqw
           $dRead7_s3Nqx
           $dRead8_s3Nqy
           $dRead9_s3Nqz
           $dRead10_s3NqA]
        let {
          sat_s3NqB [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KOd, b_X3KOf, c_X3KOh, d_X3KOj, e_X3KOl, f_X3KOn, g_X3KOp,
                  h_X3KOr, i_X3KOt, j_X3KOv, k_X3KOx)
          [LclId] =
              [$dRead_s3Nqq
               $dRead1_s3Nqr
               $dRead2_s3Nqs
               $dRead3_s3Nqt
               $dRead4_s3Nqu
               $dRead5_s3Nqv
               $dRead6_s3Nqw
               $dRead7_s3Nqx
               $dRead8_s3Nqy
               $dRead9_s3Nqz
               $dRead10_s3NqA] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,,,,,,)1
                      $dRead_s3Nqq
                      $dRead1_s3Nqr
                      $dRead2_s3Nqs
                      $dRead3_s3Nqt
                      $dRead4_s3Nqu
                      $dRead5_s3Nqv
                      $dRead6_s3Nqw
                      $dRead7_s3Nqx
                      $dRead8_s3Nqy
                      $dRead9_s3Nqz
                      $dRead10_s3NqA
                      eta_B2
                      eta_B1;
        } in  GHC.Read.list sat_s3NqB;

GHC.Read.$fRead(,,,,,,,,,,)_$creadsPrec
  :: forall a b c d e f g h i j k.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j,
      GHC.Read.Read k) =>
     GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS
          (a, b, c, d, e, f, g, h, i, j, k)
[GblId,
 Arity=12,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3NqC
           $dRead1_s3NqD
           $dRead2_s3NqE
           $dRead3_s3NqF
           $dRead4_s3NqG
           $dRead5_s3NqH
           $dRead6_s3NqI
           $dRead7_s3NqJ
           $dRead8_s3NqK
           $dRead9_s3NqL
           $dRead10_s3NqM
           n_s3NqN]
        let {
          sat_s3NqO [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 (a_X3KOe, b_X3KOg, c_X3KOi, d_X3KOk, e_X3KOm, f_X3KOo, g_X3KOq,
                  h_X3KOs, i_X3KOu, j_X3KOw, k_X3KOy)
          [LclId] =
              [$dRead_s3NqC
               $dRead1_s3NqD
               $dRead2_s3NqE
               $dRead3_s3NqF
               $dRead4_s3NqG
               $dRead5_s3NqH
               $dRead6_s3NqI
               $dRead7_s3NqJ
               $dRead8_s3NqK
               $dRead9_s3NqL
               $dRead10_s3NqM
               n_s3NqN] \u []
                  GHC.Read.$fRead(,,,,,,,,,,)1
                      $dRead_s3NqC
                      $dRead1_s3NqD
                      $dRead2_s3NqE
                      $dRead3_s3NqF
                      $dRead4_s3NqG
                      $dRead5_s3NqH
                      $dRead6_s3NqI
                      $dRead7_s3NqJ
                      $dRead8_s3NqK
                      $dRead9_s3NqL
                      $dRead10_s3NqM
                      n_s3NqN
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NqO;

GHC.Read.$fRead(,,,,,,,,,,)_$creadList
  :: forall a b c d e f g h i j k.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j,
      GHC.Read.Read k) =>
     Text.ParserCombinators.ReadP.ReadS
       [(a, b, c, d, e, f, g, h, i, j, k)]
[GblId,
 Arity=11,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3NqP
           $dRead1_s3NqQ
           $dRead2_s3NqR
           $dRead3_s3NqS
           $dRead4_s3NqT
           $dRead5_s3NqU
           $dRead6_s3NqV
           $dRead7_s3NqW
           $dRead8_s3NqX
           $dRead9_s3NqY
           $dRead10_s3NqZ]
        let {
          sat_s3Nr1 [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 [(a_X3KOf, b_X3KOh, c_X3KOj, d_X3KOl, e_X3KOn, f_X3KOp, g_X3KOr,
                   h_X3KOt, i_X3KOv, j_X3KOx, k_X3KOz)]
          [LclId] =
              [$dRead_s3NqP
               $dRead1_s3NqQ
               $dRead2_s3NqR
               $dRead3_s3NqS
               $dRead4_s3NqT
               $dRead5_s3NqU
               $dRead6_s3NqV
               $dRead7_s3NqW
               $dRead8_s3NqX
               $dRead9_s3NqY
               $dRead10_s3NqZ] \u []
                  let {
                    sat_s3Nr0 [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec
                           (a_X3KOf, b_X3KOh, c_X3KOj, d_X3KOl, e_X3KOn, f_X3KOp, g_X3KOr,
                            h_X3KOt, i_X3KOv, j_X3KOx, k_X3KOz)
                    [LclId] =
                        [$dRead_s3NqP
                         $dRead1_s3NqQ
                         $dRead2_s3NqR
                         $dRead3_s3NqS
                         $dRead4_s3NqT
                         $dRead5_s3NqU
                         $dRead6_s3NqV
                         $dRead7_s3NqW
                         $dRead8_s3NqX
                         $dRead9_s3NqY
                         $dRead10_s3NqZ] \r [eta_B2 eta_B1]
                            GHC.Read.$fRead(,,,,,,,,,,)1
                                $dRead_s3NqP
                                $dRead1_s3NqQ
                                $dRead2_s3NqR
                                $dRead3_s3NqS
                                $dRead4_s3NqT
                                $dRead5_s3NqU
                                $dRead6_s3NqV
                                $dRead7_s3NqW
                                $dRead8_s3NqX
                                $dRead9_s3NqY
                                $dRead10_s3NqZ
                                eta_B2
                                eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s3Nr0
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3Nr1;

GHC.Read.$fRead(,,,,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h i j k.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j,
      GHC.Read.Read k) =>
     GHC.Read.Read (a, b, c, d, e, f, g, h, i, j, k)
[GblId[DFunId],
 Arity=11,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>m] =
    [] \r [$dRead_s3Nr2
           $dRead1_s3Nr3
           $dRead2_s3Nr4
           $dRead3_s3Nr5
           $dRead4_s3Nr6
           $dRead5_s3Nr7
           $dRead6_s3Nr8
           $dRead7_s3Nr9
           $dRead8_s3Nra
           $dRead9_s3Nrb
           $dRead10_s3Nrc]
        let {
          sat_s3Nrg [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 [(a_X3KOg, b_X3KOi, c_X3KOk, d_X3KOm, e_X3KOo, f_X3KOq, g_X3KOs,
                   h_X3KOu, i_X3KOw, j_X3KOy, k_X3KOA)]
          [LclId] =
              [$dRead_s3Nr2
               $dRead1_s3Nr3
               $dRead2_s3Nr4
               $dRead3_s3Nr5
               $dRead4_s3Nr6
               $dRead5_s3Nr7
               $dRead6_s3Nr8
               $dRead7_s3Nr9
               $dRead8_s3Nra
               $dRead9_s3Nrb
               $dRead10_s3Nrc] \u []
                  GHC.Read.$fRead(,,,,,,,,,,)_$creadListPrec
                      $dRead_s3Nr2
                      $dRead1_s3Nr3
                      $dRead2_s3Nr4
                      $dRead3_s3Nr5
                      $dRead4_s3Nr6
                      $dRead5_s3Nr7
                      $dRead6_s3Nr8
                      $dRead7_s3Nr9
                      $dRead8_s3Nra
                      $dRead9_s3Nrb
                      $dRead10_s3Nrc; } in
        let {
          sat_s3Nrf [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KOg, b_X3KOi, c_X3KOk, d_X3KOm, e_X3KOo, f_X3KOq, g_X3KOs,
                  h_X3KOu, i_X3KOw, j_X3KOy, k_X3KOA)
          [LclId] =
              [$dRead_s3Nr2
               $dRead1_s3Nr3
               $dRead2_s3Nr4
               $dRead3_s3Nr5
               $dRead4_s3Nr6
               $dRead5_s3Nr7
               $dRead6_s3Nr8
               $dRead7_s3Nr9
               $dRead8_s3Nra
               $dRead9_s3Nrb
               $dRead10_s3Nrc] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,,,,,,)1
                      $dRead_s3Nr2
                      $dRead1_s3Nr3
                      $dRead2_s3Nr4
                      $dRead3_s3Nr5
                      $dRead4_s3Nr6
                      $dRead5_s3Nr7
                      $dRead6_s3Nr8
                      $dRead7_s3Nr9
                      $dRead8_s3Nra
                      $dRead9_s3Nrb
                      $dRead10_s3Nrc
                      eta_B2
                      eta_B1; } in
        let {
          sat_s3Nre [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS
                 [(a_X3KOg, b_X3KOi, c_X3KOk, d_X3KOm, e_X3KOo, f_X3KOq, g_X3KOs,
                   h_X3KOu, i_X3KOw, j_X3KOy, k_X3KOA)]
          [LclId] =
              [$dRead_s3Nr2
               $dRead1_s3Nr3
               $dRead2_s3Nr4
               $dRead3_s3Nr5
               $dRead4_s3Nr6
               $dRead5_s3Nr7
               $dRead6_s3Nr8
               $dRead7_s3Nr9
               $dRead8_s3Nra
               $dRead9_s3Nrb
               $dRead10_s3Nrc] \u []
                  GHC.Read.$fRead(,,,,,,,,,,)_$creadList
                      $dRead_s3Nr2
                      $dRead1_s3Nr3
                      $dRead2_s3Nr4
                      $dRead3_s3Nr5
                      $dRead4_s3Nr6
                      $dRead5_s3Nr7
                      $dRead6_s3Nr8
                      $dRead7_s3Nr9
                      $dRead8_s3Nra
                      $dRead9_s3Nrb
                      $dRead10_s3Nrc; } in
        let {
          sat_s3Nrd [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS
                    (a_X3KOg, b_X3KOi, c_X3KOk, d_X3KOm, e_X3KOo, f_X3KOq, g_X3KOs,
                     h_X3KOu, i_X3KOw, j_X3KOy, k_X3KOA)
          [LclId] =
              [$dRead_s3Nr2
               $dRead1_s3Nr3
               $dRead2_s3Nr4
               $dRead3_s3Nr5
               $dRead4_s3Nr6
               $dRead5_s3Nr7
               $dRead6_s3Nr8
               $dRead7_s3Nr9
               $dRead8_s3Nra
               $dRead9_s3Nrb
               $dRead10_s3Nrc] \r [eta_B1]
                  GHC.Read.$fRead(,,,,,,,,,,)_$creadsPrec
                      $dRead_s3Nr2
                      $dRead1_s3Nr3
                      $dRead2_s3Nr4
                      $dRead3_s3Nr5
                      $dRead4_s3Nr6
                      $dRead5_s3Nr7
                      $dRead6_s3Nr8
                      $dRead7_s3Nr9
                      $dRead8_s3Nra
                      $dRead9_s3Nrb
                      $dRead10_s3Nrc
                      eta_B1;
        } in  GHC.Read.C:Read [sat_s3Nrd sat_s3Nre sat_s3Nrf sat_s3Nrg];

GHC.Read.$fRead(,,,,,,,,,)_$creadListPrec
  :: forall a b c d e f g h i j.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j) =>
     Text.ParserCombinators.ReadPrec.ReadPrec
       [(a, b, c, d, e, f, g, h, i, j)]
[GblId,
 Arity=10,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Nrh
           $dRead1_s3Nri
           $dRead2_s3Nrj
           $dRead3_s3Nrk
           $dRead4_s3Nrl
           $dRead5_s3Nrm
           $dRead6_s3Nrn
           $dRead7_s3Nro
           $dRead8_s3Nrp
           $dRead9_s3Nrq]
        let {
          sat_s3Nrr [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KPV, b_X3KPX, c_X3KPZ, d_X3KQ1, e_X3KQ3, f_X3KQ5, g_X3KQ7,
                  h_X3KQ9, i_X3KQb, j_X3KQd)
          [LclId] =
              [$dRead_s3Nrh
               $dRead1_s3Nri
               $dRead2_s3Nrj
               $dRead3_s3Nrk
               $dRead4_s3Nrl
               $dRead5_s3Nrm
               $dRead6_s3Nrn
               $dRead7_s3Nro
               $dRead8_s3Nrp
               $dRead9_s3Nrq] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,,,,,)1
                      $dRead_s3Nrh
                      $dRead1_s3Nri
                      $dRead2_s3Nrj
                      $dRead3_s3Nrk
                      $dRead4_s3Nrl
                      $dRead5_s3Nrm
                      $dRead6_s3Nrn
                      $dRead7_s3Nro
                      $dRead8_s3Nrp
                      $dRead9_s3Nrq
                      eta_B2
                      eta_B1;
        } in  GHC.Read.list sat_s3Nrr;

GHC.Read.$fRead(,,,,,,,,,)_$creadsPrec
  :: forall a b c d e f g h i j.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j) =>
     GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS
          (a, b, c, d, e, f, g, h, i, j)
[GblId,
 Arity=11,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Nrs
           $dRead1_s3Nrt
           $dRead2_s3Nru
           $dRead3_s3Nrv
           $dRead4_s3Nrw
           $dRead5_s3Nrx
           $dRead6_s3Nry
           $dRead7_s3Nrz
           $dRead8_s3NrA
           $dRead9_s3NrB
           n_s3NrC]
        let {
          sat_s3NrD [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 (a_X3KPW, b_X3KPY, c_X3KQ0, d_X3KQ2, e_X3KQ4, f_X3KQ6, g_X3KQ8,
                  h_X3KQa, i_X3KQc, j_X3KQe)
          [LclId] =
              [$dRead_s3Nrs
               $dRead1_s3Nrt
               $dRead2_s3Nru
               $dRead3_s3Nrv
               $dRead4_s3Nrw
               $dRead5_s3Nrx
               $dRead6_s3Nry
               $dRead7_s3Nrz
               $dRead8_s3NrA
               $dRead9_s3NrB
               n_s3NrC] \u []
                  GHC.Read.$fRead(,,,,,,,,,)1
                      $dRead_s3Nrs
                      $dRead1_s3Nrt
                      $dRead2_s3Nru
                      $dRead3_s3Nrv
                      $dRead4_s3Nrw
                      $dRead5_s3Nrx
                      $dRead6_s3Nry
                      $dRead7_s3Nrz
                      $dRead8_s3NrA
                      $dRead9_s3NrB
                      n_s3NrC
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NrD;

GHC.Read.$fRead(,,,,,,,,,)_$creadList
  :: forall a b c d e f g h i j.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j) =>
     Text.ParserCombinators.ReadP.ReadS [(a, b, c, d, e, f, g, h, i, j)]
[GblId,
 Arity=10,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3NrE
           $dRead1_s3NrF
           $dRead2_s3NrG
           $dRead3_s3NrH
           $dRead4_s3NrI
           $dRead5_s3NrJ
           $dRead6_s3NrK
           $dRead7_s3NrL
           $dRead8_s3NrM
           $dRead9_s3NrN]
        let {
          sat_s3NrP [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 [(a_X3KPX, b_X3KPZ, c_X3KQ1, d_X3KQ3, e_X3KQ5, f_X3KQ7, g_X3KQ9,
                   h_X3KQb, i_X3KQd, j_X3KQf)]
          [LclId] =
              [$dRead_s3NrE
               $dRead1_s3NrF
               $dRead2_s3NrG
               $dRead3_s3NrH
               $dRead4_s3NrI
               $dRead5_s3NrJ
               $dRead6_s3NrK
               $dRead7_s3NrL
               $dRead8_s3NrM
               $dRead9_s3NrN] \u []
                  let {
                    sat_s3NrO [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec
                           (a_X3KPX, b_X3KPZ, c_X3KQ1, d_X3KQ3, e_X3KQ5, f_X3KQ7, g_X3KQ9,
                            h_X3KQb, i_X3KQd, j_X3KQf)
                    [LclId] =
                        [$dRead_s3NrE
                         $dRead1_s3NrF
                         $dRead2_s3NrG
                         $dRead3_s3NrH
                         $dRead4_s3NrI
                         $dRead5_s3NrJ
                         $dRead6_s3NrK
                         $dRead7_s3NrL
                         $dRead8_s3NrM
                         $dRead9_s3NrN] \r [eta_B2 eta_B1]
                            GHC.Read.$fRead(,,,,,,,,,)1
                                $dRead_s3NrE
                                $dRead1_s3NrF
                                $dRead2_s3NrG
                                $dRead3_s3NrH
                                $dRead4_s3NrI
                                $dRead5_s3NrJ
                                $dRead6_s3NrK
                                $dRead7_s3NrL
                                $dRead8_s3NrM
                                $dRead9_s3NrN
                                eta_B2
                                eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s3NrO
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NrP;

GHC.Read.$fRead(,,,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h i j.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j) =>
     GHC.Read.Read (a, b, c, d, e, f, g, h, i, j)
[GblId[DFunId],
 Arity=10,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>m] =
    [] \r [$dRead_s3NrQ
           $dRead1_s3NrR
           $dRead2_s3NrS
           $dRead3_s3NrT
           $dRead4_s3NrU
           $dRead5_s3NrV
           $dRead6_s3NrW
           $dRead7_s3NrX
           $dRead8_s3NrY
           $dRead9_s3NrZ]
        let {
          sat_s3Ns3 [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 [(a_X3KPY, b_X3KQ0, c_X3KQ2, d_X3KQ4, e_X3KQ6, f_X3KQ8, g_X3KQa,
                   h_X3KQc, i_X3KQe, j_X3KQg)]
          [LclId] =
              [$dRead_s3NrQ
               $dRead1_s3NrR
               $dRead2_s3NrS
               $dRead3_s3NrT
               $dRead4_s3NrU
               $dRead5_s3NrV
               $dRead6_s3NrW
               $dRead7_s3NrX
               $dRead8_s3NrY
               $dRead9_s3NrZ] \u []
                  GHC.Read.$fRead(,,,,,,,,,)_$creadListPrec
                      $dRead_s3NrQ
                      $dRead1_s3NrR
                      $dRead2_s3NrS
                      $dRead3_s3NrT
                      $dRead4_s3NrU
                      $dRead5_s3NrV
                      $dRead6_s3NrW
                      $dRead7_s3NrX
                      $dRead8_s3NrY
                      $dRead9_s3NrZ; } in
        let {
          sat_s3Ns2 [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KPY, b_X3KQ0, c_X3KQ2, d_X3KQ4, e_X3KQ6, f_X3KQ8, g_X3KQa,
                  h_X3KQc, i_X3KQe, j_X3KQg)
          [LclId] =
              [$dRead_s3NrQ
               $dRead1_s3NrR
               $dRead2_s3NrS
               $dRead3_s3NrT
               $dRead4_s3NrU
               $dRead5_s3NrV
               $dRead6_s3NrW
               $dRead7_s3NrX
               $dRead8_s3NrY
               $dRead9_s3NrZ] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,,,,,)1
                      $dRead_s3NrQ
                      $dRead1_s3NrR
                      $dRead2_s3NrS
                      $dRead3_s3NrT
                      $dRead4_s3NrU
                      $dRead5_s3NrV
                      $dRead6_s3NrW
                      $dRead7_s3NrX
                      $dRead8_s3NrY
                      $dRead9_s3NrZ
                      eta_B2
                      eta_B1; } in
        let {
          sat_s3Ns1 [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS
                 [(a_X3KPY, b_X3KQ0, c_X3KQ2, d_X3KQ4, e_X3KQ6, f_X3KQ8, g_X3KQa,
                   h_X3KQc, i_X3KQe, j_X3KQg)]
          [LclId] =
              [$dRead_s3NrQ
               $dRead1_s3NrR
               $dRead2_s3NrS
               $dRead3_s3NrT
               $dRead4_s3NrU
               $dRead5_s3NrV
               $dRead6_s3NrW
               $dRead7_s3NrX
               $dRead8_s3NrY
               $dRead9_s3NrZ] \u []
                  GHC.Read.$fRead(,,,,,,,,,)_$creadList
                      $dRead_s3NrQ
                      $dRead1_s3NrR
                      $dRead2_s3NrS
                      $dRead3_s3NrT
                      $dRead4_s3NrU
                      $dRead5_s3NrV
                      $dRead6_s3NrW
                      $dRead7_s3NrX
                      $dRead8_s3NrY
                      $dRead9_s3NrZ; } in
        let {
          sat_s3Ns0 [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS
                    (a_X3KPY, b_X3KQ0, c_X3KQ2, d_X3KQ4, e_X3KQ6, f_X3KQ8, g_X3KQa,
                     h_X3KQc, i_X3KQe, j_X3KQg)
          [LclId] =
              [$dRead_s3NrQ
               $dRead1_s3NrR
               $dRead2_s3NrS
               $dRead3_s3NrT
               $dRead4_s3NrU
               $dRead5_s3NrV
               $dRead6_s3NrW
               $dRead7_s3NrX
               $dRead8_s3NrY
               $dRead9_s3NrZ] \r [eta_B1]
                  GHC.Read.$fRead(,,,,,,,,,)_$creadsPrec
                      $dRead_s3NrQ
                      $dRead1_s3NrR
                      $dRead2_s3NrS
                      $dRead3_s3NrT
                      $dRead4_s3NrU
                      $dRead5_s3NrV
                      $dRead6_s3NrW
                      $dRead7_s3NrX
                      $dRead8_s3NrY
                      $dRead9_s3NrZ
                      eta_B1;
        } in  GHC.Read.C:Read [sat_s3Ns0 sat_s3Ns1 sat_s3Ns2 sat_s3Ns3];

GHC.Read.$fRead(,,,,,,,,)_$creadListPrec
  :: forall a b c d e f g h i.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i) =>
     Text.ParserCombinators.ReadPrec.ReadPrec
       [(a, b, c, d, e, f, g, h, i)]
[GblId,
 Arity=9,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Ns4
           $dRead1_s3Ns5
           $dRead2_s3Ns6
           $dRead3_s3Ns7
           $dRead4_s3Ns8
           $dRead5_s3Ns9
           $dRead6_s3Nsa
           $dRead7_s3Nsb
           $dRead8_s3Nsc]
        let {
          sat_s3Nsd [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KRq, b_X3KRs, c_X3KRu, d_X3KRw, e_X3KRy, f_X3KRA, g_X3KRC,
                  h_X3KRE, i_X3KRG)
          [LclId] =
              [$dRead_s3Ns4
               $dRead1_s3Ns5
               $dRead2_s3Ns6
               $dRead3_s3Ns7
               $dRead4_s3Ns8
               $dRead5_s3Ns9
               $dRead6_s3Nsa
               $dRead7_s3Nsb
               $dRead8_s3Nsc] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,,,,)1
                      $dRead_s3Ns4
                      $dRead1_s3Ns5
                      $dRead2_s3Ns6
                      $dRead3_s3Ns7
                      $dRead4_s3Ns8
                      $dRead5_s3Ns9
                      $dRead6_s3Nsa
                      $dRead7_s3Nsb
                      $dRead8_s3Nsc
                      eta_B2
                      eta_B1;
        } in  GHC.Read.list sat_s3Nsd;

GHC.Read.$fRead(,,,,,,,,)_$creadsPrec
  :: forall a b c d e f g h i.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i) =>
     GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS (a, b, c, d, e, f, g, h, i)
[GblId,
 Arity=10,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Nse
           $dRead1_s3Nsf
           $dRead2_s3Nsg
           $dRead3_s3Nsh
           $dRead4_s3Nsi
           $dRead5_s3Nsj
           $dRead6_s3Nsk
           $dRead7_s3Nsl
           $dRead8_s3Nsm
           n_s3Nsn]
        let {
          sat_s3Nso [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 (a_X3KRr, b_X3KRt, c_X3KRv, d_X3KRx, e_X3KRz, f_X3KRB, g_X3KRD,
                  h_X3KRF, i_X3KRH)
          [LclId] =
              [$dRead_s3Nse
               $dRead1_s3Nsf
               $dRead2_s3Nsg
               $dRead3_s3Nsh
               $dRead4_s3Nsi
               $dRead5_s3Nsj
               $dRead6_s3Nsk
               $dRead7_s3Nsl
               $dRead8_s3Nsm
               n_s3Nsn] \u []
                  GHC.Read.$fRead(,,,,,,,,)1
                      $dRead_s3Nse
                      $dRead1_s3Nsf
                      $dRead2_s3Nsg
                      $dRead3_s3Nsh
                      $dRead4_s3Nsi
                      $dRead5_s3Nsj
                      $dRead6_s3Nsk
                      $dRead7_s3Nsl
                      $dRead8_s3Nsm
                      n_s3Nsn
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3Nso;

GHC.Read.$fRead(,,,,,,,,)_$creadList
  :: forall a b c d e f g h i.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i) =>
     Text.ParserCombinators.ReadP.ReadS [(a, b, c, d, e, f, g, h, i)]
[GblId,
 Arity=9,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Nsp
           $dRead1_s3Nsq
           $dRead2_s3Nsr
           $dRead3_s3Nss
           $dRead4_s3Nst
           $dRead5_s3Nsu
           $dRead6_s3Nsv
           $dRead7_s3Nsw
           $dRead8_s3Nsx]
        let {
          sat_s3Nsz [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 [(a_X3KRs, b_X3KRu, c_X3KRw, d_X3KRy, e_X3KRA, f_X3KRC, g_X3KRE,
                   h_X3KRG, i_X3KRI)]
          [LclId] =
              [$dRead_s3Nsp
               $dRead1_s3Nsq
               $dRead2_s3Nsr
               $dRead3_s3Nss
               $dRead4_s3Nst
               $dRead5_s3Nsu
               $dRead6_s3Nsv
               $dRead7_s3Nsw
               $dRead8_s3Nsx] \u []
                  let {
                    sat_s3Nsy [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec
                           (a_X3KRs, b_X3KRu, c_X3KRw, d_X3KRy, e_X3KRA, f_X3KRC, g_X3KRE,
                            h_X3KRG, i_X3KRI)
                    [LclId] =
                        [$dRead_s3Nsp
                         $dRead1_s3Nsq
                         $dRead2_s3Nsr
                         $dRead3_s3Nss
                         $dRead4_s3Nst
                         $dRead5_s3Nsu
                         $dRead6_s3Nsv
                         $dRead7_s3Nsw
                         $dRead8_s3Nsx] \r [eta_B2 eta_B1]
                            GHC.Read.$fRead(,,,,,,,,)1
                                $dRead_s3Nsp
                                $dRead1_s3Nsq
                                $dRead2_s3Nsr
                                $dRead3_s3Nss
                                $dRead4_s3Nst
                                $dRead5_s3Nsu
                                $dRead6_s3Nsv
                                $dRead7_s3Nsw
                                $dRead8_s3Nsx
                                eta_B2
                                eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s3Nsy
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3Nsz;

GHC.Read.$fRead(,,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h i.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i) =>
     GHC.Read.Read (a, b, c, d, e, f, g, h, i)
[GblId[DFunId],
 Arity=9,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>m] =
    [] \r [$dRead_s3NsA
           $dRead1_s3NsB
           $dRead2_s3NsC
           $dRead3_s3NsD
           $dRead4_s3NsE
           $dRead5_s3NsF
           $dRead6_s3NsG
           $dRead7_s3NsH
           $dRead8_s3NsI]
        let {
          sat_s3NsM [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 [(a_X3KRt, b_X3KRv, c_X3KRx, d_X3KRz, e_X3KRB, f_X3KRD, g_X3KRF,
                   h_X3KRH, i_X3KRJ)]
          [LclId] =
              [$dRead_s3NsA
               $dRead1_s3NsB
               $dRead2_s3NsC
               $dRead3_s3NsD
               $dRead4_s3NsE
               $dRead5_s3NsF
               $dRead6_s3NsG
               $dRead7_s3NsH
               $dRead8_s3NsI] \u []
                  GHC.Read.$fRead(,,,,,,,,)_$creadListPrec
                      $dRead_s3NsA
                      $dRead1_s3NsB
                      $dRead2_s3NsC
                      $dRead3_s3NsD
                      $dRead4_s3NsE
                      $dRead5_s3NsF
                      $dRead6_s3NsG
                      $dRead7_s3NsH
                      $dRead8_s3NsI; } in
        let {
          sat_s3NsL [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KRt, b_X3KRv, c_X3KRx, d_X3KRz, e_X3KRB, f_X3KRD, g_X3KRF,
                  h_X3KRH, i_X3KRJ)
          [LclId] =
              [$dRead_s3NsA
               $dRead1_s3NsB
               $dRead2_s3NsC
               $dRead3_s3NsD
               $dRead4_s3NsE
               $dRead5_s3NsF
               $dRead6_s3NsG
               $dRead7_s3NsH
               $dRead8_s3NsI] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,,,,)1
                      $dRead_s3NsA
                      $dRead1_s3NsB
                      $dRead2_s3NsC
                      $dRead3_s3NsD
                      $dRead4_s3NsE
                      $dRead5_s3NsF
                      $dRead6_s3NsG
                      $dRead7_s3NsH
                      $dRead8_s3NsI
                      eta_B2
                      eta_B1; } in
        let {
          sat_s3NsK [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS
                 [(a_X3KRt, b_X3KRv, c_X3KRx, d_X3KRz, e_X3KRB, f_X3KRD, g_X3KRF,
                   h_X3KRH, i_X3KRJ)]
          [LclId] =
              [$dRead_s3NsA
               $dRead1_s3NsB
               $dRead2_s3NsC
               $dRead3_s3NsD
               $dRead4_s3NsE
               $dRead5_s3NsF
               $dRead6_s3NsG
               $dRead7_s3NsH
               $dRead8_s3NsI] \u []
                  GHC.Read.$fRead(,,,,,,,,)_$creadList
                      $dRead_s3NsA
                      $dRead1_s3NsB
                      $dRead2_s3NsC
                      $dRead3_s3NsD
                      $dRead4_s3NsE
                      $dRead5_s3NsF
                      $dRead6_s3NsG
                      $dRead7_s3NsH
                      $dRead8_s3NsI; } in
        let {
          sat_s3NsJ [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS
                    (a_X3KRt, b_X3KRv, c_X3KRx, d_X3KRz, e_X3KRB, f_X3KRD, g_X3KRF,
                     h_X3KRH, i_X3KRJ)
          [LclId] =
              [$dRead_s3NsA
               $dRead1_s3NsB
               $dRead2_s3NsC
               $dRead3_s3NsD
               $dRead4_s3NsE
               $dRead5_s3NsF
               $dRead6_s3NsG
               $dRead7_s3NsH
               $dRead8_s3NsI] \r [eta_B1]
                  GHC.Read.$fRead(,,,,,,,,)_$creadsPrec
                      $dRead_s3NsA
                      $dRead1_s3NsB
                      $dRead2_s3NsC
                      $dRead3_s3NsD
                      $dRead4_s3NsE
                      $dRead5_s3NsF
                      $dRead6_s3NsG
                      $dRead7_s3NsH
                      $dRead8_s3NsI
                      eta_B1;
        } in  GHC.Read.C:Read [sat_s3NsJ sat_s3NsK sat_s3NsL sat_s3NsM];

GHC.Read.$fRead(,,,,,,,)_$creadListPrec
  :: forall a b c d e f g h.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h) =>
     Text.ParserCombinators.ReadPrec.ReadPrec [(a, b, c, d, e, f, g, h)]
[GblId,
 Arity=8,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3NsN
           $dRead1_s3NsO
           $dRead2_s3NsP
           $dRead3_s3NsQ
           $dRead4_s3NsR
           $dRead5_s3NsS
           $dRead6_s3NsT
           $dRead7_s3NsU]
        let {
          sat_s3NsV [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KSQ, b_X3KSS, c_X3KSU, d_X3KSW, e_X3KSY, f_X3KT0, g_X3KT2,
                  h_X3KT4)
          [LclId] =
              [$dRead_s3NsN
               $dRead1_s3NsO
               $dRead2_s3NsP
               $dRead3_s3NsQ
               $dRead4_s3NsR
               $dRead5_s3NsS
               $dRead6_s3NsT
               $dRead7_s3NsU] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,,,)1
                      $dRead_s3NsN
                      $dRead1_s3NsO
                      $dRead2_s3NsP
                      $dRead3_s3NsQ
                      $dRead4_s3NsR
                      $dRead5_s3NsS
                      $dRead6_s3NsT
                      $dRead7_s3NsU
                      eta_B2
                      eta_B1;
        } in  GHC.Read.list sat_s3NsV;

GHC.Read.$fRead(,,,,,,,)_$creadsPrec
  :: forall a b c d e f g h.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h) =>
     GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS (a, b, c, d, e, f, g, h)
[GblId,
 Arity=9,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3NsW
           $dRead1_s3NsX
           $dRead2_s3NsY
           $dRead3_s3NsZ
           $dRead4_s3Nt0
           $dRead5_s3Nt1
           $dRead6_s3Nt2
           $dRead7_s3Nt3
           n_s3Nt4]
        let {
          sat_s3Nt5 [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 (a_X3KSR, b_X3KST, c_X3KSV, d_X3KSX, e_X3KSZ, f_X3KT1, g_X3KT3,
                  h_X3KT5)
          [LclId] =
              [$dRead_s3NsW
               $dRead1_s3NsX
               $dRead2_s3NsY
               $dRead3_s3NsZ
               $dRead4_s3Nt0
               $dRead5_s3Nt1
               $dRead6_s3Nt2
               $dRead7_s3Nt3
               n_s3Nt4] \u []
                  GHC.Read.$fRead(,,,,,,,)1
                      $dRead_s3NsW
                      $dRead1_s3NsX
                      $dRead2_s3NsY
                      $dRead3_s3NsZ
                      $dRead4_s3Nt0
                      $dRead5_s3Nt1
                      $dRead6_s3Nt2
                      $dRead7_s3Nt3
                      n_s3Nt4
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3Nt5;

GHC.Read.$fRead(,,,,,,,)_$creadList
  :: forall a b c d e f g h.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h) =>
     Text.ParserCombinators.ReadP.ReadS [(a, b, c, d, e, f, g, h)]
[GblId,
 Arity=8,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Nt6
           $dRead1_s3Nt7
           $dRead2_s3Nt8
           $dRead3_s3Nt9
           $dRead4_s3Nta
           $dRead5_s3Ntb
           $dRead6_s3Ntc
           $dRead7_s3Ntd]
        let {
          sat_s3Ntf [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 [(a_X3KSS, b_X3KSU, c_X3KSW, d_X3KSY, e_X3KT0, f_X3KT2, g_X3KT4,
                   h_X3KT6)]
          [LclId] =
              [$dRead_s3Nt6
               $dRead1_s3Nt7
               $dRead2_s3Nt8
               $dRead3_s3Nt9
               $dRead4_s3Nta
               $dRead5_s3Ntb
               $dRead6_s3Ntc
               $dRead7_s3Ntd] \u []
                  let {
                    sat_s3Nte [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec
                           (a_X3KSS, b_X3KSU, c_X3KSW, d_X3KSY, e_X3KT0, f_X3KT2, g_X3KT4,
                            h_X3KT6)
                    [LclId] =
                        [$dRead_s3Nt6
                         $dRead1_s3Nt7
                         $dRead2_s3Nt8
                         $dRead3_s3Nt9
                         $dRead4_s3Nta
                         $dRead5_s3Ntb
                         $dRead6_s3Ntc
                         $dRead7_s3Ntd] \r [eta_B2 eta_B1]
                            GHC.Read.$fRead(,,,,,,,)1
                                $dRead_s3Nt6
                                $dRead1_s3Nt7
                                $dRead2_s3Nt8
                                $dRead3_s3Nt9
                                $dRead4_s3Nta
                                $dRead5_s3Ntb
                                $dRead6_s3Ntc
                                $dRead7_s3Ntd
                                eta_B2
                                eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s3Nte
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3Ntf;

GHC.Read.$fRead(,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h) =>
     GHC.Read.Read (a, b, c, d, e, f, g, h)
[GblId[DFunId],
 Arity=8,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>m] =
    [] \r [$dRead_s3Ntg
           $dRead1_s3Nth
           $dRead2_s3Nti
           $dRead3_s3Ntj
           $dRead4_s3Ntk
           $dRead5_s3Ntl
           $dRead6_s3Ntm
           $dRead7_s3Ntn]
        let {
          sat_s3Ntr [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 [(a_X3KST, b_X3KSV, c_X3KSX, d_X3KSZ, e_X3KT1, f_X3KT3, g_X3KT5,
                   h_X3KT7)]
          [LclId] =
              [$dRead_s3Ntg
               $dRead1_s3Nth
               $dRead2_s3Nti
               $dRead3_s3Ntj
               $dRead4_s3Ntk
               $dRead5_s3Ntl
               $dRead6_s3Ntm
               $dRead7_s3Ntn] \u []
                  GHC.Read.$fRead(,,,,,,,)_$creadListPrec
                      $dRead_s3Ntg
                      $dRead1_s3Nth
                      $dRead2_s3Nti
                      $dRead3_s3Ntj
                      $dRead4_s3Ntk
                      $dRead5_s3Ntl
                      $dRead6_s3Ntm
                      $dRead7_s3Ntn; } in
        let {
          sat_s3Ntq [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KST, b_X3KSV, c_X3KSX, d_X3KSZ, e_X3KT1, f_X3KT3, g_X3KT5,
                  h_X3KT7)
          [LclId] =
              [$dRead_s3Ntg
               $dRead1_s3Nth
               $dRead2_s3Nti
               $dRead3_s3Ntj
               $dRead4_s3Ntk
               $dRead5_s3Ntl
               $dRead6_s3Ntm
               $dRead7_s3Ntn] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,,,)1
                      $dRead_s3Ntg
                      $dRead1_s3Nth
                      $dRead2_s3Nti
                      $dRead3_s3Ntj
                      $dRead4_s3Ntk
                      $dRead5_s3Ntl
                      $dRead6_s3Ntm
                      $dRead7_s3Ntn
                      eta_B2
                      eta_B1; } in
        let {
          sat_s3Ntp [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS
                 [(a_X3KST, b_X3KSV, c_X3KSX, d_X3KSZ, e_X3KT1, f_X3KT3, g_X3KT5,
                   h_X3KT7)]
          [LclId] =
              [$dRead_s3Ntg
               $dRead1_s3Nth
               $dRead2_s3Nti
               $dRead3_s3Ntj
               $dRead4_s3Ntk
               $dRead5_s3Ntl
               $dRead6_s3Ntm
               $dRead7_s3Ntn] \u []
                  GHC.Read.$fRead(,,,,,,,)_$creadList
                      $dRead_s3Ntg
                      $dRead1_s3Nth
                      $dRead2_s3Nti
                      $dRead3_s3Ntj
                      $dRead4_s3Ntk
                      $dRead5_s3Ntl
                      $dRead6_s3Ntm
                      $dRead7_s3Ntn; } in
        let {
          sat_s3Nto [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS
                    (a_X3KST, b_X3KSV, c_X3KSX, d_X3KSZ, e_X3KT1, f_X3KT3, g_X3KT5,
                     h_X3KT7)
          [LclId] =
              [$dRead_s3Ntg
               $dRead1_s3Nth
               $dRead2_s3Nti
               $dRead3_s3Ntj
               $dRead4_s3Ntk
               $dRead5_s3Ntl
               $dRead6_s3Ntm
               $dRead7_s3Ntn] \r [eta_B1]
                  GHC.Read.$fRead(,,,,,,,)_$creadsPrec
                      $dRead_s3Ntg
                      $dRead1_s3Nth
                      $dRead2_s3Nti
                      $dRead3_s3Ntj
                      $dRead4_s3Ntk
                      $dRead5_s3Ntl
                      $dRead6_s3Ntm
                      $dRead7_s3Ntn
                      eta_B1;
        } in  GHC.Read.C:Read [sat_s3Nto sat_s3Ntp sat_s3Ntq sat_s3Ntr];

GHC.Read.$fRead(,,,,,,)_$creadListPrec
  :: forall a b c d e f g.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f,
      GHC.Read.Read g) =>
     Text.ParserCombinators.ReadPrec.ReadPrec [(a, b, c, d, e, f, g)]
[GblId,
 Arity=7,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Nts
           $dRead1_s3Ntt
           $dRead2_s3Ntu
           $dRead3_s3Ntv
           $dRead4_s3Ntw
           $dRead5_s3Ntx
           $dRead6_s3Nty]
        let {
          sat_s3Ntz [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KTO, b_X3KTQ, c_X3KTS, d_X3KTU, e_X3KTW, f_X3KTY, g_X3KU0)
          [LclId] =
              [$dRead_s3Nts
               $dRead1_s3Ntt
               $dRead2_s3Ntu
               $dRead3_s3Ntv
               $dRead4_s3Ntw
               $dRead5_s3Ntx
               $dRead6_s3Nty] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,,)1
                      $dRead_s3Nts
                      $dRead1_s3Ntt
                      $dRead2_s3Ntu
                      $dRead3_s3Ntv
                      $dRead4_s3Ntw
                      $dRead5_s3Ntx
                      $dRead6_s3Nty
                      eta_B2
                      eta_B1;
        } in  GHC.Read.list sat_s3Ntz;

GHC.Read.$fRead(,,,,,,)_$creadsPrec
  :: forall a b c d e f g.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f,
      GHC.Read.Read g) =>
     GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS (a, b, c, d, e, f, g)
[GblId,
 Arity=8,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3NtA
           $dRead1_s3NtB
           $dRead2_s3NtC
           $dRead3_s3NtD
           $dRead4_s3NtE
           $dRead5_s3NtF
           $dRead6_s3NtG
           n_s3NtH]
        let {
          sat_s3NtI [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 (a_X3KTP, b_X3KTR, c_X3KTT, d_X3KTV, e_X3KTX, f_X3KTZ, g_X3KU1)
          [LclId] =
              [$dRead_s3NtA
               $dRead1_s3NtB
               $dRead2_s3NtC
               $dRead3_s3NtD
               $dRead4_s3NtE
               $dRead5_s3NtF
               $dRead6_s3NtG
               n_s3NtH] \u []
                  GHC.Read.$fRead(,,,,,,)1
                      $dRead_s3NtA
                      $dRead1_s3NtB
                      $dRead2_s3NtC
                      $dRead3_s3NtD
                      $dRead4_s3NtE
                      $dRead5_s3NtF
                      $dRead6_s3NtG
                      n_s3NtH
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NtI;

GHC.Read.$fRead(,,,,,,)_$creadList
  :: forall a b c d e f g.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f,
      GHC.Read.Read g) =>
     Text.ParserCombinators.ReadP.ReadS [(a, b, c, d, e, f, g)]
[GblId,
 Arity=7,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3NtJ
           $dRead1_s3NtK
           $dRead2_s3NtL
           $dRead3_s3NtM
           $dRead4_s3NtN
           $dRead5_s3NtO
           $dRead6_s3NtP]
        let {
          sat_s3NtR [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 [(a_X3KTQ, b_X3KTS, c_X3KTU, d_X3KTW, e_X3KTY, f_X3KU0, g_X3KU2)]
          [LclId] =
              [$dRead_s3NtJ
               $dRead1_s3NtK
               $dRead2_s3NtL
               $dRead3_s3NtM
               $dRead4_s3NtN
               $dRead5_s3NtO
               $dRead6_s3NtP] \u []
                  let {
                    sat_s3NtQ [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec
                           (a_X3KTQ, b_X3KTS, c_X3KTU, d_X3KTW, e_X3KTY, f_X3KU0, g_X3KU2)
                    [LclId] =
                        [$dRead_s3NtJ
                         $dRead1_s3NtK
                         $dRead2_s3NtL
                         $dRead3_s3NtM
                         $dRead4_s3NtN
                         $dRead5_s3NtO
                         $dRead6_s3NtP] \r [eta_B2 eta_B1]
                            GHC.Read.$fRead(,,,,,,)1
                                $dRead_s3NtJ
                                $dRead1_s3NtK
                                $dRead2_s3NtL
                                $dRead3_s3NtM
                                $dRead4_s3NtN
                                $dRead5_s3NtO
                                $dRead6_s3NtP
                                eta_B2
                                eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s3NtQ
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NtR;

GHC.Read.$fRead(,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f,
      GHC.Read.Read g) =>
     GHC.Read.Read (a, b, c, d, e, f, g)
[GblId[DFunId],
 Arity=7,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>m] =
    [] \r [$dRead_s3NtS
           $dRead1_s3NtT
           $dRead2_s3NtU
           $dRead3_s3NtV
           $dRead4_s3NtW
           $dRead5_s3NtX
           $dRead6_s3NtY]
        let {
          sat_s3Nu2 [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 [(a_X3KTR, b_X3KTT, c_X3KTV, d_X3KTX, e_X3KTZ, f_X3KU1, g_X3KU3)]
          [LclId] =
              [$dRead_s3NtS
               $dRead1_s3NtT
               $dRead2_s3NtU
               $dRead3_s3NtV
               $dRead4_s3NtW
               $dRead5_s3NtX
               $dRead6_s3NtY] \u []
                  GHC.Read.$fRead(,,,,,,)_$creadListPrec
                      $dRead_s3NtS
                      $dRead1_s3NtT
                      $dRead2_s3NtU
                      $dRead3_s3NtV
                      $dRead4_s3NtW
                      $dRead5_s3NtX
                      $dRead6_s3NtY; } in
        let {
          sat_s3Nu1 [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KTR, b_X3KTT, c_X3KTV, d_X3KTX, e_X3KTZ, f_X3KU1, g_X3KU3)
          [LclId] =
              [$dRead_s3NtS
               $dRead1_s3NtT
               $dRead2_s3NtU
               $dRead3_s3NtV
               $dRead4_s3NtW
               $dRead5_s3NtX
               $dRead6_s3NtY] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,,)1
                      $dRead_s3NtS
                      $dRead1_s3NtT
                      $dRead2_s3NtU
                      $dRead3_s3NtV
                      $dRead4_s3NtW
                      $dRead5_s3NtX
                      $dRead6_s3NtY
                      eta_B2
                      eta_B1; } in
        let {
          sat_s3Nu0 [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS
                 [(a_X3KTR, b_X3KTT, c_X3KTV, d_X3KTX, e_X3KTZ, f_X3KU1, g_X3KU3)]
          [LclId] =
              [$dRead_s3NtS
               $dRead1_s3NtT
               $dRead2_s3NtU
               $dRead3_s3NtV
               $dRead4_s3NtW
               $dRead5_s3NtX
               $dRead6_s3NtY] \u []
                  GHC.Read.$fRead(,,,,,,)_$creadList
                      $dRead_s3NtS
                      $dRead1_s3NtT
                      $dRead2_s3NtU
                      $dRead3_s3NtV
                      $dRead4_s3NtW
                      $dRead5_s3NtX
                      $dRead6_s3NtY; } in
        let {
          sat_s3NtZ [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS
                    (a_X3KTR, b_X3KTT, c_X3KTV, d_X3KTX, e_X3KTZ, f_X3KU1, g_X3KU3)
          [LclId] =
              [$dRead_s3NtS
               $dRead1_s3NtT
               $dRead2_s3NtU
               $dRead3_s3NtV
               $dRead4_s3NtW
               $dRead5_s3NtX
               $dRead6_s3NtY] \r [eta_B1]
                  GHC.Read.$fRead(,,,,,,)_$creadsPrec
                      $dRead_s3NtS
                      $dRead1_s3NtT
                      $dRead2_s3NtU
                      $dRead3_s3NtV
                      $dRead4_s3NtW
                      $dRead5_s3NtX
                      $dRead6_s3NtY
                      eta_B1;
        } in  GHC.Read.C:Read [sat_s3NtZ sat_s3Nu0 sat_s3Nu1 sat_s3Nu2];

GHC.Read.$fRead(,,,,,)_$creadListPrec
  :: forall a b c d e f.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f) =>
     Text.ParserCombinators.ReadPrec.ReadPrec [(a, b, c, d, e, f)]
[GblId,
 Arity=6,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Nu3
           $dRead1_s3Nu4
           $dRead2_s3Nu5
           $dRead3_s3Nu6
           $dRead4_s3Nu7
           $dRead5_s3Nu8]
        let {
          sat_s3Nu9 [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KVc, b_X3KVe, c_X3KVg, d_X3KVi, e_X3KVk, f_X3KVm)
          [LclId] =
              [$dRead_s3Nu3
               $dRead1_s3Nu4
               $dRead2_s3Nu5
               $dRead3_s3Nu6
               $dRead4_s3Nu7
               $dRead5_s3Nu8] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,)1
                      $dRead_s3Nu3
                      $dRead1_s3Nu4
                      $dRead2_s3Nu5
                      $dRead3_s3Nu6
                      $dRead4_s3Nu7
                      $dRead5_s3Nu8
                      eta_B2
                      eta_B1;
        } in  GHC.Read.list sat_s3Nu9;

GHC.Read.$fRead(,,,,,)_$creadsPrec
  :: forall a b c d e f.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f) =>
     GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS (a, b, c, d, e, f)
[GblId,
 Arity=7,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Nua
           $dRead1_s3Nub
           $dRead2_s3Nuc
           $dRead3_s3Nud
           $dRead4_s3Nue
           $dRead5_s3Nuf
           n_s3Nug]
        let {
          sat_s3Nuh [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 (a_X3KVd, b_X3KVf, c_X3KVh, d_X3KVj, e_X3KVl, f_X3KVn)
          [LclId] =
              [$dRead_s3Nua
               $dRead1_s3Nub
               $dRead2_s3Nuc
               $dRead3_s3Nud
               $dRead4_s3Nue
               $dRead5_s3Nuf
               n_s3Nug] \u []
                  GHC.Read.$fRead(,,,,,)1
                      $dRead_s3Nua
                      $dRead1_s3Nub
                      $dRead2_s3Nuc
                      $dRead3_s3Nud
                      $dRead4_s3Nue
                      $dRead5_s3Nuf
                      n_s3Nug
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3Nuh;

GHC.Read.$fRead(,,,,,)_$creadList
  :: forall a b c d e f.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f) =>
     Text.ParserCombinators.ReadP.ReadS [(a, b, c, d, e, f)]
[GblId,
 Arity=6,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Nui
           $dRead1_s3Nuj
           $dRead2_s3Nuk
           $dRead3_s3Nul
           $dRead4_s3Num
           $dRead5_s3Nun]
        let {
          sat_s3Nup [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 [(a_X3KVe, b_X3KVg, c_X3KVi, d_X3KVk, e_X3KVm, f_X3KVo)]
          [LclId] =
              [$dRead_s3Nui
               $dRead1_s3Nuj
               $dRead2_s3Nuk
               $dRead3_s3Nul
               $dRead4_s3Num
               $dRead5_s3Nun] \u []
                  let {
                    sat_s3Nuo [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec
                           (a_X3KVe, b_X3KVg, c_X3KVi, d_X3KVk, e_X3KVm, f_X3KVo)
                    [LclId] =
                        [$dRead_s3Nui
                         $dRead1_s3Nuj
                         $dRead2_s3Nuk
                         $dRead3_s3Nul
                         $dRead4_s3Num
                         $dRead5_s3Nun] \r [eta_B2 eta_B1]
                            GHC.Read.$fRead(,,,,,)1
                                $dRead_s3Nui
                                $dRead1_s3Nuj
                                $dRead2_s3Nuk
                                $dRead3_s3Nul
                                $dRead4_s3Num
                                $dRead5_s3Nun
                                eta_B2
                                eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s3Nuo
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3Nup;

GHC.Read.$fRead(,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f) =>
     GHC.Read.Read (a, b, c, d, e, f)
[GblId[DFunId],
 Arity=6,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>m] =
    [] \r [$dRead_s3Nuq
           $dRead1_s3Nur
           $dRead2_s3Nus
           $dRead3_s3Nut
           $dRead4_s3Nuu
           $dRead5_s3Nuv]
        let {
          sat_s3Nuz [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 [(a_X3KVf, b_X3KVh, c_X3KVj, d_X3KVl, e_X3KVn, f_X3KVp)]
          [LclId] =
              [$dRead_s3Nuq
               $dRead1_s3Nur
               $dRead2_s3Nus
               $dRead3_s3Nut
               $dRead4_s3Nuu
               $dRead5_s3Nuv] \u []
                  GHC.Read.$fRead(,,,,,)_$creadListPrec
                      $dRead_s3Nuq
                      $dRead1_s3Nur
                      $dRead2_s3Nus
                      $dRead3_s3Nut
                      $dRead4_s3Nuu
                      $dRead5_s3Nuv; } in
        let {
          sat_s3Nuy [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KVf, b_X3KVh, c_X3KVj, d_X3KVl, e_X3KVn, f_X3KVp)
          [LclId] =
              [$dRead_s3Nuq
               $dRead1_s3Nur
               $dRead2_s3Nus
               $dRead3_s3Nut
               $dRead4_s3Nuu
               $dRead5_s3Nuv] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,)1
                      $dRead_s3Nuq
                      $dRead1_s3Nur
                      $dRead2_s3Nus
                      $dRead3_s3Nut
                      $dRead4_s3Nuu
                      $dRead5_s3Nuv
                      eta_B2
                      eta_B1; } in
        let {
          sat_s3Nux [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS
                 [(a_X3KVf, b_X3KVh, c_X3KVj, d_X3KVl, e_X3KVn, f_X3KVp)]
          [LclId] =
              [$dRead_s3Nuq
               $dRead1_s3Nur
               $dRead2_s3Nus
               $dRead3_s3Nut
               $dRead4_s3Nuu
               $dRead5_s3Nuv] \u []
                  GHC.Read.$fRead(,,,,,)_$creadList
                      $dRead_s3Nuq
                      $dRead1_s3Nur
                      $dRead2_s3Nus
                      $dRead3_s3Nut
                      $dRead4_s3Nuu
                      $dRead5_s3Nuv; } in
        let {
          sat_s3Nuw [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS
                    (a_X3KVf, b_X3KVh, c_X3KVj, d_X3KVl, e_X3KVn, f_X3KVp)
          [LclId] =
              [$dRead_s3Nuq
               $dRead1_s3Nur
               $dRead2_s3Nus
               $dRead3_s3Nut
               $dRead4_s3Nuu
               $dRead5_s3Nuv] \r [eta_B1]
                  GHC.Read.$fRead(,,,,,)_$creadsPrec
                      $dRead_s3Nuq
                      $dRead1_s3Nur
                      $dRead2_s3Nus
                      $dRead3_s3Nut
                      $dRead4_s3Nuu
                      $dRead5_s3Nuv
                      eta_B1;
        } in  GHC.Read.C:Read [sat_s3Nuw sat_s3Nux sat_s3Nuy sat_s3Nuz];

GHC.Read.$fRead(,,,,)_$creadListPrec
  :: forall a b c d e.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e) =>
     Text.ParserCombinators.ReadPrec.ReadPrec [(a, b, c, d, e)]
[GblId,
 Arity=5,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3NuA
           $dRead1_s3NuB
           $dRead2_s3NuC
           $dRead3_s3NuD
           $dRead4_s3NuE]
        let {
          sat_s3NuF [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KWn, b_X3KWp, c_X3KWr, d_X3KWt, e_X3KWv)
          [LclId] =
              [$dRead_s3NuA
               $dRead1_s3NuB
               $dRead2_s3NuC
               $dRead3_s3NuD
               $dRead4_s3NuE] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,)1
                      $dRead_s3NuA
                      $dRead1_s3NuB
                      $dRead2_s3NuC
                      $dRead3_s3NuD
                      $dRead4_s3NuE
                      eta_B2
                      eta_B1;
        } in  GHC.Read.list sat_s3NuF;

GHC.Read.$fRead(,,,,)_$creadsPrec
  :: forall a b c d e.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e) =>
     GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS (a, b, c, d, e)
[GblId,
 Arity=6,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3NuG
           $dRead1_s3NuH
           $dRead2_s3NuI
           $dRead3_s3NuJ
           $dRead4_s3NuK
           n_s3NuL]
        let {
          sat_s3NuM [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 (a_X3KWo, b_X3KWq, c_X3KWs, d_X3KWu, e_X3KWw)
          [LclId] =
              [$dRead_s3NuG
               $dRead1_s3NuH
               $dRead2_s3NuI
               $dRead3_s3NuJ
               $dRead4_s3NuK
               n_s3NuL] \u []
                  GHC.Read.$fRead(,,,,)1
                      $dRead_s3NuG
                      $dRead1_s3NuH
                      $dRead2_s3NuI
                      $dRead3_s3NuJ
                      $dRead4_s3NuK
                      n_s3NuL
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NuM;

GHC.Read.$fRead(,,,,)_$creadList
  :: forall a b c d e.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e) =>
     Text.ParserCombinators.ReadP.ReadS [(a, b, c, d, e)]
[GblId,
 Arity=5,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3NuN
           $dRead1_s3NuO
           $dRead2_s3NuP
           $dRead3_s3NuQ
           $dRead4_s3NuR]
        let {
          sat_s3NuT [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 [(a_X3KWp, b_X3KWr, c_X3KWt, d_X3KWv, e_X3KWx)]
          [LclId] =
              [$dRead_s3NuN
               $dRead1_s3NuO
               $dRead2_s3NuP
               $dRead3_s3NuQ
               $dRead4_s3NuR] \u []
                  let {
                    sat_s3NuS [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec
                           (a_X3KWp, b_X3KWr, c_X3KWt, d_X3KWv, e_X3KWx)
                    [LclId] =
                        [$dRead_s3NuN
                         $dRead1_s3NuO
                         $dRead2_s3NuP
                         $dRead3_s3NuQ
                         $dRead4_s3NuR] \r [eta_B2 eta_B1]
                            GHC.Read.$fRead(,,,,)1
                                $dRead_s3NuN
                                $dRead1_s3NuO
                                $dRead2_s3NuP
                                $dRead3_s3NuQ
                                $dRead4_s3NuR
                                eta_B2
                                eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s3NuS
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NuT;

GHC.Read.$fRead(,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e) =>
     GHC.Read.Read (a, b, c, d, e)
[GblId[DFunId],
 Arity=5,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>m] =
    [] \r [$dRead_s3NuU
           $dRead1_s3NuV
           $dRead2_s3NuW
           $dRead3_s3NuX
           $dRead4_s3NuY]
        let {
          sat_s3Nv2 [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 [(a_X3KWq, b_X3KWs, c_X3KWu, d_X3KWw, e_X3KWy)]
          [LclId] =
              [$dRead_s3NuU
               $dRead1_s3NuV
               $dRead2_s3NuW
               $dRead3_s3NuX
               $dRead4_s3NuY] \u []
                  GHC.Read.$fRead(,,,,)_$creadListPrec
                      $dRead_s3NuU
                      $dRead1_s3NuV
                      $dRead2_s3NuW
                      $dRead3_s3NuX
                      $dRead4_s3NuY; } in
        let {
          sat_s3Nv1 [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KWq, b_X3KWs, c_X3KWu, d_X3KWw, e_X3KWy)
          [LclId] =
              [$dRead_s3NuU
               $dRead1_s3NuV
               $dRead2_s3NuW
               $dRead3_s3NuX
               $dRead4_s3NuY] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,)1
                      $dRead_s3NuU
                      $dRead1_s3NuV
                      $dRead2_s3NuW
                      $dRead3_s3NuX
                      $dRead4_s3NuY
                      eta_B2
                      eta_B1; } in
        let {
          sat_s3Nv0 [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS
                 [(a_X3KWq, b_X3KWs, c_X3KWu, d_X3KWw, e_X3KWy)]
          [LclId] =
              [$dRead_s3NuU
               $dRead1_s3NuV
               $dRead2_s3NuW
               $dRead3_s3NuX
               $dRead4_s3NuY] \u []
                  GHC.Read.$fRead(,,,,)_$creadList
                      $dRead_s3NuU
                      $dRead1_s3NuV
                      $dRead2_s3NuW
                      $dRead3_s3NuX
                      $dRead4_s3NuY; } in
        let {
          sat_s3NuZ [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS
                    (a_X3KWq, b_X3KWs, c_X3KWu, d_X3KWw, e_X3KWy)
          [LclId] =
              [$dRead_s3NuU
               $dRead1_s3NuV
               $dRead2_s3NuW
               $dRead3_s3NuX
               $dRead4_s3NuY] \r [eta_B1]
                  GHC.Read.$fRead(,,,,)_$creadsPrec
                      $dRead_s3NuU
                      $dRead1_s3NuV
                      $dRead2_s3NuW
                      $dRead3_s3NuX
                      $dRead4_s3NuY
                      eta_B1;
        } in  GHC.Read.C:Read [sat_s3NuZ sat_s3Nv0 sat_s3Nv1 sat_s3Nv2];

GHC.Read.$fRead(,,,)_$creadListPrec
  :: forall a b c d.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d) =>
     Text.ParserCombinators.ReadPrec.ReadPrec [(a, b, c, d)]
[GblId,
 Arity=4,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Nv3 $dRead1_s3Nv4 $dRead2_s3Nv5 $dRead3_s3Nv6]
        let {
          sat_s3Nv7 [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KXt, b_X3KXv, c_X3KXx, d_X3KXz)
          [LclId] =
              [$dRead_s3Nv3 $dRead1_s3Nv4 $dRead2_s3Nv5 $dRead3_s3Nv6] \r [eta_B2
                                                                           eta_B1]
                  GHC.Read.$fRead(,,,)1
                      $dRead_s3Nv3
                      $dRead1_s3Nv4
                      $dRead2_s3Nv5
                      $dRead3_s3Nv6
                      eta_B2
                      eta_B1;
        } in  GHC.Read.list sat_s3Nv7;

GHC.Read.$fRead(,,,)_$creadsPrec
  :: forall a b c d.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d) =>
     GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS (a, b, c, d)
[GblId,
 Arity=5,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Nv8
           $dRead1_s3Nv9
           $dRead2_s3Nva
           $dRead3_s3Nvb
           n_s3Nvc]
        let {
          sat_s3Nvd [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 (a_X3KXu, b_X3KXw, c_X3KXy, d_X3KXA)
          [LclId] =
              [$dRead_s3Nv8
               $dRead1_s3Nv9
               $dRead2_s3Nva
               $dRead3_s3Nvb
               n_s3Nvc] \u []
                  GHC.Read.$fRead(,,,)1
                      $dRead_s3Nv8
                      $dRead1_s3Nv9
                      $dRead2_s3Nva
                      $dRead3_s3Nvb
                      n_s3Nvc
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3Nvd;

GHC.Read.$fRead(,,,)_$creadList
  :: forall a b c d.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d) =>
     Text.ParserCombinators.ReadP.ReadS [(a, b, c, d)]
[GblId,
 Arity=4,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Nve $dRead1_s3Nvf $dRead2_s3Nvg $dRead3_s3Nvh]
        let {
          sat_s3Nvj [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 [(a_X3KXv, b_X3KXx, c_X3KXz, d_X3KXB)]
          [LclId] =
              [$dRead_s3Nve $dRead1_s3Nvf $dRead2_s3Nvg $dRead3_s3Nvh] \u []
                  let {
                    sat_s3Nvi [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec
                           (a_X3KXv, b_X3KXx, c_X3KXz, d_X3KXB)
                    [LclId] =
                        [$dRead_s3Nve $dRead1_s3Nvf $dRead2_s3Nvg $dRead3_s3Nvh] \r [eta_B2
                                                                                     eta_B1]
                            GHC.Read.$fRead(,,,)1
                                $dRead_s3Nve
                                $dRead1_s3Nvf
                                $dRead2_s3Nvg
                                $dRead3_s3Nvh
                                eta_B2
                                eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s3Nvi
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3Nvj;

GHC.Read.$fRead(,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d) =>
     GHC.Read.Read (a, b, c, d)
[GblId[DFunId],
 Arity=4,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>m] =
    [] \r [$dRead_s3Nvk $dRead1_s3Nvl $dRead2_s3Nvm $dRead3_s3Nvn]
        let {
          sat_s3Nvr [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 [(a_X3KXw, b_X3KXy, c_X3KXA, d_X3KXC)]
          [LclId] =
              [$dRead_s3Nvk $dRead1_s3Nvl $dRead2_s3Nvm $dRead3_s3Nvn] \u []
                  GHC.Read.$fRead(,,,)_$creadListPrec
                      $dRead_s3Nvk $dRead1_s3Nvl $dRead2_s3Nvm $dRead3_s3Nvn; } in
        let {
          sat_s3Nvq [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KXw, b_X3KXy, c_X3KXA, d_X3KXC)
          [LclId] =
              [$dRead_s3Nvk $dRead1_s3Nvl $dRead2_s3Nvm $dRead3_s3Nvn] \r [eta_B2
                                                                           eta_B1]
                  GHC.Read.$fRead(,,,)1
                      $dRead_s3Nvk
                      $dRead1_s3Nvl
                      $dRead2_s3Nvm
                      $dRead3_s3Nvn
                      eta_B2
                      eta_B1; } in
        let {
          sat_s3Nvp [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS
                 [(a_X3KXw, b_X3KXy, c_X3KXA, d_X3KXC)]
          [LclId] =
              [$dRead_s3Nvk $dRead1_s3Nvl $dRead2_s3Nvm $dRead3_s3Nvn] \u []
                  GHC.Read.$fRead(,,,)_$creadList
                      $dRead_s3Nvk $dRead1_s3Nvl $dRead2_s3Nvm $dRead3_s3Nvn; } in
        let {
          sat_s3Nvo [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS
                    (a_X3KXw, b_X3KXy, c_X3KXA, d_X3KXC)
          [LclId] =
              [$dRead_s3Nvk
               $dRead1_s3Nvl
               $dRead2_s3Nvm
               $dRead3_s3Nvn] \r [eta_B1]
                  GHC.Read.$fRead(,,,)_$creadsPrec
                      $dRead_s3Nvk $dRead1_s3Nvl $dRead2_s3Nvm $dRead3_s3Nvn eta_B1;
        } in  GHC.Read.C:Read [sat_s3Nvo sat_s3Nvp sat_s3Nvq sat_s3Nvr];

GHC.Read.$fRead(,,)_$creadListPrec
  :: forall a b c.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c) =>
     Text.ParserCombinators.ReadPrec.ReadPrec [(a, b, c)]
[GblId,
 Arity=3,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Nvs $dRead1_s3Nvt $dRead2_s3Nvu]
        let {
          sat_s3Nvv [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KYb, b_X3KYd, c_X3KYf)
          [LclId] =
              [$dRead_s3Nvs $dRead1_s3Nvt $dRead2_s3Nvu] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,)1
                      $dRead_s3Nvs $dRead1_s3Nvt $dRead2_s3Nvu eta_B2 eta_B1;
        } in  GHC.Read.list sat_s3Nvv;

GHC.Read.$fRead(,,)_$creadsPrec
  :: forall a b c.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c) =>
     GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS (a, b, c)
[GblId,
 Arity=4,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Nvw $dRead1_s3Nvx $dRead2_s3Nvy n_s3Nvz]
        let {
          sat_s3NvA [Occ=Once]
            :: Text.ParserCombinators.ReadP.P (a_X3KYc, b_X3KYe, c_X3KYg)
          [LclId] =
              [$dRead_s3Nvw $dRead1_s3Nvx $dRead2_s3Nvy n_s3Nvz] \u []
                  GHC.Read.$fRead(,,)1
                      $dRead_s3Nvw
                      $dRead1_s3Nvx
                      $dRead2_s3Nvy
                      n_s3Nvz
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NvA;

GHC.Read.$fRead(,,)_$creadList
  :: forall a b c.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c) =>
     Text.ParserCombinators.ReadP.ReadS [(a, b, c)]
[GblId,
 Arity=3,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3NvB $dRead1_s3NvC $dRead2_s3NvD]
        let {
          sat_s3NvF [Occ=Once]
            :: Text.ParserCombinators.ReadP.P [(a_X3KYd, b_X3KYf, c_X3KYh)]
          [LclId] =
              [$dRead_s3NvB $dRead1_s3NvC $dRead2_s3NvD] \u []
                  let {
                    sat_s3NvE [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec
                           (a_X3KYd, b_X3KYf, c_X3KYh)
                    [LclId] =
                        [$dRead_s3NvB $dRead1_s3NvC $dRead2_s3NvD] \r [eta_B2 eta_B1]
                            GHC.Read.$fRead(,,)1
                                $dRead_s3NvB $dRead1_s3NvC $dRead2_s3NvD eta_B2 eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s3NvE
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NvF;

GHC.Read.$fRead(,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c) =>
     GHC.Read.Read (a, b, c)
[GblId[DFunId],
 Arity=3,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>m] =
    [] \r [$dRead_s3NvG $dRead1_s3NvH $dRead2_s3NvI]
        let {
          sat_s3NvM [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 [(a_X3KYe, b_X3KYg, c_X3KYi)]
          [LclId] =
              [$dRead_s3NvG $dRead1_s3NvH $dRead2_s3NvI] \u []
                  GHC.Read.$fRead(,,)_$creadListPrec
                      $dRead_s3NvG $dRead1_s3NvH $dRead2_s3NvI; } in
        let {
          sat_s3NvL [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KYe, b_X3KYg, c_X3KYi)
          [LclId] =
              [$dRead_s3NvG $dRead1_s3NvH $dRead2_s3NvI] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,)1
                      $dRead_s3NvG $dRead1_s3NvH $dRead2_s3NvI eta_B2 eta_B1; } in
        let {
          sat_s3NvK [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS [(a_X3KYe, b_X3KYg, c_X3KYi)]
          [LclId] =
              [$dRead_s3NvG $dRead1_s3NvH $dRead2_s3NvI] \u []
                  GHC.Read.$fRead(,,)_$creadList
                      $dRead_s3NvG $dRead1_s3NvH $dRead2_s3NvI; } in
        let {
          sat_s3NvJ [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS (a_X3KYe, b_X3KYg, c_X3KYi)
          [LclId] =
              [$dRead_s3NvG $dRead1_s3NvH $dRead2_s3NvI] \r [eta_B1]
                  GHC.Read.$fRead(,,)_$creadsPrec
                      $dRead_s3NvG $dRead1_s3NvH $dRead2_s3NvI eta_B1;
        } in  GHC.Read.C:Read [sat_s3NvJ sat_s3NvK sat_s3NvL sat_s3NvM];

GHC.Read.$fRead(,)_$creadListPrec
  :: forall a b.
     (GHC.Read.Read a, GHC.Read.Read b) =>
     Text.ParserCombinators.ReadPrec.ReadPrec [(a, b)]
[GblId,
 Arity=2,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3NvN $dRead1_s3NvO]
        let {
          sat_s3NvP [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec (a_X3KZ7, b_X3KZ9)
          [LclId] =
              [$dRead_s3NvN $dRead1_s3NvO] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,)1 $dRead_s3NvN $dRead1_s3NvO eta_B2 eta_B1;
        } in  GHC.Read.list sat_s3NvP;

GHC.Read.$fRead(,)_$creadsPrec
  :: forall a b.
     (GHC.Read.Read a, GHC.Read.Read b) =>
     GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS (a, b)
[GblId,
 Arity=3,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3NvQ $dRead1_s3NvR n_s3NvS]
        let {
          sat_s3NvT [Occ=Once]
            :: Text.ParserCombinators.ReadP.P (a_X3KZ8, b_X3KZa)
          [LclId] =
              [$dRead_s3NvQ $dRead1_s3NvR n_s3NvS] \u []
                  GHC.Read.$fRead(,)1
                      $dRead_s3NvQ
                      $dRead1_s3NvR
                      n_s3NvS
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NvT;

GHC.Read.$fRead(,)_$creadList
  :: forall a b.
     (GHC.Read.Read a, GHC.Read.Read b) =>
     Text.ParserCombinators.ReadP.ReadS [(a, b)]
[GblId,
 Arity=2,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3NvU $dRead1_s3NvV]
        let {
          sat_s3NvX [Occ=Once]
            :: Text.ParserCombinators.ReadP.P [(a_X3KZ9, b_X3KZb)]
          [LclId] =
              [$dRead_s3NvU $dRead1_s3NvV] \u []
                  let {
                    sat_s3NvW [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec (a_X3KZ9, b_X3KZb)
                    [LclId] =
                        [$dRead_s3NvU $dRead1_s3NvV] \r [eta_B2 eta_B1]
                            GHC.Read.$fRead(,)1 $dRead_s3NvU $dRead1_s3NvV eta_B2 eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s3NvW
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NvX;

GHC.Read.$fRead(,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b.
     (GHC.Read.Read a, GHC.Read.Read b) =>
     GHC.Read.Read (a, b)
[GblId[DFunId],
 Arity=2,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>m] =
    [] \r [$dRead_s3NvY $dRead1_s3NvZ]
        let {
          sat_s3Nw3 [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec [(a_X3KZa, b_X3KZc)]
          [LclId] =
              [$dRead_s3NvY $dRead1_s3NvZ] \u []
                  GHC.Read.$fRead(,)_$creadListPrec $dRead_s3NvY $dRead1_s3NvZ; } in
        let {
          sat_s3Nw2 [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec (a_X3KZa, b_X3KZc)
          [LclId] =
              [$dRead_s3NvY $dRead1_s3NvZ] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,)1 $dRead_s3NvY $dRead1_s3NvZ eta_B2 eta_B1; } in
        let {
          sat_s3Nw1 [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS [(a_X3KZa, b_X3KZc)]
          [LclId] =
              [$dRead_s3NvY $dRead1_s3NvZ] \u []
                  GHC.Read.$fRead(,)_$creadList $dRead_s3NvY $dRead1_s3NvZ; } in
        let {
          sat_s3Nw0 [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS (a_X3KZa, b_X3KZc)
          [LclId] =
              [$dRead_s3NvY $dRead1_s3NvZ] \r [eta_B1]
                  GHC.Read.$fRead(,)_$creadsPrec $dRead_s3NvY $dRead1_s3NvZ eta_B1;
        } in  GHC.Read.C:Read [sat_s3Nw0 sat_s3Nw1 sat_s3Nw2 sat_s3Nw3];

GHC.Read.$fReadLexeme_$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec [Text.Read.Lex.Lexeme]
[GblId] =
    [] \u [] GHC.Read.list GHC.Read.$fReadLexeme1;

GHC.Read.$fReadLexeme_lvl117
  :: Text.ParserCombinators.ReadP.P Text.Read.Lex.Lexeme
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE Text.ParserCombinators.ReadP.Result! [Text.Read.Lex.EOF
                                                        Text.ParserCombinators.ReadP.Fail];

GHC.Read.$fReadLexeme8
  :: GHC.Base.String
     -> Text.ParserCombinators.ReadP.P Text.Read.Lex.Lexeme
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [a3_s3Nw4]
        case a3_s3Nw4 of {
          [] -> GHC.Read.$fReadLexeme_lvl117;
          : _ [Occ=Dead] _ [Occ=Dead] ->
              Text.ParserCombinators.ReadP.Fail [];
        };

GHC.Read.$fReadLexeme7
  :: Text.ParserCombinators.ReadP.P Text.Read.Lex.Lexeme
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE Text.ParserCombinators.ReadP.Look! [GHC.Read.$fReadLexeme8];

GHC.Read.$fReadLexeme6
  :: Text.ParserCombinators.ReadP.P Text.Read.Lex.Lexeme
[GblId] =
    [] \u []
        Text.Read.Lex.expect2
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fReadLexeme_lvl116
  :: Text.ParserCombinators.ReadP.P Text.Read.Lex.Lexeme
[GblId] =
    [] \u []
        Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
            GHC.Read.$fReadLexeme7 GHC.Read.$fReadLexeme6;

GHC.Read.$fReadLexeme_k
  :: () -> Text.ParserCombinators.ReadP.P Text.Read.Lex.Lexeme
[GblId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
    [] \r [a3_s3Nw8] GHC.Read.$fReadLexeme_lvl116;

GHC.Read.$fReadLexeme5
  :: GHC.Base.String
     -> Text.ParserCombinators.ReadP.P Text.Read.Lex.Lexeme
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [a_s3Nw9]
        Text.ParserCombinators.ReadP.skipSpaces2
            a_s3Nw9 GHC.Read.$fReadLexeme_k;

GHC.Read.$fReadLexeme4
  :: Text.ParserCombinators.ReadP.P Text.Read.Lex.Lexeme
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE Text.ParserCombinators.ReadP.Look! [GHC.Read.$fReadLexeme5];

GHC.Read.$fReadLexeme3
  :: Text.ParserCombinators.ReadP.ReadS Text.Read.Lex.Lexeme
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.$fReadLexeme4 eta_B1;

GHC.Read.$fReadLexeme_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS Text.Read.Lex.Lexeme
[GblId, Arity=2, Str=<L,A>, Unf=OtherCon []] =
    [] \r [n_s3Nwa eta_B1] GHC.Read.$fReadLexeme3 eta_B1;

GHC.Read.$fReadLexeme2
  :: Text.ParserCombinators.ReadP.P [Text.Read.Lex.Lexeme]
[GblId] =
    [] \u []
        GHC.Read.$fReadLexeme_$creadListPrec
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fReadLexeme_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [Text.Read.Lex.Lexeme]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.$fReadLexeme2 eta_B1;

GHC.Read.$fReadLexeme [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read Text.Read.Lex.Lexeme
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fReadLexeme_$creadsPrec
                                    GHC.Read.$fReadLexeme_$creadList
                                    GHC.Read.$fReadLexeme1
                                    GHC.Read.$fReadLexeme_$creadListPrec];

GHC.Read.$dmreadList
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadP.ReadS [a]
[GblId, Arity=1, Str=<L,1*U(A,A,1*C1(C(U)),A)>, Unf=OtherCon []] =
    [] \r [$dRead_s3Nwb]
        let {
          sat_s3Nwd [Occ=Once] :: Text.ParserCombinators.ReadP.P [a_X3K8l]
          [LclId] =
              [$dRead_s3Nwb] \u []
                  let {
                    sat_s3Nwc [Occ=Once, Dmd=<L,1*C1(C(U))>]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec a_X3K8l
                    [LclId] =
                        [$dRead_s3Nwb] \s [] GHC.Read.readPrec $dRead_s3Nwb;
                  } in 
                    GHC.Read.list
                        sat_s3Nwc
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3Nwd;

GHC.Read.$fReadInteger_$sreadNumber
  :: (Text.Read.Lex.Lexeme
      -> Text.ParserCombinators.ReadPrec.ReadPrec
           GHC.Integer.Type.Integer)
     -> Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Integer.Type.Integer -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=3, Str=<L,C(C1(C1(U)))><L,U><L,U>, Unf=OtherCon []] =
    [] \r [convert_s3Nwe eta_s3Nwf eta1_s3Nwg]
        let {
          sat_s3Nx2 [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 GHC.Integer.Type.Integer
          [LclId] =
              [convert_s3Nwe] \r [n_s3Nwh k1_s3Nwi]
                  let {
                    lvl116_s3Nwj [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId] =
                        [convert_s3Nwe n_s3Nwh k1_s3Nwi] \u []
                            let {
                              lvl2_s3Nwk [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [convert_s3Nwe n_s3Nwh k1_s3Nwi] \u []
                                      let {
                                        lvl3_s3Nwl
                                          :: GHC.Integer.Type.Integer
                                             -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId, Arity=1, Str=<L,1*U>, Unf=OtherCon []] =
                                            [k1_s3Nwi] \r [a1_s3Nwm]
                                                let {
                                                  sat_s3Nwn [Occ=Once] :: GHC.Integer.Type.Integer
                                                  [LclId] =
                                                      [a1_s3Nwm] \u []
                                                          GHC.Integer.Type.negateInteger a1_s3Nwm;
                                                } in  k1_s3Nwi sat_s3Nwn; } in
                                      let {
                                        lvl117_s3Nwo [Occ=OnceL]
                                          :: Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            [convert_s3Nwe n_s3Nwh lvl3_s3Nwl] \u []
                                                convert_s3Nwe
                                                    Text.Read.Lex.EOF n_s3Nwh lvl3_s3Nwl; } in
                                      let {
                                        sat_s3Nwx [Occ=Once]
                                          :: Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            [convert_s3Nwe n_s3Nwh lvl3_s3Nwl] \u []
                                                let {
                                                  sat_s3Nww [Occ=Once]
                                                    :: Text.Read.Lex.Lexeme
                                                       -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                                  [LclId] =
                                                      [convert_s3Nwe
                                                       n_s3Nwh
                                                       lvl3_s3Nwl] \r [a1_s3Nwv]
                                                          convert_s3Nwe a1_s3Nwv n_s3Nwh lvl3_s3Nwl;
                                                } in  Text.Read.Lex.expect2 sat_s3Nww; } in
                                      let {
                                        sat_s3Nwt [Occ=OnceL]
                                          :: GHC.Base.String
                                             -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            [lvl117_s3Nwo] \r [a3_s3Nwp]
                                                case a3_s3Nwp of {
                                                  [] -> lvl117_s3Nwo;
                                                  : _ [Occ=Dead] _ [Occ=Dead] ->
                                                      Text.ParserCombinators.ReadP.Fail [];
                                                }; } in
                                      let {
                                        sat_s3Nwu [Occ=Once]
                                          :: Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            CCCS Text.ParserCombinators.ReadP.Look! [sat_s3Nwt];
                                      } in 
                                        Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                            sat_s3Nwu sat_s3Nwx; } in
                            let {
                              k_s3Nwy [Occ=OnceL, Dmd=<L,C(U)>]
                                :: () -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
                                  [lvl2_s3Nwk] \r [a3_s3Nwz] lvl2_s3Nwk; } in
                            let {
                              lvl3_s3NwA [Occ=OnceL]
                                :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                  [k_s3Nwy] \r [a_s3NwB]
                                      Text.ParserCombinators.ReadP.skipSpaces2 a_s3NwB k_s3Nwy; } in
                            let {
                              lvl4_s3NwC [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Unf=OtherCon []] =
                                  CCCS Text.ParserCombinators.ReadP.Look! [lvl3_s3NwA]; } in
                            let {
                              w2_s3NwD
                                :: Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                  [convert_s3Nwe n_s3Nwh k1_s3Nwi lvl4_s3NwC] \r [a1_s3NwE]
                                      case a1_s3NwE of wild_s3NwF {
                                        __DEFAULT -> convert_s3Nwe wild_s3NwF n_s3Nwh k1_s3Nwi;
                                        Text.Read.Lex.Symbol ds_s3NwG [Occ=Once!] ->
                                            case ds_s3NwG of {
                                              [] -> convert_s3Nwe wild_s3NwF n_s3Nwh k1_s3Nwi;
                                              : ds1_s3NwI [Occ=Once!] ds2_s3NwJ [Occ=Once!] ->
                                                  case ds1_s3NwI of {
                                                    GHC.Types.C# ds3_s3NwL [Occ=Once!] ->
                                                        case ds3_s3NwL of {
                                                          __DEFAULT ->
                                                              convert_s3Nwe
                                                                  wild_s3NwF n_s3Nwh k1_s3Nwi;
                                                          '-'# ->
                                                              case ds2_s3NwJ of {
                                                                [] -> lvl4_s3NwC;
                                                                : _ [Occ=Dead] _ [Occ=Dead] ->
                                                                    convert_s3Nwe
                                                                        wild_s3NwF n_s3Nwh k1_s3Nwi;
                                                              };
                                                        };
                                                  };
                                            };
                                      }; } in
                            let {
                              lvl117_s3NwQ [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [w2_s3NwD] \u [] w2_s3NwD Text.Read.Lex.EOF; } in
                            let {
                              sat_s3NwX [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [w2_s3NwD] \u [] Text.Read.Lex.expect2 w2_s3NwD; } in
                            let {
                              sat_s3NwV [Occ=OnceL]
                                :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [lvl117_s3NwQ] \r [a3_s3NwR]
                                      case a3_s3NwR of {
                                        [] -> lvl117_s3NwQ;
                                        : _ [Occ=Dead] _ [Occ=Dead] ->
                                            Text.ParserCombinators.ReadP.Fail [];
                                      }; } in
                            let {
                              sat_s3NwW [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  CCCS Text.ParserCombinators.ReadP.Look! [sat_s3NwV];
                            } in 
                              Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                  sat_s3NwW sat_s3NwX; } in
                  let {
                    k_s3NwY [Occ=OnceL, Dmd=<L,C(U)>]
                      :: () -> Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
                        [lvl116_s3Nwj] \r [a3_s3NwZ] lvl116_s3Nwj; } in
                  let {
                    sat_s3Nx1 [Occ=Once]
                      :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId] =
                        [k_s3NwY] \r [a_s3Nx0]
                            Text.ParserCombinators.ReadP.skipSpaces2 a_s3Nx0 k_s3NwY;
                  } in  Text.ParserCombinators.ReadP.Look [sat_s3Nx1];
        } in  GHC.Read.list3 sat_s3Nx2 eta_s3Nwf eta1_s3Nwg;

GHC.Read.$fReadDouble_$sreadNumber
  :: (Text.Read.Lex.Lexeme
      -> Text.ParserCombinators.ReadPrec.ReadPrec GHC.Types.Double)
     -> Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Types.Double -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=3, Str=<L,C(C1(C1(U)))><L,U><L,U>, Unf=OtherCon []] =
    [] \r [convert_s3Nx3 eta_s3Nx4 eta1_s3Nx5]
        let {
          sat_s3NxR [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec GHC.Types.Double
          [LclId] =
              [convert_s3Nx3] \r [n_s3Nx6 k1_s3Nx7]
                  let {
                    lvl116_s3Nx8 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId] =
                        [convert_s3Nx3 n_s3Nx6 k1_s3Nx7] \u []
                            let {
                              lvl2_s3Nx9 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [convert_s3Nx3 n_s3Nx6 k1_s3Nx7] \u []
                                      let {
                                        lvl3_s3Nxa
                                          :: GHC.Types.Double
                                             -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId, Arity=1, Str=<L,1*U(U)>, Unf=OtherCon []] =
                                            [k1_s3Nx7] \r [a1_s3Nxb]
                                                let {
                                                  sat_s3Nxc [Occ=Once] :: GHC.Types.Double
                                                  [LclId] =
                                                      [a1_s3Nxb] \u []
                                                          GHC.Float.negateDouble a1_s3Nxb;
                                                } in  k1_s3Nx7 sat_s3Nxc; } in
                                      let {
                                        lvl117_s3Nxd [Occ=OnceL]
                                          :: Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            [convert_s3Nx3 n_s3Nx6 lvl3_s3Nxa] \u []
                                                convert_s3Nx3
                                                    Text.Read.Lex.EOF n_s3Nx6 lvl3_s3Nxa; } in
                                      let {
                                        sat_s3Nxm [Occ=Once]
                                          :: Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            [convert_s3Nx3 n_s3Nx6 lvl3_s3Nxa] \u []
                                                let {
                                                  sat_s3Nxl [Occ=Once]
                                                    :: Text.Read.Lex.Lexeme
                                                       -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                                  [LclId] =
                                                      [convert_s3Nx3
                                                       n_s3Nx6
                                                       lvl3_s3Nxa] \r [a1_s3Nxk]
                                                          convert_s3Nx3 a1_s3Nxk n_s3Nx6 lvl3_s3Nxa;
                                                } in  Text.Read.Lex.expect2 sat_s3Nxl; } in
                                      let {
                                        sat_s3Nxi [Occ=OnceL]
                                          :: GHC.Base.String
                                             -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            [lvl117_s3Nxd] \r [a3_s3Nxe]
                                                case a3_s3Nxe of {
                                                  [] -> lvl117_s3Nxd;
                                                  : _ [Occ=Dead] _ [Occ=Dead] ->
                                                      Text.ParserCombinators.ReadP.Fail [];
                                                }; } in
                                      let {
                                        sat_s3Nxj [Occ=Once]
                                          :: Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            CCCS Text.ParserCombinators.ReadP.Look! [sat_s3Nxi];
                                      } in 
                                        Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                            sat_s3Nxj sat_s3Nxm; } in
                            let {
                              k_s3Nxn [Occ=OnceL, Dmd=<L,C(U)>]
                                :: () -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
                                  [lvl2_s3Nx9] \r [a3_s3Nxo] lvl2_s3Nx9; } in
                            let {
                              lvl3_s3Nxp [Occ=OnceL]
                                :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                  [k_s3Nxn] \r [a_s3Nxq]
                                      Text.ParserCombinators.ReadP.skipSpaces2 a_s3Nxq k_s3Nxn; } in
                            let {
                              lvl4_s3Nxr [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Unf=OtherCon []] =
                                  CCCS Text.ParserCombinators.ReadP.Look! [lvl3_s3Nxp]; } in
                            let {
                              w2_s3Nxs
                                :: Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                  [convert_s3Nx3 n_s3Nx6 k1_s3Nx7 lvl4_s3Nxr] \r [a1_s3Nxt]
                                      case a1_s3Nxt of wild_s3Nxu {
                                        __DEFAULT -> convert_s3Nx3 wild_s3Nxu n_s3Nx6 k1_s3Nx7;
                                        Text.Read.Lex.Symbol ds_s3Nxv [Occ=Once!] ->
                                            case ds_s3Nxv of {
                                              [] -> convert_s3Nx3 wild_s3Nxu n_s3Nx6 k1_s3Nx7;
                                              : ds1_s3Nxx [Occ=Once!] ds2_s3Nxy [Occ=Once!] ->
                                                  case ds1_s3Nxx of {
                                                    GHC.Types.C# ds3_s3NxA [Occ=Once!] ->
                                                        case ds3_s3NxA of {
                                                          __DEFAULT ->
                                                              convert_s3Nx3
                                                                  wild_s3Nxu n_s3Nx6 k1_s3Nx7;
                                                          '-'# ->
                                                              case ds2_s3Nxy of {
                                                                [] -> lvl4_s3Nxr;
                                                                : _ [Occ=Dead] _ [Occ=Dead] ->
                                                                    convert_s3Nx3
                                                                        wild_s3Nxu n_s3Nx6 k1_s3Nx7;
                                                              };
                                                        };
                                                  };
                                            };
                                      }; } in
                            let {
                              lvl117_s3NxF [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [w2_s3Nxs] \u [] w2_s3Nxs Text.Read.Lex.EOF; } in
                            let {
                              sat_s3NxM [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [w2_s3Nxs] \u [] Text.Read.Lex.expect2 w2_s3Nxs; } in
                            let {
                              sat_s3NxK [Occ=OnceL]
                                :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [lvl117_s3NxF] \r [a3_s3NxG]
                                      case a3_s3NxG of {
                                        [] -> lvl117_s3NxF;
                                        : _ [Occ=Dead] _ [Occ=Dead] ->
                                            Text.ParserCombinators.ReadP.Fail [];
                                      }; } in
                            let {
                              sat_s3NxL [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  CCCS Text.ParserCombinators.ReadP.Look! [sat_s3NxK];
                            } in 
                              Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                  sat_s3NxL sat_s3NxM; } in
                  let {
                    k_s3NxN [Occ=OnceL, Dmd=<L,C(U)>]
                      :: () -> Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
                        [lvl116_s3Nx8] \r [a3_s3NxO] lvl116_s3Nx8; } in
                  let {
                    sat_s3NxQ [Occ=Once]
                      :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId] =
                        [k_s3NxN] \r [a_s3NxP]
                            Text.ParserCombinators.ReadP.skipSpaces2 a_s3NxP k_s3NxN;
                  } in  Text.ParserCombinators.ReadP.Look [sat_s3NxQ];
        } in  GHC.Read.list3 sat_s3NxR eta_s3Nx4 eta1_s3Nx5;

GHC.Read.$fReadFloat_$sreadNumber
  :: (Text.Read.Lex.Lexeme
      -> Text.ParserCombinators.ReadPrec.ReadPrec GHC.Types.Float)
     -> Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Types.Float -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=3, Str=<L,C(C1(C1(U)))><L,U><L,U>, Unf=OtherCon []] =
    [] \r [convert_s3NxS eta_s3NxT eta1_s3NxU]
        let {
          sat_s3NyG [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec GHC.Types.Float
          [LclId] =
              [convert_s3NxS] \r [n_s3NxV k1_s3NxW]
                  let {
                    lvl116_s3NxX [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId] =
                        [convert_s3NxS n_s3NxV k1_s3NxW] \u []
                            let {
                              lvl2_s3NxY [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [convert_s3NxS n_s3NxV k1_s3NxW] \u []
                                      let {
                                        lvl3_s3NxZ
                                          :: GHC.Types.Float
                                             -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId, Arity=1, Str=<L,1*U(U)>, Unf=OtherCon []] =
                                            [k1_s3NxW] \r [a1_s3Ny0]
                                                let {
                                                  sat_s3Ny1 [Occ=Once] :: GHC.Types.Float
                                                  [LclId] =
                                                      [a1_s3Ny0] \u []
                                                          GHC.Float.negateFloat a1_s3Ny0;
                                                } in  k1_s3NxW sat_s3Ny1; } in
                                      let {
                                        lvl117_s3Ny2 [Occ=OnceL]
                                          :: Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            [convert_s3NxS n_s3NxV lvl3_s3NxZ] \u []
                                                convert_s3NxS
                                                    Text.Read.Lex.EOF n_s3NxV lvl3_s3NxZ; } in
                                      let {
                                        sat_s3Nyb [Occ=Once]
                                          :: Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            [convert_s3NxS n_s3NxV lvl3_s3NxZ] \u []
                                                let {
                                                  sat_s3Nya [Occ=Once]
                                                    :: Text.Read.Lex.Lexeme
                                                       -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                                  [LclId] =
                                                      [convert_s3NxS
                                                       n_s3NxV
                                                       lvl3_s3NxZ] \r [a1_s3Ny9]
                                                          convert_s3NxS a1_s3Ny9 n_s3NxV lvl3_s3NxZ;
                                                } in  Text.Read.Lex.expect2 sat_s3Nya; } in
                                      let {
                                        sat_s3Ny7 [Occ=OnceL]
                                          :: GHC.Base.String
                                             -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            [lvl117_s3Ny2] \r [a3_s3Ny3]
                                                case a3_s3Ny3 of {
                                                  [] -> lvl117_s3Ny2;
                                                  : _ [Occ=Dead] _ [Occ=Dead] ->
                                                      Text.ParserCombinators.ReadP.Fail [];
                                                }; } in
                                      let {
                                        sat_s3Ny8 [Occ=Once]
                                          :: Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            CCCS Text.ParserCombinators.ReadP.Look! [sat_s3Ny7];
                                      } in 
                                        Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                            sat_s3Ny8 sat_s3Nyb; } in
                            let {
                              k_s3Nyc [Occ=OnceL, Dmd=<L,C(U)>]
                                :: () -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
                                  [lvl2_s3NxY] \r [a3_s3Nyd] lvl2_s3NxY; } in
                            let {
                              lvl3_s3Nye [Occ=OnceL]
                                :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                  [k_s3Nyc] \r [a_s3Nyf]
                                      Text.ParserCombinators.ReadP.skipSpaces2 a_s3Nyf k_s3Nyc; } in
                            let {
                              lvl4_s3Nyg [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Unf=OtherCon []] =
                                  CCCS Text.ParserCombinators.ReadP.Look! [lvl3_s3Nye]; } in
                            let {
                              w2_s3Nyh
                                :: Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                  [convert_s3NxS n_s3NxV k1_s3NxW lvl4_s3Nyg] \r [a1_s3Nyi]
                                      case a1_s3Nyi of wild_s3Nyj {
                                        __DEFAULT -> convert_s3NxS wild_s3Nyj n_s3NxV k1_s3NxW;
                                        Text.Read.Lex.Symbol ds_s3Nyk [Occ=Once!] ->
                                            case ds_s3Nyk of {
                                              [] -> convert_s3NxS wild_s3Nyj n_s3NxV k1_s3NxW;
                                              : ds1_s3Nym [Occ=Once!] ds2_s3Nyn [Occ=Once!] ->
                                                  case ds1_s3Nym of {
                                                    GHC.Types.C# ds3_s3Nyp [Occ=Once!] ->
                                                        case ds3_s3Nyp of {
                                                          __DEFAULT ->
                                                              convert_s3NxS
                                                                  wild_s3Nyj n_s3NxV k1_s3NxW;
                                                          '-'# ->
                                                              case ds2_s3Nyn of {
                                                                [] -> lvl4_s3Nyg;
                                                                : _ [Occ=Dead] _ [Occ=Dead] ->
                                                                    convert_s3NxS
                                                                        wild_s3Nyj n_s3NxV k1_s3NxW;
                                                              };
                                                        };
                                                  };
                                            };
                                      }; } in
                            let {
                              lvl117_s3Nyu [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [w2_s3Nyh] \u [] w2_s3Nyh Text.Read.Lex.EOF; } in
                            let {
                              sat_s3NyB [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [w2_s3Nyh] \u [] Text.Read.Lex.expect2 w2_s3Nyh; } in
                            let {
                              sat_s3Nyz [Occ=OnceL]
                                :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [lvl117_s3Nyu] \r [a3_s3Nyv]
                                      case a3_s3Nyv of {
                                        [] -> lvl117_s3Nyu;
                                        : _ [Occ=Dead] _ [Occ=Dead] ->
                                            Text.ParserCombinators.ReadP.Fail [];
                                      }; } in
                            let {
                              sat_s3NyA [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  CCCS Text.ParserCombinators.ReadP.Look! [sat_s3Nyz];
                            } in 
                              Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                  sat_s3NyA sat_s3NyB; } in
                  let {
                    k_s3NyC [Occ=OnceL, Dmd=<L,C(U)>]
                      :: () -> Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
                        [lvl116_s3NxX] \r [a3_s3NyD] lvl116_s3NxX; } in
                  let {
                    sat_s3NyF [Occ=Once]
                      :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId] =
                        [k_s3NyC] \r [a_s3NyE]
                            Text.ParserCombinators.ReadP.skipSpaces2 a_s3NyE k_s3NyC;
                  } in  Text.ParserCombinators.ReadP.Look [sat_s3NyF];
        } in  GHC.Read.list3 sat_s3NyG eta_s3NxT eta1_s3NxU;

GHC.Read.$fReadInt_$sreadNumber
  :: (Text.Read.Lex.Lexeme
      -> Text.ParserCombinators.ReadPrec.ReadPrec GHC.Types.Int)
     -> Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Types.Int -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=3, Str=<L,C(C1(C1(U)))><L,U><L,U>, Unf=OtherCon []] =
    [] \r [convert_s3NyH eta_s3NyI eta1_s3NyJ]
        let {
          sat_s3Nzv [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec GHC.Types.Int
          [LclId] =
              [convert_s3NyH] \r [n_s3NyK k1_s3NyL]
                  let {
                    lvl116_s3NyM [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId] =
                        [convert_s3NyH n_s3NyK k1_s3NyL] \u []
                            let {
                              lvl2_s3NyN [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [convert_s3NyH n_s3NyK k1_s3NyL] \u []
                                      let {
                                        lvl3_s3NyO
                                          :: GHC.Types.Int
                                             -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId, Arity=1, Str=<L,1*U(U)>, Unf=OtherCon []] =
                                            [k1_s3NyL] \r [a1_s3NyP]
                                                let {
                                                  sat_s3NyQ [Occ=Once] :: GHC.Types.Int
                                                  [LclId] =
                                                      [a1_s3NyP] \u []
                                                          GHC.Num.$fNumInt_$cnegate a1_s3NyP;
                                                } in  k1_s3NyL sat_s3NyQ; } in
                                      let {
                                        lvl117_s3NyR [Occ=OnceL]
                                          :: Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            [convert_s3NyH n_s3NyK lvl3_s3NyO] \u []
                                                convert_s3NyH
                                                    Text.Read.Lex.EOF n_s3NyK lvl3_s3NyO; } in
                                      let {
                                        sat_s3Nz0 [Occ=Once]
                                          :: Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            [convert_s3NyH n_s3NyK lvl3_s3NyO] \u []
                                                let {
                                                  sat_s3NyZ [Occ=Once]
                                                    :: Text.Read.Lex.Lexeme
                                                       -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                                  [LclId] =
                                                      [convert_s3NyH
                                                       n_s3NyK
                                                       lvl3_s3NyO] \r [a1_s3NyY]
                                                          convert_s3NyH a1_s3NyY n_s3NyK lvl3_s3NyO;
                                                } in  Text.Read.Lex.expect2 sat_s3NyZ; } in
                                      let {
                                        sat_s3NyW [Occ=OnceL]
                                          :: GHC.Base.String
                                             -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            [lvl117_s3NyR] \r [a3_s3NyS]
                                                case a3_s3NyS of {
                                                  [] -> lvl117_s3NyR;
                                                  : _ [Occ=Dead] _ [Occ=Dead] ->
                                                      Text.ParserCombinators.ReadP.Fail [];
                                                }; } in
                                      let {
                                        sat_s3NyX [Occ=Once]
                                          :: Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            CCCS Text.ParserCombinators.ReadP.Look! [sat_s3NyW];
                                      } in 
                                        Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                            sat_s3NyX sat_s3Nz0; } in
                            let {
                              k_s3Nz1 [Occ=OnceL, Dmd=<L,C(U)>]
                                :: () -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
                                  [lvl2_s3NyN] \r [a3_s3Nz2] lvl2_s3NyN; } in
                            let {
                              lvl3_s3Nz3 [Occ=OnceL]
                                :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                  [k_s3Nz1] \r [a_s3Nz4]
                                      Text.ParserCombinators.ReadP.skipSpaces2 a_s3Nz4 k_s3Nz1; } in
                            let {
                              lvl4_s3Nz5 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Unf=OtherCon []] =
                                  CCCS Text.ParserCombinators.ReadP.Look! [lvl3_s3Nz3]; } in
                            let {
                              w2_s3Nz6
                                :: Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                  [convert_s3NyH n_s3NyK k1_s3NyL lvl4_s3Nz5] \r [a1_s3Nz7]
                                      case a1_s3Nz7 of wild_s3Nz8 {
                                        __DEFAULT -> convert_s3NyH wild_s3Nz8 n_s3NyK k1_s3NyL;
                                        Text.Read.Lex.Symbol ds_s3Nz9 [Occ=Once!] ->
                                            case ds_s3Nz9 of {
                                              [] -> convert_s3NyH wild_s3Nz8 n_s3NyK k1_s3NyL;
                                              : ds1_s3Nzb [Occ=Once!] ds2_s3Nzc [Occ=Once!] ->
                                                  case ds1_s3Nzb of {
                                                    GHC.Types.C# ds3_s3Nze [Occ=Once!] ->
                                                        case ds3_s3Nze of {
                                                          __DEFAULT ->
                                                              convert_s3NyH
                                                                  wild_s3Nz8 n_s3NyK k1_s3NyL;
                                                          '-'# ->
                                                              case ds2_s3Nzc of {
                                                                [] -> lvl4_s3Nz5;
                                                                : _ [Occ=Dead] _ [Occ=Dead] ->
                                                                    convert_s3NyH
                                                                        wild_s3Nz8 n_s3NyK k1_s3NyL;
                                                              };
                                                        };
                                                  };
                                            };
                                      }; } in
                            let {
                              lvl117_s3Nzj [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [w2_s3Nz6] \u [] w2_s3Nz6 Text.Read.Lex.EOF; } in
                            let {
                              sat_s3Nzq [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [w2_s3Nz6] \u [] Text.Read.Lex.expect2 w2_s3Nz6; } in
                            let {
                              sat_s3Nzo [Occ=OnceL]
                                :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [lvl117_s3Nzj] \r [a3_s3Nzk]
                                      case a3_s3Nzk of {
                                        [] -> lvl117_s3Nzj;
                                        : _ [Occ=Dead] _ [Occ=Dead] ->
                                            Text.ParserCombinators.ReadP.Fail [];
                                      }; } in
                            let {
                              sat_s3Nzp [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  CCCS Text.ParserCombinators.ReadP.Look! [sat_s3Nzo];
                            } in 
                              Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                  sat_s3Nzp sat_s3Nzq; } in
                  let {
                    k_s3Nzr [Occ=OnceL, Dmd=<L,C(U)>]
                      :: () -> Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
                        [lvl116_s3NyM] \r [a3_s3Nzs] lvl116_s3NyM; } in
                  let {
                    sat_s3Nzu [Occ=Once]
                      :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId] =
                        [k_s3Nzr] \r [a_s3Nzt]
                            Text.ParserCombinators.ReadP.skipSpaces2 a_s3Nzt k_s3Nzr;
                  } in  Text.ParserCombinators.ReadP.Look [sat_s3Nzu];
        } in  GHC.Read.list3 sat_s3Nzv eta_s3NyI eta1_s3NyJ;

GHC.Read.readNumber1
  :: forall a.
     GHC.Num.Num a =>
     (Text.Read.Lex.Lexeme
      -> Text.ParserCombinators.ReadPrec.ReadPrec a)
     -> Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=4,
 Str=<L,U(A,A,A,C(U),A,A,A)><L,C(C1(C1(U)))><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dNum_s3Nzw convert_s3Nzx eta_s3Nzy eta1_s3Nzz]
        let {
          sat_s3NAl [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec a_a3Kr6
          [LclId] =
              [$dNum_s3Nzw convert_s3Nzx] \r [n_s3NzA k1_s3NzB]
                  let {
                    lvl116_s3NzC [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId] =
                        [$dNum_s3Nzw convert_s3Nzx n_s3NzA k1_s3NzB] \u []
                            let {
                              lvl2_s3NzD [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [$dNum_s3Nzw convert_s3Nzx n_s3NzA k1_s3NzB] \u []
                                      let {
                                        lvl3_s3NzE
                                          :: a_a3Kr6 -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
                                            [$dNum_s3Nzw k1_s3NzB] \r [a1_s3NzF]
                                                let {
                                                  sat_s3NzG [Occ=Once] :: a_a3Kr6
                                                  [LclId] =
                                                      [$dNum_s3Nzw a1_s3NzF] \u []
                                                          GHC.Num.negate $dNum_s3Nzw a1_s3NzF;
                                                } in  k1_s3NzB sat_s3NzG; } in
                                      let {
                                        lvl117_s3NzH [Occ=OnceL]
                                          :: Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            [convert_s3Nzx n_s3NzA lvl3_s3NzE] \u []
                                                convert_s3Nzx
                                                    Text.Read.Lex.EOF n_s3NzA lvl3_s3NzE; } in
                                      let {
                                        sat_s3NzQ [Occ=Once]
                                          :: Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            [convert_s3Nzx n_s3NzA lvl3_s3NzE] \u []
                                                let {
                                                  sat_s3NzP [Occ=Once]
                                                    :: Text.Read.Lex.Lexeme
                                                       -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                                  [LclId] =
                                                      [convert_s3Nzx
                                                       n_s3NzA
                                                       lvl3_s3NzE] \r [a1_s3NzO]
                                                          convert_s3Nzx a1_s3NzO n_s3NzA lvl3_s3NzE;
                                                } in  Text.Read.Lex.expect2 sat_s3NzP; } in
                                      let {
                                        sat_s3NzM [Occ=OnceL]
                                          :: GHC.Base.String
                                             -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            [lvl117_s3NzH] \r [a3_s3NzI]
                                                case a3_s3NzI of {
                                                  [] -> lvl117_s3NzH;
                                                  : _ [Occ=Dead] _ [Occ=Dead] ->
                                                      Text.ParserCombinators.ReadP.Fail [];
                                                }; } in
                                      let {
                                        sat_s3NzN [Occ=Once]
                                          :: Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            CCCS Text.ParserCombinators.ReadP.Look! [sat_s3NzM];
                                      } in 
                                        Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                            sat_s3NzN sat_s3NzQ; } in
                            let {
                              k_s3NzR [Occ=OnceL, Dmd=<L,C(U)>]
                                :: () -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
                                  [lvl2_s3NzD] \r [a3_s3NzS] lvl2_s3NzD; } in
                            let {
                              lvl3_s3NzT [Occ=OnceL]
                                :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                  [k_s3NzR] \r [a1_s3NzU]
                                      Text.ParserCombinators.ReadP.skipSpaces2
                                          a1_s3NzU k_s3NzR; } in
                            let {
                              lvl4_s3NzV [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Unf=OtherCon []] =
                                  CCCS Text.ParserCombinators.ReadP.Look! [lvl3_s3NzT]; } in
                            let {
                              w2_s3NzW
                                :: Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                  [convert_s3Nzx n_s3NzA k1_s3NzB lvl4_s3NzV] \r [a1_s3NzX]
                                      case a1_s3NzX of wild_s3NzY {
                                        __DEFAULT -> convert_s3Nzx wild_s3NzY n_s3NzA k1_s3NzB;
                                        Text.Read.Lex.Symbol ds_s3NzZ [Occ=Once!] ->
                                            case ds_s3NzZ of {
                                              [] -> convert_s3Nzx wild_s3NzY n_s3NzA k1_s3NzB;
                                              : ds1_s3NA1 [Occ=Once!] ds2_s3NA2 [Occ=Once!] ->
                                                  case ds1_s3NA1 of {
                                                    GHC.Types.C# ds3_s3NA4 [Occ=Once!] ->
                                                        case ds3_s3NA4 of {
                                                          __DEFAULT ->
                                                              convert_s3Nzx
                                                                  wild_s3NzY n_s3NzA k1_s3NzB;
                                                          '-'# ->
                                                              case ds2_s3NA2 of {
                                                                [] -> lvl4_s3NzV;
                                                                : _ [Occ=Dead] _ [Occ=Dead] ->
                                                                    convert_s3Nzx
                                                                        wild_s3NzY n_s3NzA k1_s3NzB;
                                                              };
                                                        };
                                                  };
                                            };
                                      }; } in
                            let {
                              lvl117_s3NA9 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [w2_s3NzW] \u [] w2_s3NzW Text.Read.Lex.EOF; } in
                            let {
                              sat_s3NAg [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [w2_s3NzW] \u [] Text.Read.Lex.expect2 w2_s3NzW; } in
                            let {
                              sat_s3NAe [Occ=OnceL]
                                :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [lvl117_s3NA9] \r [a3_s3NAa]
                                      case a3_s3NAa of {
                                        [] -> lvl117_s3NA9;
                                        : _ [Occ=Dead] _ [Occ=Dead] ->
                                            Text.ParserCombinators.ReadP.Fail [];
                                      }; } in
                            let {
                              sat_s3NAf [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  CCCS Text.ParserCombinators.ReadP.Look! [sat_s3NAe];
                            } in 
                              Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                  sat_s3NAf sat_s3NAg; } in
                  let {
                    k_s3NAh [Occ=OnceL, Dmd=<L,C(U)>]
                      :: () -> Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
                        [lvl116_s3NzC] \r [a3_s3NAi] lvl116_s3NzC; } in
                  let {
                    sat_s3NAk [Occ=Once]
                      :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId] =
                        [k_s3NAh] \r [a1_s3NAj]
                            Text.ParserCombinators.ReadP.skipSpaces2 a1_s3NAj k_s3NAh;
                  } in  Text.ParserCombinators.ReadP.Look [sat_s3NAk];
        } in  GHC.Read.list3 sat_s3NAl eta_s3Nzy eta1_s3Nzz;

GHC.Read.readNumber
  :: forall a.
     GHC.Num.Num a =>
     (Text.Read.Lex.Lexeme
      -> Text.ParserCombinators.ReadPrec.ReadPrec a)
     -> Text.ParserCombinators.ReadPrec.ReadPrec a
[GblId,
 Arity=4,
 Str=<L,U(A,A,A,C(U),A,A,A)><L,C(C1(C1(U)))><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.Read.readNumber1 eta_B4 eta_B3 eta_B2 eta_B1;

GHC.Read.$fReadGeneralCategory152 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "UppercaseLetter"#;

GHC.Read.$fReadGeneralCategory151 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory152;

GHC.Read.$fReadGeneralCategory150
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3NAm k_s3NAn] k_s3NAn GHC.Unicode.UppercaseLetter;

GHC.Read.$fReadGeneralCategory149
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory151
                        GHC.Read.$fReadGeneralCategory150];

GHC.Read.$fReadGeneralCategory148 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "LowercaseLetter"#;

GHC.Read.$fReadGeneralCategory147 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory148;

GHC.Read.$fReadGeneralCategory146
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3NAo k_s3NAp] k_s3NAp GHC.Unicode.LowercaseLetter;

GHC.Read.$fReadGeneralCategory145
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory147
                        GHC.Read.$fReadGeneralCategory146];

GHC.Read.$fReadGeneralCategory144 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "TitlecaseLetter"#;

GHC.Read.$fReadGeneralCategory143 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory144;

GHC.Read.$fReadGeneralCategory142
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3NAq k_s3NAr] k_s3NAr GHC.Unicode.TitlecaseLetter;

GHC.Read.$fReadGeneralCategory141
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory143
                        GHC.Read.$fReadGeneralCategory142];

GHC.Read.$fReadGeneralCategory140 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ModifierLetter"#;

GHC.Read.$fReadGeneralCategory139 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory140;

GHC.Read.$fReadGeneralCategory138
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3NAs k_s3NAt] k_s3NAt GHC.Unicode.ModifierLetter;

GHC.Read.$fReadGeneralCategory137
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory139
                        GHC.Read.$fReadGeneralCategory138];

GHC.Read.$fReadGeneralCategory136 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "OtherLetter"#;

GHC.Read.$fReadGeneralCategory135 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory136;

GHC.Read.$fReadGeneralCategory134
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3NAu k_s3NAv] k_s3NAv GHC.Unicode.OtherLetter;

GHC.Read.$fReadGeneralCategory133
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory135
                        GHC.Read.$fReadGeneralCategory134];

GHC.Read.$fReadGeneralCategory132 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "NonSpacingMark"#;

GHC.Read.$fReadGeneralCategory131 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory132;

GHC.Read.$fReadGeneralCategory130
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3NAw k_s3NAx] k_s3NAx GHC.Unicode.NonSpacingMark;

GHC.Read.$fReadGeneralCategory129
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory131
                        GHC.Read.$fReadGeneralCategory130];

GHC.Read.$fReadGeneralCategory128 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SpacingCombiningMark"#;

GHC.Read.$fReadGeneralCategory127 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory128;

GHC.Read.$fReadGeneralCategory126
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3NAy k_s3NAz] k_s3NAz GHC.Unicode.SpacingCombiningMark;

GHC.Read.$fReadGeneralCategory125
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory127
                        GHC.Read.$fReadGeneralCategory126];

GHC.Read.$fReadGeneralCategory124 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "EnclosingMark"#;

GHC.Read.$fReadGeneralCategory123 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory124;

GHC.Read.$fReadGeneralCategory122
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3NAA k_s3NAB] k_s3NAB GHC.Unicode.EnclosingMark;

GHC.Read.$fReadGeneralCategory121
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory123
                        GHC.Read.$fReadGeneralCategory122];

GHC.Read.$fReadGeneralCategory120 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "DecimalNumber"#;

GHC.Read.$fReadGeneralCategory119 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory120;

GHC.Read.$fReadGeneralCategory118
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3NAC k_s3NAD] k_s3NAD GHC.Unicode.DecimalNumber;

GHC.Read.$fReadGeneralCategory117
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory119
                        GHC.Read.$fReadGeneralCategory118];

GHC.Read.$fReadGeneralCategory116 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "LetterNumber"#;

GHC.Read.$fReadGeneralCategory115 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory116;

GHC.Read.$fReadGeneralCategory114
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3NAE k_s3NAF] k_s3NAF GHC.Unicode.LetterNumber;

GHC.Read.$fReadGeneralCategory113
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory115
                        GHC.Read.$fReadGeneralCategory114];

GHC.Read.$fReadGeneralCategory112 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "OtherNumber"#;

GHC.Read.$fReadGeneralCategory111 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory112;

GHC.Read.$fReadGeneralCategory110
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3NAG k_s3NAH] k_s3NAH GHC.Unicode.OtherNumber;

GHC.Read.$fReadGeneralCategory109
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory111
                        GHC.Read.$fReadGeneralCategory110];

GHC.Read.$fReadGeneralCategory108 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ConnectorPunctuation"#;

GHC.Read.$fReadGeneralCategory107 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory108;

GHC.Read.$fReadGeneralCategory106
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3NAI k_s3NAJ] k_s3NAJ GHC.Unicode.ConnectorPunctuation;

GHC.Read.$fReadGeneralCategory105
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory107
                        GHC.Read.$fReadGeneralCategory106];

GHC.Read.$fReadGeneralCategory104 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "DashPunctuation"#;

GHC.Read.$fReadGeneralCategory103 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory104;

GHC.Read.$fReadGeneralCategory102
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3NAK k_s3NAL] k_s3NAL GHC.Unicode.DashPunctuation;

GHC.Read.$fReadGeneralCategory101
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory103
                        GHC.Read.$fReadGeneralCategory102];

GHC.Read.$fReadGeneralCategory100 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "OpenPunctuation"#;

GHC.Read.$fReadGeneralCategory99 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory100;

GHC.Read.$fReadGeneralCategory98
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3NAM k_s3NAN] k_s3NAN GHC.Unicode.OpenPunctuation;

GHC.Read.$fReadGeneralCategory97
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory99
                        GHC.Read.$fReadGeneralCategory98];

GHC.Read.$fReadGeneralCategory96 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ClosePunctuation"#;

GHC.Read.$fReadGeneralCategory95 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory96;

GHC.Read.$fReadGeneralCategory94
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3NAO k_s3NAP] k_s3NAP GHC.Unicode.ClosePunctuation;

GHC.Read.$fReadGeneralCategory93
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory95
                        GHC.Read.$fReadGeneralCategory94];

GHC.Read.$fReadGeneralCategory92 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "InitialQuote"#;

GHC.Read.$fReadGeneralCategory91 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory92;

GHC.Read.$fReadGeneralCategory90
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3NAQ k_s3NAR] k_s3NAR GHC.Unicode.InitialQuote;

GHC.Read.$fReadGeneralCategory89
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory91
                        GHC.Read.$fReadGeneralCategory90];

GHC.Read.$fReadGeneralCategory88 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "FinalQuote"#;

GHC.Read.$fReadGeneralCategory87 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory88;

GHC.Read.$fReadGeneralCategory86
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3NAS k_s3NAT] k_s3NAT GHC.Unicode.FinalQuote;

GHC.Read.$fReadGeneralCategory85
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory87
                        GHC.Read.$fReadGeneralCategory86];

GHC.Read.$fReadGeneralCategory84 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "OtherPunctuation"#;

GHC.Read.$fReadGeneralCategory83 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory84;

GHC.Read.$fReadGeneralCategory82
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3NAU k_s3NAV] k_s3NAV GHC.Unicode.OtherPunctuation;

GHC.Read.$fReadGeneralCategory81
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory83
                        GHC.Read.$fReadGeneralCategory82];

GHC.Read.$fReadGeneralCategory80 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "MathSymbol"#;

GHC.Read.$fReadGeneralCategory79 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory80;

GHC.Read.$fReadGeneralCategory78
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3NAW k_s3NAX] k_s3NAX GHC.Unicode.MathSymbol;

GHC.Read.$fReadGeneralCategory77
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory79
                        GHC.Read.$fReadGeneralCategory78];

GHC.Read.$fReadGeneralCategory76 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "CurrencySymbol"#;

GHC.Read.$fReadGeneralCategory75 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory76;

GHC.Read.$fReadGeneralCategory74
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3NAY k_s3NAZ] k_s3NAZ GHC.Unicode.CurrencySymbol;

GHC.Read.$fReadGeneralCategory73
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory75
                        GHC.Read.$fReadGeneralCategory74];

GHC.Read.$fReadGeneralCategory72 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ModifierSymbol"#;

GHC.Read.$fReadGeneralCategory71 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory72;

GHC.Read.$fReadGeneralCategory70
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3NB0 k_s3NB1] k_s3NB1 GHC.Unicode.ModifierSymbol;

GHC.Read.$fReadGeneralCategory69
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory71
                        GHC.Read.$fReadGeneralCategory70];

GHC.Read.$fReadGeneralCategory68 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "OtherSymbol"#;

GHC.Read.$fReadGeneralCategory67 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory68;

GHC.Read.$fReadGeneralCategory66
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3NB2 k_s3NB3] k_s3NB3 GHC.Unicode.OtherSymbol;

GHC.Read.$fReadGeneralCategory65
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory67
                        GHC.Read.$fReadGeneralCategory66];

GHC.Read.$fReadGeneralCategory64 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Space"#;

GHC.Read.$fReadGeneralCategory63 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory64;

GHC.Read.$fReadGeneralCategory62
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3NB4 k_s3NB5] k_s3NB5 GHC.Unicode.Space;

GHC.Read.$fReadGeneralCategory61
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory63
                        GHC.Read.$fReadGeneralCategory62];

GHC.Read.$fReadGeneralCategory60 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "LineSeparator"#;

GHC.Read.$fReadGeneralCategory59 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory60;

GHC.Read.$fReadGeneralCategory58
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3NB6 k_s3NB7] k_s3NB7 GHC.Unicode.LineSeparator;

GHC.Read.$fReadGeneralCategory57
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory59
                        GHC.Read.$fReadGeneralCategory58];

GHC.Read.$fReadGeneralCategory56 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ParagraphSeparator"#;

GHC.Read.$fReadGeneralCategory55 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory56;

GHC.Read.$fReadGeneralCategory54
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3NB8 k_s3NB9] k_s3NB9 GHC.Unicode.ParagraphSeparator;

GHC.Read.$fReadGeneralCategory53
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory55
                        GHC.Read.$fReadGeneralCategory54];

GHC.Read.$fReadGeneralCategory52 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Control"#;

GHC.Read.$fReadGeneralCategory51 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory52;

GHC.Read.$fReadGeneralCategory50
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3NBa k_s3NBb] k_s3NBb GHC.Unicode.Control;

GHC.Read.$fReadGeneralCategory49
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory51
                        GHC.Read.$fReadGeneralCategory50];

GHC.Read.$fReadGeneralCategory48 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Format"#;

GHC.Read.$fReadGeneralCategory47 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory48;

GHC.Read.$fReadGeneralCategory46
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3NBc k_s3NBd] k_s3NBd GHC.Unicode.Format;

GHC.Read.$fReadGeneralCategory45
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory47
                        GHC.Read.$fReadGeneralCategory46];

GHC.Read.$fReadGeneralCategory44 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Surrogate"#;

GHC.Read.$fReadGeneralCategory43 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory44;

GHC.Read.$fReadGeneralCategory42
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3NBe k_s3NBf] k_s3NBf GHC.Unicode.Surrogate;

GHC.Read.$fReadGeneralCategory41
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory43
                        GHC.Read.$fReadGeneralCategory42];

GHC.Read.$fReadGeneralCategory40 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "PrivateUse"#;

GHC.Read.$fReadGeneralCategory39 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory40;

GHC.Read.$fReadGeneralCategory38
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3NBg k_s3NBh] k_s3NBh GHC.Unicode.PrivateUse;

GHC.Read.$fReadGeneralCategory37
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory39
                        GHC.Read.$fReadGeneralCategory38];

GHC.Read.$fReadGeneralCategory35 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "NotAssigned"#;

GHC.Read.$fReadGeneralCategory34 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory35;

GHC.Read.$fReadGeneralCategory33
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3NBi k_s3NBj] k_s3NBj GHC.Unicode.NotAssigned;

GHC.Read.$fReadGeneralCategory32
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory34
                        GHC.Read.$fReadGeneralCategory33];

GHC.Read.$fReadGeneralCategory31
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory32
            Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4
            eta_B1;

GHC.Read.$fReadGeneralCategory30
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory37
            GHC.Read.$fReadGeneralCategory31
            eta_B1;

GHC.Read.$fReadGeneralCategory29
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory41
            GHC.Read.$fReadGeneralCategory30
            eta_B1;

GHC.Read.$fReadGeneralCategory28
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory45
            GHC.Read.$fReadGeneralCategory29
            eta_B1;

GHC.Read.$fReadGeneralCategory27
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory49
            GHC.Read.$fReadGeneralCategory28
            eta_B1;

GHC.Read.$fReadGeneralCategory26
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory53
            GHC.Read.$fReadGeneralCategory27
            eta_B1;

GHC.Read.$fReadGeneralCategory25
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory57
            GHC.Read.$fReadGeneralCategory26
            eta_B1;

GHC.Read.$fReadGeneralCategory24
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory61
            GHC.Read.$fReadGeneralCategory25
            eta_B1;

GHC.Read.$fReadGeneralCategory23
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory65
            GHC.Read.$fReadGeneralCategory24
            eta_B1;

GHC.Read.$fReadGeneralCategory22
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory69
            GHC.Read.$fReadGeneralCategory23
            eta_B1;

GHC.Read.$fReadGeneralCategory21
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory73
            GHC.Read.$fReadGeneralCategory22
            eta_B1;

GHC.Read.$fReadGeneralCategory20
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory77
            GHC.Read.$fReadGeneralCategory21
            eta_B1;

GHC.Read.$fReadGeneralCategory19
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory81
            GHC.Read.$fReadGeneralCategory20
            eta_B1;

GHC.Read.$fReadGeneralCategory18
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory85
            GHC.Read.$fReadGeneralCategory19
            eta_B1;

GHC.Read.$fReadGeneralCategory17
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory89
            GHC.Read.$fReadGeneralCategory18
            eta_B1;

GHC.Read.$fReadGeneralCategory16
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory93
            GHC.Read.$fReadGeneralCategory17
            eta_B1;

GHC.Read.$fReadGeneralCategory15
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory97
            GHC.Read.$fReadGeneralCategory16
            eta_B1;

GHC.Read.$fReadGeneralCategory14
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory101
            GHC.Read.$fReadGeneralCategory15
            eta_B1;

GHC.Read.$fReadGeneralCategory13
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory105
            GHC.Read.$fReadGeneralCategory14
            eta_B1;

GHC.Read.$fReadGeneralCategory12
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory109
            GHC.Read.$fReadGeneralCategory13
            eta_B1;

GHC.Read.$fReadGeneralCategory11
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory113
            GHC.Read.$fReadGeneralCategory12
            eta_B1;

GHC.Read.$fReadGeneralCategory10
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory117
            GHC.Read.$fReadGeneralCategory11
            eta_B1;

GHC.Read.$fReadGeneralCategory9
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory121
            GHC.Read.$fReadGeneralCategory10
            eta_B1;

GHC.Read.$fReadGeneralCategory8
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory125
            GHC.Read.$fReadGeneralCategory9
            eta_B1;

GHC.Read.$fReadGeneralCategory7
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory129
            GHC.Read.$fReadGeneralCategory8
            eta_B1;

GHC.Read.$fReadGeneralCategory6
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory133
            GHC.Read.$fReadGeneralCategory7
            eta_B1;

GHC.Read.$fReadGeneralCategory5
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory137
            GHC.Read.$fReadGeneralCategory6
            eta_B1;

GHC.Read.$fReadGeneralCategory4
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory141
            GHC.Read.$fReadGeneralCategory5
            eta_B1;

GHC.Read.$fReadGeneralCategory3
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory145
            GHC.Read.$fReadGeneralCategory4
            eta_B1;

GHC.Read.$fReadGeneralCategory2
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory149
            GHC.Read.$fReadGeneralCategory3
            eta_B1;

GHC.Read.$fReadGeneralCategory1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Read.list3 GHC.Read.$fReadGeneralCategory2 eta_B2 eta_B1;

GHC.Read.$fReadGeneralCategory_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.Unicode.GeneralCategory
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s3NBk]
        let {
          sat_s3NBl [Occ=Once]
            :: Text.ParserCombinators.ReadP.P GHC.Unicode.GeneralCategory
          [LclId] =
              [n_s3NBk] \u []
                  GHC.Read.list3
                      GHC.Read.$fReadGeneralCategory2
                      n_s3NBk
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NBl;

GHC.Read.$fReadGeneralCategory_$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec
       [GHC.Unicode.GeneralCategory]
[GblId] =
    [] \u [] GHC.Read.list GHC.Read.$fReadGeneralCategory1;

GHC.Read.$fReadGeneralCategory153
  :: Text.ParserCombinators.ReadP.P [GHC.Unicode.GeneralCategory]
[GblId] =
    [] \u []
        GHC.Read.$fReadGeneralCategory_$creadListPrec
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fReadGeneralCategory_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.Unicode.GeneralCategory]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run
            GHC.Read.$fReadGeneralCategory153 eta_B1;

GHC.Read.$fReadGeneralCategory [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.Unicode.GeneralCategory
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fReadGeneralCategory_$creadsPrec
                                    GHC.Read.$fReadGeneralCategory_$creadList
                                    GHC.Read.$fReadGeneralCategory1
                                    GHC.Read.$fReadGeneralCategory_$creadListPrec];

GHC.Read.$fRead()4
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (() -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3NBm k_s3NBn] k_s3NBn GHC.Tuple.();

GHC.Read.$fRead()3
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (() -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m1,
 Unf=OtherCon []] =
    [] \r [w_s3NBo w1_s3NBp]
        case GHC.Read.$wparen' GHC.Read.$fRead()4 w_s3NBo w1_s3NBp of {
          Unit# ww1_s3NBr [Occ=Once] ->
              Text.ParserCombinators.ReadP.Get [ww1_s3NBr];
        };

GHC.Read.$fRead()2
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (() -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m2,
 Unf=OtherCon []] =
    [] \r [eta_s3NBs eta1_s3NBt]
        case
            GHC.Read.$wskipSpacesThenP GHC.Read.$fRead()3 eta_s3NBs eta1_s3NBt
        of
        { Unit# ww1_s3NBv [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3NBv];
        };

GHC.Read.$fRead()1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (() -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Read.list3 GHC.Read.$fRead()2 eta_B2 eta_B1;

GHC.Read.$fRead()_$creadsPrec
  :: GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS ()
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s3NBw]
        let {
          sat_s3NBx [Occ=Once] :: Text.ParserCombinators.ReadP.P ()
          [LclId] =
              [n_s3NBw] \u []
                  GHC.Read.list3
                      GHC.Read.$fRead()2
                      n_s3NBw
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NBx;

GHC.Read.$fRead()_$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec [()]
[GblId] =
    [] \u [] GHC.Read.list GHC.Read.$fRead()1;

GHC.Read.$fRead()6 :: Text.ParserCombinators.ReadP.P [()]
[GblId] =
    [] \u []
        GHC.Read.$fRead()_$creadListPrec
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fRead()_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [()]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.$fRead()6 eta_B1;

GHC.Read.$fRead() [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read ()
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fRead()_$creadsPrec
                                    GHC.Read.$fRead()_$creadList
                                    GHC.Read.$fRead()1
                                    GHC.Read.$fRead()_$creadListPrec];

GHC.Read.$fReadRatio5 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [8#];

GHC.Read.$fReadRatio4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "%"#;

GHC.Read.$fReadRatio3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Read.$fReadRatio4;

GHC.Read.$fReadRatio2 :: Text.Read.Lex.Lexeme
[GblId, Str=m5, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Symbol! [GHC.Read.$fReadRatio3];

GHC.Read.$fReadRatio1
  :: forall a.
     (GHC.Real.Integral a, GHC.Read.Read a) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Real.Ratio a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=4,
 Str=<L,U(U(U(A,A,C(C1(U)),A,C(U),C(U),C(U)),U(U(C(C1(U)),A),A,A,A,A,A,A,A),A),A,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,1*U(A,A,1*C1(C(U)),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dIntegral_s3NBy $dRead_s3NBz eta_s3NBA eta1_s3NBB]
        let {
          ds1_s3NBC [Dmd=<L,C(U)>]
            :: Text.ParserCombinators.ReadP.ReadP a_a3KOR
          [LclId] =
              [$dRead_s3NBz] \u []
                  GHC.Read.readPrec $dRead_s3NBz GHC.Read.$fReadRatio5; } in
        let {
          sat_s3NBR [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (GHC.Real.Ratio a_a3KOR)
          [LclId] =
              [$dIntegral_s3NBy ds1_s3NBC] \r [c_s3NBD eta2_s3NBE]
                  case c_s3NBD of {
                    GHC.Types.I# x_s3NBG [Occ=Once] ->
                        case <=# [x_s3NBG 7#] of {
                          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                          1# ->
                              let {
                                sat_s3NBQ [Occ=Once]
                                  :: a_a3KOR -> Text.ParserCombinators.ReadP.P b1_a3ngn
                                [LclId] =
                                    [$dIntegral_s3NBy ds1_s3NBC eta2_s3NBE] \r [a1_s3NBI]
                                        let {
                                          sat_s3NBN [Occ=Once]
                                            :: () -> Text.ParserCombinators.ReadP.P b1_a3ngn
                                          [LclId] =
                                              [$dIntegral_s3NBy
                                               ds1_s3NBC
                                               eta2_s3NBE
                                               a1_s3NBI] \r [a2_s3NBJ]
                                                  let {
                                                    sat_s3NBM [Occ=Once]
                                                      :: a_a3KOR
                                                         -> Text.ParserCombinators.ReadP.P b1_a3ngn
                                                    [LclId] =
                                                        [$dIntegral_s3NBy
                                                         eta2_s3NBE
                                                         a1_s3NBI] \r [a3_s3NBK]
                                                            let {
                                                              sat_s3NBL [Occ=Once]
                                                                :: GHC.Real.Ratio a_a3KOR
                                                              [LclId] =
                                                                  [$dIntegral_s3NBy
                                                                   a1_s3NBI
                                                                   a3_s3NBK] \u []
                                                                      GHC.Real.%
                                                                          $dIntegral_s3NBy
                                                                          a1_s3NBI
                                                                          a3_s3NBK;
                                                            } in  eta2_s3NBE sat_s3NBL;
                                                  } in  ds1_s3NBC sat_s3NBM;
                                        } in 
                                          case
                                              Text.Read.Lex.$wexpect GHC.Read.$fReadRatio2 sat_s3NBN
                                          of
                                          { Unit# ww1_s3NBP [Occ=Once] ->
                                                Text.ParserCombinators.ReadP.Look [ww1_s3NBP];
                                          };
                              } in  ds1_s3NBC sat_s3NBQ;
                        };
                  };
        } in  GHC.Read.list3 sat_s3NBR eta_s3NBA eta1_s3NBB;

GHC.Read.$fReadRatio_$creadsPrec
  :: forall a.
     (GHC.Real.Integral a, GHC.Read.Read a) =>
     GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS (GHC.Real.Ratio a)
[GblId,
 Arity=3,
 Str=<L,U(U(U(A,A,C(C1(U)),A,C(U),C(U),C(U)),U(U(C(C1(U)),A),A,A,A,A,A,A,A),A),A,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,1*U(A,A,1*C1(C(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dIntegral_s3NBS $dRead_s3NBT n_s3NBU]
        let {
          sat_s3NBV [Occ=Once]
            :: Text.ParserCombinators.ReadP.P (GHC.Real.Ratio a_X3L0L)
          [LclId] =
              [$dIntegral_s3NBS $dRead_s3NBT n_s3NBU] \u []
                  GHC.Read.$fReadRatio1
                      $dIntegral_s3NBS
                      $dRead_s3NBT
                      n_s3NBU
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NBV;

GHC.Read.$fReadRatio_$creadListPrec
  :: forall a.
     (GHC.Real.Integral a, GHC.Read.Read a) =>
     Text.ParserCombinators.ReadPrec.ReadPrec [GHC.Real.Ratio a]
[GblId,
 Arity=2,
 Str=<L,U(U(U(A,A,C(C1(U)),A,C(U),C(U),C(U)),U(U(C(C1(U)),A),A,A,A,A,A,A,A),A),A,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U(A,A,C(C(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dIntegral_s3NBW $dRead_s3NBX]
        let {
          sat_s3NBY [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (GHC.Real.Ratio a_X3L0M)
          [LclId] =
              [$dIntegral_s3NBW $dRead_s3NBX] \r [eta_B2 eta_B1]
                  GHC.Read.$fReadRatio1 $dIntegral_s3NBW $dRead_s3NBX eta_B2 eta_B1;
        } in  GHC.Read.list sat_s3NBY;

GHC.Read.$fReadRatio_$creadList
  :: forall a.
     (GHC.Real.Integral a, GHC.Read.Read a) =>
     Text.ParserCombinators.ReadP.ReadS [GHC.Real.Ratio a]
[GblId,
 Arity=2,
 Str=<L,U(U(U(A,A,C(C1(U)),A,C(U),C(U),C(U)),U(U(C(C1(U)),A),A,A,A,A,A,A,A),A),A,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U(A,A,C(C(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dIntegral_s3NBZ $dRead_s3NC0]
        let {
          sat_s3NC2 [Occ=Once]
            :: Text.ParserCombinators.ReadP.P [GHC.Real.Ratio a_X3L0N]
          [LclId] =
              [$dIntegral_s3NBZ $dRead_s3NC0] \u []
                  let {
                    sat_s3NC1 [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec
                           (GHC.Real.Ratio a_X3L0N)
                    [LclId] =
                        [$dIntegral_s3NBZ $dRead_s3NC0] \r [eta_B2 eta_B1]
                            GHC.Read.$fReadRatio1 $dIntegral_s3NBZ $dRead_s3NC0 eta_B2 eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s3NC1
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NC2;

GHC.Read.$fReadRatio [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a.
     (GHC.Real.Integral a, GHC.Read.Read a) =>
     GHC.Read.Read (GHC.Real.Ratio a)
[GblId[DFunId],
 Arity=2,
 Str=<L,U(U(U(A,A,C(C1(U)),A,C(U),C(U),C(U)),U(U(C(C1(U)),A),A,A,A,A,A,A,A),A),A,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U(A,A,C(C(U)),A)>m] =
    [] \r [$dIntegral_s3NC3 $dRead_s3NC4]
        let {
          sat_s3NC8 [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 [GHC.Real.Ratio a_X3L0O]
          [LclId] =
              [$dIntegral_s3NC3 $dRead_s3NC4] \u []
                  GHC.Read.$fReadRatio_$creadListPrec
                      $dIntegral_s3NC3 $dRead_s3NC4; } in
        let {
          sat_s3NC7 [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (GHC.Real.Ratio a_X3L0O)
          [LclId] =
              [$dIntegral_s3NC3 $dRead_s3NC4] \r [eta_B2 eta_B1]
                  GHC.Read.$fReadRatio1
                      $dIntegral_s3NC3 $dRead_s3NC4 eta_B2 eta_B1; } in
        let {
          sat_s3NC6 [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS [GHC.Real.Ratio a_X3L0O]
          [LclId] =
              [$dIntegral_s3NC3 $dRead_s3NC4] \u []
                  GHC.Read.$fReadRatio_$creadList $dIntegral_s3NC3 $dRead_s3NC4; } in
        let {
          sat_s3NC5 [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS (GHC.Real.Ratio a_X3L0O)
          [LclId] =
              [$dIntegral_s3NC3 $dRead_s3NC4] \r [eta_B1]
                  GHC.Read.$fReadRatio_$creadsPrec
                      $dIntegral_s3NC3 $dRead_s3NC4 eta_B1;
        } in  GHC.Read.C:Read [sat_s3NC5 sat_s3NC6 sat_s3NC7 sat_s3NC8];

GHC.Read.$fReadMaybe5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Nothing"#;

GHC.Read.$fReadMaybe4 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Read.$fReadMaybe5;

GHC.Read.$fReadMaybe_lexeme1 :: Text.Read.Lex.Lexeme
[GblId, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Ident! [GHC.Read.$fReadMaybe4];

GHC.Read.$fReadMaybe3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Just"#;

GHC.Read.$fReadMaybe2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Read.$fReadMaybe3;

GHC.Read.$fReadMaybe_lexeme :: Text.Read.Lex.Lexeme
[GblId, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Ident! [GHC.Read.$fReadMaybe2];

GHC.Read.$fReadArray2 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [11#];

GHC.Read.$fReadMaybe1
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Base.Maybe a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=3,
 Str=<L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3NC9 eta_s3NCa eta1_s3NCb]
        let {
          sat_s3NCu [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (GHC.Base.Maybe a_a3KVO)
          [LclId] =
              [$dRead_s3NC9] \r [n_s3NCc eta2_s3NCd]
                  let {
                    sat_s3NCf [Occ=Once]
                      :: () -> Text.ParserCombinators.ReadP.P b1_X3nsy
                    [LclId] =
                        [eta2_s3NCd] \r [a1_s3NCe] eta2_s3NCd GHC.Base.Nothing;
                  } in 
                    case
                        Text.Read.Lex.$wexpect GHC.Read.$fReadMaybe_lexeme1 sat_s3NCf
                    of
                    { Unit# ww1_s3NCh [Occ=Once] ->
                          let {
                            sat_s3NCt [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_X3nsy
                            [LclId] =
                                [$dRead_s3NC9 n_s3NCc eta2_s3NCd] \u []
                                    case n_s3NCc of {
                                      GHC.Types.I# x_s3NCk [Occ=Once] ->
                                          case <=# [x_s3NCk 10#] of {
                                            __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                                            1# ->
                                                let {
                                                  sat_s3NCq [Occ=Once]
                                                    :: () -> Text.ParserCombinators.ReadP.P b1_X3nsy
                                                  [LclId] =
                                                      [$dRead_s3NC9 eta2_s3NCd] \r [a1_s3NCm]
                                                          let {
                                                            sat_s3NCp [Occ=Once]
                                                              :: a_a3KVO
                                                                 -> Text.ParserCombinators.ReadP.P
                                                                      b1_X3nsy
                                                            [LclId] =
                                                                [eta2_s3NCd] \r [a2_s3NCn]
                                                                    let {
                                                                      sat_s3NCo [Occ=Once]
                                                                        :: GHC.Base.Maybe a_a3KVO
                                                                      [LclId] =
                                                                          CCCS GHC.Base.Just! [a2_s3NCn];
                                                                    } in  eta2_s3NCd sat_s3NCo;
                                                          } in 
                                                            GHC.Read.readPrec
                                                                $dRead_s3NC9
                                                                GHC.Read.$fReadArray2
                                                                sat_s3NCp;
                                                } in 
                                                  case
                                                      Text.Read.Lex.$wexpect
                                                          GHC.Read.$fReadMaybe_lexeme sat_s3NCq
                                                  of
                                                  { Unit# ww3_s3NCs [Occ=Once] ->
                                                        Text.ParserCombinators.ReadP.Look [ww3_s3NCs];
                                                  };
                                          };
                                    }; } in
                          let {
                            sat_s3NCi [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_X3nsy
                            [LclId] =
                                CCCS Text.ParserCombinators.ReadP.Look! [ww1_s3NCh];
                          } in 
                            Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                sat_s3NCi sat_s3NCt;
                    };
        } in  GHC.Read.list3 sat_s3NCu eta_s3NCa eta1_s3NCb;

GHC.Read.$fReadMaybe_$creadsPrec
  :: forall a.
     GHC.Read.Read a =>
     GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS (GHC.Base.Maybe a)
[GblId, Arity=2, Str=<L,U(A,A,C(C1(U)),A)><L,U>, Unf=OtherCon []] =
    [] \r [$dRead_s3NCv n_s3NCw]
        let {
          sat_s3NCx [Occ=Once]
            :: Text.ParserCombinators.ReadP.P (GHC.Base.Maybe a_X3L7Q)
          [LclId] =
              [$dRead_s3NCv n_s3NCw] \u []
                  GHC.Read.$fReadMaybe1
                      $dRead_s3NCv
                      n_s3NCw
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NCx;

GHC.Read.$fReadMaybe_$creadListPrec
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadPrec.ReadPrec [GHC.Base.Maybe a]
[GblId, Arity=1, Str=<L,U(A,A,C(C1(U)),A)>, Unf=OtherCon []] =
    [] \r [$dRead_s3NCy]
        let {
          sat_s3NCz [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (GHC.Base.Maybe a_X3L7R)
          [LclId] =
              [$dRead_s3NCy] \r [eta_B2 eta_B1]
                  GHC.Read.$fReadMaybe1 $dRead_s3NCy eta_B2 eta_B1;
        } in  GHC.Read.list sat_s3NCz;

GHC.Read.$fReadMaybe_$creadList
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadP.ReadS [GHC.Base.Maybe a]
[GblId, Arity=1, Str=<L,U(A,A,C(C1(U)),A)>, Unf=OtherCon []] =
    [] \r [$dRead_s3NCA]
        let {
          sat_s3NCC [Occ=Once]
            :: Text.ParserCombinators.ReadP.P [GHC.Base.Maybe a_X3L7S]
          [LclId] =
              [$dRead_s3NCA] \u []
                  let {
                    sat_s3NCB [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec
                           (GHC.Base.Maybe a_X3L7S)
                    [LclId] =
                        [$dRead_s3NCA] \r [eta_B2 eta_B1]
                            GHC.Read.$fReadMaybe1 $dRead_s3NCA eta_B2 eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s3NCB
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NCC;

GHC.Read.$fReadMaybe [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Read.Read a => GHC.Read.Read (GHC.Base.Maybe a)
[GblId[DFunId], Arity=1, Str=<L,U(A,A,C(C1(U)),A)>m] =
    [] \r [$dRead_s3NCD]
        let {
          sat_s3NCH [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 [GHC.Base.Maybe a_X3L7T]
          [LclId] =
              [$dRead_s3NCD] \u []
                  GHC.Read.$fReadMaybe_$creadListPrec $dRead_s3NCD; } in
        let {
          sat_s3NCG [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (GHC.Base.Maybe a_X3L7T)
          [LclId] =
              [$dRead_s3NCD] \r [eta_B2 eta_B1]
                  GHC.Read.$fReadMaybe1 $dRead_s3NCD eta_B2 eta_B1; } in
        let {
          sat_s3NCF [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS [GHC.Base.Maybe a_X3L7T]
          [LclId] =
              [$dRead_s3NCD] \u []
                  GHC.Read.$fReadMaybe_$creadList $dRead_s3NCD; } in
        let {
          sat_s3NCE [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS (GHC.Base.Maybe a_X3L7T)
          [LclId] =
              [$dRead_s3NCD] \r [eta_B1]
                  GHC.Read.$fReadMaybe_$creadsPrec $dRead_s3NCD eta_B1;
        } in  GHC.Read.C:Read [sat_s3NCE sat_s3NCF sat_s3NCG sat_s3NCH];

GHC.Read.$fReadOrdering4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "LT"#;

GHC.Read.$fReadOrdering3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Read.$fReadOrdering4;

GHC.Read.$fReadOrdering6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GT"#;

GHC.Read.$fReadOrdering5 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Read.$fReadOrdering6;

GHC.Read.$fReadOrdering8 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "EQ"#;

GHC.Read.$fReadOrdering7 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Read.$fReadOrdering8;

GHC.Read.$w$creadPrec2 [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (GHC.Types.Ordering -> Text.ParserCombinators.ReadP.P b1)
     -> (# GHC.Base.String -> Text.ParserCombinators.ReadP.P b1 #)
[GblId, Arity=1, Str=<L,C(U)>, Unf=OtherCon []] =
    [] \r [w_s3NCI]
        let {
          lvl116_s3NCJ [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3Muw
          [LclId] =
              [w_s3NCI] \u []
                  let {
                    lvl2_s3NCK [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3Muw
                    [LclId] =
                        [w_s3NCI] \u [] w_s3NCI GHC.Types.EQ; } in
                  let {
                    lvl3_s3NCL [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3Muw
                    [LclId] =
                        [w_s3NCI] \u [] w_s3NCI GHC.Types.GT; } in
                  let {
                    lvl4_s3NCM [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3Muw
                    [LclId] =
                        [w_s3NCI] \u [] w_s3NCI GHC.Types.LT; } in
                  let {
                    w2_s3NCN
                      :: Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.P b1_s3Muw
                    [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                        [lvl2_s3NCK lvl3_s3NCL lvl4_s3NCM] \r [a1_s3NCO]
                            case a1_s3NCO of {
                              __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                              Text.Read.Lex.Ident s_s3NCQ ->
                                  case GHC.Base.eqString s_s3NCQ GHC.Read.$fReadOrdering7 of {
                                    GHC.Types.False ->
                                        case GHC.Base.eqString s_s3NCQ GHC.Read.$fReadOrdering5 of {
                                          GHC.Types.False ->
                                              case
                                                  GHC.Base.eqString s_s3NCQ GHC.Read.$fReadOrdering3
                                              of
                                              { GHC.Types.False ->
                                                    Text.ParserCombinators.ReadP.Fail [];
                                                GHC.Types.True -> lvl4_s3NCM;
                                              };
                                          GHC.Types.True -> lvl3_s3NCL;
                                        };
                                    GHC.Types.True -> lvl2_s3NCK;
                                  };
                            }; } in
                  let {
                    lvl117_s3NCU [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3Muw
                    [LclId] =
                        [w2_s3NCN] \u [] w2_s3NCN Text.Read.Lex.EOF; } in
                  let {
                    sat_s3ND1 [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_s3Muw
                    [LclId] =
                        [w2_s3NCN] \u [] Text.Read.Lex.expect2 w2_s3NCN; } in
                  let {
                    sat_s3NCZ [Occ=OnceL]
                      :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3Muw
                    [LclId] =
                        [lvl117_s3NCU] \r [a3_s3NCV]
                            case a3_s3NCV of {
                              [] -> lvl117_s3NCU;
                              : _ [Occ=Dead] _ [Occ=Dead] ->
                                  Text.ParserCombinators.ReadP.Fail [];
                            }; } in
                  let {
                    sat_s3ND0 [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_s3Muw
                    [LclId] =
                        CCCS Text.ParserCombinators.ReadP.Look! [sat_s3NCZ];
                  } in 
                    Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                        sat_s3ND0 sat_s3ND1; } in
        let {
          k_s3ND2 [Occ=OnceL, Dmd=<L,C(U)>]
            :: () -> Text.ParserCombinators.ReadP.P b1_s3Muw
          [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
              [lvl116_s3NCJ] \r [a3_s3ND3] lvl116_s3NCJ; } in
        let {
          sat_s3ND5 [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3Muw
          [LclId] =
              [k_s3ND2] \r [a_s3ND4]
                  Text.ParserCombinators.ReadP.skipSpaces2 a_s3ND4 k_s3ND2;
        } in  Unit# [sat_s3ND5];

GHC.Read.$fReadOrdering2 [InlPrag=NOUSERINLINE[0]]
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        (GHC.Types.Ordering -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=2, Str=<L,A><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [w_s3ND6 w1_s3ND7]
        case GHC.Read.$w$creadPrec2 w1_s3ND7 of {
          Unit# ww1_s3ND9 [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3ND9];
        };

GHC.Read.$fReadOrdering1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Types.Ordering -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Read.list3 GHC.Read.$fReadOrdering2 eta_B2 eta_B1;

GHC.Read.$fReadOrdering_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.Types.Ordering
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s3NDa]
        let {
          sat_s3NDb [Occ=Once]
            :: Text.ParserCombinators.ReadP.P GHC.Types.Ordering
          [LclId] =
              [n_s3NDa] \u []
                  GHC.Read.list3
                      GHC.Read.$fReadOrdering2
                      n_s3NDa
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NDb;

GHC.Read.$fReadOrdering_$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec [GHC.Types.Ordering]
[GblId] =
    [] \u [] GHC.Read.list GHC.Read.$fReadOrdering1;

GHC.Read.$fReadOrdering9
  :: Text.ParserCombinators.ReadP.P [GHC.Types.Ordering]
[GblId] =
    [] \u []
        GHC.Read.$fReadOrdering_$creadListPrec
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fReadOrdering_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.Types.Ordering]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.$fReadOrdering9 eta_B1;

GHC.Read.$fReadOrdering [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.Types.Ordering
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fReadOrdering_$creadsPrec
                                    GHC.Read.$fReadOrdering_$creadList
                                    GHC.Read.$fReadOrdering1
                                    GHC.Read.$fReadOrdering_$creadListPrec];

GHC.Read.$fReadBool4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "True"#;

GHC.Read.$fReadBool3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Read.$fReadBool4;

GHC.Read.$fReadBool6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "False"#;

GHC.Read.$fReadBool5 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Read.$fReadBool6;

GHC.Read.$w$creadPrec [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (GHC.Types.Bool -> Text.ParserCombinators.ReadP.P b1)
     -> (# GHC.Base.String -> Text.ParserCombinators.ReadP.P b1 #)
[GblId, Arity=1, Str=<L,C(U)>, Unf=OtherCon []] =
    [] \r [w_s3NDc]
        let {
          lvl116_s3NDd [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3MuE
          [LclId] =
              [w_s3NDc] \u []
                  let {
                    lvl2_s3NDe [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3MuE
                    [LclId] =
                        [w_s3NDc] \u [] w_s3NDc GHC.Types.False; } in
                  let {
                    lvl3_s3NDf [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3MuE
                    [LclId] =
                        [w_s3NDc] \u [] w_s3NDc GHC.Types.True; } in
                  let {
                    sat_s3NDq [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_s3MuE
                    [LclId] =
                        [lvl2_s3NDe lvl3_s3NDf] \u []
                            let {
                              sat_s3NDp [Occ=Once]
                                :: Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.P b1_s3MuE
                              [LclId] =
                                  [lvl2_s3NDe lvl3_s3NDf] \r [a1_s3NDk]
                                      case a1_s3NDk of {
                                        __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                                        Text.Read.Lex.Ident s_s3NDm ->
                                            case GHC.Base.eqString s_s3NDm GHC.Read.$fReadBool5 of {
                                              GHC.Types.False ->
                                                  case
                                                      GHC.Base.eqString s_s3NDm GHC.Read.$fReadBool3
                                                  of
                                                  { GHC.Types.False ->
                                                        Text.ParserCombinators.ReadP.Fail [];
                                                    GHC.Types.True -> lvl3_s3NDf;
                                                  };
                                              GHC.Types.True -> lvl2_s3NDe;
                                            };
                                      };
                            } in  Text.Read.Lex.expect2 sat_s3NDp; } in
                  let {
                    sat_s3NDi [Occ=OnceL]
                      :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3MuE
                    [LclId] =
                        [] \r [a3_s3NDg]
                            case a3_s3NDg of {
                              __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                            }; } in
                  let {
                    sat_s3NDj [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_s3MuE
                    [LclId] =
                        CCCS Text.ParserCombinators.ReadP.Look! [sat_s3NDi];
                  } in 
                    Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                        sat_s3NDj sat_s3NDq; } in
        let {
          k_s3NDr [Occ=OnceL, Dmd=<L,C(U)>]
            :: () -> Text.ParserCombinators.ReadP.P b1_s3MuE
          [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
              [lvl116_s3NDd] \r [a3_s3NDs] lvl116_s3NDd; } in
        let {
          sat_s3NDu [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3MuE
          [LclId] =
              [k_s3NDr] \r [a_s3NDt]
                  Text.ParserCombinators.ReadP.skipSpaces2 a_s3NDt k_s3NDr;
        } in  Unit# [sat_s3NDu];

GHC.Read.$fReadBool2 [InlPrag=NOUSERINLINE[0]]
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        (GHC.Types.Bool -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=2, Str=<L,A><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [w_s3NDv w1_s3NDw]
        case GHC.Read.$w$creadPrec w1_s3NDw of {
          Unit# ww1_s3NDy [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3NDy];
        };

GHC.Read.$fReadBool1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Types.Bool -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Read.list3 GHC.Read.$fReadBool2 eta_B2 eta_B1;

GHC.Read.$fReadBool_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.Types.Bool
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s3NDz]
        let {
          sat_s3NDA [Occ=Once]
            :: Text.ParserCombinators.ReadP.P GHC.Types.Bool
          [LclId] =
              [n_s3NDz] \u []
                  GHC.Read.list3
                      GHC.Read.$fReadBool2
                      n_s3NDz
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NDA;

GHC.Read.$fReadBool_$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec [GHC.Types.Bool]
[GblId] =
    [] \u [] GHC.Read.list GHC.Read.$fReadBool1;

GHC.Read.$fReadBool7
  :: Text.ParserCombinators.ReadP.P [GHC.Types.Bool]
[GblId] =
    [] \u []
        GHC.Read.$fReadBool_$creadListPrec
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fReadBool_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.Types.Bool]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.$fReadBool7 eta_B1;

GHC.Read.$fReadBool [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.Types.Bool
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fReadBool_$creadsPrec
                                    GHC.Read.$fReadBool_$creadList
                                    GHC.Read.$fReadBool1
                                    GHC.Read.$fReadBool_$creadListPrec];

GHC.Read.$w$creadPrec1 [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> (# GHC.Base.String -> Text.ParserCombinators.ReadP.P b1 #)
[GblId, Arity=1, Str=<L,C(U)>, Unf=OtherCon []] =
    [] \r [w_s3NDB]
        let {
          lvl116_s3NDC [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3MuL
          [LclId] =
              [w_s3NDB] \u []
                  let {
                    sat_s3NDH [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_s3MuL
                    [LclId] =
                        [w_s3NDB] \u []
                            let {
                              sat_s3NDG [Occ=Once]
                                :: Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.P b1_s3MuL
                              [LclId] =
                                  [w_s3NDB] \r [a1_s3NDD]
                                      case a1_s3NDD of {
                                        __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                                        Text.Read.Lex.Char c_s3NDF [Occ=Once] -> w_s3NDB c_s3NDF;
                                      };
                            } in  Text.Read.Lex.expect2 sat_s3NDG;
                  } in 
                    Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                        GHC.Read.$fReadChar3 sat_s3NDH; } in
        let {
          k_s3NDI [Occ=OnceL, Dmd=<L,C(U)>]
            :: () -> Text.ParserCombinators.ReadP.P b1_s3MuL
          [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
              [lvl116_s3NDC] \r [a3_s3NDJ] lvl116_s3NDC; } in
        let {
          sat_s3NDL [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3MuL
          [LclId] =
              [k_s3NDI] \r [a_s3NDK]
                  Text.ParserCombinators.ReadP.skipSpaces2 a_s3NDK k_s3NDI;
        } in  Unit# [sat_s3NDL];

GHC.Read.$fReadChar7 [InlPrag=NOUSERINLINE[0]]
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=2, Str=<L,A><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [w_s3NDM w1_s3NDN]
        case GHC.Read.$w$creadPrec1 w1_s3NDN of {
          Unit# ww1_s3NDP [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3NDP];
        };

GHC.Read.$fReadChar6
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Read.list3 GHC.Read.$fReadChar7 eta_B2 eta_B1;

GHC.Read.$fReadInteger2
  :: Text.Read.Lex.Lexeme
     -> Text.ParserCombinators.ReadPrec.ReadPrec
          GHC.Integer.Type.Integer
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3NDQ]
        case ds_s3NDQ of {
          __DEFAULT ->
              Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4;
          Text.Read.Lex.Number n_s3NDS [Occ=Once] ->
              case Text.Read.Lex.numberToInteger n_s3NDS of {
                GHC.Base.Nothing ->
                    Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4;
                GHC.Base.Just i_s3NDU [Occ=OnceL] ->
                    let {
                      sat_s3NDX [Occ=Once]
                        :: Text.ParserCombinators.ReadPrec.Prec
                           -> forall b.
                              (GHC.Integer.Type.Integer -> Text.ParserCombinators.ReadP.P b)
                              -> Text.ParserCombinators.ReadP.P b
                      [LclId] =
                          [i_s3NDU] \r [ds1_s3NDV k_s3NDW] k_s3NDW i_s3NDU;
                    } in  sat_s3NDX;
              };
        };

GHC.Read.$fReadInteger1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Integer.Type.Integer -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Read.$fReadInteger_$sreadNumber
            GHC.Read.$fReadInteger2 eta_B2 eta_B1;

GHC.Read.$fReadInteger_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.Integer.Type.Integer
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s3NDY]
        let {
          sat_s3NDZ [Occ=Once]
            :: Text.ParserCombinators.ReadP.P GHC.Integer.Type.Integer
          [LclId] =
              [n_s3NDY] \u []
                  GHC.Read.$fReadInteger_$sreadNumber
                      GHC.Read.$fReadInteger2
                      n_s3NDY
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NDZ;

GHC.Read.$fReadInteger_$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec
       [GHC.Integer.Type.Integer]
[GblId] =
    [] \u [] GHC.Read.list GHC.Read.$fReadInteger1;

GHC.Read.$fReadInteger3
  :: Text.ParserCombinators.ReadP.P [GHC.Integer.Type.Integer]
[GblId] =
    [] \u []
        GHC.Read.$fReadInteger_$creadListPrec
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fReadInteger_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.Integer.Type.Integer]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.$fReadInteger3 eta_B1;

GHC.Read.$fReadInteger [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.Integer.Type.Integer
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fReadInteger_$creadsPrec
                                    GHC.Read.$fReadInteger_$creadList
                                    GHC.Read.$fReadInteger1
                                    GHC.Read.$fReadInteger_$creadListPrec];

GHC.Read.$fReadWord64_go [Occ=LoopBreaker]
  :: [(GHC.Integer.Type.Integer, GHC.Base.String)]
     -> [(GHC.Word.Word64, GHC.Base.String)]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3NE0]
        case ds_s3NE0 of {
          [] -> [] [];
          : y_s3NE2 [Occ=Once!] ys_s3NE3 [Occ=Once] ->
              case y_s3NE2 of {
                (,) x_s3NE5 [Occ=Once] r_s3NE6 [Occ=Once] ->
                    let {
                      sat_s3NE9 [Occ=Once] :: [(GHC.Word.Word64, GHC.Base.String)]
                      [LclId] =
                          [ys_s3NE3] \u [] GHC.Read.$fReadWord64_go ys_s3NE3; } in
                    let {
                      sat_s3NE7 [Occ=Once] :: GHC.Word.Word64
                      [LclId] =
                          [x_s3NE5] \u [] GHC.Word.$fNumWord64_$cfromInteger x_s3NE5; } in
                    let {
                      sat_s3NE8 [Occ=Once] :: (GHC.Word.Word64, GHC.Base.String)
                      [LclId] =
                          CCCS (,)! [sat_s3NE7 r_s3NE6];
                    } in  : [sat_s3NE8 sat_s3NE9];
              };
        };

GHC.Read.$fReadWord64_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.Word.Word64
[GblId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [p_s3NEa s_s3NEb]
        case
            GHC.Read.$fReadInteger_$sreadNumber
                GHC.Read.$fReadInteger2
                p_s3NEa
                Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
        of
        sat_s3NEc
        { __DEFAULT ->
              case
                  Text.ParserCombinators.ReadP.run sat_s3NEc s_s3NEb
              of
              sat_s3NEd
              { __DEFAULT -> GHC.Read.$fReadWord64_go sat_s3NEd;
              };
        };

GHC.Read.$fReadWord13
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Word.Word64 -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,U><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s3NEe eta_s3NEf]
        let {
          sat_s3NEg [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS GHC.Word.Word64
          [LclId] =
              [n_s3NEe] \r [eta_B1]
                  GHC.Read.$fReadWord64_$creadsPrec n_s3NEe eta_B1;
        } in 
          case
              Text.ParserCombinators.ReadP.$wreadS_to_P sat_s3NEg eta_s3NEf
          of
          { Unit# ww1_s3NEi [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3NEi];
          };

GHC.Read.$fReadWord12
  :: Text.ParserCombinators.ReadP.P [GHC.Word.Word64]
[GblId] =
    [] \u []
        GHC.Read.list
            GHC.Read.$fReadWord13
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fReadWord64_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.Word.Word64]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.$fReadWord12 eta_B1;

GHC.Read.$fReadWord11
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        ([GHC.Word.Word64] -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,A><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s3NEj w1_s3NEk]
        case
            Text.ParserCombinators.ReadP.$wreadS_to_P
                GHC.Read.$fReadWord64_$creadList w1_s3NEk
        of
        { Unit# ww1_s3NEm [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3NEm];
        };

GHC.Read.$fReadWord64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.Word.Word64
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fReadWord64_$creadsPrec
                                    GHC.Read.$fReadWord64_$creadList
                                    GHC.Read.$fReadWord13
                                    GHC.Read.$fReadWord11];

GHC.Read.$fReadWord_go [Occ=LoopBreaker]
  :: [(GHC.Integer.Type.Integer, GHC.Base.String)]
     -> [(GHC.Types.Word, GHC.Base.String)]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3NEn]
        case ds_s3NEn of {
          [] -> [] [];
          : y_s3NEp [Occ=Once!] ys_s3NEq [Occ=Once] ->
              case y_s3NEp of {
                (,) x_s3NEs [Occ=Once] r_s3NEt [Occ=Once] ->
                    let {
                      sat_s3NEw [Occ=Once] :: [(GHC.Types.Word, GHC.Base.String)]
                      [LclId] =
                          [ys_s3NEq] \u [] GHC.Read.$fReadWord_go ys_s3NEq; } in
                    let {
                      sat_s3NEu [Occ=Once] :: GHC.Types.Word
                      [LclId] =
                          [x_s3NEs] \u [] GHC.Num.$fNumWord_$cfromInteger x_s3NEs; } in
                    let {
                      sat_s3NEv [Occ=Once] :: (GHC.Types.Word, GHC.Base.String)
                      [LclId] =
                          CCCS (,)! [sat_s3NEu r_s3NEt];
                    } in  : [sat_s3NEv sat_s3NEw];
              };
        };

GHC.Read.$fReadWord_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.Types.Word
[GblId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [p_s3NEx s_s3NEy]
        case
            GHC.Read.$fReadInteger_$sreadNumber
                GHC.Read.$fReadInteger2
                p_s3NEx
                Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
        of
        sat_s3NEz
        { __DEFAULT ->
              case
                  Text.ParserCombinators.ReadP.run sat_s3NEz s_s3NEy
              of
              sat_s3NEA
              { __DEFAULT -> GHC.Read.$fReadWord_go sat_s3NEA;
              };
        };

GHC.Read.$fReadWord3
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Types.Word -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,U><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s3NEB eta_s3NEC]
        let {
          sat_s3NED [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS GHC.Types.Word
          [LclId] =
              [n_s3NEB] \r [eta_B1]
                  GHC.Read.$fReadWord_$creadsPrec n_s3NEB eta_B1;
        } in 
          case
              Text.ParserCombinators.ReadP.$wreadS_to_P sat_s3NED eta_s3NEC
          of
          { Unit# ww1_s3NEF [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3NEF];
          };

GHC.Read.$fReadWord2
  :: Text.ParserCombinators.ReadP.P [GHC.Types.Word]
[GblId] =
    [] \u []
        GHC.Read.list
            GHC.Read.$fReadWord3
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fReadWord_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.Types.Word]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.$fReadWord2 eta_B1;

GHC.Read.$fReadWord1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        ([GHC.Types.Word] -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,A><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s3NEG w1_s3NEH]
        case
            Text.ParserCombinators.ReadP.$wreadS_to_P
                GHC.Read.$fReadWord_$creadList w1_s3NEH
        of
        { Unit# ww1_s3NEJ [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3NEJ];
        };

GHC.Read.$fReadWord [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.Types.Word
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fReadWord_$creadsPrec
                                    GHC.Read.$fReadWord_$creadList
                                    GHC.Read.$fReadWord3
                                    GHC.Read.$fReadWord1];

GHC.Read.$fReadInt2
  :: Text.Read.Lex.Lexeme
     -> Text.ParserCombinators.ReadPrec.ReadPrec GHC.Types.Int
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3NEK]
        case ds_s3NEK of {
          __DEFAULT ->
              Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4;
          Text.Read.Lex.Number n_s3NEM [Occ=Once] ->
              case Text.Read.Lex.numberToInteger n_s3NEM of {
                GHC.Base.Nothing ->
                    Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4;
                GHC.Base.Just i_s3NEO [Occ=Once] ->
                    let {
                      x_s3NEP [Occ=OnceL] :: GHC.Types.Int
                      [LclId] =
                          [i_s3NEO] \u []
                              case GHC.Integer.Type.integerToInt i_s3NEO of wild2_s3NEQ {
                                __DEFAULT -> GHC.Types.I# [wild2_s3NEQ];
                              }; } in
                    let {
                      sat_s3NET [Occ=Once]
                        :: Text.ParserCombinators.ReadPrec.Prec
                           -> forall b.
                              (GHC.Types.Int -> Text.ParserCombinators.ReadP.P b)
                              -> Text.ParserCombinators.ReadP.P b
                      [LclId] =
                          [x_s3NEP] \r [ds1_s3NER k_s3NES] k_s3NES x_s3NEP;
                    } in  sat_s3NET;
              };
        };

GHC.Read.$fReadInt1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Types.Int -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Read.$fReadInt_$sreadNumber GHC.Read.$fReadInt2 eta_B2 eta_B1;

GHC.Read.$fReadDouble_x1 :: GHC.Types.Double
[GblId] =
    [] \u []
        case /## [0.0## 0.0##] of wild2_s3NEU {
          __DEFAULT -> GHC.Types.D# [wild2_s3NEU];
        };

GHC.Read.$fReadDouble3
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Types.Double -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,A><C(S),1*C1(U)>, Unf=OtherCon []] =
    [] \r [ds_s3NEV k_s3NEW] k_s3NEW GHC.Read.$fReadDouble_x1;

GHC.Read.$fReadDouble5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "NaN"#;

GHC.Read.$fReadDouble4 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Read.$fReadDouble5;

GHC.Read.$fReadDouble_x :: GHC.Types.Double
[GblId] =
    [] \u []
        case /## [1.0## 0.0##] of wild2_s3NEX {
          __DEFAULT -> GHC.Types.D# [wild2_s3NEX];
        };

GHC.Read.$fReadDouble2
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Types.Double -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,A><C(S),1*C1(U)>, Unf=OtherCon []] =
    [] \r [ds_s3NEY k_s3NEZ] k_s3NEZ GHC.Read.$fReadDouble_x;

GHC.Read.$fReadDouble7 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Infinity"#;

GHC.Read.$fReadDouble6 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Read.$fReadDouble7;

GHC.Read.$fReadDouble_$sconvertFrac
  :: Text.Read.Lex.Lexeme
     -> Text.ParserCombinators.ReadPrec.ReadPrec GHC.Types.Double
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [eta_s3NF0]
        case eta_s3NF0 of {
          __DEFAULT ->
              Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4;
          Text.Read.Lex.Ident ds_s3NF2 ->
              case GHC.Base.eqString ds_s3NF2 GHC.Read.$fReadDouble6 of {
                GHC.Types.False ->
                    case GHC.Base.eqString ds_s3NF2 GHC.Read.$fReadDouble4 of {
                      GHC.Types.False ->
                          Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4;
                      GHC.Types.True -> GHC.Read.$fReadDouble3;
                    };
                GHC.Types.True -> GHC.Read.$fReadDouble2;
              };
          Text.Read.Lex.Number n_s3NF5 [Occ=Once] ->
              case
                  Text.Read.Lex.$wnumberToRangedRational
                      GHC.Float.$fRealFloatDouble3 GHC.Float.$fRealFloatDouble2 n_s3NF5
              of
              { GHC.Base.Nothing -> GHC.Read.$fReadDouble2;
                GHC.Base.Just rat_s3NF7 [Occ=Once!] ->
                    let {
                      x_s3NF8 [Occ=OnceL] :: GHC.Types.Double
                      [LclId] =
                          [rat_s3NF7] \u []
                              case rat_s3NF7 of {
                                GHC.Real.:% n1_s3NFa [Occ=Once] d_s3NFb [Occ=Once] ->
                                    GHC.Float.rationalToDouble n1_s3NFa d_s3NFb;
                              }; } in
                    let {
                      sat_s3NFe [Occ=Once]
                        :: Text.ParserCombinators.ReadPrec.Prec
                           -> forall b.
                              (GHC.Types.Double -> Text.ParserCombinators.ReadP.P b)
                              -> Text.ParserCombinators.ReadP.P b
                      [LclId] =
                          [x_s3NF8] \r [ds_s3NFc k_s3NFd] k_s3NFd x_s3NF8;
                    } in  sat_s3NFe;
              };
        };

GHC.Read.$fReadFloat_x1 :: GHC.Types.Float
[GblId] =
    [] \u []
        case divideFloat# [0.0# 0.0#] of wild2_s3NFf {
          __DEFAULT -> GHC.Types.F# [wild2_s3NFf];
        };

GHC.Read.$fReadFloat3
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Types.Float -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,A><C(S),1*C1(U)>, Unf=OtherCon []] =
    [] \r [ds_s3NFg k_s3NFh] k_s3NFh GHC.Read.$fReadFloat_x1;

GHC.Read.$fReadFloat_x :: GHC.Types.Float
[GblId] =
    [] \u []
        case divideFloat# [1.0# 0.0#] of wild2_s3NFi {
          __DEFAULT -> GHC.Types.F# [wild2_s3NFi];
        };

GHC.Read.$fReadFloat2
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Types.Float -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,A><C(S),1*C1(U)>, Unf=OtherCon []] =
    [] \r [ds_s3NFj k_s3NFk] k_s3NFk GHC.Read.$fReadFloat_x;

GHC.Read.$fReadFloat_$sconvertFrac
  :: Text.Read.Lex.Lexeme
     -> Text.ParserCombinators.ReadPrec.ReadPrec GHC.Types.Float
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [eta_s3NFl]
        case eta_s3NFl of {
          __DEFAULT ->
              Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4;
          Text.Read.Lex.Ident ds_s3NFn ->
              case GHC.Base.eqString ds_s3NFn GHC.Read.$fReadDouble6 of {
                GHC.Types.False ->
                    case GHC.Base.eqString ds_s3NFn GHC.Read.$fReadDouble4 of {
                      GHC.Types.False ->
                          Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4;
                      GHC.Types.True -> GHC.Read.$fReadFloat3;
                    };
                GHC.Types.True -> GHC.Read.$fReadFloat2;
              };
          Text.Read.Lex.Number n_s3NFq [Occ=Once] ->
              case
                  Text.Read.Lex.$wnumberToRangedRational
                      GHC.Float.$fRealFloatFloat3 GHC.Float.$fRealFloatFloat2 n_s3NFq
              of
              { GHC.Base.Nothing -> GHC.Read.$fReadFloat2;
                GHC.Base.Just rat_s3NFs [Occ=Once!] ->
                    let {
                      x_s3NFt [Occ=OnceL] :: GHC.Types.Float
                      [LclId] =
                          [rat_s3NFs] \u []
                              case rat_s3NFs of {
                                GHC.Real.:% n1_s3NFv [Occ=Once] d_s3NFw [Occ=Once] ->
                                    GHC.Float.rationalToFloat n1_s3NFv d_s3NFw;
                              }; } in
                    let {
                      sat_s3NFz [Occ=Once]
                        :: Text.ParserCombinators.ReadPrec.Prec
                           -> forall b.
                              (GHC.Types.Float -> Text.ParserCombinators.ReadP.P b)
                              -> Text.ParserCombinators.ReadP.P b
                      [LclId] =
                          [x_s3NFt] \r [ds_s3NFx k_s3NFy] k_s3NFy x_s3NFt;
                    } in  sat_s3NFz;
              };
        };

GHC.Read.$fReadDouble1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Types.Double -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Read.$fReadDouble_$sreadNumber
            GHC.Read.$fReadDouble_$sconvertFrac eta_B2 eta_B1;

GHC.Read.$fReadDouble_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.Types.Double
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s3NFA]
        let {
          sat_s3NFB [Occ=Once]
            :: Text.ParserCombinators.ReadP.P GHC.Types.Double
          [LclId] =
              [n_s3NFA] \u []
                  GHC.Read.$fReadDouble_$sreadNumber
                      GHC.Read.$fReadDouble_$sconvertFrac
                      n_s3NFA
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NFB;

GHC.Read.$fReadDouble_$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec [GHC.Types.Double]
[GblId] =
    [] \u [] GHC.Read.list GHC.Read.$fReadDouble1;

GHC.Read.$fReadDouble8
  :: Text.ParserCombinators.ReadP.P [GHC.Types.Double]
[GblId] =
    [] \u []
        GHC.Read.$fReadDouble_$creadListPrec
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fReadDouble_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.Types.Double]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.$fReadDouble8 eta_B1;

GHC.Read.$fReadDouble [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.Types.Double
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fReadDouble_$creadsPrec
                                    GHC.Read.$fReadDouble_$creadList
                                    GHC.Read.$fReadDouble1
                                    GHC.Read.$fReadDouble_$creadListPrec];

GHC.Read.$fReadFloat1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Types.Float -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Read.$fReadFloat_$sreadNumber
            GHC.Read.$fReadFloat_$sconvertFrac eta_B2 eta_B1;

GHC.Read.$fReadFloat_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.Types.Float
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s3NFC]
        let {
          sat_s3NFD [Occ=Once]
            :: Text.ParserCombinators.ReadP.P GHC.Types.Float
          [LclId] =
              [n_s3NFC] \u []
                  GHC.Read.$fReadFloat_$sreadNumber
                      GHC.Read.$fReadFloat_$sconvertFrac
                      n_s3NFC
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NFD;

GHC.Read.$fReadFloat_$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec [GHC.Types.Float]
[GblId] =
    [] \u [] GHC.Read.list GHC.Read.$fReadFloat1;

GHC.Read.$fReadFloat4
  :: Text.ParserCombinators.ReadP.P [GHC.Types.Float]
[GblId] =
    [] \u []
        GHC.Read.$fReadFloat_$creadListPrec
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fReadFloat_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.Types.Float]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.$fReadFloat4 eta_B1;

GHC.Read.$fReadFloat [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.Types.Float
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fReadFloat_$creadsPrec
                                    GHC.Read.$fReadFloat_$creadList
                                    GHC.Read.$fReadFloat1
                                    GHC.Read.$fReadFloat_$creadListPrec];

GHC.Read.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.Read.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Read.$trModule4];

GHC.Read.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.Read"#;

GHC.Read.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Read.$trModule2];

GHC.Read.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.Read.$trModule3
                                     GHC.Read.$trModule1];

$krep_r3N5l :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcChar
                                              GHC.Types.[]];

$krep1_r3N5m :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcInt
                                              GHC.Types.[]];

$krep2_r3N5n :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcConstraint
                                              GHC.Types.[]];

$krep3_r3N5o :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r3N5l GHC.Types.[]];

$krep4_r3N5p :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep3_r3N5o];

GHC.Read.$tcRead1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.Types.krep$*
                                         $krep2_r3N5n];

$krep5_r3N5q :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

$krep6_r3N5r :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep4_r3N5p GHC.Types.[]];

$krep7_r3N5s :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep5_r3N5q $krep6_r3N5r];

$krep8_r3N5t :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Tuple.$tc(,)
                                              $krep7_r3N5s];

$krep9_r3N5u :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep8_r3N5t GHC.Types.[]];

$krep10_r3N5v :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep9_r3N5u];

$krep11_r3N5w :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep4_r3N5p $krep10_r3N5v];

$krep12_r3N5x :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep1_r3N5m $krep11_r3N5w];

$krep13_r3N5y :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep5_r3N5q GHC.Types.[]];

$krep14_r3N5z :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep13_r3N5y];

$krep15_r3N5A :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep14_r3N5z $krep6_r3N5r];

$krep16_r3N5B :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Tuple.$tc(,)
                                              $krep15_r3N5A];

$krep17_r3N5C :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep16_r3N5B GHC.Types.[]];

$krep18_r3N5D :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep17_r3N5C];

$krep19_r3N5E :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep4_r3N5p $krep18_r3N5D];

$krep20_r3N5F :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep14_r3N5z GHC.Types.[]];

$krep21_r3N5G :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Text.ParserCombinators.ReadPrec.$tcReadPrec
                                              $krep20_r3N5F];

$krep22_r3N5H :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Text.ParserCombinators.ReadPrec.$tcReadPrec
                                              $krep13_r3N5y];

GHC.Read.$tcRead3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Read"#;

GHC.Read.$tcRead2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Read.$tcRead3];

GHC.Read.$tcRead :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2005723268194049725##
                                    6708234688584993214##
                                    GHC.Read.$trModule
                                    GHC.Read.$tcRead2
                                    0#
                                    GHC.Read.$tcRead1];

$krep23_r3N5I :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Read.$tcRead
                                              $krep13_r3N5y];

$krep24_r3N5J :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep21_r3N5G $krep23_r3N5I];

$krep25_r3N5K :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep22_r3N5H $krep24_r3N5J];

$krep26_r3N5L :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep19_r3N5E $krep25_r3N5K];

GHC.Read.$tc'C:Read1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep12_r3N5x $krep26_r3N5L];

GHC.Read.$tc'C:Read3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'C:Read"#;

GHC.Read.$tc'C:Read2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Read.$tc'C:Read3];

GHC.Read.$tc'C:Read :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [14808553548329602455##
                                    6533111827003124976##
                                    GHC.Read.$trModule
                                    GHC.Read.$tc'C:Read2
                                    1#
                                    GHC.Read.$tc'C:Read1];

GHC.Read.$fReadInt_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.Types.Int
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s3NFE]
        let {
          sat_s3NFF [Occ=Once]
            :: Text.ParserCombinators.ReadP.P GHC.Types.Int
          [LclId] =
              [n_s3NFE] \u []
                  GHC.Read.$fReadInt_$sreadNumber
                      GHC.Read.$fReadInt2
                      n_s3NFE
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NFF;

GHC.Read.$fReadInt_$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec [GHC.Types.Int]
[GblId] =
    [] \u [] GHC.Read.list GHC.Read.$fReadInt1;

GHC.Read.$fReadInt3
  :: Text.ParserCombinators.ReadP.P [GHC.Types.Int]
[GblId] =
    [] \u []
        GHC.Read.$fReadInt_$creadListPrec
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fReadInt_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.Types.Int]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.$fReadInt3 eta_B1;

GHC.Read.$fReadInt [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.Types.Int
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fReadInt_$creadsPrec
                                    GHC.Read.$fReadInt_$creadList
                                    GHC.Read.$fReadInt1
                                    GHC.Read.$fReadInt_$creadListPrec];

GHC.Read.$fReadWord32_go [Occ=LoopBreaker]
  :: [(GHC.Types.Int, GHC.Base.String)]
     -> [(GHC.Word.Word32, GHC.Base.String)]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3NFG]
        case ds_s3NFG of {
          [] -> [] [];
          : y_s3NFI [Occ=Once!] ys_s3NFJ [Occ=Once] ->
              case y_s3NFI of {
                (,) x_s3NFL [Occ=Once!] r_s3NFM [Occ=Once] ->
                    let {
                      sat_s3NFT [Occ=Once] :: [(GHC.Word.Word32, GHC.Base.String)]
                      [LclId] =
                          [ys_s3NFJ] \u [] GHC.Read.$fReadWord32_go ys_s3NFJ; } in
                    let {
                      sat_s3NFR [Occ=Once] :: GHC.Word.Word32
                      [LclId] =
                          [x_s3NFL] \u []
                              case x_s3NFL of {
                                GHC.Types.I# x#_s3NFO [Occ=Once] ->
                                    case int2Word# [x#_s3NFO] of sat_s3NFP {
                                      __DEFAULT ->
                                          case narrow32Word# [sat_s3NFP] of sat_s3NFQ {
                                            __DEFAULT -> GHC.Word.W32# [sat_s3NFQ];
                                          };
                                    };
                              }; } in
                    let {
                      sat_s3NFS [Occ=Once] :: (GHC.Word.Word32, GHC.Base.String)
                      [LclId] =
                          CCCS (,)! [sat_s3NFR r_s3NFM];
                    } in  : [sat_s3NFS sat_s3NFT];
              };
        };

GHC.Read.$fReadWord32_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.Word.Word32
[GblId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [p_s3NFU s_s3NFV]
        case
            GHC.Read.$fReadInt_$sreadNumber
                GHC.Read.$fReadInt2
                p_s3NFU
                Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
        of
        sat_s3NFW
        { __DEFAULT ->
              case
                  Text.ParserCombinators.ReadP.run sat_s3NFW s_s3NFV
              of
              sat_s3NFX
              { __DEFAULT -> GHC.Read.$fReadWord32_go sat_s3NFX;
              };
        };

GHC.Read.$fReadWord10
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Word.Word32 -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,U><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s3NFY eta_s3NFZ]
        let {
          sat_s3NG0 [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS GHC.Word.Word32
          [LclId] =
              [n_s3NFY] \r [eta_B1]
                  GHC.Read.$fReadWord32_$creadsPrec n_s3NFY eta_B1;
        } in 
          case
              Text.ParserCombinators.ReadP.$wreadS_to_P sat_s3NG0 eta_s3NFZ
          of
          { Unit# ww1_s3NG2 [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3NG2];
          };

GHC.Read.$fReadWord9
  :: Text.ParserCombinators.ReadP.P [GHC.Word.Word32]
[GblId] =
    [] \u []
        GHC.Read.list
            GHC.Read.$fReadWord10
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fReadWord32_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.Word.Word32]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.$fReadWord9 eta_B1;

GHC.Read.$fReadWord7
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        ([GHC.Word.Word32] -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,A><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s3NG3 w1_s3NG4]
        case
            Text.ParserCombinators.ReadP.$wreadS_to_P
                GHC.Read.$fReadWord32_$creadList w1_s3NG4
        of
        { Unit# ww1_s3NG6 [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3NG6];
        };

GHC.Read.$fReadWord32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.Word.Word32
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fReadWord32_$creadsPrec
                                    GHC.Read.$fReadWord32_$creadList
                                    GHC.Read.$fReadWord10
                                    GHC.Read.$fReadWord7];

GHC.Read.$fReadWord16_go [Occ=LoopBreaker]
  :: [(GHC.Types.Int, GHC.Base.String)]
     -> [(GHC.Word.Word16, GHC.Base.String)]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3NG7]
        case ds_s3NG7 of {
          [] -> [] [];
          : y_s3NG9 [Occ=Once!] ys_s3NGa [Occ=Once] ->
              case y_s3NG9 of {
                (,) x_s3NGc [Occ=Once!] r_s3NGd [Occ=Once] ->
                    let {
                      sat_s3NGk [Occ=Once] :: [(GHC.Word.Word16, GHC.Base.String)]
                      [LclId] =
                          [ys_s3NGa] \u [] GHC.Read.$fReadWord16_go ys_s3NGa; } in
                    let {
                      sat_s3NGi [Occ=Once] :: GHC.Word.Word16
                      [LclId] =
                          [x_s3NGc] \u []
                              case x_s3NGc of {
                                GHC.Types.I# x#_s3NGf [Occ=Once] ->
                                    case int2Word# [x#_s3NGf] of sat_s3NGg {
                                      __DEFAULT ->
                                          case narrow16Word# [sat_s3NGg] of sat_s3NGh {
                                            __DEFAULT -> GHC.Word.W16# [sat_s3NGh];
                                          };
                                    };
                              }; } in
                    let {
                      sat_s3NGj [Occ=Once] :: (GHC.Word.Word16, GHC.Base.String)
                      [LclId] =
                          CCCS (,)! [sat_s3NGi r_s3NGd];
                    } in  : [sat_s3NGj sat_s3NGk];
              };
        };

GHC.Read.$fReadWord16_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.Word.Word16
[GblId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [p_s3NGl s_s3NGm]
        case
            GHC.Read.$fReadInt_$sreadNumber
                GHC.Read.$fReadInt2
                p_s3NGl
                Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
        of
        sat_s3NGn
        { __DEFAULT ->
              case
                  Text.ParserCombinators.ReadP.run sat_s3NGn s_s3NGm
              of
              sat_s3NGo
              { __DEFAULT -> GHC.Read.$fReadWord16_go sat_s3NGo;
              };
        };

GHC.Read.$fReadWord6
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Word.Word16 -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,U><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s3NGp eta_s3NGq]
        let {
          sat_s3NGr [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS GHC.Word.Word16
          [LclId] =
              [n_s3NGp] \r [eta_B1]
                  GHC.Read.$fReadWord16_$creadsPrec n_s3NGp eta_B1;
        } in 
          case
              Text.ParserCombinators.ReadP.$wreadS_to_P sat_s3NGr eta_s3NGq
          of
          { Unit# ww1_s3NGt [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3NGt];
          };

GHC.Read.$fReadWord5
  :: Text.ParserCombinators.ReadP.P [GHC.Word.Word16]
[GblId] =
    [] \u []
        GHC.Read.list
            GHC.Read.$fReadWord6
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fReadWord16_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.Word.Word16]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.$fReadWord5 eta_B1;

GHC.Read.$fReadWord4
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        ([GHC.Word.Word16] -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,A><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s3NGu w1_s3NGv]
        case
            Text.ParserCombinators.ReadP.$wreadS_to_P
                GHC.Read.$fReadWord16_$creadList w1_s3NGv
        of
        { Unit# ww1_s3NGx [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3NGx];
        };

GHC.Read.$fReadWord16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.Word.Word16
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fReadWord16_$creadsPrec
                                    GHC.Read.$fReadWord16_$creadList
                                    GHC.Read.$fReadWord6
                                    GHC.Read.$fReadWord4];

GHC.Read.$fReadWord8_go [Occ=LoopBreaker]
  :: [(GHC.Types.Int, GHC.Base.String)]
     -> [(GHC.Word.Word8, GHC.Base.String)]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3NGy]
        case ds_s3NGy of {
          [] -> [] [];
          : y_s3NGA [Occ=Once!] ys_s3NGB [Occ=Once] ->
              case y_s3NGA of {
                (,) x_s3NGD [Occ=Once!] r_s3NGE [Occ=Once] ->
                    let {
                      sat_s3NGL [Occ=Once] :: [(GHC.Word.Word8, GHC.Base.String)]
                      [LclId] =
                          [ys_s3NGB] \u [] GHC.Read.$fReadWord8_go ys_s3NGB; } in
                    let {
                      sat_s3NGJ [Occ=Once] :: GHC.Word.Word8
                      [LclId] =
                          [x_s3NGD] \u []
                              case x_s3NGD of {
                                GHC.Types.I# x#_s3NGG [Occ=Once] ->
                                    case int2Word# [x#_s3NGG] of sat_s3NGH {
                                      __DEFAULT ->
                                          case narrow8Word# [sat_s3NGH] of sat_s3NGI {
                                            __DEFAULT -> GHC.Word.W8# [sat_s3NGI];
                                          };
                                    };
                              }; } in
                    let {
                      sat_s3NGK [Occ=Once] :: (GHC.Word.Word8, GHC.Base.String)
                      [LclId] =
                          CCCS (,)! [sat_s3NGJ r_s3NGE];
                    } in  : [sat_s3NGK sat_s3NGL];
              };
        };

GHC.Read.$fReadWord8_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.Word.Word8
[GblId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [p_s3NGM s_s3NGN]
        case
            GHC.Read.$fReadInt_$sreadNumber
                GHC.Read.$fReadInt2
                p_s3NGM
                Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
        of
        sat_s3NGO
        { __DEFAULT ->
              case
                  Text.ParserCombinators.ReadP.run sat_s3NGO s_s3NGN
              of
              sat_s3NGP
              { __DEFAULT -> GHC.Read.$fReadWord8_go sat_s3NGP;
              };
        };

GHC.Read.$fReadWord17
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Word.Word8 -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,U><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s3NGQ eta_s3NGR]
        let {
          sat_s3NGS [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS GHC.Word.Word8
          [LclId] =
              [n_s3NGQ] \r [eta_B1]
                  GHC.Read.$fReadWord8_$creadsPrec n_s3NGQ eta_B1;
        } in 
          case
              Text.ParserCombinators.ReadP.$wreadS_to_P sat_s3NGS eta_s3NGR
          of
          { Unit# ww1_s3NGU [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3NGU];
          };

GHC.Read.$fReadWord15
  :: Text.ParserCombinators.ReadP.P [GHC.Word.Word8]
[GblId] =
    [] \u []
        GHC.Read.list
            GHC.Read.$fReadWord17
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fReadWord8_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.Word.Word8]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.$fReadWord15 eta_B1;

GHC.Read.$fReadWord14
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        ([GHC.Word.Word8] -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,A><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s3NGV w1_s3NGW]
        case
            Text.ParserCombinators.ReadP.$wreadS_to_P
                GHC.Read.$fReadWord8_$creadList w1_s3NGW
        of
        { Unit# ww1_s3NGY [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3NGY];
        };

GHC.Read.$fReadWord8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.Word.Word8
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fReadWord8_$creadsPrec
                                    GHC.Read.$fReadWord8_$creadList
                                    GHC.Read.$fReadWord17
                                    GHC.Read.$fReadWord14];

GHC.Read.$fReadChar_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.Types.Char
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s3NGZ]
        let {
          sat_s3NH0 [Occ=Once]
            :: Text.ParserCombinators.ReadP.P GHC.Types.Char
          [LclId] =
              [n_s3NGZ] \u []
                  GHC.Read.list3
                      GHC.Read.$fReadChar7
                      n_s3NGZ
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NH0;

GHC.Read.$fReadChar5
  :: Text.ParserCombinators.ReadPrec.ReadPrec [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.Read.list GHC.Read.$fReadChar6;

GHC.Read.$fReadChar2
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Base.String
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s3NH1]
        let {
          ds3_s3NH2 [Occ=OnceL, Dmd=<L,C(U)>]
            :: Text.ParserCombinators.ReadP.ReadP GHC.Base.String
          [LclId] =
              [n_s3NH1] \u [] GHC.Read.$fReadChar5 n_s3NH1; } in
        let {
          sat_s3NHg [Occ=Once]
            :: forall b.
               (GHC.Base.String -> Text.ParserCombinators.ReadP.P b)
               -> Text.ParserCombinators.ReadP.P b
          [LclId] =
              [ds3_s3NH2] \r [k_s3NH3]
                  let {
                    lvl116_s3NH4 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b_a3nvJ
                    [LclId] =
                        [k_s3NH3] \u []
                            let {
                              sat_s3NH9 [Occ=Once] :: Text.ParserCombinators.ReadP.P b_a3nvJ
                              [LclId] =
                                  [k_s3NH3] \u []
                                      let {
                                        sat_s3NH8 [Occ=Once]
                                          :: Text.Read.Lex.Lexeme
                                             -> Text.ParserCombinators.ReadP.P b_a3nvJ
                                        [LclId] =
                                            [k_s3NH3] \r [a1_s3NH5]
                                                case a1_s3NH5 of {
                                                  __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                                                  Text.Read.Lex.String s_s3NH7 [Occ=Once] ->
                                                      k_s3NH3 s_s3NH7;
                                                };
                                      } in  Text.Read.Lex.expect2 sat_s3NH8;
                            } in 
                              Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                  GHC.Read.$fReadChar3 sat_s3NH9; } in
                  let {
                    k1_s3NHa [Occ=OnceL, Dmd=<L,C(U)>]
                      :: () -> Text.ParserCombinators.ReadP.P b_a3nvJ
                    [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
                        [lvl116_s3NH4] \r [a3_s3NHb] lvl116_s3NH4; } in
                  let {
                    sat_s3NHf [Occ=Once] :: Text.ParserCombinators.ReadP.P b_a3nvJ
                    [LclId] =
                        [ds3_s3NH2 k_s3NH3] \u [] ds3_s3NH2 k_s3NH3; } in
                  let {
                    sat_s3NHd [Occ=Once]
                      :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b_a3nvJ
                    [LclId] =
                        [k1_s3NHa] \r [a_s3NHc]
                            Text.ParserCombinators.ReadP.skipSpaces2 a_s3NHc k1_s3NHa; } in
                  let {
                    sat_s3NHe [Occ=Once] :: Text.ParserCombinators.ReadP.P b_a3nvJ
                    [LclId] =
                        CCCS Text.ParserCombinators.ReadP.Look! [sat_s3NHd];
                  } in 
                    Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                        sat_s3NHe sat_s3NHf;
        } in  sat_s3NHg;

GHC.Read.$fReadChar1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Base.String -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Read.list3 GHC.Read.$fReadChar2 eta_B2 eta_B1;

GHC.Read.$fReadChar8
  :: Text.ParserCombinators.ReadP.P [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.Read.list3
            GHC.Read.$fReadChar2
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fReadChar_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.Types.Char]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.$fReadChar8 eta_B1;

GHC.Read.$fReadChar [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.Types.Char
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fReadChar_$creadsPrec
                                    GHC.Read.$fReadChar_$creadList
                                    GHC.Read.$fReadChar6
                                    GHC.Read.$fReadChar1];

GHC.Read.$fRead[]_$s$creadListPrec1
  :: Text.ParserCombinators.ReadPrec.ReadPrec [[GHC.Types.Char]]
[GblId] =
    [] \u [] GHC.Read.list GHC.Read.$fReadChar1;

GHC.Read.$fRead[]2
  :: Text.ParserCombinators.ReadP.P [[GHC.Types.Char]]
[GblId] =
    [] \u []
        GHC.Read.$fRead[]_$s$creadListPrec1
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fRead[]_$s$creadList1
  :: Text.ParserCombinators.ReadP.ReadS [[GHC.Types.Char]]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.$fRead[]2 eta_B1;

GHC.Read.$fRead[]_$s$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec [[GHC.Types.Int]]
[GblId] =
    [] \u [] GHC.Read.list GHC.Read.$fReadInt_$creadListPrec;

GHC.Read.$fRead[]1
  :: Text.ParserCombinators.ReadP.P [[GHC.Types.Int]]
[GblId] =
    [] \u []
        GHC.Read.$fRead[]_$s$creadListPrec
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fRead[]_$s$creadList
  :: Text.ParserCombinators.ReadP.ReadS [[GHC.Types.Int]]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.$fRead[]1 eta_B1;

GHC.Read.$fRead[]_$s$creadsPrec1
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS [GHC.Types.Char]
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s3NHh]
        let {
          sat_s3NHi [Occ=Once]
            :: Text.ParserCombinators.ReadP.P [GHC.Types.Char]
          [LclId] =
              [n_s3NHh] \u []
                  GHC.Read.list3
                      GHC.Read.$fReadChar2
                      n_s3NHh
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NHi;

GHC.Read.$fRead[]_$s$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS [GHC.Types.Int]
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s3NHj]
        let {
          sat_s3NHk [Occ=Once]
            :: Text.ParserCombinators.ReadP.P [GHC.Types.Int]
          [LclId] =
              [n_s3NHj] \u []
                  GHC.Read.$fReadInt_$creadListPrec
                      n_s3NHj Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NHk;

GHC.Read.$fRead[]_$s$fRead[] [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read [GHC.Types.Int]
[GblId, Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fRead[]_$s$creadsPrec
                                    GHC.Read.$fRead[]_$s$creadList
                                    GHC.Read.$fReadInt_$creadListPrec
                                    GHC.Read.$fRead[]_$s$creadListPrec];

GHC.Read.$fRead[]_$s$fRead[]1 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read [GHC.Types.Char]
[GblId, Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fRead[]_$s$creadsPrec1
                                    GHC.Read.$fRead[]_$s$creadList1
                                    GHC.Read.$fReadChar1
                                    GHC.Read.$fRead[]_$s$creadListPrec1];

GHC.Read.$fRead[]_$s$creadsPrec2
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS [GHC.Base.String]
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s3NHl]
        let {
          sat_s3NHm [Occ=Once]
            :: Text.ParserCombinators.ReadP.P [GHC.Base.String]
          [LclId] =
              [n_s3NHl] \u []
                  GHC.Read.$fRead[]_$s$creadListPrec1
                      n_s3NHl Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NHm;

GHC.Read.$fRead[]_$creadsPrec
  :: forall a.
     GHC.Read.Read a =>
     GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS [a]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*U(A,A,A,1*C1(C1(U)))><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3NHn eta_s3NHo]
        let {
          sat_s3NHp [Occ=Once] :: Text.ParserCombinators.ReadP.P [a_a3KVb]
          [LclId] =
              [$dRead_s3NHn eta_s3NHo] \u []
                  GHC.Read.readListPrec
                      $dRead_s3NHn
                      eta_s3NHo
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NHp;

GHC.Read.$fRead[]_$s$creadListPrec2
  :: Text.ParserCombinators.ReadPrec.ReadPrec [[GHC.Base.String]]
[GblId] =
    [] \u [] GHC.Read.list GHC.Read.$fRead[]_$s$creadListPrec1;

GHC.Read.$fRead[]_$creadListPrec
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadPrec.ReadPrec [[a]]
[GblId, Arity=1, Str=<L,1*U(A,A,A,1*C1(C(U)))>, Unf=OtherCon []] =
    [] \r [$dRead_s3NHq]
        let {
          sat_s3NHr [Occ=Once, Dmd=<L,1*C1(C(U))>]
            :: Text.ParserCombinators.ReadPrec.ReadPrec [a_a3KVb]
          [LclId] =
              [$dRead_s3NHq] \s [] GHC.Read.readListPrec $dRead_s3NHq;
        } in  GHC.Read.list sat_s3NHr;

GHC.Read.$fRead[]3
  :: Text.ParserCombinators.ReadP.P [[GHC.Base.String]]
[GblId] =
    [] \u []
        GHC.Read.$fRead[]_$s$creadListPrec2
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fRead[]_$s$creadList2
  :: Text.ParserCombinators.ReadP.ReadS [[GHC.Base.String]]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.$fRead[]3 eta_B1;

GHC.Read.$fRead[]_$s$fRead[]2 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read [GHC.Base.String]
[GblId, Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fRead[]_$s$creadsPrec2
                                    GHC.Read.$fRead[]_$s$creadList2
                                    GHC.Read.$fRead[]_$s$creadListPrec1
                                    GHC.Read.$fRead[]_$s$creadListPrec2];

GHC.Read.$fRead[]_$creadList
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadP.ReadS [[a]]
[GblId, Arity=1, Str=<L,1*U(A,A,A,1*C1(C(U)))>, Unf=OtherCon []] =
    [] \r [$dRead_s3NHs]
        let {
          sat_s3NHu [Occ=Once] :: Text.ParserCombinators.ReadP.P [[a_a3KVb]]
          [LclId] =
              [$dRead_s3NHs] \u []
                  let {
                    sat_s3NHt [Occ=Once, Dmd=<L,1*C1(C(U))>]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec [a_a3KVb]
                    [LclId] =
                        [$dRead_s3NHs] \s [] GHC.Read.readListPrec $dRead_s3NHs;
                  } in 
                    GHC.Read.list
                        sat_s3NHt
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NHu;

GHC.Read.$fRead[] [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Read.Read a => GHC.Read.Read [a]
[GblId[DFunId], Arity=1, Str=<L,U(A,A,A,U)>m] =
    [] \r [$dRead_s3NHv]
        let {
          sat_s3NHz [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec [[a_a3KVb]]
          [LclId] =
              [$dRead_s3NHv] \u []
                  GHC.Read.$fRead[]_$creadListPrec $dRead_s3NHv; } in
        let {
          sat_s3NHy [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec [a_a3KVb]
          [LclId] =
              [$dRead_s3NHv] \u [] GHC.Read.readListPrec $dRead_s3NHv; } in
        let {
          sat_s3NHx [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS [[a_a3KVb]]
          [LclId] =
              [$dRead_s3NHv] \u []
                  GHC.Read.$fRead[]_$creadList $dRead_s3NHv; } in
        let {
          sat_s3NHw [Occ=Once]
            :: GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS [a_a3KVb]
          [LclId] =
              [$dRead_s3NHv] \r [eta_B1]
                  GHC.Read.$fRead[]_$creadsPrec $dRead_s3NHv eta_B1;
        } in  GHC.Read.C:Read [sat_s3NHw sat_s3NHx sat_s3NHy sat_s3NHz];

GHC.Read.$fReadNonEmpty5 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [6#];

GHC.Read.$fReadNonEmpty4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ":|"#;

GHC.Read.$fReadNonEmpty3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Read.$fReadNonEmpty4;

GHC.Read.$fReadNonEmpty2 :: Text.Read.Lex.Lexeme
[GblId, Str=m5, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Symbol! [GHC.Read.$fReadNonEmpty3];

GHC.Read.$fReadNonEmpty1
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Base.NonEmpty a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=3,
 Str=<L,U(A,A,1*C1(C(U)),C(C1(U)))><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3NHA eta_s3NHB eta1_s3NHC]
        let {
          ds1_s3NHD [Occ=OnceL, Dmd=<L,C(U)>]
            :: Text.ParserCombinators.ReadP.ReadP a_a3Ktx
          [LclId] =
              [$dRead_s3NHA] \u []
                  GHC.Read.readPrec $dRead_s3NHA GHC.Read.$fReadNonEmpty5; } in
        let {
          sat_s3NHS [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (GHC.Base.NonEmpty a_a3Ktx)
          [LclId] =
              [$dRead_s3NHA ds1_s3NHD] \r [c_s3NHE eta2_s3NHF]
                  case c_s3NHE of {
                    GHC.Types.I# x_s3NHH [Occ=Once] ->
                        case <=# [x_s3NHH 5#] of {
                          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                          1# ->
                              let {
                                sat_s3NHR [Occ=Once]
                                  :: a_a3Ktx -> Text.ParserCombinators.ReadP.P b1_X3nwX
                                [LclId] =
                                    [$dRead_s3NHA eta2_s3NHF] \r [a1_s3NHJ]
                                        let {
                                          sat_s3NHO [Occ=Once]
                                            :: () -> Text.ParserCombinators.ReadP.P b1_X3nwX
                                          [LclId] =
                                              [$dRead_s3NHA eta2_s3NHF a1_s3NHJ] \r [a2_s3NHK]
                                                  let {
                                                    sat_s3NHN [Occ=Once]
                                                      :: [a_a3Ktx]
                                                         -> Text.ParserCombinators.ReadP.P b1_X3nwX
                                                    [LclId] =
                                                        [eta2_s3NHF a1_s3NHJ] \r [a3_s3NHL]
                                                            let {
                                                              sat_s3NHM [Occ=Once]
                                                                :: GHC.Base.NonEmpty a_a3Ktx
                                                              [LclId] =
                                                                  CCCS GHC.Base.:|! [a1_s3NHJ
                                                                                     a3_s3NHL];
                                                            } in  eta2_s3NHF sat_s3NHM;
                                                  } in 
                                                    GHC.Read.readListPrec
                                                        $dRead_s3NHA
                                                        GHC.Read.$fReadNonEmpty5
                                                        sat_s3NHN;
                                        } in 
                                          case
                                              Text.Read.Lex.$wexpect
                                                  GHC.Read.$fReadNonEmpty2 sat_s3NHO
                                          of
                                          { Unit# ww1_s3NHQ [Occ=Once] ->
                                                Text.ParserCombinators.ReadP.Look [ww1_s3NHQ];
                                          };
                              } in  ds1_s3NHD sat_s3NHR;
                        };
                  };
        } in  GHC.Read.list3 sat_s3NHS eta_s3NHB eta1_s3NHC;

GHC.Read.$fReadNonEmpty_$creadsPrec
  :: forall a.
     GHC.Read.Read a =>
     GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS (GHC.Base.NonEmpty a)
[GblId,
 Arity=2,
 Str=<L,U(A,A,C(C(U)),C(C1(U)))><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3NHT eta_s3NHU]
        let {
          sat_s3NHV [Occ=Once]
            :: Text.ParserCombinators.ReadP.P (GHC.Base.NonEmpty a_X3KIs)
          [LclId] =
              [$dRead_s3NHT eta_s3NHU] \u []
                  GHC.Read.$fReadNonEmpty1
                      $dRead_s3NHT
                      eta_s3NHU
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NHV;

GHC.Read.$fReadNonEmpty_$creadListPrec
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadPrec.ReadPrec [GHC.Base.NonEmpty a]
[GblId,
 Arity=1,
 Str=<L,U(A,A,C(C(U)),C(C1(U)))>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3NHW]
        let {
          sat_s3NHX [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (GHC.Base.NonEmpty a_X3KIt)
          [LclId] =
              [$dRead_s3NHW] \r [eta_B2 eta_B1]
                  GHC.Read.$fReadNonEmpty1 $dRead_s3NHW eta_B2 eta_B1;
        } in  GHC.Read.list sat_s3NHX;

GHC.Read.$fReadNonEmpty_$creadList
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadP.ReadS [GHC.Base.NonEmpty a]
[GblId,
 Arity=1,
 Str=<L,U(A,A,C(C(U)),C(C1(U)))>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3NHY]
        let {
          sat_s3NI0 [Occ=Once]
            :: Text.ParserCombinators.ReadP.P [GHC.Base.NonEmpty a_X3KIu]
          [LclId] =
              [$dRead_s3NHY] \u []
                  let {
                    sat_s3NHZ [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec
                           (GHC.Base.NonEmpty a_X3KIu)
                    [LclId] =
                        [$dRead_s3NHY] \r [eta_B2 eta_B1]
                            GHC.Read.$fReadNonEmpty1 $dRead_s3NHY eta_B2 eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s3NHZ
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NI0;

GHC.Read.$fReadNonEmpty [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Read.Read a => GHC.Read.Read (GHC.Base.NonEmpty a)
[GblId[DFunId], Arity=1, Str=<L,U(A,A,C(C(U)),C(C1(U)))>m] =
    [] \r [$dRead_s3NI1]
        let {
          sat_s3NI5 [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 [GHC.Base.NonEmpty a_X3KIv]
          [LclId] =
              [$dRead_s3NI1] \u []
                  GHC.Read.$fReadNonEmpty_$creadListPrec $dRead_s3NI1; } in
        let {
          sat_s3NI4 [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (GHC.Base.NonEmpty a_X3KIv)
          [LclId] =
              [$dRead_s3NI1] \r [eta_B2 eta_B1]
                  GHC.Read.$fReadNonEmpty1 $dRead_s3NI1 eta_B2 eta_B1; } in
        let {
          sat_s3NI3 [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS [GHC.Base.NonEmpty a_X3KIv]
          [LclId] =
              [$dRead_s3NI1] \u []
                  GHC.Read.$fReadNonEmpty_$creadList $dRead_s3NI1; } in
        let {
          sat_s3NI2 [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS (GHC.Base.NonEmpty a_X3KIv)
          [LclId] =
              [$dRead_s3NI1] \r [eta_B1]
                  GHC.Read.$fReadNonEmpty_$creadsPrec $dRead_s3NI1 eta_B1;
        } in  GHC.Read.C:Read [sat_s3NI2 sat_s3NI3 sat_s3NI4 sat_s3NI5];

GHC.Read.$fReadArray4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "array"#;

GHC.Read.$fReadArray3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Read.$fReadArray4;

GHC.Read.$fReadArray_lexeme :: Text.Read.Lex.Lexeme
[GblId, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Ident! [GHC.Read.$fReadArray3];

GHC.Read.$fReadArray1
  :: forall a b.
     (GHC.Arr.Ix a, GHC.Read.Read a, GHC.Read.Read b) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        (GHC.Arr.Array a b -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=5,
 Str=<L,U(A,A,C(C1(U(U))),A,A,C(U(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dIx_s3NI6 $dRead_s3NI7 $dRead1_s3NI8 eta_s3NI9 eta1_s3NIa]
        let {
          lvl2_s3NIb [Occ=OnceL, Dmd=<L,C(C(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> forall b2.
                  ((a_a3KUf, b_a3KUg) -> Text.ParserCombinators.ReadP.P b2)
                  -> Text.ParserCombinators.ReadP.P b2
          [LclId, Arity=2, Unf=OtherCon []] =
              [$dRead_s3NI7 $dRead1_s3NI8] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,)1 $dRead_s3NI7 $dRead1_s3NI8 eta_B2 eta_B1; } in
        let {
          sat_s3NIq [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (GHC.Arr.Array a_a3KUf b_a3KUg)
          [LclId] =
              [$dIx_s3NI6 $dRead_s3NI7 lvl2_s3NIb] \r [c_s3NIc eta2_s3NId]
                  case c_s3NIc of {
                    GHC.Types.I# x_s3NIf [Occ=Once] ->
                        case <=# [x_s3NIf 10#] of {
                          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                          1# ->
                              let {
                                sat_s3NIn [Occ=Once]
                                  :: () -> Text.ParserCombinators.ReadP.P b2_X3nvw
                                [LclId] =
                                    [$dIx_s3NI6 $dRead_s3NI7 lvl2_s3NIb eta2_s3NId] \r [a1_s3NIh]
                                        let {
                                          sat_s3NIm [Occ=Once]
                                            :: (a_a3KUf, a_a3KUf)
                                               -> Text.ParserCombinators.ReadP.P b2_X3nvw
                                          [LclId] =
                                              [$dIx_s3NI6 lvl2_s3NIb eta2_s3NId] \r [a2_s3NIi]
                                                  let {
                                                    sat_s3NIl [Occ=Once]
                                                      :: [(a_a3KUf, b_a3KUg)]
                                                         -> Text.ParserCombinators.ReadP.P b2_X3nvw
                                                    [LclId] =
                                                        [$dIx_s3NI6
                                                         eta2_s3NId
                                                         a2_s3NIi] \r [a3_s3NIj]
                                                            let {
                                                              sat_s3NIk [Occ=Once]
                                                                :: GHC.Arr.Array a_a3KUf b_a3KUg
                                                              [LclId] =
                                                                  [$dIx_s3NI6
                                                                   a2_s3NIi
                                                                   a3_s3NIj] \u []
                                                                      GHC.Arr.array
                                                                          $dIx_s3NI6
                                                                          a2_s3NIi
                                                                          a3_s3NIj;
                                                            } in  eta2_s3NId sat_s3NIk;
                                                  } in 
                                                    GHC.Read.list
                                                        lvl2_s3NIb GHC.Read.$fReadArray2 sat_s3NIl;
                                        } in 
                                          GHC.Read.$fRead(,)1
                                              $dRead_s3NI7
                                              $dRead_s3NI7
                                              GHC.Read.$fReadArray2
                                              sat_s3NIm;
                              } in 
                                case
                                    Text.Read.Lex.$wexpect GHC.Read.$fReadArray_lexeme sat_s3NIn
                                of
                                { Unit# ww1_s3NIp [Occ=Once] ->
                                      Text.ParserCombinators.ReadP.Look [ww1_s3NIp];
                                };
                        };
                  };
        } in  GHC.Read.list3 sat_s3NIq eta_s3NI9 eta1_s3NIa;

GHC.Read.$fReadArray_$creadsPrec
  :: forall a b.
     (GHC.Arr.Ix a, GHC.Read.Read a, GHC.Read.Read b) =>
     GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS (GHC.Arr.Array a b)
[GblId,
 Arity=4,
 Str=<L,U(A,A,C(C1(U(U))),A,A,C(U(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dIx_s3NIr $dRead_s3NIs $dRead1_s3NIt n_s3NIu]
        let {
          sat_s3NIv [Occ=Once]
            :: Text.ParserCombinators.ReadP.P (GHC.Arr.Array a_X3L9l b_X3L9n)
          [LclId] =
              [$dIx_s3NIr $dRead_s3NIs $dRead1_s3NIt n_s3NIu] \u []
                  GHC.Read.$fReadArray1
                      $dIx_s3NIr
                      $dRead_s3NIs
                      $dRead1_s3NIt
                      n_s3NIu
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NIv;

GHC.Read.$fReadArray_$creadListPrec
  :: forall a b.
     (GHC.Arr.Ix a, GHC.Read.Read a, GHC.Read.Read b) =>
     Text.ParserCombinators.ReadPrec.ReadPrec [GHC.Arr.Array a b]
[GblId,
 Arity=3,
 Str=<L,U(A,A,C(C1(U(U))),A,A,C(U(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dIx_s3NIw $dRead_s3NIx $dRead1_s3NIy]
        let {
          sat_s3NIz [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (GHC.Arr.Array a_X3L9m b_X3L9o)
          [LclId] =
              [$dIx_s3NIw $dRead_s3NIx $dRead1_s3NIy] \r [eta_B2 eta_B1]
                  GHC.Read.$fReadArray1
                      $dIx_s3NIw $dRead_s3NIx $dRead1_s3NIy eta_B2 eta_B1;
        } in  GHC.Read.list sat_s3NIz;

GHC.Read.$fReadArray_$creadList
  :: forall a b.
     (GHC.Arr.Ix a, GHC.Read.Read a, GHC.Read.Read b) =>
     Text.ParserCombinators.ReadP.ReadS [GHC.Arr.Array a b]
[GblId,
 Arity=3,
 Str=<L,U(A,A,C(C1(U(U))),A,A,C(U(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dIx_s3NIA $dRead_s3NIB $dRead1_s3NIC]
        let {
          sat_s3NIE [Occ=Once]
            :: Text.ParserCombinators.ReadP.P [GHC.Arr.Array a_X3L9n b_X3L9p]
          [LclId] =
              [$dIx_s3NIA $dRead_s3NIB $dRead1_s3NIC] \u []
                  let {
                    sat_s3NID [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec
                           (GHC.Arr.Array a_X3L9n b_X3L9p)
                    [LclId] =
                        [$dIx_s3NIA $dRead_s3NIB $dRead1_s3NIC] \r [eta_B2 eta_B1]
                            GHC.Read.$fReadArray1
                                $dIx_s3NIA $dRead_s3NIB $dRead1_s3NIC eta_B2 eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s3NID
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3NIE;

GHC.Read.$fReadArray [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b.
     (GHC.Arr.Ix a, GHC.Read.Read a, GHC.Read.Read b) =>
     GHC.Read.Read (GHC.Arr.Array a b)
[GblId[DFunId],
 Arity=3,
 Str=<L,U(A,A,C(C1(U(U))),A,A,C(U(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>m] =
    [] \r [$dIx_s3NIF $dRead_s3NIG $dRead1_s3NIH]
        let {
          sat_s3NIL [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 [GHC.Arr.Array a_X3L9o b_X3L9q]
          [LclId] =
              [$dIx_s3NIF $dRead_s3NIG $dRead1_s3NIH] \u []
                  GHC.Read.$fReadArray_$creadListPrec
                      $dIx_s3NIF $dRead_s3NIG $dRead1_s3NIH; } in
        let {
          sat_s3NIK [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (GHC.Arr.Array a_X3L9o b_X3L9q)
          [LclId] =
              [$dIx_s3NIF $dRead_s3NIG $dRead1_s3NIH] \r [eta_B2 eta_B1]
                  GHC.Read.$fReadArray1
                      $dIx_s3NIF $dRead_s3NIG $dRead1_s3NIH eta_B2 eta_B1; } in
        let {
          sat_s3NIJ [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS
                 [GHC.Arr.Array a_X3L9o b_X3L9q]
          [LclId] =
              [$dIx_s3NIF $dRead_s3NIG $dRead1_s3NIH] \u []
                  GHC.Read.$fReadArray_$creadList
                      $dIx_s3NIF $dRead_s3NIG $dRead1_s3NIH; } in
        let {
          sat_s3NII [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS
                    (GHC.Arr.Array a_X3L9o b_X3L9q)
          [LclId] =
              [$dIx_s3NIF $dRead_s3NIG $dRead1_s3NIH] \r [eta_B1]
                  GHC.Read.$fReadArray_$creadsPrec
                      $dIx_s3NIF $dRead_s3NIG $dRead1_s3NIH eta_B1;
        } in  GHC.Read.C:Read [sat_s3NII sat_s3NIJ sat_s3NIK sat_s3NIL];

lvl1_r3N5M :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.Read.lexLitChar_removeNulls GHC.Types.[];
GHC.Read.lexLitChar_removeNulls [Occ=LoopBreaker]
  :: [GHC.Types.Char] -> [GHC.Types.Char]
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3NIM]
        case ds_s3NIM of {
          [] -> [] [];
          : ds1_s3NIO [Occ=Once!] ds2_s3NIP [Occ=Once*] ->
              case ds1_s3NIO of wild1_s3NIQ {
                GHC.Types.C# ds3_s3NIR [Occ=Once!] ->
                    case ds3_s3NIR of {
                      __DEFAULT ->
                          let {
                            sat_s3NIT [Occ=Once] :: [GHC.Types.Char]
                            [LclId] =
                                [ds2_s3NIP] \u [] GHC.Read.lexLitChar_removeNulls ds2_s3NIP;
                          } in  : [wild1_s3NIQ sat_s3NIT];
                      '\\'# ->
                          case ds2_s3NIP of wild2_s3NIU {
                            [] -> : [wild1_s3NIQ lvl1_r3N5M];
                            : ds5_s3NIV [Occ=Once!] xs_s3NIW [Occ=Once] ->
                                case ds5_s3NIV of {
                                  GHC.Types.C# ds6_s3NIY [Occ=Once!] ->
                                      case ds6_s3NIY of {
                                        __DEFAULT ->
                                            let {
                                              sat_s3NJ0 [Occ=Once] :: [GHC.Types.Char]
                                              [LclId] =
                                                  [wild2_s3NIU] \u []
                                                      GHC.Read.lexLitChar_removeNulls wild2_s3NIU;
                                            } in  : [wild1_s3NIQ sat_s3NJ0];
                                        '&'# -> GHC.Read.lexLitChar_removeNulls xs_s3NIW;
                                      };
                                };
                          };
                    };
              };
        };

GHC.Read.lexLitChar4
  :: GHC.Base.String
     -> Text.ParserCombinators.ReadP.P [GHC.Types.Char]
[GblId, Arity=1, Str=<L,1*U>m4, Unf=OtherCon []] =
    [] \r [s_s3NJ1]
        let {
          sat_s3NJ2 [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [s_s3NJ1] \u [] GHC.Read.lexLitChar_removeNulls s_s3NJ1;
        } in 
          Text.ParserCombinators.ReadP.Result [sat_s3NJ2
                                               Text.ParserCombinators.ReadP.Fail];

GHC.Read.lexLitChar3
  :: Text.ParserCombinators.ReadP.P
       (GHC.Base.String
        -> Text.ParserCombinators.ReadP.P [GHC.Types.Char])
[GblId, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE Text.ParserCombinators.ReadP.Result! [GHC.Read.lexLitChar4
                                                        Text.ParserCombinators.ReadP.Fail];

GHC.Read.lexLitChar2
  :: GHC.Types.Char
     -> Text.ParserCombinators.ReadP.P
          (GHC.Base.String
           -> Text.ParserCombinators.ReadP.P [GHC.Types.Char])
[GblId, Arity=1, Str=<L,A>m4, Unf=OtherCon []] =
    [] \r [a1_s3NJ3] GHC.Read.lexLitChar3;

GHC.Read.lexLitChar1
  :: Text.ParserCombinators.ReadP.P [GHC.Types.Char]
[GblId] =
    [] \u []
        case Text.Read.Lex.$wlexChar GHC.Read.lexLitChar2 of {
          Unit# ww1_s3NJ5 [Occ=Once] ->
              let {
                sat_s3NJ6 [Occ=Once]
                  :: Text.ParserCombinators.ReadP.P
                       (GHC.Base.String
                        -> Text.ParserCombinators.ReadP.P [GHC.Types.Char])
                [LclId] =
                    CCCS Text.ParserCombinators.ReadP.Get! [ww1_s3NJ5];
              } in 
                Text.ParserCombinators.ReadP.gather_gath GHC.Base.id sat_s3NJ6;
        };

GHC.Read.lexLitChar
  :: Text.ParserCombinators.ReadP.ReadS GHC.Base.String
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.lexLitChar1 eta_B1;

GHC.Read.C:Read
  :: forall a.
     (GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS a)
     -> Text.ParserCombinators.ReadP.ReadS [a]
     -> Text.ParserCombinators.ReadPrec.ReadPrec a
     -> Text.ParserCombinators.ReadPrec.ReadPrec [a]
     -> GHC.Read.Read a
[GblId[DataCon],
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.Read.C:Read [eta_B4 eta_B3 eta_B2 eta_B1];


==================== Pre unarise: ====================
2018-03-16 15:58:50.965918233 UTC

GHC.Read.readsPrec
  :: forall a.
     GHC.Read.Read a =>
     GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS a
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SLLL),U(U,A,A,A)>] =
    [] \r [v_s3Xil]
        case v_s3Xil of {
          GHC.Read.C:Read v_s3Xin [Occ=Once]
                          _ [Occ=Dead]
                          _ [Occ=Dead]
                          _ [Occ=Dead] ->
              v_s3Xin;
        };

GHC.Read.readList
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadP.ReadS [a]
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LSLL),U(A,U,A,A)>] =
    [] \r [v_s3Xir]
        case v_s3Xir of {
          GHC.Read.C:Read _ [Occ=Dead]
                          v_s3Xiu [Occ=Once]
                          _ [Occ=Dead]
                          _ [Occ=Dead] ->
              v_s3Xiu;
        };

GHC.Read.readPrec
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadPrec.ReadPrec a
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLSL),U(A,A,U,A)>] =
    [] \r [v_s3Xix]
        case v_s3Xix of {
          GHC.Read.C:Read _ [Occ=Dead]
                          _ [Occ=Dead]
                          v_s3XiB [Occ=Once]
                          _ [Occ=Dead] ->
              v_s3XiB;
        };

GHC.Read.readListPrec
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadPrec.ReadPrec [a]
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLS),U(A,A,A,U)>] =
    [] \r [v_s3XiD]
        case v_s3XiD of {
          GHC.Read.C:Read _ [Occ=Dead]
                          _ [Occ=Dead]
                          _ [Occ=Dead]
                          v_s3XiI [Occ=Once] ->
              v_s3XiI;
        };

$dmreadListPrec1_r3N5i
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        ([a] -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*U(A,1*C(U),A,A)><L,A><L,C(U)>m2,
 Unf=OtherCon []] =
    sat-only [] \r [$dRead_s3XiJ n_s3XiK eta_s3XiL]
        let {
          sat_s3XiM [Occ=Once, Dmd=<L,C(U)>]
            :: Text.ParserCombinators.ReadP.ReadS [a_a3K2E]
          [LclId] =
              [$dRead_s3XiJ] \u [] GHC.Read.readList $dRead_s3XiJ;
        } in 
          case
              Text.ParserCombinators.ReadP.$wreadS_to_P sat_s3XiM eta_s3XiL
          of
          { Unit# ww1_s3XiO [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3XiO];
          };

GHC.Read.$dmreadListPrec
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadPrec.ReadPrec [a]
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*U(A,1*C(U),A,A)><L,A><L,C(U)>m2,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        $dmreadListPrec1_r3N5i eta_B3 eta_B2 eta_B1;

$dmreadPrec1_r3N5j
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*U(1*C1(C(U)),A,A,A)><L,U>,
 Unf=OtherCon []] =
    sat-only [] \r [$dRead_s3XiP eta_s3XiQ]
        let {
          w_s3XiR [Occ=OnceL, Dmd=<L,C(U)>]
            :: Text.ParserCombinators.ReadP.ReadS a_X3K6w
          [LclId] =
              [$dRead_s3XiP eta_s3XiQ] \u []
                  GHC.Read.readsPrec $dRead_s3XiP eta_s3XiQ; } in
        let {
          sat_s3XiV [Occ=Once]
            :: forall b.
               (a_X3K6w -> Text.ParserCombinators.ReadP.P b)
               -> Text.ParserCombinators.ReadP.P b
          [LclId] =
              [w_s3XiR] \r [w1_s3XiS]
                  case
                      Text.ParserCombinators.ReadP.$wreadS_to_P w_s3XiR w1_s3XiS
                  of
                  { Unit# ww1_s3XiU [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Look [ww1_s3XiU];
                  };
        } in  sat_s3XiV;

GHC.Read.$dmreadPrec
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadPrec.ReadPrec a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*U(1*C1(C(U)),A,A,A)><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] $dmreadPrec1_r3N5j eta_B2 eta_B1;

GHC.Read.$dmreadsPrec
  :: forall a.
     GHC.Read.Read a =>
     GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*U(A,A,1*C1(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XiW eta_s3XiX]
        let {
          sat_s3XiY [Occ=Once] :: Text.ParserCombinators.ReadP.P a_X3K6x
          [LclId] =
              [$dRead_s3XiW eta_s3XiX] \u []
                  GHC.Read.readPrec
                      $dRead_s3XiW
                      eta_s3XiX
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XiY;

GHC.Read.$fRead()7 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

GHC.Read.readListDefault
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadP.ReadS [a]
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,1*U(A,A,A,1*C1(C1(U)))>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XiZ]
        let {
          sat_s3Xj0 [Occ=Once] :: Text.ParserCombinators.ReadP.P [a_a3Ksg]
          [LclId] =
              [$dRead_s3XiZ] \u []
                  GHC.Read.readListPrec
                      $dRead_s3XiZ
                      GHC.Read.$fRead()7
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3Xj0;

GHC.Read.lex1 :: Text.ParserCombinators.ReadP.P GHC.Base.String
[GblId] =
    [] \u []
        case
            Text.Read.Lex.$whsLex
                Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
        of
        { Unit# ww1_s3Xj2 [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3Xj2];
        };

GHC.Read.lex :: Text.ParserCombinators.ReadP.ReadS GHC.Base.String
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [s_s3Xj3]
        Text.ParserCombinators.ReadP.run GHC.Read.lex1 s_s3Xj3;

GHC.Read.readParen1 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     a
     -> GHC.Base.String
     -> [(a, GHC.Base.String)]
     -> [(a, GHC.Base.String)]
[GblId, Arity=3, Str=<L,U><L,U><L,U>, Unf=OtherCon []] =
    [] \r [ww_s3Xj4 ww1_s3Xj5 w_s3Xj6]
        let {
          go_s3Xj7 [Occ=LoopBreaker]
            :: [(GHC.Base.String, GHC.Base.String)]
               -> [(a_a3Ksn, GHC.Base.String)]
          [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
              sat-only [ww_s3Xj4 w_s3Xj6 go_s3Xj7] \r [ds_s3Xj8]
                  case ds_s3Xj8 of {
                    [] -> w_s3Xj6;
                    : y_s3Xja [Occ=Once!] ys_s3Xjb [Occ=Once*] ->
                        case y_s3Xja of {
                          (,) ds1_s3Xjd [Occ=Once!] u_s3Xje [Occ=Once] ->
                              case ds1_s3Xjd of {
                                [] -> go_s3Xj7 ys_s3Xjb;
                                : ds2_s3Xjg [Occ=Once!] ds3_s3Xjh [Occ=Once!] ->
                                    case ds2_s3Xjg of {
                                      GHC.Types.C# ds4_s3Xjj [Occ=Once!] ->
                                          case ds4_s3Xjj of {
                                            __DEFAULT -> go_s3Xj7 ys_s3Xjb;
                                            ')'# ->
                                                case ds3_s3Xjh of {
                                                  [] ->
                                                      let {
                                                        sat_s3Xjn [Occ=Once]
                                                          :: [(a_a3Ksn, GHC.Base.String)]
                                                        [LclId] =
                                                            [go_s3Xj7 ys_s3Xjb] \u []
                                                                go_s3Xj7 ys_s3Xjb; } in
                                                      let {
                                                        sat_s3Xjm [Occ=Once]
                                                          :: (a_a3Ksn, GHC.Base.String)
                                                        [LclId] =
                                                            CCCS (,)! [ww_s3Xj4 u_s3Xje];
                                                      } in  : [sat_s3Xjm sat_s3Xjn];
                                                  : _ [Occ=Dead] _ [Occ=Dead] -> go_s3Xj7 ys_s3Xjb;
                                                };
                                          };
                                    };
                              };
                        };
                  };
        } in 
          case
              Text.ParserCombinators.ReadP.run GHC.Read.lex1 ww1_s3Xj5
          of
          sat_s3Xjq
          { __DEFAULT -> go_s3Xj7 sat_s3Xjq;
          };

GHC.Read.readParen
  :: forall a.
     GHC.Types.Bool
     -> Text.ParserCombinators.ReadP.ReadS a
     -> Text.ParserCombinators.ReadP.ReadS a
[GblId, Arity=3, Str=<S,1*U><L,C(U)><L,U>, Unf=OtherCon []] =
    [] \r [b_s3Xjr g_s3Xjs eta_s3Xjt]
        let {
          go_s3Xju [Occ=LoopBreaker]
            :: [(GHC.Base.String, GHC.Base.String)]
               -> [(a_a3Ksn, GHC.Base.String)]
          [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
              sat-only [g_s3Xjs go_s3Xju] \r [ds_s3Xjv]
                  case ds_s3Xjv of {
                    [] -> [] [];
                    : y_s3Xjx [Occ=Once!] ys_s3Xjy [Occ=Once*] ->
                        case y_s3Xjx of {
                          (,) ds1_s3XjA [Occ=Once!] s_s3XjB ->
                              case ds1_s3XjA of {
                                [] -> go_s3Xju ys_s3Xjy;
                                : ds2_s3XjD [Occ=Once!] ds3_s3XjE [Occ=Once!] ->
                                    case ds2_s3XjD of {
                                      GHC.Types.C# ds4_s3XjG [Occ=Once!] ->
                                          case ds4_s3XjG of {
                                            __DEFAULT -> go_s3Xju ys_s3Xjy;
                                            '('# ->
                                                case ds3_s3XjE of {
                                                  [] ->
                                                      let {
                                                        z_s3XjJ [Occ=OnceL]
                                                          :: [(a_a3Ksn, GHC.Base.String)]
                                                        [LclId] =
                                                            [go_s3Xju ys_s3Xjy s_s3XjB] \u []
                                                                let {
                                                                  z1_s3XjK [Occ=OnceL]
                                                                    :: [(a_a3Ksn, GHC.Base.String)]
                                                                  [LclId] =
                                                                      [go_s3Xju ys_s3Xjy] \u []
                                                                          go_s3Xju ys_s3Xjy; } in
                                                                let {
                                                                  go1_s3XjL [Occ=LoopBreaker]
                                                                    :: [(a_a3Ksn, GHC.Base.String)]
                                                                       -> [(a_a3Ksn,
                                                                            GHC.Base.String)]
                                                                  [LclId,
                                                                   Arity=1,
                                                                   Str=<S,1*U>,
                                                                   Unf=OtherCon []] =
                                                                      sat-only [z1_s3XjK
                                                                                go1_s3XjL] \r [ds6_s3XjM]
                                                                          case ds6_s3XjM of {
                                                                            [] -> z1_s3XjK;
                                                                            : y1_s3XjO [Occ=Once!]
                                                                              ys1_s3XjP [Occ=Once] ->
                                                                                case y1_s3XjO of {
                                                                                  (,) ww1_s3XjR [Occ=Once]
                                                                                      ww2_s3XjS [Occ=Once] ->
                                                                                      let {
                                                                                        sat_s3XjT [Occ=Once]
                                                                                          :: [(a_a3Ksn,
                                                                                               GHC.Base.String)]
                                                                                        [LclId] =
                                                                                            [go1_s3XjL
                                                                                             ys1_s3XjP] \u []
                                                                                                go1_s3XjL
                                                                                                    ys1_s3XjP;
                                                                                      } in 
                                                                                        GHC.Read.readParen1
                                                                                            ww1_s3XjR
                                                                                            ww2_s3XjS
                                                                                            sat_s3XjT;
                                                                                };
                                                                          };
                                                                } in 
                                                                  case
                                                                      Text.ParserCombinators.ReadP.run
                                                                          GHC.Read.lex1 s_s3XjB
                                                                  of
                                                                  sat_s3XjU
                                                                  { __DEFAULT ->
                                                                        case
                                                                            go_s3Xju sat_s3XjU
                                                                        of
                                                                        sat_s3XjV
                                                                        { __DEFAULT ->
                                                                              go1_s3XjL sat_s3XjV;
                                                                        };
                                                                  }; } in
                                                      let {
                                                        go1_s3XjW [Occ=LoopBreaker]
                                                          :: [(a_a3Ksn, GHC.Base.String)]
                                                             -> [(a_a3Ksn, GHC.Base.String)]
                                                        [LclId,
                                                         Arity=1,
                                                         Str=<S,1*U>,
                                                         Unf=OtherCon []] =
                                                            sat-only [z_s3XjJ
                                                                      go1_s3XjW] \r [ds6_s3XjX]
                                                                case ds6_s3XjX of {
                                                                  [] -> z_s3XjJ;
                                                                  : y1_s3XjZ [Occ=Once!]
                                                                    ys1_s3Xk0 [Occ=Once] ->
                                                                      case y1_s3XjZ of {
                                                                        (,) ww1_s3Xk2 [Occ=Once]
                                                                            ww2_s3Xk3 [Occ=Once] ->
                                                                            let {
                                                                              sat_s3Xk4 [Occ=Once]
                                                                                :: [(a_a3Ksn,
                                                                                     GHC.Base.String)]
                                                                              [LclId] =
                                                                                  [go1_s3XjW
                                                                                   ys1_s3Xk0] \u []
                                                                                      go1_s3XjW
                                                                                          ys1_s3Xk0;
                                                                            } in 
                                                                              GHC.Read.readParen1
                                                                                  ww1_s3Xk2
                                                                                  ww2_s3Xk3
                                                                                  sat_s3Xk4;
                                                                      };
                                                                };
                                                      } in 
                                                        case g_s3Xjs s_s3XjB of sat_s3Xk5 {
                                                          __DEFAULT -> go1_s3XjW sat_s3Xk5;
                                                        };
                                                  : _ [Occ=Dead] _ [Occ=Dead] -> go_s3Xju ys_s3Xjy;
                                                };
                                          };
                                    };
                              };
                        };
                  };
        } in 
          case b_s3Xjr of {
            GHC.Types.False ->
                let {
                  sat_s3Xkb [Occ=Once, Dmd=<L,1*U>] :: [(a_a3Ksn, GHC.Base.String)]
                  [LclId] =
                      [eta_s3Xjt go_s3Xju] \s []
                          case
                              Text.ParserCombinators.ReadP.run GHC.Read.lex1 eta_s3Xjt
                          of
                          sat_s3Xka
                          { __DEFAULT -> go_s3Xju sat_s3Xka;
                          };
                } in 
                  case g_s3Xjs eta_s3Xjt of sat_s3Xk9 {
                    __DEFAULT -> GHC.Base.++ sat_s3Xk9 sat_s3Xkb;
                  };
            GHC.Types.True ->
                case
                    Text.ParserCombinators.ReadP.run GHC.Read.lex1 eta_s3Xjt
                of
                sat_s3Xkc
                { __DEFAULT -> go_s3Xju sat_s3Xkc;
                };
          };

GHC.Read.readLitChar1
  :: Text.ParserCombinators.ReadP.P GHC.Types.Char
[GblId] =
    [] \u []
        case
            Text.Read.Lex.$wlexChar
                Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
        of
        { Unit# ww1_s3Xke [Occ=Once] ->
              Text.ParserCombinators.ReadP.Get [ww1_s3Xke];
        };

GHC.Read.readLitChar
  :: Text.ParserCombinators.ReadP.ReadS GHC.Types.Char
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.readLitChar1 eta_B1;

GHC.Read.$www1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Char# -> Text.ParserCombinators.ReadP.P GHC.Base.String
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [ww_s3Xkf]
        case ord# [ww_s3Xkf] of sat_s3Xkg {
          __DEFAULT ->
              case -# [sat_s3Xkg 48#] of sat_s3Xkh {
                __DEFAULT ->
                    case int2Word# [sat_s3Xkh] of sat_s3Xki {
                      __DEFAULT ->
                          case leWord# [sat_s3Xki 9##] of {
                            __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                            1# ->
                                let {
                                  wild_s3Xkk [Occ=OnceL] :: GHC.Types.Char
                                  [LclId, Unf=OtherCon []] =
                                      CCCS GHC.Types.C#! [ww_s3Xkf]; } in
                                let {
                                  sat_s3Xkn [Occ=Once]
                                    :: GHC.Base.String
                                       -> Text.ParserCombinators.ReadP.P GHC.Base.String
                                  [LclId] =
                                      [wild_s3Xkk] \r [a1_s3Xkl]
                                          let {
                                            sat_s3Xkm [Occ=Once] :: GHC.Base.String
                                            [LclId] =
                                                CCCS :! [wild_s3Xkk a1_s3Xkl];
                                          } in 
                                            Text.ParserCombinators.ReadP.Result [sat_s3Xkm
                                                                                 Text.ParserCombinators.ReadP.Fail];
                                } in 
                                  case
                                      Text.ParserCombinators.ReadP.$wmunch
                                          GHC.Unicode.isDigit sat_s3Xkn
                                  of
                                  { Unit# ww2_s3Xkp [Occ=Once] ->
                                        Text.ParserCombinators.ReadP.Look [ww2_s3Xkp];
                                  };
                          };
                    };
              };
        };

GHC.Read.lexDigits_ww1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P GHC.Base.String
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [w_s3Xkq]
        case w_s3Xkq of {
          GHC.Types.C# ww1_s3Xks [Occ=Once] -> GHC.Read.$www1 ww1_s3Xks;
        };

GHC.Read.lexDigits1
  :: Text.ParserCombinators.ReadP.P GHC.Base.String
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE Text.ParserCombinators.ReadP.Get! [GHC.Read.lexDigits_ww1];

GHC.Read.lexDigits
  :: Text.ParserCombinators.ReadP.ReadS GHC.Base.String
[GblId, Arity=1, Caf=NoCafRefs, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.lexDigits1 eta_B1;

GHC.Read.$fReadLexeme1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        (Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=2, Str=<L,A><L,U>m2, Unf=OtherCon []] =
    [] \r [ds_s3Xkt eta_s3Xku] Text.Read.Lex.lex1 eta_s3Xku;

GHC.Read.lexP
  :: Text.ParserCombinators.ReadPrec.ReadPrec Text.Read.Lex.Lexeme
[GblId, Arity=2, Str=<L,A><L,U>m2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Read.$fReadLexeme1 eta_B2 eta_B1;

GHC.Read.$fReadChar4
  :: forall b. GHC.Base.String -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [a3_s3Xkv]
        case a3_s3Xkv of {
          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
        };

GHC.Read.$fReadChar3 :: forall b. Text.ParserCombinators.ReadP.P b
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE Text.ParserCombinators.ReadP.Look! [GHC.Read.$fReadChar4];

GHC.Read.$fReadGeneralCategory36
  :: forall a.
     (GHC.Base.String, Text.ParserCombinators.ReadPrec.ReadPrec a)
     -> Text.ParserCombinators.ReadPrec.ReadPrec a
     -> Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP a
[GblId,
 Arity=3,
 Str=<L,U(U,C(C1(U)))><L,1*C1(C(U))><L,U>,
 Unf=OtherCon []] =
    [] \r [x_s3Xkx eta_s3Xky eta1_s3Xkz]
        let {
          ds3_s3XkA [Occ=OnceL, Dmd=<L,C(U)>]
            :: Text.ParserCombinators.ReadP.ReadP a_a3Kqu
          [LclId] =
              [eta_s3Xky eta1_s3Xkz] \u [] eta_s3Xky eta1_s3Xkz; } in
        let {
          sat_s3XkV [Occ=Once]
            :: forall b.
               (a_a3Kqu -> Text.ParserCombinators.ReadP.P b)
               -> Text.ParserCombinators.ReadP.P b
          [LclId] =
              [x_s3Xkx eta1_s3Xkz ds3_s3XkA] \r [k_s3XkB]
                  case x_s3Xkx of {
                    (,) s_s3XkD [Occ=OnceL*] p_s3XkE ->
                        let {
                          lvl116_s3XkF [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b_a3nvJ
                          [LclId] =
                              [eta1_s3Xkz k_s3XkB s_s3XkD p_s3XkE] \u []
                                  let {
                                    sat_s3XkO [Occ=Once] :: Text.ParserCombinators.ReadP.P b_a3nvJ
                                    [LclId] =
                                        [eta1_s3Xkz k_s3XkB s_s3XkD p_s3XkE] \u []
                                            let {
                                              lvl2_s3XkG [Occ=OnceL*]
                                                :: Text.ParserCombinators.ReadP.P b_a3nvJ
                                              [LclId] =
                                                  [eta1_s3Xkz k_s3XkB p_s3XkE] \u []
                                                      p_s3XkE eta1_s3Xkz k_s3XkB; } in
                                            let {
                                              sat_s3XkN [Occ=Once]
                                                :: Text.Read.Lex.Lexeme
                                                   -> Text.ParserCombinators.ReadP.P b_a3nvJ
                                              [LclId] =
                                                  [s_s3XkD lvl2_s3XkG] \r [a1_s3XkH]
                                                      case a1_s3XkH of {
                                                        __DEFAULT ->
                                                            Text.ParserCombinators.ReadP.Fail [];
                                                        Text.Read.Lex.Ident s'_s3XkJ [Occ=Once] ->
                                                            case
                                                                GHC.Base.eqString s_s3XkD s'_s3XkJ
                                                            of
                                                            { GHC.Types.False ->
                                                                  Text.ParserCombinators.ReadP.Fail [];
                                                              GHC.Types.True -> lvl2_s3XkG;
                                                            };
                                                        Text.Read.Lex.Symbol s'_s3XkL [Occ=Once] ->
                                                            case
                                                                GHC.Base.eqString s_s3XkD s'_s3XkL
                                                            of
                                                            { GHC.Types.False ->
                                                                  Text.ParserCombinators.ReadP.Fail [];
                                                              GHC.Types.True -> lvl2_s3XkG;
                                                            };
                                                      };
                                            } in  Text.Read.Lex.expect2 sat_s3XkN;
                                  } in 
                                    Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                        GHC.Read.$fReadChar3 sat_s3XkO; } in
                        let {
                          k1_s3XkP [Occ=OnceL, Dmd=<L,C(U)>]
                            :: () -> Text.ParserCombinators.ReadP.P b_a3nvJ
                          [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
                              [lvl116_s3XkF] \r [a3_s3XkQ] lvl116_s3XkF; } in
                        let {
                          sat_s3XkU [Occ=Once] :: Text.ParserCombinators.ReadP.P b_a3nvJ
                          [LclId] =
                              [ds3_s3XkA k_s3XkB] \u [] ds3_s3XkA k_s3XkB; } in
                        let {
                          sat_s3XkS [Occ=Once]
                            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b_a3nvJ
                          [LclId] =
                              [k1_s3XkP] \r [a1_s3XkR]
                                  Text.ParserCombinators.ReadP.skipSpaces2 a1_s3XkR k1_s3XkP; } in
                        let {
                          sat_s3XkT [Occ=Once] :: Text.ParserCombinators.ReadP.P b_a3nvJ
                          [LclId] =
                              CCCS Text.ParserCombinators.ReadP.Look! [sat_s3XkS];
                        } in 
                          Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                              sat_s3XkT sat_s3XkU;
                  };
        } in  sat_s3XkV;

lvl_r3N5k
  :: forall a b.
     (a -> Text.ParserCombinators.ReadP.P b)
     -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []] =
    [] \r [eta_s3XkW] Text.ParserCombinators.ReadP.Fail [];

GHC.Read.choose2 [Occ=LoopBreaker]
  :: forall a.
     [(GHC.Base.String, Text.ParserCombinators.ReadPrec.ReadPrec a)]
     -> Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP a
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ds_s3XkX eta_s3XkY]
        case ds_s3XkX of {
          [] -> lvl_r3N5k;
          : y_s3Xl0 [Occ=Once] ys_s3Xl1 [Occ=OnceL] ->
              let {
                sat_s3Xl2 [Occ=Once]
                  :: Text.ParserCombinators.ReadPrec.ReadPrec a_a3Kqu
                [LclId] =
                    [ys_s3Xl1] \r [eta_B1] GHC.Read.choose2 ys_s3Xl1 eta_B1;
              } in  GHC.Read.$fReadGeneralCategory36 y_s3Xl0 sat_s3Xl2 eta_s3XkY;
        };

GHC.Read.choose1
  :: forall a.
     [(GHC.Base.String, Text.ParserCombinators.ReadPrec.ReadPrec a)]
     -> Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP a
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [sps_s3Xl3 eta_s3Xl4] GHC.Read.choose2 sps_s3Xl3 eta_s3Xl4;

GHC.Read.choose
  :: forall a.
     [(GHC.Base.String, Text.ParserCombinators.ReadPrec.ReadPrec a)]
     -> Text.ParserCombinators.ReadPrec.ReadPrec a
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Read.choose1 eta_B2 eta_B1;

GHC.Read.expectP1
  :: Text.Read.Lex.Lexeme
     -> Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (() -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=3, Str=<L,U><L,A><L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [lexeme_s3Xl5 eta_s3Xl6 eta1_s3Xl7]
        Text.Read.Lex.expect1 lexeme_s3Xl5 eta1_s3Xl7;

GHC.Read.expectP
  :: Text.Read.Lex.Lexeme
     -> Text.ParserCombinators.ReadPrec.ReadPrec ()
[GblId, Arity=3, Str=<L,U><L,A><L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.Read.expectP1 eta_B3 eta_B2 eta_B1;

GHC.Read.readField3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "="#;

GHC.Read.readField2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Read.readField3;

GHC.Read.readField_lexeme :: Text.Read.Lex.Lexeme
[GblId, Str=m3, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Punc! [GHC.Read.readField2];

GHC.Read.$wreadField [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Base.String
     -> Text.ParserCombinators.ReadPrec.ReadPrec a
     -> Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> (# GHC.Base.String -> Text.ParserCombinators.ReadP.P b #)
[GblId,
 Arity=4,
 Str=<L,U><L,1*C1(C1(U))><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [w_s3Xl8 w1_s3Xl9 w2_s3Xla w3_s3Xlb]
        let {
          sat_s3Xli [Occ=Once]
            :: () -> Text.ParserCombinators.ReadP.P b_s3MnQ
          [LclId] =
              [w1_s3Xl9 w2_s3Xla w3_s3Xlb] \r [a1_s3Xld]
                  let {
                    sat_s3Xlf [Occ=Once]
                      :: () -> Text.ParserCombinators.ReadP.P b_s3MnQ
                    [LclId] =
                        [w1_s3Xl9 w2_s3Xla w3_s3Xlb] \r [a2_s3Xle]
                            w1_s3Xl9 w2_s3Xla w3_s3Xlb;
                  } in 
                    case
                        Text.Read.Lex.$wexpect GHC.Read.readField_lexeme sat_s3Xlf
                    of
                    { Unit# ww1_s3Xlh [Occ=Once] ->
                          Text.ParserCombinators.ReadP.Look [ww1_s3Xlh];
                    }; } in
        let {
          sat_s3Xlc [Occ=Once] :: Text.Read.Lex.Lexeme
          [LclId] =
              CCCS Text.Read.Lex.Ident! [w_s3Xl8];
        } in  Text.Read.Lex.$wexpect sat_s3Xlc sat_s3Xli;

GHC.Read.readField1 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Base.String
     -> Text.ParserCombinators.ReadPrec.ReadPrec a
     -> Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=4,
 Str=<L,U><L,1*C1(C1(U))><L,U><L,U>m2,
 Unf=OtherCon []] =
    [] \r [w_s3Xlj w1_s3Xlk w2_s3Xll w3_s3Xlm]
        case GHC.Read.$wreadField w_s3Xlj w1_s3Xlk w2_s3Xll w3_s3Xlm of {
          Unit# ww1_s3Xlo [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3Xlo];
        };

GHC.Read.readField [InlPrag=NOINLINE]
  :: forall a.
     GHC.Base.String
     -> Text.ParserCombinators.ReadPrec.ReadPrec a
     -> Text.ParserCombinators.ReadPrec.ReadPrec a
[GblId,
 Arity=4,
 Str=<L,U><L,1*C1(C1(U))><L,U><L,U>m2,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.Read.readField1 eta_B4 eta_B3 eta_B2 eta_B1;

GHC.Read.readSymField5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "("#;

GHC.Read.readSymField4 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Read.readSymField5;

GHC.Read.readSymField_lexeme1 :: Text.Read.Lex.Lexeme
[GblId, Str=m3, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Punc! [GHC.Read.readSymField4];

GHC.Read.readSymField3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ")"#;

GHC.Read.readSymField2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Read.readSymField3;

GHC.Read.readSymField_lexeme :: Text.Read.Lex.Lexeme
[GblId, Str=m3, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Punc! [GHC.Read.readSymField2];

GHC.Read.$wreadSymField [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Base.String
     -> Text.ParserCombinators.ReadPrec.ReadPrec a
     -> Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> (# GHC.Base.String -> Text.ParserCombinators.ReadP.P b #)
[GblId,
 Arity=4,
 Str=<L,U><L,1*C1(C1(U))><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [w_s3Xlp w1_s3Xlq w2_s3Xlr w3_s3Xls]
        let {
          sat_s3XlH [Occ=Once]
            :: () -> Text.ParserCombinators.ReadP.P b_s3Mo0
          [LclId] =
              [w_s3Xlp w1_s3Xlq w2_s3Xlr w3_s3Xls] \r [a1_s3Xlt]
                  let {
                    sat_s3XlE [Occ=Once]
                      :: () -> Text.ParserCombinators.ReadP.P b_s3Mo0
                    [LclId] =
                        [w1_s3Xlq w2_s3Xlr w3_s3Xls] \r [a2_s3Xlv]
                            let {
                              sat_s3XlB [Occ=Once]
                                :: () -> Text.ParserCombinators.ReadP.P b_s3Mo0
                              [LclId] =
                                  [w1_s3Xlq w2_s3Xlr w3_s3Xls] \r [a3_s3Xlw]
                                      let {
                                        sat_s3Xly [Occ=Once]
                                          :: () -> Text.ParserCombinators.ReadP.P b_s3Mo0
                                        [LclId] =
                                            [w1_s3Xlq w2_s3Xlr w3_s3Xls] \r [a4_s3Xlx]
                                                w1_s3Xlq w2_s3Xlr w3_s3Xls;
                                      } in 
                                        case
                                            Text.Read.Lex.$wexpect
                                                GHC.Read.readField_lexeme sat_s3Xly
                                        of
                                        { Unit# ww1_s3XlA [Occ=Once] ->
                                              Text.ParserCombinators.ReadP.Look [ww1_s3XlA];
                                        };
                            } in 
                              case
                                  Text.Read.Lex.$wexpect GHC.Read.readSymField_lexeme sat_s3XlB
                              of
                              { Unit# ww1_s3XlD [Occ=Once] ->
                                    Text.ParserCombinators.ReadP.Look [ww1_s3XlD];
                              }; } in
                  let {
                    sat_s3Xlu [Occ=Once] :: Text.Read.Lex.Lexeme
                    [LclId] =
                        CCCS Text.Read.Lex.Symbol! [w_s3Xlp];
                  } in 
                    case Text.Read.Lex.$wexpect sat_s3Xlu sat_s3XlE of {
                      Unit# ww1_s3XlG [Occ=Once] ->
                          Text.ParserCombinators.ReadP.Look [ww1_s3XlG];
                    };
        } in 
          Text.Read.Lex.$wexpect GHC.Read.readSymField_lexeme1 sat_s3XlH;

GHC.Read.readSymField1 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Base.String
     -> Text.ParserCombinators.ReadPrec.ReadPrec a
     -> Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=4,
 Str=<L,U><L,1*C1(C1(U))><L,U><L,U>m2,
 Unf=OtherCon []] =
    [] \r [w_s3XlI w1_s3XlJ w2_s3XlK w3_s3XlL]
        case
            GHC.Read.$wreadSymField w_s3XlI w1_s3XlJ w2_s3XlK w3_s3XlL
        of
        { Unit# ww1_s3XlN [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3XlN];
        };

GHC.Read.readSymField [InlPrag=NOINLINE]
  :: forall a.
     GHC.Base.String
     -> Text.ParserCombinators.ReadPrec.ReadPrec a
     -> Text.ParserCombinators.ReadPrec.ReadPrec a
[GblId,
 Arity=4,
 Str=<L,U><L,1*C1(C1(U))><L,U><L,U>m2,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.Read.readSymField1 eta_B4 eta_B3 eta_B2 eta_B1;

GHC.Read.$fRead(,)4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ","#;

GHC.Read.$fRead(,)3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Read.$fRead(,)4;

GHC.Read.$fRead(,)_lexeme :: Text.Read.Lex.Lexeme
[GblId, Str=m3, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Punc! [GHC.Read.$fRead(,)3];

GHC.Read.$fRead(,)2
  :: forall a b.
     (GHC.Read.Read a, GHC.Read.Read b) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP (a, b)
[GblId,
 Arity=3,
 Str=<L,1*U(A,A,1*C1(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XlO $dRead1_s3XlP eta_s3XlQ]
        let {
          ds1_s3XlR [Occ=OnceL, Dmd=<L,C(U)>]
            :: Text.ParserCombinators.ReadP.ReadP a_a3KnF
          [LclId] =
              [$dRead_s3XlO eta_s3XlQ] \u []
                  GHC.Read.readPrec $dRead_s3XlO eta_s3XlQ; } in
        let {
          sat_s3Xm2 [Occ=Once]
            :: forall b1.
               ((a_a3KnF, b_a3KnG) -> Text.ParserCombinators.ReadP.P b1)
               -> Text.ParserCombinators.ReadP.P b1
          [LclId] =
              [$dRead1_s3XlP eta_s3XlQ ds1_s3XlR] \r [k1_s3XlS]
                  let {
                    sat_s3Xm1 [Occ=Once]
                      :: a_a3KnF -> Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId] =
                        [$dRead1_s3XlP eta_s3XlQ k1_s3XlS] \r [a1_s3XlT]
                            let {
                              sat_s3XlY [Occ=Once]
                                :: () -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [$dRead1_s3XlP eta_s3XlQ k1_s3XlS a1_s3XlT] \r [a2_s3XlU]
                                      let {
                                        sat_s3XlX [Occ=Once]
                                          :: b_a3KnG -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            [k1_s3XlS a1_s3XlT] \r [a3_s3XlV]
                                                let {
                                                  sat_s3XlW [Occ=Once] :: (a_a3KnF, b_a3KnG)
                                                  [LclId] =
                                                      CCCS (,)! [a1_s3XlT a3_s3XlV];
                                                } in  k1_s3XlS sat_s3XlW;
                                      } in  GHC.Read.readPrec $dRead1_s3XlP eta_s3XlQ sat_s3XlX;
                            } in 
                              case
                                  Text.Read.Lex.$wexpect GHC.Read.$fRead(,)_lexeme sat_s3XlY
                              of
                              { Unit# ww1_s3Xm0 [Occ=Once] ->
                                    Text.ParserCombinators.ReadP.Look [ww1_s3Xm0];
                              };
                  } in  ds1_s3XlR sat_s3Xm1;
        } in  sat_s3Xm2;

GHC.Read.$fRead(,,,)2
  :: forall a b c d.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP (a, b, c, d)
[GblId,
 Arity=5,
 Str=<L,1*U(A,A,1*C1(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Xm3
           $dRead1_s3Xm4
           $dRead2_s3Xm5
           $dRead3_s3Xm6
           eta_s3Xm7]
        let {
          ds1_s3Xm8 [Occ=OnceL, Dmd=<L,C(U)>]
            :: Text.ParserCombinators.ReadP.ReadP (a_a3Ko6, b_a3Ko7)
          [LclId] =
              [$dRead_s3Xm3 $dRead1_s3Xm4 eta_s3Xm7] \u []
                  GHC.Read.$fRead(,)2 $dRead_s3Xm3 $dRead1_s3Xm4 eta_s3Xm7; } in
        let {
          sat_s3Xmp [Occ=Once]
            :: forall b1.
               ((a_a3Ko6, b_a3Ko7, c_a3Ko8, d_a3Ko9)
                -> Text.ParserCombinators.ReadP.P b1)
               -> Text.ParserCombinators.ReadP.P b1
          [LclId] =
              [$dRead2_s3Xm5 $dRead3_s3Xm6 eta_s3Xm7 ds1_s3Xm8] \r [k1_s3Xm9]
                  let {
                    sat_s3Xmo [Occ=Once]
                      :: (a_a3Ko6, b_a3Ko7) -> Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId] =
                        [$dRead2_s3Xm5 $dRead3_s3Xm6 eta_s3Xm7 k1_s3Xm9] \r [a1_s3Xma]
                            case a1_s3Xma of {
                              (,) a2_s3Xmc [Occ=OnceL] b2_s3Xmd [Occ=OnceL] ->
                                  let {
                                    sat_s3Xml [Occ=Once]
                                      :: () -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                    [LclId] =
                                        [$dRead2_s3Xm5
                                         $dRead3_s3Xm6
                                         eta_s3Xm7
                                         k1_s3Xm9
                                         a2_s3Xmc
                                         b2_s3Xmd] \r [a3_s3Xme]
                                            let {
                                              sat_s3Xmk [Occ=Once]
                                                :: (c_a3Ko8, d_a3Ko9)
                                                   -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                              [LclId] =
                                                  [k1_s3Xm9 a2_s3Xmc b2_s3Xmd] \r [a4_s3Xmf]
                                                      case a4_s3Xmf of {
                                                        (,) c1_s3Xmh [Occ=Once]
                                                            d1_s3Xmi [Occ=Once] ->
                                                            let {
                                                              sat_s3Xmj [Occ=Once]
                                                                :: (a_a3Ko6, b_a3Ko7, c_a3Ko8,
                                                                    d_a3Ko9)
                                                              [LclId] =
                                                                  CCCS (,,,)! [a2_s3Xmc
                                                                               b2_s3Xmd
                                                                               c1_s3Xmh
                                                                               d1_s3Xmi];
                                                            } in  k1_s3Xm9 sat_s3Xmj;
                                                      };
                                            } in 
                                              GHC.Read.$fRead(,)2
                                                  $dRead2_s3Xm5 $dRead3_s3Xm6 eta_s3Xm7 sat_s3Xmk;
                                  } in 
                                    case
                                        Text.Read.Lex.$wexpect GHC.Read.$fRead(,)_lexeme sat_s3Xml
                                    of
                                    { Unit# ww1_s3Xmn [Occ=Once] ->
                                          Text.ParserCombinators.ReadP.Look [ww1_s3Xmn];
                                    };
                            };
                  } in  ds1_s3Xm8 sat_s3Xmo;
        } in  sat_s3Xmp;

GHC.Read.$fRead(,,,,,,,)2
  :: forall a b c d e f g h.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP (a, b, c, d, e, f, g, h)
[GblId,
 Arity=9,
 Str=<L,1*U(A,A,1*C1(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Xmq
           $dRead1_s3Xmr
           $dRead2_s3Xms
           $dRead3_s3Xmt
           $dRead4_s3Xmu
           $dRead5_s3Xmv
           $dRead6_s3Xmw
           $dRead7_s3Xmx
           eta_s3Xmy]
        let {
          ds1_s3Xmz [Occ=OnceL, Dmd=<L,C(U)>]
            :: Text.ParserCombinators.ReadP.ReadP
                 (a_a3KoH, b_a3KoI, c_a3KoJ, d_a3KoK)
          [LclId] =
              [$dRead_s3Xmq
               $dRead1_s3Xmr
               $dRead2_s3Xms
               $dRead3_s3Xmt
               eta_s3Xmy] \u []
                  GHC.Read.$fRead(,,,)2
                      $dRead_s3Xmq
                      $dRead1_s3Xmr
                      $dRead2_s3Xms
                      $dRead3_s3Xmt
                      eta_s3Xmy; } in
        let {
          sat_s3XmU [Occ=Once]
            :: forall b1.
               ((a_a3KoH, b_a3KoI, c_a3KoJ, d_a3KoK, e_a3KoL, f_a3KoM, g_a3KoN,
                 h_a3KoO)
                -> Text.ParserCombinators.ReadP.P b1)
               -> Text.ParserCombinators.ReadP.P b1
          [LclId] =
              [$dRead4_s3Xmu
               $dRead5_s3Xmv
               $dRead6_s3Xmw
               $dRead7_s3Xmx
               eta_s3Xmy
               ds1_s3Xmz] \r [k1_s3XmA]
                  let {
                    sat_s3XmT [Occ=Once]
                      :: (a_a3KoH, b_a3KoI, c_a3KoJ, d_a3KoK)
                         -> Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId] =
                        [$dRead4_s3Xmu
                         $dRead5_s3Xmv
                         $dRead6_s3Xmw
                         $dRead7_s3Xmx
                         eta_s3Xmy
                         k1_s3XmA] \r [a1_s3XmB]
                            case a1_s3XmB of {
                              (,,,) a2_s3XmD [Occ=OnceL]
                                    b2_s3XmE [Occ=OnceL]
                                    c1_s3XmF [Occ=OnceL]
                                    d1_s3XmG [Occ=OnceL] ->
                                  let {
                                    sat_s3XmQ [Occ=Once]
                                      :: () -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                    [LclId] =
                                        [$dRead4_s3Xmu
                                         $dRead5_s3Xmv
                                         $dRead6_s3Xmw
                                         $dRead7_s3Xmx
                                         eta_s3Xmy
                                         k1_s3XmA
                                         a2_s3XmD
                                         b2_s3XmE
                                         c1_s3XmF
                                         d1_s3XmG] \r [a3_s3XmH]
                                            let {
                                              sat_s3XmP [Occ=Once]
                                                :: (e_a3KoL, f_a3KoM, g_a3KoN, h_a3KoO)
                                                   -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                              [LclId] =
                                                  [k1_s3XmA
                                                   a2_s3XmD
                                                   b2_s3XmE
                                                   c1_s3XmF
                                                   d1_s3XmG] \r [a4_s3XmI]
                                                      case a4_s3XmI of {
                                                        (,,,) e1_s3XmK [Occ=Once]
                                                              f1_s3XmL [Occ=Once]
                                                              g1_s3XmM [Occ=Once]
                                                              h1_s3XmN [Occ=Once] ->
                                                            let {
                                                              sat_s3XmO [Occ=Once]
                                                                :: (a_a3KoH, b_a3KoI, c_a3KoJ,
                                                                    d_a3KoK, e_a3KoL, f_a3KoM,
                                                                    g_a3KoN, h_a3KoO)
                                                              [LclId] =
                                                                  CCCS (,,,,,,,)! [a2_s3XmD
                                                                                   b2_s3XmE
                                                                                   c1_s3XmF
                                                                                   d1_s3XmG
                                                                                   e1_s3XmK
                                                                                   f1_s3XmL
                                                                                   g1_s3XmM
                                                                                   h1_s3XmN];
                                                            } in  k1_s3XmA sat_s3XmO;
                                                      };
                                            } in 
                                              GHC.Read.$fRead(,,,)2
                                                  $dRead4_s3Xmu
                                                  $dRead5_s3Xmv
                                                  $dRead6_s3Xmw
                                                  $dRead7_s3Xmx
                                                  eta_s3Xmy
                                                  sat_s3XmP;
                                  } in 
                                    case
                                        Text.Read.Lex.$wexpect GHC.Read.$fRead(,)_lexeme sat_s3XmQ
                                    of
                                    { Unit# ww1_s3XmS [Occ=Once] ->
                                          Text.ParserCombinators.ReadP.Look [ww1_s3XmS];
                                    };
                            };
                  } in  ds1_s3Xmz sat_s3XmT;
        } in  sat_s3XmU;

GHC.Read.$wskipSpacesThenP [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     Text.ParserCombinators.ReadPrec.ReadPrec a
     -> Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> (# GHC.Base.String -> Text.ParserCombinators.ReadP.P b #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [w_s3XmV w1_s3XmW w2_s3XmX]
        let {
          skip_s3XmY [Occ=LoopBreaker]
            :: [GHC.Types.Char]
               -> Text.ParserCombinators.ReadPrec.Prec
               -> forall b1.
                  (a_s3MoF -> Text.ParserCombinators.ReadP.P b1)
                  -> Text.ParserCombinators.ReadP.P b1
          [LclId, Arity=3, Str=<S,1*U><L,U><L,U>, Unf=OtherCon []] =
              sat-only [w_s3XmV skip_s3XmY] \r [ds_s3XmZ eta_s3Xn0 eta1_s3Xn1]
                  case ds_s3XmZ of {
                    [] -> w_s3XmV eta_s3Xn0 eta1_s3Xn1;
                    : c_s3Xn3 [Occ=Once!] s_s3Xn4 [Occ=Once] ->
                        case c_s3Xn3 of {
                          GHC.Types.C# ww1_s3Xn6 ->
                              case ord# [ww1_s3Xn6] of sat_s3Xn8 {
                                __DEFAULT ->
                                    case int2Word# [sat_s3Xn8] of x_s3Xn7 [Dmd=<S,U>] {
                                      __DEFAULT ->
                                          let-no-escape {
                                            $j_s3Xn9 [Occ=Once*T[0], Dmd=<L,1*U>]
                                              :: Text.ParserCombinators.ReadP.P b1_X3nqq
                                            [LclId[JoinId(0)], Unf=OtherCon []] =
                                                [skip_s3XmY eta_s3Xn0 eta1_s3Xn1 s_s3Xn4] \r []
                                                    let {
                                                      lvl2_s3Xna [Occ=OnceL]
                                                        :: Text.ParserCombinators.ReadP.P b1_X3nqq
                                                      [LclId] =
                                                          [skip_s3XmY
                                                           eta_s3Xn0
                                                           eta1_s3Xn1
                                                           s_s3Xn4] \u []
                                                              let {
                                                                sat_s3Xnc [Occ=Once]
                                                                  :: a_s3MoF
                                                                     -> Text.ParserCombinators.ReadP.P
                                                                          b1_X3nqq
                                                                [LclId] =
                                                                    [eta1_s3Xn1] \r [a4_s3Xnb]
                                                                        eta1_s3Xn1 a4_s3Xnb;
                                                              } in 
                                                                skip_s3XmY
                                                                    s_s3Xn4
                                                                    eta_s3Xn0
                                                                    sat_s3Xnc; } in
                                                    let {
                                                      sat_s3Xne [Occ=Once]
                                                        :: GHC.Types.Char
                                                           -> Text.ParserCombinators.ReadP.P
                                                                b1_X3nqq
                                                      [LclId] =
                                                          [lvl2_s3Xna] \r [x1_s3Xnd] lvl2_s3Xna;
                                                    } in 
                                                      Text.ParserCombinators.ReadP.Get [sat_s3Xne];
                                          } in 
                                            case leWord# [x_s3Xn7 887##] of {
                                              __DEFAULT ->
                                                  case ord# [ww1_s3Xn6] of sat_s3Xnh {
                                                    __DEFAULT ->
                                                        case
                                                            __pkg_ccall base-4.11.0.0 [sat_s3Xnh
                                                                                       GHC.Prim.realWorld#]
                                                        of
                                                        { (#,#) _ [Occ=Dead]
                                                                ds2_s3Xnk [Occ=Once!] ->
                                                              case ds2_s3Xnk of {
                                                                __DEFAULT -> $j_s3Xn9;
                                                                0# -> w_s3XmV eta_s3Xn0 eta1_s3Xn1;
                                                              };
                                                        };
                                                  };
                                              1# ->
                                                  case x_s3Xn7 of wild1_s3Xnm {
                                                    __DEFAULT ->
                                                        case
                                                            minusWord# [wild1_s3Xnm 9##]
                                                        of
                                                        sat_s3Xnn
                                                        { __DEFAULT ->
                                                              case leWord# [sat_s3Xnn 4##] of {
                                                                __DEFAULT ->
                                                                    case wild1_s3Xnm of {
                                                                      __DEFAULT ->
                                                                          w_s3XmV
                                                                              eta_s3Xn0 eta1_s3Xn1;
                                                                      160## -> $j_s3Xn9;
                                                                    };
                                                                1# -> $j_s3Xn9;
                                                              };
                                                        };
                                                    32## -> $j_s3Xn9;
                                                  };
                                            };
                                    };
                              };
                        };
                  }; } in
        let {
          sat_s3Xnr [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b_s3MoI
          [LclId] =
              [w1_s3XmW w2_s3XmX skip_s3XmY] \r [a1_s3Xnq]
                  skip_s3XmY a1_s3Xnq w1_s3XmW w2_s3XmX;
        } in  Unit# [sat_s3Xnr];

GHC.Read.$fRead()5 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     Text.ParserCombinators.ReadPrec.ReadPrec a
     -> Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><L,U><L,U>m2,
 Unf=OtherCon []] =
    [] \r [w_s3Xns w1_s3Xnt w2_s3Xnu]
        case GHC.Read.$wskipSpacesThenP w_s3Xns w1_s3Xnt w2_s3Xnu of {
          Unit# ww1_s3Xnw [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3Xnw];
        };

GHC.Read.$wparen' [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     Text.ParserCombinators.ReadPrec.ReadPrec a
     -> Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> (# GHC.Types.Char -> Text.ParserCombinators.ReadP.P b #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*C1(C1(U))><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [w_s3Xnx w1_s3Xny w2_s3Xnz]
        let {
          lvl2_s3XnA [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b_s3MoR
          [LclId] =
              [w_s3Xnx w1_s3Xny w2_s3Xnz] \u []
                  let {
                    sat_s3XnN [Occ=Once]
                      :: a_s3MoO -> Text.ParserCombinators.ReadP.P b_s3MoR
                    [LclId] =
                        [w1_s3Xny w2_s3Xnz] \r [a1_s3XnB]
                            let {
                              sat_s3XnK [Occ=Once]
                                :: Text.ParserCombinators.ReadPrec.ReadPrec a_s3MoO
                              [LclId] =
                                  [a1_s3XnB] \r [n_s3XnC k1_s3XnD]
                                      let {
                                        lvl3_s3XnE [Occ=OnceL]
                                          :: Text.ParserCombinators.ReadP.P b1_X3nNG
                                        [LclId] =
                                            [a1_s3XnB k1_s3XnD] \u [] k1_s3XnD a1_s3XnB; } in
                                      let {
                                        sat_s3XnJ [Occ=Once]
                                          :: GHC.Types.Char
                                             -> Text.ParserCombinators.ReadP.P b1_X3nNG
                                        [LclId] =
                                            [lvl3_s3XnE] \r [a2_s3XnF]
                                                case a2_s3XnF of {
                                                  GHC.Types.C# x_s3XnH [Occ=Once!] ->
                                                      case x_s3XnH of {
                                                        __DEFAULT ->
                                                            Text.ParserCombinators.ReadP.Fail [];
                                                        ')'# -> lvl3_s3XnE;
                                                      };
                                                };
                                      } in  Text.ParserCombinators.ReadP.Get [sat_s3XnJ];
                            } in 
                              case GHC.Read.$wskipSpacesThenP sat_s3XnK w1_s3Xny w2_s3Xnz of {
                                Unit# ww1_s3XnM [Occ=Once] ->
                                    Text.ParserCombinators.ReadP.Look [ww1_s3XnM];
                              };
                  } in 
                    w_s3Xnx Text.ParserCombinators.ReadPrec.minPrec sat_s3XnN; } in
        let {
          sat_s3XnS [Occ=Once]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b_s3MoR
          [LclId] =
              [lvl2_s3XnA] \r [a1_s3XnO]
                  case a1_s3XnO of {
                    GHC.Types.C# x_s3XnQ [Occ=Once!] ->
                        case x_s3XnQ of {
                          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                          '('# -> lvl2_s3XnA;
                        };
                  };
        } in  Unit# [sat_s3XnS];

GHC.Read.paren2 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     Text.ParserCombinators.ReadPrec.ReadPrec a
     -> Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*C1(C1(U))><L,U><L,U>m1,
 Unf=OtherCon []] =
    [] \r [w_s3XnT w1_s3XnU w2_s3XnV]
        case GHC.Read.$wparen' w_s3XnT w1_s3XnU w2_s3XnV of {
          Unit# ww1_s3XnX [Occ=Once] ->
              Text.ParserCombinators.ReadP.Get [ww1_s3XnX];
        };

GHC.Read.paren1
  :: forall a.
     Text.ParserCombinators.ReadPrec.ReadPrec a
     -> Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><L,U><L,U>m2,
 Unf=OtherCon []] =
    [] \r [p_s3XnY eta_s3XnZ eta1_s3Xo0]
        let {
          sat_s3Xo1 [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec a_a3KmL
          [LclId] =
              [p_s3XnY] \r [eta_B2 eta_B1] GHC.Read.paren2 p_s3XnY eta_B2 eta_B1;
        } in 
          case GHC.Read.$wskipSpacesThenP sat_s3Xo1 eta_s3XnZ eta1_s3Xo0 of {
            Unit# ww1_s3Xo3 [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3Xo3];
          };

GHC.Read.paren
  :: forall a.
     Text.ParserCombinators.ReadPrec.ReadPrec a
     -> Text.ParserCombinators.ReadPrec.ReadPrec a
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><L,U><L,U>m2,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] GHC.Read.paren1 eta_B3 eta_B2 eta_B1;

GHC.Read.list3
  :: forall a.
     Text.ParserCombinators.ReadPrec.ReadPrec a
     -> Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=3, Str=<L,C(C(U))><L,U><L,U>, Unf=OtherCon []] =
    [] \r [p_s3Xo4 eta_s3Xo5 eta1_s3Xo6]
        let {
          optional_s3Xo7 [Occ=OnceL]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> Text.ParserCombinators.ReadP.ReadP a_a3KmP
          [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
              [p_s3Xo4 optional1_s3Xo8] \r [n_s3Xo9]
                  let {
                    ds2_s3Xoa [Occ=OnceL, Dmd=<L,C(U)>]
                      :: Text.ParserCombinators.ReadP.ReadP a_a3KmP
                    [LclId] =
                        [p_s3Xo4 n_s3Xo9] \u [] p_s3Xo4 n_s3Xo9; } in
                  let {
                    sat_s3Xog [Occ=Once]
                      :: forall b1.
                         (a_a3KmP -> Text.ParserCombinators.ReadP.P b1)
                         -> Text.ParserCombinators.ReadP.P b1
                    [LclId] =
                        [optional1_s3Xo8 n_s3Xo9 ds2_s3Xoa] \r [k_s3Xob]
                            let {
                              sat_s3Xof [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_a3nvJ
                              [LclId] =
                                  [optional1_s3Xo8 n_s3Xo9 k_s3Xob] \u []
                                      case GHC.Read.$wparen' optional1_s3Xo8 n_s3Xo9 k_s3Xob of {
                                        Unit# ww1_s3Xoe [Occ=Once] ->
                                            Text.ParserCombinators.ReadP.Get [ww1_s3Xoe];
                                      };
                            } in 
                              case ds2_s3Xoa k_s3Xob of sat_s3Xoc {
                                __DEFAULT ->
                                    Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                        sat_s3Xoc sat_s3Xof;
                              };
                  } in  sat_s3Xog;
          optional1_s3Xo8 [Occ=LoopBreaker]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> forall b1.
                  (a_a3KmP -> Text.ParserCombinators.ReadP.P b1)
                  -> Text.ParserCombinators.ReadP.P b1
          [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
              [optional_s3Xo7] \r [w_s3Xoh w1_s3Xoi]
                  case
                      GHC.Read.$wskipSpacesThenP optional_s3Xo7 w_s3Xoh w1_s3Xoi
                  of
                  { Unit# ww1_s3Xok [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Look [ww1_s3Xok];
                  };
        } in  optional1_s3Xo8 eta_s3Xo5 eta1_s3Xo6;

GHC.Read.parens
  :: forall a.
     Text.ParserCombinators.ReadPrec.ReadPrec a
     -> Text.ParserCombinators.ReadPrec.ReadPrec a
[GblId, Arity=3, Str=<L,C(C(U))><L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] GHC.Read.list3 eta_B3 eta_B2 eta_B1;

GHC.Read.$fRead(,,,,,,,,,,,,,,)1
  :: forall a b c d e f g h i j k l m n o.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l, GHC.Read.Read m, GHC.Read.Read n,
      GHC.Read.Read o) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        ((a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)
         -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=17,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Xol
           $dRead1_s3Xom
           $dRead2_s3Xon
           $dRead3_s3Xoo
           $dRead4_s3Xop
           $dRead5_s3Xoq
           $dRead6_s3Xor
           $dRead7_s3Xos
           $dRead8_s3Xot
           $dRead9_s3Xou
           $dRead10_s3Xov
           $dRead11_s3Xow
           $dRead12_s3Xox
           $dRead13_s3Xoy
           $dRead14_s3Xoz
           eta_s3XoA
           eta1_s3XoB]
        let {
          p_s3XoC [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> Text.ParserCombinators.ReadP.ReadP
                    (a_a3Kwb, b_a3Kwc, c_a3Kwd, d_a3Kwe, e_a3Kwf, f_a3Kwg, g_a3Kwh,
                     h_a3Kwi, i_a3Kwj, j_a3Kwk, k_a3Kwl, l_a3Kwm, m_a3Kwn, n_a3Kwo,
                     o_a3Kwp)
          [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
              [$dRead_s3Xol
               $dRead1_s3Xom
               $dRead2_s3Xon
               $dRead3_s3Xoo
               $dRead4_s3Xop
               $dRead5_s3Xoq
               $dRead6_s3Xor
               $dRead7_s3Xos
               $dRead8_s3Xot
               $dRead9_s3Xou
               $dRead10_s3Xov
               $dRead11_s3Xow
               $dRead12_s3Xox
               $dRead13_s3Xoy
               $dRead14_s3Xoz] \r [n1_s3XoD]
                  let {
                    ds1_s3XoE [Occ=OnceL, Dmd=<L,C(U)>]
                      :: Text.ParserCombinators.ReadP.ReadP
                           (a_a3Kwb, b_a3Kwc, c_a3Kwd, d_a3Kwe, e_a3Kwf, f_a3Kwg, g_a3Kwh,
                            h_a3Kwi)
                    [LclId] =
                        [$dRead_s3Xol
                         $dRead1_s3Xom
                         $dRead2_s3Xon
                         $dRead3_s3Xoo
                         $dRead4_s3Xop
                         $dRead5_s3Xoq
                         $dRead6_s3Xor
                         $dRead7_s3Xos
                         n1_s3XoD] \u []
                            GHC.Read.$fRead(,,,,,,,)2
                                $dRead_s3Xol
                                $dRead1_s3Xom
                                $dRead2_s3Xon
                                $dRead3_s3Xoo
                                $dRead4_s3Xop
                                $dRead5_s3Xoq
                                $dRead6_s3Xor
                                $dRead7_s3Xos
                                n1_s3XoD; } in
                  let {
                    sat_s3Xpi [Occ=Once]
                      :: forall b2.
                         ((a_a3Kwb, b_a3Kwc, c_a3Kwd, d_a3Kwe, e_a3Kwf, f_a3Kwg, g_a3Kwh,
                           h_a3Kwi, i_a3Kwj, j_a3Kwk, k_a3Kwl, l_a3Kwm, m_a3Kwn, n_a3Kwo,
                           o_a3Kwp)
                          -> Text.ParserCombinators.ReadP.P b2)
                         -> Text.ParserCombinators.ReadP.P b2
                    [LclId] =
                        [$dRead8_s3Xot
                         $dRead9_s3Xou
                         $dRead10_s3Xov
                         $dRead11_s3Xow
                         $dRead12_s3Xox
                         $dRead13_s3Xoy
                         $dRead14_s3Xoz
                         n1_s3XoD
                         ds1_s3XoE] \r [k1_s3XoF]
                            let {
                              sat_s3Xph [Occ=Once]
                                :: (a_a3Kwb, b_a3Kwc, c_a3Kwd, d_a3Kwe, e_a3Kwf, f_a3Kwg, g_a3Kwh,
                                    h_a3Kwi)
                                   -> Text.ParserCombinators.ReadP.P b2_a3nIU
                              [LclId] =
                                  [$dRead8_s3Xot
                                   $dRead9_s3Xou
                                   $dRead10_s3Xov
                                   $dRead11_s3Xow
                                   $dRead12_s3Xox
                                   $dRead13_s3Xoy
                                   $dRead14_s3Xoz
                                   n1_s3XoD
                                   k1_s3XoF] \r [a1_s3XoG]
                                      case a1_s3XoG of {
                                        (,,,,,,,) a2_s3XoI [Occ=OnceL]
                                                  b3_s3XoJ [Occ=OnceL]
                                                  c1_s3XoK [Occ=OnceL]
                                                  d1_s3XoL [Occ=OnceL]
                                                  e1_s3XoM [Occ=OnceL]
                                                  f1_s3XoN [Occ=OnceL]
                                                  g1_s3XoO [Occ=OnceL]
                                                  h1_s3XoP [Occ=OnceL] ->
                                            let {
                                              sat_s3Xpe [Occ=Once]
                                                :: () -> Text.ParserCombinators.ReadP.P b2_a3nIU
                                              [LclId] =
                                                  [$dRead8_s3Xot
                                                   $dRead9_s3Xou
                                                   $dRead10_s3Xov
                                                   $dRead11_s3Xow
                                                   $dRead12_s3Xox
                                                   $dRead13_s3Xoy
                                                   $dRead14_s3Xoz
                                                   n1_s3XoD
                                                   k1_s3XoF
                                                   a2_s3XoI
                                                   b3_s3XoJ
                                                   c1_s3XoK
                                                   d1_s3XoL
                                                   e1_s3XoM
                                                   f1_s3XoN
                                                   g1_s3XoO
                                                   h1_s3XoP] \r [a3_s3XoQ]
                                                      let {
                                                        sat_s3Xpd [Occ=Once]
                                                          :: (i_a3Kwj, j_a3Kwk, k_a3Kwl, l_a3Kwm)
                                                             -> Text.ParserCombinators.ReadP.P
                                                                  b2_a3nIU
                                                        [LclId] =
                                                            [$dRead12_s3Xox
                                                             $dRead13_s3Xoy
                                                             $dRead14_s3Xoz
                                                             n1_s3XoD
                                                             k1_s3XoF
                                                             a2_s3XoI
                                                             b3_s3XoJ
                                                             c1_s3XoK
                                                             d1_s3XoL
                                                             e1_s3XoM
                                                             f1_s3XoN
                                                             g1_s3XoO
                                                             h1_s3XoP] \r [a4_s3XoR]
                                                                case a4_s3XoR of {
                                                                  (,,,) i1_s3XoT [Occ=OnceL]
                                                                        j1_s3XoU [Occ=OnceL]
                                                                        k2_s3XoV [Occ=OnceL]
                                                                        l1_s3XoW [Occ=OnceL] ->
                                                                      let {
                                                                        sat_s3Xpa [Occ=Once]
                                                                          :: ()
                                                                             -> Text.ParserCombinators.ReadP.P
                                                                                  b2_a3nIU
                                                                        [LclId] =
                                                                            [$dRead12_s3Xox
                                                                             $dRead13_s3Xoy
                                                                             $dRead14_s3Xoz
                                                                             n1_s3XoD
                                                                             k1_s3XoF
                                                                             a2_s3XoI
                                                                             b3_s3XoJ
                                                                             c1_s3XoK
                                                                             d1_s3XoL
                                                                             e1_s3XoM
                                                                             f1_s3XoN
                                                                             g1_s3XoO
                                                                             h1_s3XoP
                                                                             i1_s3XoT
                                                                             j1_s3XoU
                                                                             k2_s3XoV
                                                                             l1_s3XoW] \r [a5_s3XoX]
                                                                                let {
                                                                                  sat_s3Xp9 [Occ=Once]
                                                                                    :: (m_a3Kwn,
                                                                                        n_a3Kwo)
                                                                                       -> Text.ParserCombinators.ReadP.P
                                                                                            b2_a3nIU
                                                                                  [LclId] =
                                                                                      [$dRead14_s3Xoz
                                                                                       n1_s3XoD
                                                                                       k1_s3XoF
                                                                                       a2_s3XoI
                                                                                       b3_s3XoJ
                                                                                       c1_s3XoK
                                                                                       d1_s3XoL
                                                                                       e1_s3XoM
                                                                                       f1_s3XoN
                                                                                       g1_s3XoO
                                                                                       h1_s3XoP
                                                                                       i1_s3XoT
                                                                                       j1_s3XoU
                                                                                       k2_s3XoV
                                                                                       l1_s3XoW] \r [a6_s3XoY]
                                                                                          case
                                                                                              a6_s3XoY
                                                                                          of
                                                                                          { (,) m1_s3Xp0 [Occ=OnceL]
                                                                                                n2_s3Xp1 [Occ=OnceL] ->
                                                                                                let {
                                                                                                  sat_s3Xp6 [Occ=Once]
                                                                                                    :: ()
                                                                                                       -> Text.ParserCombinators.ReadP.P
                                                                                                            b2_a3nIU
                                                                                                  [LclId] =
                                                                                                      [$dRead14_s3Xoz
                                                                                                       n1_s3XoD
                                                                                                       k1_s3XoF
                                                                                                       a2_s3XoI
                                                                                                       b3_s3XoJ
                                                                                                       c1_s3XoK
                                                                                                       d1_s3XoL
                                                                                                       e1_s3XoM
                                                                                                       f1_s3XoN
                                                                                                       g1_s3XoO
                                                                                                       h1_s3XoP
                                                                                                       i1_s3XoT
                                                                                                       j1_s3XoU
                                                                                                       k2_s3XoV
                                                                                                       l1_s3XoW
                                                                                                       m1_s3Xp0
                                                                                                       n2_s3Xp1] \r [a7_s3Xp2]
                                                                                                          let {
                                                                                                            sat_s3Xp5 [Occ=Once]
                                                                                                              :: o_a3Kwp
                                                                                                                 -> Text.ParserCombinators.ReadP.P
                                                                                                                      b2_a3nIU
                                                                                                            [LclId] =
                                                                                                                [k1_s3XoF
                                                                                                                 a2_s3XoI
                                                                                                                 b3_s3XoJ
                                                                                                                 c1_s3XoK
                                                                                                                 d1_s3XoL
                                                                                                                 e1_s3XoM
                                                                                                                 f1_s3XoN
                                                                                                                 g1_s3XoO
                                                                                                                 h1_s3XoP
                                                                                                                 i1_s3XoT
                                                                                                                 j1_s3XoU
                                                                                                                 k2_s3XoV
                                                                                                                 l1_s3XoW
                                                                                                                 m1_s3Xp0
                                                                                                                 n2_s3Xp1] \r [a8_s3Xp3]
                                                                                                                    let {
                                                                                                                      sat_s3Xp4 [Occ=Once]
                                                                                                                        :: (a_a3Kwb,
                                                                                                                            b_a3Kwc,
                                                                                                                            c_a3Kwd,
                                                                                                                            d_a3Kwe,
                                                                                                                            e_a3Kwf,
                                                                                                                            f_a3Kwg,
                                                                                                                            g_a3Kwh,
                                                                                                                            h_a3Kwi,
                                                                                                                            i_a3Kwj,
                                                                                                                            j_a3Kwk,
                                                                                                                            k_a3Kwl,
                                                                                                                            l_a3Kwm,
                                                                                                                            m_a3Kwn,
                                                                                                                            n_a3Kwo,
                                                                                                                            o_a3Kwp)
                                                                                                                      [LclId] =
                                                                                                                          CCCS (,,,,,,,,,,,,,,)! [a2_s3XoI
                                                                                                                                                  b3_s3XoJ
                                                                                                                                                  c1_s3XoK
                                                                                                                                                  d1_s3XoL
                                                                                                                                                  e1_s3XoM
                                                                                                                                                  f1_s3XoN
                                                                                                                                                  g1_s3XoO
                                                                                                                                                  h1_s3XoP
                                                                                                                                                  i1_s3XoT
                                                                                                                                                  j1_s3XoU
                                                                                                                                                  k2_s3XoV
                                                                                                                                                  l1_s3XoW
                                                                                                                                                  m1_s3Xp0
                                                                                                                                                  n2_s3Xp1
                                                                                                                                                  a8_s3Xp3];
                                                                                                                    } in 
                                                                                                                      k1_s3XoF
                                                                                                                          sat_s3Xp4;
                                                                                                          } in 
                                                                                                            GHC.Read.readPrec
                                                                                                                $dRead14_s3Xoz
                                                                                                                n1_s3XoD
                                                                                                                sat_s3Xp5;
                                                                                                } in 
                                                                                                  case
                                                                                                      Text.Read.Lex.$wexpect
                                                                                                          GHC.Read.$fRead(,)_lexeme
                                                                                                          sat_s3Xp6
                                                                                                  of
                                                                                                  { Unit# ww1_s3Xp8 [Occ=Once] ->
                                                                                                        Text.ParserCombinators.ReadP.Look [ww1_s3Xp8];
                                                                                                  };
                                                                                          };
                                                                                } in 
                                                                                  GHC.Read.$fRead(,)2
                                                                                      $dRead12_s3Xox
                                                                                      $dRead13_s3Xoy
                                                                                      n1_s3XoD
                                                                                      sat_s3Xp9;
                                                                      } in 
                                                                        case
                                                                            Text.Read.Lex.$wexpect
                                                                                GHC.Read.$fRead(,)_lexeme
                                                                                sat_s3Xpa
                                                                        of
                                                                        { Unit# ww1_s3Xpc [Occ=Once] ->
                                                                              Text.ParserCombinators.ReadP.Look [ww1_s3Xpc];
                                                                        };
                                                                };
                                                      } in 
                                                        GHC.Read.$fRead(,,,)2
                                                            $dRead8_s3Xot
                                                            $dRead9_s3Xou
                                                            $dRead10_s3Xov
                                                            $dRead11_s3Xow
                                                            n1_s3XoD
                                                            sat_s3Xpd;
                                            } in 
                                              case
                                                  Text.Read.Lex.$wexpect
                                                      GHC.Read.$fRead(,)_lexeme sat_s3Xpe
                                              of
                                              { Unit# ww1_s3Xpg [Occ=Once] ->
                                                    Text.ParserCombinators.ReadP.Look [ww1_s3Xpg];
                                              };
                                      };
                            } in  ds1_s3XoE sat_s3Xph;
                  } in  sat_s3Xpi; } in
        let {
          lvl2_s3Xpj [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> forall b2.
                  ((a_a3Kwb, b_a3Kwc, c_a3Kwd, d_a3Kwe, e_a3Kwf, f_a3Kwg, g_a3Kwh,
                    h_a3Kwi, i_a3Kwj, j_a3Kwk, k_a3Kwl, l_a3Kwm, m_a3Kwn, n_a3Kwo,
                    o_a3Kwp)
                   -> Text.ParserCombinators.ReadP.P b2)
                  -> Text.ParserCombinators.ReadP.P b2
          [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
              [p_s3XoC] \r [w_s3Xpk w1_s3Xpl]
                  case GHC.Read.$wparen' p_s3XoC w_s3Xpk w1_s3Xpl of {
                    Unit# ww1_s3Xpn [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Get [ww1_s3Xpn];
                  }; } in
        let {
          sat_s3Xps [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_a3Kwb, b_a3Kwc, c_a3Kwd, d_a3Kwe, e_a3Kwf, f_a3Kwg, g_a3Kwh,
                  h_a3Kwi, i_a3Kwj, j_a3Kwk, k_a3Kwl, l_a3Kwm, m_a3Kwn, n_a3Kwo,
                  o_a3Kwp)
          [LclId] =
              [lvl2_s3Xpj] \r [eta2_s3Xpo eta3_s3Xpp]
                  case
                      GHC.Read.$wskipSpacesThenP lvl2_s3Xpj eta2_s3Xpo eta3_s3Xpp
                  of
                  { Unit# ww1_s3Xpr [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Look [ww1_s3Xpr];
                  };
        } in  GHC.Read.list3 sat_s3Xps eta_s3XoA eta1_s3XoB;

GHC.Read.$fRead(,,,,,,,,,,,,,)1
  :: forall a b c d e f g h i j k l m n.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l, GHC.Read.Read m, GHC.Read.Read n) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        ((a, b, c, d, e, f, g, h, i, j, k, l, m, n)
         -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=16,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Xpt
           $dRead1_s3Xpu
           $dRead2_s3Xpv
           $dRead3_s3Xpw
           $dRead4_s3Xpx
           $dRead5_s3Xpy
           $dRead6_s3Xpz
           $dRead7_s3XpA
           $dRead8_s3XpB
           $dRead9_s3XpC
           $dRead10_s3XpD
           $dRead11_s3XpE
           $dRead12_s3XpF
           $dRead13_s3XpG
           eta_s3XpH
           eta1_s3XpI]
        let {
          p_s3XpJ [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> Text.ParserCombinators.ReadP.ReadP
                    (a_a3Kyh, b_a3Kyi, c_a3Kyj, d_a3Kyk, e_a3Kyl, f_a3Kym, g_a3Kyn,
                     h_a3Kyo, i_a3Kyp, j_a3Kyq, k_a3Kyr, l_a3Kys, m_a3Kyt, n_a3Kyu)
          [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
              [$dRead_s3Xpt
               $dRead1_s3Xpu
               $dRead2_s3Xpv
               $dRead3_s3Xpw
               $dRead4_s3Xpx
               $dRead5_s3Xpy
               $dRead6_s3Xpz
               $dRead7_s3XpA
               $dRead8_s3XpB
               $dRead9_s3XpC
               $dRead10_s3XpD
               $dRead11_s3XpE
               $dRead12_s3XpF
               $dRead13_s3XpG] \r [n1_s3XpK]
                  let {
                    ds1_s3XpL [Occ=OnceL, Dmd=<L,C(U)>]
                      :: Text.ParserCombinators.ReadP.ReadP
                           (a_a3Kyh, b_a3Kyi, c_a3Kyj, d_a3Kyk, e_a3Kyl, f_a3Kym, g_a3Kyn,
                            h_a3Kyo)
                    [LclId] =
                        [$dRead_s3Xpt
                         $dRead1_s3Xpu
                         $dRead2_s3Xpv
                         $dRead3_s3Xpw
                         $dRead4_s3Xpx
                         $dRead5_s3Xpy
                         $dRead6_s3Xpz
                         $dRead7_s3XpA
                         n1_s3XpK] \u []
                            GHC.Read.$fRead(,,,,,,,)2
                                $dRead_s3Xpt
                                $dRead1_s3Xpu
                                $dRead2_s3Xpv
                                $dRead3_s3Xpw
                                $dRead4_s3Xpx
                                $dRead5_s3Xpy
                                $dRead6_s3Xpz
                                $dRead7_s3XpA
                                n1_s3XpK; } in
                  let {
                    sat_s3Xqj [Occ=Once]
                      :: forall b2.
                         ((a_a3Kyh, b_a3Kyi, c_a3Kyj, d_a3Kyk, e_a3Kyl, f_a3Kym, g_a3Kyn,
                           h_a3Kyo, i_a3Kyp, j_a3Kyq, k_a3Kyr, l_a3Kys, m_a3Kyt, n_a3Kyu)
                          -> Text.ParserCombinators.ReadP.P b2)
                         -> Text.ParserCombinators.ReadP.P b2
                    [LclId] =
                        [$dRead8_s3XpB
                         $dRead9_s3XpC
                         $dRead10_s3XpD
                         $dRead11_s3XpE
                         $dRead12_s3XpF
                         $dRead13_s3XpG
                         n1_s3XpK
                         ds1_s3XpL] \r [k1_s3XpM]
                            let {
                              sat_s3Xqi [Occ=Once]
                                :: (a_a3Kyh, b_a3Kyi, c_a3Kyj, d_a3Kyk, e_a3Kyl, f_a3Kym, g_a3Kyn,
                                    h_a3Kyo)
                                   -> Text.ParserCombinators.ReadP.P b2_a3nIU
                              [LclId] =
                                  [$dRead8_s3XpB
                                   $dRead9_s3XpC
                                   $dRead10_s3XpD
                                   $dRead11_s3XpE
                                   $dRead12_s3XpF
                                   $dRead13_s3XpG
                                   n1_s3XpK
                                   k1_s3XpM] \r [a1_s3XpN]
                                      case a1_s3XpN of {
                                        (,,,,,,,) a2_s3XpP [Occ=OnceL]
                                                  b3_s3XpQ [Occ=OnceL]
                                                  c1_s3XpR [Occ=OnceL]
                                                  d1_s3XpS [Occ=OnceL]
                                                  e1_s3XpT [Occ=OnceL]
                                                  f1_s3XpU [Occ=OnceL]
                                                  g1_s3XpV [Occ=OnceL]
                                                  h1_s3XpW [Occ=OnceL] ->
                                            let {
                                              sat_s3Xqf [Occ=Once]
                                                :: () -> Text.ParserCombinators.ReadP.P b2_a3nIU
                                              [LclId] =
                                                  [$dRead8_s3XpB
                                                   $dRead9_s3XpC
                                                   $dRead10_s3XpD
                                                   $dRead11_s3XpE
                                                   $dRead12_s3XpF
                                                   $dRead13_s3XpG
                                                   n1_s3XpK
                                                   k1_s3XpM
                                                   a2_s3XpP
                                                   b3_s3XpQ
                                                   c1_s3XpR
                                                   d1_s3XpS
                                                   e1_s3XpT
                                                   f1_s3XpU
                                                   g1_s3XpV
                                                   h1_s3XpW] \r [a3_s3XpX]
                                                      let {
                                                        sat_s3Xqe [Occ=Once]
                                                          :: (i_a3Kyp, j_a3Kyq, k_a3Kyr, l_a3Kys)
                                                             -> Text.ParserCombinators.ReadP.P
                                                                  b2_a3nIU
                                                        [LclId] =
                                                            [$dRead12_s3XpF
                                                             $dRead13_s3XpG
                                                             n1_s3XpK
                                                             k1_s3XpM
                                                             a2_s3XpP
                                                             b3_s3XpQ
                                                             c1_s3XpR
                                                             d1_s3XpS
                                                             e1_s3XpT
                                                             f1_s3XpU
                                                             g1_s3XpV
                                                             h1_s3XpW] \r [a4_s3XpY]
                                                                case a4_s3XpY of {
                                                                  (,,,) i1_s3Xq0 [Occ=OnceL]
                                                                        j1_s3Xq1 [Occ=OnceL]
                                                                        k2_s3Xq2 [Occ=OnceL]
                                                                        l1_s3Xq3 [Occ=OnceL] ->
                                                                      let {
                                                                        sat_s3Xqb [Occ=Once]
                                                                          :: ()
                                                                             -> Text.ParserCombinators.ReadP.P
                                                                                  b2_a3nIU
                                                                        [LclId] =
                                                                            [$dRead12_s3XpF
                                                                             $dRead13_s3XpG
                                                                             n1_s3XpK
                                                                             k1_s3XpM
                                                                             a2_s3XpP
                                                                             b3_s3XpQ
                                                                             c1_s3XpR
                                                                             d1_s3XpS
                                                                             e1_s3XpT
                                                                             f1_s3XpU
                                                                             g1_s3XpV
                                                                             h1_s3XpW
                                                                             i1_s3Xq0
                                                                             j1_s3Xq1
                                                                             k2_s3Xq2
                                                                             l1_s3Xq3] \r [a5_s3Xq4]
                                                                                let {
                                                                                  sat_s3Xqa [Occ=Once]
                                                                                    :: (m_a3Kyt,
                                                                                        n_a3Kyu)
                                                                                       -> Text.ParserCombinators.ReadP.P
                                                                                            b2_a3nIU
                                                                                  [LclId] =
                                                                                      [k1_s3XpM
                                                                                       a2_s3XpP
                                                                                       b3_s3XpQ
                                                                                       c1_s3XpR
                                                                                       d1_s3XpS
                                                                                       e1_s3XpT
                                                                                       f1_s3XpU
                                                                                       g1_s3XpV
                                                                                       h1_s3XpW
                                                                                       i1_s3Xq0
                                                                                       j1_s3Xq1
                                                                                       k2_s3Xq2
                                                                                       l1_s3Xq3] \r [a6_s3Xq5]
                                                                                          case
                                                                                              a6_s3Xq5
                                                                                          of
                                                                                          { (,) m1_s3Xq7 [Occ=Once]
                                                                                                n2_s3Xq8 [Occ=Once] ->
                                                                                                let {
                                                                                                  sat_s3Xq9 [Occ=Once]
                                                                                                    :: (a_a3Kyh,
                                                                                                        b_a3Kyi,
                                                                                                        c_a3Kyj,
                                                                                                        d_a3Kyk,
                                                                                                        e_a3Kyl,
                                                                                                        f_a3Kym,
                                                                                                        g_a3Kyn,
                                                                                                        h_a3Kyo,
                                                                                                        i_a3Kyp,
                                                                                                        j_a3Kyq,
                                                                                                        k_a3Kyr,
                                                                                                        l_a3Kys,
                                                                                                        m_a3Kyt,
                                                                                                        n_a3Kyu)
                                                                                                  [LclId] =
                                                                                                      CCCS (,,,,,,,,,,,,,)! [a2_s3XpP
                                                                                                                             b3_s3XpQ
                                                                                                                             c1_s3XpR
                                                                                                                             d1_s3XpS
                                                                                                                             e1_s3XpT
                                                                                                                             f1_s3XpU
                                                                                                                             g1_s3XpV
                                                                                                                             h1_s3XpW
                                                                                                                             i1_s3Xq0
                                                                                                                             j1_s3Xq1
                                                                                                                             k2_s3Xq2
                                                                                                                             l1_s3Xq3
                                                                                                                             m1_s3Xq7
                                                                                                                             n2_s3Xq8];
                                                                                                } in 
                                                                                                  k1_s3XpM
                                                                                                      sat_s3Xq9;
                                                                                          };
                                                                                } in 
                                                                                  GHC.Read.$fRead(,)2
                                                                                      $dRead12_s3XpF
                                                                                      $dRead13_s3XpG
                                                                                      n1_s3XpK
                                                                                      sat_s3Xqa;
                                                                      } in 
                                                                        case
                                                                            Text.Read.Lex.$wexpect
                                                                                GHC.Read.$fRead(,)_lexeme
                                                                                sat_s3Xqb
                                                                        of
                                                                        { Unit# ww1_s3Xqd [Occ=Once] ->
                                                                              Text.ParserCombinators.ReadP.Look [ww1_s3Xqd];
                                                                        };
                                                                };
                                                      } in 
                                                        GHC.Read.$fRead(,,,)2
                                                            $dRead8_s3XpB
                                                            $dRead9_s3XpC
                                                            $dRead10_s3XpD
                                                            $dRead11_s3XpE
                                                            n1_s3XpK
                                                            sat_s3Xqe;
                                            } in 
                                              case
                                                  Text.Read.Lex.$wexpect
                                                      GHC.Read.$fRead(,)_lexeme sat_s3Xqf
                                              of
                                              { Unit# ww1_s3Xqh [Occ=Once] ->
                                                    Text.ParserCombinators.ReadP.Look [ww1_s3Xqh];
                                              };
                                      };
                            } in  ds1_s3XpL sat_s3Xqi;
                  } in  sat_s3Xqj; } in
        let {
          lvl2_s3Xqk [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> forall b2.
                  ((a_a3Kyh, b_a3Kyi, c_a3Kyj, d_a3Kyk, e_a3Kyl, f_a3Kym, g_a3Kyn,
                    h_a3Kyo, i_a3Kyp, j_a3Kyq, k_a3Kyr, l_a3Kys, m_a3Kyt, n_a3Kyu)
                   -> Text.ParserCombinators.ReadP.P b2)
                  -> Text.ParserCombinators.ReadP.P b2
          [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
              [p_s3XpJ] \r [w_s3Xql w1_s3Xqm]
                  case GHC.Read.$wparen' p_s3XpJ w_s3Xql w1_s3Xqm of {
                    Unit# ww1_s3Xqo [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Get [ww1_s3Xqo];
                  }; } in
        let {
          sat_s3Xqt [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_a3Kyh, b_a3Kyi, c_a3Kyj, d_a3Kyk, e_a3Kyl, f_a3Kym, g_a3Kyn,
                  h_a3Kyo, i_a3Kyp, j_a3Kyq, k_a3Kyr, l_a3Kys, m_a3Kyt, n_a3Kyu)
          [LclId] =
              [lvl2_s3Xqk] \r [eta2_s3Xqp eta3_s3Xqq]
                  case
                      GHC.Read.$wskipSpacesThenP lvl2_s3Xqk eta2_s3Xqp eta3_s3Xqq
                  of
                  { Unit# ww1_s3Xqs [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Look [ww1_s3Xqs];
                  };
        } in  GHC.Read.list3 sat_s3Xqt eta_s3XpH eta1_s3XpI;

GHC.Read.$fRead(,,,,,,,,,,,,)1
  :: forall a b c d e f g h i j k l m.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l, GHC.Read.Read m) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        ((a, b, c, d, e, f, g, h, i, j, k, l, m)
         -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=15,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Xqu
           $dRead1_s3Xqv
           $dRead2_s3Xqw
           $dRead3_s3Xqx
           $dRead4_s3Xqy
           $dRead5_s3Xqz
           $dRead6_s3XqA
           $dRead7_s3XqB
           $dRead8_s3XqC
           $dRead9_s3XqD
           $dRead10_s3XqE
           $dRead11_s3XqF
           $dRead12_s3XqG
           eta_s3XqH
           eta1_s3XqI]
        let {
          p_s3XqJ [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> Text.ParserCombinators.ReadP.ReadP
                    (a_a3KAa, b_a3KAb, c_a3KAc, d_a3KAd, e_a3KAe, f_a3KAf, g_a3KAg,
                     h_a3KAh, i_a3KAi, j_a3KAj, k_a3KAk, l_a3KAl, m_a3KAm)
          [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
              [$dRead_s3Xqu
               $dRead1_s3Xqv
               $dRead2_s3Xqw
               $dRead3_s3Xqx
               $dRead4_s3Xqy
               $dRead5_s3Xqz
               $dRead6_s3XqA
               $dRead7_s3XqB
               $dRead8_s3XqC
               $dRead9_s3XqD
               $dRead10_s3XqE
               $dRead11_s3XqF
               $dRead12_s3XqG] \r [n_s3XqK]
                  let {
                    ds1_s3XqL [Occ=OnceL, Dmd=<L,C(U)>]
                      :: Text.ParserCombinators.ReadP.ReadP
                           (a_a3KAa, b_a3KAb, c_a3KAc, d_a3KAd, e_a3KAe, f_a3KAf, g_a3KAg,
                            h_a3KAh)
                    [LclId] =
                        [$dRead_s3Xqu
                         $dRead1_s3Xqv
                         $dRead2_s3Xqw
                         $dRead3_s3Xqx
                         $dRead4_s3Xqy
                         $dRead5_s3Xqz
                         $dRead6_s3XqA
                         $dRead7_s3XqB
                         n_s3XqK] \u []
                            GHC.Read.$fRead(,,,,,,,)2
                                $dRead_s3Xqu
                                $dRead1_s3Xqv
                                $dRead2_s3Xqw
                                $dRead3_s3Xqx
                                $dRead4_s3Xqy
                                $dRead5_s3Xqz
                                $dRead6_s3XqA
                                $dRead7_s3XqB
                                n_s3XqK; } in
                  let {
                    sat_s3Xrg [Occ=Once]
                      :: forall b2.
                         ((a_a3KAa, b_a3KAb, c_a3KAc, d_a3KAd, e_a3KAe, f_a3KAf, g_a3KAg,
                           h_a3KAh, i_a3KAi, j_a3KAj, k_a3KAk, l_a3KAl, m_a3KAm)
                          -> Text.ParserCombinators.ReadP.P b2)
                         -> Text.ParserCombinators.ReadP.P b2
                    [LclId] =
                        [$dRead8_s3XqC
                         $dRead9_s3XqD
                         $dRead10_s3XqE
                         $dRead11_s3XqF
                         $dRead12_s3XqG
                         n_s3XqK
                         ds1_s3XqL] \r [k1_s3XqM]
                            let {
                              sat_s3Xrf [Occ=Once]
                                :: (a_a3KAa, b_a3KAb, c_a3KAc, d_a3KAd, e_a3KAe, f_a3KAf, g_a3KAg,
                                    h_a3KAh)
                                   -> Text.ParserCombinators.ReadP.P b2_a3nIU
                              [LclId] =
                                  [$dRead8_s3XqC
                                   $dRead9_s3XqD
                                   $dRead10_s3XqE
                                   $dRead11_s3XqF
                                   $dRead12_s3XqG
                                   n_s3XqK
                                   k1_s3XqM] \r [a1_s3XqN]
                                      case a1_s3XqN of {
                                        (,,,,,,,) a2_s3XqP [Occ=OnceL]
                                                  b3_s3XqQ [Occ=OnceL]
                                                  c1_s3XqR [Occ=OnceL]
                                                  d1_s3XqS [Occ=OnceL]
                                                  e1_s3XqT [Occ=OnceL]
                                                  f1_s3XqU [Occ=OnceL]
                                                  g1_s3XqV [Occ=OnceL]
                                                  h1_s3XqW [Occ=OnceL] ->
                                            let {
                                              sat_s3Xrc [Occ=Once]
                                                :: () -> Text.ParserCombinators.ReadP.P b2_a3nIU
                                              [LclId] =
                                                  [$dRead8_s3XqC
                                                   $dRead9_s3XqD
                                                   $dRead10_s3XqE
                                                   $dRead11_s3XqF
                                                   $dRead12_s3XqG
                                                   n_s3XqK
                                                   k1_s3XqM
                                                   a2_s3XqP
                                                   b3_s3XqQ
                                                   c1_s3XqR
                                                   d1_s3XqS
                                                   e1_s3XqT
                                                   f1_s3XqU
                                                   g1_s3XqV
                                                   h1_s3XqW] \r [a3_s3XqX]
                                                      let {
                                                        sat_s3Xrb [Occ=Once]
                                                          :: (i_a3KAi, j_a3KAj, k_a3KAk, l_a3KAl)
                                                             -> Text.ParserCombinators.ReadP.P
                                                                  b2_a3nIU
                                                        [LclId] =
                                                            [$dRead12_s3XqG
                                                             n_s3XqK
                                                             k1_s3XqM
                                                             a2_s3XqP
                                                             b3_s3XqQ
                                                             c1_s3XqR
                                                             d1_s3XqS
                                                             e1_s3XqT
                                                             f1_s3XqU
                                                             g1_s3XqV
                                                             h1_s3XqW] \r [a4_s3XqY]
                                                                case a4_s3XqY of {
                                                                  (,,,) i1_s3Xr0 [Occ=OnceL]
                                                                        j1_s3Xr1 [Occ=OnceL]
                                                                        k2_s3Xr2 [Occ=OnceL]
                                                                        l1_s3Xr3 [Occ=OnceL] ->
                                                                      let {
                                                                        sat_s3Xr8 [Occ=Once]
                                                                          :: ()
                                                                             -> Text.ParserCombinators.ReadP.P
                                                                                  b2_a3nIU
                                                                        [LclId] =
                                                                            [$dRead12_s3XqG
                                                                             n_s3XqK
                                                                             k1_s3XqM
                                                                             a2_s3XqP
                                                                             b3_s3XqQ
                                                                             c1_s3XqR
                                                                             d1_s3XqS
                                                                             e1_s3XqT
                                                                             f1_s3XqU
                                                                             g1_s3XqV
                                                                             h1_s3XqW
                                                                             i1_s3Xr0
                                                                             j1_s3Xr1
                                                                             k2_s3Xr2
                                                                             l1_s3Xr3] \r [a5_s3Xr4]
                                                                                let {
                                                                                  sat_s3Xr7 [Occ=Once]
                                                                                    :: m_a3KAm
                                                                                       -> Text.ParserCombinators.ReadP.P
                                                                                            b2_a3nIU
                                                                                  [LclId] =
                                                                                      [k1_s3XqM
                                                                                       a2_s3XqP
                                                                                       b3_s3XqQ
                                                                                       c1_s3XqR
                                                                                       d1_s3XqS
                                                                                       e1_s3XqT
                                                                                       f1_s3XqU
                                                                                       g1_s3XqV
                                                                                       h1_s3XqW
                                                                                       i1_s3Xr0
                                                                                       j1_s3Xr1
                                                                                       k2_s3Xr2
                                                                                       l1_s3Xr3] \r [a6_s3Xr5]
                                                                                          let {
                                                                                            sat_s3Xr6 [Occ=Once]
                                                                                              :: (a_a3KAa,
                                                                                                  b_a3KAb,
                                                                                                  c_a3KAc,
                                                                                                  d_a3KAd,
                                                                                                  e_a3KAe,
                                                                                                  f_a3KAf,
                                                                                                  g_a3KAg,
                                                                                                  h_a3KAh,
                                                                                                  i_a3KAi,
                                                                                                  j_a3KAj,
                                                                                                  k_a3KAk,
                                                                                                  l_a3KAl,
                                                                                                  m_a3KAm)
                                                                                            [LclId] =
                                                                                                CCCS (,,,,,,,,,,,,)! [a2_s3XqP
                                                                                                                      b3_s3XqQ
                                                                                                                      c1_s3XqR
                                                                                                                      d1_s3XqS
                                                                                                                      e1_s3XqT
                                                                                                                      f1_s3XqU
                                                                                                                      g1_s3XqV
                                                                                                                      h1_s3XqW
                                                                                                                      i1_s3Xr0
                                                                                                                      j1_s3Xr1
                                                                                                                      k2_s3Xr2
                                                                                                                      l1_s3Xr3
                                                                                                                      a6_s3Xr5];
                                                                                          } in 
                                                                                            k1_s3XqM
                                                                                                sat_s3Xr6;
                                                                                } in 
                                                                                  GHC.Read.readPrec
                                                                                      $dRead12_s3XqG
                                                                                      n_s3XqK
                                                                                      sat_s3Xr7;
                                                                      } in 
                                                                        case
                                                                            Text.Read.Lex.$wexpect
                                                                                GHC.Read.$fRead(,)_lexeme
                                                                                sat_s3Xr8
                                                                        of
                                                                        { Unit# ww1_s3Xra [Occ=Once] ->
                                                                              Text.ParserCombinators.ReadP.Look [ww1_s3Xra];
                                                                        };
                                                                };
                                                      } in 
                                                        GHC.Read.$fRead(,,,)2
                                                            $dRead8_s3XqC
                                                            $dRead9_s3XqD
                                                            $dRead10_s3XqE
                                                            $dRead11_s3XqF
                                                            n_s3XqK
                                                            sat_s3Xrb;
                                            } in 
                                              case
                                                  Text.Read.Lex.$wexpect
                                                      GHC.Read.$fRead(,)_lexeme sat_s3Xrc
                                              of
                                              { Unit# ww1_s3Xre [Occ=Once] ->
                                                    Text.ParserCombinators.ReadP.Look [ww1_s3Xre];
                                              };
                                      };
                            } in  ds1_s3XqL sat_s3Xrf;
                  } in  sat_s3Xrg; } in
        let {
          lvl2_s3Xrh [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> forall b2.
                  ((a_a3KAa, b_a3KAb, c_a3KAc, d_a3KAd, e_a3KAe, f_a3KAf, g_a3KAg,
                    h_a3KAh, i_a3KAi, j_a3KAj, k_a3KAk, l_a3KAl, m_a3KAm)
                   -> Text.ParserCombinators.ReadP.P b2)
                  -> Text.ParserCombinators.ReadP.P b2
          [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
              [p_s3XqJ] \r [w_s3Xri w1_s3Xrj]
                  case GHC.Read.$wparen' p_s3XqJ w_s3Xri w1_s3Xrj of {
                    Unit# ww1_s3Xrl [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Get [ww1_s3Xrl];
                  }; } in
        let {
          sat_s3Xrq [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_a3KAa, b_a3KAb, c_a3KAc, d_a3KAd, e_a3KAe, f_a3KAf, g_a3KAg,
                  h_a3KAh, i_a3KAi, j_a3KAj, k_a3KAk, l_a3KAl, m_a3KAm)
          [LclId] =
              [lvl2_s3Xrh] \r [eta2_s3Xrm eta3_s3Xrn]
                  case
                      GHC.Read.$wskipSpacesThenP lvl2_s3Xrh eta2_s3Xrm eta3_s3Xrn
                  of
                  { Unit# ww1_s3Xrp [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Look [ww1_s3Xrp];
                  };
        } in  GHC.Read.list3 sat_s3Xrq eta_s3XqH eta1_s3XqI;

GHC.Read.$fRead(,,,,,,,,,,,)1
  :: forall a b c d e f g h i j k l.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        ((a, b, c, d, e, f, g, h, i, j, k, l)
         -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=14,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Xrr
           $dRead1_s3Xrs
           $dRead2_s3Xrt
           $dRead3_s3Xru
           $dRead4_s3Xrv
           $dRead5_s3Xrw
           $dRead6_s3Xrx
           $dRead7_s3Xry
           $dRead8_s3Xrz
           $dRead9_s3XrA
           $dRead10_s3XrB
           $dRead11_s3XrC
           eta_s3XrD
           eta1_s3XrE]
        let {
          p_s3XrF [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> Text.ParserCombinators.ReadP.ReadP
                    (a_a3KBY, b_a3KBZ, c_a3KC0, d_a3KC1, e_a3KC2, f_a3KC3, g_a3KC4,
                     h_a3KC5, i_a3KC6, j_a3KC7, k_a3KC8, l_a3KC9)
          [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
              [$dRead_s3Xrr
               $dRead1_s3Xrs
               $dRead2_s3Xrt
               $dRead3_s3Xru
               $dRead4_s3Xrv
               $dRead5_s3Xrw
               $dRead6_s3Xrx
               $dRead7_s3Xry
               $dRead8_s3Xrz
               $dRead9_s3XrA
               $dRead10_s3XrB
               $dRead11_s3XrC] \r [n_s3XrG]
                  let {
                    ds1_s3XrH [Occ=OnceL, Dmd=<L,C(U)>]
                      :: Text.ParserCombinators.ReadP.ReadP
                           (a_a3KBY, b_a3KBZ, c_a3KC0, d_a3KC1, e_a3KC2, f_a3KC3, g_a3KC4,
                            h_a3KC5)
                    [LclId] =
                        [$dRead_s3Xrr
                         $dRead1_s3Xrs
                         $dRead2_s3Xrt
                         $dRead3_s3Xru
                         $dRead4_s3Xrv
                         $dRead5_s3Xrw
                         $dRead6_s3Xrx
                         $dRead7_s3Xry
                         n_s3XrG] \u []
                            GHC.Read.$fRead(,,,,,,,)2
                                $dRead_s3Xrr
                                $dRead1_s3Xrs
                                $dRead2_s3Xrt
                                $dRead3_s3Xru
                                $dRead4_s3Xrv
                                $dRead5_s3Xrw
                                $dRead6_s3Xrx
                                $dRead7_s3Xry
                                n_s3XrG; } in
                  let {
                    sat_s3Xs6 [Occ=Once]
                      :: forall b2.
                         ((a_a3KBY, b_a3KBZ, c_a3KC0, d_a3KC1, e_a3KC2, f_a3KC3, g_a3KC4,
                           h_a3KC5, i_a3KC6, j_a3KC7, k_a3KC8, l_a3KC9)
                          -> Text.ParserCombinators.ReadP.P b2)
                         -> Text.ParserCombinators.ReadP.P b2
                    [LclId] =
                        [$dRead8_s3Xrz
                         $dRead9_s3XrA
                         $dRead10_s3XrB
                         $dRead11_s3XrC
                         n_s3XrG
                         ds1_s3XrH] \r [k1_s3XrI]
                            let {
                              sat_s3Xs5 [Occ=Once]
                                :: (a_a3KBY, b_a3KBZ, c_a3KC0, d_a3KC1, e_a3KC2, f_a3KC3, g_a3KC4,
                                    h_a3KC5)
                                   -> Text.ParserCombinators.ReadP.P b2_a3nIU
                              [LclId] =
                                  [$dRead8_s3Xrz
                                   $dRead9_s3XrA
                                   $dRead10_s3XrB
                                   $dRead11_s3XrC
                                   n_s3XrG
                                   k1_s3XrI] \r [a1_s3XrJ]
                                      case a1_s3XrJ of {
                                        (,,,,,,,) a2_s3XrL [Occ=OnceL]
                                                  b3_s3XrM [Occ=OnceL]
                                                  c1_s3XrN [Occ=OnceL]
                                                  d1_s3XrO [Occ=OnceL]
                                                  e1_s3XrP [Occ=OnceL]
                                                  f1_s3XrQ [Occ=OnceL]
                                                  g1_s3XrR [Occ=OnceL]
                                                  h1_s3XrS [Occ=OnceL] ->
                                            let {
                                              sat_s3Xs2 [Occ=Once]
                                                :: () -> Text.ParserCombinators.ReadP.P b2_a3nIU
                                              [LclId] =
                                                  [$dRead8_s3Xrz
                                                   $dRead9_s3XrA
                                                   $dRead10_s3XrB
                                                   $dRead11_s3XrC
                                                   n_s3XrG
                                                   k1_s3XrI
                                                   a2_s3XrL
                                                   b3_s3XrM
                                                   c1_s3XrN
                                                   d1_s3XrO
                                                   e1_s3XrP
                                                   f1_s3XrQ
                                                   g1_s3XrR
                                                   h1_s3XrS] \r [a3_s3XrT]
                                                      let {
                                                        sat_s3Xs1 [Occ=Once]
                                                          :: (i_a3KC6, j_a3KC7, k_a3KC8, l_a3KC9)
                                                             -> Text.ParserCombinators.ReadP.P
                                                                  b2_a3nIU
                                                        [LclId] =
                                                            [k1_s3XrI
                                                             a2_s3XrL
                                                             b3_s3XrM
                                                             c1_s3XrN
                                                             d1_s3XrO
                                                             e1_s3XrP
                                                             f1_s3XrQ
                                                             g1_s3XrR
                                                             h1_s3XrS] \r [a4_s3XrU]
                                                                case a4_s3XrU of {
                                                                  (,,,) i1_s3XrW [Occ=Once]
                                                                        j1_s3XrX [Occ=Once]
                                                                        k2_s3XrY [Occ=Once]
                                                                        l1_s3XrZ [Occ=Once] ->
                                                                      let {
                                                                        sat_s3Xs0 [Occ=Once]
                                                                          :: (a_a3KBY, b_a3KBZ,
                                                                              c_a3KC0, d_a3KC1,
                                                                              e_a3KC2, f_a3KC3,
                                                                              g_a3KC4, h_a3KC5,
                                                                              i_a3KC6, j_a3KC7,
                                                                              k_a3KC8, l_a3KC9)
                                                                        [LclId] =
                                                                            CCCS (,,,,,,,,,,,)! [a2_s3XrL
                                                                                                 b3_s3XrM
                                                                                                 c1_s3XrN
                                                                                                 d1_s3XrO
                                                                                                 e1_s3XrP
                                                                                                 f1_s3XrQ
                                                                                                 g1_s3XrR
                                                                                                 h1_s3XrS
                                                                                                 i1_s3XrW
                                                                                                 j1_s3XrX
                                                                                                 k2_s3XrY
                                                                                                 l1_s3XrZ];
                                                                      } in  k1_s3XrI sat_s3Xs0;
                                                                };
                                                      } in 
                                                        GHC.Read.$fRead(,,,)2
                                                            $dRead8_s3Xrz
                                                            $dRead9_s3XrA
                                                            $dRead10_s3XrB
                                                            $dRead11_s3XrC
                                                            n_s3XrG
                                                            sat_s3Xs1;
                                            } in 
                                              case
                                                  Text.Read.Lex.$wexpect
                                                      GHC.Read.$fRead(,)_lexeme sat_s3Xs2
                                              of
                                              { Unit# ww1_s3Xs4 [Occ=Once] ->
                                                    Text.ParserCombinators.ReadP.Look [ww1_s3Xs4];
                                              };
                                      };
                            } in  ds1_s3XrH sat_s3Xs5;
                  } in  sat_s3Xs6; } in
        let {
          lvl2_s3Xs7 [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> forall b2.
                  ((a_a3KBY, b_a3KBZ, c_a3KC0, d_a3KC1, e_a3KC2, f_a3KC3, g_a3KC4,
                    h_a3KC5, i_a3KC6, j_a3KC7, k_a3KC8, l_a3KC9)
                   -> Text.ParserCombinators.ReadP.P b2)
                  -> Text.ParserCombinators.ReadP.P b2
          [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
              [p_s3XrF] \r [w_s3Xs8 w1_s3Xs9]
                  case GHC.Read.$wparen' p_s3XrF w_s3Xs8 w1_s3Xs9 of {
                    Unit# ww1_s3Xsb [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Get [ww1_s3Xsb];
                  }; } in
        let {
          sat_s3Xsg [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_a3KBY, b_a3KBZ, c_a3KC0, d_a3KC1, e_a3KC2, f_a3KC3, g_a3KC4,
                  h_a3KC5, i_a3KC6, j_a3KC7, k_a3KC8, l_a3KC9)
          [LclId] =
              [lvl2_s3Xs7] \r [eta2_s3Xsc eta3_s3Xsd]
                  case
                      GHC.Read.$wskipSpacesThenP lvl2_s3Xs7 eta2_s3Xsc eta3_s3Xsd
                  of
                  { Unit# ww1_s3Xsf [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Look [ww1_s3Xsf];
                  };
        } in  GHC.Read.list3 sat_s3Xsg eta_s3XrD eta1_s3XrE;

GHC.Read.$fRead(,,,,,,,,,,)1
  :: forall a b c d e f g h i j k.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j,
      GHC.Read.Read k) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        ((a, b, c, d, e, f, g, h, i, j, k)
         -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=13,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Xsh
           $dRead1_s3Xsi
           $dRead2_s3Xsj
           $dRead3_s3Xsk
           $dRead4_s3Xsl
           $dRead5_s3Xsm
           $dRead6_s3Xsn
           $dRead7_s3Xso
           $dRead8_s3Xsp
           $dRead9_s3Xsq
           $dRead10_s3Xsr
           eta_s3Xss
           eta1_s3Xst]
        let {
          p_s3Xsu [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> Text.ParserCombinators.ReadP.ReadP
                    (a_a3KDz, b_a3KDA, c_a3KDB, d_a3KDC, e_a3KDD, f_a3KDE, g_a3KDF,
                     h_a3KDG, i_a3KDH, j_a3KDI, k_a3KDJ)
          [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
              [$dRead_s3Xsh
               $dRead1_s3Xsi
               $dRead2_s3Xsj
               $dRead3_s3Xsk
               $dRead4_s3Xsl
               $dRead5_s3Xsm
               $dRead6_s3Xsn
               $dRead7_s3Xso
               $dRead8_s3Xsp
               $dRead9_s3Xsq
               $dRead10_s3Xsr] \r [n_s3Xsv]
                  let {
                    ds1_s3Xsw [Occ=OnceL, Dmd=<L,C(U)>]
                      :: Text.ParserCombinators.ReadP.ReadP
                           (a_a3KDz, b_a3KDA, c_a3KDB, d_a3KDC, e_a3KDD, f_a3KDE, g_a3KDF,
                            h_a3KDG)
                    [LclId] =
                        [$dRead_s3Xsh
                         $dRead1_s3Xsi
                         $dRead2_s3Xsj
                         $dRead3_s3Xsk
                         $dRead4_s3Xsl
                         $dRead5_s3Xsm
                         $dRead6_s3Xsn
                         $dRead7_s3Xso
                         n_s3Xsv] \u []
                            GHC.Read.$fRead(,,,,,,,)2
                                $dRead_s3Xsh
                                $dRead1_s3Xsi
                                $dRead2_s3Xsj
                                $dRead3_s3Xsk
                                $dRead4_s3Xsl
                                $dRead5_s3Xsm
                                $dRead6_s3Xsn
                                $dRead7_s3Xso
                                n_s3Xsv; } in
                  let {
                    sat_s3XsZ [Occ=Once]
                      :: forall b2.
                         ((a_a3KDz, b_a3KDA, c_a3KDB, d_a3KDC, e_a3KDD, f_a3KDE, g_a3KDF,
                           h_a3KDG, i_a3KDH, j_a3KDI, k_a3KDJ)
                          -> Text.ParserCombinators.ReadP.P b2)
                         -> Text.ParserCombinators.ReadP.P b2
                    [LclId] =
                        [$dRead8_s3Xsp
                         $dRead9_s3Xsq
                         $dRead10_s3Xsr
                         n_s3Xsv
                         ds1_s3Xsw] \r [k1_s3Xsx]
                            let {
                              sat_s3XsY [Occ=Once]
                                :: (a_a3KDz, b_a3KDA, c_a3KDB, d_a3KDC, e_a3KDD, f_a3KDE, g_a3KDF,
                                    h_a3KDG)
                                   -> Text.ParserCombinators.ReadP.P b2_a3nIU
                              [LclId] =
                                  [$dRead8_s3Xsp
                                   $dRead9_s3Xsq
                                   $dRead10_s3Xsr
                                   n_s3Xsv
                                   k1_s3Xsx] \r [a1_s3Xsy]
                                      case a1_s3Xsy of {
                                        (,,,,,,,) a2_s3XsA [Occ=OnceL]
                                                  b3_s3XsB [Occ=OnceL]
                                                  c1_s3XsC [Occ=OnceL]
                                                  d1_s3XsD [Occ=OnceL]
                                                  e1_s3XsE [Occ=OnceL]
                                                  f1_s3XsF [Occ=OnceL]
                                                  g1_s3XsG [Occ=OnceL]
                                                  h1_s3XsH [Occ=OnceL] ->
                                            let {
                                              sat_s3XsV [Occ=Once]
                                                :: () -> Text.ParserCombinators.ReadP.P b2_a3nIU
                                              [LclId] =
                                                  [$dRead8_s3Xsp
                                                   $dRead9_s3Xsq
                                                   $dRead10_s3Xsr
                                                   n_s3Xsv
                                                   k1_s3Xsx
                                                   a2_s3XsA
                                                   b3_s3XsB
                                                   c1_s3XsC
                                                   d1_s3XsD
                                                   e1_s3XsE
                                                   f1_s3XsF
                                                   g1_s3XsG
                                                   h1_s3XsH] \r [a3_s3XsI]
                                                      let {
                                                        sat_s3XsU [Occ=Once]
                                                          :: (i_a3KDH, j_a3KDI)
                                                             -> Text.ParserCombinators.ReadP.P
                                                                  b2_a3nIU
                                                        [LclId] =
                                                            [$dRead10_s3Xsr
                                                             n_s3Xsv
                                                             k1_s3Xsx
                                                             a2_s3XsA
                                                             b3_s3XsB
                                                             c1_s3XsC
                                                             d1_s3XsD
                                                             e1_s3XsE
                                                             f1_s3XsF
                                                             g1_s3XsG
                                                             h1_s3XsH] \r [a4_s3XsJ]
                                                                case a4_s3XsJ of {
                                                                  (,) i1_s3XsL [Occ=OnceL]
                                                                      j1_s3XsM [Occ=OnceL] ->
                                                                      let {
                                                                        sat_s3XsR [Occ=Once]
                                                                          :: ()
                                                                             -> Text.ParserCombinators.ReadP.P
                                                                                  b2_a3nIU
                                                                        [LclId] =
                                                                            [$dRead10_s3Xsr
                                                                             n_s3Xsv
                                                                             k1_s3Xsx
                                                                             a2_s3XsA
                                                                             b3_s3XsB
                                                                             c1_s3XsC
                                                                             d1_s3XsD
                                                                             e1_s3XsE
                                                                             f1_s3XsF
                                                                             g1_s3XsG
                                                                             h1_s3XsH
                                                                             i1_s3XsL
                                                                             j1_s3XsM] \r [a5_s3XsN]
                                                                                let {
                                                                                  sat_s3XsQ [Occ=Once]
                                                                                    :: k_a3KDJ
                                                                                       -> Text.ParserCombinators.ReadP.P
                                                                                            b2_a3nIU
                                                                                  [LclId] =
                                                                                      [k1_s3Xsx
                                                                                       a2_s3XsA
                                                                                       b3_s3XsB
                                                                                       c1_s3XsC
                                                                                       d1_s3XsD
                                                                                       e1_s3XsE
                                                                                       f1_s3XsF
                                                                                       g1_s3XsG
                                                                                       h1_s3XsH
                                                                                       i1_s3XsL
                                                                                       j1_s3XsM] \r [a6_s3XsO]
                                                                                          let {
                                                                                            sat_s3XsP [Occ=Once]
                                                                                              :: (a_a3KDz,
                                                                                                  b_a3KDA,
                                                                                                  c_a3KDB,
                                                                                                  d_a3KDC,
                                                                                                  e_a3KDD,
                                                                                                  f_a3KDE,
                                                                                                  g_a3KDF,
                                                                                                  h_a3KDG,
                                                                                                  i_a3KDH,
                                                                                                  j_a3KDI,
                                                                                                  k_a3KDJ)
                                                                                            [LclId] =
                                                                                                CCCS (,,,,,,,,,,)! [a2_s3XsA
                                                                                                                    b3_s3XsB
                                                                                                                    c1_s3XsC
                                                                                                                    d1_s3XsD
                                                                                                                    e1_s3XsE
                                                                                                                    f1_s3XsF
                                                                                                                    g1_s3XsG
                                                                                                                    h1_s3XsH
                                                                                                                    i1_s3XsL
                                                                                                                    j1_s3XsM
                                                                                                                    a6_s3XsO];
                                                                                          } in 
                                                                                            k1_s3Xsx
                                                                                                sat_s3XsP;
                                                                                } in 
                                                                                  GHC.Read.readPrec
                                                                                      $dRead10_s3Xsr
                                                                                      n_s3Xsv
                                                                                      sat_s3XsQ;
                                                                      } in 
                                                                        case
                                                                            Text.Read.Lex.$wexpect
                                                                                GHC.Read.$fRead(,)_lexeme
                                                                                sat_s3XsR
                                                                        of
                                                                        { Unit# ww1_s3XsT [Occ=Once] ->
                                                                              Text.ParserCombinators.ReadP.Look [ww1_s3XsT];
                                                                        };
                                                                };
                                                      } in 
                                                        GHC.Read.$fRead(,)2
                                                            $dRead8_s3Xsp
                                                            $dRead9_s3Xsq
                                                            n_s3Xsv
                                                            sat_s3XsU;
                                            } in 
                                              case
                                                  Text.Read.Lex.$wexpect
                                                      GHC.Read.$fRead(,)_lexeme sat_s3XsV
                                              of
                                              { Unit# ww1_s3XsX [Occ=Once] ->
                                                    Text.ParserCombinators.ReadP.Look [ww1_s3XsX];
                                              };
                                      };
                            } in  ds1_s3Xsw sat_s3XsY;
                  } in  sat_s3XsZ; } in
        let {
          lvl2_s3Xt0 [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> forall b2.
                  ((a_a3KDz, b_a3KDA, c_a3KDB, d_a3KDC, e_a3KDD, f_a3KDE, g_a3KDF,
                    h_a3KDG, i_a3KDH, j_a3KDI, k_a3KDJ)
                   -> Text.ParserCombinators.ReadP.P b2)
                  -> Text.ParserCombinators.ReadP.P b2
          [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
              [p_s3Xsu] \r [w_s3Xt1 w1_s3Xt2]
                  case GHC.Read.$wparen' p_s3Xsu w_s3Xt1 w1_s3Xt2 of {
                    Unit# ww1_s3Xt4 [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Get [ww1_s3Xt4];
                  }; } in
        let {
          sat_s3Xt9 [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_a3KDz, b_a3KDA, c_a3KDB, d_a3KDC, e_a3KDD, f_a3KDE, g_a3KDF,
                  h_a3KDG, i_a3KDH, j_a3KDI, k_a3KDJ)
          [LclId] =
              [lvl2_s3Xt0] \r [eta2_s3Xt5 eta3_s3Xt6]
                  case
                      GHC.Read.$wskipSpacesThenP lvl2_s3Xt0 eta2_s3Xt5 eta3_s3Xt6
                  of
                  { Unit# ww1_s3Xt8 [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Look [ww1_s3Xt8];
                  };
        } in  GHC.Read.list3 sat_s3Xt9 eta_s3Xss eta1_s3Xst;

GHC.Read.$fRead(,,,,,,,,,)1
  :: forall a b c d e f g h i j.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        ((a, b, c, d, e, f, g, h, i, j)
         -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=12,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Xta
           $dRead1_s3Xtb
           $dRead2_s3Xtc
           $dRead3_s3Xtd
           $dRead4_s3Xte
           $dRead5_s3Xtf
           $dRead6_s3Xtg
           $dRead7_s3Xth
           $dRead8_s3Xti
           $dRead9_s3Xtj
           eta_s3Xtk
           eta1_s3Xtl]
        let {
          p_s3Xtm [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> Text.ParserCombinators.ReadP.ReadP
                    (a_a3KFd, b_a3KFe, c_a3KFf, d_a3KFg, e_a3KFh, f_a3KFi, g_a3KFj,
                     h_a3KFk, i_a3KFl, j_a3KFm)
          [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
              [$dRead_s3Xta
               $dRead1_s3Xtb
               $dRead2_s3Xtc
               $dRead3_s3Xtd
               $dRead4_s3Xte
               $dRead5_s3Xtf
               $dRead6_s3Xtg
               $dRead7_s3Xth
               $dRead8_s3Xti
               $dRead9_s3Xtj] \r [n_s3Xtn]
                  let {
                    ds1_s3Xto [Occ=OnceL, Dmd=<L,C(U)>]
                      :: Text.ParserCombinators.ReadP.ReadP
                           (a_a3KFd, b_a3KFe, c_a3KFf, d_a3KFg, e_a3KFh, f_a3KFi, g_a3KFj,
                            h_a3KFk)
                    [LclId] =
                        [$dRead_s3Xta
                         $dRead1_s3Xtb
                         $dRead2_s3Xtc
                         $dRead3_s3Xtd
                         $dRead4_s3Xte
                         $dRead5_s3Xtf
                         $dRead6_s3Xtg
                         $dRead7_s3Xth
                         n_s3Xtn] \u []
                            GHC.Read.$fRead(,,,,,,,)2
                                $dRead_s3Xta
                                $dRead1_s3Xtb
                                $dRead2_s3Xtc
                                $dRead3_s3Xtd
                                $dRead4_s3Xte
                                $dRead5_s3Xtf
                                $dRead6_s3Xtg
                                $dRead7_s3Xth
                                n_s3Xtn; } in
                  let {
                    sat_s3XtL [Occ=Once]
                      :: forall b2.
                         ((a_a3KFd, b_a3KFe, c_a3KFf, d_a3KFg, e_a3KFh, f_a3KFi, g_a3KFj,
                           h_a3KFk, i_a3KFl, j_a3KFm)
                          -> Text.ParserCombinators.ReadP.P b2)
                         -> Text.ParserCombinators.ReadP.P b2
                    [LclId] =
                        [$dRead8_s3Xti $dRead9_s3Xtj n_s3Xtn ds1_s3Xto] \r [k1_s3Xtp]
                            let {
                              sat_s3XtK [Occ=Once]
                                :: (a_a3KFd, b_a3KFe, c_a3KFf, d_a3KFg, e_a3KFh, f_a3KFi, g_a3KFj,
                                    h_a3KFk)
                                   -> Text.ParserCombinators.ReadP.P b2_a3nIU
                              [LclId] =
                                  [$dRead8_s3Xti $dRead9_s3Xtj n_s3Xtn k1_s3Xtp] \r [a1_s3Xtq]
                                      case a1_s3Xtq of {
                                        (,,,,,,,) a2_s3Xts [Occ=OnceL]
                                                  b3_s3Xtt [Occ=OnceL]
                                                  c1_s3Xtu [Occ=OnceL]
                                                  d1_s3Xtv [Occ=OnceL]
                                                  e1_s3Xtw [Occ=OnceL]
                                                  f1_s3Xtx [Occ=OnceL]
                                                  g1_s3Xty [Occ=OnceL]
                                                  h1_s3Xtz [Occ=OnceL] ->
                                            let {
                                              sat_s3XtH [Occ=Once]
                                                :: () -> Text.ParserCombinators.ReadP.P b2_a3nIU
                                              [LclId] =
                                                  [$dRead8_s3Xti
                                                   $dRead9_s3Xtj
                                                   n_s3Xtn
                                                   k1_s3Xtp
                                                   a2_s3Xts
                                                   b3_s3Xtt
                                                   c1_s3Xtu
                                                   d1_s3Xtv
                                                   e1_s3Xtw
                                                   f1_s3Xtx
                                                   g1_s3Xty
                                                   h1_s3Xtz] \r [a3_s3XtA]
                                                      let {
                                                        sat_s3XtG [Occ=Once]
                                                          :: (i_a3KFl, j_a3KFm)
                                                             -> Text.ParserCombinators.ReadP.P
                                                                  b2_a3nIU
                                                        [LclId] =
                                                            [k1_s3Xtp
                                                             a2_s3Xts
                                                             b3_s3Xtt
                                                             c1_s3Xtu
                                                             d1_s3Xtv
                                                             e1_s3Xtw
                                                             f1_s3Xtx
                                                             g1_s3Xty
                                                             h1_s3Xtz] \r [a4_s3XtB]
                                                                case a4_s3XtB of {
                                                                  (,) i1_s3XtD [Occ=Once]
                                                                      j1_s3XtE [Occ=Once] ->
                                                                      let {
                                                                        sat_s3XtF [Occ=Once]
                                                                          :: (a_a3KFd, b_a3KFe,
                                                                              c_a3KFf, d_a3KFg,
                                                                              e_a3KFh, f_a3KFi,
                                                                              g_a3KFj, h_a3KFk,
                                                                              i_a3KFl, j_a3KFm)
                                                                        [LclId] =
                                                                            CCCS (,,,,,,,,,)! [a2_s3Xts
                                                                                               b3_s3Xtt
                                                                                               c1_s3Xtu
                                                                                               d1_s3Xtv
                                                                                               e1_s3Xtw
                                                                                               f1_s3Xtx
                                                                                               g1_s3Xty
                                                                                               h1_s3Xtz
                                                                                               i1_s3XtD
                                                                                               j1_s3XtE];
                                                                      } in  k1_s3Xtp sat_s3XtF;
                                                                };
                                                      } in 
                                                        GHC.Read.$fRead(,)2
                                                            $dRead8_s3Xti
                                                            $dRead9_s3Xtj
                                                            n_s3Xtn
                                                            sat_s3XtG;
                                            } in 
                                              case
                                                  Text.Read.Lex.$wexpect
                                                      GHC.Read.$fRead(,)_lexeme sat_s3XtH
                                              of
                                              { Unit# ww1_s3XtJ [Occ=Once] ->
                                                    Text.ParserCombinators.ReadP.Look [ww1_s3XtJ];
                                              };
                                      };
                            } in  ds1_s3Xto sat_s3XtK;
                  } in  sat_s3XtL; } in
        let {
          lvl2_s3XtM [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> forall b2.
                  ((a_a3KFd, b_a3KFe, c_a3KFf, d_a3KFg, e_a3KFh, f_a3KFi, g_a3KFj,
                    h_a3KFk, i_a3KFl, j_a3KFm)
                   -> Text.ParserCombinators.ReadP.P b2)
                  -> Text.ParserCombinators.ReadP.P b2
          [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
              [p_s3Xtm] \r [w_s3XtN w1_s3XtO]
                  case GHC.Read.$wparen' p_s3Xtm w_s3XtN w1_s3XtO of {
                    Unit# ww1_s3XtQ [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Get [ww1_s3XtQ];
                  }; } in
        let {
          sat_s3XtV [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_a3KFd, b_a3KFe, c_a3KFf, d_a3KFg, e_a3KFh, f_a3KFi, g_a3KFj,
                  h_a3KFk, i_a3KFl, j_a3KFm)
          [LclId] =
              [lvl2_s3XtM] \r [eta2_s3XtR eta3_s3XtS]
                  case
                      GHC.Read.$wskipSpacesThenP lvl2_s3XtM eta2_s3XtR eta3_s3XtS
                  of
                  { Unit# ww1_s3XtU [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Look [ww1_s3XtU];
                  };
        } in  GHC.Read.list3 sat_s3XtV eta_s3Xtk eta1_s3Xtl;

GHC.Read.$fRead(,,,,,,,,)1
  :: forall a b c d e f g h i.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        ((a, b, c, d, e, f, g, h, i) -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=11,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XtW
           $dRead1_s3XtX
           $dRead2_s3XtY
           $dRead3_s3XtZ
           $dRead4_s3Xu0
           $dRead5_s3Xu1
           $dRead6_s3Xu2
           $dRead7_s3Xu3
           $dRead8_s3Xu4
           eta_s3Xu5
           eta1_s3Xu6]
        let {
          p_s3Xu7 [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> Text.ParserCombinators.ReadP.ReadP
                    (a_a3KGE, b_a3KGF, c_a3KGG, d_a3KGH, e_a3KGI, f_a3KGJ, g_a3KGK,
                     h_a3KGL, i_a3KGM)
          [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
              [$dRead_s3XtW
               $dRead1_s3XtX
               $dRead2_s3XtY
               $dRead3_s3XtZ
               $dRead4_s3Xu0
               $dRead5_s3Xu1
               $dRead6_s3Xu2
               $dRead7_s3Xu3
               $dRead8_s3Xu4] \r [n_s3Xu8]
                  let {
                    ds1_s3Xu9 [Occ=OnceL, Dmd=<L,C(U)>]
                      :: Text.ParserCombinators.ReadP.ReadP
                           (a_a3KGE, b_a3KGF, c_a3KGG, d_a3KGH, e_a3KGI, f_a3KGJ, g_a3KGK,
                            h_a3KGL)
                    [LclId] =
                        [$dRead_s3XtW
                         $dRead1_s3XtX
                         $dRead2_s3XtY
                         $dRead3_s3XtZ
                         $dRead4_s3Xu0
                         $dRead5_s3Xu1
                         $dRead6_s3Xu2
                         $dRead7_s3Xu3
                         n_s3Xu8] \u []
                            GHC.Read.$fRead(,,,,,,,)2
                                $dRead_s3XtW
                                $dRead1_s3XtX
                                $dRead2_s3XtY
                                $dRead3_s3XtZ
                                $dRead4_s3Xu0
                                $dRead5_s3Xu1
                                $dRead6_s3Xu2
                                $dRead7_s3Xu3
                                n_s3Xu8; } in
                  let {
                    sat_s3Xut [Occ=Once]
                      :: forall b2.
                         ((a_a3KGE, b_a3KGF, c_a3KGG, d_a3KGH, e_a3KGI, f_a3KGJ, g_a3KGK,
                           h_a3KGL, i_a3KGM)
                          -> Text.ParserCombinators.ReadP.P b2)
                         -> Text.ParserCombinators.ReadP.P b2
                    [LclId] =
                        [$dRead8_s3Xu4 n_s3Xu8 ds1_s3Xu9] \r [k1_s3Xua]
                            let {
                              sat_s3Xus [Occ=Once]
                                :: (a_a3KGE, b_a3KGF, c_a3KGG, d_a3KGH, e_a3KGI, f_a3KGJ, g_a3KGK,
                                    h_a3KGL)
                                   -> Text.ParserCombinators.ReadP.P b2_a3nIU
                              [LclId] =
                                  [$dRead8_s3Xu4 n_s3Xu8 k1_s3Xua] \r [a1_s3Xub]
                                      case a1_s3Xub of {
                                        (,,,,,,,) a2_s3Xud [Occ=OnceL]
                                                  b3_s3Xue [Occ=OnceL]
                                                  c1_s3Xuf [Occ=OnceL]
                                                  d1_s3Xug [Occ=OnceL]
                                                  e1_s3Xuh [Occ=OnceL]
                                                  f1_s3Xui [Occ=OnceL]
                                                  g1_s3Xuj [Occ=OnceL]
                                                  h1_s3Xuk [Occ=OnceL] ->
                                            let {
                                              sat_s3Xup [Occ=Once]
                                                :: () -> Text.ParserCombinators.ReadP.P b2_a3nIU
                                              [LclId] =
                                                  [$dRead8_s3Xu4
                                                   n_s3Xu8
                                                   k1_s3Xua
                                                   a2_s3Xud
                                                   b3_s3Xue
                                                   c1_s3Xuf
                                                   d1_s3Xug
                                                   e1_s3Xuh
                                                   f1_s3Xui
                                                   g1_s3Xuj
                                                   h1_s3Xuk] \r [a3_s3Xul]
                                                      let {
                                                        sat_s3Xuo [Occ=Once]
                                                          :: i_a3KGM
                                                             -> Text.ParserCombinators.ReadP.P
                                                                  b2_a3nIU
                                                        [LclId] =
                                                            [k1_s3Xua
                                                             a2_s3Xud
                                                             b3_s3Xue
                                                             c1_s3Xuf
                                                             d1_s3Xug
                                                             e1_s3Xuh
                                                             f1_s3Xui
                                                             g1_s3Xuj
                                                             h1_s3Xuk] \r [a4_s3Xum]
                                                                let {
                                                                  sat_s3Xun [Occ=Once]
                                                                    :: (a_a3KGE, b_a3KGF, c_a3KGG,
                                                                        d_a3KGH, e_a3KGI, f_a3KGJ,
                                                                        g_a3KGK, h_a3KGL, i_a3KGM)
                                                                  [LclId] =
                                                                      CCCS (,,,,,,,,)! [a2_s3Xud
                                                                                        b3_s3Xue
                                                                                        c1_s3Xuf
                                                                                        d1_s3Xug
                                                                                        e1_s3Xuh
                                                                                        f1_s3Xui
                                                                                        g1_s3Xuj
                                                                                        h1_s3Xuk
                                                                                        a4_s3Xum];
                                                                } in  k1_s3Xua sat_s3Xun;
                                                      } in 
                                                        GHC.Read.readPrec
                                                            $dRead8_s3Xu4 n_s3Xu8 sat_s3Xuo;
                                            } in 
                                              case
                                                  Text.Read.Lex.$wexpect
                                                      GHC.Read.$fRead(,)_lexeme sat_s3Xup
                                              of
                                              { Unit# ww1_s3Xur [Occ=Once] ->
                                                    Text.ParserCombinators.ReadP.Look [ww1_s3Xur];
                                              };
                                      };
                            } in  ds1_s3Xu9 sat_s3Xus;
                  } in  sat_s3Xut; } in
        let {
          lvl2_s3Xuu [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> forall b2.
                  ((a_a3KGE, b_a3KGF, c_a3KGG, d_a3KGH, e_a3KGI, f_a3KGJ, g_a3KGK,
                    h_a3KGL, i_a3KGM)
                   -> Text.ParserCombinators.ReadP.P b2)
                  -> Text.ParserCombinators.ReadP.P b2
          [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
              [p_s3Xu7] \r [w_s3Xuv w1_s3Xuw]
                  case GHC.Read.$wparen' p_s3Xu7 w_s3Xuv w1_s3Xuw of {
                    Unit# ww1_s3Xuy [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Get [ww1_s3Xuy];
                  }; } in
        let {
          sat_s3XuD [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_a3KGE, b_a3KGF, c_a3KGG, d_a3KGH, e_a3KGI, f_a3KGJ, g_a3KGK,
                  h_a3KGL, i_a3KGM)
          [LclId] =
              [lvl2_s3Xuu] \r [eta2_s3Xuz eta3_s3XuA]
                  case
                      GHC.Read.$wskipSpacesThenP lvl2_s3Xuu eta2_s3Xuz eta3_s3XuA
                  of
                  { Unit# ww1_s3XuC [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Look [ww1_s3XuC];
                  };
        } in  GHC.Read.list3 sat_s3XuD eta_s3Xu5 eta1_s3Xu6;

GHC.Read.$fRead(,,,,,,,)1
  :: forall a b c d e f g h.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        ((a, b, c, d, e, f, g, h) -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=10,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XuE
           $dRead1_s3XuF
           $dRead2_s3XuG
           $dRead3_s3XuH
           $dRead4_s3XuI
           $dRead5_s3XuJ
           $dRead6_s3XuK
           $dRead7_s3XuL
           eta_s3XuM
           eta1_s3XuN]
        let {
          p_s3XuO [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> Text.ParserCombinators.ReadP.ReadP
                    (a_a3KI0, b_a3KI1, c_a3KI2, d_a3KI3, e_a3KI4, f_a3KI5, g_a3KI6,
                     h_a3KI7)
          [LclId, Arity=1, Unf=OtherCon []] =
              [$dRead_s3XuE
               $dRead1_s3XuF
               $dRead2_s3XuG
               $dRead3_s3XuH
               $dRead4_s3XuI
               $dRead5_s3XuJ
               $dRead6_s3XuK
               $dRead7_s3XuL] \r [eta_B1]
                  GHC.Read.$fRead(,,,,,,,)2
                      $dRead_s3XuE
                      $dRead1_s3XuF
                      $dRead2_s3XuG
                      $dRead3_s3XuH
                      $dRead4_s3XuI
                      $dRead5_s3XuJ
                      $dRead6_s3XuK
                      $dRead7_s3XuL
                      eta_B1; } in
        let {
          lvl2_s3XuP [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> forall b2.
                  ((a_a3KI0, b_a3KI1, c_a3KI2, d_a3KI3, e_a3KI4, f_a3KI5, g_a3KI6,
                    h_a3KI7)
                   -> Text.ParserCombinators.ReadP.P b2)
                  -> Text.ParserCombinators.ReadP.P b2
          [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
              [p_s3XuO] \r [w_s3XuQ w1_s3XuR]
                  case GHC.Read.$wparen' p_s3XuO w_s3XuQ w1_s3XuR of {
                    Unit# ww1_s3XuT [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Get [ww1_s3XuT];
                  }; } in
        let {
          sat_s3XuY [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_a3KI0, b_a3KI1, c_a3KI2, d_a3KI3, e_a3KI4, f_a3KI5, g_a3KI6,
                  h_a3KI7)
          [LclId] =
              [lvl2_s3XuP] \r [eta2_s3XuU eta3_s3XuV]
                  case
                      GHC.Read.$wskipSpacesThenP lvl2_s3XuP eta2_s3XuU eta3_s3XuV
                  of
                  { Unit# ww1_s3XuX [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Look [ww1_s3XuX];
                  };
        } in  GHC.Read.list3 sat_s3XuY eta_s3XuM eta1_s3XuN;

GHC.Read.$fRead(,,,,,,)1
  :: forall a b c d e f g.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f,
      GHC.Read.Read g) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        ((a, b, c, d, e, f, g) -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=9,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XuZ
           $dRead1_s3Xv0
           $dRead2_s3Xv1
           $dRead3_s3Xv2
           $dRead4_s3Xv3
           $dRead5_s3Xv4
           $dRead6_s3Xv5
           eta_s3Xv6
           eta1_s3Xv7]
        let {
          p_s3Xv8 [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> Text.ParserCombinators.ReadP.ReadP
                    (a_a3KIU, b_a3KIV, c_a3KIW, d_a3KIX, e_a3KIY, f_a3KIZ, g_a3KJ0)
          [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
              [$dRead_s3XuZ
               $dRead1_s3Xv0
               $dRead2_s3Xv1
               $dRead3_s3Xv2
               $dRead4_s3Xv3
               $dRead5_s3Xv4
               $dRead6_s3Xv5] \r [n_s3Xv9]
                  let {
                    ds1_s3Xva [Occ=OnceL, Dmd=<L,C(U)>]
                      :: Text.ParserCombinators.ReadP.ReadP
                           (a_a3KIU, b_a3KIV, c_a3KIW, d_a3KIX)
                    [LclId] =
                        [$dRead_s3XuZ
                         $dRead1_s3Xv0
                         $dRead2_s3Xv1
                         $dRead3_s3Xv2
                         n_s3Xv9] \u []
                            GHC.Read.$fRead(,,,)2
                                $dRead_s3XuZ
                                $dRead1_s3Xv0
                                $dRead2_s3Xv1
                                $dRead3_s3Xv2
                                n_s3Xv9; } in
                  let {
                    sat_s3Xvz [Occ=Once]
                      :: forall b2.
                         ((a_a3KIU, b_a3KIV, c_a3KIW, d_a3KIX, e_a3KIY, f_a3KIZ, g_a3KJ0)
                          -> Text.ParserCombinators.ReadP.P b2)
                         -> Text.ParserCombinators.ReadP.P b2
                    [LclId] =
                        [$dRead4_s3Xv3
                         $dRead5_s3Xv4
                         $dRead6_s3Xv5
                         n_s3Xv9
                         ds1_s3Xva] \r [k1_s3Xvb]
                            let {
                              sat_s3Xvy [Occ=Once]
                                :: (a_a3KIU, b_a3KIV, c_a3KIW, d_a3KIX)
                                   -> Text.ParserCombinators.ReadP.P b2_a3nIU
                              [LclId] =
                                  [$dRead4_s3Xv3
                                   $dRead5_s3Xv4
                                   $dRead6_s3Xv5
                                   n_s3Xv9
                                   k1_s3Xvb] \r [a1_s3Xvc]
                                      case a1_s3Xvc of {
                                        (,,,) a2_s3Xve [Occ=OnceL]
                                              b3_s3Xvf [Occ=OnceL]
                                              c1_s3Xvg [Occ=OnceL]
                                              d1_s3Xvh [Occ=OnceL] ->
                                            let {
                                              sat_s3Xvv [Occ=Once]
                                                :: () -> Text.ParserCombinators.ReadP.P b2_a3nIU
                                              [LclId] =
                                                  [$dRead4_s3Xv3
                                                   $dRead5_s3Xv4
                                                   $dRead6_s3Xv5
                                                   n_s3Xv9
                                                   k1_s3Xvb
                                                   a2_s3Xve
                                                   b3_s3Xvf
                                                   c1_s3Xvg
                                                   d1_s3Xvh] \r [a3_s3Xvi]
                                                      let {
                                                        sat_s3Xvu [Occ=Once]
                                                          :: (e_a3KIY, f_a3KIZ)
                                                             -> Text.ParserCombinators.ReadP.P
                                                                  b2_a3nIU
                                                        [LclId] =
                                                            [$dRead6_s3Xv5
                                                             n_s3Xv9
                                                             k1_s3Xvb
                                                             a2_s3Xve
                                                             b3_s3Xvf
                                                             c1_s3Xvg
                                                             d1_s3Xvh] \r [a4_s3Xvj]
                                                                case a4_s3Xvj of {
                                                                  (,) e1_s3Xvl [Occ=OnceL]
                                                                      f1_s3Xvm [Occ=OnceL] ->
                                                                      let {
                                                                        sat_s3Xvr [Occ=Once]
                                                                          :: ()
                                                                             -> Text.ParserCombinators.ReadP.P
                                                                                  b2_a3nIU
                                                                        [LclId] =
                                                                            [$dRead6_s3Xv5
                                                                             n_s3Xv9
                                                                             k1_s3Xvb
                                                                             a2_s3Xve
                                                                             b3_s3Xvf
                                                                             c1_s3Xvg
                                                                             d1_s3Xvh
                                                                             e1_s3Xvl
                                                                             f1_s3Xvm] \r [a5_s3Xvn]
                                                                                let {
                                                                                  sat_s3Xvq [Occ=Once]
                                                                                    :: g_a3KJ0
                                                                                       -> Text.ParserCombinators.ReadP.P
                                                                                            b2_a3nIU
                                                                                  [LclId] =
                                                                                      [k1_s3Xvb
                                                                                       a2_s3Xve
                                                                                       b3_s3Xvf
                                                                                       c1_s3Xvg
                                                                                       d1_s3Xvh
                                                                                       e1_s3Xvl
                                                                                       f1_s3Xvm] \r [a6_s3Xvo]
                                                                                          let {
                                                                                            sat_s3Xvp [Occ=Once]
                                                                                              :: (a_a3KIU,
                                                                                                  b_a3KIV,
                                                                                                  c_a3KIW,
                                                                                                  d_a3KIX,
                                                                                                  e_a3KIY,
                                                                                                  f_a3KIZ,
                                                                                                  g_a3KJ0)
                                                                                            [LclId] =
                                                                                                CCCS (,,,,,,)! [a2_s3Xve
                                                                                                                b3_s3Xvf
                                                                                                                c1_s3Xvg
                                                                                                                d1_s3Xvh
                                                                                                                e1_s3Xvl
                                                                                                                f1_s3Xvm
                                                                                                                a6_s3Xvo];
                                                                                          } in 
                                                                                            k1_s3Xvb
                                                                                                sat_s3Xvp;
                                                                                } in 
                                                                                  GHC.Read.readPrec
                                                                                      $dRead6_s3Xv5
                                                                                      n_s3Xv9
                                                                                      sat_s3Xvq;
                                                                      } in 
                                                                        case
                                                                            Text.Read.Lex.$wexpect
                                                                                GHC.Read.$fRead(,)_lexeme
                                                                                sat_s3Xvr
                                                                        of
                                                                        { Unit# ww1_s3Xvt [Occ=Once] ->
                                                                              Text.ParserCombinators.ReadP.Look [ww1_s3Xvt];
                                                                        };
                                                                };
                                                      } in 
                                                        GHC.Read.$fRead(,)2
                                                            $dRead4_s3Xv3
                                                            $dRead5_s3Xv4
                                                            n_s3Xv9
                                                            sat_s3Xvu;
                                            } in 
                                              case
                                                  Text.Read.Lex.$wexpect
                                                      GHC.Read.$fRead(,)_lexeme sat_s3Xvv
                                              of
                                              { Unit# ww1_s3Xvx [Occ=Once] ->
                                                    Text.ParserCombinators.ReadP.Look [ww1_s3Xvx];
                                              };
                                      };
                            } in  ds1_s3Xva sat_s3Xvy;
                  } in  sat_s3Xvz; } in
        let {
          lvl2_s3XvA [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> forall b2.
                  ((a_a3KIU, b_a3KIV, c_a3KIW, d_a3KIX, e_a3KIY, f_a3KIZ, g_a3KJ0)
                   -> Text.ParserCombinators.ReadP.P b2)
                  -> Text.ParserCombinators.ReadP.P b2
          [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
              [p_s3Xv8] \r [w_s3XvB w1_s3XvC]
                  case GHC.Read.$wparen' p_s3Xv8 w_s3XvB w1_s3XvC of {
                    Unit# ww1_s3XvE [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Get [ww1_s3XvE];
                  }; } in
        let {
          sat_s3XvJ [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_a3KIU, b_a3KIV, c_a3KIW, d_a3KIX, e_a3KIY, f_a3KIZ, g_a3KJ0)
          [LclId] =
              [lvl2_s3XvA] \r [eta2_s3XvF eta3_s3XvG]
                  case
                      GHC.Read.$wskipSpacesThenP lvl2_s3XvA eta2_s3XvF eta3_s3XvG
                  of
                  { Unit# ww1_s3XvI [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Look [ww1_s3XvI];
                  };
        } in  GHC.Read.list3 sat_s3XvJ eta_s3Xv6 eta1_s3Xv7;

GHC.Read.$fRead(,,,,,)1
  :: forall a b c d e f.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        ((a, b, c, d, e, f) -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=8,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XvK
           $dRead1_s3XvL
           $dRead2_s3XvM
           $dRead3_s3XvN
           $dRead4_s3XvO
           $dRead5_s3XvP
           eta_s3XvQ
           eta1_s3XvR]
        let {
          p_s3XvS [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> Text.ParserCombinators.ReadP.ReadP
                    (a_a3KKe, b_a3KKf, c_a3KKg, d_a3KKh, e_a3KKi, f_a3KKj)
          [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
              [$dRead_s3XvK
               $dRead1_s3XvL
               $dRead2_s3XvM
               $dRead3_s3XvN
               $dRead4_s3XvO
               $dRead5_s3XvP] \r [n_s3XvT]
                  let {
                    ds1_s3XvU [Occ=OnceL, Dmd=<L,C(U)>]
                      :: Text.ParserCombinators.ReadP.ReadP
                           (a_a3KKe, b_a3KKf, c_a3KKg, d_a3KKh)
                    [LclId] =
                        [$dRead_s3XvK
                         $dRead1_s3XvL
                         $dRead2_s3XvM
                         $dRead3_s3XvN
                         n_s3XvT] \u []
                            GHC.Read.$fRead(,,,)2
                                $dRead_s3XvK
                                $dRead1_s3XvL
                                $dRead2_s3XvM
                                $dRead3_s3XvN
                                n_s3XvT; } in
                  let {
                    sat_s3Xwd [Occ=Once]
                      :: forall b2.
                         ((a_a3KKe, b_a3KKf, c_a3KKg, d_a3KKh, e_a3KKi, f_a3KKj)
                          -> Text.ParserCombinators.ReadP.P b2)
                         -> Text.ParserCombinators.ReadP.P b2
                    [LclId] =
                        [$dRead4_s3XvO $dRead5_s3XvP n_s3XvT ds1_s3XvU] \r [k1_s3XvV]
                            let {
                              sat_s3Xwc [Occ=Once]
                                :: (a_a3KKe, b_a3KKf, c_a3KKg, d_a3KKh)
                                   -> Text.ParserCombinators.ReadP.P b2_a3nIU
                              [LclId] =
                                  [$dRead4_s3XvO $dRead5_s3XvP n_s3XvT k1_s3XvV] \r [a1_s3XvW]
                                      case a1_s3XvW of {
                                        (,,,) a2_s3XvY [Occ=OnceL]
                                              b3_s3XvZ [Occ=OnceL]
                                              c1_s3Xw0 [Occ=OnceL]
                                              d1_s3Xw1 [Occ=OnceL] ->
                                            let {
                                              sat_s3Xw9 [Occ=Once]
                                                :: () -> Text.ParserCombinators.ReadP.P b2_a3nIU
                                              [LclId] =
                                                  [$dRead4_s3XvO
                                                   $dRead5_s3XvP
                                                   n_s3XvT
                                                   k1_s3XvV
                                                   a2_s3XvY
                                                   b3_s3XvZ
                                                   c1_s3Xw0
                                                   d1_s3Xw1] \r [a3_s3Xw2]
                                                      let {
                                                        sat_s3Xw8 [Occ=Once]
                                                          :: (e_a3KKi, f_a3KKj)
                                                             -> Text.ParserCombinators.ReadP.P
                                                                  b2_a3nIU
                                                        [LclId] =
                                                            [k1_s3XvV
                                                             a2_s3XvY
                                                             b3_s3XvZ
                                                             c1_s3Xw0
                                                             d1_s3Xw1] \r [a4_s3Xw3]
                                                                case a4_s3Xw3 of {
                                                                  (,) e1_s3Xw5 [Occ=Once]
                                                                      f1_s3Xw6 [Occ=Once] ->
                                                                      let {
                                                                        sat_s3Xw7 [Occ=Once]
                                                                          :: (a_a3KKe, b_a3KKf,
                                                                              c_a3KKg, d_a3KKh,
                                                                              e_a3KKi, f_a3KKj)
                                                                        [LclId] =
                                                                            CCCS (,,,,,)! [a2_s3XvY
                                                                                           b3_s3XvZ
                                                                                           c1_s3Xw0
                                                                                           d1_s3Xw1
                                                                                           e1_s3Xw5
                                                                                           f1_s3Xw6];
                                                                      } in  k1_s3XvV sat_s3Xw7;
                                                                };
                                                      } in 
                                                        GHC.Read.$fRead(,)2
                                                            $dRead4_s3XvO
                                                            $dRead5_s3XvP
                                                            n_s3XvT
                                                            sat_s3Xw8;
                                            } in 
                                              case
                                                  Text.Read.Lex.$wexpect
                                                      GHC.Read.$fRead(,)_lexeme sat_s3Xw9
                                              of
                                              { Unit# ww1_s3Xwb [Occ=Once] ->
                                                    Text.ParserCombinators.ReadP.Look [ww1_s3Xwb];
                                              };
                                      };
                            } in  ds1_s3XvU sat_s3Xwc;
                  } in  sat_s3Xwd; } in
        let {
          lvl2_s3Xwe [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> forall b2.
                  ((a_a3KKe, b_a3KKf, c_a3KKg, d_a3KKh, e_a3KKi, f_a3KKj)
                   -> Text.ParserCombinators.ReadP.P b2)
                  -> Text.ParserCombinators.ReadP.P b2
          [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
              [p_s3XvS] \r [w_s3Xwf w1_s3Xwg]
                  case GHC.Read.$wparen' p_s3XvS w_s3Xwf w1_s3Xwg of {
                    Unit# ww1_s3Xwi [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Get [ww1_s3Xwi];
                  }; } in
        let {
          sat_s3Xwn [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_a3KKe, b_a3KKf, c_a3KKg, d_a3KKh, e_a3KKi, f_a3KKj)
          [LclId] =
              [lvl2_s3Xwe] \r [eta2_s3Xwj eta3_s3Xwk]
                  case
                      GHC.Read.$wskipSpacesThenP lvl2_s3Xwe eta2_s3Xwj eta3_s3Xwk
                  of
                  { Unit# ww1_s3Xwm [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Look [ww1_s3Xwm];
                  };
        } in  GHC.Read.list3 sat_s3Xwn eta_s3XvQ eta1_s3XvR;

GHC.Read.$fRead(,,,,)1
  :: forall a b c d e.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        ((a, b, c, d, e) -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=7,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Xwo
           $dRead1_s3Xwp
           $dRead2_s3Xwq
           $dRead3_s3Xwr
           $dRead4_s3Xws
           eta_s3Xwt
           eta1_s3Xwu]
        let {
          p_s3Xwv [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> Text.ParserCombinators.ReadP.ReadP
                    (a_a3KLl, b_a3KLm, c_a3KLn, d_a3KLo, e_a3KLp)
          [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
              [$dRead_s3Xwo
               $dRead1_s3Xwp
               $dRead2_s3Xwq
               $dRead3_s3Xwr
               $dRead4_s3Xws] \r [n_s3Xww]
                  let {
                    ds1_s3Xwx [Occ=OnceL, Dmd=<L,C(U)>]
                      :: Text.ParserCombinators.ReadP.ReadP
                           (a_a3KLl, b_a3KLm, c_a3KLn, d_a3KLo)
                    [LclId] =
                        [$dRead_s3Xwo
                         $dRead1_s3Xwp
                         $dRead2_s3Xwq
                         $dRead3_s3Xwr
                         n_s3Xww] \u []
                            GHC.Read.$fRead(,,,)2
                                $dRead_s3Xwo
                                $dRead1_s3Xwp
                                $dRead2_s3Xwq
                                $dRead3_s3Xwr
                                n_s3Xww; } in
                  let {
                    sat_s3XwN [Occ=Once]
                      :: forall b2.
                         ((a_a3KLl, b_a3KLm, c_a3KLn, d_a3KLo, e_a3KLp)
                          -> Text.ParserCombinators.ReadP.P b2)
                         -> Text.ParserCombinators.ReadP.P b2
                    [LclId] =
                        [$dRead4_s3Xws n_s3Xww ds1_s3Xwx] \r [k1_s3Xwy]
                            let {
                              sat_s3XwM [Occ=Once]
                                :: (a_a3KLl, b_a3KLm, c_a3KLn, d_a3KLo)
                                   -> Text.ParserCombinators.ReadP.P b2_a3nIU
                              [LclId] =
                                  [$dRead4_s3Xws n_s3Xww k1_s3Xwy] \r [a1_s3Xwz]
                                      case a1_s3Xwz of {
                                        (,,,) a2_s3XwB [Occ=OnceL]
                                              b3_s3XwC [Occ=OnceL]
                                              c1_s3XwD [Occ=OnceL]
                                              d1_s3XwE [Occ=OnceL] ->
                                            let {
                                              sat_s3XwJ [Occ=Once]
                                                :: () -> Text.ParserCombinators.ReadP.P b2_a3nIU
                                              [LclId] =
                                                  [$dRead4_s3Xws
                                                   n_s3Xww
                                                   k1_s3Xwy
                                                   a2_s3XwB
                                                   b3_s3XwC
                                                   c1_s3XwD
                                                   d1_s3XwE] \r [a3_s3XwF]
                                                      let {
                                                        sat_s3XwI [Occ=Once]
                                                          :: e_a3KLp
                                                             -> Text.ParserCombinators.ReadP.P
                                                                  b2_a3nIU
                                                        [LclId] =
                                                            [k1_s3Xwy
                                                             a2_s3XwB
                                                             b3_s3XwC
                                                             c1_s3XwD
                                                             d1_s3XwE] \r [a4_s3XwG]
                                                                let {
                                                                  sat_s3XwH [Occ=Once]
                                                                    :: (a_a3KLl, b_a3KLm, c_a3KLn,
                                                                        d_a3KLo, e_a3KLp)
                                                                  [LclId] =
                                                                      CCCS (,,,,)! [a2_s3XwB
                                                                                    b3_s3XwC
                                                                                    c1_s3XwD
                                                                                    d1_s3XwE
                                                                                    a4_s3XwG];
                                                                } in  k1_s3Xwy sat_s3XwH;
                                                      } in 
                                                        GHC.Read.readPrec
                                                            $dRead4_s3Xws n_s3Xww sat_s3XwI;
                                            } in 
                                              case
                                                  Text.Read.Lex.$wexpect
                                                      GHC.Read.$fRead(,)_lexeme sat_s3XwJ
                                              of
                                              { Unit# ww1_s3XwL [Occ=Once] ->
                                                    Text.ParserCombinators.ReadP.Look [ww1_s3XwL];
                                              };
                                      };
                            } in  ds1_s3Xwx sat_s3XwM;
                  } in  sat_s3XwN; } in
        let {
          lvl2_s3XwO [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> forall b2.
                  ((a_a3KLl, b_a3KLm, c_a3KLn, d_a3KLo, e_a3KLp)
                   -> Text.ParserCombinators.ReadP.P b2)
                  -> Text.ParserCombinators.ReadP.P b2
          [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
              [p_s3Xwv] \r [w_s3XwP w1_s3XwQ]
                  case GHC.Read.$wparen' p_s3Xwv w_s3XwP w1_s3XwQ of {
                    Unit# ww1_s3XwS [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Get [ww1_s3XwS];
                  }; } in
        let {
          sat_s3XwX [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_a3KLl, b_a3KLm, c_a3KLn, d_a3KLo, e_a3KLp)
          [LclId] =
              [lvl2_s3XwO] \r [eta2_s3XwT eta3_s3XwU]
                  case
                      GHC.Read.$wskipSpacesThenP lvl2_s3XwO eta2_s3XwT eta3_s3XwU
                  of
                  { Unit# ww1_s3XwW [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Look [ww1_s3XwW];
                  };
        } in  GHC.Read.list3 sat_s3XwX eta_s3Xwt eta1_s3Xwu;

GHC.Read.$fRead(,,,)1
  :: forall a b c d.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        ((a, b, c, d) -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=6,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XwY
           $dRead1_s3XwZ
           $dRead2_s3Xx0
           $dRead3_s3Xx1
           eta_s3Xx2
           eta1_s3Xx3]
        let {
          p_s3Xx4 [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> Text.ParserCombinators.ReadP.ReadP
                    (a_a3KMn, b_a3KMo, c_a3KMp, d_a3KMq)
          [LclId, Arity=1, Unf=OtherCon []] =
              [$dRead_s3XwY
               $dRead1_s3XwZ
               $dRead2_s3Xx0
               $dRead3_s3Xx1] \r [eta_B1]
                  GHC.Read.$fRead(,,,)2
                      $dRead_s3XwY $dRead1_s3XwZ $dRead2_s3Xx0 $dRead3_s3Xx1 eta_B1; } in
        let {
          lvl2_s3Xx5 [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> forall b2.
                  ((a_a3KMn, b_a3KMo, c_a3KMp, d_a3KMq)
                   -> Text.ParserCombinators.ReadP.P b2)
                  -> Text.ParserCombinators.ReadP.P b2
          [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
              [p_s3Xx4] \r [w_s3Xx6 w1_s3Xx7]
                  case GHC.Read.$wparen' p_s3Xx4 w_s3Xx6 w1_s3Xx7 of {
                    Unit# ww1_s3Xx9 [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Get [ww1_s3Xx9];
                  }; } in
        let {
          sat_s3Xxe [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_a3KMn, b_a3KMo, c_a3KMp, d_a3KMq)
          [LclId] =
              [lvl2_s3Xx5] \r [eta2_s3Xxa eta3_s3Xxb]
                  case
                      GHC.Read.$wskipSpacesThenP lvl2_s3Xx5 eta2_s3Xxa eta3_s3Xxb
                  of
                  { Unit# ww1_s3Xxd [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Look [ww1_s3Xxd];
                  };
        } in  GHC.Read.list3 sat_s3Xxe eta_s3Xx2 eta1_s3Xx3;

GHC.Read.$fRead(,,)1
  :: forall a b c.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        ((a, b, c) -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=5,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Xxf
           $dRead1_s3Xxg
           $dRead2_s3Xxh
           eta_s3Xxi
           eta1_s3Xxj]
        let {
          p_s3Xxk [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> Text.ParserCombinators.ReadP.ReadP (a_a3KN1, b_a3KN2, c_a3KN3)
          [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
              [$dRead_s3Xxf $dRead1_s3Xxg $dRead2_s3Xxh] \r [n_s3Xxl]
                  let {
                    ds1_s3Xxm [Occ=OnceL, Dmd=<L,C(U)>]
                      :: Text.ParserCombinators.ReadP.ReadP (a_a3KN1, b_a3KN2)
                    [LclId] =
                        [$dRead_s3Xxf $dRead1_s3Xxg n_s3Xxl] \u []
                            GHC.Read.$fRead(,)2 $dRead_s3Xxf $dRead1_s3Xxg n_s3Xxl; } in
                  let {
                    sat_s3XxA [Occ=Once]
                      :: forall b2.
                         ((a_a3KN1, b_a3KN2, c_a3KN3) -> Text.ParserCombinators.ReadP.P b2)
                         -> Text.ParserCombinators.ReadP.P b2
                    [LclId] =
                        [$dRead2_s3Xxh n_s3Xxl ds1_s3Xxm] \r [k1_s3Xxn]
                            let {
                              sat_s3Xxz [Occ=Once]
                                :: (a_a3KN1, b_a3KN2) -> Text.ParserCombinators.ReadP.P b2_a3nIU
                              [LclId] =
                                  [$dRead2_s3Xxh n_s3Xxl k1_s3Xxn] \r [a1_s3Xxo]
                                      case a1_s3Xxo of {
                                        (,) a2_s3Xxq [Occ=OnceL] b3_s3Xxr [Occ=OnceL] ->
                                            let {
                                              sat_s3Xxw [Occ=Once]
                                                :: () -> Text.ParserCombinators.ReadP.P b2_a3nIU
                                              [LclId] =
                                                  [$dRead2_s3Xxh
                                                   n_s3Xxl
                                                   k1_s3Xxn
                                                   a2_s3Xxq
                                                   b3_s3Xxr] \r [a3_s3Xxs]
                                                      let {
                                                        sat_s3Xxv [Occ=Once]
                                                          :: c_a3KN3
                                                             -> Text.ParserCombinators.ReadP.P
                                                                  b2_a3nIU
                                                        [LclId] =
                                                            [k1_s3Xxn
                                                             a2_s3Xxq
                                                             b3_s3Xxr] \r [a4_s3Xxt]
                                                                let {
                                                                  sat_s3Xxu [Occ=Once]
                                                                    :: (a_a3KN1, b_a3KN2, c_a3KN3)
                                                                  [LclId] =
                                                                      CCCS (,,)! [a2_s3Xxq
                                                                                  b3_s3Xxr
                                                                                  a4_s3Xxt];
                                                                } in  k1_s3Xxn sat_s3Xxu;
                                                      } in 
                                                        GHC.Read.readPrec
                                                            $dRead2_s3Xxh n_s3Xxl sat_s3Xxv;
                                            } in 
                                              case
                                                  Text.Read.Lex.$wexpect
                                                      GHC.Read.$fRead(,)_lexeme sat_s3Xxw
                                              of
                                              { Unit# ww1_s3Xxy [Occ=Once] ->
                                                    Text.ParserCombinators.ReadP.Look [ww1_s3Xxy];
                                              };
                                      };
                            } in  ds1_s3Xxm sat_s3Xxz;
                  } in  sat_s3XxA; } in
        let {
          lvl2_s3XxB [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> forall b2.
                  ((a_a3KN1, b_a3KN2, c_a3KN3) -> Text.ParserCombinators.ReadP.P b2)
                  -> Text.ParserCombinators.ReadP.P b2
          [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
              [p_s3Xxk] \r [w_s3XxC w1_s3XxD]
                  case GHC.Read.$wparen' p_s3Xxk w_s3XxC w1_s3XxD of {
                    Unit# ww1_s3XxF [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Get [ww1_s3XxF];
                  }; } in
        let {
          sat_s3XxK [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_a3KN1, b_a3KN2, c_a3KN3)
          [LclId] =
              [lvl2_s3XxB] \r [eta2_s3XxG eta3_s3XxH]
                  case
                      GHC.Read.$wskipSpacesThenP lvl2_s3XxB eta2_s3XxG eta3_s3XxH
                  of
                  { Unit# ww1_s3XxJ [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Look [ww1_s3XxJ];
                  };
        } in  GHC.Read.list3 sat_s3XxK eta_s3Xxi eta1_s3Xxj;

GHC.Read.$fRead(,)1
  :: forall a b.
     (GHC.Read.Read a, GHC.Read.Read b) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        ((a, b) -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=4,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XxL $dRead1_s3XxM eta_s3XxN eta1_s3XxO]
        let {
          p_s3XxP [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> Text.ParserCombinators.ReadP.ReadP (a_a3KNT, b_a3KNU)
          [LclId, Arity=1, Unf=OtherCon []] =
              [$dRead_s3XxL $dRead1_s3XxM] \r [eta_B1]
                  GHC.Read.$fRead(,)2 $dRead_s3XxL $dRead1_s3XxM eta_B1; } in
        let {
          lvl2_s3XxQ [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> forall b2.
                  ((a_a3KNT, b_a3KNU) -> Text.ParserCombinators.ReadP.P b2)
                  -> Text.ParserCombinators.ReadP.P b2
          [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
              [p_s3XxP] \r [w_s3XxR w1_s3XxS]
                  case GHC.Read.$wparen' p_s3XxP w_s3XxR w1_s3XxS of {
                    Unit# ww1_s3XxU [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Get [ww1_s3XxU];
                  }; } in
        let {
          sat_s3XxZ [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec (a_a3KNT, b_a3KNU)
          [LclId] =
              [lvl2_s3XxQ] \r [eta2_s3XxV eta3_s3XxW]
                  case
                      GHC.Read.$wskipSpacesThenP lvl2_s3XxQ eta2_s3XxV eta3_s3XxW
                  of
                  { Unit# ww1_s3XxY [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Look [ww1_s3XxY];
                  };
        } in  GHC.Read.list3 sat_s3XxZ eta_s3XxN eta1_s3XxO;

GHC.Read.list2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "["#;

GHC.Read.list1 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Read.list2;

GHC.Read.list_lexeme :: Text.Read.Lex.Lexeme
[GblId, Str=m3, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Punc! [GHC.Read.list1];

GHC.Read.list
  :: forall a.
     Text.ParserCombinators.ReadPrec.ReadPrec a
     -> Text.ParserCombinators.ReadPrec.ReadPrec [a]
[GblId, Arity=1, Str=<L,1*C1(C(U))>, Unf=OtherCon []] =
    [] \r [readx_s3Xy0]
        let {
          ds1_s3Xy1 [Dmd=<L,C(U)>]
            :: Text.ParserCombinators.ReadP.ReadP a_a3KpE
          [LclId] =
              [readx_s3Xy0] \u []
                  readx_s3Xy0 Text.ParserCombinators.ReadPrec.minPrec; } in
        let {
          $wlistRest_s3Xy2 [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
            :: GHC.Types.Bool
               -> forall b1.
                  ([a_a3KpE] -> Text.ParserCombinators.ReadP.P b1)
                  -> Text.ParserCombinators.ReadP.P b1
          [LclId, Arity=2, Str=<L,U><L,C(U)>, Unf=OtherCon []] =
              sat-only [ds1_s3Xy1 $wlistRest_s3Xy2] \r [w_s3Xy3 w1_s3Xy4]
                  let {
                    lvl116_s3Xy5 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3MtN
                    [LclId] =
                        [ds1_s3Xy1 $wlistRest_s3Xy2 w_s3Xy3 w1_s3Xy4] \u []
                            let {
                              lvl2_s3Xy6 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3MtN
                              [LclId] =
                                  [w1_s3Xy4] \u [] w1_s3Xy4 GHC.Types.[]; } in
                            let {
                              lvl3_s3Xy7 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3MtN
                              [LclId] =
                                  [ds1_s3Xy1 $wlistRest_s3Xy2 w1_s3Xy4] \u []
                                      let {
                                        sat_s3Xyc [Occ=Once]
                                          :: a_a3KpE -> Text.ParserCombinators.ReadP.P b1_s3MtN
                                        [LclId] =
                                            [$wlistRest_s3Xy2 w1_s3Xy4] \r [a1_s3Xy8]
                                                let {
                                                  sat_s3Xyb [Occ=Once]
                                                    :: [a_a3KpE]
                                                       -> Text.ParserCombinators.ReadP.P b1_s3MtN
                                                  [LclId] =
                                                      [w1_s3Xy4 a1_s3Xy8] \r [a2_s3Xy9]
                                                          let {
                                                            sat_s3Xya [Occ=Once] :: [a_a3KpE]
                                                            [LclId] =
                                                                CCCS :! [a1_s3Xy8 a2_s3Xy9];
                                                          } in  w1_s3Xy4 sat_s3Xya;
                                                } in  $wlistRest_s3Xy2 GHC.Types.True sat_s3Xyb;
                                      } in  ds1_s3Xy1 sat_s3Xyc; } in
                            let {
                              sat_s3Xyy [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_s3MtN
                              [LclId] =
                                  [w_s3Xy3 lvl2_s3Xy6 lvl3_s3Xy7] \u []
                                      let {
                                        sat_s3Xyx [Occ=Once]
                                          :: Text.Read.Lex.Lexeme
                                             -> Text.ParserCombinators.ReadP.P b1_s3MtN
                                        [LclId] =
                                            [w_s3Xy3 lvl2_s3Xy6 lvl3_s3Xy7] \r [a1_s3Xyh]
                                                case a1_s3Xyh of {
                                                  __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                                                  Text.Read.Lex.Punc c_s3Xyj [Occ=Once!] ->
                                                      case c_s3Xyj of {
                                                        [] -> Text.ParserCombinators.ReadP.Fail [];
                                                        : ds_s3Xyl [Occ=Once!]
                                                          ds2_s3Xym [Occ=Once*!] ->
                                                            case ds_s3Xyl of {
                                                              GHC.Types.C# ds3_s3Xyo [Occ=Once!] ->
                                                                  case ds3_s3Xyo of {
                                                                    __DEFAULT ->
                                                                        Text.ParserCombinators.ReadP.Fail [];
                                                                    ','# ->
                                                                        case ds2_s3Xym of {
                                                                          [] ->
                                                                              case w_s3Xy3 of {
                                                                                GHC.Types.False ->
                                                                                    Text.ParserCombinators.ReadP.Fail [];
                                                                                GHC.Types.True ->
                                                                                    lvl3_s3Xy7;
                                                                              };
                                                                          : _ [Occ=Dead]
                                                                            _ [Occ=Dead] ->
                                                                              Text.ParserCombinators.ReadP.Fail [];
                                                                        };
                                                                    ']'# ->
                                                                        case ds2_s3Xym of {
                                                                          [] -> lvl2_s3Xy6;
                                                                          : _ [Occ=Dead]
                                                                            _ [Occ=Dead] ->
                                                                              Text.ParserCombinators.ReadP.Fail [];
                                                                        };
                                                                  };
                                                            };
                                                      };
                                                };
                                      } in  Text.Read.Lex.expect2 sat_s3Xyx; } in
                            let {
                              sat_s3Xyf [Occ=OnceL]
                                :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3MtN
                              [LclId] =
                                  [] \r [a3_s3Xyd]
                                      case a3_s3Xyd of {
                                        __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                                      }; } in
                            let {
                              sat_s3Xyg [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_s3MtN
                              [LclId] =
                                  CCCS Text.ParserCombinators.ReadP.Look! [sat_s3Xyf];
                            } in 
                              Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                  sat_s3Xyg sat_s3Xyy; } in
                  let {
                    k_s3Xyz [Occ=OnceL, Dmd=<L,C(U)>]
                      :: () -> Text.ParserCombinators.ReadP.P b1_s3MtN
                    [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
                        [lvl116_s3Xy5] \r [a3_s3XyA] lvl116_s3Xy5; } in
                  let {
                    sat_s3XyC [Occ=Once]
                      :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3MtN
                    [LclId] =
                        [k_s3Xyz] \r [a1_s3XyB]
                            Text.ParserCombinators.ReadP.skipSpaces2 a1_s3XyB k_s3Xyz;
                  } in  Text.ParserCombinators.ReadP.Look [sat_s3XyC]; } in
        let {
          sat_s3XyQ [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec [a_a3KpE]
          [LclId] =
              [ds1_s3Xy1 $wlistRest_s3Xy2] \r [n_s3XyD eta_s3XyE]
                  let {
                    sat_s3XyN [Occ=Once]
                      :: () -> Text.ParserCombinators.ReadP.P b_a3ngn
                    [LclId] =
                        [ds1_s3Xy1 $wlistRest_s3Xy2 eta_s3XyE] \r [a1_s3XyF]
                            let {
                              sat_s3XyM [Occ=Once] :: Text.ParserCombinators.ReadP.P b_a3ngn
                              [LclId] =
                                  [ds1_s3Xy1 $wlistRest_s3Xy2 eta_s3XyE] \u []
                                      let {
                                        sat_s3XyL [Occ=Once]
                                          :: a_a3KpE -> Text.ParserCombinators.ReadP.P b_a3ngn
                                        [LclId] =
                                            [$wlistRest_s3Xy2 eta_s3XyE] \r [a2_s3XyH]
                                                let {
                                                  sat_s3XyK [Occ=Once]
                                                    :: [a_a3KpE]
                                                       -> Text.ParserCombinators.ReadP.P b_a3ngn
                                                  [LclId] =
                                                      [eta_s3XyE a2_s3XyH] \r [a3_s3XyI]
                                                          let {
                                                            sat_s3XyJ [Occ=Once] :: [a_a3KpE]
                                                            [LclId] =
                                                                CCCS :! [a2_s3XyH a3_s3XyI];
                                                          } in  eta_s3XyE sat_s3XyJ;
                                                } in  $wlistRest_s3Xy2 GHC.Types.True sat_s3XyK;
                                      } in  ds1_s3Xy1 sat_s3XyL;
                            } in 
                              case $wlistRest_s3Xy2 GHC.Types.False eta_s3XyE of sat_s3XyG {
                                __DEFAULT ->
                                    Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                        sat_s3XyG sat_s3XyM;
                              };
                  } in 
                    case Text.Read.Lex.$wexpect GHC.Read.list_lexeme sat_s3XyN of {
                      Unit# ww1_s3XyP [Occ=Once] ->
                          Text.ParserCombinators.ReadP.Look [ww1_s3XyP];
                    };
        } in  GHC.Read.list3 sat_s3XyQ;

GHC.Read.readListPrecDefault
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadPrec.ReadPrec [a]
[GblId, Arity=1, Str=<L,1*U(A,A,1*C1(C(U)),A)>, Unf=OtherCon []] =
    [] \r [$dRead_s3XyR]
        let {
          sat_s3XyS [Occ=Once, Dmd=<L,1*C1(C(U))>]
            :: Text.ParserCombinators.ReadPrec.ReadPrec a_a3Ks9
          [LclId] =
              [$dRead_s3XyR] \s [] GHC.Read.readPrec $dRead_s3XyR;
        } in  GHC.Read.list sat_s3XyS;

GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadListPrec
  :: forall a b c d e f g h i j k l m n o.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l, GHC.Read.Read m, GHC.Read.Read n,
      GHC.Read.Read o) =>
     Text.ParserCombinators.ReadPrec.ReadPrec
       [(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)]
[GblId,
 Arity=15,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XyT
           $dRead1_s3XyU
           $dRead2_s3XyV
           $dRead3_s3XyW
           $dRead4_s3XyX
           $dRead5_s3XyY
           $dRead6_s3XyZ
           $dRead7_s3Xz0
           $dRead8_s3Xz1
           $dRead9_s3Xz2
           $dRead10_s3Xz3
           $dRead11_s3Xz4
           $dRead12_s3Xz5
           $dRead13_s3Xz6
           $dRead14_s3Xz7]
        let {
          sat_s3Xz8 [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KGz, b_X3KGB, c_X3KGD, d_X3KGF, e_X3KGH, f_X3KGJ, g_X3KGL,
                  h_X3KGN, i_X3KGP, j_X3KGR, k_X3KGT, l_X3KGV, m_X3KGX, n_X3KGZ,
                  o_X3KH1)
          [LclId] =
              [$dRead_s3XyT
               $dRead1_s3XyU
               $dRead2_s3XyV
               $dRead3_s3XyW
               $dRead4_s3XyX
               $dRead5_s3XyY
               $dRead6_s3XyZ
               $dRead7_s3Xz0
               $dRead8_s3Xz1
               $dRead9_s3Xz2
               $dRead10_s3Xz3
               $dRead11_s3Xz4
               $dRead12_s3Xz5
               $dRead13_s3Xz6
               $dRead14_s3Xz7] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,,,,,,,,,,)1
                      $dRead_s3XyT
                      $dRead1_s3XyU
                      $dRead2_s3XyV
                      $dRead3_s3XyW
                      $dRead4_s3XyX
                      $dRead5_s3XyY
                      $dRead6_s3XyZ
                      $dRead7_s3Xz0
                      $dRead8_s3Xz1
                      $dRead9_s3Xz2
                      $dRead10_s3Xz3
                      $dRead11_s3Xz4
                      $dRead12_s3Xz5
                      $dRead13_s3Xz6
                      $dRead14_s3Xz7
                      eta_B2
                      eta_B1;
        } in  GHC.Read.list sat_s3Xz8;

GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadsPrec
  :: forall a b c d e f g h i j k l m n o.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l, GHC.Read.Read m, GHC.Read.Read n,
      GHC.Read.Read o) =>
     GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS
          (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)
[GblId,
 Arity=16,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Xz9
           $dRead1_s3Xza
           $dRead2_s3Xzb
           $dRead3_s3Xzc
           $dRead4_s3Xzd
           $dRead5_s3Xze
           $dRead6_s3Xzf
           $dRead7_s3Xzg
           $dRead8_s3Xzh
           $dRead9_s3Xzi
           $dRead10_s3Xzj
           $dRead11_s3Xzk
           $dRead12_s3Xzl
           $dRead13_s3Xzm
           $dRead14_s3Xzn
           n1_s3Xzo]
        let {
          sat_s3Xzp [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 (a_X3KGA, b_X3KGC, c_X3KGE, d_X3KGG, e_X3KGI, f_X3KGK, g_X3KGM,
                  h_X3KGO, i_X3KGQ, j_X3KGS, k_X3KGU, l_X3KGW, m_X3KGY, n_X3KH0,
                  o_X3KH2)
          [LclId] =
              [$dRead_s3Xz9
               $dRead1_s3Xza
               $dRead2_s3Xzb
               $dRead3_s3Xzc
               $dRead4_s3Xzd
               $dRead5_s3Xze
               $dRead6_s3Xzf
               $dRead7_s3Xzg
               $dRead8_s3Xzh
               $dRead9_s3Xzi
               $dRead10_s3Xzj
               $dRead11_s3Xzk
               $dRead12_s3Xzl
               $dRead13_s3Xzm
               $dRead14_s3Xzn
               n1_s3Xzo] \u []
                  GHC.Read.$fRead(,,,,,,,,,,,,,,)1
                      $dRead_s3Xz9
                      $dRead1_s3Xza
                      $dRead2_s3Xzb
                      $dRead3_s3Xzc
                      $dRead4_s3Xzd
                      $dRead5_s3Xze
                      $dRead6_s3Xzf
                      $dRead7_s3Xzg
                      $dRead8_s3Xzh
                      $dRead9_s3Xzi
                      $dRead10_s3Xzj
                      $dRead11_s3Xzk
                      $dRead12_s3Xzl
                      $dRead13_s3Xzm
                      $dRead14_s3Xzn
                      n1_s3Xzo
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3Xzp;

GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadList
  :: forall a b c d e f g h i j k l m n o.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l, GHC.Read.Read m, GHC.Read.Read n,
      GHC.Read.Read o) =>
     Text.ParserCombinators.ReadP.ReadS
       [(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)]
[GblId,
 Arity=15,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Xzq
           $dRead1_s3Xzr
           $dRead2_s3Xzs
           $dRead3_s3Xzt
           $dRead4_s3Xzu
           $dRead5_s3Xzv
           $dRead6_s3Xzw
           $dRead7_s3Xzx
           $dRead8_s3Xzy
           $dRead9_s3Xzz
           $dRead10_s3XzA
           $dRead11_s3XzB
           $dRead12_s3XzC
           $dRead13_s3XzD
           $dRead14_s3XzE]
        let {
          sat_s3XzG [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 [(a_X3KGB, b_X3KGD, c_X3KGF, d_X3KGH, e_X3KGJ, f_X3KGL, g_X3KGN,
                   h_X3KGP, i_X3KGR, j_X3KGT, k_X3KGV, l_X3KGX, m_X3KGZ, n_X3KH1,
                   o_X3KH3)]
          [LclId] =
              [$dRead_s3Xzq
               $dRead1_s3Xzr
               $dRead2_s3Xzs
               $dRead3_s3Xzt
               $dRead4_s3Xzu
               $dRead5_s3Xzv
               $dRead6_s3Xzw
               $dRead7_s3Xzx
               $dRead8_s3Xzy
               $dRead9_s3Xzz
               $dRead10_s3XzA
               $dRead11_s3XzB
               $dRead12_s3XzC
               $dRead13_s3XzD
               $dRead14_s3XzE] \u []
                  let {
                    sat_s3XzF [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec
                           (a_X3KGB, b_X3KGD, c_X3KGF, d_X3KGH, e_X3KGJ, f_X3KGL, g_X3KGN,
                            h_X3KGP, i_X3KGR, j_X3KGT, k_X3KGV, l_X3KGX, m_X3KGZ, n_X3KH1,
                            o_X3KH3)
                    [LclId] =
                        [$dRead_s3Xzq
                         $dRead1_s3Xzr
                         $dRead2_s3Xzs
                         $dRead3_s3Xzt
                         $dRead4_s3Xzu
                         $dRead5_s3Xzv
                         $dRead6_s3Xzw
                         $dRead7_s3Xzx
                         $dRead8_s3Xzy
                         $dRead9_s3Xzz
                         $dRead10_s3XzA
                         $dRead11_s3XzB
                         $dRead12_s3XzC
                         $dRead13_s3XzD
                         $dRead14_s3XzE] \r [eta_B2 eta_B1]
                            GHC.Read.$fRead(,,,,,,,,,,,,,,)1
                                $dRead_s3Xzq
                                $dRead1_s3Xzr
                                $dRead2_s3Xzs
                                $dRead3_s3Xzt
                                $dRead4_s3Xzu
                                $dRead5_s3Xzv
                                $dRead6_s3Xzw
                                $dRead7_s3Xzx
                                $dRead8_s3Xzy
                                $dRead9_s3Xzz
                                $dRead10_s3XzA
                                $dRead11_s3XzB
                                $dRead12_s3XzC
                                $dRead13_s3XzD
                                $dRead14_s3XzE
                                eta_B2
                                eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s3XzF
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XzG;

GHC.Read.$fRead(,,,,,,,,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h i j k l m n o.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l, GHC.Read.Read m, GHC.Read.Read n,
      GHC.Read.Read o) =>
     GHC.Read.Read (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)
[GblId[DFunId],
 Arity=15,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>m] =
    [] \r [$dRead_s3XzH
           $dRead1_s3XzI
           $dRead2_s3XzJ
           $dRead3_s3XzK
           $dRead4_s3XzL
           $dRead5_s3XzM
           $dRead6_s3XzN
           $dRead7_s3XzO
           $dRead8_s3XzP
           $dRead9_s3XzQ
           $dRead10_s3XzR
           $dRead11_s3XzS
           $dRead12_s3XzT
           $dRead13_s3XzU
           $dRead14_s3XzV]
        let {
          sat_s3XzZ [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 [(a_X3KGC, b_X3KGE, c_X3KGG, d_X3KGI, e_X3KGK, f_X3KGM, g_X3KGO,
                   h_X3KGQ, i_X3KGS, j_X3KGU, k_X3KGW, l_X3KGY, m_X3KH0, n_X3KH2,
                   o_X3KH4)]
          [LclId] =
              [$dRead_s3XzH
               $dRead1_s3XzI
               $dRead2_s3XzJ
               $dRead3_s3XzK
               $dRead4_s3XzL
               $dRead5_s3XzM
               $dRead6_s3XzN
               $dRead7_s3XzO
               $dRead8_s3XzP
               $dRead9_s3XzQ
               $dRead10_s3XzR
               $dRead11_s3XzS
               $dRead12_s3XzT
               $dRead13_s3XzU
               $dRead14_s3XzV] \u []
                  GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadListPrec
                      $dRead_s3XzH
                      $dRead1_s3XzI
                      $dRead2_s3XzJ
                      $dRead3_s3XzK
                      $dRead4_s3XzL
                      $dRead5_s3XzM
                      $dRead6_s3XzN
                      $dRead7_s3XzO
                      $dRead8_s3XzP
                      $dRead9_s3XzQ
                      $dRead10_s3XzR
                      $dRead11_s3XzS
                      $dRead12_s3XzT
                      $dRead13_s3XzU
                      $dRead14_s3XzV; } in
        let {
          sat_s3XzY [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KGC, b_X3KGE, c_X3KGG, d_X3KGI, e_X3KGK, f_X3KGM, g_X3KGO,
                  h_X3KGQ, i_X3KGS, j_X3KGU, k_X3KGW, l_X3KGY, m_X3KH0, n_X3KH2,
                  o_X3KH4)
          [LclId] =
              [$dRead_s3XzH
               $dRead1_s3XzI
               $dRead2_s3XzJ
               $dRead3_s3XzK
               $dRead4_s3XzL
               $dRead5_s3XzM
               $dRead6_s3XzN
               $dRead7_s3XzO
               $dRead8_s3XzP
               $dRead9_s3XzQ
               $dRead10_s3XzR
               $dRead11_s3XzS
               $dRead12_s3XzT
               $dRead13_s3XzU
               $dRead14_s3XzV] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,,,,,,,,,,)1
                      $dRead_s3XzH
                      $dRead1_s3XzI
                      $dRead2_s3XzJ
                      $dRead3_s3XzK
                      $dRead4_s3XzL
                      $dRead5_s3XzM
                      $dRead6_s3XzN
                      $dRead7_s3XzO
                      $dRead8_s3XzP
                      $dRead9_s3XzQ
                      $dRead10_s3XzR
                      $dRead11_s3XzS
                      $dRead12_s3XzT
                      $dRead13_s3XzU
                      $dRead14_s3XzV
                      eta_B2
                      eta_B1; } in
        let {
          sat_s3XzX [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS
                 [(a_X3KGC, b_X3KGE, c_X3KGG, d_X3KGI, e_X3KGK, f_X3KGM, g_X3KGO,
                   h_X3KGQ, i_X3KGS, j_X3KGU, k_X3KGW, l_X3KGY, m_X3KH0, n_X3KH2,
                   o_X3KH4)]
          [LclId] =
              [$dRead_s3XzH
               $dRead1_s3XzI
               $dRead2_s3XzJ
               $dRead3_s3XzK
               $dRead4_s3XzL
               $dRead5_s3XzM
               $dRead6_s3XzN
               $dRead7_s3XzO
               $dRead8_s3XzP
               $dRead9_s3XzQ
               $dRead10_s3XzR
               $dRead11_s3XzS
               $dRead12_s3XzT
               $dRead13_s3XzU
               $dRead14_s3XzV] \u []
                  GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadList
                      $dRead_s3XzH
                      $dRead1_s3XzI
                      $dRead2_s3XzJ
                      $dRead3_s3XzK
                      $dRead4_s3XzL
                      $dRead5_s3XzM
                      $dRead6_s3XzN
                      $dRead7_s3XzO
                      $dRead8_s3XzP
                      $dRead9_s3XzQ
                      $dRead10_s3XzR
                      $dRead11_s3XzS
                      $dRead12_s3XzT
                      $dRead13_s3XzU
                      $dRead14_s3XzV; } in
        let {
          sat_s3XzW [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS
                    (a_X3KGC, b_X3KGE, c_X3KGG, d_X3KGI, e_X3KGK, f_X3KGM, g_X3KGO,
                     h_X3KGQ, i_X3KGS, j_X3KGU, k_X3KGW, l_X3KGY, m_X3KH0, n_X3KH2,
                     o_X3KH4)
          [LclId] =
              [$dRead_s3XzH
               $dRead1_s3XzI
               $dRead2_s3XzJ
               $dRead3_s3XzK
               $dRead4_s3XzL
               $dRead5_s3XzM
               $dRead6_s3XzN
               $dRead7_s3XzO
               $dRead8_s3XzP
               $dRead9_s3XzQ
               $dRead10_s3XzR
               $dRead11_s3XzS
               $dRead12_s3XzT
               $dRead13_s3XzU
               $dRead14_s3XzV] \r [eta_B1]
                  GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadsPrec
                      $dRead_s3XzH
                      $dRead1_s3XzI
                      $dRead2_s3XzJ
                      $dRead3_s3XzK
                      $dRead4_s3XzL
                      $dRead5_s3XzM
                      $dRead6_s3XzN
                      $dRead7_s3XzO
                      $dRead8_s3XzP
                      $dRead9_s3XzQ
                      $dRead10_s3XzR
                      $dRead11_s3XzS
                      $dRead12_s3XzT
                      $dRead13_s3XzU
                      $dRead14_s3XzV
                      eta_B1;
        } in  GHC.Read.C:Read [sat_s3XzW sat_s3XzX sat_s3XzY sat_s3XzZ];

GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadListPrec
  :: forall a b c d e f g h i j k l m n.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l, GHC.Read.Read m, GHC.Read.Read n) =>
     Text.ParserCombinators.ReadPrec.ReadPrec
       [(a, b, c, d, e, f, g, h, i, j, k, l, m, n)]
[GblId,
 Arity=14,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XA0
           $dRead1_s3XA1
           $dRead2_s3XA2
           $dRead3_s3XA3
           $dRead4_s3XA4
           $dRead5_s3XA5
           $dRead6_s3XA6
           $dRead7_s3XA7
           $dRead8_s3XA8
           $dRead9_s3XA9
           $dRead10_s3XAa
           $dRead11_s3XAb
           $dRead12_s3XAc
           $dRead13_s3XAd]
        let {
          sat_s3XAe [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KIJ, b_X3KIL, c_X3KIN, d_X3KIP, e_X3KIR, f_X3KIT, g_X3KIV,
                  h_X3KIX, i_X3KIZ, j_X3KJ1, k_X3KJ3, l_X3KJ5, m_X3KJ7, n_X3KJ9)
          [LclId] =
              [$dRead_s3XA0
               $dRead1_s3XA1
               $dRead2_s3XA2
               $dRead3_s3XA3
               $dRead4_s3XA4
               $dRead5_s3XA5
               $dRead6_s3XA6
               $dRead7_s3XA7
               $dRead8_s3XA8
               $dRead9_s3XA9
               $dRead10_s3XAa
               $dRead11_s3XAb
               $dRead12_s3XAc
               $dRead13_s3XAd] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,,,,,,,,,)1
                      $dRead_s3XA0
                      $dRead1_s3XA1
                      $dRead2_s3XA2
                      $dRead3_s3XA3
                      $dRead4_s3XA4
                      $dRead5_s3XA5
                      $dRead6_s3XA6
                      $dRead7_s3XA7
                      $dRead8_s3XA8
                      $dRead9_s3XA9
                      $dRead10_s3XAa
                      $dRead11_s3XAb
                      $dRead12_s3XAc
                      $dRead13_s3XAd
                      eta_B2
                      eta_B1;
        } in  GHC.Read.list sat_s3XAe;

GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadsPrec
  :: forall a b c d e f g h i j k l m n.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l, GHC.Read.Read m, GHC.Read.Read n) =>
     GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS
          (a, b, c, d, e, f, g, h, i, j, k, l, m, n)
[GblId,
 Arity=15,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XAf
           $dRead1_s3XAg
           $dRead2_s3XAh
           $dRead3_s3XAi
           $dRead4_s3XAj
           $dRead5_s3XAk
           $dRead6_s3XAl
           $dRead7_s3XAm
           $dRead8_s3XAn
           $dRead9_s3XAo
           $dRead10_s3XAp
           $dRead11_s3XAq
           $dRead12_s3XAr
           $dRead13_s3XAs
           n1_s3XAt]
        let {
          sat_s3XAu [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 (a_X3KIK, b_X3KIM, c_X3KIO, d_X3KIQ, e_X3KIS, f_X3KIU, g_X3KIW,
                  h_X3KIY, i_X3KJ0, j_X3KJ2, k_X3KJ4, l_X3KJ6, m_X3KJ8, n_X3KJa)
          [LclId] =
              [$dRead_s3XAf
               $dRead1_s3XAg
               $dRead2_s3XAh
               $dRead3_s3XAi
               $dRead4_s3XAj
               $dRead5_s3XAk
               $dRead6_s3XAl
               $dRead7_s3XAm
               $dRead8_s3XAn
               $dRead9_s3XAo
               $dRead10_s3XAp
               $dRead11_s3XAq
               $dRead12_s3XAr
               $dRead13_s3XAs
               n1_s3XAt] \u []
                  GHC.Read.$fRead(,,,,,,,,,,,,,)1
                      $dRead_s3XAf
                      $dRead1_s3XAg
                      $dRead2_s3XAh
                      $dRead3_s3XAi
                      $dRead4_s3XAj
                      $dRead5_s3XAk
                      $dRead6_s3XAl
                      $dRead7_s3XAm
                      $dRead8_s3XAn
                      $dRead9_s3XAo
                      $dRead10_s3XAp
                      $dRead11_s3XAq
                      $dRead12_s3XAr
                      $dRead13_s3XAs
                      n1_s3XAt
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XAu;

GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadList
  :: forall a b c d e f g h i j k l m n.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l, GHC.Read.Read m, GHC.Read.Read n) =>
     Text.ParserCombinators.ReadP.ReadS
       [(a, b, c, d, e, f, g, h, i, j, k, l, m, n)]
[GblId,
 Arity=14,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XAv
           $dRead1_s3XAw
           $dRead2_s3XAx
           $dRead3_s3XAy
           $dRead4_s3XAz
           $dRead5_s3XAA
           $dRead6_s3XAB
           $dRead7_s3XAC
           $dRead8_s3XAD
           $dRead9_s3XAE
           $dRead10_s3XAF
           $dRead11_s3XAG
           $dRead12_s3XAH
           $dRead13_s3XAI]
        let {
          sat_s3XAK [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 [(a_X3KIL, b_X3KIN, c_X3KIP, d_X3KIR, e_X3KIT, f_X3KIV, g_X3KIX,
                   h_X3KIZ, i_X3KJ1, j_X3KJ3, k_X3KJ5, l_X3KJ7, m_X3KJ9, n_X3KJb)]
          [LclId] =
              [$dRead_s3XAv
               $dRead1_s3XAw
               $dRead2_s3XAx
               $dRead3_s3XAy
               $dRead4_s3XAz
               $dRead5_s3XAA
               $dRead6_s3XAB
               $dRead7_s3XAC
               $dRead8_s3XAD
               $dRead9_s3XAE
               $dRead10_s3XAF
               $dRead11_s3XAG
               $dRead12_s3XAH
               $dRead13_s3XAI] \u []
                  let {
                    sat_s3XAJ [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec
                           (a_X3KIL, b_X3KIN, c_X3KIP, d_X3KIR, e_X3KIT, f_X3KIV, g_X3KIX,
                            h_X3KIZ, i_X3KJ1, j_X3KJ3, k_X3KJ5, l_X3KJ7, m_X3KJ9, n_X3KJb)
                    [LclId] =
                        [$dRead_s3XAv
                         $dRead1_s3XAw
                         $dRead2_s3XAx
                         $dRead3_s3XAy
                         $dRead4_s3XAz
                         $dRead5_s3XAA
                         $dRead6_s3XAB
                         $dRead7_s3XAC
                         $dRead8_s3XAD
                         $dRead9_s3XAE
                         $dRead10_s3XAF
                         $dRead11_s3XAG
                         $dRead12_s3XAH
                         $dRead13_s3XAI] \r [eta_B2 eta_B1]
                            GHC.Read.$fRead(,,,,,,,,,,,,,)1
                                $dRead_s3XAv
                                $dRead1_s3XAw
                                $dRead2_s3XAx
                                $dRead3_s3XAy
                                $dRead4_s3XAz
                                $dRead5_s3XAA
                                $dRead6_s3XAB
                                $dRead7_s3XAC
                                $dRead8_s3XAD
                                $dRead9_s3XAE
                                $dRead10_s3XAF
                                $dRead11_s3XAG
                                $dRead12_s3XAH
                                $dRead13_s3XAI
                                eta_B2
                                eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s3XAJ
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XAK;

GHC.Read.$fRead(,,,,,,,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h i j k l m n.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l, GHC.Read.Read m, GHC.Read.Read n) =>
     GHC.Read.Read (a, b, c, d, e, f, g, h, i, j, k, l, m, n)
[GblId[DFunId],
 Arity=14,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>m] =
    [] \r [$dRead_s3XAL
           $dRead1_s3XAM
           $dRead2_s3XAN
           $dRead3_s3XAO
           $dRead4_s3XAP
           $dRead5_s3XAQ
           $dRead6_s3XAR
           $dRead7_s3XAS
           $dRead8_s3XAT
           $dRead9_s3XAU
           $dRead10_s3XAV
           $dRead11_s3XAW
           $dRead12_s3XAX
           $dRead13_s3XAY]
        let {
          sat_s3XB2 [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 [(a_X3KIM, b_X3KIO, c_X3KIQ, d_X3KIS, e_X3KIU, f_X3KIW, g_X3KIY,
                   h_X3KJ0, i_X3KJ2, j_X3KJ4, k_X3KJ6, l_X3KJ8, m_X3KJa, n_X3KJc)]
          [LclId] =
              [$dRead_s3XAL
               $dRead1_s3XAM
               $dRead2_s3XAN
               $dRead3_s3XAO
               $dRead4_s3XAP
               $dRead5_s3XAQ
               $dRead6_s3XAR
               $dRead7_s3XAS
               $dRead8_s3XAT
               $dRead9_s3XAU
               $dRead10_s3XAV
               $dRead11_s3XAW
               $dRead12_s3XAX
               $dRead13_s3XAY] \u []
                  GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadListPrec
                      $dRead_s3XAL
                      $dRead1_s3XAM
                      $dRead2_s3XAN
                      $dRead3_s3XAO
                      $dRead4_s3XAP
                      $dRead5_s3XAQ
                      $dRead6_s3XAR
                      $dRead7_s3XAS
                      $dRead8_s3XAT
                      $dRead9_s3XAU
                      $dRead10_s3XAV
                      $dRead11_s3XAW
                      $dRead12_s3XAX
                      $dRead13_s3XAY; } in
        let {
          sat_s3XB1 [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KIM, b_X3KIO, c_X3KIQ, d_X3KIS, e_X3KIU, f_X3KIW, g_X3KIY,
                  h_X3KJ0, i_X3KJ2, j_X3KJ4, k_X3KJ6, l_X3KJ8, m_X3KJa, n_X3KJc)
          [LclId] =
              [$dRead_s3XAL
               $dRead1_s3XAM
               $dRead2_s3XAN
               $dRead3_s3XAO
               $dRead4_s3XAP
               $dRead5_s3XAQ
               $dRead6_s3XAR
               $dRead7_s3XAS
               $dRead8_s3XAT
               $dRead9_s3XAU
               $dRead10_s3XAV
               $dRead11_s3XAW
               $dRead12_s3XAX
               $dRead13_s3XAY] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,,,,,,,,,)1
                      $dRead_s3XAL
                      $dRead1_s3XAM
                      $dRead2_s3XAN
                      $dRead3_s3XAO
                      $dRead4_s3XAP
                      $dRead5_s3XAQ
                      $dRead6_s3XAR
                      $dRead7_s3XAS
                      $dRead8_s3XAT
                      $dRead9_s3XAU
                      $dRead10_s3XAV
                      $dRead11_s3XAW
                      $dRead12_s3XAX
                      $dRead13_s3XAY
                      eta_B2
                      eta_B1; } in
        let {
          sat_s3XB0 [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS
                 [(a_X3KIM, b_X3KIO, c_X3KIQ, d_X3KIS, e_X3KIU, f_X3KIW, g_X3KIY,
                   h_X3KJ0, i_X3KJ2, j_X3KJ4, k_X3KJ6, l_X3KJ8, m_X3KJa, n_X3KJc)]
          [LclId] =
              [$dRead_s3XAL
               $dRead1_s3XAM
               $dRead2_s3XAN
               $dRead3_s3XAO
               $dRead4_s3XAP
               $dRead5_s3XAQ
               $dRead6_s3XAR
               $dRead7_s3XAS
               $dRead8_s3XAT
               $dRead9_s3XAU
               $dRead10_s3XAV
               $dRead11_s3XAW
               $dRead12_s3XAX
               $dRead13_s3XAY] \u []
                  GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadList
                      $dRead_s3XAL
                      $dRead1_s3XAM
                      $dRead2_s3XAN
                      $dRead3_s3XAO
                      $dRead4_s3XAP
                      $dRead5_s3XAQ
                      $dRead6_s3XAR
                      $dRead7_s3XAS
                      $dRead8_s3XAT
                      $dRead9_s3XAU
                      $dRead10_s3XAV
                      $dRead11_s3XAW
                      $dRead12_s3XAX
                      $dRead13_s3XAY; } in
        let {
          sat_s3XAZ [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS
                    (a_X3KIM, b_X3KIO, c_X3KIQ, d_X3KIS, e_X3KIU, f_X3KIW, g_X3KIY,
                     h_X3KJ0, i_X3KJ2, j_X3KJ4, k_X3KJ6, l_X3KJ8, m_X3KJa, n_X3KJc)
          [LclId] =
              [$dRead_s3XAL
               $dRead1_s3XAM
               $dRead2_s3XAN
               $dRead3_s3XAO
               $dRead4_s3XAP
               $dRead5_s3XAQ
               $dRead6_s3XAR
               $dRead7_s3XAS
               $dRead8_s3XAT
               $dRead9_s3XAU
               $dRead10_s3XAV
               $dRead11_s3XAW
               $dRead12_s3XAX
               $dRead13_s3XAY] \r [eta_B1]
                  GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadsPrec
                      $dRead_s3XAL
                      $dRead1_s3XAM
                      $dRead2_s3XAN
                      $dRead3_s3XAO
                      $dRead4_s3XAP
                      $dRead5_s3XAQ
                      $dRead6_s3XAR
                      $dRead7_s3XAS
                      $dRead8_s3XAT
                      $dRead9_s3XAU
                      $dRead10_s3XAV
                      $dRead11_s3XAW
                      $dRead12_s3XAX
                      $dRead13_s3XAY
                      eta_B1;
        } in  GHC.Read.C:Read [sat_s3XAZ sat_s3XB0 sat_s3XB1 sat_s3XB2];

GHC.Read.$fRead(,,,,,,,,,,,,)_$creadListPrec
  :: forall a b c d e f g h i j k l m.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l, GHC.Read.Read m) =>
     Text.ParserCombinators.ReadPrec.ReadPrec
       [(a, b, c, d, e, f, g, h, i, j, k, l, m)]
[GblId,
 Arity=13,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XB3
           $dRead1_s3XB4
           $dRead2_s3XB5
           $dRead3_s3XB6
           $dRead4_s3XB7
           $dRead5_s3XB8
           $dRead6_s3XB9
           $dRead7_s3XBa
           $dRead8_s3XBb
           $dRead9_s3XBc
           $dRead10_s3XBd
           $dRead11_s3XBe
           $dRead12_s3XBf]
        let {
          sat_s3XBg [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KKG, b_X3KKI, c_X3KKK, d_X3KKM, e_X3KKO, f_X3KKQ, g_X3KKS,
                  h_X3KKU, i_X3KKW, j_X3KKY, k_X3KL0, l_X3KL2, m_X3KL4)
          [LclId] =
              [$dRead_s3XB3
               $dRead1_s3XB4
               $dRead2_s3XB5
               $dRead3_s3XB6
               $dRead4_s3XB7
               $dRead5_s3XB8
               $dRead6_s3XB9
               $dRead7_s3XBa
               $dRead8_s3XBb
               $dRead9_s3XBc
               $dRead10_s3XBd
               $dRead11_s3XBe
               $dRead12_s3XBf] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,,,,,,,,)1
                      $dRead_s3XB3
                      $dRead1_s3XB4
                      $dRead2_s3XB5
                      $dRead3_s3XB6
                      $dRead4_s3XB7
                      $dRead5_s3XB8
                      $dRead6_s3XB9
                      $dRead7_s3XBa
                      $dRead8_s3XBb
                      $dRead9_s3XBc
                      $dRead10_s3XBd
                      $dRead11_s3XBe
                      $dRead12_s3XBf
                      eta_B2
                      eta_B1;
        } in  GHC.Read.list sat_s3XBg;

GHC.Read.$fRead(,,,,,,,,,,,,)_$creadsPrec
  :: forall a b c d e f g h i j k l m.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l, GHC.Read.Read m) =>
     GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS
          (a, b, c, d, e, f, g, h, i, j, k, l, m)
[GblId,
 Arity=14,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XBh
           $dRead1_s3XBi
           $dRead2_s3XBj
           $dRead3_s3XBk
           $dRead4_s3XBl
           $dRead5_s3XBm
           $dRead6_s3XBn
           $dRead7_s3XBo
           $dRead8_s3XBp
           $dRead9_s3XBq
           $dRead10_s3XBr
           $dRead11_s3XBs
           $dRead12_s3XBt
           n_s3XBu]
        let {
          sat_s3XBv [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 (a_X3KKH, b_X3KKJ, c_X3KKL, d_X3KKN, e_X3KKP, f_X3KKR, g_X3KKT,
                  h_X3KKV, i_X3KKX, j_X3KKZ, k_X3KL1, l_X3KL3, m_X3KL5)
          [LclId] =
              [$dRead_s3XBh
               $dRead1_s3XBi
               $dRead2_s3XBj
               $dRead3_s3XBk
               $dRead4_s3XBl
               $dRead5_s3XBm
               $dRead6_s3XBn
               $dRead7_s3XBo
               $dRead8_s3XBp
               $dRead9_s3XBq
               $dRead10_s3XBr
               $dRead11_s3XBs
               $dRead12_s3XBt
               n_s3XBu] \u []
                  GHC.Read.$fRead(,,,,,,,,,,,,)1
                      $dRead_s3XBh
                      $dRead1_s3XBi
                      $dRead2_s3XBj
                      $dRead3_s3XBk
                      $dRead4_s3XBl
                      $dRead5_s3XBm
                      $dRead6_s3XBn
                      $dRead7_s3XBo
                      $dRead8_s3XBp
                      $dRead9_s3XBq
                      $dRead10_s3XBr
                      $dRead11_s3XBs
                      $dRead12_s3XBt
                      n_s3XBu
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XBv;

GHC.Read.$fRead(,,,,,,,,,,,,)_$creadList
  :: forall a b c d e f g h i j k l m.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l, GHC.Read.Read m) =>
     Text.ParserCombinators.ReadP.ReadS
       [(a, b, c, d, e, f, g, h, i, j, k, l, m)]
[GblId,
 Arity=13,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XBw
           $dRead1_s3XBx
           $dRead2_s3XBy
           $dRead3_s3XBz
           $dRead4_s3XBA
           $dRead5_s3XBB
           $dRead6_s3XBC
           $dRead7_s3XBD
           $dRead8_s3XBE
           $dRead9_s3XBF
           $dRead10_s3XBG
           $dRead11_s3XBH
           $dRead12_s3XBI]
        let {
          sat_s3XBK [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 [(a_X3KKI, b_X3KKK, c_X3KKM, d_X3KKO, e_X3KKQ, f_X3KKS, g_X3KKU,
                   h_X3KKW, i_X3KKY, j_X3KL0, k_X3KL2, l_X3KL4, m_X3KL6)]
          [LclId] =
              [$dRead_s3XBw
               $dRead1_s3XBx
               $dRead2_s3XBy
               $dRead3_s3XBz
               $dRead4_s3XBA
               $dRead5_s3XBB
               $dRead6_s3XBC
               $dRead7_s3XBD
               $dRead8_s3XBE
               $dRead9_s3XBF
               $dRead10_s3XBG
               $dRead11_s3XBH
               $dRead12_s3XBI] \u []
                  let {
                    sat_s3XBJ [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec
                           (a_X3KKI, b_X3KKK, c_X3KKM, d_X3KKO, e_X3KKQ, f_X3KKS, g_X3KKU,
                            h_X3KKW, i_X3KKY, j_X3KL0, k_X3KL2, l_X3KL4, m_X3KL6)
                    [LclId] =
                        [$dRead_s3XBw
                         $dRead1_s3XBx
                         $dRead2_s3XBy
                         $dRead3_s3XBz
                         $dRead4_s3XBA
                         $dRead5_s3XBB
                         $dRead6_s3XBC
                         $dRead7_s3XBD
                         $dRead8_s3XBE
                         $dRead9_s3XBF
                         $dRead10_s3XBG
                         $dRead11_s3XBH
                         $dRead12_s3XBI] \r [eta_B2 eta_B1]
                            GHC.Read.$fRead(,,,,,,,,,,,,)1
                                $dRead_s3XBw
                                $dRead1_s3XBx
                                $dRead2_s3XBy
                                $dRead3_s3XBz
                                $dRead4_s3XBA
                                $dRead5_s3XBB
                                $dRead6_s3XBC
                                $dRead7_s3XBD
                                $dRead8_s3XBE
                                $dRead9_s3XBF
                                $dRead10_s3XBG
                                $dRead11_s3XBH
                                $dRead12_s3XBI
                                eta_B2
                                eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s3XBJ
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XBK;

GHC.Read.$fRead(,,,,,,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h i j k l m.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l, GHC.Read.Read m) =>
     GHC.Read.Read (a, b, c, d, e, f, g, h, i, j, k, l, m)
[GblId[DFunId],
 Arity=13,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>m] =
    [] \r [$dRead_s3XBL
           $dRead1_s3XBM
           $dRead2_s3XBN
           $dRead3_s3XBO
           $dRead4_s3XBP
           $dRead5_s3XBQ
           $dRead6_s3XBR
           $dRead7_s3XBS
           $dRead8_s3XBT
           $dRead9_s3XBU
           $dRead10_s3XBV
           $dRead11_s3XBW
           $dRead12_s3XBX]
        let {
          sat_s3XC1 [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 [(a_X3KKJ, b_X3KKL, c_X3KKN, d_X3KKP, e_X3KKR, f_X3KKT, g_X3KKV,
                   h_X3KKX, i_X3KKZ, j_X3KL1, k_X3KL3, l_X3KL5, m_X3KL7)]
          [LclId] =
              [$dRead_s3XBL
               $dRead1_s3XBM
               $dRead2_s3XBN
               $dRead3_s3XBO
               $dRead4_s3XBP
               $dRead5_s3XBQ
               $dRead6_s3XBR
               $dRead7_s3XBS
               $dRead8_s3XBT
               $dRead9_s3XBU
               $dRead10_s3XBV
               $dRead11_s3XBW
               $dRead12_s3XBX] \u []
                  GHC.Read.$fRead(,,,,,,,,,,,,)_$creadListPrec
                      $dRead_s3XBL
                      $dRead1_s3XBM
                      $dRead2_s3XBN
                      $dRead3_s3XBO
                      $dRead4_s3XBP
                      $dRead5_s3XBQ
                      $dRead6_s3XBR
                      $dRead7_s3XBS
                      $dRead8_s3XBT
                      $dRead9_s3XBU
                      $dRead10_s3XBV
                      $dRead11_s3XBW
                      $dRead12_s3XBX; } in
        let {
          sat_s3XC0 [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KKJ, b_X3KKL, c_X3KKN, d_X3KKP, e_X3KKR, f_X3KKT, g_X3KKV,
                  h_X3KKX, i_X3KKZ, j_X3KL1, k_X3KL3, l_X3KL5, m_X3KL7)
          [LclId] =
              [$dRead_s3XBL
               $dRead1_s3XBM
               $dRead2_s3XBN
               $dRead3_s3XBO
               $dRead4_s3XBP
               $dRead5_s3XBQ
               $dRead6_s3XBR
               $dRead7_s3XBS
               $dRead8_s3XBT
               $dRead9_s3XBU
               $dRead10_s3XBV
               $dRead11_s3XBW
               $dRead12_s3XBX] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,,,,,,,,)1
                      $dRead_s3XBL
                      $dRead1_s3XBM
                      $dRead2_s3XBN
                      $dRead3_s3XBO
                      $dRead4_s3XBP
                      $dRead5_s3XBQ
                      $dRead6_s3XBR
                      $dRead7_s3XBS
                      $dRead8_s3XBT
                      $dRead9_s3XBU
                      $dRead10_s3XBV
                      $dRead11_s3XBW
                      $dRead12_s3XBX
                      eta_B2
                      eta_B1; } in
        let {
          sat_s3XBZ [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS
                 [(a_X3KKJ, b_X3KKL, c_X3KKN, d_X3KKP, e_X3KKR, f_X3KKT, g_X3KKV,
                   h_X3KKX, i_X3KKZ, j_X3KL1, k_X3KL3, l_X3KL5, m_X3KL7)]
          [LclId] =
              [$dRead_s3XBL
               $dRead1_s3XBM
               $dRead2_s3XBN
               $dRead3_s3XBO
               $dRead4_s3XBP
               $dRead5_s3XBQ
               $dRead6_s3XBR
               $dRead7_s3XBS
               $dRead8_s3XBT
               $dRead9_s3XBU
               $dRead10_s3XBV
               $dRead11_s3XBW
               $dRead12_s3XBX] \u []
                  GHC.Read.$fRead(,,,,,,,,,,,,)_$creadList
                      $dRead_s3XBL
                      $dRead1_s3XBM
                      $dRead2_s3XBN
                      $dRead3_s3XBO
                      $dRead4_s3XBP
                      $dRead5_s3XBQ
                      $dRead6_s3XBR
                      $dRead7_s3XBS
                      $dRead8_s3XBT
                      $dRead9_s3XBU
                      $dRead10_s3XBV
                      $dRead11_s3XBW
                      $dRead12_s3XBX; } in
        let {
          sat_s3XBY [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS
                    (a_X3KKJ, b_X3KKL, c_X3KKN, d_X3KKP, e_X3KKR, f_X3KKT, g_X3KKV,
                     h_X3KKX, i_X3KKZ, j_X3KL1, k_X3KL3, l_X3KL5, m_X3KL7)
          [LclId] =
              [$dRead_s3XBL
               $dRead1_s3XBM
               $dRead2_s3XBN
               $dRead3_s3XBO
               $dRead4_s3XBP
               $dRead5_s3XBQ
               $dRead6_s3XBR
               $dRead7_s3XBS
               $dRead8_s3XBT
               $dRead9_s3XBU
               $dRead10_s3XBV
               $dRead11_s3XBW
               $dRead12_s3XBX] \r [eta_B1]
                  GHC.Read.$fRead(,,,,,,,,,,,,)_$creadsPrec
                      $dRead_s3XBL
                      $dRead1_s3XBM
                      $dRead2_s3XBN
                      $dRead3_s3XBO
                      $dRead4_s3XBP
                      $dRead5_s3XBQ
                      $dRead6_s3XBR
                      $dRead7_s3XBS
                      $dRead8_s3XBT
                      $dRead9_s3XBU
                      $dRead10_s3XBV
                      $dRead11_s3XBW
                      $dRead12_s3XBX
                      eta_B1;
        } in  GHC.Read.C:Read [sat_s3XBY sat_s3XBZ sat_s3XC0 sat_s3XC1];

GHC.Read.$fRead(,,,,,,,,,,,)_$creadListPrec
  :: forall a b c d e f g h i j k l.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l) =>
     Text.ParserCombinators.ReadPrec.ReadPrec
       [(a, b, c, d, e, f, g, h, i, j, k, l)]
[GblId,
 Arity=12,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XC2
           $dRead1_s3XC3
           $dRead2_s3XC4
           $dRead3_s3XC5
           $dRead4_s3XC6
           $dRead5_s3XC7
           $dRead6_s3XC8
           $dRead7_s3XC9
           $dRead8_s3XCa
           $dRead9_s3XCb
           $dRead10_s3XCc
           $dRead11_s3XCd]
        let {
          sat_s3XCe [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KMy, b_X3KMA, c_X3KMC, d_X3KME, e_X3KMG, f_X3KMI, g_X3KMK,
                  h_X3KMM, i_X3KMO, j_X3KMQ, k_X3KMS, l_X3KMU)
          [LclId] =
              [$dRead_s3XC2
               $dRead1_s3XC3
               $dRead2_s3XC4
               $dRead3_s3XC5
               $dRead4_s3XC6
               $dRead5_s3XC7
               $dRead6_s3XC8
               $dRead7_s3XC9
               $dRead8_s3XCa
               $dRead9_s3XCb
               $dRead10_s3XCc
               $dRead11_s3XCd] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,,,,,,,)1
                      $dRead_s3XC2
                      $dRead1_s3XC3
                      $dRead2_s3XC4
                      $dRead3_s3XC5
                      $dRead4_s3XC6
                      $dRead5_s3XC7
                      $dRead6_s3XC8
                      $dRead7_s3XC9
                      $dRead8_s3XCa
                      $dRead9_s3XCb
                      $dRead10_s3XCc
                      $dRead11_s3XCd
                      eta_B2
                      eta_B1;
        } in  GHC.Read.list sat_s3XCe;

GHC.Read.$fRead(,,,,,,,,,,,)_$creadsPrec
  :: forall a b c d e f g h i j k l.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l) =>
     GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS
          (a, b, c, d, e, f, g, h, i, j, k, l)
[GblId,
 Arity=13,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XCf
           $dRead1_s3XCg
           $dRead2_s3XCh
           $dRead3_s3XCi
           $dRead4_s3XCj
           $dRead5_s3XCk
           $dRead6_s3XCl
           $dRead7_s3XCm
           $dRead8_s3XCn
           $dRead9_s3XCo
           $dRead10_s3XCp
           $dRead11_s3XCq
           n_s3XCr]
        let {
          sat_s3XCs [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 (a_X3KMz, b_X3KMB, c_X3KMD, d_X3KMF, e_X3KMH, f_X3KMJ, g_X3KML,
                  h_X3KMN, i_X3KMP, j_X3KMR, k_X3KMT, l_X3KMV)
          [LclId] =
              [$dRead_s3XCf
               $dRead1_s3XCg
               $dRead2_s3XCh
               $dRead3_s3XCi
               $dRead4_s3XCj
               $dRead5_s3XCk
               $dRead6_s3XCl
               $dRead7_s3XCm
               $dRead8_s3XCn
               $dRead9_s3XCo
               $dRead10_s3XCp
               $dRead11_s3XCq
               n_s3XCr] \u []
                  GHC.Read.$fRead(,,,,,,,,,,,)1
                      $dRead_s3XCf
                      $dRead1_s3XCg
                      $dRead2_s3XCh
                      $dRead3_s3XCi
                      $dRead4_s3XCj
                      $dRead5_s3XCk
                      $dRead6_s3XCl
                      $dRead7_s3XCm
                      $dRead8_s3XCn
                      $dRead9_s3XCo
                      $dRead10_s3XCp
                      $dRead11_s3XCq
                      n_s3XCr
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XCs;

GHC.Read.$fRead(,,,,,,,,,,,)_$creadList
  :: forall a b c d e f g h i j k l.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l) =>
     Text.ParserCombinators.ReadP.ReadS
       [(a, b, c, d, e, f, g, h, i, j, k, l)]
[GblId,
 Arity=12,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XCt
           $dRead1_s3XCu
           $dRead2_s3XCv
           $dRead3_s3XCw
           $dRead4_s3XCx
           $dRead5_s3XCy
           $dRead6_s3XCz
           $dRead7_s3XCA
           $dRead8_s3XCB
           $dRead9_s3XCC
           $dRead10_s3XCD
           $dRead11_s3XCE]
        let {
          sat_s3XCG [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 [(a_X3KMA, b_X3KMC, c_X3KME, d_X3KMG, e_X3KMI, f_X3KMK, g_X3KMM,
                   h_X3KMO, i_X3KMQ, j_X3KMS, k_X3KMU, l_X3KMW)]
          [LclId] =
              [$dRead_s3XCt
               $dRead1_s3XCu
               $dRead2_s3XCv
               $dRead3_s3XCw
               $dRead4_s3XCx
               $dRead5_s3XCy
               $dRead6_s3XCz
               $dRead7_s3XCA
               $dRead8_s3XCB
               $dRead9_s3XCC
               $dRead10_s3XCD
               $dRead11_s3XCE] \u []
                  let {
                    sat_s3XCF [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec
                           (a_X3KMA, b_X3KMC, c_X3KME, d_X3KMG, e_X3KMI, f_X3KMK, g_X3KMM,
                            h_X3KMO, i_X3KMQ, j_X3KMS, k_X3KMU, l_X3KMW)
                    [LclId] =
                        [$dRead_s3XCt
                         $dRead1_s3XCu
                         $dRead2_s3XCv
                         $dRead3_s3XCw
                         $dRead4_s3XCx
                         $dRead5_s3XCy
                         $dRead6_s3XCz
                         $dRead7_s3XCA
                         $dRead8_s3XCB
                         $dRead9_s3XCC
                         $dRead10_s3XCD
                         $dRead11_s3XCE] \r [eta_B2 eta_B1]
                            GHC.Read.$fRead(,,,,,,,,,,,)1
                                $dRead_s3XCt
                                $dRead1_s3XCu
                                $dRead2_s3XCv
                                $dRead3_s3XCw
                                $dRead4_s3XCx
                                $dRead5_s3XCy
                                $dRead6_s3XCz
                                $dRead7_s3XCA
                                $dRead8_s3XCB
                                $dRead9_s3XCC
                                $dRead10_s3XCD
                                $dRead11_s3XCE
                                eta_B2
                                eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s3XCF
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XCG;

GHC.Read.$fRead(,,,,,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h i j k l.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l) =>
     GHC.Read.Read (a, b, c, d, e, f, g, h, i, j, k, l)
[GblId[DFunId],
 Arity=12,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>m] =
    [] \r [$dRead_s3XCH
           $dRead1_s3XCI
           $dRead2_s3XCJ
           $dRead3_s3XCK
           $dRead4_s3XCL
           $dRead5_s3XCM
           $dRead6_s3XCN
           $dRead7_s3XCO
           $dRead8_s3XCP
           $dRead9_s3XCQ
           $dRead10_s3XCR
           $dRead11_s3XCS]
        let {
          sat_s3XCW [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 [(a_X3KMB, b_X3KMD, c_X3KMF, d_X3KMH, e_X3KMJ, f_X3KML, g_X3KMN,
                   h_X3KMP, i_X3KMR, j_X3KMT, k_X3KMV, l_X3KMX)]
          [LclId] =
              [$dRead_s3XCH
               $dRead1_s3XCI
               $dRead2_s3XCJ
               $dRead3_s3XCK
               $dRead4_s3XCL
               $dRead5_s3XCM
               $dRead6_s3XCN
               $dRead7_s3XCO
               $dRead8_s3XCP
               $dRead9_s3XCQ
               $dRead10_s3XCR
               $dRead11_s3XCS] \u []
                  GHC.Read.$fRead(,,,,,,,,,,,)_$creadListPrec
                      $dRead_s3XCH
                      $dRead1_s3XCI
                      $dRead2_s3XCJ
                      $dRead3_s3XCK
                      $dRead4_s3XCL
                      $dRead5_s3XCM
                      $dRead6_s3XCN
                      $dRead7_s3XCO
                      $dRead8_s3XCP
                      $dRead9_s3XCQ
                      $dRead10_s3XCR
                      $dRead11_s3XCS; } in
        let {
          sat_s3XCV [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KMB, b_X3KMD, c_X3KMF, d_X3KMH, e_X3KMJ, f_X3KML, g_X3KMN,
                  h_X3KMP, i_X3KMR, j_X3KMT, k_X3KMV, l_X3KMX)
          [LclId] =
              [$dRead_s3XCH
               $dRead1_s3XCI
               $dRead2_s3XCJ
               $dRead3_s3XCK
               $dRead4_s3XCL
               $dRead5_s3XCM
               $dRead6_s3XCN
               $dRead7_s3XCO
               $dRead8_s3XCP
               $dRead9_s3XCQ
               $dRead10_s3XCR
               $dRead11_s3XCS] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,,,,,,,)1
                      $dRead_s3XCH
                      $dRead1_s3XCI
                      $dRead2_s3XCJ
                      $dRead3_s3XCK
                      $dRead4_s3XCL
                      $dRead5_s3XCM
                      $dRead6_s3XCN
                      $dRead7_s3XCO
                      $dRead8_s3XCP
                      $dRead9_s3XCQ
                      $dRead10_s3XCR
                      $dRead11_s3XCS
                      eta_B2
                      eta_B1; } in
        let {
          sat_s3XCU [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS
                 [(a_X3KMB, b_X3KMD, c_X3KMF, d_X3KMH, e_X3KMJ, f_X3KML, g_X3KMN,
                   h_X3KMP, i_X3KMR, j_X3KMT, k_X3KMV, l_X3KMX)]
          [LclId] =
              [$dRead_s3XCH
               $dRead1_s3XCI
               $dRead2_s3XCJ
               $dRead3_s3XCK
               $dRead4_s3XCL
               $dRead5_s3XCM
               $dRead6_s3XCN
               $dRead7_s3XCO
               $dRead8_s3XCP
               $dRead9_s3XCQ
               $dRead10_s3XCR
               $dRead11_s3XCS] \u []
                  GHC.Read.$fRead(,,,,,,,,,,,)_$creadList
                      $dRead_s3XCH
                      $dRead1_s3XCI
                      $dRead2_s3XCJ
                      $dRead3_s3XCK
                      $dRead4_s3XCL
                      $dRead5_s3XCM
                      $dRead6_s3XCN
                      $dRead7_s3XCO
                      $dRead8_s3XCP
                      $dRead9_s3XCQ
                      $dRead10_s3XCR
                      $dRead11_s3XCS; } in
        let {
          sat_s3XCT [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS
                    (a_X3KMB, b_X3KMD, c_X3KMF, d_X3KMH, e_X3KMJ, f_X3KML, g_X3KMN,
                     h_X3KMP, i_X3KMR, j_X3KMT, k_X3KMV, l_X3KMX)
          [LclId] =
              [$dRead_s3XCH
               $dRead1_s3XCI
               $dRead2_s3XCJ
               $dRead3_s3XCK
               $dRead4_s3XCL
               $dRead5_s3XCM
               $dRead6_s3XCN
               $dRead7_s3XCO
               $dRead8_s3XCP
               $dRead9_s3XCQ
               $dRead10_s3XCR
               $dRead11_s3XCS] \r [eta_B1]
                  GHC.Read.$fRead(,,,,,,,,,,,)_$creadsPrec
                      $dRead_s3XCH
                      $dRead1_s3XCI
                      $dRead2_s3XCJ
                      $dRead3_s3XCK
                      $dRead4_s3XCL
                      $dRead5_s3XCM
                      $dRead6_s3XCN
                      $dRead7_s3XCO
                      $dRead8_s3XCP
                      $dRead9_s3XCQ
                      $dRead10_s3XCR
                      $dRead11_s3XCS
                      eta_B1;
        } in  GHC.Read.C:Read [sat_s3XCT sat_s3XCU sat_s3XCV sat_s3XCW];

GHC.Read.$fRead(,,,,,,,,,,)_$creadListPrec
  :: forall a b c d e f g h i j k.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j,
      GHC.Read.Read k) =>
     Text.ParserCombinators.ReadPrec.ReadPrec
       [(a, b, c, d, e, f, g, h, i, j, k)]
[GblId,
 Arity=11,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XCX
           $dRead1_s3XCY
           $dRead2_s3XCZ
           $dRead3_s3XD0
           $dRead4_s3XD1
           $dRead5_s3XD2
           $dRead6_s3XD3
           $dRead7_s3XD4
           $dRead8_s3XD5
           $dRead9_s3XD6
           $dRead10_s3XD7]
        let {
          sat_s3XD8 [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KOd, b_X3KOf, c_X3KOh, d_X3KOj, e_X3KOl, f_X3KOn, g_X3KOp,
                  h_X3KOr, i_X3KOt, j_X3KOv, k_X3KOx)
          [LclId] =
              [$dRead_s3XCX
               $dRead1_s3XCY
               $dRead2_s3XCZ
               $dRead3_s3XD0
               $dRead4_s3XD1
               $dRead5_s3XD2
               $dRead6_s3XD3
               $dRead7_s3XD4
               $dRead8_s3XD5
               $dRead9_s3XD6
               $dRead10_s3XD7] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,,,,,,)1
                      $dRead_s3XCX
                      $dRead1_s3XCY
                      $dRead2_s3XCZ
                      $dRead3_s3XD0
                      $dRead4_s3XD1
                      $dRead5_s3XD2
                      $dRead6_s3XD3
                      $dRead7_s3XD4
                      $dRead8_s3XD5
                      $dRead9_s3XD6
                      $dRead10_s3XD7
                      eta_B2
                      eta_B1;
        } in  GHC.Read.list sat_s3XD8;

GHC.Read.$fRead(,,,,,,,,,,)_$creadsPrec
  :: forall a b c d e f g h i j k.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j,
      GHC.Read.Read k) =>
     GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS
          (a, b, c, d, e, f, g, h, i, j, k)
[GblId,
 Arity=12,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XD9
           $dRead1_s3XDa
           $dRead2_s3XDb
           $dRead3_s3XDc
           $dRead4_s3XDd
           $dRead5_s3XDe
           $dRead6_s3XDf
           $dRead7_s3XDg
           $dRead8_s3XDh
           $dRead9_s3XDi
           $dRead10_s3XDj
           n_s3XDk]
        let {
          sat_s3XDl [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 (a_X3KOe, b_X3KOg, c_X3KOi, d_X3KOk, e_X3KOm, f_X3KOo, g_X3KOq,
                  h_X3KOs, i_X3KOu, j_X3KOw, k_X3KOy)
          [LclId] =
              [$dRead_s3XD9
               $dRead1_s3XDa
               $dRead2_s3XDb
               $dRead3_s3XDc
               $dRead4_s3XDd
               $dRead5_s3XDe
               $dRead6_s3XDf
               $dRead7_s3XDg
               $dRead8_s3XDh
               $dRead9_s3XDi
               $dRead10_s3XDj
               n_s3XDk] \u []
                  GHC.Read.$fRead(,,,,,,,,,,)1
                      $dRead_s3XD9
                      $dRead1_s3XDa
                      $dRead2_s3XDb
                      $dRead3_s3XDc
                      $dRead4_s3XDd
                      $dRead5_s3XDe
                      $dRead6_s3XDf
                      $dRead7_s3XDg
                      $dRead8_s3XDh
                      $dRead9_s3XDi
                      $dRead10_s3XDj
                      n_s3XDk
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XDl;

GHC.Read.$fRead(,,,,,,,,,,)_$creadList
  :: forall a b c d e f g h i j k.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j,
      GHC.Read.Read k) =>
     Text.ParserCombinators.ReadP.ReadS
       [(a, b, c, d, e, f, g, h, i, j, k)]
[GblId,
 Arity=11,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XDm
           $dRead1_s3XDn
           $dRead2_s3XDo
           $dRead3_s3XDp
           $dRead4_s3XDq
           $dRead5_s3XDr
           $dRead6_s3XDs
           $dRead7_s3XDt
           $dRead8_s3XDu
           $dRead9_s3XDv
           $dRead10_s3XDw]
        let {
          sat_s3XDy [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 [(a_X3KOf, b_X3KOh, c_X3KOj, d_X3KOl, e_X3KOn, f_X3KOp, g_X3KOr,
                   h_X3KOt, i_X3KOv, j_X3KOx, k_X3KOz)]
          [LclId] =
              [$dRead_s3XDm
               $dRead1_s3XDn
               $dRead2_s3XDo
               $dRead3_s3XDp
               $dRead4_s3XDq
               $dRead5_s3XDr
               $dRead6_s3XDs
               $dRead7_s3XDt
               $dRead8_s3XDu
               $dRead9_s3XDv
               $dRead10_s3XDw] \u []
                  let {
                    sat_s3XDx [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec
                           (a_X3KOf, b_X3KOh, c_X3KOj, d_X3KOl, e_X3KOn, f_X3KOp, g_X3KOr,
                            h_X3KOt, i_X3KOv, j_X3KOx, k_X3KOz)
                    [LclId] =
                        [$dRead_s3XDm
                         $dRead1_s3XDn
                         $dRead2_s3XDo
                         $dRead3_s3XDp
                         $dRead4_s3XDq
                         $dRead5_s3XDr
                         $dRead6_s3XDs
                         $dRead7_s3XDt
                         $dRead8_s3XDu
                         $dRead9_s3XDv
                         $dRead10_s3XDw] \r [eta_B2 eta_B1]
                            GHC.Read.$fRead(,,,,,,,,,,)1
                                $dRead_s3XDm
                                $dRead1_s3XDn
                                $dRead2_s3XDo
                                $dRead3_s3XDp
                                $dRead4_s3XDq
                                $dRead5_s3XDr
                                $dRead6_s3XDs
                                $dRead7_s3XDt
                                $dRead8_s3XDu
                                $dRead9_s3XDv
                                $dRead10_s3XDw
                                eta_B2
                                eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s3XDx
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XDy;

GHC.Read.$fRead(,,,,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h i j k.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j,
      GHC.Read.Read k) =>
     GHC.Read.Read (a, b, c, d, e, f, g, h, i, j, k)
[GblId[DFunId],
 Arity=11,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>m] =
    [] \r [$dRead_s3XDz
           $dRead1_s3XDA
           $dRead2_s3XDB
           $dRead3_s3XDC
           $dRead4_s3XDD
           $dRead5_s3XDE
           $dRead6_s3XDF
           $dRead7_s3XDG
           $dRead8_s3XDH
           $dRead9_s3XDI
           $dRead10_s3XDJ]
        let {
          sat_s3XDN [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 [(a_X3KOg, b_X3KOi, c_X3KOk, d_X3KOm, e_X3KOo, f_X3KOq, g_X3KOs,
                   h_X3KOu, i_X3KOw, j_X3KOy, k_X3KOA)]
          [LclId] =
              [$dRead_s3XDz
               $dRead1_s3XDA
               $dRead2_s3XDB
               $dRead3_s3XDC
               $dRead4_s3XDD
               $dRead5_s3XDE
               $dRead6_s3XDF
               $dRead7_s3XDG
               $dRead8_s3XDH
               $dRead9_s3XDI
               $dRead10_s3XDJ] \u []
                  GHC.Read.$fRead(,,,,,,,,,,)_$creadListPrec
                      $dRead_s3XDz
                      $dRead1_s3XDA
                      $dRead2_s3XDB
                      $dRead3_s3XDC
                      $dRead4_s3XDD
                      $dRead5_s3XDE
                      $dRead6_s3XDF
                      $dRead7_s3XDG
                      $dRead8_s3XDH
                      $dRead9_s3XDI
                      $dRead10_s3XDJ; } in
        let {
          sat_s3XDM [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KOg, b_X3KOi, c_X3KOk, d_X3KOm, e_X3KOo, f_X3KOq, g_X3KOs,
                  h_X3KOu, i_X3KOw, j_X3KOy, k_X3KOA)
          [LclId] =
              [$dRead_s3XDz
               $dRead1_s3XDA
               $dRead2_s3XDB
               $dRead3_s3XDC
               $dRead4_s3XDD
               $dRead5_s3XDE
               $dRead6_s3XDF
               $dRead7_s3XDG
               $dRead8_s3XDH
               $dRead9_s3XDI
               $dRead10_s3XDJ] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,,,,,,)1
                      $dRead_s3XDz
                      $dRead1_s3XDA
                      $dRead2_s3XDB
                      $dRead3_s3XDC
                      $dRead4_s3XDD
                      $dRead5_s3XDE
                      $dRead6_s3XDF
                      $dRead7_s3XDG
                      $dRead8_s3XDH
                      $dRead9_s3XDI
                      $dRead10_s3XDJ
                      eta_B2
                      eta_B1; } in
        let {
          sat_s3XDL [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS
                 [(a_X3KOg, b_X3KOi, c_X3KOk, d_X3KOm, e_X3KOo, f_X3KOq, g_X3KOs,
                   h_X3KOu, i_X3KOw, j_X3KOy, k_X3KOA)]
          [LclId] =
              [$dRead_s3XDz
               $dRead1_s3XDA
               $dRead2_s3XDB
               $dRead3_s3XDC
               $dRead4_s3XDD
               $dRead5_s3XDE
               $dRead6_s3XDF
               $dRead7_s3XDG
               $dRead8_s3XDH
               $dRead9_s3XDI
               $dRead10_s3XDJ] \u []
                  GHC.Read.$fRead(,,,,,,,,,,)_$creadList
                      $dRead_s3XDz
                      $dRead1_s3XDA
                      $dRead2_s3XDB
                      $dRead3_s3XDC
                      $dRead4_s3XDD
                      $dRead5_s3XDE
                      $dRead6_s3XDF
                      $dRead7_s3XDG
                      $dRead8_s3XDH
                      $dRead9_s3XDI
                      $dRead10_s3XDJ; } in
        let {
          sat_s3XDK [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS
                    (a_X3KOg, b_X3KOi, c_X3KOk, d_X3KOm, e_X3KOo, f_X3KOq, g_X3KOs,
                     h_X3KOu, i_X3KOw, j_X3KOy, k_X3KOA)
          [LclId] =
              [$dRead_s3XDz
               $dRead1_s3XDA
               $dRead2_s3XDB
               $dRead3_s3XDC
               $dRead4_s3XDD
               $dRead5_s3XDE
               $dRead6_s3XDF
               $dRead7_s3XDG
               $dRead8_s3XDH
               $dRead9_s3XDI
               $dRead10_s3XDJ] \r [eta_B1]
                  GHC.Read.$fRead(,,,,,,,,,,)_$creadsPrec
                      $dRead_s3XDz
                      $dRead1_s3XDA
                      $dRead2_s3XDB
                      $dRead3_s3XDC
                      $dRead4_s3XDD
                      $dRead5_s3XDE
                      $dRead6_s3XDF
                      $dRead7_s3XDG
                      $dRead8_s3XDH
                      $dRead9_s3XDI
                      $dRead10_s3XDJ
                      eta_B1;
        } in  GHC.Read.C:Read [sat_s3XDK sat_s3XDL sat_s3XDM sat_s3XDN];

GHC.Read.$fRead(,,,,,,,,,)_$creadListPrec
  :: forall a b c d e f g h i j.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j) =>
     Text.ParserCombinators.ReadPrec.ReadPrec
       [(a, b, c, d, e, f, g, h, i, j)]
[GblId,
 Arity=10,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XDO
           $dRead1_s3XDP
           $dRead2_s3XDQ
           $dRead3_s3XDR
           $dRead4_s3XDS
           $dRead5_s3XDT
           $dRead6_s3XDU
           $dRead7_s3XDV
           $dRead8_s3XDW
           $dRead9_s3XDX]
        let {
          sat_s3XDY [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KPV, b_X3KPX, c_X3KPZ, d_X3KQ1, e_X3KQ3, f_X3KQ5, g_X3KQ7,
                  h_X3KQ9, i_X3KQb, j_X3KQd)
          [LclId] =
              [$dRead_s3XDO
               $dRead1_s3XDP
               $dRead2_s3XDQ
               $dRead3_s3XDR
               $dRead4_s3XDS
               $dRead5_s3XDT
               $dRead6_s3XDU
               $dRead7_s3XDV
               $dRead8_s3XDW
               $dRead9_s3XDX] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,,,,,)1
                      $dRead_s3XDO
                      $dRead1_s3XDP
                      $dRead2_s3XDQ
                      $dRead3_s3XDR
                      $dRead4_s3XDS
                      $dRead5_s3XDT
                      $dRead6_s3XDU
                      $dRead7_s3XDV
                      $dRead8_s3XDW
                      $dRead9_s3XDX
                      eta_B2
                      eta_B1;
        } in  GHC.Read.list sat_s3XDY;

GHC.Read.$fRead(,,,,,,,,,)_$creadsPrec
  :: forall a b c d e f g h i j.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j) =>
     GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS
          (a, b, c, d, e, f, g, h, i, j)
[GblId,
 Arity=11,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XDZ
           $dRead1_s3XE0
           $dRead2_s3XE1
           $dRead3_s3XE2
           $dRead4_s3XE3
           $dRead5_s3XE4
           $dRead6_s3XE5
           $dRead7_s3XE6
           $dRead8_s3XE7
           $dRead9_s3XE8
           n_s3XE9]
        let {
          sat_s3XEa [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 (a_X3KPW, b_X3KPY, c_X3KQ0, d_X3KQ2, e_X3KQ4, f_X3KQ6, g_X3KQ8,
                  h_X3KQa, i_X3KQc, j_X3KQe)
          [LclId] =
              [$dRead_s3XDZ
               $dRead1_s3XE0
               $dRead2_s3XE1
               $dRead3_s3XE2
               $dRead4_s3XE3
               $dRead5_s3XE4
               $dRead6_s3XE5
               $dRead7_s3XE6
               $dRead8_s3XE7
               $dRead9_s3XE8
               n_s3XE9] \u []
                  GHC.Read.$fRead(,,,,,,,,,)1
                      $dRead_s3XDZ
                      $dRead1_s3XE0
                      $dRead2_s3XE1
                      $dRead3_s3XE2
                      $dRead4_s3XE3
                      $dRead5_s3XE4
                      $dRead6_s3XE5
                      $dRead7_s3XE6
                      $dRead8_s3XE7
                      $dRead9_s3XE8
                      n_s3XE9
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XEa;

GHC.Read.$fRead(,,,,,,,,,)_$creadList
  :: forall a b c d e f g h i j.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j) =>
     Text.ParserCombinators.ReadP.ReadS [(a, b, c, d, e, f, g, h, i, j)]
[GblId,
 Arity=10,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XEb
           $dRead1_s3XEc
           $dRead2_s3XEd
           $dRead3_s3XEe
           $dRead4_s3XEf
           $dRead5_s3XEg
           $dRead6_s3XEh
           $dRead7_s3XEi
           $dRead8_s3XEj
           $dRead9_s3XEk]
        let {
          sat_s3XEm [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 [(a_X3KPX, b_X3KPZ, c_X3KQ1, d_X3KQ3, e_X3KQ5, f_X3KQ7, g_X3KQ9,
                   h_X3KQb, i_X3KQd, j_X3KQf)]
          [LclId] =
              [$dRead_s3XEb
               $dRead1_s3XEc
               $dRead2_s3XEd
               $dRead3_s3XEe
               $dRead4_s3XEf
               $dRead5_s3XEg
               $dRead6_s3XEh
               $dRead7_s3XEi
               $dRead8_s3XEj
               $dRead9_s3XEk] \u []
                  let {
                    sat_s3XEl [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec
                           (a_X3KPX, b_X3KPZ, c_X3KQ1, d_X3KQ3, e_X3KQ5, f_X3KQ7, g_X3KQ9,
                            h_X3KQb, i_X3KQd, j_X3KQf)
                    [LclId] =
                        [$dRead_s3XEb
                         $dRead1_s3XEc
                         $dRead2_s3XEd
                         $dRead3_s3XEe
                         $dRead4_s3XEf
                         $dRead5_s3XEg
                         $dRead6_s3XEh
                         $dRead7_s3XEi
                         $dRead8_s3XEj
                         $dRead9_s3XEk] \r [eta_B2 eta_B1]
                            GHC.Read.$fRead(,,,,,,,,,)1
                                $dRead_s3XEb
                                $dRead1_s3XEc
                                $dRead2_s3XEd
                                $dRead3_s3XEe
                                $dRead4_s3XEf
                                $dRead5_s3XEg
                                $dRead6_s3XEh
                                $dRead7_s3XEi
                                $dRead8_s3XEj
                                $dRead9_s3XEk
                                eta_B2
                                eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s3XEl
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XEm;

GHC.Read.$fRead(,,,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h i j.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j) =>
     GHC.Read.Read (a, b, c, d, e, f, g, h, i, j)
[GblId[DFunId],
 Arity=10,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>m] =
    [] \r [$dRead_s3XEn
           $dRead1_s3XEo
           $dRead2_s3XEp
           $dRead3_s3XEq
           $dRead4_s3XEr
           $dRead5_s3XEs
           $dRead6_s3XEt
           $dRead7_s3XEu
           $dRead8_s3XEv
           $dRead9_s3XEw]
        let {
          sat_s3XEA [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 [(a_X3KPY, b_X3KQ0, c_X3KQ2, d_X3KQ4, e_X3KQ6, f_X3KQ8, g_X3KQa,
                   h_X3KQc, i_X3KQe, j_X3KQg)]
          [LclId] =
              [$dRead_s3XEn
               $dRead1_s3XEo
               $dRead2_s3XEp
               $dRead3_s3XEq
               $dRead4_s3XEr
               $dRead5_s3XEs
               $dRead6_s3XEt
               $dRead7_s3XEu
               $dRead8_s3XEv
               $dRead9_s3XEw] \u []
                  GHC.Read.$fRead(,,,,,,,,,)_$creadListPrec
                      $dRead_s3XEn
                      $dRead1_s3XEo
                      $dRead2_s3XEp
                      $dRead3_s3XEq
                      $dRead4_s3XEr
                      $dRead5_s3XEs
                      $dRead6_s3XEt
                      $dRead7_s3XEu
                      $dRead8_s3XEv
                      $dRead9_s3XEw; } in
        let {
          sat_s3XEz [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KPY, b_X3KQ0, c_X3KQ2, d_X3KQ4, e_X3KQ6, f_X3KQ8, g_X3KQa,
                  h_X3KQc, i_X3KQe, j_X3KQg)
          [LclId] =
              [$dRead_s3XEn
               $dRead1_s3XEo
               $dRead2_s3XEp
               $dRead3_s3XEq
               $dRead4_s3XEr
               $dRead5_s3XEs
               $dRead6_s3XEt
               $dRead7_s3XEu
               $dRead8_s3XEv
               $dRead9_s3XEw] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,,,,,)1
                      $dRead_s3XEn
                      $dRead1_s3XEo
                      $dRead2_s3XEp
                      $dRead3_s3XEq
                      $dRead4_s3XEr
                      $dRead5_s3XEs
                      $dRead6_s3XEt
                      $dRead7_s3XEu
                      $dRead8_s3XEv
                      $dRead9_s3XEw
                      eta_B2
                      eta_B1; } in
        let {
          sat_s3XEy [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS
                 [(a_X3KPY, b_X3KQ0, c_X3KQ2, d_X3KQ4, e_X3KQ6, f_X3KQ8, g_X3KQa,
                   h_X3KQc, i_X3KQe, j_X3KQg)]
          [LclId] =
              [$dRead_s3XEn
               $dRead1_s3XEo
               $dRead2_s3XEp
               $dRead3_s3XEq
               $dRead4_s3XEr
               $dRead5_s3XEs
               $dRead6_s3XEt
               $dRead7_s3XEu
               $dRead8_s3XEv
               $dRead9_s3XEw] \u []
                  GHC.Read.$fRead(,,,,,,,,,)_$creadList
                      $dRead_s3XEn
                      $dRead1_s3XEo
                      $dRead2_s3XEp
                      $dRead3_s3XEq
                      $dRead4_s3XEr
                      $dRead5_s3XEs
                      $dRead6_s3XEt
                      $dRead7_s3XEu
                      $dRead8_s3XEv
                      $dRead9_s3XEw; } in
        let {
          sat_s3XEx [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS
                    (a_X3KPY, b_X3KQ0, c_X3KQ2, d_X3KQ4, e_X3KQ6, f_X3KQ8, g_X3KQa,
                     h_X3KQc, i_X3KQe, j_X3KQg)
          [LclId] =
              [$dRead_s3XEn
               $dRead1_s3XEo
               $dRead2_s3XEp
               $dRead3_s3XEq
               $dRead4_s3XEr
               $dRead5_s3XEs
               $dRead6_s3XEt
               $dRead7_s3XEu
               $dRead8_s3XEv
               $dRead9_s3XEw] \r [eta_B1]
                  GHC.Read.$fRead(,,,,,,,,,)_$creadsPrec
                      $dRead_s3XEn
                      $dRead1_s3XEo
                      $dRead2_s3XEp
                      $dRead3_s3XEq
                      $dRead4_s3XEr
                      $dRead5_s3XEs
                      $dRead6_s3XEt
                      $dRead7_s3XEu
                      $dRead8_s3XEv
                      $dRead9_s3XEw
                      eta_B1;
        } in  GHC.Read.C:Read [sat_s3XEx sat_s3XEy sat_s3XEz sat_s3XEA];

GHC.Read.$fRead(,,,,,,,,)_$creadListPrec
  :: forall a b c d e f g h i.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i) =>
     Text.ParserCombinators.ReadPrec.ReadPrec
       [(a, b, c, d, e, f, g, h, i)]
[GblId,
 Arity=9,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XEB
           $dRead1_s3XEC
           $dRead2_s3XED
           $dRead3_s3XEE
           $dRead4_s3XEF
           $dRead5_s3XEG
           $dRead6_s3XEH
           $dRead7_s3XEI
           $dRead8_s3XEJ]
        let {
          sat_s3XEK [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KRq, b_X3KRs, c_X3KRu, d_X3KRw, e_X3KRy, f_X3KRA, g_X3KRC,
                  h_X3KRE, i_X3KRG)
          [LclId] =
              [$dRead_s3XEB
               $dRead1_s3XEC
               $dRead2_s3XED
               $dRead3_s3XEE
               $dRead4_s3XEF
               $dRead5_s3XEG
               $dRead6_s3XEH
               $dRead7_s3XEI
               $dRead8_s3XEJ] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,,,,)1
                      $dRead_s3XEB
                      $dRead1_s3XEC
                      $dRead2_s3XED
                      $dRead3_s3XEE
                      $dRead4_s3XEF
                      $dRead5_s3XEG
                      $dRead6_s3XEH
                      $dRead7_s3XEI
                      $dRead8_s3XEJ
                      eta_B2
                      eta_B1;
        } in  GHC.Read.list sat_s3XEK;

GHC.Read.$fRead(,,,,,,,,)_$creadsPrec
  :: forall a b c d e f g h i.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i) =>
     GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS (a, b, c, d, e, f, g, h, i)
[GblId,
 Arity=10,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XEL
           $dRead1_s3XEM
           $dRead2_s3XEN
           $dRead3_s3XEO
           $dRead4_s3XEP
           $dRead5_s3XEQ
           $dRead6_s3XER
           $dRead7_s3XES
           $dRead8_s3XET
           n_s3XEU]
        let {
          sat_s3XEV [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 (a_X3KRr, b_X3KRt, c_X3KRv, d_X3KRx, e_X3KRz, f_X3KRB, g_X3KRD,
                  h_X3KRF, i_X3KRH)
          [LclId] =
              [$dRead_s3XEL
               $dRead1_s3XEM
               $dRead2_s3XEN
               $dRead3_s3XEO
               $dRead4_s3XEP
               $dRead5_s3XEQ
               $dRead6_s3XER
               $dRead7_s3XES
               $dRead8_s3XET
               n_s3XEU] \u []
                  GHC.Read.$fRead(,,,,,,,,)1
                      $dRead_s3XEL
                      $dRead1_s3XEM
                      $dRead2_s3XEN
                      $dRead3_s3XEO
                      $dRead4_s3XEP
                      $dRead5_s3XEQ
                      $dRead6_s3XER
                      $dRead7_s3XES
                      $dRead8_s3XET
                      n_s3XEU
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XEV;

GHC.Read.$fRead(,,,,,,,,)_$creadList
  :: forall a b c d e f g h i.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i) =>
     Text.ParserCombinators.ReadP.ReadS [(a, b, c, d, e, f, g, h, i)]
[GblId,
 Arity=9,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XEW
           $dRead1_s3XEX
           $dRead2_s3XEY
           $dRead3_s3XEZ
           $dRead4_s3XF0
           $dRead5_s3XF1
           $dRead6_s3XF2
           $dRead7_s3XF3
           $dRead8_s3XF4]
        let {
          sat_s3XF6 [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 [(a_X3KRs, b_X3KRu, c_X3KRw, d_X3KRy, e_X3KRA, f_X3KRC, g_X3KRE,
                   h_X3KRG, i_X3KRI)]
          [LclId] =
              [$dRead_s3XEW
               $dRead1_s3XEX
               $dRead2_s3XEY
               $dRead3_s3XEZ
               $dRead4_s3XF0
               $dRead5_s3XF1
               $dRead6_s3XF2
               $dRead7_s3XF3
               $dRead8_s3XF4] \u []
                  let {
                    sat_s3XF5 [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec
                           (a_X3KRs, b_X3KRu, c_X3KRw, d_X3KRy, e_X3KRA, f_X3KRC, g_X3KRE,
                            h_X3KRG, i_X3KRI)
                    [LclId] =
                        [$dRead_s3XEW
                         $dRead1_s3XEX
                         $dRead2_s3XEY
                         $dRead3_s3XEZ
                         $dRead4_s3XF0
                         $dRead5_s3XF1
                         $dRead6_s3XF2
                         $dRead7_s3XF3
                         $dRead8_s3XF4] \r [eta_B2 eta_B1]
                            GHC.Read.$fRead(,,,,,,,,)1
                                $dRead_s3XEW
                                $dRead1_s3XEX
                                $dRead2_s3XEY
                                $dRead3_s3XEZ
                                $dRead4_s3XF0
                                $dRead5_s3XF1
                                $dRead6_s3XF2
                                $dRead7_s3XF3
                                $dRead8_s3XF4
                                eta_B2
                                eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s3XF5
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XF6;

GHC.Read.$fRead(,,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h i.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i) =>
     GHC.Read.Read (a, b, c, d, e, f, g, h, i)
[GblId[DFunId],
 Arity=9,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>m] =
    [] \r [$dRead_s3XF7
           $dRead1_s3XF8
           $dRead2_s3XF9
           $dRead3_s3XFa
           $dRead4_s3XFb
           $dRead5_s3XFc
           $dRead6_s3XFd
           $dRead7_s3XFe
           $dRead8_s3XFf]
        let {
          sat_s3XFj [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 [(a_X3KRt, b_X3KRv, c_X3KRx, d_X3KRz, e_X3KRB, f_X3KRD, g_X3KRF,
                   h_X3KRH, i_X3KRJ)]
          [LclId] =
              [$dRead_s3XF7
               $dRead1_s3XF8
               $dRead2_s3XF9
               $dRead3_s3XFa
               $dRead4_s3XFb
               $dRead5_s3XFc
               $dRead6_s3XFd
               $dRead7_s3XFe
               $dRead8_s3XFf] \u []
                  GHC.Read.$fRead(,,,,,,,,)_$creadListPrec
                      $dRead_s3XF7
                      $dRead1_s3XF8
                      $dRead2_s3XF9
                      $dRead3_s3XFa
                      $dRead4_s3XFb
                      $dRead5_s3XFc
                      $dRead6_s3XFd
                      $dRead7_s3XFe
                      $dRead8_s3XFf; } in
        let {
          sat_s3XFi [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KRt, b_X3KRv, c_X3KRx, d_X3KRz, e_X3KRB, f_X3KRD, g_X3KRF,
                  h_X3KRH, i_X3KRJ)
          [LclId] =
              [$dRead_s3XF7
               $dRead1_s3XF8
               $dRead2_s3XF9
               $dRead3_s3XFa
               $dRead4_s3XFb
               $dRead5_s3XFc
               $dRead6_s3XFd
               $dRead7_s3XFe
               $dRead8_s3XFf] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,,,,)1
                      $dRead_s3XF7
                      $dRead1_s3XF8
                      $dRead2_s3XF9
                      $dRead3_s3XFa
                      $dRead4_s3XFb
                      $dRead5_s3XFc
                      $dRead6_s3XFd
                      $dRead7_s3XFe
                      $dRead8_s3XFf
                      eta_B2
                      eta_B1; } in
        let {
          sat_s3XFh [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS
                 [(a_X3KRt, b_X3KRv, c_X3KRx, d_X3KRz, e_X3KRB, f_X3KRD, g_X3KRF,
                   h_X3KRH, i_X3KRJ)]
          [LclId] =
              [$dRead_s3XF7
               $dRead1_s3XF8
               $dRead2_s3XF9
               $dRead3_s3XFa
               $dRead4_s3XFb
               $dRead5_s3XFc
               $dRead6_s3XFd
               $dRead7_s3XFe
               $dRead8_s3XFf] \u []
                  GHC.Read.$fRead(,,,,,,,,)_$creadList
                      $dRead_s3XF7
                      $dRead1_s3XF8
                      $dRead2_s3XF9
                      $dRead3_s3XFa
                      $dRead4_s3XFb
                      $dRead5_s3XFc
                      $dRead6_s3XFd
                      $dRead7_s3XFe
                      $dRead8_s3XFf; } in
        let {
          sat_s3XFg [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS
                    (a_X3KRt, b_X3KRv, c_X3KRx, d_X3KRz, e_X3KRB, f_X3KRD, g_X3KRF,
                     h_X3KRH, i_X3KRJ)
          [LclId] =
              [$dRead_s3XF7
               $dRead1_s3XF8
               $dRead2_s3XF9
               $dRead3_s3XFa
               $dRead4_s3XFb
               $dRead5_s3XFc
               $dRead6_s3XFd
               $dRead7_s3XFe
               $dRead8_s3XFf] \r [eta_B1]
                  GHC.Read.$fRead(,,,,,,,,)_$creadsPrec
                      $dRead_s3XF7
                      $dRead1_s3XF8
                      $dRead2_s3XF9
                      $dRead3_s3XFa
                      $dRead4_s3XFb
                      $dRead5_s3XFc
                      $dRead6_s3XFd
                      $dRead7_s3XFe
                      $dRead8_s3XFf
                      eta_B1;
        } in  GHC.Read.C:Read [sat_s3XFg sat_s3XFh sat_s3XFi sat_s3XFj];

GHC.Read.$fRead(,,,,,,,)_$creadListPrec
  :: forall a b c d e f g h.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h) =>
     Text.ParserCombinators.ReadPrec.ReadPrec [(a, b, c, d, e, f, g, h)]
[GblId,
 Arity=8,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XFk
           $dRead1_s3XFl
           $dRead2_s3XFm
           $dRead3_s3XFn
           $dRead4_s3XFo
           $dRead5_s3XFp
           $dRead6_s3XFq
           $dRead7_s3XFr]
        let {
          sat_s3XFs [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KSQ, b_X3KSS, c_X3KSU, d_X3KSW, e_X3KSY, f_X3KT0, g_X3KT2,
                  h_X3KT4)
          [LclId] =
              [$dRead_s3XFk
               $dRead1_s3XFl
               $dRead2_s3XFm
               $dRead3_s3XFn
               $dRead4_s3XFo
               $dRead5_s3XFp
               $dRead6_s3XFq
               $dRead7_s3XFr] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,,,)1
                      $dRead_s3XFk
                      $dRead1_s3XFl
                      $dRead2_s3XFm
                      $dRead3_s3XFn
                      $dRead4_s3XFo
                      $dRead5_s3XFp
                      $dRead6_s3XFq
                      $dRead7_s3XFr
                      eta_B2
                      eta_B1;
        } in  GHC.Read.list sat_s3XFs;

GHC.Read.$fRead(,,,,,,,)_$creadsPrec
  :: forall a b c d e f g h.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h) =>
     GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS (a, b, c, d, e, f, g, h)
[GblId,
 Arity=9,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XFt
           $dRead1_s3XFu
           $dRead2_s3XFv
           $dRead3_s3XFw
           $dRead4_s3XFx
           $dRead5_s3XFy
           $dRead6_s3XFz
           $dRead7_s3XFA
           n_s3XFB]
        let {
          sat_s3XFC [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 (a_X3KSR, b_X3KST, c_X3KSV, d_X3KSX, e_X3KSZ, f_X3KT1, g_X3KT3,
                  h_X3KT5)
          [LclId] =
              [$dRead_s3XFt
               $dRead1_s3XFu
               $dRead2_s3XFv
               $dRead3_s3XFw
               $dRead4_s3XFx
               $dRead5_s3XFy
               $dRead6_s3XFz
               $dRead7_s3XFA
               n_s3XFB] \u []
                  GHC.Read.$fRead(,,,,,,,)1
                      $dRead_s3XFt
                      $dRead1_s3XFu
                      $dRead2_s3XFv
                      $dRead3_s3XFw
                      $dRead4_s3XFx
                      $dRead5_s3XFy
                      $dRead6_s3XFz
                      $dRead7_s3XFA
                      n_s3XFB
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XFC;

GHC.Read.$fRead(,,,,,,,)_$creadList
  :: forall a b c d e f g h.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h) =>
     Text.ParserCombinators.ReadP.ReadS [(a, b, c, d, e, f, g, h)]
[GblId,
 Arity=8,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XFD
           $dRead1_s3XFE
           $dRead2_s3XFF
           $dRead3_s3XFG
           $dRead4_s3XFH
           $dRead5_s3XFI
           $dRead6_s3XFJ
           $dRead7_s3XFK]
        let {
          sat_s3XFM [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 [(a_X3KSS, b_X3KSU, c_X3KSW, d_X3KSY, e_X3KT0, f_X3KT2, g_X3KT4,
                   h_X3KT6)]
          [LclId] =
              [$dRead_s3XFD
               $dRead1_s3XFE
               $dRead2_s3XFF
               $dRead3_s3XFG
               $dRead4_s3XFH
               $dRead5_s3XFI
               $dRead6_s3XFJ
               $dRead7_s3XFK] \u []
                  let {
                    sat_s3XFL [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec
                           (a_X3KSS, b_X3KSU, c_X3KSW, d_X3KSY, e_X3KT0, f_X3KT2, g_X3KT4,
                            h_X3KT6)
                    [LclId] =
                        [$dRead_s3XFD
                         $dRead1_s3XFE
                         $dRead2_s3XFF
                         $dRead3_s3XFG
                         $dRead4_s3XFH
                         $dRead5_s3XFI
                         $dRead6_s3XFJ
                         $dRead7_s3XFK] \r [eta_B2 eta_B1]
                            GHC.Read.$fRead(,,,,,,,)1
                                $dRead_s3XFD
                                $dRead1_s3XFE
                                $dRead2_s3XFF
                                $dRead3_s3XFG
                                $dRead4_s3XFH
                                $dRead5_s3XFI
                                $dRead6_s3XFJ
                                $dRead7_s3XFK
                                eta_B2
                                eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s3XFL
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XFM;

GHC.Read.$fRead(,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h) =>
     GHC.Read.Read (a, b, c, d, e, f, g, h)
[GblId[DFunId],
 Arity=8,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>m] =
    [] \r [$dRead_s3XFN
           $dRead1_s3XFO
           $dRead2_s3XFP
           $dRead3_s3XFQ
           $dRead4_s3XFR
           $dRead5_s3XFS
           $dRead6_s3XFT
           $dRead7_s3XFU]
        let {
          sat_s3XFY [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 [(a_X3KST, b_X3KSV, c_X3KSX, d_X3KSZ, e_X3KT1, f_X3KT3, g_X3KT5,
                   h_X3KT7)]
          [LclId] =
              [$dRead_s3XFN
               $dRead1_s3XFO
               $dRead2_s3XFP
               $dRead3_s3XFQ
               $dRead4_s3XFR
               $dRead5_s3XFS
               $dRead6_s3XFT
               $dRead7_s3XFU] \u []
                  GHC.Read.$fRead(,,,,,,,)_$creadListPrec
                      $dRead_s3XFN
                      $dRead1_s3XFO
                      $dRead2_s3XFP
                      $dRead3_s3XFQ
                      $dRead4_s3XFR
                      $dRead5_s3XFS
                      $dRead6_s3XFT
                      $dRead7_s3XFU; } in
        let {
          sat_s3XFX [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KST, b_X3KSV, c_X3KSX, d_X3KSZ, e_X3KT1, f_X3KT3, g_X3KT5,
                  h_X3KT7)
          [LclId] =
              [$dRead_s3XFN
               $dRead1_s3XFO
               $dRead2_s3XFP
               $dRead3_s3XFQ
               $dRead4_s3XFR
               $dRead5_s3XFS
               $dRead6_s3XFT
               $dRead7_s3XFU] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,,,)1
                      $dRead_s3XFN
                      $dRead1_s3XFO
                      $dRead2_s3XFP
                      $dRead3_s3XFQ
                      $dRead4_s3XFR
                      $dRead5_s3XFS
                      $dRead6_s3XFT
                      $dRead7_s3XFU
                      eta_B2
                      eta_B1; } in
        let {
          sat_s3XFW [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS
                 [(a_X3KST, b_X3KSV, c_X3KSX, d_X3KSZ, e_X3KT1, f_X3KT3, g_X3KT5,
                   h_X3KT7)]
          [LclId] =
              [$dRead_s3XFN
               $dRead1_s3XFO
               $dRead2_s3XFP
               $dRead3_s3XFQ
               $dRead4_s3XFR
               $dRead5_s3XFS
               $dRead6_s3XFT
               $dRead7_s3XFU] \u []
                  GHC.Read.$fRead(,,,,,,,)_$creadList
                      $dRead_s3XFN
                      $dRead1_s3XFO
                      $dRead2_s3XFP
                      $dRead3_s3XFQ
                      $dRead4_s3XFR
                      $dRead5_s3XFS
                      $dRead6_s3XFT
                      $dRead7_s3XFU; } in
        let {
          sat_s3XFV [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS
                    (a_X3KST, b_X3KSV, c_X3KSX, d_X3KSZ, e_X3KT1, f_X3KT3, g_X3KT5,
                     h_X3KT7)
          [LclId] =
              [$dRead_s3XFN
               $dRead1_s3XFO
               $dRead2_s3XFP
               $dRead3_s3XFQ
               $dRead4_s3XFR
               $dRead5_s3XFS
               $dRead6_s3XFT
               $dRead7_s3XFU] \r [eta_B1]
                  GHC.Read.$fRead(,,,,,,,)_$creadsPrec
                      $dRead_s3XFN
                      $dRead1_s3XFO
                      $dRead2_s3XFP
                      $dRead3_s3XFQ
                      $dRead4_s3XFR
                      $dRead5_s3XFS
                      $dRead6_s3XFT
                      $dRead7_s3XFU
                      eta_B1;
        } in  GHC.Read.C:Read [sat_s3XFV sat_s3XFW sat_s3XFX sat_s3XFY];

GHC.Read.$fRead(,,,,,,)_$creadListPrec
  :: forall a b c d e f g.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f,
      GHC.Read.Read g) =>
     Text.ParserCombinators.ReadPrec.ReadPrec [(a, b, c, d, e, f, g)]
[GblId,
 Arity=7,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XFZ
           $dRead1_s3XG0
           $dRead2_s3XG1
           $dRead3_s3XG2
           $dRead4_s3XG3
           $dRead5_s3XG4
           $dRead6_s3XG5]
        let {
          sat_s3XG6 [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KTO, b_X3KTQ, c_X3KTS, d_X3KTU, e_X3KTW, f_X3KTY, g_X3KU0)
          [LclId] =
              [$dRead_s3XFZ
               $dRead1_s3XG0
               $dRead2_s3XG1
               $dRead3_s3XG2
               $dRead4_s3XG3
               $dRead5_s3XG4
               $dRead6_s3XG5] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,,)1
                      $dRead_s3XFZ
                      $dRead1_s3XG0
                      $dRead2_s3XG1
                      $dRead3_s3XG2
                      $dRead4_s3XG3
                      $dRead5_s3XG4
                      $dRead6_s3XG5
                      eta_B2
                      eta_B1;
        } in  GHC.Read.list sat_s3XG6;

GHC.Read.$fRead(,,,,,,)_$creadsPrec
  :: forall a b c d e f g.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f,
      GHC.Read.Read g) =>
     GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS (a, b, c, d, e, f, g)
[GblId,
 Arity=8,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XG7
           $dRead1_s3XG8
           $dRead2_s3XG9
           $dRead3_s3XGa
           $dRead4_s3XGb
           $dRead5_s3XGc
           $dRead6_s3XGd
           n_s3XGe]
        let {
          sat_s3XGf [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 (a_X3KTP, b_X3KTR, c_X3KTT, d_X3KTV, e_X3KTX, f_X3KTZ, g_X3KU1)
          [LclId] =
              [$dRead_s3XG7
               $dRead1_s3XG8
               $dRead2_s3XG9
               $dRead3_s3XGa
               $dRead4_s3XGb
               $dRead5_s3XGc
               $dRead6_s3XGd
               n_s3XGe] \u []
                  GHC.Read.$fRead(,,,,,,)1
                      $dRead_s3XG7
                      $dRead1_s3XG8
                      $dRead2_s3XG9
                      $dRead3_s3XGa
                      $dRead4_s3XGb
                      $dRead5_s3XGc
                      $dRead6_s3XGd
                      n_s3XGe
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XGf;

GHC.Read.$fRead(,,,,,,)_$creadList
  :: forall a b c d e f g.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f,
      GHC.Read.Read g) =>
     Text.ParserCombinators.ReadP.ReadS [(a, b, c, d, e, f, g)]
[GblId,
 Arity=7,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XGg
           $dRead1_s3XGh
           $dRead2_s3XGi
           $dRead3_s3XGj
           $dRead4_s3XGk
           $dRead5_s3XGl
           $dRead6_s3XGm]
        let {
          sat_s3XGo [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 [(a_X3KTQ, b_X3KTS, c_X3KTU, d_X3KTW, e_X3KTY, f_X3KU0, g_X3KU2)]
          [LclId] =
              [$dRead_s3XGg
               $dRead1_s3XGh
               $dRead2_s3XGi
               $dRead3_s3XGj
               $dRead4_s3XGk
               $dRead5_s3XGl
               $dRead6_s3XGm] \u []
                  let {
                    sat_s3XGn [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec
                           (a_X3KTQ, b_X3KTS, c_X3KTU, d_X3KTW, e_X3KTY, f_X3KU0, g_X3KU2)
                    [LclId] =
                        [$dRead_s3XGg
                         $dRead1_s3XGh
                         $dRead2_s3XGi
                         $dRead3_s3XGj
                         $dRead4_s3XGk
                         $dRead5_s3XGl
                         $dRead6_s3XGm] \r [eta_B2 eta_B1]
                            GHC.Read.$fRead(,,,,,,)1
                                $dRead_s3XGg
                                $dRead1_s3XGh
                                $dRead2_s3XGi
                                $dRead3_s3XGj
                                $dRead4_s3XGk
                                $dRead5_s3XGl
                                $dRead6_s3XGm
                                eta_B2
                                eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s3XGn
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XGo;

GHC.Read.$fRead(,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f,
      GHC.Read.Read g) =>
     GHC.Read.Read (a, b, c, d, e, f, g)
[GblId[DFunId],
 Arity=7,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>m] =
    [] \r [$dRead_s3XGp
           $dRead1_s3XGq
           $dRead2_s3XGr
           $dRead3_s3XGs
           $dRead4_s3XGt
           $dRead5_s3XGu
           $dRead6_s3XGv]
        let {
          sat_s3XGz [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 [(a_X3KTR, b_X3KTT, c_X3KTV, d_X3KTX, e_X3KTZ, f_X3KU1, g_X3KU3)]
          [LclId] =
              [$dRead_s3XGp
               $dRead1_s3XGq
               $dRead2_s3XGr
               $dRead3_s3XGs
               $dRead4_s3XGt
               $dRead5_s3XGu
               $dRead6_s3XGv] \u []
                  GHC.Read.$fRead(,,,,,,)_$creadListPrec
                      $dRead_s3XGp
                      $dRead1_s3XGq
                      $dRead2_s3XGr
                      $dRead3_s3XGs
                      $dRead4_s3XGt
                      $dRead5_s3XGu
                      $dRead6_s3XGv; } in
        let {
          sat_s3XGy [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KTR, b_X3KTT, c_X3KTV, d_X3KTX, e_X3KTZ, f_X3KU1, g_X3KU3)
          [LclId] =
              [$dRead_s3XGp
               $dRead1_s3XGq
               $dRead2_s3XGr
               $dRead3_s3XGs
               $dRead4_s3XGt
               $dRead5_s3XGu
               $dRead6_s3XGv] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,,)1
                      $dRead_s3XGp
                      $dRead1_s3XGq
                      $dRead2_s3XGr
                      $dRead3_s3XGs
                      $dRead4_s3XGt
                      $dRead5_s3XGu
                      $dRead6_s3XGv
                      eta_B2
                      eta_B1; } in
        let {
          sat_s3XGx [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS
                 [(a_X3KTR, b_X3KTT, c_X3KTV, d_X3KTX, e_X3KTZ, f_X3KU1, g_X3KU3)]
          [LclId] =
              [$dRead_s3XGp
               $dRead1_s3XGq
               $dRead2_s3XGr
               $dRead3_s3XGs
               $dRead4_s3XGt
               $dRead5_s3XGu
               $dRead6_s3XGv] \u []
                  GHC.Read.$fRead(,,,,,,)_$creadList
                      $dRead_s3XGp
                      $dRead1_s3XGq
                      $dRead2_s3XGr
                      $dRead3_s3XGs
                      $dRead4_s3XGt
                      $dRead5_s3XGu
                      $dRead6_s3XGv; } in
        let {
          sat_s3XGw [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS
                    (a_X3KTR, b_X3KTT, c_X3KTV, d_X3KTX, e_X3KTZ, f_X3KU1, g_X3KU3)
          [LclId] =
              [$dRead_s3XGp
               $dRead1_s3XGq
               $dRead2_s3XGr
               $dRead3_s3XGs
               $dRead4_s3XGt
               $dRead5_s3XGu
               $dRead6_s3XGv] \r [eta_B1]
                  GHC.Read.$fRead(,,,,,,)_$creadsPrec
                      $dRead_s3XGp
                      $dRead1_s3XGq
                      $dRead2_s3XGr
                      $dRead3_s3XGs
                      $dRead4_s3XGt
                      $dRead5_s3XGu
                      $dRead6_s3XGv
                      eta_B1;
        } in  GHC.Read.C:Read [sat_s3XGw sat_s3XGx sat_s3XGy sat_s3XGz];

GHC.Read.$fRead(,,,,,)_$creadListPrec
  :: forall a b c d e f.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f) =>
     Text.ParserCombinators.ReadPrec.ReadPrec [(a, b, c, d, e, f)]
[GblId,
 Arity=6,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XGA
           $dRead1_s3XGB
           $dRead2_s3XGC
           $dRead3_s3XGD
           $dRead4_s3XGE
           $dRead5_s3XGF]
        let {
          sat_s3XGG [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KVc, b_X3KVe, c_X3KVg, d_X3KVi, e_X3KVk, f_X3KVm)
          [LclId] =
              [$dRead_s3XGA
               $dRead1_s3XGB
               $dRead2_s3XGC
               $dRead3_s3XGD
               $dRead4_s3XGE
               $dRead5_s3XGF] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,)1
                      $dRead_s3XGA
                      $dRead1_s3XGB
                      $dRead2_s3XGC
                      $dRead3_s3XGD
                      $dRead4_s3XGE
                      $dRead5_s3XGF
                      eta_B2
                      eta_B1;
        } in  GHC.Read.list sat_s3XGG;

GHC.Read.$fRead(,,,,,)_$creadsPrec
  :: forall a b c d e f.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f) =>
     GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS (a, b, c, d, e, f)
[GblId,
 Arity=7,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XGH
           $dRead1_s3XGI
           $dRead2_s3XGJ
           $dRead3_s3XGK
           $dRead4_s3XGL
           $dRead5_s3XGM
           n_s3XGN]
        let {
          sat_s3XGO [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 (a_X3KVd, b_X3KVf, c_X3KVh, d_X3KVj, e_X3KVl, f_X3KVn)
          [LclId] =
              [$dRead_s3XGH
               $dRead1_s3XGI
               $dRead2_s3XGJ
               $dRead3_s3XGK
               $dRead4_s3XGL
               $dRead5_s3XGM
               n_s3XGN] \u []
                  GHC.Read.$fRead(,,,,,)1
                      $dRead_s3XGH
                      $dRead1_s3XGI
                      $dRead2_s3XGJ
                      $dRead3_s3XGK
                      $dRead4_s3XGL
                      $dRead5_s3XGM
                      n_s3XGN
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XGO;

GHC.Read.$fRead(,,,,,)_$creadList
  :: forall a b c d e f.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f) =>
     Text.ParserCombinators.ReadP.ReadS [(a, b, c, d, e, f)]
[GblId,
 Arity=6,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XGP
           $dRead1_s3XGQ
           $dRead2_s3XGR
           $dRead3_s3XGS
           $dRead4_s3XGT
           $dRead5_s3XGU]
        let {
          sat_s3XGW [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 [(a_X3KVe, b_X3KVg, c_X3KVi, d_X3KVk, e_X3KVm, f_X3KVo)]
          [LclId] =
              [$dRead_s3XGP
               $dRead1_s3XGQ
               $dRead2_s3XGR
               $dRead3_s3XGS
               $dRead4_s3XGT
               $dRead5_s3XGU] \u []
                  let {
                    sat_s3XGV [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec
                           (a_X3KVe, b_X3KVg, c_X3KVi, d_X3KVk, e_X3KVm, f_X3KVo)
                    [LclId] =
                        [$dRead_s3XGP
                         $dRead1_s3XGQ
                         $dRead2_s3XGR
                         $dRead3_s3XGS
                         $dRead4_s3XGT
                         $dRead5_s3XGU] \r [eta_B2 eta_B1]
                            GHC.Read.$fRead(,,,,,)1
                                $dRead_s3XGP
                                $dRead1_s3XGQ
                                $dRead2_s3XGR
                                $dRead3_s3XGS
                                $dRead4_s3XGT
                                $dRead5_s3XGU
                                eta_B2
                                eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s3XGV
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XGW;

GHC.Read.$fRead(,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f) =>
     GHC.Read.Read (a, b, c, d, e, f)
[GblId[DFunId],
 Arity=6,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>m] =
    [] \r [$dRead_s3XGX
           $dRead1_s3XGY
           $dRead2_s3XGZ
           $dRead3_s3XH0
           $dRead4_s3XH1
           $dRead5_s3XH2]
        let {
          sat_s3XH6 [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 [(a_X3KVf, b_X3KVh, c_X3KVj, d_X3KVl, e_X3KVn, f_X3KVp)]
          [LclId] =
              [$dRead_s3XGX
               $dRead1_s3XGY
               $dRead2_s3XGZ
               $dRead3_s3XH0
               $dRead4_s3XH1
               $dRead5_s3XH2] \u []
                  GHC.Read.$fRead(,,,,,)_$creadListPrec
                      $dRead_s3XGX
                      $dRead1_s3XGY
                      $dRead2_s3XGZ
                      $dRead3_s3XH0
                      $dRead4_s3XH1
                      $dRead5_s3XH2; } in
        let {
          sat_s3XH5 [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KVf, b_X3KVh, c_X3KVj, d_X3KVl, e_X3KVn, f_X3KVp)
          [LclId] =
              [$dRead_s3XGX
               $dRead1_s3XGY
               $dRead2_s3XGZ
               $dRead3_s3XH0
               $dRead4_s3XH1
               $dRead5_s3XH2] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,)1
                      $dRead_s3XGX
                      $dRead1_s3XGY
                      $dRead2_s3XGZ
                      $dRead3_s3XH0
                      $dRead4_s3XH1
                      $dRead5_s3XH2
                      eta_B2
                      eta_B1; } in
        let {
          sat_s3XH4 [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS
                 [(a_X3KVf, b_X3KVh, c_X3KVj, d_X3KVl, e_X3KVn, f_X3KVp)]
          [LclId] =
              [$dRead_s3XGX
               $dRead1_s3XGY
               $dRead2_s3XGZ
               $dRead3_s3XH0
               $dRead4_s3XH1
               $dRead5_s3XH2] \u []
                  GHC.Read.$fRead(,,,,,)_$creadList
                      $dRead_s3XGX
                      $dRead1_s3XGY
                      $dRead2_s3XGZ
                      $dRead3_s3XH0
                      $dRead4_s3XH1
                      $dRead5_s3XH2; } in
        let {
          sat_s3XH3 [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS
                    (a_X3KVf, b_X3KVh, c_X3KVj, d_X3KVl, e_X3KVn, f_X3KVp)
          [LclId] =
              [$dRead_s3XGX
               $dRead1_s3XGY
               $dRead2_s3XGZ
               $dRead3_s3XH0
               $dRead4_s3XH1
               $dRead5_s3XH2] \r [eta_B1]
                  GHC.Read.$fRead(,,,,,)_$creadsPrec
                      $dRead_s3XGX
                      $dRead1_s3XGY
                      $dRead2_s3XGZ
                      $dRead3_s3XH0
                      $dRead4_s3XH1
                      $dRead5_s3XH2
                      eta_B1;
        } in  GHC.Read.C:Read [sat_s3XH3 sat_s3XH4 sat_s3XH5 sat_s3XH6];

GHC.Read.$fRead(,,,,)_$creadListPrec
  :: forall a b c d e.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e) =>
     Text.ParserCombinators.ReadPrec.ReadPrec [(a, b, c, d, e)]
[GblId,
 Arity=5,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XH7
           $dRead1_s3XH8
           $dRead2_s3XH9
           $dRead3_s3XHa
           $dRead4_s3XHb]
        let {
          sat_s3XHc [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KWn, b_X3KWp, c_X3KWr, d_X3KWt, e_X3KWv)
          [LclId] =
              [$dRead_s3XH7
               $dRead1_s3XH8
               $dRead2_s3XH9
               $dRead3_s3XHa
               $dRead4_s3XHb] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,)1
                      $dRead_s3XH7
                      $dRead1_s3XH8
                      $dRead2_s3XH9
                      $dRead3_s3XHa
                      $dRead4_s3XHb
                      eta_B2
                      eta_B1;
        } in  GHC.Read.list sat_s3XHc;

GHC.Read.$fRead(,,,,)_$creadsPrec
  :: forall a b c d e.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e) =>
     GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS (a, b, c, d, e)
[GblId,
 Arity=6,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XHd
           $dRead1_s3XHe
           $dRead2_s3XHf
           $dRead3_s3XHg
           $dRead4_s3XHh
           n_s3XHi]
        let {
          sat_s3XHj [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 (a_X3KWo, b_X3KWq, c_X3KWs, d_X3KWu, e_X3KWw)
          [LclId] =
              [$dRead_s3XHd
               $dRead1_s3XHe
               $dRead2_s3XHf
               $dRead3_s3XHg
               $dRead4_s3XHh
               n_s3XHi] \u []
                  GHC.Read.$fRead(,,,,)1
                      $dRead_s3XHd
                      $dRead1_s3XHe
                      $dRead2_s3XHf
                      $dRead3_s3XHg
                      $dRead4_s3XHh
                      n_s3XHi
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XHj;

GHC.Read.$fRead(,,,,)_$creadList
  :: forall a b c d e.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e) =>
     Text.ParserCombinators.ReadP.ReadS [(a, b, c, d, e)]
[GblId,
 Arity=5,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XHk
           $dRead1_s3XHl
           $dRead2_s3XHm
           $dRead3_s3XHn
           $dRead4_s3XHo]
        let {
          sat_s3XHq [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 [(a_X3KWp, b_X3KWr, c_X3KWt, d_X3KWv, e_X3KWx)]
          [LclId] =
              [$dRead_s3XHk
               $dRead1_s3XHl
               $dRead2_s3XHm
               $dRead3_s3XHn
               $dRead4_s3XHo] \u []
                  let {
                    sat_s3XHp [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec
                           (a_X3KWp, b_X3KWr, c_X3KWt, d_X3KWv, e_X3KWx)
                    [LclId] =
                        [$dRead_s3XHk
                         $dRead1_s3XHl
                         $dRead2_s3XHm
                         $dRead3_s3XHn
                         $dRead4_s3XHo] \r [eta_B2 eta_B1]
                            GHC.Read.$fRead(,,,,)1
                                $dRead_s3XHk
                                $dRead1_s3XHl
                                $dRead2_s3XHm
                                $dRead3_s3XHn
                                $dRead4_s3XHo
                                eta_B2
                                eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s3XHp
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XHq;

GHC.Read.$fRead(,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e) =>
     GHC.Read.Read (a, b, c, d, e)
[GblId[DFunId],
 Arity=5,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>m] =
    [] \r [$dRead_s3XHr
           $dRead1_s3XHs
           $dRead2_s3XHt
           $dRead3_s3XHu
           $dRead4_s3XHv]
        let {
          sat_s3XHz [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 [(a_X3KWq, b_X3KWs, c_X3KWu, d_X3KWw, e_X3KWy)]
          [LclId] =
              [$dRead_s3XHr
               $dRead1_s3XHs
               $dRead2_s3XHt
               $dRead3_s3XHu
               $dRead4_s3XHv] \u []
                  GHC.Read.$fRead(,,,,)_$creadListPrec
                      $dRead_s3XHr
                      $dRead1_s3XHs
                      $dRead2_s3XHt
                      $dRead3_s3XHu
                      $dRead4_s3XHv; } in
        let {
          sat_s3XHy [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KWq, b_X3KWs, c_X3KWu, d_X3KWw, e_X3KWy)
          [LclId] =
              [$dRead_s3XHr
               $dRead1_s3XHs
               $dRead2_s3XHt
               $dRead3_s3XHu
               $dRead4_s3XHv] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,)1
                      $dRead_s3XHr
                      $dRead1_s3XHs
                      $dRead2_s3XHt
                      $dRead3_s3XHu
                      $dRead4_s3XHv
                      eta_B2
                      eta_B1; } in
        let {
          sat_s3XHx [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS
                 [(a_X3KWq, b_X3KWs, c_X3KWu, d_X3KWw, e_X3KWy)]
          [LclId] =
              [$dRead_s3XHr
               $dRead1_s3XHs
               $dRead2_s3XHt
               $dRead3_s3XHu
               $dRead4_s3XHv] \u []
                  GHC.Read.$fRead(,,,,)_$creadList
                      $dRead_s3XHr
                      $dRead1_s3XHs
                      $dRead2_s3XHt
                      $dRead3_s3XHu
                      $dRead4_s3XHv; } in
        let {
          sat_s3XHw [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS
                    (a_X3KWq, b_X3KWs, c_X3KWu, d_X3KWw, e_X3KWy)
          [LclId] =
              [$dRead_s3XHr
               $dRead1_s3XHs
               $dRead2_s3XHt
               $dRead3_s3XHu
               $dRead4_s3XHv] \r [eta_B1]
                  GHC.Read.$fRead(,,,,)_$creadsPrec
                      $dRead_s3XHr
                      $dRead1_s3XHs
                      $dRead2_s3XHt
                      $dRead3_s3XHu
                      $dRead4_s3XHv
                      eta_B1;
        } in  GHC.Read.C:Read [sat_s3XHw sat_s3XHx sat_s3XHy sat_s3XHz];

GHC.Read.$fRead(,,,)_$creadListPrec
  :: forall a b c d.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d) =>
     Text.ParserCombinators.ReadPrec.ReadPrec [(a, b, c, d)]
[GblId,
 Arity=4,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XHA $dRead1_s3XHB $dRead2_s3XHC $dRead3_s3XHD]
        let {
          sat_s3XHE [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KXt, b_X3KXv, c_X3KXx, d_X3KXz)
          [LclId] =
              [$dRead_s3XHA $dRead1_s3XHB $dRead2_s3XHC $dRead3_s3XHD] \r [eta_B2
                                                                           eta_B1]
                  GHC.Read.$fRead(,,,)1
                      $dRead_s3XHA
                      $dRead1_s3XHB
                      $dRead2_s3XHC
                      $dRead3_s3XHD
                      eta_B2
                      eta_B1;
        } in  GHC.Read.list sat_s3XHE;

GHC.Read.$fRead(,,,)_$creadsPrec
  :: forall a b c d.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d) =>
     GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS (a, b, c, d)
[GblId,
 Arity=5,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XHF
           $dRead1_s3XHG
           $dRead2_s3XHH
           $dRead3_s3XHI
           n_s3XHJ]
        let {
          sat_s3XHK [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 (a_X3KXu, b_X3KXw, c_X3KXy, d_X3KXA)
          [LclId] =
              [$dRead_s3XHF
               $dRead1_s3XHG
               $dRead2_s3XHH
               $dRead3_s3XHI
               n_s3XHJ] \u []
                  GHC.Read.$fRead(,,,)1
                      $dRead_s3XHF
                      $dRead1_s3XHG
                      $dRead2_s3XHH
                      $dRead3_s3XHI
                      n_s3XHJ
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XHK;

GHC.Read.$fRead(,,,)_$creadList
  :: forall a b c d.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d) =>
     Text.ParserCombinators.ReadP.ReadS [(a, b, c, d)]
[GblId,
 Arity=4,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XHL $dRead1_s3XHM $dRead2_s3XHN $dRead3_s3XHO]
        let {
          sat_s3XHQ [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 [(a_X3KXv, b_X3KXx, c_X3KXz, d_X3KXB)]
          [LclId] =
              [$dRead_s3XHL $dRead1_s3XHM $dRead2_s3XHN $dRead3_s3XHO] \u []
                  let {
                    sat_s3XHP [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec
                           (a_X3KXv, b_X3KXx, c_X3KXz, d_X3KXB)
                    [LclId] =
                        [$dRead_s3XHL $dRead1_s3XHM $dRead2_s3XHN $dRead3_s3XHO] \r [eta_B2
                                                                                     eta_B1]
                            GHC.Read.$fRead(,,,)1
                                $dRead_s3XHL
                                $dRead1_s3XHM
                                $dRead2_s3XHN
                                $dRead3_s3XHO
                                eta_B2
                                eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s3XHP
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XHQ;

GHC.Read.$fRead(,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d) =>
     GHC.Read.Read (a, b, c, d)
[GblId[DFunId],
 Arity=4,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>m] =
    [] \r [$dRead_s3XHR $dRead1_s3XHS $dRead2_s3XHT $dRead3_s3XHU]
        let {
          sat_s3XHY [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 [(a_X3KXw, b_X3KXy, c_X3KXA, d_X3KXC)]
          [LclId] =
              [$dRead_s3XHR $dRead1_s3XHS $dRead2_s3XHT $dRead3_s3XHU] \u []
                  GHC.Read.$fRead(,,,)_$creadListPrec
                      $dRead_s3XHR $dRead1_s3XHS $dRead2_s3XHT $dRead3_s3XHU; } in
        let {
          sat_s3XHX [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KXw, b_X3KXy, c_X3KXA, d_X3KXC)
          [LclId] =
              [$dRead_s3XHR $dRead1_s3XHS $dRead2_s3XHT $dRead3_s3XHU] \r [eta_B2
                                                                           eta_B1]
                  GHC.Read.$fRead(,,,)1
                      $dRead_s3XHR
                      $dRead1_s3XHS
                      $dRead2_s3XHT
                      $dRead3_s3XHU
                      eta_B2
                      eta_B1; } in
        let {
          sat_s3XHW [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS
                 [(a_X3KXw, b_X3KXy, c_X3KXA, d_X3KXC)]
          [LclId] =
              [$dRead_s3XHR $dRead1_s3XHS $dRead2_s3XHT $dRead3_s3XHU] \u []
                  GHC.Read.$fRead(,,,)_$creadList
                      $dRead_s3XHR $dRead1_s3XHS $dRead2_s3XHT $dRead3_s3XHU; } in
        let {
          sat_s3XHV [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS
                    (a_X3KXw, b_X3KXy, c_X3KXA, d_X3KXC)
          [LclId] =
              [$dRead_s3XHR
               $dRead1_s3XHS
               $dRead2_s3XHT
               $dRead3_s3XHU] \r [eta_B1]
                  GHC.Read.$fRead(,,,)_$creadsPrec
                      $dRead_s3XHR $dRead1_s3XHS $dRead2_s3XHT $dRead3_s3XHU eta_B1;
        } in  GHC.Read.C:Read [sat_s3XHV sat_s3XHW sat_s3XHX sat_s3XHY];

GHC.Read.$fRead(,,)_$creadListPrec
  :: forall a b c.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c) =>
     Text.ParserCombinators.ReadPrec.ReadPrec [(a, b, c)]
[GblId,
 Arity=3,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XHZ $dRead1_s3XI0 $dRead2_s3XI1]
        let {
          sat_s3XI2 [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KYb, b_X3KYd, c_X3KYf)
          [LclId] =
              [$dRead_s3XHZ $dRead1_s3XI0 $dRead2_s3XI1] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,)1
                      $dRead_s3XHZ $dRead1_s3XI0 $dRead2_s3XI1 eta_B2 eta_B1;
        } in  GHC.Read.list sat_s3XI2;

GHC.Read.$fRead(,,)_$creadsPrec
  :: forall a b c.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c) =>
     GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS (a, b, c)
[GblId,
 Arity=4,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XI3 $dRead1_s3XI4 $dRead2_s3XI5 n_s3XI6]
        let {
          sat_s3XI7 [Occ=Once]
            :: Text.ParserCombinators.ReadP.P (a_X3KYc, b_X3KYe, c_X3KYg)
          [LclId] =
              [$dRead_s3XI3 $dRead1_s3XI4 $dRead2_s3XI5 n_s3XI6] \u []
                  GHC.Read.$fRead(,,)1
                      $dRead_s3XI3
                      $dRead1_s3XI4
                      $dRead2_s3XI5
                      n_s3XI6
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XI7;

GHC.Read.$fRead(,,)_$creadList
  :: forall a b c.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c) =>
     Text.ParserCombinators.ReadP.ReadS [(a, b, c)]
[GblId,
 Arity=3,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XI8 $dRead1_s3XI9 $dRead2_s3XIa]
        let {
          sat_s3XIc [Occ=Once]
            :: Text.ParserCombinators.ReadP.P [(a_X3KYd, b_X3KYf, c_X3KYh)]
          [LclId] =
              [$dRead_s3XI8 $dRead1_s3XI9 $dRead2_s3XIa] \u []
                  let {
                    sat_s3XIb [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec
                           (a_X3KYd, b_X3KYf, c_X3KYh)
                    [LclId] =
                        [$dRead_s3XI8 $dRead1_s3XI9 $dRead2_s3XIa] \r [eta_B2 eta_B1]
                            GHC.Read.$fRead(,,)1
                                $dRead_s3XI8 $dRead1_s3XI9 $dRead2_s3XIa eta_B2 eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s3XIb
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XIc;

GHC.Read.$fRead(,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c) =>
     GHC.Read.Read (a, b, c)
[GblId[DFunId],
 Arity=3,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>m] =
    [] \r [$dRead_s3XId $dRead1_s3XIe $dRead2_s3XIf]
        let {
          sat_s3XIj [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 [(a_X3KYe, b_X3KYg, c_X3KYi)]
          [LclId] =
              [$dRead_s3XId $dRead1_s3XIe $dRead2_s3XIf] \u []
                  GHC.Read.$fRead(,,)_$creadListPrec
                      $dRead_s3XId $dRead1_s3XIe $dRead2_s3XIf; } in
        let {
          sat_s3XIi [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KYe, b_X3KYg, c_X3KYi)
          [LclId] =
              [$dRead_s3XId $dRead1_s3XIe $dRead2_s3XIf] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,)1
                      $dRead_s3XId $dRead1_s3XIe $dRead2_s3XIf eta_B2 eta_B1; } in
        let {
          sat_s3XIh [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS [(a_X3KYe, b_X3KYg, c_X3KYi)]
          [LclId] =
              [$dRead_s3XId $dRead1_s3XIe $dRead2_s3XIf] \u []
                  GHC.Read.$fRead(,,)_$creadList
                      $dRead_s3XId $dRead1_s3XIe $dRead2_s3XIf; } in
        let {
          sat_s3XIg [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS (a_X3KYe, b_X3KYg, c_X3KYi)
          [LclId] =
              [$dRead_s3XId $dRead1_s3XIe $dRead2_s3XIf] \r [eta_B1]
                  GHC.Read.$fRead(,,)_$creadsPrec
                      $dRead_s3XId $dRead1_s3XIe $dRead2_s3XIf eta_B1;
        } in  GHC.Read.C:Read [sat_s3XIg sat_s3XIh sat_s3XIi sat_s3XIj];

GHC.Read.$fRead(,)_$creadListPrec
  :: forall a b.
     (GHC.Read.Read a, GHC.Read.Read b) =>
     Text.ParserCombinators.ReadPrec.ReadPrec [(a, b)]
[GblId,
 Arity=2,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XIk $dRead1_s3XIl]
        let {
          sat_s3XIm [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec (a_X3KZ7, b_X3KZ9)
          [LclId] =
              [$dRead_s3XIk $dRead1_s3XIl] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,)1 $dRead_s3XIk $dRead1_s3XIl eta_B2 eta_B1;
        } in  GHC.Read.list sat_s3XIm;

GHC.Read.$fRead(,)_$creadsPrec
  :: forall a b.
     (GHC.Read.Read a, GHC.Read.Read b) =>
     GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS (a, b)
[GblId,
 Arity=3,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XIn $dRead1_s3XIo n_s3XIp]
        let {
          sat_s3XIq [Occ=Once]
            :: Text.ParserCombinators.ReadP.P (a_X3KZ8, b_X3KZa)
          [LclId] =
              [$dRead_s3XIn $dRead1_s3XIo n_s3XIp] \u []
                  GHC.Read.$fRead(,)1
                      $dRead_s3XIn
                      $dRead1_s3XIo
                      n_s3XIp
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XIq;

GHC.Read.$fRead(,)_$creadList
  :: forall a b.
     (GHC.Read.Read a, GHC.Read.Read b) =>
     Text.ParserCombinators.ReadP.ReadS [(a, b)]
[GblId,
 Arity=2,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XIr $dRead1_s3XIs]
        let {
          sat_s3XIu [Occ=Once]
            :: Text.ParserCombinators.ReadP.P [(a_X3KZ9, b_X3KZb)]
          [LclId] =
              [$dRead_s3XIr $dRead1_s3XIs] \u []
                  let {
                    sat_s3XIt [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec (a_X3KZ9, b_X3KZb)
                    [LclId] =
                        [$dRead_s3XIr $dRead1_s3XIs] \r [eta_B2 eta_B1]
                            GHC.Read.$fRead(,)1 $dRead_s3XIr $dRead1_s3XIs eta_B2 eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s3XIt
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XIu;

GHC.Read.$fRead(,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b.
     (GHC.Read.Read a, GHC.Read.Read b) =>
     GHC.Read.Read (a, b)
[GblId[DFunId],
 Arity=2,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>m] =
    [] \r [$dRead_s3XIv $dRead1_s3XIw]
        let {
          sat_s3XIA [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec [(a_X3KZa, b_X3KZc)]
          [LclId] =
              [$dRead_s3XIv $dRead1_s3XIw] \u []
                  GHC.Read.$fRead(,)_$creadListPrec $dRead_s3XIv $dRead1_s3XIw; } in
        let {
          sat_s3XIz [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec (a_X3KZa, b_X3KZc)
          [LclId] =
              [$dRead_s3XIv $dRead1_s3XIw] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,)1 $dRead_s3XIv $dRead1_s3XIw eta_B2 eta_B1; } in
        let {
          sat_s3XIy [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS [(a_X3KZa, b_X3KZc)]
          [LclId] =
              [$dRead_s3XIv $dRead1_s3XIw] \u []
                  GHC.Read.$fRead(,)_$creadList $dRead_s3XIv $dRead1_s3XIw; } in
        let {
          sat_s3XIx [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS (a_X3KZa, b_X3KZc)
          [LclId] =
              [$dRead_s3XIv $dRead1_s3XIw] \r [eta_B1]
                  GHC.Read.$fRead(,)_$creadsPrec $dRead_s3XIv $dRead1_s3XIw eta_B1;
        } in  GHC.Read.C:Read [sat_s3XIx sat_s3XIy sat_s3XIz sat_s3XIA];

GHC.Read.$fReadLexeme_$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec [Text.Read.Lex.Lexeme]
[GblId] =
    [] \u [] GHC.Read.list GHC.Read.$fReadLexeme1;

GHC.Read.$fReadLexeme_lvl117
  :: Text.ParserCombinators.ReadP.P Text.Read.Lex.Lexeme
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE Text.ParserCombinators.ReadP.Result! [Text.Read.Lex.EOF
                                                        Text.ParserCombinators.ReadP.Fail];

GHC.Read.$fReadLexeme8
  :: GHC.Base.String
     -> Text.ParserCombinators.ReadP.P Text.Read.Lex.Lexeme
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [a3_s3XIB]
        case a3_s3XIB of {
          [] -> GHC.Read.$fReadLexeme_lvl117;
          : _ [Occ=Dead] _ [Occ=Dead] ->
              Text.ParserCombinators.ReadP.Fail [];
        };

GHC.Read.$fReadLexeme7
  :: Text.ParserCombinators.ReadP.P Text.Read.Lex.Lexeme
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE Text.ParserCombinators.ReadP.Look! [GHC.Read.$fReadLexeme8];

GHC.Read.$fReadLexeme6
  :: Text.ParserCombinators.ReadP.P Text.Read.Lex.Lexeme
[GblId] =
    [] \u []
        Text.Read.Lex.expect2
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fReadLexeme_lvl116
  :: Text.ParserCombinators.ReadP.P Text.Read.Lex.Lexeme
[GblId] =
    [] \u []
        Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
            GHC.Read.$fReadLexeme7 GHC.Read.$fReadLexeme6;

GHC.Read.$fReadLexeme_k
  :: () -> Text.ParserCombinators.ReadP.P Text.Read.Lex.Lexeme
[GblId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
    [] \r [a3_s3XIF] GHC.Read.$fReadLexeme_lvl116;

GHC.Read.$fReadLexeme5
  :: GHC.Base.String
     -> Text.ParserCombinators.ReadP.P Text.Read.Lex.Lexeme
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [a_s3XIG]
        Text.ParserCombinators.ReadP.skipSpaces2
            a_s3XIG GHC.Read.$fReadLexeme_k;

GHC.Read.$fReadLexeme4
  :: Text.ParserCombinators.ReadP.P Text.Read.Lex.Lexeme
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE Text.ParserCombinators.ReadP.Look! [GHC.Read.$fReadLexeme5];

GHC.Read.$fReadLexeme3
  :: Text.ParserCombinators.ReadP.ReadS Text.Read.Lex.Lexeme
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.$fReadLexeme4 eta_B1;

GHC.Read.$fReadLexeme_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS Text.Read.Lex.Lexeme
[GblId, Arity=2, Str=<L,A>, Unf=OtherCon []] =
    [] \r [n_s3XIH eta_B1] GHC.Read.$fReadLexeme3 eta_B1;

GHC.Read.$fReadLexeme2
  :: Text.ParserCombinators.ReadP.P [Text.Read.Lex.Lexeme]
[GblId] =
    [] \u []
        GHC.Read.$fReadLexeme_$creadListPrec
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fReadLexeme_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [Text.Read.Lex.Lexeme]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.$fReadLexeme2 eta_B1;

GHC.Read.$fReadLexeme [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read Text.Read.Lex.Lexeme
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fReadLexeme_$creadsPrec
                                    GHC.Read.$fReadLexeme_$creadList
                                    GHC.Read.$fReadLexeme1
                                    GHC.Read.$fReadLexeme_$creadListPrec];

GHC.Read.$dmreadList
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadP.ReadS [a]
[GblId, Arity=1, Str=<L,1*U(A,A,1*C1(C(U)),A)>, Unf=OtherCon []] =
    [] \r [$dRead_s3XII]
        let {
          sat_s3XIK [Occ=Once] :: Text.ParserCombinators.ReadP.P [a_X3K8l]
          [LclId] =
              [$dRead_s3XII] \u []
                  let {
                    sat_s3XIJ [Occ=Once, Dmd=<L,1*C1(C(U))>]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec a_X3K8l
                    [LclId] =
                        [$dRead_s3XII] \s [] GHC.Read.readPrec $dRead_s3XII;
                  } in 
                    GHC.Read.list
                        sat_s3XIJ
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XIK;

GHC.Read.$fReadInteger_$sreadNumber
  :: (Text.Read.Lex.Lexeme
      -> Text.ParserCombinators.ReadPrec.ReadPrec
           GHC.Integer.Type.Integer)
     -> Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Integer.Type.Integer -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=3, Str=<L,C(C1(C1(U)))><L,U><L,U>, Unf=OtherCon []] =
    [] \r [convert_s3XIL eta_s3XIM eta1_s3XIN]
        let {
          sat_s3XJz [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 GHC.Integer.Type.Integer
          [LclId] =
              [convert_s3XIL] \r [n_s3XIO k1_s3XIP]
                  let {
                    lvl116_s3XIQ [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId] =
                        [convert_s3XIL n_s3XIO k1_s3XIP] \u []
                            let {
                              lvl2_s3XIR [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [convert_s3XIL n_s3XIO k1_s3XIP] \u []
                                      let {
                                        lvl3_s3XIS
                                          :: GHC.Integer.Type.Integer
                                             -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId, Arity=1, Str=<L,1*U>, Unf=OtherCon []] =
                                            [k1_s3XIP] \r [a1_s3XIT]
                                                let {
                                                  sat_s3XIU [Occ=Once] :: GHC.Integer.Type.Integer
                                                  [LclId] =
                                                      [a1_s3XIT] \u []
                                                          GHC.Integer.Type.negateInteger a1_s3XIT;
                                                } in  k1_s3XIP sat_s3XIU; } in
                                      let {
                                        lvl117_s3XIV [Occ=OnceL]
                                          :: Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            [convert_s3XIL n_s3XIO lvl3_s3XIS] \u []
                                                convert_s3XIL
                                                    Text.Read.Lex.EOF n_s3XIO lvl3_s3XIS; } in
                                      let {
                                        sat_s3XJ4 [Occ=Once]
                                          :: Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            [convert_s3XIL n_s3XIO lvl3_s3XIS] \u []
                                                let {
                                                  sat_s3XJ3 [Occ=Once]
                                                    :: Text.Read.Lex.Lexeme
                                                       -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                                  [LclId] =
                                                      [convert_s3XIL
                                                       n_s3XIO
                                                       lvl3_s3XIS] \r [a1_s3XJ2]
                                                          convert_s3XIL a1_s3XJ2 n_s3XIO lvl3_s3XIS;
                                                } in  Text.Read.Lex.expect2 sat_s3XJ3; } in
                                      let {
                                        sat_s3XJ0 [Occ=OnceL]
                                          :: GHC.Base.String
                                             -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            [lvl117_s3XIV] \r [a3_s3XIW]
                                                case a3_s3XIW of {
                                                  [] -> lvl117_s3XIV;
                                                  : _ [Occ=Dead] _ [Occ=Dead] ->
                                                      Text.ParserCombinators.ReadP.Fail [];
                                                }; } in
                                      let {
                                        sat_s3XJ1 [Occ=Once]
                                          :: Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            CCCS Text.ParserCombinators.ReadP.Look! [sat_s3XJ0];
                                      } in 
                                        Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                            sat_s3XJ1 sat_s3XJ4; } in
                            let {
                              k_s3XJ5 [Occ=OnceL, Dmd=<L,C(U)>]
                                :: () -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
                                  [lvl2_s3XIR] \r [a3_s3XJ6] lvl2_s3XIR; } in
                            let {
                              lvl3_s3XJ7 [Occ=OnceL]
                                :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                  [k_s3XJ5] \r [a_s3XJ8]
                                      Text.ParserCombinators.ReadP.skipSpaces2 a_s3XJ8 k_s3XJ5; } in
                            let {
                              lvl4_s3XJ9 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Unf=OtherCon []] =
                                  CCCS Text.ParserCombinators.ReadP.Look! [lvl3_s3XJ7]; } in
                            let {
                              w2_s3XJa
                                :: Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                  [convert_s3XIL n_s3XIO k1_s3XIP lvl4_s3XJ9] \r [a1_s3XJb]
                                      case a1_s3XJb of wild_s3XJc {
                                        __DEFAULT -> convert_s3XIL wild_s3XJc n_s3XIO k1_s3XIP;
                                        Text.Read.Lex.Symbol ds_s3XJd [Occ=Once!] ->
                                            case ds_s3XJd of {
                                              [] -> convert_s3XIL wild_s3XJc n_s3XIO k1_s3XIP;
                                              : ds1_s3XJf [Occ=Once!] ds2_s3XJg [Occ=Once!] ->
                                                  case ds1_s3XJf of {
                                                    GHC.Types.C# ds3_s3XJi [Occ=Once!] ->
                                                        case ds3_s3XJi of {
                                                          __DEFAULT ->
                                                              convert_s3XIL
                                                                  wild_s3XJc n_s3XIO k1_s3XIP;
                                                          '-'# ->
                                                              case ds2_s3XJg of {
                                                                [] -> lvl4_s3XJ9;
                                                                : _ [Occ=Dead] _ [Occ=Dead] ->
                                                                    convert_s3XIL
                                                                        wild_s3XJc n_s3XIO k1_s3XIP;
                                                              };
                                                        };
                                                  };
                                            };
                                      }; } in
                            let {
                              lvl117_s3XJn [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [w2_s3XJa] \u [] w2_s3XJa Text.Read.Lex.EOF; } in
                            let {
                              sat_s3XJu [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [w2_s3XJa] \u [] Text.Read.Lex.expect2 w2_s3XJa; } in
                            let {
                              sat_s3XJs [Occ=OnceL]
                                :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [lvl117_s3XJn] \r [a3_s3XJo]
                                      case a3_s3XJo of {
                                        [] -> lvl117_s3XJn;
                                        : _ [Occ=Dead] _ [Occ=Dead] ->
                                            Text.ParserCombinators.ReadP.Fail [];
                                      }; } in
                            let {
                              sat_s3XJt [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  CCCS Text.ParserCombinators.ReadP.Look! [sat_s3XJs];
                            } in 
                              Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                  sat_s3XJt sat_s3XJu; } in
                  let {
                    k_s3XJv [Occ=OnceL, Dmd=<L,C(U)>]
                      :: () -> Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
                        [lvl116_s3XIQ] \r [a3_s3XJw] lvl116_s3XIQ; } in
                  let {
                    sat_s3XJy [Occ=Once]
                      :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId] =
                        [k_s3XJv] \r [a_s3XJx]
                            Text.ParserCombinators.ReadP.skipSpaces2 a_s3XJx k_s3XJv;
                  } in  Text.ParserCombinators.ReadP.Look [sat_s3XJy];
        } in  GHC.Read.list3 sat_s3XJz eta_s3XIM eta1_s3XIN;

GHC.Read.$fReadDouble_$sreadNumber
  :: (Text.Read.Lex.Lexeme
      -> Text.ParserCombinators.ReadPrec.ReadPrec GHC.Types.Double)
     -> Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Types.Double -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=3, Str=<L,C(C1(C1(U)))><L,U><L,U>, Unf=OtherCon []] =
    [] \r [convert_s3XJA eta_s3XJB eta1_s3XJC]
        let {
          sat_s3XKo [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec GHC.Types.Double
          [LclId] =
              [convert_s3XJA] \r [n_s3XJD k1_s3XJE]
                  let {
                    lvl116_s3XJF [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId] =
                        [convert_s3XJA n_s3XJD k1_s3XJE] \u []
                            let {
                              lvl2_s3XJG [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [convert_s3XJA n_s3XJD k1_s3XJE] \u []
                                      let {
                                        lvl3_s3XJH
                                          :: GHC.Types.Double
                                             -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId, Arity=1, Str=<L,1*U(U)>, Unf=OtherCon []] =
                                            [k1_s3XJE] \r [a1_s3XJI]
                                                let {
                                                  sat_s3XJJ [Occ=Once] :: GHC.Types.Double
                                                  [LclId] =
                                                      [a1_s3XJI] \u []
                                                          GHC.Float.negateDouble a1_s3XJI;
                                                } in  k1_s3XJE sat_s3XJJ; } in
                                      let {
                                        lvl117_s3XJK [Occ=OnceL]
                                          :: Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            [convert_s3XJA n_s3XJD lvl3_s3XJH] \u []
                                                convert_s3XJA
                                                    Text.Read.Lex.EOF n_s3XJD lvl3_s3XJH; } in
                                      let {
                                        sat_s3XJT [Occ=Once]
                                          :: Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            [convert_s3XJA n_s3XJD lvl3_s3XJH] \u []
                                                let {
                                                  sat_s3XJS [Occ=Once]
                                                    :: Text.Read.Lex.Lexeme
                                                       -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                                  [LclId] =
                                                      [convert_s3XJA
                                                       n_s3XJD
                                                       lvl3_s3XJH] \r [a1_s3XJR]
                                                          convert_s3XJA a1_s3XJR n_s3XJD lvl3_s3XJH;
                                                } in  Text.Read.Lex.expect2 sat_s3XJS; } in
                                      let {
                                        sat_s3XJP [Occ=OnceL]
                                          :: GHC.Base.String
                                             -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            [lvl117_s3XJK] \r [a3_s3XJL]
                                                case a3_s3XJL of {
                                                  [] -> lvl117_s3XJK;
                                                  : _ [Occ=Dead] _ [Occ=Dead] ->
                                                      Text.ParserCombinators.ReadP.Fail [];
                                                }; } in
                                      let {
                                        sat_s3XJQ [Occ=Once]
                                          :: Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            CCCS Text.ParserCombinators.ReadP.Look! [sat_s3XJP];
                                      } in 
                                        Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                            sat_s3XJQ sat_s3XJT; } in
                            let {
                              k_s3XJU [Occ=OnceL, Dmd=<L,C(U)>]
                                :: () -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
                                  [lvl2_s3XJG] \r [a3_s3XJV] lvl2_s3XJG; } in
                            let {
                              lvl3_s3XJW [Occ=OnceL]
                                :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                  [k_s3XJU] \r [a_s3XJX]
                                      Text.ParserCombinators.ReadP.skipSpaces2 a_s3XJX k_s3XJU; } in
                            let {
                              lvl4_s3XJY [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Unf=OtherCon []] =
                                  CCCS Text.ParserCombinators.ReadP.Look! [lvl3_s3XJW]; } in
                            let {
                              w2_s3XJZ
                                :: Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                  [convert_s3XJA n_s3XJD k1_s3XJE lvl4_s3XJY] \r [a1_s3XK0]
                                      case a1_s3XK0 of wild_s3XK1 {
                                        __DEFAULT -> convert_s3XJA wild_s3XK1 n_s3XJD k1_s3XJE;
                                        Text.Read.Lex.Symbol ds_s3XK2 [Occ=Once!] ->
                                            case ds_s3XK2 of {
                                              [] -> convert_s3XJA wild_s3XK1 n_s3XJD k1_s3XJE;
                                              : ds1_s3XK4 [Occ=Once!] ds2_s3XK5 [Occ=Once!] ->
                                                  case ds1_s3XK4 of {
                                                    GHC.Types.C# ds3_s3XK7 [Occ=Once!] ->
                                                        case ds3_s3XK7 of {
                                                          __DEFAULT ->
                                                              convert_s3XJA
                                                                  wild_s3XK1 n_s3XJD k1_s3XJE;
                                                          '-'# ->
                                                              case ds2_s3XK5 of {
                                                                [] -> lvl4_s3XJY;
                                                                : _ [Occ=Dead] _ [Occ=Dead] ->
                                                                    convert_s3XJA
                                                                        wild_s3XK1 n_s3XJD k1_s3XJE;
                                                              };
                                                        };
                                                  };
                                            };
                                      }; } in
                            let {
                              lvl117_s3XKc [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [w2_s3XJZ] \u [] w2_s3XJZ Text.Read.Lex.EOF; } in
                            let {
                              sat_s3XKj [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [w2_s3XJZ] \u [] Text.Read.Lex.expect2 w2_s3XJZ; } in
                            let {
                              sat_s3XKh [Occ=OnceL]
                                :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [lvl117_s3XKc] \r [a3_s3XKd]
                                      case a3_s3XKd of {
                                        [] -> lvl117_s3XKc;
                                        : _ [Occ=Dead] _ [Occ=Dead] ->
                                            Text.ParserCombinators.ReadP.Fail [];
                                      }; } in
                            let {
                              sat_s3XKi [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  CCCS Text.ParserCombinators.ReadP.Look! [sat_s3XKh];
                            } in 
                              Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                  sat_s3XKi sat_s3XKj; } in
                  let {
                    k_s3XKk [Occ=OnceL, Dmd=<L,C(U)>]
                      :: () -> Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
                        [lvl116_s3XJF] \r [a3_s3XKl] lvl116_s3XJF; } in
                  let {
                    sat_s3XKn [Occ=Once]
                      :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId] =
                        [k_s3XKk] \r [a_s3XKm]
                            Text.ParserCombinators.ReadP.skipSpaces2 a_s3XKm k_s3XKk;
                  } in  Text.ParserCombinators.ReadP.Look [sat_s3XKn];
        } in  GHC.Read.list3 sat_s3XKo eta_s3XJB eta1_s3XJC;

GHC.Read.$fReadFloat_$sreadNumber
  :: (Text.Read.Lex.Lexeme
      -> Text.ParserCombinators.ReadPrec.ReadPrec GHC.Types.Float)
     -> Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Types.Float -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=3, Str=<L,C(C1(C1(U)))><L,U><L,U>, Unf=OtherCon []] =
    [] \r [convert_s3XKp eta_s3XKq eta1_s3XKr]
        let {
          sat_s3XLd [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec GHC.Types.Float
          [LclId] =
              [convert_s3XKp] \r [n_s3XKs k1_s3XKt]
                  let {
                    lvl116_s3XKu [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId] =
                        [convert_s3XKp n_s3XKs k1_s3XKt] \u []
                            let {
                              lvl2_s3XKv [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [convert_s3XKp n_s3XKs k1_s3XKt] \u []
                                      let {
                                        lvl3_s3XKw
                                          :: GHC.Types.Float
                                             -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId, Arity=1, Str=<L,1*U(U)>, Unf=OtherCon []] =
                                            [k1_s3XKt] \r [a1_s3XKx]
                                                let {
                                                  sat_s3XKy [Occ=Once] :: GHC.Types.Float
                                                  [LclId] =
                                                      [a1_s3XKx] \u []
                                                          GHC.Float.negateFloat a1_s3XKx;
                                                } in  k1_s3XKt sat_s3XKy; } in
                                      let {
                                        lvl117_s3XKz [Occ=OnceL]
                                          :: Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            [convert_s3XKp n_s3XKs lvl3_s3XKw] \u []
                                                convert_s3XKp
                                                    Text.Read.Lex.EOF n_s3XKs lvl3_s3XKw; } in
                                      let {
                                        sat_s3XKI [Occ=Once]
                                          :: Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            [convert_s3XKp n_s3XKs lvl3_s3XKw] \u []
                                                let {
                                                  sat_s3XKH [Occ=Once]
                                                    :: Text.Read.Lex.Lexeme
                                                       -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                                  [LclId] =
                                                      [convert_s3XKp
                                                       n_s3XKs
                                                       lvl3_s3XKw] \r [a1_s3XKG]
                                                          convert_s3XKp a1_s3XKG n_s3XKs lvl3_s3XKw;
                                                } in  Text.Read.Lex.expect2 sat_s3XKH; } in
                                      let {
                                        sat_s3XKE [Occ=OnceL]
                                          :: GHC.Base.String
                                             -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            [lvl117_s3XKz] \r [a3_s3XKA]
                                                case a3_s3XKA of {
                                                  [] -> lvl117_s3XKz;
                                                  : _ [Occ=Dead] _ [Occ=Dead] ->
                                                      Text.ParserCombinators.ReadP.Fail [];
                                                }; } in
                                      let {
                                        sat_s3XKF [Occ=Once]
                                          :: Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            CCCS Text.ParserCombinators.ReadP.Look! [sat_s3XKE];
                                      } in 
                                        Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                            sat_s3XKF sat_s3XKI; } in
                            let {
                              k_s3XKJ [Occ=OnceL, Dmd=<L,C(U)>]
                                :: () -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
                                  [lvl2_s3XKv] \r [a3_s3XKK] lvl2_s3XKv; } in
                            let {
                              lvl3_s3XKL [Occ=OnceL]
                                :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                  [k_s3XKJ] \r [a_s3XKM]
                                      Text.ParserCombinators.ReadP.skipSpaces2 a_s3XKM k_s3XKJ; } in
                            let {
                              lvl4_s3XKN [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Unf=OtherCon []] =
                                  CCCS Text.ParserCombinators.ReadP.Look! [lvl3_s3XKL]; } in
                            let {
                              w2_s3XKO
                                :: Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                  [convert_s3XKp n_s3XKs k1_s3XKt lvl4_s3XKN] \r [a1_s3XKP]
                                      case a1_s3XKP of wild_s3XKQ {
                                        __DEFAULT -> convert_s3XKp wild_s3XKQ n_s3XKs k1_s3XKt;
                                        Text.Read.Lex.Symbol ds_s3XKR [Occ=Once!] ->
                                            case ds_s3XKR of {
                                              [] -> convert_s3XKp wild_s3XKQ n_s3XKs k1_s3XKt;
                                              : ds1_s3XKT [Occ=Once!] ds2_s3XKU [Occ=Once!] ->
                                                  case ds1_s3XKT of {
                                                    GHC.Types.C# ds3_s3XKW [Occ=Once!] ->
                                                        case ds3_s3XKW of {
                                                          __DEFAULT ->
                                                              convert_s3XKp
                                                                  wild_s3XKQ n_s3XKs k1_s3XKt;
                                                          '-'# ->
                                                              case ds2_s3XKU of {
                                                                [] -> lvl4_s3XKN;
                                                                : _ [Occ=Dead] _ [Occ=Dead] ->
                                                                    convert_s3XKp
                                                                        wild_s3XKQ n_s3XKs k1_s3XKt;
                                                              };
                                                        };
                                                  };
                                            };
                                      }; } in
                            let {
                              lvl117_s3XL1 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [w2_s3XKO] \u [] w2_s3XKO Text.Read.Lex.EOF; } in
                            let {
                              sat_s3XL8 [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [w2_s3XKO] \u [] Text.Read.Lex.expect2 w2_s3XKO; } in
                            let {
                              sat_s3XL6 [Occ=OnceL]
                                :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [lvl117_s3XL1] \r [a3_s3XL2]
                                      case a3_s3XL2 of {
                                        [] -> lvl117_s3XL1;
                                        : _ [Occ=Dead] _ [Occ=Dead] ->
                                            Text.ParserCombinators.ReadP.Fail [];
                                      }; } in
                            let {
                              sat_s3XL7 [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  CCCS Text.ParserCombinators.ReadP.Look! [sat_s3XL6];
                            } in 
                              Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                  sat_s3XL7 sat_s3XL8; } in
                  let {
                    k_s3XL9 [Occ=OnceL, Dmd=<L,C(U)>]
                      :: () -> Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
                        [lvl116_s3XKu] \r [a3_s3XLa] lvl116_s3XKu; } in
                  let {
                    sat_s3XLc [Occ=Once]
                      :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId] =
                        [k_s3XL9] \r [a_s3XLb]
                            Text.ParserCombinators.ReadP.skipSpaces2 a_s3XLb k_s3XL9;
                  } in  Text.ParserCombinators.ReadP.Look [sat_s3XLc];
        } in  GHC.Read.list3 sat_s3XLd eta_s3XKq eta1_s3XKr;

GHC.Read.$fReadInt_$sreadNumber
  :: (Text.Read.Lex.Lexeme
      -> Text.ParserCombinators.ReadPrec.ReadPrec GHC.Types.Int)
     -> Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Types.Int -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=3, Str=<L,C(C1(C1(U)))><L,U><L,U>, Unf=OtherCon []] =
    [] \r [convert_s3XLe eta_s3XLf eta1_s3XLg]
        let {
          sat_s3XM2 [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec GHC.Types.Int
          [LclId] =
              [convert_s3XLe] \r [n_s3XLh k1_s3XLi]
                  let {
                    lvl116_s3XLj [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId] =
                        [convert_s3XLe n_s3XLh k1_s3XLi] \u []
                            let {
                              lvl2_s3XLk [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [convert_s3XLe n_s3XLh k1_s3XLi] \u []
                                      let {
                                        lvl3_s3XLl
                                          :: GHC.Types.Int
                                             -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId, Arity=1, Str=<L,1*U(U)>, Unf=OtherCon []] =
                                            [k1_s3XLi] \r [a1_s3XLm]
                                                let {
                                                  sat_s3XLn [Occ=Once] :: GHC.Types.Int
                                                  [LclId] =
                                                      [a1_s3XLm] \u []
                                                          GHC.Num.$fNumInt_$cnegate a1_s3XLm;
                                                } in  k1_s3XLi sat_s3XLn; } in
                                      let {
                                        lvl117_s3XLo [Occ=OnceL]
                                          :: Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            [convert_s3XLe n_s3XLh lvl3_s3XLl] \u []
                                                convert_s3XLe
                                                    Text.Read.Lex.EOF n_s3XLh lvl3_s3XLl; } in
                                      let {
                                        sat_s3XLx [Occ=Once]
                                          :: Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            [convert_s3XLe n_s3XLh lvl3_s3XLl] \u []
                                                let {
                                                  sat_s3XLw [Occ=Once]
                                                    :: Text.Read.Lex.Lexeme
                                                       -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                                  [LclId] =
                                                      [convert_s3XLe
                                                       n_s3XLh
                                                       lvl3_s3XLl] \r [a1_s3XLv]
                                                          convert_s3XLe a1_s3XLv n_s3XLh lvl3_s3XLl;
                                                } in  Text.Read.Lex.expect2 sat_s3XLw; } in
                                      let {
                                        sat_s3XLt [Occ=OnceL]
                                          :: GHC.Base.String
                                             -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            [lvl117_s3XLo] \r [a3_s3XLp]
                                                case a3_s3XLp of {
                                                  [] -> lvl117_s3XLo;
                                                  : _ [Occ=Dead] _ [Occ=Dead] ->
                                                      Text.ParserCombinators.ReadP.Fail [];
                                                }; } in
                                      let {
                                        sat_s3XLu [Occ=Once]
                                          :: Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            CCCS Text.ParserCombinators.ReadP.Look! [sat_s3XLt];
                                      } in 
                                        Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                            sat_s3XLu sat_s3XLx; } in
                            let {
                              k_s3XLy [Occ=OnceL, Dmd=<L,C(U)>]
                                :: () -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
                                  [lvl2_s3XLk] \r [a3_s3XLz] lvl2_s3XLk; } in
                            let {
                              lvl3_s3XLA [Occ=OnceL]
                                :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                  [k_s3XLy] \r [a_s3XLB]
                                      Text.ParserCombinators.ReadP.skipSpaces2 a_s3XLB k_s3XLy; } in
                            let {
                              lvl4_s3XLC [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Unf=OtherCon []] =
                                  CCCS Text.ParserCombinators.ReadP.Look! [lvl3_s3XLA]; } in
                            let {
                              w2_s3XLD
                                :: Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                  [convert_s3XLe n_s3XLh k1_s3XLi lvl4_s3XLC] \r [a1_s3XLE]
                                      case a1_s3XLE of wild_s3XLF {
                                        __DEFAULT -> convert_s3XLe wild_s3XLF n_s3XLh k1_s3XLi;
                                        Text.Read.Lex.Symbol ds_s3XLG [Occ=Once!] ->
                                            case ds_s3XLG of {
                                              [] -> convert_s3XLe wild_s3XLF n_s3XLh k1_s3XLi;
                                              : ds1_s3XLI [Occ=Once!] ds2_s3XLJ [Occ=Once!] ->
                                                  case ds1_s3XLI of {
                                                    GHC.Types.C# ds3_s3XLL [Occ=Once!] ->
                                                        case ds3_s3XLL of {
                                                          __DEFAULT ->
                                                              convert_s3XLe
                                                                  wild_s3XLF n_s3XLh k1_s3XLi;
                                                          '-'# ->
                                                              case ds2_s3XLJ of {
                                                                [] -> lvl4_s3XLC;
                                                                : _ [Occ=Dead] _ [Occ=Dead] ->
                                                                    convert_s3XLe
                                                                        wild_s3XLF n_s3XLh k1_s3XLi;
                                                              };
                                                        };
                                                  };
                                            };
                                      }; } in
                            let {
                              lvl117_s3XLQ [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [w2_s3XLD] \u [] w2_s3XLD Text.Read.Lex.EOF; } in
                            let {
                              sat_s3XLX [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [w2_s3XLD] \u [] Text.Read.Lex.expect2 w2_s3XLD; } in
                            let {
                              sat_s3XLV [Occ=OnceL]
                                :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [lvl117_s3XLQ] \r [a3_s3XLR]
                                      case a3_s3XLR of {
                                        [] -> lvl117_s3XLQ;
                                        : _ [Occ=Dead] _ [Occ=Dead] ->
                                            Text.ParserCombinators.ReadP.Fail [];
                                      }; } in
                            let {
                              sat_s3XLW [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  CCCS Text.ParserCombinators.ReadP.Look! [sat_s3XLV];
                            } in 
                              Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                  sat_s3XLW sat_s3XLX; } in
                  let {
                    k_s3XLY [Occ=OnceL, Dmd=<L,C(U)>]
                      :: () -> Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
                        [lvl116_s3XLj] \r [a3_s3XLZ] lvl116_s3XLj; } in
                  let {
                    sat_s3XM1 [Occ=Once]
                      :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId] =
                        [k_s3XLY] \r [a_s3XM0]
                            Text.ParserCombinators.ReadP.skipSpaces2 a_s3XM0 k_s3XLY;
                  } in  Text.ParserCombinators.ReadP.Look [sat_s3XM1];
        } in  GHC.Read.list3 sat_s3XM2 eta_s3XLf eta1_s3XLg;

GHC.Read.readNumber1
  :: forall a.
     GHC.Num.Num a =>
     (Text.Read.Lex.Lexeme
      -> Text.ParserCombinators.ReadPrec.ReadPrec a)
     -> Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=4,
 Str=<L,U(A,A,A,C(U),A,A,A)><L,C(C1(C1(U)))><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dNum_s3XM3 convert_s3XM4 eta_s3XM5 eta1_s3XM6]
        let {
          sat_s3XMS [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec a_a3Kr6
          [LclId] =
              [$dNum_s3XM3 convert_s3XM4] \r [n_s3XM7 k1_s3XM8]
                  let {
                    lvl116_s3XM9 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId] =
                        [$dNum_s3XM3 convert_s3XM4 n_s3XM7 k1_s3XM8] \u []
                            let {
                              lvl2_s3XMa [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [$dNum_s3XM3 convert_s3XM4 n_s3XM7 k1_s3XM8] \u []
                                      let {
                                        lvl3_s3XMb
                                          :: a_a3Kr6 -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
                                            [$dNum_s3XM3 k1_s3XM8] \r [a1_s3XMc]
                                                let {
                                                  sat_s3XMd [Occ=Once] :: a_a3Kr6
                                                  [LclId] =
                                                      [$dNum_s3XM3 a1_s3XMc] \u []
                                                          GHC.Num.negate $dNum_s3XM3 a1_s3XMc;
                                                } in  k1_s3XM8 sat_s3XMd; } in
                                      let {
                                        lvl117_s3XMe [Occ=OnceL]
                                          :: Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            [convert_s3XM4 n_s3XM7 lvl3_s3XMb] \u []
                                                convert_s3XM4
                                                    Text.Read.Lex.EOF n_s3XM7 lvl3_s3XMb; } in
                                      let {
                                        sat_s3XMn [Occ=Once]
                                          :: Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            [convert_s3XM4 n_s3XM7 lvl3_s3XMb] \u []
                                                let {
                                                  sat_s3XMm [Occ=Once]
                                                    :: Text.Read.Lex.Lexeme
                                                       -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                                  [LclId] =
                                                      [convert_s3XM4
                                                       n_s3XM7
                                                       lvl3_s3XMb] \r [a1_s3XMl]
                                                          convert_s3XM4 a1_s3XMl n_s3XM7 lvl3_s3XMb;
                                                } in  Text.Read.Lex.expect2 sat_s3XMm; } in
                                      let {
                                        sat_s3XMj [Occ=OnceL]
                                          :: GHC.Base.String
                                             -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            [lvl117_s3XMe] \r [a3_s3XMf]
                                                case a3_s3XMf of {
                                                  [] -> lvl117_s3XMe;
                                                  : _ [Occ=Dead] _ [Occ=Dead] ->
                                                      Text.ParserCombinators.ReadP.Fail [];
                                                }; } in
                                      let {
                                        sat_s3XMk [Occ=Once]
                                          :: Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            CCCS Text.ParserCombinators.ReadP.Look! [sat_s3XMj];
                                      } in 
                                        Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                            sat_s3XMk sat_s3XMn; } in
                            let {
                              k_s3XMo [Occ=OnceL, Dmd=<L,C(U)>]
                                :: () -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
                                  [lvl2_s3XMa] \r [a3_s3XMp] lvl2_s3XMa; } in
                            let {
                              lvl3_s3XMq [Occ=OnceL]
                                :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                  [k_s3XMo] \r [a1_s3XMr]
                                      Text.ParserCombinators.ReadP.skipSpaces2
                                          a1_s3XMr k_s3XMo; } in
                            let {
                              lvl4_s3XMs [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Unf=OtherCon []] =
                                  CCCS Text.ParserCombinators.ReadP.Look! [lvl3_s3XMq]; } in
                            let {
                              w2_s3XMt
                                :: Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                  [convert_s3XM4 n_s3XM7 k1_s3XM8 lvl4_s3XMs] \r [a1_s3XMu]
                                      case a1_s3XMu of wild_s3XMv {
                                        __DEFAULT -> convert_s3XM4 wild_s3XMv n_s3XM7 k1_s3XM8;
                                        Text.Read.Lex.Symbol ds_s3XMw [Occ=Once!] ->
                                            case ds_s3XMw of {
                                              [] -> convert_s3XM4 wild_s3XMv n_s3XM7 k1_s3XM8;
                                              : ds1_s3XMy [Occ=Once!] ds2_s3XMz [Occ=Once!] ->
                                                  case ds1_s3XMy of {
                                                    GHC.Types.C# ds3_s3XMB [Occ=Once!] ->
                                                        case ds3_s3XMB of {
                                                          __DEFAULT ->
                                                              convert_s3XM4
                                                                  wild_s3XMv n_s3XM7 k1_s3XM8;
                                                          '-'# ->
                                                              case ds2_s3XMz of {
                                                                [] -> lvl4_s3XMs;
                                                                : _ [Occ=Dead] _ [Occ=Dead] ->
                                                                    convert_s3XM4
                                                                        wild_s3XMv n_s3XM7 k1_s3XM8;
                                                              };
                                                        };
                                                  };
                                            };
                                      }; } in
                            let {
                              lvl117_s3XMG [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [w2_s3XMt] \u [] w2_s3XMt Text.Read.Lex.EOF; } in
                            let {
                              sat_s3XMN [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [w2_s3XMt] \u [] Text.Read.Lex.expect2 w2_s3XMt; } in
                            let {
                              sat_s3XML [Occ=OnceL]
                                :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [lvl117_s3XMG] \r [a3_s3XMH]
                                      case a3_s3XMH of {
                                        [] -> lvl117_s3XMG;
                                        : _ [Occ=Dead] _ [Occ=Dead] ->
                                            Text.ParserCombinators.ReadP.Fail [];
                                      }; } in
                            let {
                              sat_s3XMM [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  CCCS Text.ParserCombinators.ReadP.Look! [sat_s3XML];
                            } in 
                              Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                  sat_s3XMM sat_s3XMN; } in
                  let {
                    k_s3XMO [Occ=OnceL, Dmd=<L,C(U)>]
                      :: () -> Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
                        [lvl116_s3XM9] \r [a3_s3XMP] lvl116_s3XM9; } in
                  let {
                    sat_s3XMR [Occ=Once]
                      :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId] =
                        [k_s3XMO] \r [a1_s3XMQ]
                            Text.ParserCombinators.ReadP.skipSpaces2 a1_s3XMQ k_s3XMO;
                  } in  Text.ParserCombinators.ReadP.Look [sat_s3XMR];
        } in  GHC.Read.list3 sat_s3XMS eta_s3XM5 eta1_s3XM6;

GHC.Read.readNumber
  :: forall a.
     GHC.Num.Num a =>
     (Text.Read.Lex.Lexeme
      -> Text.ParserCombinators.ReadPrec.ReadPrec a)
     -> Text.ParserCombinators.ReadPrec.ReadPrec a
[GblId,
 Arity=4,
 Str=<L,U(A,A,A,C(U),A,A,A)><L,C(C1(C1(U)))><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.Read.readNumber1 eta_B4 eta_B3 eta_B2 eta_B1;

GHC.Read.$fReadGeneralCategory152 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "UppercaseLetter"#;

GHC.Read.$fReadGeneralCategory151 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory152;

GHC.Read.$fReadGeneralCategory150
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3XMT k_s3XMU] k_s3XMU GHC.Unicode.UppercaseLetter;

GHC.Read.$fReadGeneralCategory149
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory151
                        GHC.Read.$fReadGeneralCategory150];

GHC.Read.$fReadGeneralCategory148 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "LowercaseLetter"#;

GHC.Read.$fReadGeneralCategory147 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory148;

GHC.Read.$fReadGeneralCategory146
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3XMV k_s3XMW] k_s3XMW GHC.Unicode.LowercaseLetter;

GHC.Read.$fReadGeneralCategory145
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory147
                        GHC.Read.$fReadGeneralCategory146];

GHC.Read.$fReadGeneralCategory144 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "TitlecaseLetter"#;

GHC.Read.$fReadGeneralCategory143 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory144;

GHC.Read.$fReadGeneralCategory142
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3XMX k_s3XMY] k_s3XMY GHC.Unicode.TitlecaseLetter;

GHC.Read.$fReadGeneralCategory141
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory143
                        GHC.Read.$fReadGeneralCategory142];

GHC.Read.$fReadGeneralCategory140 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ModifierLetter"#;

GHC.Read.$fReadGeneralCategory139 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory140;

GHC.Read.$fReadGeneralCategory138
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3XMZ k_s3XN0] k_s3XN0 GHC.Unicode.ModifierLetter;

GHC.Read.$fReadGeneralCategory137
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory139
                        GHC.Read.$fReadGeneralCategory138];

GHC.Read.$fReadGeneralCategory136 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "OtherLetter"#;

GHC.Read.$fReadGeneralCategory135 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory136;

GHC.Read.$fReadGeneralCategory134
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3XN1 k_s3XN2] k_s3XN2 GHC.Unicode.OtherLetter;

GHC.Read.$fReadGeneralCategory133
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory135
                        GHC.Read.$fReadGeneralCategory134];

GHC.Read.$fReadGeneralCategory132 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "NonSpacingMark"#;

GHC.Read.$fReadGeneralCategory131 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory132;

GHC.Read.$fReadGeneralCategory130
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3XN3 k_s3XN4] k_s3XN4 GHC.Unicode.NonSpacingMark;

GHC.Read.$fReadGeneralCategory129
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory131
                        GHC.Read.$fReadGeneralCategory130];

GHC.Read.$fReadGeneralCategory128 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SpacingCombiningMark"#;

GHC.Read.$fReadGeneralCategory127 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory128;

GHC.Read.$fReadGeneralCategory126
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3XN5 k_s3XN6] k_s3XN6 GHC.Unicode.SpacingCombiningMark;

GHC.Read.$fReadGeneralCategory125
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory127
                        GHC.Read.$fReadGeneralCategory126];

GHC.Read.$fReadGeneralCategory124 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "EnclosingMark"#;

GHC.Read.$fReadGeneralCategory123 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory124;

GHC.Read.$fReadGeneralCategory122
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3XN7 k_s3XN8] k_s3XN8 GHC.Unicode.EnclosingMark;

GHC.Read.$fReadGeneralCategory121
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory123
                        GHC.Read.$fReadGeneralCategory122];

GHC.Read.$fReadGeneralCategory120 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "DecimalNumber"#;

GHC.Read.$fReadGeneralCategory119 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory120;

GHC.Read.$fReadGeneralCategory118
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3XN9 k_s3XNa] k_s3XNa GHC.Unicode.DecimalNumber;

GHC.Read.$fReadGeneralCategory117
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory119
                        GHC.Read.$fReadGeneralCategory118];

GHC.Read.$fReadGeneralCategory116 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "LetterNumber"#;

GHC.Read.$fReadGeneralCategory115 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory116;

GHC.Read.$fReadGeneralCategory114
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3XNb k_s3XNc] k_s3XNc GHC.Unicode.LetterNumber;

GHC.Read.$fReadGeneralCategory113
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory115
                        GHC.Read.$fReadGeneralCategory114];

GHC.Read.$fReadGeneralCategory112 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "OtherNumber"#;

GHC.Read.$fReadGeneralCategory111 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory112;

GHC.Read.$fReadGeneralCategory110
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3XNd k_s3XNe] k_s3XNe GHC.Unicode.OtherNumber;

GHC.Read.$fReadGeneralCategory109
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory111
                        GHC.Read.$fReadGeneralCategory110];

GHC.Read.$fReadGeneralCategory108 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ConnectorPunctuation"#;

GHC.Read.$fReadGeneralCategory107 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory108;

GHC.Read.$fReadGeneralCategory106
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3XNf k_s3XNg] k_s3XNg GHC.Unicode.ConnectorPunctuation;

GHC.Read.$fReadGeneralCategory105
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory107
                        GHC.Read.$fReadGeneralCategory106];

GHC.Read.$fReadGeneralCategory104 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "DashPunctuation"#;

GHC.Read.$fReadGeneralCategory103 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory104;

GHC.Read.$fReadGeneralCategory102
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3XNh k_s3XNi] k_s3XNi GHC.Unicode.DashPunctuation;

GHC.Read.$fReadGeneralCategory101
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory103
                        GHC.Read.$fReadGeneralCategory102];

GHC.Read.$fReadGeneralCategory100 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "OpenPunctuation"#;

GHC.Read.$fReadGeneralCategory99 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory100;

GHC.Read.$fReadGeneralCategory98
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3XNj k_s3XNk] k_s3XNk GHC.Unicode.OpenPunctuation;

GHC.Read.$fReadGeneralCategory97
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory99
                        GHC.Read.$fReadGeneralCategory98];

GHC.Read.$fReadGeneralCategory96 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ClosePunctuation"#;

GHC.Read.$fReadGeneralCategory95 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory96;

GHC.Read.$fReadGeneralCategory94
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3XNl k_s3XNm] k_s3XNm GHC.Unicode.ClosePunctuation;

GHC.Read.$fReadGeneralCategory93
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory95
                        GHC.Read.$fReadGeneralCategory94];

GHC.Read.$fReadGeneralCategory92 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "InitialQuote"#;

GHC.Read.$fReadGeneralCategory91 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory92;

GHC.Read.$fReadGeneralCategory90
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3XNn k_s3XNo] k_s3XNo GHC.Unicode.InitialQuote;

GHC.Read.$fReadGeneralCategory89
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory91
                        GHC.Read.$fReadGeneralCategory90];

GHC.Read.$fReadGeneralCategory88 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "FinalQuote"#;

GHC.Read.$fReadGeneralCategory87 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory88;

GHC.Read.$fReadGeneralCategory86
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3XNp k_s3XNq] k_s3XNq GHC.Unicode.FinalQuote;

GHC.Read.$fReadGeneralCategory85
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory87
                        GHC.Read.$fReadGeneralCategory86];

GHC.Read.$fReadGeneralCategory84 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "OtherPunctuation"#;

GHC.Read.$fReadGeneralCategory83 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory84;

GHC.Read.$fReadGeneralCategory82
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3XNr k_s3XNs] k_s3XNs GHC.Unicode.OtherPunctuation;

GHC.Read.$fReadGeneralCategory81
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory83
                        GHC.Read.$fReadGeneralCategory82];

GHC.Read.$fReadGeneralCategory80 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "MathSymbol"#;

GHC.Read.$fReadGeneralCategory79 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory80;

GHC.Read.$fReadGeneralCategory78
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3XNt k_s3XNu] k_s3XNu GHC.Unicode.MathSymbol;

GHC.Read.$fReadGeneralCategory77
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory79
                        GHC.Read.$fReadGeneralCategory78];

GHC.Read.$fReadGeneralCategory76 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "CurrencySymbol"#;

GHC.Read.$fReadGeneralCategory75 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory76;

GHC.Read.$fReadGeneralCategory74
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3XNv k_s3XNw] k_s3XNw GHC.Unicode.CurrencySymbol;

GHC.Read.$fReadGeneralCategory73
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory75
                        GHC.Read.$fReadGeneralCategory74];

GHC.Read.$fReadGeneralCategory72 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ModifierSymbol"#;

GHC.Read.$fReadGeneralCategory71 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory72;

GHC.Read.$fReadGeneralCategory70
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3XNx k_s3XNy] k_s3XNy GHC.Unicode.ModifierSymbol;

GHC.Read.$fReadGeneralCategory69
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory71
                        GHC.Read.$fReadGeneralCategory70];

GHC.Read.$fReadGeneralCategory68 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "OtherSymbol"#;

GHC.Read.$fReadGeneralCategory67 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory68;

GHC.Read.$fReadGeneralCategory66
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3XNz k_s3XNA] k_s3XNA GHC.Unicode.OtherSymbol;

GHC.Read.$fReadGeneralCategory65
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory67
                        GHC.Read.$fReadGeneralCategory66];

GHC.Read.$fReadGeneralCategory64 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Space"#;

GHC.Read.$fReadGeneralCategory63 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory64;

GHC.Read.$fReadGeneralCategory62
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3XNB k_s3XNC] k_s3XNC GHC.Unicode.Space;

GHC.Read.$fReadGeneralCategory61
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory63
                        GHC.Read.$fReadGeneralCategory62];

GHC.Read.$fReadGeneralCategory60 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "LineSeparator"#;

GHC.Read.$fReadGeneralCategory59 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory60;

GHC.Read.$fReadGeneralCategory58
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3XND k_s3XNE] k_s3XNE GHC.Unicode.LineSeparator;

GHC.Read.$fReadGeneralCategory57
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory59
                        GHC.Read.$fReadGeneralCategory58];

GHC.Read.$fReadGeneralCategory56 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ParagraphSeparator"#;

GHC.Read.$fReadGeneralCategory55 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory56;

GHC.Read.$fReadGeneralCategory54
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3XNF k_s3XNG] k_s3XNG GHC.Unicode.ParagraphSeparator;

GHC.Read.$fReadGeneralCategory53
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory55
                        GHC.Read.$fReadGeneralCategory54];

GHC.Read.$fReadGeneralCategory52 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Control"#;

GHC.Read.$fReadGeneralCategory51 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory52;

GHC.Read.$fReadGeneralCategory50
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3XNH k_s3XNI] k_s3XNI GHC.Unicode.Control;

GHC.Read.$fReadGeneralCategory49
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory51
                        GHC.Read.$fReadGeneralCategory50];

GHC.Read.$fReadGeneralCategory48 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Format"#;

GHC.Read.$fReadGeneralCategory47 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory48;

GHC.Read.$fReadGeneralCategory46
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3XNJ k_s3XNK] k_s3XNK GHC.Unicode.Format;

GHC.Read.$fReadGeneralCategory45
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory47
                        GHC.Read.$fReadGeneralCategory46];

GHC.Read.$fReadGeneralCategory44 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Surrogate"#;

GHC.Read.$fReadGeneralCategory43 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory44;

GHC.Read.$fReadGeneralCategory42
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3XNL k_s3XNM] k_s3XNM GHC.Unicode.Surrogate;

GHC.Read.$fReadGeneralCategory41
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory43
                        GHC.Read.$fReadGeneralCategory42];

GHC.Read.$fReadGeneralCategory40 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "PrivateUse"#;

GHC.Read.$fReadGeneralCategory39 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory40;

GHC.Read.$fReadGeneralCategory38
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3XNN k_s3XNO] k_s3XNO GHC.Unicode.PrivateUse;

GHC.Read.$fReadGeneralCategory37
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory39
                        GHC.Read.$fReadGeneralCategory38];

GHC.Read.$fReadGeneralCategory35 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "NotAssigned"#;

GHC.Read.$fReadGeneralCategory34 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory35;

GHC.Read.$fReadGeneralCategory33
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3XNP k_s3XNQ] k_s3XNQ GHC.Unicode.NotAssigned;

GHC.Read.$fReadGeneralCategory32
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory34
                        GHC.Read.$fReadGeneralCategory33];

GHC.Read.$fReadGeneralCategory31
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory32
            Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4
            eta_B1;

GHC.Read.$fReadGeneralCategory30
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory37
            GHC.Read.$fReadGeneralCategory31
            eta_B1;

GHC.Read.$fReadGeneralCategory29
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory41
            GHC.Read.$fReadGeneralCategory30
            eta_B1;

GHC.Read.$fReadGeneralCategory28
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory45
            GHC.Read.$fReadGeneralCategory29
            eta_B1;

GHC.Read.$fReadGeneralCategory27
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory49
            GHC.Read.$fReadGeneralCategory28
            eta_B1;

GHC.Read.$fReadGeneralCategory26
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory53
            GHC.Read.$fReadGeneralCategory27
            eta_B1;

GHC.Read.$fReadGeneralCategory25
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory57
            GHC.Read.$fReadGeneralCategory26
            eta_B1;

GHC.Read.$fReadGeneralCategory24
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory61
            GHC.Read.$fReadGeneralCategory25
            eta_B1;

GHC.Read.$fReadGeneralCategory23
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory65
            GHC.Read.$fReadGeneralCategory24
            eta_B1;

GHC.Read.$fReadGeneralCategory22
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory69
            GHC.Read.$fReadGeneralCategory23
            eta_B1;

GHC.Read.$fReadGeneralCategory21
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory73
            GHC.Read.$fReadGeneralCategory22
            eta_B1;

GHC.Read.$fReadGeneralCategory20
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory77
            GHC.Read.$fReadGeneralCategory21
            eta_B1;

GHC.Read.$fReadGeneralCategory19
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory81
            GHC.Read.$fReadGeneralCategory20
            eta_B1;

GHC.Read.$fReadGeneralCategory18
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory85
            GHC.Read.$fReadGeneralCategory19
            eta_B1;

GHC.Read.$fReadGeneralCategory17
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory89
            GHC.Read.$fReadGeneralCategory18
            eta_B1;

GHC.Read.$fReadGeneralCategory16
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory93
            GHC.Read.$fReadGeneralCategory17
            eta_B1;

GHC.Read.$fReadGeneralCategory15
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory97
            GHC.Read.$fReadGeneralCategory16
            eta_B1;

GHC.Read.$fReadGeneralCategory14
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory101
            GHC.Read.$fReadGeneralCategory15
            eta_B1;

GHC.Read.$fReadGeneralCategory13
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory105
            GHC.Read.$fReadGeneralCategory14
            eta_B1;

GHC.Read.$fReadGeneralCategory12
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory109
            GHC.Read.$fReadGeneralCategory13
            eta_B1;

GHC.Read.$fReadGeneralCategory11
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory113
            GHC.Read.$fReadGeneralCategory12
            eta_B1;

GHC.Read.$fReadGeneralCategory10
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory117
            GHC.Read.$fReadGeneralCategory11
            eta_B1;

GHC.Read.$fReadGeneralCategory9
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory121
            GHC.Read.$fReadGeneralCategory10
            eta_B1;

GHC.Read.$fReadGeneralCategory8
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory125
            GHC.Read.$fReadGeneralCategory9
            eta_B1;

GHC.Read.$fReadGeneralCategory7
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory129
            GHC.Read.$fReadGeneralCategory8
            eta_B1;

GHC.Read.$fReadGeneralCategory6
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory133
            GHC.Read.$fReadGeneralCategory7
            eta_B1;

GHC.Read.$fReadGeneralCategory5
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory137
            GHC.Read.$fReadGeneralCategory6
            eta_B1;

GHC.Read.$fReadGeneralCategory4
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory141
            GHC.Read.$fReadGeneralCategory5
            eta_B1;

GHC.Read.$fReadGeneralCategory3
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory145
            GHC.Read.$fReadGeneralCategory4
            eta_B1;

GHC.Read.$fReadGeneralCategory2
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory149
            GHC.Read.$fReadGeneralCategory3
            eta_B1;

GHC.Read.$fReadGeneralCategory1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Read.list3 GHC.Read.$fReadGeneralCategory2 eta_B2 eta_B1;

GHC.Read.$fReadGeneralCategory_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.Unicode.GeneralCategory
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s3XNR]
        let {
          sat_s3XNS [Occ=Once]
            :: Text.ParserCombinators.ReadP.P GHC.Unicode.GeneralCategory
          [LclId] =
              [n_s3XNR] \u []
                  GHC.Read.list3
                      GHC.Read.$fReadGeneralCategory2
                      n_s3XNR
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XNS;

GHC.Read.$fReadGeneralCategory_$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec
       [GHC.Unicode.GeneralCategory]
[GblId] =
    [] \u [] GHC.Read.list GHC.Read.$fReadGeneralCategory1;

GHC.Read.$fReadGeneralCategory153
  :: Text.ParserCombinators.ReadP.P [GHC.Unicode.GeneralCategory]
[GblId] =
    [] \u []
        GHC.Read.$fReadGeneralCategory_$creadListPrec
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fReadGeneralCategory_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.Unicode.GeneralCategory]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run
            GHC.Read.$fReadGeneralCategory153 eta_B1;

GHC.Read.$fReadGeneralCategory [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.Unicode.GeneralCategory
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fReadGeneralCategory_$creadsPrec
                                    GHC.Read.$fReadGeneralCategory_$creadList
                                    GHC.Read.$fReadGeneralCategory1
                                    GHC.Read.$fReadGeneralCategory_$creadListPrec];

GHC.Read.$fRead()4
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (() -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3XNT k_s3XNU] k_s3XNU GHC.Tuple.();

GHC.Read.$fRead()3
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (() -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m1,
 Unf=OtherCon []] =
    [] \r [w_s3XNV w1_s3XNW]
        case GHC.Read.$wparen' GHC.Read.$fRead()4 w_s3XNV w1_s3XNW of {
          Unit# ww1_s3XNY [Occ=Once] ->
              Text.ParserCombinators.ReadP.Get [ww1_s3XNY];
        };

GHC.Read.$fRead()2
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (() -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m2,
 Unf=OtherCon []] =
    [] \r [eta_s3XNZ eta1_s3XO0]
        case
            GHC.Read.$wskipSpacesThenP GHC.Read.$fRead()3 eta_s3XNZ eta1_s3XO0
        of
        { Unit# ww1_s3XO2 [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3XO2];
        };

GHC.Read.$fRead()1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (() -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Read.list3 GHC.Read.$fRead()2 eta_B2 eta_B1;

GHC.Read.$fRead()_$creadsPrec
  :: GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS ()
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s3XO3]
        let {
          sat_s3XO4 [Occ=Once] :: Text.ParserCombinators.ReadP.P ()
          [LclId] =
              [n_s3XO3] \u []
                  GHC.Read.list3
                      GHC.Read.$fRead()2
                      n_s3XO3
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XO4;

GHC.Read.$fRead()_$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec [()]
[GblId] =
    [] \u [] GHC.Read.list GHC.Read.$fRead()1;

GHC.Read.$fRead()6 :: Text.ParserCombinators.ReadP.P [()]
[GblId] =
    [] \u []
        GHC.Read.$fRead()_$creadListPrec
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fRead()_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [()]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.$fRead()6 eta_B1;

GHC.Read.$fRead() [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read ()
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fRead()_$creadsPrec
                                    GHC.Read.$fRead()_$creadList
                                    GHC.Read.$fRead()1
                                    GHC.Read.$fRead()_$creadListPrec];

GHC.Read.$fReadRatio5 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [8#];

GHC.Read.$fReadRatio4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "%"#;

GHC.Read.$fReadRatio3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Read.$fReadRatio4;

GHC.Read.$fReadRatio2 :: Text.Read.Lex.Lexeme
[GblId, Str=m5, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Symbol! [GHC.Read.$fReadRatio3];

GHC.Read.$fReadRatio1
  :: forall a.
     (GHC.Real.Integral a, GHC.Read.Read a) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Real.Ratio a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=4,
 Str=<L,U(U(U(A,A,C(C1(U)),A,C(U),C(U),C(U)),U(U(C(C1(U)),A),A,A,A,A,A,A,A),A),A,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,1*U(A,A,1*C1(C(U)),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dIntegral_s3XO5 $dRead_s3XO6 eta_s3XO7 eta1_s3XO8]
        let {
          ds1_s3XO9 [Dmd=<L,C(U)>]
            :: Text.ParserCombinators.ReadP.ReadP a_a3KOR
          [LclId] =
              [$dRead_s3XO6] \u []
                  GHC.Read.readPrec $dRead_s3XO6 GHC.Read.$fReadRatio5; } in
        let {
          sat_s3XOo [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (GHC.Real.Ratio a_a3KOR)
          [LclId] =
              [$dIntegral_s3XO5 ds1_s3XO9] \r [c_s3XOa eta2_s3XOb]
                  case c_s3XOa of {
                    GHC.Types.I# x_s3XOd [Occ=Once] ->
                        case <=# [x_s3XOd 7#] of {
                          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                          1# ->
                              let {
                                sat_s3XOn [Occ=Once]
                                  :: a_a3KOR -> Text.ParserCombinators.ReadP.P b1_a3ngn
                                [LclId] =
                                    [$dIntegral_s3XO5 ds1_s3XO9 eta2_s3XOb] \r [a1_s3XOf]
                                        let {
                                          sat_s3XOk [Occ=Once]
                                            :: () -> Text.ParserCombinators.ReadP.P b1_a3ngn
                                          [LclId] =
                                              [$dIntegral_s3XO5
                                               ds1_s3XO9
                                               eta2_s3XOb
                                               a1_s3XOf] \r [a2_s3XOg]
                                                  let {
                                                    sat_s3XOj [Occ=Once]
                                                      :: a_a3KOR
                                                         -> Text.ParserCombinators.ReadP.P b1_a3ngn
                                                    [LclId] =
                                                        [$dIntegral_s3XO5
                                                         eta2_s3XOb
                                                         a1_s3XOf] \r [a3_s3XOh]
                                                            let {
                                                              sat_s3XOi [Occ=Once]
                                                                :: GHC.Real.Ratio a_a3KOR
                                                              [LclId] =
                                                                  [$dIntegral_s3XO5
                                                                   a1_s3XOf
                                                                   a3_s3XOh] \u []
                                                                      GHC.Real.%
                                                                          $dIntegral_s3XO5
                                                                          a1_s3XOf
                                                                          a3_s3XOh;
                                                            } in  eta2_s3XOb sat_s3XOi;
                                                  } in  ds1_s3XO9 sat_s3XOj;
                                        } in 
                                          case
                                              Text.Read.Lex.$wexpect GHC.Read.$fReadRatio2 sat_s3XOk
                                          of
                                          { Unit# ww1_s3XOm [Occ=Once] ->
                                                Text.ParserCombinators.ReadP.Look [ww1_s3XOm];
                                          };
                              } in  ds1_s3XO9 sat_s3XOn;
                        };
                  };
        } in  GHC.Read.list3 sat_s3XOo eta_s3XO7 eta1_s3XO8;

GHC.Read.$fReadRatio_$creadsPrec
  :: forall a.
     (GHC.Real.Integral a, GHC.Read.Read a) =>
     GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS (GHC.Real.Ratio a)
[GblId,
 Arity=3,
 Str=<L,U(U(U(A,A,C(C1(U)),A,C(U),C(U),C(U)),U(U(C(C1(U)),A),A,A,A,A,A,A,A),A),A,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,1*U(A,A,1*C1(C(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dIntegral_s3XOp $dRead_s3XOq n_s3XOr]
        let {
          sat_s3XOs [Occ=Once]
            :: Text.ParserCombinators.ReadP.P (GHC.Real.Ratio a_X3L0L)
          [LclId] =
              [$dIntegral_s3XOp $dRead_s3XOq n_s3XOr] \u []
                  GHC.Read.$fReadRatio1
                      $dIntegral_s3XOp
                      $dRead_s3XOq
                      n_s3XOr
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XOs;

GHC.Read.$fReadRatio_$creadListPrec
  :: forall a.
     (GHC.Real.Integral a, GHC.Read.Read a) =>
     Text.ParserCombinators.ReadPrec.ReadPrec [GHC.Real.Ratio a]
[GblId,
 Arity=2,
 Str=<L,U(U(U(A,A,C(C1(U)),A,C(U),C(U),C(U)),U(U(C(C1(U)),A),A,A,A,A,A,A,A),A),A,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U(A,A,C(C(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dIntegral_s3XOt $dRead_s3XOu]
        let {
          sat_s3XOv [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (GHC.Real.Ratio a_X3L0M)
          [LclId] =
              [$dIntegral_s3XOt $dRead_s3XOu] \r [eta_B2 eta_B1]
                  GHC.Read.$fReadRatio1 $dIntegral_s3XOt $dRead_s3XOu eta_B2 eta_B1;
        } in  GHC.Read.list sat_s3XOv;

GHC.Read.$fReadRatio_$creadList
  :: forall a.
     (GHC.Real.Integral a, GHC.Read.Read a) =>
     Text.ParserCombinators.ReadP.ReadS [GHC.Real.Ratio a]
[GblId,
 Arity=2,
 Str=<L,U(U(U(A,A,C(C1(U)),A,C(U),C(U),C(U)),U(U(C(C1(U)),A),A,A,A,A,A,A,A),A),A,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U(A,A,C(C(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dIntegral_s3XOw $dRead_s3XOx]
        let {
          sat_s3XOz [Occ=Once]
            :: Text.ParserCombinators.ReadP.P [GHC.Real.Ratio a_X3L0N]
          [LclId] =
              [$dIntegral_s3XOw $dRead_s3XOx] \u []
                  let {
                    sat_s3XOy [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec
                           (GHC.Real.Ratio a_X3L0N)
                    [LclId] =
                        [$dIntegral_s3XOw $dRead_s3XOx] \r [eta_B2 eta_B1]
                            GHC.Read.$fReadRatio1 $dIntegral_s3XOw $dRead_s3XOx eta_B2 eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s3XOy
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XOz;

GHC.Read.$fReadRatio [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a.
     (GHC.Real.Integral a, GHC.Read.Read a) =>
     GHC.Read.Read (GHC.Real.Ratio a)
[GblId[DFunId],
 Arity=2,
 Str=<L,U(U(U(A,A,C(C1(U)),A,C(U),C(U),C(U)),U(U(C(C1(U)),A),A,A,A,A,A,A,A),A),A,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U(A,A,C(C(U)),A)>m] =
    [] \r [$dIntegral_s3XOA $dRead_s3XOB]
        let {
          sat_s3XOF [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 [GHC.Real.Ratio a_X3L0O]
          [LclId] =
              [$dIntegral_s3XOA $dRead_s3XOB] \u []
                  GHC.Read.$fReadRatio_$creadListPrec
                      $dIntegral_s3XOA $dRead_s3XOB; } in
        let {
          sat_s3XOE [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (GHC.Real.Ratio a_X3L0O)
          [LclId] =
              [$dIntegral_s3XOA $dRead_s3XOB] \r [eta_B2 eta_B1]
                  GHC.Read.$fReadRatio1
                      $dIntegral_s3XOA $dRead_s3XOB eta_B2 eta_B1; } in
        let {
          sat_s3XOD [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS [GHC.Real.Ratio a_X3L0O]
          [LclId] =
              [$dIntegral_s3XOA $dRead_s3XOB] \u []
                  GHC.Read.$fReadRatio_$creadList $dIntegral_s3XOA $dRead_s3XOB; } in
        let {
          sat_s3XOC [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS (GHC.Real.Ratio a_X3L0O)
          [LclId] =
              [$dIntegral_s3XOA $dRead_s3XOB] \r [eta_B1]
                  GHC.Read.$fReadRatio_$creadsPrec
                      $dIntegral_s3XOA $dRead_s3XOB eta_B1;
        } in  GHC.Read.C:Read [sat_s3XOC sat_s3XOD sat_s3XOE sat_s3XOF];

GHC.Read.$fReadMaybe5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Nothing"#;

GHC.Read.$fReadMaybe4 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Read.$fReadMaybe5;

GHC.Read.$fReadMaybe_lexeme1 :: Text.Read.Lex.Lexeme
[GblId, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Ident! [GHC.Read.$fReadMaybe4];

GHC.Read.$fReadMaybe3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Just"#;

GHC.Read.$fReadMaybe2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Read.$fReadMaybe3;

GHC.Read.$fReadMaybe_lexeme :: Text.Read.Lex.Lexeme
[GblId, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Ident! [GHC.Read.$fReadMaybe2];

GHC.Read.$fReadArray2 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [11#];

GHC.Read.$fReadMaybe1
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Base.Maybe a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=3,
 Str=<L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XOG eta_s3XOH eta1_s3XOI]
        let {
          sat_s3XP1 [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (GHC.Base.Maybe a_a3KVO)
          [LclId] =
              [$dRead_s3XOG] \r [n_s3XOJ eta2_s3XOK]
                  let {
                    sat_s3XOM [Occ=Once]
                      :: () -> Text.ParserCombinators.ReadP.P b1_X3nsy
                    [LclId] =
                        [eta2_s3XOK] \r [a1_s3XOL] eta2_s3XOK GHC.Base.Nothing;
                  } in 
                    case
                        Text.Read.Lex.$wexpect GHC.Read.$fReadMaybe_lexeme1 sat_s3XOM
                    of
                    { Unit# ww1_s3XOO [Occ=Once] ->
                          let {
                            sat_s3XP0 [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_X3nsy
                            [LclId] =
                                [$dRead_s3XOG n_s3XOJ eta2_s3XOK] \u []
                                    case n_s3XOJ of {
                                      GHC.Types.I# x_s3XOR [Occ=Once] ->
                                          case <=# [x_s3XOR 10#] of {
                                            __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                                            1# ->
                                                let {
                                                  sat_s3XOX [Occ=Once]
                                                    :: () -> Text.ParserCombinators.ReadP.P b1_X3nsy
                                                  [LclId] =
                                                      [$dRead_s3XOG eta2_s3XOK] \r [a1_s3XOT]
                                                          let {
                                                            sat_s3XOW [Occ=Once]
                                                              :: a_a3KVO
                                                                 -> Text.ParserCombinators.ReadP.P
                                                                      b1_X3nsy
                                                            [LclId] =
                                                                [eta2_s3XOK] \r [a2_s3XOU]
                                                                    let {
                                                                      sat_s3XOV [Occ=Once]
                                                                        :: GHC.Base.Maybe a_a3KVO
                                                                      [LclId] =
                                                                          CCCS GHC.Base.Just! [a2_s3XOU];
                                                                    } in  eta2_s3XOK sat_s3XOV;
                                                          } in 
                                                            GHC.Read.readPrec
                                                                $dRead_s3XOG
                                                                GHC.Read.$fReadArray2
                                                                sat_s3XOW;
                                                } in 
                                                  case
                                                      Text.Read.Lex.$wexpect
                                                          GHC.Read.$fReadMaybe_lexeme sat_s3XOX
                                                  of
                                                  { Unit# ww3_s3XOZ [Occ=Once] ->
                                                        Text.ParserCombinators.ReadP.Look [ww3_s3XOZ];
                                                  };
                                          };
                                    }; } in
                          let {
                            sat_s3XOP [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_X3nsy
                            [LclId] =
                                CCCS Text.ParserCombinators.ReadP.Look! [ww1_s3XOO];
                          } in 
                            Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                sat_s3XOP sat_s3XP0;
                    };
        } in  GHC.Read.list3 sat_s3XP1 eta_s3XOH eta1_s3XOI;

GHC.Read.$fReadMaybe_$creadsPrec
  :: forall a.
     GHC.Read.Read a =>
     GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS (GHC.Base.Maybe a)
[GblId, Arity=2, Str=<L,U(A,A,C(C1(U)),A)><L,U>, Unf=OtherCon []] =
    [] \r [$dRead_s3XP2 n_s3XP3]
        let {
          sat_s3XP4 [Occ=Once]
            :: Text.ParserCombinators.ReadP.P (GHC.Base.Maybe a_X3L7Q)
          [LclId] =
              [$dRead_s3XP2 n_s3XP3] \u []
                  GHC.Read.$fReadMaybe1
                      $dRead_s3XP2
                      n_s3XP3
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XP4;

GHC.Read.$fReadMaybe_$creadListPrec
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadPrec.ReadPrec [GHC.Base.Maybe a]
[GblId, Arity=1, Str=<L,U(A,A,C(C1(U)),A)>, Unf=OtherCon []] =
    [] \r [$dRead_s3XP5]
        let {
          sat_s3XP6 [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (GHC.Base.Maybe a_X3L7R)
          [LclId] =
              [$dRead_s3XP5] \r [eta_B2 eta_B1]
                  GHC.Read.$fReadMaybe1 $dRead_s3XP5 eta_B2 eta_B1;
        } in  GHC.Read.list sat_s3XP6;

GHC.Read.$fReadMaybe_$creadList
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadP.ReadS [GHC.Base.Maybe a]
[GblId, Arity=1, Str=<L,U(A,A,C(C1(U)),A)>, Unf=OtherCon []] =
    [] \r [$dRead_s3XP7]
        let {
          sat_s3XP9 [Occ=Once]
            :: Text.ParserCombinators.ReadP.P [GHC.Base.Maybe a_X3L7S]
          [LclId] =
              [$dRead_s3XP7] \u []
                  let {
                    sat_s3XP8 [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec
                           (GHC.Base.Maybe a_X3L7S)
                    [LclId] =
                        [$dRead_s3XP7] \r [eta_B2 eta_B1]
                            GHC.Read.$fReadMaybe1 $dRead_s3XP7 eta_B2 eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s3XP8
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XP9;

GHC.Read.$fReadMaybe [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Read.Read a => GHC.Read.Read (GHC.Base.Maybe a)
[GblId[DFunId], Arity=1, Str=<L,U(A,A,C(C1(U)),A)>m] =
    [] \r [$dRead_s3XPa]
        let {
          sat_s3XPe [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 [GHC.Base.Maybe a_X3L7T]
          [LclId] =
              [$dRead_s3XPa] \u []
                  GHC.Read.$fReadMaybe_$creadListPrec $dRead_s3XPa; } in
        let {
          sat_s3XPd [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (GHC.Base.Maybe a_X3L7T)
          [LclId] =
              [$dRead_s3XPa] \r [eta_B2 eta_B1]
                  GHC.Read.$fReadMaybe1 $dRead_s3XPa eta_B2 eta_B1; } in
        let {
          sat_s3XPc [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS [GHC.Base.Maybe a_X3L7T]
          [LclId] =
              [$dRead_s3XPa] \u []
                  GHC.Read.$fReadMaybe_$creadList $dRead_s3XPa; } in
        let {
          sat_s3XPb [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS (GHC.Base.Maybe a_X3L7T)
          [LclId] =
              [$dRead_s3XPa] \r [eta_B1]
                  GHC.Read.$fReadMaybe_$creadsPrec $dRead_s3XPa eta_B1;
        } in  GHC.Read.C:Read [sat_s3XPb sat_s3XPc sat_s3XPd sat_s3XPe];

GHC.Read.$fReadOrdering4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "LT"#;

GHC.Read.$fReadOrdering3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Read.$fReadOrdering4;

GHC.Read.$fReadOrdering6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GT"#;

GHC.Read.$fReadOrdering5 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Read.$fReadOrdering6;

GHC.Read.$fReadOrdering8 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "EQ"#;

GHC.Read.$fReadOrdering7 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Read.$fReadOrdering8;

GHC.Read.$w$creadPrec2 [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (GHC.Types.Ordering -> Text.ParserCombinators.ReadP.P b1)
     -> (# GHC.Base.String -> Text.ParserCombinators.ReadP.P b1 #)
[GblId, Arity=1, Str=<L,C(U)>, Unf=OtherCon []] =
    [] \r [w_s3XPf]
        let {
          lvl116_s3XPg [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3Muw
          [LclId] =
              [w_s3XPf] \u []
                  let {
                    lvl2_s3XPh [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3Muw
                    [LclId] =
                        [w_s3XPf] \u [] w_s3XPf GHC.Types.EQ; } in
                  let {
                    lvl3_s3XPi [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3Muw
                    [LclId] =
                        [w_s3XPf] \u [] w_s3XPf GHC.Types.GT; } in
                  let {
                    lvl4_s3XPj [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3Muw
                    [LclId] =
                        [w_s3XPf] \u [] w_s3XPf GHC.Types.LT; } in
                  let {
                    w2_s3XPk
                      :: Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.P b1_s3Muw
                    [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                        [lvl2_s3XPh lvl3_s3XPi lvl4_s3XPj] \r [a1_s3XPl]
                            case a1_s3XPl of {
                              __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                              Text.Read.Lex.Ident s_s3XPn ->
                                  case GHC.Base.eqString s_s3XPn GHC.Read.$fReadOrdering7 of {
                                    GHC.Types.False ->
                                        case GHC.Base.eqString s_s3XPn GHC.Read.$fReadOrdering5 of {
                                          GHC.Types.False ->
                                              case
                                                  GHC.Base.eqString s_s3XPn GHC.Read.$fReadOrdering3
                                              of
                                              { GHC.Types.False ->
                                                    Text.ParserCombinators.ReadP.Fail [];
                                                GHC.Types.True -> lvl4_s3XPj;
                                              };
                                          GHC.Types.True -> lvl3_s3XPi;
                                        };
                                    GHC.Types.True -> lvl2_s3XPh;
                                  };
                            }; } in
                  let {
                    lvl117_s3XPr [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3Muw
                    [LclId] =
                        [w2_s3XPk] \u [] w2_s3XPk Text.Read.Lex.EOF; } in
                  let {
                    sat_s3XPy [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_s3Muw
                    [LclId] =
                        [w2_s3XPk] \u [] Text.Read.Lex.expect2 w2_s3XPk; } in
                  let {
                    sat_s3XPw [Occ=OnceL]
                      :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3Muw
                    [LclId] =
                        [lvl117_s3XPr] \r [a3_s3XPs]
                            case a3_s3XPs of {
                              [] -> lvl117_s3XPr;
                              : _ [Occ=Dead] _ [Occ=Dead] ->
                                  Text.ParserCombinators.ReadP.Fail [];
                            }; } in
                  let {
                    sat_s3XPx [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_s3Muw
                    [LclId] =
                        CCCS Text.ParserCombinators.ReadP.Look! [sat_s3XPw];
                  } in 
                    Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                        sat_s3XPx sat_s3XPy; } in
        let {
          k_s3XPz [Occ=OnceL, Dmd=<L,C(U)>]
            :: () -> Text.ParserCombinators.ReadP.P b1_s3Muw
          [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
              [lvl116_s3XPg] \r [a3_s3XPA] lvl116_s3XPg; } in
        let {
          sat_s3XPC [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3Muw
          [LclId] =
              [k_s3XPz] \r [a_s3XPB]
                  Text.ParserCombinators.ReadP.skipSpaces2 a_s3XPB k_s3XPz;
        } in  Unit# [sat_s3XPC];

GHC.Read.$fReadOrdering2 [InlPrag=NOUSERINLINE[0]]
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        (GHC.Types.Ordering -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=2, Str=<L,A><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [w_s3XPD w1_s3XPE]
        case GHC.Read.$w$creadPrec2 w1_s3XPE of {
          Unit# ww1_s3XPG [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3XPG];
        };

GHC.Read.$fReadOrdering1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Types.Ordering -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Read.list3 GHC.Read.$fReadOrdering2 eta_B2 eta_B1;

GHC.Read.$fReadOrdering_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.Types.Ordering
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s3XPH]
        let {
          sat_s3XPI [Occ=Once]
            :: Text.ParserCombinators.ReadP.P GHC.Types.Ordering
          [LclId] =
              [n_s3XPH] \u []
                  GHC.Read.list3
                      GHC.Read.$fReadOrdering2
                      n_s3XPH
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XPI;

GHC.Read.$fReadOrdering_$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec [GHC.Types.Ordering]
[GblId] =
    [] \u [] GHC.Read.list GHC.Read.$fReadOrdering1;

GHC.Read.$fReadOrdering9
  :: Text.ParserCombinators.ReadP.P [GHC.Types.Ordering]
[GblId] =
    [] \u []
        GHC.Read.$fReadOrdering_$creadListPrec
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fReadOrdering_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.Types.Ordering]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.$fReadOrdering9 eta_B1;

GHC.Read.$fReadOrdering [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.Types.Ordering
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fReadOrdering_$creadsPrec
                                    GHC.Read.$fReadOrdering_$creadList
                                    GHC.Read.$fReadOrdering1
                                    GHC.Read.$fReadOrdering_$creadListPrec];

GHC.Read.$fReadBool4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "True"#;

GHC.Read.$fReadBool3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Read.$fReadBool4;

GHC.Read.$fReadBool6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "False"#;

GHC.Read.$fReadBool5 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Read.$fReadBool6;

GHC.Read.$w$creadPrec [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (GHC.Types.Bool -> Text.ParserCombinators.ReadP.P b1)
     -> (# GHC.Base.String -> Text.ParserCombinators.ReadP.P b1 #)
[GblId, Arity=1, Str=<L,C(U)>, Unf=OtherCon []] =
    [] \r [w_s3XPJ]
        let {
          lvl116_s3XPK [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3MuE
          [LclId] =
              [w_s3XPJ] \u []
                  let {
                    lvl2_s3XPL [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3MuE
                    [LclId] =
                        [w_s3XPJ] \u [] w_s3XPJ GHC.Types.False; } in
                  let {
                    lvl3_s3XPM [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3MuE
                    [LclId] =
                        [w_s3XPJ] \u [] w_s3XPJ GHC.Types.True; } in
                  let {
                    sat_s3XPX [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_s3MuE
                    [LclId] =
                        [lvl2_s3XPL lvl3_s3XPM] \u []
                            let {
                              sat_s3XPW [Occ=Once]
                                :: Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.P b1_s3MuE
                              [LclId] =
                                  [lvl2_s3XPL lvl3_s3XPM] \r [a1_s3XPR]
                                      case a1_s3XPR of {
                                        __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                                        Text.Read.Lex.Ident s_s3XPT ->
                                            case GHC.Base.eqString s_s3XPT GHC.Read.$fReadBool5 of {
                                              GHC.Types.False ->
                                                  case
                                                      GHC.Base.eqString s_s3XPT GHC.Read.$fReadBool3
                                                  of
                                                  { GHC.Types.False ->
                                                        Text.ParserCombinators.ReadP.Fail [];
                                                    GHC.Types.True -> lvl3_s3XPM;
                                                  };
                                              GHC.Types.True -> lvl2_s3XPL;
                                            };
                                      };
                            } in  Text.Read.Lex.expect2 sat_s3XPW; } in
                  let {
                    sat_s3XPP [Occ=OnceL]
                      :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3MuE
                    [LclId] =
                        [] \r [a3_s3XPN]
                            case a3_s3XPN of {
                              __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                            }; } in
                  let {
                    sat_s3XPQ [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_s3MuE
                    [LclId] =
                        CCCS Text.ParserCombinators.ReadP.Look! [sat_s3XPP];
                  } in 
                    Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                        sat_s3XPQ sat_s3XPX; } in
        let {
          k_s3XPY [Occ=OnceL, Dmd=<L,C(U)>]
            :: () -> Text.ParserCombinators.ReadP.P b1_s3MuE
          [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
              [lvl116_s3XPK] \r [a3_s3XPZ] lvl116_s3XPK; } in
        let {
          sat_s3XQ1 [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3MuE
          [LclId] =
              [k_s3XPY] \r [a_s3XQ0]
                  Text.ParserCombinators.ReadP.skipSpaces2 a_s3XQ0 k_s3XPY;
        } in  Unit# [sat_s3XQ1];

GHC.Read.$fReadBool2 [InlPrag=NOUSERINLINE[0]]
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        (GHC.Types.Bool -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=2, Str=<L,A><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [w_s3XQ2 w1_s3XQ3]
        case GHC.Read.$w$creadPrec w1_s3XQ3 of {
          Unit# ww1_s3XQ5 [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3XQ5];
        };

GHC.Read.$fReadBool1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Types.Bool -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Read.list3 GHC.Read.$fReadBool2 eta_B2 eta_B1;

GHC.Read.$fReadBool_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.Types.Bool
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s3XQ6]
        let {
          sat_s3XQ7 [Occ=Once]
            :: Text.ParserCombinators.ReadP.P GHC.Types.Bool
          [LclId] =
              [n_s3XQ6] \u []
                  GHC.Read.list3
                      GHC.Read.$fReadBool2
                      n_s3XQ6
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XQ7;

GHC.Read.$fReadBool_$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec [GHC.Types.Bool]
[GblId] =
    [] \u [] GHC.Read.list GHC.Read.$fReadBool1;

GHC.Read.$fReadBool7
  :: Text.ParserCombinators.ReadP.P [GHC.Types.Bool]
[GblId] =
    [] \u []
        GHC.Read.$fReadBool_$creadListPrec
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fReadBool_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.Types.Bool]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.$fReadBool7 eta_B1;

GHC.Read.$fReadBool [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.Types.Bool
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fReadBool_$creadsPrec
                                    GHC.Read.$fReadBool_$creadList
                                    GHC.Read.$fReadBool1
                                    GHC.Read.$fReadBool_$creadListPrec];

GHC.Read.$w$creadPrec1 [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> (# GHC.Base.String -> Text.ParserCombinators.ReadP.P b1 #)
[GblId, Arity=1, Str=<L,C(U)>, Unf=OtherCon []] =
    [] \r [w_s3XQ8]
        let {
          lvl116_s3XQ9 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3MuL
          [LclId] =
              [w_s3XQ8] \u []
                  let {
                    sat_s3XQe [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_s3MuL
                    [LclId] =
                        [w_s3XQ8] \u []
                            let {
                              sat_s3XQd [Occ=Once]
                                :: Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.P b1_s3MuL
                              [LclId] =
                                  [w_s3XQ8] \r [a1_s3XQa]
                                      case a1_s3XQa of {
                                        __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                                        Text.Read.Lex.Char c_s3XQc [Occ=Once] -> w_s3XQ8 c_s3XQc;
                                      };
                            } in  Text.Read.Lex.expect2 sat_s3XQd;
                  } in 
                    Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                        GHC.Read.$fReadChar3 sat_s3XQe; } in
        let {
          k_s3XQf [Occ=OnceL, Dmd=<L,C(U)>]
            :: () -> Text.ParserCombinators.ReadP.P b1_s3MuL
          [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
              [lvl116_s3XQ9] \r [a3_s3XQg] lvl116_s3XQ9; } in
        let {
          sat_s3XQi [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3MuL
          [LclId] =
              [k_s3XQf] \r [a_s3XQh]
                  Text.ParserCombinators.ReadP.skipSpaces2 a_s3XQh k_s3XQf;
        } in  Unit# [sat_s3XQi];

GHC.Read.$fReadChar7 [InlPrag=NOUSERINLINE[0]]
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=2, Str=<L,A><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [w_s3XQj w1_s3XQk]
        case GHC.Read.$w$creadPrec1 w1_s3XQk of {
          Unit# ww1_s3XQm [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3XQm];
        };

GHC.Read.$fReadChar6
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Read.list3 GHC.Read.$fReadChar7 eta_B2 eta_B1;

GHC.Read.$fReadInteger2
  :: Text.Read.Lex.Lexeme
     -> Text.ParserCombinators.ReadPrec.ReadPrec
          GHC.Integer.Type.Integer
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3XQn]
        case ds_s3XQn of {
          __DEFAULT ->
              Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4;
          Text.Read.Lex.Number n_s3XQp [Occ=Once] ->
              case Text.Read.Lex.numberToInteger n_s3XQp of {
                GHC.Base.Nothing ->
                    Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4;
                GHC.Base.Just i_s3XQr [Occ=OnceL] ->
                    let {
                      sat_s3XQu [Occ=Once]
                        :: Text.ParserCombinators.ReadPrec.Prec
                           -> forall b.
                              (GHC.Integer.Type.Integer -> Text.ParserCombinators.ReadP.P b)
                              -> Text.ParserCombinators.ReadP.P b
                      [LclId] =
                          [i_s3XQr] \r [ds1_s3XQs k_s3XQt] k_s3XQt i_s3XQr;
                    } in  sat_s3XQu;
              };
        };

GHC.Read.$fReadInteger1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Integer.Type.Integer -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Read.$fReadInteger_$sreadNumber
            GHC.Read.$fReadInteger2 eta_B2 eta_B1;

GHC.Read.$fReadInteger_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.Integer.Type.Integer
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s3XQv]
        let {
          sat_s3XQw [Occ=Once]
            :: Text.ParserCombinators.ReadP.P GHC.Integer.Type.Integer
          [LclId] =
              [n_s3XQv] \u []
                  GHC.Read.$fReadInteger_$sreadNumber
                      GHC.Read.$fReadInteger2
                      n_s3XQv
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XQw;

GHC.Read.$fReadInteger_$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec
       [GHC.Integer.Type.Integer]
[GblId] =
    [] \u [] GHC.Read.list GHC.Read.$fReadInteger1;

GHC.Read.$fReadInteger3
  :: Text.ParserCombinators.ReadP.P [GHC.Integer.Type.Integer]
[GblId] =
    [] \u []
        GHC.Read.$fReadInteger_$creadListPrec
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fReadInteger_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.Integer.Type.Integer]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.$fReadInteger3 eta_B1;

GHC.Read.$fReadInteger [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.Integer.Type.Integer
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fReadInteger_$creadsPrec
                                    GHC.Read.$fReadInteger_$creadList
                                    GHC.Read.$fReadInteger1
                                    GHC.Read.$fReadInteger_$creadListPrec];

GHC.Read.$fReadWord64_go [Occ=LoopBreaker]
  :: [(GHC.Integer.Type.Integer, GHC.Base.String)]
     -> [(GHC.Word.Word64, GHC.Base.String)]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3XQx]
        case ds_s3XQx of {
          [] -> [] [];
          : y_s3XQz [Occ=Once!] ys_s3XQA [Occ=Once] ->
              case y_s3XQz of {
                (,) x_s3XQC [Occ=Once] r_s3XQD [Occ=Once] ->
                    let {
                      sat_s3XQG [Occ=Once] :: [(GHC.Word.Word64, GHC.Base.String)]
                      [LclId] =
                          [ys_s3XQA] \u [] GHC.Read.$fReadWord64_go ys_s3XQA; } in
                    let {
                      sat_s3XQE [Occ=Once] :: GHC.Word.Word64
                      [LclId] =
                          [x_s3XQC] \u [] GHC.Word.$fNumWord64_$cfromInteger x_s3XQC; } in
                    let {
                      sat_s3XQF [Occ=Once] :: (GHC.Word.Word64, GHC.Base.String)
                      [LclId] =
                          CCCS (,)! [sat_s3XQE r_s3XQD];
                    } in  : [sat_s3XQF sat_s3XQG];
              };
        };

GHC.Read.$fReadWord64_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.Word.Word64
[GblId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [p_s3XQH s_s3XQI]
        case
            GHC.Read.$fReadInteger_$sreadNumber
                GHC.Read.$fReadInteger2
                p_s3XQH
                Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
        of
        sat_s3XQJ
        { __DEFAULT ->
              case
                  Text.ParserCombinators.ReadP.run sat_s3XQJ s_s3XQI
              of
              sat_s3XQK
              { __DEFAULT -> GHC.Read.$fReadWord64_go sat_s3XQK;
              };
        };

GHC.Read.$fReadWord13
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Word.Word64 -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,U><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s3XQL eta_s3XQM]
        let {
          sat_s3XQN [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS GHC.Word.Word64
          [LclId] =
              [n_s3XQL] \r [eta_B1]
                  GHC.Read.$fReadWord64_$creadsPrec n_s3XQL eta_B1;
        } in 
          case
              Text.ParserCombinators.ReadP.$wreadS_to_P sat_s3XQN eta_s3XQM
          of
          { Unit# ww1_s3XQP [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3XQP];
          };

GHC.Read.$fReadWord12
  :: Text.ParserCombinators.ReadP.P [GHC.Word.Word64]
[GblId] =
    [] \u []
        GHC.Read.list
            GHC.Read.$fReadWord13
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fReadWord64_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.Word.Word64]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.$fReadWord12 eta_B1;

GHC.Read.$fReadWord11
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        ([GHC.Word.Word64] -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,A><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s3XQQ w1_s3XQR]
        case
            Text.ParserCombinators.ReadP.$wreadS_to_P
                GHC.Read.$fReadWord64_$creadList w1_s3XQR
        of
        { Unit# ww1_s3XQT [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3XQT];
        };

GHC.Read.$fReadWord64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.Word.Word64
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fReadWord64_$creadsPrec
                                    GHC.Read.$fReadWord64_$creadList
                                    GHC.Read.$fReadWord13
                                    GHC.Read.$fReadWord11];

GHC.Read.$fReadWord_go [Occ=LoopBreaker]
  :: [(GHC.Integer.Type.Integer, GHC.Base.String)]
     -> [(GHC.Types.Word, GHC.Base.String)]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3XQU]
        case ds_s3XQU of {
          [] -> [] [];
          : y_s3XQW [Occ=Once!] ys_s3XQX [Occ=Once] ->
              case y_s3XQW of {
                (,) x_s3XQZ [Occ=Once] r_s3XR0 [Occ=Once] ->
                    let {
                      sat_s3XR3 [Occ=Once] :: [(GHC.Types.Word, GHC.Base.String)]
                      [LclId] =
                          [ys_s3XQX] \u [] GHC.Read.$fReadWord_go ys_s3XQX; } in
                    let {
                      sat_s3XR1 [Occ=Once] :: GHC.Types.Word
                      [LclId] =
                          [x_s3XQZ] \u [] GHC.Num.$fNumWord_$cfromInteger x_s3XQZ; } in
                    let {
                      sat_s3XR2 [Occ=Once] :: (GHC.Types.Word, GHC.Base.String)
                      [LclId] =
                          CCCS (,)! [sat_s3XR1 r_s3XR0];
                    } in  : [sat_s3XR2 sat_s3XR3];
              };
        };

GHC.Read.$fReadWord_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.Types.Word
[GblId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [p_s3XR4 s_s3XR5]
        case
            GHC.Read.$fReadInteger_$sreadNumber
                GHC.Read.$fReadInteger2
                p_s3XR4
                Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
        of
        sat_s3XR6
        { __DEFAULT ->
              case
                  Text.ParserCombinators.ReadP.run sat_s3XR6 s_s3XR5
              of
              sat_s3XR7
              { __DEFAULT -> GHC.Read.$fReadWord_go sat_s3XR7;
              };
        };

GHC.Read.$fReadWord3
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Types.Word -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,U><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s3XR8 eta_s3XR9]
        let {
          sat_s3XRa [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS GHC.Types.Word
          [LclId] =
              [n_s3XR8] \r [eta_B1]
                  GHC.Read.$fReadWord_$creadsPrec n_s3XR8 eta_B1;
        } in 
          case
              Text.ParserCombinators.ReadP.$wreadS_to_P sat_s3XRa eta_s3XR9
          of
          { Unit# ww1_s3XRc [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3XRc];
          };

GHC.Read.$fReadWord2
  :: Text.ParserCombinators.ReadP.P [GHC.Types.Word]
[GblId] =
    [] \u []
        GHC.Read.list
            GHC.Read.$fReadWord3
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fReadWord_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.Types.Word]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.$fReadWord2 eta_B1;

GHC.Read.$fReadWord1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        ([GHC.Types.Word] -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,A><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s3XRd w1_s3XRe]
        case
            Text.ParserCombinators.ReadP.$wreadS_to_P
                GHC.Read.$fReadWord_$creadList w1_s3XRe
        of
        { Unit# ww1_s3XRg [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3XRg];
        };

GHC.Read.$fReadWord [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.Types.Word
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fReadWord_$creadsPrec
                                    GHC.Read.$fReadWord_$creadList
                                    GHC.Read.$fReadWord3
                                    GHC.Read.$fReadWord1];

GHC.Read.$fReadInt2
  :: Text.Read.Lex.Lexeme
     -> Text.ParserCombinators.ReadPrec.ReadPrec GHC.Types.Int
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3XRh]
        case ds_s3XRh of {
          __DEFAULT ->
              Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4;
          Text.Read.Lex.Number n_s3XRj [Occ=Once] ->
              case Text.Read.Lex.numberToInteger n_s3XRj of {
                GHC.Base.Nothing ->
                    Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4;
                GHC.Base.Just i_s3XRl [Occ=Once] ->
                    let {
                      x_s3XRm [Occ=OnceL] :: GHC.Types.Int
                      [LclId] =
                          [i_s3XRl] \u []
                              case GHC.Integer.Type.integerToInt i_s3XRl of wild2_s3XRn {
                                __DEFAULT -> GHC.Types.I# [wild2_s3XRn];
                              }; } in
                    let {
                      sat_s3XRq [Occ=Once]
                        :: Text.ParserCombinators.ReadPrec.Prec
                           -> forall b.
                              (GHC.Types.Int -> Text.ParserCombinators.ReadP.P b)
                              -> Text.ParserCombinators.ReadP.P b
                      [LclId] =
                          [x_s3XRm] \r [ds1_s3XRo k_s3XRp] k_s3XRp x_s3XRm;
                    } in  sat_s3XRq;
              };
        };

GHC.Read.$fReadInt1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Types.Int -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Read.$fReadInt_$sreadNumber GHC.Read.$fReadInt2 eta_B2 eta_B1;

GHC.Read.$fReadDouble_x1 :: GHC.Types.Double
[GblId] =
    [] \u []
        case /## [0.0## 0.0##] of wild2_s3XRr {
          __DEFAULT -> GHC.Types.D# [wild2_s3XRr];
        };

GHC.Read.$fReadDouble3
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Types.Double -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,A><C(S),1*C1(U)>, Unf=OtherCon []] =
    [] \r [ds_s3XRs k_s3XRt] k_s3XRt GHC.Read.$fReadDouble_x1;

GHC.Read.$fReadDouble5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "NaN"#;

GHC.Read.$fReadDouble4 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Read.$fReadDouble5;

GHC.Read.$fReadDouble_x :: GHC.Types.Double
[GblId] =
    [] \u []
        case /## [1.0## 0.0##] of wild2_s3XRu {
          __DEFAULT -> GHC.Types.D# [wild2_s3XRu];
        };

GHC.Read.$fReadDouble2
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Types.Double -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,A><C(S),1*C1(U)>, Unf=OtherCon []] =
    [] \r [ds_s3XRv k_s3XRw] k_s3XRw GHC.Read.$fReadDouble_x;

GHC.Read.$fReadDouble7 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Infinity"#;

GHC.Read.$fReadDouble6 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Read.$fReadDouble7;

GHC.Read.$fReadDouble_$sconvertFrac
  :: Text.Read.Lex.Lexeme
     -> Text.ParserCombinators.ReadPrec.ReadPrec GHC.Types.Double
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [eta_s3XRx]
        case eta_s3XRx of {
          __DEFAULT ->
              Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4;
          Text.Read.Lex.Ident ds_s3XRz ->
              case GHC.Base.eqString ds_s3XRz GHC.Read.$fReadDouble6 of {
                GHC.Types.False ->
                    case GHC.Base.eqString ds_s3XRz GHC.Read.$fReadDouble4 of {
                      GHC.Types.False ->
                          Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4;
                      GHC.Types.True -> GHC.Read.$fReadDouble3;
                    };
                GHC.Types.True -> GHC.Read.$fReadDouble2;
              };
          Text.Read.Lex.Number n_s3XRC [Occ=Once] ->
              case
                  Text.Read.Lex.$wnumberToRangedRational
                      GHC.Float.$fRealFloatDouble3 GHC.Float.$fRealFloatDouble2 n_s3XRC
              of
              { GHC.Base.Nothing -> GHC.Read.$fReadDouble2;
                GHC.Base.Just rat_s3XRE [Occ=Once!] ->
                    let {
                      x_s3XRF [Occ=OnceL] :: GHC.Types.Double
                      [LclId] =
                          [rat_s3XRE] \u []
                              case rat_s3XRE of {
                                GHC.Real.:% n1_s3XRH [Occ=Once] d_s3XRI [Occ=Once] ->
                                    GHC.Float.rationalToDouble n1_s3XRH d_s3XRI;
                              }; } in
                    let {
                      sat_s3XRL [Occ=Once]
                        :: Text.ParserCombinators.ReadPrec.Prec
                           -> forall b.
                              (GHC.Types.Double -> Text.ParserCombinators.ReadP.P b)
                              -> Text.ParserCombinators.ReadP.P b
                      [LclId] =
                          [x_s3XRF] \r [ds_s3XRJ k_s3XRK] k_s3XRK x_s3XRF;
                    } in  sat_s3XRL;
              };
        };

GHC.Read.$fReadFloat_x1 :: GHC.Types.Float
[GblId] =
    [] \u []
        case divideFloat# [0.0# 0.0#] of wild2_s3XRM {
          __DEFAULT -> GHC.Types.F# [wild2_s3XRM];
        };

GHC.Read.$fReadFloat3
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Types.Float -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,A><C(S),1*C1(U)>, Unf=OtherCon []] =
    [] \r [ds_s3XRN k_s3XRO] k_s3XRO GHC.Read.$fReadFloat_x1;

GHC.Read.$fReadFloat_x :: GHC.Types.Float
[GblId] =
    [] \u []
        case divideFloat# [1.0# 0.0#] of wild2_s3XRP {
          __DEFAULT -> GHC.Types.F# [wild2_s3XRP];
        };

GHC.Read.$fReadFloat2
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Types.Float -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,A><C(S),1*C1(U)>, Unf=OtherCon []] =
    [] \r [ds_s3XRQ k_s3XRR] k_s3XRR GHC.Read.$fReadFloat_x;

GHC.Read.$fReadFloat_$sconvertFrac
  :: Text.Read.Lex.Lexeme
     -> Text.ParserCombinators.ReadPrec.ReadPrec GHC.Types.Float
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [eta_s3XRS]
        case eta_s3XRS of {
          __DEFAULT ->
              Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4;
          Text.Read.Lex.Ident ds_s3XRU ->
              case GHC.Base.eqString ds_s3XRU GHC.Read.$fReadDouble6 of {
                GHC.Types.False ->
                    case GHC.Base.eqString ds_s3XRU GHC.Read.$fReadDouble4 of {
                      GHC.Types.False ->
                          Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4;
                      GHC.Types.True -> GHC.Read.$fReadFloat3;
                    };
                GHC.Types.True -> GHC.Read.$fReadFloat2;
              };
          Text.Read.Lex.Number n_s3XRX [Occ=Once] ->
              case
                  Text.Read.Lex.$wnumberToRangedRational
                      GHC.Float.$fRealFloatFloat3 GHC.Float.$fRealFloatFloat2 n_s3XRX
              of
              { GHC.Base.Nothing -> GHC.Read.$fReadFloat2;
                GHC.Base.Just rat_s3XRZ [Occ=Once!] ->
                    let {
                      x_s3XS0 [Occ=OnceL] :: GHC.Types.Float
                      [LclId] =
                          [rat_s3XRZ] \u []
                              case rat_s3XRZ of {
                                GHC.Real.:% n1_s3XS2 [Occ=Once] d_s3XS3 [Occ=Once] ->
                                    GHC.Float.rationalToFloat n1_s3XS2 d_s3XS3;
                              }; } in
                    let {
                      sat_s3XS6 [Occ=Once]
                        :: Text.ParserCombinators.ReadPrec.Prec
                           -> forall b.
                              (GHC.Types.Float -> Text.ParserCombinators.ReadP.P b)
                              -> Text.ParserCombinators.ReadP.P b
                      [LclId] =
                          [x_s3XS0] \r [ds_s3XS4 k_s3XS5] k_s3XS5 x_s3XS0;
                    } in  sat_s3XS6;
              };
        };

GHC.Read.$fReadDouble1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Types.Double -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Read.$fReadDouble_$sreadNumber
            GHC.Read.$fReadDouble_$sconvertFrac eta_B2 eta_B1;

GHC.Read.$fReadDouble_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.Types.Double
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s3XS7]
        let {
          sat_s3XS8 [Occ=Once]
            :: Text.ParserCombinators.ReadP.P GHC.Types.Double
          [LclId] =
              [n_s3XS7] \u []
                  GHC.Read.$fReadDouble_$sreadNumber
                      GHC.Read.$fReadDouble_$sconvertFrac
                      n_s3XS7
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XS8;

GHC.Read.$fReadDouble_$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec [GHC.Types.Double]
[GblId] =
    [] \u [] GHC.Read.list GHC.Read.$fReadDouble1;

GHC.Read.$fReadDouble8
  :: Text.ParserCombinators.ReadP.P [GHC.Types.Double]
[GblId] =
    [] \u []
        GHC.Read.$fReadDouble_$creadListPrec
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fReadDouble_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.Types.Double]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.$fReadDouble8 eta_B1;

GHC.Read.$fReadDouble [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.Types.Double
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fReadDouble_$creadsPrec
                                    GHC.Read.$fReadDouble_$creadList
                                    GHC.Read.$fReadDouble1
                                    GHC.Read.$fReadDouble_$creadListPrec];

GHC.Read.$fReadFloat1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Types.Float -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Read.$fReadFloat_$sreadNumber
            GHC.Read.$fReadFloat_$sconvertFrac eta_B2 eta_B1;

GHC.Read.$fReadFloat_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.Types.Float
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s3XS9]
        let {
          sat_s3XSa [Occ=Once]
            :: Text.ParserCombinators.ReadP.P GHC.Types.Float
          [LclId] =
              [n_s3XS9] \u []
                  GHC.Read.$fReadFloat_$sreadNumber
                      GHC.Read.$fReadFloat_$sconvertFrac
                      n_s3XS9
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XSa;

GHC.Read.$fReadFloat_$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec [GHC.Types.Float]
[GblId] =
    [] \u [] GHC.Read.list GHC.Read.$fReadFloat1;

GHC.Read.$fReadFloat4
  :: Text.ParserCombinators.ReadP.P [GHC.Types.Float]
[GblId] =
    [] \u []
        GHC.Read.$fReadFloat_$creadListPrec
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fReadFloat_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.Types.Float]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.$fReadFloat4 eta_B1;

GHC.Read.$fReadFloat [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.Types.Float
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fReadFloat_$creadsPrec
                                    GHC.Read.$fReadFloat_$creadList
                                    GHC.Read.$fReadFloat1
                                    GHC.Read.$fReadFloat_$creadListPrec];

GHC.Read.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.Read.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Read.$trModule4];

GHC.Read.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.Read"#;

GHC.Read.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Read.$trModule2];

GHC.Read.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.Read.$trModule3
                                     GHC.Read.$trModule1];

$krep_r3N5l :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcChar
                                              GHC.Types.[]];

$krep1_r3N5m :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcInt
                                              GHC.Types.[]];

$krep2_r3N5n :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcConstraint
                                              GHC.Types.[]];

$krep3_r3N5o :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r3N5l GHC.Types.[]];

$krep4_r3N5p :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep3_r3N5o];

GHC.Read.$tcRead1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.Types.krep$*
                                         $krep2_r3N5n];

$krep5_r3N5q :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

$krep6_r3N5r :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep4_r3N5p GHC.Types.[]];

$krep7_r3N5s :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep5_r3N5q $krep6_r3N5r];

$krep8_r3N5t :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Tuple.$tc(,)
                                              $krep7_r3N5s];

$krep9_r3N5u :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep8_r3N5t GHC.Types.[]];

$krep10_r3N5v :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep9_r3N5u];

$krep11_r3N5w :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep4_r3N5p $krep10_r3N5v];

$krep12_r3N5x :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep1_r3N5m $krep11_r3N5w];

$krep13_r3N5y :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep5_r3N5q GHC.Types.[]];

$krep14_r3N5z :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep13_r3N5y];

$krep15_r3N5A :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep14_r3N5z $krep6_r3N5r];

$krep16_r3N5B :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Tuple.$tc(,)
                                              $krep15_r3N5A];

$krep17_r3N5C :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep16_r3N5B GHC.Types.[]];

$krep18_r3N5D :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep17_r3N5C];

$krep19_r3N5E :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep4_r3N5p $krep18_r3N5D];

$krep20_r3N5F :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep14_r3N5z GHC.Types.[]];

$krep21_r3N5G :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Text.ParserCombinators.ReadPrec.$tcReadPrec
                                              $krep20_r3N5F];

$krep22_r3N5H :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Text.ParserCombinators.ReadPrec.$tcReadPrec
                                              $krep13_r3N5y];

GHC.Read.$tcRead3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Read"#;

GHC.Read.$tcRead2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Read.$tcRead3];

GHC.Read.$tcRead :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2005723268194049725##
                                    6708234688584993214##
                                    GHC.Read.$trModule
                                    GHC.Read.$tcRead2
                                    0#
                                    GHC.Read.$tcRead1];

$krep23_r3N5I :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Read.$tcRead
                                              $krep13_r3N5y];

$krep24_r3N5J :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep21_r3N5G $krep23_r3N5I];

$krep25_r3N5K :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep22_r3N5H $krep24_r3N5J];

$krep26_r3N5L :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep19_r3N5E $krep25_r3N5K];

GHC.Read.$tc'C:Read1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep12_r3N5x $krep26_r3N5L];

GHC.Read.$tc'C:Read3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'C:Read"#;

GHC.Read.$tc'C:Read2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Read.$tc'C:Read3];

GHC.Read.$tc'C:Read :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [14808553548329602455##
                                    6533111827003124976##
                                    GHC.Read.$trModule
                                    GHC.Read.$tc'C:Read2
                                    1#
                                    GHC.Read.$tc'C:Read1];

GHC.Read.$fReadInt_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.Types.Int
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s3XSb]
        let {
          sat_s3XSc [Occ=Once]
            :: Text.ParserCombinators.ReadP.P GHC.Types.Int
          [LclId] =
              [n_s3XSb] \u []
                  GHC.Read.$fReadInt_$sreadNumber
                      GHC.Read.$fReadInt2
                      n_s3XSb
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XSc;

GHC.Read.$fReadInt_$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec [GHC.Types.Int]
[GblId] =
    [] \u [] GHC.Read.list GHC.Read.$fReadInt1;

GHC.Read.$fReadInt3
  :: Text.ParserCombinators.ReadP.P [GHC.Types.Int]
[GblId] =
    [] \u []
        GHC.Read.$fReadInt_$creadListPrec
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fReadInt_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.Types.Int]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.$fReadInt3 eta_B1;

GHC.Read.$fReadInt [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.Types.Int
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fReadInt_$creadsPrec
                                    GHC.Read.$fReadInt_$creadList
                                    GHC.Read.$fReadInt1
                                    GHC.Read.$fReadInt_$creadListPrec];

GHC.Read.$fReadWord32_go [Occ=LoopBreaker]
  :: [(GHC.Types.Int, GHC.Base.String)]
     -> [(GHC.Word.Word32, GHC.Base.String)]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3XSd]
        case ds_s3XSd of {
          [] -> [] [];
          : y_s3XSf [Occ=Once!] ys_s3XSg [Occ=Once] ->
              case y_s3XSf of {
                (,) x_s3XSi [Occ=Once!] r_s3XSj [Occ=Once] ->
                    let {
                      sat_s3XSq [Occ=Once] :: [(GHC.Word.Word32, GHC.Base.String)]
                      [LclId] =
                          [ys_s3XSg] \u [] GHC.Read.$fReadWord32_go ys_s3XSg; } in
                    let {
                      sat_s3XSo [Occ=Once] :: GHC.Word.Word32
                      [LclId] =
                          [x_s3XSi] \u []
                              case x_s3XSi of {
                                GHC.Types.I# x#_s3XSl [Occ=Once] ->
                                    case int2Word# [x#_s3XSl] of sat_s3XSm {
                                      __DEFAULT ->
                                          case narrow32Word# [sat_s3XSm] of sat_s3XSn {
                                            __DEFAULT -> GHC.Word.W32# [sat_s3XSn];
                                          };
                                    };
                              }; } in
                    let {
                      sat_s3XSp [Occ=Once] :: (GHC.Word.Word32, GHC.Base.String)
                      [LclId] =
                          CCCS (,)! [sat_s3XSo r_s3XSj];
                    } in  : [sat_s3XSp sat_s3XSq];
              };
        };

GHC.Read.$fReadWord32_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.Word.Word32
[GblId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [p_s3XSr s_s3XSs]
        case
            GHC.Read.$fReadInt_$sreadNumber
                GHC.Read.$fReadInt2
                p_s3XSr
                Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
        of
        sat_s3XSt
        { __DEFAULT ->
              case
                  Text.ParserCombinators.ReadP.run sat_s3XSt s_s3XSs
              of
              sat_s3XSu
              { __DEFAULT -> GHC.Read.$fReadWord32_go sat_s3XSu;
              };
        };

GHC.Read.$fReadWord10
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Word.Word32 -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,U><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s3XSv eta_s3XSw]
        let {
          sat_s3XSx [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS GHC.Word.Word32
          [LclId] =
              [n_s3XSv] \r [eta_B1]
                  GHC.Read.$fReadWord32_$creadsPrec n_s3XSv eta_B1;
        } in 
          case
              Text.ParserCombinators.ReadP.$wreadS_to_P sat_s3XSx eta_s3XSw
          of
          { Unit# ww1_s3XSz [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3XSz];
          };

GHC.Read.$fReadWord9
  :: Text.ParserCombinators.ReadP.P [GHC.Word.Word32]
[GblId] =
    [] \u []
        GHC.Read.list
            GHC.Read.$fReadWord10
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fReadWord32_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.Word.Word32]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.$fReadWord9 eta_B1;

GHC.Read.$fReadWord7
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        ([GHC.Word.Word32] -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,A><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s3XSA w1_s3XSB]
        case
            Text.ParserCombinators.ReadP.$wreadS_to_P
                GHC.Read.$fReadWord32_$creadList w1_s3XSB
        of
        { Unit# ww1_s3XSD [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3XSD];
        };

GHC.Read.$fReadWord32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.Word.Word32
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fReadWord32_$creadsPrec
                                    GHC.Read.$fReadWord32_$creadList
                                    GHC.Read.$fReadWord10
                                    GHC.Read.$fReadWord7];

GHC.Read.$fReadWord16_go [Occ=LoopBreaker]
  :: [(GHC.Types.Int, GHC.Base.String)]
     -> [(GHC.Word.Word16, GHC.Base.String)]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3XSE]
        case ds_s3XSE of {
          [] -> [] [];
          : y_s3XSG [Occ=Once!] ys_s3XSH [Occ=Once] ->
              case y_s3XSG of {
                (,) x_s3XSJ [Occ=Once!] r_s3XSK [Occ=Once] ->
                    let {
                      sat_s3XSR [Occ=Once] :: [(GHC.Word.Word16, GHC.Base.String)]
                      [LclId] =
                          [ys_s3XSH] \u [] GHC.Read.$fReadWord16_go ys_s3XSH; } in
                    let {
                      sat_s3XSP [Occ=Once] :: GHC.Word.Word16
                      [LclId] =
                          [x_s3XSJ] \u []
                              case x_s3XSJ of {
                                GHC.Types.I# x#_s3XSM [Occ=Once] ->
                                    case int2Word# [x#_s3XSM] of sat_s3XSN {
                                      __DEFAULT ->
                                          case narrow16Word# [sat_s3XSN] of sat_s3XSO {
                                            __DEFAULT -> GHC.Word.W16# [sat_s3XSO];
                                          };
                                    };
                              }; } in
                    let {
                      sat_s3XSQ [Occ=Once] :: (GHC.Word.Word16, GHC.Base.String)
                      [LclId] =
                          CCCS (,)! [sat_s3XSP r_s3XSK];
                    } in  : [sat_s3XSQ sat_s3XSR];
              };
        };

GHC.Read.$fReadWord16_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.Word.Word16
[GblId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [p_s3XSS s_s3XST]
        case
            GHC.Read.$fReadInt_$sreadNumber
                GHC.Read.$fReadInt2
                p_s3XSS
                Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
        of
        sat_s3XSU
        { __DEFAULT ->
              case
                  Text.ParserCombinators.ReadP.run sat_s3XSU s_s3XST
              of
              sat_s3XSV
              { __DEFAULT -> GHC.Read.$fReadWord16_go sat_s3XSV;
              };
        };

GHC.Read.$fReadWord6
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Word.Word16 -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,U><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s3XSW eta_s3XSX]
        let {
          sat_s3XSY [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS GHC.Word.Word16
          [LclId] =
              [n_s3XSW] \r [eta_B1]
                  GHC.Read.$fReadWord16_$creadsPrec n_s3XSW eta_B1;
        } in 
          case
              Text.ParserCombinators.ReadP.$wreadS_to_P sat_s3XSY eta_s3XSX
          of
          { Unit# ww1_s3XT0 [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3XT0];
          };

GHC.Read.$fReadWord5
  :: Text.ParserCombinators.ReadP.P [GHC.Word.Word16]
[GblId] =
    [] \u []
        GHC.Read.list
            GHC.Read.$fReadWord6
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fReadWord16_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.Word.Word16]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.$fReadWord5 eta_B1;

GHC.Read.$fReadWord4
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        ([GHC.Word.Word16] -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,A><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s3XT1 w1_s3XT2]
        case
            Text.ParserCombinators.ReadP.$wreadS_to_P
                GHC.Read.$fReadWord16_$creadList w1_s3XT2
        of
        { Unit# ww1_s3XT4 [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3XT4];
        };

GHC.Read.$fReadWord16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.Word.Word16
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fReadWord16_$creadsPrec
                                    GHC.Read.$fReadWord16_$creadList
                                    GHC.Read.$fReadWord6
                                    GHC.Read.$fReadWord4];

GHC.Read.$fReadWord8_go [Occ=LoopBreaker]
  :: [(GHC.Types.Int, GHC.Base.String)]
     -> [(GHC.Word.Word8, GHC.Base.String)]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3XT5]
        case ds_s3XT5 of {
          [] -> [] [];
          : y_s3XT7 [Occ=Once!] ys_s3XT8 [Occ=Once] ->
              case y_s3XT7 of {
                (,) x_s3XTa [Occ=Once!] r_s3XTb [Occ=Once] ->
                    let {
                      sat_s3XTi [Occ=Once] :: [(GHC.Word.Word8, GHC.Base.String)]
                      [LclId] =
                          [ys_s3XT8] \u [] GHC.Read.$fReadWord8_go ys_s3XT8; } in
                    let {
                      sat_s3XTg [Occ=Once] :: GHC.Word.Word8
                      [LclId] =
                          [x_s3XTa] \u []
                              case x_s3XTa of {
                                GHC.Types.I# x#_s3XTd [Occ=Once] ->
                                    case int2Word# [x#_s3XTd] of sat_s3XTe {
                                      __DEFAULT ->
                                          case narrow8Word# [sat_s3XTe] of sat_s3XTf {
                                            __DEFAULT -> GHC.Word.W8# [sat_s3XTf];
                                          };
                                    };
                              }; } in
                    let {
                      sat_s3XTh [Occ=Once] :: (GHC.Word.Word8, GHC.Base.String)
                      [LclId] =
                          CCCS (,)! [sat_s3XTg r_s3XTb];
                    } in  : [sat_s3XTh sat_s3XTi];
              };
        };

GHC.Read.$fReadWord8_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.Word.Word8
[GblId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [p_s3XTj s_s3XTk]
        case
            GHC.Read.$fReadInt_$sreadNumber
                GHC.Read.$fReadInt2
                p_s3XTj
                Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
        of
        sat_s3XTl
        { __DEFAULT ->
              case
                  Text.ParserCombinators.ReadP.run sat_s3XTl s_s3XTk
              of
              sat_s3XTm
              { __DEFAULT -> GHC.Read.$fReadWord8_go sat_s3XTm;
              };
        };

GHC.Read.$fReadWord17
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Word.Word8 -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,U><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s3XTn eta_s3XTo]
        let {
          sat_s3XTp [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS GHC.Word.Word8
          [LclId] =
              [n_s3XTn] \r [eta_B1]
                  GHC.Read.$fReadWord8_$creadsPrec n_s3XTn eta_B1;
        } in 
          case
              Text.ParserCombinators.ReadP.$wreadS_to_P sat_s3XTp eta_s3XTo
          of
          { Unit# ww1_s3XTr [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3XTr];
          };

GHC.Read.$fReadWord15
  :: Text.ParserCombinators.ReadP.P [GHC.Word.Word8]
[GblId] =
    [] \u []
        GHC.Read.list
            GHC.Read.$fReadWord17
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fReadWord8_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.Word.Word8]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.$fReadWord15 eta_B1;

GHC.Read.$fReadWord14
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        ([GHC.Word.Word8] -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,A><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s3XTs w1_s3XTt]
        case
            Text.ParserCombinators.ReadP.$wreadS_to_P
                GHC.Read.$fReadWord8_$creadList w1_s3XTt
        of
        { Unit# ww1_s3XTv [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3XTv];
        };

GHC.Read.$fReadWord8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.Word.Word8
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fReadWord8_$creadsPrec
                                    GHC.Read.$fReadWord8_$creadList
                                    GHC.Read.$fReadWord17
                                    GHC.Read.$fReadWord14];

GHC.Read.$fReadChar_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.Types.Char
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s3XTw]
        let {
          sat_s3XTx [Occ=Once]
            :: Text.ParserCombinators.ReadP.P GHC.Types.Char
          [LclId] =
              [n_s3XTw] \u []
                  GHC.Read.list3
                      GHC.Read.$fReadChar7
                      n_s3XTw
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XTx;

GHC.Read.$fReadChar5
  :: Text.ParserCombinators.ReadPrec.ReadPrec [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.Read.list GHC.Read.$fReadChar6;

GHC.Read.$fReadChar2
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Base.String
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s3XTy]
        let {
          ds3_s3XTz [Occ=OnceL, Dmd=<L,C(U)>]
            :: Text.ParserCombinators.ReadP.ReadP GHC.Base.String
          [LclId] =
              [n_s3XTy] \u [] GHC.Read.$fReadChar5 n_s3XTy; } in
        let {
          sat_s3XTN [Occ=Once]
            :: forall b.
               (GHC.Base.String -> Text.ParserCombinators.ReadP.P b)
               -> Text.ParserCombinators.ReadP.P b
          [LclId] =
              [ds3_s3XTz] \r [k_s3XTA]
                  let {
                    lvl116_s3XTB [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b_a3nvJ
                    [LclId] =
                        [k_s3XTA] \u []
                            let {
                              sat_s3XTG [Occ=Once] :: Text.ParserCombinators.ReadP.P b_a3nvJ
                              [LclId] =
                                  [k_s3XTA] \u []
                                      let {
                                        sat_s3XTF [Occ=Once]
                                          :: Text.Read.Lex.Lexeme
                                             -> Text.ParserCombinators.ReadP.P b_a3nvJ
                                        [LclId] =
                                            [k_s3XTA] \r [a1_s3XTC]
                                                case a1_s3XTC of {
                                                  __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                                                  Text.Read.Lex.String s_s3XTE [Occ=Once] ->
                                                      k_s3XTA s_s3XTE;
                                                };
                                      } in  Text.Read.Lex.expect2 sat_s3XTF;
                            } in 
                              Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                  GHC.Read.$fReadChar3 sat_s3XTG; } in
                  let {
                    k1_s3XTH [Occ=OnceL, Dmd=<L,C(U)>]
                      :: () -> Text.ParserCombinators.ReadP.P b_a3nvJ
                    [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
                        [lvl116_s3XTB] \r [a3_s3XTI] lvl116_s3XTB; } in
                  let {
                    sat_s3XTM [Occ=Once] :: Text.ParserCombinators.ReadP.P b_a3nvJ
                    [LclId] =
                        [ds3_s3XTz k_s3XTA] \u [] ds3_s3XTz k_s3XTA; } in
                  let {
                    sat_s3XTK [Occ=Once]
                      :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b_a3nvJ
                    [LclId] =
                        [k1_s3XTH] \r [a_s3XTJ]
                            Text.ParserCombinators.ReadP.skipSpaces2 a_s3XTJ k1_s3XTH; } in
                  let {
                    sat_s3XTL [Occ=Once] :: Text.ParserCombinators.ReadP.P b_a3nvJ
                    [LclId] =
                        CCCS Text.ParserCombinators.ReadP.Look! [sat_s3XTK];
                  } in 
                    Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                        sat_s3XTL sat_s3XTM;
        } in  sat_s3XTN;

GHC.Read.$fReadChar1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Base.String -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Read.list3 GHC.Read.$fReadChar2 eta_B2 eta_B1;

GHC.Read.$fReadChar8
  :: Text.ParserCombinators.ReadP.P [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.Read.list3
            GHC.Read.$fReadChar2
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fReadChar_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.Types.Char]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.$fReadChar8 eta_B1;

GHC.Read.$fReadChar [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.Types.Char
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fReadChar_$creadsPrec
                                    GHC.Read.$fReadChar_$creadList
                                    GHC.Read.$fReadChar6
                                    GHC.Read.$fReadChar1];

GHC.Read.$fRead[]_$s$creadListPrec1
  :: Text.ParserCombinators.ReadPrec.ReadPrec [[GHC.Types.Char]]
[GblId] =
    [] \u [] GHC.Read.list GHC.Read.$fReadChar1;

GHC.Read.$fRead[]2
  :: Text.ParserCombinators.ReadP.P [[GHC.Types.Char]]
[GblId] =
    [] \u []
        GHC.Read.$fRead[]_$s$creadListPrec1
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fRead[]_$s$creadList1
  :: Text.ParserCombinators.ReadP.ReadS [[GHC.Types.Char]]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.$fRead[]2 eta_B1;

GHC.Read.$fRead[]_$s$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec [[GHC.Types.Int]]
[GblId] =
    [] \u [] GHC.Read.list GHC.Read.$fReadInt_$creadListPrec;

GHC.Read.$fRead[]1
  :: Text.ParserCombinators.ReadP.P [[GHC.Types.Int]]
[GblId] =
    [] \u []
        GHC.Read.$fRead[]_$s$creadListPrec
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fRead[]_$s$creadList
  :: Text.ParserCombinators.ReadP.ReadS [[GHC.Types.Int]]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.$fRead[]1 eta_B1;

GHC.Read.$fRead[]_$s$creadsPrec1
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS [GHC.Types.Char]
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s3XTO]
        let {
          sat_s3XTP [Occ=Once]
            :: Text.ParserCombinators.ReadP.P [GHC.Types.Char]
          [LclId] =
              [n_s3XTO] \u []
                  GHC.Read.list3
                      GHC.Read.$fReadChar2
                      n_s3XTO
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XTP;

GHC.Read.$fRead[]_$s$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS [GHC.Types.Int]
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s3XTQ]
        let {
          sat_s3XTR [Occ=Once]
            :: Text.ParserCombinators.ReadP.P [GHC.Types.Int]
          [LclId] =
              [n_s3XTQ] \u []
                  GHC.Read.$fReadInt_$creadListPrec
                      n_s3XTQ Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XTR;

GHC.Read.$fRead[]_$s$fRead[] [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read [GHC.Types.Int]
[GblId, Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fRead[]_$s$creadsPrec
                                    GHC.Read.$fRead[]_$s$creadList
                                    GHC.Read.$fReadInt_$creadListPrec
                                    GHC.Read.$fRead[]_$s$creadListPrec];

GHC.Read.$fRead[]_$s$fRead[]1 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read [GHC.Types.Char]
[GblId, Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fRead[]_$s$creadsPrec1
                                    GHC.Read.$fRead[]_$s$creadList1
                                    GHC.Read.$fReadChar1
                                    GHC.Read.$fRead[]_$s$creadListPrec1];

GHC.Read.$fRead[]_$s$creadsPrec2
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS [GHC.Base.String]
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s3XTS]
        let {
          sat_s3XTT [Occ=Once]
            :: Text.ParserCombinators.ReadP.P [GHC.Base.String]
          [LclId] =
              [n_s3XTS] \u []
                  GHC.Read.$fRead[]_$s$creadListPrec1
                      n_s3XTS Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XTT;

GHC.Read.$fRead[]_$creadsPrec
  :: forall a.
     GHC.Read.Read a =>
     GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS [a]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*U(A,A,A,1*C1(C1(U)))><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XTU eta_s3XTV]
        let {
          sat_s3XTW [Occ=Once] :: Text.ParserCombinators.ReadP.P [a_a3KVb]
          [LclId] =
              [$dRead_s3XTU eta_s3XTV] \u []
                  GHC.Read.readListPrec
                      $dRead_s3XTU
                      eta_s3XTV
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XTW;

GHC.Read.$fRead[]_$s$creadListPrec2
  :: Text.ParserCombinators.ReadPrec.ReadPrec [[GHC.Base.String]]
[GblId] =
    [] \u [] GHC.Read.list GHC.Read.$fRead[]_$s$creadListPrec1;

GHC.Read.$fRead[]_$creadListPrec
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadPrec.ReadPrec [[a]]
[GblId, Arity=1, Str=<L,1*U(A,A,A,1*C1(C(U)))>, Unf=OtherCon []] =
    [] \r [$dRead_s3XTX]
        let {
          sat_s3XTY [Occ=Once, Dmd=<L,1*C1(C(U))>]
            :: Text.ParserCombinators.ReadPrec.ReadPrec [a_a3KVb]
          [LclId] =
              [$dRead_s3XTX] \s [] GHC.Read.readListPrec $dRead_s3XTX;
        } in  GHC.Read.list sat_s3XTY;

GHC.Read.$fRead[]3
  :: Text.ParserCombinators.ReadP.P [[GHC.Base.String]]
[GblId] =
    [] \u []
        GHC.Read.$fRead[]_$s$creadListPrec2
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fRead[]_$s$creadList2
  :: Text.ParserCombinators.ReadP.ReadS [[GHC.Base.String]]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.$fRead[]3 eta_B1;

GHC.Read.$fRead[]_$s$fRead[]2 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read [GHC.Base.String]
[GblId, Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fRead[]_$s$creadsPrec2
                                    GHC.Read.$fRead[]_$s$creadList2
                                    GHC.Read.$fRead[]_$s$creadListPrec1
                                    GHC.Read.$fRead[]_$s$creadListPrec2];

GHC.Read.$fRead[]_$creadList
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadP.ReadS [[a]]
[GblId, Arity=1, Str=<L,1*U(A,A,A,1*C1(C(U)))>, Unf=OtherCon []] =
    [] \r [$dRead_s3XTZ]
        let {
          sat_s3XU1 [Occ=Once] :: Text.ParserCombinators.ReadP.P [[a_a3KVb]]
          [LclId] =
              [$dRead_s3XTZ] \u []
                  let {
                    sat_s3XU0 [Occ=Once, Dmd=<L,1*C1(C(U))>]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec [a_a3KVb]
                    [LclId] =
                        [$dRead_s3XTZ] \s [] GHC.Read.readListPrec $dRead_s3XTZ;
                  } in 
                    GHC.Read.list
                        sat_s3XU0
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XU1;

GHC.Read.$fRead[] [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Read.Read a => GHC.Read.Read [a]
[GblId[DFunId], Arity=1, Str=<L,U(A,A,A,U)>m] =
    [] \r [$dRead_s3XU2]
        let {
          sat_s3XU6 [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec [[a_a3KVb]]
          [LclId] =
              [$dRead_s3XU2] \u []
                  GHC.Read.$fRead[]_$creadListPrec $dRead_s3XU2; } in
        let {
          sat_s3XU5 [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec [a_a3KVb]
          [LclId] =
              [$dRead_s3XU2] \u [] GHC.Read.readListPrec $dRead_s3XU2; } in
        let {
          sat_s3XU4 [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS [[a_a3KVb]]
          [LclId] =
              [$dRead_s3XU2] \u []
                  GHC.Read.$fRead[]_$creadList $dRead_s3XU2; } in
        let {
          sat_s3XU3 [Occ=Once]
            :: GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS [a_a3KVb]
          [LclId] =
              [$dRead_s3XU2] \r [eta_B1]
                  GHC.Read.$fRead[]_$creadsPrec $dRead_s3XU2 eta_B1;
        } in  GHC.Read.C:Read [sat_s3XU3 sat_s3XU4 sat_s3XU5 sat_s3XU6];

GHC.Read.$fReadNonEmpty5 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [6#];

GHC.Read.$fReadNonEmpty4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ":|"#;

GHC.Read.$fReadNonEmpty3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Read.$fReadNonEmpty4;

GHC.Read.$fReadNonEmpty2 :: Text.Read.Lex.Lexeme
[GblId, Str=m5, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Symbol! [GHC.Read.$fReadNonEmpty3];

GHC.Read.$fReadNonEmpty1
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Base.NonEmpty a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=3,
 Str=<L,U(A,A,1*C1(C(U)),C(C1(U)))><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XU7 eta_s3XU8 eta1_s3XU9]
        let {
          ds1_s3XUa [Occ=OnceL, Dmd=<L,C(U)>]
            :: Text.ParserCombinators.ReadP.ReadP a_a3Ktx
          [LclId] =
              [$dRead_s3XU7] \u []
                  GHC.Read.readPrec $dRead_s3XU7 GHC.Read.$fReadNonEmpty5; } in
        let {
          sat_s3XUp [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (GHC.Base.NonEmpty a_a3Ktx)
          [LclId] =
              [$dRead_s3XU7 ds1_s3XUa] \r [c_s3XUb eta2_s3XUc]
                  case c_s3XUb of {
                    GHC.Types.I# x_s3XUe [Occ=Once] ->
                        case <=# [x_s3XUe 5#] of {
                          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                          1# ->
                              let {
                                sat_s3XUo [Occ=Once]
                                  :: a_a3Ktx -> Text.ParserCombinators.ReadP.P b1_X3nwX
                                [LclId] =
                                    [$dRead_s3XU7 eta2_s3XUc] \r [a1_s3XUg]
                                        let {
                                          sat_s3XUl [Occ=Once]
                                            :: () -> Text.ParserCombinators.ReadP.P b1_X3nwX
                                          [LclId] =
                                              [$dRead_s3XU7 eta2_s3XUc a1_s3XUg] \r [a2_s3XUh]
                                                  let {
                                                    sat_s3XUk [Occ=Once]
                                                      :: [a_a3Ktx]
                                                         -> Text.ParserCombinators.ReadP.P b1_X3nwX
                                                    [LclId] =
                                                        [eta2_s3XUc a1_s3XUg] \r [a3_s3XUi]
                                                            let {
                                                              sat_s3XUj [Occ=Once]
                                                                :: GHC.Base.NonEmpty a_a3Ktx
                                                              [LclId] =
                                                                  CCCS GHC.Base.:|! [a1_s3XUg
                                                                                     a3_s3XUi];
                                                            } in  eta2_s3XUc sat_s3XUj;
                                                  } in 
                                                    GHC.Read.readListPrec
                                                        $dRead_s3XU7
                                                        GHC.Read.$fReadNonEmpty5
                                                        sat_s3XUk;
                                        } in 
                                          case
                                              Text.Read.Lex.$wexpect
                                                  GHC.Read.$fReadNonEmpty2 sat_s3XUl
                                          of
                                          { Unit# ww1_s3XUn [Occ=Once] ->
                                                Text.ParserCombinators.ReadP.Look [ww1_s3XUn];
                                          };
                              } in  ds1_s3XUa sat_s3XUo;
                        };
                  };
        } in  GHC.Read.list3 sat_s3XUp eta_s3XU8 eta1_s3XU9;

GHC.Read.$fReadNonEmpty_$creadsPrec
  :: forall a.
     GHC.Read.Read a =>
     GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS (GHC.Base.NonEmpty a)
[GblId,
 Arity=2,
 Str=<L,U(A,A,C(C(U)),C(C1(U)))><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XUq eta_s3XUr]
        let {
          sat_s3XUs [Occ=Once]
            :: Text.ParserCombinators.ReadP.P (GHC.Base.NonEmpty a_X3KIs)
          [LclId] =
              [$dRead_s3XUq eta_s3XUr] \u []
                  GHC.Read.$fReadNonEmpty1
                      $dRead_s3XUq
                      eta_s3XUr
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XUs;

GHC.Read.$fReadNonEmpty_$creadListPrec
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadPrec.ReadPrec [GHC.Base.NonEmpty a]
[GblId,
 Arity=1,
 Str=<L,U(A,A,C(C(U)),C(C1(U)))>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XUt]
        let {
          sat_s3XUu [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (GHC.Base.NonEmpty a_X3KIt)
          [LclId] =
              [$dRead_s3XUt] \r [eta_B2 eta_B1]
                  GHC.Read.$fReadNonEmpty1 $dRead_s3XUt eta_B2 eta_B1;
        } in  GHC.Read.list sat_s3XUu;

GHC.Read.$fReadNonEmpty_$creadList
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadP.ReadS [GHC.Base.NonEmpty a]
[GblId,
 Arity=1,
 Str=<L,U(A,A,C(C(U)),C(C1(U)))>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XUv]
        let {
          sat_s3XUx [Occ=Once]
            :: Text.ParserCombinators.ReadP.P [GHC.Base.NonEmpty a_X3KIu]
          [LclId] =
              [$dRead_s3XUv] \u []
                  let {
                    sat_s3XUw [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec
                           (GHC.Base.NonEmpty a_X3KIu)
                    [LclId] =
                        [$dRead_s3XUv] \r [eta_B2 eta_B1]
                            GHC.Read.$fReadNonEmpty1 $dRead_s3XUv eta_B2 eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s3XUw
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XUx;

GHC.Read.$fReadNonEmpty [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Read.Read a => GHC.Read.Read (GHC.Base.NonEmpty a)
[GblId[DFunId], Arity=1, Str=<L,U(A,A,C(C(U)),C(C1(U)))>m] =
    [] \r [$dRead_s3XUy]
        let {
          sat_s3XUC [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 [GHC.Base.NonEmpty a_X3KIv]
          [LclId] =
              [$dRead_s3XUy] \u []
                  GHC.Read.$fReadNonEmpty_$creadListPrec $dRead_s3XUy; } in
        let {
          sat_s3XUB [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (GHC.Base.NonEmpty a_X3KIv)
          [LclId] =
              [$dRead_s3XUy] \r [eta_B2 eta_B1]
                  GHC.Read.$fReadNonEmpty1 $dRead_s3XUy eta_B2 eta_B1; } in
        let {
          sat_s3XUA [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS [GHC.Base.NonEmpty a_X3KIv]
          [LclId] =
              [$dRead_s3XUy] \u []
                  GHC.Read.$fReadNonEmpty_$creadList $dRead_s3XUy; } in
        let {
          sat_s3XUz [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS (GHC.Base.NonEmpty a_X3KIv)
          [LclId] =
              [$dRead_s3XUy] \r [eta_B1]
                  GHC.Read.$fReadNonEmpty_$creadsPrec $dRead_s3XUy eta_B1;
        } in  GHC.Read.C:Read [sat_s3XUz sat_s3XUA sat_s3XUB sat_s3XUC];

GHC.Read.$fReadArray4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "array"#;

GHC.Read.$fReadArray3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Read.$fReadArray4;

GHC.Read.$fReadArray_lexeme :: Text.Read.Lex.Lexeme
[GblId, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Ident! [GHC.Read.$fReadArray3];

GHC.Read.$fReadArray1
  :: forall a b.
     (GHC.Arr.Ix a, GHC.Read.Read a, GHC.Read.Read b) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        (GHC.Arr.Array a b -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=5,
 Str=<L,U(A,A,C(C1(U(U))),A,A,C(U(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dIx_s3XUD $dRead_s3XUE $dRead1_s3XUF eta_s3XUG eta1_s3XUH]
        let {
          lvl2_s3XUI [Occ=OnceL, Dmd=<L,C(C(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> forall b2.
                  ((a_a3KUf, b_a3KUg) -> Text.ParserCombinators.ReadP.P b2)
                  -> Text.ParserCombinators.ReadP.P b2
          [LclId, Arity=2, Unf=OtherCon []] =
              [$dRead_s3XUE $dRead1_s3XUF] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,)1 $dRead_s3XUE $dRead1_s3XUF eta_B2 eta_B1; } in
        let {
          sat_s3XUX [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (GHC.Arr.Array a_a3KUf b_a3KUg)
          [LclId] =
              [$dIx_s3XUD $dRead_s3XUE lvl2_s3XUI] \r [c_s3XUJ eta2_s3XUK]
                  case c_s3XUJ of {
                    GHC.Types.I# x_s3XUM [Occ=Once] ->
                        case <=# [x_s3XUM 10#] of {
                          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                          1# ->
                              let {
                                sat_s3XUU [Occ=Once]
                                  :: () -> Text.ParserCombinators.ReadP.P b2_X3nvw
                                [LclId] =
                                    [$dIx_s3XUD $dRead_s3XUE lvl2_s3XUI eta2_s3XUK] \r [a1_s3XUO]
                                        let {
                                          sat_s3XUT [Occ=Once]
                                            :: (a_a3KUf, a_a3KUf)
                                               -> Text.ParserCombinators.ReadP.P b2_X3nvw
                                          [LclId] =
                                              [$dIx_s3XUD lvl2_s3XUI eta2_s3XUK] \r [a2_s3XUP]
                                                  let {
                                                    sat_s3XUS [Occ=Once]
                                                      :: [(a_a3KUf, b_a3KUg)]
                                                         -> Text.ParserCombinators.ReadP.P b2_X3nvw
                                                    [LclId] =
                                                        [$dIx_s3XUD
                                                         eta2_s3XUK
                                                         a2_s3XUP] \r [a3_s3XUQ]
                                                            let {
                                                              sat_s3XUR [Occ=Once]
                                                                :: GHC.Arr.Array a_a3KUf b_a3KUg
                                                              [LclId] =
                                                                  [$dIx_s3XUD
                                                                   a2_s3XUP
                                                                   a3_s3XUQ] \u []
                                                                      GHC.Arr.array
                                                                          $dIx_s3XUD
                                                                          a2_s3XUP
                                                                          a3_s3XUQ;
                                                            } in  eta2_s3XUK sat_s3XUR;
                                                  } in 
                                                    GHC.Read.list
                                                        lvl2_s3XUI GHC.Read.$fReadArray2 sat_s3XUS;
                                        } in 
                                          GHC.Read.$fRead(,)1
                                              $dRead_s3XUE
                                              $dRead_s3XUE
                                              GHC.Read.$fReadArray2
                                              sat_s3XUT;
                              } in 
                                case
                                    Text.Read.Lex.$wexpect GHC.Read.$fReadArray_lexeme sat_s3XUU
                                of
                                { Unit# ww1_s3XUW [Occ=Once] ->
                                      Text.ParserCombinators.ReadP.Look [ww1_s3XUW];
                                };
                        };
                  };
        } in  GHC.Read.list3 sat_s3XUX eta_s3XUG eta1_s3XUH;

GHC.Read.$fReadArray_$creadsPrec
  :: forall a b.
     (GHC.Arr.Ix a, GHC.Read.Read a, GHC.Read.Read b) =>
     GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS (GHC.Arr.Array a b)
[GblId,
 Arity=4,
 Str=<L,U(A,A,C(C1(U(U))),A,A,C(U(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dIx_s3XUY $dRead_s3XUZ $dRead1_s3XV0 n_s3XV1]
        let {
          sat_s3XV2 [Occ=Once]
            :: Text.ParserCombinators.ReadP.P (GHC.Arr.Array a_X3L9l b_X3L9n)
          [LclId] =
              [$dIx_s3XUY $dRead_s3XUZ $dRead1_s3XV0 n_s3XV1] \u []
                  GHC.Read.$fReadArray1
                      $dIx_s3XUY
                      $dRead_s3XUZ
                      $dRead1_s3XV0
                      n_s3XV1
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XV2;

GHC.Read.$fReadArray_$creadListPrec
  :: forall a b.
     (GHC.Arr.Ix a, GHC.Read.Read a, GHC.Read.Read b) =>
     Text.ParserCombinators.ReadPrec.ReadPrec [GHC.Arr.Array a b]
[GblId,
 Arity=3,
 Str=<L,U(A,A,C(C1(U(U))),A,A,C(U(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dIx_s3XV3 $dRead_s3XV4 $dRead1_s3XV5]
        let {
          sat_s3XV6 [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (GHC.Arr.Array a_X3L9m b_X3L9o)
          [LclId] =
              [$dIx_s3XV3 $dRead_s3XV4 $dRead1_s3XV5] \r [eta_B2 eta_B1]
                  GHC.Read.$fReadArray1
                      $dIx_s3XV3 $dRead_s3XV4 $dRead1_s3XV5 eta_B2 eta_B1;
        } in  GHC.Read.list sat_s3XV6;

GHC.Read.$fReadArray_$creadList
  :: forall a b.
     (GHC.Arr.Ix a, GHC.Read.Read a, GHC.Read.Read b) =>
     Text.ParserCombinators.ReadP.ReadS [GHC.Arr.Array a b]
[GblId,
 Arity=3,
 Str=<L,U(A,A,C(C1(U(U))),A,A,C(U(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dIx_s3XV7 $dRead_s3XV8 $dRead1_s3XV9]
        let {
          sat_s3XVb [Occ=Once]
            :: Text.ParserCombinators.ReadP.P [GHC.Arr.Array a_X3L9n b_X3L9p]
          [LclId] =
              [$dIx_s3XV7 $dRead_s3XV8 $dRead1_s3XV9] \u []
                  let {
                    sat_s3XVa [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec
                           (GHC.Arr.Array a_X3L9n b_X3L9p)
                    [LclId] =
                        [$dIx_s3XV7 $dRead_s3XV8 $dRead1_s3XV9] \r [eta_B2 eta_B1]
                            GHC.Read.$fReadArray1
                                $dIx_s3XV7 $dRead_s3XV8 $dRead1_s3XV9 eta_B2 eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s3XVa
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XVb;

GHC.Read.$fReadArray [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b.
     (GHC.Arr.Ix a, GHC.Read.Read a, GHC.Read.Read b) =>
     GHC.Read.Read (GHC.Arr.Array a b)
[GblId[DFunId],
 Arity=3,
 Str=<L,U(A,A,C(C1(U(U))),A,A,C(U(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>m] =
    [] \r [$dIx_s3XVc $dRead_s3XVd $dRead1_s3XVe]
        let {
          sat_s3XVi [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 [GHC.Arr.Array a_X3L9o b_X3L9q]
          [LclId] =
              [$dIx_s3XVc $dRead_s3XVd $dRead1_s3XVe] \u []
                  GHC.Read.$fReadArray_$creadListPrec
                      $dIx_s3XVc $dRead_s3XVd $dRead1_s3XVe; } in
        let {
          sat_s3XVh [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (GHC.Arr.Array a_X3L9o b_X3L9q)
          [LclId] =
              [$dIx_s3XVc $dRead_s3XVd $dRead1_s3XVe] \r [eta_B2 eta_B1]
                  GHC.Read.$fReadArray1
                      $dIx_s3XVc $dRead_s3XVd $dRead1_s3XVe eta_B2 eta_B1; } in
        let {
          sat_s3XVg [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS
                 [GHC.Arr.Array a_X3L9o b_X3L9q]
          [LclId] =
              [$dIx_s3XVc $dRead_s3XVd $dRead1_s3XVe] \u []
                  GHC.Read.$fReadArray_$creadList
                      $dIx_s3XVc $dRead_s3XVd $dRead1_s3XVe; } in
        let {
          sat_s3XVf [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS
                    (GHC.Arr.Array a_X3L9o b_X3L9q)
          [LclId] =
              [$dIx_s3XVc $dRead_s3XVd $dRead1_s3XVe] \r [eta_B1]
                  GHC.Read.$fReadArray_$creadsPrec
                      $dIx_s3XVc $dRead_s3XVd $dRead1_s3XVe eta_B1;
        } in  GHC.Read.C:Read [sat_s3XVf sat_s3XVg sat_s3XVh sat_s3XVi];

lvl1_r3N5M :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.Read.lexLitChar_removeNulls GHC.Types.[];
GHC.Read.lexLitChar_removeNulls [Occ=LoopBreaker]
  :: [GHC.Types.Char] -> [GHC.Types.Char]
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3XVj]
        case ds_s3XVj of {
          [] -> [] [];
          : ds1_s3XVl [Occ=Once!] ds2_s3XVm [Occ=Once*] ->
              case ds1_s3XVl of wild1_s3XVn {
                GHC.Types.C# ds3_s3XVo [Occ=Once!] ->
                    case ds3_s3XVo of {
                      __DEFAULT ->
                          let {
                            sat_s3XVq [Occ=Once] :: [GHC.Types.Char]
                            [LclId] =
                                [ds2_s3XVm] \u [] GHC.Read.lexLitChar_removeNulls ds2_s3XVm;
                          } in  : [wild1_s3XVn sat_s3XVq];
                      '\\'# ->
                          case ds2_s3XVm of wild2_s3XVr {
                            [] -> : [wild1_s3XVn lvl1_r3N5M];
                            : ds5_s3XVs [Occ=Once!] xs_s3XVt [Occ=Once] ->
                                case ds5_s3XVs of {
                                  GHC.Types.C# ds6_s3XVv [Occ=Once!] ->
                                      case ds6_s3XVv of {
                                        __DEFAULT ->
                                            let {
                                              sat_s3XVx [Occ=Once] :: [GHC.Types.Char]
                                              [LclId] =
                                                  [wild2_s3XVr] \u []
                                                      GHC.Read.lexLitChar_removeNulls wild2_s3XVr;
                                            } in  : [wild1_s3XVn sat_s3XVx];
                                        '&'# -> GHC.Read.lexLitChar_removeNulls xs_s3XVt;
                                      };
                                };
                          };
                    };
              };
        };

GHC.Read.lexLitChar4
  :: GHC.Base.String
     -> Text.ParserCombinators.ReadP.P [GHC.Types.Char]
[GblId, Arity=1, Str=<L,1*U>m4, Unf=OtherCon []] =
    [] \r [s_s3XVy]
        let {
          sat_s3XVz [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [s_s3XVy] \u [] GHC.Read.lexLitChar_removeNulls s_s3XVy;
        } in 
          Text.ParserCombinators.ReadP.Result [sat_s3XVz
                                               Text.ParserCombinators.ReadP.Fail];

GHC.Read.lexLitChar3
  :: Text.ParserCombinators.ReadP.P
       (GHC.Base.String
        -> Text.ParserCombinators.ReadP.P [GHC.Types.Char])
[GblId, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE Text.ParserCombinators.ReadP.Result! [GHC.Read.lexLitChar4
                                                        Text.ParserCombinators.ReadP.Fail];

GHC.Read.lexLitChar2
  :: GHC.Types.Char
     -> Text.ParserCombinators.ReadP.P
          (GHC.Base.String
           -> Text.ParserCombinators.ReadP.P [GHC.Types.Char])
[GblId, Arity=1, Str=<L,A>m4, Unf=OtherCon []] =
    [] \r [a1_s3XVA] GHC.Read.lexLitChar3;

GHC.Read.lexLitChar1
  :: Text.ParserCombinators.ReadP.P [GHC.Types.Char]
[GblId] =
    [] \u []
        case Text.Read.Lex.$wlexChar GHC.Read.lexLitChar2 of {
          Unit# ww1_s3XVC [Occ=Once] ->
              let {
                sat_s3XVD [Occ=Once]
                  :: Text.ParserCombinators.ReadP.P
                       (GHC.Base.String
                        -> Text.ParserCombinators.ReadP.P [GHC.Types.Char])
                [LclId] =
                    CCCS Text.ParserCombinators.ReadP.Get! [ww1_s3XVC];
              } in 
                Text.ParserCombinators.ReadP.gather_gath GHC.Base.id sat_s3XVD;
        };

GHC.Read.lexLitChar
  :: Text.ParserCombinators.ReadP.ReadS GHC.Base.String
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.lexLitChar1 eta_B1;

GHC.Read.C:Read
  :: forall a.
     (GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS a)
     -> Text.ParserCombinators.ReadP.ReadS [a]
     -> Text.ParserCombinators.ReadPrec.ReadPrec a
     -> Text.ParserCombinators.ReadPrec.ReadPrec [a]
     -> GHC.Read.Read a
[GblId[DataCon],
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.Read.C:Read [eta_B4 eta_B3 eta_B2 eta_B1];


==================== STG syntax: ====================
2018-03-16 15:58:51.218561268 UTC

GHC.Read.readsPrec
  :: forall a.
     GHC.Read.Read a =>
     GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS a
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SLLL),U(U,A,A,A)>] =
    [] \r [v_s3Xil]
        case v_s3Xil of {
          GHC.Read.C:Read v_s3Xin [Occ=Once]
                          _ [Occ=Dead]
                          _ [Occ=Dead]
                          _ [Occ=Dead] ->
              v_s3Xin;
        };

GHC.Read.readList
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadP.ReadS [a]
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LSLL),U(A,U,A,A)>] =
    [] \r [v_s3Xir]
        case v_s3Xir of {
          GHC.Read.C:Read _ [Occ=Dead]
                          v_s3Xiu [Occ=Once]
                          _ [Occ=Dead]
                          _ [Occ=Dead] ->
              v_s3Xiu;
        };

GHC.Read.readPrec
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadPrec.ReadPrec a
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLSL),U(A,A,U,A)>] =
    [] \r [v_s3Xix]
        case v_s3Xix of {
          GHC.Read.C:Read _ [Occ=Dead]
                          _ [Occ=Dead]
                          v_s3XiB [Occ=Once]
                          _ [Occ=Dead] ->
              v_s3XiB;
        };

GHC.Read.readListPrec
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadPrec.ReadPrec [a]
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLS),U(A,A,A,U)>] =
    [] \r [v_s3XiD]
        case v_s3XiD of {
          GHC.Read.C:Read _ [Occ=Dead]
                          _ [Occ=Dead]
                          _ [Occ=Dead]
                          v_s3XiI [Occ=Once] ->
              v_s3XiI;
        };

$dmreadListPrec1_r3N5i
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        ([a] -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*U(A,1*C(U),A,A)><L,A><L,C(U)>m2,
 Unf=OtherCon []] =
    sat-only [] \r [$dRead_s3XiJ n_s3XiK eta_s3XiL]
        let {
          sat_s3XiM [Occ=Once, Dmd=<L,C(U)>]
            :: Text.ParserCombinators.ReadP.ReadS [a_a3K2E]
          [LclId] =
              [$dRead_s3XiJ] \u [] GHC.Read.readList $dRead_s3XiJ;
        } in 
          case
              Text.ParserCombinators.ReadP.$wreadS_to_P sat_s3XiM eta_s3XiL
          of
          { Unit# ww1_s3XiO [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3XiO];
          };

GHC.Read.$dmreadListPrec
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadPrec.ReadPrec [a]
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*U(A,1*C(U),A,A)><L,A><L,C(U)>m2,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        $dmreadListPrec1_r3N5i eta_B3 eta_B2 eta_B1;

$dmreadPrec1_r3N5j
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*U(1*C1(C(U)),A,A,A)><L,U>,
 Unf=OtherCon []] =
    sat-only [] \r [$dRead_s3XiP eta_s3XiQ]
        let {
          w_s3XiR [Occ=OnceL, Dmd=<L,C(U)>]
            :: Text.ParserCombinators.ReadP.ReadS a_X3K6w
          [LclId] =
              [$dRead_s3XiP eta_s3XiQ] \u []
                  GHC.Read.readsPrec $dRead_s3XiP eta_s3XiQ; } in
        let {
          sat_s3XiV [Occ=Once]
            :: forall b.
               (a_X3K6w -> Text.ParserCombinators.ReadP.P b)
               -> Text.ParserCombinators.ReadP.P b
          [LclId] =
              [w_s3XiR] \r [w1_s3XiS]
                  case
                      Text.ParserCombinators.ReadP.$wreadS_to_P w_s3XiR w1_s3XiS
                  of
                  { Unit# ww1_s3XiU [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Look [ww1_s3XiU];
                  };
        } in  sat_s3XiV;

GHC.Read.$dmreadPrec
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadPrec.ReadPrec a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*U(1*C1(C(U)),A,A,A)><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] $dmreadPrec1_r3N5j eta_B2 eta_B1;

GHC.Read.$dmreadsPrec
  :: forall a.
     GHC.Read.Read a =>
     GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*U(A,A,1*C1(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XiW eta_s3XiX]
        let {
          sat_s3XiY [Occ=Once] :: Text.ParserCombinators.ReadP.P a_X3K6x
          [LclId] =
              [$dRead_s3XiW eta_s3XiX] \u []
                  GHC.Read.readPrec
                      $dRead_s3XiW
                      eta_s3XiX
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XiY;

GHC.Read.$fRead()7 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

GHC.Read.readListDefault
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadP.ReadS [a]
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,1*U(A,A,A,1*C1(C1(U)))>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XiZ]
        let {
          sat_s3Xj0 [Occ=Once] :: Text.ParserCombinators.ReadP.P [a_a3Ksg]
          [LclId] =
              [$dRead_s3XiZ] \u []
                  GHC.Read.readListPrec
                      $dRead_s3XiZ
                      GHC.Read.$fRead()7
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3Xj0;

GHC.Read.lex1 :: Text.ParserCombinators.ReadP.P GHC.Base.String
[GblId] =
    [] \u []
        case
            Text.Read.Lex.$whsLex
                Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
        of
        { Unit# ww1_s3Xj2 [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3Xj2];
        };

GHC.Read.lex :: Text.ParserCombinators.ReadP.ReadS GHC.Base.String
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [s_s3Xj3]
        Text.ParserCombinators.ReadP.run GHC.Read.lex1 s_s3Xj3;

GHC.Read.readParen1 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     a
     -> GHC.Base.String
     -> [(a, GHC.Base.String)]
     -> [(a, GHC.Base.String)]
[GblId, Arity=3, Str=<L,U><L,U><L,U>, Unf=OtherCon []] =
    [] \r [ww_s3Xj4 ww1_s3Xj5 w_s3Xj6]
        let {
          go_s3Xj7 [Occ=LoopBreaker]
            :: [(GHC.Base.String, GHC.Base.String)]
               -> [(a_a3Ksn, GHC.Base.String)]
          [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
              sat-only [ww_s3Xj4 w_s3Xj6 go_s3Xj7] \r [ds_s3Xj8]
                  case ds_s3Xj8 of {
                    [] -> w_s3Xj6;
                    : y_s3Xja [Occ=Once!] ys_s3Xjb [Occ=Once*] ->
                        case y_s3Xja of {
                          (,) ds1_s3Xjd [Occ=Once!] u_s3Xje [Occ=Once] ->
                              case ds1_s3Xjd of {
                                [] -> go_s3Xj7 ys_s3Xjb;
                                : ds2_s3Xjg [Occ=Once!] ds3_s3Xjh [Occ=Once!] ->
                                    case ds2_s3Xjg of {
                                      GHC.Types.C# ds4_s3Xjj [Occ=Once!] ->
                                          case ds4_s3Xjj of {
                                            __DEFAULT -> go_s3Xj7 ys_s3Xjb;
                                            ')'# ->
                                                case ds3_s3Xjh of {
                                                  [] ->
                                                      let {
                                                        sat_s3Xjn [Occ=Once]
                                                          :: [(a_a3Ksn, GHC.Base.String)]
                                                        [LclId] =
                                                            [go_s3Xj7 ys_s3Xjb] \u []
                                                                go_s3Xj7 ys_s3Xjb; } in
                                                      let {
                                                        sat_s3Xjm [Occ=Once]
                                                          :: (a_a3Ksn, GHC.Base.String)
                                                        [LclId] =
                                                            CCCS (,)! [ww_s3Xj4 u_s3Xje];
                                                      } in  : [sat_s3Xjm sat_s3Xjn];
                                                  : _ [Occ=Dead] _ [Occ=Dead] -> go_s3Xj7 ys_s3Xjb;
                                                };
                                          };
                                    };
                              };
                        };
                  };
        } in 
          case
              Text.ParserCombinators.ReadP.run GHC.Read.lex1 ww1_s3Xj5
          of
          sat_s3Xjq
          { __DEFAULT -> go_s3Xj7 sat_s3Xjq;
          };

GHC.Read.readParen
  :: forall a.
     GHC.Types.Bool
     -> Text.ParserCombinators.ReadP.ReadS a
     -> Text.ParserCombinators.ReadP.ReadS a
[GblId, Arity=3, Str=<S,1*U><L,C(U)><L,U>, Unf=OtherCon []] =
    [] \r [b_s3Xjr g_s3Xjs eta_s3Xjt]
        let {
          go_s3Xju [Occ=LoopBreaker]
            :: [(GHC.Base.String, GHC.Base.String)]
               -> [(a_a3Ksn, GHC.Base.String)]
          [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
              sat-only [g_s3Xjs go_s3Xju] \r [ds_s3Xjv]
                  case ds_s3Xjv of {
                    [] -> [] [];
                    : y_s3Xjx [Occ=Once!] ys_s3Xjy [Occ=Once*] ->
                        case y_s3Xjx of {
                          (,) ds1_s3XjA [Occ=Once!] s_s3XjB ->
                              case ds1_s3XjA of {
                                [] -> go_s3Xju ys_s3Xjy;
                                : ds2_s3XjD [Occ=Once!] ds3_s3XjE [Occ=Once!] ->
                                    case ds2_s3XjD of {
                                      GHC.Types.C# ds4_s3XjG [Occ=Once!] ->
                                          case ds4_s3XjG of {
                                            __DEFAULT -> go_s3Xju ys_s3Xjy;
                                            '('# ->
                                                case ds3_s3XjE of {
                                                  [] ->
                                                      let {
                                                        z_s3XjJ [Occ=OnceL]
                                                          :: [(a_a3Ksn, GHC.Base.String)]
                                                        [LclId] =
                                                            [go_s3Xju ys_s3Xjy s_s3XjB] \u []
                                                                let {
                                                                  z1_s3XjK [Occ=OnceL]
                                                                    :: [(a_a3Ksn, GHC.Base.String)]
                                                                  [LclId] =
                                                                      [go_s3Xju ys_s3Xjy] \u []
                                                                          go_s3Xju ys_s3Xjy; } in
                                                                let {
                                                                  go1_s3XjL [Occ=LoopBreaker]
                                                                    :: [(a_a3Ksn, GHC.Base.String)]
                                                                       -> [(a_a3Ksn,
                                                                            GHC.Base.String)]
                                                                  [LclId,
                                                                   Arity=1,
                                                                   Str=<S,1*U>,
                                                                   Unf=OtherCon []] =
                                                                      sat-only [z1_s3XjK
                                                                                go1_s3XjL] \r [ds6_s3XjM]
                                                                          case ds6_s3XjM of {
                                                                            [] -> z1_s3XjK;
                                                                            : y1_s3XjO [Occ=Once!]
                                                                              ys1_s3XjP [Occ=Once] ->
                                                                                case y1_s3XjO of {
                                                                                  (,) ww1_s3XjR [Occ=Once]
                                                                                      ww2_s3XjS [Occ=Once] ->
                                                                                      let {
                                                                                        sat_s3XjT [Occ=Once]
                                                                                          :: [(a_a3Ksn,
                                                                                               GHC.Base.String)]
                                                                                        [LclId] =
                                                                                            [go1_s3XjL
                                                                                             ys1_s3XjP] \u []
                                                                                                go1_s3XjL
                                                                                                    ys1_s3XjP;
                                                                                      } in 
                                                                                        GHC.Read.readParen1
                                                                                            ww1_s3XjR
                                                                                            ww2_s3XjS
                                                                                            sat_s3XjT;
                                                                                };
                                                                          };
                                                                } in 
                                                                  case
                                                                      Text.ParserCombinators.ReadP.run
                                                                          GHC.Read.lex1 s_s3XjB
                                                                  of
                                                                  sat_s3XjU
                                                                  { __DEFAULT ->
                                                                        case
                                                                            go_s3Xju sat_s3XjU
                                                                        of
                                                                        sat_s3XjV
                                                                        { __DEFAULT ->
                                                                              go1_s3XjL sat_s3XjV;
                                                                        };
                                                                  }; } in
                                                      let {
                                                        go1_s3XjW [Occ=LoopBreaker]
                                                          :: [(a_a3Ksn, GHC.Base.String)]
                                                             -> [(a_a3Ksn, GHC.Base.String)]
                                                        [LclId,
                                                         Arity=1,
                                                         Str=<S,1*U>,
                                                         Unf=OtherCon []] =
                                                            sat-only [z_s3XjJ
                                                                      go1_s3XjW] \r [ds6_s3XjX]
                                                                case ds6_s3XjX of {
                                                                  [] -> z_s3XjJ;
                                                                  : y1_s3XjZ [Occ=Once!]
                                                                    ys1_s3Xk0 [Occ=Once] ->
                                                                      case y1_s3XjZ of {
                                                                        (,) ww1_s3Xk2 [Occ=Once]
                                                                            ww2_s3Xk3 [Occ=Once] ->
                                                                            let {
                                                                              sat_s3Xk4 [Occ=Once]
                                                                                :: [(a_a3Ksn,
                                                                                     GHC.Base.String)]
                                                                              [LclId] =
                                                                                  [go1_s3XjW
                                                                                   ys1_s3Xk0] \u []
                                                                                      go1_s3XjW
                                                                                          ys1_s3Xk0;
                                                                            } in 
                                                                              GHC.Read.readParen1
                                                                                  ww1_s3Xk2
                                                                                  ww2_s3Xk3
                                                                                  sat_s3Xk4;
                                                                      };
                                                                };
                                                      } in 
                                                        case g_s3Xjs s_s3XjB of sat_s3Xk5 {
                                                          __DEFAULT -> go1_s3XjW sat_s3Xk5;
                                                        };
                                                  : _ [Occ=Dead] _ [Occ=Dead] -> go_s3Xju ys_s3Xjy;
                                                };
                                          };
                                    };
                              };
                        };
                  };
        } in 
          case b_s3Xjr of {
            GHC.Types.False ->
                let {
                  sat_s3Xkb [Occ=Once, Dmd=<L,1*U>] :: [(a_a3Ksn, GHC.Base.String)]
                  [LclId] =
                      [eta_s3Xjt go_s3Xju] \s []
                          case
                              Text.ParserCombinators.ReadP.run GHC.Read.lex1 eta_s3Xjt
                          of
                          sat_s3Xka
                          { __DEFAULT -> go_s3Xju sat_s3Xka;
                          };
                } in 
                  case g_s3Xjs eta_s3Xjt of sat_s3Xk9 {
                    __DEFAULT -> GHC.Base.++ sat_s3Xk9 sat_s3Xkb;
                  };
            GHC.Types.True ->
                case
                    Text.ParserCombinators.ReadP.run GHC.Read.lex1 eta_s3Xjt
                of
                sat_s3Xkc
                { __DEFAULT -> go_s3Xju sat_s3Xkc;
                };
          };

GHC.Read.readLitChar1
  :: Text.ParserCombinators.ReadP.P GHC.Types.Char
[GblId] =
    [] \u []
        case
            Text.Read.Lex.$wlexChar
                Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
        of
        { Unit# ww1_s3Xke [Occ=Once] ->
              Text.ParserCombinators.ReadP.Get [ww1_s3Xke];
        };

GHC.Read.readLitChar
  :: Text.ParserCombinators.ReadP.ReadS GHC.Types.Char
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.readLitChar1 eta_B1;

GHC.Read.$www1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Char# -> Text.ParserCombinators.ReadP.P GHC.Base.String
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [ww_s3Xkf]
        case ord# [ww_s3Xkf] of sat_s3Xkg {
          __DEFAULT ->
              case -# [sat_s3Xkg 48#] of sat_s3Xkh {
                __DEFAULT ->
                    case int2Word# [sat_s3Xkh] of sat_s3Xki {
                      __DEFAULT ->
                          case leWord# [sat_s3Xki 9##] of {
                            __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                            1# ->
                                let {
                                  wild_s3Xkk [Occ=OnceL] :: GHC.Types.Char
                                  [LclId, Unf=OtherCon []] =
                                      CCCS GHC.Types.C#! [ww_s3Xkf]; } in
                                let {
                                  sat_s3Xkn [Occ=Once]
                                    :: GHC.Base.String
                                       -> Text.ParserCombinators.ReadP.P GHC.Base.String
                                  [LclId] =
                                      [wild_s3Xkk] \r [a1_s3Xkl]
                                          let {
                                            sat_s3Xkm [Occ=Once] :: GHC.Base.String
                                            [LclId] =
                                                CCCS :! [wild_s3Xkk a1_s3Xkl];
                                          } in 
                                            Text.ParserCombinators.ReadP.Result [sat_s3Xkm
                                                                                 Text.ParserCombinators.ReadP.Fail];
                                } in 
                                  case
                                      Text.ParserCombinators.ReadP.$wmunch
                                          GHC.Unicode.isDigit sat_s3Xkn
                                  of
                                  { Unit# ww2_s3Xkp [Occ=Once] ->
                                        Text.ParserCombinators.ReadP.Look [ww2_s3Xkp];
                                  };
                          };
                    };
              };
        };

GHC.Read.lexDigits_ww1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P GHC.Base.String
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [w_s3Xkq]
        case w_s3Xkq of {
          GHC.Types.C# ww1_s3Xks [Occ=Once] -> GHC.Read.$www1 ww1_s3Xks;
        };

GHC.Read.lexDigits1
  :: Text.ParserCombinators.ReadP.P GHC.Base.String
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE Text.ParserCombinators.ReadP.Get! [GHC.Read.lexDigits_ww1];

GHC.Read.lexDigits
  :: Text.ParserCombinators.ReadP.ReadS GHC.Base.String
[GblId, Arity=1, Caf=NoCafRefs, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.lexDigits1 eta_B1;

GHC.Read.$fReadLexeme1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        (Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=2, Str=<L,A><L,U>m2, Unf=OtherCon []] =
    [] \r [ds_s3Xkt eta_s3Xku] Text.Read.Lex.lex1 eta_s3Xku;

GHC.Read.lexP
  :: Text.ParserCombinators.ReadPrec.ReadPrec Text.Read.Lex.Lexeme
[GblId, Arity=2, Str=<L,A><L,U>m2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Read.$fReadLexeme1 eta_B2 eta_B1;

GHC.Read.$fReadChar4
  :: forall b. GHC.Base.String -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [a3_s3Xkv]
        case a3_s3Xkv of {
          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
        };

GHC.Read.$fReadChar3 :: forall b. Text.ParserCombinators.ReadP.P b
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE Text.ParserCombinators.ReadP.Look! [GHC.Read.$fReadChar4];

GHC.Read.$fReadGeneralCategory36
  :: forall a.
     (GHC.Base.String, Text.ParserCombinators.ReadPrec.ReadPrec a)
     -> Text.ParserCombinators.ReadPrec.ReadPrec a
     -> Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP a
[GblId,
 Arity=3,
 Str=<L,U(U,C(C1(U)))><L,1*C1(C(U))><L,U>,
 Unf=OtherCon []] =
    [] \r [x_s3Xkx eta_s3Xky eta1_s3Xkz]
        let {
          ds3_s3XkA [Occ=OnceL, Dmd=<L,C(U)>]
            :: Text.ParserCombinators.ReadP.ReadP a_a3Kqu
          [LclId] =
              [eta_s3Xky eta1_s3Xkz] \u [] eta_s3Xky eta1_s3Xkz; } in
        let {
          sat_s3XkV [Occ=Once]
            :: forall b.
               (a_a3Kqu -> Text.ParserCombinators.ReadP.P b)
               -> Text.ParserCombinators.ReadP.P b
          [LclId] =
              [x_s3Xkx eta1_s3Xkz ds3_s3XkA] \r [k_s3XkB]
                  case x_s3Xkx of {
                    (,) s_s3XkD [Occ=OnceL*] p_s3XkE ->
                        let {
                          lvl116_s3XkF [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b_a3nvJ
                          [LclId] =
                              [eta1_s3Xkz k_s3XkB s_s3XkD p_s3XkE] \u []
                                  let {
                                    sat_s3XkO [Occ=Once] :: Text.ParserCombinators.ReadP.P b_a3nvJ
                                    [LclId] =
                                        [eta1_s3Xkz k_s3XkB s_s3XkD p_s3XkE] \u []
                                            let {
                                              lvl2_s3XkG [Occ=OnceL*]
                                                :: Text.ParserCombinators.ReadP.P b_a3nvJ
                                              [LclId] =
                                                  [eta1_s3Xkz k_s3XkB p_s3XkE] \u []
                                                      p_s3XkE eta1_s3Xkz k_s3XkB; } in
                                            let {
                                              sat_s3XkN [Occ=Once]
                                                :: Text.Read.Lex.Lexeme
                                                   -> Text.ParserCombinators.ReadP.P b_a3nvJ
                                              [LclId] =
                                                  [s_s3XkD lvl2_s3XkG] \r [a1_s3XkH]
                                                      case a1_s3XkH of {
                                                        __DEFAULT ->
                                                            Text.ParserCombinators.ReadP.Fail [];
                                                        Text.Read.Lex.Ident s'_s3XkJ [Occ=Once] ->
                                                            case
                                                                GHC.Base.eqString s_s3XkD s'_s3XkJ
                                                            of
                                                            { GHC.Types.False ->
                                                                  Text.ParserCombinators.ReadP.Fail [];
                                                              GHC.Types.True -> lvl2_s3XkG;
                                                            };
                                                        Text.Read.Lex.Symbol s'_s3XkL [Occ=Once] ->
                                                            case
                                                                GHC.Base.eqString s_s3XkD s'_s3XkL
                                                            of
                                                            { GHC.Types.False ->
                                                                  Text.ParserCombinators.ReadP.Fail [];
                                                              GHC.Types.True -> lvl2_s3XkG;
                                                            };
                                                      };
                                            } in  Text.Read.Lex.expect2 sat_s3XkN;
                                  } in 
                                    Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                        GHC.Read.$fReadChar3 sat_s3XkO; } in
                        let {
                          k1_s3XkP [Occ=OnceL, Dmd=<L,C(U)>]
                            :: () -> Text.ParserCombinators.ReadP.P b_a3nvJ
                          [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
                              [lvl116_s3XkF] \r [a3_s3XkQ] lvl116_s3XkF; } in
                        let {
                          sat_s3XkU [Occ=Once] :: Text.ParserCombinators.ReadP.P b_a3nvJ
                          [LclId] =
                              [ds3_s3XkA k_s3XkB] \u [] ds3_s3XkA k_s3XkB; } in
                        let {
                          sat_s3XkS [Occ=Once]
                            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b_a3nvJ
                          [LclId] =
                              [k1_s3XkP] \r [a1_s3XkR]
                                  Text.ParserCombinators.ReadP.skipSpaces2 a1_s3XkR k1_s3XkP; } in
                        let {
                          sat_s3XkT [Occ=Once] :: Text.ParserCombinators.ReadP.P b_a3nvJ
                          [LclId] =
                              CCCS Text.ParserCombinators.ReadP.Look! [sat_s3XkS];
                        } in 
                          Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                              sat_s3XkT sat_s3XkU;
                  };
        } in  sat_s3XkV;

lvl_r3N5k
  :: forall a b.
     (a -> Text.ParserCombinators.ReadP.P b)
     -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []] =
    [] \r [eta_s3XkW] Text.ParserCombinators.ReadP.Fail [];

GHC.Read.choose2 [Occ=LoopBreaker]
  :: forall a.
     [(GHC.Base.String, Text.ParserCombinators.ReadPrec.ReadPrec a)]
     -> Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP a
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ds_s3XkX eta_s3XkY]
        case ds_s3XkX of {
          [] -> lvl_r3N5k;
          : y_s3Xl0 [Occ=Once] ys_s3Xl1 [Occ=OnceL] ->
              let {
                sat_s3Xl2 [Occ=Once]
                  :: Text.ParserCombinators.ReadPrec.ReadPrec a_a3Kqu
                [LclId] =
                    [ys_s3Xl1] \r [eta_B1] GHC.Read.choose2 ys_s3Xl1 eta_B1;
              } in  GHC.Read.$fReadGeneralCategory36 y_s3Xl0 sat_s3Xl2 eta_s3XkY;
        };

GHC.Read.choose1
  :: forall a.
     [(GHC.Base.String, Text.ParserCombinators.ReadPrec.ReadPrec a)]
     -> Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP a
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [sps_s3Xl3 eta_s3Xl4] GHC.Read.choose2 sps_s3Xl3 eta_s3Xl4;

GHC.Read.choose
  :: forall a.
     [(GHC.Base.String, Text.ParserCombinators.ReadPrec.ReadPrec a)]
     -> Text.ParserCombinators.ReadPrec.ReadPrec a
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Read.choose1 eta_B2 eta_B1;

GHC.Read.expectP1
  :: Text.Read.Lex.Lexeme
     -> Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (() -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=3, Str=<L,U><L,A><L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [lexeme_s3Xl5 eta_s3Xl6 eta1_s3Xl7]
        Text.Read.Lex.expect1 lexeme_s3Xl5 eta1_s3Xl7;

GHC.Read.expectP
  :: Text.Read.Lex.Lexeme
     -> Text.ParserCombinators.ReadPrec.ReadPrec ()
[GblId, Arity=3, Str=<L,U><L,A><L,1*C1(U)>m2, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.Read.expectP1 eta_B3 eta_B2 eta_B1;

GHC.Read.readField3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "="#;

GHC.Read.readField2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Read.readField3;

GHC.Read.readField_lexeme :: Text.Read.Lex.Lexeme
[GblId, Str=m3, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Punc! [GHC.Read.readField2];

GHC.Read.$wreadField [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Base.String
     -> Text.ParserCombinators.ReadPrec.ReadPrec a
     -> Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> (# GHC.Base.String -> Text.ParserCombinators.ReadP.P b #)
[GblId,
 Arity=4,
 Str=<L,U><L,1*C1(C1(U))><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [w_s3Xl8 w1_s3Xl9 w2_s3Xla w3_s3Xlb]
        let {
          sat_s3Xli [Occ=Once]
            :: () -> Text.ParserCombinators.ReadP.P b_s3MnQ
          [LclId] =
              [w1_s3Xl9 w2_s3Xla w3_s3Xlb] \r [a1_s3Xld]
                  let {
                    sat_s3Xlf [Occ=Once]
                      :: () -> Text.ParserCombinators.ReadP.P b_s3MnQ
                    [LclId] =
                        [w1_s3Xl9 w2_s3Xla w3_s3Xlb] \r [a2_s3Xle]
                            w1_s3Xl9 w2_s3Xla w3_s3Xlb;
                  } in 
                    case
                        Text.Read.Lex.$wexpect GHC.Read.readField_lexeme sat_s3Xlf
                    of
                    { Unit# ww1_s3Xlh [Occ=Once] ->
                          Text.ParserCombinators.ReadP.Look [ww1_s3Xlh];
                    }; } in
        let {
          sat_s3Xlc [Occ=Once] :: Text.Read.Lex.Lexeme
          [LclId] =
              CCCS Text.Read.Lex.Ident! [w_s3Xl8];
        } in  Text.Read.Lex.$wexpect sat_s3Xlc sat_s3Xli;

GHC.Read.readField1 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Base.String
     -> Text.ParserCombinators.ReadPrec.ReadPrec a
     -> Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=4,
 Str=<L,U><L,1*C1(C1(U))><L,U><L,U>m2,
 Unf=OtherCon []] =
    [] \r [w_s3Xlj w1_s3Xlk w2_s3Xll w3_s3Xlm]
        case GHC.Read.$wreadField w_s3Xlj w1_s3Xlk w2_s3Xll w3_s3Xlm of {
          Unit# ww1_s3Xlo [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3Xlo];
        };

GHC.Read.readField [InlPrag=NOINLINE]
  :: forall a.
     GHC.Base.String
     -> Text.ParserCombinators.ReadPrec.ReadPrec a
     -> Text.ParserCombinators.ReadPrec.ReadPrec a
[GblId,
 Arity=4,
 Str=<L,U><L,1*C1(C1(U))><L,U><L,U>m2,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.Read.readField1 eta_B4 eta_B3 eta_B2 eta_B1;

GHC.Read.readSymField5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "("#;

GHC.Read.readSymField4 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Read.readSymField5;

GHC.Read.readSymField_lexeme1 :: Text.Read.Lex.Lexeme
[GblId, Str=m3, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Punc! [GHC.Read.readSymField4];

GHC.Read.readSymField3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ")"#;

GHC.Read.readSymField2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Read.readSymField3;

GHC.Read.readSymField_lexeme :: Text.Read.Lex.Lexeme
[GblId, Str=m3, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Punc! [GHC.Read.readSymField2];

GHC.Read.$wreadSymField [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Base.String
     -> Text.ParserCombinators.ReadPrec.ReadPrec a
     -> Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> (# GHC.Base.String -> Text.ParserCombinators.ReadP.P b #)
[GblId,
 Arity=4,
 Str=<L,U><L,1*C1(C1(U))><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [w_s3Xlp w1_s3Xlq w2_s3Xlr w3_s3Xls]
        let {
          sat_s3XlH [Occ=Once]
            :: () -> Text.ParserCombinators.ReadP.P b_s3Mo0
          [LclId] =
              [w_s3Xlp w1_s3Xlq w2_s3Xlr w3_s3Xls] \r [a1_s3Xlt]
                  let {
                    sat_s3XlE [Occ=Once]
                      :: () -> Text.ParserCombinators.ReadP.P b_s3Mo0
                    [LclId] =
                        [w1_s3Xlq w2_s3Xlr w3_s3Xls] \r [a2_s3Xlv]
                            let {
                              sat_s3XlB [Occ=Once]
                                :: () -> Text.ParserCombinators.ReadP.P b_s3Mo0
                              [LclId] =
                                  [w1_s3Xlq w2_s3Xlr w3_s3Xls] \r [a3_s3Xlw]
                                      let {
                                        sat_s3Xly [Occ=Once]
                                          :: () -> Text.ParserCombinators.ReadP.P b_s3Mo0
                                        [LclId] =
                                            [w1_s3Xlq w2_s3Xlr w3_s3Xls] \r [a4_s3Xlx]
                                                w1_s3Xlq w2_s3Xlr w3_s3Xls;
                                      } in 
                                        case
                                            Text.Read.Lex.$wexpect
                                                GHC.Read.readField_lexeme sat_s3Xly
                                        of
                                        { Unit# ww1_s3XlA [Occ=Once] ->
                                              Text.ParserCombinators.ReadP.Look [ww1_s3XlA];
                                        };
                            } in 
                              case
                                  Text.Read.Lex.$wexpect GHC.Read.readSymField_lexeme sat_s3XlB
                              of
                              { Unit# ww1_s3XlD [Occ=Once] ->
                                    Text.ParserCombinators.ReadP.Look [ww1_s3XlD];
                              }; } in
                  let {
                    sat_s3Xlu [Occ=Once] :: Text.Read.Lex.Lexeme
                    [LclId] =
                        CCCS Text.Read.Lex.Symbol! [w_s3Xlp];
                  } in 
                    case Text.Read.Lex.$wexpect sat_s3Xlu sat_s3XlE of {
                      Unit# ww1_s3XlG [Occ=Once] ->
                          Text.ParserCombinators.ReadP.Look [ww1_s3XlG];
                    };
        } in 
          Text.Read.Lex.$wexpect GHC.Read.readSymField_lexeme1 sat_s3XlH;

GHC.Read.readSymField1 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Base.String
     -> Text.ParserCombinators.ReadPrec.ReadPrec a
     -> Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=4,
 Str=<L,U><L,1*C1(C1(U))><L,U><L,U>m2,
 Unf=OtherCon []] =
    [] \r [w_s3XlI w1_s3XlJ w2_s3XlK w3_s3XlL]
        case
            GHC.Read.$wreadSymField w_s3XlI w1_s3XlJ w2_s3XlK w3_s3XlL
        of
        { Unit# ww1_s3XlN [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3XlN];
        };

GHC.Read.readSymField [InlPrag=NOINLINE]
  :: forall a.
     GHC.Base.String
     -> Text.ParserCombinators.ReadPrec.ReadPrec a
     -> Text.ParserCombinators.ReadPrec.ReadPrec a
[GblId,
 Arity=4,
 Str=<L,U><L,1*C1(C1(U))><L,U><L,U>m2,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.Read.readSymField1 eta_B4 eta_B3 eta_B2 eta_B1;

GHC.Read.$fRead(,)4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ","#;

GHC.Read.$fRead(,)3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Read.$fRead(,)4;

GHC.Read.$fRead(,)_lexeme :: Text.Read.Lex.Lexeme
[GblId, Str=m3, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Punc! [GHC.Read.$fRead(,)3];

GHC.Read.$fRead(,)2
  :: forall a b.
     (GHC.Read.Read a, GHC.Read.Read b) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP (a, b)
[GblId,
 Arity=3,
 Str=<L,1*U(A,A,1*C1(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XlO $dRead1_s3XlP eta_s3XlQ]
        let {
          ds1_s3XlR [Occ=OnceL, Dmd=<L,C(U)>]
            :: Text.ParserCombinators.ReadP.ReadP a_a3KnF
          [LclId] =
              [$dRead_s3XlO eta_s3XlQ] \u []
                  GHC.Read.readPrec $dRead_s3XlO eta_s3XlQ; } in
        let {
          sat_s3Xm2 [Occ=Once]
            :: forall b1.
               ((a_a3KnF, b_a3KnG) -> Text.ParserCombinators.ReadP.P b1)
               -> Text.ParserCombinators.ReadP.P b1
          [LclId] =
              [$dRead1_s3XlP eta_s3XlQ ds1_s3XlR] \r [k1_s3XlS]
                  let {
                    sat_s3Xm1 [Occ=Once]
                      :: a_a3KnF -> Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId] =
                        [$dRead1_s3XlP eta_s3XlQ k1_s3XlS] \r [a1_s3XlT]
                            let {
                              sat_s3XlY [Occ=Once]
                                :: () -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [$dRead1_s3XlP eta_s3XlQ k1_s3XlS a1_s3XlT] \r [a2_s3XlU]
                                      let {
                                        sat_s3XlX [Occ=Once]
                                          :: b_a3KnG -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            [k1_s3XlS a1_s3XlT] \r [a3_s3XlV]
                                                let {
                                                  sat_s3XlW [Occ=Once] :: (a_a3KnF, b_a3KnG)
                                                  [LclId] =
                                                      CCCS (,)! [a1_s3XlT a3_s3XlV];
                                                } in  k1_s3XlS sat_s3XlW;
                                      } in  GHC.Read.readPrec $dRead1_s3XlP eta_s3XlQ sat_s3XlX;
                            } in 
                              case
                                  Text.Read.Lex.$wexpect GHC.Read.$fRead(,)_lexeme sat_s3XlY
                              of
                              { Unit# ww1_s3Xm0 [Occ=Once] ->
                                    Text.ParserCombinators.ReadP.Look [ww1_s3Xm0];
                              };
                  } in  ds1_s3XlR sat_s3Xm1;
        } in  sat_s3Xm2;

GHC.Read.$fRead(,,,)2
  :: forall a b c d.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP (a, b, c, d)
[GblId,
 Arity=5,
 Str=<L,1*U(A,A,1*C1(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Xm3
           $dRead1_s3Xm4
           $dRead2_s3Xm5
           $dRead3_s3Xm6
           eta_s3Xm7]
        let {
          ds1_s3Xm8 [Occ=OnceL, Dmd=<L,C(U)>]
            :: Text.ParserCombinators.ReadP.ReadP (a_a3Ko6, b_a3Ko7)
          [LclId] =
              [$dRead_s3Xm3 $dRead1_s3Xm4 eta_s3Xm7] \u []
                  GHC.Read.$fRead(,)2 $dRead_s3Xm3 $dRead1_s3Xm4 eta_s3Xm7; } in
        let {
          sat_s3Xmp [Occ=Once]
            :: forall b1.
               ((a_a3Ko6, b_a3Ko7, c_a3Ko8, d_a3Ko9)
                -> Text.ParserCombinators.ReadP.P b1)
               -> Text.ParserCombinators.ReadP.P b1
          [LclId] =
              [$dRead2_s3Xm5 $dRead3_s3Xm6 eta_s3Xm7 ds1_s3Xm8] \r [k1_s3Xm9]
                  let {
                    sat_s3Xmo [Occ=Once]
                      :: (a_a3Ko6, b_a3Ko7) -> Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId] =
                        [$dRead2_s3Xm5 $dRead3_s3Xm6 eta_s3Xm7 k1_s3Xm9] \r [a1_s3Xma]
                            case a1_s3Xma of {
                              (,) a2_s3Xmc [Occ=OnceL] b2_s3Xmd [Occ=OnceL] ->
                                  let {
                                    sat_s3Xml [Occ=Once]
                                      :: () -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                    [LclId] =
                                        [$dRead2_s3Xm5
                                         $dRead3_s3Xm6
                                         eta_s3Xm7
                                         k1_s3Xm9
                                         a2_s3Xmc
                                         b2_s3Xmd] \r [a3_s3Xme]
                                            let {
                                              sat_s3Xmk [Occ=Once]
                                                :: (c_a3Ko8, d_a3Ko9)
                                                   -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                              [LclId] =
                                                  [k1_s3Xm9 a2_s3Xmc b2_s3Xmd] \r [a4_s3Xmf]
                                                      case a4_s3Xmf of {
                                                        (,) c1_s3Xmh [Occ=Once]
                                                            d1_s3Xmi [Occ=Once] ->
                                                            let {
                                                              sat_s3Xmj [Occ=Once]
                                                                :: (a_a3Ko6, b_a3Ko7, c_a3Ko8,
                                                                    d_a3Ko9)
                                                              [LclId] =
                                                                  CCCS (,,,)! [a2_s3Xmc
                                                                               b2_s3Xmd
                                                                               c1_s3Xmh
                                                                               d1_s3Xmi];
                                                            } in  k1_s3Xm9 sat_s3Xmj;
                                                      };
                                            } in 
                                              GHC.Read.$fRead(,)2
                                                  $dRead2_s3Xm5 $dRead3_s3Xm6 eta_s3Xm7 sat_s3Xmk;
                                  } in 
                                    case
                                        Text.Read.Lex.$wexpect GHC.Read.$fRead(,)_lexeme sat_s3Xml
                                    of
                                    { Unit# ww1_s3Xmn [Occ=Once] ->
                                          Text.ParserCombinators.ReadP.Look [ww1_s3Xmn];
                                    };
                            };
                  } in  ds1_s3Xm8 sat_s3Xmo;
        } in  sat_s3Xmp;

GHC.Read.$fRead(,,,,,,,)2
  :: forall a b c d e f g h.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP (a, b, c, d, e, f, g, h)
[GblId,
 Arity=9,
 Str=<L,1*U(A,A,1*C1(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Xmq
           $dRead1_s3Xmr
           $dRead2_s3Xms
           $dRead3_s3Xmt
           $dRead4_s3Xmu
           $dRead5_s3Xmv
           $dRead6_s3Xmw
           $dRead7_s3Xmx
           eta_s3Xmy]
        let {
          ds1_s3Xmz [Occ=OnceL, Dmd=<L,C(U)>]
            :: Text.ParserCombinators.ReadP.ReadP
                 (a_a3KoH, b_a3KoI, c_a3KoJ, d_a3KoK)
          [LclId] =
              [$dRead_s3Xmq
               $dRead1_s3Xmr
               $dRead2_s3Xms
               $dRead3_s3Xmt
               eta_s3Xmy] \u []
                  GHC.Read.$fRead(,,,)2
                      $dRead_s3Xmq
                      $dRead1_s3Xmr
                      $dRead2_s3Xms
                      $dRead3_s3Xmt
                      eta_s3Xmy; } in
        let {
          sat_s3XmU [Occ=Once]
            :: forall b1.
               ((a_a3KoH, b_a3KoI, c_a3KoJ, d_a3KoK, e_a3KoL, f_a3KoM, g_a3KoN,
                 h_a3KoO)
                -> Text.ParserCombinators.ReadP.P b1)
               -> Text.ParserCombinators.ReadP.P b1
          [LclId] =
              [$dRead4_s3Xmu
               $dRead5_s3Xmv
               $dRead6_s3Xmw
               $dRead7_s3Xmx
               eta_s3Xmy
               ds1_s3Xmz] \r [k1_s3XmA]
                  let {
                    sat_s3XmT [Occ=Once]
                      :: (a_a3KoH, b_a3KoI, c_a3KoJ, d_a3KoK)
                         -> Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId] =
                        [$dRead4_s3Xmu
                         $dRead5_s3Xmv
                         $dRead6_s3Xmw
                         $dRead7_s3Xmx
                         eta_s3Xmy
                         k1_s3XmA] \r [a1_s3XmB]
                            case a1_s3XmB of {
                              (,,,) a2_s3XmD [Occ=OnceL]
                                    b2_s3XmE [Occ=OnceL]
                                    c1_s3XmF [Occ=OnceL]
                                    d1_s3XmG [Occ=OnceL] ->
                                  let {
                                    sat_s3XmQ [Occ=Once]
                                      :: () -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                    [LclId] =
                                        [$dRead4_s3Xmu
                                         $dRead5_s3Xmv
                                         $dRead6_s3Xmw
                                         $dRead7_s3Xmx
                                         eta_s3Xmy
                                         k1_s3XmA
                                         a2_s3XmD
                                         b2_s3XmE
                                         c1_s3XmF
                                         d1_s3XmG] \r [a3_s3XmH]
                                            let {
                                              sat_s3XmP [Occ=Once]
                                                :: (e_a3KoL, f_a3KoM, g_a3KoN, h_a3KoO)
                                                   -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                              [LclId] =
                                                  [k1_s3XmA
                                                   a2_s3XmD
                                                   b2_s3XmE
                                                   c1_s3XmF
                                                   d1_s3XmG] \r [a4_s3XmI]
                                                      case a4_s3XmI of {
                                                        (,,,) e1_s3XmK [Occ=Once]
                                                              f1_s3XmL [Occ=Once]
                                                              g1_s3XmM [Occ=Once]
                                                              h1_s3XmN [Occ=Once] ->
                                                            let {
                                                              sat_s3XmO [Occ=Once]
                                                                :: (a_a3KoH, b_a3KoI, c_a3KoJ,
                                                                    d_a3KoK, e_a3KoL, f_a3KoM,
                                                                    g_a3KoN, h_a3KoO)
                                                              [LclId] =
                                                                  CCCS (,,,,,,,)! [a2_s3XmD
                                                                                   b2_s3XmE
                                                                                   c1_s3XmF
                                                                                   d1_s3XmG
                                                                                   e1_s3XmK
                                                                                   f1_s3XmL
                                                                                   g1_s3XmM
                                                                                   h1_s3XmN];
                                                            } in  k1_s3XmA sat_s3XmO;
                                                      };
                                            } in 
                                              GHC.Read.$fRead(,,,)2
                                                  $dRead4_s3Xmu
                                                  $dRead5_s3Xmv
                                                  $dRead6_s3Xmw
                                                  $dRead7_s3Xmx
                                                  eta_s3Xmy
                                                  sat_s3XmP;
                                  } in 
                                    case
                                        Text.Read.Lex.$wexpect GHC.Read.$fRead(,)_lexeme sat_s3XmQ
                                    of
                                    { Unit# ww1_s3XmS [Occ=Once] ->
                                          Text.ParserCombinators.ReadP.Look [ww1_s3XmS];
                                    };
                            };
                  } in  ds1_s3Xmz sat_s3XmT;
        } in  sat_s3XmU;

GHC.Read.$wskipSpacesThenP [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     Text.ParserCombinators.ReadPrec.ReadPrec a
     -> Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> (# GHC.Base.String -> Text.ParserCombinators.ReadP.P b #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [w_s3XmV w1_s3XmW w2_s3XmX]
        let {
          skip_s3XmY [Occ=LoopBreaker]
            :: [GHC.Types.Char]
               -> Text.ParserCombinators.ReadPrec.Prec
               -> forall b1.
                  (a_s3MoF -> Text.ParserCombinators.ReadP.P b1)
                  -> Text.ParserCombinators.ReadP.P b1
          [LclId, Arity=3, Str=<S,1*U><L,U><L,U>, Unf=OtherCon []] =
              sat-only [w_s3XmV skip_s3XmY] \r [ds_s3XmZ eta_s3Xn0 eta1_s3Xn1]
                  case ds_s3XmZ of {
                    [] -> w_s3XmV eta_s3Xn0 eta1_s3Xn1;
                    : c_s3Xn3 [Occ=Once!] s_s3Xn4 [Occ=Once] ->
                        case c_s3Xn3 of {
                          GHC.Types.C# ww1_s3Xn6 ->
                              case ord# [ww1_s3Xn6] of sat_s3Xn8 {
                                __DEFAULT ->
                                    case int2Word# [sat_s3Xn8] of x_s3Xn7 [Dmd=<S,U>] {
                                      __DEFAULT ->
                                          let-no-escape {
                                            $j_s3Xn9 [Occ=Once*T[0], Dmd=<L,1*U>]
                                              :: Text.ParserCombinators.ReadP.P b1_X3nqq
                                            [LclId[JoinId(0)], Unf=OtherCon []] =
                                                [skip_s3XmY eta_s3Xn0 eta1_s3Xn1 s_s3Xn4] \r []
                                                    let {
                                                      lvl2_s3Xna [Occ=OnceL]
                                                        :: Text.ParserCombinators.ReadP.P b1_X3nqq
                                                      [LclId] =
                                                          [skip_s3XmY
                                                           eta_s3Xn0
                                                           eta1_s3Xn1
                                                           s_s3Xn4] \u []
                                                              let {
                                                                sat_s3Xnc [Occ=Once]
                                                                  :: a_s3MoF
                                                                     -> Text.ParserCombinators.ReadP.P
                                                                          b1_X3nqq
                                                                [LclId] =
                                                                    [eta1_s3Xn1] \r [a4_s3Xnb]
                                                                        eta1_s3Xn1 a4_s3Xnb;
                                                              } in 
                                                                skip_s3XmY
                                                                    s_s3Xn4
                                                                    eta_s3Xn0
                                                                    sat_s3Xnc; } in
                                                    let {
                                                      sat_s3Xne [Occ=Once]
                                                        :: GHC.Types.Char
                                                           -> Text.ParserCombinators.ReadP.P
                                                                b1_X3nqq
                                                      [LclId] =
                                                          [lvl2_s3Xna] \r [x1_s3Xnd] lvl2_s3Xna;
                                                    } in 
                                                      Text.ParserCombinators.ReadP.Get [sat_s3Xne];
                                          } in 
                                            case leWord# [x_s3Xn7 887##] of {
                                              __DEFAULT ->
                                                  case ord# [ww1_s3Xn6] of sat_s3Xnh {
                                                    __DEFAULT ->
                                                        case
                                                            __pkg_ccall base-4.11.0.0 [sat_s3Xnh
                                                                                       GHC.Prim.realWorld#]
                                                        of
                                                        { Unit# ds2_s3Xnk [Occ=Once!] ->
                                                              case ds2_s3Xnk of {
                                                                __DEFAULT -> $j_s3Xn9;
                                                                0# -> w_s3XmV eta_s3Xn0 eta1_s3Xn1;
                                                              };
                                                        };
                                                  };
                                              1# ->
                                                  case x_s3Xn7 of wild1_s3Xnm {
                                                    __DEFAULT ->
                                                        case
                                                            minusWord# [wild1_s3Xnm 9##]
                                                        of
                                                        sat_s3Xnn
                                                        { __DEFAULT ->
                                                              case leWord# [sat_s3Xnn 4##] of {
                                                                __DEFAULT ->
                                                                    case wild1_s3Xnm of {
                                                                      __DEFAULT ->
                                                                          w_s3XmV
                                                                              eta_s3Xn0 eta1_s3Xn1;
                                                                      160## -> $j_s3Xn9;
                                                                    };
                                                                1# -> $j_s3Xn9;
                                                              };
                                                        };
                                                    32## -> $j_s3Xn9;
                                                  };
                                            };
                                    };
                              };
                        };
                  }; } in
        let {
          sat_s3Xnr [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b_s3MoI
          [LclId] =
              [w1_s3XmW w2_s3XmX skip_s3XmY] \r [a1_s3Xnq]
                  skip_s3XmY a1_s3Xnq w1_s3XmW w2_s3XmX;
        } in  Unit# [sat_s3Xnr];

GHC.Read.$fRead()5 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     Text.ParserCombinators.ReadPrec.ReadPrec a
     -> Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><L,U><L,U>m2,
 Unf=OtherCon []] =
    [] \r [w_s3Xns w1_s3Xnt w2_s3Xnu]
        case GHC.Read.$wskipSpacesThenP w_s3Xns w1_s3Xnt w2_s3Xnu of {
          Unit# ww1_s3Xnw [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3Xnw];
        };

GHC.Read.$wparen' [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     Text.ParserCombinators.ReadPrec.ReadPrec a
     -> Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> (# GHC.Types.Char -> Text.ParserCombinators.ReadP.P b #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*C1(C1(U))><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [w_s3Xnx w1_s3Xny w2_s3Xnz]
        let {
          lvl2_s3XnA [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b_s3MoR
          [LclId] =
              [w_s3Xnx w1_s3Xny w2_s3Xnz] \u []
                  let {
                    sat_s3XnN [Occ=Once]
                      :: a_s3MoO -> Text.ParserCombinators.ReadP.P b_s3MoR
                    [LclId] =
                        [w1_s3Xny w2_s3Xnz] \r [a1_s3XnB]
                            let {
                              sat_s3XnK [Occ=Once]
                                :: Text.ParserCombinators.ReadPrec.ReadPrec a_s3MoO
                              [LclId] =
                                  [a1_s3XnB] \r [n_s3XnC k1_s3XnD]
                                      let {
                                        lvl3_s3XnE [Occ=OnceL]
                                          :: Text.ParserCombinators.ReadP.P b1_X3nNG
                                        [LclId] =
                                            [a1_s3XnB k1_s3XnD] \u [] k1_s3XnD a1_s3XnB; } in
                                      let {
                                        sat_s3XnJ [Occ=Once]
                                          :: GHC.Types.Char
                                             -> Text.ParserCombinators.ReadP.P b1_X3nNG
                                        [LclId] =
                                            [lvl3_s3XnE] \r [a2_s3XnF]
                                                case a2_s3XnF of {
                                                  GHC.Types.C# x_s3XnH [Occ=Once!] ->
                                                      case x_s3XnH of {
                                                        __DEFAULT ->
                                                            Text.ParserCombinators.ReadP.Fail [];
                                                        ')'# -> lvl3_s3XnE;
                                                      };
                                                };
                                      } in  Text.ParserCombinators.ReadP.Get [sat_s3XnJ];
                            } in 
                              case GHC.Read.$wskipSpacesThenP sat_s3XnK w1_s3Xny w2_s3Xnz of {
                                Unit# ww1_s3XnM [Occ=Once] ->
                                    Text.ParserCombinators.ReadP.Look [ww1_s3XnM];
                              };
                  } in 
                    w_s3Xnx Text.ParserCombinators.ReadPrec.minPrec sat_s3XnN; } in
        let {
          sat_s3XnS [Occ=Once]
            :: GHC.Types.Char -> Text.ParserCombinators.ReadP.P b_s3MoR
          [LclId] =
              [lvl2_s3XnA] \r [a1_s3XnO]
                  case a1_s3XnO of {
                    GHC.Types.C# x_s3XnQ [Occ=Once!] ->
                        case x_s3XnQ of {
                          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                          '('# -> lvl2_s3XnA;
                        };
                  };
        } in  Unit# [sat_s3XnS];

GHC.Read.paren2 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     Text.ParserCombinators.ReadPrec.ReadPrec a
     -> Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*C1(C1(U))><L,U><L,U>m1,
 Unf=OtherCon []] =
    [] \r [w_s3XnT w1_s3XnU w2_s3XnV]
        case GHC.Read.$wparen' w_s3XnT w1_s3XnU w2_s3XnV of {
          Unit# ww1_s3XnX [Occ=Once] ->
              Text.ParserCombinators.ReadP.Get [ww1_s3XnX];
        };

GHC.Read.paren1
  :: forall a.
     Text.ParserCombinators.ReadPrec.ReadPrec a
     -> Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><L,U><L,U>m2,
 Unf=OtherCon []] =
    [] \r [p_s3XnY eta_s3XnZ eta1_s3Xo0]
        let {
          sat_s3Xo1 [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec a_a3KmL
          [LclId] =
              [p_s3XnY] \r [eta_B2 eta_B1] GHC.Read.paren2 p_s3XnY eta_B2 eta_B1;
        } in 
          case GHC.Read.$wskipSpacesThenP sat_s3Xo1 eta_s3XnZ eta1_s3Xo0 of {
            Unit# ww1_s3Xo3 [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3Xo3];
          };

GHC.Read.paren
  :: forall a.
     Text.ParserCombinators.ReadPrec.ReadPrec a
     -> Text.ParserCombinators.ReadPrec.ReadPrec a
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><L,U><L,U>m2,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] GHC.Read.paren1 eta_B3 eta_B2 eta_B1;

GHC.Read.list3
  :: forall a.
     Text.ParserCombinators.ReadPrec.ReadPrec a
     -> Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=3, Str=<L,C(C(U))><L,U><L,U>, Unf=OtherCon []] =
    [] \r [p_s3Xo4 eta_s3Xo5 eta1_s3Xo6]
        let {
          optional_s3Xo7 [Occ=OnceL]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> Text.ParserCombinators.ReadP.ReadP a_a3KmP
          [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
              [p_s3Xo4 optional1_s3Xo8] \r [n_s3Xo9]
                  let {
                    ds2_s3Xoa [Occ=OnceL, Dmd=<L,C(U)>]
                      :: Text.ParserCombinators.ReadP.ReadP a_a3KmP
                    [LclId] =
                        [p_s3Xo4 n_s3Xo9] \u [] p_s3Xo4 n_s3Xo9; } in
                  let {
                    sat_s3Xog [Occ=Once]
                      :: forall b1.
                         (a_a3KmP -> Text.ParserCombinators.ReadP.P b1)
                         -> Text.ParserCombinators.ReadP.P b1
                    [LclId] =
                        [optional1_s3Xo8 n_s3Xo9 ds2_s3Xoa] \r [k_s3Xob]
                            let {
                              sat_s3Xof [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_a3nvJ
                              [LclId] =
                                  [optional1_s3Xo8 n_s3Xo9 k_s3Xob] \u []
                                      case GHC.Read.$wparen' optional1_s3Xo8 n_s3Xo9 k_s3Xob of {
                                        Unit# ww1_s3Xoe [Occ=Once] ->
                                            Text.ParserCombinators.ReadP.Get [ww1_s3Xoe];
                                      };
                            } in 
                              case ds2_s3Xoa k_s3Xob of sat_s3Xoc {
                                __DEFAULT ->
                                    Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                        sat_s3Xoc sat_s3Xof;
                              };
                  } in  sat_s3Xog;
          optional1_s3Xo8 [Occ=LoopBreaker]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> forall b1.
                  (a_a3KmP -> Text.ParserCombinators.ReadP.P b1)
                  -> Text.ParserCombinators.ReadP.P b1
          [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
              [optional_s3Xo7] \r [w_s3Xoh w1_s3Xoi]
                  case
                      GHC.Read.$wskipSpacesThenP optional_s3Xo7 w_s3Xoh w1_s3Xoi
                  of
                  { Unit# ww1_s3Xok [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Look [ww1_s3Xok];
                  };
        } in  optional1_s3Xo8 eta_s3Xo5 eta1_s3Xo6;

GHC.Read.parens
  :: forall a.
     Text.ParserCombinators.ReadPrec.ReadPrec a
     -> Text.ParserCombinators.ReadPrec.ReadPrec a
[GblId, Arity=3, Str=<L,C(C(U))><L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] GHC.Read.list3 eta_B3 eta_B2 eta_B1;

GHC.Read.$fRead(,,,,,,,,,,,,,,)1
  :: forall a b c d e f g h i j k l m n o.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l, GHC.Read.Read m, GHC.Read.Read n,
      GHC.Read.Read o) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        ((a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)
         -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=17,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Xol
           $dRead1_s3Xom
           $dRead2_s3Xon
           $dRead3_s3Xoo
           $dRead4_s3Xop
           $dRead5_s3Xoq
           $dRead6_s3Xor
           $dRead7_s3Xos
           $dRead8_s3Xot
           $dRead9_s3Xou
           $dRead10_s3Xov
           $dRead11_s3Xow
           $dRead12_s3Xox
           $dRead13_s3Xoy
           $dRead14_s3Xoz
           eta_s3XoA
           eta1_s3XoB]
        let {
          p_s3XoC [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> Text.ParserCombinators.ReadP.ReadP
                    (a_a3Kwb, b_a3Kwc, c_a3Kwd, d_a3Kwe, e_a3Kwf, f_a3Kwg, g_a3Kwh,
                     h_a3Kwi, i_a3Kwj, j_a3Kwk, k_a3Kwl, l_a3Kwm, m_a3Kwn, n_a3Kwo,
                     o_a3Kwp)
          [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
              [$dRead_s3Xol
               $dRead1_s3Xom
               $dRead2_s3Xon
               $dRead3_s3Xoo
               $dRead4_s3Xop
               $dRead5_s3Xoq
               $dRead6_s3Xor
               $dRead7_s3Xos
               $dRead8_s3Xot
               $dRead9_s3Xou
               $dRead10_s3Xov
               $dRead11_s3Xow
               $dRead12_s3Xox
               $dRead13_s3Xoy
               $dRead14_s3Xoz] \r [n1_s3XoD]
                  let {
                    ds1_s3XoE [Occ=OnceL, Dmd=<L,C(U)>]
                      :: Text.ParserCombinators.ReadP.ReadP
                           (a_a3Kwb, b_a3Kwc, c_a3Kwd, d_a3Kwe, e_a3Kwf, f_a3Kwg, g_a3Kwh,
                            h_a3Kwi)
                    [LclId] =
                        [$dRead_s3Xol
                         $dRead1_s3Xom
                         $dRead2_s3Xon
                         $dRead3_s3Xoo
                         $dRead4_s3Xop
                         $dRead5_s3Xoq
                         $dRead6_s3Xor
                         $dRead7_s3Xos
                         n1_s3XoD] \u []
                            GHC.Read.$fRead(,,,,,,,)2
                                $dRead_s3Xol
                                $dRead1_s3Xom
                                $dRead2_s3Xon
                                $dRead3_s3Xoo
                                $dRead4_s3Xop
                                $dRead5_s3Xoq
                                $dRead6_s3Xor
                                $dRead7_s3Xos
                                n1_s3XoD; } in
                  let {
                    sat_s3Xpi [Occ=Once]
                      :: forall b2.
                         ((a_a3Kwb, b_a3Kwc, c_a3Kwd, d_a3Kwe, e_a3Kwf, f_a3Kwg, g_a3Kwh,
                           h_a3Kwi, i_a3Kwj, j_a3Kwk, k_a3Kwl, l_a3Kwm, m_a3Kwn, n_a3Kwo,
                           o_a3Kwp)
                          -> Text.ParserCombinators.ReadP.P b2)
                         -> Text.ParserCombinators.ReadP.P b2
                    [LclId] =
                        [$dRead8_s3Xot
                         $dRead9_s3Xou
                         $dRead10_s3Xov
                         $dRead11_s3Xow
                         $dRead12_s3Xox
                         $dRead13_s3Xoy
                         $dRead14_s3Xoz
                         n1_s3XoD
                         ds1_s3XoE] \r [k1_s3XoF]
                            let {
                              sat_s3Xph [Occ=Once]
                                :: (a_a3Kwb, b_a3Kwc, c_a3Kwd, d_a3Kwe, e_a3Kwf, f_a3Kwg, g_a3Kwh,
                                    h_a3Kwi)
                                   -> Text.ParserCombinators.ReadP.P b2_a3nIU
                              [LclId] =
                                  [$dRead8_s3Xot
                                   $dRead9_s3Xou
                                   $dRead10_s3Xov
                                   $dRead11_s3Xow
                                   $dRead12_s3Xox
                                   $dRead13_s3Xoy
                                   $dRead14_s3Xoz
                                   n1_s3XoD
                                   k1_s3XoF] \r [a1_s3XoG]
                                      case a1_s3XoG of {
                                        (,,,,,,,) a2_s3XoI [Occ=OnceL]
                                                  b3_s3XoJ [Occ=OnceL]
                                                  c1_s3XoK [Occ=OnceL]
                                                  d1_s3XoL [Occ=OnceL]
                                                  e1_s3XoM [Occ=OnceL]
                                                  f1_s3XoN [Occ=OnceL]
                                                  g1_s3XoO [Occ=OnceL]
                                                  h1_s3XoP [Occ=OnceL] ->
                                            let {
                                              sat_s3Xpe [Occ=Once]
                                                :: () -> Text.ParserCombinators.ReadP.P b2_a3nIU
                                              [LclId] =
                                                  [$dRead8_s3Xot
                                                   $dRead9_s3Xou
                                                   $dRead10_s3Xov
                                                   $dRead11_s3Xow
                                                   $dRead12_s3Xox
                                                   $dRead13_s3Xoy
                                                   $dRead14_s3Xoz
                                                   n1_s3XoD
                                                   k1_s3XoF
                                                   a2_s3XoI
                                                   b3_s3XoJ
                                                   c1_s3XoK
                                                   d1_s3XoL
                                                   e1_s3XoM
                                                   f1_s3XoN
                                                   g1_s3XoO
                                                   h1_s3XoP] \r [a3_s3XoQ]
                                                      let {
                                                        sat_s3Xpd [Occ=Once]
                                                          :: (i_a3Kwj, j_a3Kwk, k_a3Kwl, l_a3Kwm)
                                                             -> Text.ParserCombinators.ReadP.P
                                                                  b2_a3nIU
                                                        [LclId] =
                                                            [$dRead12_s3Xox
                                                             $dRead13_s3Xoy
                                                             $dRead14_s3Xoz
                                                             n1_s3XoD
                                                             k1_s3XoF
                                                             a2_s3XoI
                                                             b3_s3XoJ
                                                             c1_s3XoK
                                                             d1_s3XoL
                                                             e1_s3XoM
                                                             f1_s3XoN
                                                             g1_s3XoO
                                                             h1_s3XoP] \r [a4_s3XoR]
                                                                case a4_s3XoR of {
                                                                  (,,,) i1_s3XoT [Occ=OnceL]
                                                                        j1_s3XoU [Occ=OnceL]
                                                                        k2_s3XoV [Occ=OnceL]
                                                                        l1_s3XoW [Occ=OnceL] ->
                                                                      let {
                                                                        sat_s3Xpa [Occ=Once]
                                                                          :: ()
                                                                             -> Text.ParserCombinators.ReadP.P
                                                                                  b2_a3nIU
                                                                        [LclId] =
                                                                            [$dRead12_s3Xox
                                                                             $dRead13_s3Xoy
                                                                             $dRead14_s3Xoz
                                                                             n1_s3XoD
                                                                             k1_s3XoF
                                                                             a2_s3XoI
                                                                             b3_s3XoJ
                                                                             c1_s3XoK
                                                                             d1_s3XoL
                                                                             e1_s3XoM
                                                                             f1_s3XoN
                                                                             g1_s3XoO
                                                                             h1_s3XoP
                                                                             i1_s3XoT
                                                                             j1_s3XoU
                                                                             k2_s3XoV
                                                                             l1_s3XoW] \r [a5_s3XoX]
                                                                                let {
                                                                                  sat_s3Xp9 [Occ=Once]
                                                                                    :: (m_a3Kwn,
                                                                                        n_a3Kwo)
                                                                                       -> Text.ParserCombinators.ReadP.P
                                                                                            b2_a3nIU
                                                                                  [LclId] =
                                                                                      [$dRead14_s3Xoz
                                                                                       n1_s3XoD
                                                                                       k1_s3XoF
                                                                                       a2_s3XoI
                                                                                       b3_s3XoJ
                                                                                       c1_s3XoK
                                                                                       d1_s3XoL
                                                                                       e1_s3XoM
                                                                                       f1_s3XoN
                                                                                       g1_s3XoO
                                                                                       h1_s3XoP
                                                                                       i1_s3XoT
                                                                                       j1_s3XoU
                                                                                       k2_s3XoV
                                                                                       l1_s3XoW] \r [a6_s3XoY]
                                                                                          case
                                                                                              a6_s3XoY
                                                                                          of
                                                                                          { (,) m1_s3Xp0 [Occ=OnceL]
                                                                                                n2_s3Xp1 [Occ=OnceL] ->
                                                                                                let {
                                                                                                  sat_s3Xp6 [Occ=Once]
                                                                                                    :: ()
                                                                                                       -> Text.ParserCombinators.ReadP.P
                                                                                                            b2_a3nIU
                                                                                                  [LclId] =
                                                                                                      [$dRead14_s3Xoz
                                                                                                       n1_s3XoD
                                                                                                       k1_s3XoF
                                                                                                       a2_s3XoI
                                                                                                       b3_s3XoJ
                                                                                                       c1_s3XoK
                                                                                                       d1_s3XoL
                                                                                                       e1_s3XoM
                                                                                                       f1_s3XoN
                                                                                                       g1_s3XoO
                                                                                                       h1_s3XoP
                                                                                                       i1_s3XoT
                                                                                                       j1_s3XoU
                                                                                                       k2_s3XoV
                                                                                                       l1_s3XoW
                                                                                                       m1_s3Xp0
                                                                                                       n2_s3Xp1] \r [a7_s3Xp2]
                                                                                                          let {
                                                                                                            sat_s3Xp5 [Occ=Once]
                                                                                                              :: o_a3Kwp
                                                                                                                 -> Text.ParserCombinators.ReadP.P
                                                                                                                      b2_a3nIU
                                                                                                            [LclId] =
                                                                                                                [k1_s3XoF
                                                                                                                 a2_s3XoI
                                                                                                                 b3_s3XoJ
                                                                                                                 c1_s3XoK
                                                                                                                 d1_s3XoL
                                                                                                                 e1_s3XoM
                                                                                                                 f1_s3XoN
                                                                                                                 g1_s3XoO
                                                                                                                 h1_s3XoP
                                                                                                                 i1_s3XoT
                                                                                                                 j1_s3XoU
                                                                                                                 k2_s3XoV
                                                                                                                 l1_s3XoW
                                                                                                                 m1_s3Xp0
                                                                                                                 n2_s3Xp1] \r [a8_s3Xp3]
                                                                                                                    let {
                                                                                                                      sat_s3Xp4 [Occ=Once]
                                                                                                                        :: (a_a3Kwb,
                                                                                                                            b_a3Kwc,
                                                                                                                            c_a3Kwd,
                                                                                                                            d_a3Kwe,
                                                                                                                            e_a3Kwf,
                                                                                                                            f_a3Kwg,
                                                                                                                            g_a3Kwh,
                                                                                                                            h_a3Kwi,
                                                                                                                            i_a3Kwj,
                                                                                                                            j_a3Kwk,
                                                                                                                            k_a3Kwl,
                                                                                                                            l_a3Kwm,
                                                                                                                            m_a3Kwn,
                                                                                                                            n_a3Kwo,
                                                                                                                            o_a3Kwp)
                                                                                                                      [LclId] =
                                                                                                                          CCCS (,,,,,,,,,,,,,,)! [a2_s3XoI
                                                                                                                                                  b3_s3XoJ
                                                                                                                                                  c1_s3XoK
                                                                                                                                                  d1_s3XoL
                                                                                                                                                  e1_s3XoM
                                                                                                                                                  f1_s3XoN
                                                                                                                                                  g1_s3XoO
                                                                                                                                                  h1_s3XoP
                                                                                                                                                  i1_s3XoT
                                                                                                                                                  j1_s3XoU
                                                                                                                                                  k2_s3XoV
                                                                                                                                                  l1_s3XoW
                                                                                                                                                  m1_s3Xp0
                                                                                                                                                  n2_s3Xp1
                                                                                                                                                  a8_s3Xp3];
                                                                                                                    } in 
                                                                                                                      k1_s3XoF
                                                                                                                          sat_s3Xp4;
                                                                                                          } in 
                                                                                                            GHC.Read.readPrec
                                                                                                                $dRead14_s3Xoz
                                                                                                                n1_s3XoD
                                                                                                                sat_s3Xp5;
                                                                                                } in 
                                                                                                  case
                                                                                                      Text.Read.Lex.$wexpect
                                                                                                          GHC.Read.$fRead(,)_lexeme
                                                                                                          sat_s3Xp6
                                                                                                  of
                                                                                                  { Unit# ww1_s3Xp8 [Occ=Once] ->
                                                                                                        Text.ParserCombinators.ReadP.Look [ww1_s3Xp8];
                                                                                                  };
                                                                                          };
                                                                                } in 
                                                                                  GHC.Read.$fRead(,)2
                                                                                      $dRead12_s3Xox
                                                                                      $dRead13_s3Xoy
                                                                                      n1_s3XoD
                                                                                      sat_s3Xp9;
                                                                      } in 
                                                                        case
                                                                            Text.Read.Lex.$wexpect
                                                                                GHC.Read.$fRead(,)_lexeme
                                                                                sat_s3Xpa
                                                                        of
                                                                        { Unit# ww1_s3Xpc [Occ=Once] ->
                                                                              Text.ParserCombinators.ReadP.Look [ww1_s3Xpc];
                                                                        };
                                                                };
                                                      } in 
                                                        GHC.Read.$fRead(,,,)2
                                                            $dRead8_s3Xot
                                                            $dRead9_s3Xou
                                                            $dRead10_s3Xov
                                                            $dRead11_s3Xow
                                                            n1_s3XoD
                                                            sat_s3Xpd;
                                            } in 
                                              case
                                                  Text.Read.Lex.$wexpect
                                                      GHC.Read.$fRead(,)_lexeme sat_s3Xpe
                                              of
                                              { Unit# ww1_s3Xpg [Occ=Once] ->
                                                    Text.ParserCombinators.ReadP.Look [ww1_s3Xpg];
                                              };
                                      };
                            } in  ds1_s3XoE sat_s3Xph;
                  } in  sat_s3Xpi; } in
        let {
          lvl2_s3Xpj [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> forall b2.
                  ((a_a3Kwb, b_a3Kwc, c_a3Kwd, d_a3Kwe, e_a3Kwf, f_a3Kwg, g_a3Kwh,
                    h_a3Kwi, i_a3Kwj, j_a3Kwk, k_a3Kwl, l_a3Kwm, m_a3Kwn, n_a3Kwo,
                    o_a3Kwp)
                   -> Text.ParserCombinators.ReadP.P b2)
                  -> Text.ParserCombinators.ReadP.P b2
          [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
              [p_s3XoC] \r [w_s3Xpk w1_s3Xpl]
                  case GHC.Read.$wparen' p_s3XoC w_s3Xpk w1_s3Xpl of {
                    Unit# ww1_s3Xpn [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Get [ww1_s3Xpn];
                  }; } in
        let {
          sat_s3Xps [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_a3Kwb, b_a3Kwc, c_a3Kwd, d_a3Kwe, e_a3Kwf, f_a3Kwg, g_a3Kwh,
                  h_a3Kwi, i_a3Kwj, j_a3Kwk, k_a3Kwl, l_a3Kwm, m_a3Kwn, n_a3Kwo,
                  o_a3Kwp)
          [LclId] =
              [lvl2_s3Xpj] \r [eta2_s3Xpo eta3_s3Xpp]
                  case
                      GHC.Read.$wskipSpacesThenP lvl2_s3Xpj eta2_s3Xpo eta3_s3Xpp
                  of
                  { Unit# ww1_s3Xpr [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Look [ww1_s3Xpr];
                  };
        } in  GHC.Read.list3 sat_s3Xps eta_s3XoA eta1_s3XoB;

GHC.Read.$fRead(,,,,,,,,,,,,,)1
  :: forall a b c d e f g h i j k l m n.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l, GHC.Read.Read m, GHC.Read.Read n) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        ((a, b, c, d, e, f, g, h, i, j, k, l, m, n)
         -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=16,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Xpt
           $dRead1_s3Xpu
           $dRead2_s3Xpv
           $dRead3_s3Xpw
           $dRead4_s3Xpx
           $dRead5_s3Xpy
           $dRead6_s3Xpz
           $dRead7_s3XpA
           $dRead8_s3XpB
           $dRead9_s3XpC
           $dRead10_s3XpD
           $dRead11_s3XpE
           $dRead12_s3XpF
           $dRead13_s3XpG
           eta_s3XpH
           eta1_s3XpI]
        let {
          p_s3XpJ [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> Text.ParserCombinators.ReadP.ReadP
                    (a_a3Kyh, b_a3Kyi, c_a3Kyj, d_a3Kyk, e_a3Kyl, f_a3Kym, g_a3Kyn,
                     h_a3Kyo, i_a3Kyp, j_a3Kyq, k_a3Kyr, l_a3Kys, m_a3Kyt, n_a3Kyu)
          [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
              [$dRead_s3Xpt
               $dRead1_s3Xpu
               $dRead2_s3Xpv
               $dRead3_s3Xpw
               $dRead4_s3Xpx
               $dRead5_s3Xpy
               $dRead6_s3Xpz
               $dRead7_s3XpA
               $dRead8_s3XpB
               $dRead9_s3XpC
               $dRead10_s3XpD
               $dRead11_s3XpE
               $dRead12_s3XpF
               $dRead13_s3XpG] \r [n1_s3XpK]
                  let {
                    ds1_s3XpL [Occ=OnceL, Dmd=<L,C(U)>]
                      :: Text.ParserCombinators.ReadP.ReadP
                           (a_a3Kyh, b_a3Kyi, c_a3Kyj, d_a3Kyk, e_a3Kyl, f_a3Kym, g_a3Kyn,
                            h_a3Kyo)
                    [LclId] =
                        [$dRead_s3Xpt
                         $dRead1_s3Xpu
                         $dRead2_s3Xpv
                         $dRead3_s3Xpw
                         $dRead4_s3Xpx
                         $dRead5_s3Xpy
                         $dRead6_s3Xpz
                         $dRead7_s3XpA
                         n1_s3XpK] \u []
                            GHC.Read.$fRead(,,,,,,,)2
                                $dRead_s3Xpt
                                $dRead1_s3Xpu
                                $dRead2_s3Xpv
                                $dRead3_s3Xpw
                                $dRead4_s3Xpx
                                $dRead5_s3Xpy
                                $dRead6_s3Xpz
                                $dRead7_s3XpA
                                n1_s3XpK; } in
                  let {
                    sat_s3Xqj [Occ=Once]
                      :: forall b2.
                         ((a_a3Kyh, b_a3Kyi, c_a3Kyj, d_a3Kyk, e_a3Kyl, f_a3Kym, g_a3Kyn,
                           h_a3Kyo, i_a3Kyp, j_a3Kyq, k_a3Kyr, l_a3Kys, m_a3Kyt, n_a3Kyu)
                          -> Text.ParserCombinators.ReadP.P b2)
                         -> Text.ParserCombinators.ReadP.P b2
                    [LclId] =
                        [$dRead8_s3XpB
                         $dRead9_s3XpC
                         $dRead10_s3XpD
                         $dRead11_s3XpE
                         $dRead12_s3XpF
                         $dRead13_s3XpG
                         n1_s3XpK
                         ds1_s3XpL] \r [k1_s3XpM]
                            let {
                              sat_s3Xqi [Occ=Once]
                                :: (a_a3Kyh, b_a3Kyi, c_a3Kyj, d_a3Kyk, e_a3Kyl, f_a3Kym, g_a3Kyn,
                                    h_a3Kyo)
                                   -> Text.ParserCombinators.ReadP.P b2_a3nIU
                              [LclId] =
                                  [$dRead8_s3XpB
                                   $dRead9_s3XpC
                                   $dRead10_s3XpD
                                   $dRead11_s3XpE
                                   $dRead12_s3XpF
                                   $dRead13_s3XpG
                                   n1_s3XpK
                                   k1_s3XpM] \r [a1_s3XpN]
                                      case a1_s3XpN of {
                                        (,,,,,,,) a2_s3XpP [Occ=OnceL]
                                                  b3_s3XpQ [Occ=OnceL]
                                                  c1_s3XpR [Occ=OnceL]
                                                  d1_s3XpS [Occ=OnceL]
                                                  e1_s3XpT [Occ=OnceL]
                                                  f1_s3XpU [Occ=OnceL]
                                                  g1_s3XpV [Occ=OnceL]
                                                  h1_s3XpW [Occ=OnceL] ->
                                            let {
                                              sat_s3Xqf [Occ=Once]
                                                :: () -> Text.ParserCombinators.ReadP.P b2_a3nIU
                                              [LclId] =
                                                  [$dRead8_s3XpB
                                                   $dRead9_s3XpC
                                                   $dRead10_s3XpD
                                                   $dRead11_s3XpE
                                                   $dRead12_s3XpF
                                                   $dRead13_s3XpG
                                                   n1_s3XpK
                                                   k1_s3XpM
                                                   a2_s3XpP
                                                   b3_s3XpQ
                                                   c1_s3XpR
                                                   d1_s3XpS
                                                   e1_s3XpT
                                                   f1_s3XpU
                                                   g1_s3XpV
                                                   h1_s3XpW] \r [a3_s3XpX]
                                                      let {
                                                        sat_s3Xqe [Occ=Once]
                                                          :: (i_a3Kyp, j_a3Kyq, k_a3Kyr, l_a3Kys)
                                                             -> Text.ParserCombinators.ReadP.P
                                                                  b2_a3nIU
                                                        [LclId] =
                                                            [$dRead12_s3XpF
                                                             $dRead13_s3XpG
                                                             n1_s3XpK
                                                             k1_s3XpM
                                                             a2_s3XpP
                                                             b3_s3XpQ
                                                             c1_s3XpR
                                                             d1_s3XpS
                                                             e1_s3XpT
                                                             f1_s3XpU
                                                             g1_s3XpV
                                                             h1_s3XpW] \r [a4_s3XpY]
                                                                case a4_s3XpY of {
                                                                  (,,,) i1_s3Xq0 [Occ=OnceL]
                                                                        j1_s3Xq1 [Occ=OnceL]
                                                                        k2_s3Xq2 [Occ=OnceL]
                                                                        l1_s3Xq3 [Occ=OnceL] ->
                                                                      let {
                                                                        sat_s3Xqb [Occ=Once]
                                                                          :: ()
                                                                             -> Text.ParserCombinators.ReadP.P
                                                                                  b2_a3nIU
                                                                        [LclId] =
                                                                            [$dRead12_s3XpF
                                                                             $dRead13_s3XpG
                                                                             n1_s3XpK
                                                                             k1_s3XpM
                                                                             a2_s3XpP
                                                                             b3_s3XpQ
                                                                             c1_s3XpR
                                                                             d1_s3XpS
                                                                             e1_s3XpT
                                                                             f1_s3XpU
                                                                             g1_s3XpV
                                                                             h1_s3XpW
                                                                             i1_s3Xq0
                                                                             j1_s3Xq1
                                                                             k2_s3Xq2
                                                                             l1_s3Xq3] \r [a5_s3Xq4]
                                                                                let {
                                                                                  sat_s3Xqa [Occ=Once]
                                                                                    :: (m_a3Kyt,
                                                                                        n_a3Kyu)
                                                                                       -> Text.ParserCombinators.ReadP.P
                                                                                            b2_a3nIU
                                                                                  [LclId] =
                                                                                      [k1_s3XpM
                                                                                       a2_s3XpP
                                                                                       b3_s3XpQ
                                                                                       c1_s3XpR
                                                                                       d1_s3XpS
                                                                                       e1_s3XpT
                                                                                       f1_s3XpU
                                                                                       g1_s3XpV
                                                                                       h1_s3XpW
                                                                                       i1_s3Xq0
                                                                                       j1_s3Xq1
                                                                                       k2_s3Xq2
                                                                                       l1_s3Xq3] \r [a6_s3Xq5]
                                                                                          case
                                                                                              a6_s3Xq5
                                                                                          of
                                                                                          { (,) m1_s3Xq7 [Occ=Once]
                                                                                                n2_s3Xq8 [Occ=Once] ->
                                                                                                let {
                                                                                                  sat_s3Xq9 [Occ=Once]
                                                                                                    :: (a_a3Kyh,
                                                                                                        b_a3Kyi,
                                                                                                        c_a3Kyj,
                                                                                                        d_a3Kyk,
                                                                                                        e_a3Kyl,
                                                                                                        f_a3Kym,
                                                                                                        g_a3Kyn,
                                                                                                        h_a3Kyo,
                                                                                                        i_a3Kyp,
                                                                                                        j_a3Kyq,
                                                                                                        k_a3Kyr,
                                                                                                        l_a3Kys,
                                                                                                        m_a3Kyt,
                                                                                                        n_a3Kyu)
                                                                                                  [LclId] =
                                                                                                      CCCS (,,,,,,,,,,,,,)! [a2_s3XpP
                                                                                                                             b3_s3XpQ
                                                                                                                             c1_s3XpR
                                                                                                                             d1_s3XpS
                                                                                                                             e1_s3XpT
                                                                                                                             f1_s3XpU
                                                                                                                             g1_s3XpV
                                                                                                                             h1_s3XpW
                                                                                                                             i1_s3Xq0
                                                                                                                             j1_s3Xq1
                                                                                                                             k2_s3Xq2
                                                                                                                             l1_s3Xq3
                                                                                                                             m1_s3Xq7
                                                                                                                             n2_s3Xq8];
                                                                                                } in 
                                                                                                  k1_s3XpM
                                                                                                      sat_s3Xq9;
                                                                                          };
                                                                                } in 
                                                                                  GHC.Read.$fRead(,)2
                                                                                      $dRead12_s3XpF
                                                                                      $dRead13_s3XpG
                                                                                      n1_s3XpK
                                                                                      sat_s3Xqa;
                                                                      } in 
                                                                        case
                                                                            Text.Read.Lex.$wexpect
                                                                                GHC.Read.$fRead(,)_lexeme
                                                                                sat_s3Xqb
                                                                        of
                                                                        { Unit# ww1_s3Xqd [Occ=Once] ->
                                                                              Text.ParserCombinators.ReadP.Look [ww1_s3Xqd];
                                                                        };
                                                                };
                                                      } in 
                                                        GHC.Read.$fRead(,,,)2
                                                            $dRead8_s3XpB
                                                            $dRead9_s3XpC
                                                            $dRead10_s3XpD
                                                            $dRead11_s3XpE
                                                            n1_s3XpK
                                                            sat_s3Xqe;
                                            } in 
                                              case
                                                  Text.Read.Lex.$wexpect
                                                      GHC.Read.$fRead(,)_lexeme sat_s3Xqf
                                              of
                                              { Unit# ww1_s3Xqh [Occ=Once] ->
                                                    Text.ParserCombinators.ReadP.Look [ww1_s3Xqh];
                                              };
                                      };
                            } in  ds1_s3XpL sat_s3Xqi;
                  } in  sat_s3Xqj; } in
        let {
          lvl2_s3Xqk [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> forall b2.
                  ((a_a3Kyh, b_a3Kyi, c_a3Kyj, d_a3Kyk, e_a3Kyl, f_a3Kym, g_a3Kyn,
                    h_a3Kyo, i_a3Kyp, j_a3Kyq, k_a3Kyr, l_a3Kys, m_a3Kyt, n_a3Kyu)
                   -> Text.ParserCombinators.ReadP.P b2)
                  -> Text.ParserCombinators.ReadP.P b2
          [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
              [p_s3XpJ] \r [w_s3Xql w1_s3Xqm]
                  case GHC.Read.$wparen' p_s3XpJ w_s3Xql w1_s3Xqm of {
                    Unit# ww1_s3Xqo [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Get [ww1_s3Xqo];
                  }; } in
        let {
          sat_s3Xqt [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_a3Kyh, b_a3Kyi, c_a3Kyj, d_a3Kyk, e_a3Kyl, f_a3Kym, g_a3Kyn,
                  h_a3Kyo, i_a3Kyp, j_a3Kyq, k_a3Kyr, l_a3Kys, m_a3Kyt, n_a3Kyu)
          [LclId] =
              [lvl2_s3Xqk] \r [eta2_s3Xqp eta3_s3Xqq]
                  case
                      GHC.Read.$wskipSpacesThenP lvl2_s3Xqk eta2_s3Xqp eta3_s3Xqq
                  of
                  { Unit# ww1_s3Xqs [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Look [ww1_s3Xqs];
                  };
        } in  GHC.Read.list3 sat_s3Xqt eta_s3XpH eta1_s3XpI;

GHC.Read.$fRead(,,,,,,,,,,,,)1
  :: forall a b c d e f g h i j k l m.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l, GHC.Read.Read m) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        ((a, b, c, d, e, f, g, h, i, j, k, l, m)
         -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=15,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Xqu
           $dRead1_s3Xqv
           $dRead2_s3Xqw
           $dRead3_s3Xqx
           $dRead4_s3Xqy
           $dRead5_s3Xqz
           $dRead6_s3XqA
           $dRead7_s3XqB
           $dRead8_s3XqC
           $dRead9_s3XqD
           $dRead10_s3XqE
           $dRead11_s3XqF
           $dRead12_s3XqG
           eta_s3XqH
           eta1_s3XqI]
        let {
          p_s3XqJ [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> Text.ParserCombinators.ReadP.ReadP
                    (a_a3KAa, b_a3KAb, c_a3KAc, d_a3KAd, e_a3KAe, f_a3KAf, g_a3KAg,
                     h_a3KAh, i_a3KAi, j_a3KAj, k_a3KAk, l_a3KAl, m_a3KAm)
          [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
              [$dRead_s3Xqu
               $dRead1_s3Xqv
               $dRead2_s3Xqw
               $dRead3_s3Xqx
               $dRead4_s3Xqy
               $dRead5_s3Xqz
               $dRead6_s3XqA
               $dRead7_s3XqB
               $dRead8_s3XqC
               $dRead9_s3XqD
               $dRead10_s3XqE
               $dRead11_s3XqF
               $dRead12_s3XqG] \r [n_s3XqK]
                  let {
                    ds1_s3XqL [Occ=OnceL, Dmd=<L,C(U)>]
                      :: Text.ParserCombinators.ReadP.ReadP
                           (a_a3KAa, b_a3KAb, c_a3KAc, d_a3KAd, e_a3KAe, f_a3KAf, g_a3KAg,
                            h_a3KAh)
                    [LclId] =
                        [$dRead_s3Xqu
                         $dRead1_s3Xqv
                         $dRead2_s3Xqw
                         $dRead3_s3Xqx
                         $dRead4_s3Xqy
                         $dRead5_s3Xqz
                         $dRead6_s3XqA
                         $dRead7_s3XqB
                         n_s3XqK] \u []
                            GHC.Read.$fRead(,,,,,,,)2
                                $dRead_s3Xqu
                                $dRead1_s3Xqv
                                $dRead2_s3Xqw
                                $dRead3_s3Xqx
                                $dRead4_s3Xqy
                                $dRead5_s3Xqz
                                $dRead6_s3XqA
                                $dRead7_s3XqB
                                n_s3XqK; } in
                  let {
                    sat_s3Xrg [Occ=Once]
                      :: forall b2.
                         ((a_a3KAa, b_a3KAb, c_a3KAc, d_a3KAd, e_a3KAe, f_a3KAf, g_a3KAg,
                           h_a3KAh, i_a3KAi, j_a3KAj, k_a3KAk, l_a3KAl, m_a3KAm)
                          -> Text.ParserCombinators.ReadP.P b2)
                         -> Text.ParserCombinators.ReadP.P b2
                    [LclId] =
                        [$dRead8_s3XqC
                         $dRead9_s3XqD
                         $dRead10_s3XqE
                         $dRead11_s3XqF
                         $dRead12_s3XqG
                         n_s3XqK
                         ds1_s3XqL] \r [k1_s3XqM]
                            let {
                              sat_s3Xrf [Occ=Once]
                                :: (a_a3KAa, b_a3KAb, c_a3KAc, d_a3KAd, e_a3KAe, f_a3KAf, g_a3KAg,
                                    h_a3KAh)
                                   -> Text.ParserCombinators.ReadP.P b2_a3nIU
                              [LclId] =
                                  [$dRead8_s3XqC
                                   $dRead9_s3XqD
                                   $dRead10_s3XqE
                                   $dRead11_s3XqF
                                   $dRead12_s3XqG
                                   n_s3XqK
                                   k1_s3XqM] \r [a1_s3XqN]
                                      case a1_s3XqN of {
                                        (,,,,,,,) a2_s3XqP [Occ=OnceL]
                                                  b3_s3XqQ [Occ=OnceL]
                                                  c1_s3XqR [Occ=OnceL]
                                                  d1_s3XqS [Occ=OnceL]
                                                  e1_s3XqT [Occ=OnceL]
                                                  f1_s3XqU [Occ=OnceL]
                                                  g1_s3XqV [Occ=OnceL]
                                                  h1_s3XqW [Occ=OnceL] ->
                                            let {
                                              sat_s3Xrc [Occ=Once]
                                                :: () -> Text.ParserCombinators.ReadP.P b2_a3nIU
                                              [LclId] =
                                                  [$dRead8_s3XqC
                                                   $dRead9_s3XqD
                                                   $dRead10_s3XqE
                                                   $dRead11_s3XqF
                                                   $dRead12_s3XqG
                                                   n_s3XqK
                                                   k1_s3XqM
                                                   a2_s3XqP
                                                   b3_s3XqQ
                                                   c1_s3XqR
                                                   d1_s3XqS
                                                   e1_s3XqT
                                                   f1_s3XqU
                                                   g1_s3XqV
                                                   h1_s3XqW] \r [a3_s3XqX]
                                                      let {
                                                        sat_s3Xrb [Occ=Once]
                                                          :: (i_a3KAi, j_a3KAj, k_a3KAk, l_a3KAl)
                                                             -> Text.ParserCombinators.ReadP.P
                                                                  b2_a3nIU
                                                        [LclId] =
                                                            [$dRead12_s3XqG
                                                             n_s3XqK
                                                             k1_s3XqM
                                                             a2_s3XqP
                                                             b3_s3XqQ
                                                             c1_s3XqR
                                                             d1_s3XqS
                                                             e1_s3XqT
                                                             f1_s3XqU
                                                             g1_s3XqV
                                                             h1_s3XqW] \r [a4_s3XqY]
                                                                case a4_s3XqY of {
                                                                  (,,,) i1_s3Xr0 [Occ=OnceL]
                                                                        j1_s3Xr1 [Occ=OnceL]
                                                                        k2_s3Xr2 [Occ=OnceL]
                                                                        l1_s3Xr3 [Occ=OnceL] ->
                                                                      let {
                                                                        sat_s3Xr8 [Occ=Once]
                                                                          :: ()
                                                                             -> Text.ParserCombinators.ReadP.P
                                                                                  b2_a3nIU
                                                                        [LclId] =
                                                                            [$dRead12_s3XqG
                                                                             n_s3XqK
                                                                             k1_s3XqM
                                                                             a2_s3XqP
                                                                             b3_s3XqQ
                                                                             c1_s3XqR
                                                                             d1_s3XqS
                                                                             e1_s3XqT
                                                                             f1_s3XqU
                                                                             g1_s3XqV
                                                                             h1_s3XqW
                                                                             i1_s3Xr0
                                                                             j1_s3Xr1
                                                                             k2_s3Xr2
                                                                             l1_s3Xr3] \r [a5_s3Xr4]
                                                                                let {
                                                                                  sat_s3Xr7 [Occ=Once]
                                                                                    :: m_a3KAm
                                                                                       -> Text.ParserCombinators.ReadP.P
                                                                                            b2_a3nIU
                                                                                  [LclId] =
                                                                                      [k1_s3XqM
                                                                                       a2_s3XqP
                                                                                       b3_s3XqQ
                                                                                       c1_s3XqR
                                                                                       d1_s3XqS
                                                                                       e1_s3XqT
                                                                                       f1_s3XqU
                                                                                       g1_s3XqV
                                                                                       h1_s3XqW
                                                                                       i1_s3Xr0
                                                                                       j1_s3Xr1
                                                                                       k2_s3Xr2
                                                                                       l1_s3Xr3] \r [a6_s3Xr5]
                                                                                          let {
                                                                                            sat_s3Xr6 [Occ=Once]
                                                                                              :: (a_a3KAa,
                                                                                                  b_a3KAb,
                                                                                                  c_a3KAc,
                                                                                                  d_a3KAd,
                                                                                                  e_a3KAe,
                                                                                                  f_a3KAf,
                                                                                                  g_a3KAg,
                                                                                                  h_a3KAh,
                                                                                                  i_a3KAi,
                                                                                                  j_a3KAj,
                                                                                                  k_a3KAk,
                                                                                                  l_a3KAl,
                                                                                                  m_a3KAm)
                                                                                            [LclId] =
                                                                                                CCCS (,,,,,,,,,,,,)! [a2_s3XqP
                                                                                                                      b3_s3XqQ
                                                                                                                      c1_s3XqR
                                                                                                                      d1_s3XqS
                                                                                                                      e1_s3XqT
                                                                                                                      f1_s3XqU
                                                                                                                      g1_s3XqV
                                                                                                                      h1_s3XqW
                                                                                                                      i1_s3Xr0
                                                                                                                      j1_s3Xr1
                                                                                                                      k2_s3Xr2
                                                                                                                      l1_s3Xr3
                                                                                                                      a6_s3Xr5];
                                                                                          } in 
                                                                                            k1_s3XqM
                                                                                                sat_s3Xr6;
                                                                                } in 
                                                                                  GHC.Read.readPrec
                                                                                      $dRead12_s3XqG
                                                                                      n_s3XqK
                                                                                      sat_s3Xr7;
                                                                      } in 
                                                                        case
                                                                            Text.Read.Lex.$wexpect
                                                                                GHC.Read.$fRead(,)_lexeme
                                                                                sat_s3Xr8
                                                                        of
                                                                        { Unit# ww1_s3Xra [Occ=Once] ->
                                                                              Text.ParserCombinators.ReadP.Look [ww1_s3Xra];
                                                                        };
                                                                };
                                                      } in 
                                                        GHC.Read.$fRead(,,,)2
                                                            $dRead8_s3XqC
                                                            $dRead9_s3XqD
                                                            $dRead10_s3XqE
                                                            $dRead11_s3XqF
                                                            n_s3XqK
                                                            sat_s3Xrb;
                                            } in 
                                              case
                                                  Text.Read.Lex.$wexpect
                                                      GHC.Read.$fRead(,)_lexeme sat_s3Xrc
                                              of
                                              { Unit# ww1_s3Xre [Occ=Once] ->
                                                    Text.ParserCombinators.ReadP.Look [ww1_s3Xre];
                                              };
                                      };
                            } in  ds1_s3XqL sat_s3Xrf;
                  } in  sat_s3Xrg; } in
        let {
          lvl2_s3Xrh [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> forall b2.
                  ((a_a3KAa, b_a3KAb, c_a3KAc, d_a3KAd, e_a3KAe, f_a3KAf, g_a3KAg,
                    h_a3KAh, i_a3KAi, j_a3KAj, k_a3KAk, l_a3KAl, m_a3KAm)
                   -> Text.ParserCombinators.ReadP.P b2)
                  -> Text.ParserCombinators.ReadP.P b2
          [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
              [p_s3XqJ] \r [w_s3Xri w1_s3Xrj]
                  case GHC.Read.$wparen' p_s3XqJ w_s3Xri w1_s3Xrj of {
                    Unit# ww1_s3Xrl [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Get [ww1_s3Xrl];
                  }; } in
        let {
          sat_s3Xrq [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_a3KAa, b_a3KAb, c_a3KAc, d_a3KAd, e_a3KAe, f_a3KAf, g_a3KAg,
                  h_a3KAh, i_a3KAi, j_a3KAj, k_a3KAk, l_a3KAl, m_a3KAm)
          [LclId] =
              [lvl2_s3Xrh] \r [eta2_s3Xrm eta3_s3Xrn]
                  case
                      GHC.Read.$wskipSpacesThenP lvl2_s3Xrh eta2_s3Xrm eta3_s3Xrn
                  of
                  { Unit# ww1_s3Xrp [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Look [ww1_s3Xrp];
                  };
        } in  GHC.Read.list3 sat_s3Xrq eta_s3XqH eta1_s3XqI;

GHC.Read.$fRead(,,,,,,,,,,,)1
  :: forall a b c d e f g h i j k l.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        ((a, b, c, d, e, f, g, h, i, j, k, l)
         -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=14,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Xrr
           $dRead1_s3Xrs
           $dRead2_s3Xrt
           $dRead3_s3Xru
           $dRead4_s3Xrv
           $dRead5_s3Xrw
           $dRead6_s3Xrx
           $dRead7_s3Xry
           $dRead8_s3Xrz
           $dRead9_s3XrA
           $dRead10_s3XrB
           $dRead11_s3XrC
           eta_s3XrD
           eta1_s3XrE]
        let {
          p_s3XrF [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> Text.ParserCombinators.ReadP.ReadP
                    (a_a3KBY, b_a3KBZ, c_a3KC0, d_a3KC1, e_a3KC2, f_a3KC3, g_a3KC4,
                     h_a3KC5, i_a3KC6, j_a3KC7, k_a3KC8, l_a3KC9)
          [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
              [$dRead_s3Xrr
               $dRead1_s3Xrs
               $dRead2_s3Xrt
               $dRead3_s3Xru
               $dRead4_s3Xrv
               $dRead5_s3Xrw
               $dRead6_s3Xrx
               $dRead7_s3Xry
               $dRead8_s3Xrz
               $dRead9_s3XrA
               $dRead10_s3XrB
               $dRead11_s3XrC] \r [n_s3XrG]
                  let {
                    ds1_s3XrH [Occ=OnceL, Dmd=<L,C(U)>]
                      :: Text.ParserCombinators.ReadP.ReadP
                           (a_a3KBY, b_a3KBZ, c_a3KC0, d_a3KC1, e_a3KC2, f_a3KC3, g_a3KC4,
                            h_a3KC5)
                    [LclId] =
                        [$dRead_s3Xrr
                         $dRead1_s3Xrs
                         $dRead2_s3Xrt
                         $dRead3_s3Xru
                         $dRead4_s3Xrv
                         $dRead5_s3Xrw
                         $dRead6_s3Xrx
                         $dRead7_s3Xry
                         n_s3XrG] \u []
                            GHC.Read.$fRead(,,,,,,,)2
                                $dRead_s3Xrr
                                $dRead1_s3Xrs
                                $dRead2_s3Xrt
                                $dRead3_s3Xru
                                $dRead4_s3Xrv
                                $dRead5_s3Xrw
                                $dRead6_s3Xrx
                                $dRead7_s3Xry
                                n_s3XrG; } in
                  let {
                    sat_s3Xs6 [Occ=Once]
                      :: forall b2.
                         ((a_a3KBY, b_a3KBZ, c_a3KC0, d_a3KC1, e_a3KC2, f_a3KC3, g_a3KC4,
                           h_a3KC5, i_a3KC6, j_a3KC7, k_a3KC8, l_a3KC9)
                          -> Text.ParserCombinators.ReadP.P b2)
                         -> Text.ParserCombinators.ReadP.P b2
                    [LclId] =
                        [$dRead8_s3Xrz
                         $dRead9_s3XrA
                         $dRead10_s3XrB
                         $dRead11_s3XrC
                         n_s3XrG
                         ds1_s3XrH] \r [k1_s3XrI]
                            let {
                              sat_s3Xs5 [Occ=Once]
                                :: (a_a3KBY, b_a3KBZ, c_a3KC0, d_a3KC1, e_a3KC2, f_a3KC3, g_a3KC4,
                                    h_a3KC5)
                                   -> Text.ParserCombinators.ReadP.P b2_a3nIU
                              [LclId] =
                                  [$dRead8_s3Xrz
                                   $dRead9_s3XrA
                                   $dRead10_s3XrB
                                   $dRead11_s3XrC
                                   n_s3XrG
                                   k1_s3XrI] \r [a1_s3XrJ]
                                      case a1_s3XrJ of {
                                        (,,,,,,,) a2_s3XrL [Occ=OnceL]
                                                  b3_s3XrM [Occ=OnceL]
                                                  c1_s3XrN [Occ=OnceL]
                                                  d1_s3XrO [Occ=OnceL]
                                                  e1_s3XrP [Occ=OnceL]
                                                  f1_s3XrQ [Occ=OnceL]
                                                  g1_s3XrR [Occ=OnceL]
                                                  h1_s3XrS [Occ=OnceL] ->
                                            let {
                                              sat_s3Xs2 [Occ=Once]
                                                :: () -> Text.ParserCombinators.ReadP.P b2_a3nIU
                                              [LclId] =
                                                  [$dRead8_s3Xrz
                                                   $dRead9_s3XrA
                                                   $dRead10_s3XrB
                                                   $dRead11_s3XrC
                                                   n_s3XrG
                                                   k1_s3XrI
                                                   a2_s3XrL
                                                   b3_s3XrM
                                                   c1_s3XrN
                                                   d1_s3XrO
                                                   e1_s3XrP
                                                   f1_s3XrQ
                                                   g1_s3XrR
                                                   h1_s3XrS] \r [a3_s3XrT]
                                                      let {
                                                        sat_s3Xs1 [Occ=Once]
                                                          :: (i_a3KC6, j_a3KC7, k_a3KC8, l_a3KC9)
                                                             -> Text.ParserCombinators.ReadP.P
                                                                  b2_a3nIU
                                                        [LclId] =
                                                            [k1_s3XrI
                                                             a2_s3XrL
                                                             b3_s3XrM
                                                             c1_s3XrN
                                                             d1_s3XrO
                                                             e1_s3XrP
                                                             f1_s3XrQ
                                                             g1_s3XrR
                                                             h1_s3XrS] \r [a4_s3XrU]
                                                                case a4_s3XrU of {
                                                                  (,,,) i1_s3XrW [Occ=Once]
                                                                        j1_s3XrX [Occ=Once]
                                                                        k2_s3XrY [Occ=Once]
                                                                        l1_s3XrZ [Occ=Once] ->
                                                                      let {
                                                                        sat_s3Xs0 [Occ=Once]
                                                                          :: (a_a3KBY, b_a3KBZ,
                                                                              c_a3KC0, d_a3KC1,
                                                                              e_a3KC2, f_a3KC3,
                                                                              g_a3KC4, h_a3KC5,
                                                                              i_a3KC6, j_a3KC7,
                                                                              k_a3KC8, l_a3KC9)
                                                                        [LclId] =
                                                                            CCCS (,,,,,,,,,,,)! [a2_s3XrL
                                                                                                 b3_s3XrM
                                                                                                 c1_s3XrN
                                                                                                 d1_s3XrO
                                                                                                 e1_s3XrP
                                                                                                 f1_s3XrQ
                                                                                                 g1_s3XrR
                                                                                                 h1_s3XrS
                                                                                                 i1_s3XrW
                                                                                                 j1_s3XrX
                                                                                                 k2_s3XrY
                                                                                                 l1_s3XrZ];
                                                                      } in  k1_s3XrI sat_s3Xs0;
                                                                };
                                                      } in 
                                                        GHC.Read.$fRead(,,,)2
                                                            $dRead8_s3Xrz
                                                            $dRead9_s3XrA
                                                            $dRead10_s3XrB
                                                            $dRead11_s3XrC
                                                            n_s3XrG
                                                            sat_s3Xs1;
                                            } in 
                                              case
                                                  Text.Read.Lex.$wexpect
                                                      GHC.Read.$fRead(,)_lexeme sat_s3Xs2
                                              of
                                              { Unit# ww1_s3Xs4 [Occ=Once] ->
                                                    Text.ParserCombinators.ReadP.Look [ww1_s3Xs4];
                                              };
                                      };
                            } in  ds1_s3XrH sat_s3Xs5;
                  } in  sat_s3Xs6; } in
        let {
          lvl2_s3Xs7 [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> forall b2.
                  ((a_a3KBY, b_a3KBZ, c_a3KC0, d_a3KC1, e_a3KC2, f_a3KC3, g_a3KC4,
                    h_a3KC5, i_a3KC6, j_a3KC7, k_a3KC8, l_a3KC9)
                   -> Text.ParserCombinators.ReadP.P b2)
                  -> Text.ParserCombinators.ReadP.P b2
          [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
              [p_s3XrF] \r [w_s3Xs8 w1_s3Xs9]
                  case GHC.Read.$wparen' p_s3XrF w_s3Xs8 w1_s3Xs9 of {
                    Unit# ww1_s3Xsb [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Get [ww1_s3Xsb];
                  }; } in
        let {
          sat_s3Xsg [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_a3KBY, b_a3KBZ, c_a3KC0, d_a3KC1, e_a3KC2, f_a3KC3, g_a3KC4,
                  h_a3KC5, i_a3KC6, j_a3KC7, k_a3KC8, l_a3KC9)
          [LclId] =
              [lvl2_s3Xs7] \r [eta2_s3Xsc eta3_s3Xsd]
                  case
                      GHC.Read.$wskipSpacesThenP lvl2_s3Xs7 eta2_s3Xsc eta3_s3Xsd
                  of
                  { Unit# ww1_s3Xsf [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Look [ww1_s3Xsf];
                  };
        } in  GHC.Read.list3 sat_s3Xsg eta_s3XrD eta1_s3XrE;

GHC.Read.$fRead(,,,,,,,,,,)1
  :: forall a b c d e f g h i j k.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j,
      GHC.Read.Read k) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        ((a, b, c, d, e, f, g, h, i, j, k)
         -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=13,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Xsh
           $dRead1_s3Xsi
           $dRead2_s3Xsj
           $dRead3_s3Xsk
           $dRead4_s3Xsl
           $dRead5_s3Xsm
           $dRead6_s3Xsn
           $dRead7_s3Xso
           $dRead8_s3Xsp
           $dRead9_s3Xsq
           $dRead10_s3Xsr
           eta_s3Xss
           eta1_s3Xst]
        let {
          p_s3Xsu [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> Text.ParserCombinators.ReadP.ReadP
                    (a_a3KDz, b_a3KDA, c_a3KDB, d_a3KDC, e_a3KDD, f_a3KDE, g_a3KDF,
                     h_a3KDG, i_a3KDH, j_a3KDI, k_a3KDJ)
          [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
              [$dRead_s3Xsh
               $dRead1_s3Xsi
               $dRead2_s3Xsj
               $dRead3_s3Xsk
               $dRead4_s3Xsl
               $dRead5_s3Xsm
               $dRead6_s3Xsn
               $dRead7_s3Xso
               $dRead8_s3Xsp
               $dRead9_s3Xsq
               $dRead10_s3Xsr] \r [n_s3Xsv]
                  let {
                    ds1_s3Xsw [Occ=OnceL, Dmd=<L,C(U)>]
                      :: Text.ParserCombinators.ReadP.ReadP
                           (a_a3KDz, b_a3KDA, c_a3KDB, d_a3KDC, e_a3KDD, f_a3KDE, g_a3KDF,
                            h_a3KDG)
                    [LclId] =
                        [$dRead_s3Xsh
                         $dRead1_s3Xsi
                         $dRead2_s3Xsj
                         $dRead3_s3Xsk
                         $dRead4_s3Xsl
                         $dRead5_s3Xsm
                         $dRead6_s3Xsn
                         $dRead7_s3Xso
                         n_s3Xsv] \u []
                            GHC.Read.$fRead(,,,,,,,)2
                                $dRead_s3Xsh
                                $dRead1_s3Xsi
                                $dRead2_s3Xsj
                                $dRead3_s3Xsk
                                $dRead4_s3Xsl
                                $dRead5_s3Xsm
                                $dRead6_s3Xsn
                                $dRead7_s3Xso
                                n_s3Xsv; } in
                  let {
                    sat_s3XsZ [Occ=Once]
                      :: forall b2.
                         ((a_a3KDz, b_a3KDA, c_a3KDB, d_a3KDC, e_a3KDD, f_a3KDE, g_a3KDF,
                           h_a3KDG, i_a3KDH, j_a3KDI, k_a3KDJ)
                          -> Text.ParserCombinators.ReadP.P b2)
                         -> Text.ParserCombinators.ReadP.P b2
                    [LclId] =
                        [$dRead8_s3Xsp
                         $dRead9_s3Xsq
                         $dRead10_s3Xsr
                         n_s3Xsv
                         ds1_s3Xsw] \r [k1_s3Xsx]
                            let {
                              sat_s3XsY [Occ=Once]
                                :: (a_a3KDz, b_a3KDA, c_a3KDB, d_a3KDC, e_a3KDD, f_a3KDE, g_a3KDF,
                                    h_a3KDG)
                                   -> Text.ParserCombinators.ReadP.P b2_a3nIU
                              [LclId] =
                                  [$dRead8_s3Xsp
                                   $dRead9_s3Xsq
                                   $dRead10_s3Xsr
                                   n_s3Xsv
                                   k1_s3Xsx] \r [a1_s3Xsy]
                                      case a1_s3Xsy of {
                                        (,,,,,,,) a2_s3XsA [Occ=OnceL]
                                                  b3_s3XsB [Occ=OnceL]
                                                  c1_s3XsC [Occ=OnceL]
                                                  d1_s3XsD [Occ=OnceL]
                                                  e1_s3XsE [Occ=OnceL]
                                                  f1_s3XsF [Occ=OnceL]
                                                  g1_s3XsG [Occ=OnceL]
                                                  h1_s3XsH [Occ=OnceL] ->
                                            let {
                                              sat_s3XsV [Occ=Once]
                                                :: () -> Text.ParserCombinators.ReadP.P b2_a3nIU
                                              [LclId] =
                                                  [$dRead8_s3Xsp
                                                   $dRead9_s3Xsq
                                                   $dRead10_s3Xsr
                                                   n_s3Xsv
                                                   k1_s3Xsx
                                                   a2_s3XsA
                                                   b3_s3XsB
                                                   c1_s3XsC
                                                   d1_s3XsD
                                                   e1_s3XsE
                                                   f1_s3XsF
                                                   g1_s3XsG
                                                   h1_s3XsH] \r [a3_s3XsI]
                                                      let {
                                                        sat_s3XsU [Occ=Once]
                                                          :: (i_a3KDH, j_a3KDI)
                                                             -> Text.ParserCombinators.ReadP.P
                                                                  b2_a3nIU
                                                        [LclId] =
                                                            [$dRead10_s3Xsr
                                                             n_s3Xsv
                                                             k1_s3Xsx
                                                             a2_s3XsA
                                                             b3_s3XsB
                                                             c1_s3XsC
                                                             d1_s3XsD
                                                             e1_s3XsE
                                                             f1_s3XsF
                                                             g1_s3XsG
                                                             h1_s3XsH] \r [a4_s3XsJ]
                                                                case a4_s3XsJ of {
                                                                  (,) i1_s3XsL [Occ=OnceL]
                                                                      j1_s3XsM [Occ=OnceL] ->
                                                                      let {
                                                                        sat_s3XsR [Occ=Once]
                                                                          :: ()
                                                                             -> Text.ParserCombinators.ReadP.P
                                                                                  b2_a3nIU
                                                                        [LclId] =
                                                                            [$dRead10_s3Xsr
                                                                             n_s3Xsv
                                                                             k1_s3Xsx
                                                                             a2_s3XsA
                                                                             b3_s3XsB
                                                                             c1_s3XsC
                                                                             d1_s3XsD
                                                                             e1_s3XsE
                                                                             f1_s3XsF
                                                                             g1_s3XsG
                                                                             h1_s3XsH
                                                                             i1_s3XsL
                                                                             j1_s3XsM] \r [a5_s3XsN]
                                                                                let {
                                                                                  sat_s3XsQ [Occ=Once]
                                                                                    :: k_a3KDJ
                                                                                       -> Text.ParserCombinators.ReadP.P
                                                                                            b2_a3nIU
                                                                                  [LclId] =
                                                                                      [k1_s3Xsx
                                                                                       a2_s3XsA
                                                                                       b3_s3XsB
                                                                                       c1_s3XsC
                                                                                       d1_s3XsD
                                                                                       e1_s3XsE
                                                                                       f1_s3XsF
                                                                                       g1_s3XsG
                                                                                       h1_s3XsH
                                                                                       i1_s3XsL
                                                                                       j1_s3XsM] \r [a6_s3XsO]
                                                                                          let {
                                                                                            sat_s3XsP [Occ=Once]
                                                                                              :: (a_a3KDz,
                                                                                                  b_a3KDA,
                                                                                                  c_a3KDB,
                                                                                                  d_a3KDC,
                                                                                                  e_a3KDD,
                                                                                                  f_a3KDE,
                                                                                                  g_a3KDF,
                                                                                                  h_a3KDG,
                                                                                                  i_a3KDH,
                                                                                                  j_a3KDI,
                                                                                                  k_a3KDJ)
                                                                                            [LclId] =
                                                                                                CCCS (,,,,,,,,,,)! [a2_s3XsA
                                                                                                                    b3_s3XsB
                                                                                                                    c1_s3XsC
                                                                                                                    d1_s3XsD
                                                                                                                    e1_s3XsE
                                                                                                                    f1_s3XsF
                                                                                                                    g1_s3XsG
                                                                                                                    h1_s3XsH
                                                                                                                    i1_s3XsL
                                                                                                                    j1_s3XsM
                                                                                                                    a6_s3XsO];
                                                                                          } in 
                                                                                            k1_s3Xsx
                                                                                                sat_s3XsP;
                                                                                } in 
                                                                                  GHC.Read.readPrec
                                                                                      $dRead10_s3Xsr
                                                                                      n_s3Xsv
                                                                                      sat_s3XsQ;
                                                                      } in 
                                                                        case
                                                                            Text.Read.Lex.$wexpect
                                                                                GHC.Read.$fRead(,)_lexeme
                                                                                sat_s3XsR
                                                                        of
                                                                        { Unit# ww1_s3XsT [Occ=Once] ->
                                                                              Text.ParserCombinators.ReadP.Look [ww1_s3XsT];
                                                                        };
                                                                };
                                                      } in 
                                                        GHC.Read.$fRead(,)2
                                                            $dRead8_s3Xsp
                                                            $dRead9_s3Xsq
                                                            n_s3Xsv
                                                            sat_s3XsU;
                                            } in 
                                              case
                                                  Text.Read.Lex.$wexpect
                                                      GHC.Read.$fRead(,)_lexeme sat_s3XsV
                                              of
                                              { Unit# ww1_s3XsX [Occ=Once] ->
                                                    Text.ParserCombinators.ReadP.Look [ww1_s3XsX];
                                              };
                                      };
                            } in  ds1_s3Xsw sat_s3XsY;
                  } in  sat_s3XsZ; } in
        let {
          lvl2_s3Xt0 [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> forall b2.
                  ((a_a3KDz, b_a3KDA, c_a3KDB, d_a3KDC, e_a3KDD, f_a3KDE, g_a3KDF,
                    h_a3KDG, i_a3KDH, j_a3KDI, k_a3KDJ)
                   -> Text.ParserCombinators.ReadP.P b2)
                  -> Text.ParserCombinators.ReadP.P b2
          [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
              [p_s3Xsu] \r [w_s3Xt1 w1_s3Xt2]
                  case GHC.Read.$wparen' p_s3Xsu w_s3Xt1 w1_s3Xt2 of {
                    Unit# ww1_s3Xt4 [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Get [ww1_s3Xt4];
                  }; } in
        let {
          sat_s3Xt9 [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_a3KDz, b_a3KDA, c_a3KDB, d_a3KDC, e_a3KDD, f_a3KDE, g_a3KDF,
                  h_a3KDG, i_a3KDH, j_a3KDI, k_a3KDJ)
          [LclId] =
              [lvl2_s3Xt0] \r [eta2_s3Xt5 eta3_s3Xt6]
                  case
                      GHC.Read.$wskipSpacesThenP lvl2_s3Xt0 eta2_s3Xt5 eta3_s3Xt6
                  of
                  { Unit# ww1_s3Xt8 [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Look [ww1_s3Xt8];
                  };
        } in  GHC.Read.list3 sat_s3Xt9 eta_s3Xss eta1_s3Xst;

GHC.Read.$fRead(,,,,,,,,,)1
  :: forall a b c d e f g h i j.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        ((a, b, c, d, e, f, g, h, i, j)
         -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=12,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Xta
           $dRead1_s3Xtb
           $dRead2_s3Xtc
           $dRead3_s3Xtd
           $dRead4_s3Xte
           $dRead5_s3Xtf
           $dRead6_s3Xtg
           $dRead7_s3Xth
           $dRead8_s3Xti
           $dRead9_s3Xtj
           eta_s3Xtk
           eta1_s3Xtl]
        let {
          p_s3Xtm [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> Text.ParserCombinators.ReadP.ReadP
                    (a_a3KFd, b_a3KFe, c_a3KFf, d_a3KFg, e_a3KFh, f_a3KFi, g_a3KFj,
                     h_a3KFk, i_a3KFl, j_a3KFm)
          [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
              [$dRead_s3Xta
               $dRead1_s3Xtb
               $dRead2_s3Xtc
               $dRead3_s3Xtd
               $dRead4_s3Xte
               $dRead5_s3Xtf
               $dRead6_s3Xtg
               $dRead7_s3Xth
               $dRead8_s3Xti
               $dRead9_s3Xtj] \r [n_s3Xtn]
                  let {
                    ds1_s3Xto [Occ=OnceL, Dmd=<L,C(U)>]
                      :: Text.ParserCombinators.ReadP.ReadP
                           (a_a3KFd, b_a3KFe, c_a3KFf, d_a3KFg, e_a3KFh, f_a3KFi, g_a3KFj,
                            h_a3KFk)
                    [LclId] =
                        [$dRead_s3Xta
                         $dRead1_s3Xtb
                         $dRead2_s3Xtc
                         $dRead3_s3Xtd
                         $dRead4_s3Xte
                         $dRead5_s3Xtf
                         $dRead6_s3Xtg
                         $dRead7_s3Xth
                         n_s3Xtn] \u []
                            GHC.Read.$fRead(,,,,,,,)2
                                $dRead_s3Xta
                                $dRead1_s3Xtb
                                $dRead2_s3Xtc
                                $dRead3_s3Xtd
                                $dRead4_s3Xte
                                $dRead5_s3Xtf
                                $dRead6_s3Xtg
                                $dRead7_s3Xth
                                n_s3Xtn; } in
                  let {
                    sat_s3XtL [Occ=Once]
                      :: forall b2.
                         ((a_a3KFd, b_a3KFe, c_a3KFf, d_a3KFg, e_a3KFh, f_a3KFi, g_a3KFj,
                           h_a3KFk, i_a3KFl, j_a3KFm)
                          -> Text.ParserCombinators.ReadP.P b2)
                         -> Text.ParserCombinators.ReadP.P b2
                    [LclId] =
                        [$dRead8_s3Xti $dRead9_s3Xtj n_s3Xtn ds1_s3Xto] \r [k1_s3Xtp]
                            let {
                              sat_s3XtK [Occ=Once]
                                :: (a_a3KFd, b_a3KFe, c_a3KFf, d_a3KFg, e_a3KFh, f_a3KFi, g_a3KFj,
                                    h_a3KFk)
                                   -> Text.ParserCombinators.ReadP.P b2_a3nIU
                              [LclId] =
                                  [$dRead8_s3Xti $dRead9_s3Xtj n_s3Xtn k1_s3Xtp] \r [a1_s3Xtq]
                                      case a1_s3Xtq of {
                                        (,,,,,,,) a2_s3Xts [Occ=OnceL]
                                                  b3_s3Xtt [Occ=OnceL]
                                                  c1_s3Xtu [Occ=OnceL]
                                                  d1_s3Xtv [Occ=OnceL]
                                                  e1_s3Xtw [Occ=OnceL]
                                                  f1_s3Xtx [Occ=OnceL]
                                                  g1_s3Xty [Occ=OnceL]
                                                  h1_s3Xtz [Occ=OnceL] ->
                                            let {
                                              sat_s3XtH [Occ=Once]
                                                :: () -> Text.ParserCombinators.ReadP.P b2_a3nIU
                                              [LclId] =
                                                  [$dRead8_s3Xti
                                                   $dRead9_s3Xtj
                                                   n_s3Xtn
                                                   k1_s3Xtp
                                                   a2_s3Xts
                                                   b3_s3Xtt
                                                   c1_s3Xtu
                                                   d1_s3Xtv
                                                   e1_s3Xtw
                                                   f1_s3Xtx
                                                   g1_s3Xty
                                                   h1_s3Xtz] \r [a3_s3XtA]
                                                      let {
                                                        sat_s3XtG [Occ=Once]
                                                          :: (i_a3KFl, j_a3KFm)
                                                             -> Text.ParserCombinators.ReadP.P
                                                                  b2_a3nIU
                                                        [LclId] =
                                                            [k1_s3Xtp
                                                             a2_s3Xts
                                                             b3_s3Xtt
                                                             c1_s3Xtu
                                                             d1_s3Xtv
                                                             e1_s3Xtw
                                                             f1_s3Xtx
                                                             g1_s3Xty
                                                             h1_s3Xtz] \r [a4_s3XtB]
                                                                case a4_s3XtB of {
                                                                  (,) i1_s3XtD [Occ=Once]
                                                                      j1_s3XtE [Occ=Once] ->
                                                                      let {
                                                                        sat_s3XtF [Occ=Once]
                                                                          :: (a_a3KFd, b_a3KFe,
                                                                              c_a3KFf, d_a3KFg,
                                                                              e_a3KFh, f_a3KFi,
                                                                              g_a3KFj, h_a3KFk,
                                                                              i_a3KFl, j_a3KFm)
                                                                        [LclId] =
                                                                            CCCS (,,,,,,,,,)! [a2_s3Xts
                                                                                               b3_s3Xtt
                                                                                               c1_s3Xtu
                                                                                               d1_s3Xtv
                                                                                               e1_s3Xtw
                                                                                               f1_s3Xtx
                                                                                               g1_s3Xty
                                                                                               h1_s3Xtz
                                                                                               i1_s3XtD
                                                                                               j1_s3XtE];
                                                                      } in  k1_s3Xtp sat_s3XtF;
                                                                };
                                                      } in 
                                                        GHC.Read.$fRead(,)2
                                                            $dRead8_s3Xti
                                                            $dRead9_s3Xtj
                                                            n_s3Xtn
                                                            sat_s3XtG;
                                            } in 
                                              case
                                                  Text.Read.Lex.$wexpect
                                                      GHC.Read.$fRead(,)_lexeme sat_s3XtH
                                              of
                                              { Unit# ww1_s3XtJ [Occ=Once] ->
                                                    Text.ParserCombinators.ReadP.Look [ww1_s3XtJ];
                                              };
                                      };
                            } in  ds1_s3Xto sat_s3XtK;
                  } in  sat_s3XtL; } in
        let {
          lvl2_s3XtM [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> forall b2.
                  ((a_a3KFd, b_a3KFe, c_a3KFf, d_a3KFg, e_a3KFh, f_a3KFi, g_a3KFj,
                    h_a3KFk, i_a3KFl, j_a3KFm)
                   -> Text.ParserCombinators.ReadP.P b2)
                  -> Text.ParserCombinators.ReadP.P b2
          [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
              [p_s3Xtm] \r [w_s3XtN w1_s3XtO]
                  case GHC.Read.$wparen' p_s3Xtm w_s3XtN w1_s3XtO of {
                    Unit# ww1_s3XtQ [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Get [ww1_s3XtQ];
                  }; } in
        let {
          sat_s3XtV [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_a3KFd, b_a3KFe, c_a3KFf, d_a3KFg, e_a3KFh, f_a3KFi, g_a3KFj,
                  h_a3KFk, i_a3KFl, j_a3KFm)
          [LclId] =
              [lvl2_s3XtM] \r [eta2_s3XtR eta3_s3XtS]
                  case
                      GHC.Read.$wskipSpacesThenP lvl2_s3XtM eta2_s3XtR eta3_s3XtS
                  of
                  { Unit# ww1_s3XtU [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Look [ww1_s3XtU];
                  };
        } in  GHC.Read.list3 sat_s3XtV eta_s3Xtk eta1_s3Xtl;

GHC.Read.$fRead(,,,,,,,,)1
  :: forall a b c d e f g h i.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        ((a, b, c, d, e, f, g, h, i) -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=11,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XtW
           $dRead1_s3XtX
           $dRead2_s3XtY
           $dRead3_s3XtZ
           $dRead4_s3Xu0
           $dRead5_s3Xu1
           $dRead6_s3Xu2
           $dRead7_s3Xu3
           $dRead8_s3Xu4
           eta_s3Xu5
           eta1_s3Xu6]
        let {
          p_s3Xu7 [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> Text.ParserCombinators.ReadP.ReadP
                    (a_a3KGE, b_a3KGF, c_a3KGG, d_a3KGH, e_a3KGI, f_a3KGJ, g_a3KGK,
                     h_a3KGL, i_a3KGM)
          [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
              [$dRead_s3XtW
               $dRead1_s3XtX
               $dRead2_s3XtY
               $dRead3_s3XtZ
               $dRead4_s3Xu0
               $dRead5_s3Xu1
               $dRead6_s3Xu2
               $dRead7_s3Xu3
               $dRead8_s3Xu4] \r [n_s3Xu8]
                  let {
                    ds1_s3Xu9 [Occ=OnceL, Dmd=<L,C(U)>]
                      :: Text.ParserCombinators.ReadP.ReadP
                           (a_a3KGE, b_a3KGF, c_a3KGG, d_a3KGH, e_a3KGI, f_a3KGJ, g_a3KGK,
                            h_a3KGL)
                    [LclId] =
                        [$dRead_s3XtW
                         $dRead1_s3XtX
                         $dRead2_s3XtY
                         $dRead3_s3XtZ
                         $dRead4_s3Xu0
                         $dRead5_s3Xu1
                         $dRead6_s3Xu2
                         $dRead7_s3Xu3
                         n_s3Xu8] \u []
                            GHC.Read.$fRead(,,,,,,,)2
                                $dRead_s3XtW
                                $dRead1_s3XtX
                                $dRead2_s3XtY
                                $dRead3_s3XtZ
                                $dRead4_s3Xu0
                                $dRead5_s3Xu1
                                $dRead6_s3Xu2
                                $dRead7_s3Xu3
                                n_s3Xu8; } in
                  let {
                    sat_s3Xut [Occ=Once]
                      :: forall b2.
                         ((a_a3KGE, b_a3KGF, c_a3KGG, d_a3KGH, e_a3KGI, f_a3KGJ, g_a3KGK,
                           h_a3KGL, i_a3KGM)
                          -> Text.ParserCombinators.ReadP.P b2)
                         -> Text.ParserCombinators.ReadP.P b2
                    [LclId] =
                        [$dRead8_s3Xu4 n_s3Xu8 ds1_s3Xu9] \r [k1_s3Xua]
                            let {
                              sat_s3Xus [Occ=Once]
                                :: (a_a3KGE, b_a3KGF, c_a3KGG, d_a3KGH, e_a3KGI, f_a3KGJ, g_a3KGK,
                                    h_a3KGL)
                                   -> Text.ParserCombinators.ReadP.P b2_a3nIU
                              [LclId] =
                                  [$dRead8_s3Xu4 n_s3Xu8 k1_s3Xua] \r [a1_s3Xub]
                                      case a1_s3Xub of {
                                        (,,,,,,,) a2_s3Xud [Occ=OnceL]
                                                  b3_s3Xue [Occ=OnceL]
                                                  c1_s3Xuf [Occ=OnceL]
                                                  d1_s3Xug [Occ=OnceL]
                                                  e1_s3Xuh [Occ=OnceL]
                                                  f1_s3Xui [Occ=OnceL]
                                                  g1_s3Xuj [Occ=OnceL]
                                                  h1_s3Xuk [Occ=OnceL] ->
                                            let {
                                              sat_s3Xup [Occ=Once]
                                                :: () -> Text.ParserCombinators.ReadP.P b2_a3nIU
                                              [LclId] =
                                                  [$dRead8_s3Xu4
                                                   n_s3Xu8
                                                   k1_s3Xua
                                                   a2_s3Xud
                                                   b3_s3Xue
                                                   c1_s3Xuf
                                                   d1_s3Xug
                                                   e1_s3Xuh
                                                   f1_s3Xui
                                                   g1_s3Xuj
                                                   h1_s3Xuk] \r [a3_s3Xul]
                                                      let {
                                                        sat_s3Xuo [Occ=Once]
                                                          :: i_a3KGM
                                                             -> Text.ParserCombinators.ReadP.P
                                                                  b2_a3nIU
                                                        [LclId] =
                                                            [k1_s3Xua
                                                             a2_s3Xud
                                                             b3_s3Xue
                                                             c1_s3Xuf
                                                             d1_s3Xug
                                                             e1_s3Xuh
                                                             f1_s3Xui
                                                             g1_s3Xuj
                                                             h1_s3Xuk] \r [a4_s3Xum]
                                                                let {
                                                                  sat_s3Xun [Occ=Once]
                                                                    :: (a_a3KGE, b_a3KGF, c_a3KGG,
                                                                        d_a3KGH, e_a3KGI, f_a3KGJ,
                                                                        g_a3KGK, h_a3KGL, i_a3KGM)
                                                                  [LclId] =
                                                                      CCCS (,,,,,,,,)! [a2_s3Xud
                                                                                        b3_s3Xue
                                                                                        c1_s3Xuf
                                                                                        d1_s3Xug
                                                                                        e1_s3Xuh
                                                                                        f1_s3Xui
                                                                                        g1_s3Xuj
                                                                                        h1_s3Xuk
                                                                                        a4_s3Xum];
                                                                } in  k1_s3Xua sat_s3Xun;
                                                      } in 
                                                        GHC.Read.readPrec
                                                            $dRead8_s3Xu4 n_s3Xu8 sat_s3Xuo;
                                            } in 
                                              case
                                                  Text.Read.Lex.$wexpect
                                                      GHC.Read.$fRead(,)_lexeme sat_s3Xup
                                              of
                                              { Unit# ww1_s3Xur [Occ=Once] ->
                                                    Text.ParserCombinators.ReadP.Look [ww1_s3Xur];
                                              };
                                      };
                            } in  ds1_s3Xu9 sat_s3Xus;
                  } in  sat_s3Xut; } in
        let {
          lvl2_s3Xuu [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> forall b2.
                  ((a_a3KGE, b_a3KGF, c_a3KGG, d_a3KGH, e_a3KGI, f_a3KGJ, g_a3KGK,
                    h_a3KGL, i_a3KGM)
                   -> Text.ParserCombinators.ReadP.P b2)
                  -> Text.ParserCombinators.ReadP.P b2
          [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
              [p_s3Xu7] \r [w_s3Xuv w1_s3Xuw]
                  case GHC.Read.$wparen' p_s3Xu7 w_s3Xuv w1_s3Xuw of {
                    Unit# ww1_s3Xuy [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Get [ww1_s3Xuy];
                  }; } in
        let {
          sat_s3XuD [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_a3KGE, b_a3KGF, c_a3KGG, d_a3KGH, e_a3KGI, f_a3KGJ, g_a3KGK,
                  h_a3KGL, i_a3KGM)
          [LclId] =
              [lvl2_s3Xuu] \r [eta2_s3Xuz eta3_s3XuA]
                  case
                      GHC.Read.$wskipSpacesThenP lvl2_s3Xuu eta2_s3Xuz eta3_s3XuA
                  of
                  { Unit# ww1_s3XuC [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Look [ww1_s3XuC];
                  };
        } in  GHC.Read.list3 sat_s3XuD eta_s3Xu5 eta1_s3Xu6;

GHC.Read.$fRead(,,,,,,,)1
  :: forall a b c d e f g h.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        ((a, b, c, d, e, f, g, h) -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=10,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XuE
           $dRead1_s3XuF
           $dRead2_s3XuG
           $dRead3_s3XuH
           $dRead4_s3XuI
           $dRead5_s3XuJ
           $dRead6_s3XuK
           $dRead7_s3XuL
           eta_s3XuM
           eta1_s3XuN]
        let {
          p_s3XuO [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> Text.ParserCombinators.ReadP.ReadP
                    (a_a3KI0, b_a3KI1, c_a3KI2, d_a3KI3, e_a3KI4, f_a3KI5, g_a3KI6,
                     h_a3KI7)
          [LclId, Arity=1, Unf=OtherCon []] =
              [$dRead_s3XuE
               $dRead1_s3XuF
               $dRead2_s3XuG
               $dRead3_s3XuH
               $dRead4_s3XuI
               $dRead5_s3XuJ
               $dRead6_s3XuK
               $dRead7_s3XuL] \r [eta_B1]
                  GHC.Read.$fRead(,,,,,,,)2
                      $dRead_s3XuE
                      $dRead1_s3XuF
                      $dRead2_s3XuG
                      $dRead3_s3XuH
                      $dRead4_s3XuI
                      $dRead5_s3XuJ
                      $dRead6_s3XuK
                      $dRead7_s3XuL
                      eta_B1; } in
        let {
          lvl2_s3XuP [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> forall b2.
                  ((a_a3KI0, b_a3KI1, c_a3KI2, d_a3KI3, e_a3KI4, f_a3KI5, g_a3KI6,
                    h_a3KI7)
                   -> Text.ParserCombinators.ReadP.P b2)
                  -> Text.ParserCombinators.ReadP.P b2
          [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
              [p_s3XuO] \r [w_s3XuQ w1_s3XuR]
                  case GHC.Read.$wparen' p_s3XuO w_s3XuQ w1_s3XuR of {
                    Unit# ww1_s3XuT [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Get [ww1_s3XuT];
                  }; } in
        let {
          sat_s3XuY [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_a3KI0, b_a3KI1, c_a3KI2, d_a3KI3, e_a3KI4, f_a3KI5, g_a3KI6,
                  h_a3KI7)
          [LclId] =
              [lvl2_s3XuP] \r [eta2_s3XuU eta3_s3XuV]
                  case
                      GHC.Read.$wskipSpacesThenP lvl2_s3XuP eta2_s3XuU eta3_s3XuV
                  of
                  { Unit# ww1_s3XuX [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Look [ww1_s3XuX];
                  };
        } in  GHC.Read.list3 sat_s3XuY eta_s3XuM eta1_s3XuN;

GHC.Read.$fRead(,,,,,,)1
  :: forall a b c d e f g.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f,
      GHC.Read.Read g) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        ((a, b, c, d, e, f, g) -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=9,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XuZ
           $dRead1_s3Xv0
           $dRead2_s3Xv1
           $dRead3_s3Xv2
           $dRead4_s3Xv3
           $dRead5_s3Xv4
           $dRead6_s3Xv5
           eta_s3Xv6
           eta1_s3Xv7]
        let {
          p_s3Xv8 [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> Text.ParserCombinators.ReadP.ReadP
                    (a_a3KIU, b_a3KIV, c_a3KIW, d_a3KIX, e_a3KIY, f_a3KIZ, g_a3KJ0)
          [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
              [$dRead_s3XuZ
               $dRead1_s3Xv0
               $dRead2_s3Xv1
               $dRead3_s3Xv2
               $dRead4_s3Xv3
               $dRead5_s3Xv4
               $dRead6_s3Xv5] \r [n_s3Xv9]
                  let {
                    ds1_s3Xva [Occ=OnceL, Dmd=<L,C(U)>]
                      :: Text.ParserCombinators.ReadP.ReadP
                           (a_a3KIU, b_a3KIV, c_a3KIW, d_a3KIX)
                    [LclId] =
                        [$dRead_s3XuZ
                         $dRead1_s3Xv0
                         $dRead2_s3Xv1
                         $dRead3_s3Xv2
                         n_s3Xv9] \u []
                            GHC.Read.$fRead(,,,)2
                                $dRead_s3XuZ
                                $dRead1_s3Xv0
                                $dRead2_s3Xv1
                                $dRead3_s3Xv2
                                n_s3Xv9; } in
                  let {
                    sat_s3Xvz [Occ=Once]
                      :: forall b2.
                         ((a_a3KIU, b_a3KIV, c_a3KIW, d_a3KIX, e_a3KIY, f_a3KIZ, g_a3KJ0)
                          -> Text.ParserCombinators.ReadP.P b2)
                         -> Text.ParserCombinators.ReadP.P b2
                    [LclId] =
                        [$dRead4_s3Xv3
                         $dRead5_s3Xv4
                         $dRead6_s3Xv5
                         n_s3Xv9
                         ds1_s3Xva] \r [k1_s3Xvb]
                            let {
                              sat_s3Xvy [Occ=Once]
                                :: (a_a3KIU, b_a3KIV, c_a3KIW, d_a3KIX)
                                   -> Text.ParserCombinators.ReadP.P b2_a3nIU
                              [LclId] =
                                  [$dRead4_s3Xv3
                                   $dRead5_s3Xv4
                                   $dRead6_s3Xv5
                                   n_s3Xv9
                                   k1_s3Xvb] \r [a1_s3Xvc]
                                      case a1_s3Xvc of {
                                        (,,,) a2_s3Xve [Occ=OnceL]
                                              b3_s3Xvf [Occ=OnceL]
                                              c1_s3Xvg [Occ=OnceL]
                                              d1_s3Xvh [Occ=OnceL] ->
                                            let {
                                              sat_s3Xvv [Occ=Once]
                                                :: () -> Text.ParserCombinators.ReadP.P b2_a3nIU
                                              [LclId] =
                                                  [$dRead4_s3Xv3
                                                   $dRead5_s3Xv4
                                                   $dRead6_s3Xv5
                                                   n_s3Xv9
                                                   k1_s3Xvb
                                                   a2_s3Xve
                                                   b3_s3Xvf
                                                   c1_s3Xvg
                                                   d1_s3Xvh] \r [a3_s3Xvi]
                                                      let {
                                                        sat_s3Xvu [Occ=Once]
                                                          :: (e_a3KIY, f_a3KIZ)
                                                             -> Text.ParserCombinators.ReadP.P
                                                                  b2_a3nIU
                                                        [LclId] =
                                                            [$dRead6_s3Xv5
                                                             n_s3Xv9
                                                             k1_s3Xvb
                                                             a2_s3Xve
                                                             b3_s3Xvf
                                                             c1_s3Xvg
                                                             d1_s3Xvh] \r [a4_s3Xvj]
                                                                case a4_s3Xvj of {
                                                                  (,) e1_s3Xvl [Occ=OnceL]
                                                                      f1_s3Xvm [Occ=OnceL] ->
                                                                      let {
                                                                        sat_s3Xvr [Occ=Once]
                                                                          :: ()
                                                                             -> Text.ParserCombinators.ReadP.P
                                                                                  b2_a3nIU
                                                                        [LclId] =
                                                                            [$dRead6_s3Xv5
                                                                             n_s3Xv9
                                                                             k1_s3Xvb
                                                                             a2_s3Xve
                                                                             b3_s3Xvf
                                                                             c1_s3Xvg
                                                                             d1_s3Xvh
                                                                             e1_s3Xvl
                                                                             f1_s3Xvm] \r [a5_s3Xvn]
                                                                                let {
                                                                                  sat_s3Xvq [Occ=Once]
                                                                                    :: g_a3KJ0
                                                                                       -> Text.ParserCombinators.ReadP.P
                                                                                            b2_a3nIU
                                                                                  [LclId] =
                                                                                      [k1_s3Xvb
                                                                                       a2_s3Xve
                                                                                       b3_s3Xvf
                                                                                       c1_s3Xvg
                                                                                       d1_s3Xvh
                                                                                       e1_s3Xvl
                                                                                       f1_s3Xvm] \r [a6_s3Xvo]
                                                                                          let {
                                                                                            sat_s3Xvp [Occ=Once]
                                                                                              :: (a_a3KIU,
                                                                                                  b_a3KIV,
                                                                                                  c_a3KIW,
                                                                                                  d_a3KIX,
                                                                                                  e_a3KIY,
                                                                                                  f_a3KIZ,
                                                                                                  g_a3KJ0)
                                                                                            [LclId] =
                                                                                                CCCS (,,,,,,)! [a2_s3Xve
                                                                                                                b3_s3Xvf
                                                                                                                c1_s3Xvg
                                                                                                                d1_s3Xvh
                                                                                                                e1_s3Xvl
                                                                                                                f1_s3Xvm
                                                                                                                a6_s3Xvo];
                                                                                          } in 
                                                                                            k1_s3Xvb
                                                                                                sat_s3Xvp;
                                                                                } in 
                                                                                  GHC.Read.readPrec
                                                                                      $dRead6_s3Xv5
                                                                                      n_s3Xv9
                                                                                      sat_s3Xvq;
                                                                      } in 
                                                                        case
                                                                            Text.Read.Lex.$wexpect
                                                                                GHC.Read.$fRead(,)_lexeme
                                                                                sat_s3Xvr
                                                                        of
                                                                        { Unit# ww1_s3Xvt [Occ=Once] ->
                                                                              Text.ParserCombinators.ReadP.Look [ww1_s3Xvt];
                                                                        };
                                                                };
                                                      } in 
                                                        GHC.Read.$fRead(,)2
                                                            $dRead4_s3Xv3
                                                            $dRead5_s3Xv4
                                                            n_s3Xv9
                                                            sat_s3Xvu;
                                            } in 
                                              case
                                                  Text.Read.Lex.$wexpect
                                                      GHC.Read.$fRead(,)_lexeme sat_s3Xvv
                                              of
                                              { Unit# ww1_s3Xvx [Occ=Once] ->
                                                    Text.ParserCombinators.ReadP.Look [ww1_s3Xvx];
                                              };
                                      };
                            } in  ds1_s3Xva sat_s3Xvy;
                  } in  sat_s3Xvz; } in
        let {
          lvl2_s3XvA [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> forall b2.
                  ((a_a3KIU, b_a3KIV, c_a3KIW, d_a3KIX, e_a3KIY, f_a3KIZ, g_a3KJ0)
                   -> Text.ParserCombinators.ReadP.P b2)
                  -> Text.ParserCombinators.ReadP.P b2
          [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
              [p_s3Xv8] \r [w_s3XvB w1_s3XvC]
                  case GHC.Read.$wparen' p_s3Xv8 w_s3XvB w1_s3XvC of {
                    Unit# ww1_s3XvE [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Get [ww1_s3XvE];
                  }; } in
        let {
          sat_s3XvJ [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_a3KIU, b_a3KIV, c_a3KIW, d_a3KIX, e_a3KIY, f_a3KIZ, g_a3KJ0)
          [LclId] =
              [lvl2_s3XvA] \r [eta2_s3XvF eta3_s3XvG]
                  case
                      GHC.Read.$wskipSpacesThenP lvl2_s3XvA eta2_s3XvF eta3_s3XvG
                  of
                  { Unit# ww1_s3XvI [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Look [ww1_s3XvI];
                  };
        } in  GHC.Read.list3 sat_s3XvJ eta_s3Xv6 eta1_s3Xv7;

GHC.Read.$fRead(,,,,,)1
  :: forall a b c d e f.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        ((a, b, c, d, e, f) -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=8,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XvK
           $dRead1_s3XvL
           $dRead2_s3XvM
           $dRead3_s3XvN
           $dRead4_s3XvO
           $dRead5_s3XvP
           eta_s3XvQ
           eta1_s3XvR]
        let {
          p_s3XvS [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> Text.ParserCombinators.ReadP.ReadP
                    (a_a3KKe, b_a3KKf, c_a3KKg, d_a3KKh, e_a3KKi, f_a3KKj)
          [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
              [$dRead_s3XvK
               $dRead1_s3XvL
               $dRead2_s3XvM
               $dRead3_s3XvN
               $dRead4_s3XvO
               $dRead5_s3XvP] \r [n_s3XvT]
                  let {
                    ds1_s3XvU [Occ=OnceL, Dmd=<L,C(U)>]
                      :: Text.ParserCombinators.ReadP.ReadP
                           (a_a3KKe, b_a3KKf, c_a3KKg, d_a3KKh)
                    [LclId] =
                        [$dRead_s3XvK
                         $dRead1_s3XvL
                         $dRead2_s3XvM
                         $dRead3_s3XvN
                         n_s3XvT] \u []
                            GHC.Read.$fRead(,,,)2
                                $dRead_s3XvK
                                $dRead1_s3XvL
                                $dRead2_s3XvM
                                $dRead3_s3XvN
                                n_s3XvT; } in
                  let {
                    sat_s3Xwd [Occ=Once]
                      :: forall b2.
                         ((a_a3KKe, b_a3KKf, c_a3KKg, d_a3KKh, e_a3KKi, f_a3KKj)
                          -> Text.ParserCombinators.ReadP.P b2)
                         -> Text.ParserCombinators.ReadP.P b2
                    [LclId] =
                        [$dRead4_s3XvO $dRead5_s3XvP n_s3XvT ds1_s3XvU] \r [k1_s3XvV]
                            let {
                              sat_s3Xwc [Occ=Once]
                                :: (a_a3KKe, b_a3KKf, c_a3KKg, d_a3KKh)
                                   -> Text.ParserCombinators.ReadP.P b2_a3nIU
                              [LclId] =
                                  [$dRead4_s3XvO $dRead5_s3XvP n_s3XvT k1_s3XvV] \r [a1_s3XvW]
                                      case a1_s3XvW of {
                                        (,,,) a2_s3XvY [Occ=OnceL]
                                              b3_s3XvZ [Occ=OnceL]
                                              c1_s3Xw0 [Occ=OnceL]
                                              d1_s3Xw1 [Occ=OnceL] ->
                                            let {
                                              sat_s3Xw9 [Occ=Once]
                                                :: () -> Text.ParserCombinators.ReadP.P b2_a3nIU
                                              [LclId] =
                                                  [$dRead4_s3XvO
                                                   $dRead5_s3XvP
                                                   n_s3XvT
                                                   k1_s3XvV
                                                   a2_s3XvY
                                                   b3_s3XvZ
                                                   c1_s3Xw0
                                                   d1_s3Xw1] \r [a3_s3Xw2]
                                                      let {
                                                        sat_s3Xw8 [Occ=Once]
                                                          :: (e_a3KKi, f_a3KKj)
                                                             -> Text.ParserCombinators.ReadP.P
                                                                  b2_a3nIU
                                                        [LclId] =
                                                            [k1_s3XvV
                                                             a2_s3XvY
                                                             b3_s3XvZ
                                                             c1_s3Xw0
                                                             d1_s3Xw1] \r [a4_s3Xw3]
                                                                case a4_s3Xw3 of {
                                                                  (,) e1_s3Xw5 [Occ=Once]
                                                                      f1_s3Xw6 [Occ=Once] ->
                                                                      let {
                                                                        sat_s3Xw7 [Occ=Once]
                                                                          :: (a_a3KKe, b_a3KKf,
                                                                              c_a3KKg, d_a3KKh,
                                                                              e_a3KKi, f_a3KKj)
                                                                        [LclId] =
                                                                            CCCS (,,,,,)! [a2_s3XvY
                                                                                           b3_s3XvZ
                                                                                           c1_s3Xw0
                                                                                           d1_s3Xw1
                                                                                           e1_s3Xw5
                                                                                           f1_s3Xw6];
                                                                      } in  k1_s3XvV sat_s3Xw7;
                                                                };
                                                      } in 
                                                        GHC.Read.$fRead(,)2
                                                            $dRead4_s3XvO
                                                            $dRead5_s3XvP
                                                            n_s3XvT
                                                            sat_s3Xw8;
                                            } in 
                                              case
                                                  Text.Read.Lex.$wexpect
                                                      GHC.Read.$fRead(,)_lexeme sat_s3Xw9
                                              of
                                              { Unit# ww1_s3Xwb [Occ=Once] ->
                                                    Text.ParserCombinators.ReadP.Look [ww1_s3Xwb];
                                              };
                                      };
                            } in  ds1_s3XvU sat_s3Xwc;
                  } in  sat_s3Xwd; } in
        let {
          lvl2_s3Xwe [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> forall b2.
                  ((a_a3KKe, b_a3KKf, c_a3KKg, d_a3KKh, e_a3KKi, f_a3KKj)
                   -> Text.ParserCombinators.ReadP.P b2)
                  -> Text.ParserCombinators.ReadP.P b2
          [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
              [p_s3XvS] \r [w_s3Xwf w1_s3Xwg]
                  case GHC.Read.$wparen' p_s3XvS w_s3Xwf w1_s3Xwg of {
                    Unit# ww1_s3Xwi [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Get [ww1_s3Xwi];
                  }; } in
        let {
          sat_s3Xwn [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_a3KKe, b_a3KKf, c_a3KKg, d_a3KKh, e_a3KKi, f_a3KKj)
          [LclId] =
              [lvl2_s3Xwe] \r [eta2_s3Xwj eta3_s3Xwk]
                  case
                      GHC.Read.$wskipSpacesThenP lvl2_s3Xwe eta2_s3Xwj eta3_s3Xwk
                  of
                  { Unit# ww1_s3Xwm [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Look [ww1_s3Xwm];
                  };
        } in  GHC.Read.list3 sat_s3Xwn eta_s3XvQ eta1_s3XvR;

GHC.Read.$fRead(,,,,)1
  :: forall a b c d e.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        ((a, b, c, d, e) -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=7,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Xwo
           $dRead1_s3Xwp
           $dRead2_s3Xwq
           $dRead3_s3Xwr
           $dRead4_s3Xws
           eta_s3Xwt
           eta1_s3Xwu]
        let {
          p_s3Xwv [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> Text.ParserCombinators.ReadP.ReadP
                    (a_a3KLl, b_a3KLm, c_a3KLn, d_a3KLo, e_a3KLp)
          [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
              [$dRead_s3Xwo
               $dRead1_s3Xwp
               $dRead2_s3Xwq
               $dRead3_s3Xwr
               $dRead4_s3Xws] \r [n_s3Xww]
                  let {
                    ds1_s3Xwx [Occ=OnceL, Dmd=<L,C(U)>]
                      :: Text.ParserCombinators.ReadP.ReadP
                           (a_a3KLl, b_a3KLm, c_a3KLn, d_a3KLo)
                    [LclId] =
                        [$dRead_s3Xwo
                         $dRead1_s3Xwp
                         $dRead2_s3Xwq
                         $dRead3_s3Xwr
                         n_s3Xww] \u []
                            GHC.Read.$fRead(,,,)2
                                $dRead_s3Xwo
                                $dRead1_s3Xwp
                                $dRead2_s3Xwq
                                $dRead3_s3Xwr
                                n_s3Xww; } in
                  let {
                    sat_s3XwN [Occ=Once]
                      :: forall b2.
                         ((a_a3KLl, b_a3KLm, c_a3KLn, d_a3KLo, e_a3KLp)
                          -> Text.ParserCombinators.ReadP.P b2)
                         -> Text.ParserCombinators.ReadP.P b2
                    [LclId] =
                        [$dRead4_s3Xws n_s3Xww ds1_s3Xwx] \r [k1_s3Xwy]
                            let {
                              sat_s3XwM [Occ=Once]
                                :: (a_a3KLl, b_a3KLm, c_a3KLn, d_a3KLo)
                                   -> Text.ParserCombinators.ReadP.P b2_a3nIU
                              [LclId] =
                                  [$dRead4_s3Xws n_s3Xww k1_s3Xwy] \r [a1_s3Xwz]
                                      case a1_s3Xwz of {
                                        (,,,) a2_s3XwB [Occ=OnceL]
                                              b3_s3XwC [Occ=OnceL]
                                              c1_s3XwD [Occ=OnceL]
                                              d1_s3XwE [Occ=OnceL] ->
                                            let {
                                              sat_s3XwJ [Occ=Once]
                                                :: () -> Text.ParserCombinators.ReadP.P b2_a3nIU
                                              [LclId] =
                                                  [$dRead4_s3Xws
                                                   n_s3Xww
                                                   k1_s3Xwy
                                                   a2_s3XwB
                                                   b3_s3XwC
                                                   c1_s3XwD
                                                   d1_s3XwE] \r [a3_s3XwF]
                                                      let {
                                                        sat_s3XwI [Occ=Once]
                                                          :: e_a3KLp
                                                             -> Text.ParserCombinators.ReadP.P
                                                                  b2_a3nIU
                                                        [LclId] =
                                                            [k1_s3Xwy
                                                             a2_s3XwB
                                                             b3_s3XwC
                                                             c1_s3XwD
                                                             d1_s3XwE] \r [a4_s3XwG]
                                                                let {
                                                                  sat_s3XwH [Occ=Once]
                                                                    :: (a_a3KLl, b_a3KLm, c_a3KLn,
                                                                        d_a3KLo, e_a3KLp)
                                                                  [LclId] =
                                                                      CCCS (,,,,)! [a2_s3XwB
                                                                                    b3_s3XwC
                                                                                    c1_s3XwD
                                                                                    d1_s3XwE
                                                                                    a4_s3XwG];
                                                                } in  k1_s3Xwy sat_s3XwH;
                                                      } in 
                                                        GHC.Read.readPrec
                                                            $dRead4_s3Xws n_s3Xww sat_s3XwI;
                                            } in 
                                              case
                                                  Text.Read.Lex.$wexpect
                                                      GHC.Read.$fRead(,)_lexeme sat_s3XwJ
                                              of
                                              { Unit# ww1_s3XwL [Occ=Once] ->
                                                    Text.ParserCombinators.ReadP.Look [ww1_s3XwL];
                                              };
                                      };
                            } in  ds1_s3Xwx sat_s3XwM;
                  } in  sat_s3XwN; } in
        let {
          lvl2_s3XwO [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> forall b2.
                  ((a_a3KLl, b_a3KLm, c_a3KLn, d_a3KLo, e_a3KLp)
                   -> Text.ParserCombinators.ReadP.P b2)
                  -> Text.ParserCombinators.ReadP.P b2
          [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
              [p_s3Xwv] \r [w_s3XwP w1_s3XwQ]
                  case GHC.Read.$wparen' p_s3Xwv w_s3XwP w1_s3XwQ of {
                    Unit# ww1_s3XwS [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Get [ww1_s3XwS];
                  }; } in
        let {
          sat_s3XwX [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_a3KLl, b_a3KLm, c_a3KLn, d_a3KLo, e_a3KLp)
          [LclId] =
              [lvl2_s3XwO] \r [eta2_s3XwT eta3_s3XwU]
                  case
                      GHC.Read.$wskipSpacesThenP lvl2_s3XwO eta2_s3XwT eta3_s3XwU
                  of
                  { Unit# ww1_s3XwW [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Look [ww1_s3XwW];
                  };
        } in  GHC.Read.list3 sat_s3XwX eta_s3Xwt eta1_s3Xwu;

GHC.Read.$fRead(,,,)1
  :: forall a b c d.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        ((a, b, c, d) -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=6,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XwY
           $dRead1_s3XwZ
           $dRead2_s3Xx0
           $dRead3_s3Xx1
           eta_s3Xx2
           eta1_s3Xx3]
        let {
          p_s3Xx4 [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> Text.ParserCombinators.ReadP.ReadP
                    (a_a3KMn, b_a3KMo, c_a3KMp, d_a3KMq)
          [LclId, Arity=1, Unf=OtherCon []] =
              [$dRead_s3XwY
               $dRead1_s3XwZ
               $dRead2_s3Xx0
               $dRead3_s3Xx1] \r [eta_B1]
                  GHC.Read.$fRead(,,,)2
                      $dRead_s3XwY $dRead1_s3XwZ $dRead2_s3Xx0 $dRead3_s3Xx1 eta_B1; } in
        let {
          lvl2_s3Xx5 [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> forall b2.
                  ((a_a3KMn, b_a3KMo, c_a3KMp, d_a3KMq)
                   -> Text.ParserCombinators.ReadP.P b2)
                  -> Text.ParserCombinators.ReadP.P b2
          [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
              [p_s3Xx4] \r [w_s3Xx6 w1_s3Xx7]
                  case GHC.Read.$wparen' p_s3Xx4 w_s3Xx6 w1_s3Xx7 of {
                    Unit# ww1_s3Xx9 [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Get [ww1_s3Xx9];
                  }; } in
        let {
          sat_s3Xxe [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_a3KMn, b_a3KMo, c_a3KMp, d_a3KMq)
          [LclId] =
              [lvl2_s3Xx5] \r [eta2_s3Xxa eta3_s3Xxb]
                  case
                      GHC.Read.$wskipSpacesThenP lvl2_s3Xx5 eta2_s3Xxa eta3_s3Xxb
                  of
                  { Unit# ww1_s3Xxd [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Look [ww1_s3Xxd];
                  };
        } in  GHC.Read.list3 sat_s3Xxe eta_s3Xx2 eta1_s3Xx3;

GHC.Read.$fRead(,,)1
  :: forall a b c.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        ((a, b, c) -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=5,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Xxf
           $dRead1_s3Xxg
           $dRead2_s3Xxh
           eta_s3Xxi
           eta1_s3Xxj]
        let {
          p_s3Xxk [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> Text.ParserCombinators.ReadP.ReadP (a_a3KN1, b_a3KN2, c_a3KN3)
          [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
              [$dRead_s3Xxf $dRead1_s3Xxg $dRead2_s3Xxh] \r [n_s3Xxl]
                  let {
                    ds1_s3Xxm [Occ=OnceL, Dmd=<L,C(U)>]
                      :: Text.ParserCombinators.ReadP.ReadP (a_a3KN1, b_a3KN2)
                    [LclId] =
                        [$dRead_s3Xxf $dRead1_s3Xxg n_s3Xxl] \u []
                            GHC.Read.$fRead(,)2 $dRead_s3Xxf $dRead1_s3Xxg n_s3Xxl; } in
                  let {
                    sat_s3XxA [Occ=Once]
                      :: forall b2.
                         ((a_a3KN1, b_a3KN2, c_a3KN3) -> Text.ParserCombinators.ReadP.P b2)
                         -> Text.ParserCombinators.ReadP.P b2
                    [LclId] =
                        [$dRead2_s3Xxh n_s3Xxl ds1_s3Xxm] \r [k1_s3Xxn]
                            let {
                              sat_s3Xxz [Occ=Once]
                                :: (a_a3KN1, b_a3KN2) -> Text.ParserCombinators.ReadP.P b2_a3nIU
                              [LclId] =
                                  [$dRead2_s3Xxh n_s3Xxl k1_s3Xxn] \r [a1_s3Xxo]
                                      case a1_s3Xxo of {
                                        (,) a2_s3Xxq [Occ=OnceL] b3_s3Xxr [Occ=OnceL] ->
                                            let {
                                              sat_s3Xxw [Occ=Once]
                                                :: () -> Text.ParserCombinators.ReadP.P b2_a3nIU
                                              [LclId] =
                                                  [$dRead2_s3Xxh
                                                   n_s3Xxl
                                                   k1_s3Xxn
                                                   a2_s3Xxq
                                                   b3_s3Xxr] \r [a3_s3Xxs]
                                                      let {
                                                        sat_s3Xxv [Occ=Once]
                                                          :: c_a3KN3
                                                             -> Text.ParserCombinators.ReadP.P
                                                                  b2_a3nIU
                                                        [LclId] =
                                                            [k1_s3Xxn
                                                             a2_s3Xxq
                                                             b3_s3Xxr] \r [a4_s3Xxt]
                                                                let {
                                                                  sat_s3Xxu [Occ=Once]
                                                                    :: (a_a3KN1, b_a3KN2, c_a3KN3)
                                                                  [LclId] =
                                                                      CCCS (,,)! [a2_s3Xxq
                                                                                  b3_s3Xxr
                                                                                  a4_s3Xxt];
                                                                } in  k1_s3Xxn sat_s3Xxu;
                                                      } in 
                                                        GHC.Read.readPrec
                                                            $dRead2_s3Xxh n_s3Xxl sat_s3Xxv;
                                            } in 
                                              case
                                                  Text.Read.Lex.$wexpect
                                                      GHC.Read.$fRead(,)_lexeme sat_s3Xxw
                                              of
                                              { Unit# ww1_s3Xxy [Occ=Once] ->
                                                    Text.ParserCombinators.ReadP.Look [ww1_s3Xxy];
                                              };
                                      };
                            } in  ds1_s3Xxm sat_s3Xxz;
                  } in  sat_s3XxA; } in
        let {
          lvl2_s3XxB [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> forall b2.
                  ((a_a3KN1, b_a3KN2, c_a3KN3) -> Text.ParserCombinators.ReadP.P b2)
                  -> Text.ParserCombinators.ReadP.P b2
          [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
              [p_s3Xxk] \r [w_s3XxC w1_s3XxD]
                  case GHC.Read.$wparen' p_s3Xxk w_s3XxC w1_s3XxD of {
                    Unit# ww1_s3XxF [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Get [ww1_s3XxF];
                  }; } in
        let {
          sat_s3XxK [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_a3KN1, b_a3KN2, c_a3KN3)
          [LclId] =
              [lvl2_s3XxB] \r [eta2_s3XxG eta3_s3XxH]
                  case
                      GHC.Read.$wskipSpacesThenP lvl2_s3XxB eta2_s3XxG eta3_s3XxH
                  of
                  { Unit# ww1_s3XxJ [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Look [ww1_s3XxJ];
                  };
        } in  GHC.Read.list3 sat_s3XxK eta_s3Xxi eta1_s3Xxj;

GHC.Read.$fRead(,)1
  :: forall a b.
     (GHC.Read.Read a, GHC.Read.Read b) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        ((a, b) -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=4,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XxL $dRead1_s3XxM eta_s3XxN eta1_s3XxO]
        let {
          p_s3XxP [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> Text.ParserCombinators.ReadP.ReadP (a_a3KNT, b_a3KNU)
          [LclId, Arity=1, Unf=OtherCon []] =
              [$dRead_s3XxL $dRead1_s3XxM] \r [eta_B1]
                  GHC.Read.$fRead(,)2 $dRead_s3XxL $dRead1_s3XxM eta_B1; } in
        let {
          lvl2_s3XxQ [Occ=OnceL, Dmd=<L,C(C1(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> forall b2.
                  ((a_a3KNT, b_a3KNU) -> Text.ParserCombinators.ReadP.P b2)
                  -> Text.ParserCombinators.ReadP.P b2
          [LclId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
              [p_s3XxP] \r [w_s3XxR w1_s3XxS]
                  case GHC.Read.$wparen' p_s3XxP w_s3XxR w1_s3XxS of {
                    Unit# ww1_s3XxU [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Get [ww1_s3XxU];
                  }; } in
        let {
          sat_s3XxZ [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec (a_a3KNT, b_a3KNU)
          [LclId] =
              [lvl2_s3XxQ] \r [eta2_s3XxV eta3_s3XxW]
                  case
                      GHC.Read.$wskipSpacesThenP lvl2_s3XxQ eta2_s3XxV eta3_s3XxW
                  of
                  { Unit# ww1_s3XxY [Occ=Once] ->
                        Text.ParserCombinators.ReadP.Look [ww1_s3XxY];
                  };
        } in  GHC.Read.list3 sat_s3XxZ eta_s3XxN eta1_s3XxO;

GHC.Read.list2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "["#;

GHC.Read.list1 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Read.list2;

GHC.Read.list_lexeme :: Text.Read.Lex.Lexeme
[GblId, Str=m3, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Punc! [GHC.Read.list1];

GHC.Read.list
  :: forall a.
     Text.ParserCombinators.ReadPrec.ReadPrec a
     -> Text.ParserCombinators.ReadPrec.ReadPrec [a]
[GblId, Arity=1, Str=<L,1*C1(C(U))>, Unf=OtherCon []] =
    [] \r [readx_s3Xy0]
        let {
          ds1_s3Xy1 [Dmd=<L,C(U)>]
            :: Text.ParserCombinators.ReadP.ReadP a_a3KpE
          [LclId] =
              [readx_s3Xy0] \u []
                  readx_s3Xy0 Text.ParserCombinators.ReadPrec.minPrec; } in
        let {
          $wlistRest_s3Xy2 [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
            :: GHC.Types.Bool
               -> forall b1.
                  ([a_a3KpE] -> Text.ParserCombinators.ReadP.P b1)
                  -> Text.ParserCombinators.ReadP.P b1
          [LclId, Arity=2, Str=<L,U><L,C(U)>, Unf=OtherCon []] =
              sat-only [ds1_s3Xy1 $wlistRest_s3Xy2] \r [w_s3Xy3 w1_s3Xy4]
                  let {
                    lvl116_s3Xy5 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3MtN
                    [LclId] =
                        [ds1_s3Xy1 $wlistRest_s3Xy2 w_s3Xy3 w1_s3Xy4] \u []
                            let {
                              lvl2_s3Xy6 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3MtN
                              [LclId] =
                                  [w1_s3Xy4] \u [] w1_s3Xy4 GHC.Types.[]; } in
                            let {
                              lvl3_s3Xy7 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3MtN
                              [LclId] =
                                  [ds1_s3Xy1 $wlistRest_s3Xy2 w1_s3Xy4] \u []
                                      let {
                                        sat_s3Xyc [Occ=Once]
                                          :: a_a3KpE -> Text.ParserCombinators.ReadP.P b1_s3MtN
                                        [LclId] =
                                            [$wlistRest_s3Xy2 w1_s3Xy4] \r [a1_s3Xy8]
                                                let {
                                                  sat_s3Xyb [Occ=Once]
                                                    :: [a_a3KpE]
                                                       -> Text.ParserCombinators.ReadP.P b1_s3MtN
                                                  [LclId] =
                                                      [w1_s3Xy4 a1_s3Xy8] \r [a2_s3Xy9]
                                                          let {
                                                            sat_s3Xya [Occ=Once] :: [a_a3KpE]
                                                            [LclId] =
                                                                CCCS :! [a1_s3Xy8 a2_s3Xy9];
                                                          } in  w1_s3Xy4 sat_s3Xya;
                                                } in  $wlistRest_s3Xy2 GHC.Types.True sat_s3Xyb;
                                      } in  ds1_s3Xy1 sat_s3Xyc; } in
                            let {
                              sat_s3Xyy [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_s3MtN
                              [LclId] =
                                  [w_s3Xy3 lvl2_s3Xy6 lvl3_s3Xy7] \u []
                                      let {
                                        sat_s3Xyx [Occ=Once]
                                          :: Text.Read.Lex.Lexeme
                                             -> Text.ParserCombinators.ReadP.P b1_s3MtN
                                        [LclId] =
                                            [w_s3Xy3 lvl2_s3Xy6 lvl3_s3Xy7] \r [a1_s3Xyh]
                                                case a1_s3Xyh of {
                                                  __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                                                  Text.Read.Lex.Punc c_s3Xyj [Occ=Once!] ->
                                                      case c_s3Xyj of {
                                                        [] -> Text.ParserCombinators.ReadP.Fail [];
                                                        : ds_s3Xyl [Occ=Once!]
                                                          ds2_s3Xym [Occ=Once*!] ->
                                                            case ds_s3Xyl of {
                                                              GHC.Types.C# ds3_s3Xyo [Occ=Once!] ->
                                                                  case ds3_s3Xyo of {
                                                                    __DEFAULT ->
                                                                        Text.ParserCombinators.ReadP.Fail [];
                                                                    ','# ->
                                                                        case ds2_s3Xym of {
                                                                          [] ->
                                                                              case w_s3Xy3 of {
                                                                                GHC.Types.False ->
                                                                                    Text.ParserCombinators.ReadP.Fail [];
                                                                                GHC.Types.True ->
                                                                                    lvl3_s3Xy7;
                                                                              };
                                                                          : _ [Occ=Dead]
                                                                            _ [Occ=Dead] ->
                                                                              Text.ParserCombinators.ReadP.Fail [];
                                                                        };
                                                                    ']'# ->
                                                                        case ds2_s3Xym of {
                                                                          [] -> lvl2_s3Xy6;
                                                                          : _ [Occ=Dead]
                                                                            _ [Occ=Dead] ->
                                                                              Text.ParserCombinators.ReadP.Fail [];
                                                                        };
                                                                  };
                                                            };
                                                      };
                                                };
                                      } in  Text.Read.Lex.expect2 sat_s3Xyx; } in
                            let {
                              sat_s3Xyf [Occ=OnceL]
                                :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3MtN
                              [LclId] =
                                  [] \r [a3_s3Xyd]
                                      case a3_s3Xyd of {
                                        __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                                      }; } in
                            let {
                              sat_s3Xyg [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_s3MtN
                              [LclId] =
                                  CCCS Text.ParserCombinators.ReadP.Look! [sat_s3Xyf];
                            } in 
                              Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                  sat_s3Xyg sat_s3Xyy; } in
                  let {
                    k_s3Xyz [Occ=OnceL, Dmd=<L,C(U)>]
                      :: () -> Text.ParserCombinators.ReadP.P b1_s3MtN
                    [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
                        [lvl116_s3Xy5] \r [a3_s3XyA] lvl116_s3Xy5; } in
                  let {
                    sat_s3XyC [Occ=Once]
                      :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3MtN
                    [LclId] =
                        [k_s3Xyz] \r [a1_s3XyB]
                            Text.ParserCombinators.ReadP.skipSpaces2 a1_s3XyB k_s3Xyz;
                  } in  Text.ParserCombinators.ReadP.Look [sat_s3XyC]; } in
        let {
          sat_s3XyQ [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec [a_a3KpE]
          [LclId] =
              [ds1_s3Xy1 $wlistRest_s3Xy2] \r [n_s3XyD eta_s3XyE]
                  let {
                    sat_s3XyN [Occ=Once]
                      :: () -> Text.ParserCombinators.ReadP.P b_a3ngn
                    [LclId] =
                        [ds1_s3Xy1 $wlistRest_s3Xy2 eta_s3XyE] \r [a1_s3XyF]
                            let {
                              sat_s3XyM [Occ=Once] :: Text.ParserCombinators.ReadP.P b_a3ngn
                              [LclId] =
                                  [ds1_s3Xy1 $wlistRest_s3Xy2 eta_s3XyE] \u []
                                      let {
                                        sat_s3XyL [Occ=Once]
                                          :: a_a3KpE -> Text.ParserCombinators.ReadP.P b_a3ngn
                                        [LclId] =
                                            [$wlistRest_s3Xy2 eta_s3XyE] \r [a2_s3XyH]
                                                let {
                                                  sat_s3XyK [Occ=Once]
                                                    :: [a_a3KpE]
                                                       -> Text.ParserCombinators.ReadP.P b_a3ngn
                                                  [LclId] =
                                                      [eta_s3XyE a2_s3XyH] \r [a3_s3XyI]
                                                          let {
                                                            sat_s3XyJ [Occ=Once] :: [a_a3KpE]
                                                            [LclId] =
                                                                CCCS :! [a2_s3XyH a3_s3XyI];
                                                          } in  eta_s3XyE sat_s3XyJ;
                                                } in  $wlistRest_s3Xy2 GHC.Types.True sat_s3XyK;
                                      } in  ds1_s3Xy1 sat_s3XyL;
                            } in 
                              case $wlistRest_s3Xy2 GHC.Types.False eta_s3XyE of sat_s3XyG {
                                __DEFAULT ->
                                    Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                        sat_s3XyG sat_s3XyM;
                              };
                  } in 
                    case Text.Read.Lex.$wexpect GHC.Read.list_lexeme sat_s3XyN of {
                      Unit# ww1_s3XyP [Occ=Once] ->
                          Text.ParserCombinators.ReadP.Look [ww1_s3XyP];
                    };
        } in  GHC.Read.list3 sat_s3XyQ;

GHC.Read.readListPrecDefault
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadPrec.ReadPrec [a]
[GblId, Arity=1, Str=<L,1*U(A,A,1*C1(C(U)),A)>, Unf=OtherCon []] =
    [] \r [$dRead_s3XyR]
        let {
          sat_s3XyS [Occ=Once, Dmd=<L,1*C1(C(U))>]
            :: Text.ParserCombinators.ReadPrec.ReadPrec a_a3Ks9
          [LclId] =
              [$dRead_s3XyR] \s [] GHC.Read.readPrec $dRead_s3XyR;
        } in  GHC.Read.list sat_s3XyS;

GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadListPrec
  :: forall a b c d e f g h i j k l m n o.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l, GHC.Read.Read m, GHC.Read.Read n,
      GHC.Read.Read o) =>
     Text.ParserCombinators.ReadPrec.ReadPrec
       [(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)]
[GblId,
 Arity=15,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XyT
           $dRead1_s3XyU
           $dRead2_s3XyV
           $dRead3_s3XyW
           $dRead4_s3XyX
           $dRead5_s3XyY
           $dRead6_s3XyZ
           $dRead7_s3Xz0
           $dRead8_s3Xz1
           $dRead9_s3Xz2
           $dRead10_s3Xz3
           $dRead11_s3Xz4
           $dRead12_s3Xz5
           $dRead13_s3Xz6
           $dRead14_s3Xz7]
        let {
          sat_s3Xz8 [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KGz, b_X3KGB, c_X3KGD, d_X3KGF, e_X3KGH, f_X3KGJ, g_X3KGL,
                  h_X3KGN, i_X3KGP, j_X3KGR, k_X3KGT, l_X3KGV, m_X3KGX, n_X3KGZ,
                  o_X3KH1)
          [LclId] =
              [$dRead_s3XyT
               $dRead1_s3XyU
               $dRead2_s3XyV
               $dRead3_s3XyW
               $dRead4_s3XyX
               $dRead5_s3XyY
               $dRead6_s3XyZ
               $dRead7_s3Xz0
               $dRead8_s3Xz1
               $dRead9_s3Xz2
               $dRead10_s3Xz3
               $dRead11_s3Xz4
               $dRead12_s3Xz5
               $dRead13_s3Xz6
               $dRead14_s3Xz7] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,,,,,,,,,,)1
                      $dRead_s3XyT
                      $dRead1_s3XyU
                      $dRead2_s3XyV
                      $dRead3_s3XyW
                      $dRead4_s3XyX
                      $dRead5_s3XyY
                      $dRead6_s3XyZ
                      $dRead7_s3Xz0
                      $dRead8_s3Xz1
                      $dRead9_s3Xz2
                      $dRead10_s3Xz3
                      $dRead11_s3Xz4
                      $dRead12_s3Xz5
                      $dRead13_s3Xz6
                      $dRead14_s3Xz7
                      eta_B2
                      eta_B1;
        } in  GHC.Read.list sat_s3Xz8;

GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadsPrec
  :: forall a b c d e f g h i j k l m n o.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l, GHC.Read.Read m, GHC.Read.Read n,
      GHC.Read.Read o) =>
     GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS
          (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)
[GblId,
 Arity=16,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Xz9
           $dRead1_s3Xza
           $dRead2_s3Xzb
           $dRead3_s3Xzc
           $dRead4_s3Xzd
           $dRead5_s3Xze
           $dRead6_s3Xzf
           $dRead7_s3Xzg
           $dRead8_s3Xzh
           $dRead9_s3Xzi
           $dRead10_s3Xzj
           $dRead11_s3Xzk
           $dRead12_s3Xzl
           $dRead13_s3Xzm
           $dRead14_s3Xzn
           n1_s3Xzo]
        let {
          sat_s3Xzp [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 (a_X3KGA, b_X3KGC, c_X3KGE, d_X3KGG, e_X3KGI, f_X3KGK, g_X3KGM,
                  h_X3KGO, i_X3KGQ, j_X3KGS, k_X3KGU, l_X3KGW, m_X3KGY, n_X3KH0,
                  o_X3KH2)
          [LclId] =
              [$dRead_s3Xz9
               $dRead1_s3Xza
               $dRead2_s3Xzb
               $dRead3_s3Xzc
               $dRead4_s3Xzd
               $dRead5_s3Xze
               $dRead6_s3Xzf
               $dRead7_s3Xzg
               $dRead8_s3Xzh
               $dRead9_s3Xzi
               $dRead10_s3Xzj
               $dRead11_s3Xzk
               $dRead12_s3Xzl
               $dRead13_s3Xzm
               $dRead14_s3Xzn
               n1_s3Xzo] \u []
                  GHC.Read.$fRead(,,,,,,,,,,,,,,)1
                      $dRead_s3Xz9
                      $dRead1_s3Xza
                      $dRead2_s3Xzb
                      $dRead3_s3Xzc
                      $dRead4_s3Xzd
                      $dRead5_s3Xze
                      $dRead6_s3Xzf
                      $dRead7_s3Xzg
                      $dRead8_s3Xzh
                      $dRead9_s3Xzi
                      $dRead10_s3Xzj
                      $dRead11_s3Xzk
                      $dRead12_s3Xzl
                      $dRead13_s3Xzm
                      $dRead14_s3Xzn
                      n1_s3Xzo
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3Xzp;

GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadList
  :: forall a b c d e f g h i j k l m n o.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l, GHC.Read.Read m, GHC.Read.Read n,
      GHC.Read.Read o) =>
     Text.ParserCombinators.ReadP.ReadS
       [(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)]
[GblId,
 Arity=15,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3Xzq
           $dRead1_s3Xzr
           $dRead2_s3Xzs
           $dRead3_s3Xzt
           $dRead4_s3Xzu
           $dRead5_s3Xzv
           $dRead6_s3Xzw
           $dRead7_s3Xzx
           $dRead8_s3Xzy
           $dRead9_s3Xzz
           $dRead10_s3XzA
           $dRead11_s3XzB
           $dRead12_s3XzC
           $dRead13_s3XzD
           $dRead14_s3XzE]
        let {
          sat_s3XzG [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 [(a_X3KGB, b_X3KGD, c_X3KGF, d_X3KGH, e_X3KGJ, f_X3KGL, g_X3KGN,
                   h_X3KGP, i_X3KGR, j_X3KGT, k_X3KGV, l_X3KGX, m_X3KGZ, n_X3KH1,
                   o_X3KH3)]
          [LclId] =
              [$dRead_s3Xzq
               $dRead1_s3Xzr
               $dRead2_s3Xzs
               $dRead3_s3Xzt
               $dRead4_s3Xzu
               $dRead5_s3Xzv
               $dRead6_s3Xzw
               $dRead7_s3Xzx
               $dRead8_s3Xzy
               $dRead9_s3Xzz
               $dRead10_s3XzA
               $dRead11_s3XzB
               $dRead12_s3XzC
               $dRead13_s3XzD
               $dRead14_s3XzE] \u []
                  let {
                    sat_s3XzF [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec
                           (a_X3KGB, b_X3KGD, c_X3KGF, d_X3KGH, e_X3KGJ, f_X3KGL, g_X3KGN,
                            h_X3KGP, i_X3KGR, j_X3KGT, k_X3KGV, l_X3KGX, m_X3KGZ, n_X3KH1,
                            o_X3KH3)
                    [LclId] =
                        [$dRead_s3Xzq
                         $dRead1_s3Xzr
                         $dRead2_s3Xzs
                         $dRead3_s3Xzt
                         $dRead4_s3Xzu
                         $dRead5_s3Xzv
                         $dRead6_s3Xzw
                         $dRead7_s3Xzx
                         $dRead8_s3Xzy
                         $dRead9_s3Xzz
                         $dRead10_s3XzA
                         $dRead11_s3XzB
                         $dRead12_s3XzC
                         $dRead13_s3XzD
                         $dRead14_s3XzE] \r [eta_B2 eta_B1]
                            GHC.Read.$fRead(,,,,,,,,,,,,,,)1
                                $dRead_s3Xzq
                                $dRead1_s3Xzr
                                $dRead2_s3Xzs
                                $dRead3_s3Xzt
                                $dRead4_s3Xzu
                                $dRead5_s3Xzv
                                $dRead6_s3Xzw
                                $dRead7_s3Xzx
                                $dRead8_s3Xzy
                                $dRead9_s3Xzz
                                $dRead10_s3XzA
                                $dRead11_s3XzB
                                $dRead12_s3XzC
                                $dRead13_s3XzD
                                $dRead14_s3XzE
                                eta_B2
                                eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s3XzF
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XzG;

GHC.Read.$fRead(,,,,,,,,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h i j k l m n o.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l, GHC.Read.Read m, GHC.Read.Read n,
      GHC.Read.Read o) =>
     GHC.Read.Read (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)
[GblId[DFunId],
 Arity=15,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>m] =
    [] \r [$dRead_s3XzH
           $dRead1_s3XzI
           $dRead2_s3XzJ
           $dRead3_s3XzK
           $dRead4_s3XzL
           $dRead5_s3XzM
           $dRead6_s3XzN
           $dRead7_s3XzO
           $dRead8_s3XzP
           $dRead9_s3XzQ
           $dRead10_s3XzR
           $dRead11_s3XzS
           $dRead12_s3XzT
           $dRead13_s3XzU
           $dRead14_s3XzV]
        let {
          sat_s3XzZ [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 [(a_X3KGC, b_X3KGE, c_X3KGG, d_X3KGI, e_X3KGK, f_X3KGM, g_X3KGO,
                   h_X3KGQ, i_X3KGS, j_X3KGU, k_X3KGW, l_X3KGY, m_X3KH0, n_X3KH2,
                   o_X3KH4)]
          [LclId] =
              [$dRead_s3XzH
               $dRead1_s3XzI
               $dRead2_s3XzJ
               $dRead3_s3XzK
               $dRead4_s3XzL
               $dRead5_s3XzM
               $dRead6_s3XzN
               $dRead7_s3XzO
               $dRead8_s3XzP
               $dRead9_s3XzQ
               $dRead10_s3XzR
               $dRead11_s3XzS
               $dRead12_s3XzT
               $dRead13_s3XzU
               $dRead14_s3XzV] \u []
                  GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadListPrec
                      $dRead_s3XzH
                      $dRead1_s3XzI
                      $dRead2_s3XzJ
                      $dRead3_s3XzK
                      $dRead4_s3XzL
                      $dRead5_s3XzM
                      $dRead6_s3XzN
                      $dRead7_s3XzO
                      $dRead8_s3XzP
                      $dRead9_s3XzQ
                      $dRead10_s3XzR
                      $dRead11_s3XzS
                      $dRead12_s3XzT
                      $dRead13_s3XzU
                      $dRead14_s3XzV; } in
        let {
          sat_s3XzY [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KGC, b_X3KGE, c_X3KGG, d_X3KGI, e_X3KGK, f_X3KGM, g_X3KGO,
                  h_X3KGQ, i_X3KGS, j_X3KGU, k_X3KGW, l_X3KGY, m_X3KH0, n_X3KH2,
                  o_X3KH4)
          [LclId] =
              [$dRead_s3XzH
               $dRead1_s3XzI
               $dRead2_s3XzJ
               $dRead3_s3XzK
               $dRead4_s3XzL
               $dRead5_s3XzM
               $dRead6_s3XzN
               $dRead7_s3XzO
               $dRead8_s3XzP
               $dRead9_s3XzQ
               $dRead10_s3XzR
               $dRead11_s3XzS
               $dRead12_s3XzT
               $dRead13_s3XzU
               $dRead14_s3XzV] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,,,,,,,,,,)1
                      $dRead_s3XzH
                      $dRead1_s3XzI
                      $dRead2_s3XzJ
                      $dRead3_s3XzK
                      $dRead4_s3XzL
                      $dRead5_s3XzM
                      $dRead6_s3XzN
                      $dRead7_s3XzO
                      $dRead8_s3XzP
                      $dRead9_s3XzQ
                      $dRead10_s3XzR
                      $dRead11_s3XzS
                      $dRead12_s3XzT
                      $dRead13_s3XzU
                      $dRead14_s3XzV
                      eta_B2
                      eta_B1; } in
        let {
          sat_s3XzX [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS
                 [(a_X3KGC, b_X3KGE, c_X3KGG, d_X3KGI, e_X3KGK, f_X3KGM, g_X3KGO,
                   h_X3KGQ, i_X3KGS, j_X3KGU, k_X3KGW, l_X3KGY, m_X3KH0, n_X3KH2,
                   o_X3KH4)]
          [LclId] =
              [$dRead_s3XzH
               $dRead1_s3XzI
               $dRead2_s3XzJ
               $dRead3_s3XzK
               $dRead4_s3XzL
               $dRead5_s3XzM
               $dRead6_s3XzN
               $dRead7_s3XzO
               $dRead8_s3XzP
               $dRead9_s3XzQ
               $dRead10_s3XzR
               $dRead11_s3XzS
               $dRead12_s3XzT
               $dRead13_s3XzU
               $dRead14_s3XzV] \u []
                  GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadList
                      $dRead_s3XzH
                      $dRead1_s3XzI
                      $dRead2_s3XzJ
                      $dRead3_s3XzK
                      $dRead4_s3XzL
                      $dRead5_s3XzM
                      $dRead6_s3XzN
                      $dRead7_s3XzO
                      $dRead8_s3XzP
                      $dRead9_s3XzQ
                      $dRead10_s3XzR
                      $dRead11_s3XzS
                      $dRead12_s3XzT
                      $dRead13_s3XzU
                      $dRead14_s3XzV; } in
        let {
          sat_s3XzW [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS
                    (a_X3KGC, b_X3KGE, c_X3KGG, d_X3KGI, e_X3KGK, f_X3KGM, g_X3KGO,
                     h_X3KGQ, i_X3KGS, j_X3KGU, k_X3KGW, l_X3KGY, m_X3KH0, n_X3KH2,
                     o_X3KH4)
          [LclId] =
              [$dRead_s3XzH
               $dRead1_s3XzI
               $dRead2_s3XzJ
               $dRead3_s3XzK
               $dRead4_s3XzL
               $dRead5_s3XzM
               $dRead6_s3XzN
               $dRead7_s3XzO
               $dRead8_s3XzP
               $dRead9_s3XzQ
               $dRead10_s3XzR
               $dRead11_s3XzS
               $dRead12_s3XzT
               $dRead13_s3XzU
               $dRead14_s3XzV] \r [eta_B1]
                  GHC.Read.$fRead(,,,,,,,,,,,,,,)_$creadsPrec
                      $dRead_s3XzH
                      $dRead1_s3XzI
                      $dRead2_s3XzJ
                      $dRead3_s3XzK
                      $dRead4_s3XzL
                      $dRead5_s3XzM
                      $dRead6_s3XzN
                      $dRead7_s3XzO
                      $dRead8_s3XzP
                      $dRead9_s3XzQ
                      $dRead10_s3XzR
                      $dRead11_s3XzS
                      $dRead12_s3XzT
                      $dRead13_s3XzU
                      $dRead14_s3XzV
                      eta_B1;
        } in  GHC.Read.C:Read [sat_s3XzW sat_s3XzX sat_s3XzY sat_s3XzZ];

GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadListPrec
  :: forall a b c d e f g h i j k l m n.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l, GHC.Read.Read m, GHC.Read.Read n) =>
     Text.ParserCombinators.ReadPrec.ReadPrec
       [(a, b, c, d, e, f, g, h, i, j, k, l, m, n)]
[GblId,
 Arity=14,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XA0
           $dRead1_s3XA1
           $dRead2_s3XA2
           $dRead3_s3XA3
           $dRead4_s3XA4
           $dRead5_s3XA5
           $dRead6_s3XA6
           $dRead7_s3XA7
           $dRead8_s3XA8
           $dRead9_s3XA9
           $dRead10_s3XAa
           $dRead11_s3XAb
           $dRead12_s3XAc
           $dRead13_s3XAd]
        let {
          sat_s3XAe [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KIJ, b_X3KIL, c_X3KIN, d_X3KIP, e_X3KIR, f_X3KIT, g_X3KIV,
                  h_X3KIX, i_X3KIZ, j_X3KJ1, k_X3KJ3, l_X3KJ5, m_X3KJ7, n_X3KJ9)
          [LclId] =
              [$dRead_s3XA0
               $dRead1_s3XA1
               $dRead2_s3XA2
               $dRead3_s3XA3
               $dRead4_s3XA4
               $dRead5_s3XA5
               $dRead6_s3XA6
               $dRead7_s3XA7
               $dRead8_s3XA8
               $dRead9_s3XA9
               $dRead10_s3XAa
               $dRead11_s3XAb
               $dRead12_s3XAc
               $dRead13_s3XAd] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,,,,,,,,,)1
                      $dRead_s3XA0
                      $dRead1_s3XA1
                      $dRead2_s3XA2
                      $dRead3_s3XA3
                      $dRead4_s3XA4
                      $dRead5_s3XA5
                      $dRead6_s3XA6
                      $dRead7_s3XA7
                      $dRead8_s3XA8
                      $dRead9_s3XA9
                      $dRead10_s3XAa
                      $dRead11_s3XAb
                      $dRead12_s3XAc
                      $dRead13_s3XAd
                      eta_B2
                      eta_B1;
        } in  GHC.Read.list sat_s3XAe;

GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadsPrec
  :: forall a b c d e f g h i j k l m n.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l, GHC.Read.Read m, GHC.Read.Read n) =>
     GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS
          (a, b, c, d, e, f, g, h, i, j, k, l, m, n)
[GblId,
 Arity=15,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XAf
           $dRead1_s3XAg
           $dRead2_s3XAh
           $dRead3_s3XAi
           $dRead4_s3XAj
           $dRead5_s3XAk
           $dRead6_s3XAl
           $dRead7_s3XAm
           $dRead8_s3XAn
           $dRead9_s3XAo
           $dRead10_s3XAp
           $dRead11_s3XAq
           $dRead12_s3XAr
           $dRead13_s3XAs
           n1_s3XAt]
        let {
          sat_s3XAu [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 (a_X3KIK, b_X3KIM, c_X3KIO, d_X3KIQ, e_X3KIS, f_X3KIU, g_X3KIW,
                  h_X3KIY, i_X3KJ0, j_X3KJ2, k_X3KJ4, l_X3KJ6, m_X3KJ8, n_X3KJa)
          [LclId] =
              [$dRead_s3XAf
               $dRead1_s3XAg
               $dRead2_s3XAh
               $dRead3_s3XAi
               $dRead4_s3XAj
               $dRead5_s3XAk
               $dRead6_s3XAl
               $dRead7_s3XAm
               $dRead8_s3XAn
               $dRead9_s3XAo
               $dRead10_s3XAp
               $dRead11_s3XAq
               $dRead12_s3XAr
               $dRead13_s3XAs
               n1_s3XAt] \u []
                  GHC.Read.$fRead(,,,,,,,,,,,,,)1
                      $dRead_s3XAf
                      $dRead1_s3XAg
                      $dRead2_s3XAh
                      $dRead3_s3XAi
                      $dRead4_s3XAj
                      $dRead5_s3XAk
                      $dRead6_s3XAl
                      $dRead7_s3XAm
                      $dRead8_s3XAn
                      $dRead9_s3XAo
                      $dRead10_s3XAp
                      $dRead11_s3XAq
                      $dRead12_s3XAr
                      $dRead13_s3XAs
                      n1_s3XAt
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XAu;

GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadList
  :: forall a b c d e f g h i j k l m n.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l, GHC.Read.Read m, GHC.Read.Read n) =>
     Text.ParserCombinators.ReadP.ReadS
       [(a, b, c, d, e, f, g, h, i, j, k, l, m, n)]
[GblId,
 Arity=14,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XAv
           $dRead1_s3XAw
           $dRead2_s3XAx
           $dRead3_s3XAy
           $dRead4_s3XAz
           $dRead5_s3XAA
           $dRead6_s3XAB
           $dRead7_s3XAC
           $dRead8_s3XAD
           $dRead9_s3XAE
           $dRead10_s3XAF
           $dRead11_s3XAG
           $dRead12_s3XAH
           $dRead13_s3XAI]
        let {
          sat_s3XAK [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 [(a_X3KIL, b_X3KIN, c_X3KIP, d_X3KIR, e_X3KIT, f_X3KIV, g_X3KIX,
                   h_X3KIZ, i_X3KJ1, j_X3KJ3, k_X3KJ5, l_X3KJ7, m_X3KJ9, n_X3KJb)]
          [LclId] =
              [$dRead_s3XAv
               $dRead1_s3XAw
               $dRead2_s3XAx
               $dRead3_s3XAy
               $dRead4_s3XAz
               $dRead5_s3XAA
               $dRead6_s3XAB
               $dRead7_s3XAC
               $dRead8_s3XAD
               $dRead9_s3XAE
               $dRead10_s3XAF
               $dRead11_s3XAG
               $dRead12_s3XAH
               $dRead13_s3XAI] \u []
                  let {
                    sat_s3XAJ [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec
                           (a_X3KIL, b_X3KIN, c_X3KIP, d_X3KIR, e_X3KIT, f_X3KIV, g_X3KIX,
                            h_X3KIZ, i_X3KJ1, j_X3KJ3, k_X3KJ5, l_X3KJ7, m_X3KJ9, n_X3KJb)
                    [LclId] =
                        [$dRead_s3XAv
                         $dRead1_s3XAw
                         $dRead2_s3XAx
                         $dRead3_s3XAy
                         $dRead4_s3XAz
                         $dRead5_s3XAA
                         $dRead6_s3XAB
                         $dRead7_s3XAC
                         $dRead8_s3XAD
                         $dRead9_s3XAE
                         $dRead10_s3XAF
                         $dRead11_s3XAG
                         $dRead12_s3XAH
                         $dRead13_s3XAI] \r [eta_B2 eta_B1]
                            GHC.Read.$fRead(,,,,,,,,,,,,,)1
                                $dRead_s3XAv
                                $dRead1_s3XAw
                                $dRead2_s3XAx
                                $dRead3_s3XAy
                                $dRead4_s3XAz
                                $dRead5_s3XAA
                                $dRead6_s3XAB
                                $dRead7_s3XAC
                                $dRead8_s3XAD
                                $dRead9_s3XAE
                                $dRead10_s3XAF
                                $dRead11_s3XAG
                                $dRead12_s3XAH
                                $dRead13_s3XAI
                                eta_B2
                                eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s3XAJ
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XAK;

GHC.Read.$fRead(,,,,,,,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h i j k l m n.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l, GHC.Read.Read m, GHC.Read.Read n) =>
     GHC.Read.Read (a, b, c, d, e, f, g, h, i, j, k, l, m, n)
[GblId[DFunId],
 Arity=14,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>m] =
    [] \r [$dRead_s3XAL
           $dRead1_s3XAM
           $dRead2_s3XAN
           $dRead3_s3XAO
           $dRead4_s3XAP
           $dRead5_s3XAQ
           $dRead6_s3XAR
           $dRead7_s3XAS
           $dRead8_s3XAT
           $dRead9_s3XAU
           $dRead10_s3XAV
           $dRead11_s3XAW
           $dRead12_s3XAX
           $dRead13_s3XAY]
        let {
          sat_s3XB2 [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 [(a_X3KIM, b_X3KIO, c_X3KIQ, d_X3KIS, e_X3KIU, f_X3KIW, g_X3KIY,
                   h_X3KJ0, i_X3KJ2, j_X3KJ4, k_X3KJ6, l_X3KJ8, m_X3KJa, n_X3KJc)]
          [LclId] =
              [$dRead_s3XAL
               $dRead1_s3XAM
               $dRead2_s3XAN
               $dRead3_s3XAO
               $dRead4_s3XAP
               $dRead5_s3XAQ
               $dRead6_s3XAR
               $dRead7_s3XAS
               $dRead8_s3XAT
               $dRead9_s3XAU
               $dRead10_s3XAV
               $dRead11_s3XAW
               $dRead12_s3XAX
               $dRead13_s3XAY] \u []
                  GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadListPrec
                      $dRead_s3XAL
                      $dRead1_s3XAM
                      $dRead2_s3XAN
                      $dRead3_s3XAO
                      $dRead4_s3XAP
                      $dRead5_s3XAQ
                      $dRead6_s3XAR
                      $dRead7_s3XAS
                      $dRead8_s3XAT
                      $dRead9_s3XAU
                      $dRead10_s3XAV
                      $dRead11_s3XAW
                      $dRead12_s3XAX
                      $dRead13_s3XAY; } in
        let {
          sat_s3XB1 [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KIM, b_X3KIO, c_X3KIQ, d_X3KIS, e_X3KIU, f_X3KIW, g_X3KIY,
                  h_X3KJ0, i_X3KJ2, j_X3KJ4, k_X3KJ6, l_X3KJ8, m_X3KJa, n_X3KJc)
          [LclId] =
              [$dRead_s3XAL
               $dRead1_s3XAM
               $dRead2_s3XAN
               $dRead3_s3XAO
               $dRead4_s3XAP
               $dRead5_s3XAQ
               $dRead6_s3XAR
               $dRead7_s3XAS
               $dRead8_s3XAT
               $dRead9_s3XAU
               $dRead10_s3XAV
               $dRead11_s3XAW
               $dRead12_s3XAX
               $dRead13_s3XAY] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,,,,,,,,,)1
                      $dRead_s3XAL
                      $dRead1_s3XAM
                      $dRead2_s3XAN
                      $dRead3_s3XAO
                      $dRead4_s3XAP
                      $dRead5_s3XAQ
                      $dRead6_s3XAR
                      $dRead7_s3XAS
                      $dRead8_s3XAT
                      $dRead9_s3XAU
                      $dRead10_s3XAV
                      $dRead11_s3XAW
                      $dRead12_s3XAX
                      $dRead13_s3XAY
                      eta_B2
                      eta_B1; } in
        let {
          sat_s3XB0 [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS
                 [(a_X3KIM, b_X3KIO, c_X3KIQ, d_X3KIS, e_X3KIU, f_X3KIW, g_X3KIY,
                   h_X3KJ0, i_X3KJ2, j_X3KJ4, k_X3KJ6, l_X3KJ8, m_X3KJa, n_X3KJc)]
          [LclId] =
              [$dRead_s3XAL
               $dRead1_s3XAM
               $dRead2_s3XAN
               $dRead3_s3XAO
               $dRead4_s3XAP
               $dRead5_s3XAQ
               $dRead6_s3XAR
               $dRead7_s3XAS
               $dRead8_s3XAT
               $dRead9_s3XAU
               $dRead10_s3XAV
               $dRead11_s3XAW
               $dRead12_s3XAX
               $dRead13_s3XAY] \u []
                  GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadList
                      $dRead_s3XAL
                      $dRead1_s3XAM
                      $dRead2_s3XAN
                      $dRead3_s3XAO
                      $dRead4_s3XAP
                      $dRead5_s3XAQ
                      $dRead6_s3XAR
                      $dRead7_s3XAS
                      $dRead8_s3XAT
                      $dRead9_s3XAU
                      $dRead10_s3XAV
                      $dRead11_s3XAW
                      $dRead12_s3XAX
                      $dRead13_s3XAY; } in
        let {
          sat_s3XAZ [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS
                    (a_X3KIM, b_X3KIO, c_X3KIQ, d_X3KIS, e_X3KIU, f_X3KIW, g_X3KIY,
                     h_X3KJ0, i_X3KJ2, j_X3KJ4, k_X3KJ6, l_X3KJ8, m_X3KJa, n_X3KJc)
          [LclId] =
              [$dRead_s3XAL
               $dRead1_s3XAM
               $dRead2_s3XAN
               $dRead3_s3XAO
               $dRead4_s3XAP
               $dRead5_s3XAQ
               $dRead6_s3XAR
               $dRead7_s3XAS
               $dRead8_s3XAT
               $dRead9_s3XAU
               $dRead10_s3XAV
               $dRead11_s3XAW
               $dRead12_s3XAX
               $dRead13_s3XAY] \r [eta_B1]
                  GHC.Read.$fRead(,,,,,,,,,,,,,)_$creadsPrec
                      $dRead_s3XAL
                      $dRead1_s3XAM
                      $dRead2_s3XAN
                      $dRead3_s3XAO
                      $dRead4_s3XAP
                      $dRead5_s3XAQ
                      $dRead6_s3XAR
                      $dRead7_s3XAS
                      $dRead8_s3XAT
                      $dRead9_s3XAU
                      $dRead10_s3XAV
                      $dRead11_s3XAW
                      $dRead12_s3XAX
                      $dRead13_s3XAY
                      eta_B1;
        } in  GHC.Read.C:Read [sat_s3XAZ sat_s3XB0 sat_s3XB1 sat_s3XB2];

GHC.Read.$fRead(,,,,,,,,,,,,)_$creadListPrec
  :: forall a b c d e f g h i j k l m.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l, GHC.Read.Read m) =>
     Text.ParserCombinators.ReadPrec.ReadPrec
       [(a, b, c, d, e, f, g, h, i, j, k, l, m)]
[GblId,
 Arity=13,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XB3
           $dRead1_s3XB4
           $dRead2_s3XB5
           $dRead3_s3XB6
           $dRead4_s3XB7
           $dRead5_s3XB8
           $dRead6_s3XB9
           $dRead7_s3XBa
           $dRead8_s3XBb
           $dRead9_s3XBc
           $dRead10_s3XBd
           $dRead11_s3XBe
           $dRead12_s3XBf]
        let {
          sat_s3XBg [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KKG, b_X3KKI, c_X3KKK, d_X3KKM, e_X3KKO, f_X3KKQ, g_X3KKS,
                  h_X3KKU, i_X3KKW, j_X3KKY, k_X3KL0, l_X3KL2, m_X3KL4)
          [LclId] =
              [$dRead_s3XB3
               $dRead1_s3XB4
               $dRead2_s3XB5
               $dRead3_s3XB6
               $dRead4_s3XB7
               $dRead5_s3XB8
               $dRead6_s3XB9
               $dRead7_s3XBa
               $dRead8_s3XBb
               $dRead9_s3XBc
               $dRead10_s3XBd
               $dRead11_s3XBe
               $dRead12_s3XBf] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,,,,,,,,)1
                      $dRead_s3XB3
                      $dRead1_s3XB4
                      $dRead2_s3XB5
                      $dRead3_s3XB6
                      $dRead4_s3XB7
                      $dRead5_s3XB8
                      $dRead6_s3XB9
                      $dRead7_s3XBa
                      $dRead8_s3XBb
                      $dRead9_s3XBc
                      $dRead10_s3XBd
                      $dRead11_s3XBe
                      $dRead12_s3XBf
                      eta_B2
                      eta_B1;
        } in  GHC.Read.list sat_s3XBg;

GHC.Read.$fRead(,,,,,,,,,,,,)_$creadsPrec
  :: forall a b c d e f g h i j k l m.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l, GHC.Read.Read m) =>
     GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS
          (a, b, c, d, e, f, g, h, i, j, k, l, m)
[GblId,
 Arity=14,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XBh
           $dRead1_s3XBi
           $dRead2_s3XBj
           $dRead3_s3XBk
           $dRead4_s3XBl
           $dRead5_s3XBm
           $dRead6_s3XBn
           $dRead7_s3XBo
           $dRead8_s3XBp
           $dRead9_s3XBq
           $dRead10_s3XBr
           $dRead11_s3XBs
           $dRead12_s3XBt
           n_s3XBu]
        let {
          sat_s3XBv [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 (a_X3KKH, b_X3KKJ, c_X3KKL, d_X3KKN, e_X3KKP, f_X3KKR, g_X3KKT,
                  h_X3KKV, i_X3KKX, j_X3KKZ, k_X3KL1, l_X3KL3, m_X3KL5)
          [LclId] =
              [$dRead_s3XBh
               $dRead1_s3XBi
               $dRead2_s3XBj
               $dRead3_s3XBk
               $dRead4_s3XBl
               $dRead5_s3XBm
               $dRead6_s3XBn
               $dRead7_s3XBo
               $dRead8_s3XBp
               $dRead9_s3XBq
               $dRead10_s3XBr
               $dRead11_s3XBs
               $dRead12_s3XBt
               n_s3XBu] \u []
                  GHC.Read.$fRead(,,,,,,,,,,,,)1
                      $dRead_s3XBh
                      $dRead1_s3XBi
                      $dRead2_s3XBj
                      $dRead3_s3XBk
                      $dRead4_s3XBl
                      $dRead5_s3XBm
                      $dRead6_s3XBn
                      $dRead7_s3XBo
                      $dRead8_s3XBp
                      $dRead9_s3XBq
                      $dRead10_s3XBr
                      $dRead11_s3XBs
                      $dRead12_s3XBt
                      n_s3XBu
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XBv;

GHC.Read.$fRead(,,,,,,,,,,,,)_$creadList
  :: forall a b c d e f g h i j k l m.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l, GHC.Read.Read m) =>
     Text.ParserCombinators.ReadP.ReadS
       [(a, b, c, d, e, f, g, h, i, j, k, l, m)]
[GblId,
 Arity=13,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XBw
           $dRead1_s3XBx
           $dRead2_s3XBy
           $dRead3_s3XBz
           $dRead4_s3XBA
           $dRead5_s3XBB
           $dRead6_s3XBC
           $dRead7_s3XBD
           $dRead8_s3XBE
           $dRead9_s3XBF
           $dRead10_s3XBG
           $dRead11_s3XBH
           $dRead12_s3XBI]
        let {
          sat_s3XBK [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 [(a_X3KKI, b_X3KKK, c_X3KKM, d_X3KKO, e_X3KKQ, f_X3KKS, g_X3KKU,
                   h_X3KKW, i_X3KKY, j_X3KL0, k_X3KL2, l_X3KL4, m_X3KL6)]
          [LclId] =
              [$dRead_s3XBw
               $dRead1_s3XBx
               $dRead2_s3XBy
               $dRead3_s3XBz
               $dRead4_s3XBA
               $dRead5_s3XBB
               $dRead6_s3XBC
               $dRead7_s3XBD
               $dRead8_s3XBE
               $dRead9_s3XBF
               $dRead10_s3XBG
               $dRead11_s3XBH
               $dRead12_s3XBI] \u []
                  let {
                    sat_s3XBJ [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec
                           (a_X3KKI, b_X3KKK, c_X3KKM, d_X3KKO, e_X3KKQ, f_X3KKS, g_X3KKU,
                            h_X3KKW, i_X3KKY, j_X3KL0, k_X3KL2, l_X3KL4, m_X3KL6)
                    [LclId] =
                        [$dRead_s3XBw
                         $dRead1_s3XBx
                         $dRead2_s3XBy
                         $dRead3_s3XBz
                         $dRead4_s3XBA
                         $dRead5_s3XBB
                         $dRead6_s3XBC
                         $dRead7_s3XBD
                         $dRead8_s3XBE
                         $dRead9_s3XBF
                         $dRead10_s3XBG
                         $dRead11_s3XBH
                         $dRead12_s3XBI] \r [eta_B2 eta_B1]
                            GHC.Read.$fRead(,,,,,,,,,,,,)1
                                $dRead_s3XBw
                                $dRead1_s3XBx
                                $dRead2_s3XBy
                                $dRead3_s3XBz
                                $dRead4_s3XBA
                                $dRead5_s3XBB
                                $dRead6_s3XBC
                                $dRead7_s3XBD
                                $dRead8_s3XBE
                                $dRead9_s3XBF
                                $dRead10_s3XBG
                                $dRead11_s3XBH
                                $dRead12_s3XBI
                                eta_B2
                                eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s3XBJ
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XBK;

GHC.Read.$fRead(,,,,,,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h i j k l m.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l, GHC.Read.Read m) =>
     GHC.Read.Read (a, b, c, d, e, f, g, h, i, j, k, l, m)
[GblId[DFunId],
 Arity=13,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>m] =
    [] \r [$dRead_s3XBL
           $dRead1_s3XBM
           $dRead2_s3XBN
           $dRead3_s3XBO
           $dRead4_s3XBP
           $dRead5_s3XBQ
           $dRead6_s3XBR
           $dRead7_s3XBS
           $dRead8_s3XBT
           $dRead9_s3XBU
           $dRead10_s3XBV
           $dRead11_s3XBW
           $dRead12_s3XBX]
        let {
          sat_s3XC1 [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 [(a_X3KKJ, b_X3KKL, c_X3KKN, d_X3KKP, e_X3KKR, f_X3KKT, g_X3KKV,
                   h_X3KKX, i_X3KKZ, j_X3KL1, k_X3KL3, l_X3KL5, m_X3KL7)]
          [LclId] =
              [$dRead_s3XBL
               $dRead1_s3XBM
               $dRead2_s3XBN
               $dRead3_s3XBO
               $dRead4_s3XBP
               $dRead5_s3XBQ
               $dRead6_s3XBR
               $dRead7_s3XBS
               $dRead8_s3XBT
               $dRead9_s3XBU
               $dRead10_s3XBV
               $dRead11_s3XBW
               $dRead12_s3XBX] \u []
                  GHC.Read.$fRead(,,,,,,,,,,,,)_$creadListPrec
                      $dRead_s3XBL
                      $dRead1_s3XBM
                      $dRead2_s3XBN
                      $dRead3_s3XBO
                      $dRead4_s3XBP
                      $dRead5_s3XBQ
                      $dRead6_s3XBR
                      $dRead7_s3XBS
                      $dRead8_s3XBT
                      $dRead9_s3XBU
                      $dRead10_s3XBV
                      $dRead11_s3XBW
                      $dRead12_s3XBX; } in
        let {
          sat_s3XC0 [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KKJ, b_X3KKL, c_X3KKN, d_X3KKP, e_X3KKR, f_X3KKT, g_X3KKV,
                  h_X3KKX, i_X3KKZ, j_X3KL1, k_X3KL3, l_X3KL5, m_X3KL7)
          [LclId] =
              [$dRead_s3XBL
               $dRead1_s3XBM
               $dRead2_s3XBN
               $dRead3_s3XBO
               $dRead4_s3XBP
               $dRead5_s3XBQ
               $dRead6_s3XBR
               $dRead7_s3XBS
               $dRead8_s3XBT
               $dRead9_s3XBU
               $dRead10_s3XBV
               $dRead11_s3XBW
               $dRead12_s3XBX] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,,,,,,,,)1
                      $dRead_s3XBL
                      $dRead1_s3XBM
                      $dRead2_s3XBN
                      $dRead3_s3XBO
                      $dRead4_s3XBP
                      $dRead5_s3XBQ
                      $dRead6_s3XBR
                      $dRead7_s3XBS
                      $dRead8_s3XBT
                      $dRead9_s3XBU
                      $dRead10_s3XBV
                      $dRead11_s3XBW
                      $dRead12_s3XBX
                      eta_B2
                      eta_B1; } in
        let {
          sat_s3XBZ [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS
                 [(a_X3KKJ, b_X3KKL, c_X3KKN, d_X3KKP, e_X3KKR, f_X3KKT, g_X3KKV,
                   h_X3KKX, i_X3KKZ, j_X3KL1, k_X3KL3, l_X3KL5, m_X3KL7)]
          [LclId] =
              [$dRead_s3XBL
               $dRead1_s3XBM
               $dRead2_s3XBN
               $dRead3_s3XBO
               $dRead4_s3XBP
               $dRead5_s3XBQ
               $dRead6_s3XBR
               $dRead7_s3XBS
               $dRead8_s3XBT
               $dRead9_s3XBU
               $dRead10_s3XBV
               $dRead11_s3XBW
               $dRead12_s3XBX] \u []
                  GHC.Read.$fRead(,,,,,,,,,,,,)_$creadList
                      $dRead_s3XBL
                      $dRead1_s3XBM
                      $dRead2_s3XBN
                      $dRead3_s3XBO
                      $dRead4_s3XBP
                      $dRead5_s3XBQ
                      $dRead6_s3XBR
                      $dRead7_s3XBS
                      $dRead8_s3XBT
                      $dRead9_s3XBU
                      $dRead10_s3XBV
                      $dRead11_s3XBW
                      $dRead12_s3XBX; } in
        let {
          sat_s3XBY [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS
                    (a_X3KKJ, b_X3KKL, c_X3KKN, d_X3KKP, e_X3KKR, f_X3KKT, g_X3KKV,
                     h_X3KKX, i_X3KKZ, j_X3KL1, k_X3KL3, l_X3KL5, m_X3KL7)
          [LclId] =
              [$dRead_s3XBL
               $dRead1_s3XBM
               $dRead2_s3XBN
               $dRead3_s3XBO
               $dRead4_s3XBP
               $dRead5_s3XBQ
               $dRead6_s3XBR
               $dRead7_s3XBS
               $dRead8_s3XBT
               $dRead9_s3XBU
               $dRead10_s3XBV
               $dRead11_s3XBW
               $dRead12_s3XBX] \r [eta_B1]
                  GHC.Read.$fRead(,,,,,,,,,,,,)_$creadsPrec
                      $dRead_s3XBL
                      $dRead1_s3XBM
                      $dRead2_s3XBN
                      $dRead3_s3XBO
                      $dRead4_s3XBP
                      $dRead5_s3XBQ
                      $dRead6_s3XBR
                      $dRead7_s3XBS
                      $dRead8_s3XBT
                      $dRead9_s3XBU
                      $dRead10_s3XBV
                      $dRead11_s3XBW
                      $dRead12_s3XBX
                      eta_B1;
        } in  GHC.Read.C:Read [sat_s3XBY sat_s3XBZ sat_s3XC0 sat_s3XC1];

GHC.Read.$fRead(,,,,,,,,,,,)_$creadListPrec
  :: forall a b c d e f g h i j k l.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l) =>
     Text.ParserCombinators.ReadPrec.ReadPrec
       [(a, b, c, d, e, f, g, h, i, j, k, l)]
[GblId,
 Arity=12,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XC2
           $dRead1_s3XC3
           $dRead2_s3XC4
           $dRead3_s3XC5
           $dRead4_s3XC6
           $dRead5_s3XC7
           $dRead6_s3XC8
           $dRead7_s3XC9
           $dRead8_s3XCa
           $dRead9_s3XCb
           $dRead10_s3XCc
           $dRead11_s3XCd]
        let {
          sat_s3XCe [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KMy, b_X3KMA, c_X3KMC, d_X3KME, e_X3KMG, f_X3KMI, g_X3KMK,
                  h_X3KMM, i_X3KMO, j_X3KMQ, k_X3KMS, l_X3KMU)
          [LclId] =
              [$dRead_s3XC2
               $dRead1_s3XC3
               $dRead2_s3XC4
               $dRead3_s3XC5
               $dRead4_s3XC6
               $dRead5_s3XC7
               $dRead6_s3XC8
               $dRead7_s3XC9
               $dRead8_s3XCa
               $dRead9_s3XCb
               $dRead10_s3XCc
               $dRead11_s3XCd] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,,,,,,,)1
                      $dRead_s3XC2
                      $dRead1_s3XC3
                      $dRead2_s3XC4
                      $dRead3_s3XC5
                      $dRead4_s3XC6
                      $dRead5_s3XC7
                      $dRead6_s3XC8
                      $dRead7_s3XC9
                      $dRead8_s3XCa
                      $dRead9_s3XCb
                      $dRead10_s3XCc
                      $dRead11_s3XCd
                      eta_B2
                      eta_B1;
        } in  GHC.Read.list sat_s3XCe;

GHC.Read.$fRead(,,,,,,,,,,,)_$creadsPrec
  :: forall a b c d e f g h i j k l.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l) =>
     GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS
          (a, b, c, d, e, f, g, h, i, j, k, l)
[GblId,
 Arity=13,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XCf
           $dRead1_s3XCg
           $dRead2_s3XCh
           $dRead3_s3XCi
           $dRead4_s3XCj
           $dRead5_s3XCk
           $dRead6_s3XCl
           $dRead7_s3XCm
           $dRead8_s3XCn
           $dRead9_s3XCo
           $dRead10_s3XCp
           $dRead11_s3XCq
           n_s3XCr]
        let {
          sat_s3XCs [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 (a_X3KMz, b_X3KMB, c_X3KMD, d_X3KMF, e_X3KMH, f_X3KMJ, g_X3KML,
                  h_X3KMN, i_X3KMP, j_X3KMR, k_X3KMT, l_X3KMV)
          [LclId] =
              [$dRead_s3XCf
               $dRead1_s3XCg
               $dRead2_s3XCh
               $dRead3_s3XCi
               $dRead4_s3XCj
               $dRead5_s3XCk
               $dRead6_s3XCl
               $dRead7_s3XCm
               $dRead8_s3XCn
               $dRead9_s3XCo
               $dRead10_s3XCp
               $dRead11_s3XCq
               n_s3XCr] \u []
                  GHC.Read.$fRead(,,,,,,,,,,,)1
                      $dRead_s3XCf
                      $dRead1_s3XCg
                      $dRead2_s3XCh
                      $dRead3_s3XCi
                      $dRead4_s3XCj
                      $dRead5_s3XCk
                      $dRead6_s3XCl
                      $dRead7_s3XCm
                      $dRead8_s3XCn
                      $dRead9_s3XCo
                      $dRead10_s3XCp
                      $dRead11_s3XCq
                      n_s3XCr
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XCs;

GHC.Read.$fRead(,,,,,,,,,,,)_$creadList
  :: forall a b c d e f g h i j k l.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l) =>
     Text.ParserCombinators.ReadP.ReadS
       [(a, b, c, d, e, f, g, h, i, j, k, l)]
[GblId,
 Arity=12,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XCt
           $dRead1_s3XCu
           $dRead2_s3XCv
           $dRead3_s3XCw
           $dRead4_s3XCx
           $dRead5_s3XCy
           $dRead6_s3XCz
           $dRead7_s3XCA
           $dRead8_s3XCB
           $dRead9_s3XCC
           $dRead10_s3XCD
           $dRead11_s3XCE]
        let {
          sat_s3XCG [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 [(a_X3KMA, b_X3KMC, c_X3KME, d_X3KMG, e_X3KMI, f_X3KMK, g_X3KMM,
                   h_X3KMO, i_X3KMQ, j_X3KMS, k_X3KMU, l_X3KMW)]
          [LclId] =
              [$dRead_s3XCt
               $dRead1_s3XCu
               $dRead2_s3XCv
               $dRead3_s3XCw
               $dRead4_s3XCx
               $dRead5_s3XCy
               $dRead6_s3XCz
               $dRead7_s3XCA
               $dRead8_s3XCB
               $dRead9_s3XCC
               $dRead10_s3XCD
               $dRead11_s3XCE] \u []
                  let {
                    sat_s3XCF [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec
                           (a_X3KMA, b_X3KMC, c_X3KME, d_X3KMG, e_X3KMI, f_X3KMK, g_X3KMM,
                            h_X3KMO, i_X3KMQ, j_X3KMS, k_X3KMU, l_X3KMW)
                    [LclId] =
                        [$dRead_s3XCt
                         $dRead1_s3XCu
                         $dRead2_s3XCv
                         $dRead3_s3XCw
                         $dRead4_s3XCx
                         $dRead5_s3XCy
                         $dRead6_s3XCz
                         $dRead7_s3XCA
                         $dRead8_s3XCB
                         $dRead9_s3XCC
                         $dRead10_s3XCD
                         $dRead11_s3XCE] \r [eta_B2 eta_B1]
                            GHC.Read.$fRead(,,,,,,,,,,,)1
                                $dRead_s3XCt
                                $dRead1_s3XCu
                                $dRead2_s3XCv
                                $dRead3_s3XCw
                                $dRead4_s3XCx
                                $dRead5_s3XCy
                                $dRead6_s3XCz
                                $dRead7_s3XCA
                                $dRead8_s3XCB
                                $dRead9_s3XCC
                                $dRead10_s3XCD
                                $dRead11_s3XCE
                                eta_B2
                                eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s3XCF
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XCG;

GHC.Read.$fRead(,,,,,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h i j k l.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j, GHC.Read.Read k,
      GHC.Read.Read l) =>
     GHC.Read.Read (a, b, c, d, e, f, g, h, i, j, k, l)
[GblId[DFunId],
 Arity=12,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>m] =
    [] \r [$dRead_s3XCH
           $dRead1_s3XCI
           $dRead2_s3XCJ
           $dRead3_s3XCK
           $dRead4_s3XCL
           $dRead5_s3XCM
           $dRead6_s3XCN
           $dRead7_s3XCO
           $dRead8_s3XCP
           $dRead9_s3XCQ
           $dRead10_s3XCR
           $dRead11_s3XCS]
        let {
          sat_s3XCW [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 [(a_X3KMB, b_X3KMD, c_X3KMF, d_X3KMH, e_X3KMJ, f_X3KML, g_X3KMN,
                   h_X3KMP, i_X3KMR, j_X3KMT, k_X3KMV, l_X3KMX)]
          [LclId] =
              [$dRead_s3XCH
               $dRead1_s3XCI
               $dRead2_s3XCJ
               $dRead3_s3XCK
               $dRead4_s3XCL
               $dRead5_s3XCM
               $dRead6_s3XCN
               $dRead7_s3XCO
               $dRead8_s3XCP
               $dRead9_s3XCQ
               $dRead10_s3XCR
               $dRead11_s3XCS] \u []
                  GHC.Read.$fRead(,,,,,,,,,,,)_$creadListPrec
                      $dRead_s3XCH
                      $dRead1_s3XCI
                      $dRead2_s3XCJ
                      $dRead3_s3XCK
                      $dRead4_s3XCL
                      $dRead5_s3XCM
                      $dRead6_s3XCN
                      $dRead7_s3XCO
                      $dRead8_s3XCP
                      $dRead9_s3XCQ
                      $dRead10_s3XCR
                      $dRead11_s3XCS; } in
        let {
          sat_s3XCV [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KMB, b_X3KMD, c_X3KMF, d_X3KMH, e_X3KMJ, f_X3KML, g_X3KMN,
                  h_X3KMP, i_X3KMR, j_X3KMT, k_X3KMV, l_X3KMX)
          [LclId] =
              [$dRead_s3XCH
               $dRead1_s3XCI
               $dRead2_s3XCJ
               $dRead3_s3XCK
               $dRead4_s3XCL
               $dRead5_s3XCM
               $dRead6_s3XCN
               $dRead7_s3XCO
               $dRead8_s3XCP
               $dRead9_s3XCQ
               $dRead10_s3XCR
               $dRead11_s3XCS] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,,,,,,,)1
                      $dRead_s3XCH
                      $dRead1_s3XCI
                      $dRead2_s3XCJ
                      $dRead3_s3XCK
                      $dRead4_s3XCL
                      $dRead5_s3XCM
                      $dRead6_s3XCN
                      $dRead7_s3XCO
                      $dRead8_s3XCP
                      $dRead9_s3XCQ
                      $dRead10_s3XCR
                      $dRead11_s3XCS
                      eta_B2
                      eta_B1; } in
        let {
          sat_s3XCU [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS
                 [(a_X3KMB, b_X3KMD, c_X3KMF, d_X3KMH, e_X3KMJ, f_X3KML, g_X3KMN,
                   h_X3KMP, i_X3KMR, j_X3KMT, k_X3KMV, l_X3KMX)]
          [LclId] =
              [$dRead_s3XCH
               $dRead1_s3XCI
               $dRead2_s3XCJ
               $dRead3_s3XCK
               $dRead4_s3XCL
               $dRead5_s3XCM
               $dRead6_s3XCN
               $dRead7_s3XCO
               $dRead8_s3XCP
               $dRead9_s3XCQ
               $dRead10_s3XCR
               $dRead11_s3XCS] \u []
                  GHC.Read.$fRead(,,,,,,,,,,,)_$creadList
                      $dRead_s3XCH
                      $dRead1_s3XCI
                      $dRead2_s3XCJ
                      $dRead3_s3XCK
                      $dRead4_s3XCL
                      $dRead5_s3XCM
                      $dRead6_s3XCN
                      $dRead7_s3XCO
                      $dRead8_s3XCP
                      $dRead9_s3XCQ
                      $dRead10_s3XCR
                      $dRead11_s3XCS; } in
        let {
          sat_s3XCT [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS
                    (a_X3KMB, b_X3KMD, c_X3KMF, d_X3KMH, e_X3KMJ, f_X3KML, g_X3KMN,
                     h_X3KMP, i_X3KMR, j_X3KMT, k_X3KMV, l_X3KMX)
          [LclId] =
              [$dRead_s3XCH
               $dRead1_s3XCI
               $dRead2_s3XCJ
               $dRead3_s3XCK
               $dRead4_s3XCL
               $dRead5_s3XCM
               $dRead6_s3XCN
               $dRead7_s3XCO
               $dRead8_s3XCP
               $dRead9_s3XCQ
               $dRead10_s3XCR
               $dRead11_s3XCS] \r [eta_B1]
                  GHC.Read.$fRead(,,,,,,,,,,,)_$creadsPrec
                      $dRead_s3XCH
                      $dRead1_s3XCI
                      $dRead2_s3XCJ
                      $dRead3_s3XCK
                      $dRead4_s3XCL
                      $dRead5_s3XCM
                      $dRead6_s3XCN
                      $dRead7_s3XCO
                      $dRead8_s3XCP
                      $dRead9_s3XCQ
                      $dRead10_s3XCR
                      $dRead11_s3XCS
                      eta_B1;
        } in  GHC.Read.C:Read [sat_s3XCT sat_s3XCU sat_s3XCV sat_s3XCW];

GHC.Read.$fRead(,,,,,,,,,,)_$creadListPrec
  :: forall a b c d e f g h i j k.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j,
      GHC.Read.Read k) =>
     Text.ParserCombinators.ReadPrec.ReadPrec
       [(a, b, c, d, e, f, g, h, i, j, k)]
[GblId,
 Arity=11,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XCX
           $dRead1_s3XCY
           $dRead2_s3XCZ
           $dRead3_s3XD0
           $dRead4_s3XD1
           $dRead5_s3XD2
           $dRead6_s3XD3
           $dRead7_s3XD4
           $dRead8_s3XD5
           $dRead9_s3XD6
           $dRead10_s3XD7]
        let {
          sat_s3XD8 [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KOd, b_X3KOf, c_X3KOh, d_X3KOj, e_X3KOl, f_X3KOn, g_X3KOp,
                  h_X3KOr, i_X3KOt, j_X3KOv, k_X3KOx)
          [LclId] =
              [$dRead_s3XCX
               $dRead1_s3XCY
               $dRead2_s3XCZ
               $dRead3_s3XD0
               $dRead4_s3XD1
               $dRead5_s3XD2
               $dRead6_s3XD3
               $dRead7_s3XD4
               $dRead8_s3XD5
               $dRead9_s3XD6
               $dRead10_s3XD7] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,,,,,,)1
                      $dRead_s3XCX
                      $dRead1_s3XCY
                      $dRead2_s3XCZ
                      $dRead3_s3XD0
                      $dRead4_s3XD1
                      $dRead5_s3XD2
                      $dRead6_s3XD3
                      $dRead7_s3XD4
                      $dRead8_s3XD5
                      $dRead9_s3XD6
                      $dRead10_s3XD7
                      eta_B2
                      eta_B1;
        } in  GHC.Read.list sat_s3XD8;

GHC.Read.$fRead(,,,,,,,,,,)_$creadsPrec
  :: forall a b c d e f g h i j k.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j,
      GHC.Read.Read k) =>
     GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS
          (a, b, c, d, e, f, g, h, i, j, k)
[GblId,
 Arity=12,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XD9
           $dRead1_s3XDa
           $dRead2_s3XDb
           $dRead3_s3XDc
           $dRead4_s3XDd
           $dRead5_s3XDe
           $dRead6_s3XDf
           $dRead7_s3XDg
           $dRead8_s3XDh
           $dRead9_s3XDi
           $dRead10_s3XDj
           n_s3XDk]
        let {
          sat_s3XDl [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 (a_X3KOe, b_X3KOg, c_X3KOi, d_X3KOk, e_X3KOm, f_X3KOo, g_X3KOq,
                  h_X3KOs, i_X3KOu, j_X3KOw, k_X3KOy)
          [LclId] =
              [$dRead_s3XD9
               $dRead1_s3XDa
               $dRead2_s3XDb
               $dRead3_s3XDc
               $dRead4_s3XDd
               $dRead5_s3XDe
               $dRead6_s3XDf
               $dRead7_s3XDg
               $dRead8_s3XDh
               $dRead9_s3XDi
               $dRead10_s3XDj
               n_s3XDk] \u []
                  GHC.Read.$fRead(,,,,,,,,,,)1
                      $dRead_s3XD9
                      $dRead1_s3XDa
                      $dRead2_s3XDb
                      $dRead3_s3XDc
                      $dRead4_s3XDd
                      $dRead5_s3XDe
                      $dRead6_s3XDf
                      $dRead7_s3XDg
                      $dRead8_s3XDh
                      $dRead9_s3XDi
                      $dRead10_s3XDj
                      n_s3XDk
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XDl;

GHC.Read.$fRead(,,,,,,,,,,)_$creadList
  :: forall a b c d e f g h i j k.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j,
      GHC.Read.Read k) =>
     Text.ParserCombinators.ReadP.ReadS
       [(a, b, c, d, e, f, g, h, i, j, k)]
[GblId,
 Arity=11,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XDm
           $dRead1_s3XDn
           $dRead2_s3XDo
           $dRead3_s3XDp
           $dRead4_s3XDq
           $dRead5_s3XDr
           $dRead6_s3XDs
           $dRead7_s3XDt
           $dRead8_s3XDu
           $dRead9_s3XDv
           $dRead10_s3XDw]
        let {
          sat_s3XDy [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 [(a_X3KOf, b_X3KOh, c_X3KOj, d_X3KOl, e_X3KOn, f_X3KOp, g_X3KOr,
                   h_X3KOt, i_X3KOv, j_X3KOx, k_X3KOz)]
          [LclId] =
              [$dRead_s3XDm
               $dRead1_s3XDn
               $dRead2_s3XDo
               $dRead3_s3XDp
               $dRead4_s3XDq
               $dRead5_s3XDr
               $dRead6_s3XDs
               $dRead7_s3XDt
               $dRead8_s3XDu
               $dRead9_s3XDv
               $dRead10_s3XDw] \u []
                  let {
                    sat_s3XDx [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec
                           (a_X3KOf, b_X3KOh, c_X3KOj, d_X3KOl, e_X3KOn, f_X3KOp, g_X3KOr,
                            h_X3KOt, i_X3KOv, j_X3KOx, k_X3KOz)
                    [LclId] =
                        [$dRead_s3XDm
                         $dRead1_s3XDn
                         $dRead2_s3XDo
                         $dRead3_s3XDp
                         $dRead4_s3XDq
                         $dRead5_s3XDr
                         $dRead6_s3XDs
                         $dRead7_s3XDt
                         $dRead8_s3XDu
                         $dRead9_s3XDv
                         $dRead10_s3XDw] \r [eta_B2 eta_B1]
                            GHC.Read.$fRead(,,,,,,,,,,)1
                                $dRead_s3XDm
                                $dRead1_s3XDn
                                $dRead2_s3XDo
                                $dRead3_s3XDp
                                $dRead4_s3XDq
                                $dRead5_s3XDr
                                $dRead6_s3XDs
                                $dRead7_s3XDt
                                $dRead8_s3XDu
                                $dRead9_s3XDv
                                $dRead10_s3XDw
                                eta_B2
                                eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s3XDx
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XDy;

GHC.Read.$fRead(,,,,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h i j k.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j,
      GHC.Read.Read k) =>
     GHC.Read.Read (a, b, c, d, e, f, g, h, i, j, k)
[GblId[DFunId],
 Arity=11,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>m] =
    [] \r [$dRead_s3XDz
           $dRead1_s3XDA
           $dRead2_s3XDB
           $dRead3_s3XDC
           $dRead4_s3XDD
           $dRead5_s3XDE
           $dRead6_s3XDF
           $dRead7_s3XDG
           $dRead8_s3XDH
           $dRead9_s3XDI
           $dRead10_s3XDJ]
        let {
          sat_s3XDN [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 [(a_X3KOg, b_X3KOi, c_X3KOk, d_X3KOm, e_X3KOo, f_X3KOq, g_X3KOs,
                   h_X3KOu, i_X3KOw, j_X3KOy, k_X3KOA)]
          [LclId] =
              [$dRead_s3XDz
               $dRead1_s3XDA
               $dRead2_s3XDB
               $dRead3_s3XDC
               $dRead4_s3XDD
               $dRead5_s3XDE
               $dRead6_s3XDF
               $dRead7_s3XDG
               $dRead8_s3XDH
               $dRead9_s3XDI
               $dRead10_s3XDJ] \u []
                  GHC.Read.$fRead(,,,,,,,,,,)_$creadListPrec
                      $dRead_s3XDz
                      $dRead1_s3XDA
                      $dRead2_s3XDB
                      $dRead3_s3XDC
                      $dRead4_s3XDD
                      $dRead5_s3XDE
                      $dRead6_s3XDF
                      $dRead7_s3XDG
                      $dRead8_s3XDH
                      $dRead9_s3XDI
                      $dRead10_s3XDJ; } in
        let {
          sat_s3XDM [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KOg, b_X3KOi, c_X3KOk, d_X3KOm, e_X3KOo, f_X3KOq, g_X3KOs,
                  h_X3KOu, i_X3KOw, j_X3KOy, k_X3KOA)
          [LclId] =
              [$dRead_s3XDz
               $dRead1_s3XDA
               $dRead2_s3XDB
               $dRead3_s3XDC
               $dRead4_s3XDD
               $dRead5_s3XDE
               $dRead6_s3XDF
               $dRead7_s3XDG
               $dRead8_s3XDH
               $dRead9_s3XDI
               $dRead10_s3XDJ] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,,,,,,)1
                      $dRead_s3XDz
                      $dRead1_s3XDA
                      $dRead2_s3XDB
                      $dRead3_s3XDC
                      $dRead4_s3XDD
                      $dRead5_s3XDE
                      $dRead6_s3XDF
                      $dRead7_s3XDG
                      $dRead8_s3XDH
                      $dRead9_s3XDI
                      $dRead10_s3XDJ
                      eta_B2
                      eta_B1; } in
        let {
          sat_s3XDL [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS
                 [(a_X3KOg, b_X3KOi, c_X3KOk, d_X3KOm, e_X3KOo, f_X3KOq, g_X3KOs,
                   h_X3KOu, i_X3KOw, j_X3KOy, k_X3KOA)]
          [LclId] =
              [$dRead_s3XDz
               $dRead1_s3XDA
               $dRead2_s3XDB
               $dRead3_s3XDC
               $dRead4_s3XDD
               $dRead5_s3XDE
               $dRead6_s3XDF
               $dRead7_s3XDG
               $dRead8_s3XDH
               $dRead9_s3XDI
               $dRead10_s3XDJ] \u []
                  GHC.Read.$fRead(,,,,,,,,,,)_$creadList
                      $dRead_s3XDz
                      $dRead1_s3XDA
                      $dRead2_s3XDB
                      $dRead3_s3XDC
                      $dRead4_s3XDD
                      $dRead5_s3XDE
                      $dRead6_s3XDF
                      $dRead7_s3XDG
                      $dRead8_s3XDH
                      $dRead9_s3XDI
                      $dRead10_s3XDJ; } in
        let {
          sat_s3XDK [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS
                    (a_X3KOg, b_X3KOi, c_X3KOk, d_X3KOm, e_X3KOo, f_X3KOq, g_X3KOs,
                     h_X3KOu, i_X3KOw, j_X3KOy, k_X3KOA)
          [LclId] =
              [$dRead_s3XDz
               $dRead1_s3XDA
               $dRead2_s3XDB
               $dRead3_s3XDC
               $dRead4_s3XDD
               $dRead5_s3XDE
               $dRead6_s3XDF
               $dRead7_s3XDG
               $dRead8_s3XDH
               $dRead9_s3XDI
               $dRead10_s3XDJ] \r [eta_B1]
                  GHC.Read.$fRead(,,,,,,,,,,)_$creadsPrec
                      $dRead_s3XDz
                      $dRead1_s3XDA
                      $dRead2_s3XDB
                      $dRead3_s3XDC
                      $dRead4_s3XDD
                      $dRead5_s3XDE
                      $dRead6_s3XDF
                      $dRead7_s3XDG
                      $dRead8_s3XDH
                      $dRead9_s3XDI
                      $dRead10_s3XDJ
                      eta_B1;
        } in  GHC.Read.C:Read [sat_s3XDK sat_s3XDL sat_s3XDM sat_s3XDN];

GHC.Read.$fRead(,,,,,,,,,)_$creadListPrec
  :: forall a b c d e f g h i j.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j) =>
     Text.ParserCombinators.ReadPrec.ReadPrec
       [(a, b, c, d, e, f, g, h, i, j)]
[GblId,
 Arity=10,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XDO
           $dRead1_s3XDP
           $dRead2_s3XDQ
           $dRead3_s3XDR
           $dRead4_s3XDS
           $dRead5_s3XDT
           $dRead6_s3XDU
           $dRead7_s3XDV
           $dRead8_s3XDW
           $dRead9_s3XDX]
        let {
          sat_s3XDY [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KPV, b_X3KPX, c_X3KPZ, d_X3KQ1, e_X3KQ3, f_X3KQ5, g_X3KQ7,
                  h_X3KQ9, i_X3KQb, j_X3KQd)
          [LclId] =
              [$dRead_s3XDO
               $dRead1_s3XDP
               $dRead2_s3XDQ
               $dRead3_s3XDR
               $dRead4_s3XDS
               $dRead5_s3XDT
               $dRead6_s3XDU
               $dRead7_s3XDV
               $dRead8_s3XDW
               $dRead9_s3XDX] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,,,,,)1
                      $dRead_s3XDO
                      $dRead1_s3XDP
                      $dRead2_s3XDQ
                      $dRead3_s3XDR
                      $dRead4_s3XDS
                      $dRead5_s3XDT
                      $dRead6_s3XDU
                      $dRead7_s3XDV
                      $dRead8_s3XDW
                      $dRead9_s3XDX
                      eta_B2
                      eta_B1;
        } in  GHC.Read.list sat_s3XDY;

GHC.Read.$fRead(,,,,,,,,,)_$creadsPrec
  :: forall a b c d e f g h i j.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j) =>
     GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS
          (a, b, c, d, e, f, g, h, i, j)
[GblId,
 Arity=11,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XDZ
           $dRead1_s3XE0
           $dRead2_s3XE1
           $dRead3_s3XE2
           $dRead4_s3XE3
           $dRead5_s3XE4
           $dRead6_s3XE5
           $dRead7_s3XE6
           $dRead8_s3XE7
           $dRead9_s3XE8
           n_s3XE9]
        let {
          sat_s3XEa [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 (a_X3KPW, b_X3KPY, c_X3KQ0, d_X3KQ2, e_X3KQ4, f_X3KQ6, g_X3KQ8,
                  h_X3KQa, i_X3KQc, j_X3KQe)
          [LclId] =
              [$dRead_s3XDZ
               $dRead1_s3XE0
               $dRead2_s3XE1
               $dRead3_s3XE2
               $dRead4_s3XE3
               $dRead5_s3XE4
               $dRead6_s3XE5
               $dRead7_s3XE6
               $dRead8_s3XE7
               $dRead9_s3XE8
               n_s3XE9] \u []
                  GHC.Read.$fRead(,,,,,,,,,)1
                      $dRead_s3XDZ
                      $dRead1_s3XE0
                      $dRead2_s3XE1
                      $dRead3_s3XE2
                      $dRead4_s3XE3
                      $dRead5_s3XE4
                      $dRead6_s3XE5
                      $dRead7_s3XE6
                      $dRead8_s3XE7
                      $dRead9_s3XE8
                      n_s3XE9
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XEa;

GHC.Read.$fRead(,,,,,,,,,)_$creadList
  :: forall a b c d e f g h i j.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j) =>
     Text.ParserCombinators.ReadP.ReadS [(a, b, c, d, e, f, g, h, i, j)]
[GblId,
 Arity=10,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XEb
           $dRead1_s3XEc
           $dRead2_s3XEd
           $dRead3_s3XEe
           $dRead4_s3XEf
           $dRead5_s3XEg
           $dRead6_s3XEh
           $dRead7_s3XEi
           $dRead8_s3XEj
           $dRead9_s3XEk]
        let {
          sat_s3XEm [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 [(a_X3KPX, b_X3KPZ, c_X3KQ1, d_X3KQ3, e_X3KQ5, f_X3KQ7, g_X3KQ9,
                   h_X3KQb, i_X3KQd, j_X3KQf)]
          [LclId] =
              [$dRead_s3XEb
               $dRead1_s3XEc
               $dRead2_s3XEd
               $dRead3_s3XEe
               $dRead4_s3XEf
               $dRead5_s3XEg
               $dRead6_s3XEh
               $dRead7_s3XEi
               $dRead8_s3XEj
               $dRead9_s3XEk] \u []
                  let {
                    sat_s3XEl [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec
                           (a_X3KPX, b_X3KPZ, c_X3KQ1, d_X3KQ3, e_X3KQ5, f_X3KQ7, g_X3KQ9,
                            h_X3KQb, i_X3KQd, j_X3KQf)
                    [LclId] =
                        [$dRead_s3XEb
                         $dRead1_s3XEc
                         $dRead2_s3XEd
                         $dRead3_s3XEe
                         $dRead4_s3XEf
                         $dRead5_s3XEg
                         $dRead6_s3XEh
                         $dRead7_s3XEi
                         $dRead8_s3XEj
                         $dRead9_s3XEk] \r [eta_B2 eta_B1]
                            GHC.Read.$fRead(,,,,,,,,,)1
                                $dRead_s3XEb
                                $dRead1_s3XEc
                                $dRead2_s3XEd
                                $dRead3_s3XEe
                                $dRead4_s3XEf
                                $dRead5_s3XEg
                                $dRead6_s3XEh
                                $dRead7_s3XEi
                                $dRead8_s3XEj
                                $dRead9_s3XEk
                                eta_B2
                                eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s3XEl
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XEm;

GHC.Read.$fRead(,,,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h i j.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i, GHC.Read.Read j) =>
     GHC.Read.Read (a, b, c, d, e, f, g, h, i, j)
[GblId[DFunId],
 Arity=10,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>m] =
    [] \r [$dRead_s3XEn
           $dRead1_s3XEo
           $dRead2_s3XEp
           $dRead3_s3XEq
           $dRead4_s3XEr
           $dRead5_s3XEs
           $dRead6_s3XEt
           $dRead7_s3XEu
           $dRead8_s3XEv
           $dRead9_s3XEw]
        let {
          sat_s3XEA [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 [(a_X3KPY, b_X3KQ0, c_X3KQ2, d_X3KQ4, e_X3KQ6, f_X3KQ8, g_X3KQa,
                   h_X3KQc, i_X3KQe, j_X3KQg)]
          [LclId] =
              [$dRead_s3XEn
               $dRead1_s3XEo
               $dRead2_s3XEp
               $dRead3_s3XEq
               $dRead4_s3XEr
               $dRead5_s3XEs
               $dRead6_s3XEt
               $dRead7_s3XEu
               $dRead8_s3XEv
               $dRead9_s3XEw] \u []
                  GHC.Read.$fRead(,,,,,,,,,)_$creadListPrec
                      $dRead_s3XEn
                      $dRead1_s3XEo
                      $dRead2_s3XEp
                      $dRead3_s3XEq
                      $dRead4_s3XEr
                      $dRead5_s3XEs
                      $dRead6_s3XEt
                      $dRead7_s3XEu
                      $dRead8_s3XEv
                      $dRead9_s3XEw; } in
        let {
          sat_s3XEz [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KPY, b_X3KQ0, c_X3KQ2, d_X3KQ4, e_X3KQ6, f_X3KQ8, g_X3KQa,
                  h_X3KQc, i_X3KQe, j_X3KQg)
          [LclId] =
              [$dRead_s3XEn
               $dRead1_s3XEo
               $dRead2_s3XEp
               $dRead3_s3XEq
               $dRead4_s3XEr
               $dRead5_s3XEs
               $dRead6_s3XEt
               $dRead7_s3XEu
               $dRead8_s3XEv
               $dRead9_s3XEw] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,,,,,)1
                      $dRead_s3XEn
                      $dRead1_s3XEo
                      $dRead2_s3XEp
                      $dRead3_s3XEq
                      $dRead4_s3XEr
                      $dRead5_s3XEs
                      $dRead6_s3XEt
                      $dRead7_s3XEu
                      $dRead8_s3XEv
                      $dRead9_s3XEw
                      eta_B2
                      eta_B1; } in
        let {
          sat_s3XEy [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS
                 [(a_X3KPY, b_X3KQ0, c_X3KQ2, d_X3KQ4, e_X3KQ6, f_X3KQ8, g_X3KQa,
                   h_X3KQc, i_X3KQe, j_X3KQg)]
          [LclId] =
              [$dRead_s3XEn
               $dRead1_s3XEo
               $dRead2_s3XEp
               $dRead3_s3XEq
               $dRead4_s3XEr
               $dRead5_s3XEs
               $dRead6_s3XEt
               $dRead7_s3XEu
               $dRead8_s3XEv
               $dRead9_s3XEw] \u []
                  GHC.Read.$fRead(,,,,,,,,,)_$creadList
                      $dRead_s3XEn
                      $dRead1_s3XEo
                      $dRead2_s3XEp
                      $dRead3_s3XEq
                      $dRead4_s3XEr
                      $dRead5_s3XEs
                      $dRead6_s3XEt
                      $dRead7_s3XEu
                      $dRead8_s3XEv
                      $dRead9_s3XEw; } in
        let {
          sat_s3XEx [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS
                    (a_X3KPY, b_X3KQ0, c_X3KQ2, d_X3KQ4, e_X3KQ6, f_X3KQ8, g_X3KQa,
                     h_X3KQc, i_X3KQe, j_X3KQg)
          [LclId] =
              [$dRead_s3XEn
               $dRead1_s3XEo
               $dRead2_s3XEp
               $dRead3_s3XEq
               $dRead4_s3XEr
               $dRead5_s3XEs
               $dRead6_s3XEt
               $dRead7_s3XEu
               $dRead8_s3XEv
               $dRead9_s3XEw] \r [eta_B1]
                  GHC.Read.$fRead(,,,,,,,,,)_$creadsPrec
                      $dRead_s3XEn
                      $dRead1_s3XEo
                      $dRead2_s3XEp
                      $dRead3_s3XEq
                      $dRead4_s3XEr
                      $dRead5_s3XEs
                      $dRead6_s3XEt
                      $dRead7_s3XEu
                      $dRead8_s3XEv
                      $dRead9_s3XEw
                      eta_B1;
        } in  GHC.Read.C:Read [sat_s3XEx sat_s3XEy sat_s3XEz sat_s3XEA];

GHC.Read.$fRead(,,,,,,,,)_$creadListPrec
  :: forall a b c d e f g h i.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i) =>
     Text.ParserCombinators.ReadPrec.ReadPrec
       [(a, b, c, d, e, f, g, h, i)]
[GblId,
 Arity=9,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XEB
           $dRead1_s3XEC
           $dRead2_s3XED
           $dRead3_s3XEE
           $dRead4_s3XEF
           $dRead5_s3XEG
           $dRead6_s3XEH
           $dRead7_s3XEI
           $dRead8_s3XEJ]
        let {
          sat_s3XEK [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KRq, b_X3KRs, c_X3KRu, d_X3KRw, e_X3KRy, f_X3KRA, g_X3KRC,
                  h_X3KRE, i_X3KRG)
          [LclId] =
              [$dRead_s3XEB
               $dRead1_s3XEC
               $dRead2_s3XED
               $dRead3_s3XEE
               $dRead4_s3XEF
               $dRead5_s3XEG
               $dRead6_s3XEH
               $dRead7_s3XEI
               $dRead8_s3XEJ] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,,,,)1
                      $dRead_s3XEB
                      $dRead1_s3XEC
                      $dRead2_s3XED
                      $dRead3_s3XEE
                      $dRead4_s3XEF
                      $dRead5_s3XEG
                      $dRead6_s3XEH
                      $dRead7_s3XEI
                      $dRead8_s3XEJ
                      eta_B2
                      eta_B1;
        } in  GHC.Read.list sat_s3XEK;

GHC.Read.$fRead(,,,,,,,,)_$creadsPrec
  :: forall a b c d e f g h i.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i) =>
     GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS (a, b, c, d, e, f, g, h, i)
[GblId,
 Arity=10,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XEL
           $dRead1_s3XEM
           $dRead2_s3XEN
           $dRead3_s3XEO
           $dRead4_s3XEP
           $dRead5_s3XEQ
           $dRead6_s3XER
           $dRead7_s3XES
           $dRead8_s3XET
           n_s3XEU]
        let {
          sat_s3XEV [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 (a_X3KRr, b_X3KRt, c_X3KRv, d_X3KRx, e_X3KRz, f_X3KRB, g_X3KRD,
                  h_X3KRF, i_X3KRH)
          [LclId] =
              [$dRead_s3XEL
               $dRead1_s3XEM
               $dRead2_s3XEN
               $dRead3_s3XEO
               $dRead4_s3XEP
               $dRead5_s3XEQ
               $dRead6_s3XER
               $dRead7_s3XES
               $dRead8_s3XET
               n_s3XEU] \u []
                  GHC.Read.$fRead(,,,,,,,,)1
                      $dRead_s3XEL
                      $dRead1_s3XEM
                      $dRead2_s3XEN
                      $dRead3_s3XEO
                      $dRead4_s3XEP
                      $dRead5_s3XEQ
                      $dRead6_s3XER
                      $dRead7_s3XES
                      $dRead8_s3XET
                      n_s3XEU
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XEV;

GHC.Read.$fRead(,,,,,,,,)_$creadList
  :: forall a b c d e f g h i.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i) =>
     Text.ParserCombinators.ReadP.ReadS [(a, b, c, d, e, f, g, h, i)]
[GblId,
 Arity=9,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XEW
           $dRead1_s3XEX
           $dRead2_s3XEY
           $dRead3_s3XEZ
           $dRead4_s3XF0
           $dRead5_s3XF1
           $dRead6_s3XF2
           $dRead7_s3XF3
           $dRead8_s3XF4]
        let {
          sat_s3XF6 [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 [(a_X3KRs, b_X3KRu, c_X3KRw, d_X3KRy, e_X3KRA, f_X3KRC, g_X3KRE,
                   h_X3KRG, i_X3KRI)]
          [LclId] =
              [$dRead_s3XEW
               $dRead1_s3XEX
               $dRead2_s3XEY
               $dRead3_s3XEZ
               $dRead4_s3XF0
               $dRead5_s3XF1
               $dRead6_s3XF2
               $dRead7_s3XF3
               $dRead8_s3XF4] \u []
                  let {
                    sat_s3XF5 [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec
                           (a_X3KRs, b_X3KRu, c_X3KRw, d_X3KRy, e_X3KRA, f_X3KRC, g_X3KRE,
                            h_X3KRG, i_X3KRI)
                    [LclId] =
                        [$dRead_s3XEW
                         $dRead1_s3XEX
                         $dRead2_s3XEY
                         $dRead3_s3XEZ
                         $dRead4_s3XF0
                         $dRead5_s3XF1
                         $dRead6_s3XF2
                         $dRead7_s3XF3
                         $dRead8_s3XF4] \r [eta_B2 eta_B1]
                            GHC.Read.$fRead(,,,,,,,,)1
                                $dRead_s3XEW
                                $dRead1_s3XEX
                                $dRead2_s3XEY
                                $dRead3_s3XEZ
                                $dRead4_s3XF0
                                $dRead5_s3XF1
                                $dRead6_s3XF2
                                $dRead7_s3XF3
                                $dRead8_s3XF4
                                eta_B2
                                eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s3XF5
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XF6;

GHC.Read.$fRead(,,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h i.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h, GHC.Read.Read i) =>
     GHC.Read.Read (a, b, c, d, e, f, g, h, i)
[GblId[DFunId],
 Arity=9,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>m] =
    [] \r [$dRead_s3XF7
           $dRead1_s3XF8
           $dRead2_s3XF9
           $dRead3_s3XFa
           $dRead4_s3XFb
           $dRead5_s3XFc
           $dRead6_s3XFd
           $dRead7_s3XFe
           $dRead8_s3XFf]
        let {
          sat_s3XFj [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 [(a_X3KRt, b_X3KRv, c_X3KRx, d_X3KRz, e_X3KRB, f_X3KRD, g_X3KRF,
                   h_X3KRH, i_X3KRJ)]
          [LclId] =
              [$dRead_s3XF7
               $dRead1_s3XF8
               $dRead2_s3XF9
               $dRead3_s3XFa
               $dRead4_s3XFb
               $dRead5_s3XFc
               $dRead6_s3XFd
               $dRead7_s3XFe
               $dRead8_s3XFf] \u []
                  GHC.Read.$fRead(,,,,,,,,)_$creadListPrec
                      $dRead_s3XF7
                      $dRead1_s3XF8
                      $dRead2_s3XF9
                      $dRead3_s3XFa
                      $dRead4_s3XFb
                      $dRead5_s3XFc
                      $dRead6_s3XFd
                      $dRead7_s3XFe
                      $dRead8_s3XFf; } in
        let {
          sat_s3XFi [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KRt, b_X3KRv, c_X3KRx, d_X3KRz, e_X3KRB, f_X3KRD, g_X3KRF,
                  h_X3KRH, i_X3KRJ)
          [LclId] =
              [$dRead_s3XF7
               $dRead1_s3XF8
               $dRead2_s3XF9
               $dRead3_s3XFa
               $dRead4_s3XFb
               $dRead5_s3XFc
               $dRead6_s3XFd
               $dRead7_s3XFe
               $dRead8_s3XFf] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,,,,)1
                      $dRead_s3XF7
                      $dRead1_s3XF8
                      $dRead2_s3XF9
                      $dRead3_s3XFa
                      $dRead4_s3XFb
                      $dRead5_s3XFc
                      $dRead6_s3XFd
                      $dRead7_s3XFe
                      $dRead8_s3XFf
                      eta_B2
                      eta_B1; } in
        let {
          sat_s3XFh [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS
                 [(a_X3KRt, b_X3KRv, c_X3KRx, d_X3KRz, e_X3KRB, f_X3KRD, g_X3KRF,
                   h_X3KRH, i_X3KRJ)]
          [LclId] =
              [$dRead_s3XF7
               $dRead1_s3XF8
               $dRead2_s3XF9
               $dRead3_s3XFa
               $dRead4_s3XFb
               $dRead5_s3XFc
               $dRead6_s3XFd
               $dRead7_s3XFe
               $dRead8_s3XFf] \u []
                  GHC.Read.$fRead(,,,,,,,,)_$creadList
                      $dRead_s3XF7
                      $dRead1_s3XF8
                      $dRead2_s3XF9
                      $dRead3_s3XFa
                      $dRead4_s3XFb
                      $dRead5_s3XFc
                      $dRead6_s3XFd
                      $dRead7_s3XFe
                      $dRead8_s3XFf; } in
        let {
          sat_s3XFg [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS
                    (a_X3KRt, b_X3KRv, c_X3KRx, d_X3KRz, e_X3KRB, f_X3KRD, g_X3KRF,
                     h_X3KRH, i_X3KRJ)
          [LclId] =
              [$dRead_s3XF7
               $dRead1_s3XF8
               $dRead2_s3XF9
               $dRead3_s3XFa
               $dRead4_s3XFb
               $dRead5_s3XFc
               $dRead6_s3XFd
               $dRead7_s3XFe
               $dRead8_s3XFf] \r [eta_B1]
                  GHC.Read.$fRead(,,,,,,,,)_$creadsPrec
                      $dRead_s3XF7
                      $dRead1_s3XF8
                      $dRead2_s3XF9
                      $dRead3_s3XFa
                      $dRead4_s3XFb
                      $dRead5_s3XFc
                      $dRead6_s3XFd
                      $dRead7_s3XFe
                      $dRead8_s3XFf
                      eta_B1;
        } in  GHC.Read.C:Read [sat_s3XFg sat_s3XFh sat_s3XFi sat_s3XFj];

GHC.Read.$fRead(,,,,,,,)_$creadListPrec
  :: forall a b c d e f g h.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h) =>
     Text.ParserCombinators.ReadPrec.ReadPrec [(a, b, c, d, e, f, g, h)]
[GblId,
 Arity=8,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XFk
           $dRead1_s3XFl
           $dRead2_s3XFm
           $dRead3_s3XFn
           $dRead4_s3XFo
           $dRead5_s3XFp
           $dRead6_s3XFq
           $dRead7_s3XFr]
        let {
          sat_s3XFs [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KSQ, b_X3KSS, c_X3KSU, d_X3KSW, e_X3KSY, f_X3KT0, g_X3KT2,
                  h_X3KT4)
          [LclId] =
              [$dRead_s3XFk
               $dRead1_s3XFl
               $dRead2_s3XFm
               $dRead3_s3XFn
               $dRead4_s3XFo
               $dRead5_s3XFp
               $dRead6_s3XFq
               $dRead7_s3XFr] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,,,)1
                      $dRead_s3XFk
                      $dRead1_s3XFl
                      $dRead2_s3XFm
                      $dRead3_s3XFn
                      $dRead4_s3XFo
                      $dRead5_s3XFp
                      $dRead6_s3XFq
                      $dRead7_s3XFr
                      eta_B2
                      eta_B1;
        } in  GHC.Read.list sat_s3XFs;

GHC.Read.$fRead(,,,,,,,)_$creadsPrec
  :: forall a b c d e f g h.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h) =>
     GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS (a, b, c, d, e, f, g, h)
[GblId,
 Arity=9,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XFt
           $dRead1_s3XFu
           $dRead2_s3XFv
           $dRead3_s3XFw
           $dRead4_s3XFx
           $dRead5_s3XFy
           $dRead6_s3XFz
           $dRead7_s3XFA
           n_s3XFB]
        let {
          sat_s3XFC [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 (a_X3KSR, b_X3KST, c_X3KSV, d_X3KSX, e_X3KSZ, f_X3KT1, g_X3KT3,
                  h_X3KT5)
          [LclId] =
              [$dRead_s3XFt
               $dRead1_s3XFu
               $dRead2_s3XFv
               $dRead3_s3XFw
               $dRead4_s3XFx
               $dRead5_s3XFy
               $dRead6_s3XFz
               $dRead7_s3XFA
               n_s3XFB] \u []
                  GHC.Read.$fRead(,,,,,,,)1
                      $dRead_s3XFt
                      $dRead1_s3XFu
                      $dRead2_s3XFv
                      $dRead3_s3XFw
                      $dRead4_s3XFx
                      $dRead5_s3XFy
                      $dRead6_s3XFz
                      $dRead7_s3XFA
                      n_s3XFB
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XFC;

GHC.Read.$fRead(,,,,,,,)_$creadList
  :: forall a b c d e f g h.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h) =>
     Text.ParserCombinators.ReadP.ReadS [(a, b, c, d, e, f, g, h)]
[GblId,
 Arity=8,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XFD
           $dRead1_s3XFE
           $dRead2_s3XFF
           $dRead3_s3XFG
           $dRead4_s3XFH
           $dRead5_s3XFI
           $dRead6_s3XFJ
           $dRead7_s3XFK]
        let {
          sat_s3XFM [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 [(a_X3KSS, b_X3KSU, c_X3KSW, d_X3KSY, e_X3KT0, f_X3KT2, g_X3KT4,
                   h_X3KT6)]
          [LclId] =
              [$dRead_s3XFD
               $dRead1_s3XFE
               $dRead2_s3XFF
               $dRead3_s3XFG
               $dRead4_s3XFH
               $dRead5_s3XFI
               $dRead6_s3XFJ
               $dRead7_s3XFK] \u []
                  let {
                    sat_s3XFL [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec
                           (a_X3KSS, b_X3KSU, c_X3KSW, d_X3KSY, e_X3KT0, f_X3KT2, g_X3KT4,
                            h_X3KT6)
                    [LclId] =
                        [$dRead_s3XFD
                         $dRead1_s3XFE
                         $dRead2_s3XFF
                         $dRead3_s3XFG
                         $dRead4_s3XFH
                         $dRead5_s3XFI
                         $dRead6_s3XFJ
                         $dRead7_s3XFK] \r [eta_B2 eta_B1]
                            GHC.Read.$fRead(,,,,,,,)1
                                $dRead_s3XFD
                                $dRead1_s3XFE
                                $dRead2_s3XFF
                                $dRead3_s3XFG
                                $dRead4_s3XFH
                                $dRead5_s3XFI
                                $dRead6_s3XFJ
                                $dRead7_s3XFK
                                eta_B2
                                eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s3XFL
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XFM;

GHC.Read.$fRead(,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f, GHC.Read.Read g,
      GHC.Read.Read h) =>
     GHC.Read.Read (a, b, c, d, e, f, g, h)
[GblId[DFunId],
 Arity=8,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>m] =
    [] \r [$dRead_s3XFN
           $dRead1_s3XFO
           $dRead2_s3XFP
           $dRead3_s3XFQ
           $dRead4_s3XFR
           $dRead5_s3XFS
           $dRead6_s3XFT
           $dRead7_s3XFU]
        let {
          sat_s3XFY [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 [(a_X3KST, b_X3KSV, c_X3KSX, d_X3KSZ, e_X3KT1, f_X3KT3, g_X3KT5,
                   h_X3KT7)]
          [LclId] =
              [$dRead_s3XFN
               $dRead1_s3XFO
               $dRead2_s3XFP
               $dRead3_s3XFQ
               $dRead4_s3XFR
               $dRead5_s3XFS
               $dRead6_s3XFT
               $dRead7_s3XFU] \u []
                  GHC.Read.$fRead(,,,,,,,)_$creadListPrec
                      $dRead_s3XFN
                      $dRead1_s3XFO
                      $dRead2_s3XFP
                      $dRead3_s3XFQ
                      $dRead4_s3XFR
                      $dRead5_s3XFS
                      $dRead6_s3XFT
                      $dRead7_s3XFU; } in
        let {
          sat_s3XFX [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KST, b_X3KSV, c_X3KSX, d_X3KSZ, e_X3KT1, f_X3KT3, g_X3KT5,
                  h_X3KT7)
          [LclId] =
              [$dRead_s3XFN
               $dRead1_s3XFO
               $dRead2_s3XFP
               $dRead3_s3XFQ
               $dRead4_s3XFR
               $dRead5_s3XFS
               $dRead6_s3XFT
               $dRead7_s3XFU] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,,,)1
                      $dRead_s3XFN
                      $dRead1_s3XFO
                      $dRead2_s3XFP
                      $dRead3_s3XFQ
                      $dRead4_s3XFR
                      $dRead5_s3XFS
                      $dRead6_s3XFT
                      $dRead7_s3XFU
                      eta_B2
                      eta_B1; } in
        let {
          sat_s3XFW [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS
                 [(a_X3KST, b_X3KSV, c_X3KSX, d_X3KSZ, e_X3KT1, f_X3KT3, g_X3KT5,
                   h_X3KT7)]
          [LclId] =
              [$dRead_s3XFN
               $dRead1_s3XFO
               $dRead2_s3XFP
               $dRead3_s3XFQ
               $dRead4_s3XFR
               $dRead5_s3XFS
               $dRead6_s3XFT
               $dRead7_s3XFU] \u []
                  GHC.Read.$fRead(,,,,,,,)_$creadList
                      $dRead_s3XFN
                      $dRead1_s3XFO
                      $dRead2_s3XFP
                      $dRead3_s3XFQ
                      $dRead4_s3XFR
                      $dRead5_s3XFS
                      $dRead6_s3XFT
                      $dRead7_s3XFU; } in
        let {
          sat_s3XFV [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS
                    (a_X3KST, b_X3KSV, c_X3KSX, d_X3KSZ, e_X3KT1, f_X3KT3, g_X3KT5,
                     h_X3KT7)
          [LclId] =
              [$dRead_s3XFN
               $dRead1_s3XFO
               $dRead2_s3XFP
               $dRead3_s3XFQ
               $dRead4_s3XFR
               $dRead5_s3XFS
               $dRead6_s3XFT
               $dRead7_s3XFU] \r [eta_B1]
                  GHC.Read.$fRead(,,,,,,,)_$creadsPrec
                      $dRead_s3XFN
                      $dRead1_s3XFO
                      $dRead2_s3XFP
                      $dRead3_s3XFQ
                      $dRead4_s3XFR
                      $dRead5_s3XFS
                      $dRead6_s3XFT
                      $dRead7_s3XFU
                      eta_B1;
        } in  GHC.Read.C:Read [sat_s3XFV sat_s3XFW sat_s3XFX sat_s3XFY];

GHC.Read.$fRead(,,,,,,)_$creadListPrec
  :: forall a b c d e f g.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f,
      GHC.Read.Read g) =>
     Text.ParserCombinators.ReadPrec.ReadPrec [(a, b, c, d, e, f, g)]
[GblId,
 Arity=7,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XFZ
           $dRead1_s3XG0
           $dRead2_s3XG1
           $dRead3_s3XG2
           $dRead4_s3XG3
           $dRead5_s3XG4
           $dRead6_s3XG5]
        let {
          sat_s3XG6 [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KTO, b_X3KTQ, c_X3KTS, d_X3KTU, e_X3KTW, f_X3KTY, g_X3KU0)
          [LclId] =
              [$dRead_s3XFZ
               $dRead1_s3XG0
               $dRead2_s3XG1
               $dRead3_s3XG2
               $dRead4_s3XG3
               $dRead5_s3XG4
               $dRead6_s3XG5] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,,)1
                      $dRead_s3XFZ
                      $dRead1_s3XG0
                      $dRead2_s3XG1
                      $dRead3_s3XG2
                      $dRead4_s3XG3
                      $dRead5_s3XG4
                      $dRead6_s3XG5
                      eta_B2
                      eta_B1;
        } in  GHC.Read.list sat_s3XG6;

GHC.Read.$fRead(,,,,,,)_$creadsPrec
  :: forall a b c d e f g.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f,
      GHC.Read.Read g) =>
     GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS (a, b, c, d, e, f, g)
[GblId,
 Arity=8,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XG7
           $dRead1_s3XG8
           $dRead2_s3XG9
           $dRead3_s3XGa
           $dRead4_s3XGb
           $dRead5_s3XGc
           $dRead6_s3XGd
           n_s3XGe]
        let {
          sat_s3XGf [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 (a_X3KTP, b_X3KTR, c_X3KTT, d_X3KTV, e_X3KTX, f_X3KTZ, g_X3KU1)
          [LclId] =
              [$dRead_s3XG7
               $dRead1_s3XG8
               $dRead2_s3XG9
               $dRead3_s3XGa
               $dRead4_s3XGb
               $dRead5_s3XGc
               $dRead6_s3XGd
               n_s3XGe] \u []
                  GHC.Read.$fRead(,,,,,,)1
                      $dRead_s3XG7
                      $dRead1_s3XG8
                      $dRead2_s3XG9
                      $dRead3_s3XGa
                      $dRead4_s3XGb
                      $dRead5_s3XGc
                      $dRead6_s3XGd
                      n_s3XGe
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XGf;

GHC.Read.$fRead(,,,,,,)_$creadList
  :: forall a b c d e f g.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f,
      GHC.Read.Read g) =>
     Text.ParserCombinators.ReadP.ReadS [(a, b, c, d, e, f, g)]
[GblId,
 Arity=7,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XGg
           $dRead1_s3XGh
           $dRead2_s3XGi
           $dRead3_s3XGj
           $dRead4_s3XGk
           $dRead5_s3XGl
           $dRead6_s3XGm]
        let {
          sat_s3XGo [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 [(a_X3KTQ, b_X3KTS, c_X3KTU, d_X3KTW, e_X3KTY, f_X3KU0, g_X3KU2)]
          [LclId] =
              [$dRead_s3XGg
               $dRead1_s3XGh
               $dRead2_s3XGi
               $dRead3_s3XGj
               $dRead4_s3XGk
               $dRead5_s3XGl
               $dRead6_s3XGm] \u []
                  let {
                    sat_s3XGn [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec
                           (a_X3KTQ, b_X3KTS, c_X3KTU, d_X3KTW, e_X3KTY, f_X3KU0, g_X3KU2)
                    [LclId] =
                        [$dRead_s3XGg
                         $dRead1_s3XGh
                         $dRead2_s3XGi
                         $dRead3_s3XGj
                         $dRead4_s3XGk
                         $dRead5_s3XGl
                         $dRead6_s3XGm] \r [eta_B2 eta_B1]
                            GHC.Read.$fRead(,,,,,,)1
                                $dRead_s3XGg
                                $dRead1_s3XGh
                                $dRead2_s3XGi
                                $dRead3_s3XGj
                                $dRead4_s3XGk
                                $dRead5_s3XGl
                                $dRead6_s3XGm
                                eta_B2
                                eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s3XGn
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XGo;

GHC.Read.$fRead(,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f,
      GHC.Read.Read g) =>
     GHC.Read.Read (a, b, c, d, e, f, g)
[GblId[DFunId],
 Arity=7,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>m] =
    [] \r [$dRead_s3XGp
           $dRead1_s3XGq
           $dRead2_s3XGr
           $dRead3_s3XGs
           $dRead4_s3XGt
           $dRead5_s3XGu
           $dRead6_s3XGv]
        let {
          sat_s3XGz [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 [(a_X3KTR, b_X3KTT, c_X3KTV, d_X3KTX, e_X3KTZ, f_X3KU1, g_X3KU3)]
          [LclId] =
              [$dRead_s3XGp
               $dRead1_s3XGq
               $dRead2_s3XGr
               $dRead3_s3XGs
               $dRead4_s3XGt
               $dRead5_s3XGu
               $dRead6_s3XGv] \u []
                  GHC.Read.$fRead(,,,,,,)_$creadListPrec
                      $dRead_s3XGp
                      $dRead1_s3XGq
                      $dRead2_s3XGr
                      $dRead3_s3XGs
                      $dRead4_s3XGt
                      $dRead5_s3XGu
                      $dRead6_s3XGv; } in
        let {
          sat_s3XGy [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KTR, b_X3KTT, c_X3KTV, d_X3KTX, e_X3KTZ, f_X3KU1, g_X3KU3)
          [LclId] =
              [$dRead_s3XGp
               $dRead1_s3XGq
               $dRead2_s3XGr
               $dRead3_s3XGs
               $dRead4_s3XGt
               $dRead5_s3XGu
               $dRead6_s3XGv] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,,)1
                      $dRead_s3XGp
                      $dRead1_s3XGq
                      $dRead2_s3XGr
                      $dRead3_s3XGs
                      $dRead4_s3XGt
                      $dRead5_s3XGu
                      $dRead6_s3XGv
                      eta_B2
                      eta_B1; } in
        let {
          sat_s3XGx [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS
                 [(a_X3KTR, b_X3KTT, c_X3KTV, d_X3KTX, e_X3KTZ, f_X3KU1, g_X3KU3)]
          [LclId] =
              [$dRead_s3XGp
               $dRead1_s3XGq
               $dRead2_s3XGr
               $dRead3_s3XGs
               $dRead4_s3XGt
               $dRead5_s3XGu
               $dRead6_s3XGv] \u []
                  GHC.Read.$fRead(,,,,,,)_$creadList
                      $dRead_s3XGp
                      $dRead1_s3XGq
                      $dRead2_s3XGr
                      $dRead3_s3XGs
                      $dRead4_s3XGt
                      $dRead5_s3XGu
                      $dRead6_s3XGv; } in
        let {
          sat_s3XGw [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS
                    (a_X3KTR, b_X3KTT, c_X3KTV, d_X3KTX, e_X3KTZ, f_X3KU1, g_X3KU3)
          [LclId] =
              [$dRead_s3XGp
               $dRead1_s3XGq
               $dRead2_s3XGr
               $dRead3_s3XGs
               $dRead4_s3XGt
               $dRead5_s3XGu
               $dRead6_s3XGv] \r [eta_B1]
                  GHC.Read.$fRead(,,,,,,)_$creadsPrec
                      $dRead_s3XGp
                      $dRead1_s3XGq
                      $dRead2_s3XGr
                      $dRead3_s3XGs
                      $dRead4_s3XGt
                      $dRead5_s3XGu
                      $dRead6_s3XGv
                      eta_B1;
        } in  GHC.Read.C:Read [sat_s3XGw sat_s3XGx sat_s3XGy sat_s3XGz];

GHC.Read.$fRead(,,,,,)_$creadListPrec
  :: forall a b c d e f.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f) =>
     Text.ParserCombinators.ReadPrec.ReadPrec [(a, b, c, d, e, f)]
[GblId,
 Arity=6,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XGA
           $dRead1_s3XGB
           $dRead2_s3XGC
           $dRead3_s3XGD
           $dRead4_s3XGE
           $dRead5_s3XGF]
        let {
          sat_s3XGG [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KVc, b_X3KVe, c_X3KVg, d_X3KVi, e_X3KVk, f_X3KVm)
          [LclId] =
              [$dRead_s3XGA
               $dRead1_s3XGB
               $dRead2_s3XGC
               $dRead3_s3XGD
               $dRead4_s3XGE
               $dRead5_s3XGF] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,)1
                      $dRead_s3XGA
                      $dRead1_s3XGB
                      $dRead2_s3XGC
                      $dRead3_s3XGD
                      $dRead4_s3XGE
                      $dRead5_s3XGF
                      eta_B2
                      eta_B1;
        } in  GHC.Read.list sat_s3XGG;

GHC.Read.$fRead(,,,,,)_$creadsPrec
  :: forall a b c d e f.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f) =>
     GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS (a, b, c, d, e, f)
[GblId,
 Arity=7,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XGH
           $dRead1_s3XGI
           $dRead2_s3XGJ
           $dRead3_s3XGK
           $dRead4_s3XGL
           $dRead5_s3XGM
           n_s3XGN]
        let {
          sat_s3XGO [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 (a_X3KVd, b_X3KVf, c_X3KVh, d_X3KVj, e_X3KVl, f_X3KVn)
          [LclId] =
              [$dRead_s3XGH
               $dRead1_s3XGI
               $dRead2_s3XGJ
               $dRead3_s3XGK
               $dRead4_s3XGL
               $dRead5_s3XGM
               n_s3XGN] \u []
                  GHC.Read.$fRead(,,,,,)1
                      $dRead_s3XGH
                      $dRead1_s3XGI
                      $dRead2_s3XGJ
                      $dRead3_s3XGK
                      $dRead4_s3XGL
                      $dRead5_s3XGM
                      n_s3XGN
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XGO;

GHC.Read.$fRead(,,,,,)_$creadList
  :: forall a b c d e f.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f) =>
     Text.ParserCombinators.ReadP.ReadS [(a, b, c, d, e, f)]
[GblId,
 Arity=6,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XGP
           $dRead1_s3XGQ
           $dRead2_s3XGR
           $dRead3_s3XGS
           $dRead4_s3XGT
           $dRead5_s3XGU]
        let {
          sat_s3XGW [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 [(a_X3KVe, b_X3KVg, c_X3KVi, d_X3KVk, e_X3KVm, f_X3KVo)]
          [LclId] =
              [$dRead_s3XGP
               $dRead1_s3XGQ
               $dRead2_s3XGR
               $dRead3_s3XGS
               $dRead4_s3XGT
               $dRead5_s3XGU] \u []
                  let {
                    sat_s3XGV [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec
                           (a_X3KVe, b_X3KVg, c_X3KVi, d_X3KVk, e_X3KVm, f_X3KVo)
                    [LclId] =
                        [$dRead_s3XGP
                         $dRead1_s3XGQ
                         $dRead2_s3XGR
                         $dRead3_s3XGS
                         $dRead4_s3XGT
                         $dRead5_s3XGU] \r [eta_B2 eta_B1]
                            GHC.Read.$fRead(,,,,,)1
                                $dRead_s3XGP
                                $dRead1_s3XGQ
                                $dRead2_s3XGR
                                $dRead3_s3XGS
                                $dRead4_s3XGT
                                $dRead5_s3XGU
                                eta_B2
                                eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s3XGV
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XGW;

GHC.Read.$fRead(,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e, GHC.Read.Read f) =>
     GHC.Read.Read (a, b, c, d, e, f)
[GblId[DFunId],
 Arity=6,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>m] =
    [] \r [$dRead_s3XGX
           $dRead1_s3XGY
           $dRead2_s3XGZ
           $dRead3_s3XH0
           $dRead4_s3XH1
           $dRead5_s3XH2]
        let {
          sat_s3XH6 [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 [(a_X3KVf, b_X3KVh, c_X3KVj, d_X3KVl, e_X3KVn, f_X3KVp)]
          [LclId] =
              [$dRead_s3XGX
               $dRead1_s3XGY
               $dRead2_s3XGZ
               $dRead3_s3XH0
               $dRead4_s3XH1
               $dRead5_s3XH2] \u []
                  GHC.Read.$fRead(,,,,,)_$creadListPrec
                      $dRead_s3XGX
                      $dRead1_s3XGY
                      $dRead2_s3XGZ
                      $dRead3_s3XH0
                      $dRead4_s3XH1
                      $dRead5_s3XH2; } in
        let {
          sat_s3XH5 [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KVf, b_X3KVh, c_X3KVj, d_X3KVl, e_X3KVn, f_X3KVp)
          [LclId] =
              [$dRead_s3XGX
               $dRead1_s3XGY
               $dRead2_s3XGZ
               $dRead3_s3XH0
               $dRead4_s3XH1
               $dRead5_s3XH2] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,,)1
                      $dRead_s3XGX
                      $dRead1_s3XGY
                      $dRead2_s3XGZ
                      $dRead3_s3XH0
                      $dRead4_s3XH1
                      $dRead5_s3XH2
                      eta_B2
                      eta_B1; } in
        let {
          sat_s3XH4 [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS
                 [(a_X3KVf, b_X3KVh, c_X3KVj, d_X3KVl, e_X3KVn, f_X3KVp)]
          [LclId] =
              [$dRead_s3XGX
               $dRead1_s3XGY
               $dRead2_s3XGZ
               $dRead3_s3XH0
               $dRead4_s3XH1
               $dRead5_s3XH2] \u []
                  GHC.Read.$fRead(,,,,,)_$creadList
                      $dRead_s3XGX
                      $dRead1_s3XGY
                      $dRead2_s3XGZ
                      $dRead3_s3XH0
                      $dRead4_s3XH1
                      $dRead5_s3XH2; } in
        let {
          sat_s3XH3 [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS
                    (a_X3KVf, b_X3KVh, c_X3KVj, d_X3KVl, e_X3KVn, f_X3KVp)
          [LclId] =
              [$dRead_s3XGX
               $dRead1_s3XGY
               $dRead2_s3XGZ
               $dRead3_s3XH0
               $dRead4_s3XH1
               $dRead5_s3XH2] \r [eta_B1]
                  GHC.Read.$fRead(,,,,,)_$creadsPrec
                      $dRead_s3XGX
                      $dRead1_s3XGY
                      $dRead2_s3XGZ
                      $dRead3_s3XH0
                      $dRead4_s3XH1
                      $dRead5_s3XH2
                      eta_B1;
        } in  GHC.Read.C:Read [sat_s3XH3 sat_s3XH4 sat_s3XH5 sat_s3XH6];

GHC.Read.$fRead(,,,,)_$creadListPrec
  :: forall a b c d e.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e) =>
     Text.ParserCombinators.ReadPrec.ReadPrec [(a, b, c, d, e)]
[GblId,
 Arity=5,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XH7
           $dRead1_s3XH8
           $dRead2_s3XH9
           $dRead3_s3XHa
           $dRead4_s3XHb]
        let {
          sat_s3XHc [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KWn, b_X3KWp, c_X3KWr, d_X3KWt, e_X3KWv)
          [LclId] =
              [$dRead_s3XH7
               $dRead1_s3XH8
               $dRead2_s3XH9
               $dRead3_s3XHa
               $dRead4_s3XHb] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,)1
                      $dRead_s3XH7
                      $dRead1_s3XH8
                      $dRead2_s3XH9
                      $dRead3_s3XHa
                      $dRead4_s3XHb
                      eta_B2
                      eta_B1;
        } in  GHC.Read.list sat_s3XHc;

GHC.Read.$fRead(,,,,)_$creadsPrec
  :: forall a b c d e.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e) =>
     GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS (a, b, c, d, e)
[GblId,
 Arity=6,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XHd
           $dRead1_s3XHe
           $dRead2_s3XHf
           $dRead3_s3XHg
           $dRead4_s3XHh
           n_s3XHi]
        let {
          sat_s3XHj [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 (a_X3KWo, b_X3KWq, c_X3KWs, d_X3KWu, e_X3KWw)
          [LclId] =
              [$dRead_s3XHd
               $dRead1_s3XHe
               $dRead2_s3XHf
               $dRead3_s3XHg
               $dRead4_s3XHh
               n_s3XHi] \u []
                  GHC.Read.$fRead(,,,,)1
                      $dRead_s3XHd
                      $dRead1_s3XHe
                      $dRead2_s3XHf
                      $dRead3_s3XHg
                      $dRead4_s3XHh
                      n_s3XHi
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XHj;

GHC.Read.$fRead(,,,,)_$creadList
  :: forall a b c d e.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e) =>
     Text.ParserCombinators.ReadP.ReadS [(a, b, c, d, e)]
[GblId,
 Arity=5,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XHk
           $dRead1_s3XHl
           $dRead2_s3XHm
           $dRead3_s3XHn
           $dRead4_s3XHo]
        let {
          sat_s3XHq [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 [(a_X3KWp, b_X3KWr, c_X3KWt, d_X3KWv, e_X3KWx)]
          [LclId] =
              [$dRead_s3XHk
               $dRead1_s3XHl
               $dRead2_s3XHm
               $dRead3_s3XHn
               $dRead4_s3XHo] \u []
                  let {
                    sat_s3XHp [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec
                           (a_X3KWp, b_X3KWr, c_X3KWt, d_X3KWv, e_X3KWx)
                    [LclId] =
                        [$dRead_s3XHk
                         $dRead1_s3XHl
                         $dRead2_s3XHm
                         $dRead3_s3XHn
                         $dRead4_s3XHo] \r [eta_B2 eta_B1]
                            GHC.Read.$fRead(,,,,)1
                                $dRead_s3XHk
                                $dRead1_s3XHl
                                $dRead2_s3XHm
                                $dRead3_s3XHn
                                $dRead4_s3XHo
                                eta_B2
                                eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s3XHp
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XHq;

GHC.Read.$fRead(,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d, GHC.Read.Read e) =>
     GHC.Read.Read (a, b, c, d, e)
[GblId[DFunId],
 Arity=5,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>m] =
    [] \r [$dRead_s3XHr
           $dRead1_s3XHs
           $dRead2_s3XHt
           $dRead3_s3XHu
           $dRead4_s3XHv]
        let {
          sat_s3XHz [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 [(a_X3KWq, b_X3KWs, c_X3KWu, d_X3KWw, e_X3KWy)]
          [LclId] =
              [$dRead_s3XHr
               $dRead1_s3XHs
               $dRead2_s3XHt
               $dRead3_s3XHu
               $dRead4_s3XHv] \u []
                  GHC.Read.$fRead(,,,,)_$creadListPrec
                      $dRead_s3XHr
                      $dRead1_s3XHs
                      $dRead2_s3XHt
                      $dRead3_s3XHu
                      $dRead4_s3XHv; } in
        let {
          sat_s3XHy [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KWq, b_X3KWs, c_X3KWu, d_X3KWw, e_X3KWy)
          [LclId] =
              [$dRead_s3XHr
               $dRead1_s3XHs
               $dRead2_s3XHt
               $dRead3_s3XHu
               $dRead4_s3XHv] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,,,)1
                      $dRead_s3XHr
                      $dRead1_s3XHs
                      $dRead2_s3XHt
                      $dRead3_s3XHu
                      $dRead4_s3XHv
                      eta_B2
                      eta_B1; } in
        let {
          sat_s3XHx [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS
                 [(a_X3KWq, b_X3KWs, c_X3KWu, d_X3KWw, e_X3KWy)]
          [LclId] =
              [$dRead_s3XHr
               $dRead1_s3XHs
               $dRead2_s3XHt
               $dRead3_s3XHu
               $dRead4_s3XHv] \u []
                  GHC.Read.$fRead(,,,,)_$creadList
                      $dRead_s3XHr
                      $dRead1_s3XHs
                      $dRead2_s3XHt
                      $dRead3_s3XHu
                      $dRead4_s3XHv; } in
        let {
          sat_s3XHw [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS
                    (a_X3KWq, b_X3KWs, c_X3KWu, d_X3KWw, e_X3KWy)
          [LclId] =
              [$dRead_s3XHr
               $dRead1_s3XHs
               $dRead2_s3XHt
               $dRead3_s3XHu
               $dRead4_s3XHv] \r [eta_B1]
                  GHC.Read.$fRead(,,,,)_$creadsPrec
                      $dRead_s3XHr
                      $dRead1_s3XHs
                      $dRead2_s3XHt
                      $dRead3_s3XHu
                      $dRead4_s3XHv
                      eta_B1;
        } in  GHC.Read.C:Read [sat_s3XHw sat_s3XHx sat_s3XHy sat_s3XHz];

GHC.Read.$fRead(,,,)_$creadListPrec
  :: forall a b c d.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d) =>
     Text.ParserCombinators.ReadPrec.ReadPrec [(a, b, c, d)]
[GblId,
 Arity=4,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XHA $dRead1_s3XHB $dRead2_s3XHC $dRead3_s3XHD]
        let {
          sat_s3XHE [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KXt, b_X3KXv, c_X3KXx, d_X3KXz)
          [LclId] =
              [$dRead_s3XHA $dRead1_s3XHB $dRead2_s3XHC $dRead3_s3XHD] \r [eta_B2
                                                                           eta_B1]
                  GHC.Read.$fRead(,,,)1
                      $dRead_s3XHA
                      $dRead1_s3XHB
                      $dRead2_s3XHC
                      $dRead3_s3XHD
                      eta_B2
                      eta_B1;
        } in  GHC.Read.list sat_s3XHE;

GHC.Read.$fRead(,,,)_$creadsPrec
  :: forall a b c d.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d) =>
     GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS (a, b, c, d)
[GblId,
 Arity=5,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XHF
           $dRead1_s3XHG
           $dRead2_s3XHH
           $dRead3_s3XHI
           n_s3XHJ]
        let {
          sat_s3XHK [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 (a_X3KXu, b_X3KXw, c_X3KXy, d_X3KXA)
          [LclId] =
              [$dRead_s3XHF
               $dRead1_s3XHG
               $dRead2_s3XHH
               $dRead3_s3XHI
               n_s3XHJ] \u []
                  GHC.Read.$fRead(,,,)1
                      $dRead_s3XHF
                      $dRead1_s3XHG
                      $dRead2_s3XHH
                      $dRead3_s3XHI
                      n_s3XHJ
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XHK;

GHC.Read.$fRead(,,,)_$creadList
  :: forall a b c d.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d) =>
     Text.ParserCombinators.ReadP.ReadS [(a, b, c, d)]
[GblId,
 Arity=4,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XHL $dRead1_s3XHM $dRead2_s3XHN $dRead3_s3XHO]
        let {
          sat_s3XHQ [Occ=Once]
            :: Text.ParserCombinators.ReadP.P
                 [(a_X3KXv, b_X3KXx, c_X3KXz, d_X3KXB)]
          [LclId] =
              [$dRead_s3XHL $dRead1_s3XHM $dRead2_s3XHN $dRead3_s3XHO] \u []
                  let {
                    sat_s3XHP [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec
                           (a_X3KXv, b_X3KXx, c_X3KXz, d_X3KXB)
                    [LclId] =
                        [$dRead_s3XHL $dRead1_s3XHM $dRead2_s3XHN $dRead3_s3XHO] \r [eta_B2
                                                                                     eta_B1]
                            GHC.Read.$fRead(,,,)1
                                $dRead_s3XHL
                                $dRead1_s3XHM
                                $dRead2_s3XHN
                                $dRead3_s3XHO
                                eta_B2
                                eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s3XHP
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XHQ;

GHC.Read.$fRead(,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c,
      GHC.Read.Read d) =>
     GHC.Read.Read (a, b, c, d)
[GblId[DFunId],
 Arity=4,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>m] =
    [] \r [$dRead_s3XHR $dRead1_s3XHS $dRead2_s3XHT $dRead3_s3XHU]
        let {
          sat_s3XHY [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 [(a_X3KXw, b_X3KXy, c_X3KXA, d_X3KXC)]
          [LclId] =
              [$dRead_s3XHR $dRead1_s3XHS $dRead2_s3XHT $dRead3_s3XHU] \u []
                  GHC.Read.$fRead(,,,)_$creadListPrec
                      $dRead_s3XHR $dRead1_s3XHS $dRead2_s3XHT $dRead3_s3XHU; } in
        let {
          sat_s3XHX [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KXw, b_X3KXy, c_X3KXA, d_X3KXC)
          [LclId] =
              [$dRead_s3XHR $dRead1_s3XHS $dRead2_s3XHT $dRead3_s3XHU] \r [eta_B2
                                                                           eta_B1]
                  GHC.Read.$fRead(,,,)1
                      $dRead_s3XHR
                      $dRead1_s3XHS
                      $dRead2_s3XHT
                      $dRead3_s3XHU
                      eta_B2
                      eta_B1; } in
        let {
          sat_s3XHW [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS
                 [(a_X3KXw, b_X3KXy, c_X3KXA, d_X3KXC)]
          [LclId] =
              [$dRead_s3XHR $dRead1_s3XHS $dRead2_s3XHT $dRead3_s3XHU] \u []
                  GHC.Read.$fRead(,,,)_$creadList
                      $dRead_s3XHR $dRead1_s3XHS $dRead2_s3XHT $dRead3_s3XHU; } in
        let {
          sat_s3XHV [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS
                    (a_X3KXw, b_X3KXy, c_X3KXA, d_X3KXC)
          [LclId] =
              [$dRead_s3XHR
               $dRead1_s3XHS
               $dRead2_s3XHT
               $dRead3_s3XHU] \r [eta_B1]
                  GHC.Read.$fRead(,,,)_$creadsPrec
                      $dRead_s3XHR $dRead1_s3XHS $dRead2_s3XHT $dRead3_s3XHU eta_B1;
        } in  GHC.Read.C:Read [sat_s3XHV sat_s3XHW sat_s3XHX sat_s3XHY];

GHC.Read.$fRead(,,)_$creadListPrec
  :: forall a b c.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c) =>
     Text.ParserCombinators.ReadPrec.ReadPrec [(a, b, c)]
[GblId,
 Arity=3,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XHZ $dRead1_s3XI0 $dRead2_s3XI1]
        let {
          sat_s3XI2 [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KYb, b_X3KYd, c_X3KYf)
          [LclId] =
              [$dRead_s3XHZ $dRead1_s3XI0 $dRead2_s3XI1] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,)1
                      $dRead_s3XHZ $dRead1_s3XI0 $dRead2_s3XI1 eta_B2 eta_B1;
        } in  GHC.Read.list sat_s3XI2;

GHC.Read.$fRead(,,)_$creadsPrec
  :: forall a b c.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c) =>
     GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS (a, b, c)
[GblId,
 Arity=4,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XI3 $dRead1_s3XI4 $dRead2_s3XI5 n_s3XI6]
        let {
          sat_s3XI7 [Occ=Once]
            :: Text.ParserCombinators.ReadP.P (a_X3KYc, b_X3KYe, c_X3KYg)
          [LclId] =
              [$dRead_s3XI3 $dRead1_s3XI4 $dRead2_s3XI5 n_s3XI6] \u []
                  GHC.Read.$fRead(,,)1
                      $dRead_s3XI3
                      $dRead1_s3XI4
                      $dRead2_s3XI5
                      n_s3XI6
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XI7;

GHC.Read.$fRead(,,)_$creadList
  :: forall a b c.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c) =>
     Text.ParserCombinators.ReadP.ReadS [(a, b, c)]
[GblId,
 Arity=3,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XI8 $dRead1_s3XI9 $dRead2_s3XIa]
        let {
          sat_s3XIc [Occ=Once]
            :: Text.ParserCombinators.ReadP.P [(a_X3KYd, b_X3KYf, c_X3KYh)]
          [LclId] =
              [$dRead_s3XI8 $dRead1_s3XI9 $dRead2_s3XIa] \u []
                  let {
                    sat_s3XIb [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec
                           (a_X3KYd, b_X3KYf, c_X3KYh)
                    [LclId] =
                        [$dRead_s3XI8 $dRead1_s3XI9 $dRead2_s3XIa] \r [eta_B2 eta_B1]
                            GHC.Read.$fRead(,,)1
                                $dRead_s3XI8 $dRead1_s3XI9 $dRead2_s3XIa eta_B2 eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s3XIb
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XIc;

GHC.Read.$fRead(,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c.
     (GHC.Read.Read a, GHC.Read.Read b, GHC.Read.Read c) =>
     GHC.Read.Read (a, b, c)
[GblId[DFunId],
 Arity=3,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U(A,A,C(C1(U)),A)>m] =
    [] \r [$dRead_s3XId $dRead1_s3XIe $dRead2_s3XIf]
        let {
          sat_s3XIj [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 [(a_X3KYe, b_X3KYg, c_X3KYi)]
          [LclId] =
              [$dRead_s3XId $dRead1_s3XIe $dRead2_s3XIf] \u []
                  GHC.Read.$fRead(,,)_$creadListPrec
                      $dRead_s3XId $dRead1_s3XIe $dRead2_s3XIf; } in
        let {
          sat_s3XIi [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (a_X3KYe, b_X3KYg, c_X3KYi)
          [LclId] =
              [$dRead_s3XId $dRead1_s3XIe $dRead2_s3XIf] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,,)1
                      $dRead_s3XId $dRead1_s3XIe $dRead2_s3XIf eta_B2 eta_B1; } in
        let {
          sat_s3XIh [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS [(a_X3KYe, b_X3KYg, c_X3KYi)]
          [LclId] =
              [$dRead_s3XId $dRead1_s3XIe $dRead2_s3XIf] \u []
                  GHC.Read.$fRead(,,)_$creadList
                      $dRead_s3XId $dRead1_s3XIe $dRead2_s3XIf; } in
        let {
          sat_s3XIg [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS (a_X3KYe, b_X3KYg, c_X3KYi)
          [LclId] =
              [$dRead_s3XId $dRead1_s3XIe $dRead2_s3XIf] \r [eta_B1]
                  GHC.Read.$fRead(,,)_$creadsPrec
                      $dRead_s3XId $dRead1_s3XIe $dRead2_s3XIf eta_B1;
        } in  GHC.Read.C:Read [sat_s3XIg sat_s3XIh sat_s3XIi sat_s3XIj];

GHC.Read.$fRead(,)_$creadListPrec
  :: forall a b.
     (GHC.Read.Read a, GHC.Read.Read b) =>
     Text.ParserCombinators.ReadPrec.ReadPrec [(a, b)]
[GblId,
 Arity=2,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XIk $dRead1_s3XIl]
        let {
          sat_s3XIm [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec (a_X3KZ7, b_X3KZ9)
          [LclId] =
              [$dRead_s3XIk $dRead1_s3XIl] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,)1 $dRead_s3XIk $dRead1_s3XIl eta_B2 eta_B1;
        } in  GHC.Read.list sat_s3XIm;

GHC.Read.$fRead(,)_$creadsPrec
  :: forall a b.
     (GHC.Read.Read a, GHC.Read.Read b) =>
     GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS (a, b)
[GblId,
 Arity=3,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XIn $dRead1_s3XIo n_s3XIp]
        let {
          sat_s3XIq [Occ=Once]
            :: Text.ParserCombinators.ReadP.P (a_X3KZ8, b_X3KZa)
          [LclId] =
              [$dRead_s3XIn $dRead1_s3XIo n_s3XIp] \u []
                  GHC.Read.$fRead(,)1
                      $dRead_s3XIn
                      $dRead1_s3XIo
                      n_s3XIp
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XIq;

GHC.Read.$fRead(,)_$creadList
  :: forall a b.
     (GHC.Read.Read a, GHC.Read.Read b) =>
     Text.ParserCombinators.ReadP.ReadS [(a, b)]
[GblId,
 Arity=2,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XIr $dRead1_s3XIs]
        let {
          sat_s3XIu [Occ=Once]
            :: Text.ParserCombinators.ReadP.P [(a_X3KZ9, b_X3KZb)]
          [LclId] =
              [$dRead_s3XIr $dRead1_s3XIs] \u []
                  let {
                    sat_s3XIt [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec (a_X3KZ9, b_X3KZb)
                    [LclId] =
                        [$dRead_s3XIr $dRead1_s3XIs] \r [eta_B2 eta_B1]
                            GHC.Read.$fRead(,)1 $dRead_s3XIr $dRead1_s3XIs eta_B2 eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s3XIt
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XIu;

GHC.Read.$fRead(,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b.
     (GHC.Read.Read a, GHC.Read.Read b) =>
     GHC.Read.Read (a, b)
[GblId[DFunId],
 Arity=2,
 Str=<L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>m] =
    [] \r [$dRead_s3XIv $dRead1_s3XIw]
        let {
          sat_s3XIA [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec [(a_X3KZa, b_X3KZc)]
          [LclId] =
              [$dRead_s3XIv $dRead1_s3XIw] \u []
                  GHC.Read.$fRead(,)_$creadListPrec $dRead_s3XIv $dRead1_s3XIw; } in
        let {
          sat_s3XIz [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec (a_X3KZa, b_X3KZc)
          [LclId] =
              [$dRead_s3XIv $dRead1_s3XIw] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,)1 $dRead_s3XIv $dRead1_s3XIw eta_B2 eta_B1; } in
        let {
          sat_s3XIy [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS [(a_X3KZa, b_X3KZc)]
          [LclId] =
              [$dRead_s3XIv $dRead1_s3XIw] \u []
                  GHC.Read.$fRead(,)_$creadList $dRead_s3XIv $dRead1_s3XIw; } in
        let {
          sat_s3XIx [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS (a_X3KZa, b_X3KZc)
          [LclId] =
              [$dRead_s3XIv $dRead1_s3XIw] \r [eta_B1]
                  GHC.Read.$fRead(,)_$creadsPrec $dRead_s3XIv $dRead1_s3XIw eta_B1;
        } in  GHC.Read.C:Read [sat_s3XIx sat_s3XIy sat_s3XIz sat_s3XIA];

GHC.Read.$fReadLexeme_$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec [Text.Read.Lex.Lexeme]
[GblId] =
    [] \u [] GHC.Read.list GHC.Read.$fReadLexeme1;

GHC.Read.$fReadLexeme_lvl117
  :: Text.ParserCombinators.ReadP.P Text.Read.Lex.Lexeme
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE Text.ParserCombinators.ReadP.Result! [Text.Read.Lex.EOF
                                                        Text.ParserCombinators.ReadP.Fail];

GHC.Read.$fReadLexeme8
  :: GHC.Base.String
     -> Text.ParserCombinators.ReadP.P Text.Read.Lex.Lexeme
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [a3_s3XIB]
        case a3_s3XIB of {
          [] -> GHC.Read.$fReadLexeme_lvl117;
          : _ [Occ=Dead] _ [Occ=Dead] ->
              Text.ParserCombinators.ReadP.Fail [];
        };

GHC.Read.$fReadLexeme7
  :: Text.ParserCombinators.ReadP.P Text.Read.Lex.Lexeme
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE Text.ParserCombinators.ReadP.Look! [GHC.Read.$fReadLexeme8];

GHC.Read.$fReadLexeme6
  :: Text.ParserCombinators.ReadP.P Text.Read.Lex.Lexeme
[GblId] =
    [] \u []
        Text.Read.Lex.expect2
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fReadLexeme_lvl116
  :: Text.ParserCombinators.ReadP.P Text.Read.Lex.Lexeme
[GblId] =
    [] \u []
        Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
            GHC.Read.$fReadLexeme7 GHC.Read.$fReadLexeme6;

GHC.Read.$fReadLexeme_k
  :: () -> Text.ParserCombinators.ReadP.P Text.Read.Lex.Lexeme
[GblId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
    [] \r [a3_s3XIF] GHC.Read.$fReadLexeme_lvl116;

GHC.Read.$fReadLexeme5
  :: GHC.Base.String
     -> Text.ParserCombinators.ReadP.P Text.Read.Lex.Lexeme
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [a_s3XIG]
        Text.ParserCombinators.ReadP.skipSpaces2
            a_s3XIG GHC.Read.$fReadLexeme_k;

GHC.Read.$fReadLexeme4
  :: Text.ParserCombinators.ReadP.P Text.Read.Lex.Lexeme
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE Text.ParserCombinators.ReadP.Look! [GHC.Read.$fReadLexeme5];

GHC.Read.$fReadLexeme3
  :: Text.ParserCombinators.ReadP.ReadS Text.Read.Lex.Lexeme
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.$fReadLexeme4 eta_B1;

GHC.Read.$fReadLexeme_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS Text.Read.Lex.Lexeme
[GblId, Arity=2, Str=<L,A>, Unf=OtherCon []] =
    [] \r [n_s3XIH eta_B1] GHC.Read.$fReadLexeme3 eta_B1;

GHC.Read.$fReadLexeme2
  :: Text.ParserCombinators.ReadP.P [Text.Read.Lex.Lexeme]
[GblId] =
    [] \u []
        GHC.Read.$fReadLexeme_$creadListPrec
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fReadLexeme_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [Text.Read.Lex.Lexeme]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.$fReadLexeme2 eta_B1;

GHC.Read.$fReadLexeme [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read Text.Read.Lex.Lexeme
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fReadLexeme_$creadsPrec
                                    GHC.Read.$fReadLexeme_$creadList
                                    GHC.Read.$fReadLexeme1
                                    GHC.Read.$fReadLexeme_$creadListPrec];

GHC.Read.$dmreadList
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadP.ReadS [a]
[GblId, Arity=1, Str=<L,1*U(A,A,1*C1(C(U)),A)>, Unf=OtherCon []] =
    [] \r [$dRead_s3XII]
        let {
          sat_s3XIK [Occ=Once] :: Text.ParserCombinators.ReadP.P [a_X3K8l]
          [LclId] =
              [$dRead_s3XII] \u []
                  let {
                    sat_s3XIJ [Occ=Once, Dmd=<L,1*C1(C(U))>]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec a_X3K8l
                    [LclId] =
                        [$dRead_s3XII] \s [] GHC.Read.readPrec $dRead_s3XII;
                  } in 
                    GHC.Read.list
                        sat_s3XIJ
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XIK;

GHC.Read.$fReadInteger_$sreadNumber
  :: (Text.Read.Lex.Lexeme
      -> Text.ParserCombinators.ReadPrec.ReadPrec
           GHC.Integer.Type.Integer)
     -> Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Integer.Type.Integer -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=3, Str=<L,C(C1(C1(U)))><L,U><L,U>, Unf=OtherCon []] =
    [] \r [convert_s3XIL eta_s3XIM eta1_s3XIN]
        let {
          sat_s3XJz [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 GHC.Integer.Type.Integer
          [LclId] =
              [convert_s3XIL] \r [n_s3XIO k1_s3XIP]
                  let {
                    lvl116_s3XIQ [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId] =
                        [convert_s3XIL n_s3XIO k1_s3XIP] \u []
                            let {
                              lvl2_s3XIR [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [convert_s3XIL n_s3XIO k1_s3XIP] \u []
                                      let {
                                        lvl3_s3XIS
                                          :: GHC.Integer.Type.Integer
                                             -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId, Arity=1, Str=<L,1*U>, Unf=OtherCon []] =
                                            [k1_s3XIP] \r [a1_s3XIT]
                                                let {
                                                  sat_s3XIU [Occ=Once] :: GHC.Integer.Type.Integer
                                                  [LclId] =
                                                      [a1_s3XIT] \u []
                                                          GHC.Integer.Type.negateInteger a1_s3XIT;
                                                } in  k1_s3XIP sat_s3XIU; } in
                                      let {
                                        lvl117_s3XIV [Occ=OnceL]
                                          :: Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            [convert_s3XIL n_s3XIO lvl3_s3XIS] \u []
                                                convert_s3XIL
                                                    Text.Read.Lex.EOF n_s3XIO lvl3_s3XIS; } in
                                      let {
                                        sat_s3XJ4 [Occ=Once]
                                          :: Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            [convert_s3XIL n_s3XIO lvl3_s3XIS] \u []
                                                let {
                                                  sat_s3XJ3 [Occ=Once]
                                                    :: Text.Read.Lex.Lexeme
                                                       -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                                  [LclId] =
                                                      [convert_s3XIL
                                                       n_s3XIO
                                                       lvl3_s3XIS] \r [a1_s3XJ2]
                                                          convert_s3XIL a1_s3XJ2 n_s3XIO lvl3_s3XIS;
                                                } in  Text.Read.Lex.expect2 sat_s3XJ3; } in
                                      let {
                                        sat_s3XJ0 [Occ=OnceL]
                                          :: GHC.Base.String
                                             -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            [lvl117_s3XIV] \r [a3_s3XIW]
                                                case a3_s3XIW of {
                                                  [] -> lvl117_s3XIV;
                                                  : _ [Occ=Dead] _ [Occ=Dead] ->
                                                      Text.ParserCombinators.ReadP.Fail [];
                                                }; } in
                                      let {
                                        sat_s3XJ1 [Occ=Once]
                                          :: Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            CCCS Text.ParserCombinators.ReadP.Look! [sat_s3XJ0];
                                      } in 
                                        Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                            sat_s3XJ1 sat_s3XJ4; } in
                            let {
                              k_s3XJ5 [Occ=OnceL, Dmd=<L,C(U)>]
                                :: () -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
                                  [lvl2_s3XIR] \r [a3_s3XJ6] lvl2_s3XIR; } in
                            let {
                              lvl3_s3XJ7 [Occ=OnceL]
                                :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                  [k_s3XJ5] \r [a_s3XJ8]
                                      Text.ParserCombinators.ReadP.skipSpaces2 a_s3XJ8 k_s3XJ5; } in
                            let {
                              lvl4_s3XJ9 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Unf=OtherCon []] =
                                  CCCS Text.ParserCombinators.ReadP.Look! [lvl3_s3XJ7]; } in
                            let {
                              w2_s3XJa
                                :: Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                  [convert_s3XIL n_s3XIO k1_s3XIP lvl4_s3XJ9] \r [a1_s3XJb]
                                      case a1_s3XJb of wild_s3XJc {
                                        __DEFAULT -> convert_s3XIL wild_s3XJc n_s3XIO k1_s3XIP;
                                        Text.Read.Lex.Symbol ds_s3XJd [Occ=Once!] ->
                                            case ds_s3XJd of {
                                              [] -> convert_s3XIL wild_s3XJc n_s3XIO k1_s3XIP;
                                              : ds1_s3XJf [Occ=Once!] ds2_s3XJg [Occ=Once!] ->
                                                  case ds1_s3XJf of {
                                                    GHC.Types.C# ds3_s3XJi [Occ=Once!] ->
                                                        case ds3_s3XJi of {
                                                          __DEFAULT ->
                                                              convert_s3XIL
                                                                  wild_s3XJc n_s3XIO k1_s3XIP;
                                                          '-'# ->
                                                              case ds2_s3XJg of {
                                                                [] -> lvl4_s3XJ9;
                                                                : _ [Occ=Dead] _ [Occ=Dead] ->
                                                                    convert_s3XIL
                                                                        wild_s3XJc n_s3XIO k1_s3XIP;
                                                              };
                                                        };
                                                  };
                                            };
                                      }; } in
                            let {
                              lvl117_s3XJn [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [w2_s3XJa] \u [] w2_s3XJa Text.Read.Lex.EOF; } in
                            let {
                              sat_s3XJu [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [w2_s3XJa] \u [] Text.Read.Lex.expect2 w2_s3XJa; } in
                            let {
                              sat_s3XJs [Occ=OnceL]
                                :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [lvl117_s3XJn] \r [a3_s3XJo]
                                      case a3_s3XJo of {
                                        [] -> lvl117_s3XJn;
                                        : _ [Occ=Dead] _ [Occ=Dead] ->
                                            Text.ParserCombinators.ReadP.Fail [];
                                      }; } in
                            let {
                              sat_s3XJt [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  CCCS Text.ParserCombinators.ReadP.Look! [sat_s3XJs];
                            } in 
                              Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                  sat_s3XJt sat_s3XJu; } in
                  let {
                    k_s3XJv [Occ=OnceL, Dmd=<L,C(U)>]
                      :: () -> Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
                        [lvl116_s3XIQ] \r [a3_s3XJw] lvl116_s3XIQ; } in
                  let {
                    sat_s3XJy [Occ=Once]
                      :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId] =
                        [k_s3XJv] \r [a_s3XJx]
                            Text.ParserCombinators.ReadP.skipSpaces2 a_s3XJx k_s3XJv;
                  } in  Text.ParserCombinators.ReadP.Look [sat_s3XJy];
        } in  GHC.Read.list3 sat_s3XJz eta_s3XIM eta1_s3XIN;

GHC.Read.$fReadDouble_$sreadNumber
  :: (Text.Read.Lex.Lexeme
      -> Text.ParserCombinators.ReadPrec.ReadPrec GHC.Types.Double)
     -> Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Types.Double -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=3, Str=<L,C(C1(C1(U)))><L,U><L,U>, Unf=OtherCon []] =
    [] \r [convert_s3XJA eta_s3XJB eta1_s3XJC]
        let {
          sat_s3XKo [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec GHC.Types.Double
          [LclId] =
              [convert_s3XJA] \r [n_s3XJD k1_s3XJE]
                  let {
                    lvl116_s3XJF [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId] =
                        [convert_s3XJA n_s3XJD k1_s3XJE] \u []
                            let {
                              lvl2_s3XJG [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [convert_s3XJA n_s3XJD k1_s3XJE] \u []
                                      let {
                                        lvl3_s3XJH
                                          :: GHC.Types.Double
                                             -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId, Arity=1, Str=<L,1*U(U)>, Unf=OtherCon []] =
                                            [k1_s3XJE] \r [a1_s3XJI]
                                                let {
                                                  sat_s3XJJ [Occ=Once] :: GHC.Types.Double
                                                  [LclId] =
                                                      [a1_s3XJI] \u []
                                                          GHC.Float.negateDouble a1_s3XJI;
                                                } in  k1_s3XJE sat_s3XJJ; } in
                                      let {
                                        lvl117_s3XJK [Occ=OnceL]
                                          :: Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            [convert_s3XJA n_s3XJD lvl3_s3XJH] \u []
                                                convert_s3XJA
                                                    Text.Read.Lex.EOF n_s3XJD lvl3_s3XJH; } in
                                      let {
                                        sat_s3XJT [Occ=Once]
                                          :: Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            [convert_s3XJA n_s3XJD lvl3_s3XJH] \u []
                                                let {
                                                  sat_s3XJS [Occ=Once]
                                                    :: Text.Read.Lex.Lexeme
                                                       -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                                  [LclId] =
                                                      [convert_s3XJA
                                                       n_s3XJD
                                                       lvl3_s3XJH] \r [a1_s3XJR]
                                                          convert_s3XJA a1_s3XJR n_s3XJD lvl3_s3XJH;
                                                } in  Text.Read.Lex.expect2 sat_s3XJS; } in
                                      let {
                                        sat_s3XJP [Occ=OnceL]
                                          :: GHC.Base.String
                                             -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            [lvl117_s3XJK] \r [a3_s3XJL]
                                                case a3_s3XJL of {
                                                  [] -> lvl117_s3XJK;
                                                  : _ [Occ=Dead] _ [Occ=Dead] ->
                                                      Text.ParserCombinators.ReadP.Fail [];
                                                }; } in
                                      let {
                                        sat_s3XJQ [Occ=Once]
                                          :: Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            CCCS Text.ParserCombinators.ReadP.Look! [sat_s3XJP];
                                      } in 
                                        Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                            sat_s3XJQ sat_s3XJT; } in
                            let {
                              k_s3XJU [Occ=OnceL, Dmd=<L,C(U)>]
                                :: () -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
                                  [lvl2_s3XJG] \r [a3_s3XJV] lvl2_s3XJG; } in
                            let {
                              lvl3_s3XJW [Occ=OnceL]
                                :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                  [k_s3XJU] \r [a_s3XJX]
                                      Text.ParserCombinators.ReadP.skipSpaces2 a_s3XJX k_s3XJU; } in
                            let {
                              lvl4_s3XJY [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Unf=OtherCon []] =
                                  CCCS Text.ParserCombinators.ReadP.Look! [lvl3_s3XJW]; } in
                            let {
                              w2_s3XJZ
                                :: Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                  [convert_s3XJA n_s3XJD k1_s3XJE lvl4_s3XJY] \r [a1_s3XK0]
                                      case a1_s3XK0 of wild_s3XK1 {
                                        __DEFAULT -> convert_s3XJA wild_s3XK1 n_s3XJD k1_s3XJE;
                                        Text.Read.Lex.Symbol ds_s3XK2 [Occ=Once!] ->
                                            case ds_s3XK2 of {
                                              [] -> convert_s3XJA wild_s3XK1 n_s3XJD k1_s3XJE;
                                              : ds1_s3XK4 [Occ=Once!] ds2_s3XK5 [Occ=Once!] ->
                                                  case ds1_s3XK4 of {
                                                    GHC.Types.C# ds3_s3XK7 [Occ=Once!] ->
                                                        case ds3_s3XK7 of {
                                                          __DEFAULT ->
                                                              convert_s3XJA
                                                                  wild_s3XK1 n_s3XJD k1_s3XJE;
                                                          '-'# ->
                                                              case ds2_s3XK5 of {
                                                                [] -> lvl4_s3XJY;
                                                                : _ [Occ=Dead] _ [Occ=Dead] ->
                                                                    convert_s3XJA
                                                                        wild_s3XK1 n_s3XJD k1_s3XJE;
                                                              };
                                                        };
                                                  };
                                            };
                                      }; } in
                            let {
                              lvl117_s3XKc [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [w2_s3XJZ] \u [] w2_s3XJZ Text.Read.Lex.EOF; } in
                            let {
                              sat_s3XKj [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [w2_s3XJZ] \u [] Text.Read.Lex.expect2 w2_s3XJZ; } in
                            let {
                              sat_s3XKh [Occ=OnceL]
                                :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [lvl117_s3XKc] \r [a3_s3XKd]
                                      case a3_s3XKd of {
                                        [] -> lvl117_s3XKc;
                                        : _ [Occ=Dead] _ [Occ=Dead] ->
                                            Text.ParserCombinators.ReadP.Fail [];
                                      }; } in
                            let {
                              sat_s3XKi [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  CCCS Text.ParserCombinators.ReadP.Look! [sat_s3XKh];
                            } in 
                              Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                  sat_s3XKi sat_s3XKj; } in
                  let {
                    k_s3XKk [Occ=OnceL, Dmd=<L,C(U)>]
                      :: () -> Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
                        [lvl116_s3XJF] \r [a3_s3XKl] lvl116_s3XJF; } in
                  let {
                    sat_s3XKn [Occ=Once]
                      :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId] =
                        [k_s3XKk] \r [a_s3XKm]
                            Text.ParserCombinators.ReadP.skipSpaces2 a_s3XKm k_s3XKk;
                  } in  Text.ParserCombinators.ReadP.Look [sat_s3XKn];
        } in  GHC.Read.list3 sat_s3XKo eta_s3XJB eta1_s3XJC;

GHC.Read.$fReadFloat_$sreadNumber
  :: (Text.Read.Lex.Lexeme
      -> Text.ParserCombinators.ReadPrec.ReadPrec GHC.Types.Float)
     -> Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Types.Float -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=3, Str=<L,C(C1(C1(U)))><L,U><L,U>, Unf=OtherCon []] =
    [] \r [convert_s3XKp eta_s3XKq eta1_s3XKr]
        let {
          sat_s3XLd [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec GHC.Types.Float
          [LclId] =
              [convert_s3XKp] \r [n_s3XKs k1_s3XKt]
                  let {
                    lvl116_s3XKu [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId] =
                        [convert_s3XKp n_s3XKs k1_s3XKt] \u []
                            let {
                              lvl2_s3XKv [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [convert_s3XKp n_s3XKs k1_s3XKt] \u []
                                      let {
                                        lvl3_s3XKw
                                          :: GHC.Types.Float
                                             -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId, Arity=1, Str=<L,1*U(U)>, Unf=OtherCon []] =
                                            [k1_s3XKt] \r [a1_s3XKx]
                                                let {
                                                  sat_s3XKy [Occ=Once] :: GHC.Types.Float
                                                  [LclId] =
                                                      [a1_s3XKx] \u []
                                                          GHC.Float.negateFloat a1_s3XKx;
                                                } in  k1_s3XKt sat_s3XKy; } in
                                      let {
                                        lvl117_s3XKz [Occ=OnceL]
                                          :: Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            [convert_s3XKp n_s3XKs lvl3_s3XKw] \u []
                                                convert_s3XKp
                                                    Text.Read.Lex.EOF n_s3XKs lvl3_s3XKw; } in
                                      let {
                                        sat_s3XKI [Occ=Once]
                                          :: Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            [convert_s3XKp n_s3XKs lvl3_s3XKw] \u []
                                                let {
                                                  sat_s3XKH [Occ=Once]
                                                    :: Text.Read.Lex.Lexeme
                                                       -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                                  [LclId] =
                                                      [convert_s3XKp
                                                       n_s3XKs
                                                       lvl3_s3XKw] \r [a1_s3XKG]
                                                          convert_s3XKp a1_s3XKG n_s3XKs lvl3_s3XKw;
                                                } in  Text.Read.Lex.expect2 sat_s3XKH; } in
                                      let {
                                        sat_s3XKE [Occ=OnceL]
                                          :: GHC.Base.String
                                             -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            [lvl117_s3XKz] \r [a3_s3XKA]
                                                case a3_s3XKA of {
                                                  [] -> lvl117_s3XKz;
                                                  : _ [Occ=Dead] _ [Occ=Dead] ->
                                                      Text.ParserCombinators.ReadP.Fail [];
                                                }; } in
                                      let {
                                        sat_s3XKF [Occ=Once]
                                          :: Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            CCCS Text.ParserCombinators.ReadP.Look! [sat_s3XKE];
                                      } in 
                                        Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                            sat_s3XKF sat_s3XKI; } in
                            let {
                              k_s3XKJ [Occ=OnceL, Dmd=<L,C(U)>]
                                :: () -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
                                  [lvl2_s3XKv] \r [a3_s3XKK] lvl2_s3XKv; } in
                            let {
                              lvl3_s3XKL [Occ=OnceL]
                                :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                  [k_s3XKJ] \r [a_s3XKM]
                                      Text.ParserCombinators.ReadP.skipSpaces2 a_s3XKM k_s3XKJ; } in
                            let {
                              lvl4_s3XKN [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Unf=OtherCon []] =
                                  CCCS Text.ParserCombinators.ReadP.Look! [lvl3_s3XKL]; } in
                            let {
                              w2_s3XKO
                                :: Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                  [convert_s3XKp n_s3XKs k1_s3XKt lvl4_s3XKN] \r [a1_s3XKP]
                                      case a1_s3XKP of wild_s3XKQ {
                                        __DEFAULT -> convert_s3XKp wild_s3XKQ n_s3XKs k1_s3XKt;
                                        Text.Read.Lex.Symbol ds_s3XKR [Occ=Once!] ->
                                            case ds_s3XKR of {
                                              [] -> convert_s3XKp wild_s3XKQ n_s3XKs k1_s3XKt;
                                              : ds1_s3XKT [Occ=Once!] ds2_s3XKU [Occ=Once!] ->
                                                  case ds1_s3XKT of {
                                                    GHC.Types.C# ds3_s3XKW [Occ=Once!] ->
                                                        case ds3_s3XKW of {
                                                          __DEFAULT ->
                                                              convert_s3XKp
                                                                  wild_s3XKQ n_s3XKs k1_s3XKt;
                                                          '-'# ->
                                                              case ds2_s3XKU of {
                                                                [] -> lvl4_s3XKN;
                                                                : _ [Occ=Dead] _ [Occ=Dead] ->
                                                                    convert_s3XKp
                                                                        wild_s3XKQ n_s3XKs k1_s3XKt;
                                                              };
                                                        };
                                                  };
                                            };
                                      }; } in
                            let {
                              lvl117_s3XL1 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [w2_s3XKO] \u [] w2_s3XKO Text.Read.Lex.EOF; } in
                            let {
                              sat_s3XL8 [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [w2_s3XKO] \u [] Text.Read.Lex.expect2 w2_s3XKO; } in
                            let {
                              sat_s3XL6 [Occ=OnceL]
                                :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [lvl117_s3XL1] \r [a3_s3XL2]
                                      case a3_s3XL2 of {
                                        [] -> lvl117_s3XL1;
                                        : _ [Occ=Dead] _ [Occ=Dead] ->
                                            Text.ParserCombinators.ReadP.Fail [];
                                      }; } in
                            let {
                              sat_s3XL7 [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  CCCS Text.ParserCombinators.ReadP.Look! [sat_s3XL6];
                            } in 
                              Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                  sat_s3XL7 sat_s3XL8; } in
                  let {
                    k_s3XL9 [Occ=OnceL, Dmd=<L,C(U)>]
                      :: () -> Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
                        [lvl116_s3XKu] \r [a3_s3XLa] lvl116_s3XKu; } in
                  let {
                    sat_s3XLc [Occ=Once]
                      :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId] =
                        [k_s3XL9] \r [a_s3XLb]
                            Text.ParserCombinators.ReadP.skipSpaces2 a_s3XLb k_s3XL9;
                  } in  Text.ParserCombinators.ReadP.Look [sat_s3XLc];
        } in  GHC.Read.list3 sat_s3XLd eta_s3XKq eta1_s3XKr;

GHC.Read.$fReadInt_$sreadNumber
  :: (Text.Read.Lex.Lexeme
      -> Text.ParserCombinators.ReadPrec.ReadPrec GHC.Types.Int)
     -> Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Types.Int -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=3, Str=<L,C(C1(C1(U)))><L,U><L,U>, Unf=OtherCon []] =
    [] \r [convert_s3XLe eta_s3XLf eta1_s3XLg]
        let {
          sat_s3XM2 [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec GHC.Types.Int
          [LclId] =
              [convert_s3XLe] \r [n_s3XLh k1_s3XLi]
                  let {
                    lvl116_s3XLj [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId] =
                        [convert_s3XLe n_s3XLh k1_s3XLi] \u []
                            let {
                              lvl2_s3XLk [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [convert_s3XLe n_s3XLh k1_s3XLi] \u []
                                      let {
                                        lvl3_s3XLl
                                          :: GHC.Types.Int
                                             -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId, Arity=1, Str=<L,1*U(U)>, Unf=OtherCon []] =
                                            [k1_s3XLi] \r [a1_s3XLm]
                                                let {
                                                  sat_s3XLn [Occ=Once] :: GHC.Types.Int
                                                  [LclId] =
                                                      [a1_s3XLm] \u []
                                                          GHC.Num.$fNumInt_$cnegate a1_s3XLm;
                                                } in  k1_s3XLi sat_s3XLn; } in
                                      let {
                                        lvl117_s3XLo [Occ=OnceL]
                                          :: Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            [convert_s3XLe n_s3XLh lvl3_s3XLl] \u []
                                                convert_s3XLe
                                                    Text.Read.Lex.EOF n_s3XLh lvl3_s3XLl; } in
                                      let {
                                        sat_s3XLx [Occ=Once]
                                          :: Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            [convert_s3XLe n_s3XLh lvl3_s3XLl] \u []
                                                let {
                                                  sat_s3XLw [Occ=Once]
                                                    :: Text.Read.Lex.Lexeme
                                                       -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                                  [LclId] =
                                                      [convert_s3XLe
                                                       n_s3XLh
                                                       lvl3_s3XLl] \r [a1_s3XLv]
                                                          convert_s3XLe a1_s3XLv n_s3XLh lvl3_s3XLl;
                                                } in  Text.Read.Lex.expect2 sat_s3XLw; } in
                                      let {
                                        sat_s3XLt [Occ=OnceL]
                                          :: GHC.Base.String
                                             -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            [lvl117_s3XLo] \r [a3_s3XLp]
                                                case a3_s3XLp of {
                                                  [] -> lvl117_s3XLo;
                                                  : _ [Occ=Dead] _ [Occ=Dead] ->
                                                      Text.ParserCombinators.ReadP.Fail [];
                                                }; } in
                                      let {
                                        sat_s3XLu [Occ=Once]
                                          :: Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            CCCS Text.ParserCombinators.ReadP.Look! [sat_s3XLt];
                                      } in 
                                        Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                            sat_s3XLu sat_s3XLx; } in
                            let {
                              k_s3XLy [Occ=OnceL, Dmd=<L,C(U)>]
                                :: () -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
                                  [lvl2_s3XLk] \r [a3_s3XLz] lvl2_s3XLk; } in
                            let {
                              lvl3_s3XLA [Occ=OnceL]
                                :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                  [k_s3XLy] \r [a_s3XLB]
                                      Text.ParserCombinators.ReadP.skipSpaces2 a_s3XLB k_s3XLy; } in
                            let {
                              lvl4_s3XLC [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Unf=OtherCon []] =
                                  CCCS Text.ParserCombinators.ReadP.Look! [lvl3_s3XLA]; } in
                            let {
                              w2_s3XLD
                                :: Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                  [convert_s3XLe n_s3XLh k1_s3XLi lvl4_s3XLC] \r [a1_s3XLE]
                                      case a1_s3XLE of wild_s3XLF {
                                        __DEFAULT -> convert_s3XLe wild_s3XLF n_s3XLh k1_s3XLi;
                                        Text.Read.Lex.Symbol ds_s3XLG [Occ=Once!] ->
                                            case ds_s3XLG of {
                                              [] -> convert_s3XLe wild_s3XLF n_s3XLh k1_s3XLi;
                                              : ds1_s3XLI [Occ=Once!] ds2_s3XLJ [Occ=Once!] ->
                                                  case ds1_s3XLI of {
                                                    GHC.Types.C# ds3_s3XLL [Occ=Once!] ->
                                                        case ds3_s3XLL of {
                                                          __DEFAULT ->
                                                              convert_s3XLe
                                                                  wild_s3XLF n_s3XLh k1_s3XLi;
                                                          '-'# ->
                                                              case ds2_s3XLJ of {
                                                                [] -> lvl4_s3XLC;
                                                                : _ [Occ=Dead] _ [Occ=Dead] ->
                                                                    convert_s3XLe
                                                                        wild_s3XLF n_s3XLh k1_s3XLi;
                                                              };
                                                        };
                                                  };
                                            };
                                      }; } in
                            let {
                              lvl117_s3XLQ [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [w2_s3XLD] \u [] w2_s3XLD Text.Read.Lex.EOF; } in
                            let {
                              sat_s3XLX [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [w2_s3XLD] \u [] Text.Read.Lex.expect2 w2_s3XLD; } in
                            let {
                              sat_s3XLV [Occ=OnceL]
                                :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [lvl117_s3XLQ] \r [a3_s3XLR]
                                      case a3_s3XLR of {
                                        [] -> lvl117_s3XLQ;
                                        : _ [Occ=Dead] _ [Occ=Dead] ->
                                            Text.ParserCombinators.ReadP.Fail [];
                                      }; } in
                            let {
                              sat_s3XLW [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  CCCS Text.ParserCombinators.ReadP.Look! [sat_s3XLV];
                            } in 
                              Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                  sat_s3XLW sat_s3XLX; } in
                  let {
                    k_s3XLY [Occ=OnceL, Dmd=<L,C(U)>]
                      :: () -> Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
                        [lvl116_s3XLj] \r [a3_s3XLZ] lvl116_s3XLj; } in
                  let {
                    sat_s3XM1 [Occ=Once]
                      :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId] =
                        [k_s3XLY] \r [a_s3XM0]
                            Text.ParserCombinators.ReadP.skipSpaces2 a_s3XM0 k_s3XLY;
                  } in  Text.ParserCombinators.ReadP.Look [sat_s3XM1];
        } in  GHC.Read.list3 sat_s3XM2 eta_s3XLf eta1_s3XLg;

GHC.Read.readNumber1
  :: forall a.
     GHC.Num.Num a =>
     (Text.Read.Lex.Lexeme
      -> Text.ParserCombinators.ReadPrec.ReadPrec a)
     -> Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=4,
 Str=<L,U(A,A,A,C(U),A,A,A)><L,C(C1(C1(U)))><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dNum_s3XM3 convert_s3XM4 eta_s3XM5 eta1_s3XM6]
        let {
          sat_s3XMS [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec a_a3Kr6
          [LclId] =
              [$dNum_s3XM3 convert_s3XM4] \r [n_s3XM7 k1_s3XM8]
                  let {
                    lvl116_s3XM9 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId] =
                        [$dNum_s3XM3 convert_s3XM4 n_s3XM7 k1_s3XM8] \u []
                            let {
                              lvl2_s3XMa [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [$dNum_s3XM3 convert_s3XM4 n_s3XM7 k1_s3XM8] \u []
                                      let {
                                        lvl3_s3XMb
                                          :: a_a3Kr6 -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
                                            [$dNum_s3XM3 k1_s3XM8] \r [a1_s3XMc]
                                                let {
                                                  sat_s3XMd [Occ=Once] :: a_a3Kr6
                                                  [LclId] =
                                                      [$dNum_s3XM3 a1_s3XMc] \u []
                                                          GHC.Num.negate $dNum_s3XM3 a1_s3XMc;
                                                } in  k1_s3XM8 sat_s3XMd; } in
                                      let {
                                        lvl117_s3XMe [Occ=OnceL]
                                          :: Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            [convert_s3XM4 n_s3XM7 lvl3_s3XMb] \u []
                                                convert_s3XM4
                                                    Text.Read.Lex.EOF n_s3XM7 lvl3_s3XMb; } in
                                      let {
                                        sat_s3XMn [Occ=Once]
                                          :: Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            [convert_s3XM4 n_s3XM7 lvl3_s3XMb] \u []
                                                let {
                                                  sat_s3XMm [Occ=Once]
                                                    :: Text.Read.Lex.Lexeme
                                                       -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                                  [LclId] =
                                                      [convert_s3XM4
                                                       n_s3XM7
                                                       lvl3_s3XMb] \r [a1_s3XMl]
                                                          convert_s3XM4 a1_s3XMl n_s3XM7 lvl3_s3XMb;
                                                } in  Text.Read.Lex.expect2 sat_s3XMm; } in
                                      let {
                                        sat_s3XMj [Occ=OnceL]
                                          :: GHC.Base.String
                                             -> Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            [lvl117_s3XMe] \r [a3_s3XMf]
                                                case a3_s3XMf of {
                                                  [] -> lvl117_s3XMe;
                                                  : _ [Occ=Dead] _ [Occ=Dead] ->
                                                      Text.ParserCombinators.ReadP.Fail [];
                                                }; } in
                                      let {
                                        sat_s3XMk [Occ=Once]
                                          :: Text.ParserCombinators.ReadP.P b1_a3nIU
                                        [LclId] =
                                            CCCS Text.ParserCombinators.ReadP.Look! [sat_s3XMj];
                                      } in 
                                        Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                            sat_s3XMk sat_s3XMn; } in
                            let {
                              k_s3XMo [Occ=OnceL, Dmd=<L,C(U)>]
                                :: () -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
                                  [lvl2_s3XMa] \r [a3_s3XMp] lvl2_s3XMa; } in
                            let {
                              lvl3_s3XMq [Occ=OnceL]
                                :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                  [k_s3XMo] \r [a1_s3XMr]
                                      Text.ParserCombinators.ReadP.skipSpaces2
                                          a1_s3XMr k_s3XMo; } in
                            let {
                              lvl4_s3XMs [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Unf=OtherCon []] =
                                  CCCS Text.ParserCombinators.ReadP.Look! [lvl3_s3XMq]; } in
                            let {
                              w2_s3XMt
                                :: Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                  [convert_s3XM4 n_s3XM7 k1_s3XM8 lvl4_s3XMs] \r [a1_s3XMu]
                                      case a1_s3XMu of wild_s3XMv {
                                        __DEFAULT -> convert_s3XM4 wild_s3XMv n_s3XM7 k1_s3XM8;
                                        Text.Read.Lex.Symbol ds_s3XMw [Occ=Once!] ->
                                            case ds_s3XMw of {
                                              [] -> convert_s3XM4 wild_s3XMv n_s3XM7 k1_s3XM8;
                                              : ds1_s3XMy [Occ=Once!] ds2_s3XMz [Occ=Once!] ->
                                                  case ds1_s3XMy of {
                                                    GHC.Types.C# ds3_s3XMB [Occ=Once!] ->
                                                        case ds3_s3XMB of {
                                                          __DEFAULT ->
                                                              convert_s3XM4
                                                                  wild_s3XMv n_s3XM7 k1_s3XM8;
                                                          '-'# ->
                                                              case ds2_s3XMz of {
                                                                [] -> lvl4_s3XMs;
                                                                : _ [Occ=Dead] _ [Occ=Dead] ->
                                                                    convert_s3XM4
                                                                        wild_s3XMv n_s3XM7 k1_s3XM8;
                                                              };
                                                        };
                                                  };
                                            };
                                      }; } in
                            let {
                              lvl117_s3XMG [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [w2_s3XMt] \u [] w2_s3XMt Text.Read.Lex.EOF; } in
                            let {
                              sat_s3XMN [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [w2_s3XMt] \u [] Text.Read.Lex.expect2 w2_s3XMt; } in
                            let {
                              sat_s3XML [Occ=OnceL]
                                :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  [lvl117_s3XMG] \r [a3_s3XMH]
                                      case a3_s3XMH of {
                                        [] -> lvl117_s3XMG;
                                        : _ [Occ=Dead] _ [Occ=Dead] ->
                                            Text.ParserCombinators.ReadP.Fail [];
                                      }; } in
                            let {
                              sat_s3XMM [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_a3nIU
                              [LclId] =
                                  CCCS Text.ParserCombinators.ReadP.Look! [sat_s3XML];
                            } in 
                              Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                  sat_s3XMM sat_s3XMN; } in
                  let {
                    k_s3XMO [Occ=OnceL, Dmd=<L,C(U)>]
                      :: () -> Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
                        [lvl116_s3XM9] \r [a3_s3XMP] lvl116_s3XM9; } in
                  let {
                    sat_s3XMR [Occ=Once]
                      :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_a3nIU
                    [LclId] =
                        [k_s3XMO] \r [a1_s3XMQ]
                            Text.ParserCombinators.ReadP.skipSpaces2 a1_s3XMQ k_s3XMO;
                  } in  Text.ParserCombinators.ReadP.Look [sat_s3XMR];
        } in  GHC.Read.list3 sat_s3XMS eta_s3XM5 eta1_s3XM6;

GHC.Read.readNumber
  :: forall a.
     GHC.Num.Num a =>
     (Text.Read.Lex.Lexeme
      -> Text.ParserCombinators.ReadPrec.ReadPrec a)
     -> Text.ParserCombinators.ReadPrec.ReadPrec a
[GblId,
 Arity=4,
 Str=<L,U(A,A,A,C(U),A,A,A)><L,C(C1(C1(U)))><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.Read.readNumber1 eta_B4 eta_B3 eta_B2 eta_B1;

GHC.Read.$fReadGeneralCategory152 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "UppercaseLetter"#;

GHC.Read.$fReadGeneralCategory151 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory152;

GHC.Read.$fReadGeneralCategory150
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3XMT k_s3XMU] k_s3XMU GHC.Unicode.UppercaseLetter;

GHC.Read.$fReadGeneralCategory149
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory151
                        GHC.Read.$fReadGeneralCategory150];

GHC.Read.$fReadGeneralCategory148 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "LowercaseLetter"#;

GHC.Read.$fReadGeneralCategory147 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory148;

GHC.Read.$fReadGeneralCategory146
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3XMV k_s3XMW] k_s3XMW GHC.Unicode.LowercaseLetter;

GHC.Read.$fReadGeneralCategory145
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory147
                        GHC.Read.$fReadGeneralCategory146];

GHC.Read.$fReadGeneralCategory144 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "TitlecaseLetter"#;

GHC.Read.$fReadGeneralCategory143 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory144;

GHC.Read.$fReadGeneralCategory142
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3XMX k_s3XMY] k_s3XMY GHC.Unicode.TitlecaseLetter;

GHC.Read.$fReadGeneralCategory141
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory143
                        GHC.Read.$fReadGeneralCategory142];

GHC.Read.$fReadGeneralCategory140 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ModifierLetter"#;

GHC.Read.$fReadGeneralCategory139 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory140;

GHC.Read.$fReadGeneralCategory138
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3XMZ k_s3XN0] k_s3XN0 GHC.Unicode.ModifierLetter;

GHC.Read.$fReadGeneralCategory137
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory139
                        GHC.Read.$fReadGeneralCategory138];

GHC.Read.$fReadGeneralCategory136 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "OtherLetter"#;

GHC.Read.$fReadGeneralCategory135 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory136;

GHC.Read.$fReadGeneralCategory134
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3XN1 k_s3XN2] k_s3XN2 GHC.Unicode.OtherLetter;

GHC.Read.$fReadGeneralCategory133
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory135
                        GHC.Read.$fReadGeneralCategory134];

GHC.Read.$fReadGeneralCategory132 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "NonSpacingMark"#;

GHC.Read.$fReadGeneralCategory131 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory132;

GHC.Read.$fReadGeneralCategory130
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3XN3 k_s3XN4] k_s3XN4 GHC.Unicode.NonSpacingMark;

GHC.Read.$fReadGeneralCategory129
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory131
                        GHC.Read.$fReadGeneralCategory130];

GHC.Read.$fReadGeneralCategory128 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SpacingCombiningMark"#;

GHC.Read.$fReadGeneralCategory127 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory128;

GHC.Read.$fReadGeneralCategory126
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3XN5 k_s3XN6] k_s3XN6 GHC.Unicode.SpacingCombiningMark;

GHC.Read.$fReadGeneralCategory125
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory127
                        GHC.Read.$fReadGeneralCategory126];

GHC.Read.$fReadGeneralCategory124 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "EnclosingMark"#;

GHC.Read.$fReadGeneralCategory123 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory124;

GHC.Read.$fReadGeneralCategory122
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3XN7 k_s3XN8] k_s3XN8 GHC.Unicode.EnclosingMark;

GHC.Read.$fReadGeneralCategory121
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory123
                        GHC.Read.$fReadGeneralCategory122];

GHC.Read.$fReadGeneralCategory120 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "DecimalNumber"#;

GHC.Read.$fReadGeneralCategory119 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory120;

GHC.Read.$fReadGeneralCategory118
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3XN9 k_s3XNa] k_s3XNa GHC.Unicode.DecimalNumber;

GHC.Read.$fReadGeneralCategory117
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory119
                        GHC.Read.$fReadGeneralCategory118];

GHC.Read.$fReadGeneralCategory116 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "LetterNumber"#;

GHC.Read.$fReadGeneralCategory115 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory116;

GHC.Read.$fReadGeneralCategory114
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3XNb k_s3XNc] k_s3XNc GHC.Unicode.LetterNumber;

GHC.Read.$fReadGeneralCategory113
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory115
                        GHC.Read.$fReadGeneralCategory114];

GHC.Read.$fReadGeneralCategory112 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "OtherNumber"#;

GHC.Read.$fReadGeneralCategory111 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory112;

GHC.Read.$fReadGeneralCategory110
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3XNd k_s3XNe] k_s3XNe GHC.Unicode.OtherNumber;

GHC.Read.$fReadGeneralCategory109
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory111
                        GHC.Read.$fReadGeneralCategory110];

GHC.Read.$fReadGeneralCategory108 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ConnectorPunctuation"#;

GHC.Read.$fReadGeneralCategory107 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory108;

GHC.Read.$fReadGeneralCategory106
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3XNf k_s3XNg] k_s3XNg GHC.Unicode.ConnectorPunctuation;

GHC.Read.$fReadGeneralCategory105
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory107
                        GHC.Read.$fReadGeneralCategory106];

GHC.Read.$fReadGeneralCategory104 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "DashPunctuation"#;

GHC.Read.$fReadGeneralCategory103 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory104;

GHC.Read.$fReadGeneralCategory102
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3XNh k_s3XNi] k_s3XNi GHC.Unicode.DashPunctuation;

GHC.Read.$fReadGeneralCategory101
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory103
                        GHC.Read.$fReadGeneralCategory102];

GHC.Read.$fReadGeneralCategory100 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "OpenPunctuation"#;

GHC.Read.$fReadGeneralCategory99 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory100;

GHC.Read.$fReadGeneralCategory98
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3XNj k_s3XNk] k_s3XNk GHC.Unicode.OpenPunctuation;

GHC.Read.$fReadGeneralCategory97
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory99
                        GHC.Read.$fReadGeneralCategory98];

GHC.Read.$fReadGeneralCategory96 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ClosePunctuation"#;

GHC.Read.$fReadGeneralCategory95 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory96;

GHC.Read.$fReadGeneralCategory94
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3XNl k_s3XNm] k_s3XNm GHC.Unicode.ClosePunctuation;

GHC.Read.$fReadGeneralCategory93
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory95
                        GHC.Read.$fReadGeneralCategory94];

GHC.Read.$fReadGeneralCategory92 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "InitialQuote"#;

GHC.Read.$fReadGeneralCategory91 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory92;

GHC.Read.$fReadGeneralCategory90
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3XNn k_s3XNo] k_s3XNo GHC.Unicode.InitialQuote;

GHC.Read.$fReadGeneralCategory89
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory91
                        GHC.Read.$fReadGeneralCategory90];

GHC.Read.$fReadGeneralCategory88 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "FinalQuote"#;

GHC.Read.$fReadGeneralCategory87 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory88;

GHC.Read.$fReadGeneralCategory86
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3XNp k_s3XNq] k_s3XNq GHC.Unicode.FinalQuote;

GHC.Read.$fReadGeneralCategory85
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory87
                        GHC.Read.$fReadGeneralCategory86];

GHC.Read.$fReadGeneralCategory84 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "OtherPunctuation"#;

GHC.Read.$fReadGeneralCategory83 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory84;

GHC.Read.$fReadGeneralCategory82
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3XNr k_s3XNs] k_s3XNs GHC.Unicode.OtherPunctuation;

GHC.Read.$fReadGeneralCategory81
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory83
                        GHC.Read.$fReadGeneralCategory82];

GHC.Read.$fReadGeneralCategory80 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "MathSymbol"#;

GHC.Read.$fReadGeneralCategory79 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory80;

GHC.Read.$fReadGeneralCategory78
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3XNt k_s3XNu] k_s3XNu GHC.Unicode.MathSymbol;

GHC.Read.$fReadGeneralCategory77
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory79
                        GHC.Read.$fReadGeneralCategory78];

GHC.Read.$fReadGeneralCategory76 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "CurrencySymbol"#;

GHC.Read.$fReadGeneralCategory75 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory76;

GHC.Read.$fReadGeneralCategory74
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3XNv k_s3XNw] k_s3XNw GHC.Unicode.CurrencySymbol;

GHC.Read.$fReadGeneralCategory73
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory75
                        GHC.Read.$fReadGeneralCategory74];

GHC.Read.$fReadGeneralCategory72 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ModifierSymbol"#;

GHC.Read.$fReadGeneralCategory71 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory72;

GHC.Read.$fReadGeneralCategory70
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3XNx k_s3XNy] k_s3XNy GHC.Unicode.ModifierSymbol;

GHC.Read.$fReadGeneralCategory69
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory71
                        GHC.Read.$fReadGeneralCategory70];

GHC.Read.$fReadGeneralCategory68 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "OtherSymbol"#;

GHC.Read.$fReadGeneralCategory67 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory68;

GHC.Read.$fReadGeneralCategory66
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3XNz k_s3XNA] k_s3XNA GHC.Unicode.OtherSymbol;

GHC.Read.$fReadGeneralCategory65
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory67
                        GHC.Read.$fReadGeneralCategory66];

GHC.Read.$fReadGeneralCategory64 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Space"#;

GHC.Read.$fReadGeneralCategory63 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory64;

GHC.Read.$fReadGeneralCategory62
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3XNB k_s3XNC] k_s3XNC GHC.Unicode.Space;

GHC.Read.$fReadGeneralCategory61
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory63
                        GHC.Read.$fReadGeneralCategory62];

GHC.Read.$fReadGeneralCategory60 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "LineSeparator"#;

GHC.Read.$fReadGeneralCategory59 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory60;

GHC.Read.$fReadGeneralCategory58
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3XND k_s3XNE] k_s3XNE GHC.Unicode.LineSeparator;

GHC.Read.$fReadGeneralCategory57
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory59
                        GHC.Read.$fReadGeneralCategory58];

GHC.Read.$fReadGeneralCategory56 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ParagraphSeparator"#;

GHC.Read.$fReadGeneralCategory55 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory56;

GHC.Read.$fReadGeneralCategory54
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3XNF k_s3XNG] k_s3XNG GHC.Unicode.ParagraphSeparator;

GHC.Read.$fReadGeneralCategory53
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory55
                        GHC.Read.$fReadGeneralCategory54];

GHC.Read.$fReadGeneralCategory52 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Control"#;

GHC.Read.$fReadGeneralCategory51 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory52;

GHC.Read.$fReadGeneralCategory50
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3XNH k_s3XNI] k_s3XNI GHC.Unicode.Control;

GHC.Read.$fReadGeneralCategory49
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory51
                        GHC.Read.$fReadGeneralCategory50];

GHC.Read.$fReadGeneralCategory48 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Format"#;

GHC.Read.$fReadGeneralCategory47 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory48;

GHC.Read.$fReadGeneralCategory46
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3XNJ k_s3XNK] k_s3XNK GHC.Unicode.Format;

GHC.Read.$fReadGeneralCategory45
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory47
                        GHC.Read.$fReadGeneralCategory46];

GHC.Read.$fReadGeneralCategory44 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Surrogate"#;

GHC.Read.$fReadGeneralCategory43 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory44;

GHC.Read.$fReadGeneralCategory42
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3XNL k_s3XNM] k_s3XNM GHC.Unicode.Surrogate;

GHC.Read.$fReadGeneralCategory41
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory43
                        GHC.Read.$fReadGeneralCategory42];

GHC.Read.$fReadGeneralCategory40 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "PrivateUse"#;

GHC.Read.$fReadGeneralCategory39 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory40;

GHC.Read.$fReadGeneralCategory38
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3XNN k_s3XNO] k_s3XNO GHC.Unicode.PrivateUse;

GHC.Read.$fReadGeneralCategory37
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory39
                        GHC.Read.$fReadGeneralCategory38];

GHC.Read.$fReadGeneralCategory35 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "NotAssigned"#;

GHC.Read.$fReadGeneralCategory34 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.Read.$fReadGeneralCategory35;

GHC.Read.$fReadGeneralCategory33
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3XNP k_s3XNQ] k_s3XNQ GHC.Unicode.NotAssigned;

GHC.Read.$fReadGeneralCategory32
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.Unicode.GeneralCategory)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.Read.$fReadGeneralCategory34
                        GHC.Read.$fReadGeneralCategory33];

GHC.Read.$fReadGeneralCategory31
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory32
            Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4
            eta_B1;

GHC.Read.$fReadGeneralCategory30
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory37
            GHC.Read.$fReadGeneralCategory31
            eta_B1;

GHC.Read.$fReadGeneralCategory29
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory41
            GHC.Read.$fReadGeneralCategory30
            eta_B1;

GHC.Read.$fReadGeneralCategory28
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory45
            GHC.Read.$fReadGeneralCategory29
            eta_B1;

GHC.Read.$fReadGeneralCategory27
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory49
            GHC.Read.$fReadGeneralCategory28
            eta_B1;

GHC.Read.$fReadGeneralCategory26
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory53
            GHC.Read.$fReadGeneralCategory27
            eta_B1;

GHC.Read.$fReadGeneralCategory25
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory57
            GHC.Read.$fReadGeneralCategory26
            eta_B1;

GHC.Read.$fReadGeneralCategory24
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory61
            GHC.Read.$fReadGeneralCategory25
            eta_B1;

GHC.Read.$fReadGeneralCategory23
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory65
            GHC.Read.$fReadGeneralCategory24
            eta_B1;

GHC.Read.$fReadGeneralCategory22
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory69
            GHC.Read.$fReadGeneralCategory23
            eta_B1;

GHC.Read.$fReadGeneralCategory21
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory73
            GHC.Read.$fReadGeneralCategory22
            eta_B1;

GHC.Read.$fReadGeneralCategory20
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory77
            GHC.Read.$fReadGeneralCategory21
            eta_B1;

GHC.Read.$fReadGeneralCategory19
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory81
            GHC.Read.$fReadGeneralCategory20
            eta_B1;

GHC.Read.$fReadGeneralCategory18
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory85
            GHC.Read.$fReadGeneralCategory19
            eta_B1;

GHC.Read.$fReadGeneralCategory17
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory89
            GHC.Read.$fReadGeneralCategory18
            eta_B1;

GHC.Read.$fReadGeneralCategory16
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory93
            GHC.Read.$fReadGeneralCategory17
            eta_B1;

GHC.Read.$fReadGeneralCategory15
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory97
            GHC.Read.$fReadGeneralCategory16
            eta_B1;

GHC.Read.$fReadGeneralCategory14
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory101
            GHC.Read.$fReadGeneralCategory15
            eta_B1;

GHC.Read.$fReadGeneralCategory13
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory105
            GHC.Read.$fReadGeneralCategory14
            eta_B1;

GHC.Read.$fReadGeneralCategory12
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory109
            GHC.Read.$fReadGeneralCategory13
            eta_B1;

GHC.Read.$fReadGeneralCategory11
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory113
            GHC.Read.$fReadGeneralCategory12
            eta_B1;

GHC.Read.$fReadGeneralCategory10
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory117
            GHC.Read.$fReadGeneralCategory11
            eta_B1;

GHC.Read.$fReadGeneralCategory9
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory121
            GHC.Read.$fReadGeneralCategory10
            eta_B1;

GHC.Read.$fReadGeneralCategory8
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory125
            GHC.Read.$fReadGeneralCategory9
            eta_B1;

GHC.Read.$fReadGeneralCategory7
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory129
            GHC.Read.$fReadGeneralCategory8
            eta_B1;

GHC.Read.$fReadGeneralCategory6
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory133
            GHC.Read.$fReadGeneralCategory7
            eta_B1;

GHC.Read.$fReadGeneralCategory5
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory137
            GHC.Read.$fReadGeneralCategory6
            eta_B1;

GHC.Read.$fReadGeneralCategory4
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory141
            GHC.Read.$fReadGeneralCategory5
            eta_B1;

GHC.Read.$fReadGeneralCategory3
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory145
            GHC.Read.$fReadGeneralCategory4
            eta_B1;

GHC.Read.$fReadGeneralCategory2
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Unicode.GeneralCategory
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Read.$fReadGeneralCategory36
            GHC.Read.$fReadGeneralCategory149
            GHC.Read.$fReadGeneralCategory3
            eta_B1;

GHC.Read.$fReadGeneralCategory1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Unicode.GeneralCategory -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Read.list3 GHC.Read.$fReadGeneralCategory2 eta_B2 eta_B1;

GHC.Read.$fReadGeneralCategory_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.Unicode.GeneralCategory
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s3XNR]
        let {
          sat_s3XNS [Occ=Once]
            :: Text.ParserCombinators.ReadP.P GHC.Unicode.GeneralCategory
          [LclId] =
              [n_s3XNR] \u []
                  GHC.Read.list3
                      GHC.Read.$fReadGeneralCategory2
                      n_s3XNR
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XNS;

GHC.Read.$fReadGeneralCategory_$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec
       [GHC.Unicode.GeneralCategory]
[GblId] =
    [] \u [] GHC.Read.list GHC.Read.$fReadGeneralCategory1;

GHC.Read.$fReadGeneralCategory153
  :: Text.ParserCombinators.ReadP.P [GHC.Unicode.GeneralCategory]
[GblId] =
    [] \u []
        GHC.Read.$fReadGeneralCategory_$creadListPrec
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fReadGeneralCategory_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.Unicode.GeneralCategory]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run
            GHC.Read.$fReadGeneralCategory153 eta_B1;

GHC.Read.$fReadGeneralCategory [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.Unicode.GeneralCategory
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fReadGeneralCategory_$creadsPrec
                                    GHC.Read.$fReadGeneralCategory_$creadList
                                    GHC.Read.$fReadGeneralCategory1
                                    GHC.Read.$fReadGeneralCategory_$creadListPrec];

GHC.Read.$fRead()4
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (() -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s3XNT k_s3XNU] k_s3XNU GHC.Tuple.();

GHC.Read.$fRead()3
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (() -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m1,
 Unf=OtherCon []] =
    [] \r [w_s3XNV w1_s3XNW]
        case GHC.Read.$wparen' GHC.Read.$fRead()4 w_s3XNV w1_s3XNW of {
          Unit# ww1_s3XNY [Occ=Once] ->
              Text.ParserCombinators.ReadP.Get [ww1_s3XNY];
        };

GHC.Read.$fRead()2
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (() -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m2,
 Unf=OtherCon []] =
    [] \r [eta_s3XNZ eta1_s3XO0]
        case
            GHC.Read.$wskipSpacesThenP GHC.Read.$fRead()3 eta_s3XNZ eta1_s3XO0
        of
        { Unit# ww1_s3XO2 [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3XO2];
        };

GHC.Read.$fRead()1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (() -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Read.list3 GHC.Read.$fRead()2 eta_B2 eta_B1;

GHC.Read.$fRead()_$creadsPrec
  :: GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS ()
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s3XO3]
        let {
          sat_s3XO4 [Occ=Once] :: Text.ParserCombinators.ReadP.P ()
          [LclId] =
              [n_s3XO3] \u []
                  GHC.Read.list3
                      GHC.Read.$fRead()2
                      n_s3XO3
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XO4;

GHC.Read.$fRead()_$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec [()]
[GblId] =
    [] \u [] GHC.Read.list GHC.Read.$fRead()1;

GHC.Read.$fRead()6 :: Text.ParserCombinators.ReadP.P [()]
[GblId] =
    [] \u []
        GHC.Read.$fRead()_$creadListPrec
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fRead()_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [()]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.$fRead()6 eta_B1;

GHC.Read.$fRead() [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read ()
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fRead()_$creadsPrec
                                    GHC.Read.$fRead()_$creadList
                                    GHC.Read.$fRead()1
                                    GHC.Read.$fRead()_$creadListPrec];

GHC.Read.$fReadRatio5 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [8#];

GHC.Read.$fReadRatio4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "%"#;

GHC.Read.$fReadRatio3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Read.$fReadRatio4;

GHC.Read.$fReadRatio2 :: Text.Read.Lex.Lexeme
[GblId, Str=m5, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Symbol! [GHC.Read.$fReadRatio3];

GHC.Read.$fReadRatio1
  :: forall a.
     (GHC.Real.Integral a, GHC.Read.Read a) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Real.Ratio a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=4,
 Str=<L,U(U(U(A,A,C(C1(U)),A,C(U),C(U),C(U)),U(U(C(C1(U)),A),A,A,A,A,A,A,A),A),A,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,1*U(A,A,1*C1(C(U)),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dIntegral_s3XO5 $dRead_s3XO6 eta_s3XO7 eta1_s3XO8]
        let {
          ds1_s3XO9 [Dmd=<L,C(U)>]
            :: Text.ParserCombinators.ReadP.ReadP a_a3KOR
          [LclId] =
              [$dRead_s3XO6] \u []
                  GHC.Read.readPrec $dRead_s3XO6 GHC.Read.$fReadRatio5; } in
        let {
          sat_s3XOo [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (GHC.Real.Ratio a_a3KOR)
          [LclId] =
              [$dIntegral_s3XO5 ds1_s3XO9] \r [c_s3XOa eta2_s3XOb]
                  case c_s3XOa of {
                    GHC.Types.I# x_s3XOd [Occ=Once] ->
                        case <=# [x_s3XOd 7#] of {
                          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                          1# ->
                              let {
                                sat_s3XOn [Occ=Once]
                                  :: a_a3KOR -> Text.ParserCombinators.ReadP.P b1_a3ngn
                                [LclId] =
                                    [$dIntegral_s3XO5 ds1_s3XO9 eta2_s3XOb] \r [a1_s3XOf]
                                        let {
                                          sat_s3XOk [Occ=Once]
                                            :: () -> Text.ParserCombinators.ReadP.P b1_a3ngn
                                          [LclId] =
                                              [$dIntegral_s3XO5
                                               ds1_s3XO9
                                               eta2_s3XOb
                                               a1_s3XOf] \r [a2_s3XOg]
                                                  let {
                                                    sat_s3XOj [Occ=Once]
                                                      :: a_a3KOR
                                                         -> Text.ParserCombinators.ReadP.P b1_a3ngn
                                                    [LclId] =
                                                        [$dIntegral_s3XO5
                                                         eta2_s3XOb
                                                         a1_s3XOf] \r [a3_s3XOh]
                                                            let {
                                                              sat_s3XOi [Occ=Once]
                                                                :: GHC.Real.Ratio a_a3KOR
                                                              [LclId] =
                                                                  [$dIntegral_s3XO5
                                                                   a1_s3XOf
                                                                   a3_s3XOh] \u []
                                                                      GHC.Real.%
                                                                          $dIntegral_s3XO5
                                                                          a1_s3XOf
                                                                          a3_s3XOh;
                                                            } in  eta2_s3XOb sat_s3XOi;
                                                  } in  ds1_s3XO9 sat_s3XOj;
                                        } in 
                                          case
                                              Text.Read.Lex.$wexpect GHC.Read.$fReadRatio2 sat_s3XOk
                                          of
                                          { Unit# ww1_s3XOm [Occ=Once] ->
                                                Text.ParserCombinators.ReadP.Look [ww1_s3XOm];
                                          };
                              } in  ds1_s3XO9 sat_s3XOn;
                        };
                  };
        } in  GHC.Read.list3 sat_s3XOo eta_s3XO7 eta1_s3XO8;

GHC.Read.$fReadRatio_$creadsPrec
  :: forall a.
     (GHC.Real.Integral a, GHC.Read.Read a) =>
     GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS (GHC.Real.Ratio a)
[GblId,
 Arity=3,
 Str=<L,U(U(U(A,A,C(C1(U)),A,C(U),C(U),C(U)),U(U(C(C1(U)),A),A,A,A,A,A,A,A),A),A,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,1*U(A,A,1*C1(C(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dIntegral_s3XOp $dRead_s3XOq n_s3XOr]
        let {
          sat_s3XOs [Occ=Once]
            :: Text.ParserCombinators.ReadP.P (GHC.Real.Ratio a_X3L0L)
          [LclId] =
              [$dIntegral_s3XOp $dRead_s3XOq n_s3XOr] \u []
                  GHC.Read.$fReadRatio1
                      $dIntegral_s3XOp
                      $dRead_s3XOq
                      n_s3XOr
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XOs;

GHC.Read.$fReadRatio_$creadListPrec
  :: forall a.
     (GHC.Real.Integral a, GHC.Read.Read a) =>
     Text.ParserCombinators.ReadPrec.ReadPrec [GHC.Real.Ratio a]
[GblId,
 Arity=2,
 Str=<L,U(U(U(A,A,C(C1(U)),A,C(U),C(U),C(U)),U(U(C(C1(U)),A),A,A,A,A,A,A,A),A),A,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U(A,A,C(C(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dIntegral_s3XOt $dRead_s3XOu]
        let {
          sat_s3XOv [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (GHC.Real.Ratio a_X3L0M)
          [LclId] =
              [$dIntegral_s3XOt $dRead_s3XOu] \r [eta_B2 eta_B1]
                  GHC.Read.$fReadRatio1 $dIntegral_s3XOt $dRead_s3XOu eta_B2 eta_B1;
        } in  GHC.Read.list sat_s3XOv;

GHC.Read.$fReadRatio_$creadList
  :: forall a.
     (GHC.Real.Integral a, GHC.Read.Read a) =>
     Text.ParserCombinators.ReadP.ReadS [GHC.Real.Ratio a]
[GblId,
 Arity=2,
 Str=<L,U(U(U(A,A,C(C1(U)),A,C(U),C(U),C(U)),U(U(C(C1(U)),A),A,A,A,A,A,A,A),A),A,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U(A,A,C(C(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dIntegral_s3XOw $dRead_s3XOx]
        let {
          sat_s3XOz [Occ=Once]
            :: Text.ParserCombinators.ReadP.P [GHC.Real.Ratio a_X3L0N]
          [LclId] =
              [$dIntegral_s3XOw $dRead_s3XOx] \u []
                  let {
                    sat_s3XOy [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec
                           (GHC.Real.Ratio a_X3L0N)
                    [LclId] =
                        [$dIntegral_s3XOw $dRead_s3XOx] \r [eta_B2 eta_B1]
                            GHC.Read.$fReadRatio1 $dIntegral_s3XOw $dRead_s3XOx eta_B2 eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s3XOy
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XOz;

GHC.Read.$fReadRatio [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a.
     (GHC.Real.Integral a, GHC.Read.Read a) =>
     GHC.Read.Read (GHC.Real.Ratio a)
[GblId[DFunId],
 Arity=2,
 Str=<L,U(U(U(A,A,C(C1(U)),A,C(U),C(U),C(U)),U(U(C(C1(U)),A),A,A,A,A,A,A,A),A),A,C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U(A,A,C(C(U)),A)>m] =
    [] \r [$dIntegral_s3XOA $dRead_s3XOB]
        let {
          sat_s3XOF [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 [GHC.Real.Ratio a_X3L0O]
          [LclId] =
              [$dIntegral_s3XOA $dRead_s3XOB] \u []
                  GHC.Read.$fReadRatio_$creadListPrec
                      $dIntegral_s3XOA $dRead_s3XOB; } in
        let {
          sat_s3XOE [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (GHC.Real.Ratio a_X3L0O)
          [LclId] =
              [$dIntegral_s3XOA $dRead_s3XOB] \r [eta_B2 eta_B1]
                  GHC.Read.$fReadRatio1
                      $dIntegral_s3XOA $dRead_s3XOB eta_B2 eta_B1; } in
        let {
          sat_s3XOD [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS [GHC.Real.Ratio a_X3L0O]
          [LclId] =
              [$dIntegral_s3XOA $dRead_s3XOB] \u []
                  GHC.Read.$fReadRatio_$creadList $dIntegral_s3XOA $dRead_s3XOB; } in
        let {
          sat_s3XOC [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS (GHC.Real.Ratio a_X3L0O)
          [LclId] =
              [$dIntegral_s3XOA $dRead_s3XOB] \r [eta_B1]
                  GHC.Read.$fReadRatio_$creadsPrec
                      $dIntegral_s3XOA $dRead_s3XOB eta_B1;
        } in  GHC.Read.C:Read [sat_s3XOC sat_s3XOD sat_s3XOE sat_s3XOF];

GHC.Read.$fReadMaybe5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Nothing"#;

GHC.Read.$fReadMaybe4 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Read.$fReadMaybe5;

GHC.Read.$fReadMaybe_lexeme1 :: Text.Read.Lex.Lexeme
[GblId, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Ident! [GHC.Read.$fReadMaybe4];

GHC.Read.$fReadMaybe3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Just"#;

GHC.Read.$fReadMaybe2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Read.$fReadMaybe3;

GHC.Read.$fReadMaybe_lexeme :: Text.Read.Lex.Lexeme
[GblId, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Ident! [GHC.Read.$fReadMaybe2];

GHC.Read.$fReadArray2 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [11#];

GHC.Read.$fReadMaybe1
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Base.Maybe a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=3,
 Str=<L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XOG eta_s3XOH eta1_s3XOI]
        let {
          sat_s3XP1 [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (GHC.Base.Maybe a_a3KVO)
          [LclId] =
              [$dRead_s3XOG] \r [n_s3XOJ eta2_s3XOK]
                  let {
                    sat_s3XOM [Occ=Once]
                      :: () -> Text.ParserCombinators.ReadP.P b1_X3nsy
                    [LclId] =
                        [eta2_s3XOK] \r [a1_s3XOL] eta2_s3XOK GHC.Base.Nothing;
                  } in 
                    case
                        Text.Read.Lex.$wexpect GHC.Read.$fReadMaybe_lexeme1 sat_s3XOM
                    of
                    { Unit# ww1_s3XOO [Occ=Once] ->
                          let {
                            sat_s3XP0 [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_X3nsy
                            [LclId] =
                                [$dRead_s3XOG n_s3XOJ eta2_s3XOK] \u []
                                    case n_s3XOJ of {
                                      GHC.Types.I# x_s3XOR [Occ=Once] ->
                                          case <=# [x_s3XOR 10#] of {
                                            __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                                            1# ->
                                                let {
                                                  sat_s3XOX [Occ=Once]
                                                    :: () -> Text.ParserCombinators.ReadP.P b1_X3nsy
                                                  [LclId] =
                                                      [$dRead_s3XOG eta2_s3XOK] \r [a1_s3XOT]
                                                          let {
                                                            sat_s3XOW [Occ=Once]
                                                              :: a_a3KVO
                                                                 -> Text.ParserCombinators.ReadP.P
                                                                      b1_X3nsy
                                                            [LclId] =
                                                                [eta2_s3XOK] \r [a2_s3XOU]
                                                                    let {
                                                                      sat_s3XOV [Occ=Once]
                                                                        :: GHC.Base.Maybe a_a3KVO
                                                                      [LclId] =
                                                                          CCCS GHC.Base.Just! [a2_s3XOU];
                                                                    } in  eta2_s3XOK sat_s3XOV;
                                                          } in 
                                                            GHC.Read.readPrec
                                                                $dRead_s3XOG
                                                                GHC.Read.$fReadArray2
                                                                sat_s3XOW;
                                                } in 
                                                  case
                                                      Text.Read.Lex.$wexpect
                                                          GHC.Read.$fReadMaybe_lexeme sat_s3XOX
                                                  of
                                                  { Unit# ww3_s3XOZ [Occ=Once] ->
                                                        Text.ParserCombinators.ReadP.Look [ww3_s3XOZ];
                                                  };
                                          };
                                    }; } in
                          let {
                            sat_s3XOP [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_X3nsy
                            [LclId] =
                                CCCS Text.ParserCombinators.ReadP.Look! [ww1_s3XOO];
                          } in 
                            Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                sat_s3XOP sat_s3XP0;
                    };
        } in  GHC.Read.list3 sat_s3XP1 eta_s3XOH eta1_s3XOI;

GHC.Read.$fReadMaybe_$creadsPrec
  :: forall a.
     GHC.Read.Read a =>
     GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS (GHC.Base.Maybe a)
[GblId, Arity=2, Str=<L,U(A,A,C(C1(U)),A)><L,U>, Unf=OtherCon []] =
    [] \r [$dRead_s3XP2 n_s3XP3]
        let {
          sat_s3XP4 [Occ=Once]
            :: Text.ParserCombinators.ReadP.P (GHC.Base.Maybe a_X3L7Q)
          [LclId] =
              [$dRead_s3XP2 n_s3XP3] \u []
                  GHC.Read.$fReadMaybe1
                      $dRead_s3XP2
                      n_s3XP3
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XP4;

GHC.Read.$fReadMaybe_$creadListPrec
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadPrec.ReadPrec [GHC.Base.Maybe a]
[GblId, Arity=1, Str=<L,U(A,A,C(C1(U)),A)>, Unf=OtherCon []] =
    [] \r [$dRead_s3XP5]
        let {
          sat_s3XP6 [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (GHC.Base.Maybe a_X3L7R)
          [LclId] =
              [$dRead_s3XP5] \r [eta_B2 eta_B1]
                  GHC.Read.$fReadMaybe1 $dRead_s3XP5 eta_B2 eta_B1;
        } in  GHC.Read.list sat_s3XP6;

GHC.Read.$fReadMaybe_$creadList
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadP.ReadS [GHC.Base.Maybe a]
[GblId, Arity=1, Str=<L,U(A,A,C(C1(U)),A)>, Unf=OtherCon []] =
    [] \r [$dRead_s3XP7]
        let {
          sat_s3XP9 [Occ=Once]
            :: Text.ParserCombinators.ReadP.P [GHC.Base.Maybe a_X3L7S]
          [LclId] =
              [$dRead_s3XP7] \u []
                  let {
                    sat_s3XP8 [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec
                           (GHC.Base.Maybe a_X3L7S)
                    [LclId] =
                        [$dRead_s3XP7] \r [eta_B2 eta_B1]
                            GHC.Read.$fReadMaybe1 $dRead_s3XP7 eta_B2 eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s3XP8
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XP9;

GHC.Read.$fReadMaybe [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Read.Read a => GHC.Read.Read (GHC.Base.Maybe a)
[GblId[DFunId], Arity=1, Str=<L,U(A,A,C(C1(U)),A)>m] =
    [] \r [$dRead_s3XPa]
        let {
          sat_s3XPe [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 [GHC.Base.Maybe a_X3L7T]
          [LclId] =
              [$dRead_s3XPa] \u []
                  GHC.Read.$fReadMaybe_$creadListPrec $dRead_s3XPa; } in
        let {
          sat_s3XPd [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (GHC.Base.Maybe a_X3L7T)
          [LclId] =
              [$dRead_s3XPa] \r [eta_B2 eta_B1]
                  GHC.Read.$fReadMaybe1 $dRead_s3XPa eta_B2 eta_B1; } in
        let {
          sat_s3XPc [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS [GHC.Base.Maybe a_X3L7T]
          [LclId] =
              [$dRead_s3XPa] \u []
                  GHC.Read.$fReadMaybe_$creadList $dRead_s3XPa; } in
        let {
          sat_s3XPb [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS (GHC.Base.Maybe a_X3L7T)
          [LclId] =
              [$dRead_s3XPa] \r [eta_B1]
                  GHC.Read.$fReadMaybe_$creadsPrec $dRead_s3XPa eta_B1;
        } in  GHC.Read.C:Read [sat_s3XPb sat_s3XPc sat_s3XPd sat_s3XPe];

GHC.Read.$fReadOrdering4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "LT"#;

GHC.Read.$fReadOrdering3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Read.$fReadOrdering4;

GHC.Read.$fReadOrdering6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GT"#;

GHC.Read.$fReadOrdering5 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Read.$fReadOrdering6;

GHC.Read.$fReadOrdering8 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "EQ"#;

GHC.Read.$fReadOrdering7 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Read.$fReadOrdering8;

GHC.Read.$w$creadPrec2 [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (GHC.Types.Ordering -> Text.ParserCombinators.ReadP.P b1)
     -> (# GHC.Base.String -> Text.ParserCombinators.ReadP.P b1 #)
[GblId, Arity=1, Str=<L,C(U)>, Unf=OtherCon []] =
    [] \r [w_s3XPf]
        let {
          lvl116_s3XPg [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3Muw
          [LclId] =
              [w_s3XPf] \u []
                  let {
                    lvl2_s3XPh [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3Muw
                    [LclId] =
                        [w_s3XPf] \u [] w_s3XPf GHC.Types.EQ; } in
                  let {
                    lvl3_s3XPi [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3Muw
                    [LclId] =
                        [w_s3XPf] \u [] w_s3XPf GHC.Types.GT; } in
                  let {
                    lvl4_s3XPj [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3Muw
                    [LclId] =
                        [w_s3XPf] \u [] w_s3XPf GHC.Types.LT; } in
                  let {
                    w2_s3XPk
                      :: Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.P b1_s3Muw
                    [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                        [lvl2_s3XPh lvl3_s3XPi lvl4_s3XPj] \r [a1_s3XPl]
                            case a1_s3XPl of {
                              __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                              Text.Read.Lex.Ident s_s3XPn ->
                                  case GHC.Base.eqString s_s3XPn GHC.Read.$fReadOrdering7 of {
                                    GHC.Types.False ->
                                        case GHC.Base.eqString s_s3XPn GHC.Read.$fReadOrdering5 of {
                                          GHC.Types.False ->
                                              case
                                                  GHC.Base.eqString s_s3XPn GHC.Read.$fReadOrdering3
                                              of
                                              { GHC.Types.False ->
                                                    Text.ParserCombinators.ReadP.Fail [];
                                                GHC.Types.True -> lvl4_s3XPj;
                                              };
                                          GHC.Types.True -> lvl3_s3XPi;
                                        };
                                    GHC.Types.True -> lvl2_s3XPh;
                                  };
                            }; } in
                  let {
                    lvl117_s3XPr [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3Muw
                    [LclId] =
                        [w2_s3XPk] \u [] w2_s3XPk Text.Read.Lex.EOF; } in
                  let {
                    sat_s3XPy [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_s3Muw
                    [LclId] =
                        [w2_s3XPk] \u [] Text.Read.Lex.expect2 w2_s3XPk; } in
                  let {
                    sat_s3XPw [Occ=OnceL]
                      :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3Muw
                    [LclId] =
                        [lvl117_s3XPr] \r [a3_s3XPs]
                            case a3_s3XPs of {
                              [] -> lvl117_s3XPr;
                              : _ [Occ=Dead] _ [Occ=Dead] ->
                                  Text.ParserCombinators.ReadP.Fail [];
                            }; } in
                  let {
                    sat_s3XPx [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_s3Muw
                    [LclId] =
                        CCCS Text.ParserCombinators.ReadP.Look! [sat_s3XPw];
                  } in 
                    Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                        sat_s3XPx sat_s3XPy; } in
        let {
          k_s3XPz [Occ=OnceL, Dmd=<L,C(U)>]
            :: () -> Text.ParserCombinators.ReadP.P b1_s3Muw
          [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
              [lvl116_s3XPg] \r [a3_s3XPA] lvl116_s3XPg; } in
        let {
          sat_s3XPC [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3Muw
          [LclId] =
              [k_s3XPz] \r [a_s3XPB]
                  Text.ParserCombinators.ReadP.skipSpaces2 a_s3XPB k_s3XPz;
        } in  Unit# [sat_s3XPC];

GHC.Read.$fReadOrdering2 [InlPrag=NOUSERINLINE[0]]
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        (GHC.Types.Ordering -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=2, Str=<L,A><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [w_s3XPD w1_s3XPE]
        case GHC.Read.$w$creadPrec2 w1_s3XPE of {
          Unit# ww1_s3XPG [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3XPG];
        };

GHC.Read.$fReadOrdering1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Types.Ordering -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Read.list3 GHC.Read.$fReadOrdering2 eta_B2 eta_B1;

GHC.Read.$fReadOrdering_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.Types.Ordering
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s3XPH]
        let {
          sat_s3XPI [Occ=Once]
            :: Text.ParserCombinators.ReadP.P GHC.Types.Ordering
          [LclId] =
              [n_s3XPH] \u []
                  GHC.Read.list3
                      GHC.Read.$fReadOrdering2
                      n_s3XPH
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XPI;

GHC.Read.$fReadOrdering_$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec [GHC.Types.Ordering]
[GblId] =
    [] \u [] GHC.Read.list GHC.Read.$fReadOrdering1;

GHC.Read.$fReadOrdering9
  :: Text.ParserCombinators.ReadP.P [GHC.Types.Ordering]
[GblId] =
    [] \u []
        GHC.Read.$fReadOrdering_$creadListPrec
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fReadOrdering_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.Types.Ordering]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.$fReadOrdering9 eta_B1;

GHC.Read.$fReadOrdering [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.Types.Ordering
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fReadOrdering_$creadsPrec
                                    GHC.Read.$fReadOrdering_$creadList
                                    GHC.Read.$fReadOrdering1
                                    GHC.Read.$fReadOrdering_$creadListPrec];

GHC.Read.$fReadBool4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "True"#;

GHC.Read.$fReadBool3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Read.$fReadBool4;

GHC.Read.$fReadBool6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "False"#;

GHC.Read.$fReadBool5 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Read.$fReadBool6;

GHC.Read.$w$creadPrec [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (GHC.Types.Bool -> Text.ParserCombinators.ReadP.P b1)
     -> (# GHC.Base.String -> Text.ParserCombinators.ReadP.P b1 #)
[GblId, Arity=1, Str=<L,C(U)>, Unf=OtherCon []] =
    [] \r [w_s3XPJ]
        let {
          lvl116_s3XPK [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3MuE
          [LclId] =
              [w_s3XPJ] \u []
                  let {
                    lvl2_s3XPL [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3MuE
                    [LclId] =
                        [w_s3XPJ] \u [] w_s3XPJ GHC.Types.False; } in
                  let {
                    lvl3_s3XPM [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3MuE
                    [LclId] =
                        [w_s3XPJ] \u [] w_s3XPJ GHC.Types.True; } in
                  let {
                    sat_s3XPX [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_s3MuE
                    [LclId] =
                        [lvl2_s3XPL lvl3_s3XPM] \u []
                            let {
                              sat_s3XPW [Occ=Once]
                                :: Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.P b1_s3MuE
                              [LclId] =
                                  [lvl2_s3XPL lvl3_s3XPM] \r [a1_s3XPR]
                                      case a1_s3XPR of {
                                        __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                                        Text.Read.Lex.Ident s_s3XPT ->
                                            case GHC.Base.eqString s_s3XPT GHC.Read.$fReadBool5 of {
                                              GHC.Types.False ->
                                                  case
                                                      GHC.Base.eqString s_s3XPT GHC.Read.$fReadBool3
                                                  of
                                                  { GHC.Types.False ->
                                                        Text.ParserCombinators.ReadP.Fail [];
                                                    GHC.Types.True -> lvl3_s3XPM;
                                                  };
                                              GHC.Types.True -> lvl2_s3XPL;
                                            };
                                      };
                            } in  Text.Read.Lex.expect2 sat_s3XPW; } in
                  let {
                    sat_s3XPP [Occ=OnceL]
                      :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3MuE
                    [LclId] =
                        [] \r [a3_s3XPN]
                            case a3_s3XPN of {
                              __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                            }; } in
                  let {
                    sat_s3XPQ [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_s3MuE
                    [LclId] =
                        CCCS Text.ParserCombinators.ReadP.Look! [sat_s3XPP];
                  } in 
                    Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                        sat_s3XPQ sat_s3XPX; } in
        let {
          k_s3XPY [Occ=OnceL, Dmd=<L,C(U)>]
            :: () -> Text.ParserCombinators.ReadP.P b1_s3MuE
          [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
              [lvl116_s3XPK] \r [a3_s3XPZ] lvl116_s3XPK; } in
        let {
          sat_s3XQ1 [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3MuE
          [LclId] =
              [k_s3XPY] \r [a_s3XQ0]
                  Text.ParserCombinators.ReadP.skipSpaces2 a_s3XQ0 k_s3XPY;
        } in  Unit# [sat_s3XQ1];

GHC.Read.$fReadBool2 [InlPrag=NOUSERINLINE[0]]
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        (GHC.Types.Bool -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=2, Str=<L,A><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [w_s3XQ2 w1_s3XQ3]
        case GHC.Read.$w$creadPrec w1_s3XQ3 of {
          Unit# ww1_s3XQ5 [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3XQ5];
        };

GHC.Read.$fReadBool1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Types.Bool -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Read.list3 GHC.Read.$fReadBool2 eta_B2 eta_B1;

GHC.Read.$fReadBool_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.Types.Bool
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s3XQ6]
        let {
          sat_s3XQ7 [Occ=Once]
            :: Text.ParserCombinators.ReadP.P GHC.Types.Bool
          [LclId] =
              [n_s3XQ6] \u []
                  GHC.Read.list3
                      GHC.Read.$fReadBool2
                      n_s3XQ6
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XQ7;

GHC.Read.$fReadBool_$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec [GHC.Types.Bool]
[GblId] =
    [] \u [] GHC.Read.list GHC.Read.$fReadBool1;

GHC.Read.$fReadBool7
  :: Text.ParserCombinators.ReadP.P [GHC.Types.Bool]
[GblId] =
    [] \u []
        GHC.Read.$fReadBool_$creadListPrec
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fReadBool_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.Types.Bool]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.$fReadBool7 eta_B1;

GHC.Read.$fReadBool [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.Types.Bool
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fReadBool_$creadsPrec
                                    GHC.Read.$fReadBool_$creadList
                                    GHC.Read.$fReadBool1
                                    GHC.Read.$fReadBool_$creadListPrec];

GHC.Read.$w$creadPrec1 [InlPrag=NOUSERINLINE[0]]
  :: forall b1.
     (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
     -> (# GHC.Base.String -> Text.ParserCombinators.ReadP.P b1 #)
[GblId, Arity=1, Str=<L,C(U)>, Unf=OtherCon []] =
    [] \r [w_s3XQ8]
        let {
          lvl116_s3XQ9 [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b1_s3MuL
          [LclId] =
              [w_s3XQ8] \u []
                  let {
                    sat_s3XQe [Occ=Once] :: Text.ParserCombinators.ReadP.P b1_s3MuL
                    [LclId] =
                        [w_s3XQ8] \u []
                            let {
                              sat_s3XQd [Occ=Once]
                                :: Text.Read.Lex.Lexeme -> Text.ParserCombinators.ReadP.P b1_s3MuL
                              [LclId] =
                                  [w_s3XQ8] \r [a1_s3XQa]
                                      case a1_s3XQa of {
                                        __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                                        Text.Read.Lex.Char c_s3XQc [Occ=Once] -> w_s3XQ8 c_s3XQc;
                                      };
                            } in  Text.Read.Lex.expect2 sat_s3XQd;
                  } in 
                    Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                        GHC.Read.$fReadChar3 sat_s3XQe; } in
        let {
          k_s3XQf [Occ=OnceL, Dmd=<L,C(U)>]
            :: () -> Text.ParserCombinators.ReadP.P b1_s3MuL
          [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
              [lvl116_s3XQ9] \r [a3_s3XQg] lvl116_s3XQ9; } in
        let {
          sat_s3XQi [Occ=Once]
            :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b1_s3MuL
          [LclId] =
              [k_s3XQf] \r [a_s3XQh]
                  Text.ParserCombinators.ReadP.skipSpaces2 a_s3XQh k_s3XQf;
        } in  Unit# [sat_s3XQi];

GHC.Read.$fReadChar7 [InlPrag=NOUSERINLINE[0]]
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId, Arity=2, Str=<L,A><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [w_s3XQj w1_s3XQk]
        case GHC.Read.$w$creadPrec1 w1_s3XQk of {
          Unit# ww1_s3XQm [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3XQm];
        };

GHC.Read.$fReadChar6
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Types.Char -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Read.list3 GHC.Read.$fReadChar7 eta_B2 eta_B1;

GHC.Read.$fReadInteger2
  :: Text.Read.Lex.Lexeme
     -> Text.ParserCombinators.ReadPrec.ReadPrec
          GHC.Integer.Type.Integer
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3XQn]
        case ds_s3XQn of {
          __DEFAULT ->
              Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4;
          Text.Read.Lex.Number n_s3XQp [Occ=Once] ->
              case Text.Read.Lex.numberToInteger n_s3XQp of {
                GHC.Base.Nothing ->
                    Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4;
                GHC.Base.Just i_s3XQr [Occ=OnceL] ->
                    let {
                      sat_s3XQu [Occ=Once]
                        :: Text.ParserCombinators.ReadPrec.Prec
                           -> forall b.
                              (GHC.Integer.Type.Integer -> Text.ParserCombinators.ReadP.P b)
                              -> Text.ParserCombinators.ReadP.P b
                      [LclId] =
                          [i_s3XQr] \r [ds1_s3XQs k_s3XQt] k_s3XQt i_s3XQr;
                    } in  sat_s3XQu;
              };
        };

GHC.Read.$fReadInteger1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Integer.Type.Integer -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Read.$fReadInteger_$sreadNumber
            GHC.Read.$fReadInteger2 eta_B2 eta_B1;

GHC.Read.$fReadInteger_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.Integer.Type.Integer
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s3XQv]
        let {
          sat_s3XQw [Occ=Once]
            :: Text.ParserCombinators.ReadP.P GHC.Integer.Type.Integer
          [LclId] =
              [n_s3XQv] \u []
                  GHC.Read.$fReadInteger_$sreadNumber
                      GHC.Read.$fReadInteger2
                      n_s3XQv
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XQw;

GHC.Read.$fReadInteger_$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec
       [GHC.Integer.Type.Integer]
[GblId] =
    [] \u [] GHC.Read.list GHC.Read.$fReadInteger1;

GHC.Read.$fReadInteger3
  :: Text.ParserCombinators.ReadP.P [GHC.Integer.Type.Integer]
[GblId] =
    [] \u []
        GHC.Read.$fReadInteger_$creadListPrec
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fReadInteger_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.Integer.Type.Integer]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.$fReadInteger3 eta_B1;

GHC.Read.$fReadInteger [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.Integer.Type.Integer
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fReadInteger_$creadsPrec
                                    GHC.Read.$fReadInteger_$creadList
                                    GHC.Read.$fReadInteger1
                                    GHC.Read.$fReadInteger_$creadListPrec];

GHC.Read.$fReadWord64_go [Occ=LoopBreaker]
  :: [(GHC.Integer.Type.Integer, GHC.Base.String)]
     -> [(GHC.Word.Word64, GHC.Base.String)]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3XQx]
        case ds_s3XQx of {
          [] -> [] [];
          : y_s3XQz [Occ=Once!] ys_s3XQA [Occ=Once] ->
              case y_s3XQz of {
                (,) x_s3XQC [Occ=Once] r_s3XQD [Occ=Once] ->
                    let {
                      sat_s3XQG [Occ=Once] :: [(GHC.Word.Word64, GHC.Base.String)]
                      [LclId] =
                          [ys_s3XQA] \u [] GHC.Read.$fReadWord64_go ys_s3XQA; } in
                    let {
                      sat_s3XQE [Occ=Once] :: GHC.Word.Word64
                      [LclId] =
                          [x_s3XQC] \u [] GHC.Word.$fNumWord64_$cfromInteger x_s3XQC; } in
                    let {
                      sat_s3XQF [Occ=Once] :: (GHC.Word.Word64, GHC.Base.String)
                      [LclId] =
                          CCCS (,)! [sat_s3XQE r_s3XQD];
                    } in  : [sat_s3XQF sat_s3XQG];
              };
        };

GHC.Read.$fReadWord64_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.Word.Word64
[GblId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [p_s3XQH s_s3XQI]
        case
            GHC.Read.$fReadInteger_$sreadNumber
                GHC.Read.$fReadInteger2
                p_s3XQH
                Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
        of
        sat_s3XQJ
        { __DEFAULT ->
              case
                  Text.ParserCombinators.ReadP.run sat_s3XQJ s_s3XQI
              of
              sat_s3XQK
              { __DEFAULT -> GHC.Read.$fReadWord64_go sat_s3XQK;
              };
        };

GHC.Read.$fReadWord13
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Word.Word64 -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,U><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s3XQL eta_s3XQM]
        let {
          sat_s3XQN [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS GHC.Word.Word64
          [LclId] =
              [n_s3XQL] \r [eta_B1]
                  GHC.Read.$fReadWord64_$creadsPrec n_s3XQL eta_B1;
        } in 
          case
              Text.ParserCombinators.ReadP.$wreadS_to_P sat_s3XQN eta_s3XQM
          of
          { Unit# ww1_s3XQP [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3XQP];
          };

GHC.Read.$fReadWord12
  :: Text.ParserCombinators.ReadP.P [GHC.Word.Word64]
[GblId] =
    [] \u []
        GHC.Read.list
            GHC.Read.$fReadWord13
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fReadWord64_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.Word.Word64]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.$fReadWord12 eta_B1;

GHC.Read.$fReadWord11
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        ([GHC.Word.Word64] -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,A><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s3XQQ w1_s3XQR]
        case
            Text.ParserCombinators.ReadP.$wreadS_to_P
                GHC.Read.$fReadWord64_$creadList w1_s3XQR
        of
        { Unit# ww1_s3XQT [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3XQT];
        };

GHC.Read.$fReadWord64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.Word.Word64
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fReadWord64_$creadsPrec
                                    GHC.Read.$fReadWord64_$creadList
                                    GHC.Read.$fReadWord13
                                    GHC.Read.$fReadWord11];

GHC.Read.$fReadWord_go [Occ=LoopBreaker]
  :: [(GHC.Integer.Type.Integer, GHC.Base.String)]
     -> [(GHC.Types.Word, GHC.Base.String)]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3XQU]
        case ds_s3XQU of {
          [] -> [] [];
          : y_s3XQW [Occ=Once!] ys_s3XQX [Occ=Once] ->
              case y_s3XQW of {
                (,) x_s3XQZ [Occ=Once] r_s3XR0 [Occ=Once] ->
                    let {
                      sat_s3XR3 [Occ=Once] :: [(GHC.Types.Word, GHC.Base.String)]
                      [LclId] =
                          [ys_s3XQX] \u [] GHC.Read.$fReadWord_go ys_s3XQX; } in
                    let {
                      sat_s3XR1 [Occ=Once] :: GHC.Types.Word
                      [LclId] =
                          [x_s3XQZ] \u [] GHC.Num.$fNumWord_$cfromInteger x_s3XQZ; } in
                    let {
                      sat_s3XR2 [Occ=Once] :: (GHC.Types.Word, GHC.Base.String)
                      [LclId] =
                          CCCS (,)! [sat_s3XR1 r_s3XR0];
                    } in  : [sat_s3XR2 sat_s3XR3];
              };
        };

GHC.Read.$fReadWord_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.Types.Word
[GblId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [p_s3XR4 s_s3XR5]
        case
            GHC.Read.$fReadInteger_$sreadNumber
                GHC.Read.$fReadInteger2
                p_s3XR4
                Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
        of
        sat_s3XR6
        { __DEFAULT ->
              case
                  Text.ParserCombinators.ReadP.run sat_s3XR6 s_s3XR5
              of
              sat_s3XR7
              { __DEFAULT -> GHC.Read.$fReadWord_go sat_s3XR7;
              };
        };

GHC.Read.$fReadWord3
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Types.Word -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,U><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s3XR8 eta_s3XR9]
        let {
          sat_s3XRa [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS GHC.Types.Word
          [LclId] =
              [n_s3XR8] \r [eta_B1]
                  GHC.Read.$fReadWord_$creadsPrec n_s3XR8 eta_B1;
        } in 
          case
              Text.ParserCombinators.ReadP.$wreadS_to_P sat_s3XRa eta_s3XR9
          of
          { Unit# ww1_s3XRc [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3XRc];
          };

GHC.Read.$fReadWord2
  :: Text.ParserCombinators.ReadP.P [GHC.Types.Word]
[GblId] =
    [] \u []
        GHC.Read.list
            GHC.Read.$fReadWord3
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fReadWord_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.Types.Word]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.$fReadWord2 eta_B1;

GHC.Read.$fReadWord1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        ([GHC.Types.Word] -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,A><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s3XRd w1_s3XRe]
        case
            Text.ParserCombinators.ReadP.$wreadS_to_P
                GHC.Read.$fReadWord_$creadList w1_s3XRe
        of
        { Unit# ww1_s3XRg [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3XRg];
        };

GHC.Read.$fReadWord [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.Types.Word
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fReadWord_$creadsPrec
                                    GHC.Read.$fReadWord_$creadList
                                    GHC.Read.$fReadWord3
                                    GHC.Read.$fReadWord1];

GHC.Read.$fReadInt2
  :: Text.Read.Lex.Lexeme
     -> Text.ParserCombinators.ReadPrec.ReadPrec GHC.Types.Int
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3XRh]
        case ds_s3XRh of {
          __DEFAULT ->
              Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4;
          Text.Read.Lex.Number n_s3XRj [Occ=Once] ->
              case Text.Read.Lex.numberToInteger n_s3XRj of {
                GHC.Base.Nothing ->
                    Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4;
                GHC.Base.Just i_s3XRl [Occ=Once] ->
                    let {
                      x_s3XRm [Occ=OnceL] :: GHC.Types.Int
                      [LclId] =
                          [i_s3XRl] \u []
                              case GHC.Integer.Type.integerToInt i_s3XRl of wild2_s3XRn {
                                __DEFAULT -> GHC.Types.I# [wild2_s3XRn];
                              }; } in
                    let {
                      sat_s3XRq [Occ=Once]
                        :: Text.ParserCombinators.ReadPrec.Prec
                           -> forall b.
                              (GHC.Types.Int -> Text.ParserCombinators.ReadP.P b)
                              -> Text.ParserCombinators.ReadP.P b
                      [LclId] =
                          [x_s3XRm] \r [ds1_s3XRo k_s3XRp] k_s3XRp x_s3XRm;
                    } in  sat_s3XRq;
              };
        };

GHC.Read.$fReadInt1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Types.Int -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Read.$fReadInt_$sreadNumber GHC.Read.$fReadInt2 eta_B2 eta_B1;

GHC.Read.$fReadDouble_x1 :: GHC.Types.Double
[GblId] =
    [] \u []
        case /## [0.0## 0.0##] of wild2_s3XRr {
          __DEFAULT -> GHC.Types.D# [wild2_s3XRr];
        };

GHC.Read.$fReadDouble3
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Types.Double -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,A><C(S),1*C1(U)>, Unf=OtherCon []] =
    [] \r [ds_s3XRs k_s3XRt] k_s3XRt GHC.Read.$fReadDouble_x1;

GHC.Read.$fReadDouble5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "NaN"#;

GHC.Read.$fReadDouble4 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Read.$fReadDouble5;

GHC.Read.$fReadDouble_x :: GHC.Types.Double
[GblId] =
    [] \u []
        case /## [1.0## 0.0##] of wild2_s3XRu {
          __DEFAULT -> GHC.Types.D# [wild2_s3XRu];
        };

GHC.Read.$fReadDouble2
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Types.Double -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,A><C(S),1*C1(U)>, Unf=OtherCon []] =
    [] \r [ds_s3XRv k_s3XRw] k_s3XRw GHC.Read.$fReadDouble_x;

GHC.Read.$fReadDouble7 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Infinity"#;

GHC.Read.$fReadDouble6 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Read.$fReadDouble7;

GHC.Read.$fReadDouble_$sconvertFrac
  :: Text.Read.Lex.Lexeme
     -> Text.ParserCombinators.ReadPrec.ReadPrec GHC.Types.Double
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [eta_s3XRx]
        case eta_s3XRx of {
          __DEFAULT ->
              Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4;
          Text.Read.Lex.Ident ds_s3XRz ->
              case GHC.Base.eqString ds_s3XRz GHC.Read.$fReadDouble6 of {
                GHC.Types.False ->
                    case GHC.Base.eqString ds_s3XRz GHC.Read.$fReadDouble4 of {
                      GHC.Types.False ->
                          Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4;
                      GHC.Types.True -> GHC.Read.$fReadDouble3;
                    };
                GHC.Types.True -> GHC.Read.$fReadDouble2;
              };
          Text.Read.Lex.Number n_s3XRC [Occ=Once] ->
              case
                  Text.Read.Lex.$wnumberToRangedRational
                      GHC.Float.$fRealFloatDouble3 GHC.Float.$fRealFloatDouble2 n_s3XRC
              of
              { GHC.Base.Nothing -> GHC.Read.$fReadDouble2;
                GHC.Base.Just rat_s3XRE [Occ=Once!] ->
                    let {
                      x_s3XRF [Occ=OnceL] :: GHC.Types.Double
                      [LclId] =
                          [rat_s3XRE] \u []
                              case rat_s3XRE of {
                                GHC.Real.:% n1_s3XRH [Occ=Once] d_s3XRI [Occ=Once] ->
                                    GHC.Float.rationalToDouble n1_s3XRH d_s3XRI;
                              }; } in
                    let {
                      sat_s3XRL [Occ=Once]
                        :: Text.ParserCombinators.ReadPrec.Prec
                           -> forall b.
                              (GHC.Types.Double -> Text.ParserCombinators.ReadP.P b)
                              -> Text.ParserCombinators.ReadP.P b
                      [LclId] =
                          [x_s3XRF] \r [ds_s3XRJ k_s3XRK] k_s3XRK x_s3XRF;
                    } in  sat_s3XRL;
              };
        };

GHC.Read.$fReadFloat_x1 :: GHC.Types.Float
[GblId] =
    [] \u []
        case divideFloat# [0.0# 0.0#] of wild2_s3XRM {
          __DEFAULT -> GHC.Types.F# [wild2_s3XRM];
        };

GHC.Read.$fReadFloat3
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Types.Float -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,A><C(S),1*C1(U)>, Unf=OtherCon []] =
    [] \r [ds_s3XRN k_s3XRO] k_s3XRO GHC.Read.$fReadFloat_x1;

GHC.Read.$fReadFloat_x :: GHC.Types.Float
[GblId] =
    [] \u []
        case divideFloat# [1.0# 0.0#] of wild2_s3XRP {
          __DEFAULT -> GHC.Types.F# [wild2_s3XRP];
        };

GHC.Read.$fReadFloat2
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Types.Float -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,A><C(S),1*C1(U)>, Unf=OtherCon []] =
    [] \r [ds_s3XRQ k_s3XRR] k_s3XRR GHC.Read.$fReadFloat_x;

GHC.Read.$fReadFloat_$sconvertFrac
  :: Text.Read.Lex.Lexeme
     -> Text.ParserCombinators.ReadPrec.ReadPrec GHC.Types.Float
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [eta_s3XRS]
        case eta_s3XRS of {
          __DEFAULT ->
              Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4;
          Text.Read.Lex.Ident ds_s3XRU ->
              case GHC.Base.eqString ds_s3XRU GHC.Read.$fReadDouble6 of {
                GHC.Types.False ->
                    case GHC.Base.eqString ds_s3XRU GHC.Read.$fReadDouble4 of {
                      GHC.Types.False ->
                          Text.ParserCombinators.ReadPrec.$fAlternativeReadPrec4;
                      GHC.Types.True -> GHC.Read.$fReadFloat3;
                    };
                GHC.Types.True -> GHC.Read.$fReadFloat2;
              };
          Text.Read.Lex.Number n_s3XRX [Occ=Once] ->
              case
                  Text.Read.Lex.$wnumberToRangedRational
                      GHC.Float.$fRealFloatFloat3 GHC.Float.$fRealFloatFloat2 n_s3XRX
              of
              { GHC.Base.Nothing -> GHC.Read.$fReadFloat2;
                GHC.Base.Just rat_s3XRZ [Occ=Once!] ->
                    let {
                      x_s3XS0 [Occ=OnceL] :: GHC.Types.Float
                      [LclId] =
                          [rat_s3XRZ] \u []
                              case rat_s3XRZ of {
                                GHC.Real.:% n1_s3XS2 [Occ=Once] d_s3XS3 [Occ=Once] ->
                                    GHC.Float.rationalToFloat n1_s3XS2 d_s3XS3;
                              }; } in
                    let {
                      sat_s3XS6 [Occ=Once]
                        :: Text.ParserCombinators.ReadPrec.Prec
                           -> forall b.
                              (GHC.Types.Float -> Text.ParserCombinators.ReadP.P b)
                              -> Text.ParserCombinators.ReadP.P b
                      [LclId] =
                          [x_s3XS0] \r [ds_s3XS4 k_s3XS5] k_s3XS5 x_s3XS0;
                    } in  sat_s3XS6;
              };
        };

GHC.Read.$fReadDouble1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Types.Double -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Read.$fReadDouble_$sreadNumber
            GHC.Read.$fReadDouble_$sconvertFrac eta_B2 eta_B1;

GHC.Read.$fReadDouble_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.Types.Double
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s3XS7]
        let {
          sat_s3XS8 [Occ=Once]
            :: Text.ParserCombinators.ReadP.P GHC.Types.Double
          [LclId] =
              [n_s3XS7] \u []
                  GHC.Read.$fReadDouble_$sreadNumber
                      GHC.Read.$fReadDouble_$sconvertFrac
                      n_s3XS7
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XS8;

GHC.Read.$fReadDouble_$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec [GHC.Types.Double]
[GblId] =
    [] \u [] GHC.Read.list GHC.Read.$fReadDouble1;

GHC.Read.$fReadDouble8
  :: Text.ParserCombinators.ReadP.P [GHC.Types.Double]
[GblId] =
    [] \u []
        GHC.Read.$fReadDouble_$creadListPrec
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fReadDouble_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.Types.Double]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.$fReadDouble8 eta_B1;

GHC.Read.$fReadDouble [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.Types.Double
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fReadDouble_$creadsPrec
                                    GHC.Read.$fReadDouble_$creadList
                                    GHC.Read.$fReadDouble1
                                    GHC.Read.$fReadDouble_$creadListPrec];

GHC.Read.$fReadFloat1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Types.Float -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Read.$fReadFloat_$sreadNumber
            GHC.Read.$fReadFloat_$sconvertFrac eta_B2 eta_B1;

GHC.Read.$fReadFloat_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.Types.Float
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s3XS9]
        let {
          sat_s3XSa [Occ=Once]
            :: Text.ParserCombinators.ReadP.P GHC.Types.Float
          [LclId] =
              [n_s3XS9] \u []
                  GHC.Read.$fReadFloat_$sreadNumber
                      GHC.Read.$fReadFloat_$sconvertFrac
                      n_s3XS9
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XSa;

GHC.Read.$fReadFloat_$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec [GHC.Types.Float]
[GblId] =
    [] \u [] GHC.Read.list GHC.Read.$fReadFloat1;

GHC.Read.$fReadFloat4
  :: Text.ParserCombinators.ReadP.P [GHC.Types.Float]
[GblId] =
    [] \u []
        GHC.Read.$fReadFloat_$creadListPrec
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fReadFloat_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.Types.Float]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.$fReadFloat4 eta_B1;

GHC.Read.$fReadFloat [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.Types.Float
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fReadFloat_$creadsPrec
                                    GHC.Read.$fReadFloat_$creadList
                                    GHC.Read.$fReadFloat1
                                    GHC.Read.$fReadFloat_$creadListPrec];

GHC.Read.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.Read.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Read.$trModule4];

GHC.Read.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.Read"#;

GHC.Read.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Read.$trModule2];

GHC.Read.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.Read.$trModule3
                                     GHC.Read.$trModule1];

$krep_r3N5l :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcChar
                                              GHC.Types.[]];

$krep1_r3N5m :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcInt
                                              GHC.Types.[]];

$krep2_r3N5n :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcConstraint
                                              GHC.Types.[]];

$krep3_r3N5o :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r3N5l GHC.Types.[]];

$krep4_r3N5p :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep3_r3N5o];

GHC.Read.$tcRead1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.Types.krep$*
                                         $krep2_r3N5n];

$krep5_r3N5q :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

$krep6_r3N5r :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep4_r3N5p GHC.Types.[]];

$krep7_r3N5s :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep5_r3N5q $krep6_r3N5r];

$krep8_r3N5t :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Tuple.$tc(,)
                                              $krep7_r3N5s];

$krep9_r3N5u :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep8_r3N5t GHC.Types.[]];

$krep10_r3N5v :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep9_r3N5u];

$krep11_r3N5w :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep4_r3N5p $krep10_r3N5v];

$krep12_r3N5x :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep1_r3N5m $krep11_r3N5w];

$krep13_r3N5y :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep5_r3N5q GHC.Types.[]];

$krep14_r3N5z :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep13_r3N5y];

$krep15_r3N5A :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep14_r3N5z $krep6_r3N5r];

$krep16_r3N5B :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Tuple.$tc(,)
                                              $krep15_r3N5A];

$krep17_r3N5C :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep16_r3N5B GHC.Types.[]];

$krep18_r3N5D :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep17_r3N5C];

$krep19_r3N5E :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep4_r3N5p $krep18_r3N5D];

$krep20_r3N5F :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep14_r3N5z GHC.Types.[]];

$krep21_r3N5G :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Text.ParserCombinators.ReadPrec.$tcReadPrec
                                              $krep20_r3N5F];

$krep22_r3N5H :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [Text.ParserCombinators.ReadPrec.$tcReadPrec
                                              $krep13_r3N5y];

GHC.Read.$tcRead3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Read"#;

GHC.Read.$tcRead2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Read.$tcRead3];

GHC.Read.$tcRead :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2005723268194049725##
                                    6708234688584993214##
                                    GHC.Read.$trModule
                                    GHC.Read.$tcRead2
                                    0#
                                    GHC.Read.$tcRead1];

$krep23_r3N5I :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Read.$tcRead
                                              $krep13_r3N5y];

$krep24_r3N5J :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep21_r3N5G $krep23_r3N5I];

$krep25_r3N5K :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep22_r3N5H $krep24_r3N5J];

$krep26_r3N5L :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep19_r3N5E $krep25_r3N5K];

GHC.Read.$tc'C:Read1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep12_r3N5x $krep26_r3N5L];

GHC.Read.$tc'C:Read3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'C:Read"#;

GHC.Read.$tc'C:Read2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Read.$tc'C:Read3];

GHC.Read.$tc'C:Read :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [14808553548329602455##
                                    6533111827003124976##
                                    GHC.Read.$trModule
                                    GHC.Read.$tc'C:Read2
                                    1#
                                    GHC.Read.$tc'C:Read1];

GHC.Read.$fReadInt_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.Types.Int
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s3XSb]
        let {
          sat_s3XSc [Occ=Once]
            :: Text.ParserCombinators.ReadP.P GHC.Types.Int
          [LclId] =
              [n_s3XSb] \u []
                  GHC.Read.$fReadInt_$sreadNumber
                      GHC.Read.$fReadInt2
                      n_s3XSb
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XSc;

GHC.Read.$fReadInt_$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec [GHC.Types.Int]
[GblId] =
    [] \u [] GHC.Read.list GHC.Read.$fReadInt1;

GHC.Read.$fReadInt3
  :: Text.ParserCombinators.ReadP.P [GHC.Types.Int]
[GblId] =
    [] \u []
        GHC.Read.$fReadInt_$creadListPrec
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fReadInt_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.Types.Int]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.$fReadInt3 eta_B1;

GHC.Read.$fReadInt [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.Types.Int
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fReadInt_$creadsPrec
                                    GHC.Read.$fReadInt_$creadList
                                    GHC.Read.$fReadInt1
                                    GHC.Read.$fReadInt_$creadListPrec];

GHC.Read.$fReadWord32_go [Occ=LoopBreaker]
  :: [(GHC.Types.Int, GHC.Base.String)]
     -> [(GHC.Word.Word32, GHC.Base.String)]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3XSd]
        case ds_s3XSd of {
          [] -> [] [];
          : y_s3XSf [Occ=Once!] ys_s3XSg [Occ=Once] ->
              case y_s3XSf of {
                (,) x_s3XSi [Occ=Once!] r_s3XSj [Occ=Once] ->
                    let {
                      sat_s3XSq [Occ=Once] :: [(GHC.Word.Word32, GHC.Base.String)]
                      [LclId] =
                          [ys_s3XSg] \u [] GHC.Read.$fReadWord32_go ys_s3XSg; } in
                    let {
                      sat_s3XSo [Occ=Once] :: GHC.Word.Word32
                      [LclId] =
                          [x_s3XSi] \u []
                              case x_s3XSi of {
                                GHC.Types.I# x#_s3XSl [Occ=Once] ->
                                    case int2Word# [x#_s3XSl] of sat_s3XSm {
                                      __DEFAULT ->
                                          case narrow32Word# [sat_s3XSm] of sat_s3XSn {
                                            __DEFAULT -> GHC.Word.W32# [sat_s3XSn];
                                          };
                                    };
                              }; } in
                    let {
                      sat_s3XSp [Occ=Once] :: (GHC.Word.Word32, GHC.Base.String)
                      [LclId] =
                          CCCS (,)! [sat_s3XSo r_s3XSj];
                    } in  : [sat_s3XSp sat_s3XSq];
              };
        };

GHC.Read.$fReadWord32_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.Word.Word32
[GblId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [p_s3XSr s_s3XSs]
        case
            GHC.Read.$fReadInt_$sreadNumber
                GHC.Read.$fReadInt2
                p_s3XSr
                Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
        of
        sat_s3XSt
        { __DEFAULT ->
              case
                  Text.ParserCombinators.ReadP.run sat_s3XSt s_s3XSs
              of
              sat_s3XSu
              { __DEFAULT -> GHC.Read.$fReadWord32_go sat_s3XSu;
              };
        };

GHC.Read.$fReadWord10
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Word.Word32 -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,U><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s3XSv eta_s3XSw]
        let {
          sat_s3XSx [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS GHC.Word.Word32
          [LclId] =
              [n_s3XSv] \r [eta_B1]
                  GHC.Read.$fReadWord32_$creadsPrec n_s3XSv eta_B1;
        } in 
          case
              Text.ParserCombinators.ReadP.$wreadS_to_P sat_s3XSx eta_s3XSw
          of
          { Unit# ww1_s3XSz [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3XSz];
          };

GHC.Read.$fReadWord9
  :: Text.ParserCombinators.ReadP.P [GHC.Word.Word32]
[GblId] =
    [] \u []
        GHC.Read.list
            GHC.Read.$fReadWord10
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fReadWord32_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.Word.Word32]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.$fReadWord9 eta_B1;

GHC.Read.$fReadWord7
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        ([GHC.Word.Word32] -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,A><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s3XSA w1_s3XSB]
        case
            Text.ParserCombinators.ReadP.$wreadS_to_P
                GHC.Read.$fReadWord32_$creadList w1_s3XSB
        of
        { Unit# ww1_s3XSD [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3XSD];
        };

GHC.Read.$fReadWord32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.Word.Word32
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fReadWord32_$creadsPrec
                                    GHC.Read.$fReadWord32_$creadList
                                    GHC.Read.$fReadWord10
                                    GHC.Read.$fReadWord7];

GHC.Read.$fReadWord16_go [Occ=LoopBreaker]
  :: [(GHC.Types.Int, GHC.Base.String)]
     -> [(GHC.Word.Word16, GHC.Base.String)]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3XSE]
        case ds_s3XSE of {
          [] -> [] [];
          : y_s3XSG [Occ=Once!] ys_s3XSH [Occ=Once] ->
              case y_s3XSG of {
                (,) x_s3XSJ [Occ=Once!] r_s3XSK [Occ=Once] ->
                    let {
                      sat_s3XSR [Occ=Once] :: [(GHC.Word.Word16, GHC.Base.String)]
                      [LclId] =
                          [ys_s3XSH] \u [] GHC.Read.$fReadWord16_go ys_s3XSH; } in
                    let {
                      sat_s3XSP [Occ=Once] :: GHC.Word.Word16
                      [LclId] =
                          [x_s3XSJ] \u []
                              case x_s3XSJ of {
                                GHC.Types.I# x#_s3XSM [Occ=Once] ->
                                    case int2Word# [x#_s3XSM] of sat_s3XSN {
                                      __DEFAULT ->
                                          case narrow16Word# [sat_s3XSN] of sat_s3XSO {
                                            __DEFAULT -> GHC.Word.W16# [sat_s3XSO];
                                          };
                                    };
                              }; } in
                    let {
                      sat_s3XSQ [Occ=Once] :: (GHC.Word.Word16, GHC.Base.String)
                      [LclId] =
                          CCCS (,)! [sat_s3XSP r_s3XSK];
                    } in  : [sat_s3XSQ sat_s3XSR];
              };
        };

GHC.Read.$fReadWord16_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.Word.Word16
[GblId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [p_s3XSS s_s3XST]
        case
            GHC.Read.$fReadInt_$sreadNumber
                GHC.Read.$fReadInt2
                p_s3XSS
                Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
        of
        sat_s3XSU
        { __DEFAULT ->
              case
                  Text.ParserCombinators.ReadP.run sat_s3XSU s_s3XST
              of
              sat_s3XSV
              { __DEFAULT -> GHC.Read.$fReadWord16_go sat_s3XSV;
              };
        };

GHC.Read.$fReadWord6
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Word.Word16 -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,U><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s3XSW eta_s3XSX]
        let {
          sat_s3XSY [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS GHC.Word.Word16
          [LclId] =
              [n_s3XSW] \r [eta_B1]
                  GHC.Read.$fReadWord16_$creadsPrec n_s3XSW eta_B1;
        } in 
          case
              Text.ParserCombinators.ReadP.$wreadS_to_P sat_s3XSY eta_s3XSX
          of
          { Unit# ww1_s3XT0 [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3XT0];
          };

GHC.Read.$fReadWord5
  :: Text.ParserCombinators.ReadP.P [GHC.Word.Word16]
[GblId] =
    [] \u []
        GHC.Read.list
            GHC.Read.$fReadWord6
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fReadWord16_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.Word.Word16]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.$fReadWord5 eta_B1;

GHC.Read.$fReadWord4
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        ([GHC.Word.Word16] -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,A><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s3XT1 w1_s3XT2]
        case
            Text.ParserCombinators.ReadP.$wreadS_to_P
                GHC.Read.$fReadWord16_$creadList w1_s3XT2
        of
        { Unit# ww1_s3XT4 [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3XT4];
        };

GHC.Read.$fReadWord16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.Word.Word16
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fReadWord16_$creadsPrec
                                    GHC.Read.$fReadWord16_$creadList
                                    GHC.Read.$fReadWord6
                                    GHC.Read.$fReadWord4];

GHC.Read.$fReadWord8_go [Occ=LoopBreaker]
  :: [(GHC.Types.Int, GHC.Base.String)]
     -> [(GHC.Word.Word8, GHC.Base.String)]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3XT5]
        case ds_s3XT5 of {
          [] -> [] [];
          : y_s3XT7 [Occ=Once!] ys_s3XT8 [Occ=Once] ->
              case y_s3XT7 of {
                (,) x_s3XTa [Occ=Once!] r_s3XTb [Occ=Once] ->
                    let {
                      sat_s3XTi [Occ=Once] :: [(GHC.Word.Word8, GHC.Base.String)]
                      [LclId] =
                          [ys_s3XT8] \u [] GHC.Read.$fReadWord8_go ys_s3XT8; } in
                    let {
                      sat_s3XTg [Occ=Once] :: GHC.Word.Word8
                      [LclId] =
                          [x_s3XTa] \u []
                              case x_s3XTa of {
                                GHC.Types.I# x#_s3XTd [Occ=Once] ->
                                    case int2Word# [x#_s3XTd] of sat_s3XTe {
                                      __DEFAULT ->
                                          case narrow8Word# [sat_s3XTe] of sat_s3XTf {
                                            __DEFAULT -> GHC.Word.W8# [sat_s3XTf];
                                          };
                                    };
                              }; } in
                    let {
                      sat_s3XTh [Occ=Once] :: (GHC.Word.Word8, GHC.Base.String)
                      [LclId] =
                          CCCS (,)! [sat_s3XTg r_s3XTb];
                    } in  : [sat_s3XTh sat_s3XTi];
              };
        };

GHC.Read.$fReadWord8_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.Word.Word8
[GblId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [p_s3XTj s_s3XTk]
        case
            GHC.Read.$fReadInt_$sreadNumber
                GHC.Read.$fReadInt2
                p_s3XTj
                Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
        of
        sat_s3XTl
        { __DEFAULT ->
              case
                  Text.ParserCombinators.ReadP.run sat_s3XTl s_s3XTk
              of
              sat_s3XTm
              { __DEFAULT -> GHC.Read.$fReadWord8_go sat_s3XTm;
              };
        };

GHC.Read.$fReadWord17
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Word.Word8 -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,U><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s3XTn eta_s3XTo]
        let {
          sat_s3XTp [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS GHC.Word.Word8
          [LclId] =
              [n_s3XTn] \r [eta_B1]
                  GHC.Read.$fReadWord8_$creadsPrec n_s3XTn eta_B1;
        } in 
          case
              Text.ParserCombinators.ReadP.$wreadS_to_P sat_s3XTp eta_s3XTo
          of
          { Unit# ww1_s3XTr [Occ=Once] ->
                Text.ParserCombinators.ReadP.Look [ww1_s3XTr];
          };

GHC.Read.$fReadWord15
  :: Text.ParserCombinators.ReadP.P [GHC.Word.Word8]
[GblId] =
    [] \u []
        GHC.Read.list
            GHC.Read.$fReadWord17
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fReadWord8_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.Word.Word8]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.$fReadWord15 eta_B1;

GHC.Read.$fReadWord14
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        ([GHC.Word.Word8] -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Str=<L,A><L,C(U)>m2, Unf=OtherCon []] =
    [] \r [n_s3XTs w1_s3XTt]
        case
            Text.ParserCombinators.ReadP.$wreadS_to_P
                GHC.Read.$fReadWord8_$creadList w1_s3XTt
        of
        { Unit# ww1_s3XTv [Occ=Once] ->
              Text.ParserCombinators.ReadP.Look [ww1_s3XTv];
        };

GHC.Read.$fReadWord8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.Word.Word8
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fReadWord8_$creadsPrec
                                    GHC.Read.$fReadWord8_$creadList
                                    GHC.Read.$fReadWord17
                                    GHC.Read.$fReadWord14];

GHC.Read.$fReadChar_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.Types.Char
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s3XTw]
        let {
          sat_s3XTx [Occ=Once]
            :: Text.ParserCombinators.ReadP.P GHC.Types.Char
          [LclId] =
              [n_s3XTw] \u []
                  GHC.Read.list3
                      GHC.Read.$fReadChar7
                      n_s3XTw
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XTx;

GHC.Read.$fReadChar5
  :: Text.ParserCombinators.ReadPrec.ReadPrec [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.Read.list GHC.Read.$fReadChar6;

GHC.Read.$fReadChar2
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.Base.String
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s3XTy]
        let {
          ds3_s3XTz [Occ=OnceL, Dmd=<L,C(U)>]
            :: Text.ParserCombinators.ReadP.ReadP GHC.Base.String
          [LclId] =
              [n_s3XTy] \u [] GHC.Read.$fReadChar5 n_s3XTy; } in
        let {
          sat_s3XTN [Occ=Once]
            :: forall b.
               (GHC.Base.String -> Text.ParserCombinators.ReadP.P b)
               -> Text.ParserCombinators.ReadP.P b
          [LclId] =
              [ds3_s3XTz] \r [k_s3XTA]
                  let {
                    lvl116_s3XTB [Occ=OnceL] :: Text.ParserCombinators.ReadP.P b_a3nvJ
                    [LclId] =
                        [k_s3XTA] \u []
                            let {
                              sat_s3XTG [Occ=Once] :: Text.ParserCombinators.ReadP.P b_a3nvJ
                              [LclId] =
                                  [k_s3XTA] \u []
                                      let {
                                        sat_s3XTF [Occ=Once]
                                          :: Text.Read.Lex.Lexeme
                                             -> Text.ParserCombinators.ReadP.P b_a3nvJ
                                        [LclId] =
                                            [k_s3XTA] \r [a1_s3XTC]
                                                case a1_s3XTC of {
                                                  __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                                                  Text.Read.Lex.String s_s3XTE [Occ=Once] ->
                                                      k_s3XTA s_s3XTE;
                                                };
                                      } in  Text.Read.Lex.expect2 sat_s3XTF;
                            } in 
                              Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                  GHC.Read.$fReadChar3 sat_s3XTG; } in
                  let {
                    k1_s3XTH [Occ=OnceL, Dmd=<L,C(U)>]
                      :: () -> Text.ParserCombinators.ReadP.P b_a3nvJ
                    [LclId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
                        [lvl116_s3XTB] \r [a3_s3XTI] lvl116_s3XTB; } in
                  let {
                    sat_s3XTM [Occ=Once] :: Text.ParserCombinators.ReadP.P b_a3nvJ
                    [LclId] =
                        [ds3_s3XTz k_s3XTA] \u [] ds3_s3XTz k_s3XTA; } in
                  let {
                    sat_s3XTK [Occ=Once]
                      :: GHC.Base.String -> Text.ParserCombinators.ReadP.P b_a3nvJ
                    [LclId] =
                        [k1_s3XTH] \r [a_s3XTJ]
                            Text.ParserCombinators.ReadP.skipSpaces2 a_s3XTJ k1_s3XTH; } in
                  let {
                    sat_s3XTL [Occ=Once] :: Text.ParserCombinators.ReadP.P b_a3nvJ
                    [LclId] =
                        CCCS Text.ParserCombinators.ReadP.Look! [sat_s3XTK];
                  } in 
                    Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                        sat_s3XTL sat_s3XTM;
        } in  sat_s3XTN;

GHC.Read.$fReadChar1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Base.String -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Read.list3 GHC.Read.$fReadChar2 eta_B2 eta_B1;

GHC.Read.$fReadChar8
  :: Text.ParserCombinators.ReadP.P [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.Read.list3
            GHC.Read.$fReadChar2
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fReadChar_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.Types.Char]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.$fReadChar8 eta_B1;

GHC.Read.$fReadChar [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.Types.Char
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fReadChar_$creadsPrec
                                    GHC.Read.$fReadChar_$creadList
                                    GHC.Read.$fReadChar6
                                    GHC.Read.$fReadChar1];

GHC.Read.$fRead[]_$s$creadListPrec1
  :: Text.ParserCombinators.ReadPrec.ReadPrec [[GHC.Types.Char]]
[GblId] =
    [] \u [] GHC.Read.list GHC.Read.$fReadChar1;

GHC.Read.$fRead[]2
  :: Text.ParserCombinators.ReadP.P [[GHC.Types.Char]]
[GblId] =
    [] \u []
        GHC.Read.$fRead[]_$s$creadListPrec1
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fRead[]_$s$creadList1
  :: Text.ParserCombinators.ReadP.ReadS [[GHC.Types.Char]]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.$fRead[]2 eta_B1;

GHC.Read.$fRead[]_$s$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec [[GHC.Types.Int]]
[GblId] =
    [] \u [] GHC.Read.list GHC.Read.$fReadInt_$creadListPrec;

GHC.Read.$fRead[]1
  :: Text.ParserCombinators.ReadP.P [[GHC.Types.Int]]
[GblId] =
    [] \u []
        GHC.Read.$fRead[]_$s$creadListPrec
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fRead[]_$s$creadList
  :: Text.ParserCombinators.ReadP.ReadS [[GHC.Types.Int]]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.$fRead[]1 eta_B1;

GHC.Read.$fRead[]_$s$creadsPrec1
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS [GHC.Types.Char]
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s3XTO]
        let {
          sat_s3XTP [Occ=Once]
            :: Text.ParserCombinators.ReadP.P [GHC.Types.Char]
          [LclId] =
              [n_s3XTO] \u []
                  GHC.Read.list3
                      GHC.Read.$fReadChar2
                      n_s3XTO
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XTP;

GHC.Read.$fRead[]_$s$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS [GHC.Types.Int]
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s3XTQ]
        let {
          sat_s3XTR [Occ=Once]
            :: Text.ParserCombinators.ReadP.P [GHC.Types.Int]
          [LclId] =
              [n_s3XTQ] \u []
                  GHC.Read.$fReadInt_$creadListPrec
                      n_s3XTQ Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XTR;

GHC.Read.$fRead[]_$s$fRead[] [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read [GHC.Types.Int]
[GblId, Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fRead[]_$s$creadsPrec
                                    GHC.Read.$fRead[]_$s$creadList
                                    GHC.Read.$fReadInt_$creadListPrec
                                    GHC.Read.$fRead[]_$s$creadListPrec];

GHC.Read.$fRead[]_$s$fRead[]1 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read [GHC.Types.Char]
[GblId, Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fRead[]_$s$creadsPrec1
                                    GHC.Read.$fRead[]_$s$creadList1
                                    GHC.Read.$fReadChar1
                                    GHC.Read.$fRead[]_$s$creadListPrec1];

GHC.Read.$fRead[]_$s$creadsPrec2
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS [GHC.Base.String]
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s3XTS]
        let {
          sat_s3XTT [Occ=Once]
            :: Text.ParserCombinators.ReadP.P [GHC.Base.String]
          [LclId] =
              [n_s3XTS] \u []
                  GHC.Read.$fRead[]_$s$creadListPrec1
                      n_s3XTS Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XTT;

GHC.Read.$fRead[]_$creadsPrec
  :: forall a.
     GHC.Read.Read a =>
     GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS [a]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*U(A,A,A,1*C1(C1(U)))><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XTU eta_s3XTV]
        let {
          sat_s3XTW [Occ=Once] :: Text.ParserCombinators.ReadP.P [a_a3KVb]
          [LclId] =
              [$dRead_s3XTU eta_s3XTV] \u []
                  GHC.Read.readListPrec
                      $dRead_s3XTU
                      eta_s3XTV
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XTW;

GHC.Read.$fRead[]_$s$creadListPrec2
  :: Text.ParserCombinators.ReadPrec.ReadPrec [[GHC.Base.String]]
[GblId] =
    [] \u [] GHC.Read.list GHC.Read.$fRead[]_$s$creadListPrec1;

GHC.Read.$fRead[]_$creadListPrec
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadPrec.ReadPrec [[a]]
[GblId, Arity=1, Str=<L,1*U(A,A,A,1*C1(C(U)))>, Unf=OtherCon []] =
    [] \r [$dRead_s3XTX]
        let {
          sat_s3XTY [Occ=Once, Dmd=<L,1*C1(C(U))>]
            :: Text.ParserCombinators.ReadPrec.ReadPrec [a_a3KVb]
          [LclId] =
              [$dRead_s3XTX] \s [] GHC.Read.readListPrec $dRead_s3XTX;
        } in  GHC.Read.list sat_s3XTY;

GHC.Read.$fRead[]3
  :: Text.ParserCombinators.ReadP.P [[GHC.Base.String]]
[GblId] =
    [] \u []
        GHC.Read.$fRead[]_$s$creadListPrec2
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.Read.$fRead[]_$s$creadList2
  :: Text.ParserCombinators.ReadP.ReadS [[GHC.Base.String]]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.$fRead[]3 eta_B1;

GHC.Read.$fRead[]_$s$fRead[]2 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read [GHC.Base.String]
[GblId, Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.Read.$fRead[]_$s$creadsPrec2
                                    GHC.Read.$fRead[]_$s$creadList2
                                    GHC.Read.$fRead[]_$s$creadListPrec1
                                    GHC.Read.$fRead[]_$s$creadListPrec2];

GHC.Read.$fRead[]_$creadList
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadP.ReadS [[a]]
[GblId, Arity=1, Str=<L,1*U(A,A,A,1*C1(C(U)))>, Unf=OtherCon []] =
    [] \r [$dRead_s3XTZ]
        let {
          sat_s3XU1 [Occ=Once] :: Text.ParserCombinators.ReadP.P [[a_a3KVb]]
          [LclId] =
              [$dRead_s3XTZ] \u []
                  let {
                    sat_s3XU0 [Occ=Once, Dmd=<L,1*C1(C(U))>]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec [a_a3KVb]
                    [LclId] =
                        [$dRead_s3XTZ] \s [] GHC.Read.readListPrec $dRead_s3XTZ;
                  } in 
                    GHC.Read.list
                        sat_s3XU0
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XU1;

GHC.Read.$fRead[] [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Read.Read a => GHC.Read.Read [a]
[GblId[DFunId], Arity=1, Str=<L,U(A,A,A,U)>m] =
    [] \r [$dRead_s3XU2]
        let {
          sat_s3XU6 [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec [[a_a3KVb]]
          [LclId] =
              [$dRead_s3XU2] \u []
                  GHC.Read.$fRead[]_$creadListPrec $dRead_s3XU2; } in
        let {
          sat_s3XU5 [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec [a_a3KVb]
          [LclId] =
              [$dRead_s3XU2] \u [] GHC.Read.readListPrec $dRead_s3XU2; } in
        let {
          sat_s3XU4 [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS [[a_a3KVb]]
          [LclId] =
              [$dRead_s3XU2] \u []
                  GHC.Read.$fRead[]_$creadList $dRead_s3XU2; } in
        let {
          sat_s3XU3 [Occ=Once]
            :: GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS [a_a3KVb]
          [LclId] =
              [$dRead_s3XU2] \r [eta_B1]
                  GHC.Read.$fRead[]_$creadsPrec $dRead_s3XU2 eta_B1;
        } in  GHC.Read.C:Read [sat_s3XU3 sat_s3XU4 sat_s3XU5 sat_s3XU6];

GHC.Read.$fReadNonEmpty5 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [6#];

GHC.Read.$fReadNonEmpty4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ":|"#;

GHC.Read.$fReadNonEmpty3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Read.$fReadNonEmpty4;

GHC.Read.$fReadNonEmpty2 :: Text.Read.Lex.Lexeme
[GblId, Str=m5, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Symbol! [GHC.Read.$fReadNonEmpty3];

GHC.Read.$fReadNonEmpty1
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.Base.NonEmpty a -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=3,
 Str=<L,U(A,A,1*C1(C(U)),C(C1(U)))><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XU7 eta_s3XU8 eta1_s3XU9]
        let {
          ds1_s3XUa [Occ=OnceL, Dmd=<L,C(U)>]
            :: Text.ParserCombinators.ReadP.ReadP a_a3Ktx
          [LclId] =
              [$dRead_s3XU7] \u []
                  GHC.Read.readPrec $dRead_s3XU7 GHC.Read.$fReadNonEmpty5; } in
        let {
          sat_s3XUp [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (GHC.Base.NonEmpty a_a3Ktx)
          [LclId] =
              [$dRead_s3XU7 ds1_s3XUa] \r [c_s3XUb eta2_s3XUc]
                  case c_s3XUb of {
                    GHC.Types.I# x_s3XUe [Occ=Once] ->
                        case <=# [x_s3XUe 5#] of {
                          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                          1# ->
                              let {
                                sat_s3XUo [Occ=Once]
                                  :: a_a3Ktx -> Text.ParserCombinators.ReadP.P b1_X3nwX
                                [LclId] =
                                    [$dRead_s3XU7 eta2_s3XUc] \r [a1_s3XUg]
                                        let {
                                          sat_s3XUl [Occ=Once]
                                            :: () -> Text.ParserCombinators.ReadP.P b1_X3nwX
                                          [LclId] =
                                              [$dRead_s3XU7 eta2_s3XUc a1_s3XUg] \r [a2_s3XUh]
                                                  let {
                                                    sat_s3XUk [Occ=Once]
                                                      :: [a_a3Ktx]
                                                         -> Text.ParserCombinators.ReadP.P b1_X3nwX
                                                    [LclId] =
                                                        [eta2_s3XUc a1_s3XUg] \r [a3_s3XUi]
                                                            let {
                                                              sat_s3XUj [Occ=Once]
                                                                :: GHC.Base.NonEmpty a_a3Ktx
                                                              [LclId] =
                                                                  CCCS GHC.Base.:|! [a1_s3XUg
                                                                                     a3_s3XUi];
                                                            } in  eta2_s3XUc sat_s3XUj;
                                                  } in 
                                                    GHC.Read.readListPrec
                                                        $dRead_s3XU7
                                                        GHC.Read.$fReadNonEmpty5
                                                        sat_s3XUk;
                                        } in 
                                          case
                                              Text.Read.Lex.$wexpect
                                                  GHC.Read.$fReadNonEmpty2 sat_s3XUl
                                          of
                                          { Unit# ww1_s3XUn [Occ=Once] ->
                                                Text.ParserCombinators.ReadP.Look [ww1_s3XUn];
                                          };
                              } in  ds1_s3XUa sat_s3XUo;
                        };
                  };
        } in  GHC.Read.list3 sat_s3XUp eta_s3XU8 eta1_s3XU9;

GHC.Read.$fReadNonEmpty_$creadsPrec
  :: forall a.
     GHC.Read.Read a =>
     GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS (GHC.Base.NonEmpty a)
[GblId,
 Arity=2,
 Str=<L,U(A,A,C(C(U)),C(C1(U)))><L,U>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XUq eta_s3XUr]
        let {
          sat_s3XUs [Occ=Once]
            :: Text.ParserCombinators.ReadP.P (GHC.Base.NonEmpty a_X3KIs)
          [LclId] =
              [$dRead_s3XUq eta_s3XUr] \u []
                  GHC.Read.$fReadNonEmpty1
                      $dRead_s3XUq
                      eta_s3XUr
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XUs;

GHC.Read.$fReadNonEmpty_$creadListPrec
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadPrec.ReadPrec [GHC.Base.NonEmpty a]
[GblId,
 Arity=1,
 Str=<L,U(A,A,C(C(U)),C(C1(U)))>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XUt]
        let {
          sat_s3XUu [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (GHC.Base.NonEmpty a_X3KIt)
          [LclId] =
              [$dRead_s3XUt] \r [eta_B2 eta_B1]
                  GHC.Read.$fReadNonEmpty1 $dRead_s3XUt eta_B2 eta_B1;
        } in  GHC.Read.list sat_s3XUu;

GHC.Read.$fReadNonEmpty_$creadList
  :: forall a.
     GHC.Read.Read a =>
     Text.ParserCombinators.ReadP.ReadS [GHC.Base.NonEmpty a]
[GblId,
 Arity=1,
 Str=<L,U(A,A,C(C(U)),C(C1(U)))>,
 Unf=OtherCon []] =
    [] \r [$dRead_s3XUv]
        let {
          sat_s3XUx [Occ=Once]
            :: Text.ParserCombinators.ReadP.P [GHC.Base.NonEmpty a_X3KIu]
          [LclId] =
              [$dRead_s3XUv] \u []
                  let {
                    sat_s3XUw [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec
                           (GHC.Base.NonEmpty a_X3KIu)
                    [LclId] =
                        [$dRead_s3XUv] \r [eta_B2 eta_B1]
                            GHC.Read.$fReadNonEmpty1 $dRead_s3XUv eta_B2 eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s3XUw
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XUx;

GHC.Read.$fReadNonEmpty [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Read.Read a => GHC.Read.Read (GHC.Base.NonEmpty a)
[GblId[DFunId], Arity=1, Str=<L,U(A,A,C(C(U)),C(C1(U)))>m] =
    [] \r [$dRead_s3XUy]
        let {
          sat_s3XUC [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 [GHC.Base.NonEmpty a_X3KIv]
          [LclId] =
              [$dRead_s3XUy] \u []
                  GHC.Read.$fReadNonEmpty_$creadListPrec $dRead_s3XUy; } in
        let {
          sat_s3XUB [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (GHC.Base.NonEmpty a_X3KIv)
          [LclId] =
              [$dRead_s3XUy] \r [eta_B2 eta_B1]
                  GHC.Read.$fReadNonEmpty1 $dRead_s3XUy eta_B2 eta_B1; } in
        let {
          sat_s3XUA [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS [GHC.Base.NonEmpty a_X3KIv]
          [LclId] =
              [$dRead_s3XUy] \u []
                  GHC.Read.$fReadNonEmpty_$creadList $dRead_s3XUy; } in
        let {
          sat_s3XUz [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS (GHC.Base.NonEmpty a_X3KIv)
          [LclId] =
              [$dRead_s3XUy] \r [eta_B1]
                  GHC.Read.$fReadNonEmpty_$creadsPrec $dRead_s3XUy eta_B1;
        } in  GHC.Read.C:Read [sat_s3XUz sat_s3XUA sat_s3XUB sat_s3XUC];

GHC.Read.$fReadArray4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "array"#;

GHC.Read.$fReadArray3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Read.$fReadArray4;

GHC.Read.$fReadArray_lexeme :: Text.Read.Lex.Lexeme
[GblId, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE Text.Read.Lex.Ident! [GHC.Read.$fReadArray3];

GHC.Read.$fReadArray1
  :: forall a b.
     (GHC.Arr.Ix a, GHC.Read.Read a, GHC.Read.Read b) =>
     Text.ParserCombinators.ReadPrec.Prec
     -> forall b1.
        (GHC.Arr.Array a b -> Text.ParserCombinators.ReadP.P b1)
        -> Text.ParserCombinators.ReadP.P b1
[GblId,
 Arity=5,
 Str=<L,U(A,A,C(C1(U(U))),A,A,C(U(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dIx_s3XUD $dRead_s3XUE $dRead1_s3XUF eta_s3XUG eta1_s3XUH]
        let {
          lvl2_s3XUI [Occ=OnceL, Dmd=<L,C(C(U))>]
            :: Text.ParserCombinators.ReadPrec.Prec
               -> forall b2.
                  ((a_a3KUf, b_a3KUg) -> Text.ParserCombinators.ReadP.P b2)
                  -> Text.ParserCombinators.ReadP.P b2
          [LclId, Arity=2, Unf=OtherCon []] =
              [$dRead_s3XUE $dRead1_s3XUF] \r [eta_B2 eta_B1]
                  GHC.Read.$fRead(,)1 $dRead_s3XUE $dRead1_s3XUF eta_B2 eta_B1; } in
        let {
          sat_s3XUX [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (GHC.Arr.Array a_a3KUf b_a3KUg)
          [LclId] =
              [$dIx_s3XUD $dRead_s3XUE lvl2_s3XUI] \r [c_s3XUJ eta2_s3XUK]
                  case c_s3XUJ of {
                    GHC.Types.I# x_s3XUM [Occ=Once] ->
                        case <=# [x_s3XUM 10#] of {
                          __DEFAULT -> Text.ParserCombinators.ReadP.Fail [];
                          1# ->
                              let {
                                sat_s3XUU [Occ=Once]
                                  :: () -> Text.ParserCombinators.ReadP.P b2_X3nvw
                                [LclId] =
                                    [$dIx_s3XUD $dRead_s3XUE lvl2_s3XUI eta2_s3XUK] \r [a1_s3XUO]
                                        let {
                                          sat_s3XUT [Occ=Once]
                                            :: (a_a3KUf, a_a3KUf)
                                               -> Text.ParserCombinators.ReadP.P b2_X3nvw
                                          [LclId] =
                                              [$dIx_s3XUD lvl2_s3XUI eta2_s3XUK] \r [a2_s3XUP]
                                                  let {
                                                    sat_s3XUS [Occ=Once]
                                                      :: [(a_a3KUf, b_a3KUg)]
                                                         -> Text.ParserCombinators.ReadP.P b2_X3nvw
                                                    [LclId] =
                                                        [$dIx_s3XUD
                                                         eta2_s3XUK
                                                         a2_s3XUP] \r [a3_s3XUQ]
                                                            let {
                                                              sat_s3XUR [Occ=Once]
                                                                :: GHC.Arr.Array a_a3KUf b_a3KUg
                                                              [LclId] =
                                                                  [$dIx_s3XUD
                                                                   a2_s3XUP
                                                                   a3_s3XUQ] \u []
                                                                      GHC.Arr.array
                                                                          $dIx_s3XUD
                                                                          a2_s3XUP
                                                                          a3_s3XUQ;
                                                            } in  eta2_s3XUK sat_s3XUR;
                                                  } in 
                                                    GHC.Read.list
                                                        lvl2_s3XUI GHC.Read.$fReadArray2 sat_s3XUS;
                                        } in 
                                          GHC.Read.$fRead(,)1
                                              $dRead_s3XUE
                                              $dRead_s3XUE
                                              GHC.Read.$fReadArray2
                                              sat_s3XUT;
                              } in 
                                case
                                    Text.Read.Lex.$wexpect GHC.Read.$fReadArray_lexeme sat_s3XUU
                                of
                                { Unit# ww1_s3XUW [Occ=Once] ->
                                      Text.ParserCombinators.ReadP.Look [ww1_s3XUW];
                                };
                        };
                  };
        } in  GHC.Read.list3 sat_s3XUX eta_s3XUG eta1_s3XUH;

GHC.Read.$fReadArray_$creadsPrec
  :: forall a b.
     (GHC.Arr.Ix a, GHC.Read.Read a, GHC.Read.Read b) =>
     GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS (GHC.Arr.Array a b)
[GblId,
 Arity=4,
 Str=<L,U(A,A,C(C1(U(U))),A,A,C(U(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dIx_s3XUY $dRead_s3XUZ $dRead1_s3XV0 n_s3XV1]
        let {
          sat_s3XV2 [Occ=Once]
            :: Text.ParserCombinators.ReadP.P (GHC.Arr.Array a_X3L9l b_X3L9n)
          [LclId] =
              [$dIx_s3XUY $dRead_s3XUZ $dRead1_s3XV0 n_s3XV1] \u []
                  GHC.Read.$fReadArray1
                      $dIx_s3XUY
                      $dRead_s3XUZ
                      $dRead1_s3XV0
                      n_s3XV1
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XV2;

GHC.Read.$fReadArray_$creadListPrec
  :: forall a b.
     (GHC.Arr.Ix a, GHC.Read.Read a, GHC.Read.Read b) =>
     Text.ParserCombinators.ReadPrec.ReadPrec [GHC.Arr.Array a b]
[GblId,
 Arity=3,
 Str=<L,U(A,A,C(C1(U(U))),A,A,C(U(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dIx_s3XV3 $dRead_s3XV4 $dRead1_s3XV5]
        let {
          sat_s3XV6 [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (GHC.Arr.Array a_X3L9m b_X3L9o)
          [LclId] =
              [$dIx_s3XV3 $dRead_s3XV4 $dRead1_s3XV5] \r [eta_B2 eta_B1]
                  GHC.Read.$fReadArray1
                      $dIx_s3XV3 $dRead_s3XV4 $dRead1_s3XV5 eta_B2 eta_B1;
        } in  GHC.Read.list sat_s3XV6;

GHC.Read.$fReadArray_$creadList
  :: forall a b.
     (GHC.Arr.Ix a, GHC.Read.Read a, GHC.Read.Read b) =>
     Text.ParserCombinators.ReadP.ReadS [GHC.Arr.Array a b]
[GblId,
 Arity=3,
 Str=<L,U(A,A,C(C1(U(U))),A,A,C(U(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>,
 Unf=OtherCon []] =
    [] \r [$dIx_s3XV7 $dRead_s3XV8 $dRead1_s3XV9]
        let {
          sat_s3XVb [Occ=Once]
            :: Text.ParserCombinators.ReadP.P [GHC.Arr.Array a_X3L9n b_X3L9p]
          [LclId] =
              [$dIx_s3XV7 $dRead_s3XV8 $dRead1_s3XV9] \u []
                  let {
                    sat_s3XVa [Occ=Once]
                      :: Text.ParserCombinators.ReadPrec.ReadPrec
                           (GHC.Arr.Array a_X3L9n b_X3L9p)
                    [LclId] =
                        [$dIx_s3XV7 $dRead_s3XV8 $dRead1_s3XV9] \r [eta_B2 eta_B1]
                            GHC.Read.$fReadArray1
                                $dIx_s3XV7 $dRead_s3XV8 $dRead1_s3XV9 eta_B2 eta_B1;
                  } in 
                    GHC.Read.list
                        sat_s3XVa
                        GHC.Read.$fRead()7
                        Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s3XVb;

GHC.Read.$fReadArray [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b.
     (GHC.Arr.Ix a, GHC.Read.Read a, GHC.Read.Read b) =>
     GHC.Read.Read (GHC.Arr.Array a b)
[GblId[DFunId],
 Arity=3,
 Str=<L,U(A,A,C(C1(U(U))),A,A,C(U(U)),A)><L,U(A,A,C(C(U)),A)><L,U(A,A,C(C1(U)),A)>m] =
    [] \r [$dIx_s3XVc $dRead_s3XVd $dRead1_s3XVe]
        let {
          sat_s3XVi [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 [GHC.Arr.Array a_X3L9o b_X3L9q]
          [LclId] =
              [$dIx_s3XVc $dRead_s3XVd $dRead1_s3XVe] \u []
                  GHC.Read.$fReadArray_$creadListPrec
                      $dIx_s3XVc $dRead_s3XVd $dRead1_s3XVe; } in
        let {
          sat_s3XVh [Occ=Once]
            :: Text.ParserCombinators.ReadPrec.ReadPrec
                 (GHC.Arr.Array a_X3L9o b_X3L9q)
          [LclId] =
              [$dIx_s3XVc $dRead_s3XVd $dRead1_s3XVe] \r [eta_B2 eta_B1]
                  GHC.Read.$fReadArray1
                      $dIx_s3XVc $dRead_s3XVd $dRead1_s3XVe eta_B2 eta_B1; } in
        let {
          sat_s3XVg [Occ=Once]
            :: Text.ParserCombinators.ReadP.ReadS
                 [GHC.Arr.Array a_X3L9o b_X3L9q]
          [LclId] =
              [$dIx_s3XVc $dRead_s3XVd $dRead1_s3XVe] \u []
                  GHC.Read.$fReadArray_$creadList
                      $dIx_s3XVc $dRead_s3XVd $dRead1_s3XVe; } in
        let {
          sat_s3XVf [Occ=Once]
            :: GHC.Types.Int
               -> Text.ParserCombinators.ReadP.ReadS
                    (GHC.Arr.Array a_X3L9o b_X3L9q)
          [LclId] =
              [$dIx_s3XVc $dRead_s3XVd $dRead1_s3XVe] \r [eta_B1]
                  GHC.Read.$fReadArray_$creadsPrec
                      $dIx_s3XVc $dRead_s3XVd $dRead1_s3XVe eta_B1;
        } in  GHC.Read.C:Read [sat_s3XVf sat_s3XVg sat_s3XVh sat_s3XVi];

lvl1_r3N5M :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.Read.lexLitChar_removeNulls GHC.Types.[];
GHC.Read.lexLitChar_removeNulls [Occ=LoopBreaker]
  :: [GHC.Types.Char] -> [GHC.Types.Char]
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3XVj]
        case ds_s3XVj of {
          [] -> [] [];
          : ds1_s3XVl [Occ=Once!] ds2_s3XVm [Occ=Once*] ->
              case ds1_s3XVl of wild1_s3XVn {
                GHC.Types.C# ds3_s3XVo [Occ=Once!] ->
                    case ds3_s3XVo of {
                      __DEFAULT ->
                          let {
                            sat_s3XVq [Occ=Once] :: [GHC.Types.Char]
                            [LclId] =
                                [ds2_s3XVm] \u [] GHC.Read.lexLitChar_removeNulls ds2_s3XVm;
                          } in  : [wild1_s3XVn sat_s3XVq];
                      '\\'# ->
                          case ds2_s3XVm of wild2_s3XVr {
                            [] -> : [wild1_s3XVn lvl1_r3N5M];
                            : ds5_s3XVs [Occ=Once!] xs_s3XVt [Occ=Once] ->
                                case ds5_s3XVs of {
                                  GHC.Types.C# ds6_s3XVv [Occ=Once!] ->
                                      case ds6_s3XVv of {
                                        __DEFAULT ->
                                            let {
                                              sat_s3XVx [Occ=Once] :: [GHC.Types.Char]
                                              [LclId] =
                                                  [wild2_s3XVr] \u []
                                                      GHC.Read.lexLitChar_removeNulls wild2_s3XVr;
                                            } in  : [wild1_s3XVn sat_s3XVx];
                                        '&'# -> GHC.Read.lexLitChar_removeNulls xs_s3XVt;
                                      };
                                };
                          };
                    };
              };
        };

GHC.Read.lexLitChar4
  :: GHC.Base.String
     -> Text.ParserCombinators.ReadP.P [GHC.Types.Char]
[GblId, Arity=1, Str=<L,1*U>m4, Unf=OtherCon []] =
    [] \r [s_s3XVy]
        let {
          sat_s3XVz [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [s_s3XVy] \u [] GHC.Read.lexLitChar_removeNulls s_s3XVy;
        } in 
          Text.ParserCombinators.ReadP.Result [sat_s3XVz
                                               Text.ParserCombinators.ReadP.Fail];

GHC.Read.lexLitChar3
  :: Text.ParserCombinators.ReadP.P
       (GHC.Base.String
        -> Text.ParserCombinators.ReadP.P [GHC.Types.Char])
[GblId, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE Text.ParserCombinators.ReadP.Result! [GHC.Read.lexLitChar4
                                                        Text.ParserCombinators.ReadP.Fail];

GHC.Read.lexLitChar2
  :: GHC.Types.Char
     -> Text.ParserCombinators.ReadP.P
          (GHC.Base.String
           -> Text.ParserCombinators.ReadP.P [GHC.Types.Char])
[GblId, Arity=1, Str=<L,A>m4, Unf=OtherCon []] =
    [] \r [a1_s3XVA] GHC.Read.lexLitChar3;

GHC.Read.lexLitChar1
  :: Text.ParserCombinators.ReadP.P [GHC.Types.Char]
[GblId] =
    [] \u []
        case Text.Read.Lex.$wlexChar GHC.Read.lexLitChar2 of {
          Unit# ww1_s3XVC [Occ=Once] ->
              let {
                sat_s3XVD [Occ=Once]
                  :: Text.ParserCombinators.ReadP.P
                       (GHC.Base.String
                        -> Text.ParserCombinators.ReadP.P [GHC.Types.Char])
                [LclId] =
                    CCCS Text.ParserCombinators.ReadP.Get! [ww1_s3XVC];
              } in 
                Text.ParserCombinators.ReadP.gather_gath GHC.Base.id sat_s3XVD;
        };

GHC.Read.lexLitChar
  :: Text.ParserCombinators.ReadP.ReadS GHC.Base.String
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run GHC.Read.lexLitChar1 eta_B1;

GHC.Read.C:Read
  :: forall a.
     (GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS a)
     -> Text.ParserCombinators.ReadP.ReadS [a]
     -> Text.ParserCombinators.ReadPrec.ReadPrec a
     -> Text.ParserCombinators.ReadPrec.ReadPrec [a]
     -> GHC.Read.Read a
[GblId[DataCon],
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.Read.C:Read [eta_B4 eta_B3 eta_B2 eta_B1];

