
==================== Pre unarise: ====================
2018-03-16 16:07:27.121555054 UTC

GHC.ByteOrder.$fReadByteOrder11 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "BigEndian"#;

GHC.ByteOrder.$fReadByteOrder10 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.ByteOrder.$fReadByteOrder11;

GHC.ByteOrder.$fReadByteOrder7 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "LittleEndian"#;

GHC.ByteOrder.$fReadByteOrder6 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.ByteOrder.$fReadByteOrder7;

GHC.ByteOrder.$fShowByteOrder_$cshowsPrec
  :: GHC.Types.Int -> GHC.ByteOrder.ByteOrder -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [ds_scykJ ds1_scykK eta_scykL]
        case ds1_scykK of {
          GHC.ByteOrder.BigEndian ->
              GHC.Base.++ GHC.ByteOrder.$fReadByteOrder10 eta_scykL;
          GHC.ByteOrder.LittleEndian ->
              GHC.Base.++ GHC.ByteOrder.$fReadByteOrder6 eta_scykL;
        };

GHC.ByteOrder.$fShowByteOrder_$cshow
  :: GHC.ByteOrder.ByteOrder -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_scykN]
        case x_scykN of {
          GHC.ByteOrder.BigEndian -> GHC.ByteOrder.$fReadByteOrder10;
          GHC.ByteOrder.LittleEndian -> GHC.ByteOrder.$fReadByteOrder6;
        };

GHC.ByteOrder.$fShowByteOrder1
  :: GHC.ByteOrder.ByteOrder -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [ds_scykP eta_scykQ]
        case ds_scykP of {
          GHC.ByteOrder.BigEndian ->
              GHC.Base.++ GHC.ByteOrder.$fReadByteOrder10 eta_scykQ;
          GHC.ByteOrder.LittleEndian ->
              GHC.Base.++ GHC.ByteOrder.$fReadByteOrder6 eta_scykQ;
        };

GHC.ByteOrder.$fShowByteOrder_$cshowList
  :: [GHC.ByteOrder.ByteOrder] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_scykS s_scykT]
        GHC.Show.showList__
            GHC.ByteOrder.$fShowByteOrder1 ls_scykS s_scykT;

GHC.ByteOrder.$fShowByteOrder [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.ByteOrder.ByteOrder
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.ByteOrder.$fShowByteOrder_$cshowsPrec
                                    GHC.ByteOrder.$fShowByteOrder_$cshow
                                    GHC.ByteOrder.$fShowByteOrder_$cshowList];

GHC.ByteOrder.$fReadByteOrder9
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.ByteOrder.ByteOrder -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_scykU k_scykV] k_scykV GHC.ByteOrder.BigEndian;

GHC.ByteOrder.$fReadByteOrder8
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec GHC.ByteOrder.ByteOrder)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.ByteOrder.$fReadByteOrder10
                        GHC.ByteOrder.$fReadByteOrder9];

GHC.ByteOrder.$fReadByteOrder5
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.ByteOrder.ByteOrder -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_scykW k_scykX] k_scykX GHC.ByteOrder.LittleEndian;

GHC.ByteOrder.$fReadByteOrder4
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec GHC.ByteOrder.ByteOrder)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.ByteOrder.$fReadByteOrder6
                        GHC.ByteOrder.$fReadByteOrder5];

GHC.ByteOrder.$fReadByteOrder3
  :: [(GHC.Base.String,
       Text.ParserCombinators.ReadPrec.ReadPrec GHC.ByteOrder.ByteOrder)]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.ByteOrder.$fReadByteOrder4 GHC.Types.[]];

GHC.ByteOrder.$fReadByteOrder_sps
  :: [(GHC.Base.String,
       Text.ParserCombinators.ReadPrec.ReadPrec GHC.ByteOrder.ByteOrder)]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.ByteOrder.$fReadByteOrder8
                      GHC.ByteOrder.$fReadByteOrder3];

GHC.ByteOrder.$fReadByteOrder2
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.ByteOrder.ByteOrder
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_scykY]
        GHC.Read.choose2 GHC.ByteOrder.$fReadByteOrder_sps eta_scykY;

GHC.ByteOrder.$fReadByteOrder1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.ByteOrder.ByteOrder -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Read.list3 GHC.ByteOrder.$fReadByteOrder2 eta_B2 eta_B1;

GHC.ByteOrder.$fReadByteOrder_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.ByteOrder.ByteOrder
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_scykZ]
        let {
          sat_scyl0 [Occ=Once]
            :: Text.ParserCombinators.ReadP.P GHC.ByteOrder.ByteOrder
          [LclId] =
              [n_scykZ] \u []
                  GHC.Read.list3
                      GHC.ByteOrder.$fReadByteOrder2
                      n_scykZ
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_scyl0;

GHC.ByteOrder.$fReadByteOrder_$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec
       [GHC.ByteOrder.ByteOrder]
[GblId] =
    [] \u [] GHC.Read.list GHC.ByteOrder.$fReadByteOrder1;

GHC.ByteOrder.$fReadByteOrder12
  :: Text.ParserCombinators.ReadP.P [GHC.ByteOrder.ByteOrder]
[GblId] =
    [] \u []
        GHC.ByteOrder.$fReadByteOrder_$creadListPrec
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.ByteOrder.$fReadByteOrder_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.ByteOrder.ByteOrder]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run
            GHC.ByteOrder.$fReadByteOrder12 eta_B1;

GHC.ByteOrder.$fReadByteOrder [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.ByteOrder.ByteOrder
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.ByteOrder.$fReadByteOrder_$creadsPrec
                                    GHC.ByteOrder.$fReadByteOrder_$creadList
                                    GHC.ByteOrder.$fReadByteOrder1
                                    GHC.ByteOrder.$fReadByteOrder_$creadListPrec];

GHC.ByteOrder.$fBoundedByteOrder [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Bounded GHC.ByteOrder.ByteOrder
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Bounded! [GHC.ByteOrder.BigEndian
                                       GHC.ByteOrder.LittleEndian];

GHC.ByteOrder.$fOrdByteOrder_$c<
  :: GHC.ByteOrder.ByteOrder
     -> GHC.ByteOrder.ByteOrder -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_scyl1 b_scyl2]
        case a_scyl1 of {
          GHC.ByteOrder.BigEndian ->
              case b_scyl2 of {
                GHC.ByteOrder.BigEndian -> GHC.Types.False [];
                GHC.ByteOrder.LittleEndian -> GHC.Types.True [];
              };
          GHC.ByteOrder.LittleEndian ->
              case b_scyl2 of { __DEFAULT -> GHC.Types.False []; };
        };

GHC.ByteOrder.$fOrdByteOrder_$ccompare
  :: GHC.ByteOrder.ByteOrder
     -> GHC.ByteOrder.ByteOrder -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_scyl6 b_scyl7]
        case a_scyl6 of {
          GHC.ByteOrder.BigEndian ->
              case b_scyl7 of {
                GHC.ByteOrder.BigEndian -> GHC.Types.EQ [];
                GHC.ByteOrder.LittleEndian -> GHC.Types.LT [];
              };
          GHC.ByteOrder.LittleEndian ->
              case b_scyl7 of {
                GHC.ByteOrder.BigEndian -> GHC.Types.GT [];
                GHC.ByteOrder.LittleEndian -> GHC.Types.EQ [];
              };
        };

GHC.ByteOrder.$fEqByteOrder_$c==
  :: GHC.ByteOrder.ByteOrder
     -> GHC.ByteOrder.ByteOrder -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_scylb ds1_scylc]
        case ds_scylb of {
          GHC.ByteOrder.BigEndian ->
              case ds1_scylc of {
                GHC.ByteOrder.BigEndian -> GHC.Types.True [];
                GHC.ByteOrder.LittleEndian -> GHC.Types.False [];
              };
          GHC.ByteOrder.LittleEndian ->
              case ds1_scylc of {
                GHC.ByteOrder.BigEndian -> GHC.Types.False [];
                GHC.ByteOrder.LittleEndian -> GHC.Types.True [];
              };
        };

GHC.ByteOrder.$fEqByteOrder_$c/= [InlPrag=INLINE (sat-args=2)]
  :: GHC.ByteOrder.ByteOrder
     -> GHC.ByteOrder.ByteOrder -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_scylg eta1_scylh]
        case eta_scylg of {
          GHC.ByteOrder.BigEndian ->
              case eta1_scylh of {
                GHC.ByteOrder.BigEndian -> GHC.Types.False [];
                GHC.ByteOrder.LittleEndian -> GHC.Types.True [];
              };
          GHC.ByteOrder.LittleEndian ->
              case eta1_scylh of {
                GHC.ByteOrder.BigEndian -> GHC.Types.True [];
                GHC.ByteOrder.LittleEndian -> GHC.Types.False [];
              };
        };

GHC.ByteOrder.$fEqByteOrder [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.ByteOrder.ByteOrder
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.ByteOrder.$fEqByteOrder_$c==
                                     GHC.ByteOrder.$fEqByteOrder_$c/=];

GHC.ByteOrder.$fOrdByteOrder_$c<=
  :: GHC.ByteOrder.ByteOrder
     -> GHC.ByteOrder.ByteOrder -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_scyll b_scylm]
        case b_scylm of {
          GHC.ByteOrder.BigEndian ->
              case a_scyll of {
                GHC.ByteOrder.BigEndian -> GHC.Types.True [];
                GHC.ByteOrder.LittleEndian -> GHC.Types.False [];
              };
          GHC.ByteOrder.LittleEndian ->
              case a_scyll of { __DEFAULT -> GHC.Types.True []; };
        };

GHC.ByteOrder.$fOrdByteOrder_$cmax
  :: GHC.ByteOrder.ByteOrder
     -> GHC.ByteOrder.ByteOrder -> GHC.ByteOrder.ByteOrder
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_scylq y_scylr]
        case y_scylr of {
          GHC.ByteOrder.BigEndian -> x_scylq;
          GHC.ByteOrder.LittleEndian ->
              case x_scylq of { __DEFAULT -> GHC.ByteOrder.LittleEndian []; };
        };

GHC.ByteOrder.$fOrdByteOrder_$c>=
  :: GHC.ByteOrder.ByteOrder
     -> GHC.ByteOrder.ByteOrder -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_scylu b_scylv]
        case a_scylu of {
          GHC.ByteOrder.BigEndian ->
              case b_scylv of {
                GHC.ByteOrder.BigEndian -> GHC.Types.True [];
                GHC.ByteOrder.LittleEndian -> GHC.Types.False [];
              };
          GHC.ByteOrder.LittleEndian ->
              case b_scylv of { __DEFAULT -> GHC.Types.True []; };
        };

GHC.ByteOrder.$fOrdByteOrder_$c>
  :: GHC.ByteOrder.ByteOrder
     -> GHC.ByteOrder.ByteOrder -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_scylz b_scylA]
        GHC.ByteOrder.$fOrdByteOrder_$c< b_scylA a_scylz;

GHC.ByteOrder.$fOrdByteOrder_$cmin
  :: GHC.ByteOrder.ByteOrder
     -> GHC.ByteOrder.ByteOrder -> GHC.ByteOrder.ByteOrder
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_scylB y_scylC]
        case y_scylC of {
          GHC.ByteOrder.BigEndian ->
              case x_scylB of { __DEFAULT -> GHC.ByteOrder.BigEndian []; };
          GHC.ByteOrder.LittleEndian -> x_scylB;
        };

GHC.ByteOrder.$fOrdByteOrder [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.ByteOrder.ByteOrder
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.ByteOrder.$fEqByteOrder
                                      GHC.ByteOrder.$fOrdByteOrder_$ccompare
                                      GHC.ByteOrder.$fOrdByteOrder_$c<
                                      GHC.ByteOrder.$fOrdByteOrder_$c<=
                                      GHC.ByteOrder.$fOrdByteOrder_$c>
                                      GHC.ByteOrder.$fOrdByteOrder_$c>=
                                      GHC.ByteOrder.$fOrdByteOrder_$cmax
                                      GHC.ByteOrder.$fOrdByteOrder_$cmin];

GHC.ByteOrder.targetByteOrder :: GHC.ByteOrder.ByteOrder
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.ByteOrder.LittleEndian! [];

lvl_rcykn :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

lvl1_rcyko :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [1#];

GHC.ByteOrder.$fEnumByteOrder_$cfromEnum
  :: GHC.ByteOrder.ByteOrder -> GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [a_scylF]
        case a_scylF of {
          GHC.ByteOrder.BigEndian -> lvl_rcykn;
          GHC.ByteOrder.LittleEndian -> lvl1_rcyko;
        };

lvl2_rcykp :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "error"#;

lvl3_rcykq :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl2_rcykp;

GHC.ByteOrder.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

lvl4_rcykr :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.ByteOrder.$trModule4;

GHC.ByteOrder.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.ByteOrder"#;

lvl5_rcyks :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.ByteOrder.$trModule2;

lvl6_rcykt :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "./GHC/ByteOrder.hs"#;

lvl7_rcyku :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl6_rcykt;

lvl8_rcykv :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [26#];

lvl9_rcykw :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [16#];

lvl10_rcykx :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [20#];

lvl11_rcyky :: GHC.Stack.Types.SrcLoc
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.SrcLoc! [lvl4_rcykr
                                           lvl5_rcyks
                                           lvl7_rcyku
                                           lvl8_rcykv
                                           lvl9_rcykw
                                           lvl8_rcykv
                                           lvl10_rcykx];

lvl12_rcykz :: GHC.Stack.Types.CallStack
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.PushCallStack! [lvl3_rcykq
                                                  lvl11_rcyky
                                                  GHC.Stack.Types.EmptyCallStack];

lvl13_rcykA :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "pred{ByteOrder}: tried to take `pred' of first tag in enumeration"#;

GHC.ByteOrder.$fEnumByteOrder3 :: GHC.ByteOrder.ByteOrder
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl13_rcykA of sat_scylH {
          __DEFAULT -> GHC.Err.error lvl12_rcykz sat_scylH;
        };

GHC.ByteOrder.$fEnumByteOrder_$cpred
  :: GHC.ByteOrder.ByteOrder -> GHC.ByteOrder.ByteOrder
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [a_scylI]
        case a_scylI of {
          GHC.ByteOrder.BigEndian -> GHC.ByteOrder.$fEnumByteOrder3;
          GHC.ByteOrder.LittleEndian -> GHC.ByteOrder.BigEndian [];
        };

lvl14_rcykB :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "succ{ByteOrder}: tried to take `succ' of last tag in enumeration"#;

GHC.ByteOrder.$fEnumByteOrder4 :: GHC.ByteOrder.ByteOrder
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl14_rcykB of sat_scylK {
          __DEFAULT -> GHC.Err.error lvl12_rcykz sat_scylK;
        };

GHC.ByteOrder.$fEnumByteOrder_$csucc
  :: GHC.ByteOrder.ByteOrder -> GHC.ByteOrder.ByteOrder
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [a_scylL]
        case a_scylL of {
          GHC.ByteOrder.BigEndian -> GHC.ByteOrder.LittleEndian [];
          GHC.ByteOrder.LittleEndian -> GHC.ByteOrder.$fEnumByteOrder4;
        };

lvl15_rcykC :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ") is outside of enumeration's range (0,"#;

lvl16_rcykD :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ")"#;

lvl17_rcykE :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl16_rcykD;

lvl18_rcykF :: [GHC.Types.Char]
[GblId] =
    [] \u []
        case GHC.Show.$wshowSignedInt 0# 1# lvl17_rcykE of {
          (#,#) ww5_scylO [Occ=Once] ww6_scylP [Occ=Once] ->
              : [ww5_scylO ww6_scylP];
        };

lvl19_rcykG :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackAppendCString# lvl15_rcykC lvl18_rcykF;

lvl20_rcykH :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "toEnum{ByteOrder}: tag ("#;

GHC.ByteOrder.$wlvl [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.ByteOrder.ByteOrder
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [ww_scylQ]
        let {
          sat_scylU [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [ww_scylQ] \u []
                  case GHC.Show.$wshowSignedInt 0# ww_scylQ lvl19_rcykG of {
                    (#,#) ww5_scylS [Occ=Once] ww6_scylT [Occ=Once] ->
                        : [ww5_scylS ww6_scylT];
                  };
        } in 
          case
              GHC.CString.unpackAppendCString# lvl20_rcykH sat_scylU
          of
          sat_scylV
          { __DEFAULT -> GHC.Err.error lvl12_rcykz sat_scylV;
          };

GHC.ByteOrder.$w$ctoEnum [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.ByteOrder.ByteOrder
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [ww_scylW]
        case >=# [ww_scylW 0#] of {
          __DEFAULT -> GHC.ByteOrder.$wlvl ww_scylW;
          1# ->
              case <=# [ww_scylW 1#] of {
                __DEFAULT -> GHC.ByteOrder.$wlvl ww_scylW;
                1# -> tagToEnum# [ww_scylW];
              };
        };

GHC.ByteOrder.$fEnumByteOrder_$ctoEnum [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.ByteOrder.ByteOrder
[GblId, Arity=1, Str=<S(S),1*U(U)>, Unf=OtherCon []] =
    [] \r [w_scylZ]
        case w_scylZ of {
          GHC.Types.I# ww1_scym1 [Occ=Once] ->
              GHC.ByteOrder.$w$ctoEnum ww1_scym1;
        };

GHC.ByteOrder.$fEnumByteOrder_go2 [Occ=LoopBreaker]
  :: GHC.Prim.Int# -> [GHC.ByteOrder.ByteOrder]
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [x_scym2]
        let {
          sat_scym6 [Occ=Once] :: [GHC.ByteOrder.ByteOrder]
          [LclId] =
              [x_scym2] \u []
                  case x_scym2 of wild_scym4 {
                    __DEFAULT ->
                        case +# [wild_scym4 1#] of sat_scym5 {
                          __DEFAULT -> GHC.ByteOrder.$fEnumByteOrder_go2 sat_scym5;
                        };
                    1# -> [] [];
                  }; } in
        let {
          sat_scym3 [Occ=Once] :: GHC.ByteOrder.ByteOrder
          [LclId] =
              [x_scym2] \u [] tagToEnum# [x_scym2];
        } in  : [sat_scym3 sat_scym6];

GHC.ByteOrder.$fEnumByteOrder2 :: [GHC.ByteOrder.ByteOrder]
[GblId] =
    [] \u [] GHC.ByteOrder.$fEnumByteOrder_go2 0#;

GHC.ByteOrder.$fEnumByteOrder1 :: [GHC.ByteOrder.ByteOrder]
[GblId] =
    [] \u [] GHC.ByteOrder.$fEnumByteOrder_go2 1#;

GHC.ByteOrder.$fEnumByteOrder_$cenumFrom
  :: GHC.ByteOrder.ByteOrder -> [GHC.ByteOrder.ByteOrder]
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [a_scym7]
        case a_scym7 of {
          GHC.ByteOrder.BigEndian -> GHC.ByteOrder.$fEnumByteOrder2;
          GHC.ByteOrder.LittleEndian -> GHC.ByteOrder.$fEnumByteOrder1;
        };

GHC.ByteOrder.$fEnumByteOrder_$cenumFromThen
  :: GHC.ByteOrder.ByteOrder
     -> GHC.ByteOrder.ByteOrder -> [GHC.ByteOrder.ByteOrder]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_scym9 b_scyma]
        let-no-escape {
          $j_scymb [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
            :: GHC.Prim.Int# -> [GHC.ByteOrder.ByteOrder]
          [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
              sat-only [b_scyma] \r [a#_scymc]
                  let-no-escape {
                    $j1_scymd [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
                      :: GHC.Prim.Int# -> [GHC.ByteOrder.ByteOrder]
                    [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
                        sat-only [a#_scymc] \r [b#_scyme]
                            case ># [a#_scymc b#_scyme] of {
                              __DEFAULT ->
                                  case >=# [b#_scyme a#_scymc] of {
                                    __DEFAULT ->
                                        case ># [1# b#_scyme] of {
                                          __DEFAULT ->
                                              let {
                                                sat_scyms [Occ=Once] :: [GHC.ByteOrder.ByteOrder]
                                                [LclId] =
                                                    [a#_scymc b#_scyme] \u []
                                                        case
                                                            -# [b#_scyme a#_scymc]
                                                        of
                                                        delta_scymj [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [1# delta_scymj]
                                                              of
                                                              y'_scymk [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_dn_scyml [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.ByteOrder.ByteOrder]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_scymj
                                                                                    y'_scymk
                                                                                    go_dn_scyml] \r [x_scymm]
                                                                              case
                                                                                  <# [x_scymm
                                                                                      y'_scymk]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_scymq [Occ=Once]
                                                                                        :: [GHC.ByteOrder.ByteOrder]
                                                                                      [LclId] =
                                                                                          [delta_scymj
                                                                                           go_dn_scyml
                                                                                           x_scymm] \u []
                                                                                              case
                                                                                                  +# [x_scymm
                                                                                                      delta_scymj]
                                                                                              of
                                                                                              sat_scymp
                                                                                              { __DEFAULT ->
                                                                                                    go_dn_scyml
                                                                                                        sat_scymp;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_scymo [Occ=Once]
                                                                                        :: GHC.ByteOrder.ByteOrder
                                                                                      [LclId] =
                                                                                          [x_scymm] \u []
                                                                                              tagToEnum# [x_scymm];
                                                                                    } in 
                                                                                      : [sat_scymo
                                                                                         sat_scymq];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_scymr [Occ=Once]
                                                                                        :: GHC.ByteOrder.ByteOrder
                                                                                      [LclId] =
                                                                                          [x_scymm] \u []
                                                                                              tagToEnum# [x_scymm];
                                                                                    } in 
                                                                                      : [sat_scymr
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_dn_scyml b#_scyme;
                                                              };
                                                        }; } in
                                              let {
                                                sat_scymi [Occ=Once] :: GHC.ByteOrder.ByteOrder
                                                [LclId] =
                                                    [a#_scymc] \u [] tagToEnum# [a#_scymc];
                                              } in  : [sat_scymi sat_scyms];
                                          1# ->
                                              case ># [1# a#_scymc] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_scymu [Occ=Once]
                                                        :: GHC.ByteOrder.ByteOrder
                                                      [LclId] =
                                                          [a#_scymc] \u [] tagToEnum# [a#_scymc];
                                                    } in  : [sat_scymu GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                    1# ->
                                        case <# [1# b#_scyme] of {
                                          __DEFAULT ->
                                              let {
                                                sat_scymG [Occ=Once] :: [GHC.ByteOrder.ByteOrder]
                                                [LclId] =
                                                    [a#_scymc b#_scyme] \u []
                                                        case
                                                            -# [b#_scyme a#_scymc]
                                                        of
                                                        delta_scymx [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [1# delta_scymx]
                                                              of
                                                              y'_scymy [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_up_scymz [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.ByteOrder.ByteOrder]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_scymx
                                                                                    y'_scymy
                                                                                    go_up_scymz] \r [x_scymA]
                                                                              case
                                                                                  ># [x_scymA
                                                                                      y'_scymy]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_scymE [Occ=Once]
                                                                                        :: [GHC.ByteOrder.ByteOrder]
                                                                                      [LclId] =
                                                                                          [delta_scymx
                                                                                           go_up_scymz
                                                                                           x_scymA] \u []
                                                                                              case
                                                                                                  +# [x_scymA
                                                                                                      delta_scymx]
                                                                                              of
                                                                                              sat_scymD
                                                                                              { __DEFAULT ->
                                                                                                    go_up_scymz
                                                                                                        sat_scymD;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_scymC [Occ=Once]
                                                                                        :: GHC.ByteOrder.ByteOrder
                                                                                      [LclId] =
                                                                                          [x_scymA] \u []
                                                                                              tagToEnum# [x_scymA];
                                                                                    } in 
                                                                                      : [sat_scymC
                                                                                         sat_scymE];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_scymF [Occ=Once]
                                                                                        :: GHC.ByteOrder.ByteOrder
                                                                                      [LclId] =
                                                                                          [x_scymA] \u []
                                                                                              tagToEnum# [x_scymA];
                                                                                    } in 
                                                                                      : [sat_scymF
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_up_scymz b#_scyme;
                                                              };
                                                        }; } in
                                              let {
                                                sat_scymw [Occ=Once] :: GHC.ByteOrder.ByteOrder
                                                [LclId] =
                                                    [a#_scymc] \u [] tagToEnum# [a#_scymc];
                                              } in  : [sat_scymw sat_scymG];
                                          1# ->
                                              case <# [1# a#_scymc] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_scymI [Occ=Once]
                                                        :: GHC.ByteOrder.ByteOrder
                                                      [LclId] =
                                                          [a#_scymc] \u [] tagToEnum# [a#_scymc];
                                                    } in  : [sat_scymI GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                  };
                              1# ->
                                  case >=# [b#_scyme a#_scymc] of {
                                    __DEFAULT ->
                                        case ># [0# b#_scyme] of {
                                          __DEFAULT ->
                                              let {
                                                sat_scymV [Occ=Once] :: [GHC.ByteOrder.ByteOrder]
                                                [LclId] =
                                                    [a#_scymc b#_scyme] \u []
                                                        case
                                                            -# [b#_scyme a#_scymc]
                                                        of
                                                        delta_scymM [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [0# delta_scymM]
                                                              of
                                                              y'_scymN [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_dn_scymO [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.ByteOrder.ByteOrder]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_scymM
                                                                                    y'_scymN
                                                                                    go_dn_scymO] \r [x_scymP]
                                                                              case
                                                                                  <# [x_scymP
                                                                                      y'_scymN]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_scymT [Occ=Once]
                                                                                        :: [GHC.ByteOrder.ByteOrder]
                                                                                      [LclId] =
                                                                                          [delta_scymM
                                                                                           go_dn_scymO
                                                                                           x_scymP] \u []
                                                                                              case
                                                                                                  +# [x_scymP
                                                                                                      delta_scymM]
                                                                                              of
                                                                                              sat_scymS
                                                                                              { __DEFAULT ->
                                                                                                    go_dn_scymO
                                                                                                        sat_scymS;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_scymR [Occ=Once]
                                                                                        :: GHC.ByteOrder.ByteOrder
                                                                                      [LclId] =
                                                                                          [x_scymP] \u []
                                                                                              tagToEnum# [x_scymP];
                                                                                    } in 
                                                                                      : [sat_scymR
                                                                                         sat_scymT];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_scymU [Occ=Once]
                                                                                        :: GHC.ByteOrder.ByteOrder
                                                                                      [LclId] =
                                                                                          [x_scymP] \u []
                                                                                              tagToEnum# [x_scymP];
                                                                                    } in 
                                                                                      : [sat_scymU
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_dn_scymO b#_scyme;
                                                              };
                                                        }; } in
                                              let {
                                                sat_scymL [Occ=Once] :: GHC.ByteOrder.ByteOrder
                                                [LclId] =
                                                    [a#_scymc] \u [] tagToEnum# [a#_scymc];
                                              } in  : [sat_scymL sat_scymV];
                                          1# ->
                                              case ># [0# a#_scymc] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_scymX [Occ=Once]
                                                        :: GHC.ByteOrder.ByteOrder
                                                      [LclId] =
                                                          [a#_scymc] \u [] tagToEnum# [a#_scymc];
                                                    } in  : [sat_scymX GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                    1# ->
                                        case <# [0# b#_scyme] of {
                                          __DEFAULT ->
                                              let {
                                                sat_scyn9 [Occ=Once] :: [GHC.ByteOrder.ByteOrder]
                                                [LclId] =
                                                    [a#_scymc b#_scyme] \u []
                                                        case
                                                            -# [b#_scyme a#_scymc]
                                                        of
                                                        delta_scyn0 [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [0# delta_scyn0]
                                                              of
                                                              y'_scyn1 [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_up_scyn2 [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.ByteOrder.ByteOrder]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_scyn0
                                                                                    y'_scyn1
                                                                                    go_up_scyn2] \r [x_scyn3]
                                                                              case
                                                                                  ># [x_scyn3
                                                                                      y'_scyn1]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_scyn7 [Occ=Once]
                                                                                        :: [GHC.ByteOrder.ByteOrder]
                                                                                      [LclId] =
                                                                                          [delta_scyn0
                                                                                           go_up_scyn2
                                                                                           x_scyn3] \u []
                                                                                              case
                                                                                                  +# [x_scyn3
                                                                                                      delta_scyn0]
                                                                                              of
                                                                                              sat_scyn6
                                                                                              { __DEFAULT ->
                                                                                                    go_up_scyn2
                                                                                                        sat_scyn6;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_scyn5 [Occ=Once]
                                                                                        :: GHC.ByteOrder.ByteOrder
                                                                                      [LclId] =
                                                                                          [x_scyn3] \u []
                                                                                              tagToEnum# [x_scyn3];
                                                                                    } in 
                                                                                      : [sat_scyn5
                                                                                         sat_scyn7];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_scyn8 [Occ=Once]
                                                                                        :: GHC.ByteOrder.ByteOrder
                                                                                      [LclId] =
                                                                                          [x_scyn3] \u []
                                                                                              tagToEnum# [x_scyn3];
                                                                                    } in 
                                                                                      : [sat_scyn8
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_up_scyn2 b#_scyme;
                                                              };
                                                        }; } in
                                              let {
                                                sat_scymZ [Occ=Once] :: GHC.ByteOrder.ByteOrder
                                                [LclId] =
                                                    [a#_scymc] \u [] tagToEnum# [a#_scymc];
                                              } in  : [sat_scymZ sat_scyn9];
                                          1# ->
                                              case <# [0# a#_scymc] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_scynb [Occ=Once]
                                                        :: GHC.ByteOrder.ByteOrder
                                                      [LclId] =
                                                          [a#_scymc] \u [] tagToEnum# [a#_scymc];
                                                    } in  : [sat_scynb GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                  };
                            };
                  } in 
                    case b_scyma of {
                      GHC.ByteOrder.BigEndian -> $j1_scymd 0#;
                      GHC.ByteOrder.LittleEndian -> $j1_scymd 1#;
                    };
        } in 
          case a_scym9 of {
            GHC.ByteOrder.BigEndian -> $j_scymb 0#;
            GHC.ByteOrder.LittleEndian -> $j_scymb 1#;
          };

GHC.ByteOrder.$fEnumByteOrder_go1 [Occ=LoopBreaker]
  :: GHC.Prim.Int# -> [GHC.ByteOrder.ByteOrder]
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [x_scyne]
        let {
          sat_scynk [Occ=Once] :: [GHC.ByteOrder.ByteOrder]
          [LclId] =
              [x_scyne] \u []
                  case x_scyne of wild_scyni {
                    __DEFAULT ->
                        case +# [wild_scyni 1#] of sat_scynj {
                          __DEFAULT -> GHC.ByteOrder.$fEnumByteOrder_go1 sat_scynj;
                        };
                    0# -> [] [];
                  }; } in
        let {
          sat_scynh [Occ=Once] :: GHC.ByteOrder.ByteOrder
          [LclId] =
              [x_scyne] \u []
                  case >=# [x_scyne 0#] of {
                    __DEFAULT -> GHC.ByteOrder.$wlvl x_scyne;
                    1# ->
                        case <=# [x_scyne 1#] of {
                          __DEFAULT -> GHC.ByteOrder.$wlvl x_scyne;
                          1# -> tagToEnum# [x_scyne];
                        };
                  };
        } in  : [sat_scynh sat_scynk];

GHC.ByteOrder.$fEnumByteOrder_go [Occ=LoopBreaker]
  :: GHC.Prim.Int# -> [GHC.ByteOrder.ByteOrder]
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [x_scynl]
        let {
          sat_scynr [Occ=Once] :: [GHC.ByteOrder.ByteOrder]
          [LclId] =
              [x_scynl] \u []
                  case x_scynl of wild_scynp {
                    __DEFAULT ->
                        case +# [wild_scynp 1#] of sat_scynq {
                          __DEFAULT -> GHC.ByteOrder.$fEnumByteOrder_go sat_scynq;
                        };
                    1# -> [] [];
                  }; } in
        let {
          sat_scyno [Occ=Once] :: GHC.ByteOrder.ByteOrder
          [LclId] =
              [x_scynl] \u []
                  case >=# [x_scynl 0#] of {
                    __DEFAULT -> GHC.ByteOrder.$wlvl x_scynl;
                    1# ->
                        case <=# [x_scynl 1#] of {
                          __DEFAULT -> GHC.ByteOrder.$wlvl x_scynl;
                          1# -> tagToEnum# [x_scynl];
                        };
                  };
        } in  : [sat_scyno sat_scynr];

GHC.ByteOrder.$fEnumByteOrder_$cenumFromTo
  :: GHC.ByteOrder.ByteOrder
     -> GHC.ByteOrder.ByteOrder -> [GHC.ByteOrder.ByteOrder]
[GblId, Arity=2, Str=<S,1*U><S,1*U>, Unf=OtherCon []] =
    [] \r [x_scyns y_scynt]
        let-no-escape {
          $j_scynu [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
            :: GHC.Prim.Int# -> [GHC.ByteOrder.ByteOrder]
          [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
              sat-only [y_scynt] \r [x1_scynv]
                  case y_scynt of {
                    GHC.ByteOrder.BigEndian ->
                        case ># [x1_scynv 0#] of {
                          __DEFAULT -> GHC.ByteOrder.$fEnumByteOrder_go1 x1_scynv;
                          1# -> [] [];
                        };
                    GHC.ByteOrder.LittleEndian ->
                        case ># [x1_scynv 1#] of {
                          __DEFAULT -> GHC.ByteOrder.$fEnumByteOrder_go x1_scynv;
                          1# -> [] [];
                        };
                  };
        } in 
          case x_scyns of {
            GHC.ByteOrder.BigEndian -> $j_scynu 0#;
            GHC.ByteOrder.LittleEndian -> $j_scynu 1#;
          };

GHC.ByteOrder.$fEnumByteOrder_$cenumFromThenTo
  :: GHC.ByteOrder.ByteOrder
     -> GHC.ByteOrder.ByteOrder
     -> GHC.ByteOrder.ByteOrder
     -> [GHC.ByteOrder.ByteOrder]
[GblId, Arity=3, Str=<S,1*U><S,1*U><S,1*U>, Unf=OtherCon []] =
    [] \r [x1_scynA x2_scynB y_scynC]
        let-no-escape {
          $j_scynD [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
            :: GHC.Prim.Int# -> [GHC.ByteOrder.ByteOrder]
          [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
              sat-only [x2_scynB y_scynC] \r [x4_scynE]
                  let-no-escape {
                    $j1_scynF [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
                      :: GHC.Prim.Int# -> [GHC.ByteOrder.ByteOrder]
                    [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
                        sat-only [y_scynC x4_scynE] \r [x5_scynG]
                            case y_scynC of {
                              GHC.ByteOrder.BigEndian ->
                                  case >=# [x5_scynG x4_scynE] of {
                                    __DEFAULT ->
                                        case ># [0# x5_scynG] of {
                                          __DEFAULT ->
                                              let {
                                                sat_scyo0 [Occ=Once] :: [GHC.ByteOrder.ByteOrder]
                                                [LclId] =
                                                    [x4_scynE x5_scynG] \u []
                                                        case
                                                            -# [x5_scynG x4_scynE]
                                                        of
                                                        delta_scynN [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [0# delta_scynN]
                                                              of
                                                              y'_scynO [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_dn_scynP [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.ByteOrder.ByteOrder]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_scynN
                                                                                    y'_scynO
                                                                                    go_dn_scynP] \r [x_scynQ]
                                                                              case
                                                                                  <# [x_scynQ
                                                                                      y'_scynO]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_scynW [Occ=Once]
                                                                                        :: [GHC.ByteOrder.ByteOrder]
                                                                                      [LclId] =
                                                                                          [delta_scynN
                                                                                           go_dn_scynP
                                                                                           x_scynQ] \u []
                                                                                              case
                                                                                                  +# [x_scynQ
                                                                                                      delta_scynN]
                                                                                              of
                                                                                              sat_scynV
                                                                                              { __DEFAULT ->
                                                                                                    go_dn_scynP
                                                                                                        sat_scynV;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_scynU [Occ=Once]
                                                                                        :: GHC.ByteOrder.ByteOrder
                                                                                      [LclId] =
                                                                                          [x_scynQ] \u []
                                                                                              case
                                                                                                  >=# [x_scynQ
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.ByteOrder.$wlvl
                                                                                                        x_scynQ;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_scynQ
                                                                                                             1#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.ByteOrder.$wlvl
                                                                                                              x_scynQ;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_scynQ];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_scynU
                                                                                         sat_scynW];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_scynZ [Occ=Once]
                                                                                        :: GHC.ByteOrder.ByteOrder
                                                                                      [LclId] =
                                                                                          [x_scynQ] \u []
                                                                                              case
                                                                                                  >=# [x_scynQ
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.ByteOrder.$wlvl
                                                                                                        x_scynQ;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_scynQ
                                                                                                             1#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.ByteOrder.$wlvl
                                                                                                              x_scynQ;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_scynQ];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_scynZ
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_dn_scynP x5_scynG;
                                                              };
                                                        }; } in
                                              let {
                                                sat_scynM [Occ=Once] :: GHC.ByteOrder.ByteOrder
                                                [LclId] =
                                                    [x4_scynE] \u []
                                                        case >=# [x4_scynE 0#] of {
                                                          __DEFAULT -> GHC.ByteOrder.$wlvl x4_scynE;
                                                          1# ->
                                                              case <=# [x4_scynE 1#] of {
                                                                __DEFAULT ->
                                                                    GHC.ByteOrder.$wlvl x4_scynE;
                                                                1# -> tagToEnum# [x4_scynE];
                                                              };
                                                        };
                                              } in  : [sat_scynM sat_scyo0];
                                          1# ->
                                              case ># [0# x4_scynE] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_scyo4 [Occ=Once]
                                                        :: GHC.ByteOrder.ByteOrder
                                                      [LclId] =
                                                          [x4_scynE] \u []
                                                              case >=# [x4_scynE 0#] of {
                                                                __DEFAULT ->
                                                                    GHC.ByteOrder.$wlvl x4_scynE;
                                                                1# ->
                                                                    case <=# [x4_scynE 1#] of {
                                                                      __DEFAULT ->
                                                                          GHC.ByteOrder.$wlvl
                                                                              x4_scynE;
                                                                      1# -> tagToEnum# [x4_scynE];
                                                                    };
                                                              };
                                                    } in  : [sat_scyo4 GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                    1# ->
                                        case <# [0# x5_scynG] of {
                                          __DEFAULT ->
                                              let {
                                                sat_scyom [Occ=Once] :: [GHC.ByteOrder.ByteOrder]
                                                [LclId] =
                                                    [x4_scynE x5_scynG] \u []
                                                        case
                                                            -# [x5_scynG x4_scynE]
                                                        of
                                                        delta_scyo9 [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [0# delta_scyo9]
                                                              of
                                                              y'_scyoa [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_up_scyob [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.ByteOrder.ByteOrder]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_scyo9
                                                                                    y'_scyoa
                                                                                    go_up_scyob] \r [x_scyoc]
                                                                              case
                                                                                  ># [x_scyoc
                                                                                      y'_scyoa]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_scyoi [Occ=Once]
                                                                                        :: [GHC.ByteOrder.ByteOrder]
                                                                                      [LclId] =
                                                                                          [delta_scyo9
                                                                                           go_up_scyob
                                                                                           x_scyoc] \u []
                                                                                              case
                                                                                                  +# [x_scyoc
                                                                                                      delta_scyo9]
                                                                                              of
                                                                                              sat_scyoh
                                                                                              { __DEFAULT ->
                                                                                                    go_up_scyob
                                                                                                        sat_scyoh;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_scyog [Occ=Once]
                                                                                        :: GHC.ByteOrder.ByteOrder
                                                                                      [LclId] =
                                                                                          [x_scyoc] \u []
                                                                                              case
                                                                                                  >=# [x_scyoc
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.ByteOrder.$wlvl
                                                                                                        x_scyoc;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_scyoc
                                                                                                             1#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.ByteOrder.$wlvl
                                                                                                              x_scyoc;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_scyoc];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_scyog
                                                                                         sat_scyoi];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_scyol [Occ=Once]
                                                                                        :: GHC.ByteOrder.ByteOrder
                                                                                      [LclId] =
                                                                                          [x_scyoc] \u []
                                                                                              case
                                                                                                  >=# [x_scyoc
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.ByteOrder.$wlvl
                                                                                                        x_scyoc;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_scyoc
                                                                                                             1#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.ByteOrder.$wlvl
                                                                                                              x_scyoc;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_scyoc];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_scyol
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_up_scyob x5_scynG;
                                                              };
                                                        }; } in
                                              let {
                                                sat_scyo8 [Occ=Once] :: GHC.ByteOrder.ByteOrder
                                                [LclId] =
                                                    [x4_scynE] \u []
                                                        case >=# [x4_scynE 0#] of {
                                                          __DEFAULT -> GHC.ByteOrder.$wlvl x4_scynE;
                                                          1# ->
                                                              case <=# [x4_scynE 1#] of {
                                                                __DEFAULT ->
                                                                    GHC.ByteOrder.$wlvl x4_scynE;
                                                                1# -> tagToEnum# [x4_scynE];
                                                              };
                                                        };
                                              } in  : [sat_scyo8 sat_scyom];
                                          1# ->
                                              case <# [0# x4_scynE] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_scyoq [Occ=Once]
                                                        :: GHC.ByteOrder.ByteOrder
                                                      [LclId] =
                                                          [x4_scynE] \u []
                                                              case >=# [x4_scynE 0#] of {
                                                                __DEFAULT ->
                                                                    GHC.ByteOrder.$wlvl x4_scynE;
                                                                1# ->
                                                                    case <=# [x4_scynE 1#] of {
                                                                      __DEFAULT ->
                                                                          GHC.ByteOrder.$wlvl
                                                                              x4_scynE;
                                                                      1# -> tagToEnum# [x4_scynE];
                                                                    };
                                                              };
                                                    } in  : [sat_scyoq GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                  };
                              GHC.ByteOrder.LittleEndian ->
                                  case >=# [x5_scynG x4_scynE] of {
                                    __DEFAULT ->
                                        case ># [1# x5_scynG] of {
                                          __DEFAULT ->
                                              let {
                                                sat_scyoJ [Occ=Once] :: [GHC.ByteOrder.ByteOrder]
                                                [LclId] =
                                                    [x4_scynE x5_scynG] \u []
                                                        case
                                                            -# [x5_scynG x4_scynE]
                                                        of
                                                        delta_scyow [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [1# delta_scyow]
                                                              of
                                                              y'_scyox [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_dn_scyoy [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.ByteOrder.ByteOrder]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_scyow
                                                                                    y'_scyox
                                                                                    go_dn_scyoy] \r [x_scyoz]
                                                                              case
                                                                                  <# [x_scyoz
                                                                                      y'_scyox]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_scyoF [Occ=Once]
                                                                                        :: [GHC.ByteOrder.ByteOrder]
                                                                                      [LclId] =
                                                                                          [delta_scyow
                                                                                           go_dn_scyoy
                                                                                           x_scyoz] \u []
                                                                                              case
                                                                                                  +# [x_scyoz
                                                                                                      delta_scyow]
                                                                                              of
                                                                                              sat_scyoE
                                                                                              { __DEFAULT ->
                                                                                                    go_dn_scyoy
                                                                                                        sat_scyoE;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_scyoD [Occ=Once]
                                                                                        :: GHC.ByteOrder.ByteOrder
                                                                                      [LclId] =
                                                                                          [x_scyoz] \u []
                                                                                              case
                                                                                                  >=# [x_scyoz
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.ByteOrder.$wlvl
                                                                                                        x_scyoz;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_scyoz
                                                                                                             1#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.ByteOrder.$wlvl
                                                                                                              x_scyoz;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_scyoz];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_scyoD
                                                                                         sat_scyoF];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_scyoI [Occ=Once]
                                                                                        :: GHC.ByteOrder.ByteOrder
                                                                                      [LclId] =
                                                                                          [x_scyoz] \u []
                                                                                              case
                                                                                                  >=# [x_scyoz
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.ByteOrder.$wlvl
                                                                                                        x_scyoz;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_scyoz
                                                                                                             1#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.ByteOrder.$wlvl
                                                                                                              x_scyoz;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_scyoz];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_scyoI
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_dn_scyoy x5_scynG;
                                                              };
                                                        }; } in
                                              let {
                                                sat_scyov [Occ=Once] :: GHC.ByteOrder.ByteOrder
                                                [LclId] =
                                                    [x4_scynE] \u []
                                                        case >=# [x4_scynE 0#] of {
                                                          __DEFAULT -> GHC.ByteOrder.$wlvl x4_scynE;
                                                          1# ->
                                                              case <=# [x4_scynE 1#] of {
                                                                __DEFAULT ->
                                                                    GHC.ByteOrder.$wlvl x4_scynE;
                                                                1# -> tagToEnum# [x4_scynE];
                                                              };
                                                        };
                                              } in  : [sat_scyov sat_scyoJ];
                                          1# ->
                                              case ># [1# x4_scynE] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_scyoN [Occ=Once]
                                                        :: GHC.ByteOrder.ByteOrder
                                                      [LclId] =
                                                          [x4_scynE] \u []
                                                              case >=# [x4_scynE 0#] of {
                                                                __DEFAULT ->
                                                                    GHC.ByteOrder.$wlvl x4_scynE;
                                                                1# ->
                                                                    case <=# [x4_scynE 1#] of {
                                                                      __DEFAULT ->
                                                                          GHC.ByteOrder.$wlvl
                                                                              x4_scynE;
                                                                      1# -> tagToEnum# [x4_scynE];
                                                                    };
                                                              };
                                                    } in  : [sat_scyoN GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                    1# ->
                                        case <# [1# x5_scynG] of {
                                          __DEFAULT ->
                                              let {
                                                sat_scyp5 [Occ=Once] :: [GHC.ByteOrder.ByteOrder]
                                                [LclId] =
                                                    [x4_scynE x5_scynG] \u []
                                                        case
                                                            -# [x5_scynG x4_scynE]
                                                        of
                                                        delta_scyoS [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [1# delta_scyoS]
                                                              of
                                                              y'_scyoT [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_up_scyoU [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.ByteOrder.ByteOrder]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_scyoS
                                                                                    y'_scyoT
                                                                                    go_up_scyoU] \r [x_scyoV]
                                                                              case
                                                                                  ># [x_scyoV
                                                                                      y'_scyoT]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_scyp1 [Occ=Once]
                                                                                        :: [GHC.ByteOrder.ByteOrder]
                                                                                      [LclId] =
                                                                                          [delta_scyoS
                                                                                           go_up_scyoU
                                                                                           x_scyoV] \u []
                                                                                              case
                                                                                                  +# [x_scyoV
                                                                                                      delta_scyoS]
                                                                                              of
                                                                                              sat_scyp0
                                                                                              { __DEFAULT ->
                                                                                                    go_up_scyoU
                                                                                                        sat_scyp0;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_scyoZ [Occ=Once]
                                                                                        :: GHC.ByteOrder.ByteOrder
                                                                                      [LclId] =
                                                                                          [x_scyoV] \u []
                                                                                              case
                                                                                                  >=# [x_scyoV
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.ByteOrder.$wlvl
                                                                                                        x_scyoV;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_scyoV
                                                                                                             1#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.ByteOrder.$wlvl
                                                                                                              x_scyoV;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_scyoV];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_scyoZ
                                                                                         sat_scyp1];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_scyp4 [Occ=Once]
                                                                                        :: GHC.ByteOrder.ByteOrder
                                                                                      [LclId] =
                                                                                          [x_scyoV] \u []
                                                                                              case
                                                                                                  >=# [x_scyoV
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.ByteOrder.$wlvl
                                                                                                        x_scyoV;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_scyoV
                                                                                                             1#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.ByteOrder.$wlvl
                                                                                                              x_scyoV;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_scyoV];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_scyp4
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_up_scyoU x5_scynG;
                                                              };
                                                        }; } in
                                              let {
                                                sat_scyoR [Occ=Once] :: GHC.ByteOrder.ByteOrder
                                                [LclId] =
                                                    [x4_scynE] \u []
                                                        case >=# [x4_scynE 0#] of {
                                                          __DEFAULT -> GHC.ByteOrder.$wlvl x4_scynE;
                                                          1# ->
                                                              case <=# [x4_scynE 1#] of {
                                                                __DEFAULT ->
                                                                    GHC.ByteOrder.$wlvl x4_scynE;
                                                                1# -> tagToEnum# [x4_scynE];
                                                              };
                                                        };
                                              } in  : [sat_scyoR sat_scyp5];
                                          1# ->
                                              case <# [1# x4_scynE] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_scyp9 [Occ=Once]
                                                        :: GHC.ByteOrder.ByteOrder
                                                      [LclId] =
                                                          [x4_scynE] \u []
                                                              case >=# [x4_scynE 0#] of {
                                                                __DEFAULT ->
                                                                    GHC.ByteOrder.$wlvl x4_scynE;
                                                                1# ->
                                                                    case <=# [x4_scynE 1#] of {
                                                                      __DEFAULT ->
                                                                          GHC.ByteOrder.$wlvl
                                                                              x4_scynE;
                                                                      1# -> tagToEnum# [x4_scynE];
                                                                    };
                                                              };
                                                    } in  : [sat_scyp9 GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                  };
                            };
                  } in 
                    case x2_scynB of {
                      GHC.ByteOrder.BigEndian -> $j1_scynF 0#;
                      GHC.ByteOrder.LittleEndian -> $j1_scynF 1#;
                    };
        } in 
          case x1_scynA of {
            GHC.ByteOrder.BigEndian -> $j_scynD 0#;
            GHC.ByteOrder.LittleEndian -> $j_scynD 1#;
          };

GHC.ByteOrder.$fEnumByteOrder [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Enum GHC.ByteOrder.ByteOrder
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Enum! [GHC.ByteOrder.$fEnumByteOrder_$csucc
                                    GHC.ByteOrder.$fEnumByteOrder_$cpred
                                    GHC.ByteOrder.$fEnumByteOrder_$ctoEnum
                                    GHC.ByteOrder.$fEnumByteOrder_$cfromEnum
                                    GHC.ByteOrder.$fEnumByteOrder_$cenumFrom
                                    GHC.ByteOrder.$fEnumByteOrder_$cenumFromThen
                                    GHC.ByteOrder.$fEnumByteOrder_$cenumFromTo
                                    GHC.ByteOrder.$fEnumByteOrder_$cenumFromThenTo];

GHC.ByteOrder.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ByteOrder.$trModule4];

GHC.ByteOrder.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ByteOrder.$trModule2];

GHC.ByteOrder.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.ByteOrder.$trModule3
                                     GHC.ByteOrder.$trModule1];

GHC.ByteOrder.$tcByteOrder2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ByteOrder"#;

GHC.ByteOrder.$tcByteOrder1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ByteOrder.$tcByteOrder2];

GHC.ByteOrder.$tcByteOrder :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [16811050684449662084##
                                    17273005335247024091##
                                    GHC.ByteOrder.$trModule
                                    GHC.ByteOrder.$tcByteOrder1
                                    0#
                                    GHC.Types.krep$*];

GHC.ByteOrder.$tc'BigEndian1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.ByteOrder.$tcByteOrder
                                              GHC.Types.[]];

GHC.ByteOrder.$tc'BigEndian3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'BigEndian"#;

GHC.ByteOrder.$tc'BigEndian2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ByteOrder.$tc'BigEndian3];

GHC.ByteOrder.$tc'BigEndian :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2645192688778293591##
                                    7455668807059762078##
                                    GHC.ByteOrder.$trModule
                                    GHC.ByteOrder.$tc'BigEndian2
                                    0#
                                    GHC.ByteOrder.$tc'BigEndian1];

GHC.ByteOrder.$tc'LittleEndian2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'LittleEndian"#;

GHC.ByteOrder.$tc'LittleEndian1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ByteOrder.$tc'LittleEndian2];

GHC.ByteOrder.$tc'LittleEndian :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [8702700204875460152##
                                    10337679016369298147##
                                    GHC.ByteOrder.$trModule
                                    GHC.ByteOrder.$tc'LittleEndian1
                                    0#
                                    GHC.ByteOrder.$tc'BigEndian1];

GHC.ByteOrder.BigEndian :: GHC.ByteOrder.ByteOrder
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.ByteOrder.BigEndian! [];

GHC.ByteOrder.LittleEndian :: GHC.ByteOrder.ByteOrder
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.ByteOrder.LittleEndian! [];


==================== STG syntax: ====================
2018-03-16 16:07:27.147968448 UTC

GHC.ByteOrder.$fReadByteOrder11 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "BigEndian"#;

GHC.ByteOrder.$fReadByteOrder10 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.ByteOrder.$fReadByteOrder11;

GHC.ByteOrder.$fReadByteOrder7 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "LittleEndian"#;

GHC.ByteOrder.$fReadByteOrder6 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.ByteOrder.$fReadByteOrder7;

GHC.ByteOrder.$fShowByteOrder_$cshowsPrec
  :: GHC.Types.Int -> GHC.ByteOrder.ByteOrder -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [ds_scykJ ds1_scykK eta_scykL]
        case ds1_scykK of {
          GHC.ByteOrder.BigEndian ->
              GHC.Base.++ GHC.ByteOrder.$fReadByteOrder10 eta_scykL;
          GHC.ByteOrder.LittleEndian ->
              GHC.Base.++ GHC.ByteOrder.$fReadByteOrder6 eta_scykL;
        };

GHC.ByteOrder.$fShowByteOrder_$cshow
  :: GHC.ByteOrder.ByteOrder -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_scykN]
        case x_scykN of {
          GHC.ByteOrder.BigEndian -> GHC.ByteOrder.$fReadByteOrder10;
          GHC.ByteOrder.LittleEndian -> GHC.ByteOrder.$fReadByteOrder6;
        };

GHC.ByteOrder.$fShowByteOrder1
  :: GHC.ByteOrder.ByteOrder -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [ds_scykP eta_scykQ]
        case ds_scykP of {
          GHC.ByteOrder.BigEndian ->
              GHC.Base.++ GHC.ByteOrder.$fReadByteOrder10 eta_scykQ;
          GHC.ByteOrder.LittleEndian ->
              GHC.Base.++ GHC.ByteOrder.$fReadByteOrder6 eta_scykQ;
        };

GHC.ByteOrder.$fShowByteOrder_$cshowList
  :: [GHC.ByteOrder.ByteOrder] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_scykS s_scykT]
        GHC.Show.showList__
            GHC.ByteOrder.$fShowByteOrder1 ls_scykS s_scykT;

GHC.ByteOrder.$fShowByteOrder [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.ByteOrder.ByteOrder
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.ByteOrder.$fShowByteOrder_$cshowsPrec
                                    GHC.ByteOrder.$fShowByteOrder_$cshow
                                    GHC.ByteOrder.$fShowByteOrder_$cshowList];

GHC.ByteOrder.$fReadByteOrder9
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.ByteOrder.ByteOrder -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_scykU k_scykV] k_scykV GHC.ByteOrder.BigEndian;

GHC.ByteOrder.$fReadByteOrder8
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec GHC.ByteOrder.ByteOrder)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.ByteOrder.$fReadByteOrder10
                        GHC.ByteOrder.$fReadByteOrder9];

GHC.ByteOrder.$fReadByteOrder5
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.ByteOrder.ByteOrder -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_scykW k_scykX] k_scykX GHC.ByteOrder.LittleEndian;

GHC.ByteOrder.$fReadByteOrder4
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec GHC.ByteOrder.ByteOrder)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.ByteOrder.$fReadByteOrder6
                        GHC.ByteOrder.$fReadByteOrder5];

GHC.ByteOrder.$fReadByteOrder3
  :: [(GHC.Base.String,
       Text.ParserCombinators.ReadPrec.ReadPrec GHC.ByteOrder.ByteOrder)]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.ByteOrder.$fReadByteOrder4 GHC.Types.[]];

GHC.ByteOrder.$fReadByteOrder_sps
  :: [(GHC.Base.String,
       Text.ParserCombinators.ReadPrec.ReadPrec GHC.ByteOrder.ByteOrder)]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.ByteOrder.$fReadByteOrder8
                      GHC.ByteOrder.$fReadByteOrder3];

GHC.ByteOrder.$fReadByteOrder2
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.ByteOrder.ByteOrder
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_scykY]
        GHC.Read.choose2 GHC.ByteOrder.$fReadByteOrder_sps eta_scykY;

GHC.ByteOrder.$fReadByteOrder1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.ByteOrder.ByteOrder -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Read.list3 GHC.ByteOrder.$fReadByteOrder2 eta_B2 eta_B1;

GHC.ByteOrder.$fReadByteOrder_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.ByteOrder.ByteOrder
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_scykZ]
        let {
          sat_scyl0 [Occ=Once]
            :: Text.ParserCombinators.ReadP.P GHC.ByteOrder.ByteOrder
          [LclId] =
              [n_scykZ] \u []
                  GHC.Read.list3
                      GHC.ByteOrder.$fReadByteOrder2
                      n_scykZ
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_scyl0;

GHC.ByteOrder.$fReadByteOrder_$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec
       [GHC.ByteOrder.ByteOrder]
[GblId] =
    [] \u [] GHC.Read.list GHC.ByteOrder.$fReadByteOrder1;

GHC.ByteOrder.$fReadByteOrder12
  :: Text.ParserCombinators.ReadP.P [GHC.ByteOrder.ByteOrder]
[GblId] =
    [] \u []
        GHC.ByteOrder.$fReadByteOrder_$creadListPrec
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.ByteOrder.$fReadByteOrder_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.ByteOrder.ByteOrder]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run
            GHC.ByteOrder.$fReadByteOrder12 eta_B1;

GHC.ByteOrder.$fReadByteOrder [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.ByteOrder.ByteOrder
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.ByteOrder.$fReadByteOrder_$creadsPrec
                                    GHC.ByteOrder.$fReadByteOrder_$creadList
                                    GHC.ByteOrder.$fReadByteOrder1
                                    GHC.ByteOrder.$fReadByteOrder_$creadListPrec];

GHC.ByteOrder.$fBoundedByteOrder [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Bounded GHC.ByteOrder.ByteOrder
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Bounded! [GHC.ByteOrder.BigEndian
                                       GHC.ByteOrder.LittleEndian];

GHC.ByteOrder.$fOrdByteOrder_$c<
  :: GHC.ByteOrder.ByteOrder
     -> GHC.ByteOrder.ByteOrder -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_scyl1 b_scyl2]
        case a_scyl1 of {
          GHC.ByteOrder.BigEndian ->
              case b_scyl2 of {
                GHC.ByteOrder.BigEndian -> GHC.Types.False [];
                GHC.ByteOrder.LittleEndian -> GHC.Types.True [];
              };
          GHC.ByteOrder.LittleEndian ->
              case b_scyl2 of { __DEFAULT -> GHC.Types.False []; };
        };

GHC.ByteOrder.$fOrdByteOrder_$ccompare
  :: GHC.ByteOrder.ByteOrder
     -> GHC.ByteOrder.ByteOrder -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_scyl6 b_scyl7]
        case a_scyl6 of {
          GHC.ByteOrder.BigEndian ->
              case b_scyl7 of {
                GHC.ByteOrder.BigEndian -> GHC.Types.EQ [];
                GHC.ByteOrder.LittleEndian -> GHC.Types.LT [];
              };
          GHC.ByteOrder.LittleEndian ->
              case b_scyl7 of {
                GHC.ByteOrder.BigEndian -> GHC.Types.GT [];
                GHC.ByteOrder.LittleEndian -> GHC.Types.EQ [];
              };
        };

GHC.ByteOrder.$fEqByteOrder_$c==
  :: GHC.ByteOrder.ByteOrder
     -> GHC.ByteOrder.ByteOrder -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_scylb ds1_scylc]
        case ds_scylb of {
          GHC.ByteOrder.BigEndian ->
              case ds1_scylc of {
                GHC.ByteOrder.BigEndian -> GHC.Types.True [];
                GHC.ByteOrder.LittleEndian -> GHC.Types.False [];
              };
          GHC.ByteOrder.LittleEndian ->
              case ds1_scylc of {
                GHC.ByteOrder.BigEndian -> GHC.Types.False [];
                GHC.ByteOrder.LittleEndian -> GHC.Types.True [];
              };
        };

GHC.ByteOrder.$fEqByteOrder_$c/= [InlPrag=INLINE (sat-args=2)]
  :: GHC.ByteOrder.ByteOrder
     -> GHC.ByteOrder.ByteOrder -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_scylg eta1_scylh]
        case eta_scylg of {
          GHC.ByteOrder.BigEndian ->
              case eta1_scylh of {
                GHC.ByteOrder.BigEndian -> GHC.Types.False [];
                GHC.ByteOrder.LittleEndian -> GHC.Types.True [];
              };
          GHC.ByteOrder.LittleEndian ->
              case eta1_scylh of {
                GHC.ByteOrder.BigEndian -> GHC.Types.True [];
                GHC.ByteOrder.LittleEndian -> GHC.Types.False [];
              };
        };

GHC.ByteOrder.$fEqByteOrder [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.ByteOrder.ByteOrder
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.ByteOrder.$fEqByteOrder_$c==
                                     GHC.ByteOrder.$fEqByteOrder_$c/=];

GHC.ByteOrder.$fOrdByteOrder_$c<=
  :: GHC.ByteOrder.ByteOrder
     -> GHC.ByteOrder.ByteOrder -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_scyll b_scylm]
        case b_scylm of {
          GHC.ByteOrder.BigEndian ->
              case a_scyll of {
                GHC.ByteOrder.BigEndian -> GHC.Types.True [];
                GHC.ByteOrder.LittleEndian -> GHC.Types.False [];
              };
          GHC.ByteOrder.LittleEndian ->
              case a_scyll of { __DEFAULT -> GHC.Types.True []; };
        };

GHC.ByteOrder.$fOrdByteOrder_$cmax
  :: GHC.ByteOrder.ByteOrder
     -> GHC.ByteOrder.ByteOrder -> GHC.ByteOrder.ByteOrder
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_scylq y_scylr]
        case y_scylr of {
          GHC.ByteOrder.BigEndian -> x_scylq;
          GHC.ByteOrder.LittleEndian ->
              case x_scylq of { __DEFAULT -> GHC.ByteOrder.LittleEndian []; };
        };

GHC.ByteOrder.$fOrdByteOrder_$c>=
  :: GHC.ByteOrder.ByteOrder
     -> GHC.ByteOrder.ByteOrder -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_scylu b_scylv]
        case a_scylu of {
          GHC.ByteOrder.BigEndian ->
              case b_scylv of {
                GHC.ByteOrder.BigEndian -> GHC.Types.True [];
                GHC.ByteOrder.LittleEndian -> GHC.Types.False [];
              };
          GHC.ByteOrder.LittleEndian ->
              case b_scylv of { __DEFAULT -> GHC.Types.True []; };
        };

GHC.ByteOrder.$fOrdByteOrder_$c>
  :: GHC.ByteOrder.ByteOrder
     -> GHC.ByteOrder.ByteOrder -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_scylz b_scylA]
        GHC.ByteOrder.$fOrdByteOrder_$c< b_scylA a_scylz;

GHC.ByteOrder.$fOrdByteOrder_$cmin
  :: GHC.ByteOrder.ByteOrder
     -> GHC.ByteOrder.ByteOrder -> GHC.ByteOrder.ByteOrder
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_scylB y_scylC]
        case y_scylC of {
          GHC.ByteOrder.BigEndian ->
              case x_scylB of { __DEFAULT -> GHC.ByteOrder.BigEndian []; };
          GHC.ByteOrder.LittleEndian -> x_scylB;
        };

GHC.ByteOrder.$fOrdByteOrder [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.ByteOrder.ByteOrder
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.ByteOrder.$fEqByteOrder
                                      GHC.ByteOrder.$fOrdByteOrder_$ccompare
                                      GHC.ByteOrder.$fOrdByteOrder_$c<
                                      GHC.ByteOrder.$fOrdByteOrder_$c<=
                                      GHC.ByteOrder.$fOrdByteOrder_$c>
                                      GHC.ByteOrder.$fOrdByteOrder_$c>=
                                      GHC.ByteOrder.$fOrdByteOrder_$cmax
                                      GHC.ByteOrder.$fOrdByteOrder_$cmin];

GHC.ByteOrder.targetByteOrder :: GHC.ByteOrder.ByteOrder
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.ByteOrder.LittleEndian! [];

lvl_rcykn :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

lvl1_rcyko :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [1#];

GHC.ByteOrder.$fEnumByteOrder_$cfromEnum
  :: GHC.ByteOrder.ByteOrder -> GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [a_scylF]
        case a_scylF of {
          GHC.ByteOrder.BigEndian -> lvl_rcykn;
          GHC.ByteOrder.LittleEndian -> lvl1_rcyko;
        };

lvl2_rcykp :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "error"#;

lvl3_rcykq :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl2_rcykp;

GHC.ByteOrder.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

lvl4_rcykr :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.ByteOrder.$trModule4;

GHC.ByteOrder.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.ByteOrder"#;

lvl5_rcyks :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.ByteOrder.$trModule2;

lvl6_rcykt :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "./GHC/ByteOrder.hs"#;

lvl7_rcyku :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl6_rcykt;

lvl8_rcykv :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [26#];

lvl9_rcykw :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [16#];

lvl10_rcykx :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [20#];

lvl11_rcyky :: GHC.Stack.Types.SrcLoc
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.SrcLoc! [lvl4_rcykr
                                           lvl5_rcyks
                                           lvl7_rcyku
                                           lvl8_rcykv
                                           lvl9_rcykw
                                           lvl8_rcykv
                                           lvl10_rcykx];

lvl12_rcykz :: GHC.Stack.Types.CallStack
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.PushCallStack! [lvl3_rcykq
                                                  lvl11_rcyky
                                                  GHC.Stack.Types.EmptyCallStack];

lvl13_rcykA :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "pred{ByteOrder}: tried to take `pred' of first tag in enumeration"#;

GHC.ByteOrder.$fEnumByteOrder3 :: GHC.ByteOrder.ByteOrder
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl13_rcykA of sat_scylH {
          __DEFAULT -> GHC.Err.error lvl12_rcykz sat_scylH;
        };

GHC.ByteOrder.$fEnumByteOrder_$cpred
  :: GHC.ByteOrder.ByteOrder -> GHC.ByteOrder.ByteOrder
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [a_scylI]
        case a_scylI of {
          GHC.ByteOrder.BigEndian -> GHC.ByteOrder.$fEnumByteOrder3;
          GHC.ByteOrder.LittleEndian -> GHC.ByteOrder.BigEndian [];
        };

lvl14_rcykB :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "succ{ByteOrder}: tried to take `succ' of last tag in enumeration"#;

GHC.ByteOrder.$fEnumByteOrder4 :: GHC.ByteOrder.ByteOrder
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl14_rcykB of sat_scylK {
          __DEFAULT -> GHC.Err.error lvl12_rcykz sat_scylK;
        };

GHC.ByteOrder.$fEnumByteOrder_$csucc
  :: GHC.ByteOrder.ByteOrder -> GHC.ByteOrder.ByteOrder
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [a_scylL]
        case a_scylL of {
          GHC.ByteOrder.BigEndian -> GHC.ByteOrder.LittleEndian [];
          GHC.ByteOrder.LittleEndian -> GHC.ByteOrder.$fEnumByteOrder4;
        };

lvl15_rcykC :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ") is outside of enumeration's range (0,"#;

lvl16_rcykD :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ")"#;

lvl17_rcykE :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl16_rcykD;

lvl18_rcykF :: [GHC.Types.Char]
[GblId] =
    [] \u []
        case GHC.Show.$wshowSignedInt 0# 1# lvl17_rcykE of {
          (#,#) ww5_scylO [Occ=Once] ww6_scylP [Occ=Once] ->
              : [ww5_scylO ww6_scylP];
        };

lvl19_rcykG :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackAppendCString# lvl15_rcykC lvl18_rcykF;

lvl20_rcykH :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "toEnum{ByteOrder}: tag ("#;

GHC.ByteOrder.$wlvl [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.ByteOrder.ByteOrder
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [ww_scylQ]
        let {
          sat_scylU [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [ww_scylQ] \u []
                  case GHC.Show.$wshowSignedInt 0# ww_scylQ lvl19_rcykG of {
                    (#,#) ww5_scylS [Occ=Once] ww6_scylT [Occ=Once] ->
                        : [ww5_scylS ww6_scylT];
                  };
        } in 
          case
              GHC.CString.unpackAppendCString# lvl20_rcykH sat_scylU
          of
          sat_scylV
          { __DEFAULT -> GHC.Err.error lvl12_rcykz sat_scylV;
          };

GHC.ByteOrder.$w$ctoEnum [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.ByteOrder.ByteOrder
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [ww_scylW]
        case >=# [ww_scylW 0#] of {
          __DEFAULT -> GHC.ByteOrder.$wlvl ww_scylW;
          1# ->
              case <=# [ww_scylW 1#] of {
                __DEFAULT -> GHC.ByteOrder.$wlvl ww_scylW;
                1# -> tagToEnum# [ww_scylW];
              };
        };

GHC.ByteOrder.$fEnumByteOrder_$ctoEnum [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.ByteOrder.ByteOrder
[GblId, Arity=1, Str=<S(S),1*U(U)>, Unf=OtherCon []] =
    [] \r [w_scylZ]
        case w_scylZ of {
          GHC.Types.I# ww1_scym1 [Occ=Once] ->
              GHC.ByteOrder.$w$ctoEnum ww1_scym1;
        };

GHC.ByteOrder.$fEnumByteOrder_go2 [Occ=LoopBreaker]
  :: GHC.Prim.Int# -> [GHC.ByteOrder.ByteOrder]
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [x_scym2]
        let {
          sat_scym6 [Occ=Once] :: [GHC.ByteOrder.ByteOrder]
          [LclId] =
              [x_scym2] \u []
                  case x_scym2 of wild_scym4 {
                    __DEFAULT ->
                        case +# [wild_scym4 1#] of sat_scym5 {
                          __DEFAULT -> GHC.ByteOrder.$fEnumByteOrder_go2 sat_scym5;
                        };
                    1# -> [] [];
                  }; } in
        let {
          sat_scym3 [Occ=Once] :: GHC.ByteOrder.ByteOrder
          [LclId] =
              [x_scym2] \u [] tagToEnum# [x_scym2];
        } in  : [sat_scym3 sat_scym6];

GHC.ByteOrder.$fEnumByteOrder2 :: [GHC.ByteOrder.ByteOrder]
[GblId] =
    [] \u [] GHC.ByteOrder.$fEnumByteOrder_go2 0#;

GHC.ByteOrder.$fEnumByteOrder1 :: [GHC.ByteOrder.ByteOrder]
[GblId] =
    [] \u [] GHC.ByteOrder.$fEnumByteOrder_go2 1#;

GHC.ByteOrder.$fEnumByteOrder_$cenumFrom
  :: GHC.ByteOrder.ByteOrder -> [GHC.ByteOrder.ByteOrder]
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [a_scym7]
        case a_scym7 of {
          GHC.ByteOrder.BigEndian -> GHC.ByteOrder.$fEnumByteOrder2;
          GHC.ByteOrder.LittleEndian -> GHC.ByteOrder.$fEnumByteOrder1;
        };

GHC.ByteOrder.$fEnumByteOrder_$cenumFromThen
  :: GHC.ByteOrder.ByteOrder
     -> GHC.ByteOrder.ByteOrder -> [GHC.ByteOrder.ByteOrder]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_scym9 b_scyma]
        let-no-escape {
          $j_scymb [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
            :: GHC.Prim.Int# -> [GHC.ByteOrder.ByteOrder]
          [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
              sat-only [b_scyma] \r [a#_scymc]
                  let-no-escape {
                    $j1_scymd [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
                      :: GHC.Prim.Int# -> [GHC.ByteOrder.ByteOrder]
                    [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
                        sat-only [a#_scymc] \r [b#_scyme]
                            case ># [a#_scymc b#_scyme] of {
                              __DEFAULT ->
                                  case >=# [b#_scyme a#_scymc] of {
                                    __DEFAULT ->
                                        case ># [1# b#_scyme] of {
                                          __DEFAULT ->
                                              let {
                                                sat_scyms [Occ=Once] :: [GHC.ByteOrder.ByteOrder]
                                                [LclId] =
                                                    [a#_scymc b#_scyme] \u []
                                                        case
                                                            -# [b#_scyme a#_scymc]
                                                        of
                                                        delta_scymj [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [1# delta_scymj]
                                                              of
                                                              y'_scymk [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_dn_scyml [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.ByteOrder.ByteOrder]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_scymj
                                                                                    y'_scymk
                                                                                    go_dn_scyml] \r [x_scymm]
                                                                              case
                                                                                  <# [x_scymm
                                                                                      y'_scymk]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_scymq [Occ=Once]
                                                                                        :: [GHC.ByteOrder.ByteOrder]
                                                                                      [LclId] =
                                                                                          [delta_scymj
                                                                                           go_dn_scyml
                                                                                           x_scymm] \u []
                                                                                              case
                                                                                                  +# [x_scymm
                                                                                                      delta_scymj]
                                                                                              of
                                                                                              sat_scymp
                                                                                              { __DEFAULT ->
                                                                                                    go_dn_scyml
                                                                                                        sat_scymp;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_scymo [Occ=Once]
                                                                                        :: GHC.ByteOrder.ByteOrder
                                                                                      [LclId] =
                                                                                          [x_scymm] \u []
                                                                                              tagToEnum# [x_scymm];
                                                                                    } in 
                                                                                      : [sat_scymo
                                                                                         sat_scymq];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_scymr [Occ=Once]
                                                                                        :: GHC.ByteOrder.ByteOrder
                                                                                      [LclId] =
                                                                                          [x_scymm] \u []
                                                                                              tagToEnum# [x_scymm];
                                                                                    } in 
                                                                                      : [sat_scymr
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_dn_scyml b#_scyme;
                                                              };
                                                        }; } in
                                              let {
                                                sat_scymi [Occ=Once] :: GHC.ByteOrder.ByteOrder
                                                [LclId] =
                                                    [a#_scymc] \u [] tagToEnum# [a#_scymc];
                                              } in  : [sat_scymi sat_scyms];
                                          1# ->
                                              case ># [1# a#_scymc] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_scymu [Occ=Once]
                                                        :: GHC.ByteOrder.ByteOrder
                                                      [LclId] =
                                                          [a#_scymc] \u [] tagToEnum# [a#_scymc];
                                                    } in  : [sat_scymu GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                    1# ->
                                        case <# [1# b#_scyme] of {
                                          __DEFAULT ->
                                              let {
                                                sat_scymG [Occ=Once] :: [GHC.ByteOrder.ByteOrder]
                                                [LclId] =
                                                    [a#_scymc b#_scyme] \u []
                                                        case
                                                            -# [b#_scyme a#_scymc]
                                                        of
                                                        delta_scymx [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [1# delta_scymx]
                                                              of
                                                              y'_scymy [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_up_scymz [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.ByteOrder.ByteOrder]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_scymx
                                                                                    y'_scymy
                                                                                    go_up_scymz] \r [x_scymA]
                                                                              case
                                                                                  ># [x_scymA
                                                                                      y'_scymy]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_scymE [Occ=Once]
                                                                                        :: [GHC.ByteOrder.ByteOrder]
                                                                                      [LclId] =
                                                                                          [delta_scymx
                                                                                           go_up_scymz
                                                                                           x_scymA] \u []
                                                                                              case
                                                                                                  +# [x_scymA
                                                                                                      delta_scymx]
                                                                                              of
                                                                                              sat_scymD
                                                                                              { __DEFAULT ->
                                                                                                    go_up_scymz
                                                                                                        sat_scymD;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_scymC [Occ=Once]
                                                                                        :: GHC.ByteOrder.ByteOrder
                                                                                      [LclId] =
                                                                                          [x_scymA] \u []
                                                                                              tagToEnum# [x_scymA];
                                                                                    } in 
                                                                                      : [sat_scymC
                                                                                         sat_scymE];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_scymF [Occ=Once]
                                                                                        :: GHC.ByteOrder.ByteOrder
                                                                                      [LclId] =
                                                                                          [x_scymA] \u []
                                                                                              tagToEnum# [x_scymA];
                                                                                    } in 
                                                                                      : [sat_scymF
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_up_scymz b#_scyme;
                                                              };
                                                        }; } in
                                              let {
                                                sat_scymw [Occ=Once] :: GHC.ByteOrder.ByteOrder
                                                [LclId] =
                                                    [a#_scymc] \u [] tagToEnum# [a#_scymc];
                                              } in  : [sat_scymw sat_scymG];
                                          1# ->
                                              case <# [1# a#_scymc] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_scymI [Occ=Once]
                                                        :: GHC.ByteOrder.ByteOrder
                                                      [LclId] =
                                                          [a#_scymc] \u [] tagToEnum# [a#_scymc];
                                                    } in  : [sat_scymI GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                  };
                              1# ->
                                  case >=# [b#_scyme a#_scymc] of {
                                    __DEFAULT ->
                                        case ># [0# b#_scyme] of {
                                          __DEFAULT ->
                                              let {
                                                sat_scymV [Occ=Once] :: [GHC.ByteOrder.ByteOrder]
                                                [LclId] =
                                                    [a#_scymc b#_scyme] \u []
                                                        case
                                                            -# [b#_scyme a#_scymc]
                                                        of
                                                        delta_scymM [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [0# delta_scymM]
                                                              of
                                                              y'_scymN [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_dn_scymO [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.ByteOrder.ByteOrder]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_scymM
                                                                                    y'_scymN
                                                                                    go_dn_scymO] \r [x_scymP]
                                                                              case
                                                                                  <# [x_scymP
                                                                                      y'_scymN]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_scymT [Occ=Once]
                                                                                        :: [GHC.ByteOrder.ByteOrder]
                                                                                      [LclId] =
                                                                                          [delta_scymM
                                                                                           go_dn_scymO
                                                                                           x_scymP] \u []
                                                                                              case
                                                                                                  +# [x_scymP
                                                                                                      delta_scymM]
                                                                                              of
                                                                                              sat_scymS
                                                                                              { __DEFAULT ->
                                                                                                    go_dn_scymO
                                                                                                        sat_scymS;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_scymR [Occ=Once]
                                                                                        :: GHC.ByteOrder.ByteOrder
                                                                                      [LclId] =
                                                                                          [x_scymP] \u []
                                                                                              tagToEnum# [x_scymP];
                                                                                    } in 
                                                                                      : [sat_scymR
                                                                                         sat_scymT];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_scymU [Occ=Once]
                                                                                        :: GHC.ByteOrder.ByteOrder
                                                                                      [LclId] =
                                                                                          [x_scymP] \u []
                                                                                              tagToEnum# [x_scymP];
                                                                                    } in 
                                                                                      : [sat_scymU
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_dn_scymO b#_scyme;
                                                              };
                                                        }; } in
                                              let {
                                                sat_scymL [Occ=Once] :: GHC.ByteOrder.ByteOrder
                                                [LclId] =
                                                    [a#_scymc] \u [] tagToEnum# [a#_scymc];
                                              } in  : [sat_scymL sat_scymV];
                                          1# ->
                                              case ># [0# a#_scymc] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_scymX [Occ=Once]
                                                        :: GHC.ByteOrder.ByteOrder
                                                      [LclId] =
                                                          [a#_scymc] \u [] tagToEnum# [a#_scymc];
                                                    } in  : [sat_scymX GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                    1# ->
                                        case <# [0# b#_scyme] of {
                                          __DEFAULT ->
                                              let {
                                                sat_scyn9 [Occ=Once] :: [GHC.ByteOrder.ByteOrder]
                                                [LclId] =
                                                    [a#_scymc b#_scyme] \u []
                                                        case
                                                            -# [b#_scyme a#_scymc]
                                                        of
                                                        delta_scyn0 [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [0# delta_scyn0]
                                                              of
                                                              y'_scyn1 [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_up_scyn2 [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.ByteOrder.ByteOrder]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_scyn0
                                                                                    y'_scyn1
                                                                                    go_up_scyn2] \r [x_scyn3]
                                                                              case
                                                                                  ># [x_scyn3
                                                                                      y'_scyn1]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_scyn7 [Occ=Once]
                                                                                        :: [GHC.ByteOrder.ByteOrder]
                                                                                      [LclId] =
                                                                                          [delta_scyn0
                                                                                           go_up_scyn2
                                                                                           x_scyn3] \u []
                                                                                              case
                                                                                                  +# [x_scyn3
                                                                                                      delta_scyn0]
                                                                                              of
                                                                                              sat_scyn6
                                                                                              { __DEFAULT ->
                                                                                                    go_up_scyn2
                                                                                                        sat_scyn6;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_scyn5 [Occ=Once]
                                                                                        :: GHC.ByteOrder.ByteOrder
                                                                                      [LclId] =
                                                                                          [x_scyn3] \u []
                                                                                              tagToEnum# [x_scyn3];
                                                                                    } in 
                                                                                      : [sat_scyn5
                                                                                         sat_scyn7];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_scyn8 [Occ=Once]
                                                                                        :: GHC.ByteOrder.ByteOrder
                                                                                      [LclId] =
                                                                                          [x_scyn3] \u []
                                                                                              tagToEnum# [x_scyn3];
                                                                                    } in 
                                                                                      : [sat_scyn8
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_up_scyn2 b#_scyme;
                                                              };
                                                        }; } in
                                              let {
                                                sat_scymZ [Occ=Once] :: GHC.ByteOrder.ByteOrder
                                                [LclId] =
                                                    [a#_scymc] \u [] tagToEnum# [a#_scymc];
                                              } in  : [sat_scymZ sat_scyn9];
                                          1# ->
                                              case <# [0# a#_scymc] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_scynb [Occ=Once]
                                                        :: GHC.ByteOrder.ByteOrder
                                                      [LclId] =
                                                          [a#_scymc] \u [] tagToEnum# [a#_scymc];
                                                    } in  : [sat_scynb GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                  };
                            };
                  } in 
                    case b_scyma of {
                      GHC.ByteOrder.BigEndian -> $j1_scymd 0#;
                      GHC.ByteOrder.LittleEndian -> $j1_scymd 1#;
                    };
        } in 
          case a_scym9 of {
            GHC.ByteOrder.BigEndian -> $j_scymb 0#;
            GHC.ByteOrder.LittleEndian -> $j_scymb 1#;
          };

GHC.ByteOrder.$fEnumByteOrder_go1 [Occ=LoopBreaker]
  :: GHC.Prim.Int# -> [GHC.ByteOrder.ByteOrder]
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [x_scyne]
        let {
          sat_scynk [Occ=Once] :: [GHC.ByteOrder.ByteOrder]
          [LclId] =
              [x_scyne] \u []
                  case x_scyne of wild_scyni {
                    __DEFAULT ->
                        case +# [wild_scyni 1#] of sat_scynj {
                          __DEFAULT -> GHC.ByteOrder.$fEnumByteOrder_go1 sat_scynj;
                        };
                    0# -> [] [];
                  }; } in
        let {
          sat_scynh [Occ=Once] :: GHC.ByteOrder.ByteOrder
          [LclId] =
              [x_scyne] \u []
                  case >=# [x_scyne 0#] of {
                    __DEFAULT -> GHC.ByteOrder.$wlvl x_scyne;
                    1# ->
                        case <=# [x_scyne 1#] of {
                          __DEFAULT -> GHC.ByteOrder.$wlvl x_scyne;
                          1# -> tagToEnum# [x_scyne];
                        };
                  };
        } in  : [sat_scynh sat_scynk];

GHC.ByteOrder.$fEnumByteOrder_go [Occ=LoopBreaker]
  :: GHC.Prim.Int# -> [GHC.ByteOrder.ByteOrder]
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [x_scynl]
        let {
          sat_scynr [Occ=Once] :: [GHC.ByteOrder.ByteOrder]
          [LclId] =
              [x_scynl] \u []
                  case x_scynl of wild_scynp {
                    __DEFAULT ->
                        case +# [wild_scynp 1#] of sat_scynq {
                          __DEFAULT -> GHC.ByteOrder.$fEnumByteOrder_go sat_scynq;
                        };
                    1# -> [] [];
                  }; } in
        let {
          sat_scyno [Occ=Once] :: GHC.ByteOrder.ByteOrder
          [LclId] =
              [x_scynl] \u []
                  case >=# [x_scynl 0#] of {
                    __DEFAULT -> GHC.ByteOrder.$wlvl x_scynl;
                    1# ->
                        case <=# [x_scynl 1#] of {
                          __DEFAULT -> GHC.ByteOrder.$wlvl x_scynl;
                          1# -> tagToEnum# [x_scynl];
                        };
                  };
        } in  : [sat_scyno sat_scynr];

GHC.ByteOrder.$fEnumByteOrder_$cenumFromTo
  :: GHC.ByteOrder.ByteOrder
     -> GHC.ByteOrder.ByteOrder -> [GHC.ByteOrder.ByteOrder]
[GblId, Arity=2, Str=<S,1*U><S,1*U>, Unf=OtherCon []] =
    [] \r [x_scyns y_scynt]
        let-no-escape {
          $j_scynu [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
            :: GHC.Prim.Int# -> [GHC.ByteOrder.ByteOrder]
          [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
              sat-only [y_scynt] \r [x1_scynv]
                  case y_scynt of {
                    GHC.ByteOrder.BigEndian ->
                        case ># [x1_scynv 0#] of {
                          __DEFAULT -> GHC.ByteOrder.$fEnumByteOrder_go1 x1_scynv;
                          1# -> [] [];
                        };
                    GHC.ByteOrder.LittleEndian ->
                        case ># [x1_scynv 1#] of {
                          __DEFAULT -> GHC.ByteOrder.$fEnumByteOrder_go x1_scynv;
                          1# -> [] [];
                        };
                  };
        } in 
          case x_scyns of {
            GHC.ByteOrder.BigEndian -> $j_scynu 0#;
            GHC.ByteOrder.LittleEndian -> $j_scynu 1#;
          };

GHC.ByteOrder.$fEnumByteOrder_$cenumFromThenTo
  :: GHC.ByteOrder.ByteOrder
     -> GHC.ByteOrder.ByteOrder
     -> GHC.ByteOrder.ByteOrder
     -> [GHC.ByteOrder.ByteOrder]
[GblId, Arity=3, Str=<S,1*U><S,1*U><S,1*U>, Unf=OtherCon []] =
    [] \r [x1_scynA x2_scynB y_scynC]
        let-no-escape {
          $j_scynD [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
            :: GHC.Prim.Int# -> [GHC.ByteOrder.ByteOrder]
          [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
              sat-only [x2_scynB y_scynC] \r [x4_scynE]
                  let-no-escape {
                    $j1_scynF [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
                      :: GHC.Prim.Int# -> [GHC.ByteOrder.ByteOrder]
                    [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
                        sat-only [y_scynC x4_scynE] \r [x5_scynG]
                            case y_scynC of {
                              GHC.ByteOrder.BigEndian ->
                                  case >=# [x5_scynG x4_scynE] of {
                                    __DEFAULT ->
                                        case ># [0# x5_scynG] of {
                                          __DEFAULT ->
                                              let {
                                                sat_scyo0 [Occ=Once] :: [GHC.ByteOrder.ByteOrder]
                                                [LclId] =
                                                    [x4_scynE x5_scynG] \u []
                                                        case
                                                            -# [x5_scynG x4_scynE]
                                                        of
                                                        delta_scynN [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [0# delta_scynN]
                                                              of
                                                              y'_scynO [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_dn_scynP [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.ByteOrder.ByteOrder]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_scynN
                                                                                    y'_scynO
                                                                                    go_dn_scynP] \r [x_scynQ]
                                                                              case
                                                                                  <# [x_scynQ
                                                                                      y'_scynO]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_scynW [Occ=Once]
                                                                                        :: [GHC.ByteOrder.ByteOrder]
                                                                                      [LclId] =
                                                                                          [delta_scynN
                                                                                           go_dn_scynP
                                                                                           x_scynQ] \u []
                                                                                              case
                                                                                                  +# [x_scynQ
                                                                                                      delta_scynN]
                                                                                              of
                                                                                              sat_scynV
                                                                                              { __DEFAULT ->
                                                                                                    go_dn_scynP
                                                                                                        sat_scynV;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_scynU [Occ=Once]
                                                                                        :: GHC.ByteOrder.ByteOrder
                                                                                      [LclId] =
                                                                                          [x_scynQ] \u []
                                                                                              case
                                                                                                  >=# [x_scynQ
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.ByteOrder.$wlvl
                                                                                                        x_scynQ;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_scynQ
                                                                                                             1#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.ByteOrder.$wlvl
                                                                                                              x_scynQ;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_scynQ];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_scynU
                                                                                         sat_scynW];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_scynZ [Occ=Once]
                                                                                        :: GHC.ByteOrder.ByteOrder
                                                                                      [LclId] =
                                                                                          [x_scynQ] \u []
                                                                                              case
                                                                                                  >=# [x_scynQ
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.ByteOrder.$wlvl
                                                                                                        x_scynQ;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_scynQ
                                                                                                             1#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.ByteOrder.$wlvl
                                                                                                              x_scynQ;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_scynQ];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_scynZ
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_dn_scynP x5_scynG;
                                                              };
                                                        }; } in
                                              let {
                                                sat_scynM [Occ=Once] :: GHC.ByteOrder.ByteOrder
                                                [LclId] =
                                                    [x4_scynE] \u []
                                                        case >=# [x4_scynE 0#] of {
                                                          __DEFAULT -> GHC.ByteOrder.$wlvl x4_scynE;
                                                          1# ->
                                                              case <=# [x4_scynE 1#] of {
                                                                __DEFAULT ->
                                                                    GHC.ByteOrder.$wlvl x4_scynE;
                                                                1# -> tagToEnum# [x4_scynE];
                                                              };
                                                        };
                                              } in  : [sat_scynM sat_scyo0];
                                          1# ->
                                              case ># [0# x4_scynE] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_scyo4 [Occ=Once]
                                                        :: GHC.ByteOrder.ByteOrder
                                                      [LclId] =
                                                          [x4_scynE] \u []
                                                              case >=# [x4_scynE 0#] of {
                                                                __DEFAULT ->
                                                                    GHC.ByteOrder.$wlvl x4_scynE;
                                                                1# ->
                                                                    case <=# [x4_scynE 1#] of {
                                                                      __DEFAULT ->
                                                                          GHC.ByteOrder.$wlvl
                                                                              x4_scynE;
                                                                      1# -> tagToEnum# [x4_scynE];
                                                                    };
                                                              };
                                                    } in  : [sat_scyo4 GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                    1# ->
                                        case <# [0# x5_scynG] of {
                                          __DEFAULT ->
                                              let {
                                                sat_scyom [Occ=Once] :: [GHC.ByteOrder.ByteOrder]
                                                [LclId] =
                                                    [x4_scynE x5_scynG] \u []
                                                        case
                                                            -# [x5_scynG x4_scynE]
                                                        of
                                                        delta_scyo9 [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [0# delta_scyo9]
                                                              of
                                                              y'_scyoa [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_up_scyob [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.ByteOrder.ByteOrder]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_scyo9
                                                                                    y'_scyoa
                                                                                    go_up_scyob] \r [x_scyoc]
                                                                              case
                                                                                  ># [x_scyoc
                                                                                      y'_scyoa]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_scyoi [Occ=Once]
                                                                                        :: [GHC.ByteOrder.ByteOrder]
                                                                                      [LclId] =
                                                                                          [delta_scyo9
                                                                                           go_up_scyob
                                                                                           x_scyoc] \u []
                                                                                              case
                                                                                                  +# [x_scyoc
                                                                                                      delta_scyo9]
                                                                                              of
                                                                                              sat_scyoh
                                                                                              { __DEFAULT ->
                                                                                                    go_up_scyob
                                                                                                        sat_scyoh;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_scyog [Occ=Once]
                                                                                        :: GHC.ByteOrder.ByteOrder
                                                                                      [LclId] =
                                                                                          [x_scyoc] \u []
                                                                                              case
                                                                                                  >=# [x_scyoc
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.ByteOrder.$wlvl
                                                                                                        x_scyoc;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_scyoc
                                                                                                             1#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.ByteOrder.$wlvl
                                                                                                              x_scyoc;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_scyoc];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_scyog
                                                                                         sat_scyoi];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_scyol [Occ=Once]
                                                                                        :: GHC.ByteOrder.ByteOrder
                                                                                      [LclId] =
                                                                                          [x_scyoc] \u []
                                                                                              case
                                                                                                  >=# [x_scyoc
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.ByteOrder.$wlvl
                                                                                                        x_scyoc;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_scyoc
                                                                                                             1#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.ByteOrder.$wlvl
                                                                                                              x_scyoc;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_scyoc];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_scyol
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_up_scyob x5_scynG;
                                                              };
                                                        }; } in
                                              let {
                                                sat_scyo8 [Occ=Once] :: GHC.ByteOrder.ByteOrder
                                                [LclId] =
                                                    [x4_scynE] \u []
                                                        case >=# [x4_scynE 0#] of {
                                                          __DEFAULT -> GHC.ByteOrder.$wlvl x4_scynE;
                                                          1# ->
                                                              case <=# [x4_scynE 1#] of {
                                                                __DEFAULT ->
                                                                    GHC.ByteOrder.$wlvl x4_scynE;
                                                                1# -> tagToEnum# [x4_scynE];
                                                              };
                                                        };
                                              } in  : [sat_scyo8 sat_scyom];
                                          1# ->
                                              case <# [0# x4_scynE] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_scyoq [Occ=Once]
                                                        :: GHC.ByteOrder.ByteOrder
                                                      [LclId] =
                                                          [x4_scynE] \u []
                                                              case >=# [x4_scynE 0#] of {
                                                                __DEFAULT ->
                                                                    GHC.ByteOrder.$wlvl x4_scynE;
                                                                1# ->
                                                                    case <=# [x4_scynE 1#] of {
                                                                      __DEFAULT ->
                                                                          GHC.ByteOrder.$wlvl
                                                                              x4_scynE;
                                                                      1# -> tagToEnum# [x4_scynE];
                                                                    };
                                                              };
                                                    } in  : [sat_scyoq GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                  };
                              GHC.ByteOrder.LittleEndian ->
                                  case >=# [x5_scynG x4_scynE] of {
                                    __DEFAULT ->
                                        case ># [1# x5_scynG] of {
                                          __DEFAULT ->
                                              let {
                                                sat_scyoJ [Occ=Once] :: [GHC.ByteOrder.ByteOrder]
                                                [LclId] =
                                                    [x4_scynE x5_scynG] \u []
                                                        case
                                                            -# [x5_scynG x4_scynE]
                                                        of
                                                        delta_scyow [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [1# delta_scyow]
                                                              of
                                                              y'_scyox [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_dn_scyoy [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.ByteOrder.ByteOrder]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_scyow
                                                                                    y'_scyox
                                                                                    go_dn_scyoy] \r [x_scyoz]
                                                                              case
                                                                                  <# [x_scyoz
                                                                                      y'_scyox]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_scyoF [Occ=Once]
                                                                                        :: [GHC.ByteOrder.ByteOrder]
                                                                                      [LclId] =
                                                                                          [delta_scyow
                                                                                           go_dn_scyoy
                                                                                           x_scyoz] \u []
                                                                                              case
                                                                                                  +# [x_scyoz
                                                                                                      delta_scyow]
                                                                                              of
                                                                                              sat_scyoE
                                                                                              { __DEFAULT ->
                                                                                                    go_dn_scyoy
                                                                                                        sat_scyoE;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_scyoD [Occ=Once]
                                                                                        :: GHC.ByteOrder.ByteOrder
                                                                                      [LclId] =
                                                                                          [x_scyoz] \u []
                                                                                              case
                                                                                                  >=# [x_scyoz
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.ByteOrder.$wlvl
                                                                                                        x_scyoz;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_scyoz
                                                                                                             1#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.ByteOrder.$wlvl
                                                                                                              x_scyoz;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_scyoz];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_scyoD
                                                                                         sat_scyoF];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_scyoI [Occ=Once]
                                                                                        :: GHC.ByteOrder.ByteOrder
                                                                                      [LclId] =
                                                                                          [x_scyoz] \u []
                                                                                              case
                                                                                                  >=# [x_scyoz
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.ByteOrder.$wlvl
                                                                                                        x_scyoz;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_scyoz
                                                                                                             1#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.ByteOrder.$wlvl
                                                                                                              x_scyoz;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_scyoz];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_scyoI
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_dn_scyoy x5_scynG;
                                                              };
                                                        }; } in
                                              let {
                                                sat_scyov [Occ=Once] :: GHC.ByteOrder.ByteOrder
                                                [LclId] =
                                                    [x4_scynE] \u []
                                                        case >=# [x4_scynE 0#] of {
                                                          __DEFAULT -> GHC.ByteOrder.$wlvl x4_scynE;
                                                          1# ->
                                                              case <=# [x4_scynE 1#] of {
                                                                __DEFAULT ->
                                                                    GHC.ByteOrder.$wlvl x4_scynE;
                                                                1# -> tagToEnum# [x4_scynE];
                                                              };
                                                        };
                                              } in  : [sat_scyov sat_scyoJ];
                                          1# ->
                                              case ># [1# x4_scynE] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_scyoN [Occ=Once]
                                                        :: GHC.ByteOrder.ByteOrder
                                                      [LclId] =
                                                          [x4_scynE] \u []
                                                              case >=# [x4_scynE 0#] of {
                                                                __DEFAULT ->
                                                                    GHC.ByteOrder.$wlvl x4_scynE;
                                                                1# ->
                                                                    case <=# [x4_scynE 1#] of {
                                                                      __DEFAULT ->
                                                                          GHC.ByteOrder.$wlvl
                                                                              x4_scynE;
                                                                      1# -> tagToEnum# [x4_scynE];
                                                                    };
                                                              };
                                                    } in  : [sat_scyoN GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                    1# ->
                                        case <# [1# x5_scynG] of {
                                          __DEFAULT ->
                                              let {
                                                sat_scyp5 [Occ=Once] :: [GHC.ByteOrder.ByteOrder]
                                                [LclId] =
                                                    [x4_scynE x5_scynG] \u []
                                                        case
                                                            -# [x5_scynG x4_scynE]
                                                        of
                                                        delta_scyoS [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [1# delta_scyoS]
                                                              of
                                                              y'_scyoT [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_up_scyoU [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.ByteOrder.ByteOrder]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_scyoS
                                                                                    y'_scyoT
                                                                                    go_up_scyoU] \r [x_scyoV]
                                                                              case
                                                                                  ># [x_scyoV
                                                                                      y'_scyoT]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_scyp1 [Occ=Once]
                                                                                        :: [GHC.ByteOrder.ByteOrder]
                                                                                      [LclId] =
                                                                                          [delta_scyoS
                                                                                           go_up_scyoU
                                                                                           x_scyoV] \u []
                                                                                              case
                                                                                                  +# [x_scyoV
                                                                                                      delta_scyoS]
                                                                                              of
                                                                                              sat_scyp0
                                                                                              { __DEFAULT ->
                                                                                                    go_up_scyoU
                                                                                                        sat_scyp0;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_scyoZ [Occ=Once]
                                                                                        :: GHC.ByteOrder.ByteOrder
                                                                                      [LclId] =
                                                                                          [x_scyoV] \u []
                                                                                              case
                                                                                                  >=# [x_scyoV
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.ByteOrder.$wlvl
                                                                                                        x_scyoV;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_scyoV
                                                                                                             1#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.ByteOrder.$wlvl
                                                                                                              x_scyoV;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_scyoV];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_scyoZ
                                                                                         sat_scyp1];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_scyp4 [Occ=Once]
                                                                                        :: GHC.ByteOrder.ByteOrder
                                                                                      [LclId] =
                                                                                          [x_scyoV] \u []
                                                                                              case
                                                                                                  >=# [x_scyoV
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.ByteOrder.$wlvl
                                                                                                        x_scyoV;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_scyoV
                                                                                                             1#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.ByteOrder.$wlvl
                                                                                                              x_scyoV;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_scyoV];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_scyp4
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_up_scyoU x5_scynG;
                                                              };
                                                        }; } in
                                              let {
                                                sat_scyoR [Occ=Once] :: GHC.ByteOrder.ByteOrder
                                                [LclId] =
                                                    [x4_scynE] \u []
                                                        case >=# [x4_scynE 0#] of {
                                                          __DEFAULT -> GHC.ByteOrder.$wlvl x4_scynE;
                                                          1# ->
                                                              case <=# [x4_scynE 1#] of {
                                                                __DEFAULT ->
                                                                    GHC.ByteOrder.$wlvl x4_scynE;
                                                                1# -> tagToEnum# [x4_scynE];
                                                              };
                                                        };
                                              } in  : [sat_scyoR sat_scyp5];
                                          1# ->
                                              case <# [1# x4_scynE] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_scyp9 [Occ=Once]
                                                        :: GHC.ByteOrder.ByteOrder
                                                      [LclId] =
                                                          [x4_scynE] \u []
                                                              case >=# [x4_scynE 0#] of {
                                                                __DEFAULT ->
                                                                    GHC.ByteOrder.$wlvl x4_scynE;
                                                                1# ->
                                                                    case <=# [x4_scynE 1#] of {
                                                                      __DEFAULT ->
                                                                          GHC.ByteOrder.$wlvl
                                                                              x4_scynE;
                                                                      1# -> tagToEnum# [x4_scynE];
                                                                    };
                                                              };
                                                    } in  : [sat_scyp9 GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                  };
                            };
                  } in 
                    case x2_scynB of {
                      GHC.ByteOrder.BigEndian -> $j1_scynF 0#;
                      GHC.ByteOrder.LittleEndian -> $j1_scynF 1#;
                    };
        } in 
          case x1_scynA of {
            GHC.ByteOrder.BigEndian -> $j_scynD 0#;
            GHC.ByteOrder.LittleEndian -> $j_scynD 1#;
          };

GHC.ByteOrder.$fEnumByteOrder [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Enum GHC.ByteOrder.ByteOrder
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Enum! [GHC.ByteOrder.$fEnumByteOrder_$csucc
                                    GHC.ByteOrder.$fEnumByteOrder_$cpred
                                    GHC.ByteOrder.$fEnumByteOrder_$ctoEnum
                                    GHC.ByteOrder.$fEnumByteOrder_$cfromEnum
                                    GHC.ByteOrder.$fEnumByteOrder_$cenumFrom
                                    GHC.ByteOrder.$fEnumByteOrder_$cenumFromThen
                                    GHC.ByteOrder.$fEnumByteOrder_$cenumFromTo
                                    GHC.ByteOrder.$fEnumByteOrder_$cenumFromThenTo];

GHC.ByteOrder.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ByteOrder.$trModule4];

GHC.ByteOrder.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ByteOrder.$trModule2];

GHC.ByteOrder.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.ByteOrder.$trModule3
                                     GHC.ByteOrder.$trModule1];

GHC.ByteOrder.$tcByteOrder2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ByteOrder"#;

GHC.ByteOrder.$tcByteOrder1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ByteOrder.$tcByteOrder2];

GHC.ByteOrder.$tcByteOrder :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [16811050684449662084##
                                    17273005335247024091##
                                    GHC.ByteOrder.$trModule
                                    GHC.ByteOrder.$tcByteOrder1
                                    0#
                                    GHC.Types.krep$*];

GHC.ByteOrder.$tc'BigEndian1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.ByteOrder.$tcByteOrder
                                              GHC.Types.[]];

GHC.ByteOrder.$tc'BigEndian3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'BigEndian"#;

GHC.ByteOrder.$tc'BigEndian2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ByteOrder.$tc'BigEndian3];

GHC.ByteOrder.$tc'BigEndian :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2645192688778293591##
                                    7455668807059762078##
                                    GHC.ByteOrder.$trModule
                                    GHC.ByteOrder.$tc'BigEndian2
                                    0#
                                    GHC.ByteOrder.$tc'BigEndian1];

GHC.ByteOrder.$tc'LittleEndian2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'LittleEndian"#;

GHC.ByteOrder.$tc'LittleEndian1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ByteOrder.$tc'LittleEndian2];

GHC.ByteOrder.$tc'LittleEndian :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [8702700204875460152##
                                    10337679016369298147##
                                    GHC.ByteOrder.$trModule
                                    GHC.ByteOrder.$tc'LittleEndian1
                                    0#
                                    GHC.ByteOrder.$tc'BigEndian1];

GHC.ByteOrder.BigEndian :: GHC.ByteOrder.ByteOrder
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.ByteOrder.BigEndian! [];

GHC.ByteOrder.LittleEndian :: GHC.ByteOrder.ByteOrder
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.ByteOrder.LittleEndian! [];


==================== Pre unarise: ====================
2018-03-16 16:07:29.573751203 UTC

GHC.ByteOrder.$fReadByteOrder11 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "BigEndian"#;

GHC.ByteOrder.$fReadByteOrder10 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.ByteOrder.$fReadByteOrder11;

GHC.ByteOrder.$fReadByteOrder7 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "LittleEndian"#;

GHC.ByteOrder.$fReadByteOrder6 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.ByteOrder.$fReadByteOrder7;

GHC.ByteOrder.$fShowByteOrder_$cshowsPrec
  :: GHC.Types.Int -> GHC.ByteOrder.ByteOrder -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [ds_scAdv ds1_scAdw eta_scAdx]
        case ds1_scAdw of {
          GHC.ByteOrder.BigEndian ->
              GHC.Base.++ GHC.ByteOrder.$fReadByteOrder10 eta_scAdx;
          GHC.ByteOrder.LittleEndian ->
              GHC.Base.++ GHC.ByteOrder.$fReadByteOrder6 eta_scAdx;
        };

GHC.ByteOrder.$fShowByteOrder_$cshow
  :: GHC.ByteOrder.ByteOrder -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_scAdz]
        case x_scAdz of {
          GHC.ByteOrder.BigEndian -> GHC.ByteOrder.$fReadByteOrder10;
          GHC.ByteOrder.LittleEndian -> GHC.ByteOrder.$fReadByteOrder6;
        };

GHC.ByteOrder.$fShowByteOrder1
  :: GHC.ByteOrder.ByteOrder -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [ds_scAdB eta_scAdC]
        case ds_scAdB of {
          GHC.ByteOrder.BigEndian ->
              GHC.Base.++ GHC.ByteOrder.$fReadByteOrder10 eta_scAdC;
          GHC.ByteOrder.LittleEndian ->
              GHC.Base.++ GHC.ByteOrder.$fReadByteOrder6 eta_scAdC;
        };

GHC.ByteOrder.$fShowByteOrder_$cshowList
  :: [GHC.ByteOrder.ByteOrder] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_scAdE s_scAdF]
        GHC.Show.showList__
            GHC.ByteOrder.$fShowByteOrder1 ls_scAdE s_scAdF;

GHC.ByteOrder.$fShowByteOrder [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.ByteOrder.ByteOrder
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.ByteOrder.$fShowByteOrder_$cshowsPrec
                                    GHC.ByteOrder.$fShowByteOrder_$cshow
                                    GHC.ByteOrder.$fShowByteOrder_$cshowList];

GHC.ByteOrder.$fReadByteOrder9
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.ByteOrder.ByteOrder -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_scAdG k_scAdH] k_scAdH GHC.ByteOrder.BigEndian;

GHC.ByteOrder.$fReadByteOrder8
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec GHC.ByteOrder.ByteOrder)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.ByteOrder.$fReadByteOrder10
                        GHC.ByteOrder.$fReadByteOrder9];

GHC.ByteOrder.$fReadByteOrder5
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.ByteOrder.ByteOrder -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_scAdI k_scAdJ] k_scAdJ GHC.ByteOrder.LittleEndian;

GHC.ByteOrder.$fReadByteOrder4
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec GHC.ByteOrder.ByteOrder)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.ByteOrder.$fReadByteOrder6
                        GHC.ByteOrder.$fReadByteOrder5];

GHC.ByteOrder.$fReadByteOrder3
  :: [(GHC.Base.String,
       Text.ParserCombinators.ReadPrec.ReadPrec GHC.ByteOrder.ByteOrder)]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.ByteOrder.$fReadByteOrder4 GHC.Types.[]];

GHC.ByteOrder.$fReadByteOrder_sps
  :: [(GHC.Base.String,
       Text.ParserCombinators.ReadPrec.ReadPrec GHC.ByteOrder.ByteOrder)]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.ByteOrder.$fReadByteOrder8
                      GHC.ByteOrder.$fReadByteOrder3];

GHC.ByteOrder.$fReadByteOrder2
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.ByteOrder.ByteOrder
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_scAdK]
        GHC.Read.choose2 GHC.ByteOrder.$fReadByteOrder_sps eta_scAdK;

GHC.ByteOrder.$fReadByteOrder1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.ByteOrder.ByteOrder -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Read.list3 GHC.ByteOrder.$fReadByteOrder2 eta_B2 eta_B1;

GHC.ByteOrder.$fReadByteOrder_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.ByteOrder.ByteOrder
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_scAdL]
        let {
          sat_scAdM [Occ=Once]
            :: Text.ParserCombinators.ReadP.P GHC.ByteOrder.ByteOrder
          [LclId] =
              [n_scAdL] \u []
                  GHC.Read.list3
                      GHC.ByteOrder.$fReadByteOrder2
                      n_scAdL
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_scAdM;

GHC.ByteOrder.$fReadByteOrder_$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec
       [GHC.ByteOrder.ByteOrder]
[GblId] =
    [] \u [] GHC.Read.list GHC.ByteOrder.$fReadByteOrder1;

GHC.ByteOrder.$fReadByteOrder12
  :: Text.ParserCombinators.ReadP.P [GHC.ByteOrder.ByteOrder]
[GblId] =
    [] \u []
        GHC.ByteOrder.$fReadByteOrder_$creadListPrec
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.ByteOrder.$fReadByteOrder_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.ByteOrder.ByteOrder]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run
            GHC.ByteOrder.$fReadByteOrder12 eta_B1;

GHC.ByteOrder.$fReadByteOrder [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.ByteOrder.ByteOrder
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.ByteOrder.$fReadByteOrder_$creadsPrec
                                    GHC.ByteOrder.$fReadByteOrder_$creadList
                                    GHC.ByteOrder.$fReadByteOrder1
                                    GHC.ByteOrder.$fReadByteOrder_$creadListPrec];

GHC.ByteOrder.$fBoundedByteOrder [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Bounded GHC.ByteOrder.ByteOrder
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Bounded! [GHC.ByteOrder.BigEndian
                                       GHC.ByteOrder.LittleEndian];

GHC.ByteOrder.$fOrdByteOrder_$c<
  :: GHC.ByteOrder.ByteOrder
     -> GHC.ByteOrder.ByteOrder -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_scAdN b_scAdO]
        case a_scAdN of {
          GHC.ByteOrder.BigEndian ->
              case b_scAdO of {
                GHC.ByteOrder.BigEndian -> GHC.Types.False [];
                GHC.ByteOrder.LittleEndian -> GHC.Types.True [];
              };
          GHC.ByteOrder.LittleEndian ->
              case b_scAdO of { __DEFAULT -> GHC.Types.False []; };
        };

GHC.ByteOrder.$fOrdByteOrder_$ccompare
  :: GHC.ByteOrder.ByteOrder
     -> GHC.ByteOrder.ByteOrder -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_scAdS b_scAdT]
        case a_scAdS of {
          GHC.ByteOrder.BigEndian ->
              case b_scAdT of {
                GHC.ByteOrder.BigEndian -> GHC.Types.EQ [];
                GHC.ByteOrder.LittleEndian -> GHC.Types.LT [];
              };
          GHC.ByteOrder.LittleEndian ->
              case b_scAdT of {
                GHC.ByteOrder.BigEndian -> GHC.Types.GT [];
                GHC.ByteOrder.LittleEndian -> GHC.Types.EQ [];
              };
        };

GHC.ByteOrder.$fEqByteOrder_$c==
  :: GHC.ByteOrder.ByteOrder
     -> GHC.ByteOrder.ByteOrder -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_scAdX ds1_scAdY]
        case ds_scAdX of {
          GHC.ByteOrder.BigEndian ->
              case ds1_scAdY of {
                GHC.ByteOrder.BigEndian -> GHC.Types.True [];
                GHC.ByteOrder.LittleEndian -> GHC.Types.False [];
              };
          GHC.ByteOrder.LittleEndian ->
              case ds1_scAdY of {
                GHC.ByteOrder.BigEndian -> GHC.Types.False [];
                GHC.ByteOrder.LittleEndian -> GHC.Types.True [];
              };
        };

GHC.ByteOrder.$fEqByteOrder_$c/= [InlPrag=INLINE (sat-args=2)]
  :: GHC.ByteOrder.ByteOrder
     -> GHC.ByteOrder.ByteOrder -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_scAe2 eta1_scAe3]
        case eta_scAe2 of {
          GHC.ByteOrder.BigEndian ->
              case eta1_scAe3 of {
                GHC.ByteOrder.BigEndian -> GHC.Types.False [];
                GHC.ByteOrder.LittleEndian -> GHC.Types.True [];
              };
          GHC.ByteOrder.LittleEndian ->
              case eta1_scAe3 of {
                GHC.ByteOrder.BigEndian -> GHC.Types.True [];
                GHC.ByteOrder.LittleEndian -> GHC.Types.False [];
              };
        };

GHC.ByteOrder.$fEqByteOrder [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.ByteOrder.ByteOrder
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.ByteOrder.$fEqByteOrder_$c==
                                     GHC.ByteOrder.$fEqByteOrder_$c/=];

GHC.ByteOrder.$fOrdByteOrder_$c<=
  :: GHC.ByteOrder.ByteOrder
     -> GHC.ByteOrder.ByteOrder -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_scAe7 b_scAe8]
        case b_scAe8 of {
          GHC.ByteOrder.BigEndian ->
              case a_scAe7 of {
                GHC.ByteOrder.BigEndian -> GHC.Types.True [];
                GHC.ByteOrder.LittleEndian -> GHC.Types.False [];
              };
          GHC.ByteOrder.LittleEndian ->
              case a_scAe7 of { __DEFAULT -> GHC.Types.True []; };
        };

GHC.ByteOrder.$fOrdByteOrder_$cmax
  :: GHC.ByteOrder.ByteOrder
     -> GHC.ByteOrder.ByteOrder -> GHC.ByteOrder.ByteOrder
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_scAec y_scAed]
        case y_scAed of {
          GHC.ByteOrder.BigEndian -> x_scAec;
          GHC.ByteOrder.LittleEndian ->
              case x_scAec of { __DEFAULT -> GHC.ByteOrder.LittleEndian []; };
        };

GHC.ByteOrder.$fOrdByteOrder_$c>=
  :: GHC.ByteOrder.ByteOrder
     -> GHC.ByteOrder.ByteOrder -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_scAeg b_scAeh]
        case a_scAeg of {
          GHC.ByteOrder.BigEndian ->
              case b_scAeh of {
                GHC.ByteOrder.BigEndian -> GHC.Types.True [];
                GHC.ByteOrder.LittleEndian -> GHC.Types.False [];
              };
          GHC.ByteOrder.LittleEndian ->
              case b_scAeh of { __DEFAULT -> GHC.Types.True []; };
        };

GHC.ByteOrder.$fOrdByteOrder_$c>
  :: GHC.ByteOrder.ByteOrder
     -> GHC.ByteOrder.ByteOrder -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_scAel b_scAem]
        GHC.ByteOrder.$fOrdByteOrder_$c< b_scAem a_scAel;

GHC.ByteOrder.$fOrdByteOrder_$cmin
  :: GHC.ByteOrder.ByteOrder
     -> GHC.ByteOrder.ByteOrder -> GHC.ByteOrder.ByteOrder
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_scAen y_scAeo]
        case y_scAeo of {
          GHC.ByteOrder.BigEndian ->
              case x_scAen of { __DEFAULT -> GHC.ByteOrder.BigEndian []; };
          GHC.ByteOrder.LittleEndian -> x_scAen;
        };

GHC.ByteOrder.$fOrdByteOrder [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.ByteOrder.ByteOrder
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.ByteOrder.$fEqByteOrder
                                      GHC.ByteOrder.$fOrdByteOrder_$ccompare
                                      GHC.ByteOrder.$fOrdByteOrder_$c<
                                      GHC.ByteOrder.$fOrdByteOrder_$c<=
                                      GHC.ByteOrder.$fOrdByteOrder_$c>
                                      GHC.ByteOrder.$fOrdByteOrder_$c>=
                                      GHC.ByteOrder.$fOrdByteOrder_$cmax
                                      GHC.ByteOrder.$fOrdByteOrder_$cmin];

GHC.ByteOrder.targetByteOrder :: GHC.ByteOrder.ByteOrder
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.ByteOrder.LittleEndian! [];

lvl_rcykn :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

lvl1_rcyko :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [1#];

GHC.ByteOrder.$fEnumByteOrder_$cfromEnum
  :: GHC.ByteOrder.ByteOrder -> GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [a_scAer]
        case a_scAer of {
          GHC.ByteOrder.BigEndian -> lvl_rcykn;
          GHC.ByteOrder.LittleEndian -> lvl1_rcyko;
        };

lvl2_rcykp :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "error"#;

lvl3_rcykq :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl2_rcykp;

GHC.ByteOrder.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

lvl4_rcykr :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.ByteOrder.$trModule4;

GHC.ByteOrder.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.ByteOrder"#;

lvl5_rcyks :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.ByteOrder.$trModule2;

lvl6_rcykt :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "./GHC/ByteOrder.hs"#;

lvl7_rcyku :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl6_rcykt;

lvl8_rcykv :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [26#];

lvl9_rcykw :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [16#];

lvl10_rcykx :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [20#];

lvl11_rcyky :: GHC.Stack.Types.SrcLoc
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.SrcLoc! [lvl4_rcykr
                                           lvl5_rcyks
                                           lvl7_rcyku
                                           lvl8_rcykv
                                           lvl9_rcykw
                                           lvl8_rcykv
                                           lvl10_rcykx];

lvl12_rcykz :: GHC.Stack.Types.CallStack
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.PushCallStack! [lvl3_rcykq
                                                  lvl11_rcyky
                                                  GHC.Stack.Types.EmptyCallStack];

lvl13_rcykA :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "pred{ByteOrder}: tried to take `pred' of first tag in enumeration"#;

GHC.ByteOrder.$fEnumByteOrder3 :: GHC.ByteOrder.ByteOrder
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl13_rcykA of sat_scAet {
          __DEFAULT -> GHC.Err.error lvl12_rcykz sat_scAet;
        };

GHC.ByteOrder.$fEnumByteOrder_$cpred
  :: GHC.ByteOrder.ByteOrder -> GHC.ByteOrder.ByteOrder
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [a_scAeu]
        case a_scAeu of {
          GHC.ByteOrder.BigEndian -> GHC.ByteOrder.$fEnumByteOrder3;
          GHC.ByteOrder.LittleEndian -> GHC.ByteOrder.BigEndian [];
        };

lvl14_rcykB :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "succ{ByteOrder}: tried to take `succ' of last tag in enumeration"#;

GHC.ByteOrder.$fEnumByteOrder4 :: GHC.ByteOrder.ByteOrder
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl14_rcykB of sat_scAew {
          __DEFAULT -> GHC.Err.error lvl12_rcykz sat_scAew;
        };

GHC.ByteOrder.$fEnumByteOrder_$csucc
  :: GHC.ByteOrder.ByteOrder -> GHC.ByteOrder.ByteOrder
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [a_scAex]
        case a_scAex of {
          GHC.ByteOrder.BigEndian -> GHC.ByteOrder.LittleEndian [];
          GHC.ByteOrder.LittleEndian -> GHC.ByteOrder.$fEnumByteOrder4;
        };

lvl15_rcykC :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ") is outside of enumeration's range (0,"#;

lvl16_rcykD :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ")"#;

lvl17_rcykE :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl16_rcykD;

lvl18_rcykF :: [GHC.Types.Char]
[GblId] =
    [] \u []
        case GHC.Show.$wshowSignedInt 0# 1# lvl17_rcykE of {
          (#,#) ww5_scAeA [Occ=Once] ww6_scAeB [Occ=Once] ->
              : [ww5_scAeA ww6_scAeB];
        };

lvl19_rcykG :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackAppendCString# lvl15_rcykC lvl18_rcykF;

lvl20_rcykH :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "toEnum{ByteOrder}: tag ("#;

GHC.ByteOrder.$wlvl [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.ByteOrder.ByteOrder
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [ww_scAeC]
        let {
          sat_scAeG [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [ww_scAeC] \u []
                  case GHC.Show.$wshowSignedInt 0# ww_scAeC lvl19_rcykG of {
                    (#,#) ww5_scAeE [Occ=Once] ww6_scAeF [Occ=Once] ->
                        : [ww5_scAeE ww6_scAeF];
                  };
        } in 
          case
              GHC.CString.unpackAppendCString# lvl20_rcykH sat_scAeG
          of
          sat_scAeH
          { __DEFAULT -> GHC.Err.error lvl12_rcykz sat_scAeH;
          };

GHC.ByteOrder.$w$ctoEnum [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.ByteOrder.ByteOrder
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [ww_scAeI]
        case >=# [ww_scAeI 0#] of {
          __DEFAULT -> GHC.ByteOrder.$wlvl ww_scAeI;
          1# ->
              case <=# [ww_scAeI 1#] of {
                __DEFAULT -> GHC.ByteOrder.$wlvl ww_scAeI;
                1# -> tagToEnum# [ww_scAeI];
              };
        };

GHC.ByteOrder.$fEnumByteOrder_$ctoEnum [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.ByteOrder.ByteOrder
[GblId, Arity=1, Str=<S(S),1*U(U)>, Unf=OtherCon []] =
    [] \r [w_scAeL]
        case w_scAeL of {
          GHC.Types.I# ww1_scAeN [Occ=Once] ->
              GHC.ByteOrder.$w$ctoEnum ww1_scAeN;
        };

GHC.ByteOrder.$fEnumByteOrder_go2 [Occ=LoopBreaker]
  :: GHC.Prim.Int# -> [GHC.ByteOrder.ByteOrder]
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [x_scAeO]
        let {
          sat_scAeS [Occ=Once] :: [GHC.ByteOrder.ByteOrder]
          [LclId] =
              [x_scAeO] \u []
                  case x_scAeO of wild_scAeQ {
                    __DEFAULT ->
                        case +# [wild_scAeQ 1#] of sat_scAeR {
                          __DEFAULT -> GHC.ByteOrder.$fEnumByteOrder_go2 sat_scAeR;
                        };
                    1# -> [] [];
                  }; } in
        let {
          sat_scAeP [Occ=Once] :: GHC.ByteOrder.ByteOrder
          [LclId] =
              [x_scAeO] \u [] tagToEnum# [x_scAeO];
        } in  : [sat_scAeP sat_scAeS];

GHC.ByteOrder.$fEnumByteOrder2 :: [GHC.ByteOrder.ByteOrder]
[GblId] =
    [] \u [] GHC.ByteOrder.$fEnumByteOrder_go2 0#;

GHC.ByteOrder.$fEnumByteOrder1 :: [GHC.ByteOrder.ByteOrder]
[GblId] =
    [] \u [] GHC.ByteOrder.$fEnumByteOrder_go2 1#;

GHC.ByteOrder.$fEnumByteOrder_$cenumFrom
  :: GHC.ByteOrder.ByteOrder -> [GHC.ByteOrder.ByteOrder]
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [a_scAeT]
        case a_scAeT of {
          GHC.ByteOrder.BigEndian -> GHC.ByteOrder.$fEnumByteOrder2;
          GHC.ByteOrder.LittleEndian -> GHC.ByteOrder.$fEnumByteOrder1;
        };

GHC.ByteOrder.$fEnumByteOrder_$cenumFromThen
  :: GHC.ByteOrder.ByteOrder
     -> GHC.ByteOrder.ByteOrder -> [GHC.ByteOrder.ByteOrder]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_scAeV b_scAeW]
        let-no-escape {
          $j_scAeX [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
            :: GHC.Prim.Int# -> [GHC.ByteOrder.ByteOrder]
          [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
              sat-only [b_scAeW] \r [a#_scAeY]
                  let-no-escape {
                    $j1_scAeZ [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
                      :: GHC.Prim.Int# -> [GHC.ByteOrder.ByteOrder]
                    [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
                        sat-only [a#_scAeY] \r [b#_scAf0]
                            case ># [a#_scAeY b#_scAf0] of {
                              __DEFAULT ->
                                  case >=# [b#_scAf0 a#_scAeY] of {
                                    __DEFAULT ->
                                        case ># [1# b#_scAf0] of {
                                          __DEFAULT ->
                                              let {
                                                sat_scAfe [Occ=Once] :: [GHC.ByteOrder.ByteOrder]
                                                [LclId] =
                                                    [a#_scAeY b#_scAf0] \u []
                                                        case
                                                            -# [b#_scAf0 a#_scAeY]
                                                        of
                                                        delta_scAf5 [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [1# delta_scAf5]
                                                              of
                                                              y'_scAf6 [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_dn_scAf7 [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.ByteOrder.ByteOrder]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_scAf5
                                                                                    y'_scAf6
                                                                                    go_dn_scAf7] \r [x_scAf8]
                                                                              case
                                                                                  <# [x_scAf8
                                                                                      y'_scAf6]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_scAfc [Occ=Once]
                                                                                        :: [GHC.ByteOrder.ByteOrder]
                                                                                      [LclId] =
                                                                                          [delta_scAf5
                                                                                           go_dn_scAf7
                                                                                           x_scAf8] \u []
                                                                                              case
                                                                                                  +# [x_scAf8
                                                                                                      delta_scAf5]
                                                                                              of
                                                                                              sat_scAfb
                                                                                              { __DEFAULT ->
                                                                                                    go_dn_scAf7
                                                                                                        sat_scAfb;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_scAfa [Occ=Once]
                                                                                        :: GHC.ByteOrder.ByteOrder
                                                                                      [LclId] =
                                                                                          [x_scAf8] \u []
                                                                                              tagToEnum# [x_scAf8];
                                                                                    } in 
                                                                                      : [sat_scAfa
                                                                                         sat_scAfc];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_scAfd [Occ=Once]
                                                                                        :: GHC.ByteOrder.ByteOrder
                                                                                      [LclId] =
                                                                                          [x_scAf8] \u []
                                                                                              tagToEnum# [x_scAf8];
                                                                                    } in 
                                                                                      : [sat_scAfd
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_dn_scAf7 b#_scAf0;
                                                              };
                                                        }; } in
                                              let {
                                                sat_scAf4 [Occ=Once] :: GHC.ByteOrder.ByteOrder
                                                [LclId] =
                                                    [a#_scAeY] \u [] tagToEnum# [a#_scAeY];
                                              } in  : [sat_scAf4 sat_scAfe];
                                          1# ->
                                              case ># [1# a#_scAeY] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_scAfg [Occ=Once]
                                                        :: GHC.ByteOrder.ByteOrder
                                                      [LclId] =
                                                          [a#_scAeY] \u [] tagToEnum# [a#_scAeY];
                                                    } in  : [sat_scAfg GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                    1# ->
                                        case <# [1# b#_scAf0] of {
                                          __DEFAULT ->
                                              let {
                                                sat_scAfs [Occ=Once] :: [GHC.ByteOrder.ByteOrder]
                                                [LclId] =
                                                    [a#_scAeY b#_scAf0] \u []
                                                        case
                                                            -# [b#_scAf0 a#_scAeY]
                                                        of
                                                        delta_scAfj [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [1# delta_scAfj]
                                                              of
                                                              y'_scAfk [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_up_scAfl [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.ByteOrder.ByteOrder]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_scAfj
                                                                                    y'_scAfk
                                                                                    go_up_scAfl] \r [x_scAfm]
                                                                              case
                                                                                  ># [x_scAfm
                                                                                      y'_scAfk]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_scAfq [Occ=Once]
                                                                                        :: [GHC.ByteOrder.ByteOrder]
                                                                                      [LclId] =
                                                                                          [delta_scAfj
                                                                                           go_up_scAfl
                                                                                           x_scAfm] \u []
                                                                                              case
                                                                                                  +# [x_scAfm
                                                                                                      delta_scAfj]
                                                                                              of
                                                                                              sat_scAfp
                                                                                              { __DEFAULT ->
                                                                                                    go_up_scAfl
                                                                                                        sat_scAfp;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_scAfo [Occ=Once]
                                                                                        :: GHC.ByteOrder.ByteOrder
                                                                                      [LclId] =
                                                                                          [x_scAfm] \u []
                                                                                              tagToEnum# [x_scAfm];
                                                                                    } in 
                                                                                      : [sat_scAfo
                                                                                         sat_scAfq];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_scAfr [Occ=Once]
                                                                                        :: GHC.ByteOrder.ByteOrder
                                                                                      [LclId] =
                                                                                          [x_scAfm] \u []
                                                                                              tagToEnum# [x_scAfm];
                                                                                    } in 
                                                                                      : [sat_scAfr
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_up_scAfl b#_scAf0;
                                                              };
                                                        }; } in
                                              let {
                                                sat_scAfi [Occ=Once] :: GHC.ByteOrder.ByteOrder
                                                [LclId] =
                                                    [a#_scAeY] \u [] tagToEnum# [a#_scAeY];
                                              } in  : [sat_scAfi sat_scAfs];
                                          1# ->
                                              case <# [1# a#_scAeY] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_scAfu [Occ=Once]
                                                        :: GHC.ByteOrder.ByteOrder
                                                      [LclId] =
                                                          [a#_scAeY] \u [] tagToEnum# [a#_scAeY];
                                                    } in  : [sat_scAfu GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                  };
                              1# ->
                                  case >=# [b#_scAf0 a#_scAeY] of {
                                    __DEFAULT ->
                                        case ># [0# b#_scAf0] of {
                                          __DEFAULT ->
                                              let {
                                                sat_scAfH [Occ=Once] :: [GHC.ByteOrder.ByteOrder]
                                                [LclId] =
                                                    [a#_scAeY b#_scAf0] \u []
                                                        case
                                                            -# [b#_scAf0 a#_scAeY]
                                                        of
                                                        delta_scAfy [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [0# delta_scAfy]
                                                              of
                                                              y'_scAfz [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_dn_scAfA [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.ByteOrder.ByteOrder]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_scAfy
                                                                                    y'_scAfz
                                                                                    go_dn_scAfA] \r [x_scAfB]
                                                                              case
                                                                                  <# [x_scAfB
                                                                                      y'_scAfz]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_scAfF [Occ=Once]
                                                                                        :: [GHC.ByteOrder.ByteOrder]
                                                                                      [LclId] =
                                                                                          [delta_scAfy
                                                                                           go_dn_scAfA
                                                                                           x_scAfB] \u []
                                                                                              case
                                                                                                  +# [x_scAfB
                                                                                                      delta_scAfy]
                                                                                              of
                                                                                              sat_scAfE
                                                                                              { __DEFAULT ->
                                                                                                    go_dn_scAfA
                                                                                                        sat_scAfE;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_scAfD [Occ=Once]
                                                                                        :: GHC.ByteOrder.ByteOrder
                                                                                      [LclId] =
                                                                                          [x_scAfB] \u []
                                                                                              tagToEnum# [x_scAfB];
                                                                                    } in 
                                                                                      : [sat_scAfD
                                                                                         sat_scAfF];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_scAfG [Occ=Once]
                                                                                        :: GHC.ByteOrder.ByteOrder
                                                                                      [LclId] =
                                                                                          [x_scAfB] \u []
                                                                                              tagToEnum# [x_scAfB];
                                                                                    } in 
                                                                                      : [sat_scAfG
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_dn_scAfA b#_scAf0;
                                                              };
                                                        }; } in
                                              let {
                                                sat_scAfx [Occ=Once] :: GHC.ByteOrder.ByteOrder
                                                [LclId] =
                                                    [a#_scAeY] \u [] tagToEnum# [a#_scAeY];
                                              } in  : [sat_scAfx sat_scAfH];
                                          1# ->
                                              case ># [0# a#_scAeY] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_scAfJ [Occ=Once]
                                                        :: GHC.ByteOrder.ByteOrder
                                                      [LclId] =
                                                          [a#_scAeY] \u [] tagToEnum# [a#_scAeY];
                                                    } in  : [sat_scAfJ GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                    1# ->
                                        case <# [0# b#_scAf0] of {
                                          __DEFAULT ->
                                              let {
                                                sat_scAfV [Occ=Once] :: [GHC.ByteOrder.ByteOrder]
                                                [LclId] =
                                                    [a#_scAeY b#_scAf0] \u []
                                                        case
                                                            -# [b#_scAf0 a#_scAeY]
                                                        of
                                                        delta_scAfM [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [0# delta_scAfM]
                                                              of
                                                              y'_scAfN [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_up_scAfO [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.ByteOrder.ByteOrder]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_scAfM
                                                                                    y'_scAfN
                                                                                    go_up_scAfO] \r [x_scAfP]
                                                                              case
                                                                                  ># [x_scAfP
                                                                                      y'_scAfN]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_scAfT [Occ=Once]
                                                                                        :: [GHC.ByteOrder.ByteOrder]
                                                                                      [LclId] =
                                                                                          [delta_scAfM
                                                                                           go_up_scAfO
                                                                                           x_scAfP] \u []
                                                                                              case
                                                                                                  +# [x_scAfP
                                                                                                      delta_scAfM]
                                                                                              of
                                                                                              sat_scAfS
                                                                                              { __DEFAULT ->
                                                                                                    go_up_scAfO
                                                                                                        sat_scAfS;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_scAfR [Occ=Once]
                                                                                        :: GHC.ByteOrder.ByteOrder
                                                                                      [LclId] =
                                                                                          [x_scAfP] \u []
                                                                                              tagToEnum# [x_scAfP];
                                                                                    } in 
                                                                                      : [sat_scAfR
                                                                                         sat_scAfT];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_scAfU [Occ=Once]
                                                                                        :: GHC.ByteOrder.ByteOrder
                                                                                      [LclId] =
                                                                                          [x_scAfP] \u []
                                                                                              tagToEnum# [x_scAfP];
                                                                                    } in 
                                                                                      : [sat_scAfU
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_up_scAfO b#_scAf0;
                                                              };
                                                        }; } in
                                              let {
                                                sat_scAfL [Occ=Once] :: GHC.ByteOrder.ByteOrder
                                                [LclId] =
                                                    [a#_scAeY] \u [] tagToEnum# [a#_scAeY];
                                              } in  : [sat_scAfL sat_scAfV];
                                          1# ->
                                              case <# [0# a#_scAeY] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_scAfX [Occ=Once]
                                                        :: GHC.ByteOrder.ByteOrder
                                                      [LclId] =
                                                          [a#_scAeY] \u [] tagToEnum# [a#_scAeY];
                                                    } in  : [sat_scAfX GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                  };
                            };
                  } in 
                    case b_scAeW of {
                      GHC.ByteOrder.BigEndian -> $j1_scAeZ 0#;
                      GHC.ByteOrder.LittleEndian -> $j1_scAeZ 1#;
                    };
        } in 
          case a_scAeV of {
            GHC.ByteOrder.BigEndian -> $j_scAeX 0#;
            GHC.ByteOrder.LittleEndian -> $j_scAeX 1#;
          };

GHC.ByteOrder.$fEnumByteOrder_go1 [Occ=LoopBreaker]
  :: GHC.Prim.Int# -> [GHC.ByteOrder.ByteOrder]
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [x_scAg0]
        let {
          sat_scAg6 [Occ=Once] :: [GHC.ByteOrder.ByteOrder]
          [LclId] =
              [x_scAg0] \u []
                  case x_scAg0 of wild_scAg4 {
                    __DEFAULT ->
                        case +# [wild_scAg4 1#] of sat_scAg5 {
                          __DEFAULT -> GHC.ByteOrder.$fEnumByteOrder_go1 sat_scAg5;
                        };
                    0# -> [] [];
                  }; } in
        let {
          sat_scAg3 [Occ=Once] :: GHC.ByteOrder.ByteOrder
          [LclId] =
              [x_scAg0] \u []
                  case >=# [x_scAg0 0#] of {
                    __DEFAULT -> GHC.ByteOrder.$wlvl x_scAg0;
                    1# ->
                        case <=# [x_scAg0 1#] of {
                          __DEFAULT -> GHC.ByteOrder.$wlvl x_scAg0;
                          1# -> tagToEnum# [x_scAg0];
                        };
                  };
        } in  : [sat_scAg3 sat_scAg6];

GHC.ByteOrder.$fEnumByteOrder_go [Occ=LoopBreaker]
  :: GHC.Prim.Int# -> [GHC.ByteOrder.ByteOrder]
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [x_scAg7]
        let {
          sat_scAgd [Occ=Once] :: [GHC.ByteOrder.ByteOrder]
          [LclId] =
              [x_scAg7] \u []
                  case x_scAg7 of wild_scAgb {
                    __DEFAULT ->
                        case +# [wild_scAgb 1#] of sat_scAgc {
                          __DEFAULT -> GHC.ByteOrder.$fEnumByteOrder_go sat_scAgc;
                        };
                    1# -> [] [];
                  }; } in
        let {
          sat_scAga [Occ=Once] :: GHC.ByteOrder.ByteOrder
          [LclId] =
              [x_scAg7] \u []
                  case >=# [x_scAg7 0#] of {
                    __DEFAULT -> GHC.ByteOrder.$wlvl x_scAg7;
                    1# ->
                        case <=# [x_scAg7 1#] of {
                          __DEFAULT -> GHC.ByteOrder.$wlvl x_scAg7;
                          1# -> tagToEnum# [x_scAg7];
                        };
                  };
        } in  : [sat_scAga sat_scAgd];

GHC.ByteOrder.$fEnumByteOrder_$cenumFromTo
  :: GHC.ByteOrder.ByteOrder
     -> GHC.ByteOrder.ByteOrder -> [GHC.ByteOrder.ByteOrder]
[GblId, Arity=2, Str=<S,1*U><S,1*U>, Unf=OtherCon []] =
    [] \r [x_scAge y_scAgf]
        let-no-escape {
          $j_scAgg [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
            :: GHC.Prim.Int# -> [GHC.ByteOrder.ByteOrder]
          [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
              sat-only [y_scAgf] \r [x1_scAgh]
                  case y_scAgf of {
                    GHC.ByteOrder.BigEndian ->
                        case ># [x1_scAgh 0#] of {
                          __DEFAULT -> GHC.ByteOrder.$fEnumByteOrder_go1 x1_scAgh;
                          1# -> [] [];
                        };
                    GHC.ByteOrder.LittleEndian ->
                        case ># [x1_scAgh 1#] of {
                          __DEFAULT -> GHC.ByteOrder.$fEnumByteOrder_go x1_scAgh;
                          1# -> [] [];
                        };
                  };
        } in 
          case x_scAge of {
            GHC.ByteOrder.BigEndian -> $j_scAgg 0#;
            GHC.ByteOrder.LittleEndian -> $j_scAgg 1#;
          };

GHC.ByteOrder.$fEnumByteOrder_$cenumFromThenTo
  :: GHC.ByteOrder.ByteOrder
     -> GHC.ByteOrder.ByteOrder
     -> GHC.ByteOrder.ByteOrder
     -> [GHC.ByteOrder.ByteOrder]
[GblId, Arity=3, Str=<S,1*U><S,1*U><S,1*U>, Unf=OtherCon []] =
    [] \r [x1_scAgm x2_scAgn y_scAgo]
        let-no-escape {
          $j_scAgp [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
            :: GHC.Prim.Int# -> [GHC.ByteOrder.ByteOrder]
          [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
              sat-only [x2_scAgn y_scAgo] \r [x4_scAgq]
                  let-no-escape {
                    $j1_scAgr [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
                      :: GHC.Prim.Int# -> [GHC.ByteOrder.ByteOrder]
                    [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
                        sat-only [y_scAgo x4_scAgq] \r [x5_scAgs]
                            case y_scAgo of {
                              GHC.ByteOrder.BigEndian ->
                                  case >=# [x5_scAgs x4_scAgq] of {
                                    __DEFAULT ->
                                        case ># [0# x5_scAgs] of {
                                          __DEFAULT ->
                                              let {
                                                sat_scAgM [Occ=Once] :: [GHC.ByteOrder.ByteOrder]
                                                [LclId] =
                                                    [x4_scAgq x5_scAgs] \u []
                                                        case
                                                            -# [x5_scAgs x4_scAgq]
                                                        of
                                                        delta_scAgz [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [0# delta_scAgz]
                                                              of
                                                              y'_scAgA [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_dn_scAgB [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.ByteOrder.ByteOrder]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_scAgz
                                                                                    y'_scAgA
                                                                                    go_dn_scAgB] \r [x_scAgC]
                                                                              case
                                                                                  <# [x_scAgC
                                                                                      y'_scAgA]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_scAgI [Occ=Once]
                                                                                        :: [GHC.ByteOrder.ByteOrder]
                                                                                      [LclId] =
                                                                                          [delta_scAgz
                                                                                           go_dn_scAgB
                                                                                           x_scAgC] \u []
                                                                                              case
                                                                                                  +# [x_scAgC
                                                                                                      delta_scAgz]
                                                                                              of
                                                                                              sat_scAgH
                                                                                              { __DEFAULT ->
                                                                                                    go_dn_scAgB
                                                                                                        sat_scAgH;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_scAgG [Occ=Once]
                                                                                        :: GHC.ByteOrder.ByteOrder
                                                                                      [LclId] =
                                                                                          [x_scAgC] \u []
                                                                                              case
                                                                                                  >=# [x_scAgC
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.ByteOrder.$wlvl
                                                                                                        x_scAgC;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_scAgC
                                                                                                             1#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.ByteOrder.$wlvl
                                                                                                              x_scAgC;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_scAgC];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_scAgG
                                                                                         sat_scAgI];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_scAgL [Occ=Once]
                                                                                        :: GHC.ByteOrder.ByteOrder
                                                                                      [LclId] =
                                                                                          [x_scAgC] \u []
                                                                                              case
                                                                                                  >=# [x_scAgC
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.ByteOrder.$wlvl
                                                                                                        x_scAgC;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_scAgC
                                                                                                             1#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.ByteOrder.$wlvl
                                                                                                              x_scAgC;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_scAgC];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_scAgL
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_dn_scAgB x5_scAgs;
                                                              };
                                                        }; } in
                                              let {
                                                sat_scAgy [Occ=Once] :: GHC.ByteOrder.ByteOrder
                                                [LclId] =
                                                    [x4_scAgq] \u []
                                                        case >=# [x4_scAgq 0#] of {
                                                          __DEFAULT -> GHC.ByteOrder.$wlvl x4_scAgq;
                                                          1# ->
                                                              case <=# [x4_scAgq 1#] of {
                                                                __DEFAULT ->
                                                                    GHC.ByteOrder.$wlvl x4_scAgq;
                                                                1# -> tagToEnum# [x4_scAgq];
                                                              };
                                                        };
                                              } in  : [sat_scAgy sat_scAgM];
                                          1# ->
                                              case ># [0# x4_scAgq] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_scAgQ [Occ=Once]
                                                        :: GHC.ByteOrder.ByteOrder
                                                      [LclId] =
                                                          [x4_scAgq] \u []
                                                              case >=# [x4_scAgq 0#] of {
                                                                __DEFAULT ->
                                                                    GHC.ByteOrder.$wlvl x4_scAgq;
                                                                1# ->
                                                                    case <=# [x4_scAgq 1#] of {
                                                                      __DEFAULT ->
                                                                          GHC.ByteOrder.$wlvl
                                                                              x4_scAgq;
                                                                      1# -> tagToEnum# [x4_scAgq];
                                                                    };
                                                              };
                                                    } in  : [sat_scAgQ GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                    1# ->
                                        case <# [0# x5_scAgs] of {
                                          __DEFAULT ->
                                              let {
                                                sat_scAh8 [Occ=Once] :: [GHC.ByteOrder.ByteOrder]
                                                [LclId] =
                                                    [x4_scAgq x5_scAgs] \u []
                                                        case
                                                            -# [x5_scAgs x4_scAgq]
                                                        of
                                                        delta_scAgV [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [0# delta_scAgV]
                                                              of
                                                              y'_scAgW [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_up_scAgX [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.ByteOrder.ByteOrder]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_scAgV
                                                                                    y'_scAgW
                                                                                    go_up_scAgX] \r [x_scAgY]
                                                                              case
                                                                                  ># [x_scAgY
                                                                                      y'_scAgW]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_scAh4 [Occ=Once]
                                                                                        :: [GHC.ByteOrder.ByteOrder]
                                                                                      [LclId] =
                                                                                          [delta_scAgV
                                                                                           go_up_scAgX
                                                                                           x_scAgY] \u []
                                                                                              case
                                                                                                  +# [x_scAgY
                                                                                                      delta_scAgV]
                                                                                              of
                                                                                              sat_scAh3
                                                                                              { __DEFAULT ->
                                                                                                    go_up_scAgX
                                                                                                        sat_scAh3;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_scAh2 [Occ=Once]
                                                                                        :: GHC.ByteOrder.ByteOrder
                                                                                      [LclId] =
                                                                                          [x_scAgY] \u []
                                                                                              case
                                                                                                  >=# [x_scAgY
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.ByteOrder.$wlvl
                                                                                                        x_scAgY;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_scAgY
                                                                                                             1#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.ByteOrder.$wlvl
                                                                                                              x_scAgY;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_scAgY];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_scAh2
                                                                                         sat_scAh4];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_scAh7 [Occ=Once]
                                                                                        :: GHC.ByteOrder.ByteOrder
                                                                                      [LclId] =
                                                                                          [x_scAgY] \u []
                                                                                              case
                                                                                                  >=# [x_scAgY
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.ByteOrder.$wlvl
                                                                                                        x_scAgY;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_scAgY
                                                                                                             1#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.ByteOrder.$wlvl
                                                                                                              x_scAgY;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_scAgY];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_scAh7
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_up_scAgX x5_scAgs;
                                                              };
                                                        }; } in
                                              let {
                                                sat_scAgU [Occ=Once] :: GHC.ByteOrder.ByteOrder
                                                [LclId] =
                                                    [x4_scAgq] \u []
                                                        case >=# [x4_scAgq 0#] of {
                                                          __DEFAULT -> GHC.ByteOrder.$wlvl x4_scAgq;
                                                          1# ->
                                                              case <=# [x4_scAgq 1#] of {
                                                                __DEFAULT ->
                                                                    GHC.ByteOrder.$wlvl x4_scAgq;
                                                                1# -> tagToEnum# [x4_scAgq];
                                                              };
                                                        };
                                              } in  : [sat_scAgU sat_scAh8];
                                          1# ->
                                              case <# [0# x4_scAgq] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_scAhc [Occ=Once]
                                                        :: GHC.ByteOrder.ByteOrder
                                                      [LclId] =
                                                          [x4_scAgq] \u []
                                                              case >=# [x4_scAgq 0#] of {
                                                                __DEFAULT ->
                                                                    GHC.ByteOrder.$wlvl x4_scAgq;
                                                                1# ->
                                                                    case <=# [x4_scAgq 1#] of {
                                                                      __DEFAULT ->
                                                                          GHC.ByteOrder.$wlvl
                                                                              x4_scAgq;
                                                                      1# -> tagToEnum# [x4_scAgq];
                                                                    };
                                                              };
                                                    } in  : [sat_scAhc GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                  };
                              GHC.ByteOrder.LittleEndian ->
                                  case >=# [x5_scAgs x4_scAgq] of {
                                    __DEFAULT ->
                                        case ># [1# x5_scAgs] of {
                                          __DEFAULT ->
                                              let {
                                                sat_scAhv [Occ=Once] :: [GHC.ByteOrder.ByteOrder]
                                                [LclId] =
                                                    [x4_scAgq x5_scAgs] \u []
                                                        case
                                                            -# [x5_scAgs x4_scAgq]
                                                        of
                                                        delta_scAhi [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [1# delta_scAhi]
                                                              of
                                                              y'_scAhj [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_dn_scAhk [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.ByteOrder.ByteOrder]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_scAhi
                                                                                    y'_scAhj
                                                                                    go_dn_scAhk] \r [x_scAhl]
                                                                              case
                                                                                  <# [x_scAhl
                                                                                      y'_scAhj]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_scAhr [Occ=Once]
                                                                                        :: [GHC.ByteOrder.ByteOrder]
                                                                                      [LclId] =
                                                                                          [delta_scAhi
                                                                                           go_dn_scAhk
                                                                                           x_scAhl] \u []
                                                                                              case
                                                                                                  +# [x_scAhl
                                                                                                      delta_scAhi]
                                                                                              of
                                                                                              sat_scAhq
                                                                                              { __DEFAULT ->
                                                                                                    go_dn_scAhk
                                                                                                        sat_scAhq;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_scAhp [Occ=Once]
                                                                                        :: GHC.ByteOrder.ByteOrder
                                                                                      [LclId] =
                                                                                          [x_scAhl] \u []
                                                                                              case
                                                                                                  >=# [x_scAhl
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.ByteOrder.$wlvl
                                                                                                        x_scAhl;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_scAhl
                                                                                                             1#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.ByteOrder.$wlvl
                                                                                                              x_scAhl;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_scAhl];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_scAhp
                                                                                         sat_scAhr];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_scAhu [Occ=Once]
                                                                                        :: GHC.ByteOrder.ByteOrder
                                                                                      [LclId] =
                                                                                          [x_scAhl] \u []
                                                                                              case
                                                                                                  >=# [x_scAhl
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.ByteOrder.$wlvl
                                                                                                        x_scAhl;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_scAhl
                                                                                                             1#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.ByteOrder.$wlvl
                                                                                                              x_scAhl;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_scAhl];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_scAhu
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_dn_scAhk x5_scAgs;
                                                              };
                                                        }; } in
                                              let {
                                                sat_scAhh [Occ=Once] :: GHC.ByteOrder.ByteOrder
                                                [LclId] =
                                                    [x4_scAgq] \u []
                                                        case >=# [x4_scAgq 0#] of {
                                                          __DEFAULT -> GHC.ByteOrder.$wlvl x4_scAgq;
                                                          1# ->
                                                              case <=# [x4_scAgq 1#] of {
                                                                __DEFAULT ->
                                                                    GHC.ByteOrder.$wlvl x4_scAgq;
                                                                1# -> tagToEnum# [x4_scAgq];
                                                              };
                                                        };
                                              } in  : [sat_scAhh sat_scAhv];
                                          1# ->
                                              case ># [1# x4_scAgq] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_scAhz [Occ=Once]
                                                        :: GHC.ByteOrder.ByteOrder
                                                      [LclId] =
                                                          [x4_scAgq] \u []
                                                              case >=# [x4_scAgq 0#] of {
                                                                __DEFAULT ->
                                                                    GHC.ByteOrder.$wlvl x4_scAgq;
                                                                1# ->
                                                                    case <=# [x4_scAgq 1#] of {
                                                                      __DEFAULT ->
                                                                          GHC.ByteOrder.$wlvl
                                                                              x4_scAgq;
                                                                      1# -> tagToEnum# [x4_scAgq];
                                                                    };
                                                              };
                                                    } in  : [sat_scAhz GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                    1# ->
                                        case <# [1# x5_scAgs] of {
                                          __DEFAULT ->
                                              let {
                                                sat_scAhR [Occ=Once] :: [GHC.ByteOrder.ByteOrder]
                                                [LclId] =
                                                    [x4_scAgq x5_scAgs] \u []
                                                        case
                                                            -# [x5_scAgs x4_scAgq]
                                                        of
                                                        delta_scAhE [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [1# delta_scAhE]
                                                              of
                                                              y'_scAhF [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_up_scAhG [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.ByteOrder.ByteOrder]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_scAhE
                                                                                    y'_scAhF
                                                                                    go_up_scAhG] \r [x_scAhH]
                                                                              case
                                                                                  ># [x_scAhH
                                                                                      y'_scAhF]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_scAhN [Occ=Once]
                                                                                        :: [GHC.ByteOrder.ByteOrder]
                                                                                      [LclId] =
                                                                                          [delta_scAhE
                                                                                           go_up_scAhG
                                                                                           x_scAhH] \u []
                                                                                              case
                                                                                                  +# [x_scAhH
                                                                                                      delta_scAhE]
                                                                                              of
                                                                                              sat_scAhM
                                                                                              { __DEFAULT ->
                                                                                                    go_up_scAhG
                                                                                                        sat_scAhM;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_scAhL [Occ=Once]
                                                                                        :: GHC.ByteOrder.ByteOrder
                                                                                      [LclId] =
                                                                                          [x_scAhH] \u []
                                                                                              case
                                                                                                  >=# [x_scAhH
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.ByteOrder.$wlvl
                                                                                                        x_scAhH;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_scAhH
                                                                                                             1#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.ByteOrder.$wlvl
                                                                                                              x_scAhH;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_scAhH];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_scAhL
                                                                                         sat_scAhN];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_scAhQ [Occ=Once]
                                                                                        :: GHC.ByteOrder.ByteOrder
                                                                                      [LclId] =
                                                                                          [x_scAhH] \u []
                                                                                              case
                                                                                                  >=# [x_scAhH
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.ByteOrder.$wlvl
                                                                                                        x_scAhH;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_scAhH
                                                                                                             1#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.ByteOrder.$wlvl
                                                                                                              x_scAhH;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_scAhH];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_scAhQ
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_up_scAhG x5_scAgs;
                                                              };
                                                        }; } in
                                              let {
                                                sat_scAhD [Occ=Once] :: GHC.ByteOrder.ByteOrder
                                                [LclId] =
                                                    [x4_scAgq] \u []
                                                        case >=# [x4_scAgq 0#] of {
                                                          __DEFAULT -> GHC.ByteOrder.$wlvl x4_scAgq;
                                                          1# ->
                                                              case <=# [x4_scAgq 1#] of {
                                                                __DEFAULT ->
                                                                    GHC.ByteOrder.$wlvl x4_scAgq;
                                                                1# -> tagToEnum# [x4_scAgq];
                                                              };
                                                        };
                                              } in  : [sat_scAhD sat_scAhR];
                                          1# ->
                                              case <# [1# x4_scAgq] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_scAhV [Occ=Once]
                                                        :: GHC.ByteOrder.ByteOrder
                                                      [LclId] =
                                                          [x4_scAgq] \u []
                                                              case >=# [x4_scAgq 0#] of {
                                                                __DEFAULT ->
                                                                    GHC.ByteOrder.$wlvl x4_scAgq;
                                                                1# ->
                                                                    case <=# [x4_scAgq 1#] of {
                                                                      __DEFAULT ->
                                                                          GHC.ByteOrder.$wlvl
                                                                              x4_scAgq;
                                                                      1# -> tagToEnum# [x4_scAgq];
                                                                    };
                                                              };
                                                    } in  : [sat_scAhV GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                  };
                            };
                  } in 
                    case x2_scAgn of {
                      GHC.ByteOrder.BigEndian -> $j1_scAgr 0#;
                      GHC.ByteOrder.LittleEndian -> $j1_scAgr 1#;
                    };
        } in 
          case x1_scAgm of {
            GHC.ByteOrder.BigEndian -> $j_scAgp 0#;
            GHC.ByteOrder.LittleEndian -> $j_scAgp 1#;
          };

GHC.ByteOrder.$fEnumByteOrder [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Enum GHC.ByteOrder.ByteOrder
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Enum! [GHC.ByteOrder.$fEnumByteOrder_$csucc
                                    GHC.ByteOrder.$fEnumByteOrder_$cpred
                                    GHC.ByteOrder.$fEnumByteOrder_$ctoEnum
                                    GHC.ByteOrder.$fEnumByteOrder_$cfromEnum
                                    GHC.ByteOrder.$fEnumByteOrder_$cenumFrom
                                    GHC.ByteOrder.$fEnumByteOrder_$cenumFromThen
                                    GHC.ByteOrder.$fEnumByteOrder_$cenumFromTo
                                    GHC.ByteOrder.$fEnumByteOrder_$cenumFromThenTo];

GHC.ByteOrder.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ByteOrder.$trModule4];

GHC.ByteOrder.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ByteOrder.$trModule2];

GHC.ByteOrder.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.ByteOrder.$trModule3
                                     GHC.ByteOrder.$trModule1];

GHC.ByteOrder.$tcByteOrder2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ByteOrder"#;

GHC.ByteOrder.$tcByteOrder1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ByteOrder.$tcByteOrder2];

GHC.ByteOrder.$tcByteOrder :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [16811050684449662084##
                                    17273005335247024091##
                                    GHC.ByteOrder.$trModule
                                    GHC.ByteOrder.$tcByteOrder1
                                    0#
                                    GHC.Types.krep$*];

GHC.ByteOrder.$tc'BigEndian1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.ByteOrder.$tcByteOrder
                                              GHC.Types.[]];

GHC.ByteOrder.$tc'BigEndian3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'BigEndian"#;

GHC.ByteOrder.$tc'BigEndian2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ByteOrder.$tc'BigEndian3];

GHC.ByteOrder.$tc'BigEndian :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2645192688778293591##
                                    7455668807059762078##
                                    GHC.ByteOrder.$trModule
                                    GHC.ByteOrder.$tc'BigEndian2
                                    0#
                                    GHC.ByteOrder.$tc'BigEndian1];

GHC.ByteOrder.$tc'LittleEndian2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'LittleEndian"#;

GHC.ByteOrder.$tc'LittleEndian1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ByteOrder.$tc'LittleEndian2];

GHC.ByteOrder.$tc'LittleEndian :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [8702700204875460152##
                                    10337679016369298147##
                                    GHC.ByteOrder.$trModule
                                    GHC.ByteOrder.$tc'LittleEndian1
                                    0#
                                    GHC.ByteOrder.$tc'BigEndian1];

GHC.ByteOrder.BigEndian :: GHC.ByteOrder.ByteOrder
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.ByteOrder.BigEndian! [];

GHC.ByteOrder.LittleEndian :: GHC.ByteOrder.ByteOrder
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.ByteOrder.LittleEndian! [];


==================== STG syntax: ====================
2018-03-16 16:07:29.600758759 UTC

GHC.ByteOrder.$fReadByteOrder11 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "BigEndian"#;

GHC.ByteOrder.$fReadByteOrder10 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.ByteOrder.$fReadByteOrder11;

GHC.ByteOrder.$fReadByteOrder7 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "LittleEndian"#;

GHC.ByteOrder.$fReadByteOrder6 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.ByteOrder.$fReadByteOrder7;

GHC.ByteOrder.$fShowByteOrder_$cshowsPrec
  :: GHC.Types.Int -> GHC.ByteOrder.ByteOrder -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [ds_scAdv ds1_scAdw eta_scAdx]
        case ds1_scAdw of {
          GHC.ByteOrder.BigEndian ->
              GHC.Base.++ GHC.ByteOrder.$fReadByteOrder10 eta_scAdx;
          GHC.ByteOrder.LittleEndian ->
              GHC.Base.++ GHC.ByteOrder.$fReadByteOrder6 eta_scAdx;
        };

GHC.ByteOrder.$fShowByteOrder_$cshow
  :: GHC.ByteOrder.ByteOrder -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_scAdz]
        case x_scAdz of {
          GHC.ByteOrder.BigEndian -> GHC.ByteOrder.$fReadByteOrder10;
          GHC.ByteOrder.LittleEndian -> GHC.ByteOrder.$fReadByteOrder6;
        };

GHC.ByteOrder.$fShowByteOrder1
  :: GHC.ByteOrder.ByteOrder -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [ds_scAdB eta_scAdC]
        case ds_scAdB of {
          GHC.ByteOrder.BigEndian ->
              GHC.Base.++ GHC.ByteOrder.$fReadByteOrder10 eta_scAdC;
          GHC.ByteOrder.LittleEndian ->
              GHC.Base.++ GHC.ByteOrder.$fReadByteOrder6 eta_scAdC;
        };

GHC.ByteOrder.$fShowByteOrder_$cshowList
  :: [GHC.ByteOrder.ByteOrder] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_scAdE s_scAdF]
        GHC.Show.showList__
            GHC.ByteOrder.$fShowByteOrder1 ls_scAdE s_scAdF;

GHC.ByteOrder.$fShowByteOrder [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.ByteOrder.ByteOrder
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.ByteOrder.$fShowByteOrder_$cshowsPrec
                                    GHC.ByteOrder.$fShowByteOrder_$cshow
                                    GHC.ByteOrder.$fShowByteOrder_$cshowList];

GHC.ByteOrder.$fReadByteOrder9
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.ByteOrder.ByteOrder -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_scAdG k_scAdH] k_scAdH GHC.ByteOrder.BigEndian;

GHC.ByteOrder.$fReadByteOrder8
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec GHC.ByteOrder.ByteOrder)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.ByteOrder.$fReadByteOrder10
                        GHC.ByteOrder.$fReadByteOrder9];

GHC.ByteOrder.$fReadByteOrder5
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.ByteOrder.ByteOrder -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_scAdI k_scAdJ] k_scAdJ GHC.ByteOrder.LittleEndian;

GHC.ByteOrder.$fReadByteOrder4
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec GHC.ByteOrder.ByteOrder)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.ByteOrder.$fReadByteOrder6
                        GHC.ByteOrder.$fReadByteOrder5];

GHC.ByteOrder.$fReadByteOrder3
  :: [(GHC.Base.String,
       Text.ParserCombinators.ReadPrec.ReadPrec GHC.ByteOrder.ByteOrder)]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.ByteOrder.$fReadByteOrder4 GHC.Types.[]];

GHC.ByteOrder.$fReadByteOrder_sps
  :: [(GHC.Base.String,
       Text.ParserCombinators.ReadPrec.ReadPrec GHC.ByteOrder.ByteOrder)]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.ByteOrder.$fReadByteOrder8
                      GHC.ByteOrder.$fReadByteOrder3];

GHC.ByteOrder.$fReadByteOrder2
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.ByteOrder.ByteOrder
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_scAdK]
        GHC.Read.choose2 GHC.ByteOrder.$fReadByteOrder_sps eta_scAdK;

GHC.ByteOrder.$fReadByteOrder1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.ByteOrder.ByteOrder -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Read.list3 GHC.ByteOrder.$fReadByteOrder2 eta_B2 eta_B1;

GHC.ByteOrder.$fReadByteOrder_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.ByteOrder.ByteOrder
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_scAdL]
        let {
          sat_scAdM [Occ=Once]
            :: Text.ParserCombinators.ReadP.P GHC.ByteOrder.ByteOrder
          [LclId] =
              [n_scAdL] \u []
                  GHC.Read.list3
                      GHC.ByteOrder.$fReadByteOrder2
                      n_scAdL
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_scAdM;

GHC.ByteOrder.$fReadByteOrder_$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec
       [GHC.ByteOrder.ByteOrder]
[GblId] =
    [] \u [] GHC.Read.list GHC.ByteOrder.$fReadByteOrder1;

GHC.ByteOrder.$fReadByteOrder12
  :: Text.ParserCombinators.ReadP.P [GHC.ByteOrder.ByteOrder]
[GblId] =
    [] \u []
        GHC.ByteOrder.$fReadByteOrder_$creadListPrec
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.ByteOrder.$fReadByteOrder_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.ByteOrder.ByteOrder]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run
            GHC.ByteOrder.$fReadByteOrder12 eta_B1;

GHC.ByteOrder.$fReadByteOrder [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.ByteOrder.ByteOrder
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.ByteOrder.$fReadByteOrder_$creadsPrec
                                    GHC.ByteOrder.$fReadByteOrder_$creadList
                                    GHC.ByteOrder.$fReadByteOrder1
                                    GHC.ByteOrder.$fReadByteOrder_$creadListPrec];

GHC.ByteOrder.$fBoundedByteOrder [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Bounded GHC.ByteOrder.ByteOrder
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Bounded! [GHC.ByteOrder.BigEndian
                                       GHC.ByteOrder.LittleEndian];

GHC.ByteOrder.$fOrdByteOrder_$c<
  :: GHC.ByteOrder.ByteOrder
     -> GHC.ByteOrder.ByteOrder -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_scAdN b_scAdO]
        case a_scAdN of {
          GHC.ByteOrder.BigEndian ->
              case b_scAdO of {
                GHC.ByteOrder.BigEndian -> GHC.Types.False [];
                GHC.ByteOrder.LittleEndian -> GHC.Types.True [];
              };
          GHC.ByteOrder.LittleEndian ->
              case b_scAdO of { __DEFAULT -> GHC.Types.False []; };
        };

GHC.ByteOrder.$fOrdByteOrder_$ccompare
  :: GHC.ByteOrder.ByteOrder
     -> GHC.ByteOrder.ByteOrder -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_scAdS b_scAdT]
        case a_scAdS of {
          GHC.ByteOrder.BigEndian ->
              case b_scAdT of {
                GHC.ByteOrder.BigEndian -> GHC.Types.EQ [];
                GHC.ByteOrder.LittleEndian -> GHC.Types.LT [];
              };
          GHC.ByteOrder.LittleEndian ->
              case b_scAdT of {
                GHC.ByteOrder.BigEndian -> GHC.Types.GT [];
                GHC.ByteOrder.LittleEndian -> GHC.Types.EQ [];
              };
        };

GHC.ByteOrder.$fEqByteOrder_$c==
  :: GHC.ByteOrder.ByteOrder
     -> GHC.ByteOrder.ByteOrder -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_scAdX ds1_scAdY]
        case ds_scAdX of {
          GHC.ByteOrder.BigEndian ->
              case ds1_scAdY of {
                GHC.ByteOrder.BigEndian -> GHC.Types.True [];
                GHC.ByteOrder.LittleEndian -> GHC.Types.False [];
              };
          GHC.ByteOrder.LittleEndian ->
              case ds1_scAdY of {
                GHC.ByteOrder.BigEndian -> GHC.Types.False [];
                GHC.ByteOrder.LittleEndian -> GHC.Types.True [];
              };
        };

GHC.ByteOrder.$fEqByteOrder_$c/= [InlPrag=INLINE (sat-args=2)]
  :: GHC.ByteOrder.ByteOrder
     -> GHC.ByteOrder.ByteOrder -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_scAe2 eta1_scAe3]
        case eta_scAe2 of {
          GHC.ByteOrder.BigEndian ->
              case eta1_scAe3 of {
                GHC.ByteOrder.BigEndian -> GHC.Types.False [];
                GHC.ByteOrder.LittleEndian -> GHC.Types.True [];
              };
          GHC.ByteOrder.LittleEndian ->
              case eta1_scAe3 of {
                GHC.ByteOrder.BigEndian -> GHC.Types.True [];
                GHC.ByteOrder.LittleEndian -> GHC.Types.False [];
              };
        };

GHC.ByteOrder.$fEqByteOrder [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.ByteOrder.ByteOrder
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.ByteOrder.$fEqByteOrder_$c==
                                     GHC.ByteOrder.$fEqByteOrder_$c/=];

GHC.ByteOrder.$fOrdByteOrder_$c<=
  :: GHC.ByteOrder.ByteOrder
     -> GHC.ByteOrder.ByteOrder -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_scAe7 b_scAe8]
        case b_scAe8 of {
          GHC.ByteOrder.BigEndian ->
              case a_scAe7 of {
                GHC.ByteOrder.BigEndian -> GHC.Types.True [];
                GHC.ByteOrder.LittleEndian -> GHC.Types.False [];
              };
          GHC.ByteOrder.LittleEndian ->
              case a_scAe7 of { __DEFAULT -> GHC.Types.True []; };
        };

GHC.ByteOrder.$fOrdByteOrder_$cmax
  :: GHC.ByteOrder.ByteOrder
     -> GHC.ByteOrder.ByteOrder -> GHC.ByteOrder.ByteOrder
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_scAec y_scAed]
        case y_scAed of {
          GHC.ByteOrder.BigEndian -> x_scAec;
          GHC.ByteOrder.LittleEndian ->
              case x_scAec of { __DEFAULT -> GHC.ByteOrder.LittleEndian []; };
        };

GHC.ByteOrder.$fOrdByteOrder_$c>=
  :: GHC.ByteOrder.ByteOrder
     -> GHC.ByteOrder.ByteOrder -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_scAeg b_scAeh]
        case a_scAeg of {
          GHC.ByteOrder.BigEndian ->
              case b_scAeh of {
                GHC.ByteOrder.BigEndian -> GHC.Types.True [];
                GHC.ByteOrder.LittleEndian -> GHC.Types.False [];
              };
          GHC.ByteOrder.LittleEndian ->
              case b_scAeh of { __DEFAULT -> GHC.Types.True []; };
        };

GHC.ByteOrder.$fOrdByteOrder_$c>
  :: GHC.ByteOrder.ByteOrder
     -> GHC.ByteOrder.ByteOrder -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_scAel b_scAem]
        GHC.ByteOrder.$fOrdByteOrder_$c< b_scAem a_scAel;

GHC.ByteOrder.$fOrdByteOrder_$cmin
  :: GHC.ByteOrder.ByteOrder
     -> GHC.ByteOrder.ByteOrder -> GHC.ByteOrder.ByteOrder
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_scAen y_scAeo]
        case y_scAeo of {
          GHC.ByteOrder.BigEndian ->
              case x_scAen of { __DEFAULT -> GHC.ByteOrder.BigEndian []; };
          GHC.ByteOrder.LittleEndian -> x_scAen;
        };

GHC.ByteOrder.$fOrdByteOrder [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.ByteOrder.ByteOrder
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.ByteOrder.$fEqByteOrder
                                      GHC.ByteOrder.$fOrdByteOrder_$ccompare
                                      GHC.ByteOrder.$fOrdByteOrder_$c<
                                      GHC.ByteOrder.$fOrdByteOrder_$c<=
                                      GHC.ByteOrder.$fOrdByteOrder_$c>
                                      GHC.ByteOrder.$fOrdByteOrder_$c>=
                                      GHC.ByteOrder.$fOrdByteOrder_$cmax
                                      GHC.ByteOrder.$fOrdByteOrder_$cmin];

GHC.ByteOrder.targetByteOrder :: GHC.ByteOrder.ByteOrder
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.ByteOrder.LittleEndian! [];

lvl_rcykn :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

lvl1_rcyko :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [1#];

GHC.ByteOrder.$fEnumByteOrder_$cfromEnum
  :: GHC.ByteOrder.ByteOrder -> GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [a_scAer]
        case a_scAer of {
          GHC.ByteOrder.BigEndian -> lvl_rcykn;
          GHC.ByteOrder.LittleEndian -> lvl1_rcyko;
        };

lvl2_rcykp :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "error"#;

lvl3_rcykq :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl2_rcykp;

GHC.ByteOrder.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

lvl4_rcykr :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.ByteOrder.$trModule4;

GHC.ByteOrder.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.ByteOrder"#;

lvl5_rcyks :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.ByteOrder.$trModule2;

lvl6_rcykt :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "./GHC/ByteOrder.hs"#;

lvl7_rcyku :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl6_rcykt;

lvl8_rcykv :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [26#];

lvl9_rcykw :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [16#];

lvl10_rcykx :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [20#];

lvl11_rcyky :: GHC.Stack.Types.SrcLoc
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.SrcLoc! [lvl4_rcykr
                                           lvl5_rcyks
                                           lvl7_rcyku
                                           lvl8_rcykv
                                           lvl9_rcykw
                                           lvl8_rcykv
                                           lvl10_rcykx];

lvl12_rcykz :: GHC.Stack.Types.CallStack
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.PushCallStack! [lvl3_rcykq
                                                  lvl11_rcyky
                                                  GHC.Stack.Types.EmptyCallStack];

lvl13_rcykA :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "pred{ByteOrder}: tried to take `pred' of first tag in enumeration"#;

GHC.ByteOrder.$fEnumByteOrder3 :: GHC.ByteOrder.ByteOrder
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl13_rcykA of sat_scAet {
          __DEFAULT -> GHC.Err.error lvl12_rcykz sat_scAet;
        };

GHC.ByteOrder.$fEnumByteOrder_$cpred
  :: GHC.ByteOrder.ByteOrder -> GHC.ByteOrder.ByteOrder
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [a_scAeu]
        case a_scAeu of {
          GHC.ByteOrder.BigEndian -> GHC.ByteOrder.$fEnumByteOrder3;
          GHC.ByteOrder.LittleEndian -> GHC.ByteOrder.BigEndian [];
        };

lvl14_rcykB :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "succ{ByteOrder}: tried to take `succ' of last tag in enumeration"#;

GHC.ByteOrder.$fEnumByteOrder4 :: GHC.ByteOrder.ByteOrder
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl14_rcykB of sat_scAew {
          __DEFAULT -> GHC.Err.error lvl12_rcykz sat_scAew;
        };

GHC.ByteOrder.$fEnumByteOrder_$csucc
  :: GHC.ByteOrder.ByteOrder -> GHC.ByteOrder.ByteOrder
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [a_scAex]
        case a_scAex of {
          GHC.ByteOrder.BigEndian -> GHC.ByteOrder.LittleEndian [];
          GHC.ByteOrder.LittleEndian -> GHC.ByteOrder.$fEnumByteOrder4;
        };

lvl15_rcykC :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ") is outside of enumeration's range (0,"#;

lvl16_rcykD :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ")"#;

lvl17_rcykE :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl16_rcykD;

lvl18_rcykF :: [GHC.Types.Char]
[GblId] =
    [] \u []
        case GHC.Show.$wshowSignedInt 0# 1# lvl17_rcykE of {
          (#,#) ww5_scAeA [Occ=Once] ww6_scAeB [Occ=Once] ->
              : [ww5_scAeA ww6_scAeB];
        };

lvl19_rcykG :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackAppendCString# lvl15_rcykC lvl18_rcykF;

lvl20_rcykH :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "toEnum{ByteOrder}: tag ("#;

GHC.ByteOrder.$wlvl [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.ByteOrder.ByteOrder
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [ww_scAeC]
        let {
          sat_scAeG [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [ww_scAeC] \u []
                  case GHC.Show.$wshowSignedInt 0# ww_scAeC lvl19_rcykG of {
                    (#,#) ww5_scAeE [Occ=Once] ww6_scAeF [Occ=Once] ->
                        : [ww5_scAeE ww6_scAeF];
                  };
        } in 
          case
              GHC.CString.unpackAppendCString# lvl20_rcykH sat_scAeG
          of
          sat_scAeH
          { __DEFAULT -> GHC.Err.error lvl12_rcykz sat_scAeH;
          };

GHC.ByteOrder.$w$ctoEnum [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.ByteOrder.ByteOrder
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [ww_scAeI]
        case >=# [ww_scAeI 0#] of {
          __DEFAULT -> GHC.ByteOrder.$wlvl ww_scAeI;
          1# ->
              case <=# [ww_scAeI 1#] of {
                __DEFAULT -> GHC.ByteOrder.$wlvl ww_scAeI;
                1# -> tagToEnum# [ww_scAeI];
              };
        };

GHC.ByteOrder.$fEnumByteOrder_$ctoEnum [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.ByteOrder.ByteOrder
[GblId, Arity=1, Str=<S(S),1*U(U)>, Unf=OtherCon []] =
    [] \r [w_scAeL]
        case w_scAeL of {
          GHC.Types.I# ww1_scAeN [Occ=Once] ->
              GHC.ByteOrder.$w$ctoEnum ww1_scAeN;
        };

GHC.ByteOrder.$fEnumByteOrder_go2 [Occ=LoopBreaker]
  :: GHC.Prim.Int# -> [GHC.ByteOrder.ByteOrder]
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [x_scAeO]
        let {
          sat_scAeS [Occ=Once] :: [GHC.ByteOrder.ByteOrder]
          [LclId] =
              [x_scAeO] \u []
                  case x_scAeO of wild_scAeQ {
                    __DEFAULT ->
                        case +# [wild_scAeQ 1#] of sat_scAeR {
                          __DEFAULT -> GHC.ByteOrder.$fEnumByteOrder_go2 sat_scAeR;
                        };
                    1# -> [] [];
                  }; } in
        let {
          sat_scAeP [Occ=Once] :: GHC.ByteOrder.ByteOrder
          [LclId] =
              [x_scAeO] \u [] tagToEnum# [x_scAeO];
        } in  : [sat_scAeP sat_scAeS];

GHC.ByteOrder.$fEnumByteOrder2 :: [GHC.ByteOrder.ByteOrder]
[GblId] =
    [] \u [] GHC.ByteOrder.$fEnumByteOrder_go2 0#;

GHC.ByteOrder.$fEnumByteOrder1 :: [GHC.ByteOrder.ByteOrder]
[GblId] =
    [] \u [] GHC.ByteOrder.$fEnumByteOrder_go2 1#;

GHC.ByteOrder.$fEnumByteOrder_$cenumFrom
  :: GHC.ByteOrder.ByteOrder -> [GHC.ByteOrder.ByteOrder]
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [a_scAeT]
        case a_scAeT of {
          GHC.ByteOrder.BigEndian -> GHC.ByteOrder.$fEnumByteOrder2;
          GHC.ByteOrder.LittleEndian -> GHC.ByteOrder.$fEnumByteOrder1;
        };

GHC.ByteOrder.$fEnumByteOrder_$cenumFromThen
  :: GHC.ByteOrder.ByteOrder
     -> GHC.ByteOrder.ByteOrder -> [GHC.ByteOrder.ByteOrder]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_scAeV b_scAeW]
        let-no-escape {
          $j_scAeX [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
            :: GHC.Prim.Int# -> [GHC.ByteOrder.ByteOrder]
          [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
              sat-only [b_scAeW] \r [a#_scAeY]
                  let-no-escape {
                    $j1_scAeZ [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
                      :: GHC.Prim.Int# -> [GHC.ByteOrder.ByteOrder]
                    [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
                        sat-only [a#_scAeY] \r [b#_scAf0]
                            case ># [a#_scAeY b#_scAf0] of {
                              __DEFAULT ->
                                  case >=# [b#_scAf0 a#_scAeY] of {
                                    __DEFAULT ->
                                        case ># [1# b#_scAf0] of {
                                          __DEFAULT ->
                                              let {
                                                sat_scAfe [Occ=Once] :: [GHC.ByteOrder.ByteOrder]
                                                [LclId] =
                                                    [a#_scAeY b#_scAf0] \u []
                                                        case
                                                            -# [b#_scAf0 a#_scAeY]
                                                        of
                                                        delta_scAf5 [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [1# delta_scAf5]
                                                              of
                                                              y'_scAf6 [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_dn_scAf7 [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.ByteOrder.ByteOrder]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_scAf5
                                                                                    y'_scAf6
                                                                                    go_dn_scAf7] \r [x_scAf8]
                                                                              case
                                                                                  <# [x_scAf8
                                                                                      y'_scAf6]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_scAfc [Occ=Once]
                                                                                        :: [GHC.ByteOrder.ByteOrder]
                                                                                      [LclId] =
                                                                                          [delta_scAf5
                                                                                           go_dn_scAf7
                                                                                           x_scAf8] \u []
                                                                                              case
                                                                                                  +# [x_scAf8
                                                                                                      delta_scAf5]
                                                                                              of
                                                                                              sat_scAfb
                                                                                              { __DEFAULT ->
                                                                                                    go_dn_scAf7
                                                                                                        sat_scAfb;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_scAfa [Occ=Once]
                                                                                        :: GHC.ByteOrder.ByteOrder
                                                                                      [LclId] =
                                                                                          [x_scAf8] \u []
                                                                                              tagToEnum# [x_scAf8];
                                                                                    } in 
                                                                                      : [sat_scAfa
                                                                                         sat_scAfc];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_scAfd [Occ=Once]
                                                                                        :: GHC.ByteOrder.ByteOrder
                                                                                      [LclId] =
                                                                                          [x_scAf8] \u []
                                                                                              tagToEnum# [x_scAf8];
                                                                                    } in 
                                                                                      : [sat_scAfd
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_dn_scAf7 b#_scAf0;
                                                              };
                                                        }; } in
                                              let {
                                                sat_scAf4 [Occ=Once] :: GHC.ByteOrder.ByteOrder
                                                [LclId] =
                                                    [a#_scAeY] \u [] tagToEnum# [a#_scAeY];
                                              } in  : [sat_scAf4 sat_scAfe];
                                          1# ->
                                              case ># [1# a#_scAeY] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_scAfg [Occ=Once]
                                                        :: GHC.ByteOrder.ByteOrder
                                                      [LclId] =
                                                          [a#_scAeY] \u [] tagToEnum# [a#_scAeY];
                                                    } in  : [sat_scAfg GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                    1# ->
                                        case <# [1# b#_scAf0] of {
                                          __DEFAULT ->
                                              let {
                                                sat_scAfs [Occ=Once] :: [GHC.ByteOrder.ByteOrder]
                                                [LclId] =
                                                    [a#_scAeY b#_scAf0] \u []
                                                        case
                                                            -# [b#_scAf0 a#_scAeY]
                                                        of
                                                        delta_scAfj [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [1# delta_scAfj]
                                                              of
                                                              y'_scAfk [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_up_scAfl [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.ByteOrder.ByteOrder]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_scAfj
                                                                                    y'_scAfk
                                                                                    go_up_scAfl] \r [x_scAfm]
                                                                              case
                                                                                  ># [x_scAfm
                                                                                      y'_scAfk]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_scAfq [Occ=Once]
                                                                                        :: [GHC.ByteOrder.ByteOrder]
                                                                                      [LclId] =
                                                                                          [delta_scAfj
                                                                                           go_up_scAfl
                                                                                           x_scAfm] \u []
                                                                                              case
                                                                                                  +# [x_scAfm
                                                                                                      delta_scAfj]
                                                                                              of
                                                                                              sat_scAfp
                                                                                              { __DEFAULT ->
                                                                                                    go_up_scAfl
                                                                                                        sat_scAfp;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_scAfo [Occ=Once]
                                                                                        :: GHC.ByteOrder.ByteOrder
                                                                                      [LclId] =
                                                                                          [x_scAfm] \u []
                                                                                              tagToEnum# [x_scAfm];
                                                                                    } in 
                                                                                      : [sat_scAfo
                                                                                         sat_scAfq];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_scAfr [Occ=Once]
                                                                                        :: GHC.ByteOrder.ByteOrder
                                                                                      [LclId] =
                                                                                          [x_scAfm] \u []
                                                                                              tagToEnum# [x_scAfm];
                                                                                    } in 
                                                                                      : [sat_scAfr
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_up_scAfl b#_scAf0;
                                                              };
                                                        }; } in
                                              let {
                                                sat_scAfi [Occ=Once] :: GHC.ByteOrder.ByteOrder
                                                [LclId] =
                                                    [a#_scAeY] \u [] tagToEnum# [a#_scAeY];
                                              } in  : [sat_scAfi sat_scAfs];
                                          1# ->
                                              case <# [1# a#_scAeY] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_scAfu [Occ=Once]
                                                        :: GHC.ByteOrder.ByteOrder
                                                      [LclId] =
                                                          [a#_scAeY] \u [] tagToEnum# [a#_scAeY];
                                                    } in  : [sat_scAfu GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                  };
                              1# ->
                                  case >=# [b#_scAf0 a#_scAeY] of {
                                    __DEFAULT ->
                                        case ># [0# b#_scAf0] of {
                                          __DEFAULT ->
                                              let {
                                                sat_scAfH [Occ=Once] :: [GHC.ByteOrder.ByteOrder]
                                                [LclId] =
                                                    [a#_scAeY b#_scAf0] \u []
                                                        case
                                                            -# [b#_scAf0 a#_scAeY]
                                                        of
                                                        delta_scAfy [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [0# delta_scAfy]
                                                              of
                                                              y'_scAfz [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_dn_scAfA [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.ByteOrder.ByteOrder]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_scAfy
                                                                                    y'_scAfz
                                                                                    go_dn_scAfA] \r [x_scAfB]
                                                                              case
                                                                                  <# [x_scAfB
                                                                                      y'_scAfz]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_scAfF [Occ=Once]
                                                                                        :: [GHC.ByteOrder.ByteOrder]
                                                                                      [LclId] =
                                                                                          [delta_scAfy
                                                                                           go_dn_scAfA
                                                                                           x_scAfB] \u []
                                                                                              case
                                                                                                  +# [x_scAfB
                                                                                                      delta_scAfy]
                                                                                              of
                                                                                              sat_scAfE
                                                                                              { __DEFAULT ->
                                                                                                    go_dn_scAfA
                                                                                                        sat_scAfE;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_scAfD [Occ=Once]
                                                                                        :: GHC.ByteOrder.ByteOrder
                                                                                      [LclId] =
                                                                                          [x_scAfB] \u []
                                                                                              tagToEnum# [x_scAfB];
                                                                                    } in 
                                                                                      : [sat_scAfD
                                                                                         sat_scAfF];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_scAfG [Occ=Once]
                                                                                        :: GHC.ByteOrder.ByteOrder
                                                                                      [LclId] =
                                                                                          [x_scAfB] \u []
                                                                                              tagToEnum# [x_scAfB];
                                                                                    } in 
                                                                                      : [sat_scAfG
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_dn_scAfA b#_scAf0;
                                                              };
                                                        }; } in
                                              let {
                                                sat_scAfx [Occ=Once] :: GHC.ByteOrder.ByteOrder
                                                [LclId] =
                                                    [a#_scAeY] \u [] tagToEnum# [a#_scAeY];
                                              } in  : [sat_scAfx sat_scAfH];
                                          1# ->
                                              case ># [0# a#_scAeY] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_scAfJ [Occ=Once]
                                                        :: GHC.ByteOrder.ByteOrder
                                                      [LclId] =
                                                          [a#_scAeY] \u [] tagToEnum# [a#_scAeY];
                                                    } in  : [sat_scAfJ GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                    1# ->
                                        case <# [0# b#_scAf0] of {
                                          __DEFAULT ->
                                              let {
                                                sat_scAfV [Occ=Once] :: [GHC.ByteOrder.ByteOrder]
                                                [LclId] =
                                                    [a#_scAeY b#_scAf0] \u []
                                                        case
                                                            -# [b#_scAf0 a#_scAeY]
                                                        of
                                                        delta_scAfM [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [0# delta_scAfM]
                                                              of
                                                              y'_scAfN [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_up_scAfO [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.ByteOrder.ByteOrder]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_scAfM
                                                                                    y'_scAfN
                                                                                    go_up_scAfO] \r [x_scAfP]
                                                                              case
                                                                                  ># [x_scAfP
                                                                                      y'_scAfN]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_scAfT [Occ=Once]
                                                                                        :: [GHC.ByteOrder.ByteOrder]
                                                                                      [LclId] =
                                                                                          [delta_scAfM
                                                                                           go_up_scAfO
                                                                                           x_scAfP] \u []
                                                                                              case
                                                                                                  +# [x_scAfP
                                                                                                      delta_scAfM]
                                                                                              of
                                                                                              sat_scAfS
                                                                                              { __DEFAULT ->
                                                                                                    go_up_scAfO
                                                                                                        sat_scAfS;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_scAfR [Occ=Once]
                                                                                        :: GHC.ByteOrder.ByteOrder
                                                                                      [LclId] =
                                                                                          [x_scAfP] \u []
                                                                                              tagToEnum# [x_scAfP];
                                                                                    } in 
                                                                                      : [sat_scAfR
                                                                                         sat_scAfT];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_scAfU [Occ=Once]
                                                                                        :: GHC.ByteOrder.ByteOrder
                                                                                      [LclId] =
                                                                                          [x_scAfP] \u []
                                                                                              tagToEnum# [x_scAfP];
                                                                                    } in 
                                                                                      : [sat_scAfU
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_up_scAfO b#_scAf0;
                                                              };
                                                        }; } in
                                              let {
                                                sat_scAfL [Occ=Once] :: GHC.ByteOrder.ByteOrder
                                                [LclId] =
                                                    [a#_scAeY] \u [] tagToEnum# [a#_scAeY];
                                              } in  : [sat_scAfL sat_scAfV];
                                          1# ->
                                              case <# [0# a#_scAeY] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_scAfX [Occ=Once]
                                                        :: GHC.ByteOrder.ByteOrder
                                                      [LclId] =
                                                          [a#_scAeY] \u [] tagToEnum# [a#_scAeY];
                                                    } in  : [sat_scAfX GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                  };
                            };
                  } in 
                    case b_scAeW of {
                      GHC.ByteOrder.BigEndian -> $j1_scAeZ 0#;
                      GHC.ByteOrder.LittleEndian -> $j1_scAeZ 1#;
                    };
        } in 
          case a_scAeV of {
            GHC.ByteOrder.BigEndian -> $j_scAeX 0#;
            GHC.ByteOrder.LittleEndian -> $j_scAeX 1#;
          };

GHC.ByteOrder.$fEnumByteOrder_go1 [Occ=LoopBreaker]
  :: GHC.Prim.Int# -> [GHC.ByteOrder.ByteOrder]
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [x_scAg0]
        let {
          sat_scAg6 [Occ=Once] :: [GHC.ByteOrder.ByteOrder]
          [LclId] =
              [x_scAg0] \u []
                  case x_scAg0 of wild_scAg4 {
                    __DEFAULT ->
                        case +# [wild_scAg4 1#] of sat_scAg5 {
                          __DEFAULT -> GHC.ByteOrder.$fEnumByteOrder_go1 sat_scAg5;
                        };
                    0# -> [] [];
                  }; } in
        let {
          sat_scAg3 [Occ=Once] :: GHC.ByteOrder.ByteOrder
          [LclId] =
              [x_scAg0] \u []
                  case >=# [x_scAg0 0#] of {
                    __DEFAULT -> GHC.ByteOrder.$wlvl x_scAg0;
                    1# ->
                        case <=# [x_scAg0 1#] of {
                          __DEFAULT -> GHC.ByteOrder.$wlvl x_scAg0;
                          1# -> tagToEnum# [x_scAg0];
                        };
                  };
        } in  : [sat_scAg3 sat_scAg6];

GHC.ByteOrder.$fEnumByteOrder_go [Occ=LoopBreaker]
  :: GHC.Prim.Int# -> [GHC.ByteOrder.ByteOrder]
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [x_scAg7]
        let {
          sat_scAgd [Occ=Once] :: [GHC.ByteOrder.ByteOrder]
          [LclId] =
              [x_scAg7] \u []
                  case x_scAg7 of wild_scAgb {
                    __DEFAULT ->
                        case +# [wild_scAgb 1#] of sat_scAgc {
                          __DEFAULT -> GHC.ByteOrder.$fEnumByteOrder_go sat_scAgc;
                        };
                    1# -> [] [];
                  }; } in
        let {
          sat_scAga [Occ=Once] :: GHC.ByteOrder.ByteOrder
          [LclId] =
              [x_scAg7] \u []
                  case >=# [x_scAg7 0#] of {
                    __DEFAULT -> GHC.ByteOrder.$wlvl x_scAg7;
                    1# ->
                        case <=# [x_scAg7 1#] of {
                          __DEFAULT -> GHC.ByteOrder.$wlvl x_scAg7;
                          1# -> tagToEnum# [x_scAg7];
                        };
                  };
        } in  : [sat_scAga sat_scAgd];

GHC.ByteOrder.$fEnumByteOrder_$cenumFromTo
  :: GHC.ByteOrder.ByteOrder
     -> GHC.ByteOrder.ByteOrder -> [GHC.ByteOrder.ByteOrder]
[GblId, Arity=2, Str=<S,1*U><S,1*U>, Unf=OtherCon []] =
    [] \r [x_scAge y_scAgf]
        let-no-escape {
          $j_scAgg [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
            :: GHC.Prim.Int# -> [GHC.ByteOrder.ByteOrder]
          [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
              sat-only [y_scAgf] \r [x1_scAgh]
                  case y_scAgf of {
                    GHC.ByteOrder.BigEndian ->
                        case ># [x1_scAgh 0#] of {
                          __DEFAULT -> GHC.ByteOrder.$fEnumByteOrder_go1 x1_scAgh;
                          1# -> [] [];
                        };
                    GHC.ByteOrder.LittleEndian ->
                        case ># [x1_scAgh 1#] of {
                          __DEFAULT -> GHC.ByteOrder.$fEnumByteOrder_go x1_scAgh;
                          1# -> [] [];
                        };
                  };
        } in 
          case x_scAge of {
            GHC.ByteOrder.BigEndian -> $j_scAgg 0#;
            GHC.ByteOrder.LittleEndian -> $j_scAgg 1#;
          };

GHC.ByteOrder.$fEnumByteOrder_$cenumFromThenTo
  :: GHC.ByteOrder.ByteOrder
     -> GHC.ByteOrder.ByteOrder
     -> GHC.ByteOrder.ByteOrder
     -> [GHC.ByteOrder.ByteOrder]
[GblId, Arity=3, Str=<S,1*U><S,1*U><S,1*U>, Unf=OtherCon []] =
    [] \r [x1_scAgm x2_scAgn y_scAgo]
        let-no-escape {
          $j_scAgp [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
            :: GHC.Prim.Int# -> [GHC.ByteOrder.ByteOrder]
          [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
              sat-only [x2_scAgn y_scAgo] \r [x4_scAgq]
                  let-no-escape {
                    $j1_scAgr [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
                      :: GHC.Prim.Int# -> [GHC.ByteOrder.ByteOrder]
                    [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
                        sat-only [y_scAgo x4_scAgq] \r [x5_scAgs]
                            case y_scAgo of {
                              GHC.ByteOrder.BigEndian ->
                                  case >=# [x5_scAgs x4_scAgq] of {
                                    __DEFAULT ->
                                        case ># [0# x5_scAgs] of {
                                          __DEFAULT ->
                                              let {
                                                sat_scAgM [Occ=Once] :: [GHC.ByteOrder.ByteOrder]
                                                [LclId] =
                                                    [x4_scAgq x5_scAgs] \u []
                                                        case
                                                            -# [x5_scAgs x4_scAgq]
                                                        of
                                                        delta_scAgz [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [0# delta_scAgz]
                                                              of
                                                              y'_scAgA [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_dn_scAgB [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.ByteOrder.ByteOrder]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_scAgz
                                                                                    y'_scAgA
                                                                                    go_dn_scAgB] \r [x_scAgC]
                                                                              case
                                                                                  <# [x_scAgC
                                                                                      y'_scAgA]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_scAgI [Occ=Once]
                                                                                        :: [GHC.ByteOrder.ByteOrder]
                                                                                      [LclId] =
                                                                                          [delta_scAgz
                                                                                           go_dn_scAgB
                                                                                           x_scAgC] \u []
                                                                                              case
                                                                                                  +# [x_scAgC
                                                                                                      delta_scAgz]
                                                                                              of
                                                                                              sat_scAgH
                                                                                              { __DEFAULT ->
                                                                                                    go_dn_scAgB
                                                                                                        sat_scAgH;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_scAgG [Occ=Once]
                                                                                        :: GHC.ByteOrder.ByteOrder
                                                                                      [LclId] =
                                                                                          [x_scAgC] \u []
                                                                                              case
                                                                                                  >=# [x_scAgC
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.ByteOrder.$wlvl
                                                                                                        x_scAgC;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_scAgC
                                                                                                             1#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.ByteOrder.$wlvl
                                                                                                              x_scAgC;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_scAgC];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_scAgG
                                                                                         sat_scAgI];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_scAgL [Occ=Once]
                                                                                        :: GHC.ByteOrder.ByteOrder
                                                                                      [LclId] =
                                                                                          [x_scAgC] \u []
                                                                                              case
                                                                                                  >=# [x_scAgC
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.ByteOrder.$wlvl
                                                                                                        x_scAgC;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_scAgC
                                                                                                             1#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.ByteOrder.$wlvl
                                                                                                              x_scAgC;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_scAgC];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_scAgL
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_dn_scAgB x5_scAgs;
                                                              };
                                                        }; } in
                                              let {
                                                sat_scAgy [Occ=Once] :: GHC.ByteOrder.ByteOrder
                                                [LclId] =
                                                    [x4_scAgq] \u []
                                                        case >=# [x4_scAgq 0#] of {
                                                          __DEFAULT -> GHC.ByteOrder.$wlvl x4_scAgq;
                                                          1# ->
                                                              case <=# [x4_scAgq 1#] of {
                                                                __DEFAULT ->
                                                                    GHC.ByteOrder.$wlvl x4_scAgq;
                                                                1# -> tagToEnum# [x4_scAgq];
                                                              };
                                                        };
                                              } in  : [sat_scAgy sat_scAgM];
                                          1# ->
                                              case ># [0# x4_scAgq] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_scAgQ [Occ=Once]
                                                        :: GHC.ByteOrder.ByteOrder
                                                      [LclId] =
                                                          [x4_scAgq] \u []
                                                              case >=# [x4_scAgq 0#] of {
                                                                __DEFAULT ->
                                                                    GHC.ByteOrder.$wlvl x4_scAgq;
                                                                1# ->
                                                                    case <=# [x4_scAgq 1#] of {
                                                                      __DEFAULT ->
                                                                          GHC.ByteOrder.$wlvl
                                                                              x4_scAgq;
                                                                      1# -> tagToEnum# [x4_scAgq];
                                                                    };
                                                              };
                                                    } in  : [sat_scAgQ GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                    1# ->
                                        case <# [0# x5_scAgs] of {
                                          __DEFAULT ->
                                              let {
                                                sat_scAh8 [Occ=Once] :: [GHC.ByteOrder.ByteOrder]
                                                [LclId] =
                                                    [x4_scAgq x5_scAgs] \u []
                                                        case
                                                            -# [x5_scAgs x4_scAgq]
                                                        of
                                                        delta_scAgV [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [0# delta_scAgV]
                                                              of
                                                              y'_scAgW [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_up_scAgX [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.ByteOrder.ByteOrder]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_scAgV
                                                                                    y'_scAgW
                                                                                    go_up_scAgX] \r [x_scAgY]
                                                                              case
                                                                                  ># [x_scAgY
                                                                                      y'_scAgW]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_scAh4 [Occ=Once]
                                                                                        :: [GHC.ByteOrder.ByteOrder]
                                                                                      [LclId] =
                                                                                          [delta_scAgV
                                                                                           go_up_scAgX
                                                                                           x_scAgY] \u []
                                                                                              case
                                                                                                  +# [x_scAgY
                                                                                                      delta_scAgV]
                                                                                              of
                                                                                              sat_scAh3
                                                                                              { __DEFAULT ->
                                                                                                    go_up_scAgX
                                                                                                        sat_scAh3;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_scAh2 [Occ=Once]
                                                                                        :: GHC.ByteOrder.ByteOrder
                                                                                      [LclId] =
                                                                                          [x_scAgY] \u []
                                                                                              case
                                                                                                  >=# [x_scAgY
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.ByteOrder.$wlvl
                                                                                                        x_scAgY;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_scAgY
                                                                                                             1#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.ByteOrder.$wlvl
                                                                                                              x_scAgY;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_scAgY];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_scAh2
                                                                                         sat_scAh4];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_scAh7 [Occ=Once]
                                                                                        :: GHC.ByteOrder.ByteOrder
                                                                                      [LclId] =
                                                                                          [x_scAgY] \u []
                                                                                              case
                                                                                                  >=# [x_scAgY
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.ByteOrder.$wlvl
                                                                                                        x_scAgY;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_scAgY
                                                                                                             1#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.ByteOrder.$wlvl
                                                                                                              x_scAgY;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_scAgY];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_scAh7
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_up_scAgX x5_scAgs;
                                                              };
                                                        }; } in
                                              let {
                                                sat_scAgU [Occ=Once] :: GHC.ByteOrder.ByteOrder
                                                [LclId] =
                                                    [x4_scAgq] \u []
                                                        case >=# [x4_scAgq 0#] of {
                                                          __DEFAULT -> GHC.ByteOrder.$wlvl x4_scAgq;
                                                          1# ->
                                                              case <=# [x4_scAgq 1#] of {
                                                                __DEFAULT ->
                                                                    GHC.ByteOrder.$wlvl x4_scAgq;
                                                                1# -> tagToEnum# [x4_scAgq];
                                                              };
                                                        };
                                              } in  : [sat_scAgU sat_scAh8];
                                          1# ->
                                              case <# [0# x4_scAgq] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_scAhc [Occ=Once]
                                                        :: GHC.ByteOrder.ByteOrder
                                                      [LclId] =
                                                          [x4_scAgq] \u []
                                                              case >=# [x4_scAgq 0#] of {
                                                                __DEFAULT ->
                                                                    GHC.ByteOrder.$wlvl x4_scAgq;
                                                                1# ->
                                                                    case <=# [x4_scAgq 1#] of {
                                                                      __DEFAULT ->
                                                                          GHC.ByteOrder.$wlvl
                                                                              x4_scAgq;
                                                                      1# -> tagToEnum# [x4_scAgq];
                                                                    };
                                                              };
                                                    } in  : [sat_scAhc GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                  };
                              GHC.ByteOrder.LittleEndian ->
                                  case >=# [x5_scAgs x4_scAgq] of {
                                    __DEFAULT ->
                                        case ># [1# x5_scAgs] of {
                                          __DEFAULT ->
                                              let {
                                                sat_scAhv [Occ=Once] :: [GHC.ByteOrder.ByteOrder]
                                                [LclId] =
                                                    [x4_scAgq x5_scAgs] \u []
                                                        case
                                                            -# [x5_scAgs x4_scAgq]
                                                        of
                                                        delta_scAhi [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [1# delta_scAhi]
                                                              of
                                                              y'_scAhj [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_dn_scAhk [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.ByteOrder.ByteOrder]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_scAhi
                                                                                    y'_scAhj
                                                                                    go_dn_scAhk] \r [x_scAhl]
                                                                              case
                                                                                  <# [x_scAhl
                                                                                      y'_scAhj]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_scAhr [Occ=Once]
                                                                                        :: [GHC.ByteOrder.ByteOrder]
                                                                                      [LclId] =
                                                                                          [delta_scAhi
                                                                                           go_dn_scAhk
                                                                                           x_scAhl] \u []
                                                                                              case
                                                                                                  +# [x_scAhl
                                                                                                      delta_scAhi]
                                                                                              of
                                                                                              sat_scAhq
                                                                                              { __DEFAULT ->
                                                                                                    go_dn_scAhk
                                                                                                        sat_scAhq;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_scAhp [Occ=Once]
                                                                                        :: GHC.ByteOrder.ByteOrder
                                                                                      [LclId] =
                                                                                          [x_scAhl] \u []
                                                                                              case
                                                                                                  >=# [x_scAhl
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.ByteOrder.$wlvl
                                                                                                        x_scAhl;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_scAhl
                                                                                                             1#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.ByteOrder.$wlvl
                                                                                                              x_scAhl;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_scAhl];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_scAhp
                                                                                         sat_scAhr];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_scAhu [Occ=Once]
                                                                                        :: GHC.ByteOrder.ByteOrder
                                                                                      [LclId] =
                                                                                          [x_scAhl] \u []
                                                                                              case
                                                                                                  >=# [x_scAhl
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.ByteOrder.$wlvl
                                                                                                        x_scAhl;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_scAhl
                                                                                                             1#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.ByteOrder.$wlvl
                                                                                                              x_scAhl;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_scAhl];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_scAhu
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_dn_scAhk x5_scAgs;
                                                              };
                                                        }; } in
                                              let {
                                                sat_scAhh [Occ=Once] :: GHC.ByteOrder.ByteOrder
                                                [LclId] =
                                                    [x4_scAgq] \u []
                                                        case >=# [x4_scAgq 0#] of {
                                                          __DEFAULT -> GHC.ByteOrder.$wlvl x4_scAgq;
                                                          1# ->
                                                              case <=# [x4_scAgq 1#] of {
                                                                __DEFAULT ->
                                                                    GHC.ByteOrder.$wlvl x4_scAgq;
                                                                1# -> tagToEnum# [x4_scAgq];
                                                              };
                                                        };
                                              } in  : [sat_scAhh sat_scAhv];
                                          1# ->
                                              case ># [1# x4_scAgq] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_scAhz [Occ=Once]
                                                        :: GHC.ByteOrder.ByteOrder
                                                      [LclId] =
                                                          [x4_scAgq] \u []
                                                              case >=# [x4_scAgq 0#] of {
                                                                __DEFAULT ->
                                                                    GHC.ByteOrder.$wlvl x4_scAgq;
                                                                1# ->
                                                                    case <=# [x4_scAgq 1#] of {
                                                                      __DEFAULT ->
                                                                          GHC.ByteOrder.$wlvl
                                                                              x4_scAgq;
                                                                      1# -> tagToEnum# [x4_scAgq];
                                                                    };
                                                              };
                                                    } in  : [sat_scAhz GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                    1# ->
                                        case <# [1# x5_scAgs] of {
                                          __DEFAULT ->
                                              let {
                                                sat_scAhR [Occ=Once] :: [GHC.ByteOrder.ByteOrder]
                                                [LclId] =
                                                    [x4_scAgq x5_scAgs] \u []
                                                        case
                                                            -# [x5_scAgs x4_scAgq]
                                                        of
                                                        delta_scAhE [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [1# delta_scAhE]
                                                              of
                                                              y'_scAhF [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_up_scAhG [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.ByteOrder.ByteOrder]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_scAhE
                                                                                    y'_scAhF
                                                                                    go_up_scAhG] \r [x_scAhH]
                                                                              case
                                                                                  ># [x_scAhH
                                                                                      y'_scAhF]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_scAhN [Occ=Once]
                                                                                        :: [GHC.ByteOrder.ByteOrder]
                                                                                      [LclId] =
                                                                                          [delta_scAhE
                                                                                           go_up_scAhG
                                                                                           x_scAhH] \u []
                                                                                              case
                                                                                                  +# [x_scAhH
                                                                                                      delta_scAhE]
                                                                                              of
                                                                                              sat_scAhM
                                                                                              { __DEFAULT ->
                                                                                                    go_up_scAhG
                                                                                                        sat_scAhM;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_scAhL [Occ=Once]
                                                                                        :: GHC.ByteOrder.ByteOrder
                                                                                      [LclId] =
                                                                                          [x_scAhH] \u []
                                                                                              case
                                                                                                  >=# [x_scAhH
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.ByteOrder.$wlvl
                                                                                                        x_scAhH;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_scAhH
                                                                                                             1#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.ByteOrder.$wlvl
                                                                                                              x_scAhH;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_scAhH];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_scAhL
                                                                                         sat_scAhN];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_scAhQ [Occ=Once]
                                                                                        :: GHC.ByteOrder.ByteOrder
                                                                                      [LclId] =
                                                                                          [x_scAhH] \u []
                                                                                              case
                                                                                                  >=# [x_scAhH
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.ByteOrder.$wlvl
                                                                                                        x_scAhH;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_scAhH
                                                                                                             1#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.ByteOrder.$wlvl
                                                                                                              x_scAhH;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_scAhH];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_scAhQ
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_up_scAhG x5_scAgs;
                                                              };
                                                        }; } in
                                              let {
                                                sat_scAhD [Occ=Once] :: GHC.ByteOrder.ByteOrder
                                                [LclId] =
                                                    [x4_scAgq] \u []
                                                        case >=# [x4_scAgq 0#] of {
                                                          __DEFAULT -> GHC.ByteOrder.$wlvl x4_scAgq;
                                                          1# ->
                                                              case <=# [x4_scAgq 1#] of {
                                                                __DEFAULT ->
                                                                    GHC.ByteOrder.$wlvl x4_scAgq;
                                                                1# -> tagToEnum# [x4_scAgq];
                                                              };
                                                        };
                                              } in  : [sat_scAhD sat_scAhR];
                                          1# ->
                                              case <# [1# x4_scAgq] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_scAhV [Occ=Once]
                                                        :: GHC.ByteOrder.ByteOrder
                                                      [LclId] =
                                                          [x4_scAgq] \u []
                                                              case >=# [x4_scAgq 0#] of {
                                                                __DEFAULT ->
                                                                    GHC.ByteOrder.$wlvl x4_scAgq;
                                                                1# ->
                                                                    case <=# [x4_scAgq 1#] of {
                                                                      __DEFAULT ->
                                                                          GHC.ByteOrder.$wlvl
                                                                              x4_scAgq;
                                                                      1# -> tagToEnum# [x4_scAgq];
                                                                    };
                                                              };
                                                    } in  : [sat_scAhV GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                  };
                            };
                  } in 
                    case x2_scAgn of {
                      GHC.ByteOrder.BigEndian -> $j1_scAgr 0#;
                      GHC.ByteOrder.LittleEndian -> $j1_scAgr 1#;
                    };
        } in 
          case x1_scAgm of {
            GHC.ByteOrder.BigEndian -> $j_scAgp 0#;
            GHC.ByteOrder.LittleEndian -> $j_scAgp 1#;
          };

GHC.ByteOrder.$fEnumByteOrder [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Enum GHC.ByteOrder.ByteOrder
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Enum! [GHC.ByteOrder.$fEnumByteOrder_$csucc
                                    GHC.ByteOrder.$fEnumByteOrder_$cpred
                                    GHC.ByteOrder.$fEnumByteOrder_$ctoEnum
                                    GHC.ByteOrder.$fEnumByteOrder_$cfromEnum
                                    GHC.ByteOrder.$fEnumByteOrder_$cenumFrom
                                    GHC.ByteOrder.$fEnumByteOrder_$cenumFromThen
                                    GHC.ByteOrder.$fEnumByteOrder_$cenumFromTo
                                    GHC.ByteOrder.$fEnumByteOrder_$cenumFromThenTo];

GHC.ByteOrder.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ByteOrder.$trModule4];

GHC.ByteOrder.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ByteOrder.$trModule2];

GHC.ByteOrder.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.ByteOrder.$trModule3
                                     GHC.ByteOrder.$trModule1];

GHC.ByteOrder.$tcByteOrder2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ByteOrder"#;

GHC.ByteOrder.$tcByteOrder1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ByteOrder.$tcByteOrder2];

GHC.ByteOrder.$tcByteOrder :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [16811050684449662084##
                                    17273005335247024091##
                                    GHC.ByteOrder.$trModule
                                    GHC.ByteOrder.$tcByteOrder1
                                    0#
                                    GHC.Types.krep$*];

GHC.ByteOrder.$tc'BigEndian1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.ByteOrder.$tcByteOrder
                                              GHC.Types.[]];

GHC.ByteOrder.$tc'BigEndian3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'BigEndian"#;

GHC.ByteOrder.$tc'BigEndian2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ByteOrder.$tc'BigEndian3];

GHC.ByteOrder.$tc'BigEndian :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2645192688778293591##
                                    7455668807059762078##
                                    GHC.ByteOrder.$trModule
                                    GHC.ByteOrder.$tc'BigEndian2
                                    0#
                                    GHC.ByteOrder.$tc'BigEndian1];

GHC.ByteOrder.$tc'LittleEndian2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'LittleEndian"#;

GHC.ByteOrder.$tc'LittleEndian1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.ByteOrder.$tc'LittleEndian2];

GHC.ByteOrder.$tc'LittleEndian :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [8702700204875460152##
                                    10337679016369298147##
                                    GHC.ByteOrder.$trModule
                                    GHC.ByteOrder.$tc'LittleEndian1
                                    0#
                                    GHC.ByteOrder.$tc'BigEndian1];

GHC.ByteOrder.BigEndian :: GHC.ByteOrder.ByteOrder
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.ByteOrder.BigEndian! [];

GHC.ByteOrder.LittleEndian :: GHC.ByteOrder.ByteOrder
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.ByteOrder.LittleEndian! [];

