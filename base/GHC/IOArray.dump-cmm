
==================== Output Cmm ====================
2018-03-16 16:03:07.963141298 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:03:07.964218771 UTC

[section ""data" . GHC.IOArray.$fEqIOArray_$c/=_closure" {
     GHC.IOArray.$fEqIOArray_$c/=_closure:
         const GHC.IOArray.$fEqIOArray_$c/=_info;
 },
 GHC.IOArray.$fEqIOArray_$c/=_entry() //  [R2, R3]
         { info_tbl: [(c80xS,
                       label: GHC.IOArray.$fEqIOArray_$c/=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80xS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c80xW; else goto c80xX;
       c80xW: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IOArray.$fEqIOArray_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c80xX: // global
           I64[Sp - 16] = block_c80xP_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u80yk; else goto c80xQ;
       u80yk: // global
           call _c80xP(R1) args: 0, res: 0, upd: 0;
       c80xQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c80xP() //  [R1]
         { info_tbl: [(c80xP,
                       label: block_c80xP_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80xP: // global
           I64[Sp] = block_c80xV_info;
           _s80xa::P64 = P64[R1 + 23];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s80xa::P64;
           if (R1 & 7 != 0) goto u80yj; else goto c80xZ;
       u80yj: // global
           call _c80xV(R1) args: 0, res: 0, upd: 0;
       c80xZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c80xV() //  [R1]
         { info_tbl: [(c80xV,
                       label: block_c80xV_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80xV: // global
           if (P64[Sp + 8] == P64[R1 + 23]) goto c80yf; else goto c80y9;
       c80yf: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c80y9: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:07.965617872 UTC

[section ""data" . GHC.IOArray.$fEqIOArray_closure" {
     GHC.IOArray.$fEqIOArray_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Arr.$fEqSTArray_$c==_closure+2;
         const GHC.IOArray.$fEqIOArray_$c/=_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:07.966920449 UTC

[section ""data" . $wnewIOArray_r80wT_closure" {
     $wnewIOArray_r80wT_closure:
         const $wnewIOArray_r80wT_info;
         const 0;
 },
 sat_s80xv_entry() //  [R1]
         { info_tbl: [(c80yI,
                       label: sat_s80xv_info
                       rep:HeapRep 3 ptrs 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80yI: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c80yJ; else goto c80yK;
       c80yJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c80yK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_c80yD_info;
           _s80xj::P64 = P64[R1 + 24];
           _s80xs::P64 = P64[R1 + 32];
           _s80xo::I64 = I64[R1 + 40];
           R1 = P64[R1 + 16];
           P64[Sp - 40] = _s80xj::P64;
           I64[Sp - 32] = _s80xo::I64;
           P64[Sp - 24] = _s80xs::P64;
           Sp = Sp - 48;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c80yD() //  [R1]
         { info_tbl: [(c80yD,
                       label: block_c80yD_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80yD: // global
           I64[Sp] = block_c80yF_info;
           _s80xt::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s80xt::P64;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c80yF() //  [R1]
         { info_tbl: [(c80yF,
                       label: block_c80yF_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80yF: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c80yO; else goto c80yN;
       c80yO: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c80yN: // global
           I64[Hp - 32] = GHC.Arr.STArray_con_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = R1;
           P64[Hp - 8] = P64[Sp + 24];
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 31;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 $wnewIOArray_r80wT_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c80yP,
                       label: $wnewIOArray_r80wT_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80yP: // global
           _s80xk::P64 = R5;
           _s80xj::P64 = R4;
           _s80xi::P64 = R3;
           _s80xh::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto c80yQ; else goto c80yR;
       c80yR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c80yT; else goto c80yS;
       c80yT: // global
           HpAlloc = 24;
           goto c80yQ;
       c80yQ: // global
           R5 = _s80xk::P64;
           R4 = _s80xj::P64;
           R3 = _s80xi::P64;
           R2 = _s80xh::P64;
           R1 = $wnewIOArray_r80wT_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c80yS: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s80xi::P64;
           P64[Hp] = _s80xj::P64;
           I64[Sp - 32] = block_c80yq_info;
           R2 = _s80xh::P64;
           I64[Sp - 48] = stg_ap_p_info;
           P64[Sp - 40] = Hp - 15;
           P64[Sp - 24] = _s80xi::P64;
           P64[Sp - 16] = _s80xj::P64;
           P64[Sp - 8] = _s80xk::P64;
           Sp = Sp - 48;
           call GHC.Arr.rangeSize_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 _c80yq() //  [R1]
         { info_tbl: [(c80yq,
                       label: block_c80yq_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80yq: // global
           _s80xo::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s80xo::I64, 0)) goto c80yW; else goto c80z0;
       c80yW: // global
           I64[Sp] = block_c80yx_info;
           R2 = P64[Sp + 24];
           R1 = _s80xo::I64;
           I64[Sp + 24] = _s80xo::I64;
           call stg_newArray#(R2, R1) args: 8, res: 8, upd: 8;
       c80z0: // global
           R1 = GHC.Arr.negRange_closure;
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c80yx() //  [R1]
         { info_tbl: [(c80yx,
                       label: block_c80yx_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80yx: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c80yZ; else goto c80yY;
       c80yZ: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c80yY: // global
           I64[Hp - 40] = sat_s80xv_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = R1;
           I64[Hp] = I64[Sp + 24];
           R1 = Hp - 40;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:07.969369458 UTC

[section ""data" . newIOArray1_r80wU_closure" {
     newIOArray1_r80wU_closure:
         const newIOArray1_r80wU_info;
         const 0;
 },
 newIOArray1_r80wU_entry() //  [R2, R3, R4]
         { info_tbl: [(c80z9,
                       label: newIOArray1_r80wU_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80z9: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c80za; else goto c80zb;
       c80za: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = newIOArray1_r80wU_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c80zb: // global
           I64[Sp - 24] = block_c80z6_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u80zf; else goto c80z7;
       u80zf: // global
           call _c80z6(R1) args: 0, res: 0, upd: 0;
       c80z7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c80z6() //  [R1]
         { info_tbl: [(c80z6,
                       label: block_c80z6_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80z6: // global
           R5 = P64[Sp + 16];
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call $wnewIOArray_r80wT_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:07.970524361 UTC

[section ""data" . GHC.IOArray.newIOArray_closure" {
     GHC.IOArray.newIOArray_closure:
         const GHC.IOArray.newIOArray_info;
         const 0;
 },
 GHC.IOArray.newIOArray_entry() //  [R2, R3, R4]
         { info_tbl: [(c80zk,
                       label: GHC.IOArray.newIOArray_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80zk: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call newIOArray1_r80wU_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:07.97141811 UTC

[section ""data" . GHC.IOArray.unsafeReadIOArray_closure" {
     GHC.IOArray.unsafeReadIOArray_closure:
         const GHC.IOArray.unsafeReadIOArray_info;
 },
 GHC.IOArray.unsafeReadIOArray_entry() //  [R2, R3]
         { info_tbl: [(c80zr,
                       label: GHC.IOArray.unsafeReadIOArray_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80zr: // global
           R3 = R3;
           R2 = R2;
           call GHC.Arr.unsafeReadSTArray_entry(R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:07.97218034 UTC

[section ""data" . GHC.IOArray.unsafeWriteIOArray_closure" {
     GHC.IOArray.unsafeWriteIOArray_closure:
         const GHC.IOArray.unsafeWriteIOArray_info;
 },
 GHC.IOArray.unsafeWriteIOArray_entry() //  [R2, R3, R4]
         { info_tbl: [(c80zy,
                       label: GHC.IOArray.unsafeWriteIOArray_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80zy: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Arr.unsafeWriteSTArray_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:07.973024406 UTC

[section ""data" . GHC.IOArray.readIOArray1_closure" {
     GHC.IOArray.readIOArray1_closure:
         const GHC.IOArray.readIOArray1_info;
         const 0;
 },
 GHC.IOArray.readIOArray1_entry() //  [R2, R3, R4]
         { info_tbl: [(c80zF,
                       label: GHC.IOArray.readIOArray1_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80zF: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Arr.readSTArray_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:07.973900839 UTC

[section ""data" . GHC.IOArray.readIOArray_closure" {
     GHC.IOArray.readIOArray_closure:
         const GHC.IOArray.readIOArray_info;
         const 0;
 },
 GHC.IOArray.readIOArray_entry() //  [R2, R3, R4]
         { info_tbl: [(c80zM,
                       label: GHC.IOArray.readIOArray_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80zM: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.IOArray.readIOArray1_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:07.974763311 UTC

[section ""data" . GHC.IOArray.writeIOArray1_closure" {
     GHC.IOArray.writeIOArray1_closure:
         const GHC.IOArray.writeIOArray1_info;
         const 0;
 },
 GHC.IOArray.writeIOArray1_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c80zT,
                       label: GHC.IOArray.writeIOArray1_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80zT: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Arr.writeSTArray_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:07.975608279 UTC

[section ""data" . GHC.IOArray.writeIOArray_closure" {
     GHC.IOArray.writeIOArray_closure:
         const GHC.IOArray.writeIOArray_info;
         const 0;
 },
 GHC.IOArray.writeIOArray_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c80A0,
                       label: GHC.IOArray.writeIOArray_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80A0: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.IOArray.writeIOArray1_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:07.9764355 UTC

[section ""data" . GHC.IOArray.boundsIOArray_closure" {
     GHC.IOArray.boundsIOArray_closure:
         const GHC.IOArray.boundsIOArray_info;
 },
 GHC.IOArray.boundsIOArray_entry() //  [R2]
         { info_tbl: [(c80A7,
                       label: GHC.IOArray.boundsIOArray_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80A7: // global
           R2 = R2;
           call GHC.Arr.boundsSTArray_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:07.977080664 UTC

[section ""cstring" . GHC.IOArray.$trModule4_bytes" {
     GHC.IOArray.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:07.977744971 UTC

[section ""data" . GHC.IOArray.$trModule3_closure" {
     GHC.IOArray.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IOArray.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:07.978263791 UTC

[section ""cstring" . GHC.IOArray.$trModule2_bytes" {
     GHC.IOArray.$trModule2_bytes:
         I8[] [71,72,67,46,73,79,65,114,114,97,121]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:07.978806724 UTC

[section ""data" . GHC.IOArray.$trModule1_closure" {
     GHC.IOArray.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IOArray.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:07.979318613 UTC

[section ""data" . GHC.IOArray.$trModule_closure" {
     GHC.IOArray.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.IOArray.$trModule3_closure+1;
         const GHC.IOArray.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:07.979902448 UTC

[section ""data" . $krep_r80wV_closure" {
     $krep_r80wV_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcRealWorld_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:07.980453896 UTC

[section ""data" . $krep1_r80wW_closure" {
     $krep1_r80wW_closure:
         const GHC.Types.KindRepVar_con_info;
         const 1;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:07.980990628 UTC

[section ""data" . $krep2_r80wX_closure" {
     $krep2_r80wX_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:07.981637194 UTC

[section ""data" . $krep3_r80wY_closure" {
     $krep3_r80wY_closure:
         const :_con_info;
         const $krep1_r80wW_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:07.98219601 UTC

[section ""data" . $krep4_r80wZ_closure" {
     $krep4_r80wZ_closure:
         const :_con_info;
         const $krep2_r80wX_closure+2;
         const $krep3_r80wY_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:07.982710457 UTC

[section ""data" . $krep5_r80x0_closure" {
     $krep5_r80x0_closure:
         const :_con_info;
         const $krep_r80wV_closure+1;
         const $krep4_r80wZ_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:07.983248068 UTC

[section ""data" . $krep6_r80x1_closure" {
     $krep6_r80x1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Arr.$tcSTArray_closure;
         const $krep5_r80x0_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:07.983805159 UTC

[section ""cstring" . GHC.IOArray.$tcIOArray2_bytes" {
     GHC.IOArray.$tcIOArray2_bytes:
         I8[] [73,79,65,114,114,97,121]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:07.98431965 UTC

[section ""data" . GHC.IOArray.$tcIOArray1_closure" {
     GHC.IOArray.$tcIOArray1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IOArray.$tcIOArray2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:07.984846122 UTC

[section ""data" . GHC.IOArray.$tcIOArray_closure" {
     GHC.IOArray.$tcIOArray_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IOArray.$trModule_closure+1;
         const GHC.IOArray.$tcIOArray1_closure+1;
         const GHC.Types.krep$*->*->*_closure;
         const 5233307069339228571;
         const 18318902734717728881;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:07.985465905 UTC

[section ""data" . $krep7_r80x2_closure" {
     $krep7_r80x2_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IOArray.$tcIOArray_closure+1;
         const $krep4_r80wZ_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:07.985987371 UTC

[section ""data" . GHC.IOArray.$tc'IOArray1_closure" {
     GHC.IOArray.$tc'IOArray1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_r80x1_closure+1;
         const $krep7_r80x2_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:07.986535052 UTC

[section ""cstring" . GHC.IOArray.$tc'IOArray3_bytes" {
     GHC.IOArray.$tc'IOArray3_bytes:
         I8[] [39,73,79,65,114,114,97,121]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:07.987022393 UTC

[section ""data" . GHC.IOArray.$tc'IOArray2_closure" {
     GHC.IOArray.$tc'IOArray2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IOArray.$tc'IOArray3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:07.987545637 UTC

[section ""data" . GHC.IOArray.$tc'IOArray_closure" {
     GHC.IOArray.$tc'IOArray_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IOArray.$trModule_closure+1;
         const GHC.IOArray.$tc'IOArray2_closure+1;
         const GHC.IOArray.$tc'IOArray1_closure+4;
         const 3384482173433764395;
         const 11270226801258228404;
         const 2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:07.988091957 UTC

[section ""relreadonly" . S80z1_srt" {
     S80z1_srt:
         const GHC.Arr.negRange_closure;
         const $wnewIOArray_r80wT_closure;
         const newIOArray1_r80wU_closure;
         const GHC.Arr.readSTArray_closure;
         const GHC.IOArray.readIOArray1_closure;
         const GHC.Arr.writeSTArray_closure;
         const GHC.IOArray.writeIOArray1_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:07.988662296 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:03:07.989652945 UTC

[section ""data" . GHC.IOArray.$fEqIOArray_$c/=_closure" {
     GHC.IOArray.$fEqIOArray_$c/=_closure:
         const GHC.IOArray.$fEqIOArray_$c/=_info;
 },
 GHC.IOArray.$fEqIOArray_$c/=_entry() //  [R2, R3]
         { info_tbl: [(c80Ah,
                       label: GHC.IOArray.$fEqIOArray_$c/=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80Ah: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c80Al; else goto c80Am;
       c80Al: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IOArray.$fEqIOArray_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c80Am: // global
           I64[Sp - 16] = block_c80Ae_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u80AJ; else goto c80Af;
       u80AJ: // global
           call _c80Ae(R1) args: 0, res: 0, upd: 0;
       c80Af: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c80Ae() //  [R1]
         { info_tbl: [(c80Ae,
                       label: block_c80Ae_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80Ae: // global
           I64[Sp] = block_c80Ak_info;
           _s80xa::P64 = P64[R1 + 23];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s80xa::P64;
           if (R1 & 7 != 0) goto u80AI; else goto c80Ao;
       u80AI: // global
           call _c80Ak(R1) args: 0, res: 0, upd: 0;
       c80Ao: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c80Ak() //  [R1]
         { info_tbl: [(c80Ak,
                       label: block_c80Ak_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80Ak: // global
           if (P64[Sp + 8] == P64[R1 + 23]) goto c80AE; else goto c80Ay;
       c80AE: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c80Ay: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:07.990958933 UTC

[section ""data" . GHC.IOArray.$fEqIOArray_closure" {
     GHC.IOArray.$fEqIOArray_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Arr.$fEqSTArray_$c==_closure+2;
         const GHC.IOArray.$fEqIOArray_$c/=_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:07.992342566 UTC

[section ""data" . $wnewIOArray_r80wT_closure" {
     $wnewIOArray_r80wT_closure:
         const $wnewIOArray_r80wT_info;
         const 0;
 },
 sat_s80xv_entry() //  [R1]
         { info_tbl: [(c80B7,
                       label: sat_s80xv_info
                       rep:HeapRep 3 ptrs 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80B7: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c80B8; else goto c80B9;
       c80B8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c80B9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_c80B2_info;
           _s80xj::P64 = P64[R1 + 24];
           _s80xs::P64 = P64[R1 + 32];
           _s80xo::I64 = I64[R1 + 40];
           R1 = P64[R1 + 16];
           P64[Sp - 40] = _s80xj::P64;
           I64[Sp - 32] = _s80xo::I64;
           P64[Sp - 24] = _s80xs::P64;
           Sp = Sp - 48;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c80B2() //  [R1]
         { info_tbl: [(c80B2,
                       label: block_c80B2_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80B2: // global
           I64[Sp] = block_c80B4_info;
           _s80xt::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s80xt::P64;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c80B4() //  [R1]
         { info_tbl: [(c80B4,
                       label: block_c80B4_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80B4: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c80Bd; else goto c80Bc;
       c80Bd: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c80Bc: // global
           I64[Hp - 32] = GHC.Arr.STArray_con_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = R1;
           P64[Hp - 8] = P64[Sp + 24];
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 31;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 $wnewIOArray_r80wT_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c80Be,
                       label: $wnewIOArray_r80wT_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80Be: // global
           _s80xk::P64 = R5;
           _s80xj::P64 = R4;
           _s80xi::P64 = R3;
           _s80xh::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto c80Bf; else goto c80Bg;
       c80Bg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c80Bi; else goto c80Bh;
       c80Bi: // global
           HpAlloc = 24;
           goto c80Bf;
       c80Bf: // global
           R5 = _s80xk::P64;
           R4 = _s80xj::P64;
           R3 = _s80xi::P64;
           R2 = _s80xh::P64;
           R1 = $wnewIOArray_r80wT_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c80Bh: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s80xi::P64;
           P64[Hp] = _s80xj::P64;
           I64[Sp - 32] = block_c80AP_info;
           R2 = _s80xh::P64;
           I64[Sp - 48] = stg_ap_p_info;
           P64[Sp - 40] = Hp - 15;
           P64[Sp - 24] = _s80xi::P64;
           P64[Sp - 16] = _s80xj::P64;
           P64[Sp - 8] = _s80xk::P64;
           Sp = Sp - 48;
           call GHC.Arr.rangeSize_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 _c80AP() //  [R1]
         { info_tbl: [(c80AP,
                       label: block_c80AP_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80AP: // global
           _s80xo::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s80xo::I64, 0)) goto c80Bl; else goto c80Bp;
       c80Bl: // global
           I64[Sp] = block_c80AW_info;
           R2 = P64[Sp + 24];
           R1 = _s80xo::I64;
           I64[Sp + 24] = _s80xo::I64;
           call stg_newArray#(R2, R1) args: 8, res: 8, upd: 8;
       c80Bp: // global
           R1 = GHC.Arr.negRange_closure;
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c80AW() //  [R1]
         { info_tbl: [(c80AW,
                       label: block_c80AW_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80AW: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c80Bo; else goto c80Bn;
       c80Bo: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c80Bn: // global
           I64[Hp - 40] = sat_s80xv_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = R1;
           I64[Hp] = I64[Sp + 24];
           R1 = Hp - 40;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:07.995235098 UTC

[section ""data" . newIOArray1_r80wU_closure" {
     newIOArray1_r80wU_closure:
         const newIOArray1_r80wU_info;
         const 0;
 },
 newIOArray1_r80wU_entry() //  [R2, R3, R4]
         { info_tbl: [(c80Bx,
                       label: newIOArray1_r80wU_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80Bx: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c80By; else goto c80Bz;
       c80By: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = newIOArray1_r80wU_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c80Bz: // global
           I64[Sp - 24] = block_c80Bu_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u80BD; else goto c80Bv;
       u80BD: // global
           call _c80Bu(R1) args: 0, res: 0, upd: 0;
       c80Bv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c80Bu() //  [R1]
         { info_tbl: [(c80Bu,
                       label: block_c80Bu_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80Bu: // global
           R5 = P64[Sp + 16];
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call $wnewIOArray_r80wT_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:07.996410794 UTC

[section ""data" . GHC.IOArray.newIOArray_closure" {
     GHC.IOArray.newIOArray_closure:
         const GHC.IOArray.newIOArray_info;
         const 0;
 },
 GHC.IOArray.newIOArray_entry() //  [R2, R3, R4]
         { info_tbl: [(c80BI,
                       label: GHC.IOArray.newIOArray_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80BI: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call newIOArray1_r80wU_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:07.998197209 UTC

[section ""data" . GHC.IOArray.unsafeReadIOArray_closure" {
     GHC.IOArray.unsafeReadIOArray_closure:
         const GHC.IOArray.unsafeReadIOArray_info;
 },
 GHC.IOArray.unsafeReadIOArray_entry() //  [R2, R3]
         { info_tbl: [(c80BP,
                       label: GHC.IOArray.unsafeReadIOArray_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80BP: // global
           R3 = R3;
           R2 = R2;
           call GHC.Arr.unsafeReadSTArray_entry(R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:07.999064458 UTC

[section ""data" . GHC.IOArray.unsafeWriteIOArray_closure" {
     GHC.IOArray.unsafeWriteIOArray_closure:
         const GHC.IOArray.unsafeWriteIOArray_info;
 },
 GHC.IOArray.unsafeWriteIOArray_entry() //  [R2, R3, R4]
         { info_tbl: [(c80BW,
                       label: GHC.IOArray.unsafeWriteIOArray_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80BW: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Arr.unsafeWriteSTArray_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:07.999873475 UTC

[section ""data" . GHC.IOArray.readIOArray1_closure" {
     GHC.IOArray.readIOArray1_closure:
         const GHC.IOArray.readIOArray1_info;
         const 0;
 },
 GHC.IOArray.readIOArray1_entry() //  [R2, R3, R4]
         { info_tbl: [(c80C3,
                       label: GHC.IOArray.readIOArray1_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80C3: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Arr.readSTArray_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.000652962 UTC

[section ""data" . GHC.IOArray.readIOArray_closure" {
     GHC.IOArray.readIOArray_closure:
         const GHC.IOArray.readIOArray_info;
         const 0;
 },
 GHC.IOArray.readIOArray_entry() //  [R2, R3, R4]
         { info_tbl: [(c80Ca,
                       label: GHC.IOArray.readIOArray_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80Ca: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.IOArray.readIOArray1_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.001478808 UTC

[section ""data" . GHC.IOArray.writeIOArray1_closure" {
     GHC.IOArray.writeIOArray1_closure:
         const GHC.IOArray.writeIOArray1_info;
         const 0;
 },
 GHC.IOArray.writeIOArray1_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c80Ch,
                       label: GHC.IOArray.writeIOArray1_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80Ch: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Arr.writeSTArray_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.002284681 UTC

[section ""data" . GHC.IOArray.writeIOArray_closure" {
     GHC.IOArray.writeIOArray_closure:
         const GHC.IOArray.writeIOArray_info;
         const 0;
 },
 GHC.IOArray.writeIOArray_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c80Co,
                       label: GHC.IOArray.writeIOArray_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80Co: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.IOArray.writeIOArray1_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.003104545 UTC

[section ""data" . GHC.IOArray.boundsIOArray_closure" {
     GHC.IOArray.boundsIOArray_closure:
         const GHC.IOArray.boundsIOArray_info;
 },
 GHC.IOArray.boundsIOArray_entry() //  [R2]
         { info_tbl: [(c80Cv,
                       label: GHC.IOArray.boundsIOArray_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80Cv: // global
           R2 = R2;
           call GHC.Arr.boundsSTArray_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.0036994 UTC

[section ""cstring" . GHC.IOArray.$trModule4_bytes" {
     GHC.IOArray.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.004186065 UTC

[section ""data" . GHC.IOArray.$trModule3_closure" {
     GHC.IOArray.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IOArray.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.004695739 UTC

[section ""cstring" . GHC.IOArray.$trModule2_bytes" {
     GHC.IOArray.$trModule2_bytes:
         I8[] [71,72,67,46,73,79,65,114,114,97,121]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.005214882 UTC

[section ""data" . GHC.IOArray.$trModule1_closure" {
     GHC.IOArray.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IOArray.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.005742038 UTC

[section ""data" . GHC.IOArray.$trModule_closure" {
     GHC.IOArray.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.IOArray.$trModule3_closure+1;
         const GHC.IOArray.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.00628626 UTC

[section ""data" . $krep_r80wV_closure" {
     $krep_r80wV_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcRealWorld_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.006804439 UTC

[section ""data" . $krep1_r80wW_closure" {
     $krep1_r80wW_closure:
         const GHC.Types.KindRepVar_con_info;
         const 1;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.007319727 UTC

[section ""data" . $krep2_r80wX_closure" {
     $krep2_r80wX_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.00784217 UTC

[section ""data" . $krep3_r80wY_closure" {
     $krep3_r80wY_closure:
         const :_con_info;
         const $krep1_r80wW_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.008386943 UTC

[section ""data" . $krep4_r80wZ_closure" {
     $krep4_r80wZ_closure:
         const :_con_info;
         const $krep2_r80wX_closure+2;
         const $krep3_r80wY_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.00891387 UTC

[section ""data" . $krep5_r80x0_closure" {
     $krep5_r80x0_closure:
         const :_con_info;
         const $krep_r80wV_closure+1;
         const $krep4_r80wZ_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.009835201 UTC

[section ""data" . $krep6_r80x1_closure" {
     $krep6_r80x1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Arr.$tcSTArray_closure;
         const $krep5_r80x0_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.010375429 UTC

[section ""cstring" . GHC.IOArray.$tcIOArray2_bytes" {
     GHC.IOArray.$tcIOArray2_bytes:
         I8[] [73,79,65,114,114,97,121]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.010913861 UTC

[section ""data" . GHC.IOArray.$tcIOArray1_closure" {
     GHC.IOArray.$tcIOArray1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IOArray.$tcIOArray2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.011450878 UTC

[section ""data" . GHC.IOArray.$tcIOArray_closure" {
     GHC.IOArray.$tcIOArray_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IOArray.$trModule_closure+1;
         const GHC.IOArray.$tcIOArray1_closure+1;
         const GHC.Types.krep$*->*->*_closure;
         const 5233307069339228571;
         const 18318902734717728881;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.012032011 UTC

[section ""data" . $krep7_r80x2_closure" {
     $krep7_r80x2_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IOArray.$tcIOArray_closure+1;
         const $krep4_r80wZ_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.012569047 UTC

[section ""data" . GHC.IOArray.$tc'IOArray1_closure" {
     GHC.IOArray.$tc'IOArray1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_r80x1_closure+1;
         const $krep7_r80x2_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.013105006 UTC

[section ""cstring" . GHC.IOArray.$tc'IOArray3_bytes" {
     GHC.IOArray.$tc'IOArray3_bytes:
         I8[] [39,73,79,65,114,114,97,121]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.013659469 UTC

[section ""data" . GHC.IOArray.$tc'IOArray2_closure" {
     GHC.IOArray.$tc'IOArray2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IOArray.$tc'IOArray3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.014194185 UTC

[section ""data" . GHC.IOArray.$tc'IOArray_closure" {
     GHC.IOArray.$tc'IOArray_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IOArray.$trModule_closure+1;
         const GHC.IOArray.$tc'IOArray2_closure+1;
         const GHC.IOArray.$tc'IOArray1_closure+4;
         const 3384482173433764395;
         const 11270226801258228404;
         const 2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.014742183 UTC

[section ""relreadonly" . S80z1_srt" {
     S80z1_srt:
         const GHC.Arr.negRange_closure;
         const $wnewIOArray_r80wT_closure;
         const newIOArray1_r80wU_closure;
         const GHC.Arr.readSTArray_closure;
         const GHC.IOArray.readIOArray1_closure;
         const GHC.Arr.writeSTArray_closure;
         const GHC.IOArray.writeIOArray1_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.015549844 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:03:08.017113358 UTC

[section ""data" . GHC.IOArray.$fEqIOArray_$c/=_closure" {
     GHC.IOArray.$fEqIOArray_$c/=_closure:
         const GHC.IOArray.$fEqIOArray_$c/=_info;
 },
 GHC.IOArray.$fEqIOArray_$c/=_entry() //  [R2, R3]
         { info_tbl: [(c80CF,
                       label: GHC.IOArray.$fEqIOArray_$c/=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80CF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c80CJ; else goto c80CK;
       c80CJ: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IOArray.$fEqIOArray_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c80CK: // global
           I64[Sp - 16] = block_c80CC_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u80D7; else goto c80CD;
       u80D7: // global
           call _c80CC(R1) args: 0, res: 0, upd: 0;
       c80CD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c80CC() //  [R1]
         { info_tbl: [(c80CC,
                       label: block_c80CC_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80CC: // global
           I64[Sp] = block_c80CI_info;
           _s80xa::P64 = P64[R1 + 23];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s80xa::P64;
           if (R1 & 7 != 0) goto u80D6; else goto c80CM;
       u80D6: // global
           call _c80CI(R1) args: 0, res: 0, upd: 0;
       c80CM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c80CI() //  [R1]
         { info_tbl: [(c80CI,
                       label: block_c80CI_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80CI: // global
           if (P64[Sp + 8] == P64[R1 + 23]) goto c80D2; else goto c80CW;
       c80D2: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c80CW: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.024522966 UTC

[section ""data" . GHC.IOArray.$fEqIOArray_closure" {
     GHC.IOArray.$fEqIOArray_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Arr.$fEqSTArray_$c==_closure+2;
         const GHC.IOArray.$fEqIOArray_$c/=_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.027897959 UTC

[section ""data" . $wnewIOArray_r80wT_closure" {
     $wnewIOArray_r80wT_closure:
         const $wnewIOArray_r80wT_info;
         const 0;
 },
 sat_s80xv_entry() //  [R1]
         { info_tbl: [(c80DM,
                       label: sat_s80xv_info
                       rep:HeapRep 3 ptrs 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80DM: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c80DN; else goto c80DO;
       c80DN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c80DO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_c80DH_info;
           _s80xj::P64 = P64[R1 + 24];
           _s80xs::P64 = P64[R1 + 32];
           _s80xo::I64 = I64[R1 + 40];
           R1 = P64[R1 + 16];
           P64[Sp - 40] = _s80xj::P64;
           I64[Sp - 32] = _s80xo::I64;
           P64[Sp - 24] = _s80xs::P64;
           Sp = Sp - 48;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c80DH() //  [R1]
         { info_tbl: [(c80DH,
                       label: block_c80DH_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80DH: // global
           I64[Sp] = block_c80DJ_info;
           _s80xt::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s80xt::P64;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c80DJ() //  [R1]
         { info_tbl: [(c80DJ,
                       label: block_c80DJ_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80DJ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c80DS; else goto c80DR;
       c80DS: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c80DR: // global
           I64[Hp - 32] = GHC.Arr.STArray_con_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = R1;
           P64[Hp - 8] = P64[Sp + 24];
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 31;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 $wnewIOArray_r80wT_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c80DT,
                       label: $wnewIOArray_r80wT_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80DT: // global
           _s80xk::P64 = R5;
           _s80xj::P64 = R4;
           _s80xi::P64 = R3;
           _s80xh::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto c80DU; else goto c80DV;
       c80DV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c80DX; else goto c80DW;
       c80DX: // global
           HpAlloc = 24;
           goto c80DU;
       c80DU: // global
           R5 = _s80xk::P64;
           R4 = _s80xj::P64;
           R3 = _s80xi::P64;
           R2 = _s80xh::P64;
           R1 = $wnewIOArray_r80wT_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c80DW: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s80xi::P64;
           P64[Hp] = _s80xj::P64;
           I64[Sp - 32] = block_c80Du_info;
           R2 = _s80xh::P64;
           I64[Sp - 48] = stg_ap_p_info;
           P64[Sp - 40] = Hp - 15;
           P64[Sp - 24] = _s80xi::P64;
           P64[Sp - 16] = _s80xj::P64;
           P64[Sp - 8] = _s80xk::P64;
           Sp = Sp - 48;
           call GHC.Arr.rangeSize_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 _c80Du() //  [R1]
         { info_tbl: [(c80Du,
                       label: block_c80Du_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80Du: // global
           _s80xo::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s80xo::I64, 0)) goto c80E0; else goto c80E4;
       c80E0: // global
           I64[Sp] = block_c80DB_info;
           R2 = P64[Sp + 24];
           R1 = _s80xo::I64;
           I64[Sp + 24] = _s80xo::I64;
           call stg_newArray#(R2, R1) args: 8, res: 8, upd: 8;
       c80E4: // global
           R1 = GHC.Arr.negRange_closure;
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c80DB() //  [R1]
         { info_tbl: [(c80DB,
                       label: block_c80DB_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80DB: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c80E3; else goto c80E2;
       c80E3: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c80E2: // global
           I64[Hp - 40] = sat_s80xv_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = R1;
           I64[Hp] = I64[Sp + 24];
           R1 = Hp - 40;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.041562184 UTC

[section ""data" . newIOArray1_r80wU_closure" {
     newIOArray1_r80wU_closure:
         const newIOArray1_r80wU_info;
         const 0;
 },
 newIOArray1_r80wU_entry() //  [R2, R3, R4]
         { info_tbl: [(c80EH,
                       label: newIOArray1_r80wU_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80EH: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c80EI; else goto c80EJ;
       c80EI: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = newIOArray1_r80wU_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c80EJ: // global
           I64[Sp - 24] = block_c80EE_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u80EN; else goto c80EF;
       u80EN: // global
           call _c80EE(R1) args: 0, res: 0, upd: 0;
       c80EF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c80EE() //  [R1]
         { info_tbl: [(c80EE,
                       label: block_c80EE_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80EE: // global
           R5 = P64[Sp + 16];
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call $wnewIOArray_r80wT_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.047031727 UTC

[section ""data" . GHC.IOArray.newIOArray_closure" {
     GHC.IOArray.newIOArray_closure:
         const GHC.IOArray.newIOArray_info;
         const 0;
 },
 GHC.IOArray.newIOArray_entry() //  [R2, R3, R4]
         { info_tbl: [(c80F1,
                       label: GHC.IOArray.newIOArray_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80F1: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call newIOArray1_r80wU_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.050558824 UTC

[section ""data" . GHC.IOArray.unsafeReadIOArray_closure" {
     GHC.IOArray.unsafeReadIOArray_closure:
         const GHC.IOArray.unsafeReadIOArray_info;
 },
 GHC.IOArray.unsafeReadIOArray_entry() //  [R2, R3]
         { info_tbl: [(c80Fc,
                       label: GHC.IOArray.unsafeReadIOArray_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80Fc: // global
           R3 = R3;
           R2 = R2;
           call GHC.Arr.unsafeReadSTArray_entry(R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.053854125 UTC

[section ""data" . GHC.IOArray.unsafeWriteIOArray_closure" {
     GHC.IOArray.unsafeWriteIOArray_closure:
         const GHC.IOArray.unsafeWriteIOArray_info;
 },
 GHC.IOArray.unsafeWriteIOArray_entry() //  [R2, R3, R4]
         { info_tbl: [(c80Fn,
                       label: GHC.IOArray.unsafeWriteIOArray_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80Fn: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Arr.unsafeWriteSTArray_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.057045844 UTC

[section ""data" . GHC.IOArray.readIOArray1_closure" {
     GHC.IOArray.readIOArray1_closure:
         const GHC.IOArray.readIOArray1_info;
         const 0;
 },
 GHC.IOArray.readIOArray1_entry() //  [R2, R3, R4]
         { info_tbl: [(c80Fy,
                       label: GHC.IOArray.readIOArray1_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80Fy: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Arr.readSTArray_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.06082017 UTC

[section ""data" . GHC.IOArray.readIOArray_closure" {
     GHC.IOArray.readIOArray_closure:
         const GHC.IOArray.readIOArray_info;
         const 0;
 },
 GHC.IOArray.readIOArray_entry() //  [R2, R3, R4]
         { info_tbl: [(c80FJ,
                       label: GHC.IOArray.readIOArray_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80FJ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.IOArray.readIOArray1_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.064182497 UTC

[section ""data" . GHC.IOArray.writeIOArray1_closure" {
     GHC.IOArray.writeIOArray1_closure:
         const GHC.IOArray.writeIOArray1_info;
         const 0;
 },
 GHC.IOArray.writeIOArray1_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c80FU,
                       label: GHC.IOArray.writeIOArray1_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80FU: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Arr.writeSTArray_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.067611196 UTC

[section ""data" . GHC.IOArray.writeIOArray_closure" {
     GHC.IOArray.writeIOArray_closure:
         const GHC.IOArray.writeIOArray_info;
         const 0;
 },
 GHC.IOArray.writeIOArray_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c80G5,
                       label: GHC.IOArray.writeIOArray_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80G5: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.IOArray.writeIOArray1_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.070882641 UTC

[section ""data" . GHC.IOArray.boundsIOArray_closure" {
     GHC.IOArray.boundsIOArray_closure:
         const GHC.IOArray.boundsIOArray_info;
 },
 GHC.IOArray.boundsIOArray_entry() //  [R2]
         { info_tbl: [(c80Gg,
                       label: GHC.IOArray.boundsIOArray_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80Gg: // global
           R2 = R2;
           call GHC.Arr.boundsSTArray_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.074190213 UTC

[section ""cstring" . GHC.IOArray.$trModule4_bytes" {
     GHC.IOArray.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.075937828 UTC

[section ""data" . GHC.IOArray.$trModule3_closure" {
     GHC.IOArray.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IOArray.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.077715192 UTC

[section ""cstring" . GHC.IOArray.$trModule2_bytes" {
     GHC.IOArray.$trModule2_bytes:
         I8[] [71,72,67,46,73,79,65,114,114,97,121]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.079484815 UTC

[section ""data" . GHC.IOArray.$trModule1_closure" {
     GHC.IOArray.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IOArray.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.081155159 UTC

[section ""data" . GHC.IOArray.$trModule_closure" {
     GHC.IOArray.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.IOArray.$trModule3_closure+1;
         const GHC.IOArray.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.083039572 UTC

[section ""data" . $krep_r80wV_closure" {
     $krep_r80wV_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcRealWorld_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.084830684 UTC

[section ""data" . $krep1_r80wW_closure" {
     $krep1_r80wW_closure:
         const GHC.Types.KindRepVar_con_info;
         const 1;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.086636053 UTC

[section ""data" . $krep2_r80wX_closure" {
     $krep2_r80wX_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.089034666 UTC

[section ""data" . $krep3_r80wY_closure" {
     $krep3_r80wY_closure:
         const :_con_info;
         const $krep1_r80wW_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.090983993 UTC

[section ""data" . $krep4_r80wZ_closure" {
     $krep4_r80wZ_closure:
         const :_con_info;
         const $krep2_r80wX_closure+2;
         const $krep3_r80wY_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.092682293 UTC

[section ""data" . $krep5_r80x0_closure" {
     $krep5_r80x0_closure:
         const :_con_info;
         const $krep_r80wV_closure+1;
         const $krep4_r80wZ_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.094491993 UTC

[section ""data" . $krep6_r80x1_closure" {
     $krep6_r80x1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Arr.$tcSTArray_closure;
         const $krep5_r80x0_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.096282755 UTC

[section ""cstring" . GHC.IOArray.$tcIOArray2_bytes" {
     GHC.IOArray.$tcIOArray2_bytes:
         I8[] [73,79,65,114,114,97,121]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.097985791 UTC

[section ""data" . GHC.IOArray.$tcIOArray1_closure" {
     GHC.IOArray.$tcIOArray1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IOArray.$tcIOArray2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.099732025 UTC

[section ""data" . GHC.IOArray.$tcIOArray_closure" {
     GHC.IOArray.$tcIOArray_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IOArray.$trModule_closure+1;
         const GHC.IOArray.$tcIOArray1_closure+1;
         const GHC.Types.krep$*->*->*_closure;
         const 5233307069339228571;
         const 18318902734717728881;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.101894047 UTC

[section ""data" . $krep7_r80x2_closure" {
     $krep7_r80x2_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IOArray.$tcIOArray_closure+1;
         const $krep4_r80wZ_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.103741189 UTC

[section ""data" . GHC.IOArray.$tc'IOArray1_closure" {
     GHC.IOArray.$tc'IOArray1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_r80x1_closure+1;
         const $krep7_r80x2_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.105570401 UTC

[section ""cstring" . GHC.IOArray.$tc'IOArray3_bytes" {
     GHC.IOArray.$tc'IOArray3_bytes:
         I8[] [39,73,79,65,114,114,97,121]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.10734402 UTC

[section ""data" . GHC.IOArray.$tc'IOArray2_closure" {
     GHC.IOArray.$tc'IOArray2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IOArray.$tc'IOArray3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.109131195 UTC

[section ""data" . GHC.IOArray.$tc'IOArray_closure" {
     GHC.IOArray.$tc'IOArray_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IOArray.$trModule_closure+1;
         const GHC.IOArray.$tc'IOArray2_closure+1;
         const GHC.IOArray.$tc'IOArray1_closure+4;
         const 3384482173433764395;
         const 11270226801258228404;
         const 2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.110942841 UTC

[section ""relreadonly" . S80z1_srt" {
     S80z1_srt:
         const GHC.Arr.negRange_closure;
         const $wnewIOArray_r80wT_closure;
         const newIOArray1_r80wU_closure;
         const GHC.Arr.readSTArray_closure;
         const GHC.IOArray.readIOArray1_closure;
         const GHC.Arr.writeSTArray_closure;
         const GHC.IOArray.writeIOArray1_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.232456794 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:03:08.234094688 UTC

[section ""data" . GHC.IOArray.$fEqIOArray_$c/=_closure" {
     GHC.IOArray.$fEqIOArray_$c/=_closure:
         const GHC.IOArray.$fEqIOArray_$c/=_info;
 },
 GHC.IOArray.$fEqIOArray_$c/=_entry() //  [R2, R3]
         { info_tbl: [(c80Hw,
                       label: GHC.IOArray.$fEqIOArray_$c/=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80Hw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c80HA; else goto c80HB;
       c80HA: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IOArray.$fEqIOArray_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c80HB: // global
           I64[Sp - 16] = block_c80Ht_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u80HY; else goto c80Hu;
       u80HY: // global
           call _c80Ht(R1) args: 0, res: 0, upd: 0;
       c80Hu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c80Ht() //  [R1]
         { info_tbl: [(c80Ht,
                       label: block_c80Ht_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80Ht: // global
           I64[Sp] = block_c80Hz_info;
           _s80GO::P64 = P64[R1 + 23];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s80GO::P64;
           if (R1 & 7 != 0) goto u80HX; else goto c80HD;
       u80HX: // global
           call _c80Hz(R1) args: 0, res: 0, upd: 0;
       c80HD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c80Hz() //  [R1]
         { info_tbl: [(c80Hz,
                       label: block_c80Hz_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80Hz: // global
           if (P64[Sp + 8] == P64[R1 + 23]) goto c80HT; else goto c80HN;
       c80HT: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c80HN: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.241627446 UTC

[section ""data" . GHC.IOArray.$fEqIOArray_closure" {
     GHC.IOArray.$fEqIOArray_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Arr.$fEqSTArray_$c==_closure+2;
         const GHC.IOArray.$fEqIOArray_$c/=_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.244897301 UTC

[section ""data" . $wnewIOArray_r80wT_closure" {
     $wnewIOArray_r80wT_closure:
         const $wnewIOArray_r80wT_info;
         const 0;
 },
 sat_s80H9_entry() //  [R1]
         { info_tbl: [(c80IH,
                       label: sat_s80H9_info
                       rep:HeapRep 3 ptrs 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80IH: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c80II; else goto c80IJ;
       c80II: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c80IJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_c80IC_info;
           _s80GX::P64 = P64[R1 + 24];
           _s80H6::P64 = P64[R1 + 32];
           _s80H2::I64 = I64[R1 + 40];
           R1 = P64[R1 + 16];
           P64[Sp - 40] = _s80GX::P64;
           I64[Sp - 32] = _s80H2::I64;
           P64[Sp - 24] = _s80H6::P64;
           Sp = Sp - 48;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c80IC() //  [R1]
         { info_tbl: [(c80IC,
                       label: block_c80IC_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80IC: // global
           I64[Sp] = block_c80IE_info;
           _s80H7::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s80H7::P64;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c80IE() //  [R1]
         { info_tbl: [(c80IE,
                       label: block_c80IE_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80IE: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c80IN; else goto c80IM;
       c80IN: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c80IM: // global
           I64[Hp - 32] = GHC.Arr.STArray_con_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = R1;
           P64[Hp - 8] = P64[Sp + 24];
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 31;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 $wnewIOArray_r80wT_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c80IO,
                       label: $wnewIOArray_r80wT_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80IO: // global
           _s80GY::P64 = R5;
           _s80GX::P64 = R4;
           _s80GW::P64 = R3;
           _s80GV::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto c80IP; else goto c80IQ;
       c80IQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c80IS; else goto c80IR;
       c80IS: // global
           HpAlloc = 24;
           goto c80IP;
       c80IP: // global
           R5 = _s80GY::P64;
           R4 = _s80GX::P64;
           R3 = _s80GW::P64;
           R2 = _s80GV::P64;
           R1 = $wnewIOArray_r80wT_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c80IR: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s80GW::P64;
           P64[Hp] = _s80GX::P64;
           I64[Sp - 32] = block_c80Ip_info;
           R2 = _s80GV::P64;
           I64[Sp - 48] = stg_ap_p_info;
           P64[Sp - 40] = Hp - 15;
           P64[Sp - 24] = _s80GW::P64;
           P64[Sp - 16] = _s80GX::P64;
           P64[Sp - 8] = _s80GY::P64;
           Sp = Sp - 48;
           call GHC.Arr.rangeSize_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 _c80Ip() //  [R1]
         { info_tbl: [(c80Ip,
                       label: block_c80Ip_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80Ip: // global
           _s80H2::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s80H2::I64, 0)) goto c80IV; else goto c80IZ;
       c80IV: // global
           I64[Sp] = block_c80Iw_info;
           R2 = P64[Sp + 24];
           R1 = _s80H2::I64;
           I64[Sp + 24] = _s80H2::I64;
           call stg_newArray#(R2, R1) args: 8, res: 8, upd: 8;
       c80IZ: // global
           R1 = GHC.Arr.negRange_closure;
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c80Iw() //  [R1]
         { info_tbl: [(c80Iw,
                       label: block_c80Iw_info
                       rep:StackRep [False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80Iw: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c80IY; else goto c80IX;
       c80IY: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c80IX: // global
           I64[Hp - 40] = sat_s80H9_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = R1;
           I64[Hp] = I64[Sp + 24];
           R1 = Hp - 40;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.258296985 UTC

[section ""data" . newIOArray1_r80wU_closure" {
     newIOArray1_r80wU_closure:
         const newIOArray1_r80wU_info;
         const 0;
 },
 newIOArray1_r80wU_entry() //  [R2, R3, R4]
         { info_tbl: [(c80JM,
                       label: newIOArray1_r80wU_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80JM: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c80JN; else goto c80JO;
       c80JN: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = newIOArray1_r80wU_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c80JO: // global
           I64[Sp - 24] = block_c80JJ_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u80JS; else goto c80JK;
       u80JS: // global
           call _c80JJ(R1) args: 0, res: 0, upd: 0;
       c80JK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c80JJ() //  [R1]
         { info_tbl: [(c80JJ,
                       label: block_c80JJ_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80JJ: // global
           R5 = P64[Sp + 16];
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call $wnewIOArray_r80wT_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.263765067 UTC

[section ""data" . GHC.IOArray.newIOArray_closure" {
     GHC.IOArray.newIOArray_closure:
         const GHC.IOArray.newIOArray_info;
         const 0;
 },
 GHC.IOArray.newIOArray_entry() //  [R2, R3, R4]
         { info_tbl: [(c80K7,
                       label: GHC.IOArray.newIOArray_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80K7: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call newIOArray1_r80wU_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.267086705 UTC

[section ""data" . GHC.IOArray.unsafeReadIOArray_closure" {
     GHC.IOArray.unsafeReadIOArray_closure:
         const GHC.IOArray.unsafeReadIOArray_info;
 },
 GHC.IOArray.unsafeReadIOArray_entry() //  [R2, R3]
         { info_tbl: [(c80Ki,
                       label: GHC.IOArray.unsafeReadIOArray_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80Ki: // global
           R3 = R3;
           R2 = R2;
           call GHC.Arr.unsafeReadSTArray_entry(R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.270283568 UTC

[section ""data" . GHC.IOArray.unsafeWriteIOArray_closure" {
     GHC.IOArray.unsafeWriteIOArray_closure:
         const GHC.IOArray.unsafeWriteIOArray_info;
 },
 GHC.IOArray.unsafeWriteIOArray_entry() //  [R2, R3, R4]
         { info_tbl: [(c80Kt,
                       label: GHC.IOArray.unsafeWriteIOArray_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80Kt: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Arr.unsafeWriteSTArray_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.273622569 UTC

[section ""data" . GHC.IOArray.readIOArray1_closure" {
     GHC.IOArray.readIOArray1_closure:
         const GHC.IOArray.readIOArray1_info;
         const 0;
 },
 GHC.IOArray.readIOArray1_entry() //  [R2, R3, R4]
         { info_tbl: [(c80KE,
                       label: GHC.IOArray.readIOArray1_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80KE: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Arr.readSTArray_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.27745982 UTC

[section ""data" . GHC.IOArray.readIOArray_closure" {
     GHC.IOArray.readIOArray_closure:
         const GHC.IOArray.readIOArray_info;
         const 0;
 },
 GHC.IOArray.readIOArray_entry() //  [R2, R3, R4]
         { info_tbl: [(c80KP,
                       label: GHC.IOArray.readIOArray_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80KP: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.IOArray.readIOArray1_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.280628572 UTC

[section ""data" . GHC.IOArray.writeIOArray1_closure" {
     GHC.IOArray.writeIOArray1_closure:
         const GHC.IOArray.writeIOArray1_info;
         const 0;
 },
 GHC.IOArray.writeIOArray1_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c80L0,
                       label: GHC.IOArray.writeIOArray1_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80L0: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Arr.writeSTArray_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.28389473 UTC

[section ""data" . GHC.IOArray.writeIOArray_closure" {
     GHC.IOArray.writeIOArray_closure:
         const GHC.IOArray.writeIOArray_info;
         const 0;
 },
 GHC.IOArray.writeIOArray_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c80Lb,
                       label: GHC.IOArray.writeIOArray_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80Lb: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.IOArray.writeIOArray1_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.287104892 UTC

[section ""data" . GHC.IOArray.boundsIOArray_closure" {
     GHC.IOArray.boundsIOArray_closure:
         const GHC.IOArray.boundsIOArray_info;
 },
 GHC.IOArray.boundsIOArray_entry() //  [R2]
         { info_tbl: [(c80Lm,
                       label: GHC.IOArray.boundsIOArray_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c80Lm: // global
           R2 = R2;
           call GHC.Arr.boundsSTArray_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.290134945 UTC

[section ""cstring" . GHC.IOArray.$trModule4_bytes" {
     GHC.IOArray.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.291716758 UTC

[section ""data" . GHC.IOArray.$trModule3_closure" {
     GHC.IOArray.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IOArray.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.293370773 UTC

[section ""cstring" . GHC.IOArray.$trModule2_bytes" {
     GHC.IOArray.$trModule2_bytes:
         I8[] [71,72,67,46,73,79,65,114,114,97,121]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.294925354 UTC

[section ""data" . GHC.IOArray.$trModule1_closure" {
     GHC.IOArray.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IOArray.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.296511631 UTC

[section ""data" . GHC.IOArray.$trModule_closure" {
     GHC.IOArray.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.IOArray.$trModule3_closure+1;
         const GHC.IOArray.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.298959473 UTC

[section ""data" . $krep_r80wV_closure" {
     $krep_r80wV_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcRealWorld_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.300568948 UTC

[section ""data" . $krep1_r80wW_closure" {
     $krep1_r80wW_closure:
         const GHC.Types.KindRepVar_con_info;
         const 1;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.302695484 UTC

[section ""data" . $krep2_r80wX_closure" {
     $krep2_r80wX_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.304390652 UTC

[section ""data" . $krep3_r80wY_closure" {
     $krep3_r80wY_closure:
         const :_con_info;
         const $krep1_r80wW_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.306121106 UTC

[section ""data" . $krep4_r80wZ_closure" {
     $krep4_r80wZ_closure:
         const :_con_info;
         const $krep2_r80wX_closure+2;
         const $krep3_r80wY_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.307744306 UTC

[section ""data" . $krep5_r80x0_closure" {
     $krep5_r80x0_closure:
         const :_con_info;
         const $krep_r80wV_closure+1;
         const $krep4_r80wZ_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.309468418 UTC

[section ""data" . $krep6_r80x1_closure" {
     $krep6_r80x1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Arr.$tcSTArray_closure;
         const $krep5_r80x0_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.311143221 UTC

[section ""cstring" . GHC.IOArray.$tcIOArray2_bytes" {
     GHC.IOArray.$tcIOArray2_bytes:
         I8[] [73,79,65,114,114,97,121]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.312726286 UTC

[section ""data" . GHC.IOArray.$tcIOArray1_closure" {
     GHC.IOArray.$tcIOArray1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IOArray.$tcIOArray2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.314938506 UTC

[section ""data" . GHC.IOArray.$tcIOArray_closure" {
     GHC.IOArray.$tcIOArray_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IOArray.$trModule_closure+1;
         const GHC.IOArray.$tcIOArray1_closure+1;
         const GHC.Types.krep$*->*->*_closure;
         const 5233307069339228571;
         const 18318902734717728881;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.316710647 UTC

[section ""data" . $krep7_r80x2_closure" {
     $krep7_r80x2_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IOArray.$tcIOArray_closure+1;
         const $krep4_r80wZ_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.318433608 UTC

[section ""data" . GHC.IOArray.$tc'IOArray1_closure" {
     GHC.IOArray.$tc'IOArray1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_r80x1_closure+1;
         const $krep7_r80x2_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.320078889 UTC

[section ""cstring" . GHC.IOArray.$tc'IOArray3_bytes" {
     GHC.IOArray.$tc'IOArray3_bytes:
         I8[] [39,73,79,65,114,114,97,121]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.321714426 UTC

[section ""data" . GHC.IOArray.$tc'IOArray2_closure" {
     GHC.IOArray.$tc'IOArray2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IOArray.$tc'IOArray3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.323387864 UTC

[section ""data" . GHC.IOArray.$tc'IOArray_closure" {
     GHC.IOArray.$tc'IOArray_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IOArray.$trModule_closure+1;
         const GHC.IOArray.$tc'IOArray2_closure+1;
         const GHC.IOArray.$tc'IOArray1_closure+4;
         const 3384482173433764395;
         const 11270226801258228404;
         const 2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.325062995 UTC

[section ""relreadonly" . S80J0_srt" {
     S80J0_srt:
         const GHC.Arr.negRange_closure;
         const $wnewIOArray_r80wT_closure;
         const newIOArray1_r80wU_closure;
         const GHC.Arr.readSTArray_closure;
         const GHC.IOArray.readIOArray1_closure;
         const GHC.Arr.writeSTArray_closure;
         const GHC.IOArray.writeIOArray1_closure;
 }]

