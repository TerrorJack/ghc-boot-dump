
==================== Raw Cmm ====================
2018-03-16 15:57:02.292088602 UTC

[]


==================== Raw Cmm ====================
2018-03-16 15:57:02.294005464 UTC

[section ""data" . GHC.Unicode.$fBoundedGeneralCategory_closure" {
     GHC.Unicode.$fBoundedGeneralCategory_closure:
         const GHC.Enum.C:Bounded_con_info;
         const GHC.Unicode.UppercaseLetter_closure+1;
         const GHC.Unicode.NotAssigned_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.349509785 UTC

[section ""cstring" . lvl_r2j62_bytes" {
     lvl_r2j62_bytes:
         I8[] [85,112,112,101,114,99,97,115,101,76,101,116,116,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.352023962 UTC

[section ""data" . lvl1_r2j63_closure" {
     lvl1_r2j63_closure:
         const lvl1_r2j63_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_r2j63_entry() //  [R1]
         { []
         }
     {offset
       c2kO7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kO8; else goto c2kO9;
       c2kO8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kO9: // global
           (_c2kO4::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2kO4::I64 == 0) goto c2kO6; else goto c2kO5;
       c2kO6: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2kO5: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2kO4::I64;
           R2 = lvl_r2j62_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl1_r2j63_info" {
     lvl1_r2j63_info:
         const lvl1_r2j63_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.355675 UTC

[section ""cstring" . lvl2_r2j64_bytes" {
     lvl2_r2j64_bytes:
         I8[] [76,111,119,101,114,99,97,115,101,76,101,116,116,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.358729681 UTC

[section ""data" . lvl3_r2j65_closure" {
     lvl3_r2j65_closure:
         const lvl3_r2j65_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_r2j65_entry() //  [R1]
         { []
         }
     {offset
       c2kOo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kOp; else goto c2kOq;
       c2kOp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kOq: // global
           (_c2kOl::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2kOl::I64 == 0) goto c2kOn; else goto c2kOm;
       c2kOn: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2kOm: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2kOl::I64;
           R2 = lvl2_r2j64_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl3_r2j65_info" {
     lvl3_r2j65_info:
         const lvl3_r2j65_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.362985499 UTC

[section ""cstring" . lvl4_r2j66_bytes" {
     lvl4_r2j66_bytes:
         I8[] [84,105,116,108,101,99,97,115,101,76,101,116,116,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.365943366 UTC

[section ""data" . lvl5_r2j67_closure" {
     lvl5_r2j67_closure:
         const lvl5_r2j67_info;
         const 0;
         const 0;
         const 0;
 },
 lvl5_r2j67_entry() //  [R1]
         { []
         }
     {offset
       c2kOF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kOG; else goto c2kOH;
       c2kOG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kOH: // global
           (_c2kOC::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2kOC::I64 == 0) goto c2kOE; else goto c2kOD;
       c2kOE: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2kOD: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2kOC::I64;
           R2 = lvl4_r2j66_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl5_r2j67_info" {
     lvl5_r2j67_info:
         const lvl5_r2j67_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.369884697 UTC

[section ""cstring" . lvl6_r2j68_bytes" {
     lvl6_r2j68_bytes:
         I8[] [77,111,100,105,102,105,101,114,76,101,116,116,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.372377621 UTC

[section ""data" . lvl7_r2j69_closure" {
     lvl7_r2j69_closure:
         const lvl7_r2j69_info;
         const 0;
         const 0;
         const 0;
 },
 lvl7_r2j69_entry() //  [R1]
         { []
         }
     {offset
       c2kOW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kOX; else goto c2kOY;
       c2kOX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kOY: // global
           (_c2kOT::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2kOT::I64 == 0) goto c2kOV; else goto c2kOU;
       c2kOV: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2kOU: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2kOT::I64;
           R2 = lvl6_r2j68_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl7_r2j69_info" {
     lvl7_r2j69_info:
         const lvl7_r2j69_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.37622789 UTC

[section ""cstring" . lvl8_r2j6a_bytes" {
     lvl8_r2j6a_bytes:
         I8[] [79,116,104,101,114,76,101,116,116,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.378667462 UTC

[section ""data" . lvl9_r2j6b_closure" {
     lvl9_r2j6b_closure:
         const lvl9_r2j6b_info;
         const 0;
         const 0;
         const 0;
 },
 lvl9_r2j6b_entry() //  [R1]
         { []
         }
     {offset
       c2kPd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kPe; else goto c2kPf;
       c2kPe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kPf: // global
           (_c2kPa::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2kPa::I64 == 0) goto c2kPc; else goto c2kPb;
       c2kPc: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2kPb: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2kPa::I64;
           R2 = lvl8_r2j6a_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl9_r2j6b_info" {
     lvl9_r2j6b_info:
         const lvl9_r2j6b_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.383450373 UTC

[section ""cstring" . lvl10_r2j6c_bytes" {
     lvl10_r2j6c_bytes:
         I8[] [78,111,110,83,112,97,99,105,110,103,77,97,114,107]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.386245146 UTC

[section ""data" . lvl11_r2j6d_closure" {
     lvl11_r2j6d_closure:
         const lvl11_r2j6d_info;
         const 0;
         const 0;
         const 0;
 },
 lvl11_r2j6d_entry() //  [R1]
         { []
         }
     {offset
       c2kPu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kPv; else goto c2kPw;
       c2kPv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kPw: // global
           (_c2kPr::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2kPr::I64 == 0) goto c2kPt; else goto c2kPs;
       c2kPt: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2kPs: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2kPr::I64;
           R2 = lvl10_r2j6c_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl11_r2j6d_info" {
     lvl11_r2j6d_info:
         const lvl11_r2j6d_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.390114783 UTC

[section ""cstring" . lvl12_r2j6e_bytes" {
     lvl12_r2j6e_bytes:
         I8[] [83,112,97,99,105,110,103,67,111,109,98,105,110,105,110,103,77,97,114,107]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.392866841 UTC

[section ""data" . lvl13_r2j6f_closure" {
     lvl13_r2j6f_closure:
         const lvl13_r2j6f_info;
         const 0;
         const 0;
         const 0;
 },
 lvl13_r2j6f_entry() //  [R1]
         { []
         }
     {offset
       c2kPL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kPM; else goto c2kPN;
       c2kPM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kPN: // global
           (_c2kPI::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2kPI::I64 == 0) goto c2kPK; else goto c2kPJ;
       c2kPK: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2kPJ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2kPI::I64;
           R2 = lvl12_r2j6e_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl13_r2j6f_info" {
     lvl13_r2j6f_info:
         const lvl13_r2j6f_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.397089 UTC

[section ""cstring" . lvl14_r2j6g_bytes" {
     lvl14_r2j6g_bytes:
         I8[] [69,110,99,108,111,115,105,110,103,77,97,114,107]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.399731695 UTC

[section ""data" . lvl15_r2j6h_closure" {
     lvl15_r2j6h_closure:
         const lvl15_r2j6h_info;
         const 0;
         const 0;
         const 0;
 },
 lvl15_r2j6h_entry() //  [R1]
         { []
         }
     {offset
       c2kQ2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kQ3; else goto c2kQ4;
       c2kQ3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kQ4: // global
           (_c2kPZ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2kPZ::I64 == 0) goto c2kQ1; else goto c2kQ0;
       c2kQ1: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2kQ0: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2kPZ::I64;
           R2 = lvl14_r2j6g_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl15_r2j6h_info" {
     lvl15_r2j6h_info:
         const lvl15_r2j6h_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.404008009 UTC

[section ""cstring" . lvl16_r2j6i_bytes" {
     lvl16_r2j6i_bytes:
         I8[] [68,101,99,105,109,97,108,78,117,109,98,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.406808004 UTC

[section ""data" . lvl17_r2j6j_closure" {
     lvl17_r2j6j_closure:
         const lvl17_r2j6j_info;
         const 0;
         const 0;
         const 0;
 },
 lvl17_r2j6j_entry() //  [R1]
         { []
         }
     {offset
       c2kQj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kQk; else goto c2kQl;
       c2kQk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kQl: // global
           (_c2kQg::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2kQg::I64 == 0) goto c2kQi; else goto c2kQh;
       c2kQi: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2kQh: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2kQg::I64;
           R2 = lvl16_r2j6i_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl17_r2j6j_info" {
     lvl17_r2j6j_info:
         const lvl17_r2j6j_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.411920375 UTC

[section ""cstring" . lvl18_r2j6k_bytes" {
     lvl18_r2j6k_bytes:
         I8[] [76,101,116,116,101,114,78,117,109,98,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.414498787 UTC

[section ""data" . lvl19_r2j6l_closure" {
     lvl19_r2j6l_closure:
         const lvl19_r2j6l_info;
         const 0;
         const 0;
         const 0;
 },
 lvl19_r2j6l_entry() //  [R1]
         { []
         }
     {offset
       c2kQA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kQB; else goto c2kQC;
       c2kQB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kQC: // global
           (_c2kQx::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2kQx::I64 == 0) goto c2kQz; else goto c2kQy;
       c2kQz: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2kQy: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2kQx::I64;
           R2 = lvl18_r2j6k_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl19_r2j6l_info" {
     lvl19_r2j6l_info:
         const lvl19_r2j6l_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.418458875 UTC

[section ""cstring" . lvl20_r2j6m_bytes" {
     lvl20_r2j6m_bytes:
         I8[] [79,116,104,101,114,78,117,109,98,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.421092295 UTC

[section ""data" . lvl21_r2j6n_closure" {
     lvl21_r2j6n_closure:
         const lvl21_r2j6n_info;
         const 0;
         const 0;
         const 0;
 },
 lvl21_r2j6n_entry() //  [R1]
         { []
         }
     {offset
       c2kQR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kQS; else goto c2kQT;
       c2kQS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kQT: // global
           (_c2kQO::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2kQO::I64 == 0) goto c2kQQ; else goto c2kQP;
       c2kQQ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2kQP: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2kQO::I64;
           R2 = lvl20_r2j6m_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl21_r2j6n_info" {
     lvl21_r2j6n_info:
         const lvl21_r2j6n_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.425528562 UTC

[section ""cstring" . lvl22_r2j6o_bytes" {
     lvl22_r2j6o_bytes:
         I8[] [67,111,110,110,101,99,116,111,114,80,117,110,99,116,117,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.428110253 UTC

[section ""data" . lvl23_r2j6p_closure" {
     lvl23_r2j6p_closure:
         const lvl23_r2j6p_info;
         const 0;
         const 0;
         const 0;
 },
 lvl23_r2j6p_entry() //  [R1]
         { []
         }
     {offset
       c2kR8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kR9; else goto c2kRa;
       c2kR9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kRa: // global
           (_c2kR5::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2kR5::I64 == 0) goto c2kR7; else goto c2kR6;
       c2kR7: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2kR6: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2kR5::I64;
           R2 = lvl22_r2j6o_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl23_r2j6p_info" {
     lvl23_r2j6p_info:
         const lvl23_r2j6p_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.431987925 UTC

[section ""cstring" . lvl24_r2j6q_bytes" {
     lvl24_r2j6q_bytes:
         I8[] [68,97,115,104,80,117,110,99,116,117,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.434973516 UTC

[section ""data" . lvl25_r2j6r_closure" {
     lvl25_r2j6r_closure:
         const lvl25_r2j6r_info;
         const 0;
         const 0;
         const 0;
 },
 lvl25_r2j6r_entry() //  [R1]
         { []
         }
     {offset
       c2kRp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kRq; else goto c2kRr;
       c2kRq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kRr: // global
           (_c2kRm::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2kRm::I64 == 0) goto c2kRo; else goto c2kRn;
       c2kRo: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2kRn: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2kRm::I64;
           R2 = lvl24_r2j6q_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl25_r2j6r_info" {
     lvl25_r2j6r_info:
         const lvl25_r2j6r_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.439756326 UTC

[section ""cstring" . lvl26_r2j6s_bytes" {
     lvl26_r2j6s_bytes:
         I8[] [79,112,101,110,80,117,110,99,116,117,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.442506809 UTC

[section ""data" . lvl27_r2j6t_closure" {
     lvl27_r2j6t_closure:
         const lvl27_r2j6t_info;
         const 0;
         const 0;
         const 0;
 },
 lvl27_r2j6t_entry() //  [R1]
         { []
         }
     {offset
       c2kRG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kRH; else goto c2kRI;
       c2kRH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kRI: // global
           (_c2kRD::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2kRD::I64 == 0) goto c2kRF; else goto c2kRE;
       c2kRF: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2kRE: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2kRD::I64;
           R2 = lvl26_r2j6s_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl27_r2j6t_info" {
     lvl27_r2j6t_info:
         const lvl27_r2j6t_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.446614683 UTC

[section ""cstring" . lvl28_r2j6u_bytes" {
     lvl28_r2j6u_bytes:
         I8[] [67,108,111,115,101,80,117,110,99,116,117,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.449206298 UTC

[section ""data" . lvl29_r2j6v_closure" {
     lvl29_r2j6v_closure:
         const lvl29_r2j6v_info;
         const 0;
         const 0;
         const 0;
 },
 lvl29_r2j6v_entry() //  [R1]
         { []
         }
     {offset
       c2kRX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kRY; else goto c2kRZ;
       c2kRY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kRZ: // global
           (_c2kRU::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2kRU::I64 == 0) goto c2kRW; else goto c2kRV;
       c2kRW: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2kRV: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2kRU::I64;
           R2 = lvl28_r2j6u_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl29_r2j6v_info" {
     lvl29_r2j6v_info:
         const lvl29_r2j6v_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.453207005 UTC

[section ""cstring" . lvl30_r2j6w_bytes" {
     lvl30_r2j6w_bytes:
         I8[] [73,110,105,116,105,97,108,81,117,111,116,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.455891856 UTC

[section ""data" . lvl31_r2j6x_closure" {
     lvl31_r2j6x_closure:
         const lvl31_r2j6x_info;
         const 0;
         const 0;
         const 0;
 },
 lvl31_r2j6x_entry() //  [R1]
         { []
         }
     {offset
       c2kSe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kSf; else goto c2kSg;
       c2kSf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kSg: // global
           (_c2kSb::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2kSb::I64 == 0) goto c2kSd; else goto c2kSc;
       c2kSd: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2kSc: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2kSb::I64;
           R2 = lvl30_r2j6w_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl31_r2j6x_info" {
     lvl31_r2j6x_info:
         const lvl31_r2j6x_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.459955489 UTC

[section ""cstring" . lvl32_r2j6y_bytes" {
     lvl32_r2j6y_bytes:
         I8[] [70,105,110,97,108,81,117,111,116,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.463559517 UTC

[section ""data" . lvl33_r2j6z_closure" {
     lvl33_r2j6z_closure:
         const lvl33_r2j6z_info;
         const 0;
         const 0;
         const 0;
 },
 lvl33_r2j6z_entry() //  [R1]
         { []
         }
     {offset
       c2kSv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kSw; else goto c2kSx;
       c2kSw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kSx: // global
           (_c2kSs::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2kSs::I64 == 0) goto c2kSu; else goto c2kSt;
       c2kSu: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2kSt: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2kSs::I64;
           R2 = lvl32_r2j6y_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_r2j6z_info" {
     lvl33_r2j6z_info:
         const lvl33_r2j6z_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.467392967 UTC

[section ""cstring" . lvl34_r2j6A_bytes" {
     lvl34_r2j6A_bytes:
         I8[] [79,116,104,101,114,80,117,110,99,116,117,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.46984708 UTC

[section ""data" . lvl35_r2j6B_closure" {
     lvl35_r2j6B_closure:
         const lvl35_r2j6B_info;
         const 0;
         const 0;
         const 0;
 },
 lvl35_r2j6B_entry() //  [R1]
         { []
         }
     {offset
       c2kSM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kSN; else goto c2kSO;
       c2kSN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kSO: // global
           (_c2kSJ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2kSJ::I64 == 0) goto c2kSL; else goto c2kSK;
       c2kSL: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2kSK: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2kSJ::I64;
           R2 = lvl34_r2j6A_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl35_r2j6B_info" {
     lvl35_r2j6B_info:
         const lvl35_r2j6B_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.474045857 UTC

[section ""cstring" . lvl36_r2j6C_bytes" {
     lvl36_r2j6C_bytes:
         I8[] [77,97,116,104,83,121,109,98,111,108]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.476498494 UTC

[section ""data" . lvl37_r2j6D_closure" {
     lvl37_r2j6D_closure:
         const lvl37_r2j6D_info;
         const 0;
         const 0;
         const 0;
 },
 lvl37_r2j6D_entry() //  [R1]
         { []
         }
     {offset
       c2kT3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kT4; else goto c2kT5;
       c2kT4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kT5: // global
           (_c2kT0::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2kT0::I64 == 0) goto c2kT2; else goto c2kT1;
       c2kT2: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2kT1: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2kT0::I64;
           R2 = lvl36_r2j6C_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl37_r2j6D_info" {
     lvl37_r2j6D_info:
         const lvl37_r2j6D_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.480364029 UTC

[section ""cstring" . lvl38_r2j6E_bytes" {
     lvl38_r2j6E_bytes:
         I8[] [67,117,114,114,101,110,99,121,83,121,109,98,111,108]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.482994527 UTC

[section ""data" . lvl39_r2j6F_closure" {
     lvl39_r2j6F_closure:
         const lvl39_r2j6F_info;
         const 0;
         const 0;
         const 0;
 },
 lvl39_r2j6F_entry() //  [R1]
         { []
         }
     {offset
       c2kTk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kTl; else goto c2kTm;
       c2kTl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kTm: // global
           (_c2kTh::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2kTh::I64 == 0) goto c2kTj; else goto c2kTi;
       c2kTj: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2kTi: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2kTh::I64;
           R2 = lvl38_r2j6E_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl39_r2j6F_info" {
     lvl39_r2j6F_info:
         const lvl39_r2j6F_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.487800421 UTC

[section ""cstring" . lvl40_r2j6G_bytes" {
     lvl40_r2j6G_bytes:
         I8[] [77,111,100,105,102,105,101,114,83,121,109,98,111,108]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.490302557 UTC

[section ""data" . lvl41_r2j6H_closure" {
     lvl41_r2j6H_closure:
         const lvl41_r2j6H_info;
         const 0;
         const 0;
         const 0;
 },
 lvl41_r2j6H_entry() //  [R1]
         { []
         }
     {offset
       c2kTB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kTC; else goto c2kTD;
       c2kTC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kTD: // global
           (_c2kTy::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2kTy::I64 == 0) goto c2kTA; else goto c2kTz;
       c2kTA: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2kTz: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2kTy::I64;
           R2 = lvl40_r2j6G_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl41_r2j6H_info" {
     lvl41_r2j6H_info:
         const lvl41_r2j6H_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.494548573 UTC

[section ""cstring" . lvl42_r2j6I_bytes" {
     lvl42_r2j6I_bytes:
         I8[] [79,116,104,101,114,83,121,109,98,111,108]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.498074622 UTC

[section ""data" . lvl43_r2j6J_closure" {
     lvl43_r2j6J_closure:
         const lvl43_r2j6J_info;
         const 0;
         const 0;
         const 0;
 },
 lvl43_r2j6J_entry() //  [R1]
         { []
         }
     {offset
       c2kTS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kTT; else goto c2kTU;
       c2kTT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kTU: // global
           (_c2kTP::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2kTP::I64 == 0) goto c2kTR; else goto c2kTQ;
       c2kTR: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2kTQ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2kTP::I64;
           R2 = lvl42_r2j6I_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl43_r2j6J_info" {
     lvl43_r2j6J_info:
         const lvl43_r2j6J_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.503348085 UTC

[section ""cstring" . lvl44_r2j6K_bytes" {
     lvl44_r2j6K_bytes:
         I8[] [83,112,97,99,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.506716532 UTC

[section ""data" . lvl45_r2j6L_closure" {
     lvl45_r2j6L_closure:
         const lvl45_r2j6L_info;
         const 0;
         const 0;
         const 0;
 },
 lvl45_r2j6L_entry() //  [R1]
         { []
         }
     {offset
       c2kU9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kUa; else goto c2kUb;
       c2kUa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kUb: // global
           (_c2kU6::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2kU6::I64 == 0) goto c2kU8; else goto c2kU7;
       c2kU8: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2kU7: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2kU6::I64;
           R2 = lvl44_r2j6K_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl45_r2j6L_info" {
     lvl45_r2j6L_info:
         const lvl45_r2j6L_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.512103134 UTC

[section ""cstring" . lvl46_r2j6M_bytes" {
     lvl46_r2j6M_bytes:
         I8[] [76,105,110,101,83,101,112,97,114,97,116,111,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.514948981 UTC

[section ""data" . lvl47_r2j6N_closure" {
     lvl47_r2j6N_closure:
         const lvl47_r2j6N_info;
         const 0;
         const 0;
         const 0;
 },
 lvl47_r2j6N_entry() //  [R1]
         { []
         }
     {offset
       c2kUq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kUr; else goto c2kUs;
       c2kUr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kUs: // global
           (_c2kUn::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2kUn::I64 == 0) goto c2kUp; else goto c2kUo;
       c2kUp: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2kUo: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2kUn::I64;
           R2 = lvl46_r2j6M_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl47_r2j6N_info" {
     lvl47_r2j6N_info:
         const lvl47_r2j6N_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.519449019 UTC

[section ""cstring" . lvl48_r2j6O_bytes" {
     lvl48_r2j6O_bytes:
         I8[] [80,97,114,97,103,114,97,112,104,83,101,112,97,114,97,116,111,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.522060926 UTC

[section ""data" . lvl49_r2j6P_closure" {
     lvl49_r2j6P_closure:
         const lvl49_r2j6P_info;
         const 0;
         const 0;
         const 0;
 },
 lvl49_r2j6P_entry() //  [R1]
         { []
         }
     {offset
       c2kUH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kUI; else goto c2kUJ;
       c2kUI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kUJ: // global
           (_c2kUE::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2kUE::I64 == 0) goto c2kUG; else goto c2kUF;
       c2kUG: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2kUF: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2kUE::I64;
           R2 = lvl48_r2j6O_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl49_r2j6P_info" {
     lvl49_r2j6P_info:
         const lvl49_r2j6P_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.526288316 UTC

[section ""cstring" . lvl50_r2j6Q_bytes" {
     lvl50_r2j6Q_bytes:
         I8[] [67,111,110,116,114,111,108]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.529872886 UTC

[section ""data" . lvl51_r2j6R_closure" {
     lvl51_r2j6R_closure:
         const lvl51_r2j6R_info;
         const 0;
         const 0;
         const 0;
 },
 lvl51_r2j6R_entry() //  [R1]
         { []
         }
     {offset
       c2kUY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kUZ; else goto c2kV0;
       c2kUZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kV0: // global
           (_c2kUV::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2kUV::I64 == 0) goto c2kUX; else goto c2kUW;
       c2kUX: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2kUW: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2kUV::I64;
           R2 = lvl50_r2j6Q_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl51_r2j6R_info" {
     lvl51_r2j6R_info:
         const lvl51_r2j6R_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.535548886 UTC

[section ""cstring" . lvl52_r2j6S_bytes" {
     lvl52_r2j6S_bytes:
         I8[] [70,111,114,109,97,116]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.539192987 UTC

[section ""data" . lvl53_r2j6T_closure" {
     lvl53_r2j6T_closure:
         const lvl53_r2j6T_info;
         const 0;
         const 0;
         const 0;
 },
 lvl53_r2j6T_entry() //  [R1]
         { []
         }
     {offset
       c2kVf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kVg; else goto c2kVh;
       c2kVg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kVh: // global
           (_c2kVc::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2kVc::I64 == 0) goto c2kVe; else goto c2kVd;
       c2kVe: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2kVd: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2kVc::I64;
           R2 = lvl52_r2j6S_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl53_r2j6T_info" {
     lvl53_r2j6T_info:
         const lvl53_r2j6T_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.544807902 UTC

[section ""cstring" . lvl54_r2j6U_bytes" {
     lvl54_r2j6U_bytes:
         I8[] [83,117,114,114,111,103,97,116,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.549080452 UTC

[section ""data" . lvl55_r2j6V_closure" {
     lvl55_r2j6V_closure:
         const lvl55_r2j6V_info;
         const 0;
         const 0;
         const 0;
 },
 lvl55_r2j6V_entry() //  [R1]
         { []
         }
     {offset
       c2kVw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kVx; else goto c2kVy;
       c2kVx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kVy: // global
           (_c2kVt::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2kVt::I64 == 0) goto c2kVv; else goto c2kVu;
       c2kVv: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2kVu: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2kVt::I64;
           R2 = lvl54_r2j6U_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl55_r2j6V_info" {
     lvl55_r2j6V_info:
         const lvl55_r2j6V_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.552907215 UTC

[section ""cstring" . lvl56_r2j6W_bytes" {
     lvl56_r2j6W_bytes:
         I8[] [80,114,105,118,97,116,101,85,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.55532597 UTC

[section ""data" . lvl57_r2j6X_closure" {
     lvl57_r2j6X_closure:
         const lvl57_r2j6X_info;
         const 0;
         const 0;
         const 0;
 },
 lvl57_r2j6X_entry() //  [R1]
         { []
         }
     {offset
       c2kVN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kVO; else goto c2kVP;
       c2kVO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kVP: // global
           (_c2kVK::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2kVK::I64 == 0) goto c2kVM; else goto c2kVL;
       c2kVM: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2kVL: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2kVK::I64;
           R2 = lvl56_r2j6W_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl57_r2j6X_info" {
     lvl57_r2j6X_info:
         const lvl57_r2j6X_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.558804425 UTC

[section ""cstring" . lvl58_r2j6Y_bytes" {
     lvl58_r2j6Y_bytes:
         I8[] [78,111,116,65,115,115,105,103,110,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.560930604 UTC

[section ""data" . lvl59_r2j6Z_closure" {
     lvl59_r2j6Z_closure:
         const lvl59_r2j6Z_info;
         const 0;
         const 0;
         const 0;
 },
 lvl59_r2j6Z_entry() //  [R1]
         { []
         }
     {offset
       c2kW4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kW5; else goto c2kW6;
       c2kW5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kW6: // global
           (_c2kW1::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2kW1::I64 == 0) goto c2kW3; else goto c2kW2;
       c2kW3: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2kW2: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2kW1::I64;
           R2 = lvl58_r2j6Y_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl59_r2j6Z_info" {
     lvl59_r2j6Z_info:
         const lvl59_r2j6Z_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.567907334 UTC

[section ""data" . GHC.Unicode.$w$cshowsPrec_closure" {
     GHC.Unicode.$w$cshowsPrec_closure:
         const GHC.Unicode.$w$cshowsPrec_info;
         const 0;
 },
 GHC.Unicode.$w$cshowsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       c2kWR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kWS; else goto c2kWT;
       c2kWS: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$w$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2kWT: // global
           I64[Sp - 16] = block_c2kWi_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2kYm; else goto c2kWj;
       u2kYm: // global
           call _c2kWi(R1) args: 0, res: 0, upd: 0;
       c2kWj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.$w$cshowsPrec_info" {
     GHC.Unicode.$w$cshowsPrec_info:
         const GHC.Unicode.$w$cshowsPrec_entry;
         const 0;
         const 9223372032559808526;
         const 8589934607;
         const S2jm9_srt;
 },
 _c2kWi() //  [R1]
         { []
         }
     {offset
       c2kWi: // global
           _s2j7l::P64 = P64[Sp + 8];
           switch [0 .. 29] (%MO_UU_Conv_W32_W64(I32[I64[R1 - 1] + 20])) {
               case 0 : goto c2kWm;
               case 1 : goto c2kWn;
               case 2 : goto c2kWo;
               case 3 : goto c2kWp;
               case 4 : goto c2kWq;
               case 5 : goto c2kWr;
               case 6 : goto c2kWs;
               case 7 : goto c2kWt;
               case 8 : goto c2kWu;
               case 9 : goto c2kWv;
               case 10 : goto c2kWw;
               case 11 : goto c2kWx;
               case 12 : goto c2kWy;
               case 13 : goto c2kWz;
               case 14 : goto c2kWA;
               case 15 : goto c2kWB;
               case 16 : goto c2kWC;
               case 17 : goto c2kWD;
               case 18 : goto c2kWE;
               case 19 : goto c2kWF;
               case 20 : goto c2kWG;
               case 21 : goto c2kWH;
               case 22 : goto c2kWI;
               case 23 : goto c2kWJ;
               case 24 : goto c2kWK;
               case 25 : goto c2kWL;
               case 26 : goto c2kWM;
               case 27 : goto c2kWN;
               case 28 : goto c2kWO;
               case 29 : goto c2kWP;
           }
       c2kWP: // global
           R3 = _s2j7l::P64;
           R2 = lvl59_r2j6Z_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2kWO: // global
           R3 = _s2j7l::P64;
           R2 = lvl57_r2j6X_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2kWN: // global
           R3 = _s2j7l::P64;
           R2 = lvl55_r2j6V_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2kWM: // global
           R3 = _s2j7l::P64;
           R2 = lvl53_r2j6T_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2kWL: // global
           R3 = _s2j7l::P64;
           R2 = lvl51_r2j6R_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2kWK: // global
           R3 = _s2j7l::P64;
           R2 = lvl49_r2j6P_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2kWJ: // global
           R3 = _s2j7l::P64;
           R2 = lvl47_r2j6N_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2kWI: // global
           R3 = _s2j7l::P64;
           R2 = lvl45_r2j6L_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2kWH: // global
           R3 = _s2j7l::P64;
           R2 = lvl43_r2j6J_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2kWG: // global
           R3 = _s2j7l::P64;
           R2 = lvl41_r2j6H_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2kWF: // global
           R3 = _s2j7l::P64;
           R2 = lvl39_r2j6F_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2kWE: // global
           R3 = _s2j7l::P64;
           R2 = lvl37_r2j6D_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2kWD: // global
           R3 = _s2j7l::P64;
           R2 = lvl35_r2j6B_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2kWC: // global
           R3 = _s2j7l::P64;
           R2 = lvl33_r2j6z_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2kWB: // global
           R3 = _s2j7l::P64;
           R2 = lvl31_r2j6x_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2kWA: // global
           R3 = _s2j7l::P64;
           R2 = lvl29_r2j6v_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2kWz: // global
           R3 = _s2j7l::P64;
           R2 = lvl27_r2j6t_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2kWy: // global
           R3 = _s2j7l::P64;
           R2 = lvl25_r2j6r_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2kWx: // global
           R3 = _s2j7l::P64;
           R2 = lvl23_r2j6p_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2kWw: // global
           R3 = _s2j7l::P64;
           R2 = lvl21_r2j6n_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2kWv: // global
           R3 = _s2j7l::P64;
           R2 = lvl19_r2j6l_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2kWu: // global
           R3 = _s2j7l::P64;
           R2 = lvl17_r2j6j_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2kWt: // global
           R3 = _s2j7l::P64;
           R2 = lvl15_r2j6h_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2kWs: // global
           R3 = _s2j7l::P64;
           R2 = lvl13_r2j6f_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2kWr: // global
           R3 = _s2j7l::P64;
           R2 = lvl11_r2j6d_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2kWq: // global
           R3 = _s2j7l::P64;
           R2 = lvl9_r2j6b_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2kWp: // global
           R3 = _s2j7l::P64;
           R2 = lvl7_r2j69_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2kWo: // global
           R3 = _s2j7l::P64;
           R2 = lvl5_r2j67_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2kWn: // global
           R3 = _s2j7l::P64;
           R2 = lvl3_r2j65_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2kWm: // global
           R3 = _s2j7l::P64;
           R2 = lvl1_r2j63_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2kWi_info" {
     block_c2kWi_info:
         const _c2kWi;
         const 1;
         const 4611686014132420638;
         const S2jm9_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.577280452 UTC

[section ""data" . GHC.Unicode.$fShowGeneralCategory_$cshowsPrec_closure" {
     GHC.Unicode.$fShowGeneralCategory_$cshowsPrec_closure:
         const GHC.Unicode.$fShowGeneralCategory_$cshowsPrec_info;
         const 0;
 },
 GHC.Unicode.$fShowGeneralCategory_$cshowsPrec_entry() //  [R3, R4]
         { []
         }
     {offset
       c2kYD: // global
           _s2j7o::P64 = R3;
           R3 = R4;
           R2 = _s2j7o::P64;
           call GHC.Unicode.$w$cshowsPrec_entry(R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.$fShowGeneralCategory_$cshowsPrec_info" {
     GHC.Unicode.$fShowGeneralCategory_$cshowsPrec_info:
         const GHC.Unicode.$fShowGeneralCategory_$cshowsPrec_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const S2jm9_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.580412776 UTC

[section ""data" . GHC.Unicode.$fShowGeneralCategory1_closure" {
     GHC.Unicode.$fShowGeneralCategory1_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.582705937 UTC

[section ""data" . GHC.Unicode.$fShowGeneralCategory_$cshow_closure" {
     GHC.Unicode.$fShowGeneralCategory_$cshow_closure:
         const GHC.Unicode.$fShowGeneralCategory_$cshow_info;
         const 0;
 },
 GHC.Unicode.$fShowGeneralCategory_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c2kYP: // global
           R3 = GHC.Types.[]_closure+1;
           R2 = R2;
           call GHC.Unicode.$w$cshowsPrec_entry(R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.$fShowGeneralCategory_$cshow_info" {
     GHC.Unicode.$fShowGeneralCategory_$cshow_info:
         const GHC.Unicode.$fShowGeneralCategory_$cshow_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S2jm9_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.586271179 UTC

[section ""data" . GHC.Unicode.$fShowGeneralCategory_$cshowList_closure" {
     GHC.Unicode.$fShowGeneralCategory_$cshowList_closure:
         const GHC.Unicode.$fShowGeneralCategory_$cshowList_info;
         const 0;
 },
 GHC.Unicode.$fShowGeneralCategory_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       c2kZ0: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Unicode.$w$cshowsPrec_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.$fShowGeneralCategory_$cshowList_info" {
     GHC.Unicode.$fShowGeneralCategory_$cshowList_info:
         const GHC.Unicode.$fShowGeneralCategory_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S2jm9_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.58950437 UTC

[section ""data" . GHC.Unicode.$fShowGeneralCategory_closure" {
     GHC.Unicode.$fShowGeneralCategory_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Unicode.$fShowGeneralCategory_$cshowsPrec_closure+3;
         const GHC.Unicode.$fShowGeneralCategory_$cshow_closure+1;
         const GHC.Unicode.$fShowGeneralCategory_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.593043182 UTC

[section ""data" . GHC.Unicode.$fEqGeneralCategory_$c==_closure" {
     GHC.Unicode.$fEqGeneralCategory_$c==_closure:
         const GHC.Unicode.$fEqGeneralCategory_$c==_info;
 },
 GHC.Unicode.$fEqGeneralCategory_$c==_entry() //  [R2, R3]
         { []
         }
     {offset
       c2kZg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kZm; else goto c2kZn;
       c2kZm: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fEqGeneralCategory_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2kZn: // global
           I64[Sp - 16] = block_c2kZc_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2kZH; else goto c2kZd;
       u2kZH: // global
           call _c2kZc(R1) args: 0, res: 0, upd: 0;
       c2kZd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.$fEqGeneralCategory_$c==_info" {
     GHC.Unicode.$fEqGeneralCategory_$c==_info:
         const GHC.Unicode.$fEqGeneralCategory_$c==_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2kZc() //  [R1]
         { []
         }
     {offset
       c2kZc: // global
           _s2j7w::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2kZl_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2j7w::I64;
           if (R1 & 7 != 0) goto u2kZG; else goto c2kZs;
       u2kZG: // global
           call _c2kZl(R1) args: 0, res: 0, upd: 0;
       c2kZs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2kZc_info" {
     block_c2kZc_info:
         const _c2kZc;
         const 1;
         const 30;
 },
 _c2kZl() //  [R1]
         { []
         }
     {offset
       c2kZl: // global
           R1 = I64[((I64[Sp + 8] == %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20])) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2kZl_info" {
     block_c2kZl_info:
         const _c2kZl;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.600864419 UTC

[section ""data" . GHC.Unicode.$fEqGeneralCategory_$c/=_closure" {
     GHC.Unicode.$fEqGeneralCategory_$c/=_closure:
         const GHC.Unicode.$fEqGeneralCategory_$c/=_info;
 },
 GHC.Unicode.$fEqGeneralCategory_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       c2l0d: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2l0j; else goto c2l0k;
       c2l0j: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fEqGeneralCategory_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2l0k: // global
           I64[Sp - 16] = block_c2l09_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2l0I; else goto c2l0a;
       u2l0I: // global
           call _c2l09(R1) args: 0, res: 0, upd: 0;
       c2l0a: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.$fEqGeneralCategory_$c/=_info" {
     GHC.Unicode.$fEqGeneralCategory_$c/=_info:
         const GHC.Unicode.$fEqGeneralCategory_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2l09() //  [R1]
         { []
         }
     {offset
       c2l09: // global
           _s2j7D::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2l0i_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2j7D::I64;
           if (R1 & 7 != 0) goto u2l0H; else goto c2l0p;
       u2l0H: // global
           call _c2l0i(R1) args: 0, res: 0, upd: 0;
       c2l0p: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2l09_info" {
     block_c2l09_info:
         const _c2l09;
         const 1;
         const 30;
 },
 _c2l0i() //  [R1]
         { []
         }
     {offset
       c2l0i: // global
           if (I64[Sp + 8] == %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20])) goto c2l0E; else goto c2l0D;
       c2l0E: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2l0D: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2l0i_info" {
     block_c2l0i_info:
         const _c2l0i;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.607493334 UTC

[section ""data" . GHC.Unicode.$fEqGeneralCategory_closure" {
     GHC.Unicode.$fEqGeneralCategory_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Unicode.$fEqGeneralCategory_$c==_closure+2;
         const GHC.Unicode.$fEqGeneralCategory_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.610749079 UTC

[section ""data" . GHC.Unicode.$fOrdGeneralCategory_$ccompare_closure" {
     GHC.Unicode.$fOrdGeneralCategory_$ccompare_closure:
         const GHC.Unicode.$fOrdGeneralCategory_$ccompare_info;
 },
 GHC.Unicode.$fOrdGeneralCategory_$ccompare_entry() //  [R2, R3]
         { []
         }
     {offset
       c2l1e: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2l1k; else goto c2l1l;
       c2l1k: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fOrdGeneralCategory_$ccompare_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2l1l: // global
           I64[Sp - 16] = block_c2l1a_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2l1P; else goto c2l1b;
       u2l1P: // global
           call _c2l1a(R1) args: 0, res: 0, upd: 0;
       c2l1b: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.$fOrdGeneralCategory_$ccompare_info" {
     GHC.Unicode.$fOrdGeneralCategory_$ccompare_info:
         const GHC.Unicode.$fOrdGeneralCategory_$ccompare_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2l1a() //  [R1]
         { []
         }
     {offset
       c2l1a: // global
           _s2j7K::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2l1j_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2j7K::I64;
           if (R1 & 7 != 0) goto u2l1O; else goto c2l1q;
       u2l1O: // global
           call _c2l1j(R1) args: 0, res: 0, upd: 0;
       c2l1q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2l1a_info" {
     block_c2l1a_info:
         const _c2l1a;
         const 1;
         const 30;
 },
 _c2l1j() //  [R1]
         { []
         }
     {offset
       c2l1j: // global
           _s2j7K::I64 = I64[Sp + 8];
           _s2j7M::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           if (%MO_S_Ge_W64(_s2j7K::I64,
                            _s2j7M::I64)) goto c2l1K; else goto c2l1L;
       c2l1K: // global
           if (_s2j7K::I64 == _s2j7M::I64) goto c2l1I; else goto c2l1H;
       c2l1I: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2l1H: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2l1L: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2l1j_info" {
     block_c2l1j_info:
         const _c2l1j;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.620538392 UTC

[section ""data" . GHC.Unicode.$fOrdGeneralCategory_$c<_closure" {
     GHC.Unicode.$fOrdGeneralCategory_$c<_closure:
         const GHC.Unicode.$fOrdGeneralCategory_$c<_info;
 },
 GHC.Unicode.$fOrdGeneralCategory_$c<_entry() //  [R2, R3]
         { []
         }
     {offset
       c2l2k: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2l2q; else goto c2l2r;
       c2l2q: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fOrdGeneralCategory_$c<_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2l2r: // global
           I64[Sp - 16] = block_c2l2g_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2l2L; else goto c2l2h;
       u2l2L: // global
           call _c2l2g(R1) args: 0, res: 0, upd: 0;
       c2l2h: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.$fOrdGeneralCategory_$c<_info" {
     GHC.Unicode.$fOrdGeneralCategory_$c<_info:
         const GHC.Unicode.$fOrdGeneralCategory_$c<_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2l2g() //  [R1]
         { []
         }
     {offset
       c2l2g: // global
           _s2j7S::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2l2p_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2j7S::I64;
           if (R1 & 7 != 0) goto u2l2K; else goto c2l2w;
       u2l2K: // global
           call _c2l2p(R1) args: 0, res: 0, upd: 0;
       c2l2w: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2l2g_info" {
     block_c2l2g_info:
         const _c2l2g;
         const 1;
         const 30;
 },
 _c2l2p() //  [R1]
         { []
         }
     {offset
       c2l2p: // global
           R1 = I64[(%MO_S_Lt_W64(I64[Sp + 8],
                                  %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20])) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2l2p_info" {
     block_c2l2p_info:
         const _c2l2p;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.629202814 UTC

[section ""data" . GHC.Unicode.$fOrdGeneralCategory_$c<=_closure" {
     GHC.Unicode.$fOrdGeneralCategory_$c<=_closure:
         const GHC.Unicode.$fOrdGeneralCategory_$c<=_info;
 },
 GHC.Unicode.$fOrdGeneralCategory_$c<=_entry() //  [R2, R3]
         { []
         }
     {offset
       c2l3h: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2l3n; else goto c2l3o;
       c2l3n: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fOrdGeneralCategory_$c<=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2l3o: // global
           I64[Sp - 16] = block_c2l3d_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2l3M; else goto c2l3e;
       u2l3M: // global
           call _c2l3d(R1) args: 0, res: 0, upd: 0;
       c2l3e: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.$fOrdGeneralCategory_$c<=_info" {
     GHC.Unicode.$fOrdGeneralCategory_$c<=_info:
         const GHC.Unicode.$fOrdGeneralCategory_$c<=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2l3d() //  [R1]
         { []
         }
     {offset
       c2l3d: // global
           _s2j7Z::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2l3m_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2j7Z::I64;
           if (R1 & 7 != 0) goto u2l3L; else goto c2l3t;
       u2l3L: // global
           call _c2l3m(R1) args: 0, res: 0, upd: 0;
       c2l3t: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2l3d_info" {
     block_c2l3d_info:
         const _c2l3d;
         const 1;
         const 30;
 },
 _c2l3m() //  [R1]
         { []
         }
     {offset
       c2l3m: // global
           if (%MO_S_Ge_W64(I64[Sp + 8],
                            %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]))) goto c2l3H; else goto c2l3I;
       c2l3H: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2l3I: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2l3m_info" {
     block_c2l3m_info:
         const _c2l3m;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.637921127 UTC

[section ""data" . GHC.Unicode.$fOrdGeneralCategory_$cmax_closure" {
     GHC.Unicode.$fOrdGeneralCategory_$cmax_closure:
         const GHC.Unicode.$fOrdGeneralCategory_$cmax_info;
 },
 GHC.Unicode.$fOrdGeneralCategory_$cmax_entry() //  [R2, R3]
         { []
         }
     {offset
       c2l4h: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c2l4n; else goto c2l4o;
       c2l4n: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fOrdGeneralCategory_$cmax_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2l4o: // global
           I64[Sp - 24] = block_c2l4d_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2l4M; else goto c2l4e;
       u2l4M: // global
           call _c2l4d(R1) args: 0, res: 0, upd: 0;
       c2l4e: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.$fOrdGeneralCategory_$cmax_info" {
     GHC.Unicode.$fOrdGeneralCategory_$cmax_info:
         const GHC.Unicode.$fOrdGeneralCategory_$cmax_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2l4d() //  [R1]
         { []
         }
     {offset
       c2l4d: // global
           _s2j86::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp - 8] = block_c2l4m_info;
           R1 = P64[Sp + 8];
           I64[Sp] = _s2j86::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2l4L; else goto c2l4t;
       u2l4L: // global
           call _c2l4m(R1) args: 0, res: 0, upd: 0;
       c2l4t: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2l4d_info" {
     block_c2l4d_info:
         const _c2l4d;
         const 2;
         const 30;
 },
 _c2l4m() //  [R1]
         { []
         }
     {offset
       c2l4m: // global
           if (%MO_S_Ge_W64(I64[Sp + 8],
                            %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]))) goto c2l4H; else goto c2l4I;
       c2l4H: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c2l4I: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2l4m_info" {
     block_c2l4m_info:
         const _c2l4m;
         const 67;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.646897524 UTC

[section ""data" . GHC.Unicode.$fOrdGeneralCategory_$c>=_closure" {
     GHC.Unicode.$fOrdGeneralCategory_$c>=_closure:
         const GHC.Unicode.$fOrdGeneralCategory_$c>=_info;
 },
 GHC.Unicode.$fOrdGeneralCategory_$c>=_entry() //  [R2, R3]
         { []
         }
     {offset
       c2l5j: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2l5p; else goto c2l5q;
       c2l5p: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fOrdGeneralCategory_$c>=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2l5q: // global
           I64[Sp - 16] = block_c2l5f_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2l5O; else goto c2l5g;
       u2l5O: // global
           call _c2l5f(R1) args: 0, res: 0, upd: 0;
       c2l5g: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.$fOrdGeneralCategory_$c>=_info" {
     GHC.Unicode.$fOrdGeneralCategory_$c>=_info:
         const GHC.Unicode.$fOrdGeneralCategory_$c>=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2l5f() //  [R1]
         { []
         }
     {offset
       c2l5f: // global
           _s2j8d::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2l5o_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2j8d::I64;
           if (R1 & 7 != 0) goto u2l5N; else goto c2l5v;
       u2l5N: // global
           call _c2l5o(R1) args: 0, res: 0, upd: 0;
       c2l5v: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2l5f_info" {
     block_c2l5f_info:
         const _c2l5f;
         const 1;
         const 30;
 },
 _c2l5o() //  [R1]
         { []
         }
     {offset
       c2l5o: // global
           if (%MO_S_Ge_W64(I64[Sp + 8],
                            %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]))) goto c2l5J; else goto c2l5K;
       c2l5J: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2l5K: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2l5o_info" {
     block_c2l5o_info:
         const _c2l5o;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.654748548 UTC

[section ""data" . GHC.Unicode.$fOrdGeneralCategory_$c>_closure" {
     GHC.Unicode.$fOrdGeneralCategory_$c>_closure:
         const GHC.Unicode.$fOrdGeneralCategory_$c>_info;
 },
 GHC.Unicode.$fOrdGeneralCategory_$c>_entry() //  [R2, R3]
         { []
         }
     {offset
       c2l6j: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2l6p; else goto c2l6q;
       c2l6p: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fOrdGeneralCategory_$c>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2l6q: // global
           I64[Sp - 16] = block_c2l6f_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2l6K; else goto c2l6g;
       u2l6K: // global
           call _c2l6f(R1) args: 0, res: 0, upd: 0;
       c2l6g: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.$fOrdGeneralCategory_$c>_info" {
     GHC.Unicode.$fOrdGeneralCategory_$c>_info:
         const GHC.Unicode.$fOrdGeneralCategory_$c>_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2l6f() //  [R1]
         { []
         }
     {offset
       c2l6f: // global
           _s2j8k::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2l6o_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2j8k::I64;
           if (R1 & 7 != 0) goto u2l6J; else goto c2l6v;
       u2l6J: // global
           call _c2l6o(R1) args: 0, res: 0, upd: 0;
       c2l6v: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2l6f_info" {
     block_c2l6f_info:
         const _c2l6f;
         const 1;
         const 30;
 },
 _c2l6o() //  [R1]
         { []
         }
     {offset
       c2l6o: // global
           R1 = I64[(%MO_S_Lt_W64(I64[Sp + 8],
                                  %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20])) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2l6o_info" {
     block_c2l6o_info:
         const _c2l6o;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.66343716 UTC

[section ""data" . GHC.Unicode.$fOrdGeneralCategory_$cmin_closure" {
     GHC.Unicode.$fOrdGeneralCategory_$cmin_closure:
         const GHC.Unicode.$fOrdGeneralCategory_$cmin_info;
 },
 GHC.Unicode.$fOrdGeneralCategory_$cmin_entry() //  [R2, R3]
         { []
         }
     {offset
       c2l7g: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c2l7m; else goto c2l7n;
       c2l7m: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fOrdGeneralCategory_$cmin_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2l7n: // global
           I64[Sp - 24] = block_c2l7c_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2l7L; else goto c2l7d;
       u2l7L: // global
           call _c2l7c(R1) args: 0, res: 0, upd: 0;
       c2l7d: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.$fOrdGeneralCategory_$cmin_info" {
     GHC.Unicode.$fOrdGeneralCategory_$cmin_info:
         const GHC.Unicode.$fOrdGeneralCategory_$cmin_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2l7c() //  [R1]
         { []
         }
     {offset
       c2l7c: // global
           _s2j8r::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp - 8] = block_c2l7l_info;
           R1 = P64[Sp + 8];
           I64[Sp] = _s2j8r::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2l7K; else goto c2l7s;
       u2l7K: // global
           call _c2l7l(R1) args: 0, res: 0, upd: 0;
       c2l7s: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2l7c_info" {
     block_c2l7c_info:
         const _c2l7c;
         const 2;
         const 30;
 },
 _c2l7l() //  [R1]
         { []
         }
     {offset
       c2l7l: // global
           if (%MO_S_Ge_W64(I64[Sp + 8],
                            %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]))) goto c2l7G; else goto c2l7H;
       c2l7G: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c2l7H: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2l7l_info" {
     block_c2l7l_info:
         const _c2l7l;
         const 67;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.67024295 UTC

[section ""data" . GHC.Unicode.$fOrdGeneralCategory_closure" {
     GHC.Unicode.$fOrdGeneralCategory_closure:
         const GHC.Classes.C:Ord_con_info;
         const GHC.Unicode.$fEqGeneralCategory_closure+1;
         const GHC.Unicode.$fOrdGeneralCategory_$ccompare_closure+2;
         const GHC.Unicode.$fOrdGeneralCategory_$c<_closure+2;
         const GHC.Unicode.$fOrdGeneralCategory_$c<=_closure+2;
         const GHC.Unicode.$fOrdGeneralCategory_$c>_closure+2;
         const GHC.Unicode.$fOrdGeneralCategory_$c>=_closure+2;
         const GHC.Unicode.$fOrdGeneralCategory_$cmax_closure+2;
         const GHC.Unicode.$fOrdGeneralCategory_$cmin_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.673356297 UTC

[section ""data" . GHC.Unicode.$fEnumGeneralCategory_$cfromEnum_closure" {
     GHC.Unicode.$fEnumGeneralCategory_$cfromEnum_closure:
         const GHC.Unicode.$fEnumGeneralCategory_$cfromEnum_info;
 },
 GHC.Unicode.$fEnumGeneralCategory_$cfromEnum_entry() //  [R2]
         { []
         }
     {offset
       c2l8j: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2l8p; else goto c2l8q;
       c2l8p: // global
           R2 = R2;
           R1 = GHC.Unicode.$fEnumGeneralCategory_$cfromEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2l8q: // global
           I64[Sp - 8] = block_c2l8f_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2l8B; else goto c2l8g;
       u2l8B: // global
           call _c2l8f(R1) args: 0, res: 0, upd: 0;
       c2l8g: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.$fEnumGeneralCategory_$cfromEnum_info" {
     GHC.Unicode.$fEnumGeneralCategory_$cfromEnum_info:
         const GHC.Unicode.$fEnumGeneralCategory_$cfromEnum_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2l8f() //  [R1]
         { []
         }
     {offset
       c2l8f: // global
           I64[Sp] = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           call _c2l8m() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2l8f_info" {
     block_c2l8f_info:
         const _c2l8f;
         const 0;
         const 30;
 },
 _c2l8m() //  []
         { []
         }
     {offset
       c2l8m: // global
           Hp = Hp + 16;
           _s2j8x::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c2l8w; else goto c2l8v;
       c2l8w: // global
           HpAlloc = 16;
           I64[Sp] = block_c2l8l_info;
           R1 = _s2j8x::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c2l8v: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2j8x::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2l8l() //  [R1]
         { []
         }
     {offset
       c2l8l: // global
           I64[Sp] = R1;
           call _c2l8m() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2l8l_info" {
     block_c2l8l_info:
         const _c2l8l;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.682594617 UTC

[section ""data" . GHC.Unicode.$fIxGeneralCategory_$cunsafeIndex_closure" {
     GHC.Unicode.$fIxGeneralCategory_$cunsafeIndex_closure:
         const GHC.Unicode.$fIxGeneralCategory_$cunsafeIndex_info;
 },
 GHC.Unicode.$fIxGeneralCategory_$cunsafeIndex_entry() //  [R2, R3]
         { []
         }
     {offset
       c2l93: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2l9q; else goto c2l9r;
       c2l9q: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fIxGeneralCategory_$cunsafeIndex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2l9r: // global
           I64[Sp - 16] = block_c2l90_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2l9I; else goto c2l91;
       u2l9I: // global
           call _c2l90(R1) args: 0, res: 0, upd: 0;
       c2l91: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.$fIxGeneralCategory_$cunsafeIndex_info" {
     GHC.Unicode.$fIxGeneralCategory_$cunsafeIndex_info:
         const GHC.Unicode.$fIxGeneralCategory_$cunsafeIndex_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2l90() //  [R1]
         { []
         }
     {offset
       c2l90: // global
           I64[Sp] = block_c2l96_info;
           R1 = P64[R1 + 7];
           if (R1 & 7 != 0) goto u2l9H; else goto c2l97;
       u2l9H: // global
           call _c2l96(R1) args: 0, res: 0, upd: 0;
       c2l97: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2l90_info" {
     block_c2l90_info:
         const _c2l90;
         const 1;
         const 30;
 },
 _c2l96() //  [R1]
         { []
         }
     {offset
       c2l96: // global
           _s2j8E::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2l9e_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2j8E::I64;
           if (R1 & 7 != 0) goto u2l9J; else goto c2l9f;
       u2l9J: // global
           call _c2l9e(R1) args: 0, res: 0, upd: 0;
       c2l9f: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2l96_info" {
     block_c2l96_info:
         const _c2l96;
         const 1;
         const 30;
 },
 _c2l9e() //  [R1]
         { []
         }
     {offset
       c2l9e: // global
           I64[Sp] = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           call _c2l9k() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2l9e_info" {
     block_c2l9e_info:
         const _c2l9e;
         const 65;
         const 30;
 },
 _c2l9k() //  []
         { []
         }
     {offset
       c2l9k: // global
           Hp = Hp + 16;
           _s2j8G::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c2l9C; else goto c2l9B;
       c2l9C: // global
           HpAlloc = 16;
           I64[Sp] = block_c2l9j_info;
           R1 = _s2j8G::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c2l9B: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2j8G::I64 - I64[Sp + 8];
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2l9j() //  [R1]
         { []
         }
     {offset
       c2l9j: // global
           I64[Sp] = R1;
           call _c2l9k() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2l9j_info" {
     block_c2l9j_info:
         const _c2l9j;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.696381662 UTC

[section ""data" . GHC.Unicode.$fIxGeneralCategory_$cinRange_closure" {
     GHC.Unicode.$fIxGeneralCategory_$cinRange_closure:
         const GHC.Unicode.$fIxGeneralCategory_$cinRange_info;
 },
 GHC.Unicode.$fIxGeneralCategory_$cinRange_entry() //  [R2, R3]
         { []
         }
     {offset
       c2lap: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2laJ; else goto c2laK;
       c2laJ: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fIxGeneralCategory_$cinRange_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2laK: // global
           I64[Sp - 16] = block_c2lam_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2lbh; else goto c2lan;
       u2lbh: // global
           call _c2lam(R1) args: 0, res: 0, upd: 0;
       c2lan: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.$fIxGeneralCategory_$cinRange_info" {
     GHC.Unicode.$fIxGeneralCategory_$cinRange_info:
         const GHC.Unicode.$fIxGeneralCategory_$cinRange_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2lam() //  [R1]
         { []
         }
     {offset
       c2lam: // global
           I64[Sp - 8] = block_c2las_info;
           _s2j8M::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2j8M::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2lbg; else goto c2lat;
       u2lbg: // global
           call _c2las(R1) args: 0, res: 0, upd: 0;
       c2lat: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2lam_info" {
     block_c2lam_info:
         const _c2lam;
         const 1;
         const 30;
 },
 _c2las() //  [R1]
         { []
         }
     {offset
       c2las: // global
           _s2j8O::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2laA_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2j8O::I64;
           if (R1 & 7 != 0) goto u2lbi; else goto c2laB;
       u2lbi: // global
           call _c2laA(R1) args: 0, res: 0, upd: 0;
       c2laB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2las_info" {
     block_c2las_info:
         const _c2las;
         const 2;
         const 30;
 },
 _c2laA() //  [R1]
         { []
         }
     {offset
       c2laA: // global
           _s2j8Q::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2laI_info;
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s2j8Q::I64;
           if (R1 & 7 != 0) goto u2lbj; else goto c2laU;
       u2lbj: // global
           call _c2laI(R1) args: 0, res: 0, upd: 0;
       c2laU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2laA_info" {
     block_c2laA_info:
         const _c2laA;
         const 66;
         const 30;
 },
 _c2laI() //  [R1]
         { []
         }
     {offset
       c2laI: // global
           _s2j8S::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           if (%MO_S_Lt_W64(_s2j8S::I64,
                            I64[Sp + 8])) goto c2lb8; else goto c2lb9;
       c2lb8: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2lb9: // global
           R1 = I64[(%MO_S_Le_W64(_s2j8S::I64,
                                  I64[Sp + 16]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2laI_info" {
     block_c2laI_info:
         const _c2laI;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.711533187 UTC

[section ""data" . GHC.Unicode.$w$crange_closure" {
     GHC.Unicode.$w$crange_closure:
         const GHC.Unicode.$w$crange_info;
 },
 sat_s2j97_entry() //  [R1]
         { []
         }
     {offset
       c2lct: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lcu; else goto c2lcv;
       c2lcu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lcv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2j93::I64 = I64[R1 + 32];
           if (_s2j93::I64 == I64[R1 + 24]) goto c2lcs; else goto c2lcr;
       c2lcs: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c2lcr: // global
           R2 = _s2j93::I64 + 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_s2j92_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2j97_info" {
     sat_s2j97_info:
         const sat_s2j97_entry;
         const 8589934593;
         const 15;
 },
 sat_s2j94_entry() //  [R1]
         { []
         }
     {offset
       c2lcC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lcD; else goto c2lcE;
       c2lcD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lcE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2j94_info" {
     sat_s2j94_info:
         const sat_s2j94_entry;
         const 4294967296;
         const 17;
 },
 go_s2j92_entry() //  [R1, R2]
         { []
         }
     {offset
       c2lcG: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c2lcK; else goto c2lcJ;
       c2lcK: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2lcJ: // global
           _s2j90::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s2j97_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s2j90::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s2j94_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_s2j92_info" {
     go_s2j92_info:
         const go_s2j92_entry;
         const 4294967296;
         const 10;
         const 4294967300;
 },
 GHC.Unicode.$w$crange_entry() //  [R2, R3]
         { []
         }
     {offset
       c2lcL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lcM; else goto c2lcN;
       c2lcM: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$w$crange_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2lcN: // global
           I64[Sp - 16] = block_c2lbW_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2ld8; else goto c2lbX;
       u2ld8: // global
           call _c2lbW(R1) args: 0, res: 0, upd: 0;
       c2lbX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.$w$crange_info" {
     GHC.Unicode.$w$crange_info:
         const GHC.Unicode.$w$crange_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2lbW() //  [R1]
         { []
         }
     {offset
       c2lbW: // global
           _s2j8Y::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2lc4_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2j8Y::I64;
           if (R1 & 7 != 0) goto u2ld5; else goto c2lc5;
       u2ld5: // global
           call _c2lc4(R1) args: 0, res: 0, upd: 0;
       c2lc5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2lbW_info" {
     block_c2lbW_info:
         const _c2lbW;
         const 1;
         const 30;
 },
 _c2lc4() //  [R1]
         { []
         }
     {offset
       c2lc4: // global
           I64[Sp] = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           call _c2lca() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2lc4_info" {
     block_c2lc4_info:
         const _c2lc4;
         const 65;
         const 30;
 },
 _c2lca() //  []
         { []
         }
     {offset
       c2lca: // global
           Hp = Hp + 16;
           _s2j90::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c2lcX; else goto c2lcW;
       c2lcX: // global
           HpAlloc = 16;
           I64[Sp] = block_c2lc9_info;
           R1 = _s2j90::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c2lcW: // global
           _s2j8Y::I64 = I64[Sp + 8];
           if (%MO_S_Le_W64(_s2j8Y::I64,
                            _s2j90::I64)) goto c2lcZ; else goto c2ld0;
       c2lcZ: // global
           I64[Hp - 8] = go_s2j92_info;
           I64[Hp] = _s2j90::I64;
           R2 = _s2j8Y::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call go_s2j92_entry(R2, R1) args: 8, res: 0, upd: 8;
       c2ld0: // global
           Hp = Hp - 16;
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2lc9() //  [R1]
         { []
         }
     {offset
       c2lc9: // global
           I64[Sp] = R1;
           call _c2lca() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2lc9_info" {
     block_c2lc9_info:
         const _c2lc9;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.726472136 UTC

[section ""data" . GHC.Unicode.$fIxGeneralCategory_$crange_closure" {
     GHC.Unicode.$fIxGeneralCategory_$crange_closure:
         const GHC.Unicode.$fIxGeneralCategory_$crange_info;
 },
 GHC.Unicode.$fIxGeneralCategory_$crange_entry() //  [R2]
         { []
         }
     {offset
       c2ldX: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2ldY; else goto c2ldZ;
       c2ldY: // global
           R2 = R2;
           R1 = GHC.Unicode.$fIxGeneralCategory_$crange_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2ldZ: // global
           I64[Sp - 8] = block_c2ldU_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2le3; else goto c2ldV;
       u2le3: // global
           call _c2ldU(R1) args: 0, res: 0, upd: 0;
       c2ldV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.$fIxGeneralCategory_$crange_info" {
     GHC.Unicode.$fIxGeneralCategory_$crange_info:
         const GHC.Unicode.$fIxGeneralCategory_$crange_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2ldU() //  [R1]
         { []
         }
     {offset
       c2ldU: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Unicode.$w$crange_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2ldU_info" {
     block_c2ldU_info:
         const _c2ldU;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.734139166 UTC

[section ""data" . GHC.Unicode.$fIxGeneralCategory_$crangeSize_closure" {
     GHC.Unicode.$fIxGeneralCategory_$crangeSize_closure:
         const GHC.Unicode.$fIxGeneralCategory_$crangeSize_info;
 },
 GHC.Unicode.$fIxGeneralCategory_$crangeSize_entry() //  [R2]
         { []
         }
     {offset
       c2lek: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lew; else goto c2lex;
       c2lew: // global
           R2 = R2;
           R1 = GHC.Unicode.$fIxGeneralCategory_$crangeSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2lex: // global
           I64[Sp - 8] = block_c2leh_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2lf9; else goto c2lei;
       u2lf9: // global
           call _c2leh(R1) args: 0, res: 0, upd: 0;
       c2lei: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.$fIxGeneralCategory_$crangeSize_info" {
     GHC.Unicode.$fIxGeneralCategory_$crangeSize_info:
         const GHC.Unicode.$fIxGeneralCategory_$crangeSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2leh() //  [R1]
         { []
         }
     {offset
       c2leh: // global
           I64[Sp - 8] = block_c2len_info;
           _s2j9f::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2j9f::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2lf8; else goto c2leo;
       u2lf8: // global
           call _c2len(R1) args: 0, res: 0, upd: 0;
       c2leo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2leh_info" {
     block_c2leh_info:
         const _c2leh;
         const 0;
         const 30;
 },
 _c2len() //  [R1]
         { []
         }
     {offset
       c2len: // global
           _s2j9h::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2lev_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2j9h::I64;
           if (R1 & 7 != 0) goto u2lfa; else goto c2leD;
       u2lfa: // global
           call _c2lev(R1) args: 0, res: 0, upd: 0;
       c2leD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2len_info" {
     block_c2len_info:
         const _c2len;
         const 1;
         const 30;
 },
 _c2lev() //  [R1]
         { []
         }
     {offset
       c2lev: // global
           I64[Sp] = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           call _c2leL() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2lev_info" {
     block_c2lev_info:
         const _c2lev;
         const 65;
         const 30;
 },
 _c2leL() //  []
         { []
         }
     {offset
       c2leL: // global
           Hp = Hp + 16;
           _s2j9j::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c2leP; else goto c2leO;
       c2leP: // global
           HpAlloc = 16;
           I64[Sp] = block_c2leK_info;
           R1 = _s2j9j::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c2leO: // global
           _s2j9h::I64 = I64[Sp + 8];
           if (%MO_S_Lt_W64(_s2j9j::I64,
                            _s2j9h::I64)) goto c2leT; else goto c2lf3;
       c2leT: // global
           Hp = Hp - 16;
           R1 = GHC.Unicode.$fShowGeneralCategory1_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2lf3: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2j9j::I64 - _s2j9h::I64 + 1;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2leK() //  [R1]
         { []
         }
     {offset
       c2leK: // global
           I64[Sp] = R1;
           call _c2leL() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2leK_info" {
     block_c2leK_info:
         const _c2leK;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.747208614 UTC

[section ""data" . GHC.Unicode.$fIxGeneralCategory_$cunsafeRangeSize_closure" {
     GHC.Unicode.$fIxGeneralCategory_$cunsafeRangeSize_closure:
         const GHC.Unicode.$fIxGeneralCategory_$cunsafeRangeSize_info;
 },
 GHC.Unicode.$fIxGeneralCategory_$cunsafeRangeSize_entry() //  [R2]
         { []
         }
     {offset
       c2lfS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lgi; else goto c2lgj;
       c2lgi: // global
           R2 = R2;
           R1 = GHC.Unicode.$fIxGeneralCategory_$cunsafeRangeSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2lgj: // global
           I64[Sp - 8] = block_c2lfP_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2lgA; else goto c2lfQ;
       u2lgA: // global
           call _c2lfP(R1) args: 0, res: 0, upd: 0;
       c2lfQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.$fIxGeneralCategory_$cunsafeRangeSize_info" {
     GHC.Unicode.$fIxGeneralCategory_$cunsafeRangeSize_info:
         const GHC.Unicode.$fIxGeneralCategory_$cunsafeRangeSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2lfP() //  [R1]
         { []
         }
     {offset
       c2lfP: // global
           I64[Sp - 8] = block_c2lfV_info;
           _s2j9q::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2j9q::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2lgz; else goto c2lfW;
       u2lgz: // global
           call _c2lfV(R1) args: 0, res: 0, upd: 0;
       c2lfW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2lfP_info" {
     block_c2lfP_info:
         const _c2lfP;
         const 0;
         const 30;
 },
 _c2lfV() //  [R1]
         { []
         }
     {offset
       c2lfV: // global
           _s2j9s::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2lg3_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2j9s::I64;
           if (R1 & 7 != 0) goto u2lgB; else goto c2lg4;
       u2lgB: // global
           call _c2lg3(R1) args: 0, res: 0, upd: 0;
       c2lg4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2lfV_info" {
     block_c2lfV_info:
         const _c2lfV;
         const 1;
         const 30;
 },
 _c2lg3() //  [R1]
         { []
         }
     {offset
       c2lg3: // global
           I64[Sp] = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           call _c2lg9() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2lg3_info" {
     block_c2lg3_info:
         const _c2lg3;
         const 65;
         const 30;
 },
 _c2lg9() //  []
         { []
         }
     {offset
       c2lg9: // global
           Hp = Hp + 16;
           _s2j9u::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c2lgu; else goto c2lgt;
       c2lgu: // global
           HpAlloc = 16;
           I64[Sp] = block_c2lg8_info;
           R1 = _s2j9u::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c2lgt: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2j9u::I64 - I64[Sp + 8] + 1;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2lg8() //  [R1]
         { []
         }
     {offset
       c2lg8: // global
           I64[Sp] = R1;
           call _c2lg9() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2lg8_info" {
     block_c2lg8_info:
         const _c2lg8;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.761031916 UTC

[section ""data" . GHC.Unicode.$fIxGeneralCategory_$cindex_closure" {
     GHC.Unicode.$fIxGeneralCategory_$cindex_closure:
         const GHC.Unicode.$fIxGeneralCategory_$cindex_info;
         const 0;
 },
 GHC.Unicode.$fIxGeneralCategory_$cindex_entry() //  [R2, R3]
         { []
         }
     {offset
       c2lhi: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2lhC; else goto c2lhD;
       c2lhC: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fIxGeneralCategory_$cindex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2lhD: // global
           I64[Sp - 16] = block_c2lhf_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2lio; else goto c2lhg;
       u2lio: // global
           call _c2lhf(R1) args: 0, res: 0, upd: 0;
       c2lhg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.$fIxGeneralCategory_$cindex_info" {
     GHC.Unicode.$fIxGeneralCategory_$cindex_info:
         const GHC.Unicode.$fIxGeneralCategory_$cindex_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S2jm9_srt+248;
 },
 _c2lhf() //  [R1]
         { []
         }
     {offset
       c2lhf: // global
           I64[Sp - 8] = block_c2lhl_info;
           _s2j9B::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2j9B::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2lin; else goto c2lhm;
       u2lin: // global
           call _c2lhl(R1) args: 0, res: 0, upd: 0;
       c2lhm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2lhf_info" {
     block_c2lhf_info:
         const _c2lhf;
         const 1;
         const 4294967326;
         const S2jm9_srt+248;
 },
 _c2lhl() //  [R1]
         { []
         }
     {offset
       c2lhl: // global
           _s2j9D::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2lht_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2j9D::I64;
           if (R1 & 7 != 0) goto u2lip; else goto c2lhu;
       u2lip: // global
           call _c2lht(R1) args: 0, res: 0, upd: 0;
       c2lhu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2lhl_info" {
     block_c2lhl_info:
         const _c2lhl;
         const 2;
         const 4294967326;
         const S2jm9_srt+248;
 },
 _c2lht() //  [R1]
         { []
         }
     {offset
       c2lht: // global
           _s2j9F::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2lhB_info;
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s2j9F::I64;
           if (R1 & 7 != 0) goto u2liq; else goto c2lhN;
       u2liq: // global
           call _c2lhB(R1) args: 0, res: 0, upd: 0;
       c2lhN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2lht_info" {
     block_c2lht_info:
         const _c2lht;
         const 66;
         const 4294967326;
         const S2jm9_srt+248;
 },
 _c2lhB() //  [R1]
         { []
         }
     {offset
       c2lhB: // global
           I64[Sp] = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           call _c2lhV() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2lhB_info" {
     block_c2lhB_info:
         const _c2lhB;
         const 194;
         const 4294967326;
         const S2jm9_srt+248;
 },
 _c2lhV() //  []
         { []
         }
     {offset
       c2lhV: // global
           Hp = Hp + 16;
           _s2j9H::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c2lhZ; else goto c2lhY;
       c2lhZ: // global
           HpAlloc = 16;
           I64[Sp] = block_c2lhU_info;
           R1 = _s2j9H::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c2lhY: // global
           _s2j9D::I64 = I64[Sp + 8];
           if (%MO_S_Lt_W64(_s2j9H::I64,
                            _s2j9D::I64)) goto c2li9; else goto c2lih;
       c2lih: // global
           if (%MO_S_Gt_W64(_s2j9H::I64,
                            I64[Sp + 16])) goto c2li9; else goto c2lig;
       c2li9: // global
           Hp = Hp - 16;
           R1 = GHC.Arr.hopelessIndexError_closure;
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c2lig: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2j9H::I64 - _s2j9D::I64;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2lhU() //  [R1]
         { []
         }
     {offset
       c2lhU: // global
           I64[Sp] = R1;
           call _c2lhV() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2lhU_info" {
     block_c2lhU_info:
         const _c2lhU;
         const 194;
         const 4294967326;
         const S2jm9_srt+248;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.774969648 UTC

[section ""data" . GHC.Unicode.$fIxGeneralCategory_closure" {
     GHC.Unicode.$fIxGeneralCategory_closure:
         const GHC.Arr.C:Ix_con_info;
         const GHC.Unicode.$fOrdGeneralCategory_closure+1;
         const GHC.Unicode.$fIxGeneralCategory_$crange_closure+1;
         const GHC.Unicode.$fIxGeneralCategory_$cindex_closure+2;
         const GHC.Unicode.$fIxGeneralCategory_$cunsafeIndex_closure+2;
         const GHC.Unicode.$fIxGeneralCategory_$cinRange_closure+2;
         const GHC.Unicode.$fIxGeneralCategory_$crangeSize_closure+1;
         const GHC.Unicode.$fIxGeneralCategory_$cunsafeRangeSize_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.776901088 UTC

[section ""cstring" . GHC.Unicode.$trModule4_bytes" {
     GHC.Unicode.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.779404126 UTC

[section ""data" . loc_r2j70_closure" {
     loc_r2j70_closure:
         const loc_r2j70_info;
         const 0;
         const 0;
         const 0;
 },
 loc_r2j70_entry() //  [R1]
         { []
         }
     {offset
       c2ljf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2ljg; else goto c2ljh;
       c2ljg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2ljh: // global
           (_c2ljc::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2ljc::I64 == 0) goto c2lje; else goto c2ljd;
       c2lje: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2ljd: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2ljc::I64;
           R2 = GHC.Unicode.$trModule4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . loc_r2j70_info" {
     loc_r2j70_info:
         const loc_r2j70_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.783975429 UTC

[section ""cstring" . GHC.Unicode.$trModule2_bytes" {
     GHC.Unicode.$trModule2_bytes:
         I8[] [71,72,67,46,85,110,105,99,111,100,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.786640673 UTC

[section ""data" . loc1_r2j71_closure" {
     loc1_r2j71_closure:
         const loc1_r2j71_info;
         const 0;
         const 0;
         const 0;
 },
 loc1_r2j71_entry() //  [R1]
         { []
         }
     {offset
       c2ljw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2ljx; else goto c2ljy;
       c2ljx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2ljy: // global
           (_c2ljt::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2ljt::I64 == 0) goto c2ljv; else goto c2lju;
       c2ljv: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2lju: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2ljt::I64;
           R2 = GHC.Unicode.$trModule2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . loc1_r2j71_info" {
     loc1_r2j71_info:
         const loc1_r2j71_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.790525033 UTC

[section ""cstring" . loc2_r2j72_bytes" {
     loc2_r2j72_bytes:
         I8[] [46,47,71,72,67,47,85,110,105,99,111,100,101,46,104,115]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.792988161 UTC

[section ""data" . loc3_r2j73_closure" {
     loc3_r2j73_closure:
         const loc3_r2j73_info;
         const 0;
         const 0;
         const 0;
 },
 loc3_r2j73_entry() //  [R1]
         { []
         }
     {offset
       c2ljN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2ljO; else goto c2ljP;
       c2ljO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2ljP: // global
           (_c2ljK::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2ljK::I64 == 0) goto c2ljM; else goto c2ljL;
       c2ljM: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2ljL: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2ljK::I64;
           R2 = loc2_r2j72_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . loc3_r2j73_info" {
     loc3_r2j73_info:
         const loc3_r2j73_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.796849697 UTC

[section ""data" . loc4_r2j74_closure" {
     loc4_r2j74_closure:
         const GHC.Types.I#_con_info;
         const 135;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.798792929 UTC

[section ""data" . loc5_r2j75_closure" {
     loc5_r2j75_closure:
         const GHC.Types.I#_con_info;
         const 20;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.800497812 UTC

[section ""data" . loc6_r2j76_closure" {
     loc6_r2j76_closure:
         const GHC.Types.I#_con_info;
         const 24;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.802197875 UTC

[section ""cstring" . $dIP_r2j77_bytes" {
     $dIP_r2j77_bytes:
         I8[] [101,114,114,111,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.805297345 UTC

[section ""data" . $dIP1_r2j78_closure" {
     $dIP1_r2j78_closure:
         const $dIP1_r2j78_info;
         const 0;
         const 0;
         const 0;
 },
 $dIP1_r2j78_entry() //  [R1]
         { []
         }
     {offset
       c2lk7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lk8; else goto c2lk9;
       c2lk8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lk9: // global
           (_c2lk4::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2lk4::I64 == 0) goto c2lk6; else goto c2lk5;
       c2lk6: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2lk5: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2lk4::I64;
           R2 = $dIP_r2j77_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dIP1_r2j78_info" {
     $dIP1_r2j78_info:
         const $dIP1_r2j78_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.809544929 UTC

[section ""data" . $dIP2_r2j79_closure" {
     $dIP2_r2j79_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const loc_r2j70_closure;
         const loc1_r2j71_closure;
         const loc3_r2j73_closure;
         const loc4_r2j74_closure+1;
         const loc5_r2j75_closure+1;
         const loc4_r2j74_closure+1;
         const loc6_r2j76_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.811506033 UTC

[section ""data" . $dIP3_r2j7a_closure" {
     $dIP3_r2j7a_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const $dIP1_r2j78_closure;
         const $dIP2_r2j79_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.8133074 UTC

[section ""cstring" . lvl60_r2j7b_bytes" {
     lvl60_r2j7b_bytes:
         I8[] [41,32,105,115,32,111,117,116,115,105,100,101,32,111,102,32,101,110,117,109,101,114,97,116,105,111,110,39,115,32,114,97,110,103,101,32,40,48,44]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.81495944 UTC

[section ""cstring" . lvl61_r2j7c_bytes" {
     lvl61_r2j7c_bytes:
         I8[] [41]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.817290907 UTC

[section ""data" . lvl62_r2j7d_closure" {
     lvl62_r2j7d_closure:
         const lvl62_r2j7d_info;
         const 0;
         const 0;
         const 0;
 },
 lvl62_r2j7d_entry() //  [R1]
         { []
         }
     {offset
       c2lkr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lks; else goto c2lkt;
       c2lks: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lkt: // global
           (_c2lko::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2lko::I64 == 0) goto c2lkq; else goto c2lkp;
       c2lkq: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2lkp: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2lko::I64;
           R2 = lvl61_r2j7c_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl62_r2j7d_info" {
     lvl62_r2j7d_info:
         const lvl62_r2j7d_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.822136504 UTC

[section ""data" . lvl63_r2j7e_closure" {
     lvl63_r2j7e_closure:
         const lvl63_r2j7e_info;
         const 0;
         const 0;
         const 0;
 },
 lvl63_r2j7e_entry() //  [R1]
         { []
         }
     {offset
       c2lkK: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2lkL; else goto c2lkM;
       c2lkL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lkM: // global
           (_c2lkE::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2lkE::I64 == 0) goto c2lkG; else goto c2lkF;
       c2lkG: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2lkF: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2lkE::I64;
           I64[Sp - 24] = block_c2lkH_info;
           R4 = lvl62_r2j7d_closure;
           R3 = 29;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl63_r2j7e_info" {
     lvl63_r2j7e_info:
         const lvl63_r2j7e_entry;
         const 0;
         const 4294967317;
         const S2jm9_srt+264;
 },
 _c2lkH() //  [R1, R2]
         { []
         }
     {offset
       c2lkH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2lkP; else goto c2lkO;
       c2lkP: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c2lkO: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c2lkH_info" {
     block_c2lkH_info:
         const _c2lkH;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.829109259 UTC

[section ""data" . lvl64_r2j7f_closure" {
     lvl64_r2j7f_closure:
         const lvl64_r2j7f_info;
         const 0;
         const 0;
         const 0;
 },
 lvl64_r2j7f_entry() //  [R1]
         { []
         }
     {offset
       c2ll7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2ll8; else goto c2ll9;
       c2ll8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2ll9: // global
           (_c2ll4::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2ll4::I64 == 0) goto c2ll6; else goto c2ll5;
       c2ll6: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2ll5: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2ll4::I64;
           R3 = lvl63_r2j7e_closure;
           R2 = lvl60_r2j7b_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl64_r2j7f_info" {
     lvl64_r2j7f_info:
         const lvl64_r2j7f_entry;
         const 0;
         const 4294967317;
         const S2jm9_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.833035863 UTC

[section ""cstring" . lvl65_r2j7g_bytes" {
     lvl65_r2j7g_bytes:
         I8[] [116,111,69,110,117,109,123,71,101,110,101,114,97,108,67,97,116,101,103,111,114,121,125,58,32,116,97,103,32,40]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.836667883 UTC

[section ""data" . GHC.Unicode.$wlvl_closure" {
     GHC.Unicode.$wlvl_closure:
         const GHC.Unicode.$wlvl_info;
         const 0;
 },
 sat_s2j9S_entry() //  [R1]
         { []
         }
     {offset
       c2llt: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2llu; else goto c2llv;
       c2llu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2llv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c2llq_info;
           R4 = lvl64_r2j7f_closure;
           R3 = I64[R1 + 16];
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2j9S_info" {
     sat_s2j9S_info:
         const sat_s2j9S_entry;
         const 4294967296;
         const 4294967313;
         const S2jm9_srt+280;
 },
 _c2llq() //  [R1, R2]
         { []
         }
     {offset
       c2llq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2lly; else goto c2llx;
       c2lly: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c2llx: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c2llq_info" {
     block_c2llq_info:
         const _c2llq;
         const 0;
         const 30;
 },
 GHC.Unicode.$wlvl_entry() //  [R2]
         { []
         }
     {offset
       c2llB: // global
           _s2j9O::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c2llC; else goto c2llD;
       c2llD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2llF; else goto c2llE;
       c2llF: // global
           HpAlloc = 24;
           goto c2llC;
       c2llC: // global
           R2 = _s2j9O::I64;
           R1 = GHC.Unicode.$wlvl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2llE: // global
           I64[Hp - 16] = sat_s2j9S_info;
           I64[Hp] = _s2j9O::I64;
           I64[Sp - 8] = block_c2llz_info;
           R3 = Hp - 16;
           R2 = lvl65_r2j7g_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.$wlvl_info" {
     GHC.Unicode.$wlvl_info:
         const GHC.Unicode.$wlvl_entry;
         const 0;
         const 64424509454;
         const 4294967300;
         const S2jm9_srt+280;
 },
 _c2llz() //  [R1]
         { []
         }
     {offset
       c2llz: // global
           R3 = R1;
           R2 = $dIP3_r2j7a_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2llz_info" {
     block_c2llz_info:
         const _c2llz;
         const 0;
         const 21474836510;
         const S2jm9_srt+288;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.846018638 UTC

[section ""data" . GHC.Unicode.$w$ctoEnum_closure" {
     GHC.Unicode.$w$ctoEnum_closure:
         const GHC.Unicode.$w$ctoEnum_info;
         const 0;
 },
 GHC.Unicode.$w$ctoEnum_entry() //  [R2]
         { []
         }
     {offset
       c2lm8: // global
           _s2j9U::I64 = R2;
           if (%MO_S_Lt_W64(R2, 0)) goto c2lmg; else goto c2lm7;
       c2lm7: // global
           if (%MO_S_Gt_W64(_s2j9U::I64, 29)) goto c2lmg; else goto c2lmh;
       c2lmg: // global
           R2 = _s2j9U::I64;
           call GHC.Unicode.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
       c2lmh: // global
           R1 = I64[(_s2j9U::I64 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.$w$ctoEnum_info" {
     GHC.Unicode.$w$ctoEnum_info:
         const GHC.Unicode.$w$ctoEnum_entry;
         const 0;
         const 4294967310;
         const 4294967300;
         const S2jm9_srt+296;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.850716009 UTC

[section ""data" . GHC.Unicode.$fEnumGeneralCategory_$ctoEnum_closure" {
     GHC.Unicode.$fEnumGeneralCategory_$ctoEnum_closure:
         const GHC.Unicode.$fEnumGeneralCategory_$ctoEnum_info;
         const 0;
 },
 GHC.Unicode.$fEnumGeneralCategory_$ctoEnum_entry() //  [R2]
         { []
         }
     {offset
       c2lmv: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2lmw; else goto c2lmx;
       c2lmw: // global
           R2 = R2;
           R1 = GHC.Unicode.$fEnumGeneralCategory_$ctoEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2lmx: // global
           I64[Sp - 8] = block_c2lms_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2lmB; else goto c2lmt;
       u2lmB: // global
           call _c2lms(R1) args: 0, res: 0, upd: 0;
       c2lmt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.$fEnumGeneralCategory_$ctoEnum_info" {
     GHC.Unicode.$fEnumGeneralCategory_$ctoEnum_info:
         const GHC.Unicode.$fEnumGeneralCategory_$ctoEnum_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S2jm9_srt+312;
 },
 _c2lms() //  [R1]
         { []
         }
     {offset
       c2lms: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Unicode.$w$ctoEnum_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2lms_info" {
     block_c2lms_info:
         const _c2lms;
         const 0;
         const 4294967326;
         const S2jm9_srt+320;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.8579975 UTC

[section ""data" . GHC.Unicode.$fEnumGeneralCategory_go_closure" {
     GHC.Unicode.$fEnumGeneralCategory_go_closure:
         const GHC.Unicode.$fEnumGeneralCategory_go_info;
 },
 sat_s2ja4_entry() //  [R1]
         { []
         }
     {offset
       c2lmX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lmY; else goto c2lmZ;
       c2lmY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lmZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2ja2::I64 = I64[R1 + 16];
           if (_s2ja2::I64 != 29) goto c2lmV; else goto c2lmW;
       c2lmV: // global
           R2 = _s2ja2::I64 + 1;
           Sp = Sp - 16;
           call GHC.Unicode.$fEnumGeneralCategory_go_entry(R2) args: 24, res: 0, upd: 24;
       c2lmW: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2ja4_info" {
     sat_s2ja4_info:
         const sat_s2ja4_entry;
         const 4294967296;
         const 17;
 },
 sat_s2ja1_entry() //  [R1]
         { []
         }
     {offset
       c2ln6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2ln7; else goto c2ln8;
       c2ln7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2ln8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2ja1_info" {
     sat_s2ja1_info:
         const sat_s2ja1_entry;
         const 4294967296;
         const 17;
 },
 GHC.Unicode.$fEnumGeneralCategory_go_entry() //  [R2]
         { []
         }
     {offset
       c2lna: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c2lne; else goto c2lnd;
       c2lne: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.Unicode.$fEnumGeneralCategory_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2lnd: // global
           I64[Hp - 64] = sat_s2ja4_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s2ja1_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.$fEnumGeneralCategory_go_info" {
     GHC.Unicode.$fEnumGeneralCategory_go_info:
         const GHC.Unicode.$fEnumGeneralCategory_go_entry;
         const 0;
         const 14;
         const 4294967300;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.866162958 UTC

[section ""data" . GHC.Unicode.$fEnumGeneralCategory_$cenumFrom_closure" {
     GHC.Unicode.$fEnumGeneralCategory_$cenumFrom_closure:
         const GHC.Unicode.$fEnumGeneralCategory_$cenumFrom_info;
 },
 GHC.Unicode.$fEnumGeneralCategory_$cenumFrom_entry() //  [R2]
         { []
         }
     {offset
       c2lnF: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2lnG; else goto c2lnH;
       c2lnG: // global
           R2 = R2;
           R1 = GHC.Unicode.$fEnumGeneralCategory_$cenumFrom_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2lnH: // global
           I64[Sp - 8] = block_c2lnB_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2lnW; else goto c2lnC;
       u2lnW: // global
           call _c2lnB(R1) args: 0, res: 0, upd: 0;
       c2lnC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.$fEnumGeneralCategory_$cenumFrom_info" {
     GHC.Unicode.$fEnumGeneralCategory_$cenumFrom_info:
         const GHC.Unicode.$fEnumGeneralCategory_$cenumFrom_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2lnB() //  [R1]
         { []
         }
     {offset
       c2lnB: // global
           _s2ja7::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           if (%MO_S_Le_W64(_s2ja7::I64, 29)) goto c2lnT; else goto c2lnU;
       c2lnT: // global
           R2 = _s2ja7::I64;
           Sp = Sp + 8;
           call GHC.Unicode.$fEnumGeneralCategory_go_entry(R2) args: 8, res: 0, upd: 8;
       c2lnU: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2lnB_info" {
     block_c2lnB_info:
         const _c2lnB;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.892209994 UTC

[section ""data" . GHC.Unicode.$fEnumGeneralCategory_$cenumFromThen_closure" {
     GHC.Unicode.$fEnumGeneralCategory_$cenumFromThen_closure:
         const GHC.Unicode.$fEnumGeneralCategory_$cenumFromThen_info;
 },
 sat_s2jaq_entry() //  [R1]
         { []
         }
     {offset
       c2lp1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lp2; else goto c2lp3;
       c2lp2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lp3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s2jal_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2jaq_info" {
     sat_s2jaq_info:
         const sat_s2jaq_entry;
         const 8589934593;
         const 15;
 },
 sat_s2jao_entry() //  [R1]
         { []
         }
     {offset
       c2lp8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lp9; else goto c2lpa;
       c2lp9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lpa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2jao_info" {
     sat_s2jao_info:
         const sat_s2jao_entry;
         const 4294967296;
         const 17;
 },
 sat_s2jar_entry() //  [R1]
         { []
         }
     {offset
       c2lpg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lph; else goto c2lpi;
       c2lph: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lpi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2jar_info" {
     sat_s2jar_info:
         const sat_s2jar_entry;
         const 4294967296;
         const 17;
 },
 go_dn_s2jal_entry() //  [R1, R2]
         { []
         }
     {offset
       c2lpm: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c2lpq; else goto c2lpp;
       c2lpq: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2lpp: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c2lpk; else goto c2lpl;
       c2lpk: // global
           _s2jaj::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s2jaq_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s2jaj::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s2jao_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2lpl: // global
           I64[Hp - 80] = sat_s2jar_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c2lps::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c2lps::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_s2jal_info" {
     go_dn_s2jal_info:
         const go_dn_s2jal_entry;
         const 8589934592;
         const 13;
         const 4294967300;
 },
 sat_s2jas_entry() //  [R1]
         { []
         }
     {offset
       c2lpt: // global
           _s2jas::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c2lpu; else goto c2lpv;
       c2lpv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2lpx; else goto c2lpw;
       c2lpx: // global
           HpAlloc = 24;
           goto c2lpu;
       c2lpu: // global
           R1 = _s2jas::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lpw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2jas::P64;
           _s2jae::I64 = I64[_s2jas::P64 + 24];
           _s2jaj::I64 = _s2jae::I64 - I64[_s2jas::P64 + 16];
           I64[Hp - 16] = go_dn_s2jal_info;
           I64[Hp - 8] = _s2jaj::I64;
           I64[Hp] = 29 - _s2jaj::I64;
           R2 = _s2jae::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s2jal_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2jas_info" {
     sat_s2jas_info:
         const sat_s2jas_entry;
         const 8589934592;
         const 20;
 },
 sat_s2jai_entry() //  [R1]
         { []
         }
     {offset
       c2lpC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lpD; else goto c2lpE;
       c2lpD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lpE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2jai_info" {
     sat_s2jai_info:
         const sat_s2jai_entry;
         const 4294967296;
         const 17;
 },
 sat_s2jau_entry() //  [R1]
         { []
         }
     {offset
       c2lpN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lpO; else goto c2lpP;
       c2lpO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lpP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2jau_info" {
     sat_s2jau_info:
         const sat_s2jau_entry;
         const 4294967296;
         const 17;
 },
 sat_s2jaE_entry() //  [R1]
         { []
         }
     {offset
       c2lqi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lqj; else goto c2lqk;
       c2lqj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lqk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s2jaz_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2jaE_info" {
     sat_s2jaE_info:
         const sat_s2jaE_entry;
         const 8589934593;
         const 15;
 },
 sat_s2jaC_entry() //  [R1]
         { []
         }
     {offset
       c2lqp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lqq; else goto c2lqr;
       c2lqq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lqr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2jaC_info" {
     sat_s2jaC_info:
         const sat_s2jaC_entry;
         const 4294967296;
         const 17;
 },
 sat_s2jaF_entry() //  [R1]
         { []
         }
     {offset
       c2lqx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lqy; else goto c2lqz;
       c2lqy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lqz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2jaF_info" {
     sat_s2jaF_info:
         const sat_s2jaF_entry;
         const 4294967296;
         const 17;
 },
 go_up_s2jaz_entry() //  [R1, R2]
         { []
         }
     {offset
       c2lqD: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c2lqH; else goto c2lqG;
       c2lqH: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2lqG: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c2lqB; else goto c2lqC;
       c2lqB: // global
           _s2jax::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s2jaE_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s2jax::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s2jaC_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2lqC: // global
           I64[Hp - 80] = sat_s2jaF_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c2lqJ::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c2lqJ::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_s2jaz_info" {
     go_up_s2jaz_info:
         const go_up_s2jaz_entry;
         const 8589934592;
         const 13;
         const 4294967300;
 },
 sat_s2jaG_entry() //  [R1]
         { []
         }
     {offset
       c2lqK: // global
           _s2jaG::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c2lqL; else goto c2lqM;
       c2lqM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2lqO; else goto c2lqN;
       c2lqO: // global
           HpAlloc = 24;
           goto c2lqL;
       c2lqL: // global
           R1 = _s2jaG::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lqN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2jaG::P64;
           _s2jae::I64 = I64[_s2jaG::P64 + 24];
           _s2jax::I64 = _s2jae::I64 - I64[_s2jaG::P64 + 16];
           I64[Hp - 16] = go_up_s2jaz_info;
           I64[Hp - 8] = _s2jax::I64;
           I64[Hp] = 29 - _s2jax::I64;
           R2 = _s2jae::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s2jaz_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2jaG_info" {
     sat_s2jaG_info:
         const sat_s2jaG_entry;
         const 8589934592;
         const 20;
 },
 sat_s2jaw_entry() //  [R1]
         { []
         }
     {offset
       c2lqT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lqU; else goto c2lqV;
       c2lqU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lqV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2jaw_info" {
     sat_s2jaw_info:
         const sat_s2jaw_entry;
         const 4294967296;
         const 17;
 },
 sat_s2jaI_entry() //  [R1]
         { []
         }
     {offset
       c2lr4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lr5; else goto c2lr6;
       c2lr5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lr6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2jaI_info" {
     sat_s2jaI_info:
         const sat_s2jaI_entry;
         const 4294967296;
         const 17;
 },
 sat_s2jaT_entry() //  [R1]
         { []
         }
     {offset
       c2lrC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lrD; else goto c2lrE;
       c2lrD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lrE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s2jaO_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2jaT_info" {
     sat_s2jaT_info:
         const sat_s2jaT_entry;
         const 8589934593;
         const 15;
 },
 sat_s2jaR_entry() //  [R1]
         { []
         }
     {offset
       c2lrJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lrK; else goto c2lrL;
       c2lrK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lrL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2jaR_info" {
     sat_s2jaR_info:
         const sat_s2jaR_entry;
         const 4294967296;
         const 17;
 },
 sat_s2jaU_entry() //  [R1]
         { []
         }
     {offset
       c2lrR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lrS; else goto c2lrT;
       c2lrS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lrT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2jaU_info" {
     sat_s2jaU_info:
         const sat_s2jaU_entry;
         const 4294967296;
         const 17;
 },
 go_dn_s2jaO_entry() //  [R1, R2]
         { []
         }
     {offset
       c2lrX: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c2ls1; else goto c2ls0;
       c2ls1: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2ls0: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c2lrV; else goto c2lrW;
       c2lrV: // global
           _s2jaM::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s2jaT_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s2jaM::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s2jaR_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2lrW: // global
           I64[Hp - 80] = sat_s2jaU_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c2ls3::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c2ls3::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_s2jaO_info" {
     go_dn_s2jaO_info:
         const go_dn_s2jaO_entry;
         const 8589934592;
         const 13;
         const 4294967300;
 },
 sat_s2jaV_entry() //  [R1]
         { []
         }
     {offset
       c2ls4: // global
           _s2jaV::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c2ls5; else goto c2ls6;
       c2ls6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2ls8; else goto c2ls7;
       c2ls8: // global
           HpAlloc = 24;
           goto c2ls5;
       c2ls5: // global
           R1 = _s2jaV::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2ls7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2jaV::P64;
           _s2jae::I64 = I64[_s2jaV::P64 + 24];
           _s2jaM::I64 = _s2jae::I64 - I64[_s2jaV::P64 + 16];
           I64[Hp - 16] = go_dn_s2jaO_info;
           I64[Hp - 8] = _s2jaM::I64;
           I64[Hp] = 0 - _s2jaM::I64;
           R2 = _s2jae::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s2jaO_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2jaV_info" {
     sat_s2jaV_info:
         const sat_s2jaV_entry;
         const 8589934592;
         const 20;
 },
 sat_s2jaL_entry() //  [R1]
         { []
         }
     {offset
       c2lsd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lse; else goto c2lsf;
       c2lse: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lsf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2jaL_info" {
     sat_s2jaL_info:
         const sat_s2jaL_entry;
         const 4294967296;
         const 17;
 },
 sat_s2jaX_entry() //  [R1]
         { []
         }
     {offset
       c2lso: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lsp; else goto c2lsq;
       c2lsp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lsq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2jaX_info" {
     sat_s2jaX_info:
         const sat_s2jaX_entry;
         const 4294967296;
         const 17;
 },
 sat_s2jb7_entry() //  [R1]
         { []
         }
     {offset
       c2lsT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lsU; else goto c2lsV;
       c2lsU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lsV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s2jb2_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2jb7_info" {
     sat_s2jb7_info:
         const sat_s2jb7_entry;
         const 8589934593;
         const 15;
 },
 sat_s2jb5_entry() //  [R1]
         { []
         }
     {offset
       c2lt0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lt1; else goto c2lt2;
       c2lt1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lt2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2jb5_info" {
     sat_s2jb5_info:
         const sat_s2jb5_entry;
         const 4294967296;
         const 17;
 },
 sat_s2jb8_entry() //  [R1]
         { []
         }
     {offset
       c2lt8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lt9; else goto c2lta;
       c2lt9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lta: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2jb8_info" {
     sat_s2jb8_info:
         const sat_s2jb8_entry;
         const 4294967296;
         const 17;
 },
 go_up_s2jb2_entry() //  [R1, R2]
         { []
         }
     {offset
       c2lte: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c2lti; else goto c2lth;
       c2lti: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2lth: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c2ltc; else goto c2ltd;
       c2ltc: // global
           _s2jb0::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s2jb7_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s2jb0::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s2jb5_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2ltd: // global
           I64[Hp - 80] = sat_s2jb8_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c2ltk::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c2ltk::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_s2jb2_info" {
     go_up_s2jb2_info:
         const go_up_s2jb2_entry;
         const 8589934592;
         const 13;
         const 4294967300;
 },
 sat_s2jb9_entry() //  [R1]
         { []
         }
     {offset
       c2ltl: // global
           _s2jb9::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c2ltm; else goto c2ltn;
       c2ltn: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2ltp; else goto c2lto;
       c2ltp: // global
           HpAlloc = 24;
           goto c2ltm;
       c2ltm: // global
           R1 = _s2jb9::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lto: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2jb9::P64;
           _s2jae::I64 = I64[_s2jb9::P64 + 24];
           _s2jb0::I64 = _s2jae::I64 - I64[_s2jb9::P64 + 16];
           I64[Hp - 16] = go_up_s2jb2_info;
           I64[Hp - 8] = _s2jb0::I64;
           I64[Hp] = 0 - _s2jb0::I64;
           R2 = _s2jae::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s2jb2_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2jb9_info" {
     sat_s2jb9_info:
         const sat_s2jb9_entry;
         const 8589934592;
         const 20;
 },
 sat_s2jaZ_entry() //  [R1]
         { []
         }
     {offset
       c2ltu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2ltv; else goto c2ltw;
       c2ltv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2ltw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2jaZ_info" {
     sat_s2jaZ_info:
         const sat_s2jaZ_entry;
         const 4294967296;
         const 17;
 },
 sat_s2jbb_entry() //  [R1]
         { []
         }
     {offset
       c2ltF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2ltG; else goto c2ltH;
       c2ltG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2ltH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2jbb_info" {
     sat_s2jbb_info:
         const sat_s2jbb_entry;
         const 4294967296;
         const 17;
 },
 GHC.Unicode.$fEnumGeneralCategory_$cenumFromThen_entry() //  [R2,
                                                               R3]
         { []
         }
     {offset
       c2ltI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2ltJ; else goto c2ltK;
       c2ltJ: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fEnumGeneralCategory_$cenumFromThen_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2ltK: // global
           I64[Sp - 16] = block_c2loe_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2luH; else goto c2lof;
       u2luH: // global
           call _c2loe(R1) args: 0, res: 0, upd: 0;
       c2lof: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.$fEnumGeneralCategory_$cenumFromThen_info" {
     GHC.Unicode.$fEnumGeneralCategory_$cenumFromThen_info:
         const GHC.Unicode.$fEnumGeneralCategory_$cenumFromThen_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2loe() //  [R1]
         { []
         }
     {offset
       c2loe: // global
           _s2jac::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2lom_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2jac::I64;
           if (R1 & 7 != 0) goto u2luE; else goto c2lon;
       u2luE: // global
           call _c2lom(R1) args: 0, res: 0, upd: 0;
       c2lon: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2loe_info" {
     block_c2loe_info:
         const _c2loe;
         const 1;
         const 30;
 },
 _c2lom() //  [R1]
         { []
         }
     {offset
       c2lom: // global
           I64[Sp] = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           call _c2los() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2lom_info" {
     block_c2lom_info:
         const _c2lom;
         const 65;
         const 30;
 },
 _c2los() //  []
         { []
         }
     {offset
       c2los: // global
           Hp = Hp + 80;
           _s2jae::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c2ltU; else goto c2ltT;
       c2ltU: // global
           HpAlloc = 80;
           I64[Sp] = block_c2lor_info;
           R1 = _s2jae::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c2ltT: // global
           _s2jac::I64 = I64[Sp + 8];
           if (%MO_S_Le_W64(_s2jac::I64,
                            _s2jae::I64)) goto c2luf; else goto c2luz;
       c2luf: // global
           if (%MO_S_Lt_W64(_s2jae::I64,
                            _s2jac::I64)) goto c2lu4; else goto c2lud;
       c2lu4: // global
           if (%MO_S_Le_W64(29, _s2jae::I64)) goto c2ltX; else goto c2lu2;
       c2ltX: // global
           I64[Hp - 72] = sat_s2jas_info;
           I64[Hp - 56] = _s2jac::I64;
           I64[Hp - 48] = _s2jae::I64;
           I64[Hp - 40] = sat_s2jai_info;
           I64[Hp - 24] = _s2jac::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2lu2: // global
           if (%MO_S_Gt_W64(29, _s2jac::I64)) goto c2luw; else goto c2lu0;
       c2lu0: // global
           I64[Hp - 72] = sat_s2jau_info;
           I64[Hp - 56] = _s2jac::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c2ltY::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c2ltY::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2lud: // global
           if (%MO_S_Ge_W64(29, _s2jae::I64)) goto c2lu7; else goto c2luc;
       c2lu7: // global
           I64[Hp - 72] = sat_s2jaG_info;
           I64[Hp - 56] = _s2jac::I64;
           I64[Hp - 48] = _s2jae::I64;
           I64[Hp - 40] = sat_s2jaw_info;
           I64[Hp - 24] = _s2jac::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2luc: // global
           if (%MO_S_Lt_W64(29, _s2jac::I64)) goto c2luw; else goto c2lua;
       c2lua: // global
           I64[Hp - 72] = sat_s2jaI_info;
           I64[Hp - 56] = _s2jac::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c2lu8::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c2lu8::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2luz: // global
           if (%MO_S_Lt_W64(_s2jae::I64,
                            _s2jac::I64)) goto c2lup; else goto c2luy;
       c2lup: // global
           if (%MO_S_Le_W64(0, _s2jae::I64)) goto c2lui; else goto c2lun;
       c2lui: // global
           I64[Hp - 72] = sat_s2jaV_info;
           I64[Hp - 56] = _s2jac::I64;
           I64[Hp - 48] = _s2jae::I64;
           I64[Hp - 40] = sat_s2jaL_info;
           I64[Hp - 24] = _s2jac::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2lun: // global
           if (%MO_S_Gt_W64(0, _s2jac::I64)) goto c2luw; else goto c2lul;
       c2lul: // global
           I64[Hp - 72] = sat_s2jaX_info;
           I64[Hp - 56] = _s2jac::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c2luj::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c2luj::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2luy: // global
           if (%MO_S_Ge_W64(0, _s2jae::I64)) goto c2lus; else goto c2lux;
       c2lus: // global
           I64[Hp - 72] = sat_s2jb9_info;
           I64[Hp - 56] = _s2jac::I64;
           I64[Hp - 48] = _s2jae::I64;
           I64[Hp - 40] = sat_s2jaZ_info;
           I64[Hp - 24] = _s2jac::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2lux: // global
           if (%MO_S_Lt_W64(0, _s2jac::I64)) goto c2luw; else goto c2luv;
       c2luw: // global
           Hp = Hp - 80;
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2luv: // global
           I64[Hp - 72] = sat_s2jbb_info;
           I64[Hp - 56] = _s2jac::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c2lut::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c2lut::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2lor() //  [R1]
         { []
         }
     {offset
       c2lor: // global
           I64[Sp] = R1;
           call _c2los() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2lor_info" {
     block_c2lor_info:
         const _c2lor;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.956902196 UTC

[section ""data" . GHC.Unicode.$trModule3_closure" {
     GHC.Unicode.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.959031491 UTC

[section ""data" . GHC.Unicode.$trModule1_closure" {
     GHC.Unicode.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.960952781 UTC

[section ""data" . GHC.Unicode.$trModule_closure" {
     GHC.Unicode.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Unicode.$trModule3_closure+1;
         const GHC.Unicode.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.962867102 UTC

[section ""cstring" . GHC.Unicode.$tcGeneralCategory2_bytes" {
     GHC.Unicode.$tcGeneralCategory2_bytes:
         I8[] [71,101,110,101,114,97,108,67,97,116,101,103,111,114,121]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.96466863 UTC

[section ""data" . GHC.Unicode.$tcGeneralCategory1_closure" {
     GHC.Unicode.$tcGeneralCategory1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tcGeneralCategory2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.966480625 UTC

[section ""data" . GHC.Unicode.$tcGeneralCategory_closure" {
     GHC.Unicode.$tcGeneralCategory_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tcGeneralCategory1_closure+1;
         const GHC.Types.krep$*_closure;
         const 10145990250269206894;
         const 14660269375011335890;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.968306654 UTC

[section ""data" . GHC.Unicode.$tc'ClosePunctuation1_closure" {
     GHC.Unicode.$tc'ClosePunctuation1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Unicode.$tcGeneralCategory_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.970344493 UTC

[section ""cstring" . GHC.Unicode.$tc'UppercaseLetter2_bytes" {
     GHC.Unicode.$tc'UppercaseLetter2_bytes:
         I8[] [39,85,112,112,101,114,99,97,115,101,76,101,116,116,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.972703885 UTC

[section ""data" . GHC.Unicode.$tc'UppercaseLetter1_closure" {
     GHC.Unicode.$tc'UppercaseLetter1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'UppercaseLetter2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.974616378 UTC

[section ""data" . GHC.Unicode.$tc'UppercaseLetter_closure" {
     GHC.Unicode.$tc'UppercaseLetter_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'UppercaseLetter1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 14647285109492872061;
         const 14425225614845259385;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.976530569 UTC

[section ""cstring" . GHC.Unicode.$tc'LowercaseLetter2_bytes" {
     GHC.Unicode.$tc'LowercaseLetter2_bytes:
         I8[] [39,76,111,119,101,114,99,97,115,101,76,101,116,116,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.97838512 UTC

[section ""data" . GHC.Unicode.$tc'LowercaseLetter1_closure" {
     GHC.Unicode.$tc'LowercaseLetter1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'LowercaseLetter2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.980220034 UTC

[section ""data" . GHC.Unicode.$tc'LowercaseLetter_closure" {
     GHC.Unicode.$tc'LowercaseLetter_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'LowercaseLetter1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 6843638521722139917;
         const 11845029203120951590;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.982244387 UTC

[section ""cstring" . GHC.Unicode.$tc'TitlecaseLetter2_bytes" {
     GHC.Unicode.$tc'TitlecaseLetter2_bytes:
         I8[] [39,84,105,116,108,101,99,97,115,101,76,101,116,116,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.984143944 UTC

[section ""data" . GHC.Unicode.$tc'TitlecaseLetter1_closure" {
     GHC.Unicode.$tc'TitlecaseLetter1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'TitlecaseLetter2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.986075653 UTC

[section ""data" . GHC.Unicode.$tc'TitlecaseLetter_closure" {
     GHC.Unicode.$tc'TitlecaseLetter_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'TitlecaseLetter1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 11035134207864173010;
         const 10162510539839760824;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.988041234 UTC

[section ""cstring" . GHC.Unicode.$tc'ModifierLetter2_bytes" {
     GHC.Unicode.$tc'ModifierLetter2_bytes:
         I8[] [39,77,111,100,105,102,105,101,114,76,101,116,116,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.989993915 UTC

[section ""data" . GHC.Unicode.$tc'ModifierLetter1_closure" {
     GHC.Unicode.$tc'ModifierLetter1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'ModifierLetter2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.991782121 UTC

[section ""data" . GHC.Unicode.$tc'ModifierLetter_closure" {
     GHC.Unicode.$tc'ModifierLetter_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'ModifierLetter1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 9531845544999081993;
         const 15142721146394159202;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.993791892 UTC

[section ""cstring" . GHC.Unicode.$tc'OtherLetter2_bytes" {
     GHC.Unicode.$tc'OtherLetter2_bytes:
         I8[] [39,79,116,104,101,114,76,101,116,116,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.995974167 UTC

[section ""data" . GHC.Unicode.$tc'OtherLetter1_closure" {
     GHC.Unicode.$tc'OtherLetter1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'OtherLetter2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.997748765 UTC

[section ""data" . GHC.Unicode.$tc'OtherLetter_closure" {
     GHC.Unicode.$tc'OtherLetter_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'OtherLetter1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 4852466454551376074;
         const 478150797319163725;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:02.999545245 UTC

[section ""cstring" . GHC.Unicode.$tc'NonSpacingMark2_bytes" {
     GHC.Unicode.$tc'NonSpacingMark2_bytes:
         I8[] [39,78,111,110,83,112,97,99,105,110,103,77,97,114,107]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.00190566 UTC

[section ""data" . GHC.Unicode.$tc'NonSpacingMark1_closure" {
     GHC.Unicode.$tc'NonSpacingMark1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'NonSpacingMark2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.003671356 UTC

[section ""data" . GHC.Unicode.$tc'NonSpacingMark_closure" {
     GHC.Unicode.$tc'NonSpacingMark_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'NonSpacingMark1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 11798799283128539890;
         const 8595267121230037978;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.005725494 UTC

[section ""cstring" . GHC.Unicode.$tc'SpacingCombiningMark2_bytes" {
     GHC.Unicode.$tc'SpacingCombiningMark2_bytes:
         I8[] [39,83,112,97,99,105,110,103,67,111,109,98,105,110,105,110,103,77,97,114,107]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.007431626 UTC

[section ""data" . GHC.Unicode.$tc'SpacingCombiningMark1_closure" {
     GHC.Unicode.$tc'SpacingCombiningMark1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'SpacingCombiningMark2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.009368381 UTC

[section ""data" . GHC.Unicode.$tc'SpacingCombiningMark_closure" {
     GHC.Unicode.$tc'SpacingCombiningMark_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'SpacingCombiningMark1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 161806050746895686;
         const 6274417789988196957;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.011353471 UTC

[section ""cstring" . GHC.Unicode.$tc'EnclosingMark2_bytes" {
     GHC.Unicode.$tc'EnclosingMark2_bytes:
         I8[] [39,69,110,99,108,111,115,105,110,103,77,97,114,107]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.013187568 UTC

[section ""data" . GHC.Unicode.$tc'EnclosingMark1_closure" {
     GHC.Unicode.$tc'EnclosingMark1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'EnclosingMark2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.015393356 UTC

[section ""data" . GHC.Unicode.$tc'EnclosingMark_closure" {
     GHC.Unicode.$tc'EnclosingMark_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'EnclosingMark1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 18110486507519489617;
         const 1830565827398073667;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.018037487 UTC

[section ""cstring" . GHC.Unicode.$tc'DecimalNumber2_bytes" {
     GHC.Unicode.$tc'DecimalNumber2_bytes:
         I8[] [39,68,101,99,105,109,97,108,78,117,109,98,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.019802385 UTC

[section ""data" . GHC.Unicode.$tc'DecimalNumber1_closure" {
     GHC.Unicode.$tc'DecimalNumber1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'DecimalNumber2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.021756129 UTC

[section ""data" . GHC.Unicode.$tc'DecimalNumber_closure" {
     GHC.Unicode.$tc'DecimalNumber_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'DecimalNumber1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 7339032513903136575;
         const 4295356444207098462;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.023619332 UTC

[section ""cstring" . GHC.Unicode.$tc'LetterNumber2_bytes" {
     GHC.Unicode.$tc'LetterNumber2_bytes:
         I8[] [39,76,101,116,116,101,114,78,117,109,98,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.025427258 UTC

[section ""data" . GHC.Unicode.$tc'LetterNumber1_closure" {
     GHC.Unicode.$tc'LetterNumber1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'LetterNumber2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.027289799 UTC

[section ""data" . GHC.Unicode.$tc'LetterNumber_closure" {
     GHC.Unicode.$tc'LetterNumber_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'LetterNumber1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 10629256336866531923;
         const 16896950428492761972;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.029160468 UTC

[section ""cstring" . GHC.Unicode.$tc'OtherNumber2_bytes" {
     GHC.Unicode.$tc'OtherNumber2_bytes:
         I8[] [39,79,116,104,101,114,78,117,109,98,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.031239814 UTC

[section ""data" . GHC.Unicode.$tc'OtherNumber1_closure" {
     GHC.Unicode.$tc'OtherNumber1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'OtherNumber2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.033057477 UTC

[section ""data" . GHC.Unicode.$tc'OtherNumber_closure" {
     GHC.Unicode.$tc'OtherNumber_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'OtherNumber1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 10187389108931559810;
         const 2377339607923931442;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.034912782 UTC

[section ""cstring" . GHC.Unicode.$tc'ConnectorPunctuation2_bytes" {
     GHC.Unicode.$tc'ConnectorPunctuation2_bytes:
         I8[] [39,67,111,110,110,101,99,116,111,114,80,117,110,99,116,117,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.036566854 UTC

[section ""data" . GHC.Unicode.$tc'ConnectorPunctuation1_closure" {
     GHC.Unicode.$tc'ConnectorPunctuation1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'ConnectorPunctuation2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.03922265 UTC

[section ""data" . GHC.Unicode.$tc'ConnectorPunctuation_closure" {
     GHC.Unicode.$tc'ConnectorPunctuation_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'ConnectorPunctuation1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 4917643529853318260;
         const 11665519332165151523;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.040968832 UTC

[section ""cstring" . GHC.Unicode.$tc'DashPunctuation2_bytes" {
     GHC.Unicode.$tc'DashPunctuation2_bytes:
         I8[] [39,68,97,115,104,80,117,110,99,116,117,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.042704382 UTC

[section ""data" . GHC.Unicode.$tc'DashPunctuation1_closure" {
     GHC.Unicode.$tc'DashPunctuation1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'DashPunctuation2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.044400745 UTC

[section ""data" . GHC.Unicode.$tc'DashPunctuation_closure" {
     GHC.Unicode.$tc'DashPunctuation_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'DashPunctuation1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 10309144240368445329;
         const 13155144127162508040;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.046176144 UTC

[section ""cstring" . GHC.Unicode.$tc'OpenPunctuation2_bytes" {
     GHC.Unicode.$tc'OpenPunctuation2_bytes:
         I8[] [39,79,112,101,110,80,117,110,99,116,117,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.047853252 UTC

[section ""data" . GHC.Unicode.$tc'OpenPunctuation1_closure" {
     GHC.Unicode.$tc'OpenPunctuation1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'OpenPunctuation2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.050074939 UTC

[section ""data" . GHC.Unicode.$tc'OpenPunctuation_closure" {
     GHC.Unicode.$tc'OpenPunctuation_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'OpenPunctuation1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 11156540492509602203;
         const 14579738194966332373;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.051892851 UTC

[section ""cstring" . GHC.Unicode.$tc'ClosePunctuation3_bytes" {
     GHC.Unicode.$tc'ClosePunctuation3_bytes:
         I8[] [39,67,108,111,115,101,80,117,110,99,116,117,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.053545261 UTC

[section ""data" . GHC.Unicode.$tc'ClosePunctuation2_closure" {
     GHC.Unicode.$tc'ClosePunctuation2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'ClosePunctuation3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.055377794 UTC

[section ""data" . GHC.Unicode.$tc'ClosePunctuation_closure" {
     GHC.Unicode.$tc'ClosePunctuation_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation2_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 2732552725164352280;
         const 2123618155201944931;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.057179259 UTC

[section ""cstring" . GHC.Unicode.$tc'InitialQuote2_bytes" {
     GHC.Unicode.$tc'InitialQuote2_bytes:
         I8[] [39,73,110,105,116,105,97,108,81,117,111,116,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.059472063 UTC

[section ""data" . GHC.Unicode.$tc'InitialQuote1_closure" {
     GHC.Unicode.$tc'InitialQuote1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'InitialQuote2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.061217419 UTC

[section ""data" . GHC.Unicode.$tc'InitialQuote_closure" {
     GHC.Unicode.$tc'InitialQuote_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'InitialQuote1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 15372309041196331722;
         const 15030215702152843543;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.063515485 UTC

[section ""cstring" . GHC.Unicode.$tc'FinalQuote2_bytes" {
     GHC.Unicode.$tc'FinalQuote2_bytes:
         I8[] [39,70,105,110,97,108,81,117,111,116,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.065150061 UTC

[section ""data" . GHC.Unicode.$tc'FinalQuote1_closure" {
     GHC.Unicode.$tc'FinalQuote1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'FinalQuote2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.066909785 UTC

[section ""data" . GHC.Unicode.$tc'FinalQuote_closure" {
     GHC.Unicode.$tc'FinalQuote_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'FinalQuote1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 7492133048483711520;
         const 4486297505861009288;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.068589818 UTC

[section ""cstring" . GHC.Unicode.$tc'OtherPunctuation2_bytes" {
     GHC.Unicode.$tc'OtherPunctuation2_bytes:
         I8[] [39,79,116,104,101,114,80,117,110,99,116,117,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.070502359 UTC

[section ""data" . GHC.Unicode.$tc'OtherPunctuation1_closure" {
     GHC.Unicode.$tc'OtherPunctuation1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'OtherPunctuation2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.072137266 UTC

[section ""data" . GHC.Unicode.$tc'OtherPunctuation_closure" {
     GHC.Unicode.$tc'OtherPunctuation_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'OtherPunctuation1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 17526727746027692027;
         const 9970963912577062569;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.073920377 UTC

[section ""cstring" . GHC.Unicode.$tc'MathSymbol2_bytes" {
     GHC.Unicode.$tc'MathSymbol2_bytes:
         I8[] [39,77,97,116,104,83,121,109,98,111,108]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.075608635 UTC

[section ""data" . GHC.Unicode.$tc'MathSymbol1_closure" {
     GHC.Unicode.$tc'MathSymbol1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'MathSymbol2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.07735678 UTC

[section ""data" . GHC.Unicode.$tc'MathSymbol_closure" {
     GHC.Unicode.$tc'MathSymbol_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'MathSymbol1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 4306295684901311676;
         const 14195098983421669147;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.079754425 UTC

[section ""cstring" . GHC.Unicode.$tc'CurrencySymbol2_bytes" {
     GHC.Unicode.$tc'CurrencySymbol2_bytes:
         I8[] [39,67,117,114,114,101,110,99,121,83,121,109,98,111,108]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.081790831 UTC

[section ""data" . GHC.Unicode.$tc'CurrencySymbol1_closure" {
     GHC.Unicode.$tc'CurrencySymbol1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'CurrencySymbol2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.083698928 UTC

[section ""data" . GHC.Unicode.$tc'CurrencySymbol_closure" {
     GHC.Unicode.$tc'CurrencySymbol_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'CurrencySymbol1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 150101909358894799;
         const 4247883766619991310;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.085567024 UTC

[section ""cstring" . GHC.Unicode.$tc'ModifierSymbol2_bytes" {
     GHC.Unicode.$tc'ModifierSymbol2_bytes:
         I8[] [39,77,111,100,105,102,105,101,114,83,121,109,98,111,108]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.087361849 UTC

[section ""data" . GHC.Unicode.$tc'ModifierSymbol1_closure" {
     GHC.Unicode.$tc'ModifierSymbol1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'ModifierSymbol2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.089280238 UTC

[section ""data" . GHC.Unicode.$tc'ModifierSymbol_closure" {
     GHC.Unicode.$tc'ModifierSymbol_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'ModifierSymbol1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 17930136738185325280;
         const 9680003641195432205;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.091156613 UTC

[section ""cstring" . GHC.Unicode.$tc'OtherSymbol2_bytes" {
     GHC.Unicode.$tc'OtherSymbol2_bytes:
         I8[] [39,79,116,104,101,114,83,121,109,98,111,108]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.092971195 UTC

[section ""data" . GHC.Unicode.$tc'OtherSymbol1_closure" {
     GHC.Unicode.$tc'OtherSymbol1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'OtherSymbol2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.094872331 UTC

[section ""data" . GHC.Unicode.$tc'OtherSymbol_closure" {
     GHC.Unicode.$tc'OtherSymbol_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'OtherSymbol1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 11720563220218392367;
         const 765393478666748433;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.096786928 UTC

[section ""cstring" . GHC.Unicode.$tc'Space2_bytes" {
     GHC.Unicode.$tc'Space2_bytes:
         I8[] [39,83,112,97,99,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.098678603 UTC

[section ""data" . GHC.Unicode.$tc'Space1_closure" {
     GHC.Unicode.$tc'Space1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'Space2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.101205705 UTC

[section ""data" . GHC.Unicode.$tc'Space_closure" {
     GHC.Unicode.$tc'Space_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'Space1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 13451262004661357021;
         const 7623263649021992415;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.103080761 UTC

[section ""cstring" . GHC.Unicode.$tc'LineSeparator2_bytes" {
     GHC.Unicode.$tc'LineSeparator2_bytes:
         I8[] [39,76,105,110,101,83,101,112,97,114,97,116,111,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.10485356 UTC

[section ""data" . GHC.Unicode.$tc'LineSeparator1_closure" {
     GHC.Unicode.$tc'LineSeparator1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'LineSeparator2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.106645574 UTC

[section ""data" . GHC.Unicode.$tc'LineSeparator_closure" {
     GHC.Unicode.$tc'LineSeparator_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'LineSeparator1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 3777504190602031786;
         const 16534792546094157357;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.108566746 UTC

[section ""cstring" . GHC.Unicode.$tc'ParagraphSeparator2_bytes" {
     GHC.Unicode.$tc'ParagraphSeparator2_bytes:
         I8[] [39,80,97,114,97,103,114,97,112,104,83,101,112,97,114,97,116,111,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.111070412 UTC

[section ""data" . GHC.Unicode.$tc'ParagraphSeparator1_closure" {
     GHC.Unicode.$tc'ParagraphSeparator1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'ParagraphSeparator2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.113164409 UTC

[section ""data" . GHC.Unicode.$tc'ParagraphSeparator_closure" {
     GHC.Unicode.$tc'ParagraphSeparator_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'ParagraphSeparator1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 1259977240315406014;
         const 6836752952671088565;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.115393277 UTC

[section ""cstring" . GHC.Unicode.$tc'Control2_bytes" {
     GHC.Unicode.$tc'Control2_bytes:
         I8[] [39,67,111,110,116,114,111,108]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.117141986 UTC

[section ""data" . GHC.Unicode.$tc'Control1_closure" {
     GHC.Unicode.$tc'Control1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'Control2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.118924053 UTC

[section ""data" . GHC.Unicode.$tc'Control_closure" {
     GHC.Unicode.$tc'Control_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'Control1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 3769799789009110362;
         const 7129109849289868145;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.120810416 UTC

[section ""cstring" . GHC.Unicode.$tc'Format2_bytes" {
     GHC.Unicode.$tc'Format2_bytes:
         I8[] [39,70,111,114,109,97,116]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.12313492 UTC

[section ""data" . GHC.Unicode.$tc'Format1_closure" {
     GHC.Unicode.$tc'Format1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'Format2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.125122742 UTC

[section ""data" . GHC.Unicode.$tc'Format_closure" {
     GHC.Unicode.$tc'Format_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'Format1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 15516392160505082493;
         const 8582194312248021938;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.127123879 UTC

[section ""cstring" . GHC.Unicode.$tc'Surrogate2_bytes" {
     GHC.Unicode.$tc'Surrogate2_bytes:
         I8[] [39,83,117,114,114,111,103,97,116,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.128835706 UTC

[section ""data" . GHC.Unicode.$tc'Surrogate1_closure" {
     GHC.Unicode.$tc'Surrogate1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'Surrogate2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.132826349 UTC

[section ""data" . GHC.Unicode.$tc'Surrogate_closure" {
     GHC.Unicode.$tc'Surrogate_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'Surrogate1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 8891432866311764671;
         const 15154926068870472193;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.134779112 UTC

[section ""cstring" . GHC.Unicode.$tc'PrivateUse2_bytes" {
     GHC.Unicode.$tc'PrivateUse2_bytes:
         I8[] [39,80,114,105,118,97,116,101,85,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.136486237 UTC

[section ""data" . GHC.Unicode.$tc'PrivateUse1_closure" {
     GHC.Unicode.$tc'PrivateUse1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'PrivateUse2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.138264885 UTC

[section ""data" . GHC.Unicode.$tc'PrivateUse_closure" {
     GHC.Unicode.$tc'PrivateUse_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'PrivateUse1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 9277443220957795657;
         const 16819524490051355354;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.140034188 UTC

[section ""cstring" . GHC.Unicode.$tc'NotAssigned2_bytes" {
     GHC.Unicode.$tc'NotAssigned2_bytes:
         I8[] [39,78,111,116,65,115,115,105,103,110,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.141838927 UTC

[section ""data" . GHC.Unicode.$tc'NotAssigned1_closure" {
     GHC.Unicode.$tc'NotAssigned1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'NotAssigned2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.143560481 UTC

[section ""data" . GHC.Unicode.$tc'NotAssigned_closure" {
     GHC.Unicode.$tc'NotAssigned_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'NotAssigned1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 6894305772705953782;
         const 14217837899895516928;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.147959267 UTC

[section ""data" . GHC.Unicode.toLower_closure" {
     GHC.Unicode.toLower_closure:
         const GHC.Unicode.toLower_info;
         const 0;
 },
 GHC.Unicode.toLower_entry() //  [R2]
         { []
         }
     {offset
       c2lA2: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2lA3; else goto c2lA4;
       c2lA3: // global
           R2 = R2;
           R1 = GHC.Unicode.toLower_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2lA4: // global
           I64[Sp - 8] = block_c2lzZ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2lAt; else goto c2lA0;
       u2lAt: // global
           call _c2lzZ(R1) args: 0, res: 0, upd: 0;
       c2lA0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.toLower_info" {
     GHC.Unicode.toLower_info:
         const GHC.Unicode.toLower_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S2jm9_srt+328;
 },
 _c2lzZ() //  [R1]
         { []
         }
     {offset
       c2lzZ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2lA9; else goto c2lA8;
       c2lA9: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2lA8: // global
           (_s2jbj::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_towlower(I64[R1 + 7]);
           if (_s2jbj::I64 > 1114111) goto c2lAl; else goto c2lAs;
       c2lAl: // global
           Hp = Hp - 16;
           R2 = _s2jbj::I64;
           Sp = Sp + 8;
           call GHC.Char.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
       c2lAs: // global
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = _s2jbj::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2lzZ_info" {
     block_c2lzZ_info:
         const _c2lzZ;
         const 0;
         const 4294967326;
         const S2jm9_srt+328;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.155119273 UTC

[section ""data" . GHC.Unicode.toUpper_closure" {
     GHC.Unicode.toUpper_closure:
         const GHC.Unicode.toUpper_info;
         const 0;
 },
 GHC.Unicode.toUpper_entry() //  [R2]
         { []
         }
     {offset
       c2lAL: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2lAM; else goto c2lAN;
       c2lAM: // global
           R2 = R2;
           R1 = GHC.Unicode.toUpper_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2lAN: // global
           I64[Sp - 8] = block_c2lAI_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2lBc; else goto c2lAJ;
       u2lBc: // global
           call _c2lAI(R1) args: 0, res: 0, upd: 0;
       c2lAJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.toUpper_info" {
     GHC.Unicode.toUpper_info:
         const GHC.Unicode.toUpper_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const S2jm9_srt+328;
 },
 _c2lAI() //  [R1]
         { []
         }
     {offset
       c2lAI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2lAS; else goto c2lAR;
       c2lAS: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2lAR: // global
           (_s2jbu::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_towupper(I64[R1 + 7]);
           if (_s2jbu::I64 > 1114111) goto c2lB4; else goto c2lBb;
       c2lB4: // global
           Hp = Hp - 16;
           R2 = _s2jbu::I64;
           Sp = Sp + 8;
           call GHC.Char.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
       c2lBb: // global
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = _s2jbu::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2lAI_info" {
     block_c2lAI_info:
         const _c2lAI;
         const 0;
         const 4294967326;
         const S2jm9_srt+328;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.161645691 UTC

[section ""data" . GHC.Unicode.toTitle_closure" {
     GHC.Unicode.toTitle_closure:
         const GHC.Unicode.toTitle_info;
         const 0;
 },
 GHC.Unicode.toTitle_entry() //  [R2]
         { []
         }
     {offset
       c2lBu: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2lBv; else goto c2lBw;
       c2lBv: // global
           R2 = R2;
           R1 = GHC.Unicode.toTitle_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2lBw: // global
           I64[Sp - 8] = block_c2lBr_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2lBV; else goto c2lBs;
       u2lBV: // global
           call _c2lBr(R1) args: 0, res: 0, upd: 0;
       c2lBs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.toTitle_info" {
     GHC.Unicode.toTitle_info:
         const GHC.Unicode.toTitle_entry;
         const 0;
         const 38654705678;
         const 4294967301;
         const S2jm9_srt+328;
 },
 _c2lBr() //  [R1]
         { []
         }
     {offset
       c2lBr: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2lBB; else goto c2lBA;
       c2lBB: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2lBA: // global
           (_s2jbF::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_towtitle(I64[R1 + 7]);
           if (_s2jbF::I64 > 1114111) goto c2lBN; else goto c2lBU;
       c2lBN: // global
           Hp = Hp - 16;
           R2 = _s2jbF::I64;
           Sp = Sp + 8;
           call GHC.Char.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
       c2lBU: // global
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = _s2jbF::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2lBr_info" {
     block_c2lBr_info:
         const _c2lBr;
         const 0;
         const 4294967326;
         const S2jm9_srt+328;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.167711309 UTC

[section ""data" . GHC.Unicode.wgencat_closure" {
     GHC.Unicode.wgencat_closure:
         const GHC.Unicode.wgencat_info;
 },
 GHC.Unicode.wgencat_entry() //  [R2]
         { []
         }
     {offset
       c2lCd: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2lCj; else goto c2lCk;
       c2lCj: // global
           R2 = R2;
           R1 = GHC.Unicode.wgencat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2lCk: // global
           I64[Sp - 8] = block_c2lCa_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2lCo; else goto c2lCb;
       u2lCo: // global
           call _c2lCa(R1) args: 0, res: 0, upd: 0;
       c2lCb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.wgencat_info" {
     GHC.Unicode.wgencat_info:
         const GHC.Unicode.wgencat_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2lCa() //  [R1]
         { []
         }
     {offset
       c2lCa: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2lCn; else goto c2lCm;
       c2lCn: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2lCm: // global
           (_s2jbP::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_gencat(I64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2jbP::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2lCa_info" {
     block_c2lCa_info:
         const _c2lCa;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.174306965 UTC

[section ""data" . GHC.Unicode.isAsciiUpper_closure" {
     GHC.Unicode.isAsciiUpper_closure:
         const GHC.Unicode.isAsciiUpper_info;
 },
 GHC.Unicode.isAsciiUpper_entry() //  [R2]
         { []
         }
     {offset
       c2lCG: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2lCH; else goto c2lCI;
       c2lCH: // global
           R2 = R2;
           R1 = GHC.Unicode.isAsciiUpper_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2lCI: // global
           I64[Sp - 8] = block_c2lCD_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2lCU; else goto c2lCE;
       u2lCU: // global
           call _c2lCD(R1) args: 0, res: 0, upd: 0;
       c2lCE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.isAsciiUpper_info" {
     GHC.Unicode.isAsciiUpper_info:
         const GHC.Unicode.isAsciiUpper_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2lCD() //  [R1]
         { []
         }
     {offset
       c2lCD: // global
           _s2jbS::I64 = I64[R1 + 7];
           if (_s2jbS::I64 < 65) goto c2lCP; else goto c2lCQ;
       c2lCP: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2lCQ: // global
           R1 = I64[((_s2jbS::I64 <= 90) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2lCD_info" {
     block_c2lCD_info:
         const _c2lCD;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.180437585 UTC

[section ""data" . GHC.Unicode.isAsciiLower_closure" {
     GHC.Unicode.isAsciiLower_closure:
         const GHC.Unicode.isAsciiLower_info;
 },
 GHC.Unicode.isAsciiLower_entry() //  [R2]
         { []
         }
     {offset
       c2lDf: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2lDg; else goto c2lDh;
       c2lDg: // global
           R2 = R2;
           R1 = GHC.Unicode.isAsciiLower_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2lDh: // global
           I64[Sp - 8] = block_c2lDc_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2lDt; else goto c2lDd;
       u2lDt: // global
           call _c2lDc(R1) args: 0, res: 0, upd: 0;
       c2lDd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.isAsciiLower_info" {
     GHC.Unicode.isAsciiLower_info:
         const GHC.Unicode.isAsciiLower_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2lDc() //  [R1]
         { []
         }
     {offset
       c2lDc: // global
           _s2jbX::I64 = I64[R1 + 7];
           if (_s2jbX::I64 < 97) goto c2lDo; else goto c2lDp;
       c2lDo: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2lDp: // global
           R1 = I64[((_s2jbX::I64 <= 122) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2lDc_info" {
     block_c2lDc_info:
         const _c2lDc;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.186199172 UTC

[section ""data" . GHC.Unicode.isLatin1_closure" {
     GHC.Unicode.isLatin1_closure:
         const GHC.Unicode.isLatin1_info;
 },
 GHC.Unicode.isLatin1_entry() //  [R2]
         { []
         }
     {offset
       c2lDO: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2lDP; else goto c2lDQ;
       c2lDP: // global
           R2 = R2;
           R1 = GHC.Unicode.isLatin1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2lDQ: // global
           I64[Sp - 8] = block_c2lDL_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2lDV; else goto c2lDM;
       u2lDV: // global
           call _c2lDL(R1) args: 0, res: 0, upd: 0;
       c2lDM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.isLatin1_info" {
     GHC.Unicode.isLatin1_info:
         const GHC.Unicode.isLatin1_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2lDL() //  [R1]
         { []
         }
     {offset
       c2lDL: // global
           R1 = I64[((I64[R1 + 7] <= 255) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2lDL_info" {
     block_c2lDL_info:
         const _c2lDL;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.192250046 UTC

[section ""data" . GHC.Unicode.isAscii_closure" {
     GHC.Unicode.isAscii_closure:
         const GHC.Unicode.isAscii_info;
 },
 GHC.Unicode.isAscii_entry() //  [R2]
         { []
         }
     {offset
       c2lEf: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2lEg; else goto c2lEh;
       c2lEg: // global
           R2 = R2;
           R1 = GHC.Unicode.isAscii_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2lEh: // global
           I64[Sp - 8] = block_c2lEc_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2lEm; else goto c2lEd;
       u2lEm: // global
           call _c2lEc(R1) args: 0, res: 0, upd: 0;
       c2lEd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.isAscii_info" {
     GHC.Unicode.isAscii_info:
         const GHC.Unicode.isAscii_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2lEc() //  [R1]
         { []
         }
     {offset
       c2lEc: // global
           R1 = I64[((I64[R1 + 7] < 128) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2lEc_info" {
     block_c2lEc_info:
         const _c2lEc;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.198586223 UTC

[section ""data" . GHC.Unicode.isOctDigit_closure" {
     GHC.Unicode.isOctDigit_closure:
         const GHC.Unicode.isOctDigit_info;
 },
 GHC.Unicode.isOctDigit_entry() //  [R2]
         { []
         }
     {offset
       c2lEG: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2lEH; else goto c2lEI;
       c2lEH: // global
           R2 = R2;
           R1 = GHC.Unicode.isOctDigit_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2lEI: // global
           I64[Sp - 8] = block_c2lED_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2lEW; else goto c2lEE;
       u2lEW: // global
           call _c2lED(R1) args: 0, res: 0, upd: 0;
       c2lEE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.isOctDigit_info" {
     GHC.Unicode.isOctDigit_info:
         const GHC.Unicode.isOctDigit_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2lED() //  [R1]
         { []
         }
     {offset
       c2lED: // global
           R1 = I64[((I64[R1 + 7] - 48 <= 7) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2lED_info" {
     block_c2lED_info:
         const _c2lED;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.204495129 UTC

[section ""data" . GHC.Unicode.isDigit_closure" {
     GHC.Unicode.isDigit_closure:
         const GHC.Unicode.isDigit_info;
 },
 GHC.Unicode.isDigit_entry() //  [R2]
         { []
         }
     {offset
       c2lFi: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2lFj; else goto c2lFk;
       c2lFj: // global
           R2 = R2;
           R1 = GHC.Unicode.isDigit_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2lFk: // global
           I64[Sp - 8] = block_c2lFf_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2lFy; else goto c2lFg;
       u2lFy: // global
           call _c2lFf(R1) args: 0, res: 0, upd: 0;
       c2lFg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.isDigit_info" {
     GHC.Unicode.isDigit_info:
         const GHC.Unicode.isDigit_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2lFf() //  [R1]
         { []
         }
     {offset
       c2lFf: // global
           R1 = I64[((I64[R1 + 7] - 48 <= 9) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2lFf_info" {
     block_c2lFf_info:
         const _c2lFf;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.210696223 UTC

[section ""data" . GHC.Unicode.isHexDigit_closure" {
     GHC.Unicode.isHexDigit_closure:
         const GHC.Unicode.isHexDigit_info;
 },
 GHC.Unicode.isHexDigit_entry() //  [R2]
         { []
         }
     {offset
       c2lFU: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2lFV; else goto c2lFW;
       c2lFV: // global
           R2 = R2;
           R1 = GHC.Unicode.isHexDigit_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2lFW: // global
           I64[Sp - 8] = block_c2lFR_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2lGE; else goto c2lFS;
       u2lGE: // global
           call _c2lFR(R1) args: 0, res: 0, upd: 0;
       c2lFS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.isHexDigit_info" {
     GHC.Unicode.isHexDigit_info:
         const GHC.Unicode.isHexDigit_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2lFR() //  [R1]
         { []
         }
     {offset
       c2lFR: // global
           _s2jco::I64 = I64[R1 + 7];
           if ((_s2jco::I64 + -48) <= 9) goto c2lGs; else goto c2lGr;
       c2lGr: // global
           if ((_s2jco::I64 + -65) <= 5) goto c2lGs; else goto c2lGo;
       c2lGs: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2lGo: // global
           R1 = I64[(((_s2jco::I64 + -97) <= 5) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2lFR_info" {
     block_c2lFR_info:
         const _c2lFR;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.217555789 UTC

[section ""data" . GHC.Unicode.isLower_closure" {
     GHC.Unicode.isLower_closure:
         const GHC.Unicode.isLower_info;
 },
 GHC.Unicode.isLower_entry() //  [R2]
         { []
         }
     {offset
       c2lH2: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2lH3; else goto c2lH4;
       c2lH3: // global
           R2 = R2;
           R1 = GHC.Unicode.isLower_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2lH4: // global
           I64[Sp - 8] = block_c2lGZ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2lHh; else goto c2lH0;
       u2lHh: // global
           call _c2lGZ(R1) args: 0, res: 0, upd: 0;
       c2lH0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.isLower_info" {
     GHC.Unicode.isLower_info:
         const GHC.Unicode.isLower_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2lGZ() //  [R1]
         { []
         }
     {offset
       c2lGZ: // global
           (_s2jcI::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswlower(I64[R1 + 7]);
           if (_s2jcI::I64 == 0) goto c2lHg; else goto c2lHf;
       c2lHg: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2lHf: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2lGZ_info" {
     block_c2lGZ_info:
         const _c2lGZ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.222570071 UTC

[section ""cstring" . lvl66_r2j7h_bytes" {
     lvl66_r2j7h_bytes:
         I8[] [115,117,99,99,123,71,101,110,101,114,97,108,67,97,116,101,103,111,114,121,125,58,32,116,114,105,101,100,32,116,111,32,116,97,107,101,32,96,115,117,99,99,39,32,111,102,32,108,97,115,116,32,116,97,103,32,105,110,32,101,110,117,109,101,114,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.225140402 UTC

[section ""data" . GHC.Unicode.$fEnumGeneralCategory2_closure" {
     GHC.Unicode.$fEnumGeneralCategory2_closure:
         const GHC.Unicode.$fEnumGeneralCategory2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Unicode.$fEnumGeneralCategory2_entry() //  [R1]
         { []
         }
     {offset
       c2lHC: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2lHD; else goto c2lHE;
       c2lHD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lHE: // global
           (_c2lHx::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2lHx::I64 == 0) goto c2lHz; else goto c2lHy;
       c2lHz: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2lHy: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2lHx::I64;
           I64[Sp - 24] = block_c2lHA_info;
           R2 = lvl66_r2j7h_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Unicode.$fEnumGeneralCategory2_info" {
     GHC.Unicode.$fEnumGeneralCategory2_info:
         const GHC.Unicode.$fEnumGeneralCategory2_entry;
         const 0;
         const 21474836501;
         const S2jm9_srt+288;
 },
 _c2lHA() //  [R1]
         { []
         }
     {offset
       c2lHA: // global
           R3 = R1;
           R2 = $dIP3_r2j7a_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c2lHA_info" {
     block_c2lHA_info:
         const _c2lHA;
         const 0;
         const 21474836510;
         const S2jm9_srt+288;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.231704451 UTC

[section ""data" . GHC.Unicode.$fEnumGeneralCategory_$csucc_closure" {
     GHC.Unicode.$fEnumGeneralCategory_$csucc_closure:
         const GHC.Unicode.$fEnumGeneralCategory_$csucc_info;
         const 0;
 },
 GHC.Unicode.$fEnumGeneralCategory_$csucc_entry() //  [R2]
         { []
         }
     {offset
       c2lI3: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2lI4; else goto c2lI5;
       c2lI4: // global
           R2 = R2;
           R1 = GHC.Unicode.$fEnumGeneralCategory_$csucc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2lI5: // global
           I64[Sp - 8] = block_c2lHW_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2lIg; else goto c2lHX;
       u2lIg: // global
           call _c2lHW(R1) args: 0, res: 0, upd: 0;
       c2lHX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.$fEnumGeneralCategory_$csucc_info" {
     GHC.Unicode.$fEnumGeneralCategory_$csucc_info:
         const GHC.Unicode.$fEnumGeneralCategory_$csucc_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S2jm9_srt+360;
 },
 _c2lHW() //  [R1]
         { []
         }
     {offset
       c2lHW: // global
           if (I32[I64[R1 - 1] + 20] == 29 :: W32) goto c2lI1; else goto c2lI0;
       c2lI1: // global
           R1 = GHC.Unicode.$fEnumGeneralCategory2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c2lI0: // global
           R1 = I64[(%MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]) + 1 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2lHW_info" {
     block_c2lHW_info:
         const _c2lHW;
         const 0;
         const 4294967326;
         const S2jm9_srt+368;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.236992412 UTC

[section ""cstring" . lvl67_r2j7i_bytes" {
     lvl67_r2j7i_bytes:
         I8[] [112,114,101,100,123,71,101,110,101,114,97,108,67,97,116,101,103,111,114,121,125,58,32,116,114,105,101,100,32,116,111,32,116,97,107,101,32,96,112,114,101,100,39,32,111,102,32,102,105,114,115,116,32,116,97,103,32,105,110,32,101,110,117,109,101,114,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.240385013 UTC

[section ""data" . GHC.Unicode.$fEnumGeneralCategory1_closure" {
     GHC.Unicode.$fEnumGeneralCategory1_closure:
         const GHC.Unicode.$fEnumGeneralCategory1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Unicode.$fEnumGeneralCategory1_entry() //  [R1]
         { []
         }
     {offset
       c2lIH: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2lII; else goto c2lIJ;
       c2lII: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lIJ: // global
           (_c2lIC::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2lIC::I64 == 0) goto c2lIE; else goto c2lID;
       c2lIE: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2lID: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2lIC::I64;
           I64[Sp - 24] = block_c2lIF_info;
           R2 = lvl67_r2j7i_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Unicode.$fEnumGeneralCategory1_info" {
     GHC.Unicode.$fEnumGeneralCategory1_info:
         const GHC.Unicode.$fEnumGeneralCategory1_entry;
         const 0;
         const 21474836501;
         const S2jm9_srt+288;
 },
 _c2lIF() //  [R1]
         { []
         }
     {offset
       c2lIF: // global
           R3 = R1;
           R2 = $dIP3_r2j7a_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c2lIF_info" {
     block_c2lIF_info:
         const _c2lIF;
         const 0;
         const 21474836510;
         const S2jm9_srt+288;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.246301301 UTC

[section ""data" . GHC.Unicode.$fEnumGeneralCategory_$cpred_closure" {
     GHC.Unicode.$fEnumGeneralCategory_$cpred_closure:
         const GHC.Unicode.$fEnumGeneralCategory_$cpred_info;
         const 0;
 },
 GHC.Unicode.$fEnumGeneralCategory_$cpred_entry() //  [R2]
         { []
         }
     {offset
       c2lJ8: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2lJ9; else goto c2lJa;
       c2lJ9: // global
           R2 = R2;
           R1 = GHC.Unicode.$fEnumGeneralCategory_$cpred_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2lJa: // global
           I64[Sp - 8] = block_c2lJ1_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2lJl; else goto c2lJ2;
       u2lJl: // global
           call _c2lJ1(R1) args: 0, res: 0, upd: 0;
       c2lJ2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.$fEnumGeneralCategory_$cpred_info" {
     GHC.Unicode.$fEnumGeneralCategory_$cpred_info:
         const GHC.Unicode.$fEnumGeneralCategory_$cpred_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S2jm9_srt+376;
 },
 _c2lJ1() //  [R1]
         { []
         }
     {offset
       c2lJ1: // global
           if (I32[I64[R1 - 1] + 20] == 0 :: W32) goto c2lJ6; else goto c2lJ5;
       c2lJ6: // global
           R1 = GHC.Unicode.$fEnumGeneralCategory1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c2lJ5: // global
           R1 = I64[(%MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]) - 1 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2lJ1_info" {
     block_c2lJ1_info:
         const _c2lJ1;
         const 0;
         const 4294967326;
         const S2jm9_srt+384;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.254700755 UTC

[section ""data" . GHC.Unicode.$fEnumGeneralCategory_$cenumFromTo_closure" {
     GHC.Unicode.$fEnumGeneralCategory_$cenumFromTo_closure:
         const GHC.Unicode.$fEnumGeneralCategory_$cenumFromTo_info;
         const 0;
 },
 sat_s2jd8_entry() //  [R1]
         { []
         }
     {offset
       c2lKe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lKf; else goto c2lKg;
       c2lKf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lKg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2jd2::I64 = I64[R1 + 32];
           if (_s2jd2::I64 == I64[R1 + 24]) goto c2lKd; else goto c2lKc;
       c2lKd: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c2lKc: // global
           R2 = _s2jd2::I64 + 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_s2jd1_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2jd8_info" {
     sat_s2jd8_info:
         const sat_s2jd8_entry;
         const 8589934593;
         const 4294967311;
         const S2jm9_srt+296;
 },
 sat_s2jd5_entry() //  [R1]
         { []
         }
     {offset
       c2lKs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lKt; else goto c2lKB;
       c2lKt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lKB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2jd2::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s2jd2::I64, 0)) goto c2lKz; else goto c2lKr;
       c2lKr: // global
           if (%MO_S_Gt_W64(_s2jd2::I64, 29)) goto c2lKz; else goto c2lKA;
       c2lKz: // global
           R2 = _s2jd2::I64;
           Sp = Sp - 16;
           call GHC.Unicode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c2lKA: // global
           R1 = I64[(_s2jd2::I64 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2jd5_info" {
     sat_s2jd5_info:
         const sat_s2jd5_entry;
         const 4294967296;
         const 4294967313;
         const S2jm9_srt+296;
 },
 go_s2jd1_entry() //  [R1, R2]
         { []
         }
     {offset
       c2lKD: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c2lKH; else goto c2lKG;
       c2lKH: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2lKG: // global
           _s2jcZ::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s2jd8_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s2jcZ::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s2jd5_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_s2jd1_info" {
     go_s2jd1_info:
         const go_s2jd1_entry;
         const 4294967296;
         const 4294967306;
         const 4294967300;
         const S2jm9_srt+296;
 },
 GHC.Unicode.$fEnumGeneralCategory_$cenumFromTo_entry() //  [R2, R3]
         { []
         }
     {offset
       c2lKI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lKJ; else goto c2lKK;
       c2lKJ: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fEnumGeneralCategory_$cenumFromTo_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2lKK: // global
           I64[Sp - 16] = block_c2lJH_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2lL5; else goto c2lJI;
       u2lL5: // global
           call _c2lJH(R1) args: 0, res: 0, upd: 0;
       c2lJI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.$fEnumGeneralCategory_$cenumFromTo_info" {
     GHC.Unicode.$fEnumGeneralCategory_$cenumFromTo_info:
         const GHC.Unicode.$fEnumGeneralCategory_$cenumFromTo_entry;
         const 0;
         const 17596481011726;
         const 8589934607;
         const S2jm9_srt+296;
 },
 _c2lJH() //  [R1]
         { []
         }
     {offset
       c2lJH: // global
           _s2jcX::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2lJP_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2jcX::I64;
           if (R1 & 7 != 0) goto u2lL2; else goto c2lJQ;
       u2lL2: // global
           call _c2lJP(R1) args: 0, res: 0, upd: 0;
       c2lJQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2lJH_info" {
     block_c2lJH_info:
         const _c2lJH;
         const 1;
         const 4294967326;
         const S2jm9_srt+296;
 },
 _c2lJP() //  [R1]
         { []
         }
     {offset
       c2lJP: // global
           I64[Sp] = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           call _c2lJV() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2lJP_info" {
     block_c2lJP_info:
         const _c2lJP;
         const 65;
         const 4294967326;
         const S2jm9_srt+296;
 },
 _c2lJV() //  []
         { []
         }
     {offset
       c2lJV: // global
           Hp = Hp + 16;
           _s2jcZ::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c2lKU; else goto c2lKT;
       c2lKU: // global
           HpAlloc = 16;
           I64[Sp] = block_c2lJU_info;
           R1 = _s2jcZ::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c2lKT: // global
           _s2jcX::I64 = I64[Sp + 8];
           if (%MO_S_Le_W64(_s2jcX::I64,
                            _s2jcZ::I64)) goto c2lKW; else goto c2lKX;
       c2lKW: // global
           I64[Hp - 8] = go_s2jd1_info;
           I64[Hp] = _s2jcZ::I64;
           R2 = _s2jcX::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call go_s2jd1_entry(R2, R1) args: 8, res: 0, upd: 8;
       c2lKX: // global
           Hp = Hp - 16;
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2lJU() //  [R1]
         { []
         }
     {offset
       c2lJU: // global
           I64[Sp] = R1;
           call _c2lJV() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2lJU_info" {
     block_c2lJU_info:
         const _c2lJU;
         const 65;
         const 4294967326;
         const S2jm9_srt+296;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.281278438 UTC

[section ""data" . GHC.Unicode.$fEnumGeneralCategory_$cenumFromThenTo_closure" {
     GHC.Unicode.$fEnumGeneralCategory_$cenumFromThenTo_closure:
         const GHC.Unicode.$fEnumGeneralCategory_$cenumFromThenTo_info;
         const 0;
 },
 sat_s2jdw_entry() //  [R1]
         { []
         }
     {offset
       c2lMJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lMK; else goto c2lML;
       c2lMK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lML: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s2jdp_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2jdw_info" {
     sat_s2jdw_info:
         const sat_s2jdw_entry;
         const 8589934593;
         const 4294967311;
         const S2jm9_srt+296;
 },
 sat_s2jdu_entry() //  [R1]
         { []
         }
     {offset
       c2lMV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lMW; else goto c2lN4;
       c2lMW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lN4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2jdq::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s2jdq::I64, 0)) goto c2lN2; else goto c2lMU;
       c2lMU: // global
           if (%MO_S_Gt_W64(_s2jdq::I64, 29)) goto c2lN2; else goto c2lN3;
       c2lN2: // global
           R2 = _s2jdq::I64;
           Sp = Sp - 16;
           call GHC.Unicode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c2lN3: // global
           R1 = I64[(_s2jdq::I64 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2jdu_info" {
     sat_s2jdu_info:
         const sat_s2jdu_entry;
         const 4294967296;
         const 4294967313;
         const S2jm9_srt+296;
 },
 sat_s2jdz_entry() //  [R1]
         { []
         }
     {offset
       c2lNf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lNg; else goto c2lNo;
       c2lNg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lNo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2jdq::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s2jdq::I64, 0)) goto c2lNm; else goto c2lNe;
       c2lNe: // global
           if (%MO_S_Gt_W64(_s2jdq::I64, 29)) goto c2lNm; else goto c2lNn;
       c2lNm: // global
           R2 = _s2jdq::I64;
           Sp = Sp - 16;
           call GHC.Unicode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c2lNn: // global
           R1 = I64[(_s2jdq::I64 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2jdz_info" {
     sat_s2jdz_info:
         const sat_s2jdz_entry;
         const 4294967296;
         const 4294967313;
         const S2jm9_srt+296;
 },
 go_dn_s2jdp_entry() //  [R1, R2]
         { []
         }
     {offset
       c2lNs: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c2lNw; else goto c2lNv;
       c2lNw: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2lNv: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c2lNq; else goto c2lNr;
       c2lNq: // global
           _s2jdn::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s2jdw_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s2jdn::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s2jdu_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2lNr: // global
           I64[Hp - 80] = sat_s2jdz_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c2lNy::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c2lNy::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_s2jdp_info" {
     go_dn_s2jdp_info:
         const go_dn_s2jdp_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const S2jm9_srt+296;
 },
 sat_s2jdA_entry() //  [R1]
         { []
         }
     {offset
       c2lNz: // global
           _s2jdA::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c2lNA; else goto c2lNB;
       c2lNB: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2lND; else goto c2lNC;
       c2lND: // global
           HpAlloc = 24;
           goto c2lNA;
       c2lNA: // global
           R1 = _s2jdA::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lNC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2jdA::P64;
           _s2jdf::I64 = I64[_s2jdA::P64 + 24];
           _s2jdn::I64 = _s2jdf::I64 - I64[_s2jdA::P64 + 16];
           _s2jdo::I64 = I64[_s2jdA::P64 + 32] - _s2jdn::I64;
           I64[Hp - 16] = go_dn_s2jdp_info;
           I64[Hp - 8] = _s2jdn::I64;
           I64[Hp] = _s2jdo::I64;
           R2 = _s2jdf::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s2jdp_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2jdA_info" {
     sat_s2jdA_info:
         const sat_s2jdA_entry;
         const 12884901888;
         const 4294967311;
         const S2jm9_srt+296;
 },
 sat_s2jdm_entry() //  [R1]
         { []
         }
     {offset
       c2lNN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lNO; else goto c2lNW;
       c2lNO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lNW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2jdd::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s2jdd::I64, 0)) goto c2lNU; else goto c2lNM;
       c2lNM: // global
           if (%MO_S_Gt_W64(_s2jdd::I64, 29)) goto c2lNU; else goto c2lNV;
       c2lNU: // global
           R2 = _s2jdd::I64;
           Sp = Sp - 16;
           call GHC.Unicode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c2lNV: // global
           R1 = I64[(_s2jdd::I64 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2jdm_info" {
     sat_s2jdm_info:
         const sat_s2jdm_entry;
         const 4294967296;
         const 4294967313;
         const S2jm9_srt+296;
 },
 sat_s2jdE_entry() //  [R1]
         { []
         }
     {offset
       c2lOa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lOb; else goto c2lOj;
       c2lOb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lOj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2jdd::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s2jdd::I64, 0)) goto c2lOh; else goto c2lO9;
       c2lO9: // global
           if (%MO_S_Gt_W64(_s2jdd::I64, 29)) goto c2lOh; else goto c2lOi;
       c2lOh: // global
           R2 = _s2jdd::I64;
           Sp = Sp - 16;
           call GHC.Unicode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c2lOi: // global
           R1 = I64[(_s2jdd::I64 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2jdE_info" {
     sat_s2jdE_info:
         const sat_s2jdE_entry;
         const 4294967296;
         const 4294967313;
         const S2jm9_srt+296;
 },
 sat_s2jdS_entry() //  [R1]
         { []
         }
     {offset
       c2lOM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lON; else goto c2lOO;
       c2lON: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lOO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s2jdL_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2jdS_info" {
     sat_s2jdS_info:
         const sat_s2jdS_entry;
         const 8589934593;
         const 4294967311;
         const S2jm9_srt+296;
 },
 sat_s2jdQ_entry() //  [R1]
         { []
         }
     {offset
       c2lOY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lOZ; else goto c2lP7;
       c2lOZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lP7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2jdM::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s2jdM::I64, 0)) goto c2lP5; else goto c2lOX;
       c2lOX: // global
           if (%MO_S_Gt_W64(_s2jdM::I64, 29)) goto c2lP5; else goto c2lP6;
       c2lP5: // global
           R2 = _s2jdM::I64;
           Sp = Sp - 16;
           call GHC.Unicode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c2lP6: // global
           R1 = I64[(_s2jdM::I64 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2jdQ_info" {
     sat_s2jdQ_info:
         const sat_s2jdQ_entry;
         const 4294967296;
         const 4294967313;
         const S2jm9_srt+296;
 },
 sat_s2jdV_entry() //  [R1]
         { []
         }
     {offset
       c2lPi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lPj; else goto c2lPr;
       c2lPj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lPr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2jdM::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s2jdM::I64, 0)) goto c2lPp; else goto c2lPh;
       c2lPh: // global
           if (%MO_S_Gt_W64(_s2jdM::I64, 29)) goto c2lPp; else goto c2lPq;
       c2lPp: // global
           R2 = _s2jdM::I64;
           Sp = Sp - 16;
           call GHC.Unicode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c2lPq: // global
           R1 = I64[(_s2jdM::I64 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2jdV_info" {
     sat_s2jdV_info:
         const sat_s2jdV_entry;
         const 4294967296;
         const 4294967313;
         const S2jm9_srt+296;
 },
 go_up_s2jdL_entry() //  [R1, R2]
         { []
         }
     {offset
       c2lPv: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c2lPz; else goto c2lPy;
       c2lPz: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2lPy: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c2lPt; else goto c2lPu;
       c2lPt: // global
           _s2jdJ::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s2jdS_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s2jdJ::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s2jdQ_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2lPu: // global
           I64[Hp - 80] = sat_s2jdV_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c2lPB::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c2lPB::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_s2jdL_info" {
     go_up_s2jdL_info:
         const go_up_s2jdL_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const S2jm9_srt+296;
 },
 sat_s2jdW_entry() //  [R1]
         { []
         }
     {offset
       c2lPC: // global
           _s2jdW::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c2lPD; else goto c2lPE;
       c2lPE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2lPG; else goto c2lPF;
       c2lPG: // global
           HpAlloc = 24;
           goto c2lPD;
       c2lPD: // global
           R1 = _s2jdW::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lPF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2jdW::P64;
           _s2jdf::I64 = I64[_s2jdW::P64 + 24];
           _s2jdJ::I64 = _s2jdf::I64 - I64[_s2jdW::P64 + 16];
           _s2jdK::I64 = I64[_s2jdW::P64 + 32] - _s2jdJ::I64;
           I64[Hp - 16] = go_up_s2jdL_info;
           I64[Hp - 8] = _s2jdJ::I64;
           I64[Hp] = _s2jdK::I64;
           R2 = _s2jdf::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s2jdL_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2jdW_info" {
     sat_s2jdW_info:
         const sat_s2jdW_entry;
         const 12884901888;
         const 4294967311;
         const S2jm9_srt+296;
 },
 sat_s2jdI_entry() //  [R1]
         { []
         }
     {offset
       c2lPQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lPR; else goto c2lPZ;
       c2lPR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lPZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2jdd::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s2jdd::I64, 0)) goto c2lPX; else goto c2lPP;
       c2lPP: // global
           if (%MO_S_Gt_W64(_s2jdd::I64, 29)) goto c2lPX; else goto c2lPY;
       c2lPX: // global
           R2 = _s2jdd::I64;
           Sp = Sp - 16;
           call GHC.Unicode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c2lPY: // global
           R1 = I64[(_s2jdd::I64 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2jdI_info" {
     sat_s2jdI_info:
         const sat_s2jdI_entry;
         const 4294967296;
         const 4294967313;
         const S2jm9_srt+296;
 },
 sat_s2je0_entry() //  [R1]
         { []
         }
     {offset
       c2lQd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lQe; else goto c2lQm;
       c2lQe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lQm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2jdd::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s2jdd::I64, 0)) goto c2lQk; else goto c2lQc;
       c2lQc: // global
           if (%MO_S_Gt_W64(_s2jdd::I64, 29)) goto c2lQk; else goto c2lQl;
       c2lQk: // global
           R2 = _s2jdd::I64;
           Sp = Sp - 16;
           call GHC.Unicode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c2lQl: // global
           R1 = I64[(_s2jdd::I64 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2je0_info" {
     sat_s2je0_info:
         const sat_s2je0_entry;
         const 4294967296;
         const 4294967313;
         const S2jm9_srt+296;
 },
 GHC.Unicode.$fEnumGeneralCategory_$cenumFromThenTo_entry() //  [R2,
                                                                 R3, R4]
         { []
         }
     {offset
       c2lQn: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2lQo; else goto c2lQp;
       c2lQo: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fEnumGeneralCategory_$cenumFromThenTo_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2lQp: // global
           I64[Sp - 24] = block_c2lLR_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2lR6; else goto c2lLS;
       u2lR6: // global
           call _c2lLR(R1) args: 0, res: 0, upd: 0;
       c2lLS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.$fEnumGeneralCategory_$cenumFromThenTo_info" {
     GHC.Unicode.$fEnumGeneralCategory_$cenumFromThenTo_info:
         const GHC.Unicode.$fEnumGeneralCategory_$cenumFromThenTo_entry;
         const 0;
         const 35188667056142;
         const 12884901911;
         const S2jm9_srt+296;
 },
 _c2lLR() //  [R1]
         { []
         }
     {offset
       c2lLR: // global
           _s2jdd::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2lLZ_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2jdd::I64;
           if (R1 & 7 != 0) goto u2lR2; else goto c2lM0;
       u2lR2: // global
           call _c2lLZ(R1) args: 0, res: 0, upd: 0;
       c2lM0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2lLR_info" {
     block_c2lLR_info:
         const _c2lLR;
         const 2;
         const 4294967326;
         const S2jm9_srt+296;
 },
 _c2lLZ() //  [R1]
         { []
         }
     {offset
       c2lLZ: // global
           _s2jdf::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2lM7_info;
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s2jdf::I64;
           if (R1 & 7 != 0) goto u2lR3; else goto c2lM8;
       u2lR3: // global
           call _c2lM7(R1) args: 0, res: 0, upd: 0;
       c2lM8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2lLZ_info" {
     block_c2lLZ_info:
         const _c2lLZ;
         const 66;
         const 4294967326;
         const S2jm9_srt+296;
 },
 _c2lM7() //  [R1]
         { []
         }
     {offset
       c2lM7: // global
           I64[Sp] = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           call _c2lMd() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2lM7_info" {
     block_c2lM7_info:
         const _c2lM7;
         const 194;
         const 4294967326;
         const S2jm9_srt+296;
 },
 _c2lMd() //  []
         { []
         }
     {offset
       c2lMd: // global
           Hp = Hp + 88;
           _s2jdh::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c2lQD; else goto c2lQC;
       c2lQD: // global
           HpAlloc = 88;
           I64[Sp] = block_c2lMc_info;
           R1 = _s2jdh::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c2lQC: // global
           _s2jdd::I64 = I64[Sp + 8];
           _s2jdf::I64 = I64[Sp + 16];
           if (%MO_S_Lt_W64(_s2jdf::I64,
                            _s2jdd::I64)) goto c2lQN; else goto c2lQW;
       c2lQN: // global
           if (%MO_S_Le_W64(_s2jdh::I64,
                            _s2jdf::I64)) goto c2lQG; else goto c2lQL;
       c2lQG: // global
           I64[Hp - 80] = sat_s2jdA_info;
           I64[Hp - 64] = _s2jdd::I64;
           I64[Hp - 56] = _s2jdf::I64;
           I64[Hp - 48] = _s2jdh::I64;
           I64[Hp - 40] = sat_s2jdm_info;
           I64[Hp - 24] = _s2jdd::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2lQL: // global
           if (%MO_S_Gt_W64(_s2jdh::I64,
                            _s2jdd::I64)) goto c2lQU; else goto c2lQJ;
       c2lQJ: // global
           I64[Hp - 80] = sat_s2jdE_info;
           I64[Hp - 64] = _s2jdd::I64;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c2lQH::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c2lQH::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2lQW: // global
           if (%MO_S_Ge_W64(_s2jdh::I64,
                            _s2jdf::I64)) goto c2lQQ; else goto c2lQV;
       c2lQQ: // global
           I64[Hp - 80] = sat_s2jdW_info;
           I64[Hp - 64] = _s2jdd::I64;
           I64[Hp - 56] = _s2jdf::I64;
           I64[Hp - 48] = _s2jdh::I64;
           I64[Hp - 40] = sat_s2jdI_info;
           I64[Hp - 24] = _s2jdd::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2lQV: // global
           if (%MO_S_Lt_W64(_s2jdh::I64,
                            _s2jdd::I64)) goto c2lQU; else goto c2lQT;
       c2lQU: // global
           Hp = Hp - 88;
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2lQT: // global
           I64[Hp - 80] = sat_s2je0_info;
           I64[Hp - 64] = _s2jdd::I64;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c2lQR::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c2lQR::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2lMc() //  [R1]
         { []
         }
     {offset
       c2lMc: // global
           I64[Sp] = R1;
           call _c2lMd() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2lMc_info" {
     block_c2lMc_info:
         const _c2lMc;
         const 194;
         const 4294967326;
         const S2jm9_srt+296;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.319631093 UTC

[section ""data" . GHC.Unicode.$fEnumGeneralCategory_closure" {
     GHC.Unicode.$fEnumGeneralCategory_closure:
         const GHC.Enum.C:Enum_con_info;
         const GHC.Unicode.$fEnumGeneralCategory_$csucc_closure+1;
         const GHC.Unicode.$fEnumGeneralCategory_$cpred_closure+1;
         const GHC.Unicode.$fEnumGeneralCategory_$ctoEnum_closure+1;
         const GHC.Unicode.$fEnumGeneralCategory_$cfromEnum_closure+1;
         const GHC.Unicode.$fEnumGeneralCategory_$cenumFrom_closure+1;
         const GHC.Unicode.$fEnumGeneralCategory_$cenumFromThen_closure+2;
         const GHC.Unicode.$fEnumGeneralCategory_$cenumFromTo_closure+2;
         const GHC.Unicode.$fEnumGeneralCategory_$cenumFromThenTo_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.322273031 UTC

[section ""data" . GHC.Unicode.$wgeneralCategory_closure" {
     GHC.Unicode.$wgeneralCategory_closure:
         const GHC.Unicode.$wgeneralCategory_info;
         const 0;
 },
 GHC.Unicode.$wgeneralCategory_entry() //  [R2]
         { []
         }
     {offset
       c2lTl: // global
           (_s2je6::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_gencat(R2);
           if (%MO_S_Lt_W64(_s2je6::I64, 0)) goto c2lTA; else goto c2lTC;
       c2lTC: // global
           if (%MO_S_Gt_W64(_s2je6::I64, 29)) goto c2lTA; else goto c2lTB;
       c2lTA: // global
           R2 = _s2je6::I64;
           call GHC.Unicode.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
       c2lTB: // global
           R1 = I64[(_s2je6::I64 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.$wgeneralCategory_info" {
     GHC.Unicode.$wgeneralCategory_info:
         const GHC.Unicode.$wgeneralCategory_entry;
         const 0;
         const 4294967310;
         const 4294967300;
         const S2jm9_srt+296;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.326490995 UTC

[section ""data" . GHC.Unicode.generalCategory_closure" {
     GHC.Unicode.generalCategory_closure:
         const GHC.Unicode.generalCategory_info;
         const 0;
 },
 GHC.Unicode.generalCategory_entry() //  [R2]
         { []
         }
     {offset
       c2lTQ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2lTR; else goto c2lTS;
       c2lTR: // global
           R2 = R2;
           R1 = GHC.Unicode.generalCategory_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2lTS: // global
           I64[Sp - 8] = block_c2lTN_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2lTW; else goto c2lTO;
       u2lTW: // global
           call _c2lTN(R1) args: 0, res: 0, upd: 0;
       c2lTO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.generalCategory_info" {
     GHC.Unicode.generalCategory_info:
         const GHC.Unicode.generalCategory_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S2jm9_srt+408;
 },
 _c2lTN() //  [R1]
         { []
         }
     {offset
       c2lTN: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Unicode.$wgeneralCategory_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2lTN_info" {
     block_c2lTN_info:
         const _c2lTN;
         const 0;
         const 4294967326;
         const S2jm9_srt+416;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.332609523 UTC

[section ""data" . GHC.Unicode.$wisPunctuation_closure" {
     GHC.Unicode.$wisPunctuation_closure:
         const GHC.Unicode.$wisPunctuation_info;
         const 0;
 },
 GHC.Unicode.$wisPunctuation_entry() //  [R2]
         { []
         }
     {offset
       c2lUc: // global
           (_s2jeh::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_gencat(R2);
           if (%MO_S_Lt_W64(_s2jeh::I64, 0)) goto c2lUr; else goto c2lUF;
       c2lUF: // global
           if (%MO_S_Gt_W64(_s2jeh::I64, 29)) goto c2lUr; else goto c2lUE;
       c2lUr: // global
           R2 = _s2jeh::I64;
           call GHC.Unicode.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
       c2lUE: // global
           if (%MO_S_Ge_W64(_s2jeh::I64, 18)) goto c2lUw; else goto u2lUG;
       u2lUG: // global
           if (%MO_S_Lt_W64(_s2jeh::I64, 11)) goto c2lUw; else goto u2lUH;
       c2lUw: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u2lUH: // global
           switch [11 .. 17] _s2jeh::I64 {
               case 11, 12, 13, 14, 15, 16, 17 : goto c2lUD;
           }
       c2lUD: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.$wisPunctuation_info" {
     GHC.Unicode.$wisPunctuation_info:
         const GHC.Unicode.$wisPunctuation_entry;
         const 0;
         const 4294967310;
         const 4294967300;
         const S2jm9_srt+296;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.3369356 UTC

[section ""data" . GHC.Unicode.isPunctuation_closure" {
     GHC.Unicode.isPunctuation_closure:
         const GHC.Unicode.isPunctuation_info;
         const 0;
 },
 GHC.Unicode.isPunctuation_entry() //  [R2]
         { []
         }
     {offset
       c2lUX: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2lUY; else goto c2lUZ;
       c2lUY: // global
           R2 = R2;
           R1 = GHC.Unicode.isPunctuation_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2lUZ: // global
           I64[Sp - 8] = block_c2lUU_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2lV3; else goto c2lUV;
       u2lV3: // global
           call _c2lUU(R1) args: 0, res: 0, upd: 0;
       c2lUV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.isPunctuation_info" {
     GHC.Unicode.isPunctuation_info:
         const GHC.Unicode.isPunctuation_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S2jm9_srt+424;
 },
 _c2lUU() //  [R1]
         { []
         }
     {offset
       c2lUU: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Unicode.$wisPunctuation_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2lUU_info" {
     block_c2lUU_info:
         const _c2lUU;
         const 0;
         const 4294967326;
         const S2jm9_srt+432;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.342712417 UTC

[section ""data" . GHC.Unicode.$wisSymbol_closure" {
     GHC.Unicode.$wisSymbol_closure:
         const GHC.Unicode.$wisSymbol_info;
         const 0;
 },
 GHC.Unicode.$wisSymbol_entry() //  [R2]
         { []
         }
     {offset
       c2lVj: // global
           (_s2jev::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_gencat(R2);
           if (%MO_S_Lt_W64(_s2jev::I64, 0)) goto c2lVy; else goto c2lVJ;
       c2lVJ: // global
           if (%MO_S_Gt_W64(_s2jev::I64, 29)) goto c2lVy; else goto c2lVI;
       c2lVy: // global
           R2 = _s2jev::I64;
           call GHC.Unicode.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
       c2lVI: // global
           if (%MO_S_Lt_W64(_s2jev::I64, 21)) goto u2lVK; else goto u2lVM;
       u2lVK: // global
           if (%MO_S_Lt_W64(_s2jev::I64, 18)) goto c2lVD; else goto u2lVL;
       u2lVL: // global
           if (_s2jev::I64 == 19) goto c2lVH; else goto c2lVH;
       u2lVM: // global
           if (%MO_S_Lt_W64(_s2jev::I64, 22)) goto c2lVH; else goto c2lVD;
       c2lVH: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2lVD: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.$wisSymbol_info" {
     GHC.Unicode.$wisSymbol_info:
         const GHC.Unicode.$wisSymbol_entry;
         const 0;
         const 4294967310;
         const 4294967300;
         const S2jm9_srt+296;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.347277329 UTC

[section ""data" . GHC.Unicode.isSymbol_closure" {
     GHC.Unicode.isSymbol_closure:
         const GHC.Unicode.isSymbol_info;
         const 0;
 },
 GHC.Unicode.isSymbol_entry() //  [R2]
         { []
         }
     {offset
       c2lW0: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2lW1; else goto c2lW2;
       c2lW1: // global
           R2 = R2;
           R1 = GHC.Unicode.isSymbol_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2lW2: // global
           I64[Sp - 8] = block_c2lVX_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2lW6; else goto c2lVY;
       u2lW6: // global
           call _c2lVX(R1) args: 0, res: 0, upd: 0;
       c2lVY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.isSymbol_info" {
     GHC.Unicode.isSymbol_info:
         const GHC.Unicode.isSymbol_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S2jm9_srt+440;
 },
 _c2lVX() //  [R1]
         { []
         }
     {offset
       c2lVX: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Unicode.$wisSymbol_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2lVX_info" {
     block_c2lVX_info:
         const _c2lVX;
         const 0;
         const 4294967326;
         const S2jm9_srt+448;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.353554982 UTC

[section ""data" . GHC.Unicode.isUpper_closure" {
     GHC.Unicode.isUpper_closure:
         const GHC.Unicode.isUpper_info;
 },
 GHC.Unicode.isUpper_entry() //  [R2]
         { []
         }
     {offset
       c2lWn: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2lWo; else goto c2lWp;
       c2lWo: // global
           R2 = R2;
           R1 = GHC.Unicode.isUpper_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2lWp: // global
           I64[Sp - 8] = block_c2lWk_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2lWC; else goto c2lWl;
       u2lWC: // global
           call _c2lWk(R1) args: 0, res: 0, upd: 0;
       c2lWl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.isUpper_info" {
     GHC.Unicode.isUpper_info:
         const GHC.Unicode.isUpper_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2lWk() //  [R1]
         { []
         }
     {offset
       c2lWk: // global
           (_s2jeL::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswupper(I64[R1 + 7]);
           if (_s2jeL::I64 == 0) goto c2lWB; else goto c2lWA;
       c2lWB: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2lWA: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2lWk_info" {
     block_c2lWk_info:
         const _c2lWk;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.359745149 UTC

[section ""data" . GHC.Unicode.isPrint_closure" {
     GHC.Unicode.isPrint_closure:
         const GHC.Unicode.isPrint_info;
 },
 GHC.Unicode.isPrint_entry() //  [R2]
         { []
         }
     {offset
       c2lWV: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2lWW; else goto c2lWX;
       c2lWW: // global
           R2 = R2;
           R1 = GHC.Unicode.isPrint_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2lWX: // global
           I64[Sp - 8] = block_c2lWS_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2lXa; else goto c2lWT;
       u2lXa: // global
           call _c2lWS(R1) args: 0, res: 0, upd: 0;
       c2lWT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.isPrint_info" {
     GHC.Unicode.isPrint_info:
         const GHC.Unicode.isPrint_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2lWS() //  [R1]
         { []
         }
     {offset
       c2lWS: // global
           (_s2jeU::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswprint(I64[R1 + 7]);
           if (_s2jeU::I64 == 0) goto c2lX9; else goto c2lX8;
       c2lX9: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2lX8: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2lWS_info" {
     block_c2lWS_info:
         const _c2lWS;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.365707416 UTC

[section ""data" . GHC.Unicode.isControl_closure" {
     GHC.Unicode.isControl_closure:
         const GHC.Unicode.isControl_info;
 },
 GHC.Unicode.isControl_entry() //  [R2]
         { []
         }
     {offset
       c2lXt: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2lXu; else goto c2lXv;
       c2lXu: // global
           R2 = R2;
           R1 = GHC.Unicode.isControl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2lXv: // global
           I64[Sp - 8] = block_c2lXq_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2lXI; else goto c2lXr;
       u2lXI: // global
           call _c2lXq(R1) args: 0, res: 0, upd: 0;
       c2lXr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.isControl_info" {
     GHC.Unicode.isControl_info:
         const GHC.Unicode.isControl_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2lXq() //  [R1]
         { []
         }
     {offset
       c2lXq: // global
           (_s2jf3::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswcntrl(I64[R1 + 7]);
           if (_s2jf3::I64 == 0) goto c2lXH; else goto c2lXG;
       c2lXH: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2lXG: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2lXq_info" {
     block_c2lXq_info:
         const _c2lXq;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.371854763 UTC

[section ""data" . GHC.Unicode.isAlphaNum_closure" {
     GHC.Unicode.isAlphaNum_closure:
         const GHC.Unicode.isAlphaNum_info;
 },
 GHC.Unicode.isAlphaNum_entry() //  [R2]
         { []
         }
     {offset
       c2lY1: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2lY2; else goto c2lY3;
       c2lY2: // global
           R2 = R2;
           R1 = GHC.Unicode.isAlphaNum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2lY3: // global
           I64[Sp - 8] = block_c2lXY_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2lYg; else goto c2lXZ;
       u2lYg: // global
           call _c2lXY(R1) args: 0, res: 0, upd: 0;
       c2lXZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.isAlphaNum_info" {
     GHC.Unicode.isAlphaNum_info:
         const GHC.Unicode.isAlphaNum_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2lXY() //  [R1]
         { []
         }
     {offset
       c2lXY: // global
           (_s2jfc::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswalnum(I64[R1 + 7]);
           if (_s2jfc::I64 == 0) goto c2lYf; else goto c2lYe;
       c2lYf: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2lYe: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2lXY_info" {
     block_c2lXY_info:
         const _c2lXY;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.378364228 UTC

[section ""data" . GHC.Unicode.isAlpha_closure" {
     GHC.Unicode.isAlpha_closure:
         const GHC.Unicode.isAlpha_info;
 },
 GHC.Unicode.isAlpha_entry() //  [R2]
         { []
         }
     {offset
       c2lYz: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2lYA; else goto c2lYB;
       c2lYA: // global
           R2 = R2;
           R1 = GHC.Unicode.isAlpha_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2lYB: // global
           I64[Sp - 8] = block_c2lYw_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2lYO; else goto c2lYx;
       u2lYO: // global
           call _c2lYw(R1) args: 0, res: 0, upd: 0;
       c2lYx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.isAlpha_info" {
     GHC.Unicode.isAlpha_info:
         const GHC.Unicode.isAlpha_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2lYw() //  [R1]
         { []
         }
     {offset
       c2lYw: // global
           (_s2jfl::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswalpha(I64[R1 + 7]);
           if (_s2jfl::I64 == 0) goto c2lYN; else goto c2lYM;
       c2lYN: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2lYM: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2lYw_info" {
     block_c2lYw_info:
         const _c2lYw;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.384244217 UTC

[section ""data" . GHC.Unicode.$wisSpace_closure" {
     GHC.Unicode.$wisSpace_closure:
         const GHC.Unicode.$wisSpace_info;
 },
 GHC.Unicode.$wisSpace_entry() //  [R2]
         { []
         }
     {offset
       c2lZ6: // global
           if (R2 > 887) goto c2lZq; else goto c2lZK;
       c2lZq: // global
           (_s2jfv::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswspace(R2);
           if (_s2jfv::I64 == 0) goto c2lZC; else goto c2lZJ;
       c2lZK: // global
           if (R2 == 32) goto c2lZJ; else goto c2lZI;
       c2lZI: // global
           if ((R2 + -9) <= 4) goto c2lZJ; else goto c2lZF;
       c2lZF: // global
           if (R2 == 160) goto c2lZJ; else goto c2lZC;
       c2lZJ: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2lZC: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.$wisSpace_info" {
     GHC.Unicode.$wisSpace_info:
         const GHC.Unicode.$wisSpace_entry;
         const 0;
         const 14;
         const 4294967300;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.388470131 UTC

[section ""data" . GHC.Unicode.isSpace_closure" {
     GHC.Unicode.isSpace_closure:
         const GHC.Unicode.isSpace_info;
 },
 GHC.Unicode.isSpace_entry() //  [R2]
         { []
         }
     {offset
       c2lZZ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2m00; else goto c2m01;
       c2m00: // global
           R2 = R2;
           R1 = GHC.Unicode.isSpace_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2m01: // global
           I64[Sp - 8] = block_c2lZW_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2m05; else goto c2lZX;
       u2m05: // global
           call _c2lZW(R1) args: 0, res: 0, upd: 0;
       c2lZX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.isSpace_info" {
     GHC.Unicode.isSpace_info:
         const GHC.Unicode.isSpace_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2lZW() //  [R1]
         { []
         }
     {offset
       c2lZW: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Unicode.$wisSpace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2lZW_info" {
     block_c2lZW_info:
         const _c2lZW;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.393439758 UTC

[section ""data" . GHC.Unicode.UppercaseLetter_closure" {
     GHC.Unicode.UppercaseLetter_closure:
         const GHC.Unicode.UppercaseLetter_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.395558675 UTC

[section ""data" . GHC.Unicode.LowercaseLetter_closure" {
     GHC.Unicode.LowercaseLetter_closure:
         const GHC.Unicode.LowercaseLetter_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.397169257 UTC

[section ""data" . GHC.Unicode.TitlecaseLetter_closure" {
     GHC.Unicode.TitlecaseLetter_closure:
         const GHC.Unicode.TitlecaseLetter_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.398871123 UTC

[section ""data" . GHC.Unicode.ModifierLetter_closure" {
     GHC.Unicode.ModifierLetter_closure:
         const GHC.Unicode.ModifierLetter_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.400496103 UTC

[section ""data" . GHC.Unicode.OtherLetter_closure" {
     GHC.Unicode.OtherLetter_closure:
         const GHC.Unicode.OtherLetter_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.402222541 UTC

[section ""data" . GHC.Unicode.NonSpacingMark_closure" {
     GHC.Unicode.NonSpacingMark_closure:
         const GHC.Unicode.NonSpacingMark_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.403869678 UTC

[section ""data" . GHC.Unicode.SpacingCombiningMark_closure" {
     GHC.Unicode.SpacingCombiningMark_closure:
         const GHC.Unicode.SpacingCombiningMark_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.40679238 UTC

[section ""data" . GHC.Unicode.EnclosingMark_closure" {
     GHC.Unicode.EnclosingMark_closure:
         const GHC.Unicode.EnclosingMark_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.408408525 UTC

[section ""data" . GHC.Unicode.DecimalNumber_closure" {
     GHC.Unicode.DecimalNumber_closure:
         const GHC.Unicode.DecimalNumber_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.41004292 UTC

[section ""data" . GHC.Unicode.LetterNumber_closure" {
     GHC.Unicode.LetterNumber_closure:
         const GHC.Unicode.LetterNumber_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.411669936 UTC

[section ""data" . GHC.Unicode.OtherNumber_closure" {
     GHC.Unicode.OtherNumber_closure:
         const GHC.Unicode.OtherNumber_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.413406486 UTC

[section ""data" . GHC.Unicode.ConnectorPunctuation_closure" {
     GHC.Unicode.ConnectorPunctuation_closure:
         const GHC.Unicode.ConnectorPunctuation_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.415537119 UTC

[section ""data" . GHC.Unicode.DashPunctuation_closure" {
     GHC.Unicode.DashPunctuation_closure:
         const GHC.Unicode.DashPunctuation_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.417181701 UTC

[section ""data" . GHC.Unicode.OpenPunctuation_closure" {
     GHC.Unicode.OpenPunctuation_closure:
         const GHC.Unicode.OpenPunctuation_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.41990005 UTC

[section ""data" . GHC.Unicode.ClosePunctuation_closure" {
     GHC.Unicode.ClosePunctuation_closure:
         const GHC.Unicode.ClosePunctuation_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.421639647 UTC

[section ""data" . GHC.Unicode.InitialQuote_closure" {
     GHC.Unicode.InitialQuote_closure:
         const GHC.Unicode.InitialQuote_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.423310106 UTC

[section ""data" . GHC.Unicode.FinalQuote_closure" {
     GHC.Unicode.FinalQuote_closure:
         const GHC.Unicode.FinalQuote_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.424932326 UTC

[section ""data" . GHC.Unicode.OtherPunctuation_closure" {
     GHC.Unicode.OtherPunctuation_closure:
         const GHC.Unicode.OtherPunctuation_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.42658637 UTC

[section ""data" . GHC.Unicode.MathSymbol_closure" {
     GHC.Unicode.MathSymbol_closure:
         const GHC.Unicode.MathSymbol_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.428245828 UTC

[section ""data" . GHC.Unicode.CurrencySymbol_closure" {
     GHC.Unicode.CurrencySymbol_closure:
         const GHC.Unicode.CurrencySymbol_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.429872294 UTC

[section ""data" . GHC.Unicode.ModifierSymbol_closure" {
     GHC.Unicode.ModifierSymbol_closure:
         const GHC.Unicode.ModifierSymbol_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.43143753 UTC

[section ""data" . GHC.Unicode.OtherSymbol_closure" {
     GHC.Unicode.OtherSymbol_closure:
         const GHC.Unicode.OtherSymbol_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.433031748 UTC

[section ""data" . GHC.Unicode.Space_closure" {
     GHC.Unicode.Space_closure:
         const GHC.Unicode.Space_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.435387694 UTC

[section ""data" . GHC.Unicode.LineSeparator_closure" {
     GHC.Unicode.LineSeparator_closure:
         const GHC.Unicode.LineSeparator_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.436990218 UTC

[section ""data" . GHC.Unicode.ParagraphSeparator_closure" {
     GHC.Unicode.ParagraphSeparator_closure:
         const GHC.Unicode.ParagraphSeparator_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.439373004 UTC

[section ""data" . GHC.Unicode.Control_closure" {
     GHC.Unicode.Control_closure:
         const GHC.Unicode.Control_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.441020235 UTC

[section ""data" . GHC.Unicode.Format_closure" {
     GHC.Unicode.Format_closure:
         const GHC.Unicode.Format_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.442761161 UTC

[section ""data" . GHC.Unicode.Surrogate_closure" {
     GHC.Unicode.Surrogate_closure:
         const GHC.Unicode.Surrogate_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.444409389 UTC

[section ""data" . GHC.Unicode.PrivateUse_closure" {
     GHC.Unicode.PrivateUse_closure:
         const GHC.Unicode.PrivateUse_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.446071513 UTC

[section ""data" . GHC.Unicode.NotAssigned_closure" {
     GHC.Unicode.NotAssigned_closure:
         const GHC.Unicode.NotAssigned_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.447926409 UTC

[section ""relreadonly" . GHC.Unicode.GeneralCategory_closure_tbl" {
     GHC.Unicode.GeneralCategory_closure_tbl:
         const GHC.Unicode.UppercaseLetter_closure+1;
         const GHC.Unicode.LowercaseLetter_closure+1;
         const GHC.Unicode.TitlecaseLetter_closure+1;
         const GHC.Unicode.ModifierLetter_closure+1;
         const GHC.Unicode.OtherLetter_closure+1;
         const GHC.Unicode.NonSpacingMark_closure+1;
         const GHC.Unicode.SpacingCombiningMark_closure+1;
         const GHC.Unicode.EnclosingMark_closure+1;
         const GHC.Unicode.DecimalNumber_closure+1;
         const GHC.Unicode.LetterNumber_closure+1;
         const GHC.Unicode.OtherNumber_closure+1;
         const GHC.Unicode.ConnectorPunctuation_closure+1;
         const GHC.Unicode.DashPunctuation_closure+1;
         const GHC.Unicode.OpenPunctuation_closure+1;
         const GHC.Unicode.ClosePunctuation_closure+1;
         const GHC.Unicode.InitialQuote_closure+1;
         const GHC.Unicode.FinalQuote_closure+1;
         const GHC.Unicode.OtherPunctuation_closure+1;
         const GHC.Unicode.MathSymbol_closure+1;
         const GHC.Unicode.CurrencySymbol_closure+1;
         const GHC.Unicode.ModifierSymbol_closure+1;
         const GHC.Unicode.OtherSymbol_closure+1;
         const GHC.Unicode.Space_closure+1;
         const GHC.Unicode.LineSeparator_closure+1;
         const GHC.Unicode.ParagraphSeparator_closure+1;
         const GHC.Unicode.Control_closure+1;
         const GHC.Unicode.Format_closure+1;
         const GHC.Unicode.Surrogate_closure+1;
         const GHC.Unicode.PrivateUse_closure+1;
         const GHC.Unicode.NotAssigned_closure+1;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.45038242 UTC

[section ""cstring" . i2kN2_str" {
     i2kN2_str:
         I8[] [98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,85,112,112,101,114,99,97,115,101,76,101,116,116,101,114]
 },
 GHC.Unicode.UppercaseLetter_con_entry() //  [R1]
         { []
         }
     {offset
       c2m0K: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.UppercaseLetter_con_info" {
     GHC.Unicode.UppercaseLetter_con_info:
         const GHC.Unicode.UppercaseLetter_con_entry;
         const 4294967296;
         const 3;
         const i2kN2_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.453817089 UTC

[section ""cstring" . i2kN4_str" {
     i2kN4_str:
         I8[] [98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,76,111,119,101,114,99,97,115,101,76,101,116,116,101,114]
 },
 GHC.Unicode.LowercaseLetter_con_entry() //  [R1]
         { []
         }
     {offset
       c2m0Q: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.LowercaseLetter_con_info" {
     GHC.Unicode.LowercaseLetter_con_info:
         const GHC.Unicode.LowercaseLetter_con_entry;
         const 4294967296;
         const 4294967299;
         const i2kN4_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.457451786 UTC

[section ""cstring" . i2kN6_str" {
     i2kN6_str:
         I8[] [98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,84,105,116,108,101,99,97,115,101,76,101,116,116,101,114]
 },
 GHC.Unicode.TitlecaseLetter_con_entry() //  [R1]
         { []
         }
     {offset
       c2m0W: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.TitlecaseLetter_con_info" {
     GHC.Unicode.TitlecaseLetter_con_info:
         const GHC.Unicode.TitlecaseLetter_con_entry;
         const 4294967296;
         const 8589934595;
         const i2kN6_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.460520226 UTC

[section ""cstring" . i2kN8_str" {
     i2kN8_str:
         I8[] [98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,77,111,100,105,102,105,101,114,76,101,116,116,101,114]
 },
 GHC.Unicode.ModifierLetter_con_entry() //  [R1]
         { []
         }
     {offset
       c2m12: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.ModifierLetter_con_info" {
     GHC.Unicode.ModifierLetter_con_info:
         const GHC.Unicode.ModifierLetter_con_entry;
         const 4294967296;
         const 12884901891;
         const i2kN8_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.464152081 UTC

[section ""cstring" . i2kNa_str" {
     i2kNa_str:
         I8[] [98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,79,116,104,101,114,76,101,116,116,101,114]
 },
 GHC.Unicode.OtherLetter_con_entry() //  [R1]
         { []
         }
     {offset
       c2m18: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.OtherLetter_con_info" {
     GHC.Unicode.OtherLetter_con_info:
         const GHC.Unicode.OtherLetter_con_entry;
         const 4294967296;
         const 17179869187;
         const i2kNa_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.467278087 UTC

[section ""cstring" . i2kNc_str" {
     i2kNc_str:
         I8[] [98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,78,111,110,83,112,97,99,105,110,103,77,97,114,107]
 },
 GHC.Unicode.NonSpacingMark_con_entry() //  [R1]
         { []
         }
     {offset
       c2m1e: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.NonSpacingMark_con_info" {
     GHC.Unicode.NonSpacingMark_con_info:
         const GHC.Unicode.NonSpacingMark_con_entry;
         const 4294967296;
         const 21474836483;
         const i2kNc_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.470730206 UTC

[section ""cstring" . i2kNe_str" {
     i2kNe_str:
         I8[] [98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,83,112,97,99,105,110,103,67,111,109,98,105,110,105,110,103,77,97,114,107]
 },
 GHC.Unicode.SpacingCombiningMark_con_entry() //  [R1]
         { []
         }
     {offset
       c2m1k: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.SpacingCombiningMark_con_info" {
     GHC.Unicode.SpacingCombiningMark_con_info:
         const GHC.Unicode.SpacingCombiningMark_con_entry;
         const 4294967296;
         const 25769803779;
         const i2kNe_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.473932926 UTC

[section ""cstring" . i2kNg_str" {
     i2kNg_str:
         I8[] [98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,69,110,99,108,111,115,105,110,103,77,97,114,107]
 },
 GHC.Unicode.EnclosingMark_con_entry() //  [R1]
         { []
         }
     {offset
       c2m1q: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.EnclosingMark_con_info" {
     GHC.Unicode.EnclosingMark_con_info:
         const GHC.Unicode.EnclosingMark_con_entry;
         const 4294967296;
         const 30064771075;
         const i2kNg_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.477500361 UTC

[section ""cstring" . i2kNi_str" {
     i2kNi_str:
         I8[] [98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,68,101,99,105,109,97,108,78,117,109,98,101,114]
 },
 GHC.Unicode.DecimalNumber_con_entry() //  [R1]
         { []
         }
     {offset
       c2m1w: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.DecimalNumber_con_info" {
     GHC.Unicode.DecimalNumber_con_info:
         const GHC.Unicode.DecimalNumber_con_entry;
         const 4294967296;
         const 34359738371;
         const i2kNi_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.480564541 UTC

[section ""cstring" . i2kNk_str" {
     i2kNk_str:
         I8[] [98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,76,101,116,116,101,114,78,117,109,98,101,114]
 },
 GHC.Unicode.LetterNumber_con_entry() //  [R1]
         { []
         }
     {offset
       c2m1C: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.LetterNumber_con_info" {
     GHC.Unicode.LetterNumber_con_info:
         const GHC.Unicode.LetterNumber_con_entry;
         const 4294967296;
         const 38654705667;
         const i2kNk_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.483651343 UTC

[section ""cstring" . i2kNm_str" {
     i2kNm_str:
         I8[] [98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,79,116,104,101,114,78,117,109,98,101,114]
 },
 GHC.Unicode.OtherNumber_con_entry() //  [R1]
         { []
         }
     {offset
       c2m1I: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.OtherNumber_con_info" {
     GHC.Unicode.OtherNumber_con_info:
         const GHC.Unicode.OtherNumber_con_entry;
         const 4294967296;
         const 42949672963;
         const i2kNm_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.487291052 UTC

[section ""cstring" . i2kNo_str" {
     i2kNo_str:
         I8[] [98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,67,111,110,110,101,99,116,111,114,80,117,110,99,116,117,97,116,105,111,110]
 },
 GHC.Unicode.ConnectorPunctuation_con_entry() //  [R1]
         { []
         }
     {offset
       c2m1O: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.ConnectorPunctuation_con_info" {
     GHC.Unicode.ConnectorPunctuation_con_info:
         const GHC.Unicode.ConnectorPunctuation_con_entry;
         const 4294967296;
         const 47244640259;
         const i2kNo_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.490587782 UTC

[section ""cstring" . i2kNq_str" {
     i2kNq_str:
         I8[] [98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,68,97,115,104,80,117,110,99,116,117,97,116,105,111,110]
 },
 GHC.Unicode.DashPunctuation_con_entry() //  [R1]
         { []
         }
     {offset
       c2m1U: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.DashPunctuation_con_info" {
     GHC.Unicode.DashPunctuation_con_info:
         const GHC.Unicode.DashPunctuation_con_entry;
         const 4294967296;
         const 51539607555;
         const i2kNq_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.494089376 UTC

[section ""cstring" . i2kNs_str" {
     i2kNs_str:
         I8[] [98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,79,112,101,110,80,117,110,99,116,117,97,116,105,111,110]
 },
 GHC.Unicode.OpenPunctuation_con_entry() //  [R1]
         { []
         }
     {offset
       c2m20: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.OpenPunctuation_con_info" {
     GHC.Unicode.OpenPunctuation_con_info:
         const GHC.Unicode.OpenPunctuation_con_entry;
         const 4294967296;
         const 55834574851;
         const i2kNs_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.497782877 UTC

[section ""cstring" . i2kNu_str" {
     i2kNu_str:
         I8[] [98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,67,108,111,115,101,80,117,110,99,116,117,97,116,105,111,110]
 },
 GHC.Unicode.ClosePunctuation_con_entry() //  [R1]
         { []
         }
     {offset
       c2m26: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.ClosePunctuation_con_info" {
     GHC.Unicode.ClosePunctuation_con_info:
         const GHC.Unicode.ClosePunctuation_con_entry;
         const 4294967296;
         const 60129542147;
         const i2kNu_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.500823302 UTC

[section ""cstring" . i2kNw_str" {
     i2kNw_str:
         I8[] [98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,73,110,105,116,105,97,108,81,117,111,116,101]
 },
 GHC.Unicode.InitialQuote_con_entry() //  [R1]
         { []
         }
     {offset
       c2m2c: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.InitialQuote_con_info" {
     GHC.Unicode.InitialQuote_con_info:
         const GHC.Unicode.InitialQuote_con_entry;
         const 4294967296;
         const 64424509443;
         const i2kNw_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.504250677 UTC

[section ""cstring" . i2kNy_str" {
     i2kNy_str:
         I8[] [98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,70,105,110,97,108,81,117,111,116,101]
 },
 GHC.Unicode.FinalQuote_con_entry() //  [R1]
         { []
         }
     {offset
       c2m2i: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.FinalQuote_con_info" {
     GHC.Unicode.FinalQuote_con_info:
         const GHC.Unicode.FinalQuote_con_entry;
         const 4294967296;
         const 68719476739;
         const i2kNy_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.507375599 UTC

[section ""cstring" . i2kNA_str" {
     i2kNA_str:
         I8[] [98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,79,116,104,101,114,80,117,110,99,116,117,97,116,105,111,110]
 },
 GHC.Unicode.OtherPunctuation_con_entry() //  [R1]
         { []
         }
     {offset
       c2m2o: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.OtherPunctuation_con_info" {
     GHC.Unicode.OtherPunctuation_con_info:
         const GHC.Unicode.OtherPunctuation_con_entry;
         const 4294967296;
         const 73014444035;
         const i2kNA_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.510570599 UTC

[section ""cstring" . i2kNC_str" {
     i2kNC_str:
         I8[] [98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,77,97,116,104,83,121,109,98,111,108]
 },
 GHC.Unicode.MathSymbol_con_entry() //  [R1]
         { []
         }
     {offset
       c2m2u: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.MathSymbol_con_info" {
     GHC.Unicode.MathSymbol_con_info:
         const GHC.Unicode.MathSymbol_con_entry;
         const 4294967296;
         const 77309411331;
         const i2kNC_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.5137326 UTC

[section ""cstring" . i2kNE_str" {
     i2kNE_str:
         I8[] [98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,67,117,114,114,101,110,99,121,83,121,109,98,111,108]
 },
 GHC.Unicode.CurrencySymbol_con_entry() //  [R1]
         { []
         }
     {offset
       c2m2A: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.CurrencySymbol_con_info" {
     GHC.Unicode.CurrencySymbol_con_info:
         const GHC.Unicode.CurrencySymbol_con_entry;
         const 4294967296;
         const 81604378627;
         const i2kNE_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.51686514 UTC

[section ""cstring" . i2kNG_str" {
     i2kNG_str:
         I8[] [98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,77,111,100,105,102,105,101,114,83,121,109,98,111,108]
 },
 GHC.Unicode.ModifierSymbol_con_entry() //  [R1]
         { []
         }
     {offset
       c2m2G: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.ModifierSymbol_con_info" {
     GHC.Unicode.ModifierSymbol_con_info:
         const GHC.Unicode.ModifierSymbol_con_entry;
         const 4294967296;
         const 85899345923;
         const i2kNG_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.52076673 UTC

[section ""cstring" . i2kNI_str" {
     i2kNI_str:
         I8[] [98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,79,116,104,101,114,83,121,109,98,111,108]
 },
 GHC.Unicode.OtherSymbol_con_entry() //  [R1]
         { []
         }
     {offset
       c2m2M: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.OtherSymbol_con_info" {
     GHC.Unicode.OtherSymbol_con_info:
         const GHC.Unicode.OtherSymbol_con_entry;
         const 4294967296;
         const 90194313219;
         const i2kNI_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.523836195 UTC

[section ""cstring" . i2kNK_str" {
     i2kNK_str:
         I8[] [98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,83,112,97,99,101]
 },
 GHC.Unicode.Space_con_entry() //  [R1]
         { []
         }
     {offset
       c2m2S: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.Space_con_info" {
     GHC.Unicode.Space_con_info:
         const GHC.Unicode.Space_con_entry;
         const 4294967296;
         const 94489280515;
         const i2kNK_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.526861637 UTC

[section ""cstring" . i2kNM_str" {
     i2kNM_str:
         I8[] [98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,76,105,110,101,83,101,112,97,114,97,116,111,114]
 },
 GHC.Unicode.LineSeparator_con_entry() //  [R1]
         { []
         }
     {offset
       c2m2Y: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.LineSeparator_con_info" {
     GHC.Unicode.LineSeparator_con_info:
         const GHC.Unicode.LineSeparator_con_entry;
         const 4294967296;
         const 98784247811;
         const i2kNM_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.530403142 UTC

[section ""cstring" . i2kNO_str" {
     i2kNO_str:
         I8[] [98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,80,97,114,97,103,114,97,112,104,83,101,112,97,114,97,116,111,114]
 },
 GHC.Unicode.ParagraphSeparator_con_entry() //  [R1]
         { []
         }
     {offset
       c2m34: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.ParagraphSeparator_con_info" {
     GHC.Unicode.ParagraphSeparator_con_info:
         const GHC.Unicode.ParagraphSeparator_con_entry;
         const 4294967296;
         const 103079215107;
         const i2kNO_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.533631552 UTC

[section ""cstring" . i2kNQ_str" {
     i2kNQ_str:
         I8[] [98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,67,111,110,116,114,111,108]
 },
 GHC.Unicode.Control_con_entry() //  [R1]
         { []
         }
     {offset
       c2m3a: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.Control_con_info" {
     GHC.Unicode.Control_con_info:
         const GHC.Unicode.Control_con_entry;
         const 4294967296;
         const 107374182403;
         const i2kNQ_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.536778428 UTC

[section ""cstring" . i2kNS_str" {
     i2kNS_str:
         I8[] [98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,70,111,114,109,97,116]
 },
 GHC.Unicode.Format_con_entry() //  [R1]
         { []
         }
     {offset
       c2m3g: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.Format_con_info" {
     GHC.Unicode.Format_con_info:
         const GHC.Unicode.Format_con_entry;
         const 4294967296;
         const 111669149699;
         const i2kNS_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.54048316 UTC

[section ""cstring" . i2kNU_str" {
     i2kNU_str:
         I8[] [98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,83,117,114,114,111,103,97,116,101]
 },
 GHC.Unicode.Surrogate_con_entry() //  [R1]
         { []
         }
     {offset
       c2m3m: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.Surrogate_con_info" {
     GHC.Unicode.Surrogate_con_info:
         const GHC.Unicode.Surrogate_con_entry;
         const 4294967296;
         const 115964116995;
         const i2kNU_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.543770418 UTC

[section ""cstring" . i2kNW_str" {
     i2kNW_str:
         I8[] [98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,80,114,105,118,97,116,101,85,115,101]
 },
 GHC.Unicode.PrivateUse_con_entry() //  [R1]
         { []
         }
     {offset
       c2m3s: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.PrivateUse_con_info" {
     GHC.Unicode.PrivateUse_con_info:
         const GHC.Unicode.PrivateUse_con_entry;
         const 4294967296;
         const 120259084291;
         const i2kNW_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.546997273 UTC

[section ""cstring" . i2kNY_str" {
     i2kNY_str:
         I8[] [98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,78,111,116,65,115,115,105,103,110,101,100]
 },
 GHC.Unicode.NotAssigned_con_entry() //  [R1]
         { []
         }
     {offset
       c2m3y: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.NotAssigned_con_info" {
     GHC.Unicode.NotAssigned_con_info:
         const GHC.Unicode.NotAssigned_con_entry;
         const 4294967296;
         const 124554051587;
         const i2kNY_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:03.550336839 UTC

[section ""relreadonly" . S2jm9_srt" {
     S2jm9_srt:
         const GHC.Unicode.$w$cshowsPrec_closure;
         const lvl1_r2j63_closure;
         const lvl3_r2j65_closure;
         const lvl5_r2j67_closure;
         const lvl7_r2j69_closure;
         const lvl9_r2j6b_closure;
         const lvl11_r2j6d_closure;
         const lvl13_r2j6f_closure;
         const lvl15_r2j6h_closure;
         const lvl17_r2j6j_closure;
         const lvl19_r2j6l_closure;
         const lvl21_r2j6n_closure;
         const lvl23_r2j6p_closure;
         const lvl25_r2j6r_closure;
         const lvl27_r2j6t_closure;
         const lvl29_r2j6v_closure;
         const lvl31_r2j6x_closure;
         const lvl33_r2j6z_closure;
         const lvl35_r2j6B_closure;
         const lvl37_r2j6D_closure;
         const lvl39_r2j6F_closure;
         const lvl41_r2j6H_closure;
         const lvl43_r2j6J_closure;
         const lvl45_r2j6L_closure;
         const lvl47_r2j6N_closure;
         const lvl49_r2j6P_closure;
         const lvl51_r2j6R_closure;
         const lvl53_r2j6T_closure;
         const lvl55_r2j6V_closure;
         const lvl57_r2j6X_closure;
         const lvl59_r2j6Z_closure;
         const GHC.Arr.hopelessIndexError_closure;
         const GHC.Unicode.$fIxGeneralCategory_$cindex_closure;
         const lvl62_r2j7d_closure;
         const lvl63_r2j7e_closure;
         const lvl64_r2j7f_closure;
         const GHC.Err.error_closure;
         const GHC.Unicode.$wlvl_closure;
         const $dIP3_r2j7a_closure;
         const GHC.Unicode.$fEnumGeneralCategory_$ctoEnum_closure;
         const GHC.Unicode.$w$ctoEnum_closure;
         const GHC.Char.$wlvl_closure;
         const GHC.Unicode.toLower_closure;
         const GHC.Unicode.toUpper_closure;
         const GHC.Unicode.toTitle_closure;
         const GHC.Unicode.$fEnumGeneralCategory_$csucc_closure;
         const GHC.Unicode.$fEnumGeneralCategory2_closure;
         const GHC.Unicode.$fEnumGeneralCategory_$cpred_closure;
         const GHC.Unicode.$fEnumGeneralCategory1_closure;
         const GHC.Unicode.$fEnumGeneralCategory_$cenumFromTo_closure;
         const GHC.Unicode.$fEnumGeneralCategory_$cenumFromThenTo_closure;
         const GHC.Unicode.generalCategory_closure;
         const GHC.Unicode.$wgeneralCategory_closure;
         const GHC.Unicode.isPunctuation_closure;
         const GHC.Unicode.$wisPunctuation_closure;
         const GHC.Unicode.isSymbol_closure;
         const GHC.Unicode.$wisSymbol_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.394890157 UTC

[]


==================== Raw Cmm ====================
2018-03-16 15:57:06.396015294 UTC

[section ""data" . GHC.Unicode.$fBoundedGeneralCategory_closure" {
     GHC.Unicode.$fBoundedGeneralCategory_closure:
         const GHC.Enum.C:Bounded_con_info;
         const GHC.Unicode.UppercaseLetter_closure+1;
         const GHC.Unicode.NotAssigned_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.397793104 UTC

[section ""cstring" . lvl_r2j62_bytes" {
     lvl_r2j62_bytes:
         I8[] [85,112,112,101,114,99,97,115,101,76,101,116,116,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.400059569 UTC

[section ""data" . lvl1_r2j63_closure" {
     lvl1_r2j63_closure:
         const lvl1_r2j63_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_r2j63_entry() //  [R1]
         { []
         }
     {offset
       c2mc7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mc8; else goto c2mc9;
       c2mc8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mc9: // global
           (_c2mc4::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2mc4::I64 == 0) goto c2mc6; else goto c2mc5;
       c2mc6: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2mc5: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2mc4::I64;
           R2 = lvl_r2j62_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl1_r2j63_info" {
     lvl1_r2j63_info:
         const lvl1_r2j63_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.403580549 UTC

[section ""cstring" . lvl2_r2j64_bytes" {
     lvl2_r2j64_bytes:
         I8[] [76,111,119,101,114,99,97,115,101,76,101,116,116,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.405907743 UTC

[section ""data" . lvl3_r2j65_closure" {
     lvl3_r2j65_closure:
         const lvl3_r2j65_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_r2j65_entry() //  [R1]
         { []
         }
     {offset
       c2mcp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mcq; else goto c2mcr;
       c2mcq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mcr: // global
           (_c2mcm::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2mcm::I64 == 0) goto c2mco; else goto c2mcn;
       c2mco: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2mcn: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2mcm::I64;
           R2 = lvl2_r2j64_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl3_r2j65_info" {
     lvl3_r2j65_info:
         const lvl3_r2j65_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.409448781 UTC

[section ""cstring" . lvl4_r2j66_bytes" {
     lvl4_r2j66_bytes:
         I8[] [84,105,116,108,101,99,97,115,101,76,101,116,116,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.412504083 UTC

[section ""data" . lvl5_r2j67_closure" {
     lvl5_r2j67_closure:
         const lvl5_r2j67_info;
         const 0;
         const 0;
         const 0;
 },
 lvl5_r2j67_entry() //  [R1]
         { []
         }
     {offset
       c2mcH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mcI; else goto c2mcJ;
       c2mcI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mcJ: // global
           (_c2mcE::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2mcE::I64 == 0) goto c2mcG; else goto c2mcF;
       c2mcG: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2mcF: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2mcE::I64;
           R2 = lvl4_r2j66_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl5_r2j67_info" {
     lvl5_r2j67_info:
         const lvl5_r2j67_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.416038978 UTC

[section ""cstring" . lvl6_r2j68_bytes" {
     lvl6_r2j68_bytes:
         I8[] [77,111,100,105,102,105,101,114,76,101,116,116,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.418316588 UTC

[section ""data" . lvl7_r2j69_closure" {
     lvl7_r2j69_closure:
         const lvl7_r2j69_info;
         const 0;
         const 0;
         const 0;
 },
 lvl7_r2j69_entry() //  [R1]
         { []
         }
     {offset
       c2mcZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2md0; else goto c2md1;
       c2md0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2md1: // global
           (_c2mcW::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2mcW::I64 == 0) goto c2mcY; else goto c2mcX;
       c2mcY: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2mcX: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2mcW::I64;
           R2 = lvl6_r2j68_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl7_r2j69_info" {
     lvl7_r2j69_info:
         const lvl7_r2j69_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.421886135 UTC

[section ""cstring" . lvl8_r2j6a_bytes" {
     lvl8_r2j6a_bytes:
         I8[] [79,116,104,101,114,76,101,116,116,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.424191488 UTC

[section ""data" . lvl9_r2j6b_closure" {
     lvl9_r2j6b_closure:
         const lvl9_r2j6b_info;
         const 0;
         const 0;
         const 0;
 },
 lvl9_r2j6b_entry() //  [R1]
         { []
         }
     {offset
       c2mdh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mdi; else goto c2mdj;
       c2mdi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mdj: // global
           (_c2mde::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2mde::I64 == 0) goto c2mdg; else goto c2mdf;
       c2mdg: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2mdf: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2mde::I64;
           R2 = lvl8_r2j6a_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl9_r2j6b_info" {
     lvl9_r2j6b_info:
         const lvl9_r2j6b_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.427678595 UTC

[section ""cstring" . lvl10_r2j6c_bytes" {
     lvl10_r2j6c_bytes:
         I8[] [78,111,110,83,112,97,99,105,110,103,77,97,114,107]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.430499806 UTC

[section ""data" . lvl11_r2j6d_closure" {
     lvl11_r2j6d_closure:
         const lvl11_r2j6d_info;
         const 0;
         const 0;
         const 0;
 },
 lvl11_r2j6d_entry() //  [R1]
         { []
         }
     {offset
       c2mdz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mdA; else goto c2mdB;
       c2mdA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mdB: // global
           (_c2mdw::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2mdw::I64 == 0) goto c2mdy; else goto c2mdx;
       c2mdy: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2mdx: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2mdw::I64;
           R2 = lvl10_r2j6c_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl11_r2j6d_info" {
     lvl11_r2j6d_info:
         const lvl11_r2j6d_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.434056577 UTC

[section ""cstring" . lvl12_r2j6e_bytes" {
     lvl12_r2j6e_bytes:
         I8[] [83,112,97,99,105,110,103,67,111,109,98,105,110,105,110,103,77,97,114,107]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.436368635 UTC

[section ""data" . lvl13_r2j6f_closure" {
     lvl13_r2j6f_closure:
         const lvl13_r2j6f_info;
         const 0;
         const 0;
         const 0;
 },
 lvl13_r2j6f_entry() //  [R1]
         { []
         }
     {offset
       c2mdR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mdS; else goto c2mdT;
       c2mdS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mdT: // global
           (_c2mdO::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2mdO::I64 == 0) goto c2mdQ; else goto c2mdP;
       c2mdQ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2mdP: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2mdO::I64;
           R2 = lvl12_r2j6e_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl13_r2j6f_info" {
     lvl13_r2j6f_info:
         const lvl13_r2j6f_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.440266079 UTC

[section ""cstring" . lvl14_r2j6g_bytes" {
     lvl14_r2j6g_bytes:
         I8[] [69,110,99,108,111,115,105,110,103,77,97,114,107]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.443204567 UTC

[section ""data" . lvl15_r2j6h_closure" {
     lvl15_r2j6h_closure:
         const lvl15_r2j6h_info;
         const 0;
         const 0;
         const 0;
 },
 lvl15_r2j6h_entry() //  [R1]
         { []
         }
     {offset
       c2me9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mea; else goto c2meb;
       c2mea: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2meb: // global
           (_c2me6::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2me6::I64 == 0) goto c2me8; else goto c2me7;
       c2me8: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2me7: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2me6::I64;
           R2 = lvl14_r2j6g_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl15_r2j6h_info" {
     lvl15_r2j6h_info:
         const lvl15_r2j6h_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.446718196 UTC

[section ""cstring" . lvl16_r2j6i_bytes" {
     lvl16_r2j6i_bytes:
         I8[] [68,101,99,105,109,97,108,78,117,109,98,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.449026658 UTC

[section ""data" . lvl17_r2j6j_closure" {
     lvl17_r2j6j_closure:
         const lvl17_r2j6j_info;
         const 0;
         const 0;
         const 0;
 },
 lvl17_r2j6j_entry() //  [R1]
         { []
         }
     {offset
       c2mer: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mes; else goto c2met;
       c2mes: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2met: // global
           (_c2meo::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2meo::I64 == 0) goto c2meq; else goto c2mep;
       c2meq: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2mep: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2meo::I64;
           R2 = lvl16_r2j6i_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl17_r2j6j_info" {
     lvl17_r2j6j_info:
         const lvl17_r2j6j_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.452561446 UTC

[section ""cstring" . lvl18_r2j6k_bytes" {
     lvl18_r2j6k_bytes:
         I8[] [76,101,116,116,101,114,78,117,109,98,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.454935753 UTC

[section ""data" . lvl19_r2j6l_closure" {
     lvl19_r2j6l_closure:
         const lvl19_r2j6l_info;
         const 0;
         const 0;
         const 0;
 },
 lvl19_r2j6l_entry() //  [R1]
         { []
         }
     {offset
       c2meJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2meK; else goto c2meL;
       c2meK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2meL: // global
           (_c2meG::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2meG::I64 == 0) goto c2meI; else goto c2meH;
       c2meI: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2meH: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2meG::I64;
           R2 = lvl18_r2j6k_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl19_r2j6l_info" {
     lvl19_r2j6l_info:
         const lvl19_r2j6l_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.458467384 UTC

[section ""cstring" . lvl20_r2j6m_bytes" {
     lvl20_r2j6m_bytes:
         I8[] [79,116,104,101,114,78,117,109,98,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.460703226 UTC

[section ""data" . lvl21_r2j6n_closure" {
     lvl21_r2j6n_closure:
         const lvl21_r2j6n_info;
         const 0;
         const 0;
         const 0;
 },
 lvl21_r2j6n_entry() //  [R1]
         { []
         }
     {offset
       c2mf1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mf2; else goto c2mf3;
       c2mf2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mf3: // global
           (_c2meY::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2meY::I64 == 0) goto c2mf0; else goto c2meZ;
       c2mf0: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2meZ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2meY::I64;
           R2 = lvl20_r2j6m_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl21_r2j6n_info" {
     lvl21_r2j6n_info:
         const lvl21_r2j6n_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.46417287 UTC

[section ""cstring" . lvl22_r2j6o_bytes" {
     lvl22_r2j6o_bytes:
         I8[] [67,111,110,110,101,99,116,111,114,80,117,110,99,116,117,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.46672812 UTC

[section ""data" . lvl23_r2j6p_closure" {
     lvl23_r2j6p_closure:
         const lvl23_r2j6p_info;
         const 0;
         const 0;
         const 0;
 },
 lvl23_r2j6p_entry() //  [R1]
         { []
         }
     {offset
       c2mfj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mfk; else goto c2mfl;
       c2mfk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mfl: // global
           (_c2mfg::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2mfg::I64 == 0) goto c2mfi; else goto c2mfh;
       c2mfi: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2mfh: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2mfg::I64;
           R2 = lvl22_r2j6o_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl23_r2j6p_info" {
     lvl23_r2j6p_info:
         const lvl23_r2j6p_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.470372933 UTC

[section ""cstring" . lvl24_r2j6q_bytes" {
     lvl24_r2j6q_bytes:
         I8[] [68,97,115,104,80,117,110,99,116,117,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.473085868 UTC

[section ""data" . lvl25_r2j6r_closure" {
     lvl25_r2j6r_closure:
         const lvl25_r2j6r_info;
         const 0;
         const 0;
         const 0;
 },
 lvl25_r2j6r_entry() //  [R1]
         { []
         }
     {offset
       c2mfB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mfC; else goto c2mfD;
       c2mfC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mfD: // global
           (_c2mfy::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2mfy::I64 == 0) goto c2mfA; else goto c2mfz;
       c2mfA: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2mfz: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2mfy::I64;
           R2 = lvl24_r2j6q_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl25_r2j6r_info" {
     lvl25_r2j6r_info:
         const lvl25_r2j6r_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.476550227 UTC

[section ""cstring" . lvl26_r2j6s_bytes" {
     lvl26_r2j6s_bytes:
         I8[] [79,112,101,110,80,117,110,99,116,117,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.479205892 UTC

[section ""data" . lvl27_r2j6t_closure" {
     lvl27_r2j6t_closure:
         const lvl27_r2j6t_info;
         const 0;
         const 0;
         const 0;
 },
 lvl27_r2j6t_entry() //  [R1]
         { []
         }
     {offset
       c2mfT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mfU; else goto c2mfV;
       c2mfU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mfV: // global
           (_c2mfQ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2mfQ::I64 == 0) goto c2mfS; else goto c2mfR;
       c2mfS: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2mfR: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2mfQ::I64;
           R2 = lvl26_r2j6s_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl27_r2j6t_info" {
     lvl27_r2j6t_info:
         const lvl27_r2j6t_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.482680716 UTC

[section ""cstring" . lvl28_r2j6u_bytes" {
     lvl28_r2j6u_bytes:
         I8[] [67,108,111,115,101,80,117,110,99,116,117,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.484828802 UTC

[section ""data" . lvl29_r2j6v_closure" {
     lvl29_r2j6v_closure:
         const lvl29_r2j6v_info;
         const 0;
         const 0;
         const 0;
 },
 lvl29_r2j6v_entry() //  [R1]
         { []
         }
     {offset
       c2mgb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mgc; else goto c2mgd;
       c2mgc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mgd: // global
           (_c2mg8::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2mg8::I64 == 0) goto c2mga; else goto c2mg9;
       c2mga: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2mg9: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2mg8::I64;
           R2 = lvl28_r2j6u_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl29_r2j6v_info" {
     lvl29_r2j6v_info:
         const lvl29_r2j6v_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.48821886 UTC

[section ""cstring" . lvl30_r2j6w_bytes" {
     lvl30_r2j6w_bytes:
         I8[] [73,110,105,116,105,97,108,81,117,111,116,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.490570583 UTC

[section ""data" . lvl31_r2j6x_closure" {
     lvl31_r2j6x_closure:
         const lvl31_r2j6x_info;
         const 0;
         const 0;
         const 0;
 },
 lvl31_r2j6x_entry() //  [R1]
         { []
         }
     {offset
       c2mgt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mgu; else goto c2mgv;
       c2mgu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mgv: // global
           (_c2mgq::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2mgq::I64 == 0) goto c2mgs; else goto c2mgr;
       c2mgs: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2mgr: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2mgq::I64;
           R2 = lvl30_r2j6w_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl31_r2j6x_info" {
     lvl31_r2j6x_info:
         const lvl31_r2j6x_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.494010832 UTC

[section ""cstring" . lvl32_r2j6y_bytes" {
     lvl32_r2j6y_bytes:
         I8[] [70,105,110,97,108,81,117,111,116,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.496245615 UTC

[section ""data" . lvl33_r2j6z_closure" {
     lvl33_r2j6z_closure:
         const lvl33_r2j6z_info;
         const 0;
         const 0;
         const 0;
 },
 lvl33_r2j6z_entry() //  [R1]
         { []
         }
     {offset
       c2mgL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mgM; else goto c2mgN;
       c2mgM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mgN: // global
           (_c2mgI::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2mgI::I64 == 0) goto c2mgK; else goto c2mgJ;
       c2mgK: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2mgJ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2mgI::I64;
           R2 = lvl32_r2j6y_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_r2j6z_info" {
     lvl33_r2j6z_info:
         const lvl33_r2j6z_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.500083817 UTC

[section ""cstring" . lvl34_r2j6A_bytes" {
     lvl34_r2j6A_bytes:
         I8[] [79,116,104,101,114,80,117,110,99,116,117,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.502949765 UTC

[section ""data" . lvl35_r2j6B_closure" {
     lvl35_r2j6B_closure:
         const lvl35_r2j6B_info;
         const 0;
         const 0;
         const 0;
 },
 lvl35_r2j6B_entry() //  [R1]
         { []
         }
     {offset
       c2mh3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mh4; else goto c2mh5;
       c2mh4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mh5: // global
           (_c2mh0::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2mh0::I64 == 0) goto c2mh2; else goto c2mh1;
       c2mh2: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2mh1: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2mh0::I64;
           R2 = lvl34_r2j6A_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl35_r2j6B_info" {
     lvl35_r2j6B_info:
         const lvl35_r2j6B_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.506427329 UTC

[section ""cstring" . lvl36_r2j6C_bytes" {
     lvl36_r2j6C_bytes:
         I8[] [77,97,116,104,83,121,109,98,111,108]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.508745333 UTC

[section ""data" . lvl37_r2j6D_closure" {
     lvl37_r2j6D_closure:
         const lvl37_r2j6D_info;
         const 0;
         const 0;
         const 0;
 },
 lvl37_r2j6D_entry() //  [R1]
         { []
         }
     {offset
       c2mhl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mhm; else goto c2mhn;
       c2mhm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mhn: // global
           (_c2mhi::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2mhi::I64 == 0) goto c2mhk; else goto c2mhj;
       c2mhk: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2mhj: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2mhi::I64;
           R2 = lvl36_r2j6C_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl37_r2j6D_info" {
     lvl37_r2j6D_info:
         const lvl37_r2j6D_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.512624109 UTC

[section ""cstring" . lvl38_r2j6E_bytes" {
     lvl38_r2j6E_bytes:
         I8[] [67,117,114,114,101,110,99,121,83,121,109,98,111,108]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.514960776 UTC

[section ""data" . lvl39_r2j6F_closure" {
     lvl39_r2j6F_closure:
         const lvl39_r2j6F_info;
         const 0;
         const 0;
         const 0;
 },
 lvl39_r2j6F_entry() //  [R1]
         { []
         }
     {offset
       c2mhD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mhE; else goto c2mhF;
       c2mhE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mhF: // global
           (_c2mhA::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2mhA::I64 == 0) goto c2mhC; else goto c2mhB;
       c2mhC: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2mhB: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2mhA::I64;
           R2 = lvl38_r2j6E_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl39_r2j6F_info" {
     lvl39_r2j6F_info:
         const lvl39_r2j6F_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.518561243 UTC

[section ""cstring" . lvl40_r2j6G_bytes" {
     lvl40_r2j6G_bytes:
         I8[] [77,111,100,105,102,105,101,114,83,121,109,98,111,108]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.520755597 UTC

[section ""data" . lvl41_r2j6H_closure" {
     lvl41_r2j6H_closure:
         const lvl41_r2j6H_info;
         const 0;
         const 0;
         const 0;
 },
 lvl41_r2j6H_entry() //  [R1]
         { []
         }
     {offset
       c2mhV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mhW; else goto c2mhX;
       c2mhW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mhX: // global
           (_c2mhS::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2mhS::I64 == 0) goto c2mhU; else goto c2mhT;
       c2mhU: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2mhT: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2mhS::I64;
           R2 = lvl40_r2j6G_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl41_r2j6H_info" {
     lvl41_r2j6H_info:
         const lvl41_r2j6H_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.524192778 UTC

[section ""cstring" . lvl42_r2j6I_bytes" {
     lvl42_r2j6I_bytes:
         I8[] [79,116,104,101,114,83,121,109,98,111,108]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.526467115 UTC

[section ""data" . lvl43_r2j6J_closure" {
     lvl43_r2j6J_closure:
         const lvl43_r2j6J_info;
         const 0;
         const 0;
         const 0;
 },
 lvl43_r2j6J_entry() //  [R1]
         { []
         }
     {offset
       c2mid: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mie; else goto c2mif;
       c2mie: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mif: // global
           (_c2mia::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2mia::I64 == 0) goto c2mic; else goto c2mib;
       c2mic: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2mib: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2mia::I64;
           R2 = lvl42_r2j6I_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl43_r2j6J_info" {
     lvl43_r2j6J_info:
         const lvl43_r2j6J_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.530211844 UTC

[section ""cstring" . lvl44_r2j6K_bytes" {
     lvl44_r2j6K_bytes:
         I8[] [83,112,97,99,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.53303778 UTC

[section ""data" . lvl45_r2j6L_closure" {
     lvl45_r2j6L_closure:
         const lvl45_r2j6L_info;
         const 0;
         const 0;
         const 0;
 },
 lvl45_r2j6L_entry() //  [R1]
         { []
         }
     {offset
       c2miv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2miw; else goto c2mix;
       c2miw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mix: // global
           (_c2mis::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2mis::I64 == 0) goto c2miu; else goto c2mit;
       c2miu: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2mit: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2mis::I64;
           R2 = lvl44_r2j6K_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl45_r2j6L_info" {
     lvl45_r2j6L_info:
         const lvl45_r2j6L_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.53941471 UTC

[section ""cstring" . lvl46_r2j6M_bytes" {
     lvl46_r2j6M_bytes:
         I8[] [76,105,110,101,83,101,112,97,114,97,116,111,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.542785952 UTC

[section ""data" . lvl47_r2j6N_closure" {
     lvl47_r2j6N_closure:
         const lvl47_r2j6N_info;
         const 0;
         const 0;
         const 0;
 },
 lvl47_r2j6N_entry() //  [R1]
         { []
         }
     {offset
       c2miN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2miO; else goto c2miP;
       c2miO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2miP: // global
           (_c2miK::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2miK::I64 == 0) goto c2miM; else goto c2miL;
       c2miM: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2miL: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2miK::I64;
           R2 = lvl46_r2j6M_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl47_r2j6N_info" {
     lvl47_r2j6N_info:
         const lvl47_r2j6N_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.54768015 UTC

[section ""cstring" . lvl48_r2j6O_bytes" {
     lvl48_r2j6O_bytes:
         I8[] [80,97,114,97,103,114,97,112,104,83,101,112,97,114,97,116,111,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.550979545 UTC

[section ""data" . lvl49_r2j6P_closure" {
     lvl49_r2j6P_closure:
         const lvl49_r2j6P_info;
         const 0;
         const 0;
         const 0;
 },
 lvl49_r2j6P_entry() //  [R1]
         { []
         }
     {offset
       c2mj5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mj6; else goto c2mj7;
       c2mj6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mj7: // global
           (_c2mj2::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2mj2::I64 == 0) goto c2mj4; else goto c2mj3;
       c2mj4: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2mj3: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2mj2::I64;
           R2 = lvl48_r2j6O_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl49_r2j6P_info" {
     lvl49_r2j6P_info:
         const lvl49_r2j6P_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.555955077 UTC

[section ""cstring" . lvl50_r2j6Q_bytes" {
     lvl50_r2j6Q_bytes:
         I8[] [67,111,110,116,114,111,108]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.559396652 UTC

[section ""data" . lvl51_r2j6R_closure" {
     lvl51_r2j6R_closure:
         const lvl51_r2j6R_info;
         const 0;
         const 0;
         const 0;
 },
 lvl51_r2j6R_entry() //  [R1]
         { []
         }
     {offset
       c2mjn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mjo; else goto c2mjp;
       c2mjo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mjp: // global
           (_c2mjk::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2mjk::I64 == 0) goto c2mjm; else goto c2mjl;
       c2mjm: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2mjl: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2mjk::I64;
           R2 = lvl50_r2j6Q_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl51_r2j6R_info" {
     lvl51_r2j6R_info:
         const lvl51_r2j6R_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.564757722 UTC

[section ""cstring" . lvl52_r2j6S_bytes" {
     lvl52_r2j6S_bytes:
         I8[] [70,111,114,109,97,116]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.568048436 UTC

[section ""data" . lvl53_r2j6T_closure" {
     lvl53_r2j6T_closure:
         const lvl53_r2j6T_info;
         const 0;
         const 0;
         const 0;
 },
 lvl53_r2j6T_entry() //  [R1]
         { []
         }
     {offset
       c2mjF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mjG; else goto c2mjH;
       c2mjG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mjH: // global
           (_c2mjC::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2mjC::I64 == 0) goto c2mjE; else goto c2mjD;
       c2mjE: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2mjD: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2mjC::I64;
           R2 = lvl52_r2j6S_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl53_r2j6T_info" {
     lvl53_r2j6T_info:
         const lvl53_r2j6T_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.573415231 UTC

[section ""cstring" . lvl54_r2j6U_bytes" {
     lvl54_r2j6U_bytes:
         I8[] [83,117,114,114,111,103,97,116,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.576669972 UTC

[section ""data" . lvl55_r2j6V_closure" {
     lvl55_r2j6V_closure:
         const lvl55_r2j6V_info;
         const 0;
         const 0;
         const 0;
 },
 lvl55_r2j6V_entry() //  [R1]
         { []
         }
     {offset
       c2mjX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mjY; else goto c2mjZ;
       c2mjY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mjZ: // global
           (_c2mjU::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2mjU::I64 == 0) goto c2mjW; else goto c2mjV;
       c2mjW: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2mjV: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2mjU::I64;
           R2 = lvl54_r2j6U_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl55_r2j6V_info" {
     lvl55_r2j6V_info:
         const lvl55_r2j6V_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.580148918 UTC

[section ""cstring" . lvl56_r2j6W_bytes" {
     lvl56_r2j6W_bytes:
         I8[] [80,114,105,118,97,116,101,85,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.582828238 UTC

[section ""data" . lvl57_r2j6X_closure" {
     lvl57_r2j6X_closure:
         const lvl57_r2j6X_info;
         const 0;
         const 0;
         const 0;
 },
 lvl57_r2j6X_entry() //  [R1]
         { []
         }
     {offset
       c2mkf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mkg; else goto c2mkh;
       c2mkg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mkh: // global
           (_c2mkc::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2mkc::I64 == 0) goto c2mke; else goto c2mkd;
       c2mke: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2mkd: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2mkc::I64;
           R2 = lvl56_r2j6W_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl57_r2j6X_info" {
     lvl57_r2j6X_info:
         const lvl57_r2j6X_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.586353531 UTC

[section ""cstring" . lvl58_r2j6Y_bytes" {
     lvl58_r2j6Y_bytes:
         I8[] [78,111,116,65,115,115,105,103,110,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.588625992 UTC

[section ""data" . lvl59_r2j6Z_closure" {
     lvl59_r2j6Z_closure:
         const lvl59_r2j6Z_info;
         const 0;
         const 0;
         const 0;
 },
 lvl59_r2j6Z_entry() //  [R1]
         { []
         }
     {offset
       c2mkx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mky; else goto c2mkz;
       c2mky: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mkz: // global
           (_c2mku::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2mku::I64 == 0) goto c2mkw; else goto c2mkv;
       c2mkw: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2mkv: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2mku::I64;
           R2 = lvl58_r2j6Y_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl59_r2j6Z_info" {
     lvl59_r2j6Z_info:
         const lvl59_r2j6Z_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.595441293 UTC

[section ""data" . GHC.Unicode.$w$cshowsPrec_closure" {
     GHC.Unicode.$w$cshowsPrec_closure:
         const GHC.Unicode.$w$cshowsPrec_info;
         const 0;
 },
 GHC.Unicode.$w$cshowsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       c2mll: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mlm; else goto c2mln;
       c2mlm: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$w$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2mln: // global
           I64[Sp - 16] = block_c2mkM_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2mmQ; else goto c2mkN;
       u2mmQ: // global
           call _c2mkM(R1) args: 0, res: 0, upd: 0;
       c2mkN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.$w$cshowsPrec_info" {
     GHC.Unicode.$w$cshowsPrec_info:
         const GHC.Unicode.$w$cshowsPrec_entry;
         const 0;
         const 9223372032559808526;
         const 8589934607;
         const S2mmR_srt;
 },
 _c2mkM() //  [R1]
         { []
         }
     {offset
       c2mkM: // global
           _s2m3G::P64 = P64[Sp + 8];
           switch [0 .. 29] (%MO_UU_Conv_W32_W64(I32[I64[R1 - 1] + 20])) {
               case 0 : goto c2mkQ;
               case 1 : goto c2mkR;
               case 2 : goto c2mkS;
               case 3 : goto c2mkT;
               case 4 : goto c2mkU;
               case 5 : goto c2mkV;
               case 6 : goto c2mkW;
               case 7 : goto c2mkX;
               case 8 : goto c2mkY;
               case 9 : goto c2mkZ;
               case 10 : goto c2ml0;
               case 11 : goto c2ml1;
               case 12 : goto c2ml2;
               case 13 : goto c2ml3;
               case 14 : goto c2ml4;
               case 15 : goto c2ml5;
               case 16 : goto c2ml6;
               case 17 : goto c2ml7;
               case 18 : goto c2ml8;
               case 19 : goto c2ml9;
               case 20 : goto c2mla;
               case 21 : goto c2mlb;
               case 22 : goto c2mlc;
               case 23 : goto c2mld;
               case 24 : goto c2mle;
               case 25 : goto c2mlf;
               case 26 : goto c2mlg;
               case 27 : goto c2mlh;
               case 28 : goto c2mli;
               case 29 : goto c2mlj;
           }
       c2mlj: // global
           R3 = _s2m3G::P64;
           R2 = lvl59_r2j6Z_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2mli: // global
           R3 = _s2m3G::P64;
           R2 = lvl57_r2j6X_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2mlh: // global
           R3 = _s2m3G::P64;
           R2 = lvl55_r2j6V_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2mlg: // global
           R3 = _s2m3G::P64;
           R2 = lvl53_r2j6T_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2mlf: // global
           R3 = _s2m3G::P64;
           R2 = lvl51_r2j6R_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2mle: // global
           R3 = _s2m3G::P64;
           R2 = lvl49_r2j6P_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2mld: // global
           R3 = _s2m3G::P64;
           R2 = lvl47_r2j6N_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2mlc: // global
           R3 = _s2m3G::P64;
           R2 = lvl45_r2j6L_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2mlb: // global
           R3 = _s2m3G::P64;
           R2 = lvl43_r2j6J_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2mla: // global
           R3 = _s2m3G::P64;
           R2 = lvl41_r2j6H_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2ml9: // global
           R3 = _s2m3G::P64;
           R2 = lvl39_r2j6F_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2ml8: // global
           R3 = _s2m3G::P64;
           R2 = lvl37_r2j6D_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2ml7: // global
           R3 = _s2m3G::P64;
           R2 = lvl35_r2j6B_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2ml6: // global
           R3 = _s2m3G::P64;
           R2 = lvl33_r2j6z_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2ml5: // global
           R3 = _s2m3G::P64;
           R2 = lvl31_r2j6x_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2ml4: // global
           R3 = _s2m3G::P64;
           R2 = lvl29_r2j6v_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2ml3: // global
           R3 = _s2m3G::P64;
           R2 = lvl27_r2j6t_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2ml2: // global
           R3 = _s2m3G::P64;
           R2 = lvl25_r2j6r_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2ml1: // global
           R3 = _s2m3G::P64;
           R2 = lvl23_r2j6p_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2ml0: // global
           R3 = _s2m3G::P64;
           R2 = lvl21_r2j6n_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2mkZ: // global
           R3 = _s2m3G::P64;
           R2 = lvl19_r2j6l_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2mkY: // global
           R3 = _s2m3G::P64;
           R2 = lvl17_r2j6j_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2mkX: // global
           R3 = _s2m3G::P64;
           R2 = lvl15_r2j6h_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2mkW: // global
           R3 = _s2m3G::P64;
           R2 = lvl13_r2j6f_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2mkV: // global
           R3 = _s2m3G::P64;
           R2 = lvl11_r2j6d_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2mkU: // global
           R3 = _s2m3G::P64;
           R2 = lvl9_r2j6b_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2mkT: // global
           R3 = _s2m3G::P64;
           R2 = lvl7_r2j69_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2mkS: // global
           R3 = _s2m3G::P64;
           R2 = lvl5_r2j67_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2mkR: // global
           R3 = _s2m3G::P64;
           R2 = lvl3_r2j65_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2mkQ: // global
           R3 = _s2m3G::P64;
           R2 = lvl1_r2j63_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2mkM_info" {
     block_c2mkM_info:
         const _c2mkM;
         const 1;
         const 4611686014132420638;
         const S2mmR_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.604761689 UTC

[section ""data" . GHC.Unicode.$fShowGeneralCategory_$cshowsPrec_closure" {
     GHC.Unicode.$fShowGeneralCategory_$cshowsPrec_closure:
         const GHC.Unicode.$fShowGeneralCategory_$cshowsPrec_info;
         const 0;
 },
 GHC.Unicode.$fShowGeneralCategory_$cshowsPrec_entry() //  [R3, R4]
         { []
         }
     {offset
       c2mnb: // global
           _s2m3J::P64 = R3;
           R3 = R4;
           R2 = _s2m3J::P64;
           call GHC.Unicode.$w$cshowsPrec_entry(R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.$fShowGeneralCategory_$cshowsPrec_info" {
     GHC.Unicode.$fShowGeneralCategory_$cshowsPrec_info:
         const GHC.Unicode.$fShowGeneralCategory_$cshowsPrec_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const S2mmR_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.607893828 UTC

[section ""data" . GHC.Unicode.$fShowGeneralCategory1_closure" {
     GHC.Unicode.$fShowGeneralCategory1_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.60991313 UTC

[section ""data" . GHC.Unicode.$fShowGeneralCategory_$cshow_closure" {
     GHC.Unicode.$fShowGeneralCategory_$cshow_closure:
         const GHC.Unicode.$fShowGeneralCategory_$cshow_info;
         const 0;
 },
 GHC.Unicode.$fShowGeneralCategory_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c2mnn: // global
           R3 = GHC.Types.[]_closure+1;
           R2 = R2;
           call GHC.Unicode.$w$cshowsPrec_entry(R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.$fShowGeneralCategory_$cshow_info" {
     GHC.Unicode.$fShowGeneralCategory_$cshow_info:
         const GHC.Unicode.$fShowGeneralCategory_$cshow_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S2mmR_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.613398691 UTC

[section ""data" . GHC.Unicode.$fShowGeneralCategory_$cshowList_closure" {
     GHC.Unicode.$fShowGeneralCategory_$cshowList_closure:
         const GHC.Unicode.$fShowGeneralCategory_$cshowList_info;
         const 0;
 },
 GHC.Unicode.$fShowGeneralCategory_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       c2mnz: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Unicode.$w$cshowsPrec_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.$fShowGeneralCategory_$cshowList_info" {
     GHC.Unicode.$fShowGeneralCategory_$cshowList_info:
         const GHC.Unicode.$fShowGeneralCategory_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S2mmR_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.616432083 UTC

[section ""data" . GHC.Unicode.$fShowGeneralCategory_closure" {
     GHC.Unicode.$fShowGeneralCategory_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Unicode.$fShowGeneralCategory_$cshowsPrec_closure+3;
         const GHC.Unicode.$fShowGeneralCategory_$cshow_closure+1;
         const GHC.Unicode.$fShowGeneralCategory_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.619323259 UTC

[section ""data" . GHC.Unicode.$fEqGeneralCategory_$c==_closure" {
     GHC.Unicode.$fEqGeneralCategory_$c==_closure:
         const GHC.Unicode.$fEqGeneralCategory_$c==_info;
 },
 GHC.Unicode.$fEqGeneralCategory_$c==_entry() //  [R2, R3]
         { []
         }
     {offset
       c2mnP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mnV; else goto c2mnW;
       c2mnV: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fEqGeneralCategory_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2mnW: // global
           I64[Sp - 16] = block_c2mnL_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2mog; else goto c2mnM;
       u2mog: // global
           call _c2mnL(R1) args: 0, res: 0, upd: 0;
       c2mnM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.$fEqGeneralCategory_$c==_info" {
     GHC.Unicode.$fEqGeneralCategory_$c==_info:
         const GHC.Unicode.$fEqGeneralCategory_$c==_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2mnL() //  [R1]
         { []
         }
     {offset
       c2mnL: // global
           _s2m3R::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2mnU_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2m3R::I64;
           if (R1 & 7 != 0) goto u2mof; else goto c2mo1;
       u2mof: // global
           call _c2mnU(R1) args: 0, res: 0, upd: 0;
       c2mo1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2mnL_info" {
     block_c2mnL_info:
         const _c2mnL;
         const 1;
         const 30;
 },
 _c2mnU() //  [R1]
         { []
         }
     {offset
       c2mnU: // global
           R1 = I64[((I64[Sp + 8] == %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20])) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2mnU_info" {
     block_c2mnU_info:
         const _c2mnU;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.627071108 UTC

[section ""data" . GHC.Unicode.$fEqGeneralCategory_$c/=_closure" {
     GHC.Unicode.$fEqGeneralCategory_$c/=_closure:
         const GHC.Unicode.$fEqGeneralCategory_$c/=_info;
 },
 GHC.Unicode.$fEqGeneralCategory_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       c2moP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2moV; else goto c2moW;
       c2moV: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fEqGeneralCategory_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2moW: // global
           I64[Sp - 16] = block_c2moL_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2mpk; else goto c2moM;
       u2mpk: // global
           call _c2moL(R1) args: 0, res: 0, upd: 0;
       c2moM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.$fEqGeneralCategory_$c/=_info" {
     GHC.Unicode.$fEqGeneralCategory_$c/=_info:
         const GHC.Unicode.$fEqGeneralCategory_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2moL() //  [R1]
         { []
         }
     {offset
       c2moL: // global
           _s2m3Y::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2moU_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2m3Y::I64;
           if (R1 & 7 != 0) goto u2mpj; else goto c2mp1;
       u2mpj: // global
           call _c2moU(R1) args: 0, res: 0, upd: 0;
       c2mp1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2moL_info" {
     block_c2moL_info:
         const _c2moL;
         const 1;
         const 30;
 },
 _c2moU() //  [R1]
         { []
         }
     {offset
       c2moU: // global
           if (I64[Sp + 8] == %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20])) goto c2mpg; else goto c2mpf;
       c2mpg: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2mpf: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2moU_info" {
     block_c2moU_info:
         const _c2moU;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.634362624 UTC

[section ""data" . GHC.Unicode.$fEqGeneralCategory_closure" {
     GHC.Unicode.$fEqGeneralCategory_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Unicode.$fEqGeneralCategory_$c==_closure+2;
         const GHC.Unicode.$fEqGeneralCategory_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.637468503 UTC

[section ""data" . GHC.Unicode.$fOrdGeneralCategory_$ccompare_closure" {
     GHC.Unicode.$fOrdGeneralCategory_$ccompare_closure:
         const GHC.Unicode.$fOrdGeneralCategory_$ccompare_info;
 },
 GHC.Unicode.$fOrdGeneralCategory_$ccompare_entry() //  [R2, R3]
         { []
         }
     {offset
       c2mpU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mq0; else goto c2mq1;
       c2mq0: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fOrdGeneralCategory_$ccompare_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2mq1: // global
           I64[Sp - 16] = block_c2mpQ_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2mqv; else goto c2mpR;
       u2mqv: // global
           call _c2mpQ(R1) args: 0, res: 0, upd: 0;
       c2mpR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.$fOrdGeneralCategory_$ccompare_info" {
     GHC.Unicode.$fOrdGeneralCategory_$ccompare_info:
         const GHC.Unicode.$fOrdGeneralCategory_$ccompare_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2mpQ() //  [R1]
         { []
         }
     {offset
       c2mpQ: // global
           _s2m45::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2mpZ_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2m45::I64;
           if (R1 & 7 != 0) goto u2mqu; else goto c2mq6;
       u2mqu: // global
           call _c2mpZ(R1) args: 0, res: 0, upd: 0;
       c2mq6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2mpQ_info" {
     block_c2mpQ_info:
         const _c2mpQ;
         const 1;
         const 30;
 },
 _c2mpZ() //  [R1]
         { []
         }
     {offset
       c2mpZ: // global
           _s2m45::I64 = I64[Sp + 8];
           _s2m47::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           if (%MO_S_Ge_W64(_s2m45::I64,
                            _s2m47::I64)) goto c2mqq; else goto c2mqr;
       c2mqq: // global
           if (_s2m45::I64 == _s2m47::I64) goto c2mqo; else goto c2mqn;
       c2mqo: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2mqn: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2mqr: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2mpZ_info" {
     block_c2mpZ_info:
         const _c2mpZ;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.645740847 UTC

[section ""data" . GHC.Unicode.$fOrdGeneralCategory_$c<_closure" {
     GHC.Unicode.$fOrdGeneralCategory_$c<_closure:
         const GHC.Unicode.$fOrdGeneralCategory_$c<_info;
 },
 GHC.Unicode.$fOrdGeneralCategory_$c<_entry() //  [R2, R3]
         { []
         }
     {offset
       c2mr5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mrb; else goto c2mrc;
       c2mrb: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fOrdGeneralCategory_$c<_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2mrc: // global
           I64[Sp - 16] = block_c2mr1_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2mrw; else goto c2mr2;
       u2mrw: // global
           call _c2mr1(R1) args: 0, res: 0, upd: 0;
       c2mr2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.$fOrdGeneralCategory_$c<_info" {
     GHC.Unicode.$fOrdGeneralCategory_$c<_info:
         const GHC.Unicode.$fOrdGeneralCategory_$c<_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2mr1() //  [R1]
         { []
         }
     {offset
       c2mr1: // global
           _s2m4d::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2mra_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2m4d::I64;
           if (R1 & 7 != 0) goto u2mrv; else goto c2mrh;
       u2mrv: // global
           call _c2mra(R1) args: 0, res: 0, upd: 0;
       c2mrh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2mr1_info" {
     block_c2mr1_info:
         const _c2mr1;
         const 1;
         const 30;
 },
 _c2mra() //  [R1]
         { []
         }
     {offset
       c2mra: // global
           R1 = I64[(%MO_S_Lt_W64(I64[Sp + 8],
                                  %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20])) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2mra_info" {
     block_c2mra_info:
         const _c2mra;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.653495606 UTC

[section ""data" . GHC.Unicode.$fOrdGeneralCategory_$c<=_closure" {
     GHC.Unicode.$fOrdGeneralCategory_$c<=_closure:
         const GHC.Unicode.$fOrdGeneralCategory_$c<=_info;
 },
 GHC.Unicode.$fOrdGeneralCategory_$c<=_entry() //  [R2, R3]
         { []
         }
     {offset
       c2ms5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2msb; else goto c2msc;
       c2msb: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fOrdGeneralCategory_$c<=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2msc: // global
           I64[Sp - 16] = block_c2ms1_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2msA; else goto c2ms2;
       u2msA: // global
           call _c2ms1(R1) args: 0, res: 0, upd: 0;
       c2ms2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.$fOrdGeneralCategory_$c<=_info" {
     GHC.Unicode.$fOrdGeneralCategory_$c<=_info:
         const GHC.Unicode.$fOrdGeneralCategory_$c<=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2ms1() //  [R1]
         { []
         }
     {offset
       c2ms1: // global
           _s2m4k::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2msa_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2m4k::I64;
           if (R1 & 7 != 0) goto u2msz; else goto c2msh;
       u2msz: // global
           call _c2msa(R1) args: 0, res: 0, upd: 0;
       c2msh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2ms1_info" {
     block_c2ms1_info:
         const _c2ms1;
         const 1;
         const 30;
 },
 _c2msa() //  [R1]
         { []
         }
     {offset
       c2msa: // global
           if (%MO_S_Ge_W64(I64[Sp + 8],
                            %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]))) goto c2msv; else goto c2msw;
       c2msv: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2msw: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2msa_info" {
     block_c2msa_info:
         const _c2msa;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.661625031 UTC

[section ""data" . GHC.Unicode.$fOrdGeneralCategory_$cmax_closure" {
     GHC.Unicode.$fOrdGeneralCategory_$cmax_closure:
         const GHC.Unicode.$fOrdGeneralCategory_$cmax_info;
 },
 GHC.Unicode.$fOrdGeneralCategory_$cmax_entry() //  [R2, R3]
         { []
         }
     {offset
       c2mt9: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c2mtf; else goto c2mtg;
       c2mtf: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fOrdGeneralCategory_$cmax_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2mtg: // global
           I64[Sp - 24] = block_c2mt5_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2mtE; else goto c2mt6;
       u2mtE: // global
           call _c2mt5(R1) args: 0, res: 0, upd: 0;
       c2mt6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.$fOrdGeneralCategory_$cmax_info" {
     GHC.Unicode.$fOrdGeneralCategory_$cmax_info:
         const GHC.Unicode.$fOrdGeneralCategory_$cmax_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2mt5() //  [R1]
         { []
         }
     {offset
       c2mt5: // global
           _s2m4r::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp - 8] = block_c2mte_info;
           R1 = P64[Sp + 8];
           I64[Sp] = _s2m4r::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2mtD; else goto c2mtl;
       u2mtD: // global
           call _c2mte(R1) args: 0, res: 0, upd: 0;
       c2mtl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2mt5_info" {
     block_c2mt5_info:
         const _c2mt5;
         const 2;
         const 30;
 },
 _c2mte() //  [R1]
         { []
         }
     {offset
       c2mte: // global
           if (%MO_S_Ge_W64(I64[Sp + 8],
                            %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]))) goto c2mtz; else goto c2mtA;
       c2mtz: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c2mtA: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2mte_info" {
     block_c2mte_info:
         const _c2mte;
         const 67;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.669845883 UTC

[section ""data" . GHC.Unicode.$fOrdGeneralCategory_$c>=_closure" {
     GHC.Unicode.$fOrdGeneralCategory_$c>=_closure:
         const GHC.Unicode.$fOrdGeneralCategory_$c>=_info;
 },
 GHC.Unicode.$fOrdGeneralCategory_$c>=_entry() //  [R2, R3]
         { []
         }
     {offset
       c2mud: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2muj; else goto c2muk;
       c2muj: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fOrdGeneralCategory_$c>=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2muk: // global
           I64[Sp - 16] = block_c2mu9_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2muI; else goto c2mua;
       u2muI: // global
           call _c2mu9(R1) args: 0, res: 0, upd: 0;
       c2mua: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.$fOrdGeneralCategory_$c>=_info" {
     GHC.Unicode.$fOrdGeneralCategory_$c>=_info:
         const GHC.Unicode.$fOrdGeneralCategory_$c>=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2mu9() //  [R1]
         { []
         }
     {offset
       c2mu9: // global
           _s2m4y::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2mui_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2m4y::I64;
           if (R1 & 7 != 0) goto u2muH; else goto c2mup;
       u2muH: // global
           call _c2mui(R1) args: 0, res: 0, upd: 0;
       c2mup: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2mu9_info" {
     block_c2mu9_info:
         const _c2mu9;
         const 1;
         const 30;
 },
 _c2mui() //  [R1]
         { []
         }
     {offset
       c2mui: // global
           if (%MO_S_Ge_W64(I64[Sp + 8],
                            %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]))) goto c2muD; else goto c2muE;
       c2muD: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2muE: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2mui_info" {
     block_c2mui_info:
         const _c2mui;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.678817935 UTC

[section ""data" . GHC.Unicode.$fOrdGeneralCategory_$c>_closure" {
     GHC.Unicode.$fOrdGeneralCategory_$c>_closure:
         const GHC.Unicode.$fOrdGeneralCategory_$c>_info;
 },
 GHC.Unicode.$fOrdGeneralCategory_$c>_entry() //  [R2, R3]
         { []
         }
     {offset
       c2mvh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mvn; else goto c2mvo;
       c2mvn: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fOrdGeneralCategory_$c>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2mvo: // global
           I64[Sp - 16] = block_c2mvd_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2mvI; else goto c2mve;
       u2mvI: // global
           call _c2mvd(R1) args: 0, res: 0, upd: 0;
       c2mve: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.$fOrdGeneralCategory_$c>_info" {
     GHC.Unicode.$fOrdGeneralCategory_$c>_info:
         const GHC.Unicode.$fOrdGeneralCategory_$c>_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2mvd() //  [R1]
         { []
         }
     {offset
       c2mvd: // global
           _s2m4F::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2mvm_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2m4F::I64;
           if (R1 & 7 != 0) goto u2mvH; else goto c2mvt;
       u2mvH: // global
           call _c2mvm(R1) args: 0, res: 0, upd: 0;
       c2mvt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2mvd_info" {
     block_c2mvd_info:
         const _c2mvd;
         const 1;
         const 30;
 },
 _c2mvm() //  [R1]
         { []
         }
     {offset
       c2mvm: // global
           R1 = I64[(%MO_S_Lt_W64(I64[Sp + 8],
                                  %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20])) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2mvm_info" {
     block_c2mvm_info:
         const _c2mvm;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.687039547 UTC

[section ""data" . GHC.Unicode.$fOrdGeneralCategory_$cmin_closure" {
     GHC.Unicode.$fOrdGeneralCategory_$cmin_closure:
         const GHC.Unicode.$fOrdGeneralCategory_$cmin_info;
 },
 GHC.Unicode.$fOrdGeneralCategory_$cmin_entry() //  [R2, R3]
         { []
         }
     {offset
       c2mwh: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c2mwn; else goto c2mwo;
       c2mwn: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fOrdGeneralCategory_$cmin_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2mwo: // global
           I64[Sp - 24] = block_c2mwd_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2mwM; else goto c2mwe;
       u2mwM: // global
           call _c2mwd(R1) args: 0, res: 0, upd: 0;
       c2mwe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.$fOrdGeneralCategory_$cmin_info" {
     GHC.Unicode.$fOrdGeneralCategory_$cmin_info:
         const GHC.Unicode.$fOrdGeneralCategory_$cmin_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2mwd() //  [R1]
         { []
         }
     {offset
       c2mwd: // global
           _s2m4M::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp - 8] = block_c2mwm_info;
           R1 = P64[Sp + 8];
           I64[Sp] = _s2m4M::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2mwL; else goto c2mwt;
       u2mwL: // global
           call _c2mwm(R1) args: 0, res: 0, upd: 0;
       c2mwt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2mwd_info" {
     block_c2mwd_info:
         const _c2mwd;
         const 2;
         const 30;
 },
 _c2mwm() //  [R1]
         { []
         }
     {offset
       c2mwm: // global
           if (%MO_S_Ge_W64(I64[Sp + 8],
                            %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]))) goto c2mwH; else goto c2mwI;
       c2mwH: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c2mwI: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2mwm_info" {
     block_c2mwm_info:
         const _c2mwm;
         const 67;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.69446061 UTC

[section ""data" . GHC.Unicode.$fOrdGeneralCategory_closure" {
     GHC.Unicode.$fOrdGeneralCategory_closure:
         const GHC.Classes.C:Ord_con_info;
         const GHC.Unicode.$fEqGeneralCategory_closure+1;
         const GHC.Unicode.$fOrdGeneralCategory_$ccompare_closure+2;
         const GHC.Unicode.$fOrdGeneralCategory_$c<_closure+2;
         const GHC.Unicode.$fOrdGeneralCategory_$c<=_closure+2;
         const GHC.Unicode.$fOrdGeneralCategory_$c>_closure+2;
         const GHC.Unicode.$fOrdGeneralCategory_$c>=_closure+2;
         const GHC.Unicode.$fOrdGeneralCategory_$cmax_closure+2;
         const GHC.Unicode.$fOrdGeneralCategory_$cmin_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.698093162 UTC

[section ""data" . GHC.Unicode.$fEnumGeneralCategory_$cfromEnum_closure" {
     GHC.Unicode.$fEnumGeneralCategory_$cfromEnum_closure:
         const GHC.Unicode.$fEnumGeneralCategory_$cfromEnum_info;
 },
 GHC.Unicode.$fEnumGeneralCategory_$cfromEnum_entry() //  [R2]
         { []
         }
     {offset
       c2mxm: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2mxs; else goto c2mxt;
       c2mxs: // global
           R2 = R2;
           R1 = GHC.Unicode.$fEnumGeneralCategory_$cfromEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2mxt: // global
           I64[Sp - 8] = block_c2mxi_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2mxE; else goto c2mxj;
       u2mxE: // global
           call _c2mxi(R1) args: 0, res: 0, upd: 0;
       c2mxj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.$fEnumGeneralCategory_$cfromEnum_info" {
     GHC.Unicode.$fEnumGeneralCategory_$cfromEnum_info:
         const GHC.Unicode.$fEnumGeneralCategory_$cfromEnum_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2mxi() //  [R1]
         { []
         }
     {offset
       c2mxi: // global
           I64[Sp] = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           call _c2mxp() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2mxi_info" {
     block_c2mxi_info:
         const _c2mxi;
         const 0;
         const 30;
 },
 _c2mxp() //  []
         { []
         }
     {offset
       c2mxp: // global
           Hp = Hp + 16;
           _s2m4S::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c2mxz; else goto c2mxy;
       c2mxz: // global
           HpAlloc = 16;
           I64[Sp] = block_c2mxo_info;
           R1 = _s2m4S::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c2mxy: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2m4S::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2mxo() //  [R1]
         { []
         }
     {offset
       c2mxo: // global
           I64[Sp] = R1;
           call _c2mxp() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2mxo_info" {
     block_c2mxo_info:
         const _c2mxo;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.707161013 UTC

[section ""data" . GHC.Unicode.$fIxGeneralCategory_$cunsafeIndex_closure" {
     GHC.Unicode.$fIxGeneralCategory_$cunsafeIndex_closure:
         const GHC.Unicode.$fIxGeneralCategory_$cunsafeIndex_info;
 },
 GHC.Unicode.$fIxGeneralCategory_$cunsafeIndex_entry() //  [R2, R3]
         { []
         }
     {offset
       c2my9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2myw; else goto c2myx;
       c2myw: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fIxGeneralCategory_$cunsafeIndex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2myx: // global
           I64[Sp - 16] = block_c2my6_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2myO; else goto c2my7;
       u2myO: // global
           call _c2my6(R1) args: 0, res: 0, upd: 0;
       c2my7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.$fIxGeneralCategory_$cunsafeIndex_info" {
     GHC.Unicode.$fIxGeneralCategory_$cunsafeIndex_info:
         const GHC.Unicode.$fIxGeneralCategory_$cunsafeIndex_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2my6() //  [R1]
         { []
         }
     {offset
       c2my6: // global
           I64[Sp] = block_c2myc_info;
           R1 = P64[R1 + 7];
           if (R1 & 7 != 0) goto u2myN; else goto c2myd;
       u2myN: // global
           call _c2myc(R1) args: 0, res: 0, upd: 0;
       c2myd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2my6_info" {
     block_c2my6_info:
         const _c2my6;
         const 1;
         const 30;
 },
 _c2myc() //  [R1]
         { []
         }
     {offset
       c2myc: // global
           _s2m4Z::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2myk_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2m4Z::I64;
           if (R1 & 7 != 0) goto u2myP; else goto c2myl;
       u2myP: // global
           call _c2myk(R1) args: 0, res: 0, upd: 0;
       c2myl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2myc_info" {
     block_c2myc_info:
         const _c2myc;
         const 1;
         const 30;
 },
 _c2myk() //  [R1]
         { []
         }
     {offset
       c2myk: // global
           I64[Sp] = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           call _c2myq() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2myk_info" {
     block_c2myk_info:
         const _c2myk;
         const 65;
         const 30;
 },
 _c2myq() //  []
         { []
         }
     {offset
       c2myq: // global
           Hp = Hp + 16;
           _s2m51::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c2myI; else goto c2myH;
       c2myI: // global
           HpAlloc = 16;
           I64[Sp] = block_c2myp_info;
           R1 = _s2m51::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c2myH: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2m51::I64 - I64[Sp + 8];
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2myp() //  [R1]
         { []
         }
     {offset
       c2myp: // global
           I64[Sp] = R1;
           call _c2myq() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2myp_info" {
     block_c2myp_info:
         const _c2myp;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.719211087 UTC

[section ""data" . GHC.Unicode.$fIxGeneralCategory_$cinRange_closure" {
     GHC.Unicode.$fIxGeneralCategory_$cinRange_closure:
         const GHC.Unicode.$fIxGeneralCategory_$cinRange_info;
 },
 GHC.Unicode.$fIxGeneralCategory_$cinRange_entry() //  [R2, R3]
         { []
         }
     {offset
       c2mzA: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2mzU; else goto c2mzV;
       c2mzU: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fIxGeneralCategory_$cinRange_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2mzV: // global
           I64[Sp - 16] = block_c2mzx_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2mAs; else goto c2mzy;
       u2mAs: // global
           call _c2mzx(R1) args: 0, res: 0, upd: 0;
       c2mzy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.$fIxGeneralCategory_$cinRange_info" {
     GHC.Unicode.$fIxGeneralCategory_$cinRange_info:
         const GHC.Unicode.$fIxGeneralCategory_$cinRange_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2mzx() //  [R1]
         { []
         }
     {offset
       c2mzx: // global
           I64[Sp - 8] = block_c2mzD_info;
           _s2m57::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2m57::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2mAr; else goto c2mzE;
       u2mAr: // global
           call _c2mzD(R1) args: 0, res: 0, upd: 0;
       c2mzE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2mzx_info" {
     block_c2mzx_info:
         const _c2mzx;
         const 1;
         const 30;
 },
 _c2mzD() //  [R1]
         { []
         }
     {offset
       c2mzD: // global
           _s2m59::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2mzL_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2m59::I64;
           if (R1 & 7 != 0) goto u2mAt; else goto c2mzM;
       u2mAt: // global
           call _c2mzL(R1) args: 0, res: 0, upd: 0;
       c2mzM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2mzD_info" {
     block_c2mzD_info:
         const _c2mzD;
         const 2;
         const 30;
 },
 _c2mzL() //  [R1]
         { []
         }
     {offset
       c2mzL: // global
           _s2m5b::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2mzT_info;
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s2m5b::I64;
           if (R1 & 7 != 0) goto u2mAu; else goto c2mA5;
       u2mAu: // global
           call _c2mzT(R1) args: 0, res: 0, upd: 0;
       c2mA5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2mzL_info" {
     block_c2mzL_info:
         const _c2mzL;
         const 66;
         const 30;
 },
 _c2mzT() //  [R1]
         { []
         }
     {offset
       c2mzT: // global
           _s2m5d::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           if (%MO_S_Lt_W64(_s2m5d::I64,
                            I64[Sp + 8])) goto c2mAj; else goto c2mAk;
       c2mAj: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2mAk: // global
           R1 = I64[(%MO_S_Le_W64(_s2m5d::I64,
                                  I64[Sp + 16]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2mzT_info" {
     block_c2mzT_info:
         const _c2mzT;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.733492284 UTC

[section ""data" . GHC.Unicode.$w$crange_closure" {
     GHC.Unicode.$w$crange_closure:
         const GHC.Unicode.$w$crange_info;
 },
 sat_s2m5s_entry() //  [R1]
         { []
         }
     {offset
       c2mBK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mBL; else goto c2mBM;
       c2mBL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mBM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2m5o::I64 = I64[R1 + 32];
           if (_s2m5o::I64 == I64[R1 + 24]) goto c2mBJ; else goto c2mBI;
       c2mBJ: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c2mBI: // global
           R2 = _s2m5o::I64 + 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_s2m5n_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2m5s_info" {
     sat_s2m5s_info:
         const sat_s2m5s_entry;
         const 8589934593;
         const 15;
 },
 sat_s2m5p_entry() //  [R1]
         { []
         }
     {offset
       c2mBT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mBU; else goto c2mBV;
       c2mBU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mBV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2m5p_info" {
     sat_s2m5p_info:
         const sat_s2m5p_entry;
         const 4294967296;
         const 17;
 },
 go_s2m5n_entry() //  [R1, R2]
         { []
         }
     {offset
       c2mBX: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c2mC1; else goto c2mC0;
       c2mC1: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2mC0: // global
           _s2m5l::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s2m5s_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s2m5l::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s2m5p_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_s2m5n_info" {
     go_s2m5n_info:
         const go_s2m5n_entry;
         const 4294967296;
         const 10;
         const 4294967300;
 },
 GHC.Unicode.$w$crange_entry() //  [R2, R3]
         { []
         }
     {offset
       c2mC2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mC3; else goto c2mC4;
       c2mC3: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$w$crange_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2mC4: // global
           I64[Sp - 16] = block_c2mBd_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2mCp; else goto c2mBe;
       u2mCp: // global
           call _c2mBd(R1) args: 0, res: 0, upd: 0;
       c2mBe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.$w$crange_info" {
     GHC.Unicode.$w$crange_info:
         const GHC.Unicode.$w$crange_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2mBd() //  [R1]
         { []
         }
     {offset
       c2mBd: // global
           _s2m5j::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2mBl_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2m5j::I64;
           if (R1 & 7 != 0) goto u2mCm; else goto c2mBm;
       u2mCm: // global
           call _c2mBl(R1) args: 0, res: 0, upd: 0;
       c2mBm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2mBd_info" {
     block_c2mBd_info:
         const _c2mBd;
         const 1;
         const 30;
 },
 _c2mBl() //  [R1]
         { []
         }
     {offset
       c2mBl: // global
           I64[Sp] = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           call _c2mBr() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2mBl_info" {
     block_c2mBl_info:
         const _c2mBl;
         const 65;
         const 30;
 },
 _c2mBr() //  []
         { []
         }
     {offset
       c2mBr: // global
           Hp = Hp + 16;
           _s2m5l::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c2mCe; else goto c2mCd;
       c2mCe: // global
           HpAlloc = 16;
           I64[Sp] = block_c2mBq_info;
           R1 = _s2m5l::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c2mCd: // global
           _s2m5j::I64 = I64[Sp + 8];
           if (%MO_S_Le_W64(_s2m5j::I64,
                            _s2m5l::I64)) goto c2mCg; else goto c2mCh;
       c2mCg: // global
           I64[Hp - 8] = go_s2m5n_info;
           I64[Hp] = _s2m5l::I64;
           R2 = _s2m5j::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call go_s2m5n_entry(R2, R1) args: 8, res: 0, upd: 8;
       c2mCh: // global
           Hp = Hp - 16;
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2mBq() //  [R1]
         { []
         }
     {offset
       c2mBq: // global
           I64[Sp] = R1;
           call _c2mBr() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2mBq_info" {
     block_c2mBq_info:
         const _c2mBq;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.74873772 UTC

[section ""data" . GHC.Unicode.$fIxGeneralCategory_$crange_closure" {
     GHC.Unicode.$fIxGeneralCategory_$crange_closure:
         const GHC.Unicode.$fIxGeneralCategory_$crange_info;
 },
 GHC.Unicode.$fIxGeneralCategory_$crange_entry() //  [R2]
         { []
         }
     {offset
       c2mDq: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2mDr; else goto c2mDs;
       c2mDr: // global
           R2 = R2;
           R1 = GHC.Unicode.$fIxGeneralCategory_$crange_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2mDs: // global
           I64[Sp - 8] = block_c2mDn_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2mDw; else goto c2mDo;
       u2mDw: // global
           call _c2mDn(R1) args: 0, res: 0, upd: 0;
       c2mDo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.$fIxGeneralCategory_$crange_info" {
     GHC.Unicode.$fIxGeneralCategory_$crange_info:
         const GHC.Unicode.$fIxGeneralCategory_$crange_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2mDn() //  [R1]
         { []
         }
     {offset
       c2mDn: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Unicode.$w$crange_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2mDn_info" {
     block_c2mDn_info:
         const _c2mDn;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.756187675 UTC

[section ""data" . GHC.Unicode.$fIxGeneralCategory_$crangeSize_closure" {
     GHC.Unicode.$fIxGeneralCategory_$crangeSize_closure:
         const GHC.Unicode.$fIxGeneralCategory_$crangeSize_info;
 },
 GHC.Unicode.$fIxGeneralCategory_$crangeSize_entry() //  [R2]
         { []
         }
     {offset
       c2mDO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mE0; else goto c2mE1;
       c2mE0: // global
           R2 = R2;
           R1 = GHC.Unicode.$fIxGeneralCategory_$crangeSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2mE1: // global
           I64[Sp - 8] = block_c2mDL_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2mED; else goto c2mDM;
       u2mED: // global
           call _c2mDL(R1) args: 0, res: 0, upd: 0;
       c2mDM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.$fIxGeneralCategory_$crangeSize_info" {
     GHC.Unicode.$fIxGeneralCategory_$crangeSize_info:
         const GHC.Unicode.$fIxGeneralCategory_$crangeSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2mDL() //  [R1]
         { []
         }
     {offset
       c2mDL: // global
           I64[Sp - 8] = block_c2mDR_info;
           _s2m5A::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2m5A::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2mEC; else goto c2mDS;
       u2mEC: // global
           call _c2mDR(R1) args: 0, res: 0, upd: 0;
       c2mDS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2mDL_info" {
     block_c2mDL_info:
         const _c2mDL;
         const 0;
         const 30;
 },
 _c2mDR() //  [R1]
         { []
         }
     {offset
       c2mDR: // global
           _s2m5C::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2mDZ_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2m5C::I64;
           if (R1 & 7 != 0) goto u2mEE; else goto c2mE7;
       u2mEE: // global
           call _c2mDZ(R1) args: 0, res: 0, upd: 0;
       c2mE7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2mDR_info" {
     block_c2mDR_info:
         const _c2mDR;
         const 1;
         const 30;
 },
 _c2mDZ() //  [R1]
         { []
         }
     {offset
       c2mDZ: // global
           I64[Sp] = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           call _c2mEf() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2mDZ_info" {
     block_c2mDZ_info:
         const _c2mDZ;
         const 65;
         const 30;
 },
 _c2mEf() //  []
         { []
         }
     {offset
       c2mEf: // global
           Hp = Hp + 16;
           _s2m5E::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c2mEj; else goto c2mEi;
       c2mEj: // global
           HpAlloc = 16;
           I64[Sp] = block_c2mEe_info;
           R1 = _s2m5E::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c2mEi: // global
           _s2m5C::I64 = I64[Sp + 8];
           if (%MO_S_Lt_W64(_s2m5E::I64,
                            _s2m5C::I64)) goto c2mEn; else goto c2mEx;
       c2mEn: // global
           Hp = Hp - 16;
           R1 = GHC.Unicode.$fShowGeneralCategory1_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2mEx: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2m5E::I64 - _s2m5C::I64 + 1;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2mEe() //  [R1]
         { []
         }
     {offset
       c2mEe: // global
           I64[Sp] = R1;
           call _c2mEf() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2mEe_info" {
     block_c2mEe_info:
         const _c2mEe;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.76847861 UTC

[section ""data" . GHC.Unicode.$fIxGeneralCategory_$cunsafeRangeSize_closure" {
     GHC.Unicode.$fIxGeneralCategory_$cunsafeRangeSize_closure:
         const GHC.Unicode.$fIxGeneralCategory_$cunsafeRangeSize_info;
 },
 GHC.Unicode.$fIxGeneralCategory_$cunsafeRangeSize_entry() //  [R2]
         { []
         }
     {offset
       c2mFr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mFR; else goto c2mFS;
       c2mFR: // global
           R2 = R2;
           R1 = GHC.Unicode.$fIxGeneralCategory_$cunsafeRangeSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2mFS: // global
           I64[Sp - 8] = block_c2mFo_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2mG9; else goto c2mFp;
       u2mG9: // global
           call _c2mFo(R1) args: 0, res: 0, upd: 0;
       c2mFp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.$fIxGeneralCategory_$cunsafeRangeSize_info" {
     GHC.Unicode.$fIxGeneralCategory_$cunsafeRangeSize_info:
         const GHC.Unicode.$fIxGeneralCategory_$cunsafeRangeSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2mFo() //  [R1]
         { []
         }
     {offset
       c2mFo: // global
           I64[Sp - 8] = block_c2mFu_info;
           _s2m5L::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2m5L::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2mG8; else goto c2mFv;
       u2mG8: // global
           call _c2mFu(R1) args: 0, res: 0, upd: 0;
       c2mFv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2mFo_info" {
     block_c2mFo_info:
         const _c2mFo;
         const 0;
         const 30;
 },
 _c2mFu() //  [R1]
         { []
         }
     {offset
       c2mFu: // global
           _s2m5N::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2mFC_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2m5N::I64;
           if (R1 & 7 != 0) goto u2mGa; else goto c2mFD;
       u2mGa: // global
           call _c2mFC(R1) args: 0, res: 0, upd: 0;
       c2mFD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2mFu_info" {
     block_c2mFu_info:
         const _c2mFu;
         const 1;
         const 30;
 },
 _c2mFC() //  [R1]
         { []
         }
     {offset
       c2mFC: // global
           I64[Sp] = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           call _c2mFI() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2mFC_info" {
     block_c2mFC_info:
         const _c2mFC;
         const 65;
         const 30;
 },
 _c2mFI() //  []
         { []
         }
     {offset
       c2mFI: // global
           Hp = Hp + 16;
           _s2m5P::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c2mG3; else goto c2mG2;
       c2mG3: // global
           HpAlloc = 16;
           I64[Sp] = block_c2mFH_info;
           R1 = _s2m5P::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c2mG2: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2m5P::I64 - I64[Sp + 8] + 1;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2mFH() //  [R1]
         { []
         }
     {offset
       c2mFH: // global
           I64[Sp] = R1;
           call _c2mFI() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2mFH_info" {
     block_c2mFH_info:
         const _c2mFH;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.781362916 UTC

[section ""data" . GHC.Unicode.$fIxGeneralCategory_$cindex_closure" {
     GHC.Unicode.$fIxGeneralCategory_$cindex_closure:
         const GHC.Unicode.$fIxGeneralCategory_$cindex_info;
         const 0;
 },
 GHC.Unicode.$fIxGeneralCategory_$cindex_entry() //  [R2, R3]
         { []
         }
     {offset
       c2mGW: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2mHg; else goto c2mHh;
       c2mHg: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fIxGeneralCategory_$cindex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2mHh: // global
           I64[Sp - 16] = block_c2mGT_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2mI2; else goto c2mGU;
       u2mI2: // global
           call _c2mGT(R1) args: 0, res: 0, upd: 0;
       c2mGU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.$fIxGeneralCategory_$cindex_info" {
     GHC.Unicode.$fIxGeneralCategory_$cindex_info:
         const GHC.Unicode.$fIxGeneralCategory_$cindex_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S2mmR_srt+248;
 },
 _c2mGT() //  [R1]
         { []
         }
     {offset
       c2mGT: // global
           I64[Sp - 8] = block_c2mGZ_info;
           _s2m5W::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2m5W::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2mI1; else goto c2mH0;
       u2mI1: // global
           call _c2mGZ(R1) args: 0, res: 0, upd: 0;
       c2mH0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2mGT_info" {
     block_c2mGT_info:
         const _c2mGT;
         const 1;
         const 4294967326;
         const S2mmR_srt+248;
 },
 _c2mGZ() //  [R1]
         { []
         }
     {offset
       c2mGZ: // global
           _s2m5Y::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2mH7_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2m5Y::I64;
           if (R1 & 7 != 0) goto u2mI3; else goto c2mH8;
       u2mI3: // global
           call _c2mH7(R1) args: 0, res: 0, upd: 0;
       c2mH8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2mGZ_info" {
     block_c2mGZ_info:
         const _c2mGZ;
         const 2;
         const 4294967326;
         const S2mmR_srt+248;
 },
 _c2mH7() //  [R1]
         { []
         }
     {offset
       c2mH7: // global
           _s2m60::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2mHf_info;
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s2m60::I64;
           if (R1 & 7 != 0) goto u2mI4; else goto c2mHr;
       u2mI4: // global
           call _c2mHf(R1) args: 0, res: 0, upd: 0;
       c2mHr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2mH7_info" {
     block_c2mH7_info:
         const _c2mH7;
         const 66;
         const 4294967326;
         const S2mmR_srt+248;
 },
 _c2mHf() //  [R1]
         { []
         }
     {offset
       c2mHf: // global
           I64[Sp] = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           call _c2mHz() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2mHf_info" {
     block_c2mHf_info:
         const _c2mHf;
         const 194;
         const 4294967326;
         const S2mmR_srt+248;
 },
 _c2mHz() //  []
         { []
         }
     {offset
       c2mHz: // global
           Hp = Hp + 16;
           _s2m62::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c2mHD; else goto c2mHC;
       c2mHD: // global
           HpAlloc = 16;
           I64[Sp] = block_c2mHy_info;
           R1 = _s2m62::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c2mHC: // global
           _s2m5Y::I64 = I64[Sp + 8];
           if (%MO_S_Lt_W64(_s2m62::I64,
                            _s2m5Y::I64)) goto c2mHN; else goto c2mHV;
       c2mHV: // global
           if (%MO_S_Gt_W64(_s2m62::I64,
                            I64[Sp + 16])) goto c2mHN; else goto c2mHU;
       c2mHN: // global
           Hp = Hp - 16;
           R1 = GHC.Arr.hopelessIndexError_closure;
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c2mHU: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2m62::I64 - _s2m5Y::I64;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2mHy() //  [R1]
         { []
         }
     {offset
       c2mHy: // global
           I64[Sp] = R1;
           call _c2mHz() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2mHy_info" {
     block_c2mHy_info:
         const _c2mHy;
         const 194;
         const 4294967326;
         const S2mmR_srt+248;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.794214967 UTC

[section ""data" . GHC.Unicode.$fIxGeneralCategory_closure" {
     GHC.Unicode.$fIxGeneralCategory_closure:
         const GHC.Arr.C:Ix_con_info;
         const GHC.Unicode.$fOrdGeneralCategory_closure+1;
         const GHC.Unicode.$fIxGeneralCategory_$crange_closure+1;
         const GHC.Unicode.$fIxGeneralCategory_$cindex_closure+2;
         const GHC.Unicode.$fIxGeneralCategory_$cunsafeIndex_closure+2;
         const GHC.Unicode.$fIxGeneralCategory_$cinRange_closure+2;
         const GHC.Unicode.$fIxGeneralCategory_$crangeSize_closure+1;
         const GHC.Unicode.$fIxGeneralCategory_$cunsafeRangeSize_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.795986875 UTC

[section ""cstring" . GHC.Unicode.$trModule4_bytes" {
     GHC.Unicode.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.798268177 UTC

[section ""data" . loc_r2j70_closure" {
     loc_r2j70_closure:
         const loc_r2j70_info;
         const 0;
         const 0;
         const 0;
 },
 loc_r2j70_entry() //  [R1]
         { []
         }
     {offset
       c2mIZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mJ0; else goto c2mJ1;
       c2mJ0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mJ1: // global
           (_c2mIW::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2mIW::I64 == 0) goto c2mIY; else goto c2mIX;
       c2mIY: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2mIX: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2mIW::I64;
           R2 = GHC.Unicode.$trModule4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . loc_r2j70_info" {
     loc_r2j70_info:
         const loc_r2j70_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.802017663 UTC

[section ""cstring" . GHC.Unicode.$trModule2_bytes" {
     GHC.Unicode.$trModule2_bytes:
         I8[] [71,72,67,46,85,110,105,99,111,100,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.804138685 UTC

[section ""data" . loc1_r2j71_closure" {
     loc1_r2j71_closure:
         const loc1_r2j71_info;
         const 0;
         const 0;
         const 0;
 },
 loc1_r2j71_entry() //  [R1]
         { []
         }
     {offset
       c2mJh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mJi; else goto c2mJj;
       c2mJi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mJj: // global
           (_c2mJe::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2mJe::I64 == 0) goto c2mJg; else goto c2mJf;
       c2mJg: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2mJf: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2mJe::I64;
           R2 = GHC.Unicode.$trModule2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . loc1_r2j71_info" {
     loc1_r2j71_info:
         const loc1_r2j71_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.807563221 UTC

[section ""cstring" . loc2_r2j72_bytes" {
     loc2_r2j72_bytes:
         I8[] [46,47,71,72,67,47,85,110,105,99,111,100,101,46,104,115]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.810010306 UTC

[section ""data" . loc3_r2j73_closure" {
     loc3_r2j73_closure:
         const loc3_r2j73_info;
         const 0;
         const 0;
         const 0;
 },
 loc3_r2j73_entry() //  [R1]
         { []
         }
     {offset
       c2mJz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mJA; else goto c2mJB;
       c2mJA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mJB: // global
           (_c2mJw::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2mJw::I64 == 0) goto c2mJy; else goto c2mJx;
       c2mJy: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2mJx: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2mJw::I64;
           R2 = loc2_r2j72_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . loc3_r2j73_info" {
     loc3_r2j73_info:
         const loc3_r2j73_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.81417814 UTC

[section ""data" . loc4_r2j74_closure" {
     loc4_r2j74_closure:
         const GHC.Types.I#_con_info;
         const 135;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.815843188 UTC

[section ""data" . loc5_r2j75_closure" {
     loc5_r2j75_closure:
         const GHC.Types.I#_con_info;
         const 20;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.817468645 UTC

[section ""data" . loc6_r2j76_closure" {
     loc6_r2j76_closure:
         const GHC.Types.I#_con_info;
         const 24;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.818954842 UTC

[section ""cstring" . $dIP_r2j77_bytes" {
     $dIP_r2j77_bytes:
         I8[] [101,114,114,111,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.821317402 UTC

[section ""data" . $dIP1_r2j78_closure" {
     $dIP1_r2j78_closure:
         const $dIP1_r2j78_info;
         const 0;
         const 0;
         const 0;
 },
 $dIP1_r2j78_entry() //  [R1]
         { []
         }
     {offset
       c2mJU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mJV; else goto c2mJW;
       c2mJV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mJW: // global
           (_c2mJR::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2mJR::I64 == 0) goto c2mJT; else goto c2mJS;
       c2mJT: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2mJS: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2mJR::I64;
           R2 = $dIP_r2j77_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dIP1_r2j78_info" {
     $dIP1_r2j78_info:
         const $dIP1_r2j78_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.824918448 UTC

[section ""data" . $dIP2_r2j79_closure" {
     $dIP2_r2j79_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const loc_r2j70_closure;
         const loc1_r2j71_closure;
         const loc3_r2j73_closure;
         const loc4_r2j74_closure+1;
         const loc5_r2j75_closure+1;
         const loc4_r2j74_closure+1;
         const loc6_r2j76_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.827182749 UTC

[section ""data" . $dIP3_r2j7a_closure" {
     $dIP3_r2j7a_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const $dIP1_r2j78_closure;
         const $dIP2_r2j79_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.828860364 UTC

[section ""cstring" . lvl60_r2j7b_bytes" {
     lvl60_r2j7b_bytes:
         I8[] [41,32,105,115,32,111,117,116,115,105,100,101,32,111,102,32,101,110,117,109,101,114,97,116,105,111,110,39,115,32,114,97,110,103,101,32,40,48,44]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.830542962 UTC

[section ""cstring" . lvl61_r2j7c_bytes" {
     lvl61_r2j7c_bytes:
         I8[] [41]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.832782311 UTC

[section ""data" . lvl62_r2j7d_closure" {
     lvl62_r2j7d_closure:
         const lvl62_r2j7d_info;
         const 0;
         const 0;
         const 0;
 },
 lvl62_r2j7d_entry() //  [R1]
         { []
         }
     {offset
       c2mKf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mKg; else goto c2mKh;
       c2mKg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mKh: // global
           (_c2mKc::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2mKc::I64 == 0) goto c2mKe; else goto c2mKd;
       c2mKe: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2mKd: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2mKc::I64;
           R2 = lvl61_r2j7c_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl62_r2j7d_info" {
     lvl62_r2j7d_info:
         const lvl62_r2j7d_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.837611284 UTC

[section ""data" . lvl63_r2j7e_closure" {
     lvl63_r2j7e_closure:
         const lvl63_r2j7e_info;
         const 0;
         const 0;
         const 0;
 },
 lvl63_r2j7e_entry() //  [R1]
         { []
         }
     {offset
       c2mKz: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2mKA; else goto c2mKB;
       c2mKA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mKB: // global
           (_c2mKt::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2mKt::I64 == 0) goto c2mKv; else goto c2mKu;
       c2mKv: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2mKu: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2mKt::I64;
           I64[Sp - 24] = block_c2mKw_info;
           R4 = lvl62_r2j7d_closure;
           R3 = 29;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl63_r2j7e_info" {
     lvl63_r2j7e_info:
         const lvl63_r2j7e_entry;
         const 0;
         const 4294967317;
         const S2mmR_srt+264;
 },
 _c2mKw() //  [R1, R2]
         { []
         }
     {offset
       c2mKw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2mKE; else goto c2mKD;
       c2mKE: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c2mKD: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c2mKw_info" {
     block_c2mKw_info:
         const _c2mKw;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.843807555 UTC

[section ""data" . lvl64_r2j7f_closure" {
     lvl64_r2j7f_closure:
         const lvl64_r2j7f_info;
         const 0;
         const 0;
         const 0;
 },
 lvl64_r2j7f_entry() //  [R1]
         { []
         }
     {offset
       c2mKZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mL0; else goto c2mL1;
       c2mL0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mL1: // global
           (_c2mKW::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2mKW::I64 == 0) goto c2mKY; else goto c2mKX;
       c2mKY: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2mKX: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2mKW::I64;
           R3 = lvl63_r2j7e_closure;
           R2 = lvl60_r2j7b_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl64_r2j7f_info" {
     lvl64_r2j7f_info:
         const lvl64_r2j7f_entry;
         const 0;
         const 4294967317;
         const S2mmR_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.847515556 UTC

[section ""cstring" . lvl65_r2j7g_bytes" {
     lvl65_r2j7g_bytes:
         I8[] [116,111,69,110,117,109,123,71,101,110,101,114,97,108,67,97,116,101,103,111,114,121,125,58,32,116,97,103,32,40]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.850711353 UTC

[section ""data" . GHC.Unicode.$wlvl_closure" {
     GHC.Unicode.$wlvl_closure:
         const GHC.Unicode.$wlvl_info;
         const 0;
 },
 sat_s2m6d_entry() //  [R1]
         { []
         }
     {offset
       c2mLm: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2mLn; else goto c2mLo;
       c2mLn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mLo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c2mLj_info;
           R4 = lvl64_r2j7f_closure;
           R3 = I64[R1 + 16];
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2m6d_info" {
     sat_s2m6d_info:
         const sat_s2m6d_entry;
         const 4294967296;
         const 4294967313;
         const S2mmR_srt+280;
 },
 _c2mLj() //  [R1, R2]
         { []
         }
     {offset
       c2mLj: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2mLr; else goto c2mLq;
       c2mLr: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c2mLq: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c2mLj_info" {
     block_c2mLj_info:
         const _c2mLj;
         const 0;
         const 30;
 },
 GHC.Unicode.$wlvl_entry() //  [R2]
         { []
         }
     {offset
       c2mLu: // global
           _s2m69::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c2mLv; else goto c2mLw;
       c2mLw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2mLy; else goto c2mLx;
       c2mLy: // global
           HpAlloc = 24;
           goto c2mLv;
       c2mLv: // global
           R2 = _s2m69::I64;
           R1 = GHC.Unicode.$wlvl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2mLx: // global
           I64[Hp - 16] = sat_s2m6d_info;
           I64[Hp] = _s2m69::I64;
           I64[Sp - 8] = block_c2mLs_info;
           R3 = Hp - 16;
           R2 = lvl65_r2j7g_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.$wlvl_info" {
     GHC.Unicode.$wlvl_info:
         const GHC.Unicode.$wlvl_entry;
         const 0;
         const 64424509454;
         const 4294967300;
         const S2mmR_srt+280;
 },
 _c2mLs() //  [R1]
         { []
         }
     {offset
       c2mLs: // global
           R3 = R1;
           R2 = $dIP3_r2j7a_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2mLs_info" {
     block_c2mLs_info:
         const _c2mLs;
         const 0;
         const 21474836510;
         const S2mmR_srt+288;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.859581586 UTC

[section ""data" . GHC.Unicode.$w$ctoEnum_closure" {
     GHC.Unicode.$w$ctoEnum_closure:
         const GHC.Unicode.$w$ctoEnum_info;
         const 0;
 },
 GHC.Unicode.$w$ctoEnum_entry() //  [R2]
         { []
         }
     {offset
       c2mM6: // global
           _s2m6f::I64 = R2;
           if (%MO_S_Lt_W64(R2, 0)) goto c2mMe; else goto c2mM5;
       c2mM5: // global
           if (%MO_S_Gt_W64(_s2m6f::I64, 29)) goto c2mMe; else goto c2mMf;
       c2mMe: // global
           R2 = _s2m6f::I64;
           call GHC.Unicode.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
       c2mMf: // global
           R1 = I64[(_s2m6f::I64 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.$w$ctoEnum_info" {
     GHC.Unicode.$w$ctoEnum_info:
         const GHC.Unicode.$w$ctoEnum_entry;
         const 0;
         const 4294967310;
         const 4294967300;
         const S2mmR_srt+296;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.863602165 UTC

[section ""data" . GHC.Unicode.$fEnumGeneralCategory_$ctoEnum_closure" {
     GHC.Unicode.$fEnumGeneralCategory_$ctoEnum_closure:
         const GHC.Unicode.$fEnumGeneralCategory_$ctoEnum_info;
         const 0;
 },
 GHC.Unicode.$fEnumGeneralCategory_$ctoEnum_entry() //  [R2]
         { []
         }
     {offset
       c2mMu: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2mMv; else goto c2mMw;
       c2mMv: // global
           R2 = R2;
           R1 = GHC.Unicode.$fEnumGeneralCategory_$ctoEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2mMw: // global
           I64[Sp - 8] = block_c2mMr_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2mMA; else goto c2mMs;
       u2mMA: // global
           call _c2mMr(R1) args: 0, res: 0, upd: 0;
       c2mMs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.$fEnumGeneralCategory_$ctoEnum_info" {
     GHC.Unicode.$fEnumGeneralCategory_$ctoEnum_info:
         const GHC.Unicode.$fEnumGeneralCategory_$ctoEnum_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S2mmR_srt+312;
 },
 _c2mMr() //  [R1]
         { []
         }
     {offset
       c2mMr: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Unicode.$w$ctoEnum_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2mMr_info" {
     block_c2mMr_info:
         const _c2mMr;
         const 0;
         const 4294967326;
         const S2mmR_srt+320;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.869880385 UTC

[section ""data" . GHC.Unicode.$fEnumGeneralCategory_go_closure" {
     GHC.Unicode.$fEnumGeneralCategory_go_closure:
         const GHC.Unicode.$fEnumGeneralCategory_go_info;
 },
 sat_s2m6p_entry() //  [R1]
         { []
         }
     {offset
       c2mMX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mMY; else goto c2mMZ;
       c2mMY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mMZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2m6n::I64 = I64[R1 + 16];
           if (_s2m6n::I64 != 29) goto c2mMV; else goto c2mMW;
       c2mMV: // global
           R2 = _s2m6n::I64 + 1;
           Sp = Sp - 16;
           call GHC.Unicode.$fEnumGeneralCategory_go_entry(R2) args: 24, res: 0, upd: 24;
       c2mMW: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2m6p_info" {
     sat_s2m6p_info:
         const sat_s2m6p_entry;
         const 4294967296;
         const 17;
 },
 sat_s2m6m_entry() //  [R1]
         { []
         }
     {offset
       c2mN6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mN7; else goto c2mN8;
       c2mN7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mN8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2m6m_info" {
     sat_s2m6m_info:
         const sat_s2m6m_entry;
         const 4294967296;
         const 17;
 },
 GHC.Unicode.$fEnumGeneralCategory_go_entry() //  [R2]
         { []
         }
     {offset
       c2mNa: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c2mNe; else goto c2mNd;
       c2mNe: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.Unicode.$fEnumGeneralCategory_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2mNd: // global
           I64[Hp - 64] = sat_s2m6p_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s2m6m_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.$fEnumGeneralCategory_go_info" {
     GHC.Unicode.$fEnumGeneralCategory_go_info:
         const GHC.Unicode.$fEnumGeneralCategory_go_entry;
         const 0;
         const 14;
         const 4294967300;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.878258939 UTC

[section ""data" . GHC.Unicode.$fEnumGeneralCategory_$cenumFrom_closure" {
     GHC.Unicode.$fEnumGeneralCategory_$cenumFrom_closure:
         const GHC.Unicode.$fEnumGeneralCategory_$cenumFrom_info;
 },
 GHC.Unicode.$fEnumGeneralCategory_$cenumFrom_entry() //  [R2]
         { []
         }
     {offset
       c2mNM: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2mNN; else goto c2mNO;
       c2mNN: // global
           R2 = R2;
           R1 = GHC.Unicode.$fEnumGeneralCategory_$cenumFrom_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2mNO: // global
           I64[Sp - 8] = block_c2mNI_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2mO3; else goto c2mNJ;
       u2mO3: // global
           call _c2mNI(R1) args: 0, res: 0, upd: 0;
       c2mNJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.$fEnumGeneralCategory_$cenumFrom_info" {
     GHC.Unicode.$fEnumGeneralCategory_$cenumFrom_info:
         const GHC.Unicode.$fEnumGeneralCategory_$cenumFrom_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2mNI() //  [R1]
         { []
         }
     {offset
       c2mNI: // global
           _s2m6s::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           if (%MO_S_Le_W64(_s2m6s::I64, 29)) goto c2mO0; else goto c2mO1;
       c2mO0: // global
           R2 = _s2m6s::I64;
           Sp = Sp + 8;
           call GHC.Unicode.$fEnumGeneralCategory_go_entry(R2) args: 8, res: 0, upd: 8;
       c2mO1: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2mNI_info" {
     block_c2mNI_info:
         const _c2mNI;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.899310825 UTC

[section ""data" . GHC.Unicode.$fEnumGeneralCategory_$cenumFromThen_closure" {
     GHC.Unicode.$fEnumGeneralCategory_$cenumFromThen_closure:
         const GHC.Unicode.$fEnumGeneralCategory_$cenumFromThen_info;
 },
 sat_s2m6L_entry() //  [R1]
         { []
         }
     {offset
       c2mPa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mPb; else goto c2mPc;
       c2mPb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mPc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s2m6G_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2m6L_info" {
     sat_s2m6L_info:
         const sat_s2m6L_entry;
         const 8589934593;
         const 15;
 },
 sat_s2m6J_entry() //  [R1]
         { []
         }
     {offset
       c2mPh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mPi; else goto c2mPj;
       c2mPi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mPj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2m6J_info" {
     sat_s2m6J_info:
         const sat_s2m6J_entry;
         const 4294967296;
         const 17;
 },
 sat_s2m6M_entry() //  [R1]
         { []
         }
     {offset
       c2mPp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mPq; else goto c2mPr;
       c2mPq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mPr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2m6M_info" {
     sat_s2m6M_info:
         const sat_s2m6M_entry;
         const 4294967296;
         const 17;
 },
 go_dn_s2m6G_entry() //  [R1, R2]
         { []
         }
     {offset
       c2mPv: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c2mPz; else goto c2mPy;
       c2mPz: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2mPy: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c2mPt; else goto c2mPu;
       c2mPt: // global
           _s2m6E::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s2m6L_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s2m6E::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s2m6J_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2mPu: // global
           I64[Hp - 80] = sat_s2m6M_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c2mPB::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c2mPB::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_s2m6G_info" {
     go_dn_s2m6G_info:
         const go_dn_s2m6G_entry;
         const 8589934592;
         const 13;
         const 4294967300;
 },
 sat_s2m6N_entry() //  [R1]
         { []
         }
     {offset
       c2mPC: // global
           _s2m6N::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c2mPD; else goto c2mPE;
       c2mPE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2mPG; else goto c2mPF;
       c2mPG: // global
           HpAlloc = 24;
           goto c2mPD;
       c2mPD: // global
           R1 = _s2m6N::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mPF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2m6N::P64;
           _s2m6z::I64 = I64[_s2m6N::P64 + 24];
           _s2m6E::I64 = _s2m6z::I64 - I64[_s2m6N::P64 + 16];
           I64[Hp - 16] = go_dn_s2m6G_info;
           I64[Hp - 8] = _s2m6E::I64;
           I64[Hp] = 29 - _s2m6E::I64;
           R2 = _s2m6z::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s2m6G_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2m6N_info" {
     sat_s2m6N_info:
         const sat_s2m6N_entry;
         const 8589934592;
         const 20;
 },
 sat_s2m6D_entry() //  [R1]
         { []
         }
     {offset
       c2mPL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mPM; else goto c2mPN;
       c2mPM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mPN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2m6D_info" {
     sat_s2m6D_info:
         const sat_s2m6D_entry;
         const 4294967296;
         const 17;
 },
 sat_s2m6P_entry() //  [R1]
         { []
         }
     {offset
       c2mPW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mPX; else goto c2mPY;
       c2mPX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mPY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2m6P_info" {
     sat_s2m6P_info:
         const sat_s2m6P_entry;
         const 4294967296;
         const 17;
 },
 sat_s2m6Z_entry() //  [R1]
         { []
         }
     {offset
       c2mQr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mQs; else goto c2mQt;
       c2mQs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mQt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s2m6U_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2m6Z_info" {
     sat_s2m6Z_info:
         const sat_s2m6Z_entry;
         const 8589934593;
         const 15;
 },
 sat_s2m6X_entry() //  [R1]
         { []
         }
     {offset
       c2mQy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mQz; else goto c2mQA;
       c2mQz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mQA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2m6X_info" {
     sat_s2m6X_info:
         const sat_s2m6X_entry;
         const 4294967296;
         const 17;
 },
 sat_s2m70_entry() //  [R1]
         { []
         }
     {offset
       c2mQG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mQH; else goto c2mQI;
       c2mQH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mQI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2m70_info" {
     sat_s2m70_info:
         const sat_s2m70_entry;
         const 4294967296;
         const 17;
 },
 go_up_s2m6U_entry() //  [R1, R2]
         { []
         }
     {offset
       c2mQM: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c2mQQ; else goto c2mQP;
       c2mQQ: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2mQP: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c2mQK; else goto c2mQL;
       c2mQK: // global
           _s2m6S::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s2m6Z_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s2m6S::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s2m6X_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2mQL: // global
           I64[Hp - 80] = sat_s2m70_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c2mQS::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c2mQS::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_s2m6U_info" {
     go_up_s2m6U_info:
         const go_up_s2m6U_entry;
         const 8589934592;
         const 13;
         const 4294967300;
 },
 sat_s2m71_entry() //  [R1]
         { []
         }
     {offset
       c2mQT: // global
           _s2m71::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c2mQU; else goto c2mQV;
       c2mQV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2mQX; else goto c2mQW;
       c2mQX: // global
           HpAlloc = 24;
           goto c2mQU;
       c2mQU: // global
           R1 = _s2m71::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mQW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2m71::P64;
           _s2m6z::I64 = I64[_s2m71::P64 + 24];
           _s2m6S::I64 = _s2m6z::I64 - I64[_s2m71::P64 + 16];
           I64[Hp - 16] = go_up_s2m6U_info;
           I64[Hp - 8] = _s2m6S::I64;
           I64[Hp] = 29 - _s2m6S::I64;
           R2 = _s2m6z::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s2m6U_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2m71_info" {
     sat_s2m71_info:
         const sat_s2m71_entry;
         const 8589934592;
         const 20;
 },
 sat_s2m6R_entry() //  [R1]
         { []
         }
     {offset
       c2mR2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mR3; else goto c2mR4;
       c2mR3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mR4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2m6R_info" {
     sat_s2m6R_info:
         const sat_s2m6R_entry;
         const 4294967296;
         const 17;
 },
 sat_s2m73_entry() //  [R1]
         { []
         }
     {offset
       c2mRd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mRe; else goto c2mRf;
       c2mRe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mRf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2m73_info" {
     sat_s2m73_info:
         const sat_s2m73_entry;
         const 4294967296;
         const 17;
 },
 sat_s2m7e_entry() //  [R1]
         { []
         }
     {offset
       c2mRL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mRM; else goto c2mRN;
       c2mRM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mRN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s2m79_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2m7e_info" {
     sat_s2m7e_info:
         const sat_s2m7e_entry;
         const 8589934593;
         const 15;
 },
 sat_s2m7c_entry() //  [R1]
         { []
         }
     {offset
       c2mRS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mRT; else goto c2mRU;
       c2mRT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mRU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2m7c_info" {
     sat_s2m7c_info:
         const sat_s2m7c_entry;
         const 4294967296;
         const 17;
 },
 sat_s2m7f_entry() //  [R1]
         { []
         }
     {offset
       c2mS0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mS1; else goto c2mS2;
       c2mS1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mS2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2m7f_info" {
     sat_s2m7f_info:
         const sat_s2m7f_entry;
         const 4294967296;
         const 17;
 },
 go_dn_s2m79_entry() //  [R1, R2]
         { []
         }
     {offset
       c2mS6: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c2mSa; else goto c2mS9;
       c2mSa: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2mS9: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c2mS4; else goto c2mS5;
       c2mS4: // global
           _s2m77::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s2m7e_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s2m77::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s2m7c_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2mS5: // global
           I64[Hp - 80] = sat_s2m7f_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c2mSc::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c2mSc::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_s2m79_info" {
     go_dn_s2m79_info:
         const go_dn_s2m79_entry;
         const 8589934592;
         const 13;
         const 4294967300;
 },
 sat_s2m7g_entry() //  [R1]
         { []
         }
     {offset
       c2mSd: // global
           _s2m7g::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c2mSe; else goto c2mSf;
       c2mSf: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2mSh; else goto c2mSg;
       c2mSh: // global
           HpAlloc = 24;
           goto c2mSe;
       c2mSe: // global
           R1 = _s2m7g::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mSg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2m7g::P64;
           _s2m6z::I64 = I64[_s2m7g::P64 + 24];
           _s2m77::I64 = _s2m6z::I64 - I64[_s2m7g::P64 + 16];
           I64[Hp - 16] = go_dn_s2m79_info;
           I64[Hp - 8] = _s2m77::I64;
           I64[Hp] = 0 - _s2m77::I64;
           R2 = _s2m6z::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s2m79_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2m7g_info" {
     sat_s2m7g_info:
         const sat_s2m7g_entry;
         const 8589934592;
         const 20;
 },
 sat_s2m76_entry() //  [R1]
         { []
         }
     {offset
       c2mSm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mSn; else goto c2mSo;
       c2mSn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mSo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2m76_info" {
     sat_s2m76_info:
         const sat_s2m76_entry;
         const 4294967296;
         const 17;
 },
 sat_s2m7i_entry() //  [R1]
         { []
         }
     {offset
       c2mSx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mSy; else goto c2mSz;
       c2mSy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mSz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2m7i_info" {
     sat_s2m7i_info:
         const sat_s2m7i_entry;
         const 4294967296;
         const 17;
 },
 sat_s2m7s_entry() //  [R1]
         { []
         }
     {offset
       c2mT2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mT3; else goto c2mT4;
       c2mT3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mT4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s2m7n_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2m7s_info" {
     sat_s2m7s_info:
         const sat_s2m7s_entry;
         const 8589934593;
         const 15;
 },
 sat_s2m7q_entry() //  [R1]
         { []
         }
     {offset
       c2mT9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mTa; else goto c2mTb;
       c2mTa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mTb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2m7q_info" {
     sat_s2m7q_info:
         const sat_s2m7q_entry;
         const 4294967296;
         const 17;
 },
 sat_s2m7t_entry() //  [R1]
         { []
         }
     {offset
       c2mTh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mTi; else goto c2mTj;
       c2mTi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mTj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2m7t_info" {
     sat_s2m7t_info:
         const sat_s2m7t_entry;
         const 4294967296;
         const 17;
 },
 go_up_s2m7n_entry() //  [R1, R2]
         { []
         }
     {offset
       c2mTn: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c2mTr; else goto c2mTq;
       c2mTr: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2mTq: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c2mTl; else goto c2mTm;
       c2mTl: // global
           _s2m7l::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s2m7s_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s2m7l::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s2m7q_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2mTm: // global
           I64[Hp - 80] = sat_s2m7t_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c2mTt::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c2mTt::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_s2m7n_info" {
     go_up_s2m7n_info:
         const go_up_s2m7n_entry;
         const 8589934592;
         const 13;
         const 4294967300;
 },
 sat_s2m7u_entry() //  [R1]
         { []
         }
     {offset
       c2mTu: // global
           _s2m7u::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c2mTv; else goto c2mTw;
       c2mTw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2mTy; else goto c2mTx;
       c2mTy: // global
           HpAlloc = 24;
           goto c2mTv;
       c2mTv: // global
           R1 = _s2m7u::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mTx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2m7u::P64;
           _s2m6z::I64 = I64[_s2m7u::P64 + 24];
           _s2m7l::I64 = _s2m6z::I64 - I64[_s2m7u::P64 + 16];
           I64[Hp - 16] = go_up_s2m7n_info;
           I64[Hp - 8] = _s2m7l::I64;
           I64[Hp] = 0 - _s2m7l::I64;
           R2 = _s2m6z::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s2m7n_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2m7u_info" {
     sat_s2m7u_info:
         const sat_s2m7u_entry;
         const 8589934592;
         const 20;
 },
 sat_s2m7k_entry() //  [R1]
         { []
         }
     {offset
       c2mTD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mTE; else goto c2mTF;
       c2mTE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mTF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2m7k_info" {
     sat_s2m7k_info:
         const sat_s2m7k_entry;
         const 4294967296;
         const 17;
 },
 sat_s2m7w_entry() //  [R1]
         { []
         }
     {offset
       c2mTO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mTP; else goto c2mTQ;
       c2mTP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mTQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2m7w_info" {
     sat_s2m7w_info:
         const sat_s2m7w_entry;
         const 4294967296;
         const 17;
 },
 GHC.Unicode.$fEnumGeneralCategory_$cenumFromThen_entry() //  [R2,
                                                               R3]
         { []
         }
     {offset
       c2mTR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mTS; else goto c2mTT;
       c2mTS: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fEnumGeneralCategory_$cenumFromThen_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2mTT: // global
           I64[Sp - 16] = block_c2mOn_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2mUQ; else goto c2mOo;
       u2mUQ: // global
           call _c2mOn(R1) args: 0, res: 0, upd: 0;
       c2mOo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.$fEnumGeneralCategory_$cenumFromThen_info" {
     GHC.Unicode.$fEnumGeneralCategory_$cenumFromThen_info:
         const GHC.Unicode.$fEnumGeneralCategory_$cenumFromThen_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2mOn() //  [R1]
         { []
         }
     {offset
       c2mOn: // global
           _s2m6x::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2mOv_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2m6x::I64;
           if (R1 & 7 != 0) goto u2mUN; else goto c2mOw;
       u2mUN: // global
           call _c2mOv(R1) args: 0, res: 0, upd: 0;
       c2mOw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2mOn_info" {
     block_c2mOn_info:
         const _c2mOn;
         const 1;
         const 30;
 },
 _c2mOv() //  [R1]
         { []
         }
     {offset
       c2mOv: // global
           I64[Sp] = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           call _c2mOB() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2mOv_info" {
     block_c2mOv_info:
         const _c2mOv;
         const 65;
         const 30;
 },
 _c2mOB() //  []
         { []
         }
     {offset
       c2mOB: // global
           Hp = Hp + 80;
           _s2m6z::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c2mU3; else goto c2mU2;
       c2mU3: // global
           HpAlloc = 80;
           I64[Sp] = block_c2mOA_info;
           R1 = _s2m6z::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c2mU2: // global
           _s2m6x::I64 = I64[Sp + 8];
           if (%MO_S_Le_W64(_s2m6x::I64,
                            _s2m6z::I64)) goto c2mUo; else goto c2mUI;
       c2mUo: // global
           if (%MO_S_Lt_W64(_s2m6z::I64,
                            _s2m6x::I64)) goto c2mUd; else goto c2mUm;
       c2mUd: // global
           if (%MO_S_Le_W64(29, _s2m6z::I64)) goto c2mU6; else goto c2mUb;
       c2mU6: // global
           I64[Hp - 72] = sat_s2m6N_info;
           I64[Hp - 56] = _s2m6x::I64;
           I64[Hp - 48] = _s2m6z::I64;
           I64[Hp - 40] = sat_s2m6D_info;
           I64[Hp - 24] = _s2m6x::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2mUb: // global
           if (%MO_S_Gt_W64(29, _s2m6x::I64)) goto c2mUF; else goto c2mU9;
       c2mU9: // global
           I64[Hp - 72] = sat_s2m6P_info;
           I64[Hp - 56] = _s2m6x::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c2mU7::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c2mU7::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2mUm: // global
           if (%MO_S_Ge_W64(29, _s2m6z::I64)) goto c2mUg; else goto c2mUl;
       c2mUg: // global
           I64[Hp - 72] = sat_s2m71_info;
           I64[Hp - 56] = _s2m6x::I64;
           I64[Hp - 48] = _s2m6z::I64;
           I64[Hp - 40] = sat_s2m6R_info;
           I64[Hp - 24] = _s2m6x::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2mUl: // global
           if (%MO_S_Lt_W64(29, _s2m6x::I64)) goto c2mUF; else goto c2mUj;
       c2mUj: // global
           I64[Hp - 72] = sat_s2m73_info;
           I64[Hp - 56] = _s2m6x::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c2mUh::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c2mUh::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2mUI: // global
           if (%MO_S_Lt_W64(_s2m6z::I64,
                            _s2m6x::I64)) goto c2mUy; else goto c2mUH;
       c2mUy: // global
           if (%MO_S_Le_W64(0, _s2m6z::I64)) goto c2mUr; else goto c2mUw;
       c2mUr: // global
           I64[Hp - 72] = sat_s2m7g_info;
           I64[Hp - 56] = _s2m6x::I64;
           I64[Hp - 48] = _s2m6z::I64;
           I64[Hp - 40] = sat_s2m76_info;
           I64[Hp - 24] = _s2m6x::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2mUw: // global
           if (%MO_S_Gt_W64(0, _s2m6x::I64)) goto c2mUF; else goto c2mUu;
       c2mUu: // global
           I64[Hp - 72] = sat_s2m7i_info;
           I64[Hp - 56] = _s2m6x::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c2mUs::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c2mUs::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2mUH: // global
           if (%MO_S_Ge_W64(0, _s2m6z::I64)) goto c2mUB; else goto c2mUG;
       c2mUB: // global
           I64[Hp - 72] = sat_s2m7u_info;
           I64[Hp - 56] = _s2m6x::I64;
           I64[Hp - 48] = _s2m6z::I64;
           I64[Hp - 40] = sat_s2m7k_info;
           I64[Hp - 24] = _s2m6x::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2mUG: // global
           if (%MO_S_Lt_W64(0, _s2m6x::I64)) goto c2mUF; else goto c2mUE;
       c2mUF: // global
           Hp = Hp - 80;
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2mUE: // global
           I64[Hp - 72] = sat_s2m7w_info;
           I64[Hp - 56] = _s2m6x::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c2mUC::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c2mUC::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2mOA() //  [R1]
         { []
         }
     {offset
       c2mOA: // global
           I64[Sp] = R1;
           call _c2mOB() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2mOA_info" {
     block_c2mOA_info:
         const _c2mOA;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.961531903 UTC

[section ""data" . GHC.Unicode.$trModule3_closure" {
     GHC.Unicode.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.963254364 UTC

[section ""data" . GHC.Unicode.$trModule1_closure" {
     GHC.Unicode.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.964896086 UTC

[section ""data" . GHC.Unicode.$trModule_closure" {
     GHC.Unicode.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Unicode.$trModule3_closure+1;
         const GHC.Unicode.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.966654681 UTC

[section ""cstring" . GHC.Unicode.$tcGeneralCategory2_bytes" {
     GHC.Unicode.$tcGeneralCategory2_bytes:
         I8[] [71,101,110,101,114,97,108,67,97,116,101,103,111,114,121]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.968263539 UTC

[section ""data" . GHC.Unicode.$tcGeneralCategory1_closure" {
     GHC.Unicode.$tcGeneralCategory1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tcGeneralCategory2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.970522073 UTC

[section ""data" . GHC.Unicode.$tcGeneralCategory_closure" {
     GHC.Unicode.$tcGeneralCategory_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tcGeneralCategory1_closure+1;
         const GHC.Types.krep$*_closure;
         const 10145990250269206894;
         const 14660269375011335890;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.972324646 UTC

[section ""data" . GHC.Unicode.$tc'ClosePunctuation1_closure" {
     GHC.Unicode.$tc'ClosePunctuation1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Unicode.$tcGeneralCategory_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.974036874 UTC

[section ""cstring" . GHC.Unicode.$tc'UppercaseLetter2_bytes" {
     GHC.Unicode.$tc'UppercaseLetter2_bytes:
         I8[] [39,85,112,112,101,114,99,97,115,101,76,101,116,116,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.975710663 UTC

[section ""data" . GHC.Unicode.$tc'UppercaseLetter1_closure" {
     GHC.Unicode.$tc'UppercaseLetter1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'UppercaseLetter2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.977470946 UTC

[section ""data" . GHC.Unicode.$tc'UppercaseLetter_closure" {
     GHC.Unicode.$tc'UppercaseLetter_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'UppercaseLetter1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 14647285109492872061;
         const 14425225614845259385;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.97922517 UTC

[section ""cstring" . GHC.Unicode.$tc'LowercaseLetter2_bytes" {
     GHC.Unicode.$tc'LowercaseLetter2_bytes:
         I8[] [39,76,111,119,101,114,99,97,115,101,76,101,116,116,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.980815435 UTC

[section ""data" . GHC.Unicode.$tc'LowercaseLetter1_closure" {
     GHC.Unicode.$tc'LowercaseLetter1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'LowercaseLetter2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.982652864 UTC

[section ""data" . GHC.Unicode.$tc'LowercaseLetter_closure" {
     GHC.Unicode.$tc'LowercaseLetter_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'LowercaseLetter1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 6843638521722139917;
         const 11845029203120951590;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.984372387 UTC

[section ""cstring" . GHC.Unicode.$tc'TitlecaseLetter2_bytes" {
     GHC.Unicode.$tc'TitlecaseLetter2_bytes:
         I8[] [39,84,105,116,108,101,99,97,115,101,76,101,116,116,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.98653121 UTC

[section ""data" . GHC.Unicode.$tc'TitlecaseLetter1_closure" {
     GHC.Unicode.$tc'TitlecaseLetter1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'TitlecaseLetter2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.988158418 UTC

[section ""data" . GHC.Unicode.$tc'TitlecaseLetter_closure" {
     GHC.Unicode.$tc'TitlecaseLetter_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'TitlecaseLetter1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 11035134207864173010;
         const 10162510539839760824;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.989889002 UTC

[section ""cstring" . GHC.Unicode.$tc'ModifierLetter2_bytes" {
     GHC.Unicode.$tc'ModifierLetter2_bytes:
         I8[] [39,77,111,100,105,102,105,101,114,76,101,116,116,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.991457094 UTC

[section ""data" . GHC.Unicode.$tc'ModifierLetter1_closure" {
     GHC.Unicode.$tc'ModifierLetter1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'ModifierLetter2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.993167116 UTC

[section ""data" . GHC.Unicode.$tc'ModifierLetter_closure" {
     GHC.Unicode.$tc'ModifierLetter_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'ModifierLetter1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 9531845544999081993;
         const 15142721146394159202;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.994921598 UTC

[section ""cstring" . GHC.Unicode.$tc'OtherLetter2_bytes" {
     GHC.Unicode.$tc'OtherLetter2_bytes:
         I8[] [39,79,116,104,101,114,76,101,116,116,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.996527911 UTC

[section ""data" . GHC.Unicode.$tc'OtherLetter1_closure" {
     GHC.Unicode.$tc'OtherLetter1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'OtherLetter2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:06.998514228 UTC

[section ""data" . GHC.Unicode.$tc'OtherLetter_closure" {
     GHC.Unicode.$tc'OtherLetter_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'OtherLetter1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 4852466454551376074;
         const 478150797319163725;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.000173589 UTC

[section ""cstring" . GHC.Unicode.$tc'NonSpacingMark2_bytes" {
     GHC.Unicode.$tc'NonSpacingMark2_bytes:
         I8[] [39,78,111,110,83,112,97,99,105,110,103,77,97,114,107]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.001786956 UTC

[section ""data" . GHC.Unicode.$tc'NonSpacingMark1_closure" {
     GHC.Unicode.$tc'NonSpacingMark1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'NonSpacingMark2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.003452549 UTC

[section ""data" . GHC.Unicode.$tc'NonSpacingMark_closure" {
     GHC.Unicode.$tc'NonSpacingMark_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'NonSpacingMark1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 11798799283128539890;
         const 8595267121230037978;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.005180495 UTC

[section ""cstring" . GHC.Unicode.$tc'SpacingCombiningMark2_bytes" {
     GHC.Unicode.$tc'SpacingCombiningMark2_bytes:
         I8[] [39,83,112,97,99,105,110,103,67,111,109,98,105,110,105,110,103,77,97,114,107]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.00681846 UTC

[section ""data" . GHC.Unicode.$tc'SpacingCombiningMark1_closure" {
     GHC.Unicode.$tc'SpacingCombiningMark1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'SpacingCombiningMark2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.008555374 UTC

[section ""data" . GHC.Unicode.$tc'SpacingCombiningMark_closure" {
     GHC.Unicode.$tc'SpacingCombiningMark_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'SpacingCombiningMark1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 161806050746895686;
         const 6274417789988196957;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.01083897 UTC

[section ""cstring" . GHC.Unicode.$tc'EnclosingMark2_bytes" {
     GHC.Unicode.$tc'EnclosingMark2_bytes:
         I8[] [39,69,110,99,108,111,115,105,110,103,77,97,114,107]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.012555096 UTC

[section ""data" . GHC.Unicode.$tc'EnclosingMark1_closure" {
     GHC.Unicode.$tc'EnclosingMark1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'EnclosingMark2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.014578499 UTC

[section ""data" . GHC.Unicode.$tc'EnclosingMark_closure" {
     GHC.Unicode.$tc'EnclosingMark_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'EnclosingMark1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 18110486507519489617;
         const 1830565827398073667;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.016260176 UTC

[section ""cstring" . GHC.Unicode.$tc'DecimalNumber2_bytes" {
     GHC.Unicode.$tc'DecimalNumber2_bytes:
         I8[] [39,68,101,99,105,109,97,108,78,117,109,98,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.017851469 UTC

[section ""data" . GHC.Unicode.$tc'DecimalNumber1_closure" {
     GHC.Unicode.$tc'DecimalNumber1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'DecimalNumber2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.01956241 UTC

[section ""data" . GHC.Unicode.$tc'DecimalNumber_closure" {
     GHC.Unicode.$tc'DecimalNumber_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'DecimalNumber1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 7339032513903136575;
         const 4295356444207098462;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.021236418 UTC

[section ""cstring" . GHC.Unicode.$tc'LetterNumber2_bytes" {
     GHC.Unicode.$tc'LetterNumber2_bytes:
         I8[] [39,76,101,116,116,101,114,78,117,109,98,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.02290383 UTC

[section ""data" . GHC.Unicode.$tc'LetterNumber1_closure" {
     GHC.Unicode.$tc'LetterNumber1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'LetterNumber2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.024516996 UTC

[section ""data" . GHC.Unicode.$tc'LetterNumber_closure" {
     GHC.Unicode.$tc'LetterNumber_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'LetterNumber1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 10629256336866531923;
         const 16896950428492761972;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.026827654 UTC

[section ""cstring" . GHC.Unicode.$tc'OtherNumber2_bytes" {
     GHC.Unicode.$tc'OtherNumber2_bytes:
         I8[] [39,79,116,104,101,114,78,117,109,98,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.028430253 UTC

[section ""data" . GHC.Unicode.$tc'OtherNumber1_closure" {
     GHC.Unicode.$tc'OtherNumber1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'OtherNumber2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.030206232 UTC

[section ""data" . GHC.Unicode.$tc'OtherNumber_closure" {
     GHC.Unicode.$tc'OtherNumber_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'OtherNumber1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 10187389108931559810;
         const 2377339607923931442;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.031975419 UTC

[section ""cstring" . GHC.Unicode.$tc'ConnectorPunctuation2_bytes" {
     GHC.Unicode.$tc'ConnectorPunctuation2_bytes:
         I8[] [39,67,111,110,110,101,99,116,111,114,80,117,110,99,116,117,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.033660958 UTC

[section ""data" . GHC.Unicode.$tc'ConnectorPunctuation1_closure" {
     GHC.Unicode.$tc'ConnectorPunctuation1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'ConnectorPunctuation2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.03543963 UTC

[section ""data" . GHC.Unicode.$tc'ConnectorPunctuation_closure" {
     GHC.Unicode.$tc'ConnectorPunctuation_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'ConnectorPunctuation1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 4917643529853318260;
         const 11665519332165151523;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.038287683 UTC

[section ""cstring" . GHC.Unicode.$tc'DashPunctuation2_bytes" {
     GHC.Unicode.$tc'DashPunctuation2_bytes:
         I8[] [39,68,97,115,104,80,117,110,99,116,117,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.039887458 UTC

[section ""data" . GHC.Unicode.$tc'DashPunctuation1_closure" {
     GHC.Unicode.$tc'DashPunctuation1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'DashPunctuation2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.041615546 UTC

[section ""data" . GHC.Unicode.$tc'DashPunctuation_closure" {
     GHC.Unicode.$tc'DashPunctuation_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'DashPunctuation1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 10309144240368445329;
         const 13155144127162508040;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.043265585 UTC

[section ""cstring" . GHC.Unicode.$tc'OpenPunctuation2_bytes" {
     GHC.Unicode.$tc'OpenPunctuation2_bytes:
         I8[] [39,79,112,101,110,80,117,110,99,116,117,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.044812397 UTC

[section ""data" . GHC.Unicode.$tc'OpenPunctuation1_closure" {
     GHC.Unicode.$tc'OpenPunctuation1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'OpenPunctuation2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.046507104 UTC

[section ""data" . GHC.Unicode.$tc'OpenPunctuation_closure" {
     GHC.Unicode.$tc'OpenPunctuation_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'OpenPunctuation1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 11156540492509602203;
         const 14579738194966332373;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.048093262 UTC

[section ""cstring" . GHC.Unicode.$tc'ClosePunctuation3_bytes" {
     GHC.Unicode.$tc'ClosePunctuation3_bytes:
         I8[] [39,67,108,111,115,101,80,117,110,99,116,117,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.04999591 UTC

[section ""data" . GHC.Unicode.$tc'ClosePunctuation2_closure" {
     GHC.Unicode.$tc'ClosePunctuation2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'ClosePunctuation3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.051663985 UTC

[section ""data" . GHC.Unicode.$tc'ClosePunctuation_closure" {
     GHC.Unicode.$tc'ClosePunctuation_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation2_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 2732552725164352280;
         const 2123618155201944931;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.053349178 UTC

[section ""cstring" . GHC.Unicode.$tc'InitialQuote2_bytes" {
     GHC.Unicode.$tc'InitialQuote2_bytes:
         I8[] [39,73,110,105,116,105,97,108,81,117,111,116,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.054972521 UTC

[section ""data" . GHC.Unicode.$tc'InitialQuote1_closure" {
     GHC.Unicode.$tc'InitialQuote1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'InitialQuote2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.056647151 UTC

[section ""data" . GHC.Unicode.$tc'InitialQuote_closure" {
     GHC.Unicode.$tc'InitialQuote_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'InitialQuote1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 15372309041196331722;
         const 15030215702152843543;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.058356955 UTC

[section ""cstring" . GHC.Unicode.$tc'FinalQuote2_bytes" {
     GHC.Unicode.$tc'FinalQuote2_bytes:
         I8[] [39,70,105,110,97,108,81,117,111,116,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.060024437 UTC

[section ""data" . GHC.Unicode.$tc'FinalQuote1_closure" {
     GHC.Unicode.$tc'FinalQuote1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'FinalQuote2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.062246669 UTC

[section ""data" . GHC.Unicode.$tc'FinalQuote_closure" {
     GHC.Unicode.$tc'FinalQuote_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'FinalQuote1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 7492133048483711520;
         const 4486297505861009288;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.063891273 UTC

[section ""cstring" . GHC.Unicode.$tc'OtherPunctuation2_bytes" {
     GHC.Unicode.$tc'OtherPunctuation2_bytes:
         I8[] [39,79,116,104,101,114,80,117,110,99,116,117,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.065897014 UTC

[section ""data" . GHC.Unicode.$tc'OtherPunctuation1_closure" {
     GHC.Unicode.$tc'OtherPunctuation1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'OtherPunctuation2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.067434146 UTC

[section ""data" . GHC.Unicode.$tc'OtherPunctuation_closure" {
     GHC.Unicode.$tc'OtherPunctuation_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'OtherPunctuation1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 17526727746027692027;
         const 9970963912577062569;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.069040809 UTC

[section ""cstring" . GHC.Unicode.$tc'MathSymbol2_bytes" {
     GHC.Unicode.$tc'MathSymbol2_bytes:
         I8[] [39,77,97,116,104,83,121,109,98,111,108]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.070737076 UTC

[section ""data" . GHC.Unicode.$tc'MathSymbol1_closure" {
     GHC.Unicode.$tc'MathSymbol1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'MathSymbol2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.072354008 UTC

[section ""data" . GHC.Unicode.$tc'MathSymbol_closure" {
     GHC.Unicode.$tc'MathSymbol_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'MathSymbol1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 4306295684901311676;
         const 14195098983421669147;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.074113046 UTC

[section ""cstring" . GHC.Unicode.$tc'CurrencySymbol2_bytes" {
     GHC.Unicode.$tc'CurrencySymbol2_bytes:
         I8[] [39,67,117,114,114,101,110,99,121,83,121,109,98,111,108]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.075747959 UTC

[section ""data" . GHC.Unicode.$tc'CurrencySymbol1_closure" {
     GHC.Unicode.$tc'CurrencySymbol1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'CurrencySymbol2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.077456635 UTC

[section ""data" . GHC.Unicode.$tc'CurrencySymbol_closure" {
     GHC.Unicode.$tc'CurrencySymbol_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'CurrencySymbol1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 150101909358894799;
         const 4247883766619991310;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.079149042 UTC

[section ""cstring" . GHC.Unicode.$tc'ModifierSymbol2_bytes" {
     GHC.Unicode.$tc'ModifierSymbol2_bytes:
         I8[] [39,77,111,100,105,102,105,101,114,83,121,109,98,111,108]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.080692547 UTC

[section ""data" . GHC.Unicode.$tc'ModifierSymbol1_closure" {
     GHC.Unicode.$tc'ModifierSymbol1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'ModifierSymbol2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.082394537 UTC

[section ""data" . GHC.Unicode.$tc'ModifierSymbol_closure" {
     GHC.Unicode.$tc'ModifierSymbol_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'ModifierSymbol1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 17930136738185325280;
         const 9680003641195432205;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.084078285 UTC

[section ""cstring" . GHC.Unicode.$tc'OtherSymbol2_bytes" {
     GHC.Unicode.$tc'OtherSymbol2_bytes:
         I8[] [39,79,116,104,101,114,83,121,109,98,111,108]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.086957104 UTC

[section ""data" . GHC.Unicode.$tc'OtherSymbol1_closure" {
     GHC.Unicode.$tc'OtherSymbol1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'OtherSymbol2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.088563104 UTC

[section ""data" . GHC.Unicode.$tc'OtherSymbol_closure" {
     GHC.Unicode.$tc'OtherSymbol_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'OtherSymbol1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 11720563220218392367;
         const 765393478666748433;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.090227467 UTC

[section ""cstring" . GHC.Unicode.$tc'Space2_bytes" {
     GHC.Unicode.$tc'Space2_bytes:
         I8[] [39,83,112,97,99,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.091779146 UTC

[section ""data" . GHC.Unicode.$tc'Space1_closure" {
     GHC.Unicode.$tc'Space1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'Space2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.093527439 UTC

[section ""data" . GHC.Unicode.$tc'Space_closure" {
     GHC.Unicode.$tc'Space_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'Space1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 13451262004661357021;
         const 7623263649021992415;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.095236158 UTC

[section ""cstring" . GHC.Unicode.$tc'LineSeparator2_bytes" {
     GHC.Unicode.$tc'LineSeparator2_bytes:
         I8[] [39,76,105,110,101,83,101,112,97,114,97,116,111,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.096812974 UTC

[section ""data" . GHC.Unicode.$tc'LineSeparator1_closure" {
     GHC.Unicode.$tc'LineSeparator1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'LineSeparator2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.098561167 UTC

[section ""data" . GHC.Unicode.$tc'LineSeparator_closure" {
     GHC.Unicode.$tc'LineSeparator_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'LineSeparator1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 3777504190602031786;
         const 16534792546094157357;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.100259007 UTC

[section ""cstring" . GHC.Unicode.$tc'ParagraphSeparator2_bytes" {
     GHC.Unicode.$tc'ParagraphSeparator2_bytes:
         I8[] [39,80,97,114,97,103,114,97,112,104,83,101,112,97,114,97,116,111,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.101927447 UTC

[section ""data" . GHC.Unicode.$tc'ParagraphSeparator1_closure" {
     GHC.Unicode.$tc'ParagraphSeparator1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'ParagraphSeparator2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.103592257 UTC

[section ""data" . GHC.Unicode.$tc'ParagraphSeparator_closure" {
     GHC.Unicode.$tc'ParagraphSeparator_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'ParagraphSeparator1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 1259977240315406014;
         const 6836752952671088565;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.105666164 UTC

[section ""cstring" . GHC.Unicode.$tc'Control2_bytes" {
     GHC.Unicode.$tc'Control2_bytes:
         I8[] [39,67,111,110,116,114,111,108]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.107215171 UTC

[section ""data" . GHC.Unicode.$tc'Control1_closure" {
     GHC.Unicode.$tc'Control1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'Control2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.108932207 UTC

[section ""data" . GHC.Unicode.$tc'Control_closure" {
     GHC.Unicode.$tc'Control_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'Control1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 3769799789009110362;
         const 7129109849289868145;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.111172542 UTC

[section ""cstring" . GHC.Unicode.$tc'Format2_bytes" {
     GHC.Unicode.$tc'Format2_bytes:
         I8[] [39,70,111,114,109,97,116]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.112779188 UTC

[section ""data" . GHC.Unicode.$tc'Format1_closure" {
     GHC.Unicode.$tc'Format1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'Format2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.114961746 UTC

[section ""data" . GHC.Unicode.$tc'Format_closure" {
     GHC.Unicode.$tc'Format_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'Format1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 15516392160505082493;
         const 8582194312248021938;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.116701524 UTC

[section ""cstring" . GHC.Unicode.$tc'Surrogate2_bytes" {
     GHC.Unicode.$tc'Surrogate2_bytes:
         I8[] [39,83,117,114,114,111,103,97,116,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.118374668 UTC

[section ""data" . GHC.Unicode.$tc'Surrogate1_closure" {
     GHC.Unicode.$tc'Surrogate1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'Surrogate2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.120012783 UTC

[section ""data" . GHC.Unicode.$tc'Surrogate_closure" {
     GHC.Unicode.$tc'Surrogate_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'Surrogate1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 8891432866311764671;
         const 15154926068870472193;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.121713247 UTC

[section ""cstring" . GHC.Unicode.$tc'PrivateUse2_bytes" {
     GHC.Unicode.$tc'PrivateUse2_bytes:
         I8[] [39,80,114,105,118,97,116,101,85,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.123317831 UTC

[section ""data" . GHC.Unicode.$tc'PrivateUse1_closure" {
     GHC.Unicode.$tc'PrivateUse1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'PrivateUse2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.12503883 UTC

[section ""data" . GHC.Unicode.$tc'PrivateUse_closure" {
     GHC.Unicode.$tc'PrivateUse_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'PrivateUse1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 9277443220957795657;
         const 16819524490051355354;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.127363671 UTC

[section ""cstring" . GHC.Unicode.$tc'NotAssigned2_bytes" {
     GHC.Unicode.$tc'NotAssigned2_bytes:
         I8[] [39,78,111,116,65,115,115,105,103,110,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.129057825 UTC

[section ""data" . GHC.Unicode.$tc'NotAssigned1_closure" {
     GHC.Unicode.$tc'NotAssigned1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'NotAssigned2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.130784253 UTC

[section ""data" . GHC.Unicode.$tc'NotAssigned_closure" {
     GHC.Unicode.$tc'NotAssigned_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'NotAssigned1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 6894305772705953782;
         const 14217837899895516928;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.134272375 UTC

[section ""data" . GHC.Unicode.toLower_closure" {
     GHC.Unicode.toLower_closure:
         const GHC.Unicode.toLower_info;
         const 0;
 },
 GHC.Unicode.toLower_entry() //  [R2]
         { []
         }
     {offset
       c2n1R: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2n1S; else goto c2n1T;
       c2n1S: // global
           R2 = R2;
           R1 = GHC.Unicode.toLower_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2n1T: // global
           I64[Sp - 8] = block_c2n1O_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2n2i; else goto c2n1P;
       u2n2i: // global
           call _c2n1O(R1) args: 0, res: 0, upd: 0;
       c2n1P: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.toLower_info" {
     GHC.Unicode.toLower_info:
         const GHC.Unicode.toLower_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S2mmR_srt+328;
 },
 _c2n1O() //  [R1]
         { []
         }
     {offset
       c2n1O: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2n1Y; else goto c2n1X;
       c2n1Y: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2n1X: // global
           (_s2m7E::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_towlower(I64[R1 + 7]);
           if (_s2m7E::I64 > 1114111) goto c2n2a; else goto c2n2h;
       c2n2a: // global
           Hp = Hp - 16;
           R2 = _s2m7E::I64;
           Sp = Sp + 8;
           call GHC.Char.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
       c2n2h: // global
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = _s2m7E::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2n1O_info" {
     block_c2n1O_info:
         const _c2n1O;
         const 0;
         const 4294967326;
         const S2mmR_srt+328;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.142106651 UTC

[section ""data" . GHC.Unicode.toUpper_closure" {
     GHC.Unicode.toUpper_closure:
         const GHC.Unicode.toUpper_info;
         const 0;
 },
 GHC.Unicode.toUpper_entry() //  [R2]
         { []
         }
     {offset
       c2n2C: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2n2D; else goto c2n2E;
       c2n2D: // global
           R2 = R2;
           R1 = GHC.Unicode.toUpper_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2n2E: // global
           I64[Sp - 8] = block_c2n2z_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2n33; else goto c2n2A;
       u2n33: // global
           call _c2n2z(R1) args: 0, res: 0, upd: 0;
       c2n2A: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.toUpper_info" {
     GHC.Unicode.toUpper_info:
         const GHC.Unicode.toUpper_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const S2mmR_srt+328;
 },
 _c2n2z() //  [R1]
         { []
         }
     {offset
       c2n2z: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2n2J; else goto c2n2I;
       c2n2J: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2n2I: // global
           (_s2m7P::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_towupper(I64[R1 + 7]);
           if (_s2m7P::I64 > 1114111) goto c2n2V; else goto c2n32;
       c2n2V: // global
           Hp = Hp - 16;
           R2 = _s2m7P::I64;
           Sp = Sp + 8;
           call GHC.Char.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
       c2n32: // global
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = _s2m7P::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2n2z_info" {
     block_c2n2z_info:
         const _c2n2z;
         const 0;
         const 4294967326;
         const S2mmR_srt+328;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.149183429 UTC

[section ""data" . GHC.Unicode.toTitle_closure" {
     GHC.Unicode.toTitle_closure:
         const GHC.Unicode.toTitle_info;
         const 0;
 },
 GHC.Unicode.toTitle_entry() //  [R2]
         { []
         }
     {offset
       c2n3n: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2n3o; else goto c2n3p;
       c2n3o: // global
           R2 = R2;
           R1 = GHC.Unicode.toTitle_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2n3p: // global
           I64[Sp - 8] = block_c2n3k_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2n3O; else goto c2n3l;
       u2n3O: // global
           call _c2n3k(R1) args: 0, res: 0, upd: 0;
       c2n3l: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.toTitle_info" {
     GHC.Unicode.toTitle_info:
         const GHC.Unicode.toTitle_entry;
         const 0;
         const 38654705678;
         const 4294967301;
         const S2mmR_srt+328;
 },
 _c2n3k() //  [R1]
         { []
         }
     {offset
       c2n3k: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2n3u; else goto c2n3t;
       c2n3u: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2n3t: // global
           (_s2m80::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_towtitle(I64[R1 + 7]);
           if (_s2m80::I64 > 1114111) goto c2n3G; else goto c2n3N;
       c2n3G: // global
           Hp = Hp - 16;
           R2 = _s2m80::I64;
           Sp = Sp + 8;
           call GHC.Char.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
       c2n3N: // global
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = _s2m80::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2n3k_info" {
     block_c2n3k_info:
         const _c2n3k;
         const 0;
         const 4294967326;
         const S2mmR_srt+328;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.155726937 UTC

[section ""data" . GHC.Unicode.wgencat_closure" {
     GHC.Unicode.wgencat_closure:
         const GHC.Unicode.wgencat_info;
 },
 GHC.Unicode.wgencat_entry() //  [R2]
         { []
         }
     {offset
       c2n48: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2n4e; else goto c2n4f;
       c2n4e: // global
           R2 = R2;
           R1 = GHC.Unicode.wgencat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2n4f: // global
           I64[Sp - 8] = block_c2n45_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2n4j; else goto c2n46;
       u2n4j: // global
           call _c2n45(R1) args: 0, res: 0, upd: 0;
       c2n46: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.wgencat_info" {
     GHC.Unicode.wgencat_info:
         const GHC.Unicode.wgencat_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2n45() //  [R1]
         { []
         }
     {offset
       c2n45: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2n4i; else goto c2n4h;
       c2n4i: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2n4h: // global
           (_s2m8a::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_gencat(I64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2m8a::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2n45_info" {
     block_c2n45_info:
         const _c2n45;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.161727433 UTC

[section ""data" . GHC.Unicode.isAsciiUpper_closure" {
     GHC.Unicode.isAsciiUpper_closure:
         const GHC.Unicode.isAsciiUpper_info;
 },
 GHC.Unicode.isAsciiUpper_entry() //  [R2]
         { []
         }
     {offset
       c2n4D: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2n4E; else goto c2n4F;
       c2n4E: // global
           R2 = R2;
           R1 = GHC.Unicode.isAsciiUpper_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2n4F: // global
           I64[Sp - 8] = block_c2n4A_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2n4R; else goto c2n4B;
       u2n4R: // global
           call _c2n4A(R1) args: 0, res: 0, upd: 0;
       c2n4B: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.isAsciiUpper_info" {
     GHC.Unicode.isAsciiUpper_info:
         const GHC.Unicode.isAsciiUpper_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2n4A() //  [R1]
         { []
         }
     {offset
       c2n4A: // global
           _s2m8d::I64 = I64[R1 + 7];
           if (_s2m8d::I64 < 65) goto c2n4M; else goto c2n4N;
       c2n4M: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2n4N: // global
           R1 = I64[((_s2m8d::I64 <= 90) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2n4A_info" {
     block_c2n4A_info:
         const _c2n4A;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.16791152 UTC

[section ""data" . GHC.Unicode.isAsciiLower_closure" {
     GHC.Unicode.isAsciiLower_closure:
         const GHC.Unicode.isAsciiLower_info;
 },
 GHC.Unicode.isAsciiLower_entry() //  [R2]
         { []
         }
     {offset
       c2n5f: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2n5g; else goto c2n5h;
       c2n5g: // global
           R2 = R2;
           R1 = GHC.Unicode.isAsciiLower_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2n5h: // global
           I64[Sp - 8] = block_c2n5c_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2n5t; else goto c2n5d;
       u2n5t: // global
           call _c2n5c(R1) args: 0, res: 0, upd: 0;
       c2n5d: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.isAsciiLower_info" {
     GHC.Unicode.isAsciiLower_info:
         const GHC.Unicode.isAsciiLower_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2n5c() //  [R1]
         { []
         }
     {offset
       c2n5c: // global
           _s2m8i::I64 = I64[R1 + 7];
           if (_s2m8i::I64 < 97) goto c2n5o; else goto c2n5p;
       c2n5o: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2n5p: // global
           R1 = I64[((_s2m8i::I64 <= 122) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2n5c_info" {
     block_c2n5c_info:
         const _c2n5c;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.174634058 UTC

[section ""data" . GHC.Unicode.isLatin1_closure" {
     GHC.Unicode.isLatin1_closure:
         const GHC.Unicode.isLatin1_info;
 },
 GHC.Unicode.isLatin1_entry() //  [R2]
         { []
         }
     {offset
       c2n5R: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2n5S; else goto c2n5T;
       c2n5S: // global
           R2 = R2;
           R1 = GHC.Unicode.isLatin1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2n5T: // global
           I64[Sp - 8] = block_c2n5O_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2n5Y; else goto c2n5P;
       u2n5Y: // global
           call _c2n5O(R1) args: 0, res: 0, upd: 0;
       c2n5P: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.isLatin1_info" {
     GHC.Unicode.isLatin1_info:
         const GHC.Unicode.isLatin1_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2n5O() //  [R1]
         { []
         }
     {offset
       c2n5O: // global
           R1 = I64[((I64[R1 + 7] <= 255) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2n5O_info" {
     block_c2n5O_info:
         const _c2n5O;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.180120441 UTC

[section ""data" . GHC.Unicode.isAscii_closure" {
     GHC.Unicode.isAscii_closure:
         const GHC.Unicode.isAscii_info;
 },
 GHC.Unicode.isAscii_entry() //  [R2]
         { []
         }
     {offset
       c2n6k: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2n6l; else goto c2n6m;
       c2n6l: // global
           R2 = R2;
           R1 = GHC.Unicode.isAscii_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2n6m: // global
           I64[Sp - 8] = block_c2n6h_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2n6r; else goto c2n6i;
       u2n6r: // global
           call _c2n6h(R1) args: 0, res: 0, upd: 0;
       c2n6i: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.isAscii_info" {
     GHC.Unicode.isAscii_info:
         const GHC.Unicode.isAscii_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2n6h() //  [R1]
         { []
         }
     {offset
       c2n6h: // global
           R1 = I64[((I64[R1 + 7] < 128) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2n6h_info" {
     block_c2n6h_info:
         const _c2n6h;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.185913732 UTC

[section ""data" . GHC.Unicode.isOctDigit_closure" {
     GHC.Unicode.isOctDigit_closure:
         const GHC.Unicode.isOctDigit_info;
 },
 GHC.Unicode.isOctDigit_entry() //  [R2]
         { []
         }
     {offset
       c2n6N: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2n6O; else goto c2n6P;
       c2n6O: // global
           R2 = R2;
           R1 = GHC.Unicode.isOctDigit_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2n6P: // global
           I64[Sp - 8] = block_c2n6K_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2n73; else goto c2n6L;
       u2n73: // global
           call _c2n6K(R1) args: 0, res: 0, upd: 0;
       c2n6L: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.isOctDigit_info" {
     GHC.Unicode.isOctDigit_info:
         const GHC.Unicode.isOctDigit_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2n6K() //  [R1]
         { []
         }
     {offset
       c2n6K: // global
           R1 = I64[((I64[R1 + 7] - 48 <= 7) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2n6K_info" {
     block_c2n6K_info:
         const _c2n6K;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.191378054 UTC

[section ""data" . GHC.Unicode.isDigit_closure" {
     GHC.Unicode.isDigit_closure:
         const GHC.Unicode.isDigit_info;
 },
 GHC.Unicode.isDigit_entry() //  [R2]
         { []
         }
     {offset
       c2n7r: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2n7s; else goto c2n7t;
       c2n7s: // global
           R2 = R2;
           R1 = GHC.Unicode.isDigit_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2n7t: // global
           I64[Sp - 8] = block_c2n7o_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2n7H; else goto c2n7p;
       u2n7H: // global
           call _c2n7o(R1) args: 0, res: 0, upd: 0;
       c2n7p: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.isDigit_info" {
     GHC.Unicode.isDigit_info:
         const GHC.Unicode.isDigit_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2n7o() //  [R1]
         { []
         }
     {offset
       c2n7o: // global
           R1 = I64[((I64[R1 + 7] - 48 <= 9) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2n7o_info" {
     block_c2n7o_info:
         const _c2n7o;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.197744486 UTC

[section ""data" . GHC.Unicode.isHexDigit_closure" {
     GHC.Unicode.isHexDigit_closure:
         const GHC.Unicode.isHexDigit_info;
 },
 GHC.Unicode.isHexDigit_entry() //  [R2]
         { []
         }
     {offset
       c2n85: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2n86; else goto c2n87;
       c2n86: // global
           R2 = R2;
           R1 = GHC.Unicode.isHexDigit_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2n87: // global
           I64[Sp - 8] = block_c2n82_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2n8P; else goto c2n83;
       u2n8P: // global
           call _c2n82(R1) args: 0, res: 0, upd: 0;
       c2n83: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.isHexDigit_info" {
     GHC.Unicode.isHexDigit_info:
         const GHC.Unicode.isHexDigit_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2n82() //  [R1]
         { []
         }
     {offset
       c2n82: // global
           _s2m8J::I64 = I64[R1 + 7];
           if ((_s2m8J::I64 + -48) <= 9) goto c2n8D; else goto c2n8C;
       c2n8C: // global
           if ((_s2m8J::I64 + -65) <= 5) goto c2n8D; else goto c2n8z;
       c2n8D: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2n8z: // global
           R1 = I64[(((_s2m8J::I64 + -97) <= 5) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2n82_info" {
     block_c2n82_info:
         const _c2n82;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.204155333 UTC

[section ""data" . GHC.Unicode.isLower_closure" {
     GHC.Unicode.isLower_closure:
         const GHC.Unicode.isLower_info;
 },
 GHC.Unicode.isLower_entry() //  [R2]
         { []
         }
     {offset
       c2n9g: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2n9h; else goto c2n9i;
       c2n9h: // global
           R2 = R2;
           R1 = GHC.Unicode.isLower_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2n9i: // global
           I64[Sp - 8] = block_c2n9d_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2n9v; else goto c2n9e;
       u2n9v: // global
           call _c2n9d(R1) args: 0, res: 0, upd: 0;
       c2n9e: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.isLower_info" {
     GHC.Unicode.isLower_info:
         const GHC.Unicode.isLower_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2n9d() //  [R1]
         { []
         }
     {offset
       c2n9d: // global
           (_s2m93::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswlower(I64[R1 + 7]);
           if (_s2m93::I64 == 0) goto c2n9u; else goto c2n9t;
       c2n9u: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2n9t: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2n9d_info" {
     block_c2n9d_info:
         const _c2n9d;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.209354838 UTC

[section ""cstring" . lvl66_r2j7h_bytes" {
     lvl66_r2j7h_bytes:
         I8[] [115,117,99,99,123,71,101,110,101,114,97,108,67,97,116,101,103,111,114,121,125,58,32,116,114,105,101,100,32,116,111,32,116,97,107,101,32,96,115,117,99,99,39,32,111,102,32,108,97,115,116,32,116,97,103,32,105,110,32,101,110,117,109,101,114,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.211800952 UTC

[section ""data" . GHC.Unicode.$fEnumGeneralCategory2_closure" {
     GHC.Unicode.$fEnumGeneralCategory2_closure:
         const GHC.Unicode.$fEnumGeneralCategory2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Unicode.$fEnumGeneralCategory2_entry() //  [R1]
         { []
         }
     {offset
       c2n9T: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2n9U; else goto c2n9V;
       c2n9U: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2n9V: // global
           (_c2n9O::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2n9O::I64 == 0) goto c2n9Q; else goto c2n9P;
       c2n9Q: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2n9P: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2n9O::I64;
           I64[Sp - 24] = block_c2n9R_info;
           R2 = lvl66_r2j7h_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Unicode.$fEnumGeneralCategory2_info" {
     GHC.Unicode.$fEnumGeneralCategory2_info:
         const GHC.Unicode.$fEnumGeneralCategory2_entry;
         const 0;
         const 21474836501;
         const S2mmR_srt+288;
 },
 _c2n9R() //  [R1]
         { []
         }
     {offset
       c2n9R: // global
           R3 = R1;
           R2 = $dIP3_r2j7a_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c2n9R_info" {
     block_c2n9R_info:
         const _c2n9R;
         const 0;
         const 21474836510;
         const S2mmR_srt+288;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.217984439 UTC

[section ""data" . GHC.Unicode.$fEnumGeneralCategory_$csucc_closure" {
     GHC.Unicode.$fEnumGeneralCategory_$csucc_closure:
         const GHC.Unicode.$fEnumGeneralCategory_$csucc_info;
         const 0;
 },
 GHC.Unicode.$fEnumGeneralCategory_$csucc_entry() //  [R2]
         { []
         }
     {offset
       c2nam: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2nan; else goto c2nao;
       c2nan: // global
           R2 = R2;
           R1 = GHC.Unicode.$fEnumGeneralCategory_$csucc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2nao: // global
           I64[Sp - 8] = block_c2naf_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2naz; else goto c2nag;
       u2naz: // global
           call _c2naf(R1) args: 0, res: 0, upd: 0;
       c2nag: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.$fEnumGeneralCategory_$csucc_info" {
     GHC.Unicode.$fEnumGeneralCategory_$csucc_info:
         const GHC.Unicode.$fEnumGeneralCategory_$csucc_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S2mmR_srt+360;
 },
 _c2naf() //  [R1]
         { []
         }
     {offset
       c2naf: // global
           if (I32[I64[R1 - 1] + 20] == 29 :: W32) goto c2nak; else goto c2naj;
       c2nak: // global
           R1 = GHC.Unicode.$fEnumGeneralCategory2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c2naj: // global
           R1 = I64[(%MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]) + 1 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2naf_info" {
     block_c2naf_info:
         const _c2naf;
         const 0;
         const 4294967326;
         const S2mmR_srt+368;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.223054233 UTC

[section ""cstring" . lvl67_r2j7i_bytes" {
     lvl67_r2j7i_bytes:
         I8[] [112,114,101,100,123,71,101,110,101,114,97,108,67,97,116,101,103,111,114,121,125,58,32,116,114,105,101,100,32,116,111,32,116,97,107,101,32,96,112,114,101,100,39,32,111,102,32,102,105,114,115,116,32,116,97,103,32,105,110,32,101,110,117,109,101,114,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.225727284 UTC

[section ""data" . GHC.Unicode.$fEnumGeneralCategory1_closure" {
     GHC.Unicode.$fEnumGeneralCategory1_closure:
         const GHC.Unicode.$fEnumGeneralCategory1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Unicode.$fEnumGeneralCategory1_entry() //  [R1]
         { []
         }
     {offset
       c2nb2: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2nb3; else goto c2nb4;
       c2nb3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2nb4: // global
           (_c2naX::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2naX::I64 == 0) goto c2naZ; else goto c2naY;
       c2naZ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2naY: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2naX::I64;
           I64[Sp - 24] = block_c2nb0_info;
           R2 = lvl67_r2j7i_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Unicode.$fEnumGeneralCategory1_info" {
     GHC.Unicode.$fEnumGeneralCategory1_info:
         const GHC.Unicode.$fEnumGeneralCategory1_entry;
         const 0;
         const 21474836501;
         const S2mmR_srt+288;
 },
 _c2nb0() //  [R1]
         { []
         }
     {offset
       c2nb0: // global
           R3 = R1;
           R2 = $dIP3_r2j7a_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c2nb0_info" {
     block_c2nb0_info:
         const _c2nb0;
         const 0;
         const 21474836510;
         const S2mmR_srt+288;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.232305057 UTC

[section ""data" . GHC.Unicode.$fEnumGeneralCategory_$cpred_closure" {
     GHC.Unicode.$fEnumGeneralCategory_$cpred_closure:
         const GHC.Unicode.$fEnumGeneralCategory_$cpred_info;
         const 0;
 },
 GHC.Unicode.$fEnumGeneralCategory_$cpred_entry() //  [R2]
         { []
         }
     {offset
       c2nbv: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2nbw; else goto c2nbx;
       c2nbw: // global
           R2 = R2;
           R1 = GHC.Unicode.$fEnumGeneralCategory_$cpred_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2nbx: // global
           I64[Sp - 8] = block_c2nbo_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2nbI; else goto c2nbp;
       u2nbI: // global
           call _c2nbo(R1) args: 0, res: 0, upd: 0;
       c2nbp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.$fEnumGeneralCategory_$cpred_info" {
     GHC.Unicode.$fEnumGeneralCategory_$cpred_info:
         const GHC.Unicode.$fEnumGeneralCategory_$cpred_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S2mmR_srt+376;
 },
 _c2nbo() //  [R1]
         { []
         }
     {offset
       c2nbo: // global
           if (I32[I64[R1 - 1] + 20] == 0 :: W32) goto c2nbt; else goto c2nbs;
       c2nbt: // global
           R1 = GHC.Unicode.$fEnumGeneralCategory1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c2nbs: // global
           R1 = I64[(%MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]) - 1 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2nbo_info" {
     block_c2nbo_info:
         const _c2nbo;
         const 0;
         const 4294967326;
         const S2mmR_srt+384;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.241182331 UTC

[section ""data" . GHC.Unicode.$fEnumGeneralCategory_$cenumFromTo_closure" {
     GHC.Unicode.$fEnumGeneralCategory_$cenumFromTo_closure:
         const GHC.Unicode.$fEnumGeneralCategory_$cenumFromTo_info;
         const 0;
 },
 sat_s2m9t_entry() //  [R1]
         { []
         }
     {offset
       c2ncD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2ncE; else goto c2ncF;
       c2ncE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2ncF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2m9n::I64 = I64[R1 + 32];
           if (_s2m9n::I64 == I64[R1 + 24]) goto c2ncC; else goto c2ncB;
       c2ncC: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c2ncB: // global
           R2 = _s2m9n::I64 + 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_s2m9m_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2m9t_info" {
     sat_s2m9t_info:
         const sat_s2m9t_entry;
         const 8589934593;
         const 4294967311;
         const S2mmR_srt+296;
 },
 sat_s2m9q_entry() //  [R1]
         { []
         }
     {offset
       c2ncR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2ncS; else goto c2nd0;
       c2ncS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2nd0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2m9n::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s2m9n::I64, 0)) goto c2ncY; else goto c2ncQ;
       c2ncQ: // global
           if (%MO_S_Gt_W64(_s2m9n::I64, 29)) goto c2ncY; else goto c2ncZ;
       c2ncY: // global
           R2 = _s2m9n::I64;
           Sp = Sp - 16;
           call GHC.Unicode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c2ncZ: // global
           R1 = I64[(_s2m9n::I64 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2m9q_info" {
     sat_s2m9q_info:
         const sat_s2m9q_entry;
         const 4294967296;
         const 4294967313;
         const S2mmR_srt+296;
 },
 go_s2m9m_entry() //  [R1, R2]
         { []
         }
     {offset
       c2nd2: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c2nd6; else goto c2nd5;
       c2nd6: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2nd5: // global
           _s2m9k::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s2m9t_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s2m9k::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s2m9q_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_s2m9m_info" {
     go_s2m9m_info:
         const go_s2m9m_entry;
         const 4294967296;
         const 4294967306;
         const 4294967300;
         const S2mmR_srt+296;
 },
 GHC.Unicode.$fEnumGeneralCategory_$cenumFromTo_entry() //  [R2, R3]
         { []
         }
     {offset
       c2nd7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2nd8; else goto c2nd9;
       c2nd8: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fEnumGeneralCategory_$cenumFromTo_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2nd9: // global
           I64[Sp - 16] = block_c2nc6_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2ndu; else goto c2nc7;
       u2ndu: // global
           call _c2nc6(R1) args: 0, res: 0, upd: 0;
       c2nc7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.$fEnumGeneralCategory_$cenumFromTo_info" {
     GHC.Unicode.$fEnumGeneralCategory_$cenumFromTo_info:
         const GHC.Unicode.$fEnumGeneralCategory_$cenumFromTo_entry;
         const 0;
         const 17596481011726;
         const 8589934607;
         const S2mmR_srt+296;
 },
 _c2nc6() //  [R1]
         { []
         }
     {offset
       c2nc6: // global
           _s2m9i::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2nce_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2m9i::I64;
           if (R1 & 7 != 0) goto u2ndr; else goto c2ncf;
       u2ndr: // global
           call _c2nce(R1) args: 0, res: 0, upd: 0;
       c2ncf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2nc6_info" {
     block_c2nc6_info:
         const _c2nc6;
         const 1;
         const 4294967326;
         const S2mmR_srt+296;
 },
 _c2nce() //  [R1]
         { []
         }
     {offset
       c2nce: // global
           I64[Sp] = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           call _c2nck() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2nce_info" {
     block_c2nce_info:
         const _c2nce;
         const 65;
         const 4294967326;
         const S2mmR_srt+296;
 },
 _c2nck() //  []
         { []
         }
     {offset
       c2nck: // global
           Hp = Hp + 16;
           _s2m9k::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c2ndj; else goto c2ndi;
       c2ndj: // global
           HpAlloc = 16;
           I64[Sp] = block_c2ncj_info;
           R1 = _s2m9k::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c2ndi: // global
           _s2m9i::I64 = I64[Sp + 8];
           if (%MO_S_Le_W64(_s2m9i::I64,
                            _s2m9k::I64)) goto c2ndl; else goto c2ndm;
       c2ndl: // global
           I64[Hp - 8] = go_s2m9m_info;
           I64[Hp] = _s2m9k::I64;
           R2 = _s2m9i::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call go_s2m9m_entry(R2, R1) args: 8, res: 0, upd: 8;
       c2ndm: // global
           Hp = Hp - 16;
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2ncj() //  [R1]
         { []
         }
     {offset
       c2ncj: // global
           I64[Sp] = R1;
           call _c2nck() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2ncj_info" {
     block_c2ncj_info:
         const _c2ncj;
         const 65;
         const 4294967326;
         const S2mmR_srt+296;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.268042199 UTC

[section ""data" . GHC.Unicode.$fEnumGeneralCategory_$cenumFromThenTo_closure" {
     GHC.Unicode.$fEnumGeneralCategory_$cenumFromThenTo_closure:
         const GHC.Unicode.$fEnumGeneralCategory_$cenumFromThenTo_info;
         const 0;
 },
 sat_s2m9R_entry() //  [R1]
         { []
         }
     {offset
       c2nfk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2nfl; else goto c2nfm;
       c2nfl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2nfm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s2m9K_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2m9R_info" {
     sat_s2m9R_info:
         const sat_s2m9R_entry;
         const 8589934593;
         const 4294967311;
         const S2mmR_srt+296;
 },
 sat_s2m9P_entry() //  [R1]
         { []
         }
     {offset
       c2nfw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2nfx; else goto c2nfF;
       c2nfx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2nfF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2m9L::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s2m9L::I64, 0)) goto c2nfD; else goto c2nfv;
       c2nfv: // global
           if (%MO_S_Gt_W64(_s2m9L::I64, 29)) goto c2nfD; else goto c2nfE;
       c2nfD: // global
           R2 = _s2m9L::I64;
           Sp = Sp - 16;
           call GHC.Unicode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c2nfE: // global
           R1 = I64[(_s2m9L::I64 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2m9P_info" {
     sat_s2m9P_info:
         const sat_s2m9P_entry;
         const 4294967296;
         const 4294967313;
         const S2mmR_srt+296;
 },
 sat_s2m9U_entry() //  [R1]
         { []
         }
     {offset
       c2nfQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2nfR; else goto c2nfZ;
       c2nfR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2nfZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2m9L::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s2m9L::I64, 0)) goto c2nfX; else goto c2nfP;
       c2nfP: // global
           if (%MO_S_Gt_W64(_s2m9L::I64, 29)) goto c2nfX; else goto c2nfY;
       c2nfX: // global
           R2 = _s2m9L::I64;
           Sp = Sp - 16;
           call GHC.Unicode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c2nfY: // global
           R1 = I64[(_s2m9L::I64 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2m9U_info" {
     sat_s2m9U_info:
         const sat_s2m9U_entry;
         const 4294967296;
         const 4294967313;
         const S2mmR_srt+296;
 },
 go_dn_s2m9K_entry() //  [R1, R2]
         { []
         }
     {offset
       c2ng3: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c2ng7; else goto c2ng6;
       c2ng7: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2ng6: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c2ng1; else goto c2ng2;
       c2ng1: // global
           _s2m9I::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s2m9R_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s2m9I::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s2m9P_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2ng2: // global
           I64[Hp - 80] = sat_s2m9U_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c2ng9::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c2ng9::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_s2m9K_info" {
     go_dn_s2m9K_info:
         const go_dn_s2m9K_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const S2mmR_srt+296;
 },
 sat_s2m9V_entry() //  [R1]
         { []
         }
     {offset
       c2nga: // global
           _s2m9V::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c2ngb; else goto c2ngc;
       c2ngc: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2nge; else goto c2ngd;
       c2nge: // global
           HpAlloc = 24;
           goto c2ngb;
       c2ngb: // global
           R1 = _s2m9V::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2ngd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2m9V::P64;
           _s2m9A::I64 = I64[_s2m9V::P64 + 24];
           _s2m9I::I64 = _s2m9A::I64 - I64[_s2m9V::P64 + 16];
           _s2m9J::I64 = I64[_s2m9V::P64 + 32] - _s2m9I::I64;
           I64[Hp - 16] = go_dn_s2m9K_info;
           I64[Hp - 8] = _s2m9I::I64;
           I64[Hp] = _s2m9J::I64;
           R2 = _s2m9A::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s2m9K_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2m9V_info" {
     sat_s2m9V_info:
         const sat_s2m9V_entry;
         const 12884901888;
         const 4294967311;
         const S2mmR_srt+296;
 },
 sat_s2m9H_entry() //  [R1]
         { []
         }
     {offset
       c2ngo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2ngp; else goto c2ngx;
       c2ngp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2ngx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2m9y::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s2m9y::I64, 0)) goto c2ngv; else goto c2ngn;
       c2ngn: // global
           if (%MO_S_Gt_W64(_s2m9y::I64, 29)) goto c2ngv; else goto c2ngw;
       c2ngv: // global
           R2 = _s2m9y::I64;
           Sp = Sp - 16;
           call GHC.Unicode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c2ngw: // global
           R1 = I64[(_s2m9y::I64 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2m9H_info" {
     sat_s2m9H_info:
         const sat_s2m9H_entry;
         const 4294967296;
         const 4294967313;
         const S2mmR_srt+296;
 },
 sat_s2m9Z_entry() //  [R1]
         { []
         }
     {offset
       c2ngL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2ngM; else goto c2ngU;
       c2ngM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2ngU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2m9y::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s2m9y::I64, 0)) goto c2ngS; else goto c2ngK;
       c2ngK: // global
           if (%MO_S_Gt_W64(_s2m9y::I64, 29)) goto c2ngS; else goto c2ngT;
       c2ngS: // global
           R2 = _s2m9y::I64;
           Sp = Sp - 16;
           call GHC.Unicode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c2ngT: // global
           R1 = I64[(_s2m9y::I64 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2m9Z_info" {
     sat_s2m9Z_info:
         const sat_s2m9Z_entry;
         const 4294967296;
         const 4294967313;
         const S2mmR_srt+296;
 },
 sat_s2mad_entry() //  [R1]
         { []
         }
     {offset
       c2nhn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2nho; else goto c2nhp;
       c2nho: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2nhp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s2ma6_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2mad_info" {
     sat_s2mad_info:
         const sat_s2mad_entry;
         const 8589934593;
         const 4294967311;
         const S2mmR_srt+296;
 },
 sat_s2mab_entry() //  [R1]
         { []
         }
     {offset
       c2nhz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2nhA; else goto c2nhI;
       c2nhA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2nhI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2ma7::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s2ma7::I64, 0)) goto c2nhG; else goto c2nhy;
       c2nhy: // global
           if (%MO_S_Gt_W64(_s2ma7::I64, 29)) goto c2nhG; else goto c2nhH;
       c2nhG: // global
           R2 = _s2ma7::I64;
           Sp = Sp - 16;
           call GHC.Unicode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c2nhH: // global
           R1 = I64[(_s2ma7::I64 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2mab_info" {
     sat_s2mab_info:
         const sat_s2mab_entry;
         const 4294967296;
         const 4294967313;
         const S2mmR_srt+296;
 },
 sat_s2mag_entry() //  [R1]
         { []
         }
     {offset
       c2nhT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2nhU; else goto c2ni2;
       c2nhU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2ni2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2ma7::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s2ma7::I64, 0)) goto c2ni0; else goto c2nhS;
       c2nhS: // global
           if (%MO_S_Gt_W64(_s2ma7::I64, 29)) goto c2ni0; else goto c2ni1;
       c2ni0: // global
           R2 = _s2ma7::I64;
           Sp = Sp - 16;
           call GHC.Unicode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c2ni1: // global
           R1 = I64[(_s2ma7::I64 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2mag_info" {
     sat_s2mag_info:
         const sat_s2mag_entry;
         const 4294967296;
         const 4294967313;
         const S2mmR_srt+296;
 },
 go_up_s2ma6_entry() //  [R1, R2]
         { []
         }
     {offset
       c2ni6: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c2nia; else goto c2ni9;
       c2nia: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2ni9: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c2ni4; else goto c2ni5;
       c2ni4: // global
           _s2ma4::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s2mad_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s2ma4::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s2mab_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2ni5: // global
           I64[Hp - 80] = sat_s2mag_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c2nic::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c2nic::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_s2ma6_info" {
     go_up_s2ma6_info:
         const go_up_s2ma6_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const S2mmR_srt+296;
 },
 sat_s2mah_entry() //  [R1]
         { []
         }
     {offset
       c2nid: // global
           _s2mah::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c2nie; else goto c2nif;
       c2nif: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2nih; else goto c2nig;
       c2nih: // global
           HpAlloc = 24;
           goto c2nie;
       c2nie: // global
           R1 = _s2mah::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2nig: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2mah::P64;
           _s2m9A::I64 = I64[_s2mah::P64 + 24];
           _s2ma4::I64 = _s2m9A::I64 - I64[_s2mah::P64 + 16];
           _s2ma5::I64 = I64[_s2mah::P64 + 32] - _s2ma4::I64;
           I64[Hp - 16] = go_up_s2ma6_info;
           I64[Hp - 8] = _s2ma4::I64;
           I64[Hp] = _s2ma5::I64;
           R2 = _s2m9A::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s2ma6_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2mah_info" {
     sat_s2mah_info:
         const sat_s2mah_entry;
         const 12884901888;
         const 4294967311;
         const S2mmR_srt+296;
 },
 sat_s2ma3_entry() //  [R1]
         { []
         }
     {offset
       c2nir: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2nis; else goto c2niA;
       c2nis: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2niA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2m9y::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s2m9y::I64, 0)) goto c2niy; else goto c2niq;
       c2niq: // global
           if (%MO_S_Gt_W64(_s2m9y::I64, 29)) goto c2niy; else goto c2niz;
       c2niy: // global
           R2 = _s2m9y::I64;
           Sp = Sp - 16;
           call GHC.Unicode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c2niz: // global
           R1 = I64[(_s2m9y::I64 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2ma3_info" {
     sat_s2ma3_info:
         const sat_s2ma3_entry;
         const 4294967296;
         const 4294967313;
         const S2mmR_srt+296;
 },
 sat_s2mal_entry() //  [R1]
         { []
         }
     {offset
       c2niO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2niP; else goto c2niX;
       c2niP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2niX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2m9y::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s2m9y::I64, 0)) goto c2niV; else goto c2niN;
       c2niN: // global
           if (%MO_S_Gt_W64(_s2m9y::I64, 29)) goto c2niV; else goto c2niW;
       c2niV: // global
           R2 = _s2m9y::I64;
           Sp = Sp - 16;
           call GHC.Unicode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c2niW: // global
           R1 = I64[(_s2m9y::I64 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2mal_info" {
     sat_s2mal_info:
         const sat_s2mal_entry;
         const 4294967296;
         const 4294967313;
         const S2mmR_srt+296;
 },
 GHC.Unicode.$fEnumGeneralCategory_$cenumFromThenTo_entry() //  [R2,
                                                                 R3, R4]
         { []
         }
     {offset
       c2niY: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2niZ; else goto c2nj0;
       c2niZ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fEnumGeneralCategory_$cenumFromThenTo_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2nj0: // global
           I64[Sp - 24] = block_c2nes_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2njH; else goto c2net;
       u2njH: // global
           call _c2nes(R1) args: 0, res: 0, upd: 0;
       c2net: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.$fEnumGeneralCategory_$cenumFromThenTo_info" {
     GHC.Unicode.$fEnumGeneralCategory_$cenumFromThenTo_info:
         const GHC.Unicode.$fEnumGeneralCategory_$cenumFromThenTo_entry;
         const 0;
         const 35188667056142;
         const 12884901911;
         const S2mmR_srt+296;
 },
 _c2nes() //  [R1]
         { []
         }
     {offset
       c2nes: // global
           _s2m9y::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2neA_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2m9y::I64;
           if (R1 & 7 != 0) goto u2njD; else goto c2neB;
       u2njD: // global
           call _c2neA(R1) args: 0, res: 0, upd: 0;
       c2neB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2nes_info" {
     block_c2nes_info:
         const _c2nes;
         const 2;
         const 4294967326;
         const S2mmR_srt+296;
 },
 _c2neA() //  [R1]
         { []
         }
     {offset
       c2neA: // global
           _s2m9A::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2neI_info;
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s2m9A::I64;
           if (R1 & 7 != 0) goto u2njE; else goto c2neJ;
       u2njE: // global
           call _c2neI(R1) args: 0, res: 0, upd: 0;
       c2neJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2neA_info" {
     block_c2neA_info:
         const _c2neA;
         const 66;
         const 4294967326;
         const S2mmR_srt+296;
 },
 _c2neI() //  [R1]
         { []
         }
     {offset
       c2neI: // global
           I64[Sp] = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           call _c2neO() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2neI_info" {
     block_c2neI_info:
         const _c2neI;
         const 194;
         const 4294967326;
         const S2mmR_srt+296;
 },
 _c2neO() //  []
         { []
         }
     {offset
       c2neO: // global
           Hp = Hp + 88;
           _s2m9C::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c2nje; else goto c2njd;
       c2nje: // global
           HpAlloc = 88;
           I64[Sp] = block_c2neN_info;
           R1 = _s2m9C::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c2njd: // global
           _s2m9y::I64 = I64[Sp + 8];
           _s2m9A::I64 = I64[Sp + 16];
           if (%MO_S_Lt_W64(_s2m9A::I64,
                            _s2m9y::I64)) goto c2njo; else goto c2njx;
       c2njo: // global
           if (%MO_S_Le_W64(_s2m9C::I64,
                            _s2m9A::I64)) goto c2njh; else goto c2njm;
       c2njh: // global
           I64[Hp - 80] = sat_s2m9V_info;
           I64[Hp - 64] = _s2m9y::I64;
           I64[Hp - 56] = _s2m9A::I64;
           I64[Hp - 48] = _s2m9C::I64;
           I64[Hp - 40] = sat_s2m9H_info;
           I64[Hp - 24] = _s2m9y::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2njm: // global
           if (%MO_S_Gt_W64(_s2m9C::I64,
                            _s2m9y::I64)) goto c2njv; else goto c2njk;
       c2njk: // global
           I64[Hp - 80] = sat_s2m9Z_info;
           I64[Hp - 64] = _s2m9y::I64;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c2nji::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c2nji::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2njx: // global
           if (%MO_S_Ge_W64(_s2m9C::I64,
                            _s2m9A::I64)) goto c2njr; else goto c2njw;
       c2njr: // global
           I64[Hp - 80] = sat_s2mah_info;
           I64[Hp - 64] = _s2m9y::I64;
           I64[Hp - 56] = _s2m9A::I64;
           I64[Hp - 48] = _s2m9C::I64;
           I64[Hp - 40] = sat_s2ma3_info;
           I64[Hp - 24] = _s2m9y::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2njw: // global
           if (%MO_S_Lt_W64(_s2m9C::I64,
                            _s2m9y::I64)) goto c2njv; else goto c2nju;
       c2njv: // global
           Hp = Hp - 88;
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2nju: // global
           I64[Hp - 80] = sat_s2mal_info;
           I64[Hp - 64] = _s2m9y::I64;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c2njs::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c2njs::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2neN() //  [R1]
         { []
         }
     {offset
       c2neN: // global
           I64[Sp] = R1;
           call _c2neO() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2neN_info" {
     block_c2neN_info:
         const _c2neN;
         const 194;
         const 4294967326;
         const S2mmR_srt+296;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.306455029 UTC

[section ""data" . GHC.Unicode.$fEnumGeneralCategory_closure" {
     GHC.Unicode.$fEnumGeneralCategory_closure:
         const GHC.Enum.C:Enum_con_info;
         const GHC.Unicode.$fEnumGeneralCategory_$csucc_closure+1;
         const GHC.Unicode.$fEnumGeneralCategory_$cpred_closure+1;
         const GHC.Unicode.$fEnumGeneralCategory_$ctoEnum_closure+1;
         const GHC.Unicode.$fEnumGeneralCategory_$cfromEnum_closure+1;
         const GHC.Unicode.$fEnumGeneralCategory_$cenumFrom_closure+1;
         const GHC.Unicode.$fEnumGeneralCategory_$cenumFromThen_closure+2;
         const GHC.Unicode.$fEnumGeneralCategory_$cenumFromTo_closure+2;
         const GHC.Unicode.$fEnumGeneralCategory_$cenumFromThenTo_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.309000938 UTC

[section ""data" . GHC.Unicode.$wgeneralCategory_closure" {
     GHC.Unicode.$wgeneralCategory_closure:
         const GHC.Unicode.$wgeneralCategory_info;
         const 0;
 },
 GHC.Unicode.$wgeneralCategory_entry() //  [R2]
         { []
         }
     {offset
       c2nmP: // global
           (_s2mar::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_gencat(R2);
           if (%MO_S_Lt_W64(_s2mar::I64, 0)) goto c2nn4; else goto c2nn6;
       c2nn6: // global
           if (%MO_S_Gt_W64(_s2mar::I64, 29)) goto c2nn4; else goto c2nn5;
       c2nn4: // global
           R2 = _s2mar::I64;
           call GHC.Unicode.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
       c2nn5: // global
           R1 = I64[(_s2mar::I64 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.$wgeneralCategory_info" {
     GHC.Unicode.$wgeneralCategory_info:
         const GHC.Unicode.$wgeneralCategory_entry;
         const 0;
         const 4294967310;
         const 4294967300;
         const S2mmR_srt+296;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.313101749 UTC

[section ""data" . GHC.Unicode.generalCategory_closure" {
     GHC.Unicode.generalCategory_closure:
         const GHC.Unicode.generalCategory_info;
         const 0;
 },
 GHC.Unicode.generalCategory_entry() //  [R2]
         { []
         }
     {offset
       c2nnl: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2nnm; else goto c2nnn;
       c2nnm: // global
           R2 = R2;
           R1 = GHC.Unicode.generalCategory_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2nnn: // global
           I64[Sp - 8] = block_c2nni_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2nnr; else goto c2nnj;
       u2nnr: // global
           call _c2nni(R1) args: 0, res: 0, upd: 0;
       c2nnj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.generalCategory_info" {
     GHC.Unicode.generalCategory_info:
         const GHC.Unicode.generalCategory_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S2mmR_srt+408;
 },
 _c2nni() //  [R1]
         { []
         }
     {offset
       c2nni: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Unicode.$wgeneralCategory_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2nni_info" {
     block_c2nni_info:
         const _c2nni;
         const 0;
         const 4294967326;
         const S2mmR_srt+416;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.318759376 UTC

[section ""data" . GHC.Unicode.$wisPunctuation_closure" {
     GHC.Unicode.$wisPunctuation_closure:
         const GHC.Unicode.$wisPunctuation_info;
         const 0;
 },
 GHC.Unicode.$wisPunctuation_entry() //  [R2]
         { []
         }
     {offset
       c2nnI: // global
           (_s2maC::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_gencat(R2);
           if (%MO_S_Lt_W64(_s2maC::I64, 0)) goto c2nnX; else goto c2nob;
       c2nob: // global
           if (%MO_S_Gt_W64(_s2maC::I64, 29)) goto c2nnX; else goto c2noa;
       c2nnX: // global
           R2 = _s2maC::I64;
           call GHC.Unicode.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
       c2noa: // global
           if (%MO_S_Ge_W64(_s2maC::I64, 18)) goto c2no2; else goto u2noc;
       u2noc: // global
           if (%MO_S_Lt_W64(_s2maC::I64, 11)) goto c2no2; else goto u2nod;
       c2no2: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u2nod: // global
           switch [11 .. 17] _s2maC::I64 {
               case 11, 12, 13, 14, 15, 16, 17 : goto c2no9;
           }
       c2no9: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.$wisPunctuation_info" {
     GHC.Unicode.$wisPunctuation_info:
         const GHC.Unicode.$wisPunctuation_entry;
         const 0;
         const 4294967310;
         const 4294967300;
         const S2mmR_srt+296;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.323825873 UTC

[section ""data" . GHC.Unicode.isPunctuation_closure" {
     GHC.Unicode.isPunctuation_closure:
         const GHC.Unicode.isPunctuation_info;
         const 0;
 },
 GHC.Unicode.isPunctuation_entry() //  [R2]
         { []
         }
     {offset
       c2nox: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2noy; else goto c2noz;
       c2noy: // global
           R2 = R2;
           R1 = GHC.Unicode.isPunctuation_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2noz: // global
           I64[Sp - 8] = block_c2nou_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2noD; else goto c2nov;
       u2noD: // global
           call _c2nou(R1) args: 0, res: 0, upd: 0;
       c2nov: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.isPunctuation_info" {
     GHC.Unicode.isPunctuation_info:
         const GHC.Unicode.isPunctuation_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S2mmR_srt+424;
 },
 _c2nou() //  [R1]
         { []
         }
     {offset
       c2nou: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Unicode.$wisPunctuation_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2nou_info" {
     block_c2nou_info:
         const _c2nou;
         const 0;
         const 4294967326;
         const S2mmR_srt+432;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.329729083 UTC

[section ""data" . GHC.Unicode.$wisSymbol_closure" {
     GHC.Unicode.$wisSymbol_closure:
         const GHC.Unicode.$wisSymbol_info;
         const 0;
 },
 GHC.Unicode.$wisSymbol_entry() //  [R2]
         { []
         }
     {offset
       c2noU: // global
           (_s2maQ::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_gencat(R2);
           if (%MO_S_Lt_W64(_s2maQ::I64, 0)) goto c2np9; else goto c2npk;
       c2npk: // global
           if (%MO_S_Gt_W64(_s2maQ::I64, 29)) goto c2np9; else goto c2npj;
       c2np9: // global
           R2 = _s2maQ::I64;
           call GHC.Unicode.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
       c2npj: // global
           if (%MO_S_Lt_W64(_s2maQ::I64, 21)) goto u2npl; else goto u2npn;
       u2npl: // global
           if (%MO_S_Lt_W64(_s2maQ::I64, 18)) goto c2npe; else goto u2npm;
       u2npm: // global
           if (_s2maQ::I64 == 19) goto c2npi; else goto c2npi;
       u2npn: // global
           if (%MO_S_Lt_W64(_s2maQ::I64, 22)) goto c2npi; else goto c2npe;
       c2npi: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2npe: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.$wisSymbol_info" {
     GHC.Unicode.$wisSymbol_info:
         const GHC.Unicode.$wisSymbol_entry;
         const 0;
         const 4294967310;
         const 4294967300;
         const S2mmR_srt+296;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.33417633 UTC

[section ""data" . GHC.Unicode.isSymbol_closure" {
     GHC.Unicode.isSymbol_closure:
         const GHC.Unicode.isSymbol_info;
         const 0;
 },
 GHC.Unicode.isSymbol_entry() //  [R2]
         { []
         }
     {offset
       c2npD: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2npE; else goto c2npF;
       c2npE: // global
           R2 = R2;
           R1 = GHC.Unicode.isSymbol_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2npF: // global
           I64[Sp - 8] = block_c2npA_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2npJ; else goto c2npB;
       u2npJ: // global
           call _c2npA(R1) args: 0, res: 0, upd: 0;
       c2npB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.isSymbol_info" {
     GHC.Unicode.isSymbol_info:
         const GHC.Unicode.isSymbol_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S2mmR_srt+440;
 },
 _c2npA() //  [R1]
         { []
         }
     {offset
       c2npA: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Unicode.$wisSymbol_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2npA_info" {
     block_c2npA_info:
         const _c2npA;
         const 0;
         const 4294967326;
         const S2mmR_srt+448;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.339601582 UTC

[section ""data" . GHC.Unicode.isUpper_closure" {
     GHC.Unicode.isUpper_closure:
         const GHC.Unicode.isUpper_info;
 },
 GHC.Unicode.isUpper_entry() //  [R2]
         { []
         }
     {offset
       c2nq1: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2nq2; else goto c2nq3;
       c2nq2: // global
           R2 = R2;
           R1 = GHC.Unicode.isUpper_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2nq3: // global
           I64[Sp - 8] = block_c2npY_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2nqg; else goto c2npZ;
       u2nqg: // global
           call _c2npY(R1) args: 0, res: 0, upd: 0;
       c2npZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.isUpper_info" {
     GHC.Unicode.isUpper_info:
         const GHC.Unicode.isUpper_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2npY() //  [R1]
         { []
         }
     {offset
       c2npY: // global
           (_s2mb6::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswupper(I64[R1 + 7]);
           if (_s2mb6::I64 == 0) goto c2nqf; else goto c2nqe;
       c2nqf: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2nqe: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2npY_info" {
     block_c2npY_info:
         const _c2npY;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.345427631 UTC

[section ""data" . GHC.Unicode.isPrint_closure" {
     GHC.Unicode.isPrint_closure:
         const GHC.Unicode.isPrint_info;
 },
 GHC.Unicode.isPrint_entry() //  [R2]
         { []
         }
     {offset
       c2nqC: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2nqD; else goto c2nqE;
       c2nqD: // global
           R2 = R2;
           R1 = GHC.Unicode.isPrint_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2nqE: // global
           I64[Sp - 8] = block_c2nqz_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2nqR; else goto c2nqA;
       u2nqR: // global
           call _c2nqz(R1) args: 0, res: 0, upd: 0;
       c2nqA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.isPrint_info" {
     GHC.Unicode.isPrint_info:
         const GHC.Unicode.isPrint_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2nqz() //  [R1]
         { []
         }
     {offset
       c2nqz: // global
           (_s2mbf::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswprint(I64[R1 + 7]);
           if (_s2mbf::I64 == 0) goto c2nqQ; else goto c2nqP;
       c2nqQ: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2nqP: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2nqz_info" {
     block_c2nqz_info:
         const _c2nqz;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.351462848 UTC

[section ""data" . GHC.Unicode.isControl_closure" {
     GHC.Unicode.isControl_closure:
         const GHC.Unicode.isControl_info;
 },
 GHC.Unicode.isControl_entry() //  [R2]
         { []
         }
     {offset
       c2nrd: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2nre; else goto c2nrf;
       c2nre: // global
           R2 = R2;
           R1 = GHC.Unicode.isControl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2nrf: // global
           I64[Sp - 8] = block_c2nra_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2nrs; else goto c2nrb;
       u2nrs: // global
           call _c2nra(R1) args: 0, res: 0, upd: 0;
       c2nrb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.isControl_info" {
     GHC.Unicode.isControl_info:
         const GHC.Unicode.isControl_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2nra() //  [R1]
         { []
         }
     {offset
       c2nra: // global
           (_s2mbo::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswcntrl(I64[R1 + 7]);
           if (_s2mbo::I64 == 0) goto c2nrr; else goto c2nrq;
       c2nrr: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2nrq: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2nra_info" {
     block_c2nra_info:
         const _c2nra;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.358347508 UTC

[section ""data" . GHC.Unicode.isAlphaNum_closure" {
     GHC.Unicode.isAlphaNum_closure:
         const GHC.Unicode.isAlphaNum_info;
 },
 GHC.Unicode.isAlphaNum_entry() //  [R2]
         { []
         }
     {offset
       c2nrO: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2nrP; else goto c2nrQ;
       c2nrP: // global
           R2 = R2;
           R1 = GHC.Unicode.isAlphaNum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2nrQ: // global
           I64[Sp - 8] = block_c2nrL_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2ns3; else goto c2nrM;
       u2ns3: // global
           call _c2nrL(R1) args: 0, res: 0, upd: 0;
       c2nrM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.isAlphaNum_info" {
     GHC.Unicode.isAlphaNum_info:
         const GHC.Unicode.isAlphaNum_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2nrL() //  [R1]
         { []
         }
     {offset
       c2nrL: // global
           (_s2mbx::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswalnum(I64[R1 + 7]);
           if (_s2mbx::I64 == 0) goto c2ns2; else goto c2ns1;
       c2ns2: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2ns1: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2nrL_info" {
     block_c2nrL_info:
         const _c2nrL;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.364095199 UTC

[section ""data" . GHC.Unicode.isAlpha_closure" {
     GHC.Unicode.isAlpha_closure:
         const GHC.Unicode.isAlpha_info;
 },
 GHC.Unicode.isAlpha_entry() //  [R2]
         { []
         }
     {offset
       c2nsp: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2nsq; else goto c2nsr;
       c2nsq: // global
           R2 = R2;
           R1 = GHC.Unicode.isAlpha_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2nsr: // global
           I64[Sp - 8] = block_c2nsm_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2nsE; else goto c2nsn;
       u2nsE: // global
           call _c2nsm(R1) args: 0, res: 0, upd: 0;
       c2nsn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.isAlpha_info" {
     GHC.Unicode.isAlpha_info:
         const GHC.Unicode.isAlpha_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2nsm() //  [R1]
         { []
         }
     {offset
       c2nsm: // global
           (_s2mbG::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswalpha(I64[R1 + 7]);
           if (_s2mbG::I64 == 0) goto c2nsD; else goto c2nsC;
       c2nsD: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2nsC: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2nsm_info" {
     block_c2nsm_info:
         const _c2nsm;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.36994179 UTC

[section ""data" . GHC.Unicode.$wisSpace_closure" {
     GHC.Unicode.$wisSpace_closure:
         const GHC.Unicode.$wisSpace_info;
 },
 GHC.Unicode.$wisSpace_entry() //  [R2]
         { []
         }
     {offset
       c2nsZ: // global
           if (R2 > 887) goto c2ntj; else goto c2ntD;
       c2ntj: // global
           (_s2mbQ::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswspace(R2);
           if (_s2mbQ::I64 == 0) goto c2ntv; else goto c2ntC;
       c2ntD: // global
           if (R2 == 32) goto c2ntC; else goto c2ntB;
       c2ntB: // global
           if ((R2 + -9) <= 4) goto c2ntC; else goto c2nty;
       c2nty: // global
           if (R2 == 160) goto c2ntC; else goto c2ntv;
       c2ntC: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2ntv: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.$wisSpace_info" {
     GHC.Unicode.$wisSpace_info:
         const GHC.Unicode.$wisSpace_entry;
         const 0;
         const 14;
         const 4294967300;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.374061071 UTC

[section ""data" . GHC.Unicode.isSpace_closure" {
     GHC.Unicode.isSpace_closure:
         const GHC.Unicode.isSpace_info;
 },
 GHC.Unicode.isSpace_entry() //  [R2]
         { []
         }
     {offset
       c2ntU: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2ntV; else goto c2ntW;
       c2ntV: // global
           R2 = R2;
           R1 = GHC.Unicode.isSpace_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2ntW: // global
           I64[Sp - 8] = block_c2ntR_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2nu0; else goto c2ntS;
       u2nu0: // global
           call _c2ntR(R1) args: 0, res: 0, upd: 0;
       c2ntS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.isSpace_info" {
     GHC.Unicode.isSpace_info:
         const GHC.Unicode.isSpace_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2ntR() //  [R1]
         { []
         }
     {offset
       c2ntR: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Unicode.$wisSpace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2ntR_info" {
     block_c2ntR_info:
         const _c2ntR;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.379117031 UTC

[section ""data" . GHC.Unicode.UppercaseLetter_closure" {
     GHC.Unicode.UppercaseLetter_closure:
         const GHC.Unicode.UppercaseLetter_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.380782722 UTC

[section ""data" . GHC.Unicode.LowercaseLetter_closure" {
     GHC.Unicode.LowercaseLetter_closure:
         const GHC.Unicode.LowercaseLetter_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.383113191 UTC

[section ""data" . GHC.Unicode.TitlecaseLetter_closure" {
     GHC.Unicode.TitlecaseLetter_closure:
         const GHC.Unicode.TitlecaseLetter_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.384640209 UTC

[section ""data" . GHC.Unicode.ModifierLetter_closure" {
     GHC.Unicode.ModifierLetter_closure:
         const GHC.Unicode.ModifierLetter_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.386192604 UTC

[section ""data" . GHC.Unicode.OtherLetter_closure" {
     GHC.Unicode.OtherLetter_closure:
         const GHC.Unicode.OtherLetter_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.387793006 UTC

[section ""data" . GHC.Unicode.NonSpacingMark_closure" {
     GHC.Unicode.NonSpacingMark_closure:
         const GHC.Unicode.NonSpacingMark_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.389407745 UTC

[section ""data" . GHC.Unicode.SpacingCombiningMark_closure" {
     GHC.Unicode.SpacingCombiningMark_closure:
         const GHC.Unicode.SpacingCombiningMark_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.3909715 UTC

[section ""data" . GHC.Unicode.EnclosingMark_closure" {
     GHC.Unicode.EnclosingMark_closure:
         const GHC.Unicode.EnclosingMark_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.392555457 UTC

[section ""data" . GHC.Unicode.DecimalNumber_closure" {
     GHC.Unicode.DecimalNumber_closure:
         const GHC.Unicode.DecimalNumber_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.394255308 UTC

[section ""data" . GHC.Unicode.LetterNumber_closure" {
     GHC.Unicode.LetterNumber_closure:
         const GHC.Unicode.LetterNumber_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.395825831 UTC

[section ""data" . GHC.Unicode.OtherNumber_closure" {
     GHC.Unicode.OtherNumber_closure:
         const GHC.Unicode.OtherNumber_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.397661368 UTC

[section ""data" . GHC.Unicode.ConnectorPunctuation_closure" {
     GHC.Unicode.ConnectorPunctuation_closure:
         const GHC.Unicode.ConnectorPunctuation_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.39924714 UTC

[section ""data" . GHC.Unicode.DashPunctuation_closure" {
     GHC.Unicode.DashPunctuation_closure:
         const GHC.Unicode.DashPunctuation_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.40084416 UTC

[section ""data" . GHC.Unicode.OpenPunctuation_closure" {
     GHC.Unicode.OpenPunctuation_closure:
         const GHC.Unicode.OpenPunctuation_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.4023855 UTC

[section ""data" . GHC.Unicode.ClosePunctuation_closure" {
     GHC.Unicode.ClosePunctuation_closure:
         const GHC.Unicode.ClosePunctuation_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.403941428 UTC

[section ""data" . GHC.Unicode.InitialQuote_closure" {
     GHC.Unicode.InitialQuote_closure:
         const GHC.Unicode.InitialQuote_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.406395971 UTC

[section ""data" . GHC.Unicode.FinalQuote_closure" {
     GHC.Unicode.FinalQuote_closure:
         const GHC.Unicode.FinalQuote_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.40793593 UTC

[section ""data" . GHC.Unicode.OtherPunctuation_closure" {
     GHC.Unicode.OtherPunctuation_closure:
         const GHC.Unicode.OtherPunctuation_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.409566201 UTC

[section ""data" . GHC.Unicode.MathSymbol_closure" {
     GHC.Unicode.MathSymbol_closure:
         const GHC.Unicode.MathSymbol_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.41119777 UTC

[section ""data" . GHC.Unicode.CurrencySymbol_closure" {
     GHC.Unicode.CurrencySymbol_closure:
         const GHC.Unicode.CurrencySymbol_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.412729474 UTC

[section ""data" . GHC.Unicode.ModifierSymbol_closure" {
     GHC.Unicode.ModifierSymbol_closure:
         const GHC.Unicode.ModifierSymbol_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.414406654 UTC

[section ""data" . GHC.Unicode.OtherSymbol_closure" {
     GHC.Unicode.OtherSymbol_closure:
         const GHC.Unicode.OtherSymbol_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.416025762 UTC

[section ""data" . GHC.Unicode.Space_closure" {
     GHC.Unicode.Space_closure:
         const GHC.Unicode.Space_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.418306898 UTC

[section ""data" . GHC.Unicode.LineSeparator_closure" {
     GHC.Unicode.LineSeparator_closure:
         const GHC.Unicode.LineSeparator_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.4198525 UTC

[section ""data" . GHC.Unicode.ParagraphSeparator_closure" {
     GHC.Unicode.ParagraphSeparator_closure:
         const GHC.Unicode.ParagraphSeparator_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.421505234 UTC

[section ""data" . GHC.Unicode.Control_closure" {
     GHC.Unicode.Control_closure:
         const GHC.Unicode.Control_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.42309568 UTC

[section ""data" . GHC.Unicode.Format_closure" {
     GHC.Unicode.Format_closure:
         const GHC.Unicode.Format_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.424680876 UTC

[section ""data" . GHC.Unicode.Surrogate_closure" {
     GHC.Unicode.Surrogate_closure:
         const GHC.Unicode.Surrogate_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.426630426 UTC

[section ""data" . GHC.Unicode.PrivateUse_closure" {
     GHC.Unicode.PrivateUse_closure:
         const GHC.Unicode.PrivateUse_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.428224564 UTC

[section ""data" . GHC.Unicode.NotAssigned_closure" {
     GHC.Unicode.NotAssigned_closure:
         const GHC.Unicode.NotAssigned_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.430446839 UTC

[section ""relreadonly" . GHC.Unicode.GeneralCategory_closure_tbl" {
     GHC.Unicode.GeneralCategory_closure_tbl:
         const GHC.Unicode.UppercaseLetter_closure+1;
         const GHC.Unicode.LowercaseLetter_closure+1;
         const GHC.Unicode.TitlecaseLetter_closure+1;
         const GHC.Unicode.ModifierLetter_closure+1;
         const GHC.Unicode.OtherLetter_closure+1;
         const GHC.Unicode.NonSpacingMark_closure+1;
         const GHC.Unicode.SpacingCombiningMark_closure+1;
         const GHC.Unicode.EnclosingMark_closure+1;
         const GHC.Unicode.DecimalNumber_closure+1;
         const GHC.Unicode.LetterNumber_closure+1;
         const GHC.Unicode.OtherNumber_closure+1;
         const GHC.Unicode.ConnectorPunctuation_closure+1;
         const GHC.Unicode.DashPunctuation_closure+1;
         const GHC.Unicode.OpenPunctuation_closure+1;
         const GHC.Unicode.ClosePunctuation_closure+1;
         const GHC.Unicode.InitialQuote_closure+1;
         const GHC.Unicode.FinalQuote_closure+1;
         const GHC.Unicode.OtherPunctuation_closure+1;
         const GHC.Unicode.MathSymbol_closure+1;
         const GHC.Unicode.CurrencySymbol_closure+1;
         const GHC.Unicode.ModifierSymbol_closure+1;
         const GHC.Unicode.OtherSymbol_closure+1;
         const GHC.Unicode.Space_closure+1;
         const GHC.Unicode.LineSeparator_closure+1;
         const GHC.Unicode.ParagraphSeparator_closure+1;
         const GHC.Unicode.Control_closure+1;
         const GHC.Unicode.Format_closure+1;
         const GHC.Unicode.Surrogate_closure+1;
         const GHC.Unicode.PrivateUse_closure+1;
         const GHC.Unicode.NotAssigned_closure+1;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.432828236 UTC

[section ""cstring" . i2nuH_str" {
     i2nuH_str:
         I8[] [98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,85,112,112,101,114,99,97,115,101,76,101,116,116,101,114]
 },
 GHC.Unicode.UppercaseLetter_con_entry() //  [R1]
         { []
         }
     {offset
       c2nuG: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.UppercaseLetter_con_info" {
     GHC.Unicode.UppercaseLetter_con_info:
         const GHC.Unicode.UppercaseLetter_con_entry;
         const 4294967296;
         const 3;
         const i2nuH_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.435950937 UTC

[section ""cstring" . i2nuO_str" {
     i2nuO_str:
         I8[] [98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,76,111,119,101,114,99,97,115,101,76,101,116,116,101,114]
 },
 GHC.Unicode.LowercaseLetter_con_entry() //  [R1]
         { []
         }
     {offset
       c2nuN: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.LowercaseLetter_con_info" {
     GHC.Unicode.LowercaseLetter_con_info:
         const GHC.Unicode.LowercaseLetter_con_entry;
         const 4294967296;
         const 4294967299;
         const i2nuO_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.439536666 UTC

[section ""cstring" . i2nuV_str" {
     i2nuV_str:
         I8[] [98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,84,105,116,108,101,99,97,115,101,76,101,116,116,101,114]
 },
 GHC.Unicode.TitlecaseLetter_con_entry() //  [R1]
         { []
         }
     {offset
       c2nuU: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.TitlecaseLetter_con_info" {
     GHC.Unicode.TitlecaseLetter_con_info:
         const GHC.Unicode.TitlecaseLetter_con_entry;
         const 4294967296;
         const 8589934595;
         const i2nuV_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.442658896 UTC

[section ""cstring" . i2nv2_str" {
     i2nv2_str:
         I8[] [98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,77,111,100,105,102,105,101,114,76,101,116,116,101,114]
 },
 GHC.Unicode.ModifierLetter_con_entry() //  [R1]
         { []
         }
     {offset
       c2nv1: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.ModifierLetter_con_info" {
     GHC.Unicode.ModifierLetter_con_info:
         const GHC.Unicode.ModifierLetter_con_entry;
         const 4294967296;
         const 12884901891;
         const i2nv2_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.445708111 UTC

[section ""cstring" . i2nv9_str" {
     i2nv9_str:
         I8[] [98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,79,116,104,101,114,76,101,116,116,101,114]
 },
 GHC.Unicode.OtherLetter_con_entry() //  [R1]
         { []
         }
     {offset
       c2nv8: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.OtherLetter_con_info" {
     GHC.Unicode.OtherLetter_con_info:
         const GHC.Unicode.OtherLetter_con_entry;
         const 4294967296;
         const 17179869187;
         const i2nv9_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.448741882 UTC

[section ""cstring" . i2nvg_str" {
     i2nvg_str:
         I8[] [98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,78,111,110,83,112,97,99,105,110,103,77,97,114,107]
 },
 GHC.Unicode.NonSpacingMark_con_entry() //  [R1]
         { []
         }
     {offset
       c2nvf: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.NonSpacingMark_con_info" {
     GHC.Unicode.NonSpacingMark_con_info:
         const GHC.Unicode.NonSpacingMark_con_entry;
         const 4294967296;
         const 21474836483;
         const i2nvg_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.451933427 UTC

[section ""cstring" . i2nvn_str" {
     i2nvn_str:
         I8[] [98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,83,112,97,99,105,110,103,67,111,109,98,105,110,105,110,103,77,97,114,107]
 },
 GHC.Unicode.SpacingCombiningMark_con_entry() //  [R1]
         { []
         }
     {offset
       c2nvm: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.SpacingCombiningMark_con_info" {
     GHC.Unicode.SpacingCombiningMark_con_info:
         const GHC.Unicode.SpacingCombiningMark_con_entry;
         const 4294967296;
         const 25769803779;
         const i2nvn_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.455394378 UTC

[section ""cstring" . i2nvu_str" {
     i2nvu_str:
         I8[] [98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,69,110,99,108,111,115,105,110,103,77,97,114,107]
 },
 GHC.Unicode.EnclosingMark_con_entry() //  [R1]
         { []
         }
     {offset
       c2nvt: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.EnclosingMark_con_info" {
     GHC.Unicode.EnclosingMark_con_info:
         const GHC.Unicode.EnclosingMark_con_entry;
         const 4294967296;
         const 30064771075;
         const i2nvu_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.459094819 UTC

[section ""cstring" . i2nvB_str" {
     i2nvB_str:
         I8[] [98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,68,101,99,105,109,97,108,78,117,109,98,101,114]
 },
 GHC.Unicode.DecimalNumber_con_entry() //  [R1]
         { []
         }
     {offset
       c2nvA: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.DecimalNumber_con_info" {
     GHC.Unicode.DecimalNumber_con_info:
         const GHC.Unicode.DecimalNumber_con_entry;
         const 4294967296;
         const 34359738371;
         const i2nvB_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.462181445 UTC

[section ""cstring" . i2nvI_str" {
     i2nvI_str:
         I8[] [98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,76,101,116,116,101,114,78,117,109,98,101,114]
 },
 GHC.Unicode.LetterNumber_con_entry() //  [R1]
         { []
         }
     {offset
       c2nvH: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.LetterNumber_con_info" {
     GHC.Unicode.LetterNumber_con_info:
         const GHC.Unicode.LetterNumber_con_entry;
         const 4294967296;
         const 38654705667;
         const i2nvI_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.465121649 UTC

[section ""cstring" . i2nvP_str" {
     i2nvP_str:
         I8[] [98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,79,116,104,101,114,78,117,109,98,101,114]
 },
 GHC.Unicode.OtherNumber_con_entry() //  [R1]
         { []
         }
     {offset
       c2nvO: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.OtherNumber_con_info" {
     GHC.Unicode.OtherNumber_con_info:
         const GHC.Unicode.OtherNumber_con_entry;
         const 4294967296;
         const 42949672963;
         const i2nvP_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.468403511 UTC

[section ""cstring" . i2nvW_str" {
     i2nvW_str:
         I8[] [98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,67,111,110,110,101,99,116,111,114,80,117,110,99,116,117,97,116,105,111,110]
 },
 GHC.Unicode.ConnectorPunctuation_con_entry() //  [R1]
         { []
         }
     {offset
       c2nvV: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.ConnectorPunctuation_con_info" {
     GHC.Unicode.ConnectorPunctuation_con_info:
         const GHC.Unicode.ConnectorPunctuation_con_entry;
         const 4294967296;
         const 47244640259;
         const i2nvW_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.471456527 UTC

[section ""cstring" . i2nw3_str" {
     i2nw3_str:
         I8[] [98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,68,97,115,104,80,117,110,99,116,117,97,116,105,111,110]
 },
 GHC.Unicode.DashPunctuation_con_entry() //  [R1]
         { []
         }
     {offset
       c2nw2: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.DashPunctuation_con_info" {
     GHC.Unicode.DashPunctuation_con_info:
         const GHC.Unicode.DashPunctuation_con_entry;
         const 4294967296;
         const 51539607555;
         const i2nw3_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.474582091 UTC

[section ""cstring" . i2nwa_str" {
     i2nwa_str:
         I8[] [98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,79,112,101,110,80,117,110,99,116,117,97,116,105,111,110]
 },
 GHC.Unicode.OpenPunctuation_con_entry() //  [R1]
         { []
         }
     {offset
       c2nw9: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.OpenPunctuation_con_info" {
     GHC.Unicode.OpenPunctuation_con_info:
         const GHC.Unicode.OpenPunctuation_con_entry;
         const 4294967296;
         const 55834574851;
         const i2nwa_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.477960873 UTC

[section ""cstring" . i2nwh_str" {
     i2nwh_str:
         I8[] [98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,67,108,111,115,101,80,117,110,99,116,117,97,116,105,111,110]
 },
 GHC.Unicode.ClosePunctuation_con_entry() //  [R1]
         { []
         }
     {offset
       c2nwg: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.ClosePunctuation_con_info" {
     GHC.Unicode.ClosePunctuation_con_info:
         const GHC.Unicode.ClosePunctuation_con_entry;
         const 4294967296;
         const 60129542147;
         const i2nwh_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.481083021 UTC

[section ""cstring" . i2nwo_str" {
     i2nwo_str:
         I8[] [98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,73,110,105,116,105,97,108,81,117,111,116,101]
 },
 GHC.Unicode.InitialQuote_con_entry() //  [R1]
         { []
         }
     {offset
       c2nwn: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.InitialQuote_con_info" {
     GHC.Unicode.InitialQuote_con_info:
         const GHC.Unicode.InitialQuote_con_entry;
         const 4294967296;
         const 64424509443;
         const i2nwo_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.484217682 UTC

[section ""cstring" . i2nwv_str" {
     i2nwv_str:
         I8[] [98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,70,105,110,97,108,81,117,111,116,101]
 },
 GHC.Unicode.FinalQuote_con_entry() //  [R1]
         { []
         }
     {offset
       c2nwu: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.FinalQuote_con_info" {
     GHC.Unicode.FinalQuote_con_info:
         const GHC.Unicode.FinalQuote_con_entry;
         const 4294967296;
         const 68719476739;
         const i2nwv_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.488131537 UTC

[section ""cstring" . i2nwC_str" {
     i2nwC_str:
         I8[] [98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,79,116,104,101,114,80,117,110,99,116,117,97,116,105,111,110]
 },
 GHC.Unicode.OtherPunctuation_con_entry() //  [R1]
         { []
         }
     {offset
       c2nwB: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.OtherPunctuation_con_info" {
     GHC.Unicode.OtherPunctuation_con_info:
         const GHC.Unicode.OtherPunctuation_con_entry;
         const 4294967296;
         const 73014444035;
         const i2nwC_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.491120739 UTC

[section ""cstring" . i2nwJ_str" {
     i2nwJ_str:
         I8[] [98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,77,97,116,104,83,121,109,98,111,108]
 },
 GHC.Unicode.MathSymbol_con_entry() //  [R1]
         { []
         }
     {offset
       c2nwI: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.MathSymbol_con_info" {
     GHC.Unicode.MathSymbol_con_info:
         const GHC.Unicode.MathSymbol_con_entry;
         const 4294967296;
         const 77309411331;
         const i2nwJ_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.49442638 UTC

[section ""cstring" . i2nwQ_str" {
     i2nwQ_str:
         I8[] [98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,67,117,114,114,101,110,99,121,83,121,109,98,111,108]
 },
 GHC.Unicode.CurrencySymbol_con_entry() //  [R1]
         { []
         }
     {offset
       c2nwP: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.CurrencySymbol_con_info" {
     GHC.Unicode.CurrencySymbol_con_info:
         const GHC.Unicode.CurrencySymbol_con_entry;
         const 4294967296;
         const 81604378627;
         const i2nwQ_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.497447979 UTC

[section ""cstring" . i2nwX_str" {
     i2nwX_str:
         I8[] [98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,77,111,100,105,102,105,101,114,83,121,109,98,111,108]
 },
 GHC.Unicode.ModifierSymbol_con_entry() //  [R1]
         { []
         }
     {offset
       c2nwW: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.ModifierSymbol_con_info" {
     GHC.Unicode.ModifierSymbol_con_info:
         const GHC.Unicode.ModifierSymbol_con_entry;
         const 4294967296;
         const 85899345923;
         const i2nwX_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.500241567 UTC

[section ""cstring" . i2nx4_str" {
     i2nx4_str:
         I8[] [98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,79,116,104,101,114,83,121,109,98,111,108]
 },
 GHC.Unicode.OtherSymbol_con_entry() //  [R1]
         { []
         }
     {offset
       c2nx3: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.OtherSymbol_con_info" {
     GHC.Unicode.OtherSymbol_con_info:
         const GHC.Unicode.OtherSymbol_con_entry;
         const 4294967296;
         const 90194313219;
         const i2nx4_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.503384358 UTC

[section ""cstring" . i2nxb_str" {
     i2nxb_str:
         I8[] [98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,83,112,97,99,101]
 },
 GHC.Unicode.Space_con_entry() //  [R1]
         { []
         }
     {offset
       c2nxa: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.Space_con_info" {
     GHC.Unicode.Space_con_info:
         const GHC.Unicode.Space_con_entry;
         const 4294967296;
         const 94489280515;
         const i2nxb_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.506574887 UTC

[section ""cstring" . i2nxi_str" {
     i2nxi_str:
         I8[] [98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,76,105,110,101,83,101,112,97,114,97,116,111,114]
 },
 GHC.Unicode.LineSeparator_con_entry() //  [R1]
         { []
         }
     {offset
       c2nxh: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.LineSeparator_con_info" {
     GHC.Unicode.LineSeparator_con_info:
         const GHC.Unicode.LineSeparator_con_entry;
         const 4294967296;
         const 98784247811;
         const i2nxi_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.509720456 UTC

[section ""cstring" . i2nxp_str" {
     i2nxp_str:
         I8[] [98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,80,97,114,97,103,114,97,112,104,83,101,112,97,114,97,116,111,114]
 },
 GHC.Unicode.ParagraphSeparator_con_entry() //  [R1]
         { []
         }
     {offset
       c2nxo: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.ParagraphSeparator_con_info" {
     GHC.Unicode.ParagraphSeparator_con_info:
         const GHC.Unicode.ParagraphSeparator_con_entry;
         const 4294967296;
         const 103079215107;
         const i2nxp_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.513601679 UTC

[section ""cstring" . i2nxw_str" {
     i2nxw_str:
         I8[] [98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,67,111,110,116,114,111,108]
 },
 GHC.Unicode.Control_con_entry() //  [R1]
         { []
         }
     {offset
       c2nxv: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.Control_con_info" {
     GHC.Unicode.Control_con_info:
         const GHC.Unicode.Control_con_entry;
         const 4294967296;
         const 107374182403;
         const i2nxw_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.516846128 UTC

[section ""cstring" . i2nxD_str" {
     i2nxD_str:
         I8[] [98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,70,111,114,109,97,116]
 },
 GHC.Unicode.Format_con_entry() //  [R1]
         { []
         }
     {offset
       c2nxC: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.Format_con_info" {
     GHC.Unicode.Format_con_info:
         const GHC.Unicode.Format_con_entry;
         const 4294967296;
         const 111669149699;
         const i2nxD_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.520001168 UTC

[section ""cstring" . i2nxK_str" {
     i2nxK_str:
         I8[] [98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,83,117,114,114,111,103,97,116,101]
 },
 GHC.Unicode.Surrogate_con_entry() //  [R1]
         { []
         }
     {offset
       c2nxJ: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.Surrogate_con_info" {
     GHC.Unicode.Surrogate_con_info:
         const GHC.Unicode.Surrogate_con_entry;
         const 4294967296;
         const 115964116995;
         const i2nxK_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.523108654 UTC

[section ""cstring" . i2nxR_str" {
     i2nxR_str:
         I8[] [98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,80,114,105,118,97,116,101,85,115,101]
 },
 GHC.Unicode.PrivateUse_con_entry() //  [R1]
         { []
         }
     {offset
       c2nxQ: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.PrivateUse_con_info" {
     GHC.Unicode.PrivateUse_con_info:
         const GHC.Unicode.PrivateUse_con_entry;
         const 4294967296;
         const 120259084291;
         const i2nxR_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.526620263 UTC

[section ""cstring" . i2nxY_str" {
     i2nxY_str:
         I8[] [98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,78,111,116,65,115,115,105,103,110,101,100]
 },
 GHC.Unicode.NotAssigned_con_entry() //  [R1]
         { []
         }
     {offset
       c2nxX: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Unicode.NotAssigned_con_info" {
     GHC.Unicode.NotAssigned_con_info:
         const GHC.Unicode.NotAssigned_con_entry;
         const 4294967296;
         const 124554051587;
         const i2nxY_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:07.529954412 UTC

[section ""relreadonly" . S2mmR_srt" {
     S2mmR_srt:
         const GHC.Unicode.$w$cshowsPrec_closure;
         const lvl1_r2j63_closure;
         const lvl3_r2j65_closure;
         const lvl5_r2j67_closure;
         const lvl7_r2j69_closure;
         const lvl9_r2j6b_closure;
         const lvl11_r2j6d_closure;
         const lvl13_r2j6f_closure;
         const lvl15_r2j6h_closure;
         const lvl17_r2j6j_closure;
         const lvl19_r2j6l_closure;
         const lvl21_r2j6n_closure;
         const lvl23_r2j6p_closure;
         const lvl25_r2j6r_closure;
         const lvl27_r2j6t_closure;
         const lvl29_r2j6v_closure;
         const lvl31_r2j6x_closure;
         const lvl33_r2j6z_closure;
         const lvl35_r2j6B_closure;
         const lvl37_r2j6D_closure;
         const lvl39_r2j6F_closure;
         const lvl41_r2j6H_closure;
         const lvl43_r2j6J_closure;
         const lvl45_r2j6L_closure;
         const lvl47_r2j6N_closure;
         const lvl49_r2j6P_closure;
         const lvl51_r2j6R_closure;
         const lvl53_r2j6T_closure;
         const lvl55_r2j6V_closure;
         const lvl57_r2j6X_closure;
         const lvl59_r2j6Z_closure;
         const GHC.Arr.hopelessIndexError_closure;
         const GHC.Unicode.$fIxGeneralCategory_$cindex_closure;
         const lvl62_r2j7d_closure;
         const lvl63_r2j7e_closure;
         const lvl64_r2j7f_closure;
         const GHC.Err.error_closure;
         const GHC.Unicode.$wlvl_closure;
         const $dIP3_r2j7a_closure;
         const GHC.Unicode.$fEnumGeneralCategory_$ctoEnum_closure;
         const GHC.Unicode.$w$ctoEnum_closure;
         const GHC.Char.$wlvl_closure;
         const GHC.Unicode.toLower_closure;
         const GHC.Unicode.toUpper_closure;
         const GHC.Unicode.toTitle_closure;
         const GHC.Unicode.$fEnumGeneralCategory_$csucc_closure;
         const GHC.Unicode.$fEnumGeneralCategory2_closure;
         const GHC.Unicode.$fEnumGeneralCategory_$cpred_closure;
         const GHC.Unicode.$fEnumGeneralCategory1_closure;
         const GHC.Unicode.$fEnumGeneralCategory_$cenumFromTo_closure;
         const GHC.Unicode.$fEnumGeneralCategory_$cenumFromThenTo_closure;
         const GHC.Unicode.generalCategory_closure;
         const GHC.Unicode.$wgeneralCategory_closure;
         const GHC.Unicode.isPunctuation_closure;
         const GHC.Unicode.$wisPunctuation_closure;
         const GHC.Unicode.isSymbol_closure;
         const GHC.Unicode.$wisSymbol_closure;
 }]

