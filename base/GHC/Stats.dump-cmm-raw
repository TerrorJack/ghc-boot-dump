
==================== Raw Cmm ====================
2018-03-16 16:07:36.612506847 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:07:36.613692476 UTC

[section ""cstring" . lvl_rcHpv_bytes" {
     lvl_rcHpv_bytes:
         I8[] [71,67,68,101,116,97,105,108,115,32,123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:36.615530826 UTC

[section ""cstring" . lvl1_rcHpw_bytes" {
     lvl1_rcHpw_bytes:
         I8[] [103,99,100,101,116,97,105,108,115,95,103,101,110,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:36.617659973 UTC

[section ""cstring" . lvl2_rcHpx_bytes" {
     lvl2_rcHpx_bytes:
         I8[] [103,99,100,101,116,97,105,108,115,95,116,104,114,101,97,100,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:36.6194317 UTC

[section ""cstring" . lvl3_rcHpy_bytes" {
     lvl3_rcHpy_bytes:
         I8[] [103,99,100,101,116,97,105,108,115,95,97,108,108,111,99,97,116,101,100,95,98,121,116,101,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:36.621214007 UTC

[section ""cstring" . lvl4_rcHpz_bytes" {
     lvl4_rcHpz_bytes:
         I8[] [103,99,100,101,116,97,105,108,115,95,108,105,118,101,95,98,121,116,101,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:36.623004091 UTC

[section ""cstring" . lvl5_rcHpA_bytes" {
     lvl5_rcHpA_bytes:
         I8[] [103,99,100,101,116,97,105,108,115,95,108,97,114,103,101,95,111,98,106,101,99,116,115,95,98,121,116,101,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:36.624730317 UTC

[section ""cstring" . lvl6_rcHpB_bytes" {
     lvl6_rcHpB_bytes:
         I8[] [103,99,100,101,116,97,105,108,115,95,99,111,109,112,97,99,116,95,98,121,116,101,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:36.6264195 UTC

[section ""cstring" . lvl7_rcHpC_bytes" {
     lvl7_rcHpC_bytes:
         I8[] [103,99,100,101,116,97,105,108,115,95,115,108,111,112,95,98,121,116,101,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:36.628179022 UTC

[section ""cstring" . lvl8_rcHpD_bytes" {
     lvl8_rcHpD_bytes:
         I8[] [103,99,100,101,116,97,105,108,115,95,109,101,109,95,105,110,95,117,115,101,95,98,121,116,101,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:36.630007472 UTC

[section ""cstring" . lvl9_rcHpE_bytes" {
     lvl9_rcHpE_bytes:
         I8[] [103,99,100,101,116,97,105,108,115,95,99,111,112,105,101,100,95,98,121,116,101,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:36.631739881 UTC

[section ""cstring" . lvl10_rcHpF_bytes" {
     lvl10_rcHpF_bytes:
         I8[] [103,99,100,101,116,97,105,108,115,95,112,97,114,95,109,97,120,95,99,111,112,105,101,100,95,98,121,116,101,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:36.633616027 UTC

[section ""cstring" . lvl11_rcHpG_bytes" {
     lvl11_rcHpG_bytes:
         I8[] [103,99,100,101,116,97,105,108,115,95,112,97,114,95,98,97,108,97,110,99,101,100,95,99,111,112,105,101,100,95,98,121,116,101,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:36.635483427 UTC

[section ""cstring" . lvl12_rcHpH_bytes" {
     lvl12_rcHpH_bytes:
         I8[] [103,99,100,101,116,97,105,108,115,95,115,121,110,99,95,101,108,97,112,115,101,100,95,110,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:36.638107766 UTC

[section ""cstring" . lvl13_rcHpI_bytes" {
     lvl13_rcHpI_bytes:
         I8[] [103,99,100,101,116,97,105,108,115,95,99,112,117,95,110,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:36.639761625 UTC

[section ""cstring" . lvl14_rcHpJ_bytes" {
     lvl14_rcHpJ_bytes:
         I8[] [103,99,100,101,116,97,105,108,115,95,101,108,97,112,115,101,100,95,110,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:36.641740573 UTC

[section ""cstring" . lvl15_rcHpK_bytes" {
     lvl15_rcHpK_bytes:
         I8[] [125]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:36.692209234 UTC

[section ""data" . GHC.Stats.$fShowGCDetails_$cshowsPrec_closure" {
     GHC.Stats.$fShowGCDetails_$cshowsPrec_closure:
         const GHC.Stats.$fShowGCDetails_$cshowsPrec_info;
         const 0;
 },
 w1_scHss_entry() //  [R1]
         { []
         }
     {offset
       ccK0q: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccK0r; else goto ccK0s;
       ccK0r: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccK0s: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccK0n_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucK0E; else goto ccK0o;
       ucK0E: // global
           call _ccK0n(R1) args: 0, res: 0, upd: 0;
       ccK0o: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . w1_scHss_info" {
     w1_scHss_info:
         const w1_scHss_entry;
         const 1;
         const 16;
 },
 _ccK0n() //  [R1]
         { []
         }
     {offset
       ccK0n: // global
           _scHsu::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_scHsu::I64, 0)) goto ccK0C; else goto ccK0D;
       ccK0C: // global
           R2 = _scHsu::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.wordToInteger_entry(R2) args: 24, res: 0, upd: 24;
       ccK0D: // global
           R2 = _scHsu::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccK0n_info" {
     block_ccK0n_info:
         const _ccK0n;
         const 0;
         const 30;
 },
 w2_scHsx_entry() //  [R1]
         { []
         }
     {offset
       ccK0M: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccK0N; else goto ccK0O;
       ccK0N: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccK0O: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccK0J_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucK10; else goto ccK0K;
       ucK10: // global
           call _ccK0J(R1) args: 0, res: 0, upd: 0;
       ccK0K: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . w2_scHsx_info" {
     w2_scHsx_info:
         const w2_scHsx_entry;
         const 1;
         const 16;
 },
 _ccK0J() //  [R1]
         { []
         }
     {offset
       ccK0J: // global
           _scHsz::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_scHsz::I64, 0)) goto ccK0Y; else goto ccK0Z;
       ccK0Y: // global
           R2 = _scHsz::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.wordToInteger_entry(R2) args: 24, res: 0, upd: 24;
       ccK0Z: // global
           R2 = _scHsz::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccK0J_info" {
     block_ccK0J_info:
         const _ccK0J;
         const 0;
         const 30;
 },
 w3_scHsC_entry() //  [R1]
         { []
         }
     {offset
       ccK18: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccK19; else goto ccK1a;
       ccK19: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccK1a: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccK15_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucK1m; else goto ccK16;
       ucK1m: // global
           call _ccK15(R1) args: 0, res: 0, upd: 0;
       ccK16: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . w3_scHsC_info" {
     w3_scHsC_info:
         const w3_scHsC_entry;
         const 1;
         const 16;
 },
 _ccK15() //  [R1]
         { []
         }
     {offset
       ccK15: // global
           _scHsE::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_scHsE::I64, 0)) goto ccK1k; else goto ccK1l;
       ccK1k: // global
           R2 = _scHsE::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.wordToInteger_entry(R2) args: 24, res: 0, upd: 24;
       ccK1l: // global
           R2 = _scHsE::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccK15_info" {
     block_ccK15_info:
         const _ccK15;
         const 0;
         const 30;
 },
 w4_scHsH_entry() //  [R1]
         { []
         }
     {offset
       ccK1u: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccK1v; else goto ccK1w;
       ccK1v: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccK1w: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccK1r_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucK1I; else goto ccK1s;
       ucK1I: // global
           call _ccK1r(R1) args: 0, res: 0, upd: 0;
       ccK1s: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . w4_scHsH_info" {
     w4_scHsH_info:
         const w4_scHsH_entry;
         const 1;
         const 16;
 },
 _ccK1r() //  [R1]
         { []
         }
     {offset
       ccK1r: // global
           _scHsJ::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_scHsJ::I64, 0)) goto ccK1G; else goto ccK1H;
       ccK1G: // global
           R2 = _scHsJ::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.wordToInteger_entry(R2) args: 24, res: 0, upd: 24;
       ccK1H: // global
           R2 = _scHsJ::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccK1r_info" {
     block_ccK1r_info:
         const _ccK1r;
         const 0;
         const 30;
 },
 w5_scHsM_entry() //  [R1]
         { []
         }
     {offset
       ccK1Q: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccK1R; else goto ccK1S;
       ccK1R: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccK1S: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccK1N_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucK24; else goto ccK1O;
       ucK24: // global
           call _ccK1N(R1) args: 0, res: 0, upd: 0;
       ccK1O: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . w5_scHsM_info" {
     w5_scHsM_info:
         const w5_scHsM_entry;
         const 1;
         const 16;
 },
 _ccK1N() //  [R1]
         { []
         }
     {offset
       ccK1N: // global
           _scHsO::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_scHsO::I64, 0)) goto ccK22; else goto ccK23;
       ccK22: // global
           R2 = _scHsO::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.wordToInteger_entry(R2) args: 24, res: 0, upd: 24;
       ccK23: // global
           R2 = _scHsO::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccK1N_info" {
     block_ccK1N_info:
         const _ccK1N;
         const 0;
         const 30;
 },
 w6_scHsR_entry() //  [R1]
         { []
         }
     {offset
       ccK2c: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccK2d; else goto ccK2e;
       ccK2d: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccK2e: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccK29_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucK2q; else goto ccK2a;
       ucK2q: // global
           call _ccK29(R1) args: 0, res: 0, upd: 0;
       ccK2a: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . w6_scHsR_info" {
     w6_scHsR_info:
         const w6_scHsR_entry;
         const 1;
         const 16;
 },
 _ccK29() //  [R1]
         { []
         }
     {offset
       ccK29: // global
           _scHsT::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_scHsT::I64, 0)) goto ccK2o; else goto ccK2p;
       ccK2o: // global
           R2 = _scHsT::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.wordToInteger_entry(R2) args: 24, res: 0, upd: 24;
       ccK2p: // global
           R2 = _scHsT::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccK29_info" {
     block_ccK29_info:
         const _ccK29;
         const 0;
         const 30;
 },
 w7_scHsW_entry() //  [R1]
         { []
         }
     {offset
       ccK2y: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccK2z; else goto ccK2A;
       ccK2z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccK2A: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccK2v_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucK2M; else goto ccK2w;
       ucK2M: // global
           call _ccK2v(R1) args: 0, res: 0, upd: 0;
       ccK2w: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . w7_scHsW_info" {
     w7_scHsW_info:
         const w7_scHsW_entry;
         const 1;
         const 16;
 },
 _ccK2v() //  [R1]
         { []
         }
     {offset
       ccK2v: // global
           _scHsY::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_scHsY::I64, 0)) goto ccK2K; else goto ccK2L;
       ccK2K: // global
           R2 = _scHsY::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.wordToInteger_entry(R2) args: 24, res: 0, upd: 24;
       ccK2L: // global
           R2 = _scHsY::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccK2v_info" {
     block_ccK2v_info:
         const _ccK2v;
         const 0;
         const 30;
 },
 w8_scHt1_entry() //  [R1]
         { []
         }
     {offset
       ccK2U: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccK2V; else goto ccK2W;
       ccK2V: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccK2W: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccK2R_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucK38; else goto ccK2S;
       ucK38: // global
           call _ccK2R(R1) args: 0, res: 0, upd: 0;
       ccK2S: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . w8_scHt1_info" {
     w8_scHt1_info:
         const w8_scHt1_entry;
         const 1;
         const 16;
 },
 _ccK2R() //  [R1]
         { []
         }
     {offset
       ccK2R: // global
           _scHt3::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_scHt3::I64, 0)) goto ccK36; else goto ccK37;
       ccK36: // global
           R2 = _scHt3::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.wordToInteger_entry(R2) args: 24, res: 0, upd: 24;
       ccK37: // global
           R2 = _scHt3::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccK2R_info" {
     block_ccK2R_info:
         const _ccK2R;
         const 0;
         const 30;
 },
 w9_scHt6_entry() //  [R1]
         { []
         }
     {offset
       ccK3g: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccK3h; else goto ccK3i;
       ccK3h: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccK3i: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccK3d_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucK3u; else goto ccK3e;
       ucK3u: // global
           call _ccK3d(R1) args: 0, res: 0, upd: 0;
       ccK3e: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . w9_scHt6_info" {
     w9_scHt6_info:
         const w9_scHt6_entry;
         const 1;
         const 16;
 },
 _ccK3d() //  [R1]
         { []
         }
     {offset
       ccK3d: // global
           _scHt8::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_scHt8::I64, 0)) goto ccK3s; else goto ccK3t;
       ccK3s: // global
           R2 = _scHt8::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.wordToInteger_entry(R2) args: 24, res: 0, upd: 24;
       ccK3t: // global
           R2 = _scHt8::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccK3d_info" {
     block_ccK3d_info:
         const _ccK3d;
         const 0;
         const 30;
 },
 sat_scHtp_entry() //  [R1]
         { []
         }
     {offset
       ccK6H: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccK6I; else goto ccK6J;
       ccK6I: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccK6J: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = lvl15_rcHpK_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHtp_info" {
     sat_scHtp_info:
         const sat_scHtp_entry;
         const 1;
         const 16;
 },
 sat_scHtt_entry() //  [R1]
         { []
         }
     {offset
       ccK6K: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccK6O; else goto ccK6P;
       ccK6O: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccK6P: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_ccK6y_info;
           _scHtc::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _scHtc::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ucK6W; else goto ccK6z;
       ucK6W: // global
           call _ccK6y(R1) args: 0, res: 0, upd: 0;
       ccK6z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHtt_info" {
     sat_scHtt_info:
         const sat_scHtt_entry;
         const 2;
         const 18;
 },
 _ccK6y() //  [R1]
         { []
         }
     {offset
       ccK6y: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccK6S; else goto ccK6R;
       ccK6S: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       ccK6R: // global
           _scHto::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_scHtp_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_ccK6L_info;
           R4 = Hp - 16;
           R3 = _scHto::I64;
           R2 = 0;
           Sp = Sp + 8;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccK6y_info" {
     block_ccK6y_info:
         const _ccK6y;
         const 1;
         const 30;
 },
 _ccK6L() //  [R1, R2]
         { []
         }
     {offset
       ccK6L: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccK6V; else goto ccK6U;
       ccK6V: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccK6U: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccK6L_info" {
     block_ccK6L_info:
         const _ccK6L;
         const 0;
         const 30;
 },
 sat_scHtu_entry() //  [R1]
         { []
         }
     {offset
       ccK6X: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccK71; else goto ccK70;
       ccK71: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccK70: // global
           _scHsp::P64 = P64[R1 + 16];
           _scHtc::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_scHtt_info;
           P64[Hp - 8] = _scHsp::P64;
           P64[Hp] = _scHtc::P64;
           R3 = Hp - 24;
           R2 = lvl14_rcHpJ_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHtu_info" {
     sat_scHtu_info:
         const sat_scHtu_entry;
         const 2;
         const 18;
 },
 sat_scHtv_entry() //  [R1]
         { []
         }
     {offset
       ccK72: // global
           _scHtv::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccK73; else goto ccK74;
       ccK74: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccK76; else goto ccK75;
       ccK76: // global
           HpAlloc = 32;
           goto ccK73;
       ccK73: // global
           R1 = _scHtv::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccK75: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scHtv::P64;
           _scHsp::P64 = P64[_scHtv::P64 + 16];
           _scHtc::P64 = P64[_scHtv::P64 + 24];
           I64[Hp - 24] = sat_scHtu_info;
           P64[Hp - 8] = _scHsp::P64;
           P64[Hp] = _scHtc::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHtv_info" {
     sat_scHtv_info:
         const sat_scHtv_entry;
         const 2;
         const 4294967314;
         const ScI2G_srt;
 },
 sat_scHtz_entry() //  [R1]
         { []
         }
     {offset
       ccK77: // global
           if ((Sp + -40) < SpLim) (likely: False) goto ccK7b; else goto ccK7c;
       ccK7b: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccK7c: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_ccK6h_info;
           _scHsp::P64 = P64[R1 + 24];
           _scHtc::P64 = P64[R1 + 32];
           R1 = P64[R1 + 16];
           P64[Sp - 32] = _scHsp::P64;
           P64[Sp - 24] = _scHtc::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ucK7j; else goto ccK6i;
       ucK7j: // global
           call _ccK6h(R1) args: 0, res: 0, upd: 0;
       ccK6i: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHtz_info" {
     sat_scHtz_info:
         const sat_scHtz_entry;
         const 3;
         const 4294967311;
         const ScI2G_srt;
 },
 _ccK6h() //  [R1]
         { []
         }
     {offset
       ccK6h: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccK7f; else goto ccK7e;
       ccK7f: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       ccK7e: // global
           _scHtm::I64 = I64[R1 + 7];
           I64[Hp - 24] = sat_scHtv_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_ccK78_info;
           R4 = Hp - 24;
           R3 = _scHtm::I64;
           R2 = 0;
           Sp = Sp + 16;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccK6h_info" {
     block_ccK6h_info:
         const _ccK6h;
         const 2;
         const 4294967326;
         const ScI2G_srt;
 },
 _ccK78() //  [R1, R2]
         { []
         }
     {offset
       ccK78: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccK7i; else goto ccK7h;
       ccK7i: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccK7h: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccK78_info" {
     block_ccK78_info:
         const _ccK78;
         const 0;
         const 30;
 },
 sat_scHtA_entry() //  [R1]
         { []
         }
     {offset
       ccK7k: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccK7o; else goto ccK7n;
       ccK7o: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccK7n: // global
           _scHso::P64 = P64[R1 + 16];
           _scHsp::P64 = P64[R1 + 24];
           _scHtc::P64 = P64[R1 + 32];
           I64[Hp - 32] = sat_scHtz_info;
           P64[Hp - 16] = _scHso::P64;
           P64[Hp - 8] = _scHsp::P64;
           P64[Hp] = _scHtc::P64;
           R3 = Hp - 32;
           R2 = lvl13_rcHpI_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHtA_info" {
     sat_scHtA_info:
         const sat_scHtA_entry;
         const 3;
         const 4294967311;
         const ScI2G_srt;
 },
 sat_scHtB_entry() //  [R1]
         { []
         }
     {offset
       ccK7p: // global
           _scHtB::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccK7q; else goto ccK7r;
       ccK7r: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccK7t; else goto ccK7s;
       ccK7t: // global
           HpAlloc = 40;
           goto ccK7q;
       ccK7q: // global
           R1 = _scHtB::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccK7s: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scHtB::P64;
           _scHso::P64 = P64[_scHtB::P64 + 16];
           _scHsp::P64 = P64[_scHtB::P64 + 24];
           _scHtc::P64 = P64[_scHtB::P64 + 32];
           I64[Hp - 32] = sat_scHtA_info;
           P64[Hp - 16] = _scHso::P64;
           P64[Hp - 8] = _scHsp::P64;
           P64[Hp] = _scHtc::P64;
           R3 = Hp - 32;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHtB_info" {
     sat_scHtB_info:
         const sat_scHtB_entry;
         const 3;
         const 4294967311;
         const ScI2G_srt;
 },
 sat_scHtF_entry() //  [R1]
         { []
         }
     {offset
       ccK7u: // global
           if ((Sp + -48) < SpLim) (likely: False) goto ccK7y; else goto ccK7z;
       ccK7y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccK7z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_ccK60_info;
           _scHso::P64 = P64[R1 + 24];
           _scHsp::P64 = P64[R1 + 32];
           _scHtc::P64 = P64[R1 + 40];
           R1 = P64[R1 + 16];
           P64[Sp - 40] = _scHso::P64;
           P64[Sp - 32] = _scHsp::P64;
           P64[Sp - 24] = _scHtc::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto ucK7G; else goto ccK61;
       ucK7G: // global
           call _ccK60(R1) args: 0, res: 0, upd: 0;
       ccK61: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHtF_info" {
     sat_scHtF_info:
         const sat_scHtF_entry;
         const 4;
         const 4294967311;
         const ScI2G_srt;
 },
 _ccK60() //  [R1]
         { []
         }
     {offset
       ccK60: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccK7C; else goto ccK7B;
       ccK7C: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       ccK7B: // global
           _scHtk::I64 = I64[R1 + 7];
           I64[Hp - 32] = sat_scHtB_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           I64[Sp + 24] = block_ccK7v_info;
           R4 = Hp - 32;
           R3 = _scHtk::I64;
           R2 = 0;
           Sp = Sp + 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccK60_info" {
     block_ccK60_info:
         const _ccK60;
         const 3;
         const 4294967326;
         const ScI2G_srt;
 },
 _ccK7v() //  [R1, R2]
         { []
         }
     {offset
       ccK7v: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccK7F; else goto ccK7E;
       ccK7F: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccK7E: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccK7v_info" {
     block_ccK7v_info:
         const _ccK7v;
         const 0;
         const 30;
 },
 sat_scHtG_entry() //  [R1]
         { []
         }
     {offset
       ccK7H: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccK7L; else goto ccK7K;
       ccK7L: // global
           HpAlloc = 48;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccK7K: // global
           _scHsn::P64 = P64[R1 + 16];
           _scHso::P64 = P64[R1 + 24];
           _scHsp::P64 = P64[R1 + 32];
           _scHtc::P64 = P64[R1 + 40];
           I64[Hp - 40] = sat_scHtF_info;
           P64[Hp - 24] = _scHsn::P64;
           P64[Hp - 16] = _scHso::P64;
           P64[Hp - 8] = _scHsp::P64;
           P64[Hp] = _scHtc::P64;
           R3 = Hp - 40;
           R2 = lvl12_rcHpH_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHtG_info" {
     sat_scHtG_info:
         const sat_scHtG_entry;
         const 4;
         const 4294967311;
         const ScI2G_srt;
 },
 sat_scHtH_entry() //  [R1]
         { []
         }
     {offset
       ccK7M: // global
           _scHtH::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccK7N; else goto ccK7O;
       ccK7O: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccK7Q; else goto ccK7P;
       ccK7Q: // global
           HpAlloc = 48;
           goto ccK7N;
       ccK7N: // global
           R1 = _scHtH::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccK7P: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scHtH::P64;
           _scHsn::P64 = P64[_scHtH::P64 + 16];
           _scHso::P64 = P64[_scHtH::P64 + 24];
           _scHsp::P64 = P64[_scHtH::P64 + 32];
           _scHtc::P64 = P64[_scHtH::P64 + 40];
           I64[Hp - 40] = sat_scHtG_info;
           P64[Hp - 24] = _scHsn::P64;
           P64[Hp - 16] = _scHso::P64;
           P64[Hp - 8] = _scHsp::P64;
           P64[Hp] = _scHtc::P64;
           R3 = Hp - 40;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHtH_info" {
     sat_scHtH_info:
         const sat_scHtH_entry;
         const 4;
         const 4294967311;
         const ScI2G_srt;
 },
 sat_scHtL_entry() //  [R1]
         { []
         }
     {offset
       ccK7U: // global
           _scHtL::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto ccK7V; else goto ccK7W;
       ccK7W: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccK7Y; else goto ccK7X;
       ccK7Y: // global
           HpAlloc = 48;
           goto ccK7V;
       ccK7V: // global
           R1 = _scHtL::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccK7X: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scHtL::P64;
           _scHsn::P64 = P64[_scHtL::P64 + 16];
           _scHso::P64 = P64[_scHtL::P64 + 24];
           _scHsp::P64 = P64[_scHtL::P64 + 32];
           _scHt6::P64 = P64[_scHtL::P64 + 40];
           _scHtc::P64 = P64[_scHtL::P64 + 48];
           I64[Hp - 40] = sat_scHtH_info;
           P64[Hp - 24] = _scHsn::P64;
           P64[Hp - 16] = _scHso::P64;
           P64[Hp - 8] = _scHsp::P64;
           P64[Hp] = _scHtc::P64;
           I64[Sp - 24] = block_ccK7R_info;
           R4 = Hp - 40;
           R3 = _scHt6::P64;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHtL_info" {
     sat_scHtL_info:
         const sat_scHtL_entry;
         const 5;
         const 12884901903;
         const ScI2G_srt;
 },
 _ccK7R() //  [R1, R2]
         { []
         }
     {offset
       ccK7R: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccK81; else goto ccK80;
       ccK81: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccK80: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccK7R_info" {
     block_ccK7R_info:
         const _ccK7R;
         const 0;
         const 30;
 },
 sat_scHtM_entry() //  [R1]
         { []
         }
     {offset
       ccK82: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto ccK86; else goto ccK85;
       ccK86: // global
           HpAlloc = 56;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccK85: // global
           _scHsn::P64 = P64[R1 + 16];
           _scHso::P64 = P64[R1 + 24];
           _scHsp::P64 = P64[R1 + 32];
           _scHt6::P64 = P64[R1 + 40];
           _scHtc::P64 = P64[R1 + 48];
           I64[Hp - 48] = sat_scHtL_info;
           P64[Hp - 32] = _scHsn::P64;
           P64[Hp - 24] = _scHso::P64;
           P64[Hp - 16] = _scHsp::P64;
           P64[Hp - 8] = _scHt6::P64;
           P64[Hp] = _scHtc::P64;
           R3 = Hp - 48;
           R2 = lvl11_rcHpG_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHtM_info" {
     sat_scHtM_info:
         const sat_scHtM_entry;
         const 5;
         const 12884901903;
         const ScI2G_srt;
 },
 sat_scHtN_entry() //  [R1]
         { []
         }
     {offset
       ccK87: // global
           _scHtN::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccK88; else goto ccK89;
       ccK89: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto ccK8b; else goto ccK8a;
       ccK8b: // global
           HpAlloc = 56;
           goto ccK88;
       ccK88: // global
           R1 = _scHtN::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccK8a: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scHtN::P64;
           _scHsn::P64 = P64[_scHtN::P64 + 16];
           _scHso::P64 = P64[_scHtN::P64 + 24];
           _scHsp::P64 = P64[_scHtN::P64 + 32];
           _scHt6::P64 = P64[_scHtN::P64 + 40];
           _scHtc::P64 = P64[_scHtN::P64 + 48];
           I64[Hp - 48] = sat_scHtM_info;
           P64[Hp - 32] = _scHsn::P64;
           P64[Hp - 24] = _scHso::P64;
           P64[Hp - 16] = _scHsp::P64;
           P64[Hp - 8] = _scHt6::P64;
           P64[Hp] = _scHtc::P64;
           R3 = Hp - 48;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHtN_info" {
     sat_scHtN_info:
         const sat_scHtN_entry;
         const 5;
         const 12884901903;
         const ScI2G_srt;
 },
 sat_scHtR_entry() //  [R1]
         { []
         }
     {offset
       ccK8f: // global
           _scHtR::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto ccK8g; else goto ccK8h;
       ccK8h: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto ccK8j; else goto ccK8i;
       ccK8j: // global
           HpAlloc = 56;
           goto ccK8g;
       ccK8g: // global
           R1 = _scHtR::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccK8i: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scHtR::P64;
           _scHsn::P64 = P64[_scHtR::P64 + 16];
           _scHso::P64 = P64[_scHtR::P64 + 24];
           _scHsp::P64 = P64[_scHtR::P64 + 32];
           _scHt1::P64 = P64[_scHtR::P64 + 40];
           _scHt6::P64 = P64[_scHtR::P64 + 48];
           _scHtc::P64 = P64[_scHtR::P64 + 56];
           I64[Hp - 48] = sat_scHtN_info;
           P64[Hp - 32] = _scHsn::P64;
           P64[Hp - 24] = _scHso::P64;
           P64[Hp - 16] = _scHsp::P64;
           P64[Hp - 8] = _scHt6::P64;
           P64[Hp] = _scHtc::P64;
           I64[Sp - 24] = block_ccK8c_info;
           R4 = Hp - 48;
           R3 = _scHt1::P64;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHtR_info" {
     sat_scHtR_info:
         const sat_scHtR_entry;
         const 6;
         const 12884901903;
         const ScI2G_srt;
 },
 _ccK8c() //  [R1, R2]
         { []
         }
     {offset
       ccK8c: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccK8m; else goto ccK8l;
       ccK8m: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccK8l: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccK8c_info" {
     block_ccK8c_info:
         const _ccK8c;
         const 0;
         const 30;
 },
 sat_scHtS_entry() //  [R1]
         { []
         }
     {offset
       ccK8n: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto ccK8r; else goto ccK8q;
       ccK8r: // global
           HpAlloc = 64;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccK8q: // global
           _scHsn::P64 = P64[R1 + 16];
           _scHso::P64 = P64[R1 + 24];
           _scHsp::P64 = P64[R1 + 32];
           _scHt1::P64 = P64[R1 + 40];
           _scHt6::P64 = P64[R1 + 48];
           _scHtc::P64 = P64[R1 + 56];
           I64[Hp - 56] = sat_scHtR_info;
           P64[Hp - 40] = _scHsn::P64;
           P64[Hp - 32] = _scHso::P64;
           P64[Hp - 24] = _scHsp::P64;
           P64[Hp - 16] = _scHt1::P64;
           P64[Hp - 8] = _scHt6::P64;
           P64[Hp] = _scHtc::P64;
           R3 = Hp - 56;
           R2 = lvl10_rcHpF_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHtS_info" {
     sat_scHtS_info:
         const sat_scHtS_entry;
         const 6;
         const 12884901903;
         const ScI2G_srt;
 },
 sat_scHtT_entry() //  [R1]
         { []
         }
     {offset
       ccK8s: // global
           _scHtT::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccK8t; else goto ccK8u;
       ccK8u: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto ccK8w; else goto ccK8v;
       ccK8w: // global
           HpAlloc = 64;
           goto ccK8t;
       ccK8t: // global
           R1 = _scHtT::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccK8v: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scHtT::P64;
           _scHsn::P64 = P64[_scHtT::P64 + 16];
           _scHso::P64 = P64[_scHtT::P64 + 24];
           _scHsp::P64 = P64[_scHtT::P64 + 32];
           _scHt1::P64 = P64[_scHtT::P64 + 40];
           _scHt6::P64 = P64[_scHtT::P64 + 48];
           _scHtc::P64 = P64[_scHtT::P64 + 56];
           I64[Hp - 56] = sat_scHtS_info;
           P64[Hp - 40] = _scHsn::P64;
           P64[Hp - 32] = _scHso::P64;
           P64[Hp - 24] = _scHsp::P64;
           P64[Hp - 16] = _scHt1::P64;
           P64[Hp - 8] = _scHt6::P64;
           P64[Hp] = _scHtc::P64;
           R3 = Hp - 56;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHtT_info" {
     sat_scHtT_info:
         const sat_scHtT_entry;
         const 6;
         const 12884901903;
         const ScI2G_srt;
 },
 sat_scHtX_entry() //  [R1]
         { []
         }
     {offset
       ccK8A: // global
           _scHtX::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto ccK8B; else goto ccK8C;
       ccK8C: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto ccK8E; else goto ccK8D;
       ccK8E: // global
           HpAlloc = 64;
           goto ccK8B;
       ccK8B: // global
           R1 = _scHtX::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccK8D: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scHtX::P64;
           _scHsn::P64 = P64[_scHtX::P64 + 16];
           _scHso::P64 = P64[_scHtX::P64 + 24];
           _scHsp::P64 = P64[_scHtX::P64 + 32];
           _scHsW::P64 = P64[_scHtX::P64 + 40];
           _scHt1::P64 = P64[_scHtX::P64 + 48];
           _scHt6::P64 = P64[_scHtX::P64 + 56];
           _scHtc::P64 = P64[_scHtX::P64 + 64];
           I64[Hp - 56] = sat_scHtT_info;
           P64[Hp - 40] = _scHsn::P64;
           P64[Hp - 32] = _scHso::P64;
           P64[Hp - 24] = _scHsp::P64;
           P64[Hp - 16] = _scHt1::P64;
           P64[Hp - 8] = _scHt6::P64;
           P64[Hp] = _scHtc::P64;
           I64[Sp - 24] = block_ccK8x_info;
           R4 = Hp - 56;
           R3 = _scHsW::P64;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHtX_info" {
     sat_scHtX_info:
         const sat_scHtX_entry;
         const 7;
         const 12884901903;
         const ScI2G_srt;
 },
 _ccK8x() //  [R1, R2]
         { []
         }
     {offset
       ccK8x: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccK8H; else goto ccK8G;
       ccK8H: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccK8G: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccK8x_info" {
     block_ccK8x_info:
         const _ccK8x;
         const 0;
         const 30;
 },
 sat_scHtY_entry() //  [R1]
         { []
         }
     {offset
       ccK8I: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto ccK8M; else goto ccK8L;
       ccK8M: // global
           HpAlloc = 72;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccK8L: // global
           _scHsn::P64 = P64[R1 + 16];
           _scHso::P64 = P64[R1 + 24];
           _scHsp::P64 = P64[R1 + 32];
           _scHsW::P64 = P64[R1 + 40];
           _scHt1::P64 = P64[R1 + 48];
           _scHt6::P64 = P64[R1 + 56];
           _scHtc::P64 = P64[R1 + 64];
           I64[Hp - 64] = sat_scHtX_info;
           P64[Hp - 48] = _scHsn::P64;
           P64[Hp - 40] = _scHso::P64;
           P64[Hp - 32] = _scHsp::P64;
           P64[Hp - 24] = _scHsW::P64;
           P64[Hp - 16] = _scHt1::P64;
           P64[Hp - 8] = _scHt6::P64;
           P64[Hp] = _scHtc::P64;
           R3 = Hp - 64;
           R2 = lvl9_rcHpE_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHtY_info" {
     sat_scHtY_info:
         const sat_scHtY_entry;
         const 7;
         const 12884901903;
         const ScI2G_srt;
 },
 sat_scHtZ_entry() //  [R1]
         { []
         }
     {offset
       ccK8N: // global
           _scHtZ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccK8O; else goto ccK8P;
       ccK8P: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto ccK8R; else goto ccK8Q;
       ccK8R: // global
           HpAlloc = 72;
           goto ccK8O;
       ccK8O: // global
           R1 = _scHtZ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccK8Q: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scHtZ::P64;
           _scHsn::P64 = P64[_scHtZ::P64 + 16];
           _scHso::P64 = P64[_scHtZ::P64 + 24];
           _scHsp::P64 = P64[_scHtZ::P64 + 32];
           _scHsW::P64 = P64[_scHtZ::P64 + 40];
           _scHt1::P64 = P64[_scHtZ::P64 + 48];
           _scHt6::P64 = P64[_scHtZ::P64 + 56];
           _scHtc::P64 = P64[_scHtZ::P64 + 64];
           I64[Hp - 64] = sat_scHtY_info;
           P64[Hp - 48] = _scHsn::P64;
           P64[Hp - 40] = _scHso::P64;
           P64[Hp - 32] = _scHsp::P64;
           P64[Hp - 24] = _scHsW::P64;
           P64[Hp - 16] = _scHt1::P64;
           P64[Hp - 8] = _scHt6::P64;
           P64[Hp] = _scHtc::P64;
           R3 = Hp - 64;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHtZ_info" {
     sat_scHtZ_info:
         const sat_scHtZ_entry;
         const 7;
         const 12884901903;
         const ScI2G_srt;
 },
 sat_scHu3_entry() //  [R1]
         { []
         }
     {offset
       ccK8V: // global
           _scHu3::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto ccK8W; else goto ccK8X;
       ccK8X: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto ccK8Z; else goto ccK8Y;
       ccK8Z: // global
           HpAlloc = 72;
           goto ccK8W;
       ccK8W: // global
           R1 = _scHu3::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccK8Y: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scHu3::P64;
           _scHsn::P64 = P64[_scHu3::P64 + 16];
           _scHso::P64 = P64[_scHu3::P64 + 24];
           _scHsp::P64 = P64[_scHu3::P64 + 32];
           _scHsR::P64 = P64[_scHu3::P64 + 40];
           _scHsW::P64 = P64[_scHu3::P64 + 48];
           _scHt1::P64 = P64[_scHu3::P64 + 56];
           _scHt6::P64 = P64[_scHu3::P64 + 64];
           _scHtc::P64 = P64[_scHu3::P64 + 72];
           I64[Hp - 64] = sat_scHtZ_info;
           P64[Hp - 48] = _scHsn::P64;
           P64[Hp - 40] = _scHso::P64;
           P64[Hp - 32] = _scHsp::P64;
           P64[Hp - 24] = _scHsW::P64;
           P64[Hp - 16] = _scHt1::P64;
           P64[Hp - 8] = _scHt6::P64;
           P64[Hp] = _scHtc::P64;
           I64[Sp - 24] = block_ccK8S_info;
           R4 = Hp - 64;
           R3 = _scHsR::P64;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHu3_info" {
     sat_scHu3_info:
         const sat_scHu3_entry;
         const 8;
         const 12884901903;
         const ScI2G_srt;
 },
 _ccK8S() //  [R1, R2]
         { []
         }
     {offset
       ccK8S: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccK92; else goto ccK91;
       ccK92: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccK91: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccK8S_info" {
     block_ccK8S_info:
         const _ccK8S;
         const 0;
         const 30;
 },
 sat_scHu4_entry() //  [R1]
         { []
         }
     {offset
       ccK93: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto ccK97; else goto ccK96;
       ccK97: // global
           HpAlloc = 80;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccK96: // global
           _scHsn::P64 = P64[R1 + 16];
           _scHso::P64 = P64[R1 + 24];
           _scHsp::P64 = P64[R1 + 32];
           _scHsR::P64 = P64[R1 + 40];
           _scHsW::P64 = P64[R1 + 48];
           _scHt1::P64 = P64[R1 + 56];
           _scHt6::P64 = P64[R1 + 64];
           _scHtc::P64 = P64[R1 + 72];
           I64[Hp - 72] = sat_scHu3_info;
           P64[Hp - 56] = _scHsn::P64;
           P64[Hp - 48] = _scHso::P64;
           P64[Hp - 40] = _scHsp::P64;
           P64[Hp - 32] = _scHsR::P64;
           P64[Hp - 24] = _scHsW::P64;
           P64[Hp - 16] = _scHt1::P64;
           P64[Hp - 8] = _scHt6::P64;
           P64[Hp] = _scHtc::P64;
           R3 = Hp - 72;
           R2 = lvl8_rcHpD_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHu4_info" {
     sat_scHu4_info:
         const sat_scHu4_entry;
         const 8;
         const 12884901903;
         const ScI2G_srt;
 },
 sat_scHu5_entry() //  [R1]
         { []
         }
     {offset
       ccK98: // global
           _scHu5::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccK99; else goto ccK9a;
       ccK9a: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto ccK9c; else goto ccK9b;
       ccK9c: // global
           HpAlloc = 80;
           goto ccK99;
       ccK99: // global
           R1 = _scHu5::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccK9b: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scHu5::P64;
           _scHsn::P64 = P64[_scHu5::P64 + 16];
           _scHso::P64 = P64[_scHu5::P64 + 24];
           _scHsp::P64 = P64[_scHu5::P64 + 32];
           _scHsR::P64 = P64[_scHu5::P64 + 40];
           _scHsW::P64 = P64[_scHu5::P64 + 48];
           _scHt1::P64 = P64[_scHu5::P64 + 56];
           _scHt6::P64 = P64[_scHu5::P64 + 64];
           _scHtc::P64 = P64[_scHu5::P64 + 72];
           I64[Hp - 72] = sat_scHu4_info;
           P64[Hp - 56] = _scHsn::P64;
           P64[Hp - 48] = _scHso::P64;
           P64[Hp - 40] = _scHsp::P64;
           P64[Hp - 32] = _scHsR::P64;
           P64[Hp - 24] = _scHsW::P64;
           P64[Hp - 16] = _scHt1::P64;
           P64[Hp - 8] = _scHt6::P64;
           P64[Hp] = _scHtc::P64;
           R3 = Hp - 72;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHu5_info" {
     sat_scHu5_info:
         const sat_scHu5_entry;
         const 8;
         const 12884901903;
         const ScI2G_srt;
 },
 sat_scHu9_entry() //  [R1]
         { []
         }
     {offset
       ccK9g: // global
           _scHu9::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto ccK9h; else goto ccK9i;
       ccK9i: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto ccK9k; else goto ccK9j;
       ccK9k: // global
           HpAlloc = 80;
           goto ccK9h;
       ccK9h: // global
           R1 = _scHu9::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccK9j: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scHu9::P64;
           _scHsn::P64 = P64[_scHu9::P64 + 16];
           _scHso::P64 = P64[_scHu9::P64 + 24];
           _scHsp::P64 = P64[_scHu9::P64 + 32];
           _scHsM::P64 = P64[_scHu9::P64 + 40];
           _scHsR::P64 = P64[_scHu9::P64 + 48];
           _scHsW::P64 = P64[_scHu9::P64 + 56];
           _scHt1::P64 = P64[_scHu9::P64 + 64];
           _scHt6::P64 = P64[_scHu9::P64 + 72];
           _scHtc::P64 = P64[_scHu9::P64 + 80];
           I64[Hp - 72] = sat_scHu5_info;
           P64[Hp - 56] = _scHsn::P64;
           P64[Hp - 48] = _scHso::P64;
           P64[Hp - 40] = _scHsp::P64;
           P64[Hp - 32] = _scHsR::P64;
           P64[Hp - 24] = _scHsW::P64;
           P64[Hp - 16] = _scHt1::P64;
           P64[Hp - 8] = _scHt6::P64;
           P64[Hp] = _scHtc::P64;
           I64[Sp - 24] = block_ccK9d_info;
           R4 = Hp - 72;
           R3 = _scHsM::P64;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHu9_info" {
     sat_scHu9_info:
         const sat_scHu9_entry;
         const 9;
         const 12884901903;
         const ScI2G_srt;
 },
 _ccK9d() //  [R1, R2]
         { []
         }
     {offset
       ccK9d: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccK9n; else goto ccK9m;
       ccK9n: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccK9m: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccK9d_info" {
     block_ccK9d_info:
         const _ccK9d;
         const 0;
         const 30;
 },
 sat_scHua_entry() //  [R1]
         { []
         }
     {offset
       ccK9o: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto ccK9s; else goto ccK9r;
       ccK9s: // global
           HpAlloc = 88;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccK9r: // global
           _scHsn::P64 = P64[R1 + 16];
           _scHso::P64 = P64[R1 + 24];
           _scHsp::P64 = P64[R1 + 32];
           _scHsM::P64 = P64[R1 + 40];
           _scHsR::P64 = P64[R1 + 48];
           _scHsW::P64 = P64[R1 + 56];
           _scHt1::P64 = P64[R1 + 64];
           _scHt6::P64 = P64[R1 + 72];
           _scHtc::P64 = P64[R1 + 80];
           I64[Hp - 80] = sat_scHu9_info;
           P64[Hp - 64] = _scHsn::P64;
           P64[Hp - 56] = _scHso::P64;
           P64[Hp - 48] = _scHsp::P64;
           P64[Hp - 40] = _scHsM::P64;
           P64[Hp - 32] = _scHsR::P64;
           P64[Hp - 24] = _scHsW::P64;
           P64[Hp - 16] = _scHt1::P64;
           P64[Hp - 8] = _scHt6::P64;
           P64[Hp] = _scHtc::P64;
           R3 = Hp - 80;
           R2 = lvl7_rcHpC_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHua_info" {
     sat_scHua_info:
         const sat_scHua_entry;
         const 9;
         const 12884901903;
         const ScI2G_srt;
 },
 sat_scHub_entry() //  [R1]
         { []
         }
     {offset
       ccK9t: // global
           _scHub::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccK9u; else goto ccK9v;
       ccK9v: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto ccK9x; else goto ccK9w;
       ccK9x: // global
           HpAlloc = 88;
           goto ccK9u;
       ccK9u: // global
           R1 = _scHub::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccK9w: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scHub::P64;
           _scHsn::P64 = P64[_scHub::P64 + 16];
           _scHso::P64 = P64[_scHub::P64 + 24];
           _scHsp::P64 = P64[_scHub::P64 + 32];
           _scHsM::P64 = P64[_scHub::P64 + 40];
           _scHsR::P64 = P64[_scHub::P64 + 48];
           _scHsW::P64 = P64[_scHub::P64 + 56];
           _scHt1::P64 = P64[_scHub::P64 + 64];
           _scHt6::P64 = P64[_scHub::P64 + 72];
           _scHtc::P64 = P64[_scHub::P64 + 80];
           I64[Hp - 80] = sat_scHua_info;
           P64[Hp - 64] = _scHsn::P64;
           P64[Hp - 56] = _scHso::P64;
           P64[Hp - 48] = _scHsp::P64;
           P64[Hp - 40] = _scHsM::P64;
           P64[Hp - 32] = _scHsR::P64;
           P64[Hp - 24] = _scHsW::P64;
           P64[Hp - 16] = _scHt1::P64;
           P64[Hp - 8] = _scHt6::P64;
           P64[Hp] = _scHtc::P64;
           R3 = Hp - 80;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHub_info" {
     sat_scHub_info:
         const sat_scHub_entry;
         const 9;
         const 12884901903;
         const ScI2G_srt;
 },
 sat_scHuf_entry() //  [R1]
         { []
         }
     {offset
       ccK9B: // global
           _scHuf::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto ccK9C; else goto ccK9D;
       ccK9D: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto ccK9F; else goto ccK9E;
       ccK9F: // global
           HpAlloc = 88;
           goto ccK9C;
       ccK9C: // global
           R1 = _scHuf::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccK9E: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scHuf::P64;
           _scHsn::P64 = P64[_scHuf::P64 + 16];
           _scHso::P64 = P64[_scHuf::P64 + 24];
           _scHsp::P64 = P64[_scHuf::P64 + 32];
           _scHsH::P64 = P64[_scHuf::P64 + 40];
           _scHsM::P64 = P64[_scHuf::P64 + 48];
           _scHsR::P64 = P64[_scHuf::P64 + 56];
           _scHsW::P64 = P64[_scHuf::P64 + 64];
           _scHt1::P64 = P64[_scHuf::P64 + 72];
           _scHt6::P64 = P64[_scHuf::P64 + 80];
           _scHtc::P64 = P64[_scHuf::P64 + 88];
           I64[Hp - 80] = sat_scHub_info;
           P64[Hp - 64] = _scHsn::P64;
           P64[Hp - 56] = _scHso::P64;
           P64[Hp - 48] = _scHsp::P64;
           P64[Hp - 40] = _scHsM::P64;
           P64[Hp - 32] = _scHsR::P64;
           P64[Hp - 24] = _scHsW::P64;
           P64[Hp - 16] = _scHt1::P64;
           P64[Hp - 8] = _scHt6::P64;
           P64[Hp] = _scHtc::P64;
           I64[Sp - 24] = block_ccK9y_info;
           R4 = Hp - 80;
           R3 = _scHsH::P64;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHuf_info" {
     sat_scHuf_info:
         const sat_scHuf_entry;
         const 10;
         const 12884901903;
         const ScI2G_srt;
 },
 _ccK9y() //  [R1, R2]
         { []
         }
     {offset
       ccK9y: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccK9I; else goto ccK9H;
       ccK9I: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccK9H: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccK9y_info" {
     block_ccK9y_info:
         const _ccK9y;
         const 0;
         const 30;
 },
 sat_scHug_entry() //  [R1]
         { []
         }
     {offset
       ccK9J: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto ccK9N; else goto ccK9M;
       ccK9N: // global
           HpAlloc = 96;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccK9M: // global
           _scHsn::P64 = P64[R1 + 16];
           _scHso::P64 = P64[R1 + 24];
           _scHsp::P64 = P64[R1 + 32];
           _scHsH::P64 = P64[R1 + 40];
           _scHsM::P64 = P64[R1 + 48];
           _scHsR::P64 = P64[R1 + 56];
           _scHsW::P64 = P64[R1 + 64];
           _scHt1::P64 = P64[R1 + 72];
           _scHt6::P64 = P64[R1 + 80];
           _scHtc::P64 = P64[R1 + 88];
           I64[Hp - 88] = sat_scHuf_info;
           P64[Hp - 72] = _scHsn::P64;
           P64[Hp - 64] = _scHso::P64;
           P64[Hp - 56] = _scHsp::P64;
           P64[Hp - 48] = _scHsH::P64;
           P64[Hp - 40] = _scHsM::P64;
           P64[Hp - 32] = _scHsR::P64;
           P64[Hp - 24] = _scHsW::P64;
           P64[Hp - 16] = _scHt1::P64;
           P64[Hp - 8] = _scHt6::P64;
           P64[Hp] = _scHtc::P64;
           R3 = Hp - 88;
           R2 = lvl6_rcHpB_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHug_info" {
     sat_scHug_info:
         const sat_scHug_entry;
         const 10;
         const 12884901903;
         const ScI2G_srt;
 },
 sat_scHuh_entry() //  [R1]
         { []
         }
     {offset
       ccK9O: // global
           _scHuh::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccK9P; else goto ccK9Q;
       ccK9Q: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto ccK9S; else goto ccK9R;
       ccK9S: // global
           HpAlloc = 96;
           goto ccK9P;
       ccK9P: // global
           R1 = _scHuh::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccK9R: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scHuh::P64;
           _scHsn::P64 = P64[_scHuh::P64 + 16];
           _scHso::P64 = P64[_scHuh::P64 + 24];
           _scHsp::P64 = P64[_scHuh::P64 + 32];
           _scHsH::P64 = P64[_scHuh::P64 + 40];
           _scHsM::P64 = P64[_scHuh::P64 + 48];
           _scHsR::P64 = P64[_scHuh::P64 + 56];
           _scHsW::P64 = P64[_scHuh::P64 + 64];
           _scHt1::P64 = P64[_scHuh::P64 + 72];
           _scHt6::P64 = P64[_scHuh::P64 + 80];
           _scHtc::P64 = P64[_scHuh::P64 + 88];
           I64[Hp - 88] = sat_scHug_info;
           P64[Hp - 72] = _scHsn::P64;
           P64[Hp - 64] = _scHso::P64;
           P64[Hp - 56] = _scHsp::P64;
           P64[Hp - 48] = _scHsH::P64;
           P64[Hp - 40] = _scHsM::P64;
           P64[Hp - 32] = _scHsR::P64;
           P64[Hp - 24] = _scHsW::P64;
           P64[Hp - 16] = _scHt1::P64;
           P64[Hp - 8] = _scHt6::P64;
           P64[Hp] = _scHtc::P64;
           R3 = Hp - 88;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHuh_info" {
     sat_scHuh_info:
         const sat_scHuh_entry;
         const 10;
         const 12884901903;
         const ScI2G_srt;
 },
 sat_scHul_entry() //  [R1]
         { []
         }
     {offset
       ccK9W: // global
           _scHul::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto ccK9X; else goto ccK9Y;
       ccK9Y: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto ccKa0; else goto ccK9Z;
       ccKa0: // global
           HpAlloc = 96;
           goto ccK9X;
       ccK9X: // global
           R1 = _scHul::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccK9Z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scHul::P64;
           _scHsn::P64 = P64[_scHul::P64 + 16];
           _scHso::P64 = P64[_scHul::P64 + 24];
           _scHsp::P64 = P64[_scHul::P64 + 32];
           _scHsC::P64 = P64[_scHul::P64 + 40];
           _scHsH::P64 = P64[_scHul::P64 + 48];
           _scHsM::P64 = P64[_scHul::P64 + 56];
           _scHsR::P64 = P64[_scHul::P64 + 64];
           _scHsW::P64 = P64[_scHul::P64 + 72];
           _scHt1::P64 = P64[_scHul::P64 + 80];
           _scHt6::P64 = P64[_scHul::P64 + 88];
           _scHtc::P64 = P64[_scHul::P64 + 96];
           I64[Hp - 88] = sat_scHuh_info;
           P64[Hp - 72] = _scHsn::P64;
           P64[Hp - 64] = _scHso::P64;
           P64[Hp - 56] = _scHsp::P64;
           P64[Hp - 48] = _scHsH::P64;
           P64[Hp - 40] = _scHsM::P64;
           P64[Hp - 32] = _scHsR::P64;
           P64[Hp - 24] = _scHsW::P64;
           P64[Hp - 16] = _scHt1::P64;
           P64[Hp - 8] = _scHt6::P64;
           P64[Hp] = _scHtc::P64;
           I64[Sp - 24] = block_ccK9T_info;
           R4 = Hp - 88;
           R3 = _scHsC::P64;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHul_info" {
     sat_scHul_info:
         const sat_scHul_entry;
         const 11;
         const 12884901903;
         const ScI2G_srt;
 },
 _ccK9T() //  [R1, R2]
         { []
         }
     {offset
       ccK9T: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccKa3; else goto ccKa2;
       ccKa3: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccKa2: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccK9T_info" {
     block_ccK9T_info:
         const _ccK9T;
         const 0;
         const 30;
 },
 sat_scHum_entry() //  [R1]
         { []
         }
     {offset
       ccKa4: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto ccKa8; else goto ccKa7;
       ccKa8: // global
           HpAlloc = 104;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKa7: // global
           _scHsn::P64 = P64[R1 + 16];
           _scHso::P64 = P64[R1 + 24];
           _scHsp::P64 = P64[R1 + 32];
           _scHsC::P64 = P64[R1 + 40];
           _scHsH::P64 = P64[R1 + 48];
           _scHsM::P64 = P64[R1 + 56];
           _scHsR::P64 = P64[R1 + 64];
           _scHsW::P64 = P64[R1 + 72];
           _scHt1::P64 = P64[R1 + 80];
           _scHt6::P64 = P64[R1 + 88];
           _scHtc::P64 = P64[R1 + 96];
           I64[Hp - 96] = sat_scHul_info;
           P64[Hp - 80] = _scHsn::P64;
           P64[Hp - 72] = _scHso::P64;
           P64[Hp - 64] = _scHsp::P64;
           P64[Hp - 56] = _scHsC::P64;
           P64[Hp - 48] = _scHsH::P64;
           P64[Hp - 40] = _scHsM::P64;
           P64[Hp - 32] = _scHsR::P64;
           P64[Hp - 24] = _scHsW::P64;
           P64[Hp - 16] = _scHt1::P64;
           P64[Hp - 8] = _scHt6::P64;
           P64[Hp] = _scHtc::P64;
           R3 = Hp - 96;
           R2 = lvl5_rcHpA_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHum_info" {
     sat_scHum_info:
         const sat_scHum_entry;
         const 11;
         const 12884901903;
         const ScI2G_srt;
 },
 sat_scHun_entry() //  [R1]
         { []
         }
     {offset
       ccKa9: // global
           _scHun::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccKaa; else goto ccKab;
       ccKab: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto ccKad; else goto ccKac;
       ccKad: // global
           HpAlloc = 104;
           goto ccKaa;
       ccKaa: // global
           R1 = _scHun::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKac: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scHun::P64;
           _scHsn::P64 = P64[_scHun::P64 + 16];
           _scHso::P64 = P64[_scHun::P64 + 24];
           _scHsp::P64 = P64[_scHun::P64 + 32];
           _scHsC::P64 = P64[_scHun::P64 + 40];
           _scHsH::P64 = P64[_scHun::P64 + 48];
           _scHsM::P64 = P64[_scHun::P64 + 56];
           _scHsR::P64 = P64[_scHun::P64 + 64];
           _scHsW::P64 = P64[_scHun::P64 + 72];
           _scHt1::P64 = P64[_scHun::P64 + 80];
           _scHt6::P64 = P64[_scHun::P64 + 88];
           _scHtc::P64 = P64[_scHun::P64 + 96];
           I64[Hp - 96] = sat_scHum_info;
           P64[Hp - 80] = _scHsn::P64;
           P64[Hp - 72] = _scHso::P64;
           P64[Hp - 64] = _scHsp::P64;
           P64[Hp - 56] = _scHsC::P64;
           P64[Hp - 48] = _scHsH::P64;
           P64[Hp - 40] = _scHsM::P64;
           P64[Hp - 32] = _scHsR::P64;
           P64[Hp - 24] = _scHsW::P64;
           P64[Hp - 16] = _scHt1::P64;
           P64[Hp - 8] = _scHt6::P64;
           P64[Hp] = _scHtc::P64;
           R3 = Hp - 96;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHun_info" {
     sat_scHun_info:
         const sat_scHun_entry;
         const 11;
         const 12884901903;
         const ScI2G_srt;
 },
 sat_scHur_entry() //  [R1]
         { []
         }
     {offset
       ccKah: // global
           _scHur::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto ccKai; else goto ccKaj;
       ccKaj: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto ccKal; else goto ccKak;
       ccKal: // global
           HpAlloc = 104;
           goto ccKai;
       ccKai: // global
           R1 = _scHur::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKak: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scHur::P64;
           _scHsn::P64 = P64[_scHur::P64 + 16];
           _scHso::P64 = P64[_scHur::P64 + 24];
           _scHsp::P64 = P64[_scHur::P64 + 32];
           _scHsx::P64 = P64[_scHur::P64 + 40];
           _scHsC::P64 = P64[_scHur::P64 + 48];
           _scHsH::P64 = P64[_scHur::P64 + 56];
           _scHsM::P64 = P64[_scHur::P64 + 64];
           _scHsR::P64 = P64[_scHur::P64 + 72];
           _scHsW::P64 = P64[_scHur::P64 + 80];
           _scHt1::P64 = P64[_scHur::P64 + 88];
           _scHt6::P64 = P64[_scHur::P64 + 96];
           _scHtc::P64 = P64[_scHur::P64 + 104];
           I64[Hp - 96] = sat_scHun_info;
           P64[Hp - 80] = _scHsn::P64;
           P64[Hp - 72] = _scHso::P64;
           P64[Hp - 64] = _scHsp::P64;
           P64[Hp - 56] = _scHsC::P64;
           P64[Hp - 48] = _scHsH::P64;
           P64[Hp - 40] = _scHsM::P64;
           P64[Hp - 32] = _scHsR::P64;
           P64[Hp - 24] = _scHsW::P64;
           P64[Hp - 16] = _scHt1::P64;
           P64[Hp - 8] = _scHt6::P64;
           P64[Hp] = _scHtc::P64;
           I64[Sp - 24] = block_ccKae_info;
           R4 = Hp - 96;
           R3 = _scHsx::P64;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHur_info" {
     sat_scHur_info:
         const sat_scHur_entry;
         const 12;
         const 12884901903;
         const ScI2G_srt;
 },
 _ccKae() //  [R1, R2]
         { []
         }
     {offset
       ccKae: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccKao; else goto ccKan;
       ccKao: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccKan: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccKae_info" {
     block_ccKae_info:
         const _ccKae;
         const 0;
         const 30;
 },
 sat_scHus_entry() //  [R1]
         { []
         }
     {offset
       ccKap: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto ccKat; else goto ccKas;
       ccKat: // global
           HpAlloc = 112;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKas: // global
           _scHsn::P64 = P64[R1 + 16];
           _scHso::P64 = P64[R1 + 24];
           _scHsp::P64 = P64[R1 + 32];
           _scHsx::P64 = P64[R1 + 40];
           _scHsC::P64 = P64[R1 + 48];
           _scHsH::P64 = P64[R1 + 56];
           _scHsM::P64 = P64[R1 + 64];
           _scHsR::P64 = P64[R1 + 72];
           _scHsW::P64 = P64[R1 + 80];
           _scHt1::P64 = P64[R1 + 88];
           _scHt6::P64 = P64[R1 + 96];
           _scHtc::P64 = P64[R1 + 104];
           I64[Hp - 104] = sat_scHur_info;
           P64[Hp - 88] = _scHsn::P64;
           P64[Hp - 80] = _scHso::P64;
           P64[Hp - 72] = _scHsp::P64;
           P64[Hp - 64] = _scHsx::P64;
           P64[Hp - 56] = _scHsC::P64;
           P64[Hp - 48] = _scHsH::P64;
           P64[Hp - 40] = _scHsM::P64;
           P64[Hp - 32] = _scHsR::P64;
           P64[Hp - 24] = _scHsW::P64;
           P64[Hp - 16] = _scHt1::P64;
           P64[Hp - 8] = _scHt6::P64;
           P64[Hp] = _scHtc::P64;
           R3 = Hp - 104;
           R2 = lvl4_rcHpz_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHus_info" {
     sat_scHus_info:
         const sat_scHus_entry;
         const 12;
         const 12884901903;
         const ScI2G_srt;
 },
 sat_scHut_entry() //  [R1]
         { []
         }
     {offset
       ccKau: // global
           _scHut::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccKav; else goto ccKaw;
       ccKaw: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto ccKay; else goto ccKax;
       ccKay: // global
           HpAlloc = 112;
           goto ccKav;
       ccKav: // global
           R1 = _scHut::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKax: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scHut::P64;
           _scHsn::P64 = P64[_scHut::P64 + 16];
           _scHso::P64 = P64[_scHut::P64 + 24];
           _scHsp::P64 = P64[_scHut::P64 + 32];
           _scHsx::P64 = P64[_scHut::P64 + 40];
           _scHsC::P64 = P64[_scHut::P64 + 48];
           _scHsH::P64 = P64[_scHut::P64 + 56];
           _scHsM::P64 = P64[_scHut::P64 + 64];
           _scHsR::P64 = P64[_scHut::P64 + 72];
           _scHsW::P64 = P64[_scHut::P64 + 80];
           _scHt1::P64 = P64[_scHut::P64 + 88];
           _scHt6::P64 = P64[_scHut::P64 + 96];
           _scHtc::P64 = P64[_scHut::P64 + 104];
           I64[Hp - 104] = sat_scHus_info;
           P64[Hp - 88] = _scHsn::P64;
           P64[Hp - 80] = _scHso::P64;
           P64[Hp - 72] = _scHsp::P64;
           P64[Hp - 64] = _scHsx::P64;
           P64[Hp - 56] = _scHsC::P64;
           P64[Hp - 48] = _scHsH::P64;
           P64[Hp - 40] = _scHsM::P64;
           P64[Hp - 32] = _scHsR::P64;
           P64[Hp - 24] = _scHsW::P64;
           P64[Hp - 16] = _scHt1::P64;
           P64[Hp - 8] = _scHt6::P64;
           P64[Hp] = _scHtc::P64;
           R3 = Hp - 104;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHut_info" {
     sat_scHut_info:
         const sat_scHut_entry;
         const 12;
         const 12884901903;
         const ScI2G_srt;
 },
 sat_scHux_entry() //  [R1]
         { []
         }
     {offset
       ccKaC: // global
           _scHux::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto ccKaD; else goto ccKaE;
       ccKaE: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto ccKaG; else goto ccKaF;
       ccKaG: // global
           HpAlloc = 112;
           goto ccKaD;
       ccKaD: // global
           R1 = _scHux::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKaF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scHux::P64;
           _scHsn::P64 = P64[_scHux::P64 + 16];
           _scHso::P64 = P64[_scHux::P64 + 24];
           _scHsp::P64 = P64[_scHux::P64 + 32];
           _scHss::P64 = P64[_scHux::P64 + 40];
           _scHsx::P64 = P64[_scHux::P64 + 48];
           _scHsC::P64 = P64[_scHux::P64 + 56];
           _scHsH::P64 = P64[_scHux::P64 + 64];
           _scHsM::P64 = P64[_scHux::P64 + 72];
           _scHsR::P64 = P64[_scHux::P64 + 80];
           _scHsW::P64 = P64[_scHux::P64 + 88];
           _scHt1::P64 = P64[_scHux::P64 + 96];
           _scHt6::P64 = P64[_scHux::P64 + 104];
           _scHtc::P64 = P64[_scHux::P64 + 112];
           I64[Hp - 104] = sat_scHut_info;
           P64[Hp - 88] = _scHsn::P64;
           P64[Hp - 80] = _scHso::P64;
           P64[Hp - 72] = _scHsp::P64;
           P64[Hp - 64] = _scHsx::P64;
           P64[Hp - 56] = _scHsC::P64;
           P64[Hp - 48] = _scHsH::P64;
           P64[Hp - 40] = _scHsM::P64;
           P64[Hp - 32] = _scHsR::P64;
           P64[Hp - 24] = _scHsW::P64;
           P64[Hp - 16] = _scHt1::P64;
           P64[Hp - 8] = _scHt6::P64;
           P64[Hp] = _scHtc::P64;
           I64[Sp - 24] = block_ccKaz_info;
           R4 = Hp - 104;
           R3 = _scHss::P64;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHux_info" {
     sat_scHux_info:
         const sat_scHux_entry;
         const 13;
         const 12884901903;
         const ScI2G_srt;
 },
 _ccKaz() //  [R1, R2]
         { []
         }
     {offset
       ccKaz: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccKaJ; else goto ccKaI;
       ccKaJ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccKaI: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccKaz_info" {
     block_ccKaz_info:
         const _ccKaz;
         const 0;
         const 30;
 },
 sat_scHuy_entry() //  [R1]
         { []
         }
     {offset
       ccKaK: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto ccKaO; else goto ccKaN;
       ccKaO: // global
           HpAlloc = 120;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKaN: // global
           _scHsn::P64 = P64[R1 + 16];
           _scHso::P64 = P64[R1 + 24];
           _scHsp::P64 = P64[R1 + 32];
           _scHss::P64 = P64[R1 + 40];
           _scHsx::P64 = P64[R1 + 48];
           _scHsC::P64 = P64[R1 + 56];
           _scHsH::P64 = P64[R1 + 64];
           _scHsM::P64 = P64[R1 + 72];
           _scHsR::P64 = P64[R1 + 80];
           _scHsW::P64 = P64[R1 + 88];
           _scHt1::P64 = P64[R1 + 96];
           _scHt6::P64 = P64[R1 + 104];
           _scHtc::P64 = P64[R1 + 112];
           I64[Hp - 112] = sat_scHux_info;
           P64[Hp - 96] = _scHsn::P64;
           P64[Hp - 88] = _scHso::P64;
           P64[Hp - 80] = _scHsp::P64;
           P64[Hp - 72] = _scHss::P64;
           P64[Hp - 64] = _scHsx::P64;
           P64[Hp - 56] = _scHsC::P64;
           P64[Hp - 48] = _scHsH::P64;
           P64[Hp - 40] = _scHsM::P64;
           P64[Hp - 32] = _scHsR::P64;
           P64[Hp - 24] = _scHsW::P64;
           P64[Hp - 16] = _scHt1::P64;
           P64[Hp - 8] = _scHt6::P64;
           P64[Hp] = _scHtc::P64;
           R3 = Hp - 112;
           R2 = lvl3_rcHpy_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHuy_info" {
     sat_scHuy_info:
         const sat_scHuy_entry;
         const 13;
         const 12884901903;
         const ScI2G_srt;
 },
 sat_scHuz_entry() //  [R1]
         { []
         }
     {offset
       ccKaP: // global
           _scHuz::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccKaQ; else goto ccKaR;
       ccKaR: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto ccKaT; else goto ccKaS;
       ccKaT: // global
           HpAlloc = 120;
           goto ccKaQ;
       ccKaQ: // global
           R1 = _scHuz::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKaS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scHuz::P64;
           _scHsn::P64 = P64[_scHuz::P64 + 16];
           _scHso::P64 = P64[_scHuz::P64 + 24];
           _scHsp::P64 = P64[_scHuz::P64 + 32];
           _scHss::P64 = P64[_scHuz::P64 + 40];
           _scHsx::P64 = P64[_scHuz::P64 + 48];
           _scHsC::P64 = P64[_scHuz::P64 + 56];
           _scHsH::P64 = P64[_scHuz::P64 + 64];
           _scHsM::P64 = P64[_scHuz::P64 + 72];
           _scHsR::P64 = P64[_scHuz::P64 + 80];
           _scHsW::P64 = P64[_scHuz::P64 + 88];
           _scHt1::P64 = P64[_scHuz::P64 + 96];
           _scHt6::P64 = P64[_scHuz::P64 + 104];
           _scHtc::P64 = P64[_scHuz::P64 + 112];
           I64[Hp - 112] = sat_scHuy_info;
           P64[Hp - 96] = _scHsn::P64;
           P64[Hp - 88] = _scHso::P64;
           P64[Hp - 80] = _scHsp::P64;
           P64[Hp - 72] = _scHss::P64;
           P64[Hp - 64] = _scHsx::P64;
           P64[Hp - 56] = _scHsC::P64;
           P64[Hp - 48] = _scHsH::P64;
           P64[Hp - 40] = _scHsM::P64;
           P64[Hp - 32] = _scHsR::P64;
           P64[Hp - 24] = _scHsW::P64;
           P64[Hp - 16] = _scHt1::P64;
           P64[Hp - 8] = _scHt6::P64;
           P64[Hp] = _scHtc::P64;
           R3 = Hp - 112;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHuz_info" {
     sat_scHuz_info:
         const sat_scHuz_entry;
         const 13;
         const 12884901903;
         const ScI2G_srt;
 },
 sat_scHuD_entry() //  [R1]
         { []
         }
     {offset
       ccKaU: // global
           if ((Sp + -128) < SpLim) (likely: False) goto ccKb1; else goto ccKb2;
       ccKb1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKb2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 128] = block_ccK3Z_info;
           _scHsn::P64 = P64[R1 + 24];
           _scHso::P64 = P64[R1 + 32];
           _scHsp::P64 = P64[R1 + 40];
           _scHss::P64 = P64[R1 + 48];
           _scHsx::P64 = P64[R1 + 56];
           _scHsC::P64 = P64[R1 + 64];
           _scHsH::P64 = P64[R1 + 72];
           _scHsM::P64 = P64[R1 + 80];
           _scHsR::P64 = P64[R1 + 88];
           _scHsW::P64 = P64[R1 + 96];
           _scHt1::P64 = P64[R1 + 104];
           _scHt6::P64 = P64[R1 + 112];
           _scHtc::P64 = P64[R1 + 120];
           R1 = P64[R1 + 16];
           P64[Sp - 120] = _scHsn::P64;
           P64[Sp - 112] = _scHso::P64;
           P64[Sp - 104] = _scHsp::P64;
           P64[Sp - 96] = _scHss::P64;
           P64[Sp - 88] = _scHsx::P64;
           P64[Sp - 80] = _scHsC::P64;
           P64[Sp - 72] = _scHsH::P64;
           P64[Sp - 64] = _scHsM::P64;
           P64[Sp - 56] = _scHsR::P64;
           P64[Sp - 48] = _scHsW::P64;
           P64[Sp - 40] = _scHt1::P64;
           P64[Sp - 32] = _scHt6::P64;
           P64[Sp - 24] = _scHtc::P64;
           Sp = Sp - 128;
           if (R1 & 7 != 0) goto ucKb9; else goto ccK40;
       ucKb9: // global
           call _ccK3Z(R1) args: 0, res: 0, upd: 0;
       ccK40: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHuD_info" {
     sat_scHuD_info:
         const sat_scHuD_entry;
         const 14;
         const 12884901903;
         const ScI2G_srt;
 },
 _ccK3Z() //  [R1]
         { []
         }
     {offset
       ccK3Z: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto ccKb5; else goto ccKb4;
       ccKb5: // global
           HpAlloc = 120;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       ccKb4: // global
           _scHth::I64 = I64[R1 + 7];
           I64[Hp - 112] = sat_scHuz_info;
           P64[Hp - 96] = P64[Sp + 8];
           P64[Hp - 88] = P64[Sp + 16];
           P64[Hp - 80] = P64[Sp + 24];
           P64[Hp - 72] = P64[Sp + 32];
           P64[Hp - 64] = P64[Sp + 40];
           P64[Hp - 56] = P64[Sp + 48];
           P64[Hp - 48] = P64[Sp + 56];
           P64[Hp - 40] = P64[Sp + 64];
           P64[Hp - 32] = P64[Sp + 72];
           P64[Hp - 24] = P64[Sp + 80];
           P64[Hp - 16] = P64[Sp + 88];
           P64[Hp - 8] = P64[Sp + 96];
           P64[Hp] = P64[Sp + 104];
           I64[Sp + 104] = block_ccKaY_info;
           R3 = Hp - 112;
           R2 = _scHth::I64;
           Sp = Sp + 104;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccK3Z_info" {
     block_ccK3Z_info:
         const _ccK3Z;
         const 13;
         const 12884901918;
         const ScI2G_srt;
 },
 _ccKaY() //  [R1, R2]
         { []
         }
     {offset
       ccKaY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccKb8; else goto ccKb7;
       ccKb8: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccKb7: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccKaY_info" {
     block_ccKaY_info:
         const _ccKaY;
         const 0;
         const 30;
 },
 sat_scHuE_entry() //  [R1]
         { []
         }
     {offset
       ccKba: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto ccKbe; else goto ccKbd;
       ccKbe: // global
           HpAlloc = 128;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKbd: // global
           _scHsd::P64 = P64[R1 + 16];
           _scHsn::P64 = P64[R1 + 24];
           _scHso::P64 = P64[R1 + 32];
           _scHsp::P64 = P64[R1 + 40];
           _scHss::P64 = P64[R1 + 48];
           _scHsx::P64 = P64[R1 + 56];
           _scHsC::P64 = P64[R1 + 64];
           _scHsH::P64 = P64[R1 + 72];
           _scHsM::P64 = P64[R1 + 80];
           _scHsR::P64 = P64[R1 + 88];
           _scHsW::P64 = P64[R1 + 96];
           _scHt1::P64 = P64[R1 + 104];
           _scHt6::P64 = P64[R1 + 112];
           _scHtc::P64 = P64[R1 + 120];
           I64[Hp - 120] = sat_scHuD_info;
           P64[Hp - 104] = _scHsd::P64;
           P64[Hp - 96] = _scHsn::P64;
           P64[Hp - 88] = _scHso::P64;
           P64[Hp - 80] = _scHsp::P64;
           P64[Hp - 72] = _scHss::P64;
           P64[Hp - 64] = _scHsx::P64;
           P64[Hp - 56] = _scHsC::P64;
           P64[Hp - 48] = _scHsH::P64;
           P64[Hp - 40] = _scHsM::P64;
           P64[Hp - 32] = _scHsR::P64;
           P64[Hp - 24] = _scHsW::P64;
           P64[Hp - 16] = _scHt1::P64;
           P64[Hp - 8] = _scHt6::P64;
           P64[Hp] = _scHtc::P64;
           R3 = Hp - 120;
           R2 = lvl2_rcHpx_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHuE_info" {
     sat_scHuE_info:
         const sat_scHuE_entry;
         const 14;
         const 12884901903;
         const ScI2G_srt;
 },
 sat_scHuF_entry() //  [R1]
         { []
         }
     {offset
       ccKbf: // global
           _scHuF::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccKbg; else goto ccKbh;
       ccKbh: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto ccKbj; else goto ccKbi;
       ccKbj: // global
           HpAlloc = 128;
           goto ccKbg;
       ccKbg: // global
           R1 = _scHuF::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKbi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scHuF::P64;
           _scHsd::P64 = P64[_scHuF::P64 + 16];
           _scHsn::P64 = P64[_scHuF::P64 + 24];
           _scHso::P64 = P64[_scHuF::P64 + 32];
           _scHsp::P64 = P64[_scHuF::P64 + 40];
           _scHss::P64 = P64[_scHuF::P64 + 48];
           _scHsx::P64 = P64[_scHuF::P64 + 56];
           _scHsC::P64 = P64[_scHuF::P64 + 64];
           _scHsH::P64 = P64[_scHuF::P64 + 72];
           _scHsM::P64 = P64[_scHuF::P64 + 80];
           _scHsR::P64 = P64[_scHuF::P64 + 88];
           _scHsW::P64 = P64[_scHuF::P64 + 96];
           _scHt1::P64 = P64[_scHuF::P64 + 104];
           _scHt6::P64 = P64[_scHuF::P64 + 112];
           _scHtc::P64 = P64[_scHuF::P64 + 120];
           I64[Hp - 120] = sat_scHuE_info;
           P64[Hp - 104] = _scHsd::P64;
           P64[Hp - 96] = _scHsn::P64;
           P64[Hp - 88] = _scHso::P64;
           P64[Hp - 80] = _scHsp::P64;
           P64[Hp - 72] = _scHss::P64;
           P64[Hp - 64] = _scHsx::P64;
           P64[Hp - 56] = _scHsC::P64;
           P64[Hp - 48] = _scHsH::P64;
           P64[Hp - 40] = _scHsM::P64;
           P64[Hp - 32] = _scHsR::P64;
           P64[Hp - 24] = _scHsW::P64;
           P64[Hp - 16] = _scHt1::P64;
           P64[Hp - 8] = _scHt6::P64;
           P64[Hp] = _scHtc::P64;
           R3 = Hp - 120;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHuF_info" {
     sat_scHuF_info:
         const sat_scHuF_entry;
         const 14;
         const 12884901903;
         const ScI2G_srt;
 },
 sat_scHuJ_entry() //  [R1]
         { []
         }
     {offset
       ccKbk: // global
           if ((Sp + -136) < SpLim) (likely: False) goto ccKbr; else goto ccKbs;
       ccKbr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKbs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 136] = block_ccK3I_info;
           _scHsd::P64 = P64[R1 + 24];
           _scHsn::P64 = P64[R1 + 32];
           _scHso::P64 = P64[R1 + 40];
           _scHsp::P64 = P64[R1 + 48];
           _scHss::P64 = P64[R1 + 56];
           _scHsx::P64 = P64[R1 + 64];
           _scHsC::P64 = P64[R1 + 72];
           _scHsH::P64 = P64[R1 + 80];
           _scHsM::P64 = P64[R1 + 88];
           _scHsR::P64 = P64[R1 + 96];
           _scHsW::P64 = P64[R1 + 104];
           _scHt1::P64 = P64[R1 + 112];
           _scHt6::P64 = P64[R1 + 120];
           _scHtc::P64 = P64[R1 + 128];
           R1 = P64[R1 + 16];
           P64[Sp - 128] = _scHsd::P64;
           P64[Sp - 120] = _scHsn::P64;
           P64[Sp - 112] = _scHso::P64;
           P64[Sp - 104] = _scHsp::P64;
           P64[Sp - 96] = _scHss::P64;
           P64[Sp - 88] = _scHsx::P64;
           P64[Sp - 80] = _scHsC::P64;
           P64[Sp - 72] = _scHsH::P64;
           P64[Sp - 64] = _scHsM::P64;
           P64[Sp - 56] = _scHsR::P64;
           P64[Sp - 48] = _scHsW::P64;
           P64[Sp - 40] = _scHt1::P64;
           P64[Sp - 32] = _scHt6::P64;
           P64[Sp - 24] = _scHtc::P64;
           Sp = Sp - 136;
           if (R1 & 7 != 0) goto ucKbz; else goto ccK3J;
       ucKbz: // global
           call _ccK3I(R1) args: 0, res: 0, upd: 0;
       ccK3J: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHuJ_info" {
     sat_scHuJ_info:
         const sat_scHuJ_entry;
         const 15;
         const 12884901903;
         const ScI2G_srt;
 },
 _ccK3I() //  [R1]
         { []
         }
     {offset
       ccK3I: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto ccKbv; else goto ccKbu;
       ccKbv: // global
           HpAlloc = 128;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       ccKbu: // global
           _scHte::I64 = I64[R1 + 7];
           I64[Hp - 120] = sat_scHuF_info;
           P64[Hp - 104] = P64[Sp + 8];
           P64[Hp - 96] = P64[Sp + 16];
           P64[Hp - 88] = P64[Sp + 24];
           P64[Hp - 80] = P64[Sp + 32];
           P64[Hp - 72] = P64[Sp + 40];
           P64[Hp - 64] = P64[Sp + 48];
           P64[Hp - 56] = P64[Sp + 56];
           P64[Hp - 48] = P64[Sp + 64];
           P64[Hp - 40] = P64[Sp + 72];
           P64[Hp - 32] = P64[Sp + 80];
           P64[Hp - 24] = P64[Sp + 88];
           P64[Hp - 16] = P64[Sp + 96];
           P64[Hp - 8] = P64[Sp + 104];
           P64[Hp] = P64[Sp + 112];
           I64[Sp + 112] = block_ccKbo_info;
           R3 = Hp - 120;
           R2 = _scHte::I64;
           Sp = Sp + 112;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccK3I_info" {
     block_ccK3I_info:
         const _ccK3I;
         const 14;
         const 12884901918;
         const ScI2G_srt;
 },
 _ccKbo() //  [R1, R2]
         { []
         }
     {offset
       ccKbo: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccKby; else goto ccKbx;
       ccKby: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccKbx: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccKbo_info" {
     block_ccKbo_info:
         const _ccKbo;
         const 0;
         const 30;
 },
 sat_scHuK_entry() //  [R1]
         { []
         }
     {offset
       ccKbA: // global
           _scHuK::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccKbB; else goto ccKbC;
       ccKbC: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto ccKbE; else goto ccKbD;
       ccKbE: // global
           HpAlloc = 136;
           goto ccKbB;
       ccKbB: // global
           R1 = _scHuK::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKbD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scHuK::P64;
           _scHsc::P64 = P64[_scHuK::P64 + 16];
           _scHsd::P64 = P64[_scHuK::P64 + 24];
           _scHsn::P64 = P64[_scHuK::P64 + 32];
           _scHso::P64 = P64[_scHuK::P64 + 40];
           _scHsp::P64 = P64[_scHuK::P64 + 48];
           _scHss::P64 = P64[_scHuK::P64 + 56];
           _scHsx::P64 = P64[_scHuK::P64 + 64];
           _scHsC::P64 = P64[_scHuK::P64 + 72];
           _scHsH::P64 = P64[_scHuK::P64 + 80];
           _scHsM::P64 = P64[_scHuK::P64 + 88];
           _scHsR::P64 = P64[_scHuK::P64 + 96];
           _scHsW::P64 = P64[_scHuK::P64 + 104];
           _scHt1::P64 = P64[_scHuK::P64 + 112];
           _scHt6::P64 = P64[_scHuK::P64 + 120];
           _scHtc::P64 = P64[_scHuK::P64 + 128];
           I64[Hp - 128] = sat_scHuJ_info;
           P64[Hp - 112] = _scHsc::P64;
           P64[Hp - 104] = _scHsd::P64;
           P64[Hp - 96] = _scHsn::P64;
           P64[Hp - 88] = _scHso::P64;
           P64[Hp - 80] = _scHsp::P64;
           P64[Hp - 72] = _scHss::P64;
           P64[Hp - 64] = _scHsx::P64;
           P64[Hp - 56] = _scHsC::P64;
           P64[Hp - 48] = _scHsH::P64;
           P64[Hp - 40] = _scHsM::P64;
           P64[Hp - 32] = _scHsR::P64;
           P64[Hp - 24] = _scHsW::P64;
           P64[Hp - 16] = _scHt1::P64;
           P64[Hp - 8] = _scHt6::P64;
           P64[Hp] = _scHtc::P64;
           R3 = Hp - 128;
           R2 = lvl1_rcHpw_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHuK_info" {
     sat_scHuK_info:
         const sat_scHuK_entry;
         const 15;
         const 12884901903;
         const ScI2G_srt;
 },
 p_scHtb_entry() //  [R1, R2]
         { []
         }
     {offset
       ccKbF: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto ccKbJ; else goto ccKbI;
       ccKbJ: // global
           HpAlloc = 136;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccKbI: // global
           _scHsc::P64 = P64[R1 + 7];
           _scHsd::P64 = P64[R1 + 15];
           _scHsn::P64 = P64[R1 + 23];
           _scHso::P64 = P64[R1 + 31];
           _scHsp::P64 = P64[R1 + 39];
           _scHss::P64 = P64[R1 + 47];
           _scHsx::P64 = P64[R1 + 55];
           _scHsC::P64 = P64[R1 + 63];
           _scHsH::P64 = P64[R1 + 71];
           _scHsM::P64 = P64[R1 + 79];
           _scHsR::P64 = P64[R1 + 87];
           _scHsW::P64 = P64[R1 + 95];
           _scHt1::P64 = P64[R1 + 103];
           _scHt6::P64 = P64[R1 + 111];
           I64[Hp - 128] = sat_scHuK_info;
           P64[Hp - 112] = _scHsc::P64;
           P64[Hp - 104] = _scHsd::P64;
           P64[Hp - 96] = _scHsn::P64;
           P64[Hp - 88] = _scHso::P64;
           P64[Hp - 80] = _scHsp::P64;
           P64[Hp - 72] = _scHss::P64;
           P64[Hp - 64] = _scHsx::P64;
           P64[Hp - 56] = _scHsC::P64;
           P64[Hp - 48] = _scHsH::P64;
           P64[Hp - 40] = _scHsM::P64;
           P64[Hp - 32] = _scHsR::P64;
           P64[Hp - 24] = _scHsW::P64;
           P64[Hp - 16] = _scHt1::P64;
           P64[Hp - 8] = _scHt6::P64;
           P64[Hp] = R2;
           R3 = Hp - 128;
           R2 = lvl_rcHpv_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . p_scHtb_info" {
     p_scHtb_info:
         const p_scHtb_entry;
         const 14;
         const 12884901896;
         const 4294967301;
         const ScI2G_srt;
 },
 sat_scHuO_entry() //  [R1]
         { []
         }
     {offset
       ccKbY: // global
           _scHuO::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccKbZ; else goto ccKc0;
       ccKc0: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccKc2; else goto ccKc1;
       ccKc2: // global
           HpAlloc = 24;
           goto ccKbZ;
       ccKbZ: // global
           R1 = _scHuO::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKc1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scHuO::P64;
           _scHtb::P64 = P64[_scHuO::P64 + 16];
           _scHuM::P64 = P64[_scHuO::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _scHuM::P64;
           R2 = Hp - 14;
           R1 = _scHtb::P64;
           Sp = Sp - 16;
           call p_scHtb_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHuO_info" {
     sat_scHuO_info:
         const sat_scHuO_entry;
         const 2;
         const 12884901906;
         const ScI2G_srt;
 },
 sat_scHuP_entry() //  [R1, R2]
         { []
         }
     {offset
       ccKc4: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto ccKc8; else goto ccKc7;
       ccKc8: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccKc7: // global
           _scHtb::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_scHuO_info;
           P64[Hp - 32] = _scHtb::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHuP_info" {
     sat_scHuP_info:
         const sat_scHuP_entry;
         const 1;
         const 12884901897;
         const 4294967301;
         const ScI2G_srt;
 },
 GHC.Stats.$fShowGCDetails_$cshowsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       ccKc9: // global
           if ((Sp + -120) < SpLim) (likely: False) goto ccKca; else goto ccKcb;
       ccKca: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Stats.$fShowGCDetails_$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccKcb: // global
           I64[Sp - 16] = block_ccK09_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucKck; else goto ccK0a;
       ucKck: // global
           call _ccK09(R1) args: 0, res: 0, upd: 0;
       ccK0a: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.$fShowGCDetails_$cshowsPrec_info" {
     GHC.Stats.$fShowGCDetails_$cshowsPrec_info:
         const GHC.Stats.$fShowGCDetails_$cshowsPrec_entry;
         const 0;
         const 30064771086;
         const 8589934607;
         const ScI2G_srt;
 },
 _ccK09() //  [R1]
         { []
         }
     {offset
       ccK09: // global
           I64[Sp - 104] = block_ccK0e_info;
           _scHsc::P64 = P64[R1 + 7];
           _scHsd::P64 = P64[R1 + 15];
           _scHse::P64 = P64[R1 + 23];
           _scHsf::P64 = P64[R1 + 31];
           _scHsg::P64 = P64[R1 + 39];
           _scHsh::P64 = P64[R1 + 47];
           _scHsi::P64 = P64[R1 + 55];
           _scHsj::P64 = P64[R1 + 63];
           _scHsk::P64 = P64[R1 + 71];
           _scHsl::P64 = P64[R1 + 79];
           _scHsm::P64 = P64[R1 + 87];
           _scHsn::P64 = P64[R1 + 95];
           _scHso::P64 = P64[R1 + 103];
           _scHsp::P64 = P64[R1 + 111];
           R1 = P64[Sp + 8];
           P64[Sp - 96] = _scHse::P64;
           P64[Sp - 88] = _scHsf::P64;
           P64[Sp - 80] = _scHsg::P64;
           P64[Sp - 72] = _scHsh::P64;
           P64[Sp - 64] = _scHsi::P64;
           P64[Sp - 56] = _scHsj::P64;
           P64[Sp - 48] = _scHsk::P64;
           P64[Sp - 40] = _scHsl::P64;
           P64[Sp - 32] = _scHsm::P64;
           P64[Sp - 24] = _scHsn::P64;
           P64[Sp - 16] = _scHso::P64;
           P64[Sp - 8] = _scHsp::P64;
           P64[Sp] = _scHsd::P64;
           P64[Sp + 8] = _scHsc::P64;
           Sp = Sp - 104;
           if (R1 & 7 != 0) goto ucKcj; else goto ccK0f;
       ucKcj: // global
           call _ccK0e(R1) args: 0, res: 0, upd: 0;
       ccK0f: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccK09_info" {
     block_ccK09_info:
         const _ccK09;
         const 1;
         const 12884901918;
         const ScI2G_srt;
 },
 _ccK0e() //  [R1]
         { []
         }
     {offset
       ccK0e: // global
           Hp = Hp + 352;
           if (Hp > HpLim) (likely: False) goto ccKcf; else goto ccKce;
       ccKcf: // global
           HpAlloc = 352;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccKce: // global
           _scHsr::I64 = I64[R1 + 7];
           I64[Hp - 344] = w1_scHss_info;
           P64[Hp - 328] = P64[Sp + 8];
           I64[Hp - 320] = w2_scHsx_info;
           P64[Hp - 304] = P64[Sp + 16];
           I64[Hp - 296] = w3_scHsC_info;
           P64[Hp - 280] = P64[Sp + 24];
           I64[Hp - 272] = w4_scHsH_info;
           P64[Hp - 256] = P64[Sp + 32];
           I64[Hp - 248] = w5_scHsM_info;
           P64[Hp - 232] = P64[Sp + 40];
           I64[Hp - 224] = w6_scHsR_info;
           P64[Hp - 208] = P64[Sp + 48];
           I64[Hp - 200] = w7_scHsW_info;
           P64[Hp - 184] = P64[Sp + 56];
           I64[Hp - 176] = w8_scHt1_info;
           P64[Hp - 160] = P64[Sp + 64];
           I64[Hp - 152] = w9_scHt6_info;
           P64[Hp - 136] = P64[Sp + 72];
           I64[Hp - 128] = p_scHtb_info;
           P64[Hp - 120] = P64[Sp + 112];
           P64[Hp - 112] = P64[Sp + 104];
           P64[Hp - 104] = P64[Sp + 80];
           P64[Hp - 96] = P64[Sp + 88];
           P64[Hp - 88] = P64[Sp + 96];
           P64[Hp - 80] = Hp - 344;
           P64[Hp - 72] = Hp - 320;
           P64[Hp - 64] = Hp - 296;
           P64[Hp - 56] = Hp - 272;
           P64[Hp - 48] = Hp - 248;
           P64[Hp - 40] = Hp - 224;
           P64[Hp - 32] = Hp - 200;
           P64[Hp - 24] = Hp - 176;
           P64[Hp - 16] = Hp - 152;
           _ccK3v::P64 = Hp - 127;
           if (%MO_S_Lt_W64(_scHsr::I64, 11)) goto ccKch; else goto ccKci;
       ccKch: // global
           Hp = Hp - 16;
           R1 = _ccK3v::P64;
           Sp = Sp + 120;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccKci: // global
           I64[Hp - 8] = sat_scHuP_info;
           P64[Hp] = _ccK3v::P64;
           R1 = Hp - 7;
           Sp = Sp + 120;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccK0e_info" {
     block_ccK0e_info:
         const _ccK0e;
         const 14;
         const 12884901918;
         const ScI2G_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:36.863175356 UTC

[section ""data" . GHC.Stats.$fShowGCDetails2_closure" {
     GHC.Stats.$fShowGCDetails2_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:36.866245711 UTC

[section ""data" . GHC.Stats.$fShowGCDetails_$cshow_closure" {
     GHC.Stats.$fShowGCDetails_$cshow_closure:
         const GHC.Stats.$fShowGCDetails_$cshow_info;
         const 0;
 },
 GHC.Stats.$fShowGCDetails_$cshow_entry() //  [R2]
         { []
         }
     {offset
       ccKiE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccKiF; else goto ccKiG;
       ccKiF: // global
           R2 = R2;
           R1 = GHC.Stats.$fShowGCDetails_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccKiG: // global
           R3 = R2;
           R2 = GHC.Stats.$fShowGCDetails2_closure+1;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 16;
           call GHC.Stats.$fShowGCDetails_$cshowsPrec_entry(R3,
                                                            R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.$fShowGCDetails_$cshow_info" {
     GHC.Stats.$fShowGCDetails_$cshow_info:
         const GHC.Stats.$fShowGCDetails_$cshow_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const ScI2G_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:36.870126386 UTC

[section ""data" . GHC.Stats.$fShowGCDetails1_closure" {
     GHC.Stats.$fShowGCDetails1_closure:
         const GHC.Stats.$fShowGCDetails1_info;
         const 0;
 },
 GHC.Stats.$fShowGCDetails1_entry() //  [R2]
         { []
         }
     {offset
       ccKiQ: // global
           R3 = R2;
           R2 = GHC.Stats.$fShowGCDetails2_closure+1;
           call GHC.Stats.$fShowGCDetails_$cshowsPrec_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.$fShowGCDetails1_info" {
     GHC.Stats.$fShowGCDetails1_info:
         const GHC.Stats.$fShowGCDetails1_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const ScI2G_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:36.873876409 UTC

[section ""data" . GHC.Stats.$fShowGCDetails_$cshowList_closure" {
     GHC.Stats.$fShowGCDetails_$cshowList_closure:
         const GHC.Stats.$fShowGCDetails_$cshowList_info;
         const 0;
 },
 GHC.Stats.$fShowGCDetails_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       ccKj1: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Stats.$fShowGCDetails1_closure+1;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.$fShowGCDetails_$cshowList_info" {
     GHC.Stats.$fShowGCDetails_$cshowList_info:
         const GHC.Stats.$fShowGCDetails_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const ScI2G_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:36.877743645 UTC

[section ""data" . GHC.Stats.$fShowGCDetails_closure" {
     GHC.Stats.$fShowGCDetails_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Stats.$fShowGCDetails_$cshowsPrec_closure+2;
         const GHC.Stats.$fShowGCDetails_$cshow_closure+1;
         const GHC.Stats.$fShowGCDetails_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:36.879537117 UTC

[section ""cstring" . lvl16_rcHpL_bytes" {
     lvl16_rcHpL_bytes:
         I8[] [82,84,83,83,116,97,116,115,32,123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:36.881226082 UTC

[section ""cstring" . lvl17_rcHpM_bytes" {
     lvl17_rcHpM_bytes:
         I8[] [103,99,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:36.883337802 UTC

[section ""cstring" . lvl18_rcHpN_bytes" {
     lvl18_rcHpN_bytes:
         I8[] [109,97,106,111,114,95,103,99,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:36.885049852 UTC

[section ""cstring" . lvl19_rcHpO_bytes" {
     lvl19_rcHpO_bytes:
         I8[] [97,108,108,111,99,97,116,101,100,95,98,121,116,101,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:36.88678719 UTC

[section ""cstring" . lvl20_rcHpP_bytes" {
     lvl20_rcHpP_bytes:
         I8[] [109,97,120,95,108,105,118,101,95,98,121,116,101,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:36.888517833 UTC

[section ""cstring" . lvl21_rcHpQ_bytes" {
     lvl21_rcHpQ_bytes:
         I8[] [109,97,120,95,108,97,114,103,101,95,111,98,106,101,99,116,115,95,98,121,116,101,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:36.89024877 UTC

[section ""cstring" . lvl22_rcHpR_bytes" {
     lvl22_rcHpR_bytes:
         I8[] [109,97,120,95,99,111,109,112,97,99,116,95,98,121,116,101,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:36.892031849 UTC

[section ""cstring" . lvl23_rcHpS_bytes" {
     lvl23_rcHpS_bytes:
         I8[] [109,97,120,95,115,108,111,112,95,98,121,116,101,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:36.893789894 UTC

[section ""cstring" . lvl24_rcHpT_bytes" {
     lvl24_rcHpT_bytes:
         I8[] [109,97,120,95,109,101,109,95,105,110,95,117,115,101,95,98,121,116,101,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:36.895582133 UTC

[section ""cstring" . lvl25_rcHpU_bytes" {
     lvl25_rcHpU_bytes:
         I8[] [99,117,109,117,108,97,116,105,118,101,95,108,105,118,101,95,98,121,116,101,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:36.897862765 UTC

[section ""cstring" . lvl26_rcHpV_bytes" {
     lvl26_rcHpV_bytes:
         I8[] [99,111,112,105,101,100,95,98,121,116,101,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:36.899686808 UTC

[section ""cstring" . lvl27_rcHpW_bytes" {
     lvl27_rcHpW_bytes:
         I8[] [112,97,114,95,99,111,112,105,101,100,95,98,121,116,101,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:36.902046442 UTC

[section ""cstring" . lvl28_rcHpX_bytes" {
     lvl28_rcHpX_bytes:
         I8[] [99,117,109,117,108,97,116,105,118,101,95,112,97,114,95,109,97,120,95,99,111,112,105,101,100,95,98,121,116,101,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:36.903683518 UTC

[section ""cstring" . lvl29_rcHpY_bytes" {
     lvl29_rcHpY_bytes:
         I8[] [99,117,109,117,108,97,116,105,118,101,95,112,97,114,95,98,97,108,97,110,99,101,100,95,99,111,112,105,101,100,95,98,121,116,101,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:36.905400554 UTC

[section ""cstring" . lvl30_rcHpZ_bytes" {
     lvl30_rcHpZ_bytes:
         I8[] [109,117,116,97,116,111,114,95,99,112,117,95,110,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:36.907085798 UTC

[section ""cstring" . lvl31_rcHq0_bytes" {
     lvl31_rcHq0_bytes:
         I8[] [109,117,116,97,116,111,114,95,101,108,97,112,115,101,100,95,110,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:36.908795899 UTC

[section ""cstring" . lvl32_rcHq1_bytes" {
     lvl32_rcHq1_bytes:
         I8[] [103,99,95,99,112,117,95,110,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:36.910458695 UTC

[section ""cstring" . lvl33_rcHq2_bytes" {
     lvl33_rcHq2_bytes:
         I8[] [103,99,95,101,108,97,112,115,101,100,95,110,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:36.912086688 UTC

[section ""cstring" . lvl34_rcHq3_bytes" {
     lvl34_rcHq3_bytes:
         I8[] [99,112,117,95,110,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:36.913803022 UTC

[section ""cstring" . lvl35_rcHq4_bytes" {
     lvl35_rcHq4_bytes:
         I8[] [101,108,97,112,115,101,100,95,110,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:36.915605732 UTC

[section ""cstring" . lvl36_rcHq5_bytes" {
     lvl36_rcHq5_bytes:
         I8[] [103,99,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.021221042 UTC

[section ""data" . GHC.Stats.$fShowRTSStats_$cshowsPrec_closure" {
     GHC.Stats.$fShowRTSStats_$cshowsPrec_closure:
         const GHC.Stats.$fShowRTSStats_$cshowsPrec_info;
         const 0;
 },
 w1_scHvi_entry() //  [R1]
         { []
         }
     {offset
       ccKjP: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccKjQ; else goto ccKjR;
       ccKjQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKjR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccKjM_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucKk3; else goto ccKjN;
       ucKk3: // global
           call _ccKjM(R1) args: 0, res: 0, upd: 0;
       ccKjN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . w1_scHvi_info" {
     w1_scHvi_info:
         const w1_scHvi_entry;
         const 1;
         const 16;
 },
 _ccKjM() //  [R1]
         { []
         }
     {offset
       ccKjM: // global
           _scHvk::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_scHvk::I64, 0)) goto ccKk1; else goto ccKk2;
       ccKk1: // global
           R2 = _scHvk::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.wordToInteger_entry(R2) args: 24, res: 0, upd: 24;
       ccKk2: // global
           R2 = _scHvk::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccKjM_info" {
     block_ccKjM_info:
         const _ccKjM;
         const 0;
         const 30;
 },
 w2_scHvn_entry() //  [R1]
         { []
         }
     {offset
       ccKkb: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccKkc; else goto ccKkd;
       ccKkc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKkd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccKk8_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucKkp; else goto ccKk9;
       ucKkp: // global
           call _ccKk8(R1) args: 0, res: 0, upd: 0;
       ccKk9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . w2_scHvn_info" {
     w2_scHvn_info:
         const w2_scHvn_entry;
         const 1;
         const 16;
 },
 _ccKk8() //  [R1]
         { []
         }
     {offset
       ccKk8: // global
           _scHvp::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_scHvp::I64, 0)) goto ccKkn; else goto ccKko;
       ccKkn: // global
           R2 = _scHvp::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.wordToInteger_entry(R2) args: 24, res: 0, upd: 24;
       ccKko: // global
           R2 = _scHvp::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccKk8_info" {
     block_ccKk8_info:
         const _ccKk8;
         const 0;
         const 30;
 },
 w3_scHvs_entry() //  [R1]
         { []
         }
     {offset
       ccKkx: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccKky; else goto ccKkz;
       ccKky: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKkz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccKku_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucKkL; else goto ccKkv;
       ucKkL: // global
           call _ccKku(R1) args: 0, res: 0, upd: 0;
       ccKkv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . w3_scHvs_info" {
     w3_scHvs_info:
         const w3_scHvs_entry;
         const 1;
         const 16;
 },
 _ccKku() //  [R1]
         { []
         }
     {offset
       ccKku: // global
           _scHvu::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_scHvu::I64, 0)) goto ccKkJ; else goto ccKkK;
       ccKkJ: // global
           R2 = _scHvu::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.wordToInteger_entry(R2) args: 24, res: 0, upd: 24;
       ccKkK: // global
           R2 = _scHvu::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccKku_info" {
     block_ccKku_info:
         const _ccKku;
         const 0;
         const 30;
 },
 w4_scHvx_entry() //  [R1]
         { []
         }
     {offset
       ccKkT: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccKkU; else goto ccKkV;
       ccKkU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKkV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccKkQ_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucKl7; else goto ccKkR;
       ucKl7: // global
           call _ccKkQ(R1) args: 0, res: 0, upd: 0;
       ccKkR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . w4_scHvx_info" {
     w4_scHvx_info:
         const w4_scHvx_entry;
         const 1;
         const 16;
 },
 _ccKkQ() //  [R1]
         { []
         }
     {offset
       ccKkQ: // global
           _scHvz::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_scHvz::I64, 0)) goto ccKl5; else goto ccKl6;
       ccKl5: // global
           R2 = _scHvz::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.wordToInteger_entry(R2) args: 24, res: 0, upd: 24;
       ccKl6: // global
           R2 = _scHvz::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccKkQ_info" {
     block_ccKkQ_info:
         const _ccKkQ;
         const 0;
         const 30;
 },
 w5_scHvC_entry() //  [R1]
         { []
         }
     {offset
       ccKlf: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccKlg; else goto ccKlh;
       ccKlg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKlh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccKlc_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucKlt; else goto ccKld;
       ucKlt: // global
           call _ccKlc(R1) args: 0, res: 0, upd: 0;
       ccKld: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . w5_scHvC_info" {
     w5_scHvC_info:
         const w5_scHvC_entry;
         const 1;
         const 16;
 },
 _ccKlc() //  [R1]
         { []
         }
     {offset
       ccKlc: // global
           _scHvE::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_scHvE::I64, 0)) goto ccKlr; else goto ccKls;
       ccKlr: // global
           R2 = _scHvE::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.wordToInteger_entry(R2) args: 24, res: 0, upd: 24;
       ccKls: // global
           R2 = _scHvE::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccKlc_info" {
     block_ccKlc_info:
         const _ccKlc;
         const 0;
         const 30;
 },
 w6_scHvH_entry() //  [R1]
         { []
         }
     {offset
       ccKlB: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccKlC; else goto ccKlD;
       ccKlC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKlD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccKly_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucKlP; else goto ccKlz;
       ucKlP: // global
           call _ccKly(R1) args: 0, res: 0, upd: 0;
       ccKlz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . w6_scHvH_info" {
     w6_scHvH_info:
         const w6_scHvH_entry;
         const 1;
         const 16;
 },
 _ccKly() //  [R1]
         { []
         }
     {offset
       ccKly: // global
           _scHvJ::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_scHvJ::I64, 0)) goto ccKlN; else goto ccKlO;
       ccKlN: // global
           R2 = _scHvJ::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.wordToInteger_entry(R2) args: 24, res: 0, upd: 24;
       ccKlO: // global
           R2 = _scHvJ::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccKly_info" {
     block_ccKly_info:
         const _ccKly;
         const 0;
         const 30;
 },
 w7_scHvM_entry() //  [R1]
         { []
         }
     {offset
       ccKlX: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccKlY; else goto ccKlZ;
       ccKlY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKlZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccKlU_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucKmb; else goto ccKlV;
       ucKmb: // global
           call _ccKlU(R1) args: 0, res: 0, upd: 0;
       ccKlV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . w7_scHvM_info" {
     w7_scHvM_info:
         const w7_scHvM_entry;
         const 1;
         const 16;
 },
 _ccKlU() //  [R1]
         { []
         }
     {offset
       ccKlU: // global
           _scHvO::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_scHvO::I64, 0)) goto ccKm9; else goto ccKma;
       ccKm9: // global
           R2 = _scHvO::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.wordToInteger_entry(R2) args: 24, res: 0, upd: 24;
       ccKma: // global
           R2 = _scHvO::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccKlU_info" {
     block_ccKlU_info:
         const _ccKlU;
         const 0;
         const 30;
 },
 w8_scHvR_entry() //  [R1]
         { []
         }
     {offset
       ccKmj: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccKmk; else goto ccKml;
       ccKmk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKml: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccKmg_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucKmx; else goto ccKmh;
       ucKmx: // global
           call _ccKmg(R1) args: 0, res: 0, upd: 0;
       ccKmh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . w8_scHvR_info" {
     w8_scHvR_info:
         const w8_scHvR_entry;
         const 1;
         const 16;
 },
 _ccKmg() //  [R1]
         { []
         }
     {offset
       ccKmg: // global
           _scHvT::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_scHvT::I64, 0)) goto ccKmv; else goto ccKmw;
       ccKmv: // global
           R2 = _scHvT::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.wordToInteger_entry(R2) args: 24, res: 0, upd: 24;
       ccKmw: // global
           R2 = _scHvT::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccKmg_info" {
     block_ccKmg_info:
         const _ccKmg;
         const 0;
         const 30;
 },
 w9_scHvW_entry() //  [R1]
         { []
         }
     {offset
       ccKmF: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccKmG; else goto ccKmH;
       ccKmG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKmH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccKmC_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucKmT; else goto ccKmD;
       ucKmT: // global
           call _ccKmC(R1) args: 0, res: 0, upd: 0;
       ccKmD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . w9_scHvW_info" {
     w9_scHvW_info:
         const w9_scHvW_entry;
         const 1;
         const 16;
 },
 _ccKmC() //  [R1]
         { []
         }
     {offset
       ccKmC: // global
           _scHvY::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_scHvY::I64, 0)) goto ccKmR; else goto ccKmS;
       ccKmR: // global
           R2 = _scHvY::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.wordToInteger_entry(R2) args: 24, res: 0, upd: 24;
       ccKmS: // global
           R2 = _scHvY::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccKmC_info" {
     block_ccKmC_info:
         const _ccKmC;
         const 0;
         const 30;
 },
 w10_scHw1_entry() //  [R1]
         { []
         }
     {offset
       ccKn1: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccKn2; else goto ccKn3;
       ccKn2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKn3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccKmY_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucKnf; else goto ccKmZ;
       ucKnf: // global
           call _ccKmY(R1) args: 0, res: 0, upd: 0;
       ccKmZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . w10_scHw1_info" {
     w10_scHw1_info:
         const w10_scHw1_entry;
         const 1;
         const 16;
 },
 _ccKmY() //  [R1]
         { []
         }
     {offset
       ccKmY: // global
           _scHw3::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_scHw3::I64, 0)) goto ccKnd; else goto ccKne;
       ccKnd: // global
           R2 = _scHw3::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.wordToInteger_entry(R2) args: 24, res: 0, upd: 24;
       ccKne: // global
           R2 = _scHw3::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccKmY_info" {
     block_ccKmY_info:
         const _ccKmY;
         const 0;
         const 30;
 },
 w11_scHw6_entry() //  [R1]
         { []
         }
     {offset
       ccKnn: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccKno; else goto ccKnp;
       ccKno: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKnp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccKnk_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucKnB; else goto ccKnl;
       ucKnB: // global
           call _ccKnk(R1) args: 0, res: 0, upd: 0;
       ccKnl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . w11_scHw6_info" {
     w11_scHw6_info:
         const w11_scHw6_entry;
         const 1;
         const 16;
 },
 _ccKnk() //  [R1]
         { []
         }
     {offset
       ccKnk: // global
           _scHw8::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_scHw8::I64, 0)) goto ccKnz; else goto ccKnA;
       ccKnz: // global
           R2 = _scHw8::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.wordToInteger_entry(R2) args: 24, res: 0, upd: 24;
       ccKnA: // global
           R2 = _scHw8::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccKnk_info" {
     block_ccKnk_info:
         const _ccKnk;
         const 0;
         const 30;
 },
 f_scHwb_entry() //  [R1]
         { []
         }
     {offset
       ccKnG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccKnH; else goto ccKnI;
       ccKnH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKnI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.Stats.$fShowGCDetails2_closure+1;
           Sp = Sp - 16;
           call GHC.Stats.$fShowGCDetails_$cshowsPrec_entry(R3,
                                                            R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f_scHwb_info" {
     f_scHwb_info:
         const f_scHwb_entry;
         const 1;
         const 4294967312;
         const ScI2G_srt+16;
 },
 sat_scHww_entry() //  [R1]
         { []
         }
     {offset
       ccKsk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccKsl; else goto ccKsm;
       ccKsl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKsm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = lvl15_rcHpK_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHww_info" {
     sat_scHww_info:
         const sat_scHww_entry;
         const 1;
         const 16;
 },
 sat_scHwx_entry() //  [R1]
         { []
         }
     {offset
       ccKsn: // global
           _scHwx::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccKso; else goto ccKsp;
       ccKsp: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccKsr; else goto ccKsq;
       ccKsr: // global
           HpAlloc = 24;
           goto ccKso;
       ccKso: // global
           R1 = _scHwx::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKsq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scHwx::P64;
           _scHwb::P64 = P64[_scHwx::P64 + 16];
           _scHwd::P64 = P64[_scHwx::P64 + 24];
           I64[Hp - 16] = sat_scHww_info;
           P64[Hp] = _scHwd::P64;
           R2 = Hp - 16;
           R1 = _scHwb::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHwx_info" {
     sat_scHwx_info:
         const sat_scHwx_entry;
         const 2;
         const 18;
 },
 sat_scHwy_entry() //  [R1]
         { []
         }
     {offset
       ccKss: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccKsw; else goto ccKsv;
       ccKsw: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKsv: // global
           _scHwb::P64 = P64[R1 + 16];
           _scHwd::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_scHwx_info;
           P64[Hp - 8] = _scHwb::P64;
           P64[Hp] = _scHwd::P64;
           R3 = Hp - 24;
           R2 = lvl36_rcHq5_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHwy_info" {
     sat_scHwy_info:
         const sat_scHwy_entry;
         const 2;
         const 18;
 },
 sat_scHwz_entry() //  [R1]
         { []
         }
     {offset
       ccKsx: // global
           _scHwz::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccKsy; else goto ccKsz;
       ccKsz: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccKsB; else goto ccKsA;
       ccKsB: // global
           HpAlloc = 32;
           goto ccKsy;
       ccKsy: // global
           R1 = _scHwz::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKsA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scHwz::P64;
           _scHwb::P64 = P64[_scHwz::P64 + 16];
           _scHwd::P64 = P64[_scHwz::P64 + 24];
           I64[Hp - 24] = sat_scHwy_info;
           P64[Hp - 8] = _scHwb::P64;
           P64[Hp] = _scHwd::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHwz_info" {
     sat_scHwz_info:
         const sat_scHwz_entry;
         const 2;
         const 4294967314;
         const ScI2G_srt;
 },
 sat_scHwD_entry() //  [R1]
         { []
         }
     {offset
       ccKsC: // global
           if ((Sp + -40) < SpLim) (likely: False) goto ccKsG; else goto ccKsH;
       ccKsG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKsH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_ccKrZ_info;
           _scHwb::P64 = P64[R1 + 24];
           _scHwd::P64 = P64[R1 + 32];
           R1 = P64[R1 + 16];
           P64[Sp - 32] = _scHwb::P64;
           P64[Sp - 24] = _scHwd::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ucKsO; else goto ccKs0;
       ucKsO: // global
           call _ccKrZ(R1) args: 0, res: 0, upd: 0;
       ccKs0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHwD_info" {
     sat_scHwD_info:
         const sat_scHwD_entry;
         const 3;
         const 4294967311;
         const ScI2G_srt;
 },
 _ccKrZ() //  [R1]
         { []
         }
     {offset
       ccKrZ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccKsK; else goto ccKsJ;
       ccKsK: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       ccKsJ: // global
           _scHwv::I64 = I64[R1 + 7];
           I64[Hp - 24] = sat_scHwz_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_ccKsD_info;
           R4 = Hp - 24;
           R3 = _scHwv::I64;
           R2 = 0;
           Sp = Sp + 16;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccKrZ_info" {
     block_ccKrZ_info:
         const _ccKrZ;
         const 2;
         const 4294967326;
         const ScI2G_srt;
 },
 _ccKsD() //  [R1, R2]
         { []
         }
     {offset
       ccKsD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccKsN; else goto ccKsM;
       ccKsN: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccKsM: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccKsD_info" {
     block_ccKsD_info:
         const _ccKsD;
         const 0;
         const 30;
 },
 sat_scHwE_entry() //  [R1]
         { []
         }
     {offset
       ccKsP: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccKsT; else goto ccKsS;
       ccKsT: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKsS: // global
           _scHve::P64 = P64[R1 + 16];
           _scHwb::P64 = P64[R1 + 24];
           _scHwd::P64 = P64[R1 + 32];
           I64[Hp - 32] = sat_scHwD_info;
           P64[Hp - 16] = _scHve::P64;
           P64[Hp - 8] = _scHwb::P64;
           P64[Hp] = _scHwd::P64;
           R3 = Hp - 32;
           R2 = lvl35_rcHq4_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHwE_info" {
     sat_scHwE_info:
         const sat_scHwE_entry;
         const 3;
         const 4294967311;
         const ScI2G_srt;
 },
 sat_scHwF_entry() //  [R1]
         { []
         }
     {offset
       ccKsU: // global
           _scHwF::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccKsV; else goto ccKsW;
       ccKsW: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccKsY; else goto ccKsX;
       ccKsY: // global
           HpAlloc = 40;
           goto ccKsV;
       ccKsV: // global
           R1 = _scHwF::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKsX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scHwF::P64;
           _scHve::P64 = P64[_scHwF::P64 + 16];
           _scHwb::P64 = P64[_scHwF::P64 + 24];
           _scHwd::P64 = P64[_scHwF::P64 + 32];
           I64[Hp - 32] = sat_scHwE_info;
           P64[Hp - 16] = _scHve::P64;
           P64[Hp - 8] = _scHwb::P64;
           P64[Hp] = _scHwd::P64;
           R3 = Hp - 32;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHwF_info" {
     sat_scHwF_info:
         const sat_scHwF_entry;
         const 3;
         const 4294967311;
         const ScI2G_srt;
 },
 sat_scHwJ_entry() //  [R1]
         { []
         }
     {offset
       ccKsZ: // global
           if ((Sp + -48) < SpLim) (likely: False) goto ccKt3; else goto ccKt4;
       ccKt3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKt4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_ccKrI_info;
           _scHve::P64 = P64[R1 + 24];
           _scHwb::P64 = P64[R1 + 32];
           _scHwd::P64 = P64[R1 + 40];
           R1 = P64[R1 + 16];
           P64[Sp - 40] = _scHve::P64;
           P64[Sp - 32] = _scHwb::P64;
           P64[Sp - 24] = _scHwd::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto ucKtb; else goto ccKrJ;
       ucKtb: // global
           call _ccKrI(R1) args: 0, res: 0, upd: 0;
       ccKrJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHwJ_info" {
     sat_scHwJ_info:
         const sat_scHwJ_entry;
         const 4;
         const 4294967311;
         const ScI2G_srt;
 },
 _ccKrI() //  [R1]
         { []
         }
     {offset
       ccKrI: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccKt7; else goto ccKt6;
       ccKt7: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       ccKt6: // global
           _scHwt::I64 = I64[R1 + 7];
           I64[Hp - 32] = sat_scHwF_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           I64[Sp + 24] = block_ccKt0_info;
           R4 = Hp - 32;
           R3 = _scHwt::I64;
           R2 = 0;
           Sp = Sp + 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccKrI_info" {
     block_ccKrI_info:
         const _ccKrI;
         const 3;
         const 4294967326;
         const ScI2G_srt;
 },
 _ccKt0() //  [R1, R2]
         { []
         }
     {offset
       ccKt0: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccKta; else goto ccKt9;
       ccKta: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccKt9: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccKt0_info" {
     block_ccKt0_info:
         const _ccKt0;
         const 0;
         const 30;
 },
 sat_scHwK_entry() //  [R1]
         { []
         }
     {offset
       ccKtc: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccKtg; else goto ccKtf;
       ccKtg: // global
           HpAlloc = 48;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKtf: // global
           _scHvd::P64 = P64[R1 + 16];
           _scHve::P64 = P64[R1 + 24];
           _scHwb::P64 = P64[R1 + 32];
           _scHwd::P64 = P64[R1 + 40];
           I64[Hp - 40] = sat_scHwJ_info;
           P64[Hp - 24] = _scHvd::P64;
           P64[Hp - 16] = _scHve::P64;
           P64[Hp - 8] = _scHwb::P64;
           P64[Hp] = _scHwd::P64;
           R3 = Hp - 40;
           R2 = lvl34_rcHq3_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHwK_info" {
     sat_scHwK_info:
         const sat_scHwK_entry;
         const 4;
         const 4294967311;
         const ScI2G_srt;
 },
 sat_scHwL_entry() //  [R1]
         { []
         }
     {offset
       ccKth: // global
           _scHwL::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccKti; else goto ccKtj;
       ccKtj: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccKtl; else goto ccKtk;
       ccKtl: // global
           HpAlloc = 48;
           goto ccKti;
       ccKti: // global
           R1 = _scHwL::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKtk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scHwL::P64;
           _scHvd::P64 = P64[_scHwL::P64 + 16];
           _scHve::P64 = P64[_scHwL::P64 + 24];
           _scHwb::P64 = P64[_scHwL::P64 + 32];
           _scHwd::P64 = P64[_scHwL::P64 + 40];
           I64[Hp - 40] = sat_scHwK_info;
           P64[Hp - 24] = _scHvd::P64;
           P64[Hp - 16] = _scHve::P64;
           P64[Hp - 8] = _scHwb::P64;
           P64[Hp] = _scHwd::P64;
           R3 = Hp - 40;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHwL_info" {
     sat_scHwL_info:
         const sat_scHwL_entry;
         const 4;
         const 4294967311;
         const ScI2G_srt;
 },
 sat_scHwP_entry() //  [R1]
         { []
         }
     {offset
       ccKtm: // global
           if ((Sp + -56) < SpLim) (likely: False) goto ccKtq; else goto ccKtr;
       ccKtq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKtr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 56] = block_ccKrr_info;
           _scHvd::P64 = P64[R1 + 24];
           _scHve::P64 = P64[R1 + 32];
           _scHwb::P64 = P64[R1 + 40];
           _scHwd::P64 = P64[R1 + 48];
           R1 = P64[R1 + 16];
           P64[Sp - 48] = _scHvd::P64;
           P64[Sp - 40] = _scHve::P64;
           P64[Sp - 32] = _scHwb::P64;
           P64[Sp - 24] = _scHwd::P64;
           Sp = Sp - 56;
           if (R1 & 7 != 0) goto ucKty; else goto ccKrs;
       ucKty: // global
           call _ccKrr(R1) args: 0, res: 0, upd: 0;
       ccKrs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHwP_info" {
     sat_scHwP_info:
         const sat_scHwP_entry;
         const 5;
         const 4294967311;
         const ScI2G_srt;
 },
 _ccKrr() //  [R1]
         { []
         }
     {offset
       ccKrr: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccKtu; else goto ccKtt;
       ccKtu: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       ccKtt: // global
           _scHwr::I64 = I64[R1 + 7];
           I64[Hp - 40] = sat_scHwL_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 32];
           I64[Sp + 32] = block_ccKtn_info;
           R4 = Hp - 40;
           R3 = _scHwr::I64;
           R2 = 0;
           Sp = Sp + 32;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccKrr_info" {
     block_ccKrr_info:
         const _ccKrr;
         const 4;
         const 4294967326;
         const ScI2G_srt;
 },
 _ccKtn() //  [R1, R2]
         { []
         }
     {offset
       ccKtn: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccKtx; else goto ccKtw;
       ccKtx: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccKtw: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccKtn_info" {
     block_ccKtn_info:
         const _ccKtn;
         const 0;
         const 30;
 },
 sat_scHwQ_entry() //  [R1]
         { []
         }
     {offset
       ccKtz: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto ccKtD; else goto ccKtC;
       ccKtD: // global
           HpAlloc = 56;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKtC: // global
           _scHvc::P64 = P64[R1 + 16];
           _scHvd::P64 = P64[R1 + 24];
           _scHve::P64 = P64[R1 + 32];
           _scHwb::P64 = P64[R1 + 40];
           _scHwd::P64 = P64[R1 + 48];
           I64[Hp - 48] = sat_scHwP_info;
           P64[Hp - 32] = _scHvc::P64;
           P64[Hp - 24] = _scHvd::P64;
           P64[Hp - 16] = _scHve::P64;
           P64[Hp - 8] = _scHwb::P64;
           P64[Hp] = _scHwd::P64;
           R3 = Hp - 48;
           R2 = lvl33_rcHq2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHwQ_info" {
     sat_scHwQ_info:
         const sat_scHwQ_entry;
         const 5;
         const 4294967311;
         const ScI2G_srt;
 },
 sat_scHwR_entry() //  [R1]
         { []
         }
     {offset
       ccKtE: // global
           _scHwR::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccKtF; else goto ccKtG;
       ccKtG: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto ccKtI; else goto ccKtH;
       ccKtI: // global
           HpAlloc = 56;
           goto ccKtF;
       ccKtF: // global
           R1 = _scHwR::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKtH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scHwR::P64;
           _scHvc::P64 = P64[_scHwR::P64 + 16];
           _scHvd::P64 = P64[_scHwR::P64 + 24];
           _scHve::P64 = P64[_scHwR::P64 + 32];
           _scHwb::P64 = P64[_scHwR::P64 + 40];
           _scHwd::P64 = P64[_scHwR::P64 + 48];
           I64[Hp - 48] = sat_scHwQ_info;
           P64[Hp - 32] = _scHvc::P64;
           P64[Hp - 24] = _scHvd::P64;
           P64[Hp - 16] = _scHve::P64;
           P64[Hp - 8] = _scHwb::P64;
           P64[Hp] = _scHwd::P64;
           R3 = Hp - 48;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHwR_info" {
     sat_scHwR_info:
         const sat_scHwR_entry;
         const 5;
         const 4294967311;
         const ScI2G_srt;
 },
 sat_scHwV_entry() //  [R1]
         { []
         }
     {offset
       ccKtJ: // global
           if ((Sp + -64) < SpLim) (likely: False) goto ccKtN; else goto ccKtO;
       ccKtN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKtO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 64] = block_ccKra_info;
           _scHvc::P64 = P64[R1 + 24];
           _scHvd::P64 = P64[R1 + 32];
           _scHve::P64 = P64[R1 + 40];
           _scHwb::P64 = P64[R1 + 48];
           _scHwd::P64 = P64[R1 + 56];
           R1 = P64[R1 + 16];
           P64[Sp - 56] = _scHvc::P64;
           P64[Sp - 48] = _scHvd::P64;
           P64[Sp - 40] = _scHve::P64;
           P64[Sp - 32] = _scHwb::P64;
           P64[Sp - 24] = _scHwd::P64;
           Sp = Sp - 64;
           if (R1 & 7 != 0) goto ucKtV; else goto ccKrb;
       ucKtV: // global
           call _ccKra(R1) args: 0, res: 0, upd: 0;
       ccKrb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHwV_info" {
     sat_scHwV_info:
         const sat_scHwV_entry;
         const 6;
         const 4294967311;
         const ScI2G_srt;
 },
 _ccKra() //  [R1]
         { []
         }
     {offset
       ccKra: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto ccKtR; else goto ccKtQ;
       ccKtR: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       ccKtQ: // global
           _scHwp::I64 = I64[R1 + 7];
           I64[Hp - 48] = sat_scHwR_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = P64[Sp + 40];
           I64[Sp + 40] = block_ccKtK_info;
           R4 = Hp - 48;
           R3 = _scHwp::I64;
           R2 = 0;
           Sp = Sp + 40;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccKra_info" {
     block_ccKra_info:
         const _ccKra;
         const 5;
         const 4294967326;
         const ScI2G_srt;
 },
 _ccKtK() //  [R1, R2]
         { []
         }
     {offset
       ccKtK: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccKtU; else goto ccKtT;
       ccKtU: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccKtT: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccKtK_info" {
     block_ccKtK_info:
         const _ccKtK;
         const 0;
         const 30;
 },
 sat_scHwW_entry() //  [R1]
         { []
         }
     {offset
       ccKtW: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto ccKu0; else goto ccKtZ;
       ccKu0: // global
           HpAlloc = 64;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKtZ: // global
           _scHvb::P64 = P64[R1 + 16];
           _scHvc::P64 = P64[R1 + 24];
           _scHvd::P64 = P64[R1 + 32];
           _scHve::P64 = P64[R1 + 40];
           _scHwb::P64 = P64[R1 + 48];
           _scHwd::P64 = P64[R1 + 56];
           I64[Hp - 56] = sat_scHwV_info;
           P64[Hp - 40] = _scHvb::P64;
           P64[Hp - 32] = _scHvc::P64;
           P64[Hp - 24] = _scHvd::P64;
           P64[Hp - 16] = _scHve::P64;
           P64[Hp - 8] = _scHwb::P64;
           P64[Hp] = _scHwd::P64;
           R3 = Hp - 56;
           R2 = lvl32_rcHq1_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHwW_info" {
     sat_scHwW_info:
         const sat_scHwW_entry;
         const 6;
         const 4294967311;
         const ScI2G_srt;
 },
 sat_scHwX_entry() //  [R1]
         { []
         }
     {offset
       ccKu1: // global
           _scHwX::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccKu2; else goto ccKu3;
       ccKu3: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto ccKu5; else goto ccKu4;
       ccKu5: // global
           HpAlloc = 64;
           goto ccKu2;
       ccKu2: // global
           R1 = _scHwX::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKu4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scHwX::P64;
           _scHvb::P64 = P64[_scHwX::P64 + 16];
           _scHvc::P64 = P64[_scHwX::P64 + 24];
           _scHvd::P64 = P64[_scHwX::P64 + 32];
           _scHve::P64 = P64[_scHwX::P64 + 40];
           _scHwb::P64 = P64[_scHwX::P64 + 48];
           _scHwd::P64 = P64[_scHwX::P64 + 56];
           I64[Hp - 56] = sat_scHwW_info;
           P64[Hp - 40] = _scHvb::P64;
           P64[Hp - 32] = _scHvc::P64;
           P64[Hp - 24] = _scHvd::P64;
           P64[Hp - 16] = _scHve::P64;
           P64[Hp - 8] = _scHwb::P64;
           P64[Hp] = _scHwd::P64;
           R3 = Hp - 56;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHwX_info" {
     sat_scHwX_info:
         const sat_scHwX_entry;
         const 6;
         const 4294967311;
         const ScI2G_srt;
 },
 sat_scHx1_entry() //  [R1]
         { []
         }
     {offset
       ccKu6: // global
           if ((Sp + -72) < SpLim) (likely: False) goto ccKua; else goto ccKub;
       ccKua: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKub: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 72] = block_ccKqT_info;
           _scHvb::P64 = P64[R1 + 24];
           _scHvc::P64 = P64[R1 + 32];
           _scHvd::P64 = P64[R1 + 40];
           _scHve::P64 = P64[R1 + 48];
           _scHwb::P64 = P64[R1 + 56];
           _scHwd::P64 = P64[R1 + 64];
           R1 = P64[R1 + 16];
           P64[Sp - 64] = _scHvb::P64;
           P64[Sp - 56] = _scHvc::P64;
           P64[Sp - 48] = _scHvd::P64;
           P64[Sp - 40] = _scHve::P64;
           P64[Sp - 32] = _scHwb::P64;
           P64[Sp - 24] = _scHwd::P64;
           Sp = Sp - 72;
           if (R1 & 7 != 0) goto ucKui; else goto ccKqU;
       ucKui: // global
           call _ccKqT(R1) args: 0, res: 0, upd: 0;
       ccKqU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHx1_info" {
     sat_scHx1_info:
         const sat_scHx1_entry;
         const 7;
         const 4294967311;
         const ScI2G_srt;
 },
 _ccKqT() //  [R1]
         { []
         }
     {offset
       ccKqT: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto ccKue; else goto ccKud;
       ccKue: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       ccKud: // global
           _scHwn::I64 = I64[R1 + 7];
           I64[Hp - 56] = sat_scHwX_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = P64[Sp + 48];
           I64[Sp + 48] = block_ccKu7_info;
           R4 = Hp - 56;
           R3 = _scHwn::I64;
           R2 = 0;
           Sp = Sp + 48;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccKqT_info" {
     block_ccKqT_info:
         const _ccKqT;
         const 6;
         const 4294967326;
         const ScI2G_srt;
 },
 _ccKu7() //  [R1, R2]
         { []
         }
     {offset
       ccKu7: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccKuh; else goto ccKug;
       ccKuh: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccKug: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccKu7_info" {
     block_ccKu7_info:
         const _ccKu7;
         const 0;
         const 30;
 },
 sat_scHx2_entry() //  [R1]
         { []
         }
     {offset
       ccKuj: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto ccKun; else goto ccKum;
       ccKun: // global
           HpAlloc = 72;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKum: // global
           _scHva::P64 = P64[R1 + 16];
           _scHvb::P64 = P64[R1 + 24];
           _scHvc::P64 = P64[R1 + 32];
           _scHvd::P64 = P64[R1 + 40];
           _scHve::P64 = P64[R1 + 48];
           _scHwb::P64 = P64[R1 + 56];
           _scHwd::P64 = P64[R1 + 64];
           I64[Hp - 64] = sat_scHx1_info;
           P64[Hp - 48] = _scHva::P64;
           P64[Hp - 40] = _scHvb::P64;
           P64[Hp - 32] = _scHvc::P64;
           P64[Hp - 24] = _scHvd::P64;
           P64[Hp - 16] = _scHve::P64;
           P64[Hp - 8] = _scHwb::P64;
           P64[Hp] = _scHwd::P64;
           R3 = Hp - 64;
           R2 = lvl31_rcHq0_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHx2_info" {
     sat_scHx2_info:
         const sat_scHx2_entry;
         const 7;
         const 4294967311;
         const ScI2G_srt;
 },
 sat_scHx3_entry() //  [R1]
         { []
         }
     {offset
       ccKuo: // global
           _scHx3::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccKup; else goto ccKuq;
       ccKuq: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto ccKus; else goto ccKur;
       ccKus: // global
           HpAlloc = 72;
           goto ccKup;
       ccKup: // global
           R1 = _scHx3::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKur: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scHx3::P64;
           _scHva::P64 = P64[_scHx3::P64 + 16];
           _scHvb::P64 = P64[_scHx3::P64 + 24];
           _scHvc::P64 = P64[_scHx3::P64 + 32];
           _scHvd::P64 = P64[_scHx3::P64 + 40];
           _scHve::P64 = P64[_scHx3::P64 + 48];
           _scHwb::P64 = P64[_scHx3::P64 + 56];
           _scHwd::P64 = P64[_scHx3::P64 + 64];
           I64[Hp - 64] = sat_scHx2_info;
           P64[Hp - 48] = _scHva::P64;
           P64[Hp - 40] = _scHvb::P64;
           P64[Hp - 32] = _scHvc::P64;
           P64[Hp - 24] = _scHvd::P64;
           P64[Hp - 16] = _scHve::P64;
           P64[Hp - 8] = _scHwb::P64;
           P64[Hp] = _scHwd::P64;
           R3 = Hp - 64;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHx3_info" {
     sat_scHx3_info:
         const sat_scHx3_entry;
         const 7;
         const 4294967311;
         const ScI2G_srt;
 },
 sat_scHx7_entry() //  [R1]
         { []
         }
     {offset
       ccKut: // global
           if ((Sp + -80) < SpLim) (likely: False) goto ccKux; else goto ccKuy;
       ccKux: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKuy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 80] = block_ccKqC_info;
           _scHva::P64 = P64[R1 + 24];
           _scHvb::P64 = P64[R1 + 32];
           _scHvc::P64 = P64[R1 + 40];
           _scHvd::P64 = P64[R1 + 48];
           _scHve::P64 = P64[R1 + 56];
           _scHwb::P64 = P64[R1 + 64];
           _scHwd::P64 = P64[R1 + 72];
           R1 = P64[R1 + 16];
           P64[Sp - 72] = _scHva::P64;
           P64[Sp - 64] = _scHvb::P64;
           P64[Sp - 56] = _scHvc::P64;
           P64[Sp - 48] = _scHvd::P64;
           P64[Sp - 40] = _scHve::P64;
           P64[Sp - 32] = _scHwb::P64;
           P64[Sp - 24] = _scHwd::P64;
           Sp = Sp - 80;
           if (R1 & 7 != 0) goto ucKuF; else goto ccKqD;
       ucKuF: // global
           call _ccKqC(R1) args: 0, res: 0, upd: 0;
       ccKqD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHx7_info" {
     sat_scHx7_info:
         const sat_scHx7_entry;
         const 8;
         const 4294967311;
         const ScI2G_srt;
 },
 _ccKqC() //  [R1]
         { []
         }
     {offset
       ccKqC: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto ccKuB; else goto ccKuA;
       ccKuB: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       ccKuA: // global
           _scHwl::I64 = I64[R1 + 7];
           I64[Hp - 64] = sat_scHx3_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = P64[Sp + 40];
           P64[Hp - 8] = P64[Sp + 48];
           P64[Hp] = P64[Sp + 56];
           I64[Sp + 56] = block_ccKuu_info;
           R4 = Hp - 64;
           R3 = _scHwl::I64;
           R2 = 0;
           Sp = Sp + 56;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccKqC_info" {
     block_ccKqC_info:
         const _ccKqC;
         const 7;
         const 4294967326;
         const ScI2G_srt;
 },
 _ccKuu() //  [R1, R2]
         { []
         }
     {offset
       ccKuu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccKuE; else goto ccKuD;
       ccKuE: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccKuD: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccKuu_info" {
     block_ccKuu_info:
         const _ccKuu;
         const 0;
         const 30;
 },
 sat_scHx8_entry() //  [R1]
         { []
         }
     {offset
       ccKuG: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto ccKuK; else goto ccKuJ;
       ccKuK: // global
           HpAlloc = 80;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKuJ: // global
           _scHv9::P64 = P64[R1 + 16];
           _scHva::P64 = P64[R1 + 24];
           _scHvb::P64 = P64[R1 + 32];
           _scHvc::P64 = P64[R1 + 40];
           _scHvd::P64 = P64[R1 + 48];
           _scHve::P64 = P64[R1 + 56];
           _scHwb::P64 = P64[R1 + 64];
           _scHwd::P64 = P64[R1 + 72];
           I64[Hp - 72] = sat_scHx7_info;
           P64[Hp - 56] = _scHv9::P64;
           P64[Hp - 48] = _scHva::P64;
           P64[Hp - 40] = _scHvb::P64;
           P64[Hp - 32] = _scHvc::P64;
           P64[Hp - 24] = _scHvd::P64;
           P64[Hp - 16] = _scHve::P64;
           P64[Hp - 8] = _scHwb::P64;
           P64[Hp] = _scHwd::P64;
           R3 = Hp - 72;
           R2 = lvl30_rcHpZ_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHx8_info" {
     sat_scHx8_info:
         const sat_scHx8_entry;
         const 8;
         const 4294967311;
         const ScI2G_srt;
 },
 sat_scHx9_entry() //  [R1]
         { []
         }
     {offset
       ccKuL: // global
           _scHx9::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccKuM; else goto ccKuN;
       ccKuN: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto ccKuP; else goto ccKuO;
       ccKuP: // global
           HpAlloc = 80;
           goto ccKuM;
       ccKuM: // global
           R1 = _scHx9::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKuO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scHx9::P64;
           _scHv9::P64 = P64[_scHx9::P64 + 16];
           _scHva::P64 = P64[_scHx9::P64 + 24];
           _scHvb::P64 = P64[_scHx9::P64 + 32];
           _scHvc::P64 = P64[_scHx9::P64 + 40];
           _scHvd::P64 = P64[_scHx9::P64 + 48];
           _scHve::P64 = P64[_scHx9::P64 + 56];
           _scHwb::P64 = P64[_scHx9::P64 + 64];
           _scHwd::P64 = P64[_scHx9::P64 + 72];
           I64[Hp - 72] = sat_scHx8_info;
           P64[Hp - 56] = _scHv9::P64;
           P64[Hp - 48] = _scHva::P64;
           P64[Hp - 40] = _scHvb::P64;
           P64[Hp - 32] = _scHvc::P64;
           P64[Hp - 24] = _scHvd::P64;
           P64[Hp - 16] = _scHve::P64;
           P64[Hp - 8] = _scHwb::P64;
           P64[Hp] = _scHwd::P64;
           R3 = Hp - 72;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHx9_info" {
     sat_scHx9_info:
         const sat_scHx9_entry;
         const 8;
         const 4294967311;
         const ScI2G_srt;
 },
 sat_scHxd_entry() //  [R1]
         { []
         }
     {offset
       ccKuT: // global
           _scHxd::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto ccKuU; else goto ccKuV;
       ccKuV: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto ccKuX; else goto ccKuW;
       ccKuX: // global
           HpAlloc = 80;
           goto ccKuU;
       ccKuU: // global
           R1 = _scHxd::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKuW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scHxd::P64;
           _scHv9::P64 = P64[_scHxd::P64 + 16];
           _scHva::P64 = P64[_scHxd::P64 + 24];
           _scHvb::P64 = P64[_scHxd::P64 + 32];
           _scHvc::P64 = P64[_scHxd::P64 + 40];
           _scHvd::P64 = P64[_scHxd::P64 + 48];
           _scHve::P64 = P64[_scHxd::P64 + 56];
           _scHw6::P64 = P64[_scHxd::P64 + 64];
           _scHwb::P64 = P64[_scHxd::P64 + 72];
           _scHwd::P64 = P64[_scHxd::P64 + 80];
           I64[Hp - 72] = sat_scHx9_info;
           P64[Hp - 56] = _scHv9::P64;
           P64[Hp - 48] = _scHva::P64;
           P64[Hp - 40] = _scHvb::P64;
           P64[Hp - 32] = _scHvc::P64;
           P64[Hp - 24] = _scHvd::P64;
           P64[Hp - 16] = _scHve::P64;
           P64[Hp - 8] = _scHwb::P64;
           P64[Hp] = _scHwd::P64;
           I64[Sp - 24] = block_ccKuQ_info;
           R4 = Hp - 72;
           R3 = _scHw6::P64;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHxd_info" {
     sat_scHxd_info:
         const sat_scHxd_entry;
         const 9;
         const 12884901903;
         const ScI2G_srt;
 },
 _ccKuQ() //  [R1, R2]
         { []
         }
     {offset
       ccKuQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccKv0; else goto ccKuZ;
       ccKv0: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccKuZ: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccKuQ_info" {
     block_ccKuQ_info:
         const _ccKuQ;
         const 0;
         const 30;
 },
 sat_scHxe_entry() //  [R1]
         { []
         }
     {offset
       ccKv1: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto ccKv5; else goto ccKv4;
       ccKv5: // global
           HpAlloc = 88;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKv4: // global
           _scHv9::P64 = P64[R1 + 16];
           _scHva::P64 = P64[R1 + 24];
           _scHvb::P64 = P64[R1 + 32];
           _scHvc::P64 = P64[R1 + 40];
           _scHvd::P64 = P64[R1 + 48];
           _scHve::P64 = P64[R1 + 56];
           _scHw6::P64 = P64[R1 + 64];
           _scHwb::P64 = P64[R1 + 72];
           _scHwd::P64 = P64[R1 + 80];
           I64[Hp - 80] = sat_scHxd_info;
           P64[Hp - 64] = _scHv9::P64;
           P64[Hp - 56] = _scHva::P64;
           P64[Hp - 48] = _scHvb::P64;
           P64[Hp - 40] = _scHvc::P64;
           P64[Hp - 32] = _scHvd::P64;
           P64[Hp - 24] = _scHve::P64;
           P64[Hp - 16] = _scHw6::P64;
           P64[Hp - 8] = _scHwb::P64;
           P64[Hp] = _scHwd::P64;
           R3 = Hp - 80;
           R2 = lvl29_rcHpY_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHxe_info" {
     sat_scHxe_info:
         const sat_scHxe_entry;
         const 9;
         const 12884901903;
         const ScI2G_srt;
 },
 sat_scHxf_entry() //  [R1]
         { []
         }
     {offset
       ccKv6: // global
           _scHxf::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccKv7; else goto ccKv8;
       ccKv8: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto ccKva; else goto ccKv9;
       ccKva: // global
           HpAlloc = 88;
           goto ccKv7;
       ccKv7: // global
           R1 = _scHxf::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKv9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scHxf::P64;
           _scHv9::P64 = P64[_scHxf::P64 + 16];
           _scHva::P64 = P64[_scHxf::P64 + 24];
           _scHvb::P64 = P64[_scHxf::P64 + 32];
           _scHvc::P64 = P64[_scHxf::P64 + 40];
           _scHvd::P64 = P64[_scHxf::P64 + 48];
           _scHve::P64 = P64[_scHxf::P64 + 56];
           _scHw6::P64 = P64[_scHxf::P64 + 64];
           _scHwb::P64 = P64[_scHxf::P64 + 72];
           _scHwd::P64 = P64[_scHxf::P64 + 80];
           I64[Hp - 80] = sat_scHxe_info;
           P64[Hp - 64] = _scHv9::P64;
           P64[Hp - 56] = _scHva::P64;
           P64[Hp - 48] = _scHvb::P64;
           P64[Hp - 40] = _scHvc::P64;
           P64[Hp - 32] = _scHvd::P64;
           P64[Hp - 24] = _scHve::P64;
           P64[Hp - 16] = _scHw6::P64;
           P64[Hp - 8] = _scHwb::P64;
           P64[Hp] = _scHwd::P64;
           R3 = Hp - 80;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHxf_info" {
     sat_scHxf_info:
         const sat_scHxf_entry;
         const 9;
         const 12884901903;
         const ScI2G_srt;
 },
 sat_scHxj_entry() //  [R1]
         { []
         }
     {offset
       ccKve: // global
           _scHxj::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto ccKvf; else goto ccKvg;
       ccKvg: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto ccKvi; else goto ccKvh;
       ccKvi: // global
           HpAlloc = 88;
           goto ccKvf;
       ccKvf: // global
           R1 = _scHxj::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKvh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scHxj::P64;
           _scHv9::P64 = P64[_scHxj::P64 + 16];
           _scHva::P64 = P64[_scHxj::P64 + 24];
           _scHvb::P64 = P64[_scHxj::P64 + 32];
           _scHvc::P64 = P64[_scHxj::P64 + 40];
           _scHvd::P64 = P64[_scHxj::P64 + 48];
           _scHve::P64 = P64[_scHxj::P64 + 56];
           _scHw1::P64 = P64[_scHxj::P64 + 64];
           _scHw6::P64 = P64[_scHxj::P64 + 72];
           _scHwb::P64 = P64[_scHxj::P64 + 80];
           _scHwd::P64 = P64[_scHxj::P64 + 88];
           I64[Hp - 80] = sat_scHxf_info;
           P64[Hp - 64] = _scHv9::P64;
           P64[Hp - 56] = _scHva::P64;
           P64[Hp - 48] = _scHvb::P64;
           P64[Hp - 40] = _scHvc::P64;
           P64[Hp - 32] = _scHvd::P64;
           P64[Hp - 24] = _scHve::P64;
           P64[Hp - 16] = _scHw6::P64;
           P64[Hp - 8] = _scHwb::P64;
           P64[Hp] = _scHwd::P64;
           I64[Sp - 24] = block_ccKvb_info;
           R4 = Hp - 80;
           R3 = _scHw1::P64;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHxj_info" {
     sat_scHxj_info:
         const sat_scHxj_entry;
         const 10;
         const 12884901903;
         const ScI2G_srt;
 },
 _ccKvb() //  [R1, R2]
         { []
         }
     {offset
       ccKvb: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccKvl; else goto ccKvk;
       ccKvl: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccKvk: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccKvb_info" {
     block_ccKvb_info:
         const _ccKvb;
         const 0;
         const 30;
 },
 sat_scHxk_entry() //  [R1]
         { []
         }
     {offset
       ccKvm: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto ccKvq; else goto ccKvp;
       ccKvq: // global
           HpAlloc = 96;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKvp: // global
           _scHv9::P64 = P64[R1 + 16];
           _scHva::P64 = P64[R1 + 24];
           _scHvb::P64 = P64[R1 + 32];
           _scHvc::P64 = P64[R1 + 40];
           _scHvd::P64 = P64[R1 + 48];
           _scHve::P64 = P64[R1 + 56];
           _scHw1::P64 = P64[R1 + 64];
           _scHw6::P64 = P64[R1 + 72];
           _scHwb::P64 = P64[R1 + 80];
           _scHwd::P64 = P64[R1 + 88];
           I64[Hp - 88] = sat_scHxj_info;
           P64[Hp - 72] = _scHv9::P64;
           P64[Hp - 64] = _scHva::P64;
           P64[Hp - 56] = _scHvb::P64;
           P64[Hp - 48] = _scHvc::P64;
           P64[Hp - 40] = _scHvd::P64;
           P64[Hp - 32] = _scHve::P64;
           P64[Hp - 24] = _scHw1::P64;
           P64[Hp - 16] = _scHw6::P64;
           P64[Hp - 8] = _scHwb::P64;
           P64[Hp] = _scHwd::P64;
           R3 = Hp - 88;
           R2 = lvl28_rcHpX_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHxk_info" {
     sat_scHxk_info:
         const sat_scHxk_entry;
         const 10;
         const 12884901903;
         const ScI2G_srt;
 },
 sat_scHxl_entry() //  [R1]
         { []
         }
     {offset
       ccKvr: // global
           _scHxl::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccKvs; else goto ccKvt;
       ccKvt: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto ccKvv; else goto ccKvu;
       ccKvv: // global
           HpAlloc = 96;
           goto ccKvs;
       ccKvs: // global
           R1 = _scHxl::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKvu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scHxl::P64;
           _scHv9::P64 = P64[_scHxl::P64 + 16];
           _scHva::P64 = P64[_scHxl::P64 + 24];
           _scHvb::P64 = P64[_scHxl::P64 + 32];
           _scHvc::P64 = P64[_scHxl::P64 + 40];
           _scHvd::P64 = P64[_scHxl::P64 + 48];
           _scHve::P64 = P64[_scHxl::P64 + 56];
           _scHw1::P64 = P64[_scHxl::P64 + 64];
           _scHw6::P64 = P64[_scHxl::P64 + 72];
           _scHwb::P64 = P64[_scHxl::P64 + 80];
           _scHwd::P64 = P64[_scHxl::P64 + 88];
           I64[Hp - 88] = sat_scHxk_info;
           P64[Hp - 72] = _scHv9::P64;
           P64[Hp - 64] = _scHva::P64;
           P64[Hp - 56] = _scHvb::P64;
           P64[Hp - 48] = _scHvc::P64;
           P64[Hp - 40] = _scHvd::P64;
           P64[Hp - 32] = _scHve::P64;
           P64[Hp - 24] = _scHw1::P64;
           P64[Hp - 16] = _scHw6::P64;
           P64[Hp - 8] = _scHwb::P64;
           P64[Hp] = _scHwd::P64;
           R3 = Hp - 88;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHxl_info" {
     sat_scHxl_info:
         const sat_scHxl_entry;
         const 10;
         const 12884901903;
         const ScI2G_srt;
 },
 sat_scHxp_entry() //  [R1]
         { []
         }
     {offset
       ccKvz: // global
           _scHxp::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto ccKvA; else goto ccKvB;
       ccKvB: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto ccKvD; else goto ccKvC;
       ccKvD: // global
           HpAlloc = 96;
           goto ccKvA;
       ccKvA: // global
           R1 = _scHxp::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKvC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scHxp::P64;
           _scHv9::P64 = P64[_scHxp::P64 + 16];
           _scHva::P64 = P64[_scHxp::P64 + 24];
           _scHvb::P64 = P64[_scHxp::P64 + 32];
           _scHvc::P64 = P64[_scHxp::P64 + 40];
           _scHvd::P64 = P64[_scHxp::P64 + 48];
           _scHve::P64 = P64[_scHxp::P64 + 56];
           _scHvW::P64 = P64[_scHxp::P64 + 64];
           _scHw1::P64 = P64[_scHxp::P64 + 72];
           _scHw6::P64 = P64[_scHxp::P64 + 80];
           _scHwb::P64 = P64[_scHxp::P64 + 88];
           _scHwd::P64 = P64[_scHxp::P64 + 96];
           I64[Hp - 88] = sat_scHxl_info;
           P64[Hp - 72] = _scHv9::P64;
           P64[Hp - 64] = _scHva::P64;
           P64[Hp - 56] = _scHvb::P64;
           P64[Hp - 48] = _scHvc::P64;
           P64[Hp - 40] = _scHvd::P64;
           P64[Hp - 32] = _scHve::P64;
           P64[Hp - 24] = _scHw1::P64;
           P64[Hp - 16] = _scHw6::P64;
           P64[Hp - 8] = _scHwb::P64;
           P64[Hp] = _scHwd::P64;
           I64[Sp - 24] = block_ccKvw_info;
           R4 = Hp - 88;
           R3 = _scHvW::P64;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHxp_info" {
     sat_scHxp_info:
         const sat_scHxp_entry;
         const 11;
         const 12884901903;
         const ScI2G_srt;
 },
 _ccKvw() //  [R1, R2]
         { []
         }
     {offset
       ccKvw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccKvG; else goto ccKvF;
       ccKvG: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccKvF: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccKvw_info" {
     block_ccKvw_info:
         const _ccKvw;
         const 0;
         const 30;
 },
 sat_scHxq_entry() //  [R1]
         { []
         }
     {offset
       ccKvH: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto ccKvL; else goto ccKvK;
       ccKvL: // global
           HpAlloc = 104;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKvK: // global
           _scHv9::P64 = P64[R1 + 16];
           _scHva::P64 = P64[R1 + 24];
           _scHvb::P64 = P64[R1 + 32];
           _scHvc::P64 = P64[R1 + 40];
           _scHvd::P64 = P64[R1 + 48];
           _scHve::P64 = P64[R1 + 56];
           _scHvW::P64 = P64[R1 + 64];
           _scHw1::P64 = P64[R1 + 72];
           _scHw6::P64 = P64[R1 + 80];
           _scHwb::P64 = P64[R1 + 88];
           _scHwd::P64 = P64[R1 + 96];
           I64[Hp - 96] = sat_scHxp_info;
           P64[Hp - 80] = _scHv9::P64;
           P64[Hp - 72] = _scHva::P64;
           P64[Hp - 64] = _scHvb::P64;
           P64[Hp - 56] = _scHvc::P64;
           P64[Hp - 48] = _scHvd::P64;
           P64[Hp - 40] = _scHve::P64;
           P64[Hp - 32] = _scHvW::P64;
           P64[Hp - 24] = _scHw1::P64;
           P64[Hp - 16] = _scHw6::P64;
           P64[Hp - 8] = _scHwb::P64;
           P64[Hp] = _scHwd::P64;
           R3 = Hp - 96;
           R2 = lvl27_rcHpW_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHxq_info" {
     sat_scHxq_info:
         const sat_scHxq_entry;
         const 11;
         const 12884901903;
         const ScI2G_srt;
 },
 sat_scHxr_entry() //  [R1]
         { []
         }
     {offset
       ccKvM: // global
           _scHxr::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccKvN; else goto ccKvO;
       ccKvO: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto ccKvQ; else goto ccKvP;
       ccKvQ: // global
           HpAlloc = 104;
           goto ccKvN;
       ccKvN: // global
           R1 = _scHxr::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKvP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scHxr::P64;
           _scHv9::P64 = P64[_scHxr::P64 + 16];
           _scHva::P64 = P64[_scHxr::P64 + 24];
           _scHvb::P64 = P64[_scHxr::P64 + 32];
           _scHvc::P64 = P64[_scHxr::P64 + 40];
           _scHvd::P64 = P64[_scHxr::P64 + 48];
           _scHve::P64 = P64[_scHxr::P64 + 56];
           _scHvW::P64 = P64[_scHxr::P64 + 64];
           _scHw1::P64 = P64[_scHxr::P64 + 72];
           _scHw6::P64 = P64[_scHxr::P64 + 80];
           _scHwb::P64 = P64[_scHxr::P64 + 88];
           _scHwd::P64 = P64[_scHxr::P64 + 96];
           I64[Hp - 96] = sat_scHxq_info;
           P64[Hp - 80] = _scHv9::P64;
           P64[Hp - 72] = _scHva::P64;
           P64[Hp - 64] = _scHvb::P64;
           P64[Hp - 56] = _scHvc::P64;
           P64[Hp - 48] = _scHvd::P64;
           P64[Hp - 40] = _scHve::P64;
           P64[Hp - 32] = _scHvW::P64;
           P64[Hp - 24] = _scHw1::P64;
           P64[Hp - 16] = _scHw6::P64;
           P64[Hp - 8] = _scHwb::P64;
           P64[Hp] = _scHwd::P64;
           R3 = Hp - 96;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHxr_info" {
     sat_scHxr_info:
         const sat_scHxr_entry;
         const 11;
         const 12884901903;
         const ScI2G_srt;
 },
 sat_scHxv_entry() //  [R1]
         { []
         }
     {offset
       ccKvU: // global
           _scHxv::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto ccKvV; else goto ccKvW;
       ccKvW: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto ccKvY; else goto ccKvX;
       ccKvY: // global
           HpAlloc = 104;
           goto ccKvV;
       ccKvV: // global
           R1 = _scHxv::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKvX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scHxv::P64;
           _scHv9::P64 = P64[_scHxv::P64 + 16];
           _scHva::P64 = P64[_scHxv::P64 + 24];
           _scHvb::P64 = P64[_scHxv::P64 + 32];
           _scHvc::P64 = P64[_scHxv::P64 + 40];
           _scHvd::P64 = P64[_scHxv::P64 + 48];
           _scHve::P64 = P64[_scHxv::P64 + 56];
           _scHvR::P64 = P64[_scHxv::P64 + 64];
           _scHvW::P64 = P64[_scHxv::P64 + 72];
           _scHw1::P64 = P64[_scHxv::P64 + 80];
           _scHw6::P64 = P64[_scHxv::P64 + 88];
           _scHwb::P64 = P64[_scHxv::P64 + 96];
           _scHwd::P64 = P64[_scHxv::P64 + 104];
           I64[Hp - 96] = sat_scHxr_info;
           P64[Hp - 80] = _scHv9::P64;
           P64[Hp - 72] = _scHva::P64;
           P64[Hp - 64] = _scHvb::P64;
           P64[Hp - 56] = _scHvc::P64;
           P64[Hp - 48] = _scHvd::P64;
           P64[Hp - 40] = _scHve::P64;
           P64[Hp - 32] = _scHvW::P64;
           P64[Hp - 24] = _scHw1::P64;
           P64[Hp - 16] = _scHw6::P64;
           P64[Hp - 8] = _scHwb::P64;
           P64[Hp] = _scHwd::P64;
           I64[Sp - 24] = block_ccKvR_info;
           R4 = Hp - 96;
           R3 = _scHvR::P64;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHxv_info" {
     sat_scHxv_info:
         const sat_scHxv_entry;
         const 12;
         const 12884901903;
         const ScI2G_srt;
 },
 _ccKvR() //  [R1, R2]
         { []
         }
     {offset
       ccKvR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccKw1; else goto ccKw0;
       ccKw1: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccKw0: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccKvR_info" {
     block_ccKvR_info:
         const _ccKvR;
         const 0;
         const 30;
 },
 sat_scHxw_entry() //  [R1]
         { []
         }
     {offset
       ccKw2: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto ccKw6; else goto ccKw5;
       ccKw6: // global
           HpAlloc = 112;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKw5: // global
           _scHv9::P64 = P64[R1 + 16];
           _scHva::P64 = P64[R1 + 24];
           _scHvb::P64 = P64[R1 + 32];
           _scHvc::P64 = P64[R1 + 40];
           _scHvd::P64 = P64[R1 + 48];
           _scHve::P64 = P64[R1 + 56];
           _scHvR::P64 = P64[R1 + 64];
           _scHvW::P64 = P64[R1 + 72];
           _scHw1::P64 = P64[R1 + 80];
           _scHw6::P64 = P64[R1 + 88];
           _scHwb::P64 = P64[R1 + 96];
           _scHwd::P64 = P64[R1 + 104];
           I64[Hp - 104] = sat_scHxv_info;
           P64[Hp - 88] = _scHv9::P64;
           P64[Hp - 80] = _scHva::P64;
           P64[Hp - 72] = _scHvb::P64;
           P64[Hp - 64] = _scHvc::P64;
           P64[Hp - 56] = _scHvd::P64;
           P64[Hp - 48] = _scHve::P64;
           P64[Hp - 40] = _scHvR::P64;
           P64[Hp - 32] = _scHvW::P64;
           P64[Hp - 24] = _scHw1::P64;
           P64[Hp - 16] = _scHw6::P64;
           P64[Hp - 8] = _scHwb::P64;
           P64[Hp] = _scHwd::P64;
           R3 = Hp - 104;
           R2 = lvl26_rcHpV_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHxw_info" {
     sat_scHxw_info:
         const sat_scHxw_entry;
         const 12;
         const 12884901903;
         const ScI2G_srt;
 },
 sat_scHxx_entry() //  [R1]
         { []
         }
     {offset
       ccKw7: // global
           _scHxx::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccKw8; else goto ccKw9;
       ccKw9: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto ccKwb; else goto ccKwa;
       ccKwb: // global
           HpAlloc = 112;
           goto ccKw8;
       ccKw8: // global
           R1 = _scHxx::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKwa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scHxx::P64;
           _scHv9::P64 = P64[_scHxx::P64 + 16];
           _scHva::P64 = P64[_scHxx::P64 + 24];
           _scHvb::P64 = P64[_scHxx::P64 + 32];
           _scHvc::P64 = P64[_scHxx::P64 + 40];
           _scHvd::P64 = P64[_scHxx::P64 + 48];
           _scHve::P64 = P64[_scHxx::P64 + 56];
           _scHvR::P64 = P64[_scHxx::P64 + 64];
           _scHvW::P64 = P64[_scHxx::P64 + 72];
           _scHw1::P64 = P64[_scHxx::P64 + 80];
           _scHw6::P64 = P64[_scHxx::P64 + 88];
           _scHwb::P64 = P64[_scHxx::P64 + 96];
           _scHwd::P64 = P64[_scHxx::P64 + 104];
           I64[Hp - 104] = sat_scHxw_info;
           P64[Hp - 88] = _scHv9::P64;
           P64[Hp - 80] = _scHva::P64;
           P64[Hp - 72] = _scHvb::P64;
           P64[Hp - 64] = _scHvc::P64;
           P64[Hp - 56] = _scHvd::P64;
           P64[Hp - 48] = _scHve::P64;
           P64[Hp - 40] = _scHvR::P64;
           P64[Hp - 32] = _scHvW::P64;
           P64[Hp - 24] = _scHw1::P64;
           P64[Hp - 16] = _scHw6::P64;
           P64[Hp - 8] = _scHwb::P64;
           P64[Hp] = _scHwd::P64;
           R3 = Hp - 104;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHxx_info" {
     sat_scHxx_info:
         const sat_scHxx_entry;
         const 12;
         const 12884901903;
         const ScI2G_srt;
 },
 sat_scHxB_entry() //  [R1]
         { []
         }
     {offset
       ccKwf: // global
           _scHxB::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto ccKwg; else goto ccKwh;
       ccKwh: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto ccKwj; else goto ccKwi;
       ccKwj: // global
           HpAlloc = 112;
           goto ccKwg;
       ccKwg: // global
           R1 = _scHxB::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKwi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scHxB::P64;
           _scHv9::P64 = P64[_scHxB::P64 + 16];
           _scHva::P64 = P64[_scHxB::P64 + 24];
           _scHvb::P64 = P64[_scHxB::P64 + 32];
           _scHvc::P64 = P64[_scHxB::P64 + 40];
           _scHvd::P64 = P64[_scHxB::P64 + 48];
           _scHve::P64 = P64[_scHxB::P64 + 56];
           _scHvM::P64 = P64[_scHxB::P64 + 64];
           _scHvR::P64 = P64[_scHxB::P64 + 72];
           _scHvW::P64 = P64[_scHxB::P64 + 80];
           _scHw1::P64 = P64[_scHxB::P64 + 88];
           _scHw6::P64 = P64[_scHxB::P64 + 96];
           _scHwb::P64 = P64[_scHxB::P64 + 104];
           _scHwd::P64 = P64[_scHxB::P64 + 112];
           I64[Hp - 104] = sat_scHxx_info;
           P64[Hp - 88] = _scHv9::P64;
           P64[Hp - 80] = _scHva::P64;
           P64[Hp - 72] = _scHvb::P64;
           P64[Hp - 64] = _scHvc::P64;
           P64[Hp - 56] = _scHvd::P64;
           P64[Hp - 48] = _scHve::P64;
           P64[Hp - 40] = _scHvR::P64;
           P64[Hp - 32] = _scHvW::P64;
           P64[Hp - 24] = _scHw1::P64;
           P64[Hp - 16] = _scHw6::P64;
           P64[Hp - 8] = _scHwb::P64;
           P64[Hp] = _scHwd::P64;
           I64[Sp - 24] = block_ccKwc_info;
           R4 = Hp - 104;
           R3 = _scHvM::P64;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHxB_info" {
     sat_scHxB_info:
         const sat_scHxB_entry;
         const 13;
         const 12884901903;
         const ScI2G_srt;
 },
 _ccKwc() //  [R1, R2]
         { []
         }
     {offset
       ccKwc: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccKwm; else goto ccKwl;
       ccKwm: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccKwl: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccKwc_info" {
     block_ccKwc_info:
         const _ccKwc;
         const 0;
         const 30;
 },
 sat_scHxC_entry() //  [R1]
         { []
         }
     {offset
       ccKwn: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto ccKwr; else goto ccKwq;
       ccKwr: // global
           HpAlloc = 120;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKwq: // global
           _scHv9::P64 = P64[R1 + 16];
           _scHva::P64 = P64[R1 + 24];
           _scHvb::P64 = P64[R1 + 32];
           _scHvc::P64 = P64[R1 + 40];
           _scHvd::P64 = P64[R1 + 48];
           _scHve::P64 = P64[R1 + 56];
           _scHvM::P64 = P64[R1 + 64];
           _scHvR::P64 = P64[R1 + 72];
           _scHvW::P64 = P64[R1 + 80];
           _scHw1::P64 = P64[R1 + 88];
           _scHw6::P64 = P64[R1 + 96];
           _scHwb::P64 = P64[R1 + 104];
           _scHwd::P64 = P64[R1 + 112];
           I64[Hp - 112] = sat_scHxB_info;
           P64[Hp - 96] = _scHv9::P64;
           P64[Hp - 88] = _scHva::P64;
           P64[Hp - 80] = _scHvb::P64;
           P64[Hp - 72] = _scHvc::P64;
           P64[Hp - 64] = _scHvd::P64;
           P64[Hp - 56] = _scHve::P64;
           P64[Hp - 48] = _scHvM::P64;
           P64[Hp - 40] = _scHvR::P64;
           P64[Hp - 32] = _scHvW::P64;
           P64[Hp - 24] = _scHw1::P64;
           P64[Hp - 16] = _scHw6::P64;
           P64[Hp - 8] = _scHwb::P64;
           P64[Hp] = _scHwd::P64;
           R3 = Hp - 112;
           R2 = lvl25_rcHpU_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHxC_info" {
     sat_scHxC_info:
         const sat_scHxC_entry;
         const 13;
         const 12884901903;
         const ScI2G_srt;
 },
 sat_scHxD_entry() //  [R1]
         { []
         }
     {offset
       ccKws: // global
           _scHxD::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccKwt; else goto ccKwu;
       ccKwu: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto ccKww; else goto ccKwv;
       ccKww: // global
           HpAlloc = 120;
           goto ccKwt;
       ccKwt: // global
           R1 = _scHxD::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKwv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scHxD::P64;
           _scHv9::P64 = P64[_scHxD::P64 + 16];
           _scHva::P64 = P64[_scHxD::P64 + 24];
           _scHvb::P64 = P64[_scHxD::P64 + 32];
           _scHvc::P64 = P64[_scHxD::P64 + 40];
           _scHvd::P64 = P64[_scHxD::P64 + 48];
           _scHve::P64 = P64[_scHxD::P64 + 56];
           _scHvM::P64 = P64[_scHxD::P64 + 64];
           _scHvR::P64 = P64[_scHxD::P64 + 72];
           _scHvW::P64 = P64[_scHxD::P64 + 80];
           _scHw1::P64 = P64[_scHxD::P64 + 88];
           _scHw6::P64 = P64[_scHxD::P64 + 96];
           _scHwb::P64 = P64[_scHxD::P64 + 104];
           _scHwd::P64 = P64[_scHxD::P64 + 112];
           I64[Hp - 112] = sat_scHxC_info;
           P64[Hp - 96] = _scHv9::P64;
           P64[Hp - 88] = _scHva::P64;
           P64[Hp - 80] = _scHvb::P64;
           P64[Hp - 72] = _scHvc::P64;
           P64[Hp - 64] = _scHvd::P64;
           P64[Hp - 56] = _scHve::P64;
           P64[Hp - 48] = _scHvM::P64;
           P64[Hp - 40] = _scHvR::P64;
           P64[Hp - 32] = _scHvW::P64;
           P64[Hp - 24] = _scHw1::P64;
           P64[Hp - 16] = _scHw6::P64;
           P64[Hp - 8] = _scHwb::P64;
           P64[Hp] = _scHwd::P64;
           R3 = Hp - 112;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHxD_info" {
     sat_scHxD_info:
         const sat_scHxD_entry;
         const 13;
         const 12884901903;
         const ScI2G_srt;
 },
 sat_scHxH_entry() //  [R1]
         { []
         }
     {offset
       ccKwA: // global
           _scHxH::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto ccKwB; else goto ccKwC;
       ccKwC: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto ccKwE; else goto ccKwD;
       ccKwE: // global
           HpAlloc = 120;
           goto ccKwB;
       ccKwB: // global
           R1 = _scHxH::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKwD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scHxH::P64;
           _scHv9::P64 = P64[_scHxH::P64 + 16];
           _scHva::P64 = P64[_scHxH::P64 + 24];
           _scHvb::P64 = P64[_scHxH::P64 + 32];
           _scHvc::P64 = P64[_scHxH::P64 + 40];
           _scHvd::P64 = P64[_scHxH::P64 + 48];
           _scHve::P64 = P64[_scHxH::P64 + 56];
           _scHvH::P64 = P64[_scHxH::P64 + 64];
           _scHvM::P64 = P64[_scHxH::P64 + 72];
           _scHvR::P64 = P64[_scHxH::P64 + 80];
           _scHvW::P64 = P64[_scHxH::P64 + 88];
           _scHw1::P64 = P64[_scHxH::P64 + 96];
           _scHw6::P64 = P64[_scHxH::P64 + 104];
           _scHwb::P64 = P64[_scHxH::P64 + 112];
           _scHwd::P64 = P64[_scHxH::P64 + 120];
           I64[Hp - 112] = sat_scHxD_info;
           P64[Hp - 96] = _scHv9::P64;
           P64[Hp - 88] = _scHva::P64;
           P64[Hp - 80] = _scHvb::P64;
           P64[Hp - 72] = _scHvc::P64;
           P64[Hp - 64] = _scHvd::P64;
           P64[Hp - 56] = _scHve::P64;
           P64[Hp - 48] = _scHvM::P64;
           P64[Hp - 40] = _scHvR::P64;
           P64[Hp - 32] = _scHvW::P64;
           P64[Hp - 24] = _scHw1::P64;
           P64[Hp - 16] = _scHw6::P64;
           P64[Hp - 8] = _scHwb::P64;
           P64[Hp] = _scHwd::P64;
           I64[Sp - 24] = block_ccKwx_info;
           R4 = Hp - 112;
           R3 = _scHvH::P64;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHxH_info" {
     sat_scHxH_info:
         const sat_scHxH_entry;
         const 14;
         const 12884901903;
         const ScI2G_srt;
 },
 _ccKwx() //  [R1, R2]
         { []
         }
     {offset
       ccKwx: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccKwH; else goto ccKwG;
       ccKwH: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccKwG: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccKwx_info" {
     block_ccKwx_info:
         const _ccKwx;
         const 0;
         const 30;
 },
 sat_scHxI_entry() //  [R1]
         { []
         }
     {offset
       ccKwI: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto ccKwM; else goto ccKwL;
       ccKwM: // global
           HpAlloc = 128;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKwL: // global
           _scHv9::P64 = P64[R1 + 16];
           _scHva::P64 = P64[R1 + 24];
           _scHvb::P64 = P64[R1 + 32];
           _scHvc::P64 = P64[R1 + 40];
           _scHvd::P64 = P64[R1 + 48];
           _scHve::P64 = P64[R1 + 56];
           _scHvH::P64 = P64[R1 + 64];
           _scHvM::P64 = P64[R1 + 72];
           _scHvR::P64 = P64[R1 + 80];
           _scHvW::P64 = P64[R1 + 88];
           _scHw1::P64 = P64[R1 + 96];
           _scHw6::P64 = P64[R1 + 104];
           _scHwb::P64 = P64[R1 + 112];
           _scHwd::P64 = P64[R1 + 120];
           I64[Hp - 120] = sat_scHxH_info;
           P64[Hp - 104] = _scHv9::P64;
           P64[Hp - 96] = _scHva::P64;
           P64[Hp - 88] = _scHvb::P64;
           P64[Hp - 80] = _scHvc::P64;
           P64[Hp - 72] = _scHvd::P64;
           P64[Hp - 64] = _scHve::P64;
           P64[Hp - 56] = _scHvH::P64;
           P64[Hp - 48] = _scHvM::P64;
           P64[Hp - 40] = _scHvR::P64;
           P64[Hp - 32] = _scHvW::P64;
           P64[Hp - 24] = _scHw1::P64;
           P64[Hp - 16] = _scHw6::P64;
           P64[Hp - 8] = _scHwb::P64;
           P64[Hp] = _scHwd::P64;
           R3 = Hp - 120;
           R2 = lvl24_rcHpT_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHxI_info" {
     sat_scHxI_info:
         const sat_scHxI_entry;
         const 14;
         const 12884901903;
         const ScI2G_srt;
 },
 sat_scHxJ_entry() //  [R1]
         { []
         }
     {offset
       ccKwN: // global
           _scHxJ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccKwO; else goto ccKwP;
       ccKwP: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto ccKwR; else goto ccKwQ;
       ccKwR: // global
           HpAlloc = 128;
           goto ccKwO;
       ccKwO: // global
           R1 = _scHxJ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKwQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scHxJ::P64;
           _scHv9::P64 = P64[_scHxJ::P64 + 16];
           _scHva::P64 = P64[_scHxJ::P64 + 24];
           _scHvb::P64 = P64[_scHxJ::P64 + 32];
           _scHvc::P64 = P64[_scHxJ::P64 + 40];
           _scHvd::P64 = P64[_scHxJ::P64 + 48];
           _scHve::P64 = P64[_scHxJ::P64 + 56];
           _scHvH::P64 = P64[_scHxJ::P64 + 64];
           _scHvM::P64 = P64[_scHxJ::P64 + 72];
           _scHvR::P64 = P64[_scHxJ::P64 + 80];
           _scHvW::P64 = P64[_scHxJ::P64 + 88];
           _scHw1::P64 = P64[_scHxJ::P64 + 96];
           _scHw6::P64 = P64[_scHxJ::P64 + 104];
           _scHwb::P64 = P64[_scHxJ::P64 + 112];
           _scHwd::P64 = P64[_scHxJ::P64 + 120];
           I64[Hp - 120] = sat_scHxI_info;
           P64[Hp - 104] = _scHv9::P64;
           P64[Hp - 96] = _scHva::P64;
           P64[Hp - 88] = _scHvb::P64;
           P64[Hp - 80] = _scHvc::P64;
           P64[Hp - 72] = _scHvd::P64;
           P64[Hp - 64] = _scHve::P64;
           P64[Hp - 56] = _scHvH::P64;
           P64[Hp - 48] = _scHvM::P64;
           P64[Hp - 40] = _scHvR::P64;
           P64[Hp - 32] = _scHvW::P64;
           P64[Hp - 24] = _scHw1::P64;
           P64[Hp - 16] = _scHw6::P64;
           P64[Hp - 8] = _scHwb::P64;
           P64[Hp] = _scHwd::P64;
           R3 = Hp - 120;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHxJ_info" {
     sat_scHxJ_info:
         const sat_scHxJ_entry;
         const 14;
         const 12884901903;
         const ScI2G_srt;
 },
 sat_scHxN_entry() //  [R1]
         { []
         }
     {offset
       ccKwV: // global
           _scHxN::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto ccKwW; else goto ccKwX;
       ccKwX: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto ccKwZ; else goto ccKwY;
       ccKwZ: // global
           HpAlloc = 128;
           goto ccKwW;
       ccKwW: // global
           R1 = _scHxN::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKwY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scHxN::P64;
           _scHv9::P64 = P64[_scHxN::P64 + 16];
           _scHva::P64 = P64[_scHxN::P64 + 24];
           _scHvb::P64 = P64[_scHxN::P64 + 32];
           _scHvc::P64 = P64[_scHxN::P64 + 40];
           _scHvd::P64 = P64[_scHxN::P64 + 48];
           _scHve::P64 = P64[_scHxN::P64 + 56];
           _scHvC::P64 = P64[_scHxN::P64 + 64];
           _scHvH::P64 = P64[_scHxN::P64 + 72];
           _scHvM::P64 = P64[_scHxN::P64 + 80];
           _scHvR::P64 = P64[_scHxN::P64 + 88];
           _scHvW::P64 = P64[_scHxN::P64 + 96];
           _scHw1::P64 = P64[_scHxN::P64 + 104];
           _scHw6::P64 = P64[_scHxN::P64 + 112];
           _scHwb::P64 = P64[_scHxN::P64 + 120];
           _scHwd::P64 = P64[_scHxN::P64 + 128];
           I64[Hp - 120] = sat_scHxJ_info;
           P64[Hp - 104] = _scHv9::P64;
           P64[Hp - 96] = _scHva::P64;
           P64[Hp - 88] = _scHvb::P64;
           P64[Hp - 80] = _scHvc::P64;
           P64[Hp - 72] = _scHvd::P64;
           P64[Hp - 64] = _scHve::P64;
           P64[Hp - 56] = _scHvH::P64;
           P64[Hp - 48] = _scHvM::P64;
           P64[Hp - 40] = _scHvR::P64;
           P64[Hp - 32] = _scHvW::P64;
           P64[Hp - 24] = _scHw1::P64;
           P64[Hp - 16] = _scHw6::P64;
           P64[Hp - 8] = _scHwb::P64;
           P64[Hp] = _scHwd::P64;
           I64[Sp - 24] = block_ccKwS_info;
           R4 = Hp - 120;
           R3 = _scHvC::P64;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHxN_info" {
     sat_scHxN_info:
         const sat_scHxN_entry;
         const 15;
         const 12884901903;
         const ScI2G_srt;
 },
 _ccKwS() //  [R1, R2]
         { []
         }
     {offset
       ccKwS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccKx2; else goto ccKx1;
       ccKx2: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccKx1: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccKwS_info" {
     block_ccKwS_info:
         const _ccKwS;
         const 0;
         const 30;
 },
 sat_scHxO_entry() //  [R1]
         { []
         }
     {offset
       ccKx3: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto ccKx7; else goto ccKx6;
       ccKx7: // global
           HpAlloc = 136;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKx6: // global
           _scHv9::P64 = P64[R1 + 16];
           _scHva::P64 = P64[R1 + 24];
           _scHvb::P64 = P64[R1 + 32];
           _scHvc::P64 = P64[R1 + 40];
           _scHvd::P64 = P64[R1 + 48];
           _scHve::P64 = P64[R1 + 56];
           _scHvC::P64 = P64[R1 + 64];
           _scHvH::P64 = P64[R1 + 72];
           _scHvM::P64 = P64[R1 + 80];
           _scHvR::P64 = P64[R1 + 88];
           _scHvW::P64 = P64[R1 + 96];
           _scHw1::P64 = P64[R1 + 104];
           _scHw6::P64 = P64[R1 + 112];
           _scHwb::P64 = P64[R1 + 120];
           _scHwd::P64 = P64[R1 + 128];
           I64[Hp - 128] = sat_scHxN_info;
           P64[Hp - 112] = _scHv9::P64;
           P64[Hp - 104] = _scHva::P64;
           P64[Hp - 96] = _scHvb::P64;
           P64[Hp - 88] = _scHvc::P64;
           P64[Hp - 80] = _scHvd::P64;
           P64[Hp - 72] = _scHve::P64;
           P64[Hp - 64] = _scHvC::P64;
           P64[Hp - 56] = _scHvH::P64;
           P64[Hp - 48] = _scHvM::P64;
           P64[Hp - 40] = _scHvR::P64;
           P64[Hp - 32] = _scHvW::P64;
           P64[Hp - 24] = _scHw1::P64;
           P64[Hp - 16] = _scHw6::P64;
           P64[Hp - 8] = _scHwb::P64;
           P64[Hp] = _scHwd::P64;
           R3 = Hp - 128;
           R2 = lvl23_rcHpS_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHxO_info" {
     sat_scHxO_info:
         const sat_scHxO_entry;
         const 15;
         const 12884901903;
         const ScI2G_srt;
 },
 sat_scHxP_entry() //  [R1]
         { []
         }
     {offset
       ccKx8: // global
           _scHxP::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccKx9; else goto ccKxa;
       ccKxa: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto ccKxc; else goto ccKxb;
       ccKxc: // global
           HpAlloc = 136;
           goto ccKx9;
       ccKx9: // global
           R1 = _scHxP::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKxb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scHxP::P64;
           _scHv9::P64 = P64[_scHxP::P64 + 16];
           _scHva::P64 = P64[_scHxP::P64 + 24];
           _scHvb::P64 = P64[_scHxP::P64 + 32];
           _scHvc::P64 = P64[_scHxP::P64 + 40];
           _scHvd::P64 = P64[_scHxP::P64 + 48];
           _scHve::P64 = P64[_scHxP::P64 + 56];
           _scHvC::P64 = P64[_scHxP::P64 + 64];
           _scHvH::P64 = P64[_scHxP::P64 + 72];
           _scHvM::P64 = P64[_scHxP::P64 + 80];
           _scHvR::P64 = P64[_scHxP::P64 + 88];
           _scHvW::P64 = P64[_scHxP::P64 + 96];
           _scHw1::P64 = P64[_scHxP::P64 + 104];
           _scHw6::P64 = P64[_scHxP::P64 + 112];
           _scHwb::P64 = P64[_scHxP::P64 + 120];
           _scHwd::P64 = P64[_scHxP::P64 + 128];
           I64[Hp - 128] = sat_scHxO_info;
           P64[Hp - 112] = _scHv9::P64;
           P64[Hp - 104] = _scHva::P64;
           P64[Hp - 96] = _scHvb::P64;
           P64[Hp - 88] = _scHvc::P64;
           P64[Hp - 80] = _scHvd::P64;
           P64[Hp - 72] = _scHve::P64;
           P64[Hp - 64] = _scHvC::P64;
           P64[Hp - 56] = _scHvH::P64;
           P64[Hp - 48] = _scHvM::P64;
           P64[Hp - 40] = _scHvR::P64;
           P64[Hp - 32] = _scHvW::P64;
           P64[Hp - 24] = _scHw1::P64;
           P64[Hp - 16] = _scHw6::P64;
           P64[Hp - 8] = _scHwb::P64;
           P64[Hp] = _scHwd::P64;
           R3 = Hp - 128;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHxP_info" {
     sat_scHxP_info:
         const sat_scHxP_entry;
         const 15;
         const 12884901903;
         const ScI2G_srt;
 },
 sat_scHxT_entry() //  [R1]
         { []
         }
     {offset
       ccKxg: // global
           _scHxT::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto ccKxh; else goto ccKxi;
       ccKxi: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto ccKxk; else goto ccKxj;
       ccKxk: // global
           HpAlloc = 136;
           goto ccKxh;
       ccKxh: // global
           R1 = _scHxT::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKxj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scHxT::P64;
           _scHv9::P64 = P64[_scHxT::P64 + 16];
           _scHva::P64 = P64[_scHxT::P64 + 24];
           _scHvb::P64 = P64[_scHxT::P64 + 32];
           _scHvc::P64 = P64[_scHxT::P64 + 40];
           _scHvd::P64 = P64[_scHxT::P64 + 48];
           _scHve::P64 = P64[_scHxT::P64 + 56];
           _scHvx::P64 = P64[_scHxT::P64 + 64];
           _scHvC::P64 = P64[_scHxT::P64 + 72];
           _scHvH::P64 = P64[_scHxT::P64 + 80];
           _scHvM::P64 = P64[_scHxT::P64 + 88];
           _scHvR::P64 = P64[_scHxT::P64 + 96];
           _scHvW::P64 = P64[_scHxT::P64 + 104];
           _scHw1::P64 = P64[_scHxT::P64 + 112];
           _scHw6::P64 = P64[_scHxT::P64 + 120];
           _scHwb::P64 = P64[_scHxT::P64 + 128];
           _scHwd::P64 = P64[_scHxT::P64 + 136];
           I64[Hp - 128] = sat_scHxP_info;
           P64[Hp - 112] = _scHv9::P64;
           P64[Hp - 104] = _scHva::P64;
           P64[Hp - 96] = _scHvb::P64;
           P64[Hp - 88] = _scHvc::P64;
           P64[Hp - 80] = _scHvd::P64;
           P64[Hp - 72] = _scHve::P64;
           P64[Hp - 64] = _scHvC::P64;
           P64[Hp - 56] = _scHvH::P64;
           P64[Hp - 48] = _scHvM::P64;
           P64[Hp - 40] = _scHvR::P64;
           P64[Hp - 32] = _scHvW::P64;
           P64[Hp - 24] = _scHw1::P64;
           P64[Hp - 16] = _scHw6::P64;
           P64[Hp - 8] = _scHwb::P64;
           P64[Hp] = _scHwd::P64;
           I64[Sp - 24] = block_ccKxd_info;
           R4 = Hp - 128;
           R3 = _scHvx::P64;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHxT_info" {
     sat_scHxT_info:
         const sat_scHxT_entry;
         const 16;
         const 12884901903;
         const ScI2G_srt;
 },
 _ccKxd() //  [R1, R2]
         { []
         }
     {offset
       ccKxd: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccKxn; else goto ccKxm;
       ccKxn: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccKxm: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccKxd_info" {
     block_ccKxd_info:
         const _ccKxd;
         const 0;
         const 30;
 },
 sat_scHxU_entry() //  [R1]
         { []
         }
     {offset
       ccKxo: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto ccKxs; else goto ccKxr;
       ccKxs: // global
           HpAlloc = 144;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKxr: // global
           _scHv9::P64 = P64[R1 + 16];
           _scHva::P64 = P64[R1 + 24];
           _scHvb::P64 = P64[R1 + 32];
           _scHvc::P64 = P64[R1 + 40];
           _scHvd::P64 = P64[R1 + 48];
           _scHve::P64 = P64[R1 + 56];
           _scHvx::P64 = P64[R1 + 64];
           _scHvC::P64 = P64[R1 + 72];
           _scHvH::P64 = P64[R1 + 80];
           _scHvM::P64 = P64[R1 + 88];
           _scHvR::P64 = P64[R1 + 96];
           _scHvW::P64 = P64[R1 + 104];
           _scHw1::P64 = P64[R1 + 112];
           _scHw6::P64 = P64[R1 + 120];
           _scHwb::P64 = P64[R1 + 128];
           _scHwd::P64 = P64[R1 + 136];
           I64[Hp - 136] = sat_scHxT_info;
           P64[Hp - 120] = _scHv9::P64;
           P64[Hp - 112] = _scHva::P64;
           P64[Hp - 104] = _scHvb::P64;
           P64[Hp - 96] = _scHvc::P64;
           P64[Hp - 88] = _scHvd::P64;
           P64[Hp - 80] = _scHve::P64;
           P64[Hp - 72] = _scHvx::P64;
           P64[Hp - 64] = _scHvC::P64;
           P64[Hp - 56] = _scHvH::P64;
           P64[Hp - 48] = _scHvM::P64;
           P64[Hp - 40] = _scHvR::P64;
           P64[Hp - 32] = _scHvW::P64;
           P64[Hp - 24] = _scHw1::P64;
           P64[Hp - 16] = _scHw6::P64;
           P64[Hp - 8] = _scHwb::P64;
           P64[Hp] = _scHwd::P64;
           R3 = Hp - 136;
           R2 = lvl22_rcHpR_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHxU_info" {
     sat_scHxU_info:
         const sat_scHxU_entry;
         const 16;
         const 12884901903;
         const ScI2G_srt;
 },
 sat_scHxV_entry() //  [R1]
         { []
         }
     {offset
       ccKxt: // global
           _scHxV::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccKxu; else goto ccKxv;
       ccKxv: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto ccKxx; else goto ccKxw;
       ccKxx: // global
           HpAlloc = 144;
           goto ccKxu;
       ccKxu: // global
           R1 = _scHxV::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKxw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scHxV::P64;
           _scHv9::P64 = P64[_scHxV::P64 + 16];
           _scHva::P64 = P64[_scHxV::P64 + 24];
           _scHvb::P64 = P64[_scHxV::P64 + 32];
           _scHvc::P64 = P64[_scHxV::P64 + 40];
           _scHvd::P64 = P64[_scHxV::P64 + 48];
           _scHve::P64 = P64[_scHxV::P64 + 56];
           _scHvx::P64 = P64[_scHxV::P64 + 64];
           _scHvC::P64 = P64[_scHxV::P64 + 72];
           _scHvH::P64 = P64[_scHxV::P64 + 80];
           _scHvM::P64 = P64[_scHxV::P64 + 88];
           _scHvR::P64 = P64[_scHxV::P64 + 96];
           _scHvW::P64 = P64[_scHxV::P64 + 104];
           _scHw1::P64 = P64[_scHxV::P64 + 112];
           _scHw6::P64 = P64[_scHxV::P64 + 120];
           _scHwb::P64 = P64[_scHxV::P64 + 128];
           _scHwd::P64 = P64[_scHxV::P64 + 136];
           I64[Hp - 136] = sat_scHxU_info;
           P64[Hp - 120] = _scHv9::P64;
           P64[Hp - 112] = _scHva::P64;
           P64[Hp - 104] = _scHvb::P64;
           P64[Hp - 96] = _scHvc::P64;
           P64[Hp - 88] = _scHvd::P64;
           P64[Hp - 80] = _scHve::P64;
           P64[Hp - 72] = _scHvx::P64;
           P64[Hp - 64] = _scHvC::P64;
           P64[Hp - 56] = _scHvH::P64;
           P64[Hp - 48] = _scHvM::P64;
           P64[Hp - 40] = _scHvR::P64;
           P64[Hp - 32] = _scHvW::P64;
           P64[Hp - 24] = _scHw1::P64;
           P64[Hp - 16] = _scHw6::P64;
           P64[Hp - 8] = _scHwb::P64;
           P64[Hp] = _scHwd::P64;
           R3 = Hp - 136;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHxV_info" {
     sat_scHxV_info:
         const sat_scHxV_entry;
         const 16;
         const 12884901903;
         const ScI2G_srt;
 },
 sat_scHxZ_entry() //  [R1]
         { []
         }
     {offset
       ccKxB: // global
           _scHxZ::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto ccKxC; else goto ccKxD;
       ccKxD: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto ccKxF; else goto ccKxE;
       ccKxF: // global
           HpAlloc = 144;
           goto ccKxC;
       ccKxC: // global
           R1 = _scHxZ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKxE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scHxZ::P64;
           _scHv9::P64 = P64[_scHxZ::P64 + 16];
           _scHva::P64 = P64[_scHxZ::P64 + 24];
           _scHvb::P64 = P64[_scHxZ::P64 + 32];
           _scHvc::P64 = P64[_scHxZ::P64 + 40];
           _scHvd::P64 = P64[_scHxZ::P64 + 48];
           _scHve::P64 = P64[_scHxZ::P64 + 56];
           _scHvs::P64 = P64[_scHxZ::P64 + 64];
           _scHvx::P64 = P64[_scHxZ::P64 + 72];
           _scHvC::P64 = P64[_scHxZ::P64 + 80];
           _scHvH::P64 = P64[_scHxZ::P64 + 88];
           _scHvM::P64 = P64[_scHxZ::P64 + 96];
           _scHvR::P64 = P64[_scHxZ::P64 + 104];
           _scHvW::P64 = P64[_scHxZ::P64 + 112];
           _scHw1::P64 = P64[_scHxZ::P64 + 120];
           _scHw6::P64 = P64[_scHxZ::P64 + 128];
           _scHwb::P64 = P64[_scHxZ::P64 + 136];
           _scHwd::P64 = P64[_scHxZ::P64 + 144];
           I64[Hp - 136] = sat_scHxV_info;
           P64[Hp - 120] = _scHv9::P64;
           P64[Hp - 112] = _scHva::P64;
           P64[Hp - 104] = _scHvb::P64;
           P64[Hp - 96] = _scHvc::P64;
           P64[Hp - 88] = _scHvd::P64;
           P64[Hp - 80] = _scHve::P64;
           P64[Hp - 72] = _scHvx::P64;
           P64[Hp - 64] = _scHvC::P64;
           P64[Hp - 56] = _scHvH::P64;
           P64[Hp - 48] = _scHvM::P64;
           P64[Hp - 40] = _scHvR::P64;
           P64[Hp - 32] = _scHvW::P64;
           P64[Hp - 24] = _scHw1::P64;
           P64[Hp - 16] = _scHw6::P64;
           P64[Hp - 8] = _scHwb::P64;
           P64[Hp] = _scHwd::P64;
           I64[Sp - 24] = block_ccKxy_info;
           R4 = Hp - 136;
           R3 = _scHvs::P64;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHxZ_info" {
     sat_scHxZ_info:
         const sat_scHxZ_entry;
         const 17;
         const 12884901903;
         const ScI2G_srt;
 },
 _ccKxy() //  [R1, R2]
         { []
         }
     {offset
       ccKxy: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccKxI; else goto ccKxH;
       ccKxI: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccKxH: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccKxy_info" {
     block_ccKxy_info:
         const _ccKxy;
         const 0;
         const 30;
 },
 sat_scHy0_entry() //  [R1]
         { []
         }
     {offset
       ccKxJ: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto ccKxN; else goto ccKxM;
       ccKxN: // global
           HpAlloc = 152;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKxM: // global
           _scHv9::P64 = P64[R1 + 16];
           _scHva::P64 = P64[R1 + 24];
           _scHvb::P64 = P64[R1 + 32];
           _scHvc::P64 = P64[R1 + 40];
           _scHvd::P64 = P64[R1 + 48];
           _scHve::P64 = P64[R1 + 56];
           _scHvs::P64 = P64[R1 + 64];
           _scHvx::P64 = P64[R1 + 72];
           _scHvC::P64 = P64[R1 + 80];
           _scHvH::P64 = P64[R1 + 88];
           _scHvM::P64 = P64[R1 + 96];
           _scHvR::P64 = P64[R1 + 104];
           _scHvW::P64 = P64[R1 + 112];
           _scHw1::P64 = P64[R1 + 120];
           _scHw6::P64 = P64[R1 + 128];
           _scHwb::P64 = P64[R1 + 136];
           _scHwd::P64 = P64[R1 + 144];
           I64[Hp - 144] = sat_scHxZ_info;
           P64[Hp - 128] = _scHv9::P64;
           P64[Hp - 120] = _scHva::P64;
           P64[Hp - 112] = _scHvb::P64;
           P64[Hp - 104] = _scHvc::P64;
           P64[Hp - 96] = _scHvd::P64;
           P64[Hp - 88] = _scHve::P64;
           P64[Hp - 80] = _scHvs::P64;
           P64[Hp - 72] = _scHvx::P64;
           P64[Hp - 64] = _scHvC::P64;
           P64[Hp - 56] = _scHvH::P64;
           P64[Hp - 48] = _scHvM::P64;
           P64[Hp - 40] = _scHvR::P64;
           P64[Hp - 32] = _scHvW::P64;
           P64[Hp - 24] = _scHw1::P64;
           P64[Hp - 16] = _scHw6::P64;
           P64[Hp - 8] = _scHwb::P64;
           P64[Hp] = _scHwd::P64;
           R3 = Hp - 144;
           R2 = lvl21_rcHpQ_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHy0_info" {
     sat_scHy0_info:
         const sat_scHy0_entry;
         const 17;
         const 12884901903;
         const ScI2G_srt;
 },
 sat_scHy1_entry() //  [R1]
         { []
         }
     {offset
       ccKxO: // global
           _scHy1::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccKxP; else goto ccKxQ;
       ccKxQ: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto ccKxS; else goto ccKxR;
       ccKxS: // global
           HpAlloc = 152;
           goto ccKxP;
       ccKxP: // global
           R1 = _scHy1::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKxR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scHy1::P64;
           _scHv9::P64 = P64[_scHy1::P64 + 16];
           _scHva::P64 = P64[_scHy1::P64 + 24];
           _scHvb::P64 = P64[_scHy1::P64 + 32];
           _scHvc::P64 = P64[_scHy1::P64 + 40];
           _scHvd::P64 = P64[_scHy1::P64 + 48];
           _scHve::P64 = P64[_scHy1::P64 + 56];
           _scHvs::P64 = P64[_scHy1::P64 + 64];
           _scHvx::P64 = P64[_scHy1::P64 + 72];
           _scHvC::P64 = P64[_scHy1::P64 + 80];
           _scHvH::P64 = P64[_scHy1::P64 + 88];
           _scHvM::P64 = P64[_scHy1::P64 + 96];
           _scHvR::P64 = P64[_scHy1::P64 + 104];
           _scHvW::P64 = P64[_scHy1::P64 + 112];
           _scHw1::P64 = P64[_scHy1::P64 + 120];
           _scHw6::P64 = P64[_scHy1::P64 + 128];
           _scHwb::P64 = P64[_scHy1::P64 + 136];
           _scHwd::P64 = P64[_scHy1::P64 + 144];
           I64[Hp - 144] = sat_scHy0_info;
           P64[Hp - 128] = _scHv9::P64;
           P64[Hp - 120] = _scHva::P64;
           P64[Hp - 112] = _scHvb::P64;
           P64[Hp - 104] = _scHvc::P64;
           P64[Hp - 96] = _scHvd::P64;
           P64[Hp - 88] = _scHve::P64;
           P64[Hp - 80] = _scHvs::P64;
           P64[Hp - 72] = _scHvx::P64;
           P64[Hp - 64] = _scHvC::P64;
           P64[Hp - 56] = _scHvH::P64;
           P64[Hp - 48] = _scHvM::P64;
           P64[Hp - 40] = _scHvR::P64;
           P64[Hp - 32] = _scHvW::P64;
           P64[Hp - 24] = _scHw1::P64;
           P64[Hp - 16] = _scHw6::P64;
           P64[Hp - 8] = _scHwb::P64;
           P64[Hp] = _scHwd::P64;
           R3 = Hp - 144;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHy1_info" {
     sat_scHy1_info:
         const sat_scHy1_entry;
         const 17;
         const 12884901903;
         const ScI2G_srt;
 },
 sat_scHy5_entry() //  [R1]
         { []
         }
     {offset
       ccKxW: // global
           _scHy5::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto ccKxX; else goto ccKxY;
       ccKxY: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto ccKy0; else goto ccKxZ;
       ccKy0: // global
           HpAlloc = 152;
           goto ccKxX;
       ccKxX: // global
           R1 = _scHy5::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKxZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scHy5::P64;
           _scHv9::P64 = P64[_scHy5::P64 + 16];
           _scHva::P64 = P64[_scHy5::P64 + 24];
           _scHvb::P64 = P64[_scHy5::P64 + 32];
           _scHvc::P64 = P64[_scHy5::P64 + 40];
           _scHvd::P64 = P64[_scHy5::P64 + 48];
           _scHve::P64 = P64[_scHy5::P64 + 56];
           _scHvn::P64 = P64[_scHy5::P64 + 64];
           _scHvs::P64 = P64[_scHy5::P64 + 72];
           _scHvx::P64 = P64[_scHy5::P64 + 80];
           _scHvC::P64 = P64[_scHy5::P64 + 88];
           _scHvH::P64 = P64[_scHy5::P64 + 96];
           _scHvM::P64 = P64[_scHy5::P64 + 104];
           _scHvR::P64 = P64[_scHy5::P64 + 112];
           _scHvW::P64 = P64[_scHy5::P64 + 120];
           _scHw1::P64 = P64[_scHy5::P64 + 128];
           _scHw6::P64 = P64[_scHy5::P64 + 136];
           _scHwb::P64 = P64[_scHy5::P64 + 144];
           _scHwd::P64 = P64[_scHy5::P64 + 152];
           I64[Hp - 144] = sat_scHy1_info;
           P64[Hp - 128] = _scHv9::P64;
           P64[Hp - 120] = _scHva::P64;
           P64[Hp - 112] = _scHvb::P64;
           P64[Hp - 104] = _scHvc::P64;
           P64[Hp - 96] = _scHvd::P64;
           P64[Hp - 88] = _scHve::P64;
           P64[Hp - 80] = _scHvs::P64;
           P64[Hp - 72] = _scHvx::P64;
           P64[Hp - 64] = _scHvC::P64;
           P64[Hp - 56] = _scHvH::P64;
           P64[Hp - 48] = _scHvM::P64;
           P64[Hp - 40] = _scHvR::P64;
           P64[Hp - 32] = _scHvW::P64;
           P64[Hp - 24] = _scHw1::P64;
           P64[Hp - 16] = _scHw6::P64;
           P64[Hp - 8] = _scHwb::P64;
           P64[Hp] = _scHwd::P64;
           I64[Sp - 24] = block_ccKxT_info;
           R4 = Hp - 144;
           R3 = _scHvn::P64;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHy5_info" {
     sat_scHy5_info:
         const sat_scHy5_entry;
         const 18;
         const 12884901903;
         const ScI2G_srt;
 },
 _ccKxT() //  [R1, R2]
         { []
         }
     {offset
       ccKxT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccKy3; else goto ccKy2;
       ccKy3: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccKy2: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccKxT_info" {
     block_ccKxT_info:
         const _ccKxT;
         const 0;
         const 30;
 },
 sat_scHy6_entry() //  [R1]
         { []
         }
     {offset
       ccKy4: // global
           Hp = Hp + 160;
           if (Hp > HpLim) (likely: False) goto ccKy8; else goto ccKy7;
       ccKy8: // global
           HpAlloc = 160;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKy7: // global
           _scHv9::P64 = P64[R1 + 16];
           _scHva::P64 = P64[R1 + 24];
           _scHvb::P64 = P64[R1 + 32];
           _scHvc::P64 = P64[R1 + 40];
           _scHvd::P64 = P64[R1 + 48];
           _scHve::P64 = P64[R1 + 56];
           _scHvn::P64 = P64[R1 + 64];
           _scHvs::P64 = P64[R1 + 72];
           _scHvx::P64 = P64[R1 + 80];
           _scHvC::P64 = P64[R1 + 88];
           _scHvH::P64 = P64[R1 + 96];
           _scHvM::P64 = P64[R1 + 104];
           _scHvR::P64 = P64[R1 + 112];
           _scHvW::P64 = P64[R1 + 120];
           _scHw1::P64 = P64[R1 + 128];
           _scHw6::P64 = P64[R1 + 136];
           _scHwb::P64 = P64[R1 + 144];
           _scHwd::P64 = P64[R1 + 152];
           I64[Hp - 152] = sat_scHy5_info;
           P64[Hp - 136] = _scHv9::P64;
           P64[Hp - 128] = _scHva::P64;
           P64[Hp - 120] = _scHvb::P64;
           P64[Hp - 112] = _scHvc::P64;
           P64[Hp - 104] = _scHvd::P64;
           P64[Hp - 96] = _scHve::P64;
           P64[Hp - 88] = _scHvn::P64;
           P64[Hp - 80] = _scHvs::P64;
           P64[Hp - 72] = _scHvx::P64;
           P64[Hp - 64] = _scHvC::P64;
           P64[Hp - 56] = _scHvH::P64;
           P64[Hp - 48] = _scHvM::P64;
           P64[Hp - 40] = _scHvR::P64;
           P64[Hp - 32] = _scHvW::P64;
           P64[Hp - 24] = _scHw1::P64;
           P64[Hp - 16] = _scHw6::P64;
           P64[Hp - 8] = _scHwb::P64;
           P64[Hp] = _scHwd::P64;
           R3 = Hp - 152;
           R2 = lvl20_rcHpP_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHy6_info" {
     sat_scHy6_info:
         const sat_scHy6_entry;
         const 18;
         const 12884901903;
         const ScI2G_srt;
 },
 sat_scHy7_entry() //  [R1]
         { []
         }
     {offset
       ccKy9: // global
           _scHy7::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccKya; else goto ccKyb;
       ccKyb: // global
           Hp = Hp + 160;
           if (Hp > HpLim) (likely: False) goto ccKyd; else goto ccKyc;
       ccKyd: // global
           HpAlloc = 160;
           goto ccKya;
       ccKya: // global
           R1 = _scHy7::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKyc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scHy7::P64;
           _scHv9::P64 = P64[_scHy7::P64 + 16];
           _scHva::P64 = P64[_scHy7::P64 + 24];
           _scHvb::P64 = P64[_scHy7::P64 + 32];
           _scHvc::P64 = P64[_scHy7::P64 + 40];
           _scHvd::P64 = P64[_scHy7::P64 + 48];
           _scHve::P64 = P64[_scHy7::P64 + 56];
           _scHvn::P64 = P64[_scHy7::P64 + 64];
           _scHvs::P64 = P64[_scHy7::P64 + 72];
           _scHvx::P64 = P64[_scHy7::P64 + 80];
           _scHvC::P64 = P64[_scHy7::P64 + 88];
           _scHvH::P64 = P64[_scHy7::P64 + 96];
           _scHvM::P64 = P64[_scHy7::P64 + 104];
           _scHvR::P64 = P64[_scHy7::P64 + 112];
           _scHvW::P64 = P64[_scHy7::P64 + 120];
           _scHw1::P64 = P64[_scHy7::P64 + 128];
           _scHw6::P64 = P64[_scHy7::P64 + 136];
           _scHwb::P64 = P64[_scHy7::P64 + 144];
           _scHwd::P64 = P64[_scHy7::P64 + 152];
           I64[Hp - 152] = sat_scHy6_info;
           P64[Hp - 136] = _scHv9::P64;
           P64[Hp - 128] = _scHva::P64;
           P64[Hp - 120] = _scHvb::P64;
           P64[Hp - 112] = _scHvc::P64;
           P64[Hp - 104] = _scHvd::P64;
           P64[Hp - 96] = _scHve::P64;
           P64[Hp - 88] = _scHvn::P64;
           P64[Hp - 80] = _scHvs::P64;
           P64[Hp - 72] = _scHvx::P64;
           P64[Hp - 64] = _scHvC::P64;
           P64[Hp - 56] = _scHvH::P64;
           P64[Hp - 48] = _scHvM::P64;
           P64[Hp - 40] = _scHvR::P64;
           P64[Hp - 32] = _scHvW::P64;
           P64[Hp - 24] = _scHw1::P64;
           P64[Hp - 16] = _scHw6::P64;
           P64[Hp - 8] = _scHwb::P64;
           P64[Hp] = _scHwd::P64;
           R3 = Hp - 152;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHy7_info" {
     sat_scHy7_info:
         const sat_scHy7_entry;
         const 18;
         const 12884901903;
         const ScI2G_srt;
 },
 sat_scHyb_entry() //  [R1]
         { []
         }
     {offset
       ccKyh: // global
           _scHyb::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto ccKyi; else goto ccKyj;
       ccKyj: // global
           Hp = Hp + 160;
           if (Hp > HpLim) (likely: False) goto ccKyl; else goto ccKyk;
       ccKyl: // global
           HpAlloc = 160;
           goto ccKyi;
       ccKyi: // global
           R1 = _scHyb::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKyk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scHyb::P64;
           _scHv9::P64 = P64[_scHyb::P64 + 16];
           _scHva::P64 = P64[_scHyb::P64 + 24];
           _scHvb::P64 = P64[_scHyb::P64 + 32];
           _scHvc::P64 = P64[_scHyb::P64 + 40];
           _scHvd::P64 = P64[_scHyb::P64 + 48];
           _scHve::P64 = P64[_scHyb::P64 + 56];
           _scHvi::P64 = P64[_scHyb::P64 + 64];
           _scHvn::P64 = P64[_scHyb::P64 + 72];
           _scHvs::P64 = P64[_scHyb::P64 + 80];
           _scHvx::P64 = P64[_scHyb::P64 + 88];
           _scHvC::P64 = P64[_scHyb::P64 + 96];
           _scHvH::P64 = P64[_scHyb::P64 + 104];
           _scHvM::P64 = P64[_scHyb::P64 + 112];
           _scHvR::P64 = P64[_scHyb::P64 + 120];
           _scHvW::P64 = P64[_scHyb::P64 + 128];
           _scHw1::P64 = P64[_scHyb::P64 + 136];
           _scHw6::P64 = P64[_scHyb::P64 + 144];
           _scHwb::P64 = P64[_scHyb::P64 + 152];
           _scHwd::P64 = P64[_scHyb::P64 + 160];
           I64[Hp - 152] = sat_scHy7_info;
           P64[Hp - 136] = _scHv9::P64;
           P64[Hp - 128] = _scHva::P64;
           P64[Hp - 120] = _scHvb::P64;
           P64[Hp - 112] = _scHvc::P64;
           P64[Hp - 104] = _scHvd::P64;
           P64[Hp - 96] = _scHve::P64;
           P64[Hp - 88] = _scHvn::P64;
           P64[Hp - 80] = _scHvs::P64;
           P64[Hp - 72] = _scHvx::P64;
           P64[Hp - 64] = _scHvC::P64;
           P64[Hp - 56] = _scHvH::P64;
           P64[Hp - 48] = _scHvM::P64;
           P64[Hp - 40] = _scHvR::P64;
           P64[Hp - 32] = _scHvW::P64;
           P64[Hp - 24] = _scHw1::P64;
           P64[Hp - 16] = _scHw6::P64;
           P64[Hp - 8] = _scHwb::P64;
           P64[Hp] = _scHwd::P64;
           I64[Sp - 24] = block_ccKye_info;
           R4 = Hp - 152;
           R3 = _scHvi::P64;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHyb_info" {
     sat_scHyb_info:
         const sat_scHyb_entry;
         const 19;
         const 12884901903;
         const ScI2G_srt;
 },
 _ccKye() //  [R1, R2]
         { []
         }
     {offset
       ccKye: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccKyo; else goto ccKyn;
       ccKyo: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccKyn: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccKye_info" {
     block_ccKye_info:
         const _ccKye;
         const 0;
         const 30;
 },
 sat_scHyc_entry() //  [R1]
         { []
         }
     {offset
       ccKyp: // global
           Hp = Hp + 168;
           if (Hp > HpLim) (likely: False) goto ccKyt; else goto ccKys;
       ccKyt: // global
           HpAlloc = 168;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKys: // global
           _scHv9::P64 = P64[R1 + 16];
           _scHva::P64 = P64[R1 + 24];
           _scHvb::P64 = P64[R1 + 32];
           _scHvc::P64 = P64[R1 + 40];
           _scHvd::P64 = P64[R1 + 48];
           _scHve::P64 = P64[R1 + 56];
           _scHvi::P64 = P64[R1 + 64];
           _scHvn::P64 = P64[R1 + 72];
           _scHvs::P64 = P64[R1 + 80];
           _scHvx::P64 = P64[R1 + 88];
           _scHvC::P64 = P64[R1 + 96];
           _scHvH::P64 = P64[R1 + 104];
           _scHvM::P64 = P64[R1 + 112];
           _scHvR::P64 = P64[R1 + 120];
           _scHvW::P64 = P64[R1 + 128];
           _scHw1::P64 = P64[R1 + 136];
           _scHw6::P64 = P64[R1 + 144];
           _scHwb::P64 = P64[R1 + 152];
           _scHwd::P64 = P64[R1 + 160];
           I64[Hp - 160] = sat_scHyb_info;
           P64[Hp - 144] = _scHv9::P64;
           P64[Hp - 136] = _scHva::P64;
           P64[Hp - 128] = _scHvb::P64;
           P64[Hp - 120] = _scHvc::P64;
           P64[Hp - 112] = _scHvd::P64;
           P64[Hp - 104] = _scHve::P64;
           P64[Hp - 96] = _scHvi::P64;
           P64[Hp - 88] = _scHvn::P64;
           P64[Hp - 80] = _scHvs::P64;
           P64[Hp - 72] = _scHvx::P64;
           P64[Hp - 64] = _scHvC::P64;
           P64[Hp - 56] = _scHvH::P64;
           P64[Hp - 48] = _scHvM::P64;
           P64[Hp - 40] = _scHvR::P64;
           P64[Hp - 32] = _scHvW::P64;
           P64[Hp - 24] = _scHw1::P64;
           P64[Hp - 16] = _scHw6::P64;
           P64[Hp - 8] = _scHwb::P64;
           P64[Hp] = _scHwd::P64;
           R3 = Hp - 160;
           R2 = lvl19_rcHpO_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHyc_info" {
     sat_scHyc_info:
         const sat_scHyc_entry;
         const 19;
         const 12884901903;
         const ScI2G_srt;
 },
 sat_scHyd_entry() //  [R1]
         { []
         }
     {offset
       ccKyu: // global
           _scHyd::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccKyv; else goto ccKyw;
       ccKyw: // global
           Hp = Hp + 168;
           if (Hp > HpLim) (likely: False) goto ccKyy; else goto ccKyx;
       ccKyy: // global
           HpAlloc = 168;
           goto ccKyv;
       ccKyv: // global
           R1 = _scHyd::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKyx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scHyd::P64;
           _scHv9::P64 = P64[_scHyd::P64 + 16];
           _scHva::P64 = P64[_scHyd::P64 + 24];
           _scHvb::P64 = P64[_scHyd::P64 + 32];
           _scHvc::P64 = P64[_scHyd::P64 + 40];
           _scHvd::P64 = P64[_scHyd::P64 + 48];
           _scHve::P64 = P64[_scHyd::P64 + 56];
           _scHvi::P64 = P64[_scHyd::P64 + 64];
           _scHvn::P64 = P64[_scHyd::P64 + 72];
           _scHvs::P64 = P64[_scHyd::P64 + 80];
           _scHvx::P64 = P64[_scHyd::P64 + 88];
           _scHvC::P64 = P64[_scHyd::P64 + 96];
           _scHvH::P64 = P64[_scHyd::P64 + 104];
           _scHvM::P64 = P64[_scHyd::P64 + 112];
           _scHvR::P64 = P64[_scHyd::P64 + 120];
           _scHvW::P64 = P64[_scHyd::P64 + 128];
           _scHw1::P64 = P64[_scHyd::P64 + 136];
           _scHw6::P64 = P64[_scHyd::P64 + 144];
           _scHwb::P64 = P64[_scHyd::P64 + 152];
           _scHwd::P64 = P64[_scHyd::P64 + 160];
           I64[Hp - 160] = sat_scHyc_info;
           P64[Hp - 144] = _scHv9::P64;
           P64[Hp - 136] = _scHva::P64;
           P64[Hp - 128] = _scHvb::P64;
           P64[Hp - 120] = _scHvc::P64;
           P64[Hp - 112] = _scHvd::P64;
           P64[Hp - 104] = _scHve::P64;
           P64[Hp - 96] = _scHvi::P64;
           P64[Hp - 88] = _scHvn::P64;
           P64[Hp - 80] = _scHvs::P64;
           P64[Hp - 72] = _scHvx::P64;
           P64[Hp - 64] = _scHvC::P64;
           P64[Hp - 56] = _scHvH::P64;
           P64[Hp - 48] = _scHvM::P64;
           P64[Hp - 40] = _scHvR::P64;
           P64[Hp - 32] = _scHvW::P64;
           P64[Hp - 24] = _scHw1::P64;
           P64[Hp - 16] = _scHw6::P64;
           P64[Hp - 8] = _scHwb::P64;
           P64[Hp] = _scHwd::P64;
           R3 = Hp - 160;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHyd_info" {
     sat_scHyd_info:
         const sat_scHyd_entry;
         const 19;
         const 12884901903;
         const ScI2G_srt;
 },
 sat_scHyh_entry() //  [R1]
         { []
         }
     {offset
       ccKyz: // global
           if ((Sp + -176) < SpLim) (likely: False) goto ccKyG; else goto ccKyH;
       ccKyG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKyH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 176] = block_ccKod_info;
           _scHv9::P64 = P64[R1 + 24];
           _scHva::P64 = P64[R1 + 32];
           _scHvb::P64 = P64[R1 + 40];
           _scHvc::P64 = P64[R1 + 48];
           _scHvd::P64 = P64[R1 + 56];
           _scHve::P64 = P64[R1 + 64];
           _scHvi::P64 = P64[R1 + 72];
           _scHvn::P64 = P64[R1 + 80];
           _scHvs::P64 = P64[R1 + 88];
           _scHvx::P64 = P64[R1 + 96];
           _scHvC::P64 = P64[R1 + 104];
           _scHvH::P64 = P64[R1 + 112];
           _scHvM::P64 = P64[R1 + 120];
           _scHvR::P64 = P64[R1 + 128];
           _scHvW::P64 = P64[R1 + 136];
           _scHw1::P64 = P64[R1 + 144];
           _scHw6::P64 = P64[R1 + 152];
           _scHwb::P64 = P64[R1 + 160];
           _scHwd::P64 = P64[R1 + 168];
           R1 = P64[R1 + 16];
           P64[Sp - 168] = _scHv9::P64;
           P64[Sp - 160] = _scHva::P64;
           P64[Sp - 152] = _scHvb::P64;
           P64[Sp - 144] = _scHvc::P64;
           P64[Sp - 136] = _scHvd::P64;
           P64[Sp - 128] = _scHve::P64;
           P64[Sp - 120] = _scHvi::P64;
           P64[Sp - 112] = _scHvn::P64;
           P64[Sp - 104] = _scHvs::P64;
           P64[Sp - 96] = _scHvx::P64;
           P64[Sp - 88] = _scHvC::P64;
           P64[Sp - 80] = _scHvH::P64;
           P64[Sp - 72] = _scHvM::P64;
           P64[Sp - 64] = _scHvR::P64;
           P64[Sp - 56] = _scHvW::P64;
           P64[Sp - 48] = _scHw1::P64;
           P64[Sp - 40] = _scHw6::P64;
           P64[Sp - 32] = _scHwb::P64;
           P64[Sp - 24] = _scHwd::P64;
           Sp = Sp - 176;
           if (R1 & 7 != 0) goto ucKyO; else goto ccKoe;
       ucKyO: // global
           call _ccKod(R1) args: 0, res: 0, upd: 0;
       ccKoe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHyh_info" {
     sat_scHyh_info:
         const sat_scHyh_entry;
         const 20;
         const 12884901903;
         const ScI2G_srt;
 },
 _ccKod() //  [R1]
         { []
         }
     {offset
       ccKod: // global
           Hp = Hp + 168;
           if (Hp > HpLim) (likely: False) goto ccKyK; else goto ccKyJ;
       ccKyK: // global
           HpAlloc = 168;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       ccKyJ: // global
           _scHwi::I64 = I64[R1 + 7];
           I64[Hp - 160] = sat_scHyd_info;
           P64[Hp - 144] = P64[Sp + 8];
           P64[Hp - 136] = P64[Sp + 16];
           P64[Hp - 128] = P64[Sp + 24];
           P64[Hp - 120] = P64[Sp + 32];
           P64[Hp - 112] = P64[Sp + 40];
           P64[Hp - 104] = P64[Sp + 48];
           P64[Hp - 96] = P64[Sp + 56];
           P64[Hp - 88] = P64[Sp + 64];
           P64[Hp - 80] = P64[Sp + 72];
           P64[Hp - 72] = P64[Sp + 80];
           P64[Hp - 64] = P64[Sp + 88];
           P64[Hp - 56] = P64[Sp + 96];
           P64[Hp - 48] = P64[Sp + 104];
           P64[Hp - 40] = P64[Sp + 112];
           P64[Hp - 32] = P64[Sp + 120];
           P64[Hp - 24] = P64[Sp + 128];
           P64[Hp - 16] = P64[Sp + 136];
           P64[Hp - 8] = P64[Sp + 144];
           P64[Hp] = P64[Sp + 152];
           I64[Sp + 152] = block_ccKyD_info;
           R3 = Hp - 160;
           R2 = _scHwi::I64;
           Sp = Sp + 152;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccKod_info" {
     block_ccKod_info:
         const _ccKod;
         const 19;
         const 12884901918;
         const ScI2G_srt;
 },
 _ccKyD() //  [R1, R2]
         { []
         }
     {offset
       ccKyD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccKyN; else goto ccKyM;
       ccKyN: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccKyM: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccKyD_info" {
     block_ccKyD_info:
         const _ccKyD;
         const 0;
         const 30;
 },
 sat_scHyi_entry() //  [R1]
         { []
         }
     {offset
       ccKyP: // global
           Hp = Hp + 176;
           if (Hp > HpLim) (likely: False) goto ccKyT; else goto ccKyS;
       ccKyT: // global
           HpAlloc = 176;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKyS: // global
           _scHuX::P64 = P64[R1 + 16];
           _scHv9::P64 = P64[R1 + 24];
           _scHva::P64 = P64[R1 + 32];
           _scHvb::P64 = P64[R1 + 40];
           _scHvc::P64 = P64[R1 + 48];
           _scHvd::P64 = P64[R1 + 56];
           _scHve::P64 = P64[R1 + 64];
           _scHvi::P64 = P64[R1 + 72];
           _scHvn::P64 = P64[R1 + 80];
           _scHvs::P64 = P64[R1 + 88];
           _scHvx::P64 = P64[R1 + 96];
           _scHvC::P64 = P64[R1 + 104];
           _scHvH::P64 = P64[R1 + 112];
           _scHvM::P64 = P64[R1 + 120];
           _scHvR::P64 = P64[R1 + 128];
           _scHvW::P64 = P64[R1 + 136];
           _scHw1::P64 = P64[R1 + 144];
           _scHw6::P64 = P64[R1 + 152];
           _scHwb::P64 = P64[R1 + 160];
           _scHwd::P64 = P64[R1 + 168];
           I64[Hp - 168] = sat_scHyh_info;
           P64[Hp - 152] = _scHuX::P64;
           P64[Hp - 144] = _scHv9::P64;
           P64[Hp - 136] = _scHva::P64;
           P64[Hp - 128] = _scHvb::P64;
           P64[Hp - 120] = _scHvc::P64;
           P64[Hp - 112] = _scHvd::P64;
           P64[Hp - 104] = _scHve::P64;
           P64[Hp - 96] = _scHvi::P64;
           P64[Hp - 88] = _scHvn::P64;
           P64[Hp - 80] = _scHvs::P64;
           P64[Hp - 72] = _scHvx::P64;
           P64[Hp - 64] = _scHvC::P64;
           P64[Hp - 56] = _scHvH::P64;
           P64[Hp - 48] = _scHvM::P64;
           P64[Hp - 40] = _scHvR::P64;
           P64[Hp - 32] = _scHvW::P64;
           P64[Hp - 24] = _scHw1::P64;
           P64[Hp - 16] = _scHw6::P64;
           P64[Hp - 8] = _scHwb::P64;
           P64[Hp] = _scHwd::P64;
           R3 = Hp - 168;
           R2 = lvl18_rcHpN_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHyi_info" {
     sat_scHyi_info:
         const sat_scHyi_entry;
         const 20;
         const 12884901903;
         const ScI2G_srt;
 },
 sat_scHyj_entry() //  [R1]
         { []
         }
     {offset
       ccKyU: // global
           _scHyj::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccKyV; else goto ccKyW;
       ccKyW: // global
           Hp = Hp + 176;
           if (Hp > HpLim) (likely: False) goto ccKyY; else goto ccKyX;
       ccKyY: // global
           HpAlloc = 176;
           goto ccKyV;
       ccKyV: // global
           R1 = _scHyj::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKyX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scHyj::P64;
           _scHuX::P64 = P64[_scHyj::P64 + 16];
           _scHv9::P64 = P64[_scHyj::P64 + 24];
           _scHva::P64 = P64[_scHyj::P64 + 32];
           _scHvb::P64 = P64[_scHyj::P64 + 40];
           _scHvc::P64 = P64[_scHyj::P64 + 48];
           _scHvd::P64 = P64[_scHyj::P64 + 56];
           _scHve::P64 = P64[_scHyj::P64 + 64];
           _scHvi::P64 = P64[_scHyj::P64 + 72];
           _scHvn::P64 = P64[_scHyj::P64 + 80];
           _scHvs::P64 = P64[_scHyj::P64 + 88];
           _scHvx::P64 = P64[_scHyj::P64 + 96];
           _scHvC::P64 = P64[_scHyj::P64 + 104];
           _scHvH::P64 = P64[_scHyj::P64 + 112];
           _scHvM::P64 = P64[_scHyj::P64 + 120];
           _scHvR::P64 = P64[_scHyj::P64 + 128];
           _scHvW::P64 = P64[_scHyj::P64 + 136];
           _scHw1::P64 = P64[_scHyj::P64 + 144];
           _scHw6::P64 = P64[_scHyj::P64 + 152];
           _scHwb::P64 = P64[_scHyj::P64 + 160];
           _scHwd::P64 = P64[_scHyj::P64 + 168];
           I64[Hp - 168] = sat_scHyi_info;
           P64[Hp - 152] = _scHuX::P64;
           P64[Hp - 144] = _scHv9::P64;
           P64[Hp - 136] = _scHva::P64;
           P64[Hp - 128] = _scHvb::P64;
           P64[Hp - 120] = _scHvc::P64;
           P64[Hp - 112] = _scHvd::P64;
           P64[Hp - 104] = _scHve::P64;
           P64[Hp - 96] = _scHvi::P64;
           P64[Hp - 88] = _scHvn::P64;
           P64[Hp - 80] = _scHvs::P64;
           P64[Hp - 72] = _scHvx::P64;
           P64[Hp - 64] = _scHvC::P64;
           P64[Hp - 56] = _scHvH::P64;
           P64[Hp - 48] = _scHvM::P64;
           P64[Hp - 40] = _scHvR::P64;
           P64[Hp - 32] = _scHvW::P64;
           P64[Hp - 24] = _scHw1::P64;
           P64[Hp - 16] = _scHw6::P64;
           P64[Hp - 8] = _scHwb::P64;
           P64[Hp] = _scHwd::P64;
           R3 = Hp - 168;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHyj_info" {
     sat_scHyj_info:
         const sat_scHyj_entry;
         const 20;
         const 12884901903;
         const ScI2G_srt;
 },
 sat_scHyn_entry() //  [R1]
         { []
         }
     {offset
       ccKyZ: // global
           if ((Sp + -184) < SpLim) (likely: False) goto ccKz6; else goto ccKz7;
       ccKz6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKz7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 184] = block_ccKnW_info;
           _scHuX::P64 = P64[R1 + 24];
           _scHv9::P64 = P64[R1 + 32];
           _scHva::P64 = P64[R1 + 40];
           _scHvb::P64 = P64[R1 + 48];
           _scHvc::P64 = P64[R1 + 56];
           _scHvd::P64 = P64[R1 + 64];
           _scHve::P64 = P64[R1 + 72];
           _scHvi::P64 = P64[R1 + 80];
           _scHvn::P64 = P64[R1 + 88];
           _scHvs::P64 = P64[R1 + 96];
           _scHvx::P64 = P64[R1 + 104];
           _scHvC::P64 = P64[R1 + 112];
           _scHvH::P64 = P64[R1 + 120];
           _scHvM::P64 = P64[R1 + 128];
           _scHvR::P64 = P64[R1 + 136];
           _scHvW::P64 = P64[R1 + 144];
           _scHw1::P64 = P64[R1 + 152];
           _scHw6::P64 = P64[R1 + 160];
           _scHwb::P64 = P64[R1 + 168];
           _scHwd::P64 = P64[R1 + 176];
           R1 = P64[R1 + 16];
           P64[Sp - 176] = _scHuX::P64;
           P64[Sp - 168] = _scHv9::P64;
           P64[Sp - 160] = _scHva::P64;
           P64[Sp - 152] = _scHvb::P64;
           P64[Sp - 144] = _scHvc::P64;
           P64[Sp - 136] = _scHvd::P64;
           P64[Sp - 128] = _scHve::P64;
           P64[Sp - 120] = _scHvi::P64;
           P64[Sp - 112] = _scHvn::P64;
           P64[Sp - 104] = _scHvs::P64;
           P64[Sp - 96] = _scHvx::P64;
           P64[Sp - 88] = _scHvC::P64;
           P64[Sp - 80] = _scHvH::P64;
           P64[Sp - 72] = _scHvM::P64;
           P64[Sp - 64] = _scHvR::P64;
           P64[Sp - 56] = _scHvW::P64;
           P64[Sp - 48] = _scHw1::P64;
           P64[Sp - 40] = _scHw6::P64;
           P64[Sp - 32] = _scHwb::P64;
           P64[Sp - 24] = _scHwd::P64;
           Sp = Sp - 184;
           if (R1 & 7 != 0) goto ucKze; else goto ccKnX;
       ucKze: // global
           call _ccKnW(R1) args: 0, res: 0, upd: 0;
       ccKnX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHyn_info" {
     sat_scHyn_info:
         const sat_scHyn_entry;
         const 21;
         const 12884901903;
         const ScI2G_srt;
 },
 _ccKnW() //  [R1]
         { []
         }
     {offset
       ccKnW: // global
           Hp = Hp + 176;
           if (Hp > HpLim) (likely: False) goto ccKza; else goto ccKz9;
       ccKza: // global
           HpAlloc = 176;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       ccKz9: // global
           _scHwf::I64 = I64[R1 + 7];
           I64[Hp - 168] = sat_scHyj_info;
           P64[Hp - 152] = P64[Sp + 8];
           P64[Hp - 144] = P64[Sp + 16];
           P64[Hp - 136] = P64[Sp + 24];
           P64[Hp - 128] = P64[Sp + 32];
           P64[Hp - 120] = P64[Sp + 40];
           P64[Hp - 112] = P64[Sp + 48];
           P64[Hp - 104] = P64[Sp + 56];
           P64[Hp - 96] = P64[Sp + 64];
           P64[Hp - 88] = P64[Sp + 72];
           P64[Hp - 80] = P64[Sp + 80];
           P64[Hp - 72] = P64[Sp + 88];
           P64[Hp - 64] = P64[Sp + 96];
           P64[Hp - 56] = P64[Sp + 104];
           P64[Hp - 48] = P64[Sp + 112];
           P64[Hp - 40] = P64[Sp + 120];
           P64[Hp - 32] = P64[Sp + 128];
           P64[Hp - 24] = P64[Sp + 136];
           P64[Hp - 16] = P64[Sp + 144];
           P64[Hp - 8] = P64[Sp + 152];
           P64[Hp] = P64[Sp + 160];
           I64[Sp + 160] = block_ccKz3_info;
           R3 = Hp - 168;
           R2 = _scHwf::I64;
           Sp = Sp + 160;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccKnW_info" {
     block_ccKnW_info:
         const _ccKnW;
         const 20;
         const 12884901918;
         const ScI2G_srt;
 },
 _ccKz3() //  [R1, R2]
         { []
         }
     {offset
       ccKz3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccKzd; else goto ccKzc;
       ccKzd: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccKzc: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccKz3_info" {
     block_ccKz3_info:
         const _ccKz3;
         const 0;
         const 30;
 },
 sat_scHyo_entry() //  [R1]
         { []
         }
     {offset
       ccKzf: // global
           _scHyo::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccKzg; else goto ccKzh;
       ccKzh: // global
           Hp = Hp + 184;
           if (Hp > HpLim) (likely: False) goto ccKzj; else goto ccKzi;
       ccKzj: // global
           HpAlloc = 184;
           goto ccKzg;
       ccKzg: // global
           R1 = _scHyo::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKzi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scHyo::P64;
           _scHuW::P64 = P64[_scHyo::P64 + 16];
           _scHuX::P64 = P64[_scHyo::P64 + 24];
           _scHv9::P64 = P64[_scHyo::P64 + 32];
           _scHva::P64 = P64[_scHyo::P64 + 40];
           _scHvb::P64 = P64[_scHyo::P64 + 48];
           _scHvc::P64 = P64[_scHyo::P64 + 56];
           _scHvd::P64 = P64[_scHyo::P64 + 64];
           _scHve::P64 = P64[_scHyo::P64 + 72];
           _scHvi::P64 = P64[_scHyo::P64 + 80];
           _scHvn::P64 = P64[_scHyo::P64 + 88];
           _scHvs::P64 = P64[_scHyo::P64 + 96];
           _scHvx::P64 = P64[_scHyo::P64 + 104];
           _scHvC::P64 = P64[_scHyo::P64 + 112];
           _scHvH::P64 = P64[_scHyo::P64 + 120];
           _scHvM::P64 = P64[_scHyo::P64 + 128];
           _scHvR::P64 = P64[_scHyo::P64 + 136];
           _scHvW::P64 = P64[_scHyo::P64 + 144];
           _scHw1::P64 = P64[_scHyo::P64 + 152];
           _scHw6::P64 = P64[_scHyo::P64 + 160];
           _scHwb::P64 = P64[_scHyo::P64 + 168];
           _scHwd::P64 = P64[_scHyo::P64 + 176];
           I64[Hp - 176] = sat_scHyn_info;
           P64[Hp - 160] = _scHuW::P64;
           P64[Hp - 152] = _scHuX::P64;
           P64[Hp - 144] = _scHv9::P64;
           P64[Hp - 136] = _scHva::P64;
           P64[Hp - 128] = _scHvb::P64;
           P64[Hp - 120] = _scHvc::P64;
           P64[Hp - 112] = _scHvd::P64;
           P64[Hp - 104] = _scHve::P64;
           P64[Hp - 96] = _scHvi::P64;
           P64[Hp - 88] = _scHvn::P64;
           P64[Hp - 80] = _scHvs::P64;
           P64[Hp - 72] = _scHvx::P64;
           P64[Hp - 64] = _scHvC::P64;
           P64[Hp - 56] = _scHvH::P64;
           P64[Hp - 48] = _scHvM::P64;
           P64[Hp - 40] = _scHvR::P64;
           P64[Hp - 32] = _scHvW::P64;
           P64[Hp - 24] = _scHw1::P64;
           P64[Hp - 16] = _scHw6::P64;
           P64[Hp - 8] = _scHwb::P64;
           P64[Hp] = _scHwd::P64;
           R3 = Hp - 176;
           R2 = lvl17_rcHpM_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHyo_info" {
     sat_scHyo_info:
         const sat_scHyo_entry;
         const 21;
         const 12884901903;
         const ScI2G_srt;
 },
 p_scHwc_entry() //  [R1, R2]
         { []
         }
     {offset
       ccKzk: // global
           Hp = Hp + 184;
           if (Hp > HpLim) (likely: False) goto ccKzo; else goto ccKzn;
       ccKzo: // global
           HpAlloc = 184;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccKzn: // global
           _scHuW::P64 = P64[R1 + 7];
           _scHuX::P64 = P64[R1 + 15];
           _scHv9::P64 = P64[R1 + 23];
           _scHva::P64 = P64[R1 + 31];
           _scHvb::P64 = P64[R1 + 39];
           _scHvc::P64 = P64[R1 + 47];
           _scHvd::P64 = P64[R1 + 55];
           _scHve::P64 = P64[R1 + 63];
           _scHvi::P64 = P64[R1 + 71];
           _scHvn::P64 = P64[R1 + 79];
           _scHvs::P64 = P64[R1 + 87];
           _scHvx::P64 = P64[R1 + 95];
           _scHvC::P64 = P64[R1 + 103];
           _scHvH::P64 = P64[R1 + 111];
           _scHvM::P64 = P64[R1 + 119];
           _scHvR::P64 = P64[R1 + 127];
           _scHvW::P64 = P64[R1 + 135];
           _scHw1::P64 = P64[R1 + 143];
           _scHw6::P64 = P64[R1 + 151];
           _scHwb::P64 = P64[R1 + 159];
           I64[Hp - 176] = sat_scHyo_info;
           P64[Hp - 160] = _scHuW::P64;
           P64[Hp - 152] = _scHuX::P64;
           P64[Hp - 144] = _scHv9::P64;
           P64[Hp - 136] = _scHva::P64;
           P64[Hp - 128] = _scHvb::P64;
           P64[Hp - 120] = _scHvc::P64;
           P64[Hp - 112] = _scHvd::P64;
           P64[Hp - 104] = _scHve::P64;
           P64[Hp - 96] = _scHvi::P64;
           P64[Hp - 88] = _scHvn::P64;
           P64[Hp - 80] = _scHvs::P64;
           P64[Hp - 72] = _scHvx::P64;
           P64[Hp - 64] = _scHvC::P64;
           P64[Hp - 56] = _scHvH::P64;
           P64[Hp - 48] = _scHvM::P64;
           P64[Hp - 40] = _scHvR::P64;
           P64[Hp - 32] = _scHvW::P64;
           P64[Hp - 24] = _scHw1::P64;
           P64[Hp - 16] = _scHw6::P64;
           P64[Hp - 8] = _scHwb::P64;
           P64[Hp] = R2;
           R3 = Hp - 176;
           R2 = lvl16_rcHpL_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . p_scHwc_info" {
     p_scHwc_info:
         const p_scHwc_entry;
         const 20;
         const 12884901896;
         const 4294967301;
         const ScI2G_srt;
 },
 sat_scHys_entry() //  [R1]
         { []
         }
     {offset
       ccKzD: // global
           _scHys::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccKzE; else goto ccKzF;
       ccKzF: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccKzH; else goto ccKzG;
       ccKzH: // global
           HpAlloc = 24;
           goto ccKzE;
       ccKzE: // global
           R1 = _scHys::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKzG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scHys::P64;
           _scHwc::P64 = P64[_scHys::P64 + 16];
           _scHyq::P64 = P64[_scHys::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _scHyq::P64;
           R2 = Hp - 14;
           R1 = _scHwc::P64;
           Sp = Sp - 16;
           call p_scHwc_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHys_info" {
     sat_scHys_info:
         const sat_scHys_entry;
         const 2;
         const 12884901906;
         const ScI2G_srt;
 },
 sat_scHyt_entry() //  [R1, R2]
         { []
         }
     {offset
       ccKzJ: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto ccKzN; else goto ccKzM;
       ccKzN: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccKzM: // global
           _scHwc::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_scHys_info;
           P64[Hp - 32] = _scHwc::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHyt_info" {
     sat_scHyt_info:
         const sat_scHyt_entry;
         const 1;
         const 12884901897;
         const 4294967301;
         const ScI2G_srt;
 },
 GHC.Stats.$fShowRTSStats_$cshowsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       ccKzO: // global
           if ((Sp + -168) < SpLim) (likely: False) goto ccKzP; else goto ccKzQ;
       ccKzP: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Stats.$fShowRTSStats_$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccKzQ: // global
           I64[Sp - 16] = block_ccKjy_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucKzZ; else goto ccKjz;
       ucKzZ: // global
           call _ccKjy(R1) args: 0, res: 0, upd: 0;
       ccKjz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.$fShowRTSStats_$cshowsPrec_info" {
     GHC.Stats.$fShowRTSStats_$cshowsPrec_info:
         const GHC.Stats.$fShowRTSStats_$cshowsPrec_entry;
         const 0;
         const 167503724558;
         const 8589934607;
         const ScI2G_srt;
 },
 _ccKjy() //  [R1]
         { []
         }
     {offset
       ccKjy: // global
           I64[Sp - 152] = block_ccKjD_info;
           _scHuW::P64 = P64[R1 + 7];
           _scHuX::P64 = P64[R1 + 15];
           _scHuY::P64 = P64[R1 + 23];
           _scHuZ::P64 = P64[R1 + 31];
           _scHv0::P64 = P64[R1 + 39];
           _scHv1::P64 = P64[R1 + 47];
           _scHv2::P64 = P64[R1 + 55];
           _scHv3::P64 = P64[R1 + 63];
           _scHv4::P64 = P64[R1 + 71];
           _scHv5::P64 = P64[R1 + 79];
           _scHv6::P64 = P64[R1 + 87];
           _scHv7::P64 = P64[R1 + 95];
           _scHv8::P64 = P64[R1 + 103];
           _scHv9::P64 = P64[R1 + 111];
           _scHva::P64 = P64[R1 + 119];
           _scHvb::P64 = P64[R1 + 127];
           _scHvc::P64 = P64[R1 + 135];
           _scHvd::P64 = P64[R1 + 143];
           _scHve::P64 = P64[R1 + 151];
           _scHvf::P64 = P64[R1 + 159];
           R1 = P64[Sp + 8];
           P64[Sp - 144] = _scHuY::P64;
           P64[Sp - 136] = _scHuZ::P64;
           P64[Sp - 128] = _scHv0::P64;
           P64[Sp - 120] = _scHv1::P64;
           P64[Sp - 112] = _scHv2::P64;
           P64[Sp - 104] = _scHv3::P64;
           P64[Sp - 96] = _scHv4::P64;
           P64[Sp - 88] = _scHv5::P64;
           P64[Sp - 80] = _scHv6::P64;
           P64[Sp - 72] = _scHv7::P64;
           P64[Sp - 64] = _scHv8::P64;
           P64[Sp - 56] = _scHv9::P64;
           P64[Sp - 48] = _scHva::P64;
           P64[Sp - 40] = _scHvb::P64;
           P64[Sp - 32] = _scHvc::P64;
           P64[Sp - 24] = _scHvd::P64;
           P64[Sp - 16] = _scHve::P64;
           P64[Sp - 8] = _scHvf::P64;
           P64[Sp] = _scHuX::P64;
           P64[Sp + 8] = _scHuW::P64;
           Sp = Sp - 152;
           if (R1 & 7 != 0) goto ucKzY; else goto ccKjE;
       ucKzY: // global
           call _ccKjD(R1) args: 0, res: 0, upd: 0;
       ccKjE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccKjy_info" {
     block_ccKjy_info:
         const _ccKjy;
         const 1;
         const 30064771102;
         const ScI2G_srt;
 },
 _ccKjD() //  [R1]
         { []
         }
     {offset
       ccKjD: // global
           Hp = Hp + 472;
           if (Hp > HpLim) (likely: False) goto ccKzU; else goto ccKzT;
       ccKzU: // global
           HpAlloc = 472;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccKzT: // global
           _scHvh::I64 = I64[R1 + 7];
           I64[Hp - 464] = w1_scHvi_info;
           P64[Hp - 448] = P64[Sp + 8];
           I64[Hp - 440] = w2_scHvn_info;
           P64[Hp - 424] = P64[Sp + 16];
           I64[Hp - 416] = w3_scHvs_info;
           P64[Hp - 400] = P64[Sp + 24];
           I64[Hp - 392] = w4_scHvx_info;
           P64[Hp - 376] = P64[Sp + 32];
           I64[Hp - 368] = w5_scHvC_info;
           P64[Hp - 352] = P64[Sp + 40];
           I64[Hp - 344] = w6_scHvH_info;
           P64[Hp - 328] = P64[Sp + 48];
           I64[Hp - 320] = w7_scHvM_info;
           P64[Hp - 304] = P64[Sp + 56];
           I64[Hp - 296] = w8_scHvR_info;
           P64[Hp - 280] = P64[Sp + 64];
           I64[Hp - 272] = w9_scHvW_info;
           P64[Hp - 256] = P64[Sp + 72];
           I64[Hp - 248] = w10_scHw1_info;
           P64[Hp - 232] = P64[Sp + 80];
           I64[Hp - 224] = w11_scHw6_info;
           P64[Hp - 208] = P64[Sp + 88];
           I64[Hp - 200] = f_scHwb_info;
           P64[Hp - 184] = P64[Sp + 144];
           I64[Hp - 176] = p_scHwc_info;
           P64[Hp - 168] = P64[Sp + 160];
           P64[Hp - 160] = P64[Sp + 152];
           P64[Hp - 152] = P64[Sp + 96];
           P64[Hp - 144] = P64[Sp + 104];
           P64[Hp - 136] = P64[Sp + 112];
           P64[Hp - 128] = P64[Sp + 120];
           P64[Hp - 120] = P64[Sp + 128];
           P64[Hp - 112] = P64[Sp + 136];
           P64[Hp - 104] = Hp - 464;
           P64[Hp - 96] = Hp - 440;
           P64[Hp - 88] = Hp - 416;
           P64[Hp - 80] = Hp - 392;
           P64[Hp - 72] = Hp - 368;
           P64[Hp - 64] = Hp - 344;
           P64[Hp - 56] = Hp - 320;
           P64[Hp - 48] = Hp - 296;
           P64[Hp - 40] = Hp - 272;
           P64[Hp - 32] = Hp - 248;
           P64[Hp - 24] = Hp - 224;
           P64[Hp - 16] = Hp - 200;
           _ccKnJ::P64 = Hp - 175;
           if (%MO_S_Lt_W64(_scHvh::I64, 11)) goto ccKzW; else goto ccKzX;
       ccKzW: // global
           Hp = Hp - 16;
           R1 = _ccKnJ::P64;
           Sp = Sp + 168;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccKzX: // global
           I64[Hp - 8] = sat_scHyt_info;
           P64[Hp] = _ccKnJ::P64;
           R1 = Hp - 7;
           Sp = Sp + 168;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccKjD_info" {
     block_ccKjD_info:
         const _ccKjD;
         const 20;
         const 30064771102;
         const ScI2G_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.315143055 UTC

[section ""data" . GHC.Stats.$fShowRTSStats_$cshow_closure" {
     GHC.Stats.$fShowRTSStats_$cshow_closure:
         const GHC.Stats.$fShowRTSStats_$cshow_info;
         const 0;
 },
 GHC.Stats.$fShowRTSStats_$cshow_entry() //  [R2]
         { []
         }
     {offset
       ccKIS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccKIT; else goto ccKIU;
       ccKIT: // global
           R2 = R2;
           R1 = GHC.Stats.$fShowRTSStats_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccKIU: // global
           R3 = R2;
           R2 = GHC.Stats.$fShowGCDetails2_closure+1;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 16;
           call GHC.Stats.$fShowRTSStats_$cshowsPrec_entry(R3,
                                                           R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.$fShowRTSStats_$cshow_info" {
     GHC.Stats.$fShowRTSStats_$cshow_info:
         const GHC.Stats.$fShowRTSStats_$cshow_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const ScI2G_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.319105709 UTC

[section ""data" . GHC.Stats.$fShowRTSStats1_closure" {
     GHC.Stats.$fShowRTSStats1_closure:
         const GHC.Stats.$fShowRTSStats1_info;
         const 0;
 },
 GHC.Stats.$fShowRTSStats1_entry() //  [R2]
         { []
         }
     {offset
       ccKJ4: // global
           R3 = R2;
           R2 = GHC.Stats.$fShowGCDetails2_closure+1;
           call GHC.Stats.$fShowRTSStats_$cshowsPrec_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.$fShowRTSStats1_info" {
     GHC.Stats.$fShowRTSStats1_info:
         const GHC.Stats.$fShowRTSStats1_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const ScI2G_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.322818454 UTC

[section ""data" . GHC.Stats.$fShowRTSStats_$cshowList_closure" {
     GHC.Stats.$fShowRTSStats_$cshowList_closure:
         const GHC.Stats.$fShowRTSStats_$cshowList_info;
         const 0;
 },
 GHC.Stats.$fShowRTSStats_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       ccKJf: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Stats.$fShowRTSStats1_closure+1;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.$fShowRTSStats_$cshowList_info" {
     GHC.Stats.$fShowRTSStats_$cshowList_info:
         const GHC.Stats.$fShowRTSStats_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const ScI2G_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.326749679 UTC

[section ""data" . GHC.Stats.$fShowRTSStats_closure" {
     GHC.Stats.$fShowRTSStats_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Stats.$fShowRTSStats_$cshowsPrec_closure+2;
         const GHC.Stats.$fShowRTSStats_$cshow_closure+1;
         const GHC.Stats.$fShowRTSStats_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.328510179 UTC

[section ""cstring" . GHC.Stats.$tcGCDetails2_bytes" {
     GHC.Stats.$tcGCDetails2_bytes:
         I8[] [71,67,68,101,116,97,105,108,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.335902869 UTC

[section ""data" . lexeme_rcHq6_closure" {
     lexeme_rcHq6_closure:
         const lexeme_rcHq6_info;
         const 0;
         const 0;
         const 0;
 },
 lexeme_rcHq6_entry() //  [R1]
         { []
         }
     {offset
       ccKJu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccKJv; else goto ccKJw;
       ccKJv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKJw: // global
           (_ccKJr::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccKJr::I64 == 0) goto ccKJt; else goto ccKJs;
       ccKJt: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccKJs: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccKJr::I64;
           R2 = GHC.Stats.$tcGCDetails2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lexeme_rcHq6_info" {
     lexeme_rcHq6_info:
         const lexeme_rcHq6_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.341775637 UTC

[section ""data" . lexeme1_rcHq7_closure" {
     lexeme1_rcHq7_closure:
         const Text.Read.Lex.Ident_con_info;
         const lexeme_rcHq6_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.34449182 UTC

[section ""cstring" . lexeme2_rcHq8_bytes" {
     lexeme2_rcHq8_bytes:
         I8[] [123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.348211415 UTC

[section ""data" . lexeme3_rcHq9_closure" {
     lexeme3_rcHq9_closure:
         const lexeme3_rcHq9_info;
         const 0;
         const 0;
         const 0;
 },
 lexeme3_rcHq9_entry() //  [R1]
         { []
         }
     {offset
       ccKJM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccKJN; else goto ccKJO;
       ccKJN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKJO: // global
           (_ccKJJ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccKJJ::I64 == 0) goto ccKJL; else goto ccKJK;
       ccKJL: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccKJK: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccKJJ::I64;
           R2 = lexeme2_rcHq8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lexeme3_rcHq9_info" {
     lexeme3_rcHq9_info:
         const lexeme3_rcHq9_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.354788455 UTC

[section ""data" . lexeme4_rcHqa_closure" {
     lexeme4_rcHqa_closure:
         const Text.Read.Lex.Punc_con_info;
         const lexeme3_rcHq9_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.357601503 UTC

[section ""cstring" . ds_rcHqb_bytes" {
     ds_rcHqb_bytes:
         I8[] [103,99,100,101,116,97,105,108,115,95,103,101,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.361275308 UTC

[section ""data" . ds1_rcHqc_closure" {
     ds1_rcHqc_closure:
         const ds1_rcHqc_info;
         const 0;
         const 0;
         const 0;
 },
 ds1_rcHqc_entry() //  [R1]
         { []
         }
     {offset
       ccKK4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccKK5; else goto ccKK6;
       ccKK5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKK6: // global
           (_ccKK1::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccKK1::I64 == 0) goto ccKK3; else goto ccKK2;
       ccKK3: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccKK2: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccKK1::I64;
           R2 = ds_rcHqb_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds1_rcHqc_info" {
     ds1_rcHqc_info:
         const ds1_rcHqc_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.367240295 UTC

[section ""data" . lvl37_rcHqd_closure" {
     lvl37_rcHqd_closure:
         const lvl37_rcHqd_info;
         const 0;
 },
 lvl37_rcHqd_entry() //  [R2]
         { []
         }
     {offset
       ccKKi: // global
           R3 = R2;
           R2 = Text.ParserCombinators.ReadPrec.minPrec_closure;
           call GHC.Read.$fReadWord32_$creadsPrec_entry(R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl37_rcHqd_info" {
     lvl37_rcHqd_info:
         const lvl37_rcHqd_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const ScI2G_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.372702873 UTC

[section ""data" . ds2_rcHqe_closure" {
     ds2_rcHqe_closure:
         const ds2_rcHqe_info;
         const 0;
 },
 ds2_rcHqe_entry() //  [R2, R3]
         { []
         }
     {offset
       ccKKw: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccKKx; else goto ccKKy;
       ccKKx: // global
           R3 = R3;
           R2 = R2;
           R1 = ds2_rcHqe_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccKKy: // global
           I64[Sp - 8] = block_ccKKt_info;
           R3 = R3;
           R2 = lvl37_rcHqd_closure+1;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . ds2_rcHqe_info" {
     ds2_rcHqe_info:
         const ds2_rcHqe_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const ScI2G_srt+72;
 },
 _ccKKt() //  [R1]
         { []
         }
     {offset
       ccKKt: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccKKB; else goto ccKKA;
       ccKKB: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccKKA: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccKKt_info" {
     block_ccKKt_info:
         const _ccKKt;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.378163873 UTC

[section ""data" . n_rcHqf_closure" {
     n_rcHqf_closure:
         const GHC.Types.I#_con_info;
         const 11;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.3799882 UTC

[section ""cstring" . lvl38_rcHqg_bytes" {
     lvl38_rcHqg_bytes:
         I8[] [44]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.382563921 UTC

[section ""data" . lvl39_rcHqh_closure" {
     lvl39_rcHqh_closure:
         const lvl39_rcHqh_info;
         const 0;
         const 0;
         const 0;
 },
 lvl39_rcHqh_entry() //  [R1]
         { []
         }
     {offset
       ccKKT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccKKU; else goto ccKKV;
       ccKKU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKKV: // global
           (_ccKKQ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccKKQ::I64 == 0) goto ccKKS; else goto ccKKR;
       ccKKS: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccKKR: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccKKQ::I64;
           R2 = lvl38_rcHqg_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl39_rcHqh_info" {
     lvl39_rcHqh_info:
         const lvl39_rcHqh_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.386646544 UTC

[section ""data" . lvl40_rcHqi_closure" {
     lvl40_rcHqi_closure:
         const Text.Read.Lex.Punc_con_info;
         const lvl39_rcHqh_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.38849391 UTC

[section ""cstring" . lvl41_rcHqj_bytes" {
     lvl41_rcHqj_bytes:
         I8[] [103,99,100,101,116,97,105,108,115,95,116,104,114,101,97,100,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.391950988 UTC

[section ""data" . lvl42_rcHqk_closure" {
     lvl42_rcHqk_closure:
         const lvl42_rcHqk_info;
         const 0;
         const 0;
         const 0;
 },
 lvl42_rcHqk_entry() //  [R1]
         { []
         }
     {offset
       ccKLb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccKLc; else goto ccKLd;
       ccKLc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKLd: // global
           (_ccKL8::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccKL8::I64 == 0) goto ccKLa; else goto ccKL9;
       ccKLa: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccKL9: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccKL8::I64;
           R2 = lvl41_rcHqj_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl42_rcHqk_info" {
     lvl42_rcHqk_info:
         const lvl42_rcHqk_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.397663907 UTC

[section ""cstring" . lvl43_rcHql_bytes" {
     lvl43_rcHql_bytes:
         I8[] [103,99,100,101,116,97,105,108,115,95,97,108,108,111,99,97,116,101,100,95,98,121,116,101,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.401447145 UTC

[section ""data" . lvl44_rcHqm_closure" {
     lvl44_rcHqm_closure:
         const lvl44_rcHqm_info;
         const 0;
         const 0;
         const 0;
 },
 lvl44_rcHqm_entry() //  [R1]
         { []
         }
     {offset
       ccKLs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccKLt; else goto ccKLu;
       ccKLt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKLu: // global
           (_ccKLp::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccKLp::I64 == 0) goto ccKLr; else goto ccKLq;
       ccKLr: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccKLq: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccKLp::I64;
           R2 = lvl43_rcHql_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl44_rcHqm_info" {
     lvl44_rcHqm_info:
         const lvl44_rcHqm_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.408464246 UTC

[section ""data" . lvl45_rcHqn_closure" {
     lvl45_rcHqn_closure:
         const lvl45_rcHqn_info;
         const 0;
 },
 lvl45_rcHqn_entry() //  [R2]
         { []
         }
     {offset
       ccKLG: // global
           R3 = R2;
           R2 = Text.ParserCombinators.ReadPrec.minPrec_closure;
           call GHC.Read.$fReadWord64_$creadsPrec_entry(R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl45_rcHqn_info" {
     lvl45_rcHqn_info:
         const lvl45_rcHqn_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const ScI2G_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.41300679 UTC

[section ""data" . lvl46_rcHqo_closure" {
     lvl46_rcHqo_closure:
         const lvl46_rcHqo_info;
         const 0;
 },
 lvl46_rcHqo_entry() //  [R2, R3]
         { []
         }
     {offset
       ccKLU: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccKLV; else goto ccKLW;
       ccKLV: // global
           R3 = R3;
           R2 = R2;
           R1 = lvl46_rcHqo_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccKLW: // global
           I64[Sp - 8] = block_ccKLR_info;
           R3 = R3;
           R2 = lvl45_rcHqn_closure+1;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl46_rcHqo_info" {
     lvl46_rcHqo_info:
         const lvl46_rcHqo_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const ScI2G_srt+96;
 },
 _ccKLR() //  [R1]
         { []
         }
     {offset
       ccKLR: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccKLZ; else goto ccKLY;
       ccKLZ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccKLY: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccKLR_info" {
     block_ccKLR_info:
         const _ccKLR;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.418129666 UTC

[section ""cstring" . lvl47_rcHqp_bytes" {
     lvl47_rcHqp_bytes:
         I8[] [103,99,100,101,116,97,105,108,115,95,108,105,118,101,95,98,121,116,101,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.420553633 UTC

[section ""data" . lvl48_rcHqq_closure" {
     lvl48_rcHqq_closure:
         const lvl48_rcHqq_info;
         const 0;
         const 0;
         const 0;
 },
 lvl48_rcHqq_entry() //  [R1]
         { []
         }
     {offset
       ccKMg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccKMh; else goto ccKMi;
       ccKMh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKMi: // global
           (_ccKMd::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccKMd::I64 == 0) goto ccKMf; else goto ccKMe;
       ccKMf: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccKMe: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccKMd::I64;
           R2 = lvl47_rcHqp_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl48_rcHqq_info" {
     lvl48_rcHqq_info:
         const lvl48_rcHqq_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.424264811 UTC

[section ""cstring" . lvl49_rcHqr_bytes" {
     lvl49_rcHqr_bytes:
         I8[] [103,99,100,101,116,97,105,108,115,95,108,97,114,103,101,95,111,98,106,101,99,116,115,95,98,121,116,101,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.426508934 UTC

[section ""data" . lvl50_rcHqs_closure" {
     lvl50_rcHqs_closure:
         const lvl50_rcHqs_info;
         const 0;
         const 0;
         const 0;
 },
 lvl50_rcHqs_entry() //  [R1]
         { []
         }
     {offset
       ccKMx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccKMy; else goto ccKMz;
       ccKMy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKMz: // global
           (_ccKMu::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccKMu::I64 == 0) goto ccKMw; else goto ccKMv;
       ccKMw: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccKMv: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccKMu::I64;
           R2 = lvl49_rcHqr_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl50_rcHqs_info" {
     lvl50_rcHqs_info:
         const lvl50_rcHqs_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.430651164 UTC

[section ""cstring" . lvl51_rcHqt_bytes" {
     lvl51_rcHqt_bytes:
         I8[] [103,99,100,101,116,97,105,108,115,95,99,111,109,112,97,99,116,95,98,121,116,101,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.433305239 UTC

[section ""data" . lvl52_rcHqu_closure" {
     lvl52_rcHqu_closure:
         const lvl52_rcHqu_info;
         const 0;
         const 0;
         const 0;
 },
 lvl52_rcHqu_entry() //  [R1]
         { []
         }
     {offset
       ccKMO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccKMP; else goto ccKMQ;
       ccKMP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKMQ: // global
           (_ccKML::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccKML::I64 == 0) goto ccKMN; else goto ccKMM;
       ccKMN: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccKMM: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccKML::I64;
           R2 = lvl51_rcHqt_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl52_rcHqu_info" {
     lvl52_rcHqu_info:
         const lvl52_rcHqu_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.437881409 UTC

[section ""cstring" . lvl53_rcHqv_bytes" {
     lvl53_rcHqv_bytes:
         I8[] [103,99,100,101,116,97,105,108,115,95,115,108,111,112,95,98,121,116,101,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.440368848 UTC

[section ""data" . lvl54_rcHqw_closure" {
     lvl54_rcHqw_closure:
         const lvl54_rcHqw_info;
         const 0;
         const 0;
         const 0;
 },
 lvl54_rcHqw_entry() //  [R1]
         { []
         }
     {offset
       ccKN5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccKN6; else goto ccKN7;
       ccKN6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKN7: // global
           (_ccKN2::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccKN2::I64 == 0) goto ccKN4; else goto ccKN3;
       ccKN4: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccKN3: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccKN2::I64;
           R2 = lvl53_rcHqv_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl54_rcHqw_info" {
     lvl54_rcHqw_info:
         const lvl54_rcHqw_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.444118349 UTC

[section ""cstring" . lvl55_rcHqx_bytes" {
     lvl55_rcHqx_bytes:
         I8[] [103,99,100,101,116,97,105,108,115,95,109,101,109,95,105,110,95,117,115,101,95,98,121,116,101,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.446596996 UTC

[section ""data" . lvl56_rcHqy_closure" {
     lvl56_rcHqy_closure:
         const lvl56_rcHqy_info;
         const 0;
         const 0;
         const 0;
 },
 lvl56_rcHqy_entry() //  [R1]
         { []
         }
     {offset
       ccKNm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccKNn; else goto ccKNo;
       ccKNn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKNo: // global
           (_ccKNj::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccKNj::I64 == 0) goto ccKNl; else goto ccKNk;
       ccKNl: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccKNk: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccKNj::I64;
           R2 = lvl55_rcHqx_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl56_rcHqy_info" {
     lvl56_rcHqy_info:
         const lvl56_rcHqy_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.450872797 UTC

[section ""cstring" . lvl57_rcHqz_bytes" {
     lvl57_rcHqz_bytes:
         I8[] [103,99,100,101,116,97,105,108,115,95,99,111,112,105,101,100,95,98,121,116,101,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.453432149 UTC

[section ""data" . lvl58_rcHqA_closure" {
     lvl58_rcHqA_closure:
         const lvl58_rcHqA_info;
         const 0;
         const 0;
         const 0;
 },
 lvl58_rcHqA_entry() //  [R1]
         { []
         }
     {offset
       ccKND: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccKNE; else goto ccKNF;
       ccKNE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKNF: // global
           (_ccKNA::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccKNA::I64 == 0) goto ccKNC; else goto ccKNB;
       ccKNC: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccKNB: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccKNA::I64;
           R2 = lvl57_rcHqz_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl58_rcHqA_info" {
     lvl58_rcHqA_info:
         const lvl58_rcHqA_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.457369679 UTC

[section ""cstring" . lvl59_rcHqB_bytes" {
     lvl59_rcHqB_bytes:
         I8[] [103,99,100,101,116,97,105,108,115,95,112,97,114,95,109,97,120,95,99,111,112,105,101,100,95,98,121,116,101,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.45993283 UTC

[section ""data" . lvl60_rcHqC_closure" {
     lvl60_rcHqC_closure:
         const lvl60_rcHqC_info;
         const 0;
         const 0;
         const 0;
 },
 lvl60_rcHqC_entry() //  [R1]
         { []
         }
     {offset
       ccKNU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccKNV; else goto ccKNW;
       ccKNV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKNW: // global
           (_ccKNR::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccKNR::I64 == 0) goto ccKNT; else goto ccKNS;
       ccKNT: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccKNS: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccKNR::I64;
           R2 = lvl59_rcHqB_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl60_rcHqC_info" {
     lvl60_rcHqC_info:
         const lvl60_rcHqC_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.463934262 UTC

[section ""cstring" . lvl61_rcHqD_bytes" {
     lvl61_rcHqD_bytes:
         I8[] [103,99,100,101,116,97,105,108,115,95,112,97,114,95,98,97,108,97,110,99,101,100,95,99,111,112,105,101,100,95,98,121,116,101,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.466611889 UTC

[section ""data" . lvl62_rcHqE_closure" {
     lvl62_rcHqE_closure:
         const lvl62_rcHqE_info;
         const 0;
         const 0;
         const 0;
 },
 lvl62_rcHqE_entry() //  [R1]
         { []
         }
     {offset
       ccKOb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccKOc; else goto ccKOd;
       ccKOc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKOd: // global
           (_ccKO8::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccKO8::I64 == 0) goto ccKOa; else goto ccKO9;
       ccKOa: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccKO9: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccKO8::I64;
           R2 = lvl61_rcHqD_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl62_rcHqE_info" {
     lvl62_rcHqE_info:
         const lvl62_rcHqE_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.471624139 UTC

[section ""cstring" . lvl63_rcHqF_bytes" {
     lvl63_rcHqF_bytes:
         I8[] [103,99,100,101,116,97,105,108,115,95,115,121,110,99,95,101,108,97,112,115,101,100,95,110,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.474016337 UTC

[section ""data" . lvl64_rcHqG_closure" {
     lvl64_rcHqG_closure:
         const lvl64_rcHqG_info;
         const 0;
         const 0;
         const 0;
 },
 lvl64_rcHqG_entry() //  [R1]
         { []
         }
     {offset
       ccKOs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccKOt; else goto ccKOu;
       ccKOt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKOu: // global
           (_ccKOp::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccKOp::I64 == 0) goto ccKOr; else goto ccKOq;
       ccKOr: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccKOq: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccKOp::I64;
           R2 = lvl63_rcHqF_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl64_rcHqG_info" {
     lvl64_rcHqG_info:
         const lvl64_rcHqG_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.478192915 UTC

[section ""data" . lvl65_rcHqH_closure" {
     lvl65_rcHqH_closure:
         const lvl65_rcHqH_info;
         const 0;
 },
 lvl65_rcHqH_entry() //  [R2]
         { []
         }
     {offset
       ccKOG: // global
           R3 = R2;
           R2 = Text.ParserCombinators.ReadPrec.minPrec_closure;
           call GHC.Int.$fReadInt64_$creadsPrec_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl65_rcHqH_info" {
     lvl65_rcHqH_info:
         const lvl65_rcHqH_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const ScI2G_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.482489086 UTC

[section ""data" . lvl66_rcHqI_closure" {
     lvl66_rcHqI_closure:
         const lvl66_rcHqI_info;
         const 0;
 },
 lvl66_rcHqI_entry() //  [R2, R3]
         { []
         }
     {offset
       ccKOU: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccKOV; else goto ccKOW;
       ccKOV: // global
           R3 = R3;
           R2 = R2;
           R1 = lvl66_rcHqI_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccKOW: // global
           I64[Sp - 8] = block_ccKOR_info;
           R3 = R3;
           R2 = lvl65_rcHqH_closure+1;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl66_rcHqI_info" {
     lvl66_rcHqI_info:
         const lvl66_rcHqI_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const ScI2G_srt+120;
 },
 _ccKOR() //  [R1]
         { []
         }
     {offset
       ccKOR: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccKOZ; else goto ccKOY;
       ccKOZ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccKOY: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccKOR_info" {
     block_ccKOR_info:
         const _ccKOR;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.489135787 UTC

[section ""cstring" . lvl67_rcHqJ_bytes" {
     lvl67_rcHqJ_bytes:
         I8[] [103,99,100,101,116,97,105,108,115,95,99,112,117,95,110,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.493018469 UTC

[section ""data" . lvl68_rcHqK_closure" {
     lvl68_rcHqK_closure:
         const lvl68_rcHqK_info;
         const 0;
         const 0;
         const 0;
 },
 lvl68_rcHqK_entry() //  [R1]
         { []
         }
     {offset
       ccKPg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccKPh; else goto ccKPi;
       ccKPh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKPi: // global
           (_ccKPd::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccKPd::I64 == 0) goto ccKPf; else goto ccKPe;
       ccKPf: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccKPe: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccKPd::I64;
           R2 = lvl67_rcHqJ_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl68_rcHqK_info" {
     lvl68_rcHqK_info:
         const lvl68_rcHqK_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.499145249 UTC

[section ""cstring" . lvl69_rcHqL_bytes" {
     lvl69_rcHqL_bytes:
         I8[] [103,99,100,101,116,97,105,108,115,95,101,108,97,112,115,101,100,95,110,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.503232166 UTC

[section ""data" . lvl70_rcHqM_closure" {
     lvl70_rcHqM_closure:
         const lvl70_rcHqM_info;
         const 0;
         const 0;
         const 0;
 },
 lvl70_rcHqM_entry() //  [R1]
         { []
         }
     {offset
       ccKPx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccKPy; else goto ccKPz;
       ccKPy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKPz: // global
           (_ccKPu::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccKPu::I64 == 0) goto ccKPw; else goto ccKPv;
       ccKPw: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccKPv: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccKPu::I64;
           R2 = lvl69_rcHqL_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl70_rcHqM_info" {
     lvl70_rcHqM_info:
         const lvl70_rcHqM_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.510464942 UTC

[section ""data" . lvl71_rcHqN_closure" {
     lvl71_rcHqN_closure:
         const lvl71_rcHqN_info;
         const 0;
         const 0;
         const 0;
 },
 lvl71_rcHqN_entry() //  [R1]
         { []
         }
     {offset
       ccKPN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccKPO; else goto ccKPP;
       ccKPO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccKPP: // global
           (_ccKPK::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccKPK::I64 == 0) goto ccKPM; else goto ccKPL;
       ccKPM: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccKPL: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccKPK::I64;
           R2 = lvl15_rcHpK_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl71_rcHqN_info" {
     lvl71_rcHqN_info:
         const lvl71_rcHqN_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.514223322 UTC

[section ""data" . lvl72_rcHqO_closure" {
     lvl72_rcHqO_closure:
         const Text.Read.Lex.Punc_con_info;
         const lvl71_rcHqN_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.546029551 UTC

[section ""data" . GHC.Stats.$w$creadPrec_closure" {
     GHC.Stats.$w$creadPrec_closure:
         const GHC.Stats.$w$creadPrec_info;
         const 0;
 },
 sat_scHzh_entry() //  [R1, R2]
         { []
         }
     {offset
       ccKSx: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto ccKSB; else goto ccKSA;
       ccKSB: // global
           HpAlloc = 120;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccKSA: // global
           _scHyK::P64 = P64[R1 + 7];
           _scHyO::P64 = P64[R1 + 15];
           _scHyQ::P64 = P64[R1 + 23];
           _scHyS::P64 = P64[R1 + 31];
           _scHyU::P64 = P64[R1 + 39];
           _scHyW::P64 = P64[R1 + 47];
           _scHyY::P64 = P64[R1 + 55];
           _scHz0::P64 = P64[R1 + 63];
           _scHz2::P64 = P64[R1 + 71];
           _scHz4::P64 = P64[R1 + 79];
           _scHz6::P64 = P64[R1 + 87];
           _scHz8::P64 = P64[R1 + 95];
           _scHza::P64 = P64[R1 + 103];
           _scHzc::P64 = P64[R1 + 111];
           _scHze::P64 = P64[R1 + 119];
           I64[Hp - 112] = GHC.Stats.GCDetails_con_info;
           P64[Hp - 104] = _scHyO::P64;
           P64[Hp - 96] = _scHyQ::P64;
           P64[Hp - 88] = _scHyS::P64;
           P64[Hp - 80] = _scHyU::P64;
           P64[Hp - 72] = _scHyW::P64;
           P64[Hp - 64] = _scHyY::P64;
           P64[Hp - 56] = _scHz0::P64;
           P64[Hp - 48] = _scHz2::P64;
           P64[Hp - 40] = _scHz4::P64;
           P64[Hp - 32] = _scHz6::P64;
           P64[Hp - 24] = _scHz8::P64;
           P64[Hp - 16] = _scHza::P64;
           P64[Hp - 8] = _scHzc::P64;
           P64[Hp] = _scHze::P64;
           R2 = Hp - 111;
           R1 = _scHyK::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHzh_info" {
     sat_scHzh_info:
         const sat_scHzh_entry;
         const 15;
         const 8;
         const 4294967301;
 },
 sat_scHzk_entry() //  [R1, R2]
         { []
         }
     {offset
       ccKSF: // global
           _scHze::P64 = R2;
           _scHzk::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto ccKSG; else goto ccKSH;
       ccKSH: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto ccKSJ; else goto ccKSI;
       ccKSJ: // global
           HpAlloc = 128;
           goto ccKSG;
       ccKSG: // global
           R2 = _scHze::P64;
           R1 = _scHzk::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccKSI: // global
           _scHyK::P64 = P64[_scHzk::P64 + 7];
           _scHyO::P64 = P64[_scHzk::P64 + 15];
           _scHyQ::P64 = P64[_scHzk::P64 + 23];
           _scHyS::P64 = P64[_scHzk::P64 + 31];
           _scHyU::P64 = P64[_scHzk::P64 + 39];
           _scHyW::P64 = P64[_scHzk::P64 + 47];
           _scHyY::P64 = P64[_scHzk::P64 + 55];
           _scHz0::P64 = P64[_scHzk::P64 + 63];
           _scHz2::P64 = P64[_scHzk::P64 + 71];
           _scHz4::P64 = P64[_scHzk::P64 + 79];
           _scHz6::P64 = P64[_scHzk::P64 + 87];
           _scHz8::P64 = P64[_scHzk::P64 + 95];
           _scHza::P64 = P64[_scHzk::P64 + 103];
           _scHzc::P64 = P64[_scHzk::P64 + 111];
           I64[Hp - 120] = sat_scHzh_info;
           P64[Hp - 112] = _scHyK::P64;
           P64[Hp - 104] = _scHyO::P64;
           P64[Hp - 96] = _scHyQ::P64;
           P64[Hp - 88] = _scHyS::P64;
           P64[Hp - 80] = _scHyU::P64;
           P64[Hp - 72] = _scHyW::P64;
           P64[Hp - 64] = _scHyY::P64;
           P64[Hp - 56] = _scHz0::P64;
           P64[Hp - 48] = _scHz2::P64;
           P64[Hp - 40] = _scHz4::P64;
           P64[Hp - 32] = _scHz6::P64;
           P64[Hp - 24] = _scHz8::P64;
           P64[Hp - 16] = _scHza::P64;
           P64[Hp - 8] = _scHzc::P64;
           P64[Hp] = _scHze::P64;
           I64[Sp - 8] = block_ccKSC_info;
           R3 = Hp - 119;
           R2 = lvl72_rcHqO_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHzk_info" {
     sat_scHzk_info:
         const sat_scHzk_entry;
         const 14;
         const 12884901896;
         const 4294967301;
         const ScI2G_srt+136;
 },
 _ccKSC() //  [R1]
         { []
         }
     {offset
       ccKSC: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccKSM; else goto ccKSL;
       ccKSM: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccKSL: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccKSC_info" {
     block_ccKSC_info:
         const _ccKSC;
         const 0;
         const 30;
 },
 sat_scHzl_entry() //  [R1, R2]
         { []
         }
     {offset
       ccKSN: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto ccKSR; else goto ccKSQ;
       ccKSR: // global
           HpAlloc = 120;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccKSQ: // global
           _scHyK::P64 = P64[R1 + 7];
           _scHyO::P64 = P64[R1 + 15];
           _scHyQ::P64 = P64[R1 + 23];
           _scHyS::P64 = P64[R1 + 31];
           _scHyU::P64 = P64[R1 + 39];
           _scHyW::P64 = P64[R1 + 47];
           _scHyY::P64 = P64[R1 + 55];
           _scHz0::P64 = P64[R1 + 63];
           _scHz2::P64 = P64[R1 + 71];
           _scHz4::P64 = P64[R1 + 79];
           _scHz6::P64 = P64[R1 + 87];
           _scHz8::P64 = P64[R1 + 95];
           _scHza::P64 = P64[R1 + 103];
           _scHzc::P64 = P64[R1 + 111];
           I64[Hp - 112] = sat_scHzk_info;
           P64[Hp - 104] = _scHyK::P64;
           P64[Hp - 96] = _scHyO::P64;
           P64[Hp - 88] = _scHyQ::P64;
           P64[Hp - 80] = _scHyS::P64;
           P64[Hp - 72] = _scHyU::P64;
           P64[Hp - 64] = _scHyW::P64;
           P64[Hp - 56] = _scHyY::P64;
           P64[Hp - 48] = _scHz0::P64;
           P64[Hp - 40] = _scHz2::P64;
           P64[Hp - 32] = _scHz4::P64;
           P64[Hp - 24] = _scHz6::P64;
           P64[Hp - 16] = _scHz8::P64;
           P64[Hp - 8] = _scHza::P64;
           P64[Hp] = _scHzc::P64;
           R5 = Hp - 111;
           R4 = n_rcHqf_closure+1;
           R3 = lvl66_rcHqI_closure+2;
           R2 = lvl70_rcHqM_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHzl_info" {
     sat_scHzl_info:
         const sat_scHzl_entry;
         const 14;
         const 133143986184;
         const 4294967301;
         const ScI2G_srt+128;
 },
 sat_scHzo_entry() //  [R1, R2]
         { []
         }
     {offset
       ccKSV: // global
           _scHzc::P64 = R2;
           _scHzo::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto ccKSW; else goto ccKSX;
       ccKSX: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto ccKSZ; else goto ccKSY;
       ccKSZ: // global
           HpAlloc = 120;
           goto ccKSW;
       ccKSW: // global
           R2 = _scHzc::P64;
           R1 = _scHzo::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccKSY: // global
           _scHyK::P64 = P64[_scHzo::P64 + 7];
           _scHyO::P64 = P64[_scHzo::P64 + 15];
           _scHyQ::P64 = P64[_scHzo::P64 + 23];
           _scHyS::P64 = P64[_scHzo::P64 + 31];
           _scHyU::P64 = P64[_scHzo::P64 + 39];
           _scHyW::P64 = P64[_scHzo::P64 + 47];
           _scHyY::P64 = P64[_scHzo::P64 + 55];
           _scHz0::P64 = P64[_scHzo::P64 + 63];
           _scHz2::P64 = P64[_scHzo::P64 + 71];
           _scHz4::P64 = P64[_scHzo::P64 + 79];
           _scHz6::P64 = P64[_scHzo::P64 + 87];
           _scHz8::P64 = P64[_scHzo::P64 + 95];
           _scHza::P64 = P64[_scHzo::P64 + 103];
           I64[Hp - 112] = sat_scHzl_info;
           P64[Hp - 104] = _scHyK::P64;
           P64[Hp - 96] = _scHyO::P64;
           P64[Hp - 88] = _scHyQ::P64;
           P64[Hp - 80] = _scHyS::P64;
           P64[Hp - 72] = _scHyU::P64;
           P64[Hp - 64] = _scHyW::P64;
           P64[Hp - 56] = _scHyY::P64;
           P64[Hp - 48] = _scHz0::P64;
           P64[Hp - 40] = _scHz2::P64;
           P64[Hp - 32] = _scHz4::P64;
           P64[Hp - 24] = _scHz6::P64;
           P64[Hp - 16] = _scHz8::P64;
           P64[Hp - 8] = _scHza::P64;
           P64[Hp] = _scHzc::P64;
           I64[Sp - 8] = block_ccKSS_info;
           R3 = Hp - 111;
           R2 = lvl40_rcHqi_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHzo_info" {
     sat_scHzo_info:
         const sat_scHzo_entry;
         const 13;
         const 270582939656;
         const 4294967301;
         const ScI2G_srt+128;
 },
 _ccKSS() //  [R1]
         { []
         }
     {offset
       ccKSS: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccKT2; else goto ccKT1;
       ccKT2: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccKT1: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccKSS_info" {
     block_ccKSS_info:
         const _ccKSS;
         const 0;
         const 30;
 },
 sat_scHzp_entry() //  [R1, R2]
         { []
         }
     {offset
       ccKT3: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto ccKT7; else goto ccKT6;
       ccKT7: // global
           HpAlloc = 112;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccKT6: // global
           _scHyK::P64 = P64[R1 + 7];
           _scHyO::P64 = P64[R1 + 15];
           _scHyQ::P64 = P64[R1 + 23];
           _scHyS::P64 = P64[R1 + 31];
           _scHyU::P64 = P64[R1 + 39];
           _scHyW::P64 = P64[R1 + 47];
           _scHyY::P64 = P64[R1 + 55];
           _scHz0::P64 = P64[R1 + 63];
           _scHz2::P64 = P64[R1 + 71];
           _scHz4::P64 = P64[R1 + 79];
           _scHz6::P64 = P64[R1 + 87];
           _scHz8::P64 = P64[R1 + 95];
           _scHza::P64 = P64[R1 + 103];
           I64[Hp - 104] = sat_scHzo_info;
           P64[Hp - 96] = _scHyK::P64;
           P64[Hp - 88] = _scHyO::P64;
           P64[Hp - 80] = _scHyQ::P64;
           P64[Hp - 72] = _scHyS::P64;
           P64[Hp - 64] = _scHyU::P64;
           P64[Hp - 56] = _scHyW::P64;
           P64[Hp - 48] = _scHyY::P64;
           P64[Hp - 40] = _scHz0::P64;
           P64[Hp - 32] = _scHz2::P64;
           P64[Hp - 24] = _scHz4::P64;
           P64[Hp - 16] = _scHz6::P64;
           P64[Hp - 8] = _scHz8::P64;
           P64[Hp] = _scHza::P64;
           R5 = Hp - 103;
           R4 = n_rcHqf_closure+1;
           R3 = lvl66_rcHqI_closure+2;
           R2 = lvl68_rcHqK_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHzp_info" {
     sat_scHzp_info:
         const sat_scHzp_entry;
         const 13;
         const 545460846600;
         const 4294967301;
         const ScI2G_srt+128;
 },
 sat_scHzs_entry() //  [R1, R2]
         { []
         }
     {offset
       ccKTb: // global
           _scHza::P64 = R2;
           _scHzs::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto ccKTc; else goto ccKTd;
       ccKTd: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto ccKTf; else goto ccKTe;
       ccKTf: // global
           HpAlloc = 112;
           goto ccKTc;
       ccKTc: // global
           R2 = _scHza::P64;
           R1 = _scHzs::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccKTe: // global
           _scHyK::P64 = P64[_scHzs::P64 + 7];
           _scHyO::P64 = P64[_scHzs::P64 + 15];
           _scHyQ::P64 = P64[_scHzs::P64 + 23];
           _scHyS::P64 = P64[_scHzs::P64 + 31];
           _scHyU::P64 = P64[_scHzs::P64 + 39];
           _scHyW::P64 = P64[_scHzs::P64 + 47];
           _scHyY::P64 = P64[_scHzs::P64 + 55];
           _scHz0::P64 = P64[_scHzs::P64 + 63];
           _scHz2::P64 = P64[_scHzs::P64 + 71];
           _scHz4::P64 = P64[_scHzs::P64 + 79];
           _scHz6::P64 = P64[_scHzs::P64 + 87];
           _scHz8::P64 = P64[_scHzs::P64 + 95];
           I64[Hp - 104] = sat_scHzp_info;
           P64[Hp - 96] = _scHyK::P64;
           P64[Hp - 88] = _scHyO::P64;
           P64[Hp - 80] = _scHyQ::P64;
           P64[Hp - 72] = _scHyS::P64;
           P64[Hp - 64] = _scHyU::P64;
           P64[Hp - 56] = _scHyW::P64;
           P64[Hp - 48] = _scHyY::P64;
           P64[Hp - 40] = _scHz0::P64;
           P64[Hp - 32] = _scHz2::P64;
           P64[Hp - 24] = _scHz4::P64;
           P64[Hp - 16] = _scHz6::P64;
           P64[Hp - 8] = _scHz8::P64;
           P64[Hp] = _scHza::P64;
           I64[Sp - 8] = block_ccKT8_info;
           R3 = Hp - 103;
           R2 = lvl40_rcHqi_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHzs_info" {
     sat_scHzs_info:
         const sat_scHzs_entry;
         const 12;
         const 545460846600;
         const 4294967301;
         const ScI2G_srt+128;
 },
 _ccKT8() //  [R1]
         { []
         }
     {offset
       ccKT8: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccKTi; else goto ccKTh;
       ccKTi: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccKTh: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccKT8_info" {
     block_ccKT8_info:
         const _ccKT8;
         const 0;
         const 30;
 },
 sat_scHzt_entry() //  [R1, R2]
         { []
         }
     {offset
       ccKTj: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto ccKTn; else goto ccKTm;
       ccKTn: // global
           HpAlloc = 104;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccKTm: // global
           _scHyK::P64 = P64[R1 + 7];
           _scHyO::P64 = P64[R1 + 15];
           _scHyQ::P64 = P64[R1 + 23];
           _scHyS::P64 = P64[R1 + 31];
           _scHyU::P64 = P64[R1 + 39];
           _scHyW::P64 = P64[R1 + 47];
           _scHyY::P64 = P64[R1 + 55];
           _scHz0::P64 = P64[R1 + 63];
           _scHz2::P64 = P64[R1 + 71];
           _scHz4::P64 = P64[R1 + 79];
           _scHz6::P64 = P64[R1 + 87];
           _scHz8::P64 = P64[R1 + 95];
           I64[Hp - 96] = sat_scHzs_info;
           P64[Hp - 88] = _scHyK::P64;
           P64[Hp - 80] = _scHyO::P64;
           P64[Hp - 72] = _scHyQ::P64;
           P64[Hp - 64] = _scHyS::P64;
           P64[Hp - 56] = _scHyU::P64;
           P64[Hp - 48] = _scHyW::P64;
           P64[Hp - 40] = _scHyY::P64;
           P64[Hp - 32] = _scHz0::P64;
           P64[Hp - 24] = _scHz2::P64;
           P64[Hp - 16] = _scHz4::P64;
           P64[Hp - 8] = _scHz6::P64;
           P64[Hp] = _scHz8::P64;
           R5 = Hp - 95;
           R4 = n_rcHqf_closure+1;
           R3 = lvl66_rcHqI_closure+2;
           R2 = lvl64_rcHqG_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHzt_info" {
     sat_scHzt_info:
         const sat_scHzt_entry;
         const 12;
         const 1095216660488;
         const 4294967301;
         const ScI2G_srt+128;
 },
 sat_scHzw_entry() //  [R1, R2]
         { []
         }
     {offset
       ccKTr: // global
           _scHz8::P64 = R2;
           _scHzw::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto ccKTs; else goto ccKTt;
       ccKTt: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto ccKTv; else goto ccKTu;
       ccKTv: // global
           HpAlloc = 104;
           goto ccKTs;
       ccKTs: // global
           R2 = _scHz8::P64;
           R1 = _scHzw::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccKTu: // global
           _scHyK::P64 = P64[_scHzw::P64 + 7];
           _scHyO::P64 = P64[_scHzw::P64 + 15];
           _scHyQ::P64 = P64[_scHzw::P64 + 23];
           _scHyS::P64 = P64[_scHzw::P64 + 31];
           _scHyU::P64 = P64[_scHzw::P64 + 39];
           _scHyW::P64 = P64[_scHzw::P64 + 47];
           _scHyY::P64 = P64[_scHzw::P64 + 55];
           _scHz0::P64 = P64[_scHzw::P64 + 63];
           _scHz2::P64 = P64[_scHzw::P64 + 71];
           _scHz4::P64 = P64[_scHzw::P64 + 79];
           _scHz6::P64 = P64[_scHzw::P64 + 87];
           I64[Hp - 96] = sat_scHzt_info;
           P64[Hp - 88] = _scHyK::P64;
           P64[Hp - 80] = _scHyO::P64;
           P64[Hp - 72] = _scHyQ::P64;
           P64[Hp - 64] = _scHyS::P64;
           P64[Hp - 56] = _scHyU::P64;
           P64[Hp - 48] = _scHyW::P64;
           P64[Hp - 40] = _scHyY::P64;
           P64[Hp - 32] = _scHz0::P64;
           P64[Hp - 24] = _scHz2::P64;
           P64[Hp - 16] = _scHz4::P64;
           P64[Hp - 8] = _scHz6::P64;
           P64[Hp] = _scHz8::P64;
           I64[Sp - 8] = block_ccKTo_info;
           R3 = Hp - 95;
           R2 = lvl40_rcHqi_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHzw_info" {
     sat_scHzw_info:
         const sat_scHzw_entry;
         const 11;
         const 1095216660488;
         const 4294967301;
         const ScI2G_srt+128;
 },
 _ccKTo() //  [R1]
         { []
         }
     {offset
       ccKTo: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccKTy; else goto ccKTx;
       ccKTy: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccKTx: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccKTo_info" {
     block_ccKTo_info:
         const _ccKTo;
         const 0;
         const 30;
 },
 sat_scHzx_entry() //  [R1, R2]
         { []
         }
     {offset
       ccKTz: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto ccKTD; else goto ccKTC;
       ccKTD: // global
           HpAlloc = 96;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccKTC: // global
           _scHyK::P64 = P64[R1 + 7];
           _scHyO::P64 = P64[R1 + 15];
           _scHyQ::P64 = P64[R1 + 23];
           _scHyS::P64 = P64[R1 + 31];
           _scHyU::P64 = P64[R1 + 39];
           _scHyW::P64 = P64[R1 + 47];
           _scHyY::P64 = P64[R1 + 55];
           _scHz0::P64 = P64[R1 + 63];
           _scHz2::P64 = P64[R1 + 71];
           _scHz4::P64 = P64[R1 + 79];
           _scHz6::P64 = P64[R1 + 87];
           I64[Hp - 88] = sat_scHzw_info;
           P64[Hp - 80] = _scHyK::P64;
           P64[Hp - 72] = _scHyO::P64;
           P64[Hp - 64] = _scHyQ::P64;
           P64[Hp - 56] = _scHyS::P64;
           P64[Hp - 48] = _scHyU::P64;
           P64[Hp - 40] = _scHyW::P64;
           P64[Hp - 32] = _scHyY::P64;
           P64[Hp - 24] = _scHz0::P64;
           P64[Hp - 16] = _scHz2::P64;
           P64[Hp - 8] = _scHz4::P64;
           P64[Hp] = _scHz6::P64;
           R5 = Hp - 87;
           R4 = n_rcHqf_closure+1;
           R3 = lvl46_rcHqo_closure+2;
           R2 = lvl62_rcHqE_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHzx_info" {
     sat_scHzx_info:
         const sat_scHzx_entry;
         const 11;
         const 17562121273352;
         const 4294967301;
         const ScI2G_srt+104;
 },
 sat_scHzA_entry() //  [R1, R2]
         { []
         }
     {offset
       ccKTH: // global
           _scHz6::P64 = R2;
           _scHzA::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto ccKTI; else goto ccKTJ;
       ccKTJ: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto ccKTL; else goto ccKTK;
       ccKTL: // global
           HpAlloc = 96;
           goto ccKTI;
       ccKTI: // global
           R2 = _scHz6::P64;
           R1 = _scHzA::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccKTK: // global
           _scHyK::P64 = P64[_scHzA::P64 + 7];
           _scHyO::P64 = P64[_scHzA::P64 + 15];
           _scHyQ::P64 = P64[_scHzA::P64 + 23];
           _scHyS::P64 = P64[_scHzA::P64 + 31];
           _scHyU::P64 = P64[_scHzA::P64 + 39];
           _scHyW::P64 = P64[_scHzA::P64 + 47];
           _scHyY::P64 = P64[_scHzA::P64 + 55];
           _scHz0::P64 = P64[_scHzA::P64 + 63];
           _scHz2::P64 = P64[_scHzA::P64 + 71];
           _scHz4::P64 = P64[_scHzA::P64 + 79];
           I64[Hp - 88] = sat_scHzx_info;
           P64[Hp - 80] = _scHyK::P64;
           P64[Hp - 72] = _scHyO::P64;
           P64[Hp - 64] = _scHyQ::P64;
           P64[Hp - 56] = _scHyS::P64;
           P64[Hp - 48] = _scHyU::P64;
           P64[Hp - 40] = _scHyW::P64;
           P64[Hp - 32] = _scHyY::P64;
           P64[Hp - 24] = _scHz0::P64;
           P64[Hp - 16] = _scHz2::P64;
           P64[Hp - 8] = _scHz4::P64;
           P64[Hp] = _scHz6::P64;
           I64[Sp - 8] = block_ccKTE_info;
           R3 = Hp - 87;
           R2 = lvl40_rcHqi_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHzA_info" {
     sat_scHzA_info:
         const sat_scHzA_entry;
         const 10;
         const 17562121273352;
         const 4294967301;
         const ScI2G_srt+104;
 },
 _ccKTE() //  [R1]
         { []
         }
     {offset
       ccKTE: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccKTO; else goto ccKTN;
       ccKTO: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccKTN: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccKTE_info" {
     block_ccKTE_info:
         const _ccKTE;
         const 0;
         const 30;
 },
 sat_scHzB_entry() //  [R1, R2]
         { []
         }
     {offset
       ccKTP: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto ccKTT; else goto ccKTS;
       ccKTT: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccKTS: // global
           _scHyK::P64 = P64[R1 + 7];
           _scHyO::P64 = P64[R1 + 15];
           _scHyQ::P64 = P64[R1 + 23];
           _scHyS::P64 = P64[R1 + 31];
           _scHyU::P64 = P64[R1 + 39];
           _scHyW::P64 = P64[R1 + 47];
           _scHyY::P64 = P64[R1 + 55];
           _scHz0::P64 = P64[R1 + 63];
           _scHz2::P64 = P64[R1 + 71];
           _scHz4::P64 = P64[R1 + 79];
           I64[Hp - 80] = sat_scHzA_info;
           P64[Hp - 72] = _scHyK::P64;
           P64[Hp - 64] = _scHyO::P64;
           P64[Hp - 56] = _scHyQ::P64;
           P64[Hp - 48] = _scHyS::P64;
           P64[Hp - 40] = _scHyU::P64;
           P64[Hp - 32] = _scHyW::P64;
           P64[Hp - 24] = _scHyY::P64;
           P64[Hp - 16] = _scHz0::P64;
           P64[Hp - 8] = _scHz2::P64;
           P64[Hp] = _scHz4::P64;
           R5 = Hp - 79;
           R4 = n_rcHqf_closure+1;
           R3 = lvl46_rcHqo_closure+2;
           R2 = lvl60_rcHqC_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHzB_info" {
     sat_scHzB_info:
         const sat_scHzB_entry;
         const 10;
         const 35154307317768;
         const 4294967301;
         const ScI2G_srt+104;
 },
 sat_scHzE_entry() //  [R1, R2]
         { []
         }
     {offset
       ccKTX: // global
           _scHz4::P64 = R2;
           _scHzE::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto ccKTY; else goto ccKTZ;
       ccKTZ: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto ccKU1; else goto ccKU0;
       ccKU1: // global
           HpAlloc = 88;
           goto ccKTY;
       ccKTY: // global
           R2 = _scHz4::P64;
           R1 = _scHzE::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccKU0: // global
           _scHyK::P64 = P64[_scHzE::P64 + 7];
           _scHyO::P64 = P64[_scHzE::P64 + 15];
           _scHyQ::P64 = P64[_scHzE::P64 + 23];
           _scHyS::P64 = P64[_scHzE::P64 + 31];
           _scHyU::P64 = P64[_scHzE::P64 + 39];
           _scHyW::P64 = P64[_scHzE::P64 + 47];
           _scHyY::P64 = P64[_scHzE::P64 + 55];
           _scHz0::P64 = P64[_scHzE::P64 + 63];
           _scHz2::P64 = P64[_scHzE::P64 + 71];
           I64[Hp - 80] = sat_scHzB_info;
           P64[Hp - 72] = _scHyK::P64;
           P64[Hp - 64] = _scHyO::P64;
           P64[Hp - 56] = _scHyQ::P64;
           P64[Hp - 48] = _scHyS::P64;
           P64[Hp - 40] = _scHyU::P64;
           P64[Hp - 32] = _scHyW::P64;
           P64[Hp - 24] = _scHyY::P64;
           P64[Hp - 16] = _scHz0::P64;
           P64[Hp - 8] = _scHz2::P64;
           P64[Hp] = _scHz4::P64;
           I64[Sp - 8] = block_ccKTU_info;
           R3 = Hp - 79;
           R2 = lvl40_rcHqi_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHzE_info" {
     sat_scHzE_info:
         const sat_scHzE_entry;
         const 9;
         const 35154307317768;
         const 4294967301;
         const ScI2G_srt+104;
 },
 _ccKTU() //  [R1]
         { []
         }
     {offset
       ccKTU: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccKU4; else goto ccKU3;
       ccKU4: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccKU3: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccKTU_info" {
     block_ccKTU_info:
         const _ccKTU;
         const 0;
         const 30;
 },
 sat_scHzF_entry() //  [R1, R2]
         { []
         }
     {offset
       ccKU5: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto ccKU9; else goto ccKU8;
       ccKU9: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccKU8: // global
           _scHyK::P64 = P64[R1 + 7];
           _scHyO::P64 = P64[R1 + 15];
           _scHyQ::P64 = P64[R1 + 23];
           _scHyS::P64 = P64[R1 + 31];
           _scHyU::P64 = P64[R1 + 39];
           _scHyW::P64 = P64[R1 + 47];
           _scHyY::P64 = P64[R1 + 55];
           _scHz0::P64 = P64[R1 + 63];
           _scHz2::P64 = P64[R1 + 71];
           I64[Hp - 72] = sat_scHzE_info;
           P64[Hp - 64] = _scHyK::P64;
           P64[Hp - 56] = _scHyO::P64;
           P64[Hp - 48] = _scHyQ::P64;
           P64[Hp - 40] = _scHyS::P64;
           P64[Hp - 32] = _scHyU::P64;
           P64[Hp - 24] = _scHyW::P64;
           P64[Hp - 16] = _scHyY::P64;
           P64[Hp - 8] = _scHz0::P64;
           P64[Hp] = _scHz2::P64;
           R5 = Hp - 71;
           R4 = n_rcHqf_closure+1;
           R3 = lvl46_rcHqo_closure+2;
           R2 = lvl58_rcHqA_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHzF_info" {
     sat_scHzF_info:
         const sat_scHzF_entry;
         const 9;
         const 70338679406600;
         const 4294967301;
         const ScI2G_srt+104;
 },
 sat_scHzI_entry() //  [R1, R2]
         { []
         }
     {offset
       ccKUd: // global
           _scHz2::P64 = R2;
           _scHzI::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto ccKUe; else goto ccKUf;
       ccKUf: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto ccKUh; else goto ccKUg;
       ccKUh: // global
           HpAlloc = 80;
           goto ccKUe;
       ccKUe: // global
           R2 = _scHz2::P64;
           R1 = _scHzI::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccKUg: // global
           _scHyK::P64 = P64[_scHzI::P64 + 7];
           _scHyO::P64 = P64[_scHzI::P64 + 15];
           _scHyQ::P64 = P64[_scHzI::P64 + 23];
           _scHyS::P64 = P64[_scHzI::P64 + 31];
           _scHyU::P64 = P64[_scHzI::P64 + 39];
           _scHyW::P64 = P64[_scHzI::P64 + 47];
           _scHyY::P64 = P64[_scHzI::P64 + 55];
           _scHz0::P64 = P64[_scHzI::P64 + 63];
           I64[Hp - 72] = sat_scHzF_info;
           P64[Hp - 64] = _scHyK::P64;
           P64[Hp - 56] = _scHyO::P64;
           P64[Hp - 48] = _scHyQ::P64;
           P64[Hp - 40] = _scHyS::P64;
           P64[Hp - 32] = _scHyU::P64;
           P64[Hp - 24] = _scHyW::P64;
           P64[Hp - 16] = _scHyY::P64;
           P64[Hp - 8] = _scHz0::P64;
           P64[Hp] = _scHz2::P64;
           I64[Sp - 8] = block_ccKUa_info;
           R3 = Hp - 71;
           R2 = lvl40_rcHqi_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHzI_info" {
     sat_scHzI_info:
         const sat_scHzI_entry;
         const 8;
         const 70338679406600;
         const 4294967301;
         const ScI2G_srt+104;
 },
 _ccKUa() //  [R1]
         { []
         }
     {offset
       ccKUa: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccKUk; else goto ccKUj;
       ccKUk: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccKUj: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccKUa_info" {
     block_ccKUa_info:
         const _ccKUa;
         const 0;
         const 30;
 },
 sat_scHzJ_entry() //  [R1, R2]
         { []
         }
     {offset
       ccKUl: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto ccKUp; else goto ccKUo;
       ccKUp: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccKUo: // global
           _scHyK::P64 = P64[R1 + 7];
           _scHyO::P64 = P64[R1 + 15];
           _scHyQ::P64 = P64[R1 + 23];
           _scHyS::P64 = P64[R1 + 31];
           _scHyU::P64 = P64[R1 + 39];
           _scHyW::P64 = P64[R1 + 47];
           _scHyY::P64 = P64[R1 + 55];
           _scHz0::P64 = P64[R1 + 63];
           I64[Hp - 64] = sat_scHzI_info;
           P64[Hp - 56] = _scHyK::P64;
           P64[Hp - 48] = _scHyO::P64;
           P64[Hp - 40] = _scHyQ::P64;
           P64[Hp - 32] = _scHyS::P64;
           P64[Hp - 24] = _scHyU::P64;
           P64[Hp - 16] = _scHyW::P64;
           P64[Hp - 8] = _scHyY::P64;
           P64[Hp] = _scHz0::P64;
           R5 = Hp - 63;
           R4 = n_rcHqf_closure+1;
           R3 = lvl46_rcHqo_closure+2;
           R2 = lvl56_rcHqy_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHzJ_info" {
     sat_scHzJ_info:
         const sat_scHzJ_entry;
         const 8;
         const 140707423584264;
         const 4294967301;
         const ScI2G_srt+104;
 },
 sat_scHzM_entry() //  [R1, R2]
         { []
         }
     {offset
       ccKUt: // global
           _scHz0::P64 = R2;
           _scHzM::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto ccKUu; else goto ccKUv;
       ccKUv: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto ccKUx; else goto ccKUw;
       ccKUx: // global
           HpAlloc = 72;
           goto ccKUu;
       ccKUu: // global
           R2 = _scHz0::P64;
           R1 = _scHzM::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccKUw: // global
           _scHyK::P64 = P64[_scHzM::P64 + 7];
           _scHyO::P64 = P64[_scHzM::P64 + 15];
           _scHyQ::P64 = P64[_scHzM::P64 + 23];
           _scHyS::P64 = P64[_scHzM::P64 + 31];
           _scHyU::P64 = P64[_scHzM::P64 + 39];
           _scHyW::P64 = P64[_scHzM::P64 + 47];
           _scHyY::P64 = P64[_scHzM::P64 + 55];
           I64[Hp - 64] = sat_scHzJ_info;
           P64[Hp - 56] = _scHyK::P64;
           P64[Hp - 48] = _scHyO::P64;
           P64[Hp - 40] = _scHyQ::P64;
           P64[Hp - 32] = _scHyS::P64;
           P64[Hp - 24] = _scHyU::P64;
           P64[Hp - 16] = _scHyW::P64;
           P64[Hp - 8] = _scHyY::P64;
           P64[Hp] = _scHz0::P64;
           I64[Sp - 8] = block_ccKUq_info;
           R3 = Hp - 63;
           R2 = lvl40_rcHqi_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHzM_info" {
     sat_scHzM_info:
         const sat_scHzM_entry;
         const 7;
         const 140707423584264;
         const 4294967301;
         const ScI2G_srt+104;
 },
 _ccKUq() //  [R1]
         { []
         }
     {offset
       ccKUq: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccKUA; else goto ccKUz;
       ccKUA: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccKUz: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccKUq_info" {
     block_ccKUq_info:
         const _ccKUq;
         const 0;
         const 30;
 },
 sat_scHzN_entry() //  [R1, R2]
         { []
         }
     {offset
       ccKUB: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto ccKUF; else goto ccKUE;
       ccKUF: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccKUE: // global
           _scHyK::P64 = P64[R1 + 7];
           _scHyO::P64 = P64[R1 + 15];
           _scHyQ::P64 = P64[R1 + 23];
           _scHyS::P64 = P64[R1 + 31];
           _scHyU::P64 = P64[R1 + 39];
           _scHyW::P64 = P64[R1 + 47];
           _scHyY::P64 = P64[R1 + 55];
           I64[Hp - 56] = sat_scHzM_info;
           P64[Hp - 48] = _scHyK::P64;
           P64[Hp - 40] = _scHyO::P64;
           P64[Hp - 32] = _scHyQ::P64;
           P64[Hp - 24] = _scHyS::P64;
           P64[Hp - 16] = _scHyU::P64;
           P64[Hp - 8] = _scHyW::P64;
           P64[Hp] = _scHyY::P64;
           R5 = Hp - 55;
           R4 = n_rcHqf_closure+1;
           R3 = lvl46_rcHqo_closure+2;
           R2 = lvl54_rcHqw_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHzN_info" {
     sat_scHzN_info:
         const sat_scHzN_entry;
         const 7;
         const 281444911939592;
         const 4294967301;
         const ScI2G_srt+104;
 },
 sat_scHzQ_entry() //  [R1, R2]
         { []
         }
     {offset
       ccKUJ: // global
           _scHyY::P64 = R2;
           _scHzQ::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto ccKUK; else goto ccKUL;
       ccKUL: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto ccKUN; else goto ccKUM;
       ccKUN: // global
           HpAlloc = 64;
           goto ccKUK;
       ccKUK: // global
           R2 = _scHyY::P64;
           R1 = _scHzQ::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccKUM: // global
           _scHyK::P64 = P64[_scHzQ::P64 + 7];
           _scHyO::P64 = P64[_scHzQ::P64 + 15];
           _scHyQ::P64 = P64[_scHzQ::P64 + 23];
           _scHyS::P64 = P64[_scHzQ::P64 + 31];
           _scHyU::P64 = P64[_scHzQ::P64 + 39];
           _scHyW::P64 = P64[_scHzQ::P64 + 47];
           I64[Hp - 56] = sat_scHzN_info;
           P64[Hp - 48] = _scHyK::P64;
           P64[Hp - 40] = _scHyO::P64;
           P64[Hp - 32] = _scHyQ::P64;
           P64[Hp - 24] = _scHyS::P64;
           P64[Hp - 16] = _scHyU::P64;
           P64[Hp - 8] = _scHyW::P64;
           P64[Hp] = _scHyY::P64;
           I64[Sp - 8] = block_ccKUG_info;
           R3 = Hp - 55;
           R2 = lvl40_rcHqi_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHzQ_info" {
     sat_scHzQ_info:
         const sat_scHzQ_entry;
         const 6;
         const 281444911939592;
         const 4294967301;
         const ScI2G_srt+104;
 },
 _ccKUG() //  [R1]
         { []
         }
     {offset
       ccKUG: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccKUQ; else goto ccKUP;
       ccKUQ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccKUP: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccKUG_info" {
     block_ccKUG_info:
         const _ccKUG;
         const 0;
         const 30;
 },
 sat_scHzR_entry() //  [R1, R2]
         { []
         }
     {offset
       ccKUR: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto ccKUV; else goto ccKUU;
       ccKUV: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccKUU: // global
           _scHyK::P64 = P64[R1 + 7];
           _scHyO::P64 = P64[R1 + 15];
           _scHyQ::P64 = P64[R1 + 23];
           _scHyS::P64 = P64[R1 + 31];
           _scHyU::P64 = P64[R1 + 39];
           _scHyW::P64 = P64[R1 + 47];
           I64[Hp - 48] = sat_scHzQ_info;
           P64[Hp - 40] = _scHyK::P64;
           P64[Hp - 32] = _scHyO::P64;
           P64[Hp - 24] = _scHyQ::P64;
           P64[Hp - 16] = _scHyS::P64;
           P64[Hp - 8] = _scHyU::P64;
           P64[Hp] = _scHyW::P64;
           R5 = Hp - 47;
           R4 = n_rcHqf_closure+1;
           R3 = lvl46_rcHqo_closure+2;
           R2 = lvl52_rcHqu_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHzR_info" {
     sat_scHzR_info:
         const sat_scHzR_entry;
         const 6;
         const 562919888650248;
         const 4294967301;
         const ScI2G_srt+104;
 },
 sat_scHzU_entry() //  [R1, R2]
         { []
         }
     {offset
       ccKUZ: // global
           _scHyW::P64 = R2;
           _scHzU::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto ccKV0; else goto ccKV1;
       ccKV1: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto ccKV3; else goto ccKV2;
       ccKV3: // global
           HpAlloc = 56;
           goto ccKV0;
       ccKV0: // global
           R2 = _scHyW::P64;
           R1 = _scHzU::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccKV2: // global
           _scHyK::P64 = P64[_scHzU::P64 + 7];
           _scHyO::P64 = P64[_scHzU::P64 + 15];
           _scHyQ::P64 = P64[_scHzU::P64 + 23];
           _scHyS::P64 = P64[_scHzU::P64 + 31];
           _scHyU::P64 = P64[_scHzU::P64 + 39];
           I64[Hp - 48] = sat_scHzR_info;
           P64[Hp - 40] = _scHyK::P64;
           P64[Hp - 32] = _scHyO::P64;
           P64[Hp - 24] = _scHyQ::P64;
           P64[Hp - 16] = _scHyS::P64;
           P64[Hp - 8] = _scHyU::P64;
           P64[Hp] = _scHyW::P64;
           I64[Sp - 8] = block_ccKUW_info;
           R3 = Hp - 47;
           R2 = lvl40_rcHqi_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHzU_info" {
     sat_scHzU_info:
         const sat_scHzU_entry;
         const 5;
         const 562919888650248;
         const 4294967301;
         const ScI2G_srt+104;
 },
 _ccKUW() //  [R1]
         { []
         }
     {offset
       ccKUW: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccKV6; else goto ccKV5;
       ccKV6: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccKV5: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccKUW_info" {
     block_ccKUW_info:
         const _ccKUW;
         const 0;
         const 30;
 },
 sat_scHzV_entry() //  [R1, R2]
         { []
         }
     {offset
       ccKV7: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccKVb; else goto ccKVa;
       ccKVb: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccKVa: // global
           _scHyK::P64 = P64[R1 + 7];
           _scHyO::P64 = P64[R1 + 15];
           _scHyQ::P64 = P64[R1 + 23];
           _scHyS::P64 = P64[R1 + 31];
           _scHyU::P64 = P64[R1 + 39];
           I64[Hp - 40] = sat_scHzU_info;
           P64[Hp - 32] = _scHyK::P64;
           P64[Hp - 24] = _scHyO::P64;
           P64[Hp - 16] = _scHyQ::P64;
           P64[Hp - 8] = _scHyS::P64;
           P64[Hp] = _scHyU::P64;
           R5 = Hp - 39;
           R4 = n_rcHqf_closure+1;
           R3 = lvl46_rcHqo_closure+2;
           R2 = lvl50_rcHqs_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHzV_info" {
     sat_scHzV_info:
         const sat_scHzV_entry;
         const 5;
         const 1125869842071560;
         const 4294967301;
         const ScI2G_srt+104;
 },
 sat_scHzY_entry() //  [R1, R2]
         { []
         }
     {offset
       ccKVf: // global
           _scHyU::P64 = R2;
           _scHzY::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto ccKVg; else goto ccKVh;
       ccKVh: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccKVj; else goto ccKVi;
       ccKVj: // global
           HpAlloc = 48;
           goto ccKVg;
       ccKVg: // global
           R2 = _scHyU::P64;
           R1 = _scHzY::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccKVi: // global
           _scHyK::P64 = P64[_scHzY::P64 + 7];
           _scHyO::P64 = P64[_scHzY::P64 + 15];
           _scHyQ::P64 = P64[_scHzY::P64 + 23];
           _scHyS::P64 = P64[_scHzY::P64 + 31];
           I64[Hp - 40] = sat_scHzV_info;
           P64[Hp - 32] = _scHyK::P64;
           P64[Hp - 24] = _scHyO::P64;
           P64[Hp - 16] = _scHyQ::P64;
           P64[Hp - 8] = _scHyS::P64;
           P64[Hp] = _scHyU::P64;
           I64[Sp - 8] = block_ccKVc_info;
           R3 = Hp - 39;
           R2 = lvl40_rcHqi_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHzY_info" {
     sat_scHzY_info:
         const sat_scHzY_entry;
         const 4;
         const 1125869842071560;
         const 4294967301;
         const ScI2G_srt+104;
 },
 _ccKVc() //  [R1]
         { []
         }
     {offset
       ccKVc: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccKVm; else goto ccKVl;
       ccKVm: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccKVl: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccKVc_info" {
     block_ccKVc_info:
         const _ccKVc;
         const 0;
         const 30;
 },
 sat_scHzZ_entry() //  [R1, R2]
         { []
         }
     {offset
       ccKVn: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccKVr; else goto ccKVq;
       ccKVr: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccKVq: // global
           _scHyK::P64 = P64[R1 + 7];
           _scHyO::P64 = P64[R1 + 15];
           _scHyQ::P64 = P64[R1 + 23];
           _scHyS::P64 = P64[R1 + 31];
           I64[Hp - 32] = sat_scHzY_info;
           P64[Hp - 24] = _scHyK::P64;
           P64[Hp - 16] = _scHyO::P64;
           P64[Hp - 8] = _scHyQ::P64;
           P64[Hp] = _scHyS::P64;
           R5 = Hp - 31;
           R4 = n_rcHqf_closure+1;
           R3 = lvl46_rcHqo_closure+2;
           R2 = lvl48_rcHqq_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHzZ_info" {
     sat_scHzZ_info:
         const sat_scHzZ_entry;
         const 4;
         const 2251769748914184;
         const 4294967301;
         const ScI2G_srt+104;
 },
 sat_scHA2_entry() //  [R1, R2]
         { []
         }
     {offset
       ccKVv: // global
           _scHyS::P64 = R2;
           _scHA2::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto ccKVw; else goto ccKVx;
       ccKVx: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccKVz; else goto ccKVy;
       ccKVz: // global
           HpAlloc = 40;
           goto ccKVw;
       ccKVw: // global
           R2 = _scHyS::P64;
           R1 = _scHA2::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccKVy: // global
           _scHyK::P64 = P64[_scHA2::P64 + 7];
           _scHyO::P64 = P64[_scHA2::P64 + 15];
           _scHyQ::P64 = P64[_scHA2::P64 + 23];
           I64[Hp - 32] = sat_scHzZ_info;
           P64[Hp - 24] = _scHyK::P64;
           P64[Hp - 16] = _scHyO::P64;
           P64[Hp - 8] = _scHyQ::P64;
           P64[Hp] = _scHyS::P64;
           I64[Sp - 8] = block_ccKVs_info;
           R3 = Hp - 31;
           R2 = lvl40_rcHqi_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHA2_info" {
     sat_scHA2_info:
         const sat_scHA2_entry;
         const 3;
         const 2251769748914184;
         const 4294967301;
         const ScI2G_srt+104;
 },
 _ccKVs() //  [R1]
         { []
         }
     {offset
       ccKVs: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccKVC; else goto ccKVB;
       ccKVC: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccKVB: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccKVs_info" {
     block_ccKVs_info:
         const _ccKVs;
         const 0;
         const 30;
 },
 sat_scHA3_entry() //  [R1, R2]
         { []
         }
     {offset
       ccKVD: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccKVH; else goto ccKVG;
       ccKVH: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccKVG: // global
           _scHyK::P64 = P64[R1 + 7];
           _scHyO::P64 = P64[R1 + 15];
           _scHyQ::P64 = P64[R1 + 23];
           I64[Hp - 24] = sat_scHA2_info;
           P64[Hp - 16] = _scHyK::P64;
           P64[Hp - 8] = _scHyO::P64;
           P64[Hp] = _scHyQ::P64;
           R5 = Hp - 23;
           R4 = n_rcHqf_closure+1;
           R3 = lvl46_rcHqo_closure+2;
           R2 = lvl44_rcHqm_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHA3_info" {
     sat_scHA3_info:
         const sat_scHA3_entry;
         const 3;
         const 4503569562599432;
         const 4294967301;
         const ScI2G_srt+104;
 },
 sat_scHA6_entry() //  [R1, R2]
         { []
         }
     {offset
       ccKVL: // global
           _scHyQ::P64 = R2;
           _scHA6::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto ccKVM; else goto ccKVN;
       ccKVN: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccKVP; else goto ccKVO;
       ccKVP: // global
           HpAlloc = 32;
           goto ccKVM;
       ccKVM: // global
           R2 = _scHyQ::P64;
           R1 = _scHA6::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccKVO: // global
           _scHyK::P64 = P64[_scHA6::P64 + 7];
           _scHyO::P64 = P64[_scHA6::P64 + 15];
           I64[Hp - 24] = sat_scHA3_info;
           P64[Hp - 16] = _scHyK::P64;
           P64[Hp - 8] = _scHyO::P64;
           P64[Hp] = _scHyQ::P64;
           I64[Sp - 8] = block_ccKVI_info;
           R3 = Hp - 23;
           R2 = lvl40_rcHqi_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHA6_info" {
     sat_scHA6_info:
         const sat_scHA6_entry;
         const 2;
         const 4503569562599435;
         const 4294967301;
         const ScI2G_srt+104;
 },
 _ccKVI() //  [R1]
         { []
         }
     {offset
       ccKVI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccKVS; else goto ccKVR;
       ccKVS: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccKVR: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccKVI_info" {
     block_ccKVI_info:
         const _ccKVI;
         const 0;
         const 30;
 },
 sat_scHA7_entry() //  [R1, R2]
         { []
         }
     {offset
       ccKVT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccKVX; else goto ccKVW;
       ccKVX: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccKVW: // global
           _scHyK::P64 = P64[R1 + 7];
           _scHyO::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_scHA6_info;
           P64[Hp - 8] = _scHyK::P64;
           P64[Hp] = _scHyO::P64;
           R5 = Hp - 15;
           R4 = n_rcHqf_closure+1;
           R3 = ds2_rcHqe_closure+2;
           R2 = lvl42_rcHqk_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHA7_info" {
     sat_scHA7_info:
         const sat_scHA7_entry;
         const 2;
         const 72057357814726667;
         const 4294967301;
         const ScI2G_srt+80;
 },
 sat_scHAa_entry() //  [R1, R2]
         { []
         }
     {offset
       ccKW1: // global
           _scHyO::P64 = R2;
           _scHAa::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto ccKW2; else goto ccKW3;
       ccKW3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccKW5; else goto ccKW4;
       ccKW5: // global
           HpAlloc = 24;
           goto ccKW2;
       ccKW2: // global
           R2 = _scHyO::P64;
           R1 = _scHAa::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccKW4: // global
           _scHyK::P64 = P64[_scHAa::P64 + 7];
           I64[Hp - 16] = sat_scHA7_info;
           P64[Hp - 8] = _scHyK::P64;
           P64[Hp] = _scHyO::P64;
           I64[Sp - 8] = block_ccKVY_info;
           R3 = Hp - 15;
           R2 = lvl40_rcHqi_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHAa_info" {
     sat_scHAa_info:
         const sat_scHAa_entry;
         const 1;
         const 72057357814726665;
         const 4294967301;
         const ScI2G_srt+80;
 },
 _ccKVY() //  [R1]
         { []
         }
     {offset
       ccKVY: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccKW8; else goto ccKW7;
       ccKW8: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccKW7: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccKVY_info" {
     block_ccKVY_info:
         const _ccKVY;
         const 0;
         const 30;
 },
 sat_scHAb_entry() //  [R1, R2]
         { []
         }
     {offset
       ccKW9: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccKWd; else goto ccKWc;
       ccKWd: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccKWc: // global
           _scHyK::P64 = P64[R1 + 7];
           I64[Hp - 8] = sat_scHAa_info;
           P64[Hp] = _scHyK::P64;
           R5 = Hp - 7;
           R4 = n_rcHqf_closure+1;
           R3 = ds2_rcHqe_closure+2;
           R2 = ds1_rcHqc_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHAb_info" {
     sat_scHAb_info:
         const sat_scHAb_entry;
         const 1;
         const 144114951852654601;
         const 4294967301;
         const ScI2G_srt+80;
 },
 sat_scHAe_entry() //  [R1, R2]
         { []
         }
     {offset
       ccKWh: // global
           _scHyM::P64 = R2;
           _scHAe::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto ccKWi; else goto ccKWj;
       ccKWj: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccKWl; else goto ccKWk;
       ccKWl: // global
           HpAlloc = 16;
           goto ccKWi;
       ccKWi: // global
           R2 = _scHyM::P64;
           R1 = _scHAe::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccKWk: // global
           _scHyK::P64 = P64[_scHAe::P64 + 7];
           I64[Hp - 8] = sat_scHAb_info;
           P64[Hp] = _scHyK::P64;
           I64[Sp - 8] = block_ccKWe_info;
           R3 = Hp - 7;
           R2 = lexeme4_rcHqa_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHAe_info" {
     sat_scHAe_info:
         const sat_scHAe_entry;
         const 1;
         const 288230139928510473;
         const 4294967301;
         const ScI2G_srt+80;
 },
 _ccKWe() //  [R1]
         { []
         }
     {offset
       ccKWe: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccKWo; else goto ccKWn;
       ccKWo: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccKWn: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccKWe_info" {
     block_ccKWe_info:
         const _ccKWe;
         const 0;
         const 30;
 },
 GHC.Stats.$w$creadPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       ccKWs: // global
           _scHyK::P64 = R3;
           _scHyJ::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto ccKWt; else goto ccKWu;
       ccKWu: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccKWw; else goto ccKWv;
       ccKWw: // global
           HpAlloc = 16;
           goto ccKWt;
       ccKWt: // global
           R3 = _scHyK::P64;
           R2 = _scHyJ::I64;
           R1 = GHC.Stats.$w$creadPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccKWv: // global
           if (%MO_S_Gt_W64(_scHyJ::I64, 11)) goto ccKWq; else goto ccKWr;
       ccKWq: // global
           Hp = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccKWr: // global
           I64[Hp - 8] = sat_scHAe_info;
           P64[Hp] = _scHyK::P64;
           I64[Sp - 8] = block_ccKWx_info;
           R3 = Hp - 7;
           R2 = lexeme1_rcHq7_closure+4;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.$w$creadPrec_info" {
     GHC.Stats.$w$creadPrec_info:
         const GHC.Stats.$w$creadPrec_entry;
         const 0;
         const 1152921268383645710;
         const 8589934605;
         const ScI2G_srt+80;
 },
 _ccKWx() //  [R1]
         { []
         }
     {offset
       ccKWx: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccKWC; else goto ccKWB;
       ccKWC: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccKWB: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccKWx_info" {
     block_ccKWx_info:
         const _ccKWx;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.654561145 UTC

[section ""data" . GHC.Stats.$fReadGCDetails2_closure" {
     GHC.Stats.$fReadGCDetails2_closure:
         const GHC.Stats.$fReadGCDetails2_info;
         const 0;
 },
 GHC.Stats.$fReadGCDetails2_entry() //  [R2, R3]
         { []
         }
     {offset
       ccKZz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccKZA; else goto ccKZB;
       ccKZA: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Stats.$fReadGCDetails2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccKZB: // global
           I64[Sp - 16] = block_ccKZw_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucKZF; else goto ccKZx;
       ucKZF: // global
           call _ccKZw(R1) args: 0, res: 0, upd: 0;
       ccKZx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.$fReadGCDetails2_info" {
     GHC.Stats.$fReadGCDetails2_info:
         const GHC.Stats.$fReadGCDetails2_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const ScI2G_srt+288;
 },
 _ccKZw() //  [R1]
         { []
         }
     {offset
       ccKZw: // global
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Stats.$w$creadPrec_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccKZw_info" {
     block_ccKZw_info:
         const _ccKZw;
         const 1;
         const 4294967326;
         const ScI2G_srt+288;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.661120378 UTC

[section ""data" . GHC.Stats.$fReadGCDetails1_closure" {
     GHC.Stats.$fReadGCDetails1_closure:
         const GHC.Stats.$fReadGCDetails1_info;
         const 0;
 },
 GHC.Stats.$fReadGCDetails1_entry() //  [R2, R3]
         { []
         }
     {offset
       ccKZT: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Stats.$fReadGCDetails2_closure+2;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.$fReadGCDetails1_info" {
     GHC.Stats.$fReadGCDetails1_info:
         const GHC.Stats.$fReadGCDetails1_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const ScI2G_srt+304;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.666524291 UTC

[section ""data" . GHC.Stats.$fReadGCDetails_$creadsPrec_closure" {
     GHC.Stats.$fReadGCDetails_$creadsPrec_closure:
         const GHC.Stats.$fReadGCDetails_$creadsPrec_info;
         const 0;
 },
 sat_scHAm_entry() //  [R1]
         { []
         }
     {offset
       ccL08: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccL09; else goto ccL0a;
       ccL09: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccL0a: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = P64[R1 + 16];
           R2 = GHC.Stats.$fReadGCDetails2_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list3_entry(R4, R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHAm_info" {
     sat_scHAm_info:
         const sat_scHAm_entry;
         const 1;
         const 12884901904;
         const ScI2G_srt+304;
 },
 GHC.Stats.$fReadGCDetails_$creadsPrec_entry() //  [R2]
         { []
         }
     {offset
       ccL0b: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccL0f; else goto ccL0e;
       ccL0f: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Stats.$fReadGCDetails_$creadsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccL0e: // global
           I64[Hp - 16] = sat_scHAm_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.$fReadGCDetails_$creadsPrec_info" {
     GHC.Stats.$fReadGCDetails_$creadsPrec_info:
         const GHC.Stats.$fReadGCDetails_$creadsPrec_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const ScI2G_srt+304;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.674385899 UTC

[section ""data" . GHC.Stats.$fReadGCDetails_$creadListPrec_closure" {
     GHC.Stats.$fReadGCDetails_$creadListPrec_closure:
         const GHC.Stats.$fReadGCDetails_$creadListPrec_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Stats.$fReadGCDetails_$creadListPrec_entry() //  [R1]
         { []
         }
     {offset
       ccL0u: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccL0v; else goto ccL0w;
       ccL0v: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccL0w: // global
           (_ccL0r::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccL0r::I64 == 0) goto ccL0t; else goto ccL0s;
       ccL0t: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccL0s: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccL0r::I64;
           R2 = GHC.Stats.$fReadGCDetails1_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Stats.$fReadGCDetails_$creadListPrec_info" {
     GHC.Stats.$fReadGCDetails_$creadListPrec_info:
         const GHC.Stats.$fReadGCDetails_$creadListPrec_entry;
         const 0;
         const 12884901909;
         const ScI2G_srt+328;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.679272254 UTC

[section ""data" . GHC.Stats.$fReadGCDetails3_closure" {
     GHC.Stats.$fReadGCDetails3_closure:
         const GHC.Stats.$fReadGCDetails3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Stats.$fReadGCDetails3_entry() //  [R1]
         { []
         }
     {offset
       ccL0K: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccL0L; else goto ccL0M;
       ccL0L: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccL0M: // global
           (_ccL0H::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccL0H::I64 == 0) goto ccL0J; else goto ccL0I;
       ccL0J: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccL0I: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccL0H::I64;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = GHC.Read.$fRead()7_closure;
           R1 = GHC.Stats.$fReadGCDetails_$creadListPrec_closure;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Stats.$fReadGCDetails3_info" {
     GHC.Stats.$fReadGCDetails3_info:
         const GHC.Stats.$fReadGCDetails3_entry;
         const 0;
         const 4294967317;
         const ScI2G_srt+344;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.684313563 UTC

[section ""data" . GHC.Stats.$fReadGCDetails_$creadList_closure" {
     GHC.Stats.$fReadGCDetails_$creadList_closure:
         const GHC.Stats.$fReadGCDetails_$creadList_info;
         const 0;
 },
 GHC.Stats.$fReadGCDetails_$creadList_entry() //  [R2]
         { []
         }
     {offset
       ccL0Y: // global
           R3 = R2;
           R2 = GHC.Stats.$fReadGCDetails3_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.$fReadGCDetails_$creadList_info" {
     GHC.Stats.$fReadGCDetails_$creadList_info:
         const GHC.Stats.$fReadGCDetails_$creadList_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const ScI2G_srt+352;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.687885058 UTC

[section ""data" . GHC.Stats.$fReadGCDetails_closure" {
     GHC.Stats.$fReadGCDetails_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.Stats.$fReadGCDetails_$creadsPrec_closure+1;
         const GHC.Stats.$fReadGCDetails_$creadList_closure+1;
         const GHC.Stats.$fReadGCDetails1_closure+2;
         const GHC.Stats.$fReadGCDetails_$creadListPrec_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.689790934 UTC

[section ""cstring" . GHC.Stats.$tcRTSStats2_bytes" {
     GHC.Stats.$tcRTSStats2_bytes:
         I8[] [82,84,83,83,116,97,116,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.692282647 UTC

[section ""data" . lexeme5_rcHqP_closure" {
     lexeme5_rcHqP_closure:
         const lexeme5_rcHqP_info;
         const 0;
         const 0;
         const 0;
 },
 lexeme5_rcHqP_entry() //  [R1]
         { []
         }
     {offset
       ccL1d: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccL1e; else goto ccL1f;
       ccL1e: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccL1f: // global
           (_ccL1a::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccL1a::I64 == 0) goto ccL1c; else goto ccL1b;
       ccL1c: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccL1b: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccL1a::I64;
           R2 = GHC.Stats.$tcRTSStats2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lexeme5_rcHqP_info" {
     lexeme5_rcHqP_info:
         const lexeme5_rcHqP_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.696247354 UTC

[section ""data" . lexeme6_rcHqQ_closure" {
     lexeme6_rcHqQ_closure:
         const Text.Read.Lex.Ident_con_info;
         const lexeme5_rcHqP_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.698181643 UTC

[section ""cstring" . ds3_rcHqR_bytes" {
     ds3_rcHqR_bytes:
         I8[] [103,99,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.70154204 UTC

[section ""data" . ds4_rcHqS_closure" {
     ds4_rcHqS_closure:
         const ds4_rcHqS_info;
         const 0;
         const 0;
         const 0;
 },
 ds4_rcHqS_entry() //  [R1]
         { []
         }
     {offset
       ccL1v: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccL1w; else goto ccL1x;
       ccL1w: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccL1x: // global
           (_ccL1s::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccL1s::I64 == 0) goto ccL1u; else goto ccL1t;
       ccL1u: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccL1t: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccL1s::I64;
           R2 = ds3_rcHqR_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds4_rcHqS_info" {
     ds4_rcHqS_info:
         const ds4_rcHqS_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.705361007 UTC

[section ""cstring" . lvl73_rcHqT_bytes" {
     lvl73_rcHqT_bytes:
         I8[] [109,97,106,111,114,95,103,99,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.707819565 UTC

[section ""data" . lvl74_rcHqU_closure" {
     lvl74_rcHqU_closure:
         const lvl74_rcHqU_info;
         const 0;
         const 0;
         const 0;
 },
 lvl74_rcHqU_entry() //  [R1]
         { []
         }
     {offset
       ccL1M: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccL1N; else goto ccL1O;
       ccL1N: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccL1O: // global
           (_ccL1J::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccL1J::I64 == 0) goto ccL1L; else goto ccL1K;
       ccL1L: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccL1K: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccL1J::I64;
           R2 = lvl73_rcHqT_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl74_rcHqU_info" {
     lvl74_rcHqU_info:
         const lvl74_rcHqU_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.711678226 UTC

[section ""cstring" . lvl75_rcHqV_bytes" {
     lvl75_rcHqV_bytes:
         I8[] [97,108,108,111,99,97,116,101,100,95,98,121,116,101,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.714109386 UTC

[section ""data" . lvl76_rcHqW_closure" {
     lvl76_rcHqW_closure:
         const lvl76_rcHqW_info;
         const 0;
         const 0;
         const 0;
 },
 lvl76_rcHqW_entry() //  [R1]
         { []
         }
     {offset
       ccL23: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccL24; else goto ccL25;
       ccL24: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccL25: // global
           (_ccL20::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccL20::I64 == 0) goto ccL22; else goto ccL21;
       ccL22: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccL21: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccL20::I64;
           R2 = lvl75_rcHqV_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl76_rcHqW_info" {
     lvl76_rcHqW_info:
         const lvl76_rcHqW_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.717865391 UTC

[section ""cstring" . lvl77_rcHqX_bytes" {
     lvl77_rcHqX_bytes:
         I8[] [109,97,120,95,108,105,118,101,95,98,121,116,101,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.72029123 UTC

[section ""data" . lvl78_rcHqY_closure" {
     lvl78_rcHqY_closure:
         const lvl78_rcHqY_info;
         const 0;
         const 0;
         const 0;
 },
 lvl78_rcHqY_entry() //  [R1]
         { []
         }
     {offset
       ccL2k: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccL2l; else goto ccL2m;
       ccL2l: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccL2m: // global
           (_ccL2h::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccL2h::I64 == 0) goto ccL2j; else goto ccL2i;
       ccL2j: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccL2i: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccL2h::I64;
           R2 = lvl77_rcHqX_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl78_rcHqY_info" {
     lvl78_rcHqY_info:
         const lvl78_rcHqY_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.724178757 UTC

[section ""cstring" . lvl79_rcHqZ_bytes" {
     lvl79_rcHqZ_bytes:
         I8[] [109,97,120,95,108,97,114,103,101,95,111,98,106,101,99,116,115,95,98,121,116,101,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.72684662 UTC

[section ""data" . lvl80_rcHr0_closure" {
     lvl80_rcHr0_closure:
         const lvl80_rcHr0_info;
         const 0;
         const 0;
         const 0;
 },
 lvl80_rcHr0_entry() //  [R1]
         { []
         }
     {offset
       ccL2B: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccL2C; else goto ccL2D;
       ccL2C: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccL2D: // global
           (_ccL2y::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccL2y::I64 == 0) goto ccL2A; else goto ccL2z;
       ccL2A: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccL2z: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccL2y::I64;
           R2 = lvl79_rcHqZ_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl80_rcHr0_info" {
     lvl80_rcHr0_info:
         const lvl80_rcHr0_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.73139192 UTC

[section ""cstring" . lvl81_rcHr1_bytes" {
     lvl81_rcHr1_bytes:
         I8[] [109,97,120,95,99,111,109,112,97,99,116,95,98,121,116,101,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.734227904 UTC

[section ""data" . lvl82_rcHr2_closure" {
     lvl82_rcHr2_closure:
         const lvl82_rcHr2_info;
         const 0;
         const 0;
         const 0;
 },
 lvl82_rcHr2_entry() //  [R1]
         { []
         }
     {offset
       ccL2S: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccL2T; else goto ccL2U;
       ccL2T: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccL2U: // global
           (_ccL2P::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccL2P::I64 == 0) goto ccL2R; else goto ccL2Q;
       ccL2R: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccL2Q: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccL2P::I64;
           R2 = lvl81_rcHr1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl82_rcHr2_info" {
     lvl82_rcHr2_info:
         const lvl82_rcHr2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.737991158 UTC

[section ""cstring" . lvl83_rcHr3_bytes" {
     lvl83_rcHr3_bytes:
         I8[] [109,97,120,95,115,108,111,112,95,98,121,116,101,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.740370425 UTC

[section ""data" . lvl84_rcHr4_closure" {
     lvl84_rcHr4_closure:
         const lvl84_rcHr4_info;
         const 0;
         const 0;
         const 0;
 },
 lvl84_rcHr4_entry() //  [R1]
         { []
         }
     {offset
       ccL39: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccL3a; else goto ccL3b;
       ccL3a: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccL3b: // global
           (_ccL36::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccL36::I64 == 0) goto ccL38; else goto ccL37;
       ccL38: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccL37: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccL36::I64;
           R2 = lvl83_rcHr3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl84_rcHr4_info" {
     lvl84_rcHr4_info:
         const lvl84_rcHr4_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.744113689 UTC

[section ""cstring" . lvl85_rcHr5_bytes" {
     lvl85_rcHr5_bytes:
         I8[] [109,97,120,95,109,101,109,95,105,110,95,117,115,101,95,98,121,116,101,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.746670496 UTC

[section ""data" . lvl86_rcHr6_closure" {
     lvl86_rcHr6_closure:
         const lvl86_rcHr6_info;
         const 0;
         const 0;
         const 0;
 },
 lvl86_rcHr6_entry() //  [R1]
         { []
         }
     {offset
       ccL3q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccL3r; else goto ccL3s;
       ccL3r: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccL3s: // global
           (_ccL3n::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccL3n::I64 == 0) goto ccL3p; else goto ccL3o;
       ccL3p: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccL3o: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccL3n::I64;
           R2 = lvl85_rcHr5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl86_rcHr6_info" {
     lvl86_rcHr6_info:
         const lvl86_rcHr6_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.750341872 UTC

[section ""cstring" . lvl87_rcHr7_bytes" {
     lvl87_rcHr7_bytes:
         I8[] [99,117,109,117,108,97,116,105,118,101,95,108,105,118,101,95,98,121,116,101,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.752697583 UTC

[section ""data" . lvl88_rcHr8_closure" {
     lvl88_rcHr8_closure:
         const lvl88_rcHr8_info;
         const 0;
         const 0;
         const 0;
 },
 lvl88_rcHr8_entry() //  [R1]
         { []
         }
     {offset
       ccL3H: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccL3I; else goto ccL3J;
       ccL3I: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccL3J: // global
           (_ccL3E::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccL3E::I64 == 0) goto ccL3G; else goto ccL3F;
       ccL3G: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccL3F: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccL3E::I64;
           R2 = lvl87_rcHr7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl88_rcHr8_info" {
     lvl88_rcHr8_info:
         const lvl88_rcHr8_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.756529484 UTC

[section ""cstring" . lvl89_rcHr9_bytes" {
     lvl89_rcHr9_bytes:
         I8[] [99,111,112,105,101,100,95,98,121,116,101,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.759155657 UTC

[section ""data" . lvl90_rcHra_closure" {
     lvl90_rcHra_closure:
         const lvl90_rcHra_info;
         const 0;
         const 0;
         const 0;
 },
 lvl90_rcHra_entry() //  [R1]
         { []
         }
     {offset
       ccL3Y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccL3Z; else goto ccL40;
       ccL3Z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccL40: // global
           (_ccL3V::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccL3V::I64 == 0) goto ccL3X; else goto ccL3W;
       ccL3X: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccL3W: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccL3V::I64;
           R2 = lvl89_rcHr9_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl90_rcHra_info" {
     lvl90_rcHra_info:
         const lvl90_rcHra_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.76367948 UTC

[section ""cstring" . lvl91_rcHrb_bytes" {
     lvl91_rcHrb_bytes:
         I8[] [112,97,114,95,99,111,112,105,101,100,95,98,121,116,101,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.766599937 UTC

[section ""data" . lvl92_rcHrc_closure" {
     lvl92_rcHrc_closure:
         const lvl92_rcHrc_info;
         const 0;
         const 0;
         const 0;
 },
 lvl92_rcHrc_entry() //  [R1]
         { []
         }
     {offset
       ccL4f: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccL4g; else goto ccL4h;
       ccL4g: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccL4h: // global
           (_ccL4c::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccL4c::I64 == 0) goto ccL4e; else goto ccL4d;
       ccL4e: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccL4d: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccL4c::I64;
           R2 = lvl91_rcHrb_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl92_rcHrc_info" {
     lvl92_rcHrc_info:
         const lvl92_rcHrc_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.770276712 UTC

[section ""cstring" . lvl93_rcHrd_bytes" {
     lvl93_rcHrd_bytes:
         I8[] [99,117,109,117,108,97,116,105,118,101,95,112,97,114,95,109,97,120,95,99,111,112,105,101,100,95,98,121,116,101,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.772840953 UTC

[section ""data" . lvl94_rcHre_closure" {
     lvl94_rcHre_closure:
         const lvl94_rcHre_info;
         const 0;
         const 0;
         const 0;
 },
 lvl94_rcHre_entry() //  [R1]
         { []
         }
     {offset
       ccL4w: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccL4x; else goto ccL4y;
       ccL4x: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccL4y: // global
           (_ccL4t::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccL4t::I64 == 0) goto ccL4v; else goto ccL4u;
       ccL4v: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccL4u: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccL4t::I64;
           R2 = lvl93_rcHrd_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl94_rcHre_info" {
     lvl94_rcHre_info:
         const lvl94_rcHre_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.776733203 UTC

[section ""cstring" . lvl95_rcHrf_bytes" {
     lvl95_rcHrf_bytes:
         I8[] [99,117,109,117,108,97,116,105,118,101,95,112,97,114,95,98,97,108,97,110,99,101,100,95,99,111,112,105,101,100,95,98,121,116,101,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.779542192 UTC

[section ""data" . lvl96_rcHrg_closure" {
     lvl96_rcHrg_closure:
         const lvl96_rcHrg_info;
         const 0;
         const 0;
         const 0;
 },
 lvl96_rcHrg_entry() //  [R1]
         { []
         }
     {offset
       ccL4N: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccL4O; else goto ccL4P;
       ccL4O: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccL4P: // global
           (_ccL4K::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccL4K::I64 == 0) goto ccL4M; else goto ccL4L;
       ccL4M: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccL4L: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccL4K::I64;
           R2 = lvl95_rcHrf_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl96_rcHrg_info" {
     lvl96_rcHrg_info:
         const lvl96_rcHrg_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.783387867 UTC

[section ""cstring" . lvl97_rcHrh_bytes" {
     lvl97_rcHrh_bytes:
         I8[] [109,117,116,97,116,111,114,95,99,112,117,95,110,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.786034691 UTC

[section ""data" . lvl98_rcHri_closure" {
     lvl98_rcHri_closure:
         const lvl98_rcHri_info;
         const 0;
         const 0;
         const 0;
 },
 lvl98_rcHri_entry() //  [R1]
         { []
         }
     {offset
       ccL54: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccL55; else goto ccL56;
       ccL55: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccL56: // global
           (_ccL51::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccL51::I64 == 0) goto ccL53; else goto ccL52;
       ccL53: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccL52: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccL51::I64;
           R2 = lvl97_rcHrh_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl98_rcHri_info" {
     lvl98_rcHri_info:
         const lvl98_rcHri_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.79010071 UTC

[section ""cstring" . lvl99_rcHrj_bytes" {
     lvl99_rcHrj_bytes:
         I8[] [109,117,116,97,116,111,114,95,101,108,97,112,115,101,100,95,110,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.793214294 UTC

[section ""data" . lvl100_rcHrk_closure" {
     lvl100_rcHrk_closure:
         const lvl100_rcHrk_info;
         const 0;
         const 0;
         const 0;
 },
 lvl100_rcHrk_entry() //  [R1]
         { []
         }
     {offset
       ccL5l: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccL5m; else goto ccL5n;
       ccL5m: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccL5n: // global
           (_ccL5i::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccL5i::I64 == 0) goto ccL5k; else goto ccL5j;
       ccL5k: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccL5j: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccL5i::I64;
           R2 = lvl99_rcHrj_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl100_rcHrk_info" {
     lvl100_rcHrk_info:
         const lvl100_rcHrk_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.797477346 UTC

[section ""cstring" . lvl101_rcHrl_bytes" {
     lvl101_rcHrl_bytes:
         I8[] [103,99,95,99,112,117,95,110,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.799872113 UTC

[section ""data" . lvl102_rcHrm_closure" {
     lvl102_rcHrm_closure:
         const lvl102_rcHrm_info;
         const 0;
         const 0;
         const 0;
 },
 lvl102_rcHrm_entry() //  [R1]
         { []
         }
     {offset
       ccL5C: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccL5D; else goto ccL5E;
       ccL5D: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccL5E: // global
           (_ccL5z::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccL5z::I64 == 0) goto ccL5B; else goto ccL5A;
       ccL5B: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccL5A: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccL5z::I64;
           R2 = lvl101_rcHrl_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl102_rcHrm_info" {
     lvl102_rcHrm_info:
         const lvl102_rcHrm_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.803700922 UTC

[section ""cstring" . lvl103_rcHrn_bytes" {
     lvl103_rcHrn_bytes:
         I8[] [103,99,95,101,108,97,112,115,101,100,95,110,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.806633473 UTC

[section ""data" . lvl104_rcHro_closure" {
     lvl104_rcHro_closure:
         const lvl104_rcHro_info;
         const 0;
         const 0;
         const 0;
 },
 lvl104_rcHro_entry() //  [R1]
         { []
         }
     {offset
       ccL5T: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccL5U; else goto ccL5V;
       ccL5U: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccL5V: // global
           (_ccL5Q::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccL5Q::I64 == 0) goto ccL5S; else goto ccL5R;
       ccL5S: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccL5R: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccL5Q::I64;
           R2 = lvl103_rcHrn_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl104_rcHro_info" {
     lvl104_rcHro_info:
         const lvl104_rcHro_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.810476551 UTC

[section ""cstring" . lvl105_rcHrp_bytes" {
     lvl105_rcHrp_bytes:
         I8[] [99,112,117,95,110,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.813039494 UTC

[section ""data" . lvl106_rcHrq_closure" {
     lvl106_rcHrq_closure:
         const lvl106_rcHrq_info;
         const 0;
         const 0;
         const 0;
 },
 lvl106_rcHrq_entry() //  [R1]
         { []
         }
     {offset
       ccL6a: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccL6b; else goto ccL6c;
       ccL6b: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccL6c: // global
           (_ccL67::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccL67::I64 == 0) goto ccL69; else goto ccL68;
       ccL69: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccL68: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccL67::I64;
           R2 = lvl105_rcHrp_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl106_rcHrq_info" {
     lvl106_rcHrq_info:
         const lvl106_rcHrq_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.816979717 UTC

[section ""cstring" . lvl107_rcHrr_bytes" {
     lvl107_rcHrr_bytes:
         I8[] [101,108,97,112,115,101,100,95,110,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.819794215 UTC

[section ""data" . lvl108_rcHrs_closure" {
     lvl108_rcHrs_closure:
         const lvl108_rcHrs_info;
         const 0;
         const 0;
         const 0;
 },
 lvl108_rcHrs_entry() //  [R1]
         { []
         }
     {offset
       ccL6r: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccL6s; else goto ccL6t;
       ccL6s: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccL6t: // global
           (_ccL6o::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccL6o::I64 == 0) goto ccL6q; else goto ccL6p;
       ccL6q: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccL6p: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccL6o::I64;
           R2 = lvl107_rcHrr_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl108_rcHrs_info" {
     lvl108_rcHrs_info:
         const lvl108_rcHrs_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.824184279 UTC

[section ""cstring" . lvl109_rcHrt_bytes" {
     lvl109_rcHrt_bytes:
         I8[] [103,99]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.826809286 UTC

[section ""data" . lvl110_rcHru_closure" {
     lvl110_rcHru_closure:
         const lvl110_rcHru_info;
         const 0;
         const 0;
         const 0;
 },
 lvl110_rcHru_entry() //  [R1]
         { []
         }
     {offset
       ccL6I: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccL6J; else goto ccL6K;
       ccL6J: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccL6K: // global
           (_ccL6F::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccL6F::I64 == 0) goto ccL6H; else goto ccL6G;
       ccL6H: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccL6G: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccL6F::I64;
           R2 = lvl109_rcHrt_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl110_rcHru_info" {
     lvl110_rcHru_info:
         const lvl110_rcHru_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.830769242 UTC

[section ""data" . lvl111_rcHrv_closure" {
     lvl111_rcHrv_closure:
         const lvl111_rcHrv_info;
         const 0;
 },
 lvl111_rcHrv_entry() //  [R3]
         { []
         }
     {offset
       ccL6W: // global
           R4 = R3;
           R3 = Text.ParserCombinators.ReadPrec.minPrec_closure;
           R2 = GHC.Stats.$fReadGCDetails2_closure+2;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl111_rcHrv_info" {
     lvl111_rcHrv_info:
         const lvl111_rcHrv_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const ScI2G_srt+304;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:37.88151432 UTC

[section ""data" . GHC.Stats.$w$creadPrec1_closure" {
     GHC.Stats.$w$creadPrec1_closure:
         const GHC.Stats.$w$creadPrec1_info;
         const 0;
 },
 sat_scHB9_entry() //  [R1, R2]
         { []
         }
     {offset
       ccLaA: // global
           Hp = Hp + 168;
           if (Hp > HpLim) (likely: False) goto ccLaE; else goto ccLaD;
       ccLaE: // global
           HpAlloc = 168;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLaD: // global
           _scHAq::P64 = P64[R1 + 7];
           _scHAu::P64 = P64[R1 + 15];
           _scHAw::P64 = P64[R1 + 23];
           _scHAy::P64 = P64[R1 + 31];
           _scHAA::P64 = P64[R1 + 39];
           _scHAC::P64 = P64[R1 + 47];
           _scHAE::P64 = P64[R1 + 55];
           _scHAG::P64 = P64[R1 + 63];
           _scHAI::P64 = P64[R1 + 71];
           _scHAK::P64 = P64[R1 + 79];
           _scHAM::P64 = P64[R1 + 87];
           _scHAO::P64 = P64[R1 + 95];
           _scHAQ::P64 = P64[R1 + 103];
           _scHAS::P64 = P64[R1 + 111];
           _scHAU::P64 = P64[R1 + 119];
           _scHAW::P64 = P64[R1 + 127];
           _scHAY::P64 = P64[R1 + 135];
           _scHB0::P64 = P64[R1 + 143];
           _scHB2::P64 = P64[R1 + 151];
           _scHB4::P64 = P64[R1 + 159];
           _scHB6::P64 = P64[R1 + 167];
           I64[Hp - 160] = GHC.Stats.RTSStats_con_info;
           P64[Hp - 152] = _scHAu::P64;
           P64[Hp - 144] = _scHAw::P64;
           P64[Hp - 136] = _scHAy::P64;
           P64[Hp - 128] = _scHAA::P64;
           P64[Hp - 120] = _scHAC::P64;
           P64[Hp - 112] = _scHAE::P64;
           P64[Hp - 104] = _scHAG::P64;
           P64[Hp - 96] = _scHAI::P64;
           P64[Hp - 88] = _scHAK::P64;
           P64[Hp - 80] = _scHAM::P64;
           P64[Hp - 72] = _scHAO::P64;
           P64[Hp - 64] = _scHAQ::P64;
           P64[Hp - 56] = _scHAS::P64;
           P64[Hp - 48] = _scHAU::P64;
           P64[Hp - 40] = _scHAW::P64;
           P64[Hp - 32] = _scHAY::P64;
           P64[Hp - 24] = _scHB0::P64;
           P64[Hp - 16] = _scHB2::P64;
           P64[Hp - 8] = _scHB4::P64;
           P64[Hp] = _scHB6::P64;
           R2 = Hp - 159;
           R1 = _scHAq::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHB9_info" {
     sat_scHB9_info:
         const sat_scHB9_entry;
         const 21;
         const 8;
         const 4294967301;
 },
 sat_scHBc_entry() //  [R1, R2]
         { []
         }
     {offset
       ccLaI: // global
           _scHB6::P64 = R2;
           _scHBc::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto ccLaJ; else goto ccLaK;
       ccLaK: // global
           Hp = Hp + 176;
           if (Hp > HpLim) (likely: False) goto ccLaM; else goto ccLaL;
       ccLaM: // global
           HpAlloc = 176;
           goto ccLaJ;
       ccLaJ: // global
           R2 = _scHB6::P64;
           R1 = _scHBc::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLaL: // global
           _scHAq::P64 = P64[_scHBc::P64 + 7];
           _scHAu::P64 = P64[_scHBc::P64 + 15];
           _scHAw::P64 = P64[_scHBc::P64 + 23];
           _scHAy::P64 = P64[_scHBc::P64 + 31];
           _scHAA::P64 = P64[_scHBc::P64 + 39];
           _scHAC::P64 = P64[_scHBc::P64 + 47];
           _scHAE::P64 = P64[_scHBc::P64 + 55];
           _scHAG::P64 = P64[_scHBc::P64 + 63];
           _scHAI::P64 = P64[_scHBc::P64 + 71];
           _scHAK::P64 = P64[_scHBc::P64 + 79];
           _scHAM::P64 = P64[_scHBc::P64 + 87];
           _scHAO::P64 = P64[_scHBc::P64 + 95];
           _scHAQ::P64 = P64[_scHBc::P64 + 103];
           _scHAS::P64 = P64[_scHBc::P64 + 111];
           _scHAU::P64 = P64[_scHBc::P64 + 119];
           _scHAW::P64 = P64[_scHBc::P64 + 127];
           _scHAY::P64 = P64[_scHBc::P64 + 135];
           _scHB0::P64 = P64[_scHBc::P64 + 143];
           _scHB2::P64 = P64[_scHBc::P64 + 151];
           _scHB4::P64 = P64[_scHBc::P64 + 159];
           I64[Hp - 168] = sat_scHB9_info;
           P64[Hp - 160] = _scHAq::P64;
           P64[Hp - 152] = _scHAu::P64;
           P64[Hp - 144] = _scHAw::P64;
           P64[Hp - 136] = _scHAy::P64;
           P64[Hp - 128] = _scHAA::P64;
           P64[Hp - 120] = _scHAC::P64;
           P64[Hp - 112] = _scHAE::P64;
           P64[Hp - 104] = _scHAG::P64;
           P64[Hp - 96] = _scHAI::P64;
           P64[Hp - 88] = _scHAK::P64;
           P64[Hp - 80] = _scHAM::P64;
           P64[Hp - 72] = _scHAO::P64;
           P64[Hp - 64] = _scHAQ::P64;
           P64[Hp - 56] = _scHAS::P64;
           P64[Hp - 48] = _scHAU::P64;
           P64[Hp - 40] = _scHAW::P64;
           P64[Hp - 32] = _scHAY::P64;
           P64[Hp - 24] = _scHB0::P64;
           P64[Hp - 16] = _scHB2::P64;
           P64[Hp - 8] = _scHB4::P64;
           P64[Hp] = _scHB6::P64;
           I64[Sp - 8] = block_ccLaF_info;
           R3 = Hp - 167;
           R2 = lvl72_rcHqO_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHBc_info" {
     sat_scHBc_info:
         const sat_scHBc_entry;
         const 20;
         const 12884901896;
         const 4294967301;
         const ScI2G_srt+136;
 },
 _ccLaF() //  [R1]
         { []
         }
     {offset
       ccLaF: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccLaP; else goto ccLaO;
       ccLaP: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccLaO: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccLaF_info" {
     block_ccLaF_info:
         const _ccLaF;
         const 0;
         const 30;
 },
 sat_scHBd_entry() //  [R1, R2]
         { []
         }
     {offset
       ccLaQ: // global
           Hp = Hp + 168;
           if (Hp > HpLim) (likely: False) goto ccLaU; else goto ccLaT;
       ccLaU: // global
           HpAlloc = 168;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLaT: // global
           _scHAq::P64 = P64[R1 + 7];
           _scHAu::P64 = P64[R1 + 15];
           _scHAw::P64 = P64[R1 + 23];
           _scHAy::P64 = P64[R1 + 31];
           _scHAA::P64 = P64[R1 + 39];
           _scHAC::P64 = P64[R1 + 47];
           _scHAE::P64 = P64[R1 + 55];
           _scHAG::P64 = P64[R1 + 63];
           _scHAI::P64 = P64[R1 + 71];
           _scHAK::P64 = P64[R1 + 79];
           _scHAM::P64 = P64[R1 + 87];
           _scHAO::P64 = P64[R1 + 95];
           _scHAQ::P64 = P64[R1 + 103];
           _scHAS::P64 = P64[R1 + 111];
           _scHAU::P64 = P64[R1 + 119];
           _scHAW::P64 = P64[R1 + 127];
           _scHAY::P64 = P64[R1 + 135];
           _scHB0::P64 = P64[R1 + 143];
           _scHB2::P64 = P64[R1 + 151];
           _scHB4::P64 = P64[R1 + 159];
           I64[Hp - 160] = sat_scHBc_info;
           P64[Hp - 152] = _scHAq::P64;
           P64[Hp - 144] = _scHAu::P64;
           P64[Hp - 136] = _scHAw::P64;
           P64[Hp - 128] = _scHAy::P64;
           P64[Hp - 120] = _scHAA::P64;
           P64[Hp - 112] = _scHAC::P64;
           P64[Hp - 104] = _scHAE::P64;
           P64[Hp - 96] = _scHAG::P64;
           P64[Hp - 88] = _scHAI::P64;
           P64[Hp - 80] = _scHAK::P64;
           P64[Hp - 72] = _scHAM::P64;
           P64[Hp - 64] = _scHAO::P64;
           P64[Hp - 56] = _scHAQ::P64;
           P64[Hp - 48] = _scHAS::P64;
           P64[Hp - 40] = _scHAU::P64;
           P64[Hp - 32] = _scHAW::P64;
           P64[Hp - 24] = _scHAY::P64;
           P64[Hp - 16] = _scHB0::P64;
           P64[Hp - 8] = _scHB2::P64;
           P64[Hp] = _scHB4::P64;
           R5 = Hp - 159;
           R4 = n_rcHqf_closure+1;
           R3 = lvl111_rcHrv_closure+2;
           R2 = lvl110_rcHru_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHBd_info" {
     sat_scHBd_info:
         const sat_scHBd_entry;
         const 20;
         const 3458764543885312008;
         const 4294967301;
         const ScI2G_srt+136;
 },
 sat_scHBg_entry() //  [R1, R2]
         { []
         }
     {offset
       ccLaY: // global
           _scHB4::P64 = R2;
           _scHBg::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto ccLaZ; else goto ccLb0;
       ccLb0: // global
           Hp = Hp + 168;
           if (Hp > HpLim) (likely: False) goto ccLb2; else goto ccLb1;
       ccLb2: // global
           HpAlloc = 168;
           goto ccLaZ;
       ccLaZ: // global
           R2 = _scHB4::P64;
           R1 = _scHBg::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLb1: // global
           _scHAq::P64 = P64[_scHBg::P64 + 7];
           _scHAu::P64 = P64[_scHBg::P64 + 15];
           _scHAw::P64 = P64[_scHBg::P64 + 23];
           _scHAy::P64 = P64[_scHBg::P64 + 31];
           _scHAA::P64 = P64[_scHBg::P64 + 39];
           _scHAC::P64 = P64[_scHBg::P64 + 47];
           _scHAE::P64 = P64[_scHBg::P64 + 55];
           _scHAG::P64 = P64[_scHBg::P64 + 63];
           _scHAI::P64 = P64[_scHBg::P64 + 71];
           _scHAK::P64 = P64[_scHBg::P64 + 79];
           _scHAM::P64 = P64[_scHBg::P64 + 87];
           _scHAO::P64 = P64[_scHBg::P64 + 95];
           _scHAQ::P64 = P64[_scHBg::P64 + 103];
           _scHAS::P64 = P64[_scHBg::P64 + 111];
           _scHAU::P64 = P64[_scHBg::P64 + 119];
           _scHAW::P64 = P64[_scHBg::P64 + 127];
           _scHAY::P64 = P64[_scHBg::P64 + 135];
           _scHB0::P64 = P64[_scHBg::P64 + 143];
           _scHB2::P64 = P64[_scHBg::P64 + 151];
           I64[Hp - 160] = sat_scHBd_info;
           P64[Hp - 152] = _scHAq::P64;
           P64[Hp - 144] = _scHAu::P64;
           P64[Hp - 136] = _scHAw::P64;
           P64[Hp - 128] = _scHAy::P64;
           P64[Hp - 120] = _scHAA::P64;
           P64[Hp - 112] = _scHAC::P64;
           P64[Hp - 104] = _scHAE::P64;
           P64[Hp - 96] = _scHAG::P64;
           P64[Hp - 88] = _scHAI::P64;
           P64[Hp - 80] = _scHAK::P64;
           P64[Hp - 72] = _scHAM::P64;
           P64[Hp - 64] = _scHAO::P64;
           P64[Hp - 56] = _scHAQ::P64;
           P64[Hp - 48] = _scHAS::P64;
           P64[Hp - 40] = _scHAU::P64;
           P64[Hp - 32] = _scHAW::P64;
           P64[Hp - 24] = _scHAY::P64;
           P64[Hp - 16] = _scHB0::P64;
           P64[Hp - 8] = _scHB2::P64;
           P64[Hp] = _scHB4::P64;
           I64[Sp - 8] = block_ccLaV_info;
           R3 = Hp - 159;
           R2 = lvl40_rcHqi_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHBg_info" {
     sat_scHBg_info:
         const sat_scHBg_entry;
         const 19;
         const 3458764612604788744;
         const 4294967301;
         const ScI2G_srt+136;
 },
 _ccLaV() //  [R1]
         { []
         }
     {offset
       ccLaV: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccLb5; else goto ccLb4;
       ccLb5: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccLb4: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccLaV_info" {
     block_ccLaV_info:
         const _ccLaV;
         const 0;
         const 30;
 },
 sat_scHBh_entry() //  [R1, R2]
         { []
         }
     {offset
       ccLb6: // global
           Hp = Hp + 160;
           if (Hp > HpLim) (likely: False) goto ccLba; else goto ccLb9;
       ccLba: // global
           HpAlloc = 160;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLb9: // global
           _scHAq::P64 = P64[R1 + 7];
           _scHAu::P64 = P64[R1 + 15];
           _scHAw::P64 = P64[R1 + 23];
           _scHAy::P64 = P64[R1 + 31];
           _scHAA::P64 = P64[R1 + 39];
           _scHAC::P64 = P64[R1 + 47];
           _scHAE::P64 = P64[R1 + 55];
           _scHAG::P64 = P64[R1 + 63];
           _scHAI::P64 = P64[R1 + 71];
           _scHAK::P64 = P64[R1 + 79];
           _scHAM::P64 = P64[R1 + 87];
           _scHAO::P64 = P64[R1 + 95];
           _scHAQ::P64 = P64[R1 + 103];
           _scHAS::P64 = P64[R1 + 111];
           _scHAU::P64 = P64[R1 + 119];
           _scHAW::P64 = P64[R1 + 127];
           _scHAY::P64 = P64[R1 + 135];
           _scHB0::P64 = P64[R1 + 143];
           _scHB2::P64 = P64[R1 + 151];
           I64[Hp - 152] = sat_scHBg_info;
           P64[Hp - 144] = _scHAq::P64;
           P64[Hp - 136] = _scHAu::P64;
           P64[Hp - 128] = _scHAw::P64;
           P64[Hp - 120] = _scHAy::P64;
           P64[Hp - 112] = _scHAA::P64;
           P64[Hp - 104] = _scHAC::P64;
           P64[Hp - 96] = _scHAE::P64;
           P64[Hp - 88] = _scHAG::P64;
           P64[Hp - 80] = _scHAI::P64;
           P64[Hp - 72] = _scHAK::P64;
           P64[Hp - 64] = _scHAM::P64;
           P64[Hp - 56] = _scHAO::P64;
           P64[Hp - 48] = _scHAQ::P64;
           P64[Hp - 40] = _scHAS::P64;
           P64[Hp - 32] = _scHAU::P64;
           P64[Hp - 24] = _scHAW::P64;
           P64[Hp - 16] = _scHAY::P64;
           P64[Hp - 8] = _scHB0::P64;
           P64[Hp] = _scHB2::P64;
           R5 = Hp - 151;
           R4 = n_rcHqf_closure+1;
           R3 = lvl66_rcHqI_closure+2;
           R2 = lvl108_rcHrs_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHBh_info" {
     sat_scHBh_info:
         const sat_scHBh_entry;
         const 19;
         const 16140901266359320584;
         const 4294967301;
         const ScI2G_srt+128;
 },
 sat_scHBk_entry() //  [R1, R2]
         { []
         }
     {offset
       ccLbe: // global
           _scHB2::P64 = R2;
           _scHBk::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto ccLbf; else goto ccLbg;
       ccLbg: // global
           Hp = Hp + 160;
           if (Hp > HpLim) (likely: False) goto ccLbi; else goto ccLbh;
       ccLbi: // global
           HpAlloc = 160;
           goto ccLbf;
       ccLbf: // global
           R2 = _scHB2::P64;
           R1 = _scHBk::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLbh: // global
           _scHAq::P64 = P64[_scHBk::P64 + 7];
           _scHAu::P64 = P64[_scHBk::P64 + 15];
           _scHAw::P64 = P64[_scHBk::P64 + 23];
           _scHAy::P64 = P64[_scHBk::P64 + 31];
           _scHAA::P64 = P64[_scHBk::P64 + 39];
           _scHAC::P64 = P64[_scHBk::P64 + 47];
           _scHAE::P64 = P64[_scHBk::P64 + 55];
           _scHAG::P64 = P64[_scHBk::P64 + 63];
           _scHAI::P64 = P64[_scHBk::P64 + 71];
           _scHAK::P64 = P64[_scHBk::P64 + 79];
           _scHAM::P64 = P64[_scHBk::P64 + 87];
           _scHAO::P64 = P64[_scHBk::P64 + 95];
           _scHAQ::P64 = P64[_scHBk::P64 + 103];
           _scHAS::P64 = P64[_scHBk::P64 + 111];
           _scHAU::P64 = P64[_scHBk::P64 + 119];
           _scHAW::P64 = P64[_scHBk::P64 + 127];
           _scHAY::P64 = P64[_scHBk::P64 + 135];
           _scHB0::P64 = P64[_scHBk::P64 + 143];
           I64[Hp - 152] = sat_scHBh_info;
           P64[Hp - 144] = _scHAq::P64;
           P64[Hp - 136] = _scHAu::P64;
           P64[Hp - 128] = _scHAw::P64;
           P64[Hp - 120] = _scHAy::P64;
           P64[Hp - 112] = _scHAA::P64;
           P64[Hp - 104] = _scHAC::P64;
           P64[Hp - 96] = _scHAE::P64;
           P64[Hp - 88] = _scHAG::P64;
           P64[Hp - 80] = _scHAI::P64;
           P64[Hp - 72] = _scHAK::P64;
           P64[Hp - 64] = _scHAM::P64;
           P64[Hp - 56] = _scHAO::P64;
           P64[Hp - 48] = _scHAQ::P64;
           P64[Hp - 40] = _scHAS::P64;
           P64[Hp - 32] = _scHAU::P64;
           P64[Hp - 24] = _scHAW::P64;
           P64[Hp - 16] = _scHAY::P64;
           P64[Hp - 8] = _scHB0::P64;
           P64[Hp] = _scHB2::P64;
           I64[Sp - 8] = block_ccLbb_info;
           R3 = Hp - 151;
           R2 = lvl40_rcHqi_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHBk_info" {
     sat_scHBk_info:
         const sat_scHBk_entry;
         const 18;
         const 16140901266359320584;
         const 4294967301;
         const ScI2G_srt+128;
 },
 _ccLbb() //  [R1]
         { []
         }
     {offset
       ccLbb: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccLbl; else goto ccLbk;
       ccLbl: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccLbk: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccLbb_info" {
     block_ccLbb_info:
         const _ccLbb;
         const 0;
         const 30;
 },
 section ""relreadonly" . ucLge_srtd" {
     ucLge_srtd:
         const ScI2G_srt+128;
         const 33;
         const 8053063727;
 },
 sat_scHBl_entry() //  [R1, R2]
         { []
         }
     {offset
       ccLbm: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto ccLbq; else goto ccLbp;
       ccLbq: // global
           HpAlloc = 152;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLbp: // global
           _scHAq::P64 = P64[R1 + 7];
           _scHAu::P64 = P64[R1 + 15];
           _scHAw::P64 = P64[R1 + 23];
           _scHAy::P64 = P64[R1 + 31];
           _scHAA::P64 = P64[R1 + 39];
           _scHAC::P64 = P64[R1 + 47];
           _scHAE::P64 = P64[R1 + 55];
           _scHAG::P64 = P64[R1 + 63];
           _scHAI::P64 = P64[R1 + 71];
           _scHAK::P64 = P64[R1 + 79];
           _scHAM::P64 = P64[R1 + 87];
           _scHAO::P64 = P64[R1 + 95];
           _scHAQ::P64 = P64[R1 + 103];
           _scHAS::P64 = P64[R1 + 111];
           _scHAU::P64 = P64[R1 + 119];
           _scHAW::P64 = P64[R1 + 127];
           _scHAY::P64 = P64[R1 + 135];
           _scHB0::P64 = P64[R1 + 143];
           I64[Hp - 144] = sat_scHBk_info;
           P64[Hp - 136] = _scHAq::P64;
           P64[Hp - 128] = _scHAu::P64;
           P64[Hp - 120] = _scHAw::P64;
           P64[Hp - 112] = _scHAy::P64;
           P64[Hp - 104] = _scHAA::P64;
           P64[Hp - 96] = _scHAC::P64;
           P64[Hp - 88] = _scHAE::P64;
           P64[Hp - 80] = _scHAG::P64;
           P64[Hp - 72] = _scHAI::P64;
           P64[Hp - 64] = _scHAK::P64;
           P64[Hp - 56] = _scHAM::P64;
           P64[Hp - 48] = _scHAO::P64;
           P64[Hp - 40] = _scHAQ::P64;
           P64[Hp - 32] = _scHAS::P64;
           P64[Hp - 24] = _scHAU::P64;
           P64[Hp - 16] = _scHAW::P64;
           P64[Hp - 8] = _scHAY::P64;
           P64[Hp] = _scHB0::P64;
           R5 = Hp - 143;
           R4 = n_rcHqf_closure+1;
           R3 = lvl66_rcHqI_closure+2;
           R2 = lvl106_rcHrq_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHBl_info" {
     sat_scHBl_info:
         const sat_scHBl_entry;
         const 18;
         const 18446744069414584328;
         const 4294967301;
         const ucLge_srtd;
 },
 section ""relreadonly" . ucLgf_srtd" {
     ucLgf_srtd:
         const ScI2G_srt+128;
         const 33;
         const 8053063727;
 },
 sat_scHBo_entry() //  [R1, R2]
         { []
         }
     {offset
       ccLbu: // global
           _scHB0::P64 = R2;
           _scHBo::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto ccLbv; else goto ccLbw;
       ccLbw: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto ccLby; else goto ccLbx;
       ccLby: // global
           HpAlloc = 152;
           goto ccLbv;
       ccLbv: // global
           R2 = _scHB0::P64;
           R1 = _scHBo::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLbx: // global
           _scHAq::P64 = P64[_scHBo::P64 + 7];
           _scHAu::P64 = P64[_scHBo::P64 + 15];
           _scHAw::P64 = P64[_scHBo::P64 + 23];
           _scHAy::P64 = P64[_scHBo::P64 + 31];
           _scHAA::P64 = P64[_scHBo::P64 + 39];
           _scHAC::P64 = P64[_scHBo::P64 + 47];
           _scHAE::P64 = P64[_scHBo::P64 + 55];
           _scHAG::P64 = P64[_scHBo::P64 + 63];
           _scHAI::P64 = P64[_scHBo::P64 + 71];
           _scHAK::P64 = P64[_scHBo::P64 + 79];
           _scHAM::P64 = P64[_scHBo::P64 + 87];
           _scHAO::P64 = P64[_scHBo::P64 + 95];
           _scHAQ::P64 = P64[_scHBo::P64 + 103];
           _scHAS::P64 = P64[_scHBo::P64 + 111];
           _scHAU::P64 = P64[_scHBo::P64 + 119];
           _scHAW::P64 = P64[_scHBo::P64 + 127];
           _scHAY::P64 = P64[_scHBo::P64 + 135];
           I64[Hp - 144] = sat_scHBl_info;
           P64[Hp - 136] = _scHAq::P64;
           P64[Hp - 128] = _scHAu::P64;
           P64[Hp - 120] = _scHAw::P64;
           P64[Hp - 112] = _scHAy::P64;
           P64[Hp - 104] = _scHAA::P64;
           P64[Hp - 96] = _scHAC::P64;
           P64[Hp - 88] = _scHAE::P64;
           P64[Hp - 80] = _scHAG::P64;
           P64[Hp - 72] = _scHAI::P64;
           P64[Hp - 64] = _scHAK::P64;
           P64[Hp - 56] = _scHAM::P64;
           P64[Hp - 48] = _scHAO::P64;
           P64[Hp - 40] = _scHAQ::P64;
           P64[Hp - 32] = _scHAS::P64;
           P64[Hp - 24] = _scHAU::P64;
           P64[Hp - 16] = _scHAW::P64;
           P64[Hp - 8] = _scHAY::P64;
           P64[Hp] = _scHB0::P64;
           I64[Sp - 8] = block_ccLbr_info;
           R3 = Hp - 143;
           R2 = lvl40_rcHqi_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHBo_info" {
     sat_scHBo_info:
         const sat_scHBo_entry;
         const 17;
         const 18446744069414584328;
         const 4294967301;
         const ucLgf_srtd;
 },
 _ccLbr() //  [R1]
         { []
         }
     {offset
       ccLbr: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccLbB; else goto ccLbA;
       ccLbB: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccLbA: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccLbr_info" {
     block_ccLbr_info:
         const _ccLbr;
         const 0;
         const 30;
 },
 section ""relreadonly" . ucLgg_srtd" {
     ucLgg_srtd:
         const ScI2G_srt+128;
         const 34;
         const 16642998319;
 },
 sat_scHBp_entry() //  [R1, R2]
         { []
         }
     {offset
       ccLbC: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto ccLbG; else goto ccLbF;
       ccLbG: // global
           HpAlloc = 144;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLbF: // global
           _scHAq::P64 = P64[R1 + 7];
           _scHAu::P64 = P64[R1 + 15];
           _scHAw::P64 = P64[R1 + 23];
           _scHAy::P64 = P64[R1 + 31];
           _scHAA::P64 = P64[R1 + 39];
           _scHAC::P64 = P64[R1 + 47];
           _scHAE::P64 = P64[R1 + 55];
           _scHAG::P64 = P64[R1 + 63];
           _scHAI::P64 = P64[R1 + 71];
           _scHAK::P64 = P64[R1 + 79];
           _scHAM::P64 = P64[R1 + 87];
           _scHAO::P64 = P64[R1 + 95];
           _scHAQ::P64 = P64[R1 + 103];
           _scHAS::P64 = P64[R1 + 111];
           _scHAU::P64 = P64[R1 + 119];
           _scHAW::P64 = P64[R1 + 127];
           _scHAY::P64 = P64[R1 + 135];
           I64[Hp - 136] = sat_scHBo_info;
           P64[Hp - 128] = _scHAq::P64;
           P64[Hp - 120] = _scHAu::P64;
           P64[Hp - 112] = _scHAw::P64;
           P64[Hp - 104] = _scHAy::P64;
           P64[Hp - 96] = _scHAA::P64;
           P64[Hp - 88] = _scHAC::P64;
           P64[Hp - 80] = _scHAE::P64;
           P64[Hp - 72] = _scHAG::P64;
           P64[Hp - 64] = _scHAI::P64;
           P64[Hp - 56] = _scHAK::P64;
           P64[Hp - 48] = _scHAM::P64;
           P64[Hp - 40] = _scHAO::P64;
           P64[Hp - 32] = _scHAQ::P64;
           P64[Hp - 24] = _scHAS::P64;
           P64[Hp - 16] = _scHAU::P64;
           P64[Hp - 8] = _scHAW::P64;
           P64[Hp] = _scHAY::P64;
           R5 = Hp - 135;
           R4 = n_rcHqf_closure+1;
           R3 = lvl66_rcHqI_closure+2;
           R2 = lvl104_rcHro_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHBp_info" {
     sat_scHBp_info:
         const sat_scHBp_entry;
         const 17;
         const 18446744069414584328;
         const 4294967301;
         const ucLgg_srtd;
 },
 section ""relreadonly" . ucLgh_srtd" {
     ucLgh_srtd:
         const ScI2G_srt+128;
         const 34;
         const 16642998319;
 },
 sat_scHBs_entry() //  [R1, R2]
         { []
         }
     {offset
       ccLbK: // global
           _scHAY::P64 = R2;
           _scHBs::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto ccLbL; else goto ccLbM;
       ccLbM: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto ccLbO; else goto ccLbN;
       ccLbO: // global
           HpAlloc = 144;
           goto ccLbL;
       ccLbL: // global
           R2 = _scHAY::P64;
           R1 = _scHBs::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLbN: // global
           _scHAq::P64 = P64[_scHBs::P64 + 7];
           _scHAu::P64 = P64[_scHBs::P64 + 15];
           _scHAw::P64 = P64[_scHBs::P64 + 23];
           _scHAy::P64 = P64[_scHBs::P64 + 31];
           _scHAA::P64 = P64[_scHBs::P64 + 39];
           _scHAC::P64 = P64[_scHBs::P64 + 47];
           _scHAE::P64 = P64[_scHBs::P64 + 55];
           _scHAG::P64 = P64[_scHBs::P64 + 63];
           _scHAI::P64 = P64[_scHBs::P64 + 71];
           _scHAK::P64 = P64[_scHBs::P64 + 79];
           _scHAM::P64 = P64[_scHBs::P64 + 87];
           _scHAO::P64 = P64[_scHBs::P64 + 95];
           _scHAQ::P64 = P64[_scHBs::P64 + 103];
           _scHAS::P64 = P64[_scHBs::P64 + 111];
           _scHAU::P64 = P64[_scHBs::P64 + 119];
           _scHAW::P64 = P64[_scHBs::P64 + 127];
           I64[Hp - 136] = sat_scHBp_info;
           P64[Hp - 128] = _scHAq::P64;
           P64[Hp - 120] = _scHAu::P64;
           P64[Hp - 112] = _scHAw::P64;
           P64[Hp - 104] = _scHAy::P64;
           P64[Hp - 96] = _scHAA::P64;
           P64[Hp - 88] = _scHAC::P64;
           P64[Hp - 80] = _scHAE::P64;
           P64[Hp - 72] = _scHAG::P64;
           P64[Hp - 64] = _scHAI::P64;
           P64[Hp - 56] = _scHAK::P64;
           P64[Hp - 48] = _scHAM::P64;
           P64[Hp - 40] = _scHAO::P64;
           P64[Hp - 32] = _scHAQ::P64;
           P64[Hp - 24] = _scHAS::P64;
           P64[Hp - 16] = _scHAU::P64;
           P64[Hp - 8] = _scHAW::P64;
           P64[Hp] = _scHAY::P64;
           I64[Sp - 8] = block_ccLbH_info;
           R3 = Hp - 135;
           R2 = lvl40_rcHqi_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHBs_info" {
     sat_scHBs_info:
         const sat_scHBs_entry;
         const 16;
         const 18446744069414584328;
         const 4294967301;
         const ucLgh_srtd;
 },
 _ccLbH() //  [R1]
         { []
         }
     {offset
       ccLbH: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccLbR; else goto ccLbQ;
       ccLbR: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccLbQ: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccLbH_info" {
     block_ccLbH_info:
         const _ccLbH;
         const 0;
         const 30;
 },
 section ""relreadonly" . ucLgi_srtd" {
     ucLgi_srtd:
         const ScI2G_srt+128;
         const 35;
         const 33822867503;
 },
 sat_scHBt_entry() //  [R1, R2]
         { []
         }
     {offset
       ccLbS: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto ccLbW; else goto ccLbV;
       ccLbW: // global
           HpAlloc = 136;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLbV: // global
           _scHAq::P64 = P64[R1 + 7];
           _scHAu::P64 = P64[R1 + 15];
           _scHAw::P64 = P64[R1 + 23];
           _scHAy::P64 = P64[R1 + 31];
           _scHAA::P64 = P64[R1 + 39];
           _scHAC::P64 = P64[R1 + 47];
           _scHAE::P64 = P64[R1 + 55];
           _scHAG::P64 = P64[R1 + 63];
           _scHAI::P64 = P64[R1 + 71];
           _scHAK::P64 = P64[R1 + 79];
           _scHAM::P64 = P64[R1 + 87];
           _scHAO::P64 = P64[R1 + 95];
           _scHAQ::P64 = P64[R1 + 103];
           _scHAS::P64 = P64[R1 + 111];
           _scHAU::P64 = P64[R1 + 119];
           _scHAW::P64 = P64[R1 + 127];
           I64[Hp - 128] = sat_scHBs_info;
           P64[Hp - 120] = _scHAq::P64;
           P64[Hp - 112] = _scHAu::P64;
           P64[Hp - 104] = _scHAw::P64;
           P64[Hp - 96] = _scHAy::P64;
           P64[Hp - 88] = _scHAA::P64;
           P64[Hp - 80] = _scHAC::P64;
           P64[Hp - 72] = _scHAE::P64;
           P64[Hp - 64] = _scHAG::P64;
           P64[Hp - 56] = _scHAI::P64;
           P64[Hp - 48] = _scHAK::P64;
           P64[Hp - 40] = _scHAM::P64;
           P64[Hp - 32] = _scHAO::P64;
           P64[Hp - 24] = _scHAQ::P64;
           P64[Hp - 16] = _scHAS::P64;
           P64[Hp - 8] = _scHAU::P64;
           P64[Hp] = _scHAW::P64;
           R5 = Hp - 127;
           R4 = n_rcHqf_closure+1;
           R3 = lvl66_rcHqI_closure+2;
           R2 = lvl102_rcHrm_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHBt_info" {
     sat_scHBt_info:
         const sat_scHBt_entry;
         const 16;
         const 18446744069414584328;
         const 4294967301;
         const ucLgi_srtd;
 },
 section ""relreadonly" . ucLgj_srtd" {
     ucLgj_srtd:
         const ScI2G_srt+128;
         const 35;
         const 33822867503;
 },
 sat_scHBw_entry() //  [R1, R2]
         { []
         }
     {offset
       ccLc0: // global
           _scHAW::P64 = R2;
           _scHBw::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto ccLc1; else goto ccLc2;
       ccLc2: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto ccLc4; else goto ccLc3;
       ccLc4: // global
           HpAlloc = 136;
           goto ccLc1;
       ccLc1: // global
           R2 = _scHAW::P64;
           R1 = _scHBw::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLc3: // global
           _scHAq::P64 = P64[_scHBw::P64 + 7];
           _scHAu::P64 = P64[_scHBw::P64 + 15];
           _scHAw::P64 = P64[_scHBw::P64 + 23];
           _scHAy::P64 = P64[_scHBw::P64 + 31];
           _scHAA::P64 = P64[_scHBw::P64 + 39];
           _scHAC::P64 = P64[_scHBw::P64 + 47];
           _scHAE::P64 = P64[_scHBw::P64 + 55];
           _scHAG::P64 = P64[_scHBw::P64 + 63];
           _scHAI::P64 = P64[_scHBw::P64 + 71];
           _scHAK::P64 = P64[_scHBw::P64 + 79];
           _scHAM::P64 = P64[_scHBw::P64 + 87];
           _scHAO::P64 = P64[_scHBw::P64 + 95];
           _scHAQ::P64 = P64[_scHBw::P64 + 103];
           _scHAS::P64 = P64[_scHBw::P64 + 111];
           _scHAU::P64 = P64[_scHBw::P64 + 119];
           I64[Hp - 128] = sat_scHBt_info;
           P64[Hp - 120] = _scHAq::P64;
           P64[Hp - 112] = _scHAu::P64;
           P64[Hp - 104] = _scHAw::P64;
           P64[Hp - 96] = _scHAy::P64;
           P64[Hp - 88] = _scHAA::P64;
           P64[Hp - 80] = _scHAC::P64;
           P64[Hp - 72] = _scHAE::P64;
           P64[Hp - 64] = _scHAG::P64;
           P64[Hp - 56] = _scHAI::P64;
           P64[Hp - 48] = _scHAK::P64;
           P64[Hp - 40] = _scHAM::P64;
           P64[Hp - 32] = _scHAO::P64;
           P64[Hp - 24] = _scHAQ::P64;
           P64[Hp - 16] = _scHAS::P64;
           P64[Hp - 8] = _scHAU::P64;
           P64[Hp] = _scHAW::P64;
           I64[Sp - 8] = block_ccLbX_info;
           R3 = Hp - 127;
           R2 = lvl40_rcHqi_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHBw_info" {
     sat_scHBw_info:
         const sat_scHBw_entry;
         const 15;
         const 18446744069414584328;
         const 4294967301;
         const ucLgj_srtd;
 },
 _ccLbX() //  [R1]
         { []
         }
     {offset
       ccLbX: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccLc7; else goto ccLc6;
       ccLc7: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccLc6: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccLbX_info" {
     block_ccLbX_info:
         const _ccLbX;
         const 0;
         const 30;
 },
 section ""relreadonly" . ucLgk_srtd" {
     ucLgk_srtd:
         const ScI2G_srt+128;
         const 36;
         const 68182605871;
 },
 sat_scHBx_entry() //  [R1, R2]
         { []
         }
     {offset
       ccLc8: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto ccLcc; else goto ccLcb;
       ccLcc: // global
           HpAlloc = 128;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLcb: // global
           _scHAq::P64 = P64[R1 + 7];
           _scHAu::P64 = P64[R1 + 15];
           _scHAw::P64 = P64[R1 + 23];
           _scHAy::P64 = P64[R1 + 31];
           _scHAA::P64 = P64[R1 + 39];
           _scHAC::P64 = P64[R1 + 47];
           _scHAE::P64 = P64[R1 + 55];
           _scHAG::P64 = P64[R1 + 63];
           _scHAI::P64 = P64[R1 + 71];
           _scHAK::P64 = P64[R1 + 79];
           _scHAM::P64 = P64[R1 + 87];
           _scHAO::P64 = P64[R1 + 95];
           _scHAQ::P64 = P64[R1 + 103];
           _scHAS::P64 = P64[R1 + 111];
           _scHAU::P64 = P64[R1 + 119];
           I64[Hp - 120] = sat_scHBw_info;
           P64[Hp - 112] = _scHAq::P64;
           P64[Hp - 104] = _scHAu::P64;
           P64[Hp - 96] = _scHAw::P64;
           P64[Hp - 88] = _scHAy::P64;
           P64[Hp - 80] = _scHAA::P64;
           P64[Hp - 72] = _scHAC::P64;
           P64[Hp - 64] = _scHAE::P64;
           P64[Hp - 56] = _scHAG::P64;
           P64[Hp - 48] = _scHAI::P64;
           P64[Hp - 40] = _scHAK::P64;
           P64[Hp - 32] = _scHAM::P64;
           P64[Hp - 24] = _scHAO::P64;
           P64[Hp - 16] = _scHAQ::P64;
           P64[Hp - 8] = _scHAS::P64;
           P64[Hp] = _scHAU::P64;
           R5 = Hp - 119;
           R4 = n_rcHqf_closure+1;
           R3 = lvl66_rcHqI_closure+2;
           R2 = lvl100_rcHrk_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHBx_info" {
     sat_scHBx_info:
         const sat_scHBx_entry;
         const 15;
         const 18446744069414584328;
         const 4294967301;
         const ucLgk_srtd;
 },
 section ""relreadonly" . ucLgl_srtd" {
     ucLgl_srtd:
         const ScI2G_srt+128;
         const 36;
         const 68182605871;
 },
 sat_scHBA_entry() //  [R1, R2]
         { []
         }
     {offset
       ccLcg: // global
           _scHAU::P64 = R2;
           _scHBA::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto ccLch; else goto ccLci;
       ccLci: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto ccLck; else goto ccLcj;
       ccLck: // global
           HpAlloc = 128;
           goto ccLch;
       ccLch: // global
           R2 = _scHAU::P64;
           R1 = _scHBA::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLcj: // global
           _scHAq::P64 = P64[_scHBA::P64 + 7];
           _scHAu::P64 = P64[_scHBA::P64 + 15];
           _scHAw::P64 = P64[_scHBA::P64 + 23];
           _scHAy::P64 = P64[_scHBA::P64 + 31];
           _scHAA::P64 = P64[_scHBA::P64 + 39];
           _scHAC::P64 = P64[_scHBA::P64 + 47];
           _scHAE::P64 = P64[_scHBA::P64 + 55];
           _scHAG::P64 = P64[_scHBA::P64 + 63];
           _scHAI::P64 = P64[_scHBA::P64 + 71];
           _scHAK::P64 = P64[_scHBA::P64 + 79];
           _scHAM::P64 = P64[_scHBA::P64 + 87];
           _scHAO::P64 = P64[_scHBA::P64 + 95];
           _scHAQ::P64 = P64[_scHBA::P64 + 103];
           _scHAS::P64 = P64[_scHBA::P64 + 111];
           I64[Hp - 120] = sat_scHBx_info;
           P64[Hp - 112] = _scHAq::P64;
           P64[Hp - 104] = _scHAu::P64;
           P64[Hp - 96] = _scHAw::P64;
           P64[Hp - 88] = _scHAy::P64;
           P64[Hp - 80] = _scHAA::P64;
           P64[Hp - 72] = _scHAC::P64;
           P64[Hp - 64] = _scHAE::P64;
           P64[Hp - 56] = _scHAG::P64;
           P64[Hp - 48] = _scHAI::P64;
           P64[Hp - 40] = _scHAK::P64;
           P64[Hp - 32] = _scHAM::P64;
           P64[Hp - 24] = _scHAO::P64;
           P64[Hp - 16] = _scHAQ::P64;
           P64[Hp - 8] = _scHAS::P64;
           P64[Hp] = _scHAU::P64;
           I64[Sp - 8] = block_ccLcd_info;
           R3 = Hp - 119;
           R2 = lvl40_rcHqi_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHBA_info" {
     sat_scHBA_info:
         const sat_scHBA_entry;
         const 14;
         const 18446744069414584328;
         const 4294967301;
         const ucLgl_srtd;
 },
 _ccLcd() //  [R1]
         { []
         }
     {offset
       ccLcd: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccLcn; else goto ccLcm;
       ccLcn: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccLcm: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccLcd_info" {
     block_ccLcd_info:
         const _ccLcd;
         const 0;
         const 30;
 },
 section ""relreadonly" . ucLgm_srtd" {
     ucLgm_srtd:
         const ScI2G_srt+128;
         const 37;
         const 136902082607;
 },
 sat_scHBB_entry() //  [R1, R2]
         { []
         }
     {offset
       ccLco: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto ccLcs; else goto ccLcr;
       ccLcs: // global
           HpAlloc = 120;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLcr: // global
           _scHAq::P64 = P64[R1 + 7];
           _scHAu::P64 = P64[R1 + 15];
           _scHAw::P64 = P64[R1 + 23];
           _scHAy::P64 = P64[R1 + 31];
           _scHAA::P64 = P64[R1 + 39];
           _scHAC::P64 = P64[R1 + 47];
           _scHAE::P64 = P64[R1 + 55];
           _scHAG::P64 = P64[R1 + 63];
           _scHAI::P64 = P64[R1 + 71];
           _scHAK::P64 = P64[R1 + 79];
           _scHAM::P64 = P64[R1 + 87];
           _scHAO::P64 = P64[R1 + 95];
           _scHAQ::P64 = P64[R1 + 103];
           _scHAS::P64 = P64[R1 + 111];
           I64[Hp - 112] = sat_scHBA_info;
           P64[Hp - 104] = _scHAq::P64;
           P64[Hp - 96] = _scHAu::P64;
           P64[Hp - 88] = _scHAw::P64;
           P64[Hp - 80] = _scHAy::P64;
           P64[Hp - 72] = _scHAA::P64;
           P64[Hp - 64] = _scHAC::P64;
           P64[Hp - 56] = _scHAE::P64;
           P64[Hp - 48] = _scHAG::P64;
           P64[Hp - 40] = _scHAI::P64;
           P64[Hp - 32] = _scHAK::P64;
           P64[Hp - 24] = _scHAM::P64;
           P64[Hp - 16] = _scHAO::P64;
           P64[Hp - 8] = _scHAQ::P64;
           P64[Hp] = _scHAS::P64;
           R5 = Hp - 111;
           R4 = n_rcHqf_closure+1;
           R3 = lvl66_rcHqI_closure+2;
           R2 = lvl98_rcHri_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHBB_info" {
     sat_scHBB_info:
         const sat_scHBB_entry;
         const 14;
         const 18446744069414584328;
         const 4294967301;
         const ucLgm_srtd;
 },
 section ""relreadonly" . ucLgn_srtd" {
     ucLgn_srtd:
         const ScI2G_srt+128;
         const 37;
         const 136902082607;
 },
 sat_scHBE_entry() //  [R1, R2]
         { []
         }
     {offset
       ccLcw: // global
           _scHAS::P64 = R2;
           _scHBE::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto ccLcx; else goto ccLcy;
       ccLcy: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto ccLcA; else goto ccLcz;
       ccLcA: // global
           HpAlloc = 120;
           goto ccLcx;
       ccLcx: // global
           R2 = _scHAS::P64;
           R1 = _scHBE::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLcz: // global
           _scHAq::P64 = P64[_scHBE::P64 + 7];
           _scHAu::P64 = P64[_scHBE::P64 + 15];
           _scHAw::P64 = P64[_scHBE::P64 + 23];
           _scHAy::P64 = P64[_scHBE::P64 + 31];
           _scHAA::P64 = P64[_scHBE::P64 + 39];
           _scHAC::P64 = P64[_scHBE::P64 + 47];
           _scHAE::P64 = P64[_scHBE::P64 + 55];
           _scHAG::P64 = P64[_scHBE::P64 + 63];
           _scHAI::P64 = P64[_scHBE::P64 + 71];
           _scHAK::P64 = P64[_scHBE::P64 + 79];
           _scHAM::P64 = P64[_scHBE::P64 + 87];
           _scHAO::P64 = P64[_scHBE::P64 + 95];
           _scHAQ::P64 = P64[_scHBE::P64 + 103];
           I64[Hp - 112] = sat_scHBB_info;
           P64[Hp - 104] = _scHAq::P64;
           P64[Hp - 96] = _scHAu::P64;
           P64[Hp - 88] = _scHAw::P64;
           P64[Hp - 80] = _scHAy::P64;
           P64[Hp - 72] = _scHAA::P64;
           P64[Hp - 64] = _scHAC::P64;
           P64[Hp - 56] = _scHAE::P64;
           P64[Hp - 48] = _scHAG::P64;
           P64[Hp - 40] = _scHAI::P64;
           P64[Hp - 32] = _scHAK::P64;
           P64[Hp - 24] = _scHAM::P64;
           P64[Hp - 16] = _scHAO::P64;
           P64[Hp - 8] = _scHAQ::P64;
           P64[Hp] = _scHAS::P64;
           I64[Sp - 8] = block_ccLct_info;
           R3 = Hp - 111;
           R2 = lvl40_rcHqi_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHBE_info" {
     sat_scHBE_info:
         const sat_scHBE_entry;
         const 13;
         const 18446744069414584328;
         const 4294967301;
         const ucLgn_srtd;
 },
 _ccLct() //  [R1]
         { []
         }
     {offset
       ccLct: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccLcD; else goto ccLcC;
       ccLcD: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccLcC: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccLct_info" {
     block_ccLct_info:
         const _ccLct;
         const 0;
         const 30;
 },
 section ""relreadonly" . ucLgo_srtd" {
     ucLgo_srtd:
         const ScI2G_srt+104;
         const 41;
         const 2194728288633;
 },
 sat_scHBF_entry() //  [R1, R2]
         { []
         }
     {offset
       ccLcE: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto ccLcI; else goto ccLcH;
       ccLcI: // global
           HpAlloc = 112;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLcH: // global
           _scHAq::P64 = P64[R1 + 7];
           _scHAu::P64 = P64[R1 + 15];
           _scHAw::P64 = P64[R1 + 23];
           _scHAy::P64 = P64[R1 + 31];
           _scHAA::P64 = P64[R1 + 39];
           _scHAC::P64 = P64[R1 + 47];
           _scHAE::P64 = P64[R1 + 55];
           _scHAG::P64 = P64[R1 + 63];
           _scHAI::P64 = P64[R1 + 71];
           _scHAK::P64 = P64[R1 + 79];
           _scHAM::P64 = P64[R1 + 87];
           _scHAO::P64 = P64[R1 + 95];
           _scHAQ::P64 = P64[R1 + 103];
           I64[Hp - 104] = sat_scHBE_info;
           P64[Hp - 96] = _scHAq::P64;
           P64[Hp - 88] = _scHAu::P64;
           P64[Hp - 80] = _scHAw::P64;
           P64[Hp - 72] = _scHAy::P64;
           P64[Hp - 64] = _scHAA::P64;
           P64[Hp - 56] = _scHAC::P64;
           P64[Hp - 48] = _scHAE::P64;
           P64[Hp - 40] = _scHAG::P64;
           P64[Hp - 32] = _scHAI::P64;
           P64[Hp - 24] = _scHAK::P64;
           P64[Hp - 16] = _scHAM::P64;
           P64[Hp - 8] = _scHAO::P64;
           P64[Hp] = _scHAQ::P64;
           R5 = Hp - 103;
           R4 = n_rcHqf_closure+1;
           R3 = lvl46_rcHqo_closure+2;
           R2 = lvl96_rcHrg_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHBF_info" {
     sat_scHBF_info:
         const sat_scHBF_entry;
         const 13;
         const 18446744069414584328;
         const 4294967301;
         const ucLgo_srtd;
 },
 section ""relreadonly" . ucLgp_srtd" {
     ucLgp_srtd:
         const ScI2G_srt+104;
         const 41;
         const 2194728288633;
 },
 sat_scHBI_entry() //  [R1, R2]
         { []
         }
     {offset
       ccLcM: // global
           _scHAQ::P64 = R2;
           _scHBI::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto ccLcN; else goto ccLcO;
       ccLcO: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto ccLcQ; else goto ccLcP;
       ccLcQ: // global
           HpAlloc = 112;
           goto ccLcN;
       ccLcN: // global
           R2 = _scHAQ::P64;
           R1 = _scHBI::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLcP: // global
           _scHAq::P64 = P64[_scHBI::P64 + 7];
           _scHAu::P64 = P64[_scHBI::P64 + 15];
           _scHAw::P64 = P64[_scHBI::P64 + 23];
           _scHAy::P64 = P64[_scHBI::P64 + 31];
           _scHAA::P64 = P64[_scHBI::P64 + 39];
           _scHAC::P64 = P64[_scHBI::P64 + 47];
           _scHAE::P64 = P64[_scHBI::P64 + 55];
           _scHAG::P64 = P64[_scHBI::P64 + 63];
           _scHAI::P64 = P64[_scHBI::P64 + 71];
           _scHAK::P64 = P64[_scHBI::P64 + 79];
           _scHAM::P64 = P64[_scHBI::P64 + 87];
           _scHAO::P64 = P64[_scHBI::P64 + 95];
           I64[Hp - 104] = sat_scHBF_info;
           P64[Hp - 96] = _scHAq::P64;
           P64[Hp - 88] = _scHAu::P64;
           P64[Hp - 80] = _scHAw::P64;
           P64[Hp - 72] = _scHAy::P64;
           P64[Hp - 64] = _scHAA::P64;
           P64[Hp - 56] = _scHAC::P64;
           P64[Hp - 48] = _scHAE::P64;
           P64[Hp - 40] = _scHAG::P64;
           P64[Hp - 32] = _scHAI::P64;
           P64[Hp - 24] = _scHAK::P64;
           P64[Hp - 16] = _scHAM::P64;
           P64[Hp - 8] = _scHAO::P64;
           P64[Hp] = _scHAQ::P64;
           I64[Sp - 8] = block_ccLcJ_info;
           R3 = Hp - 103;
           R2 = lvl40_rcHqi_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHBI_info" {
     sat_scHBI_info:
         const sat_scHBI_entry;
         const 12;
         const 18446744069414584328;
         const 4294967301;
         const ucLgp_srtd;
 },
 _ccLcJ() //  [R1]
         { []
         }
     {offset
       ccLcJ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccLcT; else goto ccLcS;
       ccLcT: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccLcS: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccLcJ_info" {
     block_ccLcJ_info:
         const _ccLcJ;
         const 0;
         const 30;
 },
 section ""relreadonly" . ucLgq_srtd" {
     ucLgq_srtd:
         const ScI2G_srt+104;
         const 42;
         const 4393751544185;
 },
 sat_scHBJ_entry() //  [R1, R2]
         { []
         }
     {offset
       ccLcU: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto ccLcY; else goto ccLcX;
       ccLcY: // global
           HpAlloc = 104;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLcX: // global
           _scHAq::P64 = P64[R1 + 7];
           _scHAu::P64 = P64[R1 + 15];
           _scHAw::P64 = P64[R1 + 23];
           _scHAy::P64 = P64[R1 + 31];
           _scHAA::P64 = P64[R1 + 39];
           _scHAC::P64 = P64[R1 + 47];
           _scHAE::P64 = P64[R1 + 55];
           _scHAG::P64 = P64[R1 + 63];
           _scHAI::P64 = P64[R1 + 71];
           _scHAK::P64 = P64[R1 + 79];
           _scHAM::P64 = P64[R1 + 87];
           _scHAO::P64 = P64[R1 + 95];
           I64[Hp - 96] = sat_scHBI_info;
           P64[Hp - 88] = _scHAq::P64;
           P64[Hp - 80] = _scHAu::P64;
           P64[Hp - 72] = _scHAw::P64;
           P64[Hp - 64] = _scHAy::P64;
           P64[Hp - 56] = _scHAA::P64;
           P64[Hp - 48] = _scHAC::P64;
           P64[Hp - 40] = _scHAE::P64;
           P64[Hp - 32] = _scHAG::P64;
           P64[Hp - 24] = _scHAI::P64;
           P64[Hp - 16] = _scHAK::P64;
           P64[Hp - 8] = _scHAM::P64;
           P64[Hp] = _scHAO::P64;
           R5 = Hp - 95;
           R4 = n_rcHqf_closure+1;
           R3 = lvl46_rcHqo_closure+2;
           R2 = lvl94_rcHre_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHBJ_info" {
     sat_scHBJ_info:
         const sat_scHBJ_entry;
         const 12;
         const 18446744069414584328;
         const 4294967301;
         const ucLgq_srtd;
 },
 section ""relreadonly" . ucLgr_srtd" {
     ucLgr_srtd:
         const ScI2G_srt+104;
         const 42;
         const 4393751544185;
 },
 sat_scHBM_entry() //  [R1, R2]
         { []
         }
     {offset
       ccLd2: // global
           _scHAO::P64 = R2;
           _scHBM::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto ccLd3; else goto ccLd4;
       ccLd4: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto ccLd6; else goto ccLd5;
       ccLd6: // global
           HpAlloc = 104;
           goto ccLd3;
       ccLd3: // global
           R2 = _scHAO::P64;
           R1 = _scHBM::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLd5: // global
           _scHAq::P64 = P64[_scHBM::P64 + 7];
           _scHAu::P64 = P64[_scHBM::P64 + 15];
           _scHAw::P64 = P64[_scHBM::P64 + 23];
           _scHAy::P64 = P64[_scHBM::P64 + 31];
           _scHAA::P64 = P64[_scHBM::P64 + 39];
           _scHAC::P64 = P64[_scHBM::P64 + 47];
           _scHAE::P64 = P64[_scHBM::P64 + 55];
           _scHAG::P64 = P64[_scHBM::P64 + 63];
           _scHAI::P64 = P64[_scHBM::P64 + 71];
           _scHAK::P64 = P64[_scHBM::P64 + 79];
           _scHAM::P64 = P64[_scHBM::P64 + 87];
           I64[Hp - 96] = sat_scHBJ_info;
           P64[Hp - 88] = _scHAq::P64;
           P64[Hp - 80] = _scHAu::P64;
           P64[Hp - 72] = _scHAw::P64;
           P64[Hp - 64] = _scHAy::P64;
           P64[Hp - 56] = _scHAA::P64;
           P64[Hp - 48] = _scHAC::P64;
           P64[Hp - 40] = _scHAE::P64;
           P64[Hp - 32] = _scHAG::P64;
           P64[Hp - 24] = _scHAI::P64;
           P64[Hp - 16] = _scHAK::P64;
           P64[Hp - 8] = _scHAM::P64;
           P64[Hp] = _scHAO::P64;
           I64[Sp - 8] = block_ccLcZ_info;
           R3 = Hp - 95;
           R2 = lvl40_rcHqi_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHBM_info" {
     sat_scHBM_info:
         const sat_scHBM_entry;
         const 11;
         const 18446744069414584328;
         const 4294967301;
         const ucLgr_srtd;
 },
 _ccLcZ() //  [R1]
         { []
         }
     {offset
       ccLcZ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccLd9; else goto ccLd8;
       ccLd9: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccLd8: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccLcZ_info" {
     block_ccLcZ_info:
         const _ccLcZ;
         const 0;
         const 30;
 },
 section ""relreadonly" . ucLgs_srtd" {
     ucLgs_srtd:
         const ScI2G_srt+104;
         const 43;
         const 8791798055289;
 },
 sat_scHBN_entry() //  [R1, R2]
         { []
         }
     {offset
       ccLda: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto ccLde; else goto ccLdd;
       ccLde: // global
           HpAlloc = 96;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLdd: // global
           _scHAq::P64 = P64[R1 + 7];
           _scHAu::P64 = P64[R1 + 15];
           _scHAw::P64 = P64[R1 + 23];
           _scHAy::P64 = P64[R1 + 31];
           _scHAA::P64 = P64[R1 + 39];
           _scHAC::P64 = P64[R1 + 47];
           _scHAE::P64 = P64[R1 + 55];
           _scHAG::P64 = P64[R1 + 63];
           _scHAI::P64 = P64[R1 + 71];
           _scHAK::P64 = P64[R1 + 79];
           _scHAM::P64 = P64[R1 + 87];
           I64[Hp - 88] = sat_scHBM_info;
           P64[Hp - 80] = _scHAq::P64;
           P64[Hp - 72] = _scHAu::P64;
           P64[Hp - 64] = _scHAw::P64;
           P64[Hp - 56] = _scHAy::P64;
           P64[Hp - 48] = _scHAA::P64;
           P64[Hp - 40] = _scHAC::P64;
           P64[Hp - 32] = _scHAE::P64;
           P64[Hp - 24] = _scHAG::P64;
           P64[Hp - 16] = _scHAI::P64;
           P64[Hp - 8] = _scHAK::P64;
           P64[Hp] = _scHAM::P64;
           R5 = Hp - 87;
           R4 = n_rcHqf_closure+1;
           R3 = lvl46_rcHqo_closure+2;
           R2 = lvl92_rcHrc_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHBN_info" {
     sat_scHBN_info:
         const sat_scHBN_entry;
         const 11;
         const 18446744069414584328;
         const 4294967301;
         const ucLgs_srtd;
 },
 section ""relreadonly" . ucLgt_srtd" {
     ucLgt_srtd:
         const ScI2G_srt+104;
         const 43;
         const 8791798055289;
 },
 sat_scHBQ_entry() //  [R1, R2]
         { []
         }
     {offset
       ccLdi: // global
           _scHAM::P64 = R2;
           _scHBQ::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto ccLdj; else goto ccLdk;
       ccLdk: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto ccLdm; else goto ccLdl;
       ccLdm: // global
           HpAlloc = 96;
           goto ccLdj;
       ccLdj: // global
           R2 = _scHAM::P64;
           R1 = _scHBQ::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLdl: // global
           _scHAq::P64 = P64[_scHBQ::P64 + 7];
           _scHAu::P64 = P64[_scHBQ::P64 + 15];
           _scHAw::P64 = P64[_scHBQ::P64 + 23];
           _scHAy::P64 = P64[_scHBQ::P64 + 31];
           _scHAA::P64 = P64[_scHBQ::P64 + 39];
           _scHAC::P64 = P64[_scHBQ::P64 + 47];
           _scHAE::P64 = P64[_scHBQ::P64 + 55];
           _scHAG::P64 = P64[_scHBQ::P64 + 63];
           _scHAI::P64 = P64[_scHBQ::P64 + 71];
           _scHAK::P64 = P64[_scHBQ::P64 + 79];
           I64[Hp - 88] = sat_scHBN_info;
           P64[Hp - 80] = _scHAq::P64;
           P64[Hp - 72] = _scHAu::P64;
           P64[Hp - 64] = _scHAw::P64;
           P64[Hp - 56] = _scHAy::P64;
           P64[Hp - 48] = _scHAA::P64;
           P64[Hp - 40] = _scHAC::P64;
           P64[Hp - 32] = _scHAE::P64;
           P64[Hp - 24] = _scHAG::P64;
           P64[Hp - 16] = _scHAI::P64;
           P64[Hp - 8] = _scHAK::P64;
           P64[Hp] = _scHAM::P64;
           I64[Sp - 8] = block_ccLdf_info;
           R3 = Hp - 87;
           R2 = lvl40_rcHqi_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHBQ_info" {
     sat_scHBQ_info:
         const sat_scHBQ_entry;
         const 10;
         const 18446744069414584328;
         const 4294967301;
         const ucLgt_srtd;
 },
 _ccLdf() //  [R1]
         { []
         }
     {offset
       ccLdf: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccLdp; else goto ccLdo;
       ccLdp: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccLdo: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccLdf_info" {
     block_ccLdf_info:
         const _ccLdf;
         const 0;
         const 30;
 },
 section ""relreadonly" . ucLgu_srtd" {
     ucLgu_srtd:
         const ScI2G_srt+104;
         const 44;
         const 17587891077497;
 },
 sat_scHBR_entry() //  [R1, R2]
         { []
         }
     {offset
       ccLdq: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto ccLdu; else goto ccLdt;
       ccLdu: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLdt: // global
           _scHAq::P64 = P64[R1 + 7];
           _scHAu::P64 = P64[R1 + 15];
           _scHAw::P64 = P64[R1 + 23];
           _scHAy::P64 = P64[R1 + 31];
           _scHAA::P64 = P64[R1 + 39];
           _scHAC::P64 = P64[R1 + 47];
           _scHAE::P64 = P64[R1 + 55];
           _scHAG::P64 = P64[R1 + 63];
           _scHAI::P64 = P64[R1 + 71];
           _scHAK::P64 = P64[R1 + 79];
           I64[Hp - 80] = sat_scHBQ_info;
           P64[Hp - 72] = _scHAq::P64;
           P64[Hp - 64] = _scHAu::P64;
           P64[Hp - 56] = _scHAw::P64;
           P64[Hp - 48] = _scHAy::P64;
           P64[Hp - 40] = _scHAA::P64;
           P64[Hp - 32] = _scHAC::P64;
           P64[Hp - 24] = _scHAE::P64;
           P64[Hp - 16] = _scHAG::P64;
           P64[Hp - 8] = _scHAI::P64;
           P64[Hp] = _scHAK::P64;
           R5 = Hp - 79;
           R4 = n_rcHqf_closure+1;
           R3 = lvl46_rcHqo_closure+2;
           R2 = lvl90_rcHra_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHBR_info" {
     sat_scHBR_info:
         const sat_scHBR_entry;
         const 10;
         const 18446744069414584328;
         const 4294967301;
         const ucLgu_srtd;
 },
 section ""relreadonly" . ucLgv_srtd" {
     ucLgv_srtd:
         const ScI2G_srt+104;
         const 44;
         const 17587891077497;
 },
 sat_scHBU_entry() //  [R1, R2]
         { []
         }
     {offset
       ccLdy: // global
           _scHAK::P64 = R2;
           _scHBU::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto ccLdz; else goto ccLdA;
       ccLdA: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto ccLdC; else goto ccLdB;
       ccLdC: // global
           HpAlloc = 88;
           goto ccLdz;
       ccLdz: // global
           R2 = _scHAK::P64;
           R1 = _scHBU::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLdB: // global
           _scHAq::P64 = P64[_scHBU::P64 + 7];
           _scHAu::P64 = P64[_scHBU::P64 + 15];
           _scHAw::P64 = P64[_scHBU::P64 + 23];
           _scHAy::P64 = P64[_scHBU::P64 + 31];
           _scHAA::P64 = P64[_scHBU::P64 + 39];
           _scHAC::P64 = P64[_scHBU::P64 + 47];
           _scHAE::P64 = P64[_scHBU::P64 + 55];
           _scHAG::P64 = P64[_scHBU::P64 + 63];
           _scHAI::P64 = P64[_scHBU::P64 + 71];
           I64[Hp - 80] = sat_scHBR_info;
           P64[Hp - 72] = _scHAq::P64;
           P64[Hp - 64] = _scHAu::P64;
           P64[Hp - 56] = _scHAw::P64;
           P64[Hp - 48] = _scHAy::P64;
           P64[Hp - 40] = _scHAA::P64;
           P64[Hp - 32] = _scHAC::P64;
           P64[Hp - 24] = _scHAE::P64;
           P64[Hp - 16] = _scHAG::P64;
           P64[Hp - 8] = _scHAI::P64;
           P64[Hp] = _scHAK::P64;
           I64[Sp - 8] = block_ccLdv_info;
           R3 = Hp - 79;
           R2 = lvl40_rcHqi_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHBU_info" {
     sat_scHBU_info:
         const sat_scHBU_entry;
         const 9;
         const 18446744069414584328;
         const 4294967301;
         const ucLgv_srtd;
 },
 _ccLdv() //  [R1]
         { []
         }
     {offset
       ccLdv: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccLdF; else goto ccLdE;
       ccLdF: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccLdE: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccLdv_info" {
     block_ccLdv_info:
         const _ccLdv;
         const 0;
         const 30;
 },
 section ""relreadonly" . ucLgw_srtd" {
     ucLgw_srtd:
         const ScI2G_srt+104;
         const 45;
         const 35180077121913;
 },
 sat_scHBV_entry() //  [R1, R2]
         { []
         }
     {offset
       ccLdG: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto ccLdK; else goto ccLdJ;
       ccLdK: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLdJ: // global
           _scHAq::P64 = P64[R1 + 7];
           _scHAu::P64 = P64[R1 + 15];
           _scHAw::P64 = P64[R1 + 23];
           _scHAy::P64 = P64[R1 + 31];
           _scHAA::P64 = P64[R1 + 39];
           _scHAC::P64 = P64[R1 + 47];
           _scHAE::P64 = P64[R1 + 55];
           _scHAG::P64 = P64[R1 + 63];
           _scHAI::P64 = P64[R1 + 71];
           I64[Hp - 72] = sat_scHBU_info;
           P64[Hp - 64] = _scHAq::P64;
           P64[Hp - 56] = _scHAu::P64;
           P64[Hp - 48] = _scHAw::P64;
           P64[Hp - 40] = _scHAy::P64;
           P64[Hp - 32] = _scHAA::P64;
           P64[Hp - 24] = _scHAC::P64;
           P64[Hp - 16] = _scHAE::P64;
           P64[Hp - 8] = _scHAG::P64;
           P64[Hp] = _scHAI::P64;
           R5 = Hp - 71;
           R4 = n_rcHqf_closure+1;
           R3 = lvl46_rcHqo_closure+2;
           R2 = lvl88_rcHr8_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHBV_info" {
     sat_scHBV_info:
         const sat_scHBV_entry;
         const 9;
         const 18446744069414584328;
         const 4294967301;
         const ucLgw_srtd;
 },
 section ""relreadonly" . ucLgx_srtd" {
     ucLgx_srtd:
         const ScI2G_srt+104;
         const 45;
         const 35180077121913;
 },
 sat_scHBY_entry() //  [R1, R2]
         { []
         }
     {offset
       ccLdO: // global
           _scHAI::P64 = R2;
           _scHBY::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto ccLdP; else goto ccLdQ;
       ccLdQ: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto ccLdS; else goto ccLdR;
       ccLdS: // global
           HpAlloc = 80;
           goto ccLdP;
       ccLdP: // global
           R2 = _scHAI::P64;
           R1 = _scHBY::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLdR: // global
           _scHAq::P64 = P64[_scHBY::P64 + 7];
           _scHAu::P64 = P64[_scHBY::P64 + 15];
           _scHAw::P64 = P64[_scHBY::P64 + 23];
           _scHAy::P64 = P64[_scHBY::P64 + 31];
           _scHAA::P64 = P64[_scHBY::P64 + 39];
           _scHAC::P64 = P64[_scHBY::P64 + 47];
           _scHAE::P64 = P64[_scHBY::P64 + 55];
           _scHAG::P64 = P64[_scHBY::P64 + 63];
           I64[Hp - 72] = sat_scHBV_info;
           P64[Hp - 64] = _scHAq::P64;
           P64[Hp - 56] = _scHAu::P64;
           P64[Hp - 48] = _scHAw::P64;
           P64[Hp - 40] = _scHAy::P64;
           P64[Hp - 32] = _scHAA::P64;
           P64[Hp - 24] = _scHAC::P64;
           P64[Hp - 16] = _scHAE::P64;
           P64[Hp - 8] = _scHAG::P64;
           P64[Hp] = _scHAI::P64;
           I64[Sp - 8] = block_ccLdL_info;
           R3 = Hp - 71;
           R2 = lvl40_rcHqi_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHBY_info" {
     sat_scHBY_info:
         const sat_scHBY_entry;
         const 8;
         const 18446744069414584328;
         const 4294967301;
         const ucLgx_srtd;
 },
 _ccLdL() //  [R1]
         { []
         }
     {offset
       ccLdL: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccLdV; else goto ccLdU;
       ccLdV: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccLdU: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccLdL_info" {
     block_ccLdL_info:
         const _ccLdL;
         const 0;
         const 30;
 },
 section ""relreadonly" . ucLgy_srtd" {
     ucLgy_srtd:
         const ScI2G_srt+104;
         const 46;
         const 70364449210745;
 },
 sat_scHBZ_entry() //  [R1, R2]
         { []
         }
     {offset
       ccLdW: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto ccLe0; else goto ccLdZ;
       ccLe0: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLdZ: // global
           _scHAq::P64 = P64[R1 + 7];
           _scHAu::P64 = P64[R1 + 15];
           _scHAw::P64 = P64[R1 + 23];
           _scHAy::P64 = P64[R1 + 31];
           _scHAA::P64 = P64[R1 + 39];
           _scHAC::P64 = P64[R1 + 47];
           _scHAE::P64 = P64[R1 + 55];
           _scHAG::P64 = P64[R1 + 63];
           I64[Hp - 64] = sat_scHBY_info;
           P64[Hp - 56] = _scHAq::P64;
           P64[Hp - 48] = _scHAu::P64;
           P64[Hp - 40] = _scHAw::P64;
           P64[Hp - 32] = _scHAy::P64;
           P64[Hp - 24] = _scHAA::P64;
           P64[Hp - 16] = _scHAC::P64;
           P64[Hp - 8] = _scHAE::P64;
           P64[Hp] = _scHAG::P64;
           R5 = Hp - 63;
           R4 = n_rcHqf_closure+1;
           R3 = lvl46_rcHqo_closure+2;
           R2 = lvl86_rcHr6_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHBZ_info" {
     sat_scHBZ_info:
         const sat_scHBZ_entry;
         const 8;
         const 18446744069414584328;
         const 4294967301;
         const ucLgy_srtd;
 },
 section ""relreadonly" . ucLgz_srtd" {
     ucLgz_srtd:
         const ScI2G_srt+104;
         const 46;
         const 70364449210745;
 },
 sat_scHC2_entry() //  [R1, R2]
         { []
         }
     {offset
       ccLe4: // global
           _scHAG::P64 = R2;
           _scHC2::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto ccLe5; else goto ccLe6;
       ccLe6: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto ccLe8; else goto ccLe7;
       ccLe8: // global
           HpAlloc = 72;
           goto ccLe5;
       ccLe5: // global
           R2 = _scHAG::P64;
           R1 = _scHC2::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLe7: // global
           _scHAq::P64 = P64[_scHC2::P64 + 7];
           _scHAu::P64 = P64[_scHC2::P64 + 15];
           _scHAw::P64 = P64[_scHC2::P64 + 23];
           _scHAy::P64 = P64[_scHC2::P64 + 31];
           _scHAA::P64 = P64[_scHC2::P64 + 39];
           _scHAC::P64 = P64[_scHC2::P64 + 47];
           _scHAE::P64 = P64[_scHC2::P64 + 55];
           I64[Hp - 64] = sat_scHBZ_info;
           P64[Hp - 56] = _scHAq::P64;
           P64[Hp - 48] = _scHAu::P64;
           P64[Hp - 40] = _scHAw::P64;
           P64[Hp - 32] = _scHAy::P64;
           P64[Hp - 24] = _scHAA::P64;
           P64[Hp - 16] = _scHAC::P64;
           P64[Hp - 8] = _scHAE::P64;
           P64[Hp] = _scHAG::P64;
           I64[Sp - 8] = block_ccLe1_info;
           R3 = Hp - 63;
           R2 = lvl40_rcHqi_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHC2_info" {
     sat_scHC2_info:
         const sat_scHC2_entry;
         const 7;
         const 18446744069414584328;
         const 4294967301;
         const ucLgz_srtd;
 },
 _ccLe1() //  [R1]
         { []
         }
     {offset
       ccLe1: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccLeb; else goto ccLea;
       ccLeb: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccLea: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccLe1_info" {
     block_ccLe1_info:
         const _ccLe1;
         const 0;
         const 30;
 },
 section ""relreadonly" . ucLgA_srtd" {
     ucLgA_srtd:
         const ScI2G_srt+104;
         const 47;
         const 140733193388409;
 },
 sat_scHC3_entry() //  [R1, R2]
         { []
         }
     {offset
       ccLec: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto ccLeg; else goto ccLef;
       ccLeg: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLef: // global
           _scHAq::P64 = P64[R1 + 7];
           _scHAu::P64 = P64[R1 + 15];
           _scHAw::P64 = P64[R1 + 23];
           _scHAy::P64 = P64[R1 + 31];
           _scHAA::P64 = P64[R1 + 39];
           _scHAC::P64 = P64[R1 + 47];
           _scHAE::P64 = P64[R1 + 55];
           I64[Hp - 56] = sat_scHC2_info;
           P64[Hp - 48] = _scHAq::P64;
           P64[Hp - 40] = _scHAu::P64;
           P64[Hp - 32] = _scHAw::P64;
           P64[Hp - 24] = _scHAy::P64;
           P64[Hp - 16] = _scHAA::P64;
           P64[Hp - 8] = _scHAC::P64;
           P64[Hp] = _scHAE::P64;
           R5 = Hp - 55;
           R4 = n_rcHqf_closure+1;
           R3 = lvl46_rcHqo_closure+2;
           R2 = lvl84_rcHr4_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHC3_info" {
     sat_scHC3_info:
         const sat_scHC3_entry;
         const 7;
         const 18446744069414584328;
         const 4294967301;
         const ucLgA_srtd;
 },
 section ""relreadonly" . ucLgB_srtd" {
     ucLgB_srtd:
         const ScI2G_srt+104;
         const 47;
         const 140733193388409;
 },
 sat_scHC6_entry() //  [R1, R2]
         { []
         }
     {offset
       ccLek: // global
           _scHAE::P64 = R2;
           _scHC6::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto ccLel; else goto ccLem;
       ccLem: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto ccLeo; else goto ccLen;
       ccLeo: // global
           HpAlloc = 64;
           goto ccLel;
       ccLel: // global
           R2 = _scHAE::P64;
           R1 = _scHC6::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLen: // global
           _scHAq::P64 = P64[_scHC6::P64 + 7];
           _scHAu::P64 = P64[_scHC6::P64 + 15];
           _scHAw::P64 = P64[_scHC6::P64 + 23];
           _scHAy::P64 = P64[_scHC6::P64 + 31];
           _scHAA::P64 = P64[_scHC6::P64 + 39];
           _scHAC::P64 = P64[_scHC6::P64 + 47];
           I64[Hp - 56] = sat_scHC3_info;
           P64[Hp - 48] = _scHAq::P64;
           P64[Hp - 40] = _scHAu::P64;
           P64[Hp - 32] = _scHAw::P64;
           P64[Hp - 24] = _scHAy::P64;
           P64[Hp - 16] = _scHAA::P64;
           P64[Hp - 8] = _scHAC::P64;
           P64[Hp] = _scHAE::P64;
           I64[Sp - 8] = block_ccLeh_info;
           R3 = Hp - 55;
           R2 = lvl40_rcHqi_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHC6_info" {
     sat_scHC6_info:
         const sat_scHC6_entry;
         const 6;
         const 18446744069414584328;
         const 4294967301;
         const ucLgB_srtd;
 },
 _ccLeh() //  [R1]
         { []
         }
     {offset
       ccLeh: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccLer; else goto ccLeq;
       ccLer: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccLeq: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccLeh_info" {
     block_ccLeh_info:
         const _ccLeh;
         const 0;
         const 30;
 },
 section ""relreadonly" . ucLgC_srtd" {
     ucLgC_srtd:
         const ScI2G_srt+104;
         const 48;
         const 281470681743737;
 },
 sat_scHC7_entry() //  [R1, R2]
         { []
         }
     {offset
       ccLes: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto ccLew; else goto ccLev;
       ccLew: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLev: // global
           _scHAq::P64 = P64[R1 + 7];
           _scHAu::P64 = P64[R1 + 15];
           _scHAw::P64 = P64[R1 + 23];
           _scHAy::P64 = P64[R1 + 31];
           _scHAA::P64 = P64[R1 + 39];
           _scHAC::P64 = P64[R1 + 47];
           I64[Hp - 48] = sat_scHC6_info;
           P64[Hp - 40] = _scHAq::P64;
           P64[Hp - 32] = _scHAu::P64;
           P64[Hp - 24] = _scHAw::P64;
           P64[Hp - 16] = _scHAy::P64;
           P64[Hp - 8] = _scHAA::P64;
           P64[Hp] = _scHAC::P64;
           R5 = Hp - 47;
           R4 = n_rcHqf_closure+1;
           R3 = lvl46_rcHqo_closure+2;
           R2 = lvl82_rcHr2_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHC7_info" {
     sat_scHC7_info:
         const sat_scHC7_entry;
         const 6;
         const 18446744069414584328;
         const 4294967301;
         const ucLgC_srtd;
 },
 section ""relreadonly" . ucLgD_srtd" {
     ucLgD_srtd:
         const ScI2G_srt+104;
         const 48;
         const 281470681743737;
 },
 sat_scHCa_entry() //  [R1, R2]
         { []
         }
     {offset
       ccLeA: // global
           _scHAC::P64 = R2;
           _scHCa::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto ccLeB; else goto ccLeC;
       ccLeC: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto ccLeE; else goto ccLeD;
       ccLeE: // global
           HpAlloc = 56;
           goto ccLeB;
       ccLeB: // global
           R2 = _scHAC::P64;
           R1 = _scHCa::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLeD: // global
           _scHAq::P64 = P64[_scHCa::P64 + 7];
           _scHAu::P64 = P64[_scHCa::P64 + 15];
           _scHAw::P64 = P64[_scHCa::P64 + 23];
           _scHAy::P64 = P64[_scHCa::P64 + 31];
           _scHAA::P64 = P64[_scHCa::P64 + 39];
           I64[Hp - 48] = sat_scHC7_info;
           P64[Hp - 40] = _scHAq::P64;
           P64[Hp - 32] = _scHAu::P64;
           P64[Hp - 24] = _scHAw::P64;
           P64[Hp - 16] = _scHAy::P64;
           P64[Hp - 8] = _scHAA::P64;
           P64[Hp] = _scHAC::P64;
           I64[Sp - 8] = block_ccLex_info;
           R3 = Hp - 47;
           R2 = lvl40_rcHqi_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHCa_info" {
     sat_scHCa_info:
         const sat_scHCa_entry;
         const 5;
         const 18446744069414584328;
         const 4294967301;
         const ucLgD_srtd;
 },
 _ccLex() //  [R1]
         { []
         }
     {offset
       ccLex: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccLeH; else goto ccLeG;
       ccLeH: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccLeG: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccLex_info" {
     block_ccLex_info:
         const _ccLex;
         const 0;
         const 30;
 },
 section ""relreadonly" . ucLgE_srtd" {
     ucLgE_srtd:
         const ScI2G_srt+104;
         const 49;
         const 562945658454393;
 },
 sat_scHCb_entry() //  [R1, R2]
         { []
         }
     {offset
       ccLeI: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccLeM; else goto ccLeL;
       ccLeM: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLeL: // global
           _scHAq::P64 = P64[R1 + 7];
           _scHAu::P64 = P64[R1 + 15];
           _scHAw::P64 = P64[R1 + 23];
           _scHAy::P64 = P64[R1 + 31];
           _scHAA::P64 = P64[R1 + 39];
           I64[Hp - 40] = sat_scHCa_info;
           P64[Hp - 32] = _scHAq::P64;
           P64[Hp - 24] = _scHAu::P64;
           P64[Hp - 16] = _scHAw::P64;
           P64[Hp - 8] = _scHAy::P64;
           P64[Hp] = _scHAA::P64;
           R5 = Hp - 39;
           R4 = n_rcHqf_closure+1;
           R3 = lvl46_rcHqo_closure+2;
           R2 = lvl80_rcHr0_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHCb_info" {
     sat_scHCb_info:
         const sat_scHCb_entry;
         const 5;
         const 18446744069414584328;
         const 4294967301;
         const ucLgE_srtd;
 },
 section ""relreadonly" . ucLgF_srtd" {
     ucLgF_srtd:
         const ScI2G_srt+104;
         const 49;
         const 562945658454393;
 },
 sat_scHCe_entry() //  [R1, R2]
         { []
         }
     {offset
       ccLeQ: // global
           _scHAA::P64 = R2;
           _scHCe::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto ccLeR; else goto ccLeS;
       ccLeS: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccLeU; else goto ccLeT;
       ccLeU: // global
           HpAlloc = 48;
           goto ccLeR;
       ccLeR: // global
           R2 = _scHAA::P64;
           R1 = _scHCe::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLeT: // global
           _scHAq::P64 = P64[_scHCe::P64 + 7];
           _scHAu::P64 = P64[_scHCe::P64 + 15];
           _scHAw::P64 = P64[_scHCe::P64 + 23];
           _scHAy::P64 = P64[_scHCe::P64 + 31];
           I64[Hp - 40] = sat_scHCb_info;
           P64[Hp - 32] = _scHAq::P64;
           P64[Hp - 24] = _scHAu::P64;
           P64[Hp - 16] = _scHAw::P64;
           P64[Hp - 8] = _scHAy::P64;
           P64[Hp] = _scHAA::P64;
           I64[Sp - 8] = block_ccLeN_info;
           R3 = Hp - 39;
           R2 = lvl40_rcHqi_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHCe_info" {
     sat_scHCe_info:
         const sat_scHCe_entry;
         const 4;
         const 18446744069414584328;
         const 4294967301;
         const ucLgF_srtd;
 },
 _ccLeN() //  [R1]
         { []
         }
     {offset
       ccLeN: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccLeX; else goto ccLeW;
       ccLeX: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccLeW: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccLeN_info" {
     block_ccLeN_info:
         const _ccLeN;
         const 0;
         const 30;
 },
 section ""relreadonly" . ucLgG_srtd" {
     ucLgG_srtd:
         const ScI2G_srt+104;
         const 50;
         const 1125895611875705;
 },
 sat_scHCf_entry() //  [R1, R2]
         { []
         }
     {offset
       ccLeY: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccLf2; else goto ccLf1;
       ccLf2: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLf1: // global
           _scHAq::P64 = P64[R1 + 7];
           _scHAu::P64 = P64[R1 + 15];
           _scHAw::P64 = P64[R1 + 23];
           _scHAy::P64 = P64[R1 + 31];
           I64[Hp - 32] = sat_scHCe_info;
           P64[Hp - 24] = _scHAq::P64;
           P64[Hp - 16] = _scHAu::P64;
           P64[Hp - 8] = _scHAw::P64;
           P64[Hp] = _scHAy::P64;
           R5 = Hp - 31;
           R4 = n_rcHqf_closure+1;
           R3 = lvl46_rcHqo_closure+2;
           R2 = lvl78_rcHqY_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHCf_info" {
     sat_scHCf_info:
         const sat_scHCf_entry;
         const 4;
         const 18446744069414584328;
         const 4294967301;
         const ucLgG_srtd;
 },
 section ""relreadonly" . ucLgH_srtd" {
     ucLgH_srtd:
         const ScI2G_srt+104;
         const 50;
         const 1125895611875705;
 },
 sat_scHCi_entry() //  [R1, R2]
         { []
         }
     {offset
       ccLf6: // global
           _scHAy::P64 = R2;
           _scHCi::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto ccLf7; else goto ccLf8;
       ccLf8: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccLfa; else goto ccLf9;
       ccLfa: // global
           HpAlloc = 40;
           goto ccLf7;
       ccLf7: // global
           R2 = _scHAy::P64;
           R1 = _scHCi::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLf9: // global
           _scHAq::P64 = P64[_scHCi::P64 + 7];
           _scHAu::P64 = P64[_scHCi::P64 + 15];
           _scHAw::P64 = P64[_scHCi::P64 + 23];
           I64[Hp - 32] = sat_scHCf_info;
           P64[Hp - 24] = _scHAq::P64;
           P64[Hp - 16] = _scHAu::P64;
           P64[Hp - 8] = _scHAw::P64;
           P64[Hp] = _scHAy::P64;
           I64[Sp - 8] = block_ccLf3_info;
           R3 = Hp - 31;
           R2 = lvl40_rcHqi_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHCi_info" {
     sat_scHCi_info:
         const sat_scHCi_entry;
         const 3;
         const 18446744069414584328;
         const 4294967301;
         const ucLgH_srtd;
 },
 _ccLf3() //  [R1]
         { []
         }
     {offset
       ccLf3: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccLfd; else goto ccLfc;
       ccLfd: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccLfc: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccLf3_info" {
     block_ccLf3_info:
         const _ccLf3;
         const 0;
         const 30;
 },
 section ""relreadonly" . ucLgI_srtd" {
     ucLgI_srtd:
         const ScI2G_srt+104;
         const 51;
         const 2251795518718329;
 },
 sat_scHCj_entry() //  [R1, R2]
         { []
         }
     {offset
       ccLfe: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccLfi; else goto ccLfh;
       ccLfi: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLfh: // global
           _scHAq::P64 = P64[R1 + 7];
           _scHAu::P64 = P64[R1 + 15];
           _scHAw::P64 = P64[R1 + 23];
           I64[Hp - 24] = sat_scHCi_info;
           P64[Hp - 16] = _scHAq::P64;
           P64[Hp - 8] = _scHAu::P64;
           P64[Hp] = _scHAw::P64;
           R5 = Hp - 23;
           R4 = n_rcHqf_closure+1;
           R3 = lvl46_rcHqo_closure+2;
           R2 = lvl76_rcHqW_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHCj_info" {
     sat_scHCj_info:
         const sat_scHCj_entry;
         const 3;
         const 18446744069414584328;
         const 4294967301;
         const ucLgI_srtd;
 },
 section ""relreadonly" . ucLgJ_srtd" {
     ucLgJ_srtd:
         const ScI2G_srt+104;
         const 51;
         const 2251795518718329;
 },
 sat_scHCm_entry() //  [R1, R2]
         { []
         }
     {offset
       ccLfm: // global
           _scHAw::P64 = R2;
           _scHCm::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto ccLfn; else goto ccLfo;
       ccLfo: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccLfq; else goto ccLfp;
       ccLfq: // global
           HpAlloc = 32;
           goto ccLfn;
       ccLfn: // global
           R2 = _scHAw::P64;
           R1 = _scHCm::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLfp: // global
           _scHAq::P64 = P64[_scHCm::P64 + 7];
           _scHAu::P64 = P64[_scHCm::P64 + 15];
           I64[Hp - 24] = sat_scHCj_info;
           P64[Hp - 16] = _scHAq::P64;
           P64[Hp - 8] = _scHAu::P64;
           P64[Hp] = _scHAw::P64;
           I64[Sp - 8] = block_ccLfj_info;
           R3 = Hp - 23;
           R2 = lvl40_rcHqi_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHCm_info" {
     sat_scHCm_info:
         const sat_scHCm_entry;
         const 2;
         const 18446744069414584331;
         const 4294967301;
         const ucLgJ_srtd;
 },
 _ccLfj() //  [R1]
         { []
         }
     {offset
       ccLfj: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccLft; else goto ccLfs;
       ccLft: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccLfs: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccLfj_info" {
     block_ccLfj_info:
         const _ccLfj;
         const 0;
         const 30;
 },
 section ""relreadonly" . ucLgK_srtd" {
     ucLgK_srtd:
         const ScI2G_srt+80;
         const 55;
         const 36028762659228617;
 },
 sat_scHCn_entry() //  [R1, R2]
         { []
         }
     {offset
       ccLfu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccLfy; else goto ccLfx;
       ccLfy: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLfx: // global
           _scHAq::P64 = P64[R1 + 7];
           _scHAu::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_scHCm_info;
           P64[Hp - 8] = _scHAq::P64;
           P64[Hp] = _scHAu::P64;
           R5 = Hp - 15;
           R4 = n_rcHqf_closure+1;
           R3 = ds2_rcHqe_closure+2;
           R2 = lvl74_rcHqU_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHCn_info" {
     sat_scHCn_info:
         const sat_scHCn_entry;
         const 2;
         const 18446744069414584331;
         const 4294967301;
         const ucLgK_srtd;
 },
 section ""relreadonly" . ucLgL_srtd" {
     ucLgL_srtd:
         const ScI2G_srt+80;
         const 55;
         const 36028762659228617;
 },
 sat_scHCq_entry() //  [R1, R2]
         { []
         }
     {offset
       ccLfC: // global
           _scHAu::P64 = R2;
           _scHCq::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto ccLfD; else goto ccLfE;
       ccLfE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccLfG; else goto ccLfF;
       ccLfG: // global
           HpAlloc = 24;
           goto ccLfD;
       ccLfD: // global
           R2 = _scHAu::P64;
           R1 = _scHCq::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLfF: // global
           _scHAq::P64 = P64[_scHCq::P64 + 7];
           I64[Hp - 16] = sat_scHCn_info;
           P64[Hp - 8] = _scHAq::P64;
           P64[Hp] = _scHAu::P64;
           I64[Sp - 8] = block_ccLfz_info;
           R3 = Hp - 15;
           R2 = lvl40_rcHqi_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHCq_info" {
     sat_scHCq_info:
         const sat_scHCq_entry;
         const 1;
         const 18446744069414584329;
         const 4294967301;
         const ucLgL_srtd;
 },
 _ccLfz() //  [R1]
         { []
         }
     {offset
       ccLfz: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccLfJ; else goto ccLfI;
       ccLfJ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccLfI: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccLfz_info" {
     block_ccLfz_info:
         const _ccLfz;
         const 0;
         const 30;
 },
 section ""relreadonly" . ucLgM_srtd" {
     ucLgM_srtd:
         const ScI2G_srt+80;
         const 56;
         const 72057559678192585;
 },
 sat_scHCr_entry() //  [R1, R2]
         { []
         }
     {offset
       ccLfK: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccLfO; else goto ccLfN;
       ccLfO: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLfN: // global
           _scHAq::P64 = P64[R1 + 7];
           I64[Hp - 8] = sat_scHCq_info;
           P64[Hp] = _scHAq::P64;
           R5 = Hp - 7;
           R4 = n_rcHqf_closure+1;
           R3 = ds2_rcHqe_closure+2;
           R2 = ds4_rcHqS_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHCr_info" {
     sat_scHCr_info:
         const sat_scHCr_entry;
         const 1;
         const 18446744069414584329;
         const 4294967301;
         const ucLgM_srtd;
 },
 section ""relreadonly" . ucLgN_srtd" {
     ucLgN_srtd:
         const ScI2G_srt+80;
         const 56;
         const 72057559711747017;
 },
 sat_scHCu_entry() //  [R1, R2]
         { []
         }
     {offset
       ccLfS: // global
           _scHAs::P64 = R2;
           _scHCu::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto ccLfT; else goto ccLfU;
       ccLfU: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccLfW; else goto ccLfV;
       ccLfW: // global
           HpAlloc = 16;
           goto ccLfT;
       ccLfT: // global
           R2 = _scHAs::P64;
           R1 = _scHCu::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLfV: // global
           _scHAq::P64 = P64[_scHCu::P64 + 7];
           I64[Hp - 8] = sat_scHCr_info;
           P64[Hp] = _scHAq::P64;
           I64[Sp - 8] = block_ccLfP_info;
           R3 = Hp - 7;
           R2 = lexeme4_rcHqa_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scHCu_info" {
     sat_scHCu_info:
         const sat_scHCu_entry;
         const 1;
         const 18446744069414584329;
         const 4294967301;
         const ucLgN_srtd;
 },
 _ccLfP() //  [R1]
         { []
         }
     {offset
       ccLfP: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccLfZ; else goto ccLfY;
       ccLfZ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccLfY: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccLfP_info" {
     block_ccLfP_info:
         const _ccLfP;
         const 0;
         const 30;
 },
 section ""relreadonly" . ucLgO_srtd" {
     ucLgO_srtd:
         const ScI2G_srt+80;
         const 58;
         const 288230341825530825;
 },
 GHC.Stats.$w$creadPrec1_entry() //  [R2, R3]
         { []
         }
     {offset
       ccLg3: // global
           _scHAq::P64 = R3;
           _scHAp::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto ccLg4; else goto ccLg5;
       ccLg5: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccLg7; else goto ccLg6;
       ccLg7: // global
           HpAlloc = 16;
           goto ccLg4;
       ccLg4: // global
           R3 = _scHAq::P64;
           R2 = _scHAp::I64;
           R1 = GHC.Stats.$w$creadPrec1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccLg6: // global
           if (%MO_S_Gt_W64(_scHAp::I64, 11)) goto ccLg1; else goto ccLg2;
       ccLg1: // global
           Hp = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccLg2: // global
           I64[Hp - 8] = sat_scHCu_info;
           P64[Hp] = _scHAq::P64;
           I64[Sp - 8] = block_ccLg8_info;
           R3 = Hp - 7;
           R2 = lexeme6_rcHqQ_closure+4;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.$w$creadPrec1_info" {
     GHC.Stats.$w$creadPrec1_info:
         const GHC.Stats.$w$creadPrec1_entry;
         const 0;
         const 18446744069414584334;
         const 8589934605;
         const ucLgO_srtd;
 },
 _ccLg8() //  [R1]
         { []
         }
     {offset
       ccLg8: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccLgd; else goto ccLgc;
       ccLgd: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccLgc: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccLg8_info" {
     block_ccLg8_info:
         const _ccLg8;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.054134768 UTC

[section ""data" . GHC.Stats.$fReadRTSStats2_closure" {
     GHC.Stats.$fReadRTSStats2_closure:
         const GHC.Stats.$fReadRTSStats2_info;
         const 0;
 },
 GHC.Stats.$fReadRTSStats2_entry() //  [R2, R3]
         { []
         }
     {offset
       ccLlq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccLlr; else goto ccLls;
       ccLlr: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Stats.$fReadRTSStats2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccLls: // global
           I64[Sp - 16] = block_ccLln_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucLlw; else goto ccLlo;
       ucLlw: // global
           call _ccLln(R1) args: 0, res: 0, upd: 0;
       ccLlo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.$fReadRTSStats2_info" {
     GHC.Stats.$fReadRTSStats2_info:
         const GHC.Stats.$fReadRTSStats2_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const ScI2G_srt+528;
 },
 _ccLln() //  [R1]
         { []
         }
     {offset
       ccLln: // global
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Stats.$w$creadPrec1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccLln_info" {
     block_ccLln_info:
         const _ccLln;
         const 1;
         const 4294967326;
         const ScI2G_srt+528;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.060363277 UTC

[section ""data" . GHC.Stats.$fReadRTSStats1_closure" {
     GHC.Stats.$fReadRTSStats1_closure:
         const GHC.Stats.$fReadRTSStats1_info;
         const 0;
 },
 GHC.Stats.$fReadRTSStats1_entry() //  [R2, R3]
         { []
         }
     {offset
       ccLlK: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Stats.$fReadRTSStats2_closure+2;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.$fReadRTSStats1_info" {
     GHC.Stats.$fReadRTSStats1_info:
         const GHC.Stats.$fReadRTSStats1_entry;
         const 0;
         const 2305843013508661262;
         const 8589934607;
         const ScI2G_srt+312;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.064625083 UTC

[section ""data" . GHC.Stats.$fReadRTSStats_$creadsPrec_closure" {
     GHC.Stats.$fReadRTSStats_$creadsPrec_closure:
         const GHC.Stats.$fReadRTSStats_$creadsPrec_info;
         const 0;
 },
 sat_scHCC_entry() //  [R1]
         { []
         }
     {offset
       ccLlZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccLm0; else goto ccLm1;
       ccLm0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccLm1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = P64[R1 + 16];
           R2 = GHC.Stats.$fReadRTSStats2_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list3_entry(R4, R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHCC_info" {
     sat_scHCC_info:
         const sat_scHCC_entry;
         const 1;
         const 2305843013508661264;
         const ScI2G_srt+312;
 },
 GHC.Stats.$fReadRTSStats_$creadsPrec_entry() //  [R2]
         { []
         }
     {offset
       ccLm2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccLm6; else goto ccLm5;
       ccLm6: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Stats.$fReadRTSStats_$creadsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLm5: // global
           I64[Hp - 16] = sat_scHCC_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.$fReadRTSStats_$creadsPrec_info" {
     GHC.Stats.$fReadRTSStats_$creadsPrec_info:
         const GHC.Stats.$fReadRTSStats_$creadsPrec_entry;
         const 0;
         const 6917529031936049166;
         const 4294967301;
         const ScI2G_srt+312;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.070488406 UTC

[section ""data" . GHC.Stats.$fReadRTSStats_$creadListPrec_closure" {
     GHC.Stats.$fReadRTSStats_$creadListPrec_closure:
         const GHC.Stats.$fReadRTSStats_$creadListPrec_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Stats.$fReadRTSStats_$creadListPrec_entry() //  [R1]
         { []
         }
     {offset
       ccLml: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccLmm; else goto ccLmn;
       ccLmm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccLmn: // global
           (_ccLmi::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccLmi::I64 == 0) goto ccLmk; else goto ccLmj;
       ccLmk: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccLmj: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccLmi::I64;
           R2 = GHC.Stats.$fReadRTSStats1_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Stats.$fReadRTSStats_$creadListPrec_info" {
     GHC.Stats.$fReadRTSStats_$creadListPrec_info:
         const GHC.Stats.$fReadRTSStats_$creadListPrec_entry;
         const 0;
         const 2305843013508661269;
         const ScI2G_srt+328;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.075154226 UTC

[section ""data" . GHC.Stats.$fReadRTSStats3_closure" {
     GHC.Stats.$fReadRTSStats3_closure:
         const GHC.Stats.$fReadRTSStats3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Stats.$fReadRTSStats3_entry() //  [R1]
         { []
         }
     {offset
       ccLmB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccLmC; else goto ccLmD;
       ccLmC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccLmD: // global
           (_ccLmy::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccLmy::I64 == 0) goto ccLmA; else goto ccLmz;
       ccLmA: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccLmz: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccLmy::I64;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = GHC.Read.$fRead()7_closure;
           R1 = GHC.Stats.$fReadRTSStats_$creadListPrec_closure;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Stats.$fReadRTSStats3_info" {
     GHC.Stats.$fReadRTSStats3_info:
         const GHC.Stats.$fReadRTSStats3_entry;
         const 0;
         const 4294967317;
         const ScI2G_srt+568;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.07923001 UTC

[section ""data" . GHC.Stats.$fReadRTSStats_$creadList_closure" {
     GHC.Stats.$fReadRTSStats_$creadList_closure:
         const GHC.Stats.$fReadRTSStats_$creadList_info;
         const 0;
 },
 GHC.Stats.$fReadRTSStats_$creadList_entry() //  [R2]
         { []
         }
     {offset
       ccLmP: // global
           R3 = R2;
           R2 = GHC.Stats.$fReadRTSStats3_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.$fReadRTSStats_$creadList_info" {
     GHC.Stats.$fReadRTSStats_$creadList_info:
         const GHC.Stats.$fReadRTSStats_$creadList_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const ScI2G_srt+576;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.082571277 UTC

[section ""data" . GHC.Stats.$fReadRTSStats_closure" {
     GHC.Stats.$fReadRTSStats_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.Stats.$fReadRTSStats_$creadsPrec_closure+1;
         const GHC.Stats.$fReadRTSStats_$creadList_closure+1;
         const GHC.Stats.$fReadRTSStats1_closure+2;
         const GHC.Stats.$fReadRTSStats_$creadListPrec_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.085229954 UTC

[section ""data" . GHC.Stats.gcdetails_elapsed_ns_closure" {
     GHC.Stats.gcdetails_elapsed_ns_closure:
         const GHC.Stats.gcdetails_elapsed_ns_info;
 },
 GHC.Stats.gcdetails_elapsed_ns_entry() //  [R2]
         { []
         }
     {offset
       ccLn4: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccLn5; else goto ccLn6;
       ccLn5: // global
           R2 = R2;
           R1 = GHC.Stats.gcdetails_elapsed_ns_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLn6: // global
           I64[Sp - 8] = block_ccLn1_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucLna; else goto ccLn2;
       ucLna: // global
           call _ccLn1(R1) args: 0, res: 0, upd: 0;
       ccLn2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.gcdetails_elapsed_ns_info" {
     GHC.Stats.gcdetails_elapsed_ns_info:
         const GHC.Stats.gcdetails_elapsed_ns_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccLn1() //  [R1]
         { []
         }
     {offset
       ccLn1: // global
           R1 = P64[R1 + 111] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccLn1_info" {
     block_ccLn1_info:
         const _ccLn1;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.091756233 UTC

[section ""data" . GHC.Stats.gcdetails_cpu_ns_closure" {
     GHC.Stats.gcdetails_cpu_ns_closure:
         const GHC.Stats.gcdetails_cpu_ns_info;
 },
 GHC.Stats.gcdetails_cpu_ns_entry() //  [R2]
         { []
         }
     {offset
       ccLnt: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccLnu; else goto ccLnv;
       ccLnu: // global
           R2 = R2;
           R1 = GHC.Stats.gcdetails_cpu_ns_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLnv: // global
           I64[Sp - 8] = block_ccLnq_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucLnz; else goto ccLnr;
       ucLnz: // global
           call _ccLnq(R1) args: 0, res: 0, upd: 0;
       ccLnr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.gcdetails_cpu_ns_info" {
     GHC.Stats.gcdetails_cpu_ns_info:
         const GHC.Stats.gcdetails_cpu_ns_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccLnq() //  [R1]
         { []
         }
     {offset
       ccLnq: // global
           R1 = P64[R1 + 103] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccLnq_info" {
     block_ccLnq_info:
         const _ccLnq;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.097916366 UTC

[section ""data" . GHC.Stats.gcdetails_sync_elapsed_ns_closure" {
     GHC.Stats.gcdetails_sync_elapsed_ns_closure:
         const GHC.Stats.gcdetails_sync_elapsed_ns_info;
 },
 GHC.Stats.gcdetails_sync_elapsed_ns_entry() //  [R2]
         { []
         }
     {offset
       ccLnS: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccLnT; else goto ccLnU;
       ccLnT: // global
           R2 = R2;
           R1 = GHC.Stats.gcdetails_sync_elapsed_ns_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLnU: // global
           I64[Sp - 8] = block_ccLnP_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucLnY; else goto ccLnQ;
       ucLnY: // global
           call _ccLnP(R1) args: 0, res: 0, upd: 0;
       ccLnQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.gcdetails_sync_elapsed_ns_info" {
     GHC.Stats.gcdetails_sync_elapsed_ns_info:
         const GHC.Stats.gcdetails_sync_elapsed_ns_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccLnP() //  [R1]
         { []
         }
     {offset
       ccLnP: // global
           R1 = P64[R1 + 95] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccLnP_info" {
     block_ccLnP_info:
         const _ccLnP;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.103527192 UTC

[section ""data" . GHC.Stats.gcdetails_par_balanced_copied_bytes_closure" {
     GHC.Stats.gcdetails_par_balanced_copied_bytes_closure:
         const GHC.Stats.gcdetails_par_balanced_copied_bytes_info;
 },
 GHC.Stats.gcdetails_par_balanced_copied_bytes_entry() //  [R2]
         { []
         }
     {offset
       ccLoh: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccLoi; else goto ccLoj;
       ccLoi: // global
           R2 = R2;
           R1 = GHC.Stats.gcdetails_par_balanced_copied_bytes_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLoj: // global
           I64[Sp - 8] = block_ccLoe_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucLon; else goto ccLof;
       ucLon: // global
           call _ccLoe(R1) args: 0, res: 0, upd: 0;
       ccLof: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.gcdetails_par_balanced_copied_bytes_info" {
     GHC.Stats.gcdetails_par_balanced_copied_bytes_info:
         const GHC.Stats.gcdetails_par_balanced_copied_bytes_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccLoe() //  [R1]
         { []
         }
     {offset
       ccLoe: // global
           R1 = P64[R1 + 87] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccLoe_info" {
     block_ccLoe_info:
         const _ccLoe;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.109140903 UTC

[section ""data" . GHC.Stats.gcdetails_par_max_copied_bytes_closure" {
     GHC.Stats.gcdetails_par_max_copied_bytes_closure:
         const GHC.Stats.gcdetails_par_max_copied_bytes_info;
 },
 GHC.Stats.gcdetails_par_max_copied_bytes_entry() //  [R2]
         { []
         }
     {offset
       ccLoG: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccLoH; else goto ccLoI;
       ccLoH: // global
           R2 = R2;
           R1 = GHC.Stats.gcdetails_par_max_copied_bytes_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLoI: // global
           I64[Sp - 8] = block_ccLoD_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucLoM; else goto ccLoE;
       ucLoM: // global
           call _ccLoD(R1) args: 0, res: 0, upd: 0;
       ccLoE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.gcdetails_par_max_copied_bytes_info" {
     GHC.Stats.gcdetails_par_max_copied_bytes_info:
         const GHC.Stats.gcdetails_par_max_copied_bytes_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccLoD() //  [R1]
         { []
         }
     {offset
       ccLoD: // global
           R1 = P64[R1 + 79] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccLoD_info" {
     block_ccLoD_info:
         const _ccLoD;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.115223599 UTC

[section ""data" . GHC.Stats.gcdetails_copied_bytes_closure" {
     GHC.Stats.gcdetails_copied_bytes_closure:
         const GHC.Stats.gcdetails_copied_bytes_info;
 },
 GHC.Stats.gcdetails_copied_bytes_entry() //  [R2]
         { []
         }
     {offset
       ccLp5: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccLp6; else goto ccLp7;
       ccLp6: // global
           R2 = R2;
           R1 = GHC.Stats.gcdetails_copied_bytes_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLp7: // global
           I64[Sp - 8] = block_ccLp2_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucLpb; else goto ccLp3;
       ucLpb: // global
           call _ccLp2(R1) args: 0, res: 0, upd: 0;
       ccLp3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.gcdetails_copied_bytes_info" {
     GHC.Stats.gcdetails_copied_bytes_info:
         const GHC.Stats.gcdetails_copied_bytes_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccLp2() //  [R1]
         { []
         }
     {offset
       ccLp2: // global
           R1 = P64[R1 + 71] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccLp2_info" {
     block_ccLp2_info:
         const _ccLp2;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.121430042 UTC

[section ""data" . GHC.Stats.gcdetails_mem_in_use_bytes_closure" {
     GHC.Stats.gcdetails_mem_in_use_bytes_closure:
         const GHC.Stats.gcdetails_mem_in_use_bytes_info;
 },
 GHC.Stats.gcdetails_mem_in_use_bytes_entry() //  [R2]
         { []
         }
     {offset
       ccLpu: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccLpv; else goto ccLpw;
       ccLpv: // global
           R2 = R2;
           R1 = GHC.Stats.gcdetails_mem_in_use_bytes_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLpw: // global
           I64[Sp - 8] = block_ccLpr_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucLpA; else goto ccLps;
       ucLpA: // global
           call _ccLpr(R1) args: 0, res: 0, upd: 0;
       ccLps: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.gcdetails_mem_in_use_bytes_info" {
     GHC.Stats.gcdetails_mem_in_use_bytes_info:
         const GHC.Stats.gcdetails_mem_in_use_bytes_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccLpr() //  [R1]
         { []
         }
     {offset
       ccLpr: // global
           R1 = P64[R1 + 63] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccLpr_info" {
     block_ccLpr_info:
         const _ccLpr;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.127122845 UTC

[section ""data" . GHC.Stats.gcdetails_slop_bytes_closure" {
     GHC.Stats.gcdetails_slop_bytes_closure:
         const GHC.Stats.gcdetails_slop_bytes_info;
 },
 GHC.Stats.gcdetails_slop_bytes_entry() //  [R2]
         { []
         }
     {offset
       ccLpT: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccLpU; else goto ccLpV;
       ccLpU: // global
           R2 = R2;
           R1 = GHC.Stats.gcdetails_slop_bytes_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLpV: // global
           I64[Sp - 8] = block_ccLpQ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucLpZ; else goto ccLpR;
       ucLpZ: // global
           call _ccLpQ(R1) args: 0, res: 0, upd: 0;
       ccLpR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.gcdetails_slop_bytes_info" {
     GHC.Stats.gcdetails_slop_bytes_info:
         const GHC.Stats.gcdetails_slop_bytes_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccLpQ() //  [R1]
         { []
         }
     {offset
       ccLpQ: // global
           R1 = P64[R1 + 55] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccLpQ_info" {
     block_ccLpQ_info:
         const _ccLpQ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.132550486 UTC

[section ""data" . GHC.Stats.gcdetails_compact_bytes_closure" {
     GHC.Stats.gcdetails_compact_bytes_closure:
         const GHC.Stats.gcdetails_compact_bytes_info;
 },
 GHC.Stats.gcdetails_compact_bytes_entry() //  [R2]
         { []
         }
     {offset
       ccLqi: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccLqj; else goto ccLqk;
       ccLqj: // global
           R2 = R2;
           R1 = GHC.Stats.gcdetails_compact_bytes_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLqk: // global
           I64[Sp - 8] = block_ccLqf_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucLqo; else goto ccLqg;
       ucLqo: // global
           call _ccLqf(R1) args: 0, res: 0, upd: 0;
       ccLqg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.gcdetails_compact_bytes_info" {
     GHC.Stats.gcdetails_compact_bytes_info:
         const GHC.Stats.gcdetails_compact_bytes_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccLqf() //  [R1]
         { []
         }
     {offset
       ccLqf: // global
           R1 = P64[R1 + 47] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccLqf_info" {
     block_ccLqf_info:
         const _ccLqf;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.138405221 UTC

[section ""data" . GHC.Stats.gcdetails_large_objects_bytes_closure" {
     GHC.Stats.gcdetails_large_objects_bytes_closure:
         const GHC.Stats.gcdetails_large_objects_bytes_info;
 },
 GHC.Stats.gcdetails_large_objects_bytes_entry() //  [R2]
         { []
         }
     {offset
       ccLqH: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccLqI; else goto ccLqJ;
       ccLqI: // global
           R2 = R2;
           R1 = GHC.Stats.gcdetails_large_objects_bytes_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLqJ: // global
           I64[Sp - 8] = block_ccLqE_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucLqN; else goto ccLqF;
       ucLqN: // global
           call _ccLqE(R1) args: 0, res: 0, upd: 0;
       ccLqF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.gcdetails_large_objects_bytes_info" {
     GHC.Stats.gcdetails_large_objects_bytes_info:
         const GHC.Stats.gcdetails_large_objects_bytes_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccLqE() //  [R1]
         { []
         }
     {offset
       ccLqE: // global
           R1 = P64[R1 + 39] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccLqE_info" {
     block_ccLqE_info:
         const _ccLqE;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.144004377 UTC

[section ""data" . GHC.Stats.gcdetails_live_bytes_closure" {
     GHC.Stats.gcdetails_live_bytes_closure:
         const GHC.Stats.gcdetails_live_bytes_info;
 },
 GHC.Stats.gcdetails_live_bytes_entry() //  [R2]
         { []
         }
     {offset
       ccLr6: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccLr7; else goto ccLr8;
       ccLr7: // global
           R2 = R2;
           R1 = GHC.Stats.gcdetails_live_bytes_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLr8: // global
           I64[Sp - 8] = block_ccLr3_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucLrc; else goto ccLr4;
       ucLrc: // global
           call _ccLr3(R1) args: 0, res: 0, upd: 0;
       ccLr4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.gcdetails_live_bytes_info" {
     GHC.Stats.gcdetails_live_bytes_info:
         const GHC.Stats.gcdetails_live_bytes_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccLr3() //  [R1]
         { []
         }
     {offset
       ccLr3: // global
           R1 = P64[R1 + 31] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccLr3_info" {
     block_ccLr3_info:
         const _ccLr3;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.150294791 UTC

[section ""data" . GHC.Stats.gcdetails_allocated_bytes_closure" {
     GHC.Stats.gcdetails_allocated_bytes_closure:
         const GHC.Stats.gcdetails_allocated_bytes_info;
 },
 GHC.Stats.gcdetails_allocated_bytes_entry() //  [R2]
         { []
         }
     {offset
       ccLrv: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccLrw; else goto ccLrx;
       ccLrw: // global
           R2 = R2;
           R1 = GHC.Stats.gcdetails_allocated_bytes_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLrx: // global
           I64[Sp - 8] = block_ccLrs_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucLrB; else goto ccLrt;
       ucLrB: // global
           call _ccLrs(R1) args: 0, res: 0, upd: 0;
       ccLrt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.gcdetails_allocated_bytes_info" {
     GHC.Stats.gcdetails_allocated_bytes_info:
         const GHC.Stats.gcdetails_allocated_bytes_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccLrs() //  [R1]
         { []
         }
     {offset
       ccLrs: // global
           R1 = P64[R1 + 23] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccLrs_info" {
     block_ccLrs_info:
         const _ccLrs;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.15598912 UTC

[section ""data" . GHC.Stats.gcdetails_threads_closure" {
     GHC.Stats.gcdetails_threads_closure:
         const GHC.Stats.gcdetails_threads_info;
 },
 GHC.Stats.gcdetails_threads_entry() //  [R2]
         { []
         }
     {offset
       ccLrU: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccLrV; else goto ccLrW;
       ccLrV: // global
           R2 = R2;
           R1 = GHC.Stats.gcdetails_threads_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLrW: // global
           I64[Sp - 8] = block_ccLrR_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucLs0; else goto ccLrS;
       ucLs0: // global
           call _ccLrR(R1) args: 0, res: 0, upd: 0;
       ccLrS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.gcdetails_threads_info" {
     GHC.Stats.gcdetails_threads_info:
         const GHC.Stats.gcdetails_threads_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccLrR() //  [R1]
         { []
         }
     {offset
       ccLrR: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccLrR_info" {
     block_ccLrR_info:
         const _ccLrR;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.161370615 UTC

[section ""data" . GHC.Stats.gcdetails_gen_closure" {
     GHC.Stats.gcdetails_gen_closure:
         const GHC.Stats.gcdetails_gen_info;
 },
 GHC.Stats.gcdetails_gen_entry() //  [R2]
         { []
         }
     {offset
       ccLsj: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccLsk; else goto ccLsl;
       ccLsk: // global
           R2 = R2;
           R1 = GHC.Stats.gcdetails_gen_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLsl: // global
           I64[Sp - 8] = block_ccLsg_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucLsp; else goto ccLsh;
       ucLsp: // global
           call _ccLsg(R1) args: 0, res: 0, upd: 0;
       ccLsh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.gcdetails_gen_info" {
     GHC.Stats.gcdetails_gen_info:
         const GHC.Stats.gcdetails_gen_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccLsg() //  [R1]
         { []
         }
     {offset
       ccLsg: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccLsg_info" {
     block_ccLsg_info:
         const _ccLsg;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.16681157 UTC

[section ""data" . GHC.Stats.gc_closure" {
     GHC.Stats.gc_closure:
         const GHC.Stats.gc_info;
 },
 GHC.Stats.gc_entry() //  [R2]
         { []
         }
     {offset
       ccLsI: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccLsJ; else goto ccLsK;
       ccLsJ: // global
           R2 = R2;
           R1 = GHC.Stats.gc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLsK: // global
           I64[Sp - 8] = block_ccLsF_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucLsO; else goto ccLsG;
       ucLsO: // global
           call _ccLsF(R1) args: 0, res: 0, upd: 0;
       ccLsG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.gc_info" {
     GHC.Stats.gc_info:
         const GHC.Stats.gc_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccLsF() //  [R1]
         { []
         }
     {offset
       ccLsF: // global
           R1 = P64[R1 + 159] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccLsF_info" {
     block_ccLsF_info:
         const _ccLsF;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.172651304 UTC

[section ""data" . GHC.Stats.elapsed_ns_closure" {
     GHC.Stats.elapsed_ns_closure:
         const GHC.Stats.elapsed_ns_info;
 },
 GHC.Stats.elapsed_ns_entry() //  [R2]
         { []
         }
     {offset
       ccLt7: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccLt8; else goto ccLt9;
       ccLt8: // global
           R2 = R2;
           R1 = GHC.Stats.elapsed_ns_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLt9: // global
           I64[Sp - 8] = block_ccLt4_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucLtd; else goto ccLt5;
       ucLtd: // global
           call _ccLt4(R1) args: 0, res: 0, upd: 0;
       ccLt5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.elapsed_ns_info" {
     GHC.Stats.elapsed_ns_info:
         const GHC.Stats.elapsed_ns_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccLt4() //  [R1]
         { []
         }
     {offset
       ccLt4: // global
           R1 = P64[R1 + 151] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccLt4_info" {
     block_ccLt4_info:
         const _ccLt4;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.1788869 UTC

[section ""data" . GHC.Stats.cpu_ns_closure" {
     GHC.Stats.cpu_ns_closure:
         const GHC.Stats.cpu_ns_info;
 },
 GHC.Stats.cpu_ns_entry() //  [R2]
         { []
         }
     {offset
       ccLtw: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccLtx; else goto ccLty;
       ccLtx: // global
           R2 = R2;
           R1 = GHC.Stats.cpu_ns_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLty: // global
           I64[Sp - 8] = block_ccLtt_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucLtC; else goto ccLtu;
       ucLtC: // global
           call _ccLtt(R1) args: 0, res: 0, upd: 0;
       ccLtu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.cpu_ns_info" {
     GHC.Stats.cpu_ns_info:
         const GHC.Stats.cpu_ns_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccLtt() //  [R1]
         { []
         }
     {offset
       ccLtt: // global
           R1 = P64[R1 + 143] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccLtt_info" {
     block_ccLtt_info:
         const _ccLtt;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.184211353 UTC

[section ""data" . GHC.Stats.gc_elapsed_ns_closure" {
     GHC.Stats.gc_elapsed_ns_closure:
         const GHC.Stats.gc_elapsed_ns_info;
 },
 GHC.Stats.gc_elapsed_ns_entry() //  [R2]
         { []
         }
     {offset
       ccLtV: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccLtW; else goto ccLtX;
       ccLtW: // global
           R2 = R2;
           R1 = GHC.Stats.gc_elapsed_ns_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLtX: // global
           I64[Sp - 8] = block_ccLtS_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucLu1; else goto ccLtT;
       ucLu1: // global
           call _ccLtS(R1) args: 0, res: 0, upd: 0;
       ccLtT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.gc_elapsed_ns_info" {
     GHC.Stats.gc_elapsed_ns_info:
         const GHC.Stats.gc_elapsed_ns_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccLtS() //  [R1]
         { []
         }
     {offset
       ccLtS: // global
           R1 = P64[R1 + 135] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccLtS_info" {
     block_ccLtS_info:
         const _ccLtS;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.190006771 UTC

[section ""data" . GHC.Stats.gc_cpu_ns_closure" {
     GHC.Stats.gc_cpu_ns_closure:
         const GHC.Stats.gc_cpu_ns_info;
 },
 GHC.Stats.gc_cpu_ns_entry() //  [R2]
         { []
         }
     {offset
       ccLuk: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccLul; else goto ccLum;
       ccLul: // global
           R2 = R2;
           R1 = GHC.Stats.gc_cpu_ns_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLum: // global
           I64[Sp - 8] = block_ccLuh_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucLuq; else goto ccLui;
       ucLuq: // global
           call _ccLuh(R1) args: 0, res: 0, upd: 0;
       ccLui: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.gc_cpu_ns_info" {
     GHC.Stats.gc_cpu_ns_info:
         const GHC.Stats.gc_cpu_ns_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccLuh() //  [R1]
         { []
         }
     {offset
       ccLuh: // global
           R1 = P64[R1 + 127] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccLuh_info" {
     block_ccLuh_info:
         const _ccLuh;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.195373758 UTC

[section ""data" . GHC.Stats.mutator_elapsed_ns_closure" {
     GHC.Stats.mutator_elapsed_ns_closure:
         const GHC.Stats.mutator_elapsed_ns_info;
 },
 GHC.Stats.mutator_elapsed_ns_entry() //  [R2]
         { []
         }
     {offset
       ccLuJ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccLuK; else goto ccLuL;
       ccLuK: // global
           R2 = R2;
           R1 = GHC.Stats.mutator_elapsed_ns_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLuL: // global
           I64[Sp - 8] = block_ccLuG_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucLuP; else goto ccLuH;
       ucLuP: // global
           call _ccLuG(R1) args: 0, res: 0, upd: 0;
       ccLuH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.mutator_elapsed_ns_info" {
     GHC.Stats.mutator_elapsed_ns_info:
         const GHC.Stats.mutator_elapsed_ns_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccLuG() //  [R1]
         { []
         }
     {offset
       ccLuG: // global
           R1 = P64[R1 + 119] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccLuG_info" {
     block_ccLuG_info:
         const _ccLuG;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.200906571 UTC

[section ""data" . GHC.Stats.mutator_cpu_ns_closure" {
     GHC.Stats.mutator_cpu_ns_closure:
         const GHC.Stats.mutator_cpu_ns_info;
 },
 GHC.Stats.mutator_cpu_ns_entry() //  [R2]
         { []
         }
     {offset
       ccLv8: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccLv9; else goto ccLva;
       ccLv9: // global
           R2 = R2;
           R1 = GHC.Stats.mutator_cpu_ns_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLva: // global
           I64[Sp - 8] = block_ccLv5_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucLve; else goto ccLv6;
       ucLve: // global
           call _ccLv5(R1) args: 0, res: 0, upd: 0;
       ccLv6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.mutator_cpu_ns_info" {
     GHC.Stats.mutator_cpu_ns_info:
         const GHC.Stats.mutator_cpu_ns_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccLv5() //  [R1]
         { []
         }
     {offset
       ccLv5: // global
           R1 = P64[R1 + 111] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccLv5_info" {
     block_ccLv5_info:
         const _ccLv5;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.207709793 UTC

[section ""data" . GHC.Stats.cumulative_par_balanced_copied_bytes_closure" {
     GHC.Stats.cumulative_par_balanced_copied_bytes_closure:
         const GHC.Stats.cumulative_par_balanced_copied_bytes_info;
 },
 GHC.Stats.cumulative_par_balanced_copied_bytes_entry() //  [R2]
         { []
         }
     {offset
       ccLvx: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccLvy; else goto ccLvz;
       ccLvy: // global
           R2 = R2;
           R1 = GHC.Stats.cumulative_par_balanced_copied_bytes_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLvz: // global
           I64[Sp - 8] = block_ccLvu_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucLvD; else goto ccLvv;
       ucLvD: // global
           call _ccLvu(R1) args: 0, res: 0, upd: 0;
       ccLvv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.cumulative_par_balanced_copied_bytes_info" {
     GHC.Stats.cumulative_par_balanced_copied_bytes_info:
         const GHC.Stats.cumulative_par_balanced_copied_bytes_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccLvu() //  [R1]
         { []
         }
     {offset
       ccLvu: // global
           R1 = P64[R1 + 103] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccLvu_info" {
     block_ccLvu_info:
         const _ccLvu;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.213178127 UTC

[section ""data" . GHC.Stats.cumulative_par_max_copied_bytes_closure" {
     GHC.Stats.cumulative_par_max_copied_bytes_closure:
         const GHC.Stats.cumulative_par_max_copied_bytes_info;
 },
 GHC.Stats.cumulative_par_max_copied_bytes_entry() //  [R2]
         { []
         }
     {offset
       ccLvW: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccLvX; else goto ccLvY;
       ccLvX: // global
           R2 = R2;
           R1 = GHC.Stats.cumulative_par_max_copied_bytes_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLvY: // global
           I64[Sp - 8] = block_ccLvT_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucLw2; else goto ccLvU;
       ucLw2: // global
           call _ccLvT(R1) args: 0, res: 0, upd: 0;
       ccLvU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.cumulative_par_max_copied_bytes_info" {
     GHC.Stats.cumulative_par_max_copied_bytes_info:
         const GHC.Stats.cumulative_par_max_copied_bytes_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccLvT() //  [R1]
         { []
         }
     {offset
       ccLvT: // global
           R1 = P64[R1 + 95] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccLvT_info" {
     block_ccLvT_info:
         const _ccLvT;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.21903858 UTC

[section ""data" . GHC.Stats.par_copied_bytes_closure" {
     GHC.Stats.par_copied_bytes_closure:
         const GHC.Stats.par_copied_bytes_info;
 },
 GHC.Stats.par_copied_bytes_entry() //  [R2]
         { []
         }
     {offset
       ccLwl: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccLwm; else goto ccLwn;
       ccLwm: // global
           R2 = R2;
           R1 = GHC.Stats.par_copied_bytes_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLwn: // global
           I64[Sp - 8] = block_ccLwi_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucLwr; else goto ccLwj;
       ucLwr: // global
           call _ccLwi(R1) args: 0, res: 0, upd: 0;
       ccLwj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.par_copied_bytes_info" {
     GHC.Stats.par_copied_bytes_info:
         const GHC.Stats.par_copied_bytes_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccLwi() //  [R1]
         { []
         }
     {offset
       ccLwi: // global
           R1 = P64[R1 + 87] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccLwi_info" {
     block_ccLwi_info:
         const _ccLwi;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.22446777 UTC

[section ""data" . GHC.Stats.copied_bytes_closure" {
     GHC.Stats.copied_bytes_closure:
         const GHC.Stats.copied_bytes_info;
 },
 GHC.Stats.copied_bytes_entry() //  [R2]
         { []
         }
     {offset
       ccLwK: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccLwL; else goto ccLwM;
       ccLwL: // global
           R2 = R2;
           R1 = GHC.Stats.copied_bytes_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLwM: // global
           I64[Sp - 8] = block_ccLwH_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucLwQ; else goto ccLwI;
       ucLwQ: // global
           call _ccLwH(R1) args: 0, res: 0, upd: 0;
       ccLwI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.copied_bytes_info" {
     GHC.Stats.copied_bytes_info:
         const GHC.Stats.copied_bytes_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccLwH() //  [R1]
         { []
         }
     {offset
       ccLwH: // global
           R1 = P64[R1 + 79] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccLwH_info" {
     block_ccLwH_info:
         const _ccLwH;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.230097506 UTC

[section ""data" . GHC.Stats.cumulative_live_bytes_closure" {
     GHC.Stats.cumulative_live_bytes_closure:
         const GHC.Stats.cumulative_live_bytes_info;
 },
 GHC.Stats.cumulative_live_bytes_entry() //  [R2]
         { []
         }
     {offset
       ccLx9: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccLxa; else goto ccLxb;
       ccLxa: // global
           R2 = R2;
           R1 = GHC.Stats.cumulative_live_bytes_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLxb: // global
           I64[Sp - 8] = block_ccLx6_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucLxf; else goto ccLx7;
       ucLxf: // global
           call _ccLx6(R1) args: 0, res: 0, upd: 0;
       ccLx7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.cumulative_live_bytes_info" {
     GHC.Stats.cumulative_live_bytes_info:
         const GHC.Stats.cumulative_live_bytes_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccLx6() //  [R1]
         { []
         }
     {offset
       ccLx6: // global
           R1 = P64[R1 + 71] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccLx6_info" {
     block_ccLx6_info:
         const _ccLx6;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.236651947 UTC

[section ""data" . GHC.Stats.max_mem_in_use_bytes_closure" {
     GHC.Stats.max_mem_in_use_bytes_closure:
         const GHC.Stats.max_mem_in_use_bytes_info;
 },
 GHC.Stats.max_mem_in_use_bytes_entry() //  [R2]
         { []
         }
     {offset
       ccLxy: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccLxz; else goto ccLxA;
       ccLxz: // global
           R2 = R2;
           R1 = GHC.Stats.max_mem_in_use_bytes_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLxA: // global
           I64[Sp - 8] = block_ccLxv_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucLxE; else goto ccLxw;
       ucLxE: // global
           call _ccLxv(R1) args: 0, res: 0, upd: 0;
       ccLxw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.max_mem_in_use_bytes_info" {
     GHC.Stats.max_mem_in_use_bytes_info:
         const GHC.Stats.max_mem_in_use_bytes_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccLxv() //  [R1]
         { []
         }
     {offset
       ccLxv: // global
           R1 = P64[R1 + 63] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccLxv_info" {
     block_ccLxv_info:
         const _ccLxv;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.242396374 UTC

[section ""data" . GHC.Stats.max_slop_bytes_closure" {
     GHC.Stats.max_slop_bytes_closure:
         const GHC.Stats.max_slop_bytes_info;
 },
 GHC.Stats.max_slop_bytes_entry() //  [R2]
         { []
         }
     {offset
       ccLxX: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccLxY; else goto ccLxZ;
       ccLxY: // global
           R2 = R2;
           R1 = GHC.Stats.max_slop_bytes_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLxZ: // global
           I64[Sp - 8] = block_ccLxU_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucLy3; else goto ccLxV;
       ucLy3: // global
           call _ccLxU(R1) args: 0, res: 0, upd: 0;
       ccLxV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.max_slop_bytes_info" {
     GHC.Stats.max_slop_bytes_info:
         const GHC.Stats.max_slop_bytes_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccLxU() //  [R1]
         { []
         }
     {offset
       ccLxU: // global
           R1 = P64[R1 + 55] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccLxU_info" {
     block_ccLxU_info:
         const _ccLxU;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.247900195 UTC

[section ""data" . GHC.Stats.max_compact_bytes_closure" {
     GHC.Stats.max_compact_bytes_closure:
         const GHC.Stats.max_compact_bytes_info;
 },
 GHC.Stats.max_compact_bytes_entry() //  [R2]
         { []
         }
     {offset
       ccLym: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccLyn; else goto ccLyo;
       ccLyn: // global
           R2 = R2;
           R1 = GHC.Stats.max_compact_bytes_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLyo: // global
           I64[Sp - 8] = block_ccLyj_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucLys; else goto ccLyk;
       ucLys: // global
           call _ccLyj(R1) args: 0, res: 0, upd: 0;
       ccLyk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.max_compact_bytes_info" {
     GHC.Stats.max_compact_bytes_info:
         const GHC.Stats.max_compact_bytes_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccLyj() //  [R1]
         { []
         }
     {offset
       ccLyj: // global
           R1 = P64[R1 + 47] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccLyj_info" {
     block_ccLyj_info:
         const _ccLyj;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.25358167 UTC

[section ""data" . GHC.Stats.max_large_objects_bytes_closure" {
     GHC.Stats.max_large_objects_bytes_closure:
         const GHC.Stats.max_large_objects_bytes_info;
 },
 GHC.Stats.max_large_objects_bytes_entry() //  [R2]
         { []
         }
     {offset
       ccLyL: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccLyM; else goto ccLyN;
       ccLyM: // global
           R2 = R2;
           R1 = GHC.Stats.max_large_objects_bytes_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLyN: // global
           I64[Sp - 8] = block_ccLyI_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucLyR; else goto ccLyJ;
       ucLyR: // global
           call _ccLyI(R1) args: 0, res: 0, upd: 0;
       ccLyJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.max_large_objects_bytes_info" {
     GHC.Stats.max_large_objects_bytes_info:
         const GHC.Stats.max_large_objects_bytes_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccLyI() //  [R1]
         { []
         }
     {offset
       ccLyI: // global
           R1 = P64[R1 + 39] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccLyI_info" {
     block_ccLyI_info:
         const _ccLyI;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.259235084 UTC

[section ""data" . GHC.Stats.max_live_bytes_closure" {
     GHC.Stats.max_live_bytes_closure:
         const GHC.Stats.max_live_bytes_info;
 },
 GHC.Stats.max_live_bytes_entry() //  [R2]
         { []
         }
     {offset
       ccLza: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccLzb; else goto ccLzc;
       ccLzb: // global
           R2 = R2;
           R1 = GHC.Stats.max_live_bytes_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLzc: // global
           I64[Sp - 8] = block_ccLz7_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucLzg; else goto ccLz8;
       ucLzg: // global
           call _ccLz7(R1) args: 0, res: 0, upd: 0;
       ccLz8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.max_live_bytes_info" {
     GHC.Stats.max_live_bytes_info:
         const GHC.Stats.max_live_bytes_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccLz7() //  [R1]
         { []
         }
     {offset
       ccLz7: // global
           R1 = P64[R1 + 31] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccLz7_info" {
     block_ccLz7_info:
         const _ccLz7;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.265901346 UTC

[section ""data" . GHC.Stats.allocated_bytes_closure" {
     GHC.Stats.allocated_bytes_closure:
         const GHC.Stats.allocated_bytes_info;
 },
 GHC.Stats.allocated_bytes_entry() //  [R2]
         { []
         }
     {offset
       ccLzz: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccLzA; else goto ccLzB;
       ccLzA: // global
           R2 = R2;
           R1 = GHC.Stats.allocated_bytes_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLzB: // global
           I64[Sp - 8] = block_ccLzw_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucLzF; else goto ccLzx;
       ucLzF: // global
           call _ccLzw(R1) args: 0, res: 0, upd: 0;
       ccLzx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.allocated_bytes_info" {
     GHC.Stats.allocated_bytes_info:
         const GHC.Stats.allocated_bytes_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccLzw() //  [R1]
         { []
         }
     {offset
       ccLzw: // global
           R1 = P64[R1 + 23] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccLzw_info" {
     block_ccLzw_info:
         const _ccLzw;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.271421698 UTC

[section ""data" . GHC.Stats.major_gcs_closure" {
     GHC.Stats.major_gcs_closure:
         const GHC.Stats.major_gcs_info;
 },
 GHC.Stats.major_gcs_entry() //  [R2]
         { []
         }
     {offset
       ccLzY: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccLzZ; else goto ccLA0;
       ccLzZ: // global
           R2 = R2;
           R1 = GHC.Stats.major_gcs_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLA0: // global
           I64[Sp - 8] = block_ccLzV_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucLA4; else goto ccLzW;
       ucLA4: // global
           call _ccLzV(R1) args: 0, res: 0, upd: 0;
       ccLzW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.major_gcs_info" {
     GHC.Stats.major_gcs_info:
         const GHC.Stats.major_gcs_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccLzV() //  [R1]
         { []
         }
     {offset
       ccLzV: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccLzV_info" {
     block_ccLzV_info:
         const _ccLzV;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.276948432 UTC

[section ""data" . GHC.Stats.gcs_closure" {
     GHC.Stats.gcs_closure:
         const GHC.Stats.gcs_info;
 },
 GHC.Stats.gcs_entry() //  [R2]
         { []
         }
     {offset
       ccLAn: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccLAo; else goto ccLAp;
       ccLAo: // global
           R2 = R2;
           R1 = GHC.Stats.gcs_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccLAp: // global
           I64[Sp - 8] = block_ccLAk_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucLAt; else goto ccLAl;
       ucLAt: // global
           call _ccLAk(R1) args: 0, res: 0, upd: 0;
       ccLAl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.gcs_info" {
     GHC.Stats.gcs_info:
         const GHC.Stats.gcs_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccLAk() //  [R1]
         { []
         }
     {offset
       ccLAk: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccLAk_info" {
     block_ccLAk_info:
         const _ccLAk;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.282052275 UTC

[section ""cstring" . GHC.Stats.$trModule4_bytes" {
     GHC.Stats.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.283777772 UTC

[section ""data" . GHC.Stats.$trModule3_closure" {
     GHC.Stats.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Stats.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.285580872 UTC

[section ""cstring" . GHC.Stats.$trModule2_bytes" {
     GHC.Stats.$trModule2_bytes:
         I8[] [71,72,67,46,83,116,97,116,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.287451253 UTC

[section ""data" . GHC.Stats.$trModule1_closure" {
     GHC.Stats.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Stats.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.289704788 UTC

[section ""data" . GHC.Stats.$trModule_closure" {
     GHC.Stats.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Stats.$trModule3_closure+1;
         const GHC.Stats.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.292141251 UTC

[section ""data" . $krep_rcHrw_closure" {
     $krep_rcHrw_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Int.$tcInt64_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.294052369 UTC

[section ""data" . $krep1_rcHrx_closure" {
     $krep1_rcHrx_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Word.$tcWord64_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.295791606 UTC

[section ""data" . $krep2_rcHry_closure" {
     $krep2_rcHry_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Word.$tcWord32_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.297636723 UTC

[section ""data" . GHC.Stats.$tcGCDetails1_closure" {
     GHC.Stats.$tcGCDetails1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Stats.$tcGCDetails2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.299401448 UTC

[section ""data" . GHC.Stats.$tcGCDetails_closure" {
     GHC.Stats.$tcGCDetails_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Stats.$trModule_closure+1;
         const GHC.Stats.$tcGCDetails1_closure+1;
         const GHC.Types.krep$*_closure;
         const 1853976479346877039;
         const 12435514499433877542;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.301227066 UTC

[section ""data" . $krep3_rcHrz_closure" {
     $krep3_rcHrz_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Stats.$tcGCDetails_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.303394405 UTC

[section ""data" . $krep4_rcHrA_closure" {
     $krep4_rcHrA_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rcHrw_closure+1;
         const $krep3_rcHrz_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.305368485 UTC

[section ""data" . $krep5_rcHrB_closure" {
     $krep5_rcHrB_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rcHrw_closure+1;
         const $krep4_rcHrA_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.307272134 UTC

[section ""data" . $krep6_rcHrC_closure" {
     $krep6_rcHrC_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rcHrw_closure+1;
         const $krep5_rcHrB_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.309035604 UTC

[section ""data" . $krep7_rcHrD_closure" {
     $krep7_rcHrD_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rcHrx_closure+1;
         const $krep6_rcHrC_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.310904606 UTC

[section ""data" . $krep8_rcHrE_closure" {
     $krep8_rcHrE_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rcHrx_closure+1;
         const $krep7_rcHrD_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.312681489 UTC

[section ""data" . $krep9_rcHrF_closure" {
     $krep9_rcHrF_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rcHrx_closure+1;
         const $krep8_rcHrE_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.314866061 UTC

[section ""data" . $krep10_rcHrG_closure" {
     $krep10_rcHrG_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rcHrx_closure+1;
         const $krep9_rcHrF_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.316786558 UTC

[section ""data" . $krep11_rcHrH_closure" {
     $krep11_rcHrH_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rcHrx_closure+1;
         const $krep10_rcHrG_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.319271868 UTC

[section ""data" . $krep12_rcHrI_closure" {
     $krep12_rcHrI_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rcHrx_closure+1;
         const $krep11_rcHrH_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.32103729 UTC

[section ""data" . $krep13_rcHrJ_closure" {
     $krep13_rcHrJ_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rcHrx_closure+1;
         const $krep12_rcHrI_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.322881115 UTC

[section ""data" . $krep14_rcHrK_closure" {
     $krep14_rcHrK_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rcHrx_closure+1;
         const $krep13_rcHrJ_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.324681034 UTC

[section ""data" . $krep15_rcHrL_closure" {
     $krep15_rcHrL_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rcHrx_closure+1;
         const $krep14_rcHrK_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.326663542 UTC

[section ""data" . $krep16_rcHrM_closure" {
     $krep16_rcHrM_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rcHry_closure+1;
         const $krep15_rcHrL_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.328430335 UTC

[section ""data" . GHC.Stats.$tc'GCDetails1_closure" {
     GHC.Stats.$tc'GCDetails1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rcHry_closure+1;
         const $krep16_rcHrM_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.330291194 UTC

[section ""cstring" . GHC.Stats.$tc'GCDetails3_bytes" {
     GHC.Stats.$tc'GCDetails3_bytes:
         I8[] [39,71,67,68,101,116,97,105,108,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.332072544 UTC

[section ""data" . GHC.Stats.$tc'GCDetails2_closure" {
     GHC.Stats.$tc'GCDetails2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Stats.$tc'GCDetails3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.333889252 UTC

[section ""data" . GHC.Stats.$tc'GCDetails_closure" {
     GHC.Stats.$tc'GCDetails_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Stats.$trModule_closure+1;
         const GHC.Stats.$tc'GCDetails2_closure+1;
         const GHC.Stats.$tc'GCDetails1_closure+4;
         const 5964953867232766897;
         const 8889994537819840032;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.335734819 UTC

[section ""data" . GHC.Stats.$tcRTSStats1_closure" {
     GHC.Stats.$tcRTSStats1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Stats.$tcRTSStats2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.337797206 UTC

[section ""data" . GHC.Stats.$tcRTSStats_closure" {
     GHC.Stats.$tcRTSStats_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Stats.$trModule_closure+1;
         const GHC.Stats.$tcRTSStats1_closure+1;
         const GHC.Types.krep$*_closure;
         const 1006825398788898151;
         const 9122067856566178937;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.339612831 UTC

[section ""data" . $krep17_rcHrN_closure" {
     $krep17_rcHrN_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Stats.$tcRTSStats_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.341550222 UTC

[section ""data" . $krep18_rcHrO_closure" {
     $krep18_rcHrO_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_rcHrz_closure+1;
         const $krep17_rcHrN_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.343475444 UTC

[section ""data" . $krep19_rcHrP_closure" {
     $krep19_rcHrP_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rcHrw_closure+1;
         const $krep18_rcHrO_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.345921599 UTC

[section ""data" . $krep20_rcHrQ_closure" {
     $krep20_rcHrQ_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rcHrw_closure+1;
         const $krep19_rcHrP_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.347670593 UTC

[section ""data" . $krep21_rcHrR_closure" {
     $krep21_rcHrR_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rcHrw_closure+1;
         const $krep20_rcHrQ_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.349847049 UTC

[section ""data" . $krep22_rcHrS_closure" {
     $krep22_rcHrS_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rcHrw_closure+1;
         const $krep21_rcHrR_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.351607887 UTC

[section ""data" . $krep23_rcHrT_closure" {
     $krep23_rcHrT_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rcHrw_closure+1;
         const $krep22_rcHrS_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.353474294 UTC

[section ""data" . $krep24_rcHrU_closure" {
     $krep24_rcHrU_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rcHrw_closure+1;
         const $krep23_rcHrT_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.355318181 UTC

[section ""data" . $krep25_rcHrV_closure" {
     $krep25_rcHrV_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rcHrx_closure+1;
         const $krep24_rcHrU_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.35720965 UTC

[section ""data" . $krep26_rcHrW_closure" {
     $krep26_rcHrW_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rcHrx_closure+1;
         const $krep25_rcHrV_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.359046655 UTC

[section ""data" . $krep27_rcHrX_closure" {
     $krep27_rcHrX_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rcHrx_closure+1;
         const $krep26_rcHrW_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.360915854 UTC

[section ""data" . $krep28_rcHrY_closure" {
     $krep28_rcHrY_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rcHrx_closure+1;
         const $krep27_rcHrX_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.362783383 UTC

[section ""data" . $krep29_rcHrZ_closure" {
     $krep29_rcHrZ_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rcHrx_closure+1;
         const $krep28_rcHrY_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.364579542 UTC

[section ""data" . $krep30_rcHs0_closure" {
     $krep30_rcHs0_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rcHrx_closure+1;
         const $krep29_rcHrZ_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.367027436 UTC

[section ""data" . $krep31_rcHs1_closure" {
     $krep31_rcHs1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rcHrx_closure+1;
         const $krep30_rcHs0_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.368959698 UTC

[section ""data" . $krep32_rcHs2_closure" {
     $krep32_rcHs2_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rcHrx_closure+1;
         const $krep31_rcHs1_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.371449844 UTC

[section ""data" . $krep33_rcHs3_closure" {
     $krep33_rcHs3_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rcHrx_closure+1;
         const $krep32_rcHs2_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.373209753 UTC

[section ""data" . $krep34_rcHs4_closure" {
     $krep34_rcHs4_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rcHrx_closure+1;
         const $krep33_rcHs3_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.375023086 UTC

[section ""data" . $krep35_rcHs5_closure" {
     $krep35_rcHs5_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rcHrx_closure+1;
         const $krep34_rcHs4_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.376768297 UTC

[section ""data" . $krep36_rcHs6_closure" {
     $krep36_rcHs6_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rcHry_closure+1;
         const $krep35_rcHs5_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.378941293 UTC

[section ""data" . GHC.Stats.$tc'RTSStats1_closure" {
     GHC.Stats.$tc'RTSStats1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rcHry_closure+1;
         const $krep36_rcHs6_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.380747186 UTC

[section ""cstring" . GHC.Stats.$tc'RTSStats3_bytes" {
     GHC.Stats.$tc'RTSStats3_bytes:
         I8[] [39,82,84,83,83,116,97,116,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.38258316 UTC

[section ""data" . GHC.Stats.$tc'RTSStats2_closure" {
     GHC.Stats.$tc'RTSStats2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Stats.$tc'RTSStats3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.384461203 UTC

[section ""data" . GHC.Stats.$tc'RTSStats_closure" {
     GHC.Stats.$tc'RTSStats_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Stats.$trModule_closure+1;
         const GHC.Stats.$tc'RTSStats2_closure+1;
         const GHC.Stats.$tc'RTSStats1_closure+4;
         const 10718900236833312508;
         const 16334729378492634062;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.388305427 UTC

[section ""data" . getRTSStatsEnabled1_rcHs7_closure" {
     getRTSStatsEnabled1_rcHs7_closure:
         const getRTSStatsEnabled1_rcHs7_info;
 },
 sat_scHNr_entry() //  [R1]
         { []
         }
     {offset
       ccLBM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccLBN; else goto ccLBO;
       ccLBN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccLBO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto ccLBL; else goto ccLBK;
       ccLBL: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ccLBK: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scHNr_info" {
     sat_scHNr_info:
         const sat_scHNr_entry;
         const 4294967296;
         const 17;
 },
 getRTSStatsEnabled1_rcHs7_entry() //  []
         { []
         }
     {offset
       ccLBP: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccLBQ; else goto ccLBR;
       ccLBQ: // global
           R1 = getRTSStatsEnabled1_rcHs7_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       ccLBR: // global
           I64[Sp - 8] = block_ccLBC_info;
           Sp = Sp - 8;
           _ucLBX::P64 = CurrentTSO;
           I64[I64[_ucLBX::P64 + 24] + 16] = Sp;
           _ucLBY::I64 = CurrentNursery;
           P64[_ucLBY::I64 + 8] = Hp + 8;
           I64[_ucLBX::P64 + 104] = I64[_ucLBX::P64 + 104] - ((Hp + 8) - I64[_ucLBY::I64]);
           (_ucLBV::I64) = call "ccall" arg hints:  [PtrHint,]  result hints:  [PtrHint] suspendThread(BaseReg, 0);
           (_scHNp::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] getRTSStatsEnabled();
           (_ucLBW::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [PtrHint] resumeThread(_ucLBV::I64);
           BaseReg = _ucLBW::I64;
           _ucLBZ::P64 = CurrentTSO;
           _ucLC0::P64 = I64[_ucLBZ::P64 + 24];
           Sp = I64[_ucLC0::P64 + 16];
           SpLim = _ucLC0::P64 + 192;
           HpAlloc = 0;
           _ucLC1::I64 = CurrentNursery;
           _ucLC2::I64 = I64[_ucLC1::I64 + 8];
           Hp = _ucLC2::I64 - 8;
           _ucLC3::I64 = I64[_ucLC1::I64];
           HpLim = _ucLC3::I64 + ((%MO_SS_Conv_W32_W64(I32[_ucLC1::I64 + 48]) << 12) - 1);
           I64[_ucLBZ::P64 + 104] = I64[_ucLBZ::P64 + 104] + (_ucLC2::I64 - _ucLC3::I64);
           R1 = _scHNp::I64;
           call (I64[I64[Sp]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . getRTSStatsEnabled1_rcHs7_info" {
     getRTSStatsEnabled1_rcHs7_info:
         const getRTSStatsEnabled1_rcHs7_entry;
         const 0;
         const 14;
         const 4294967299;
 },
 _ccLBC() //  [R1]
         { []
         }
     {offset
       ccLBC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccLBU; else goto ccLBT;
       ccLBU: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       ccLBT: // global
           I64[Hp - 16] = sat_scHNr_info;
           I64[Hp] = R1;
           R1 = Hp - 16;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccLBC_info" {
     block_ccLBC_info:
         const _ccLBC;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.396693732 UTC

[section ""data" . GHC.Stats.getRTSStatsEnabled_closure" {
     GHC.Stats.getRTSStatsEnabled_closure:
         const GHC.Stats.getRTSStatsEnabled_info;
 },
 GHC.Stats.getRTSStatsEnabled_entry() //  []
         { []
         }
     {offset
       ccLCD: // global
           call getRTSStatsEnabled1_rcHs7_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.getRTSStatsEnabled_info" {
     GHC.Stats.getRTSStatsEnabled_info:
         const GHC.Stats.getRTSStatsEnabled_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.400348791 UTC

[section ""cstring" . GHC.Stats.getRTSStats5_bytes" {
     GHC.Stats.getRTSStats5_bytes:
         I8[] [71,72,67,46,83,116,97,116,115,46,103,101,116,82,84,83,83,116,97,116,115,58,32,71,67,32,115,116,97,116,115,32,110,111,116,32,101,110,97,98,108,101,100,46,32,85,115,101,32,96,43,82,84,83,32,45,84,32,45,82,84,83,39,32,116,111,32,101,110,97,98,108,101,32,116,104,101,109,46]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.402760305 UTC

[section ""data" . GHC.Stats.getRTSStats4_closure" {
     GHC.Stats.getRTSStats4_closure:
         const GHC.Stats.getRTSStats4_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Stats.getRTSStats4_entry() //  [R1]
         { []
         }
     {offset
       ccLCR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccLCS; else goto ccLCT;
       ccLCS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccLCT: // global
           (_ccLCO::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccLCO::I64 == 0) goto ccLCQ; else goto ccLCP;
       ccLCQ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccLCP: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccLCO::I64;
           R2 = GHC.Stats.getRTSStats5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Stats.getRTSStats4_info" {
     GHC.Stats.getRTSStats4_info:
         const GHC.Stats.getRTSStats4_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.406545751 UTC

[section ""data" . GHC.Stats.getRTSStats3_closure" {
     GHC.Stats.getRTSStats3_closure:
         const GHC.IO.Exception.IOError_con_info;
         const GHC.Base.Nothing_closure+1;
         const GHC.IO.Exception.UnsupportedOperation_closure+1;
         const GHC.Types.[]_closure+1;
         const GHC.Stats.getRTSStats4_closure;
         const GHC.Base.Nothing_closure+1;
         const GHC.Base.Nothing_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.408971735 UTC

[section ""data" . GHC.Stats.getRTSStats2_closure" {
     GHC.Stats.getRTSStats2_closure:
         const GHC.Stats.getRTSStats2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Stats.getRTSStats2_entry() //  [R1]
         { []
         }
     {offset
       ccLD8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccLD9; else goto ccLDa;
       ccLD9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccLDa: // global
           (_ccLD5::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccLD5::I64 == 0) goto ccLD7; else goto ccLD6;
       ccLD7: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccLD6: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccLD5::I64;
           R2 = GHC.Stats.getRTSStats3_closure+1;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionIOException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Stats.getRTSStats2_info" {
     GHC.Stats.getRTSStats2_info:
         const GHC.Stats.getRTSStats2_entry;
         const 0;
         const 12884901909;
         const ScI2G_srt+584;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.418368414 UTC

[section ""data" . GHC.Stats.getRTSStats1_closure" {
     GHC.Stats.getRTSStats1_closure:
         const GHC.Stats.getRTSStats1_info;
         const 0;
 },
 GHC.Stats.getRTSStats1_entry() //  []
         { []
         }
     {offset
       ccLDt: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccLDu; else goto ccLDv;
       ccLDu: // global
           R1 = GHC.Stats.getRTSStats1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       ccLDv: // global
           I64[Sp - 8] = block_ccLDn_info;
           Sp = Sp - 8;
           _ucLFV::P64 = CurrentTSO;
           I64[I64[_ucLFV::P64 + 24] + 16] = Sp;
           _ucLFW::I64 = CurrentNursery;
           P64[_ucLFW::I64 + 8] = Hp + 8;
           I64[_ucLFV::P64 + 104] = I64[_ucLFV::P64 + 104] - ((Hp + 8) - I64[_ucLFW::I64]);
           (_ucLFT::I64) = call "ccall" arg hints:  [PtrHint,]  result hints:  [PtrHint] suspendThread(BaseReg, 0);
           (_scHNw::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] getRTSStatsEnabled();
           (_ucLFU::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [PtrHint] resumeThread(_ucLFT::I64);
           BaseReg = _ucLFU::I64;
           _ucLFX::P64 = CurrentTSO;
           _ucLFY::P64 = I64[_ucLFX::P64 + 24];
           Sp = I64[_ucLFY::P64 + 16];
           SpLim = _ucLFY::P64 + 192;
           HpAlloc = 0;
           _ucLFZ::I64 = CurrentNursery;
           _ucLG0::I64 = I64[_ucLFZ::I64 + 8];
           Hp = _ucLG0::I64 - 8;
           _ucLG1::I64 = I64[_ucLFZ::I64];
           HpLim = _ucLG1::I64 + ((%MO_SS_Conv_W32_W64(I32[_ucLFZ::I64 + 48]) << 12) - 1);
           I64[_ucLFX::P64 + 104] = I64[_ucLFX::P64 + 104] + (_ucLG0::I64 - _ucLG1::I64);
           R1 = _scHNw::I64;
           call (I64[I64[Sp]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.getRTSStats1_info" {
     GHC.Stats.getRTSStats1_info:
         const GHC.Stats.getRTSStats1_entry;
         const 0;
         const 12884901902;
         const 4294967299;
         const ScI2G_srt+600;
 },
 _ccLDn() //  [R1]
         { []
         }
     {offset
       ccLDn: // global
           if (R1 == 0) goto ccLDs; else goto ccLDr;
       ccLDs: // global
           R1 = GHC.Stats.getRTSStats2_closure;
           Sp = Sp + 8;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       ccLDr: // global
           I64[Sp] = block_ccLDy_info;
           R1 = 248;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccLDn_info" {
     block_ccLDn_info:
         const _ccLDn;
         const 0;
         const 4294967326;
         const ScI2G_srt+608;
 },
 _ccLDy() //  [R1]
         { []
         }
     {offset
       ccLDy: // global
           I64[Sp - 16] = block_ccLDF_info;
           _scHNE::I64 = R1 + 16;
           I64[Sp - 8] = _scHNE::I64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           _ucLG5::P64 = CurrentTSO;
           I64[I64[_ucLG5::P64 + 24] + 16] = Sp;
           _ucLG6::I64 = CurrentNursery;
           P64[_ucLG6::I64 + 8] = Hp + 8;
           I64[_ucLG5::P64 + 104] = I64[_ucLG5::P64 + 104] - ((Hp + 8) - I64[_ucLG6::I64]);
           (_ucLG3::I64) = call "ccall" arg hints:  [PtrHint,]  result hints:  [PtrHint] suspendThread(BaseReg, 0);
           call "ccall" arg hints:  [PtrHint]  result hints:  [] getRTSStats(_scHNE::I64);
           (_ucLG4::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [PtrHint] resumeThread(_ucLG3::I64);
           BaseReg = _ucLG4::I64;
           _ucLG7::P64 = CurrentTSO;
           _ucLG8::P64 = I64[_ucLG7::P64 + 24];
           Sp = I64[_ucLG8::P64 + 16];
           SpLim = _ucLG8::P64 + 192;
           HpAlloc = 0;
           _ucLG9::I64 = CurrentNursery;
           _ucLGa::I64 = I64[_ucLG9::I64 + 8];
           Hp = _ucLGa::I64 - 8;
           _ucLGb::I64 = I64[_ucLG9::I64];
           HpLim = _ucLGb::I64 + ((%MO_SS_Conv_W32_W64(I32[_ucLG9::I64 + 48]) << 12) - 1);
           I64[_ucLG7::P64 + 104] = I64[_ucLG7::P64 + 104] + (_ucLGa::I64 - _ucLGb::I64);
           call (I64[I64[Sp]])() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccLDy_info" {
     block_ccLDy_info:
         const _ccLDy;
         const 0;
         const 30;
 },
 _ccLDF() //  []
         { []
         }
     {offset
       ccLDF: // global
           Hp = Hp + 816;
           if (Hp > HpLim) (likely: False) goto ccLFS; else goto ccLFR;
       ccLFS: // global
           HpAlloc = 816;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       ccLFR: // global
           _scHNE::I64 = I64[Sp + 8];
           _scHNK::I64 = %MO_UU_Conv_W32_W64(I32[_scHNE::I64]);
           _scHNO::I64 = %MO_UU_Conv_W32_W64(I32[_scHNE::I64 + 4]);
           _scHNS::I64 = I64[_scHNE::I64 + 8];
           _scHNW::I64 = I64[_scHNE::I64 + 16];
           _scHO0::I64 = I64[_scHNE::I64 + 24];
           _scHO4::I64 = I64[_scHNE::I64 + 32];
           _scHO8::I64 = I64[_scHNE::I64 + 40];
           _scHOc::I64 = I64[_scHNE::I64 + 48];
           _scHOg::I64 = I64[_scHNE::I64 + 56];
           _scHOk::I64 = I64[_scHNE::I64 + 64];
           _scHOo::I64 = I64[_scHNE::I64 + 72];
           _scHOs::I64 = I64[_scHNE::I64 + 80];
           _scHOw::I64 = I64[_scHNE::I64 + 88];
           _scHOA::I64 = I64[_scHNE::I64 + 96];
           _scHOE::I64 = I64[_scHNE::I64 + 104];
           _scHOI::I64 = I64[_scHNE::I64 + 112];
           _scHOM::I64 = I64[_scHNE::I64 + 120];
           _scHOQ::I64 = I64[_scHNE::I64 + 128];
           _scHOU::I64 = I64[_scHNE::I64 + 136];
           _scHOV::I64 = _scHNE::I64 + 144;
           _scHOY::I64 = %MO_UU_Conv_W32_W64(I32[_scHOV::I64]);
           _scHP2::I64 = %MO_UU_Conv_W32_W64(I32[_scHOV::I64 + 4]);
           _scHP6::I64 = I64[_scHOV::I64 + 8];
           _scHPa::I64 = I64[_scHOV::I64 + 16];
           _scHPe::I64 = I64[_scHOV::I64 + 24];
           _scHPi::I64 = I64[_scHOV::I64 + 32];
           _scHPm::I64 = I64[_scHOV::I64 + 40];
           _scHPq::I64 = I64[_scHOV::I64 + 48];
           _scHPu::I64 = I64[_scHOV::I64 + 56];
           _scHPy::I64 = I64[_scHOV::I64 + 64];
           _scHPC::I64 = I64[_scHOV::I64 + 72];
           _scHPG::I64 = I64[_scHOV::I64 + 80];
           _scHPK::I64 = I64[_scHOV::I64 + 88];
           _scHPO::I64 = I64[_scHOV::I64 + 96];
           call MO_Touch(P64[Sp + 16]);
           I64[Hp - 808] = GHC.Int.I64#_con_info;
           I64[Hp - 800] = _scHPO::I64;
           I64[Hp - 792] = GHC.Int.I64#_con_info;
           I64[Hp - 784] = _scHPK::I64;
           I64[Hp - 776] = GHC.Int.I64#_con_info;
           I64[Hp - 768] = _scHPG::I64;
           I64[Hp - 760] = GHC.Word.W64#_con_info;
           I64[Hp - 752] = _scHPC::I64;
           I64[Hp - 744] = GHC.Word.W64#_con_info;
           I64[Hp - 736] = _scHPy::I64;
           I64[Hp - 728] = GHC.Word.W64#_con_info;
           I64[Hp - 720] = _scHPu::I64;
           I64[Hp - 712] = GHC.Word.W64#_con_info;
           I64[Hp - 704] = _scHPq::I64;
           I64[Hp - 696] = GHC.Word.W64#_con_info;
           I64[Hp - 688] = _scHPm::I64;
           I64[Hp - 680] = GHC.Word.W64#_con_info;
           I64[Hp - 672] = _scHPi::I64;
           I64[Hp - 664] = GHC.Word.W64#_con_info;
           I64[Hp - 656] = _scHPe::I64;
           I64[Hp - 648] = GHC.Word.W64#_con_info;
           I64[Hp - 640] = _scHPa::I64;
           I64[Hp - 632] = GHC.Word.W64#_con_info;
           I64[Hp - 624] = _scHP6::I64;
           I64[Hp - 616] = GHC.Word.W32#_con_info;
           I64[Hp - 608] = _scHP2::I64;
           I64[Hp - 600] = GHC.Word.W32#_con_info;
           I64[Hp - 592] = _scHOY::I64;
           I64[Hp - 584] = GHC.Stats.GCDetails_con_info;
           P64[Hp - 576] = Hp - 599;
           P64[Hp - 568] = Hp - 615;
           P64[Hp - 560] = Hp - 631;
           P64[Hp - 552] = Hp - 647;
           P64[Hp - 544] = Hp - 663;
           P64[Hp - 536] = Hp - 679;
           P64[Hp - 528] = Hp - 695;
           P64[Hp - 520] = Hp - 711;
           P64[Hp - 512] = Hp - 727;
           P64[Hp - 504] = Hp - 743;
           P64[Hp - 496] = Hp - 759;
           P64[Hp - 488] = Hp - 775;
           P64[Hp - 480] = Hp - 791;
           P64[Hp - 472] = Hp - 807;
           I64[Hp - 464] = GHC.Int.I64#_con_info;
           I64[Hp - 456] = _scHOU::I64;
           I64[Hp - 448] = GHC.Int.I64#_con_info;
           I64[Hp - 440] = _scHOQ::I64;
           I64[Hp - 432] = GHC.Int.I64#_con_info;
           I64[Hp - 424] = _scHOM::I64;
           I64[Hp - 416] = GHC.Int.I64#_con_info;
           I64[Hp - 408] = _scHOI::I64;
           I64[Hp - 400] = GHC.Int.I64#_con_info;
           I64[Hp - 392] = _scHOE::I64;
           I64[Hp - 384] = GHC.Int.I64#_con_info;
           I64[Hp - 376] = _scHOA::I64;
           I64[Hp - 368] = GHC.Word.W64#_con_info;
           I64[Hp - 360] = _scHOw::I64;
           I64[Hp - 352] = GHC.Word.W64#_con_info;
           I64[Hp - 344] = _scHOs::I64;
           I64[Hp - 336] = GHC.Word.W64#_con_info;
           I64[Hp - 328] = _scHOo::I64;
           I64[Hp - 320] = GHC.Word.W64#_con_info;
           I64[Hp - 312] = _scHOk::I64;
           I64[Hp - 304] = GHC.Word.W64#_con_info;
           I64[Hp - 296] = _scHOg::I64;
           I64[Hp - 288] = GHC.Word.W64#_con_info;
           I64[Hp - 280] = _scHOc::I64;
           I64[Hp - 272] = GHC.Word.W64#_con_info;
           I64[Hp - 264] = _scHO8::I64;
           I64[Hp - 256] = GHC.Word.W64#_con_info;
           I64[Hp - 248] = _scHO4::I64;
           I64[Hp - 240] = GHC.Word.W64#_con_info;
           I64[Hp - 232] = _scHO0::I64;
           I64[Hp - 224] = GHC.Word.W64#_con_info;
           I64[Hp - 216] = _scHNW::I64;
           I64[Hp - 208] = GHC.Word.W64#_con_info;
           I64[Hp - 200] = _scHNS::I64;
           I64[Hp - 192] = GHC.Word.W32#_con_info;
           I64[Hp - 184] = _scHNO::I64;
           I64[Hp - 176] = GHC.Word.W32#_con_info;
           I64[Hp - 168] = _scHNK::I64;
           I64[Hp - 160] = GHC.Stats.RTSStats_con_info;
           P64[Hp - 152] = Hp - 175;
           P64[Hp - 144] = Hp - 191;
           P64[Hp - 136] = Hp - 207;
           P64[Hp - 128] = Hp - 223;
           P64[Hp - 120] = Hp - 239;
           P64[Hp - 112] = Hp - 255;
           P64[Hp - 104] = Hp - 271;
           P64[Hp - 96] = Hp - 287;
           P64[Hp - 88] = Hp - 303;
           P64[Hp - 80] = Hp - 319;
           P64[Hp - 72] = Hp - 335;
           P64[Hp - 64] = Hp - 351;
           P64[Hp - 56] = Hp - 367;
           P64[Hp - 48] = Hp - 383;
           P64[Hp - 40] = Hp - 399;
           P64[Hp - 32] = Hp - 415;
           P64[Hp - 24] = Hp - 431;
           P64[Hp - 16] = Hp - 447;
           P64[Hp - 8] = Hp - 463;
           P64[Hp] = Hp - 583;
           R1 = Hp - 159;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccLDF_info" {
     block_ccLDF_info:
         const _ccLDF;
         const 66;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.433754237 UTC

[section ""data" . GHC.Stats.getRTSStats_closure" {
     GHC.Stats.getRTSStats_closure:
         const GHC.Stats.getRTSStats_info;
         const 0;
 },
 GHC.Stats.getRTSStats_entry() //  []
         { []
         }
     {offset
       ccLHy: // global
           call GHC.Stats.getRTSStats1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.getRTSStats_info" {
     GHC.Stats.getRTSStats_info:
         const GHC.Stats.getRTSStats_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const ScI2G_srt+600;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.438145701 UTC

[section ""data" . GHC.Stats.GCDetails_closure" {
     GHC.Stats.GCDetails_closure:
         const GHC.Stats.GCDetails_info;
 },
 GHC.Stats.GCDetails_slow() //  [R1]
         { []
         }
     {offset
       ccLHG: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Stats.GCDetails_entry(R6,
                                          R5,
                                          R4,
                                          R3,
                                          R2,
                                          R1) args: 80, res: 0, upd: 8;
     }
 },
 GHC.Stats.GCDetails_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       ccLHL: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto ccLHP; else goto ccLHO;
       ccLHP: // global
           HpAlloc = 120;
           R1 = GHC.Stats.GCDetails_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 120, res: 0, upd: 8;
       ccLHO: // global
           I64[Hp - 112] = GHC.Stats.GCDetails_con_info;
           P64[Hp - 104] = R2;
           P64[Hp - 96] = R3;
           P64[Hp - 88] = R4;
           P64[Hp - 80] = R5;
           P64[Hp - 72] = R6;
           P64[Hp - 64] = P64[Sp];
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = P64[Sp + 16];
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = P64[Sp + 40];
           P64[Hp - 16] = P64[Sp + 48];
           P64[Hp - 8] = P64[Sp + 56];
           P64[Hp] = P64[Sp + 64];
           R1 = Hp - 111;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.GCDetails_info" {
     GHC.Stats.GCDetails_info:
         const GHC.Stats.GCDetails_entry;
         const 0;
         const 14;
         const 60129542144;
         const 0;
         const 14;
         const GHC.Stats.GCDetails_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.444635678 UTC

[section ""data" . GHC.Stats.RTSStats_closure" {
     GHC.Stats.RTSStats_closure:
         const GHC.Stats.RTSStats_info;
 },
 GHC.Stats.RTSStats_slow() //  [R1]
         { []
         }
     {offset
       ccLI7: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Stats.RTSStats_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2,
                                         R1) args: 128, res: 0, upd: 8;
     }
 },
 GHC.Stats.RTSStats_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       ccLIc: // global
           Hp = Hp + 168;
           if (Hp > HpLim) (likely: False) goto ccLIg; else goto ccLIf;
       ccLIg: // global
           HpAlloc = 168;
           R1 = GHC.Stats.RTSStats_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 168, res: 0, upd: 8;
       ccLIf: // global
           I64[Hp - 160] = GHC.Stats.RTSStats_con_info;
           P64[Hp - 152] = R2;
           P64[Hp - 144] = R3;
           P64[Hp - 136] = R4;
           P64[Hp - 128] = R5;
           P64[Hp - 120] = R6;
           P64[Hp - 112] = P64[Sp];
           P64[Hp - 104] = P64[Sp + 8];
           P64[Hp - 96] = P64[Sp + 16];
           P64[Hp - 88] = P64[Sp + 24];
           P64[Hp - 80] = P64[Sp + 32];
           P64[Hp - 72] = P64[Sp + 40];
           P64[Hp - 64] = P64[Sp + 48];
           P64[Hp - 56] = P64[Sp + 56];
           P64[Hp - 48] = P64[Sp + 64];
           P64[Hp - 40] = P64[Sp + 72];
           P64[Hp - 32] = P64[Sp + 80];
           P64[Hp - 24] = P64[Sp + 88];
           P64[Hp - 16] = P64[Sp + 96];
           P64[Hp - 8] = P64[Sp + 104];
           P64[Hp] = P64[Sp + 112];
           R1 = Hp - 159;
           Sp = Sp + 120;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.RTSStats_info" {
     GHC.Stats.RTSStats_info:
         const GHC.Stats.RTSStats_entry;
         const 0;
         const 14;
         const 85899345920;
         const 0;
         const 20;
         const GHC.Stats.RTSStats_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.450051888 UTC

[section ""cstring" . icJZM_str" {
     icJZM_str:
         I8[] [98,97,115,101,58,71,72,67,46,83,116,97,116,115,46,71,67,68,101,116,97,105,108,115]
 },
 GHC.Stats.GCDetails_con_entry() //  [R1]
         { []
         }
     {offset
       ccLID: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.GCDetails_con_info" {
     GHC.Stats.GCDetails_con_info:
         const GHC.Stats.GCDetails_con_entry;
         const 14;
         const 1;
         const icJZM_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.453938899 UTC

[section ""cstring" . icJZO_str" {
     icJZO_str:
         I8[] [98,97,115,101,58,71,72,67,46,83,116,97,116,115,46,82,84,83,83,116,97,116,115]
 },
 GHC.Stats.RTSStats_con_entry() //  [R1]
         { []
         }
     {offset
       ccLIJ: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.RTSStats_con_info" {
     GHC.Stats.RTSStats_con_info:
         const GHC.Stats.RTSStats_con_entry;
         const 20;
         const 1;
         const icJZO_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:38.458271533 UTC

[section ""relreadonly" . ScI2G_srt" {
     ScI2G_srt:
         const GHC.Show.showCommaSpace1_closure;
         const GHC.Show.$w$cshowsPrec4_closure;
         const GHC.Stats.$fShowGCDetails_$cshowsPrec_closure;
         const GHC.Stats.$fShowGCDetails_$cshow_closure;
         const GHC.Stats.$fShowGCDetails1_closure;
         const GHC.Stats.$fShowRTSStats_$cshowsPrec_closure;
         const GHC.Stats.$fShowRTSStats_$cshow_closure;
         const GHC.Stats.$fShowRTSStats1_closure;
         const GHC.Read.$fReadWord32_$creadsPrec_closure;
         const lvl37_rcHqd_closure;
         const ds2_rcHqe_closure;
         const GHC.Read.$fReadWord64_$creadsPrec_closure;
         const lvl45_rcHqn_closure;
         const lvl46_rcHqo_closure;
         const GHC.Int.$fReadInt64_$creadsPrec_closure;
         const lvl65_rcHqH_closure;
         const lvl66_rcHqI_closure;
         const Text.Read.Lex.$wexpect_closure;
         const lvl72_rcHqO_closure;
         const GHC.Read.readField_closure;
         const lvl70_rcHqM_closure;
         const lvl40_rcHqi_closure;
         const lvl68_rcHqK_closure;
         const lvl64_rcHqG_closure;
         const lvl62_rcHqE_closure;
         const lvl60_rcHqC_closure;
         const lvl58_rcHqA_closure;
         const lvl56_rcHqy_closure;
         const lvl54_rcHqw_closure;
         const lvl52_rcHqu_closure;
         const lvl50_rcHqs_closure;
         const lvl48_rcHqq_closure;
         const lvl44_rcHqm_closure;
         const lvl42_rcHqk_closure;
         const ds1_rcHqc_closure;
         const lexeme4_rcHqa_closure;
         const GHC.Stats.$w$creadPrec_closure;
         const lexeme1_rcHq7_closure;
         const GHC.Stats.$fReadGCDetails2_closure;
         const GHC.Read.list3_closure;
         const GHC.Stats.$fReadGCDetails_$creadsPrec_closure;
         const GHC.Read.list_closure;
         const GHC.Stats.$fReadGCDetails1_closure;
         const GHC.Stats.$fReadGCDetails_$creadListPrec_closure;
         const GHC.Stats.$fReadGCDetails3_closure;
         const lvl110_rcHru_closure;
         const lvl111_rcHrv_closure;
         const lvl108_rcHrs_closure;
         const lvl106_rcHrq_closure;
         const lvl104_rcHro_closure;
         const lvl102_rcHrm_closure;
         const lvl100_rcHrk_closure;
         const lvl98_rcHri_closure;
         const lvl96_rcHrg_closure;
         const lvl94_rcHre_closure;
         const lvl92_rcHrc_closure;
         const lvl90_rcHra_closure;
         const lvl88_rcHr8_closure;
         const lvl86_rcHr6_closure;
         const lvl84_rcHr4_closure;
         const lvl82_rcHr2_closure;
         const lvl80_rcHr0_closure;
         const lvl78_rcHqY_closure;
         const lvl76_rcHqW_closure;
         const lvl74_rcHqU_closure;
         const ds4_rcHqS_closure;
         const GHC.Stats.$w$creadPrec1_closure;
         const lexeme6_rcHqQ_closure;
         const GHC.Stats.$fReadRTSStats2_closure;
         const GHC.Stats.$fReadRTSStats_$creadsPrec_closure;
         const GHC.Stats.$fReadRTSStats1_closure;
         const GHC.Stats.$fReadRTSStats_$creadListPrec_closure;
         const GHC.Stats.$fReadRTSStats3_closure;
         const GHC.IO.Exception.$fExceptionIOException_$ctoException_closure;
         const GHC.Stats.getRTSStats3_closure;
         const GHC.Stats.getRTSStats1_closure;
         const GHC.Stats.getRTSStats2_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.068824041 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:07:47.070049433 UTC

[section ""cstring" . lvl_rcHpv_bytes" {
     lvl_rcHpv_bytes:
         I8[] [71,67,68,101,116,97,105,108,115,32,123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.071793475 UTC

[section ""cstring" . lvl1_rcHpw_bytes" {
     lvl1_rcHpw_bytes:
         I8[] [103,99,100,101,116,97,105,108,115,95,103,101,110,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.073557209 UTC

[section ""cstring" . lvl2_rcHpx_bytes" {
     lvl2_rcHpx_bytes:
         I8[] [103,99,100,101,116,97,105,108,115,95,116,104,114,101,97,100,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.075218193 UTC

[section ""cstring" . lvl3_rcHpy_bytes" {
     lvl3_rcHpy_bytes:
         I8[] [103,99,100,101,116,97,105,108,115,95,97,108,108,111,99,97,116,101,100,95,98,121,116,101,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.076863523 UTC

[section ""cstring" . lvl4_rcHpz_bytes" {
     lvl4_rcHpz_bytes:
         I8[] [103,99,100,101,116,97,105,108,115,95,108,105,118,101,95,98,121,116,101,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.078659554 UTC

[section ""cstring" . lvl5_rcHpA_bytes" {
     lvl5_rcHpA_bytes:
         I8[] [103,99,100,101,116,97,105,108,115,95,108,97,114,103,101,95,111,98,106,101,99,116,115,95,98,121,116,101,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.080375525 UTC

[section ""cstring" . lvl6_rcHpB_bytes" {
     lvl6_rcHpB_bytes:
         I8[] [103,99,100,101,116,97,105,108,115,95,99,111,109,112,97,99,116,95,98,121,116,101,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.082194894 UTC

[section ""cstring" . lvl7_rcHpC_bytes" {
     lvl7_rcHpC_bytes:
         I8[] [103,99,100,101,116,97,105,108,115,95,115,108,111,112,95,98,121,116,101,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.083883502 UTC

[section ""cstring" . lvl8_rcHpD_bytes" {
     lvl8_rcHpD_bytes:
         I8[] [103,99,100,101,116,97,105,108,115,95,109,101,109,95,105,110,95,117,115,101,95,98,121,116,101,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.085750058 UTC

[section ""cstring" . lvl9_rcHpE_bytes" {
     lvl9_rcHpE_bytes:
         I8[] [103,99,100,101,116,97,105,108,115,95,99,111,112,105,101,100,95,98,121,116,101,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.087481347 UTC

[section ""cstring" . lvl10_rcHpF_bytes" {
     lvl10_rcHpF_bytes:
         I8[] [103,99,100,101,116,97,105,108,115,95,112,97,114,95,109,97,120,95,99,111,112,105,101,100,95,98,121,116,101,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.08915201 UTC

[section ""cstring" . lvl11_rcHpG_bytes" {
     lvl11_rcHpG_bytes:
         I8[] [103,99,100,101,116,97,105,108,115,95,112,97,114,95,98,97,108,97,110,99,101,100,95,99,111,112,105,101,100,95,98,121,116,101,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.090950127 UTC

[section ""cstring" . lvl12_rcHpH_bytes" {
     lvl12_rcHpH_bytes:
         I8[] [103,99,100,101,116,97,105,108,115,95,115,121,110,99,95,101,108,97,112,115,101,100,95,110,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.094515832 UTC

[section ""cstring" . lvl13_rcHpI_bytes" {
     lvl13_rcHpI_bytes:
         I8[] [103,99,100,101,116,97,105,108,115,95,99,112,117,95,110,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.096167757 UTC

[section ""cstring" . lvl14_rcHpJ_bytes" {
     lvl14_rcHpJ_bytes:
         I8[] [103,99,100,101,116,97,105,108,115,95,101,108,97,112,115,101,100,95,110,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.097854235 UTC

[section ""cstring" . lvl15_rcHpK_bytes" {
     lvl15_rcHpK_bytes:
         I8[] [125]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.145467046 UTC

[section ""data" . GHC.Stats.$fShowGCDetails_$cshowsPrec_closure" {
     GHC.Stats.$fShowGCDetails_$cshowsPrec_closure:
         const GHC.Stats.$fShowGCDetails_$cshowsPrec_info;
         const 0;
 },
 w1_scLJ9_entry() //  [R1]
         { []
         }
     {offset
       ccM7I: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccM7J; else goto ccM7K;
       ccM7J: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccM7K: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccM7F_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucM7W; else goto ccM7G;
       ucM7W: // global
           call _ccM7F(R1) args: 0, res: 0, upd: 0;
       ccM7G: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . w1_scLJ9_info" {
     w1_scLJ9_info:
         const w1_scLJ9_entry;
         const 1;
         const 16;
 },
 _ccM7F() //  [R1]
         { []
         }
     {offset
       ccM7F: // global
           _scLJb::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_scLJb::I64, 0)) goto ccM7U; else goto ccM7V;
       ccM7U: // global
           R2 = _scLJb::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.wordToInteger_entry(R2) args: 24, res: 0, upd: 24;
       ccM7V: // global
           R2 = _scLJb::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccM7F_info" {
     block_ccM7F_info:
         const _ccM7F;
         const 0;
         const 30;
 },
 w2_scLJe_entry() //  [R1]
         { []
         }
     {offset
       ccM84: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccM85; else goto ccM86;
       ccM85: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccM86: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccM81_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucM8i; else goto ccM82;
       ucM8i: // global
           call _ccM81(R1) args: 0, res: 0, upd: 0;
       ccM82: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . w2_scLJe_info" {
     w2_scLJe_info:
         const w2_scLJe_entry;
         const 1;
         const 16;
 },
 _ccM81() //  [R1]
         { []
         }
     {offset
       ccM81: // global
           _scLJg::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_scLJg::I64, 0)) goto ccM8g; else goto ccM8h;
       ccM8g: // global
           R2 = _scLJg::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.wordToInteger_entry(R2) args: 24, res: 0, upd: 24;
       ccM8h: // global
           R2 = _scLJg::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccM81_info" {
     block_ccM81_info:
         const _ccM81;
         const 0;
         const 30;
 },
 w3_scLJj_entry() //  [R1]
         { []
         }
     {offset
       ccM8q: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccM8r; else goto ccM8s;
       ccM8r: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccM8s: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccM8n_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucM8E; else goto ccM8o;
       ucM8E: // global
           call _ccM8n(R1) args: 0, res: 0, upd: 0;
       ccM8o: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . w3_scLJj_info" {
     w3_scLJj_info:
         const w3_scLJj_entry;
         const 1;
         const 16;
 },
 _ccM8n() //  [R1]
         { []
         }
     {offset
       ccM8n: // global
           _scLJl::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_scLJl::I64, 0)) goto ccM8C; else goto ccM8D;
       ccM8C: // global
           R2 = _scLJl::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.wordToInteger_entry(R2) args: 24, res: 0, upd: 24;
       ccM8D: // global
           R2 = _scLJl::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccM8n_info" {
     block_ccM8n_info:
         const _ccM8n;
         const 0;
         const 30;
 },
 w4_scLJo_entry() //  [R1]
         { []
         }
     {offset
       ccM8M: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccM8N; else goto ccM8O;
       ccM8N: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccM8O: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccM8J_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucM90; else goto ccM8K;
       ucM90: // global
           call _ccM8J(R1) args: 0, res: 0, upd: 0;
       ccM8K: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . w4_scLJo_info" {
     w4_scLJo_info:
         const w4_scLJo_entry;
         const 1;
         const 16;
 },
 _ccM8J() //  [R1]
         { []
         }
     {offset
       ccM8J: // global
           _scLJq::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_scLJq::I64, 0)) goto ccM8Y; else goto ccM8Z;
       ccM8Y: // global
           R2 = _scLJq::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.wordToInteger_entry(R2) args: 24, res: 0, upd: 24;
       ccM8Z: // global
           R2 = _scLJq::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccM8J_info" {
     block_ccM8J_info:
         const _ccM8J;
         const 0;
         const 30;
 },
 w5_scLJt_entry() //  [R1]
         { []
         }
     {offset
       ccM98: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccM99; else goto ccM9a;
       ccM99: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccM9a: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccM95_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucM9m; else goto ccM96;
       ucM9m: // global
           call _ccM95(R1) args: 0, res: 0, upd: 0;
       ccM96: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . w5_scLJt_info" {
     w5_scLJt_info:
         const w5_scLJt_entry;
         const 1;
         const 16;
 },
 _ccM95() //  [R1]
         { []
         }
     {offset
       ccM95: // global
           _scLJv::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_scLJv::I64, 0)) goto ccM9k; else goto ccM9l;
       ccM9k: // global
           R2 = _scLJv::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.wordToInteger_entry(R2) args: 24, res: 0, upd: 24;
       ccM9l: // global
           R2 = _scLJv::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccM95_info" {
     block_ccM95_info:
         const _ccM95;
         const 0;
         const 30;
 },
 w6_scLJy_entry() //  [R1]
         { []
         }
     {offset
       ccM9u: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccM9v; else goto ccM9w;
       ccM9v: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccM9w: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccM9r_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucM9I; else goto ccM9s;
       ucM9I: // global
           call _ccM9r(R1) args: 0, res: 0, upd: 0;
       ccM9s: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . w6_scLJy_info" {
     w6_scLJy_info:
         const w6_scLJy_entry;
         const 1;
         const 16;
 },
 _ccM9r() //  [R1]
         { []
         }
     {offset
       ccM9r: // global
           _scLJA::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_scLJA::I64, 0)) goto ccM9G; else goto ccM9H;
       ccM9G: // global
           R2 = _scLJA::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.wordToInteger_entry(R2) args: 24, res: 0, upd: 24;
       ccM9H: // global
           R2 = _scLJA::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccM9r_info" {
     block_ccM9r_info:
         const _ccM9r;
         const 0;
         const 30;
 },
 w7_scLJD_entry() //  [R1]
         { []
         }
     {offset
       ccM9Q: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccM9R; else goto ccM9S;
       ccM9R: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccM9S: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccM9N_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucMa4; else goto ccM9O;
       ucMa4: // global
           call _ccM9N(R1) args: 0, res: 0, upd: 0;
       ccM9O: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . w7_scLJD_info" {
     w7_scLJD_info:
         const w7_scLJD_entry;
         const 1;
         const 16;
 },
 _ccM9N() //  [R1]
         { []
         }
     {offset
       ccM9N: // global
           _scLJF::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_scLJF::I64, 0)) goto ccMa2; else goto ccMa3;
       ccMa2: // global
           R2 = _scLJF::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.wordToInteger_entry(R2) args: 24, res: 0, upd: 24;
       ccMa3: // global
           R2 = _scLJF::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccM9N_info" {
     block_ccM9N_info:
         const _ccM9N;
         const 0;
         const 30;
 },
 w8_scLJI_entry() //  [R1]
         { []
         }
     {offset
       ccMac: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccMad; else goto ccMae;
       ccMad: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMae: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccMa9_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucMaq; else goto ccMaa;
       ucMaq: // global
           call _ccMa9(R1) args: 0, res: 0, upd: 0;
       ccMaa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . w8_scLJI_info" {
     w8_scLJI_info:
         const w8_scLJI_entry;
         const 1;
         const 16;
 },
 _ccMa9() //  [R1]
         { []
         }
     {offset
       ccMa9: // global
           _scLJK::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_scLJK::I64, 0)) goto ccMao; else goto ccMap;
       ccMao: // global
           R2 = _scLJK::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.wordToInteger_entry(R2) args: 24, res: 0, upd: 24;
       ccMap: // global
           R2 = _scLJK::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccMa9_info" {
     block_ccMa9_info:
         const _ccMa9;
         const 0;
         const 30;
 },
 w9_scLJN_entry() //  [R1]
         { []
         }
     {offset
       ccMay: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccMaz; else goto ccMaA;
       ccMaz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMaA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccMav_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucMaM; else goto ccMaw;
       ucMaM: // global
           call _ccMav(R1) args: 0, res: 0, upd: 0;
       ccMaw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . w9_scLJN_info" {
     w9_scLJN_info:
         const w9_scLJN_entry;
         const 1;
         const 16;
 },
 _ccMav() //  [R1]
         { []
         }
     {offset
       ccMav: // global
           _scLJP::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_scLJP::I64, 0)) goto ccMaK; else goto ccMaL;
       ccMaK: // global
           R2 = _scLJP::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.wordToInteger_entry(R2) args: 24, res: 0, upd: 24;
       ccMaL: // global
           R2 = _scLJP::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccMav_info" {
     block_ccMav_info:
         const _ccMav;
         const 0;
         const 30;
 },
 sat_scLK6_entry() //  [R1]
         { []
         }
     {offset
       ccMdZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccMe0; else goto ccMe1;
       ccMe0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMe1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = lvl15_rcHpK_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLK6_info" {
     sat_scLK6_info:
         const sat_scLK6_entry;
         const 1;
         const 16;
 },
 sat_scLKa_entry() //  [R1]
         { []
         }
     {offset
       ccMe2: // global
           if ((Sp + -32) < SpLim) (likely: False) goto ccMe6; else goto ccMe7;
       ccMe6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMe7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_ccMdQ_info;
           _scLJT::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _scLJT::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ucMee; else goto ccMdR;
       ucMee: // global
           call _ccMdQ(R1) args: 0, res: 0, upd: 0;
       ccMdR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLKa_info" {
     sat_scLKa_info:
         const sat_scLKa_entry;
         const 2;
         const 18;
 },
 _ccMdQ() //  [R1]
         { []
         }
     {offset
       ccMdQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccMea; else goto ccMe9;
       ccMea: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       ccMe9: // global
           _scLK5::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_scLK6_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_ccMe3_info;
           R4 = Hp - 16;
           R3 = _scLK5::I64;
           R2 = 0;
           Sp = Sp + 8;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccMdQ_info" {
     block_ccMdQ_info:
         const _ccMdQ;
         const 1;
         const 30;
 },
 _ccMe3() //  [R1, R2]
         { []
         }
     {offset
       ccMe3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccMed; else goto ccMec;
       ccMed: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccMec: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccMe3_info" {
     block_ccMe3_info:
         const _ccMe3;
         const 0;
         const 30;
 },
 sat_scLKb_entry() //  [R1]
         { []
         }
     {offset
       ccMef: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccMej; else goto ccMei;
       ccMej: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMei: // global
           _scLJ6::P64 = P64[R1 + 16];
           _scLJT::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_scLKa_info;
           P64[Hp - 8] = _scLJ6::P64;
           P64[Hp] = _scLJT::P64;
           R3 = Hp - 24;
           R2 = lvl14_rcHpJ_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLKb_info" {
     sat_scLKb_info:
         const sat_scLKb_entry;
         const 2;
         const 18;
 },
 sat_scLKc_entry() //  [R1]
         { []
         }
     {offset
       ccMek: // global
           _scLKc::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccMel; else goto ccMem;
       ccMem: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccMeo; else goto ccMen;
       ccMeo: // global
           HpAlloc = 32;
           goto ccMel;
       ccMel: // global
           R1 = _scLKc::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMen: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scLKc::P64;
           _scLJ6::P64 = P64[_scLKc::P64 + 16];
           _scLJT::P64 = P64[_scLKc::P64 + 24];
           I64[Hp - 24] = sat_scLKb_info;
           P64[Hp - 8] = _scLJ6::P64;
           P64[Hp] = _scLJT::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLKc_info" {
     sat_scLKc_info:
         const sat_scLKc_entry;
         const 2;
         const 4294967314;
         const ScMjD_srt;
 },
 sat_scLKg_entry() //  [R1]
         { []
         }
     {offset
       ccMep: // global
           if ((Sp + -40) < SpLim) (likely: False) goto ccMet; else goto ccMeu;
       ccMet: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMeu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_ccMdz_info;
           _scLJ6::P64 = P64[R1 + 24];
           _scLJT::P64 = P64[R1 + 32];
           R1 = P64[R1 + 16];
           P64[Sp - 32] = _scLJ6::P64;
           P64[Sp - 24] = _scLJT::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ucMeB; else goto ccMdA;
       ucMeB: // global
           call _ccMdz(R1) args: 0, res: 0, upd: 0;
       ccMdA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLKg_info" {
     sat_scLKg_info:
         const sat_scLKg_entry;
         const 3;
         const 4294967311;
         const ScMjD_srt;
 },
 _ccMdz() //  [R1]
         { []
         }
     {offset
       ccMdz: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccMex; else goto ccMew;
       ccMex: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       ccMew: // global
           _scLK3::I64 = I64[R1 + 7];
           I64[Hp - 24] = sat_scLKc_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_ccMeq_info;
           R4 = Hp - 24;
           R3 = _scLK3::I64;
           R2 = 0;
           Sp = Sp + 16;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccMdz_info" {
     block_ccMdz_info:
         const _ccMdz;
         const 2;
         const 4294967326;
         const ScMjD_srt;
 },
 _ccMeq() //  [R1, R2]
         { []
         }
     {offset
       ccMeq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccMeA; else goto ccMez;
       ccMeA: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccMez: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccMeq_info" {
     block_ccMeq_info:
         const _ccMeq;
         const 0;
         const 30;
 },
 sat_scLKh_entry() //  [R1]
         { []
         }
     {offset
       ccMeC: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccMeG; else goto ccMeF;
       ccMeG: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMeF: // global
           _scLJ5::P64 = P64[R1 + 16];
           _scLJ6::P64 = P64[R1 + 24];
           _scLJT::P64 = P64[R1 + 32];
           I64[Hp - 32] = sat_scLKg_info;
           P64[Hp - 16] = _scLJ5::P64;
           P64[Hp - 8] = _scLJ6::P64;
           P64[Hp] = _scLJT::P64;
           R3 = Hp - 32;
           R2 = lvl13_rcHpI_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLKh_info" {
     sat_scLKh_info:
         const sat_scLKh_entry;
         const 3;
         const 4294967311;
         const ScMjD_srt;
 },
 sat_scLKi_entry() //  [R1]
         { []
         }
     {offset
       ccMeH: // global
           _scLKi::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccMeI; else goto ccMeJ;
       ccMeJ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccMeL; else goto ccMeK;
       ccMeL: // global
           HpAlloc = 40;
           goto ccMeI;
       ccMeI: // global
           R1 = _scLKi::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMeK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scLKi::P64;
           _scLJ5::P64 = P64[_scLKi::P64 + 16];
           _scLJ6::P64 = P64[_scLKi::P64 + 24];
           _scLJT::P64 = P64[_scLKi::P64 + 32];
           I64[Hp - 32] = sat_scLKh_info;
           P64[Hp - 16] = _scLJ5::P64;
           P64[Hp - 8] = _scLJ6::P64;
           P64[Hp] = _scLJT::P64;
           R3 = Hp - 32;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLKi_info" {
     sat_scLKi_info:
         const sat_scLKi_entry;
         const 3;
         const 4294967311;
         const ScMjD_srt;
 },
 sat_scLKm_entry() //  [R1]
         { []
         }
     {offset
       ccMeM: // global
           if ((Sp + -48) < SpLim) (likely: False) goto ccMeQ; else goto ccMeR;
       ccMeQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMeR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_ccMdi_info;
           _scLJ5::P64 = P64[R1 + 24];
           _scLJ6::P64 = P64[R1 + 32];
           _scLJT::P64 = P64[R1 + 40];
           R1 = P64[R1 + 16];
           P64[Sp - 40] = _scLJ5::P64;
           P64[Sp - 32] = _scLJ6::P64;
           P64[Sp - 24] = _scLJT::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto ucMeY; else goto ccMdj;
       ucMeY: // global
           call _ccMdi(R1) args: 0, res: 0, upd: 0;
       ccMdj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLKm_info" {
     sat_scLKm_info:
         const sat_scLKm_entry;
         const 4;
         const 4294967311;
         const ScMjD_srt;
 },
 _ccMdi() //  [R1]
         { []
         }
     {offset
       ccMdi: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccMeU; else goto ccMeT;
       ccMeU: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       ccMeT: // global
           _scLK1::I64 = I64[R1 + 7];
           I64[Hp - 32] = sat_scLKi_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           I64[Sp + 24] = block_ccMeN_info;
           R4 = Hp - 32;
           R3 = _scLK1::I64;
           R2 = 0;
           Sp = Sp + 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccMdi_info" {
     block_ccMdi_info:
         const _ccMdi;
         const 3;
         const 4294967326;
         const ScMjD_srt;
 },
 _ccMeN() //  [R1, R2]
         { []
         }
     {offset
       ccMeN: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccMeX; else goto ccMeW;
       ccMeX: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccMeW: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccMeN_info" {
     block_ccMeN_info:
         const _ccMeN;
         const 0;
         const 30;
 },
 sat_scLKn_entry() //  [R1]
         { []
         }
     {offset
       ccMeZ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccMf3; else goto ccMf2;
       ccMf3: // global
           HpAlloc = 48;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMf2: // global
           _scLJ4::P64 = P64[R1 + 16];
           _scLJ5::P64 = P64[R1 + 24];
           _scLJ6::P64 = P64[R1 + 32];
           _scLJT::P64 = P64[R1 + 40];
           I64[Hp - 40] = sat_scLKm_info;
           P64[Hp - 24] = _scLJ4::P64;
           P64[Hp - 16] = _scLJ5::P64;
           P64[Hp - 8] = _scLJ6::P64;
           P64[Hp] = _scLJT::P64;
           R3 = Hp - 40;
           R2 = lvl12_rcHpH_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLKn_info" {
     sat_scLKn_info:
         const sat_scLKn_entry;
         const 4;
         const 4294967311;
         const ScMjD_srt;
 },
 sat_scLKo_entry() //  [R1]
         { []
         }
     {offset
       ccMf4: // global
           _scLKo::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccMf5; else goto ccMf6;
       ccMf6: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccMf8; else goto ccMf7;
       ccMf8: // global
           HpAlloc = 48;
           goto ccMf5;
       ccMf5: // global
           R1 = _scLKo::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMf7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scLKo::P64;
           _scLJ4::P64 = P64[_scLKo::P64 + 16];
           _scLJ5::P64 = P64[_scLKo::P64 + 24];
           _scLJ6::P64 = P64[_scLKo::P64 + 32];
           _scLJT::P64 = P64[_scLKo::P64 + 40];
           I64[Hp - 40] = sat_scLKn_info;
           P64[Hp - 24] = _scLJ4::P64;
           P64[Hp - 16] = _scLJ5::P64;
           P64[Hp - 8] = _scLJ6::P64;
           P64[Hp] = _scLJT::P64;
           R3 = Hp - 40;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLKo_info" {
     sat_scLKo_info:
         const sat_scLKo_entry;
         const 4;
         const 4294967311;
         const ScMjD_srt;
 },
 sat_scLKs_entry() //  [R1]
         { []
         }
     {offset
       ccMfc: // global
           _scLKs::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto ccMfd; else goto ccMfe;
       ccMfe: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccMfg; else goto ccMff;
       ccMfg: // global
           HpAlloc = 48;
           goto ccMfd;
       ccMfd: // global
           R1 = _scLKs::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMff: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scLKs::P64;
           _scLJ4::P64 = P64[_scLKs::P64 + 16];
           _scLJ5::P64 = P64[_scLKs::P64 + 24];
           _scLJ6::P64 = P64[_scLKs::P64 + 32];
           _scLJN::P64 = P64[_scLKs::P64 + 40];
           _scLJT::P64 = P64[_scLKs::P64 + 48];
           I64[Hp - 40] = sat_scLKo_info;
           P64[Hp - 24] = _scLJ4::P64;
           P64[Hp - 16] = _scLJ5::P64;
           P64[Hp - 8] = _scLJ6::P64;
           P64[Hp] = _scLJT::P64;
           I64[Sp - 24] = block_ccMf9_info;
           R4 = Hp - 40;
           R3 = _scLJN::P64;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLKs_info" {
     sat_scLKs_info:
         const sat_scLKs_entry;
         const 5;
         const 12884901903;
         const ScMjD_srt;
 },
 _ccMf9() //  [R1, R2]
         { []
         }
     {offset
       ccMf9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccMfj; else goto ccMfi;
       ccMfj: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccMfi: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccMf9_info" {
     block_ccMf9_info:
         const _ccMf9;
         const 0;
         const 30;
 },
 sat_scLKt_entry() //  [R1]
         { []
         }
     {offset
       ccMfk: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto ccMfo; else goto ccMfn;
       ccMfo: // global
           HpAlloc = 56;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMfn: // global
           _scLJ4::P64 = P64[R1 + 16];
           _scLJ5::P64 = P64[R1 + 24];
           _scLJ6::P64 = P64[R1 + 32];
           _scLJN::P64 = P64[R1 + 40];
           _scLJT::P64 = P64[R1 + 48];
           I64[Hp - 48] = sat_scLKs_info;
           P64[Hp - 32] = _scLJ4::P64;
           P64[Hp - 24] = _scLJ5::P64;
           P64[Hp - 16] = _scLJ6::P64;
           P64[Hp - 8] = _scLJN::P64;
           P64[Hp] = _scLJT::P64;
           R3 = Hp - 48;
           R2 = lvl11_rcHpG_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLKt_info" {
     sat_scLKt_info:
         const sat_scLKt_entry;
         const 5;
         const 12884901903;
         const ScMjD_srt;
 },
 sat_scLKu_entry() //  [R1]
         { []
         }
     {offset
       ccMfp: // global
           _scLKu::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccMfq; else goto ccMfr;
       ccMfr: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto ccMft; else goto ccMfs;
       ccMft: // global
           HpAlloc = 56;
           goto ccMfq;
       ccMfq: // global
           R1 = _scLKu::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMfs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scLKu::P64;
           _scLJ4::P64 = P64[_scLKu::P64 + 16];
           _scLJ5::P64 = P64[_scLKu::P64 + 24];
           _scLJ6::P64 = P64[_scLKu::P64 + 32];
           _scLJN::P64 = P64[_scLKu::P64 + 40];
           _scLJT::P64 = P64[_scLKu::P64 + 48];
           I64[Hp - 48] = sat_scLKt_info;
           P64[Hp - 32] = _scLJ4::P64;
           P64[Hp - 24] = _scLJ5::P64;
           P64[Hp - 16] = _scLJ6::P64;
           P64[Hp - 8] = _scLJN::P64;
           P64[Hp] = _scLJT::P64;
           R3 = Hp - 48;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLKu_info" {
     sat_scLKu_info:
         const sat_scLKu_entry;
         const 5;
         const 12884901903;
         const ScMjD_srt;
 },
 sat_scLKy_entry() //  [R1]
         { []
         }
     {offset
       ccMfx: // global
           _scLKy::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto ccMfy; else goto ccMfz;
       ccMfz: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto ccMfB; else goto ccMfA;
       ccMfB: // global
           HpAlloc = 56;
           goto ccMfy;
       ccMfy: // global
           R1 = _scLKy::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMfA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scLKy::P64;
           _scLJ4::P64 = P64[_scLKy::P64 + 16];
           _scLJ5::P64 = P64[_scLKy::P64 + 24];
           _scLJ6::P64 = P64[_scLKy::P64 + 32];
           _scLJI::P64 = P64[_scLKy::P64 + 40];
           _scLJN::P64 = P64[_scLKy::P64 + 48];
           _scLJT::P64 = P64[_scLKy::P64 + 56];
           I64[Hp - 48] = sat_scLKu_info;
           P64[Hp - 32] = _scLJ4::P64;
           P64[Hp - 24] = _scLJ5::P64;
           P64[Hp - 16] = _scLJ6::P64;
           P64[Hp - 8] = _scLJN::P64;
           P64[Hp] = _scLJT::P64;
           I64[Sp - 24] = block_ccMfu_info;
           R4 = Hp - 48;
           R3 = _scLJI::P64;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLKy_info" {
     sat_scLKy_info:
         const sat_scLKy_entry;
         const 6;
         const 12884901903;
         const ScMjD_srt;
 },
 _ccMfu() //  [R1, R2]
         { []
         }
     {offset
       ccMfu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccMfE; else goto ccMfD;
       ccMfE: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccMfD: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccMfu_info" {
     block_ccMfu_info:
         const _ccMfu;
         const 0;
         const 30;
 },
 sat_scLKz_entry() //  [R1]
         { []
         }
     {offset
       ccMfF: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto ccMfJ; else goto ccMfI;
       ccMfJ: // global
           HpAlloc = 64;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMfI: // global
           _scLJ4::P64 = P64[R1 + 16];
           _scLJ5::P64 = P64[R1 + 24];
           _scLJ6::P64 = P64[R1 + 32];
           _scLJI::P64 = P64[R1 + 40];
           _scLJN::P64 = P64[R1 + 48];
           _scLJT::P64 = P64[R1 + 56];
           I64[Hp - 56] = sat_scLKy_info;
           P64[Hp - 40] = _scLJ4::P64;
           P64[Hp - 32] = _scLJ5::P64;
           P64[Hp - 24] = _scLJ6::P64;
           P64[Hp - 16] = _scLJI::P64;
           P64[Hp - 8] = _scLJN::P64;
           P64[Hp] = _scLJT::P64;
           R3 = Hp - 56;
           R2 = lvl10_rcHpF_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLKz_info" {
     sat_scLKz_info:
         const sat_scLKz_entry;
         const 6;
         const 12884901903;
         const ScMjD_srt;
 },
 sat_scLKA_entry() //  [R1]
         { []
         }
     {offset
       ccMfK: // global
           _scLKA::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccMfL; else goto ccMfM;
       ccMfM: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto ccMfO; else goto ccMfN;
       ccMfO: // global
           HpAlloc = 64;
           goto ccMfL;
       ccMfL: // global
           R1 = _scLKA::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMfN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scLKA::P64;
           _scLJ4::P64 = P64[_scLKA::P64 + 16];
           _scLJ5::P64 = P64[_scLKA::P64 + 24];
           _scLJ6::P64 = P64[_scLKA::P64 + 32];
           _scLJI::P64 = P64[_scLKA::P64 + 40];
           _scLJN::P64 = P64[_scLKA::P64 + 48];
           _scLJT::P64 = P64[_scLKA::P64 + 56];
           I64[Hp - 56] = sat_scLKz_info;
           P64[Hp - 40] = _scLJ4::P64;
           P64[Hp - 32] = _scLJ5::P64;
           P64[Hp - 24] = _scLJ6::P64;
           P64[Hp - 16] = _scLJI::P64;
           P64[Hp - 8] = _scLJN::P64;
           P64[Hp] = _scLJT::P64;
           R3 = Hp - 56;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLKA_info" {
     sat_scLKA_info:
         const sat_scLKA_entry;
         const 6;
         const 12884901903;
         const ScMjD_srt;
 },
 sat_scLKE_entry() //  [R1]
         { []
         }
     {offset
       ccMfS: // global
           _scLKE::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto ccMfT; else goto ccMfU;
       ccMfU: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto ccMfW; else goto ccMfV;
       ccMfW: // global
           HpAlloc = 64;
           goto ccMfT;
       ccMfT: // global
           R1 = _scLKE::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMfV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scLKE::P64;
           _scLJ4::P64 = P64[_scLKE::P64 + 16];
           _scLJ5::P64 = P64[_scLKE::P64 + 24];
           _scLJ6::P64 = P64[_scLKE::P64 + 32];
           _scLJD::P64 = P64[_scLKE::P64 + 40];
           _scLJI::P64 = P64[_scLKE::P64 + 48];
           _scLJN::P64 = P64[_scLKE::P64 + 56];
           _scLJT::P64 = P64[_scLKE::P64 + 64];
           I64[Hp - 56] = sat_scLKA_info;
           P64[Hp - 40] = _scLJ4::P64;
           P64[Hp - 32] = _scLJ5::P64;
           P64[Hp - 24] = _scLJ6::P64;
           P64[Hp - 16] = _scLJI::P64;
           P64[Hp - 8] = _scLJN::P64;
           P64[Hp] = _scLJT::P64;
           I64[Sp - 24] = block_ccMfP_info;
           R4 = Hp - 56;
           R3 = _scLJD::P64;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLKE_info" {
     sat_scLKE_info:
         const sat_scLKE_entry;
         const 7;
         const 12884901903;
         const ScMjD_srt;
 },
 _ccMfP() //  [R1, R2]
         { []
         }
     {offset
       ccMfP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccMfZ; else goto ccMfY;
       ccMfZ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccMfY: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccMfP_info" {
     block_ccMfP_info:
         const _ccMfP;
         const 0;
         const 30;
 },
 sat_scLKF_entry() //  [R1]
         { []
         }
     {offset
       ccMg0: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto ccMg4; else goto ccMg3;
       ccMg4: // global
           HpAlloc = 72;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMg3: // global
           _scLJ4::P64 = P64[R1 + 16];
           _scLJ5::P64 = P64[R1 + 24];
           _scLJ6::P64 = P64[R1 + 32];
           _scLJD::P64 = P64[R1 + 40];
           _scLJI::P64 = P64[R1 + 48];
           _scLJN::P64 = P64[R1 + 56];
           _scLJT::P64 = P64[R1 + 64];
           I64[Hp - 64] = sat_scLKE_info;
           P64[Hp - 48] = _scLJ4::P64;
           P64[Hp - 40] = _scLJ5::P64;
           P64[Hp - 32] = _scLJ6::P64;
           P64[Hp - 24] = _scLJD::P64;
           P64[Hp - 16] = _scLJI::P64;
           P64[Hp - 8] = _scLJN::P64;
           P64[Hp] = _scLJT::P64;
           R3 = Hp - 64;
           R2 = lvl9_rcHpE_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLKF_info" {
     sat_scLKF_info:
         const sat_scLKF_entry;
         const 7;
         const 12884901903;
         const ScMjD_srt;
 },
 sat_scLKG_entry() //  [R1]
         { []
         }
     {offset
       ccMg5: // global
           _scLKG::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccMg6; else goto ccMg7;
       ccMg7: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto ccMg9; else goto ccMg8;
       ccMg9: // global
           HpAlloc = 72;
           goto ccMg6;
       ccMg6: // global
           R1 = _scLKG::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMg8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scLKG::P64;
           _scLJ4::P64 = P64[_scLKG::P64 + 16];
           _scLJ5::P64 = P64[_scLKG::P64 + 24];
           _scLJ6::P64 = P64[_scLKG::P64 + 32];
           _scLJD::P64 = P64[_scLKG::P64 + 40];
           _scLJI::P64 = P64[_scLKG::P64 + 48];
           _scLJN::P64 = P64[_scLKG::P64 + 56];
           _scLJT::P64 = P64[_scLKG::P64 + 64];
           I64[Hp - 64] = sat_scLKF_info;
           P64[Hp - 48] = _scLJ4::P64;
           P64[Hp - 40] = _scLJ5::P64;
           P64[Hp - 32] = _scLJ6::P64;
           P64[Hp - 24] = _scLJD::P64;
           P64[Hp - 16] = _scLJI::P64;
           P64[Hp - 8] = _scLJN::P64;
           P64[Hp] = _scLJT::P64;
           R3 = Hp - 64;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLKG_info" {
     sat_scLKG_info:
         const sat_scLKG_entry;
         const 7;
         const 12884901903;
         const ScMjD_srt;
 },
 sat_scLKK_entry() //  [R1]
         { []
         }
     {offset
       ccMgd: // global
           _scLKK::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto ccMge; else goto ccMgf;
       ccMgf: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto ccMgh; else goto ccMgg;
       ccMgh: // global
           HpAlloc = 72;
           goto ccMge;
       ccMge: // global
           R1 = _scLKK::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMgg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scLKK::P64;
           _scLJ4::P64 = P64[_scLKK::P64 + 16];
           _scLJ5::P64 = P64[_scLKK::P64 + 24];
           _scLJ6::P64 = P64[_scLKK::P64 + 32];
           _scLJy::P64 = P64[_scLKK::P64 + 40];
           _scLJD::P64 = P64[_scLKK::P64 + 48];
           _scLJI::P64 = P64[_scLKK::P64 + 56];
           _scLJN::P64 = P64[_scLKK::P64 + 64];
           _scLJT::P64 = P64[_scLKK::P64 + 72];
           I64[Hp - 64] = sat_scLKG_info;
           P64[Hp - 48] = _scLJ4::P64;
           P64[Hp - 40] = _scLJ5::P64;
           P64[Hp - 32] = _scLJ6::P64;
           P64[Hp - 24] = _scLJD::P64;
           P64[Hp - 16] = _scLJI::P64;
           P64[Hp - 8] = _scLJN::P64;
           P64[Hp] = _scLJT::P64;
           I64[Sp - 24] = block_ccMga_info;
           R4 = Hp - 64;
           R3 = _scLJy::P64;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLKK_info" {
     sat_scLKK_info:
         const sat_scLKK_entry;
         const 8;
         const 12884901903;
         const ScMjD_srt;
 },
 _ccMga() //  [R1, R2]
         { []
         }
     {offset
       ccMga: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccMgk; else goto ccMgj;
       ccMgk: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccMgj: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccMga_info" {
     block_ccMga_info:
         const _ccMga;
         const 0;
         const 30;
 },
 sat_scLKL_entry() //  [R1]
         { []
         }
     {offset
       ccMgl: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto ccMgp; else goto ccMgo;
       ccMgp: // global
           HpAlloc = 80;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMgo: // global
           _scLJ4::P64 = P64[R1 + 16];
           _scLJ5::P64 = P64[R1 + 24];
           _scLJ6::P64 = P64[R1 + 32];
           _scLJy::P64 = P64[R1 + 40];
           _scLJD::P64 = P64[R1 + 48];
           _scLJI::P64 = P64[R1 + 56];
           _scLJN::P64 = P64[R1 + 64];
           _scLJT::P64 = P64[R1 + 72];
           I64[Hp - 72] = sat_scLKK_info;
           P64[Hp - 56] = _scLJ4::P64;
           P64[Hp - 48] = _scLJ5::P64;
           P64[Hp - 40] = _scLJ6::P64;
           P64[Hp - 32] = _scLJy::P64;
           P64[Hp - 24] = _scLJD::P64;
           P64[Hp - 16] = _scLJI::P64;
           P64[Hp - 8] = _scLJN::P64;
           P64[Hp] = _scLJT::P64;
           R3 = Hp - 72;
           R2 = lvl8_rcHpD_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLKL_info" {
     sat_scLKL_info:
         const sat_scLKL_entry;
         const 8;
         const 12884901903;
         const ScMjD_srt;
 },
 sat_scLKM_entry() //  [R1]
         { []
         }
     {offset
       ccMgq: // global
           _scLKM::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccMgr; else goto ccMgs;
       ccMgs: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto ccMgu; else goto ccMgt;
       ccMgu: // global
           HpAlloc = 80;
           goto ccMgr;
       ccMgr: // global
           R1 = _scLKM::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMgt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scLKM::P64;
           _scLJ4::P64 = P64[_scLKM::P64 + 16];
           _scLJ5::P64 = P64[_scLKM::P64 + 24];
           _scLJ6::P64 = P64[_scLKM::P64 + 32];
           _scLJy::P64 = P64[_scLKM::P64 + 40];
           _scLJD::P64 = P64[_scLKM::P64 + 48];
           _scLJI::P64 = P64[_scLKM::P64 + 56];
           _scLJN::P64 = P64[_scLKM::P64 + 64];
           _scLJT::P64 = P64[_scLKM::P64 + 72];
           I64[Hp - 72] = sat_scLKL_info;
           P64[Hp - 56] = _scLJ4::P64;
           P64[Hp - 48] = _scLJ5::P64;
           P64[Hp - 40] = _scLJ6::P64;
           P64[Hp - 32] = _scLJy::P64;
           P64[Hp - 24] = _scLJD::P64;
           P64[Hp - 16] = _scLJI::P64;
           P64[Hp - 8] = _scLJN::P64;
           P64[Hp] = _scLJT::P64;
           R3 = Hp - 72;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLKM_info" {
     sat_scLKM_info:
         const sat_scLKM_entry;
         const 8;
         const 12884901903;
         const ScMjD_srt;
 },
 sat_scLKQ_entry() //  [R1]
         { []
         }
     {offset
       ccMgy: // global
           _scLKQ::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto ccMgz; else goto ccMgA;
       ccMgA: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto ccMgC; else goto ccMgB;
       ccMgC: // global
           HpAlloc = 80;
           goto ccMgz;
       ccMgz: // global
           R1 = _scLKQ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMgB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scLKQ::P64;
           _scLJ4::P64 = P64[_scLKQ::P64 + 16];
           _scLJ5::P64 = P64[_scLKQ::P64 + 24];
           _scLJ6::P64 = P64[_scLKQ::P64 + 32];
           _scLJt::P64 = P64[_scLKQ::P64 + 40];
           _scLJy::P64 = P64[_scLKQ::P64 + 48];
           _scLJD::P64 = P64[_scLKQ::P64 + 56];
           _scLJI::P64 = P64[_scLKQ::P64 + 64];
           _scLJN::P64 = P64[_scLKQ::P64 + 72];
           _scLJT::P64 = P64[_scLKQ::P64 + 80];
           I64[Hp - 72] = sat_scLKM_info;
           P64[Hp - 56] = _scLJ4::P64;
           P64[Hp - 48] = _scLJ5::P64;
           P64[Hp - 40] = _scLJ6::P64;
           P64[Hp - 32] = _scLJy::P64;
           P64[Hp - 24] = _scLJD::P64;
           P64[Hp - 16] = _scLJI::P64;
           P64[Hp - 8] = _scLJN::P64;
           P64[Hp] = _scLJT::P64;
           I64[Sp - 24] = block_ccMgv_info;
           R4 = Hp - 72;
           R3 = _scLJt::P64;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLKQ_info" {
     sat_scLKQ_info:
         const sat_scLKQ_entry;
         const 9;
         const 12884901903;
         const ScMjD_srt;
 },
 _ccMgv() //  [R1, R2]
         { []
         }
     {offset
       ccMgv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccMgF; else goto ccMgE;
       ccMgF: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccMgE: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccMgv_info" {
     block_ccMgv_info:
         const _ccMgv;
         const 0;
         const 30;
 },
 sat_scLKR_entry() //  [R1]
         { []
         }
     {offset
       ccMgG: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto ccMgK; else goto ccMgJ;
       ccMgK: // global
           HpAlloc = 88;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMgJ: // global
           _scLJ4::P64 = P64[R1 + 16];
           _scLJ5::P64 = P64[R1 + 24];
           _scLJ6::P64 = P64[R1 + 32];
           _scLJt::P64 = P64[R1 + 40];
           _scLJy::P64 = P64[R1 + 48];
           _scLJD::P64 = P64[R1 + 56];
           _scLJI::P64 = P64[R1 + 64];
           _scLJN::P64 = P64[R1 + 72];
           _scLJT::P64 = P64[R1 + 80];
           I64[Hp - 80] = sat_scLKQ_info;
           P64[Hp - 64] = _scLJ4::P64;
           P64[Hp - 56] = _scLJ5::P64;
           P64[Hp - 48] = _scLJ6::P64;
           P64[Hp - 40] = _scLJt::P64;
           P64[Hp - 32] = _scLJy::P64;
           P64[Hp - 24] = _scLJD::P64;
           P64[Hp - 16] = _scLJI::P64;
           P64[Hp - 8] = _scLJN::P64;
           P64[Hp] = _scLJT::P64;
           R3 = Hp - 80;
           R2 = lvl7_rcHpC_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLKR_info" {
     sat_scLKR_info:
         const sat_scLKR_entry;
         const 9;
         const 12884901903;
         const ScMjD_srt;
 },
 sat_scLKS_entry() //  [R1]
         { []
         }
     {offset
       ccMgL: // global
           _scLKS::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccMgM; else goto ccMgN;
       ccMgN: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto ccMgP; else goto ccMgO;
       ccMgP: // global
           HpAlloc = 88;
           goto ccMgM;
       ccMgM: // global
           R1 = _scLKS::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMgO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scLKS::P64;
           _scLJ4::P64 = P64[_scLKS::P64 + 16];
           _scLJ5::P64 = P64[_scLKS::P64 + 24];
           _scLJ6::P64 = P64[_scLKS::P64 + 32];
           _scLJt::P64 = P64[_scLKS::P64 + 40];
           _scLJy::P64 = P64[_scLKS::P64 + 48];
           _scLJD::P64 = P64[_scLKS::P64 + 56];
           _scLJI::P64 = P64[_scLKS::P64 + 64];
           _scLJN::P64 = P64[_scLKS::P64 + 72];
           _scLJT::P64 = P64[_scLKS::P64 + 80];
           I64[Hp - 80] = sat_scLKR_info;
           P64[Hp - 64] = _scLJ4::P64;
           P64[Hp - 56] = _scLJ5::P64;
           P64[Hp - 48] = _scLJ6::P64;
           P64[Hp - 40] = _scLJt::P64;
           P64[Hp - 32] = _scLJy::P64;
           P64[Hp - 24] = _scLJD::P64;
           P64[Hp - 16] = _scLJI::P64;
           P64[Hp - 8] = _scLJN::P64;
           P64[Hp] = _scLJT::P64;
           R3 = Hp - 80;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLKS_info" {
     sat_scLKS_info:
         const sat_scLKS_entry;
         const 9;
         const 12884901903;
         const ScMjD_srt;
 },
 sat_scLKW_entry() //  [R1]
         { []
         }
     {offset
       ccMgT: // global
           _scLKW::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto ccMgU; else goto ccMgV;
       ccMgV: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto ccMgX; else goto ccMgW;
       ccMgX: // global
           HpAlloc = 88;
           goto ccMgU;
       ccMgU: // global
           R1 = _scLKW::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMgW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scLKW::P64;
           _scLJ4::P64 = P64[_scLKW::P64 + 16];
           _scLJ5::P64 = P64[_scLKW::P64 + 24];
           _scLJ6::P64 = P64[_scLKW::P64 + 32];
           _scLJo::P64 = P64[_scLKW::P64 + 40];
           _scLJt::P64 = P64[_scLKW::P64 + 48];
           _scLJy::P64 = P64[_scLKW::P64 + 56];
           _scLJD::P64 = P64[_scLKW::P64 + 64];
           _scLJI::P64 = P64[_scLKW::P64 + 72];
           _scLJN::P64 = P64[_scLKW::P64 + 80];
           _scLJT::P64 = P64[_scLKW::P64 + 88];
           I64[Hp - 80] = sat_scLKS_info;
           P64[Hp - 64] = _scLJ4::P64;
           P64[Hp - 56] = _scLJ5::P64;
           P64[Hp - 48] = _scLJ6::P64;
           P64[Hp - 40] = _scLJt::P64;
           P64[Hp - 32] = _scLJy::P64;
           P64[Hp - 24] = _scLJD::P64;
           P64[Hp - 16] = _scLJI::P64;
           P64[Hp - 8] = _scLJN::P64;
           P64[Hp] = _scLJT::P64;
           I64[Sp - 24] = block_ccMgQ_info;
           R4 = Hp - 80;
           R3 = _scLJo::P64;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLKW_info" {
     sat_scLKW_info:
         const sat_scLKW_entry;
         const 10;
         const 12884901903;
         const ScMjD_srt;
 },
 _ccMgQ() //  [R1, R2]
         { []
         }
     {offset
       ccMgQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccMh0; else goto ccMgZ;
       ccMh0: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccMgZ: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccMgQ_info" {
     block_ccMgQ_info:
         const _ccMgQ;
         const 0;
         const 30;
 },
 sat_scLKX_entry() //  [R1]
         { []
         }
     {offset
       ccMh1: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto ccMh5; else goto ccMh4;
       ccMh5: // global
           HpAlloc = 96;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMh4: // global
           _scLJ4::P64 = P64[R1 + 16];
           _scLJ5::P64 = P64[R1 + 24];
           _scLJ6::P64 = P64[R1 + 32];
           _scLJo::P64 = P64[R1 + 40];
           _scLJt::P64 = P64[R1 + 48];
           _scLJy::P64 = P64[R1 + 56];
           _scLJD::P64 = P64[R1 + 64];
           _scLJI::P64 = P64[R1 + 72];
           _scLJN::P64 = P64[R1 + 80];
           _scLJT::P64 = P64[R1 + 88];
           I64[Hp - 88] = sat_scLKW_info;
           P64[Hp - 72] = _scLJ4::P64;
           P64[Hp - 64] = _scLJ5::P64;
           P64[Hp - 56] = _scLJ6::P64;
           P64[Hp - 48] = _scLJo::P64;
           P64[Hp - 40] = _scLJt::P64;
           P64[Hp - 32] = _scLJy::P64;
           P64[Hp - 24] = _scLJD::P64;
           P64[Hp - 16] = _scLJI::P64;
           P64[Hp - 8] = _scLJN::P64;
           P64[Hp] = _scLJT::P64;
           R3 = Hp - 88;
           R2 = lvl6_rcHpB_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLKX_info" {
     sat_scLKX_info:
         const sat_scLKX_entry;
         const 10;
         const 12884901903;
         const ScMjD_srt;
 },
 sat_scLKY_entry() //  [R1]
         { []
         }
     {offset
       ccMh6: // global
           _scLKY::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccMh7; else goto ccMh8;
       ccMh8: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto ccMha; else goto ccMh9;
       ccMha: // global
           HpAlloc = 96;
           goto ccMh7;
       ccMh7: // global
           R1 = _scLKY::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMh9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scLKY::P64;
           _scLJ4::P64 = P64[_scLKY::P64 + 16];
           _scLJ5::P64 = P64[_scLKY::P64 + 24];
           _scLJ6::P64 = P64[_scLKY::P64 + 32];
           _scLJo::P64 = P64[_scLKY::P64 + 40];
           _scLJt::P64 = P64[_scLKY::P64 + 48];
           _scLJy::P64 = P64[_scLKY::P64 + 56];
           _scLJD::P64 = P64[_scLKY::P64 + 64];
           _scLJI::P64 = P64[_scLKY::P64 + 72];
           _scLJN::P64 = P64[_scLKY::P64 + 80];
           _scLJT::P64 = P64[_scLKY::P64 + 88];
           I64[Hp - 88] = sat_scLKX_info;
           P64[Hp - 72] = _scLJ4::P64;
           P64[Hp - 64] = _scLJ5::P64;
           P64[Hp - 56] = _scLJ6::P64;
           P64[Hp - 48] = _scLJo::P64;
           P64[Hp - 40] = _scLJt::P64;
           P64[Hp - 32] = _scLJy::P64;
           P64[Hp - 24] = _scLJD::P64;
           P64[Hp - 16] = _scLJI::P64;
           P64[Hp - 8] = _scLJN::P64;
           P64[Hp] = _scLJT::P64;
           R3 = Hp - 88;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLKY_info" {
     sat_scLKY_info:
         const sat_scLKY_entry;
         const 10;
         const 12884901903;
         const ScMjD_srt;
 },
 sat_scLL2_entry() //  [R1]
         { []
         }
     {offset
       ccMhe: // global
           _scLL2::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto ccMhf; else goto ccMhg;
       ccMhg: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto ccMhi; else goto ccMhh;
       ccMhi: // global
           HpAlloc = 96;
           goto ccMhf;
       ccMhf: // global
           R1 = _scLL2::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMhh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scLL2::P64;
           _scLJ4::P64 = P64[_scLL2::P64 + 16];
           _scLJ5::P64 = P64[_scLL2::P64 + 24];
           _scLJ6::P64 = P64[_scLL2::P64 + 32];
           _scLJj::P64 = P64[_scLL2::P64 + 40];
           _scLJo::P64 = P64[_scLL2::P64 + 48];
           _scLJt::P64 = P64[_scLL2::P64 + 56];
           _scLJy::P64 = P64[_scLL2::P64 + 64];
           _scLJD::P64 = P64[_scLL2::P64 + 72];
           _scLJI::P64 = P64[_scLL2::P64 + 80];
           _scLJN::P64 = P64[_scLL2::P64 + 88];
           _scLJT::P64 = P64[_scLL2::P64 + 96];
           I64[Hp - 88] = sat_scLKY_info;
           P64[Hp - 72] = _scLJ4::P64;
           P64[Hp - 64] = _scLJ5::P64;
           P64[Hp - 56] = _scLJ6::P64;
           P64[Hp - 48] = _scLJo::P64;
           P64[Hp - 40] = _scLJt::P64;
           P64[Hp - 32] = _scLJy::P64;
           P64[Hp - 24] = _scLJD::P64;
           P64[Hp - 16] = _scLJI::P64;
           P64[Hp - 8] = _scLJN::P64;
           P64[Hp] = _scLJT::P64;
           I64[Sp - 24] = block_ccMhb_info;
           R4 = Hp - 88;
           R3 = _scLJj::P64;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLL2_info" {
     sat_scLL2_info:
         const sat_scLL2_entry;
         const 11;
         const 12884901903;
         const ScMjD_srt;
 },
 _ccMhb() //  [R1, R2]
         { []
         }
     {offset
       ccMhb: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccMhl; else goto ccMhk;
       ccMhl: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccMhk: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccMhb_info" {
     block_ccMhb_info:
         const _ccMhb;
         const 0;
         const 30;
 },
 sat_scLL3_entry() //  [R1]
         { []
         }
     {offset
       ccMhm: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto ccMhq; else goto ccMhp;
       ccMhq: // global
           HpAlloc = 104;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMhp: // global
           _scLJ4::P64 = P64[R1 + 16];
           _scLJ5::P64 = P64[R1 + 24];
           _scLJ6::P64 = P64[R1 + 32];
           _scLJj::P64 = P64[R1 + 40];
           _scLJo::P64 = P64[R1 + 48];
           _scLJt::P64 = P64[R1 + 56];
           _scLJy::P64 = P64[R1 + 64];
           _scLJD::P64 = P64[R1 + 72];
           _scLJI::P64 = P64[R1 + 80];
           _scLJN::P64 = P64[R1 + 88];
           _scLJT::P64 = P64[R1 + 96];
           I64[Hp - 96] = sat_scLL2_info;
           P64[Hp - 80] = _scLJ4::P64;
           P64[Hp - 72] = _scLJ5::P64;
           P64[Hp - 64] = _scLJ6::P64;
           P64[Hp - 56] = _scLJj::P64;
           P64[Hp - 48] = _scLJo::P64;
           P64[Hp - 40] = _scLJt::P64;
           P64[Hp - 32] = _scLJy::P64;
           P64[Hp - 24] = _scLJD::P64;
           P64[Hp - 16] = _scLJI::P64;
           P64[Hp - 8] = _scLJN::P64;
           P64[Hp] = _scLJT::P64;
           R3 = Hp - 96;
           R2 = lvl5_rcHpA_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLL3_info" {
     sat_scLL3_info:
         const sat_scLL3_entry;
         const 11;
         const 12884901903;
         const ScMjD_srt;
 },
 sat_scLL4_entry() //  [R1]
         { []
         }
     {offset
       ccMhr: // global
           _scLL4::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccMhs; else goto ccMht;
       ccMht: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto ccMhv; else goto ccMhu;
       ccMhv: // global
           HpAlloc = 104;
           goto ccMhs;
       ccMhs: // global
           R1 = _scLL4::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMhu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scLL4::P64;
           _scLJ4::P64 = P64[_scLL4::P64 + 16];
           _scLJ5::P64 = P64[_scLL4::P64 + 24];
           _scLJ6::P64 = P64[_scLL4::P64 + 32];
           _scLJj::P64 = P64[_scLL4::P64 + 40];
           _scLJo::P64 = P64[_scLL4::P64 + 48];
           _scLJt::P64 = P64[_scLL4::P64 + 56];
           _scLJy::P64 = P64[_scLL4::P64 + 64];
           _scLJD::P64 = P64[_scLL4::P64 + 72];
           _scLJI::P64 = P64[_scLL4::P64 + 80];
           _scLJN::P64 = P64[_scLL4::P64 + 88];
           _scLJT::P64 = P64[_scLL4::P64 + 96];
           I64[Hp - 96] = sat_scLL3_info;
           P64[Hp - 80] = _scLJ4::P64;
           P64[Hp - 72] = _scLJ5::P64;
           P64[Hp - 64] = _scLJ6::P64;
           P64[Hp - 56] = _scLJj::P64;
           P64[Hp - 48] = _scLJo::P64;
           P64[Hp - 40] = _scLJt::P64;
           P64[Hp - 32] = _scLJy::P64;
           P64[Hp - 24] = _scLJD::P64;
           P64[Hp - 16] = _scLJI::P64;
           P64[Hp - 8] = _scLJN::P64;
           P64[Hp] = _scLJT::P64;
           R3 = Hp - 96;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLL4_info" {
     sat_scLL4_info:
         const sat_scLL4_entry;
         const 11;
         const 12884901903;
         const ScMjD_srt;
 },
 sat_scLL8_entry() //  [R1]
         { []
         }
     {offset
       ccMhz: // global
           _scLL8::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto ccMhA; else goto ccMhB;
       ccMhB: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto ccMhD; else goto ccMhC;
       ccMhD: // global
           HpAlloc = 104;
           goto ccMhA;
       ccMhA: // global
           R1 = _scLL8::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMhC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scLL8::P64;
           _scLJ4::P64 = P64[_scLL8::P64 + 16];
           _scLJ5::P64 = P64[_scLL8::P64 + 24];
           _scLJ6::P64 = P64[_scLL8::P64 + 32];
           _scLJe::P64 = P64[_scLL8::P64 + 40];
           _scLJj::P64 = P64[_scLL8::P64 + 48];
           _scLJo::P64 = P64[_scLL8::P64 + 56];
           _scLJt::P64 = P64[_scLL8::P64 + 64];
           _scLJy::P64 = P64[_scLL8::P64 + 72];
           _scLJD::P64 = P64[_scLL8::P64 + 80];
           _scLJI::P64 = P64[_scLL8::P64 + 88];
           _scLJN::P64 = P64[_scLL8::P64 + 96];
           _scLJT::P64 = P64[_scLL8::P64 + 104];
           I64[Hp - 96] = sat_scLL4_info;
           P64[Hp - 80] = _scLJ4::P64;
           P64[Hp - 72] = _scLJ5::P64;
           P64[Hp - 64] = _scLJ6::P64;
           P64[Hp - 56] = _scLJj::P64;
           P64[Hp - 48] = _scLJo::P64;
           P64[Hp - 40] = _scLJt::P64;
           P64[Hp - 32] = _scLJy::P64;
           P64[Hp - 24] = _scLJD::P64;
           P64[Hp - 16] = _scLJI::P64;
           P64[Hp - 8] = _scLJN::P64;
           P64[Hp] = _scLJT::P64;
           I64[Sp - 24] = block_ccMhw_info;
           R4 = Hp - 96;
           R3 = _scLJe::P64;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLL8_info" {
     sat_scLL8_info:
         const sat_scLL8_entry;
         const 12;
         const 12884901903;
         const ScMjD_srt;
 },
 _ccMhw() //  [R1, R2]
         { []
         }
     {offset
       ccMhw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccMhG; else goto ccMhF;
       ccMhG: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccMhF: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccMhw_info" {
     block_ccMhw_info:
         const _ccMhw;
         const 0;
         const 30;
 },
 sat_scLL9_entry() //  [R1]
         { []
         }
     {offset
       ccMhH: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto ccMhL; else goto ccMhK;
       ccMhL: // global
           HpAlloc = 112;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMhK: // global
           _scLJ4::P64 = P64[R1 + 16];
           _scLJ5::P64 = P64[R1 + 24];
           _scLJ6::P64 = P64[R1 + 32];
           _scLJe::P64 = P64[R1 + 40];
           _scLJj::P64 = P64[R1 + 48];
           _scLJo::P64 = P64[R1 + 56];
           _scLJt::P64 = P64[R1 + 64];
           _scLJy::P64 = P64[R1 + 72];
           _scLJD::P64 = P64[R1 + 80];
           _scLJI::P64 = P64[R1 + 88];
           _scLJN::P64 = P64[R1 + 96];
           _scLJT::P64 = P64[R1 + 104];
           I64[Hp - 104] = sat_scLL8_info;
           P64[Hp - 88] = _scLJ4::P64;
           P64[Hp - 80] = _scLJ5::P64;
           P64[Hp - 72] = _scLJ6::P64;
           P64[Hp - 64] = _scLJe::P64;
           P64[Hp - 56] = _scLJj::P64;
           P64[Hp - 48] = _scLJo::P64;
           P64[Hp - 40] = _scLJt::P64;
           P64[Hp - 32] = _scLJy::P64;
           P64[Hp - 24] = _scLJD::P64;
           P64[Hp - 16] = _scLJI::P64;
           P64[Hp - 8] = _scLJN::P64;
           P64[Hp] = _scLJT::P64;
           R3 = Hp - 104;
           R2 = lvl4_rcHpz_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLL9_info" {
     sat_scLL9_info:
         const sat_scLL9_entry;
         const 12;
         const 12884901903;
         const ScMjD_srt;
 },
 sat_scLLa_entry() //  [R1]
         { []
         }
     {offset
       ccMhM: // global
           _scLLa::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccMhN; else goto ccMhO;
       ccMhO: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto ccMhQ; else goto ccMhP;
       ccMhQ: // global
           HpAlloc = 112;
           goto ccMhN;
       ccMhN: // global
           R1 = _scLLa::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMhP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scLLa::P64;
           _scLJ4::P64 = P64[_scLLa::P64 + 16];
           _scLJ5::P64 = P64[_scLLa::P64 + 24];
           _scLJ6::P64 = P64[_scLLa::P64 + 32];
           _scLJe::P64 = P64[_scLLa::P64 + 40];
           _scLJj::P64 = P64[_scLLa::P64 + 48];
           _scLJo::P64 = P64[_scLLa::P64 + 56];
           _scLJt::P64 = P64[_scLLa::P64 + 64];
           _scLJy::P64 = P64[_scLLa::P64 + 72];
           _scLJD::P64 = P64[_scLLa::P64 + 80];
           _scLJI::P64 = P64[_scLLa::P64 + 88];
           _scLJN::P64 = P64[_scLLa::P64 + 96];
           _scLJT::P64 = P64[_scLLa::P64 + 104];
           I64[Hp - 104] = sat_scLL9_info;
           P64[Hp - 88] = _scLJ4::P64;
           P64[Hp - 80] = _scLJ5::P64;
           P64[Hp - 72] = _scLJ6::P64;
           P64[Hp - 64] = _scLJe::P64;
           P64[Hp - 56] = _scLJj::P64;
           P64[Hp - 48] = _scLJo::P64;
           P64[Hp - 40] = _scLJt::P64;
           P64[Hp - 32] = _scLJy::P64;
           P64[Hp - 24] = _scLJD::P64;
           P64[Hp - 16] = _scLJI::P64;
           P64[Hp - 8] = _scLJN::P64;
           P64[Hp] = _scLJT::P64;
           R3 = Hp - 104;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLLa_info" {
     sat_scLLa_info:
         const sat_scLLa_entry;
         const 12;
         const 12884901903;
         const ScMjD_srt;
 },
 sat_scLLe_entry() //  [R1]
         { []
         }
     {offset
       ccMhU: // global
           _scLLe::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto ccMhV; else goto ccMhW;
       ccMhW: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto ccMhY; else goto ccMhX;
       ccMhY: // global
           HpAlloc = 112;
           goto ccMhV;
       ccMhV: // global
           R1 = _scLLe::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMhX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scLLe::P64;
           _scLJ4::P64 = P64[_scLLe::P64 + 16];
           _scLJ5::P64 = P64[_scLLe::P64 + 24];
           _scLJ6::P64 = P64[_scLLe::P64 + 32];
           _scLJ9::P64 = P64[_scLLe::P64 + 40];
           _scLJe::P64 = P64[_scLLe::P64 + 48];
           _scLJj::P64 = P64[_scLLe::P64 + 56];
           _scLJo::P64 = P64[_scLLe::P64 + 64];
           _scLJt::P64 = P64[_scLLe::P64 + 72];
           _scLJy::P64 = P64[_scLLe::P64 + 80];
           _scLJD::P64 = P64[_scLLe::P64 + 88];
           _scLJI::P64 = P64[_scLLe::P64 + 96];
           _scLJN::P64 = P64[_scLLe::P64 + 104];
           _scLJT::P64 = P64[_scLLe::P64 + 112];
           I64[Hp - 104] = sat_scLLa_info;
           P64[Hp - 88] = _scLJ4::P64;
           P64[Hp - 80] = _scLJ5::P64;
           P64[Hp - 72] = _scLJ6::P64;
           P64[Hp - 64] = _scLJe::P64;
           P64[Hp - 56] = _scLJj::P64;
           P64[Hp - 48] = _scLJo::P64;
           P64[Hp - 40] = _scLJt::P64;
           P64[Hp - 32] = _scLJy::P64;
           P64[Hp - 24] = _scLJD::P64;
           P64[Hp - 16] = _scLJI::P64;
           P64[Hp - 8] = _scLJN::P64;
           P64[Hp] = _scLJT::P64;
           I64[Sp - 24] = block_ccMhR_info;
           R4 = Hp - 104;
           R3 = _scLJ9::P64;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLLe_info" {
     sat_scLLe_info:
         const sat_scLLe_entry;
         const 13;
         const 12884901903;
         const ScMjD_srt;
 },
 _ccMhR() //  [R1, R2]
         { []
         }
     {offset
       ccMhR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccMi1; else goto ccMi0;
       ccMi1: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccMi0: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccMhR_info" {
     block_ccMhR_info:
         const _ccMhR;
         const 0;
         const 30;
 },
 sat_scLLf_entry() //  [R1]
         { []
         }
     {offset
       ccMi2: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto ccMi6; else goto ccMi5;
       ccMi6: // global
           HpAlloc = 120;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMi5: // global
           _scLJ4::P64 = P64[R1 + 16];
           _scLJ5::P64 = P64[R1 + 24];
           _scLJ6::P64 = P64[R1 + 32];
           _scLJ9::P64 = P64[R1 + 40];
           _scLJe::P64 = P64[R1 + 48];
           _scLJj::P64 = P64[R1 + 56];
           _scLJo::P64 = P64[R1 + 64];
           _scLJt::P64 = P64[R1 + 72];
           _scLJy::P64 = P64[R1 + 80];
           _scLJD::P64 = P64[R1 + 88];
           _scLJI::P64 = P64[R1 + 96];
           _scLJN::P64 = P64[R1 + 104];
           _scLJT::P64 = P64[R1 + 112];
           I64[Hp - 112] = sat_scLLe_info;
           P64[Hp - 96] = _scLJ4::P64;
           P64[Hp - 88] = _scLJ5::P64;
           P64[Hp - 80] = _scLJ6::P64;
           P64[Hp - 72] = _scLJ9::P64;
           P64[Hp - 64] = _scLJe::P64;
           P64[Hp - 56] = _scLJj::P64;
           P64[Hp - 48] = _scLJo::P64;
           P64[Hp - 40] = _scLJt::P64;
           P64[Hp - 32] = _scLJy::P64;
           P64[Hp - 24] = _scLJD::P64;
           P64[Hp - 16] = _scLJI::P64;
           P64[Hp - 8] = _scLJN::P64;
           P64[Hp] = _scLJT::P64;
           R3 = Hp - 112;
           R2 = lvl3_rcHpy_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLLf_info" {
     sat_scLLf_info:
         const sat_scLLf_entry;
         const 13;
         const 12884901903;
         const ScMjD_srt;
 },
 sat_scLLg_entry() //  [R1]
         { []
         }
     {offset
       ccMi7: // global
           _scLLg::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccMi8; else goto ccMi9;
       ccMi9: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto ccMib; else goto ccMia;
       ccMib: // global
           HpAlloc = 120;
           goto ccMi8;
       ccMi8: // global
           R1 = _scLLg::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMia: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scLLg::P64;
           _scLJ4::P64 = P64[_scLLg::P64 + 16];
           _scLJ5::P64 = P64[_scLLg::P64 + 24];
           _scLJ6::P64 = P64[_scLLg::P64 + 32];
           _scLJ9::P64 = P64[_scLLg::P64 + 40];
           _scLJe::P64 = P64[_scLLg::P64 + 48];
           _scLJj::P64 = P64[_scLLg::P64 + 56];
           _scLJo::P64 = P64[_scLLg::P64 + 64];
           _scLJt::P64 = P64[_scLLg::P64 + 72];
           _scLJy::P64 = P64[_scLLg::P64 + 80];
           _scLJD::P64 = P64[_scLLg::P64 + 88];
           _scLJI::P64 = P64[_scLLg::P64 + 96];
           _scLJN::P64 = P64[_scLLg::P64 + 104];
           _scLJT::P64 = P64[_scLLg::P64 + 112];
           I64[Hp - 112] = sat_scLLf_info;
           P64[Hp - 96] = _scLJ4::P64;
           P64[Hp - 88] = _scLJ5::P64;
           P64[Hp - 80] = _scLJ6::P64;
           P64[Hp - 72] = _scLJ9::P64;
           P64[Hp - 64] = _scLJe::P64;
           P64[Hp - 56] = _scLJj::P64;
           P64[Hp - 48] = _scLJo::P64;
           P64[Hp - 40] = _scLJt::P64;
           P64[Hp - 32] = _scLJy::P64;
           P64[Hp - 24] = _scLJD::P64;
           P64[Hp - 16] = _scLJI::P64;
           P64[Hp - 8] = _scLJN::P64;
           P64[Hp] = _scLJT::P64;
           R3 = Hp - 112;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLLg_info" {
     sat_scLLg_info:
         const sat_scLLg_entry;
         const 13;
         const 12884901903;
         const ScMjD_srt;
 },
 sat_scLLk_entry() //  [R1]
         { []
         }
     {offset
       ccMic: // global
           if ((Sp + -128) < SpLim) (likely: False) goto ccMij; else goto ccMik;
       ccMij: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMik: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 128] = block_ccMbh_info;
           _scLJ4::P64 = P64[R1 + 24];
           _scLJ5::P64 = P64[R1 + 32];
           _scLJ6::P64 = P64[R1 + 40];
           _scLJ9::P64 = P64[R1 + 48];
           _scLJe::P64 = P64[R1 + 56];
           _scLJj::P64 = P64[R1 + 64];
           _scLJo::P64 = P64[R1 + 72];
           _scLJt::P64 = P64[R1 + 80];
           _scLJy::P64 = P64[R1 + 88];
           _scLJD::P64 = P64[R1 + 96];
           _scLJI::P64 = P64[R1 + 104];
           _scLJN::P64 = P64[R1 + 112];
           _scLJT::P64 = P64[R1 + 120];
           R1 = P64[R1 + 16];
           P64[Sp - 120] = _scLJ4::P64;
           P64[Sp - 112] = _scLJ5::P64;
           P64[Sp - 104] = _scLJ6::P64;
           P64[Sp - 96] = _scLJ9::P64;
           P64[Sp - 88] = _scLJe::P64;
           P64[Sp - 80] = _scLJj::P64;
           P64[Sp - 72] = _scLJo::P64;
           P64[Sp - 64] = _scLJt::P64;
           P64[Sp - 56] = _scLJy::P64;
           P64[Sp - 48] = _scLJD::P64;
           P64[Sp - 40] = _scLJI::P64;
           P64[Sp - 32] = _scLJN::P64;
           P64[Sp - 24] = _scLJT::P64;
           Sp = Sp - 128;
           if (R1 & 7 != 0) goto ucMir; else goto ccMbi;
       ucMir: // global
           call _ccMbh(R1) args: 0, res: 0, upd: 0;
       ccMbi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLLk_info" {
     sat_scLLk_info:
         const sat_scLLk_entry;
         const 14;
         const 12884901903;
         const ScMjD_srt;
 },
 _ccMbh() //  [R1]
         { []
         }
     {offset
       ccMbh: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto ccMin; else goto ccMim;
       ccMin: // global
           HpAlloc = 120;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       ccMim: // global
           _scLJY::I64 = I64[R1 + 7];
           I64[Hp - 112] = sat_scLLg_info;
           P64[Hp - 96] = P64[Sp + 8];
           P64[Hp - 88] = P64[Sp + 16];
           P64[Hp - 80] = P64[Sp + 24];
           P64[Hp - 72] = P64[Sp + 32];
           P64[Hp - 64] = P64[Sp + 40];
           P64[Hp - 56] = P64[Sp + 48];
           P64[Hp - 48] = P64[Sp + 56];
           P64[Hp - 40] = P64[Sp + 64];
           P64[Hp - 32] = P64[Sp + 72];
           P64[Hp - 24] = P64[Sp + 80];
           P64[Hp - 16] = P64[Sp + 88];
           P64[Hp - 8] = P64[Sp + 96];
           P64[Hp] = P64[Sp + 104];
           I64[Sp + 104] = block_ccMig_info;
           R3 = Hp - 112;
           R2 = _scLJY::I64;
           Sp = Sp + 104;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccMbh_info" {
     block_ccMbh_info:
         const _ccMbh;
         const 13;
         const 12884901918;
         const ScMjD_srt;
 },
 _ccMig() //  [R1, R2]
         { []
         }
     {offset
       ccMig: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccMiq; else goto ccMip;
       ccMiq: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccMip: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccMig_info" {
     block_ccMig_info:
         const _ccMig;
         const 0;
         const 30;
 },
 sat_scLLl_entry() //  [R1]
         { []
         }
     {offset
       ccMis: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto ccMiw; else goto ccMiv;
       ccMiw: // global
           HpAlloc = 128;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMiv: // global
           _scLIU::P64 = P64[R1 + 16];
           _scLJ4::P64 = P64[R1 + 24];
           _scLJ5::P64 = P64[R1 + 32];
           _scLJ6::P64 = P64[R1 + 40];
           _scLJ9::P64 = P64[R1 + 48];
           _scLJe::P64 = P64[R1 + 56];
           _scLJj::P64 = P64[R1 + 64];
           _scLJo::P64 = P64[R1 + 72];
           _scLJt::P64 = P64[R1 + 80];
           _scLJy::P64 = P64[R1 + 88];
           _scLJD::P64 = P64[R1 + 96];
           _scLJI::P64 = P64[R1 + 104];
           _scLJN::P64 = P64[R1 + 112];
           _scLJT::P64 = P64[R1 + 120];
           I64[Hp - 120] = sat_scLLk_info;
           P64[Hp - 104] = _scLIU::P64;
           P64[Hp - 96] = _scLJ4::P64;
           P64[Hp - 88] = _scLJ5::P64;
           P64[Hp - 80] = _scLJ6::P64;
           P64[Hp - 72] = _scLJ9::P64;
           P64[Hp - 64] = _scLJe::P64;
           P64[Hp - 56] = _scLJj::P64;
           P64[Hp - 48] = _scLJo::P64;
           P64[Hp - 40] = _scLJt::P64;
           P64[Hp - 32] = _scLJy::P64;
           P64[Hp - 24] = _scLJD::P64;
           P64[Hp - 16] = _scLJI::P64;
           P64[Hp - 8] = _scLJN::P64;
           P64[Hp] = _scLJT::P64;
           R3 = Hp - 120;
           R2 = lvl2_rcHpx_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLLl_info" {
     sat_scLLl_info:
         const sat_scLLl_entry;
         const 14;
         const 12884901903;
         const ScMjD_srt;
 },
 sat_scLLm_entry() //  [R1]
         { []
         }
     {offset
       ccMix: // global
           _scLLm::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccMiy; else goto ccMiz;
       ccMiz: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto ccMiB; else goto ccMiA;
       ccMiB: // global
           HpAlloc = 128;
           goto ccMiy;
       ccMiy: // global
           R1 = _scLLm::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMiA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scLLm::P64;
           _scLIU::P64 = P64[_scLLm::P64 + 16];
           _scLJ4::P64 = P64[_scLLm::P64 + 24];
           _scLJ5::P64 = P64[_scLLm::P64 + 32];
           _scLJ6::P64 = P64[_scLLm::P64 + 40];
           _scLJ9::P64 = P64[_scLLm::P64 + 48];
           _scLJe::P64 = P64[_scLLm::P64 + 56];
           _scLJj::P64 = P64[_scLLm::P64 + 64];
           _scLJo::P64 = P64[_scLLm::P64 + 72];
           _scLJt::P64 = P64[_scLLm::P64 + 80];
           _scLJy::P64 = P64[_scLLm::P64 + 88];
           _scLJD::P64 = P64[_scLLm::P64 + 96];
           _scLJI::P64 = P64[_scLLm::P64 + 104];
           _scLJN::P64 = P64[_scLLm::P64 + 112];
           _scLJT::P64 = P64[_scLLm::P64 + 120];
           I64[Hp - 120] = sat_scLLl_info;
           P64[Hp - 104] = _scLIU::P64;
           P64[Hp - 96] = _scLJ4::P64;
           P64[Hp - 88] = _scLJ5::P64;
           P64[Hp - 80] = _scLJ6::P64;
           P64[Hp - 72] = _scLJ9::P64;
           P64[Hp - 64] = _scLJe::P64;
           P64[Hp - 56] = _scLJj::P64;
           P64[Hp - 48] = _scLJo::P64;
           P64[Hp - 40] = _scLJt::P64;
           P64[Hp - 32] = _scLJy::P64;
           P64[Hp - 24] = _scLJD::P64;
           P64[Hp - 16] = _scLJI::P64;
           P64[Hp - 8] = _scLJN::P64;
           P64[Hp] = _scLJT::P64;
           R3 = Hp - 120;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLLm_info" {
     sat_scLLm_info:
         const sat_scLLm_entry;
         const 14;
         const 12884901903;
         const ScMjD_srt;
 },
 sat_scLLq_entry() //  [R1]
         { []
         }
     {offset
       ccMiC: // global
           if ((Sp + -136) < SpLim) (likely: False) goto ccMiJ; else goto ccMiK;
       ccMiJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMiK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 136] = block_ccMb0_info;
           _scLIU::P64 = P64[R1 + 24];
           _scLJ4::P64 = P64[R1 + 32];
           _scLJ5::P64 = P64[R1 + 40];
           _scLJ6::P64 = P64[R1 + 48];
           _scLJ9::P64 = P64[R1 + 56];
           _scLJe::P64 = P64[R1 + 64];
           _scLJj::P64 = P64[R1 + 72];
           _scLJo::P64 = P64[R1 + 80];
           _scLJt::P64 = P64[R1 + 88];
           _scLJy::P64 = P64[R1 + 96];
           _scLJD::P64 = P64[R1 + 104];
           _scLJI::P64 = P64[R1 + 112];
           _scLJN::P64 = P64[R1 + 120];
           _scLJT::P64 = P64[R1 + 128];
           R1 = P64[R1 + 16];
           P64[Sp - 128] = _scLIU::P64;
           P64[Sp - 120] = _scLJ4::P64;
           P64[Sp - 112] = _scLJ5::P64;
           P64[Sp - 104] = _scLJ6::P64;
           P64[Sp - 96] = _scLJ9::P64;
           P64[Sp - 88] = _scLJe::P64;
           P64[Sp - 80] = _scLJj::P64;
           P64[Sp - 72] = _scLJo::P64;
           P64[Sp - 64] = _scLJt::P64;
           P64[Sp - 56] = _scLJy::P64;
           P64[Sp - 48] = _scLJD::P64;
           P64[Sp - 40] = _scLJI::P64;
           P64[Sp - 32] = _scLJN::P64;
           P64[Sp - 24] = _scLJT::P64;
           Sp = Sp - 136;
           if (R1 & 7 != 0) goto ucMiR; else goto ccMb1;
       ucMiR: // global
           call _ccMb0(R1) args: 0, res: 0, upd: 0;
       ccMb1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLLq_info" {
     sat_scLLq_info:
         const sat_scLLq_entry;
         const 15;
         const 12884901903;
         const ScMjD_srt;
 },
 _ccMb0() //  [R1]
         { []
         }
     {offset
       ccMb0: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto ccMiN; else goto ccMiM;
       ccMiN: // global
           HpAlloc = 128;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       ccMiM: // global
           _scLJV::I64 = I64[R1 + 7];
           I64[Hp - 120] = sat_scLLm_info;
           P64[Hp - 104] = P64[Sp + 8];
           P64[Hp - 96] = P64[Sp + 16];
           P64[Hp - 88] = P64[Sp + 24];
           P64[Hp - 80] = P64[Sp + 32];
           P64[Hp - 72] = P64[Sp + 40];
           P64[Hp - 64] = P64[Sp + 48];
           P64[Hp - 56] = P64[Sp + 56];
           P64[Hp - 48] = P64[Sp + 64];
           P64[Hp - 40] = P64[Sp + 72];
           P64[Hp - 32] = P64[Sp + 80];
           P64[Hp - 24] = P64[Sp + 88];
           P64[Hp - 16] = P64[Sp + 96];
           P64[Hp - 8] = P64[Sp + 104];
           P64[Hp] = P64[Sp + 112];
           I64[Sp + 112] = block_ccMiG_info;
           R3 = Hp - 120;
           R2 = _scLJV::I64;
           Sp = Sp + 112;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccMb0_info" {
     block_ccMb0_info:
         const _ccMb0;
         const 14;
         const 12884901918;
         const ScMjD_srt;
 },
 _ccMiG() //  [R1, R2]
         { []
         }
     {offset
       ccMiG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccMiQ; else goto ccMiP;
       ccMiQ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccMiP: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccMiG_info" {
     block_ccMiG_info:
         const _ccMiG;
         const 0;
         const 30;
 },
 sat_scLLr_entry() //  [R1]
         { []
         }
     {offset
       ccMiS: // global
           _scLLr::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccMiT; else goto ccMiU;
       ccMiU: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto ccMiW; else goto ccMiV;
       ccMiW: // global
           HpAlloc = 136;
           goto ccMiT;
       ccMiT: // global
           R1 = _scLLr::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMiV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scLLr::P64;
           _scLIT::P64 = P64[_scLLr::P64 + 16];
           _scLIU::P64 = P64[_scLLr::P64 + 24];
           _scLJ4::P64 = P64[_scLLr::P64 + 32];
           _scLJ5::P64 = P64[_scLLr::P64 + 40];
           _scLJ6::P64 = P64[_scLLr::P64 + 48];
           _scLJ9::P64 = P64[_scLLr::P64 + 56];
           _scLJe::P64 = P64[_scLLr::P64 + 64];
           _scLJj::P64 = P64[_scLLr::P64 + 72];
           _scLJo::P64 = P64[_scLLr::P64 + 80];
           _scLJt::P64 = P64[_scLLr::P64 + 88];
           _scLJy::P64 = P64[_scLLr::P64 + 96];
           _scLJD::P64 = P64[_scLLr::P64 + 104];
           _scLJI::P64 = P64[_scLLr::P64 + 112];
           _scLJN::P64 = P64[_scLLr::P64 + 120];
           _scLJT::P64 = P64[_scLLr::P64 + 128];
           I64[Hp - 128] = sat_scLLq_info;
           P64[Hp - 112] = _scLIT::P64;
           P64[Hp - 104] = _scLIU::P64;
           P64[Hp - 96] = _scLJ4::P64;
           P64[Hp - 88] = _scLJ5::P64;
           P64[Hp - 80] = _scLJ6::P64;
           P64[Hp - 72] = _scLJ9::P64;
           P64[Hp - 64] = _scLJe::P64;
           P64[Hp - 56] = _scLJj::P64;
           P64[Hp - 48] = _scLJo::P64;
           P64[Hp - 40] = _scLJt::P64;
           P64[Hp - 32] = _scLJy::P64;
           P64[Hp - 24] = _scLJD::P64;
           P64[Hp - 16] = _scLJI::P64;
           P64[Hp - 8] = _scLJN::P64;
           P64[Hp] = _scLJT::P64;
           R3 = Hp - 128;
           R2 = lvl1_rcHpw_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLLr_info" {
     sat_scLLr_info:
         const sat_scLLr_entry;
         const 15;
         const 12884901903;
         const ScMjD_srt;
 },
 p_scLJS_entry() //  [R1, R2]
         { []
         }
     {offset
       ccMiX: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto ccMj1; else goto ccMj0;
       ccMj1: // global
           HpAlloc = 136;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccMj0: // global
           _scLIT::P64 = P64[R1 + 7];
           _scLIU::P64 = P64[R1 + 15];
           _scLJ4::P64 = P64[R1 + 23];
           _scLJ5::P64 = P64[R1 + 31];
           _scLJ6::P64 = P64[R1 + 39];
           _scLJ9::P64 = P64[R1 + 47];
           _scLJe::P64 = P64[R1 + 55];
           _scLJj::P64 = P64[R1 + 63];
           _scLJo::P64 = P64[R1 + 71];
           _scLJt::P64 = P64[R1 + 79];
           _scLJy::P64 = P64[R1 + 87];
           _scLJD::P64 = P64[R1 + 95];
           _scLJI::P64 = P64[R1 + 103];
           _scLJN::P64 = P64[R1 + 111];
           I64[Hp - 128] = sat_scLLr_info;
           P64[Hp - 112] = _scLIT::P64;
           P64[Hp - 104] = _scLIU::P64;
           P64[Hp - 96] = _scLJ4::P64;
           P64[Hp - 88] = _scLJ5::P64;
           P64[Hp - 80] = _scLJ6::P64;
           P64[Hp - 72] = _scLJ9::P64;
           P64[Hp - 64] = _scLJe::P64;
           P64[Hp - 56] = _scLJj::P64;
           P64[Hp - 48] = _scLJo::P64;
           P64[Hp - 40] = _scLJt::P64;
           P64[Hp - 32] = _scLJy::P64;
           P64[Hp - 24] = _scLJD::P64;
           P64[Hp - 16] = _scLJI::P64;
           P64[Hp - 8] = _scLJN::P64;
           P64[Hp] = R2;
           R3 = Hp - 128;
           R2 = lvl_rcHpv_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . p_scLJS_info" {
     p_scLJS_info:
         const p_scLJS_entry;
         const 14;
         const 12884901896;
         const 4294967301;
         const ScMjD_srt;
 },
 sat_scLLv_entry() //  [R1]
         { []
         }
     {offset
       ccMjg: // global
           _scLLv::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccMjh; else goto ccMji;
       ccMji: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccMjk; else goto ccMjj;
       ccMjk: // global
           HpAlloc = 24;
           goto ccMjh;
       ccMjh: // global
           R1 = _scLLv::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMjj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scLLv::P64;
           _scLJS::P64 = P64[_scLLv::P64 + 16];
           _scLLt::P64 = P64[_scLLv::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _scLLt::P64;
           R2 = Hp - 14;
           R1 = _scLJS::P64;
           Sp = Sp - 16;
           call p_scLJS_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLLv_info" {
     sat_scLLv_info:
         const sat_scLLv_entry;
         const 2;
         const 12884901906;
         const ScMjD_srt;
 },
 sat_scLLw_entry() //  [R1, R2]
         { []
         }
     {offset
       ccMjm: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto ccMjq; else goto ccMjp;
       ccMjq: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccMjp: // global
           _scLJS::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_scLLv_info;
           P64[Hp - 32] = _scLJS::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLLw_info" {
     sat_scLLw_info:
         const sat_scLLw_entry;
         const 1;
         const 12884901897;
         const 4294967301;
         const ScMjD_srt;
 },
 GHC.Stats.$fShowGCDetails_$cshowsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       ccMjr: // global
           if ((Sp + -120) < SpLim) (likely: False) goto ccMjs; else goto ccMjt;
       ccMjs: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Stats.$fShowGCDetails_$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccMjt: // global
           I64[Sp - 16] = block_ccM7r_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucMjC; else goto ccM7s;
       ucMjC: // global
           call _ccM7r(R1) args: 0, res: 0, upd: 0;
       ccM7s: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.$fShowGCDetails_$cshowsPrec_info" {
     GHC.Stats.$fShowGCDetails_$cshowsPrec_info:
         const GHC.Stats.$fShowGCDetails_$cshowsPrec_entry;
         const 0;
         const 30064771086;
         const 8589934607;
         const ScMjD_srt;
 },
 _ccM7r() //  [R1]
         { []
         }
     {offset
       ccM7r: // global
           I64[Sp - 104] = block_ccM7w_info;
           _scLIT::P64 = P64[R1 + 7];
           _scLIU::P64 = P64[R1 + 15];
           _scLIV::P64 = P64[R1 + 23];
           _scLIW::P64 = P64[R1 + 31];
           _scLIX::P64 = P64[R1 + 39];
           _scLIY::P64 = P64[R1 + 47];
           _scLIZ::P64 = P64[R1 + 55];
           _scLJ0::P64 = P64[R1 + 63];
           _scLJ1::P64 = P64[R1 + 71];
           _scLJ2::P64 = P64[R1 + 79];
           _scLJ3::P64 = P64[R1 + 87];
           _scLJ4::P64 = P64[R1 + 95];
           _scLJ5::P64 = P64[R1 + 103];
           _scLJ6::P64 = P64[R1 + 111];
           R1 = P64[Sp + 8];
           P64[Sp - 96] = _scLIV::P64;
           P64[Sp - 88] = _scLIW::P64;
           P64[Sp - 80] = _scLIX::P64;
           P64[Sp - 72] = _scLIY::P64;
           P64[Sp - 64] = _scLIZ::P64;
           P64[Sp - 56] = _scLJ0::P64;
           P64[Sp - 48] = _scLJ1::P64;
           P64[Sp - 40] = _scLJ2::P64;
           P64[Sp - 32] = _scLJ3::P64;
           P64[Sp - 24] = _scLJ4::P64;
           P64[Sp - 16] = _scLJ5::P64;
           P64[Sp - 8] = _scLJ6::P64;
           P64[Sp] = _scLIU::P64;
           P64[Sp + 8] = _scLIT::P64;
           Sp = Sp - 104;
           if (R1 & 7 != 0) goto ucMjB; else goto ccM7x;
       ucMjB: // global
           call _ccM7w(R1) args: 0, res: 0, upd: 0;
       ccM7x: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccM7r_info" {
     block_ccM7r_info:
         const _ccM7r;
         const 1;
         const 12884901918;
         const ScMjD_srt;
 },
 _ccM7w() //  [R1]
         { []
         }
     {offset
       ccM7w: // global
           Hp = Hp + 352;
           if (Hp > HpLim) (likely: False) goto ccMjx; else goto ccMjw;
       ccMjx: // global
           HpAlloc = 352;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccMjw: // global
           _scLJ8::I64 = I64[R1 + 7];
           I64[Hp - 344] = w1_scLJ9_info;
           P64[Hp - 328] = P64[Sp + 8];
           I64[Hp - 320] = w2_scLJe_info;
           P64[Hp - 304] = P64[Sp + 16];
           I64[Hp - 296] = w3_scLJj_info;
           P64[Hp - 280] = P64[Sp + 24];
           I64[Hp - 272] = w4_scLJo_info;
           P64[Hp - 256] = P64[Sp + 32];
           I64[Hp - 248] = w5_scLJt_info;
           P64[Hp - 232] = P64[Sp + 40];
           I64[Hp - 224] = w6_scLJy_info;
           P64[Hp - 208] = P64[Sp + 48];
           I64[Hp - 200] = w7_scLJD_info;
           P64[Hp - 184] = P64[Sp + 56];
           I64[Hp - 176] = w8_scLJI_info;
           P64[Hp - 160] = P64[Sp + 64];
           I64[Hp - 152] = w9_scLJN_info;
           P64[Hp - 136] = P64[Sp + 72];
           I64[Hp - 128] = p_scLJS_info;
           P64[Hp - 120] = P64[Sp + 112];
           P64[Hp - 112] = P64[Sp + 104];
           P64[Hp - 104] = P64[Sp + 80];
           P64[Hp - 96] = P64[Sp + 88];
           P64[Hp - 88] = P64[Sp + 96];
           P64[Hp - 80] = Hp - 344;
           P64[Hp - 72] = Hp - 320;
           P64[Hp - 64] = Hp - 296;
           P64[Hp - 56] = Hp - 272;
           P64[Hp - 48] = Hp - 248;
           P64[Hp - 40] = Hp - 224;
           P64[Hp - 32] = Hp - 200;
           P64[Hp - 24] = Hp - 176;
           P64[Hp - 16] = Hp - 152;
           _ccMaN::P64 = Hp - 127;
           if (%MO_S_Lt_W64(_scLJ8::I64, 11)) goto ccMjz; else goto ccMjA;
       ccMjz: // global
           Hp = Hp - 16;
           R1 = _ccMaN::P64;
           Sp = Sp + 120;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccMjA: // global
           I64[Hp - 8] = sat_scLLw_info;
           P64[Hp] = _ccMaN::P64;
           R1 = Hp - 7;
           Sp = Sp + 120;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccM7w_info" {
     block_ccM7w_info:
         const _ccM7w;
         const 14;
         const 12884901918;
         const ScMjD_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.31545721 UTC

[section ""data" . GHC.Stats.$fShowGCDetails2_closure" {
     GHC.Stats.$fShowGCDetails2_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.31810474 UTC

[section ""data" . GHC.Stats.$fShowGCDetails_$cshow_closure" {
     GHC.Stats.$fShowGCDetails_$cshow_closure:
         const GHC.Stats.$fShowGCDetails_$cshow_info;
         const 0;
 },
 GHC.Stats.$fShowGCDetails_$cshow_entry() //  [R2]
         { []
         }
     {offset
       ccMse: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccMsf; else goto ccMsg;
       ccMsf: // global
           R2 = R2;
           R1 = GHC.Stats.$fShowGCDetails_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccMsg: // global
           R3 = R2;
           R2 = GHC.Stats.$fShowGCDetails2_closure+1;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 16;
           call GHC.Stats.$fShowGCDetails_$cshowsPrec_entry(R3,
                                                            R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.$fShowGCDetails_$cshow_info" {
     GHC.Stats.$fShowGCDetails_$cshow_info:
         const GHC.Stats.$fShowGCDetails_$cshow_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const ScMjD_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.321891333 UTC

[section ""data" . GHC.Stats.$fShowGCDetails1_closure" {
     GHC.Stats.$fShowGCDetails1_closure:
         const GHC.Stats.$fShowGCDetails1_info;
         const 0;
 },
 GHC.Stats.$fShowGCDetails1_entry() //  [R2]
         { []
         }
     {offset
       ccMst: // global
           R3 = R2;
           R2 = GHC.Stats.$fShowGCDetails2_closure+1;
           call GHC.Stats.$fShowGCDetails_$cshowsPrec_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.$fShowGCDetails1_info" {
     GHC.Stats.$fShowGCDetails1_info:
         const GHC.Stats.$fShowGCDetails1_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const ScMjD_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.325201577 UTC

[section ""data" . GHC.Stats.$fShowGCDetails_$cshowList_closure" {
     GHC.Stats.$fShowGCDetails_$cshowList_closure:
         const GHC.Stats.$fShowGCDetails_$cshowList_info;
         const 0;
 },
 GHC.Stats.$fShowGCDetails_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       ccMsE: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Stats.$fShowGCDetails1_closure+1;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.$fShowGCDetails_$cshowList_info" {
     GHC.Stats.$fShowGCDetails_$cshowList_info:
         const GHC.Stats.$fShowGCDetails_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const ScMjD_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.328473877 UTC

[section ""data" . GHC.Stats.$fShowGCDetails_closure" {
     GHC.Stats.$fShowGCDetails_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Stats.$fShowGCDetails_$cshowsPrec_closure+2;
         const GHC.Stats.$fShowGCDetails_$cshow_closure+1;
         const GHC.Stats.$fShowGCDetails_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.33092966 UTC

[section ""cstring" . lvl16_rcHpL_bytes" {
     lvl16_rcHpL_bytes:
         I8[] [82,84,83,83,116,97,116,115,32,123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.332545249 UTC

[section ""cstring" . lvl17_rcHpM_bytes" {
     lvl17_rcHpM_bytes:
         I8[] [103,99,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.334196908 UTC

[section ""cstring" . lvl18_rcHpN_bytes" {
     lvl18_rcHpN_bytes:
         I8[] [109,97,106,111,114,95,103,99,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.335849392 UTC

[section ""cstring" . lvl19_rcHpO_bytes" {
     lvl19_rcHpO_bytes:
         I8[] [97,108,108,111,99,97,116,101,100,95,98,121,116,101,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.338591196 UTC

[section ""cstring" . lvl20_rcHpP_bytes" {
     lvl20_rcHpP_bytes:
         I8[] [109,97,120,95,108,105,118,101,95,98,121,116,101,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.340197105 UTC

[section ""cstring" . lvl21_rcHpQ_bytes" {
     lvl21_rcHpQ_bytes:
         I8[] [109,97,120,95,108,97,114,103,101,95,111,98,106,101,99,116,115,95,98,121,116,101,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.341890435 UTC

[section ""cstring" . lvl22_rcHpR_bytes" {
     lvl22_rcHpR_bytes:
         I8[] [109,97,120,95,99,111,109,112,97,99,116,95,98,121,116,101,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.343554509 UTC

[section ""cstring" . lvl23_rcHpS_bytes" {
     lvl23_rcHpS_bytes:
         I8[] [109,97,120,95,115,108,111,112,95,98,121,116,101,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.345203092 UTC

[section ""cstring" . lvl24_rcHpT_bytes" {
     lvl24_rcHpT_bytes:
         I8[] [109,97,120,95,109,101,109,95,105,110,95,117,115,101,95,98,121,116,101,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.347297444 UTC

[section ""cstring" . lvl25_rcHpU_bytes" {
     lvl25_rcHpU_bytes:
         I8[] [99,117,109,117,108,97,116,105,118,101,95,108,105,118,101,95,98,121,116,101,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.34889039 UTC

[section ""cstring" . lvl26_rcHpV_bytes" {
     lvl26_rcHpV_bytes:
         I8[] [99,111,112,105,101,100,95,98,121,116,101,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.350533672 UTC

[section ""cstring" . lvl27_rcHpW_bytes" {
     lvl27_rcHpW_bytes:
         I8[] [112,97,114,95,99,111,112,105,101,100,95,98,121,116,101,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.352192024 UTC

[section ""cstring" . lvl28_rcHpX_bytes" {
     lvl28_rcHpX_bytes:
         I8[] [99,117,109,117,108,97,116,105,118,101,95,112,97,114,95,109,97,120,95,99,111,112,105,101,100,95,98,121,116,101,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.353863563 UTC

[section ""cstring" . lvl29_rcHpY_bytes" {
     lvl29_rcHpY_bytes:
         I8[] [99,117,109,117,108,97,116,105,118,101,95,112,97,114,95,98,97,108,97,110,99,101,100,95,99,111,112,105,101,100,95,98,121,116,101,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.355482224 UTC

[section ""cstring" . lvl30_rcHpZ_bytes" {
     lvl30_rcHpZ_bytes:
         I8[] [109,117,116,97,116,111,114,95,99,112,117,95,110,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.357067703 UTC

[section ""cstring" . lvl31_rcHq0_bytes" {
     lvl31_rcHq0_bytes:
         I8[] [109,117,116,97,116,111,114,95,101,108,97,112,115,101,100,95,110,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.358790563 UTC

[section ""cstring" . lvl32_rcHq1_bytes" {
     lvl32_rcHq1_bytes:
         I8[] [103,99,95,99,112,117,95,110,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.360387449 UTC

[section ""cstring" . lvl33_rcHq2_bytes" {
     lvl33_rcHq2_bytes:
         I8[] [103,99,95,101,108,97,112,115,101,100,95,110,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.362674433 UTC

[section ""cstring" . lvl34_rcHq3_bytes" {
     lvl34_rcHq3_bytes:
         I8[] [99,112,117,95,110,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.364227715 UTC

[section ""cstring" . lvl35_rcHq4_bytes" {
     lvl35_rcHq4_bytes:
         I8[] [101,108,97,112,115,101,100,95,110,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.365902439 UTC

[section ""cstring" . lvl36_rcHq5_bytes" {
     lvl36_rcHq5_bytes:
         I8[] [103,99,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.437171003 UTC

[section ""data" . GHC.Stats.$fShowRTSStats_$cshowsPrec_closure" {
     GHC.Stats.$fShowRTSStats_$cshowsPrec_closure:
         const GHC.Stats.$fShowRTSStats_$cshowsPrec_info;
         const 0;
 },
 w1_scLLZ_entry() //  [R1]
         { []
         }
     {offset
       ccMts: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccMtt; else goto ccMtu;
       ccMtt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMtu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccMtp_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucMtG; else goto ccMtq;
       ucMtG: // global
           call _ccMtp(R1) args: 0, res: 0, upd: 0;
       ccMtq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . w1_scLLZ_info" {
     w1_scLLZ_info:
         const w1_scLLZ_entry;
         const 1;
         const 16;
 },
 _ccMtp() //  [R1]
         { []
         }
     {offset
       ccMtp: // global
           _scLM1::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_scLM1::I64, 0)) goto ccMtE; else goto ccMtF;
       ccMtE: // global
           R2 = _scLM1::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.wordToInteger_entry(R2) args: 24, res: 0, upd: 24;
       ccMtF: // global
           R2 = _scLM1::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccMtp_info" {
     block_ccMtp_info:
         const _ccMtp;
         const 0;
         const 30;
 },
 w2_scLM4_entry() //  [R1]
         { []
         }
     {offset
       ccMtO: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccMtP; else goto ccMtQ;
       ccMtP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMtQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccMtL_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucMu2; else goto ccMtM;
       ucMu2: // global
           call _ccMtL(R1) args: 0, res: 0, upd: 0;
       ccMtM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . w2_scLM4_info" {
     w2_scLM4_info:
         const w2_scLM4_entry;
         const 1;
         const 16;
 },
 _ccMtL() //  [R1]
         { []
         }
     {offset
       ccMtL: // global
           _scLM6::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_scLM6::I64, 0)) goto ccMu0; else goto ccMu1;
       ccMu0: // global
           R2 = _scLM6::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.wordToInteger_entry(R2) args: 24, res: 0, upd: 24;
       ccMu1: // global
           R2 = _scLM6::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccMtL_info" {
     block_ccMtL_info:
         const _ccMtL;
         const 0;
         const 30;
 },
 w3_scLM9_entry() //  [R1]
         { []
         }
     {offset
       ccMua: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccMub; else goto ccMuc;
       ccMub: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMuc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccMu7_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucMuo; else goto ccMu8;
       ucMuo: // global
           call _ccMu7(R1) args: 0, res: 0, upd: 0;
       ccMu8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . w3_scLM9_info" {
     w3_scLM9_info:
         const w3_scLM9_entry;
         const 1;
         const 16;
 },
 _ccMu7() //  [R1]
         { []
         }
     {offset
       ccMu7: // global
           _scLMb::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_scLMb::I64, 0)) goto ccMum; else goto ccMun;
       ccMum: // global
           R2 = _scLMb::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.wordToInteger_entry(R2) args: 24, res: 0, upd: 24;
       ccMun: // global
           R2 = _scLMb::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccMu7_info" {
     block_ccMu7_info:
         const _ccMu7;
         const 0;
         const 30;
 },
 w4_scLMe_entry() //  [R1]
         { []
         }
     {offset
       ccMuw: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccMux; else goto ccMuy;
       ccMux: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMuy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccMut_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucMuK; else goto ccMuu;
       ucMuK: // global
           call _ccMut(R1) args: 0, res: 0, upd: 0;
       ccMuu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . w4_scLMe_info" {
     w4_scLMe_info:
         const w4_scLMe_entry;
         const 1;
         const 16;
 },
 _ccMut() //  [R1]
         { []
         }
     {offset
       ccMut: // global
           _scLMg::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_scLMg::I64, 0)) goto ccMuI; else goto ccMuJ;
       ccMuI: // global
           R2 = _scLMg::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.wordToInteger_entry(R2) args: 24, res: 0, upd: 24;
       ccMuJ: // global
           R2 = _scLMg::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccMut_info" {
     block_ccMut_info:
         const _ccMut;
         const 0;
         const 30;
 },
 w5_scLMj_entry() //  [R1]
         { []
         }
     {offset
       ccMuS: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccMuT; else goto ccMuU;
       ccMuT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMuU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccMuP_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucMv6; else goto ccMuQ;
       ucMv6: // global
           call _ccMuP(R1) args: 0, res: 0, upd: 0;
       ccMuQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . w5_scLMj_info" {
     w5_scLMj_info:
         const w5_scLMj_entry;
         const 1;
         const 16;
 },
 _ccMuP() //  [R1]
         { []
         }
     {offset
       ccMuP: // global
           _scLMl::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_scLMl::I64, 0)) goto ccMv4; else goto ccMv5;
       ccMv4: // global
           R2 = _scLMl::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.wordToInteger_entry(R2) args: 24, res: 0, upd: 24;
       ccMv5: // global
           R2 = _scLMl::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccMuP_info" {
     block_ccMuP_info:
         const _ccMuP;
         const 0;
         const 30;
 },
 w6_scLMo_entry() //  [R1]
         { []
         }
     {offset
       ccMve: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccMvf; else goto ccMvg;
       ccMvf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMvg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccMvb_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucMvs; else goto ccMvc;
       ucMvs: // global
           call _ccMvb(R1) args: 0, res: 0, upd: 0;
       ccMvc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . w6_scLMo_info" {
     w6_scLMo_info:
         const w6_scLMo_entry;
         const 1;
         const 16;
 },
 _ccMvb() //  [R1]
         { []
         }
     {offset
       ccMvb: // global
           _scLMq::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_scLMq::I64, 0)) goto ccMvq; else goto ccMvr;
       ccMvq: // global
           R2 = _scLMq::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.wordToInteger_entry(R2) args: 24, res: 0, upd: 24;
       ccMvr: // global
           R2 = _scLMq::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccMvb_info" {
     block_ccMvb_info:
         const _ccMvb;
         const 0;
         const 30;
 },
 w7_scLMt_entry() //  [R1]
         { []
         }
     {offset
       ccMvA: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccMvB; else goto ccMvC;
       ccMvB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMvC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccMvx_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucMvO; else goto ccMvy;
       ucMvO: // global
           call _ccMvx(R1) args: 0, res: 0, upd: 0;
       ccMvy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . w7_scLMt_info" {
     w7_scLMt_info:
         const w7_scLMt_entry;
         const 1;
         const 16;
 },
 _ccMvx() //  [R1]
         { []
         }
     {offset
       ccMvx: // global
           _scLMv::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_scLMv::I64, 0)) goto ccMvM; else goto ccMvN;
       ccMvM: // global
           R2 = _scLMv::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.wordToInteger_entry(R2) args: 24, res: 0, upd: 24;
       ccMvN: // global
           R2 = _scLMv::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccMvx_info" {
     block_ccMvx_info:
         const _ccMvx;
         const 0;
         const 30;
 },
 w8_scLMy_entry() //  [R1]
         { []
         }
     {offset
       ccMvW: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccMvX; else goto ccMvY;
       ccMvX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMvY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccMvT_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucMwa; else goto ccMvU;
       ucMwa: // global
           call _ccMvT(R1) args: 0, res: 0, upd: 0;
       ccMvU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . w8_scLMy_info" {
     w8_scLMy_info:
         const w8_scLMy_entry;
         const 1;
         const 16;
 },
 _ccMvT() //  [R1]
         { []
         }
     {offset
       ccMvT: // global
           _scLMA::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_scLMA::I64, 0)) goto ccMw8; else goto ccMw9;
       ccMw8: // global
           R2 = _scLMA::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.wordToInteger_entry(R2) args: 24, res: 0, upd: 24;
       ccMw9: // global
           R2 = _scLMA::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccMvT_info" {
     block_ccMvT_info:
         const _ccMvT;
         const 0;
         const 30;
 },
 w9_scLMD_entry() //  [R1]
         { []
         }
     {offset
       ccMwi: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccMwj; else goto ccMwk;
       ccMwj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMwk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccMwf_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucMww; else goto ccMwg;
       ucMww: // global
           call _ccMwf(R1) args: 0, res: 0, upd: 0;
       ccMwg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . w9_scLMD_info" {
     w9_scLMD_info:
         const w9_scLMD_entry;
         const 1;
         const 16;
 },
 _ccMwf() //  [R1]
         { []
         }
     {offset
       ccMwf: // global
           _scLMF::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_scLMF::I64, 0)) goto ccMwu; else goto ccMwv;
       ccMwu: // global
           R2 = _scLMF::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.wordToInteger_entry(R2) args: 24, res: 0, upd: 24;
       ccMwv: // global
           R2 = _scLMF::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccMwf_info" {
     block_ccMwf_info:
         const _ccMwf;
         const 0;
         const 30;
 },
 w10_scLMI_entry() //  [R1]
         { []
         }
     {offset
       ccMwE: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccMwF; else goto ccMwG;
       ccMwF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMwG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccMwB_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucMwS; else goto ccMwC;
       ucMwS: // global
           call _ccMwB(R1) args: 0, res: 0, upd: 0;
       ccMwC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . w10_scLMI_info" {
     w10_scLMI_info:
         const w10_scLMI_entry;
         const 1;
         const 16;
 },
 _ccMwB() //  [R1]
         { []
         }
     {offset
       ccMwB: // global
           _scLMK::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_scLMK::I64, 0)) goto ccMwQ; else goto ccMwR;
       ccMwQ: // global
           R2 = _scLMK::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.wordToInteger_entry(R2) args: 24, res: 0, upd: 24;
       ccMwR: // global
           R2 = _scLMK::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccMwB_info" {
     block_ccMwB_info:
         const _ccMwB;
         const 0;
         const 30;
 },
 w11_scLMN_entry() //  [R1]
         { []
         }
     {offset
       ccMx0: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccMx1; else goto ccMx2;
       ccMx1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMx2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_ccMwX_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ucMxe; else goto ccMwY;
       ucMxe: // global
           call _ccMwX(R1) args: 0, res: 0, upd: 0;
       ccMwY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . w11_scLMN_info" {
     w11_scLMN_info:
         const w11_scLMN_entry;
         const 1;
         const 16;
 },
 _ccMwX() //  [R1]
         { []
         }
     {offset
       ccMwX: // global
           _scLMP::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_scLMP::I64, 0)) goto ccMxc; else goto ccMxd;
       ccMxc: // global
           R2 = _scLMP::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.wordToInteger_entry(R2) args: 24, res: 0, upd: 24;
       ccMxd: // global
           R2 = _scLMP::I64;
           Sp = Sp + 8;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccMwX_info" {
     block_ccMwX_info:
         const _ccMwX;
         const 0;
         const 30;
 },
 f_scLMS_entry() //  [R1]
         { []
         }
     {offset
       ccMxj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccMxk; else goto ccMxl;
       ccMxk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMxl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.Stats.$fShowGCDetails2_closure+1;
           Sp = Sp - 16;
           call GHC.Stats.$fShowGCDetails_$cshowsPrec_entry(R3,
                                                            R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . f_scLMS_info" {
     f_scLMS_info:
         const f_scLMS_entry;
         const 1;
         const 4294967312;
         const ScMjD_srt+16;
 },
 sat_scLNd_entry() //  [R1]
         { []
         }
     {offset
       ccMBX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccMBY; else goto ccMBZ;
       ccMBY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMBZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = lvl15_rcHpK_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLNd_info" {
     sat_scLNd_info:
         const sat_scLNd_entry;
         const 1;
         const 16;
 },
 sat_scLNe_entry() //  [R1]
         { []
         }
     {offset
       ccMC0: // global
           _scLNe::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccMC1; else goto ccMC2;
       ccMC2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccMC4; else goto ccMC3;
       ccMC4: // global
           HpAlloc = 24;
           goto ccMC1;
       ccMC1: // global
           R1 = _scLNe::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMC3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scLNe::P64;
           _scLMS::P64 = P64[_scLNe::P64 + 16];
           _scLMU::P64 = P64[_scLNe::P64 + 24];
           I64[Hp - 16] = sat_scLNd_info;
           P64[Hp] = _scLMU::P64;
           R2 = Hp - 16;
           R1 = _scLMS::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLNe_info" {
     sat_scLNe_info:
         const sat_scLNe_entry;
         const 2;
         const 18;
 },
 sat_scLNf_entry() //  [R1]
         { []
         }
     {offset
       ccMC5: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccMC9; else goto ccMC8;
       ccMC9: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMC8: // global
           _scLMS::P64 = P64[R1 + 16];
           _scLMU::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_scLNe_info;
           P64[Hp - 8] = _scLMS::P64;
           P64[Hp] = _scLMU::P64;
           R3 = Hp - 24;
           R2 = lvl36_rcHq5_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLNf_info" {
     sat_scLNf_info:
         const sat_scLNf_entry;
         const 2;
         const 18;
 },
 sat_scLNg_entry() //  [R1]
         { []
         }
     {offset
       ccMCa: // global
           _scLNg::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccMCb; else goto ccMCc;
       ccMCc: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccMCe; else goto ccMCd;
       ccMCe: // global
           HpAlloc = 32;
           goto ccMCb;
       ccMCb: // global
           R1 = _scLNg::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMCd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scLNg::P64;
           _scLMS::P64 = P64[_scLNg::P64 + 16];
           _scLMU::P64 = P64[_scLNg::P64 + 24];
           I64[Hp - 24] = sat_scLNf_info;
           P64[Hp - 8] = _scLMS::P64;
           P64[Hp] = _scLMU::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLNg_info" {
     sat_scLNg_info:
         const sat_scLNg_entry;
         const 2;
         const 4294967314;
         const ScMjD_srt;
 },
 sat_scLNk_entry() //  [R1]
         { []
         }
     {offset
       ccMCf: // global
           if ((Sp + -40) < SpLim) (likely: False) goto ccMCj; else goto ccMCk;
       ccMCj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMCk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_ccMBC_info;
           _scLMS::P64 = P64[R1 + 24];
           _scLMU::P64 = P64[R1 + 32];
           R1 = P64[R1 + 16];
           P64[Sp - 32] = _scLMS::P64;
           P64[Sp - 24] = _scLMU::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ucMCr; else goto ccMBD;
       ucMCr: // global
           call _ccMBC(R1) args: 0, res: 0, upd: 0;
       ccMBD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLNk_info" {
     sat_scLNk_info:
         const sat_scLNk_entry;
         const 3;
         const 4294967311;
         const ScMjD_srt;
 },
 _ccMBC() //  [R1]
         { []
         }
     {offset
       ccMBC: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccMCn; else goto ccMCm;
       ccMCn: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       ccMCm: // global
           _scLNc::I64 = I64[R1 + 7];
           I64[Hp - 24] = sat_scLNg_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_ccMCg_info;
           R4 = Hp - 24;
           R3 = _scLNc::I64;
           R2 = 0;
           Sp = Sp + 16;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccMBC_info" {
     block_ccMBC_info:
         const _ccMBC;
         const 2;
         const 4294967326;
         const ScMjD_srt;
 },
 _ccMCg() //  [R1, R2]
         { []
         }
     {offset
       ccMCg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccMCq; else goto ccMCp;
       ccMCq: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccMCp: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccMCg_info" {
     block_ccMCg_info:
         const _ccMCg;
         const 0;
         const 30;
 },
 sat_scLNl_entry() //  [R1]
         { []
         }
     {offset
       ccMCs: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccMCw; else goto ccMCv;
       ccMCw: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMCv: // global
           _scLLV::P64 = P64[R1 + 16];
           _scLMS::P64 = P64[R1 + 24];
           _scLMU::P64 = P64[R1 + 32];
           I64[Hp - 32] = sat_scLNk_info;
           P64[Hp - 16] = _scLLV::P64;
           P64[Hp - 8] = _scLMS::P64;
           P64[Hp] = _scLMU::P64;
           R3 = Hp - 32;
           R2 = lvl35_rcHq4_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLNl_info" {
     sat_scLNl_info:
         const sat_scLNl_entry;
         const 3;
         const 4294967311;
         const ScMjD_srt;
 },
 sat_scLNm_entry() //  [R1]
         { []
         }
     {offset
       ccMCx: // global
           _scLNm::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccMCy; else goto ccMCz;
       ccMCz: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccMCB; else goto ccMCA;
       ccMCB: // global
           HpAlloc = 40;
           goto ccMCy;
       ccMCy: // global
           R1 = _scLNm::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMCA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scLNm::P64;
           _scLLV::P64 = P64[_scLNm::P64 + 16];
           _scLMS::P64 = P64[_scLNm::P64 + 24];
           _scLMU::P64 = P64[_scLNm::P64 + 32];
           I64[Hp - 32] = sat_scLNl_info;
           P64[Hp - 16] = _scLLV::P64;
           P64[Hp - 8] = _scLMS::P64;
           P64[Hp] = _scLMU::P64;
           R3 = Hp - 32;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLNm_info" {
     sat_scLNm_info:
         const sat_scLNm_entry;
         const 3;
         const 4294967311;
         const ScMjD_srt;
 },
 sat_scLNq_entry() //  [R1]
         { []
         }
     {offset
       ccMCC: // global
           if ((Sp + -48) < SpLim) (likely: False) goto ccMCG; else goto ccMCH;
       ccMCG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMCH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_ccMBl_info;
           _scLLV::P64 = P64[R1 + 24];
           _scLMS::P64 = P64[R1 + 32];
           _scLMU::P64 = P64[R1 + 40];
           R1 = P64[R1 + 16];
           P64[Sp - 40] = _scLLV::P64;
           P64[Sp - 32] = _scLMS::P64;
           P64[Sp - 24] = _scLMU::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto ucMCO; else goto ccMBm;
       ucMCO: // global
           call _ccMBl(R1) args: 0, res: 0, upd: 0;
       ccMBm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLNq_info" {
     sat_scLNq_info:
         const sat_scLNq_entry;
         const 4;
         const 4294967311;
         const ScMjD_srt;
 },
 _ccMBl() //  [R1]
         { []
         }
     {offset
       ccMBl: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccMCK; else goto ccMCJ;
       ccMCK: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       ccMCJ: // global
           _scLNa::I64 = I64[R1 + 7];
           I64[Hp - 32] = sat_scLNm_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           I64[Sp + 24] = block_ccMCD_info;
           R4 = Hp - 32;
           R3 = _scLNa::I64;
           R2 = 0;
           Sp = Sp + 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccMBl_info" {
     block_ccMBl_info:
         const _ccMBl;
         const 3;
         const 4294967326;
         const ScMjD_srt;
 },
 _ccMCD() //  [R1, R2]
         { []
         }
     {offset
       ccMCD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccMCN; else goto ccMCM;
       ccMCN: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccMCM: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccMCD_info" {
     block_ccMCD_info:
         const _ccMCD;
         const 0;
         const 30;
 },
 sat_scLNr_entry() //  [R1]
         { []
         }
     {offset
       ccMCP: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccMCT; else goto ccMCS;
       ccMCT: // global
           HpAlloc = 48;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMCS: // global
           _scLLU::P64 = P64[R1 + 16];
           _scLLV::P64 = P64[R1 + 24];
           _scLMS::P64 = P64[R1 + 32];
           _scLMU::P64 = P64[R1 + 40];
           I64[Hp - 40] = sat_scLNq_info;
           P64[Hp - 24] = _scLLU::P64;
           P64[Hp - 16] = _scLLV::P64;
           P64[Hp - 8] = _scLMS::P64;
           P64[Hp] = _scLMU::P64;
           R3 = Hp - 40;
           R2 = lvl34_rcHq3_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLNr_info" {
     sat_scLNr_info:
         const sat_scLNr_entry;
         const 4;
         const 4294967311;
         const ScMjD_srt;
 },
 sat_scLNs_entry() //  [R1]
         { []
         }
     {offset
       ccMCU: // global
           _scLNs::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccMCV; else goto ccMCW;
       ccMCW: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccMCY; else goto ccMCX;
       ccMCY: // global
           HpAlloc = 48;
           goto ccMCV;
       ccMCV: // global
           R1 = _scLNs::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMCX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scLNs::P64;
           _scLLU::P64 = P64[_scLNs::P64 + 16];
           _scLLV::P64 = P64[_scLNs::P64 + 24];
           _scLMS::P64 = P64[_scLNs::P64 + 32];
           _scLMU::P64 = P64[_scLNs::P64 + 40];
           I64[Hp - 40] = sat_scLNr_info;
           P64[Hp - 24] = _scLLU::P64;
           P64[Hp - 16] = _scLLV::P64;
           P64[Hp - 8] = _scLMS::P64;
           P64[Hp] = _scLMU::P64;
           R3 = Hp - 40;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLNs_info" {
     sat_scLNs_info:
         const sat_scLNs_entry;
         const 4;
         const 4294967311;
         const ScMjD_srt;
 },
 sat_scLNw_entry() //  [R1]
         { []
         }
     {offset
       ccMCZ: // global
           if ((Sp + -56) < SpLim) (likely: False) goto ccMD3; else goto ccMD4;
       ccMD3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMD4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 56] = block_ccMB4_info;
           _scLLU::P64 = P64[R1 + 24];
           _scLLV::P64 = P64[R1 + 32];
           _scLMS::P64 = P64[R1 + 40];
           _scLMU::P64 = P64[R1 + 48];
           R1 = P64[R1 + 16];
           P64[Sp - 48] = _scLLU::P64;
           P64[Sp - 40] = _scLLV::P64;
           P64[Sp - 32] = _scLMS::P64;
           P64[Sp - 24] = _scLMU::P64;
           Sp = Sp - 56;
           if (R1 & 7 != 0) goto ucMDb; else goto ccMB5;
       ucMDb: // global
           call _ccMB4(R1) args: 0, res: 0, upd: 0;
       ccMB5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLNw_info" {
     sat_scLNw_info:
         const sat_scLNw_entry;
         const 5;
         const 4294967311;
         const ScMjD_srt;
 },
 _ccMB4() //  [R1]
         { []
         }
     {offset
       ccMB4: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccMD7; else goto ccMD6;
       ccMD7: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       ccMD6: // global
           _scLN8::I64 = I64[R1 + 7];
           I64[Hp - 40] = sat_scLNs_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 32];
           I64[Sp + 32] = block_ccMD0_info;
           R4 = Hp - 40;
           R3 = _scLN8::I64;
           R2 = 0;
           Sp = Sp + 32;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccMB4_info" {
     block_ccMB4_info:
         const _ccMB4;
         const 4;
         const 4294967326;
         const ScMjD_srt;
 },
 _ccMD0() //  [R1, R2]
         { []
         }
     {offset
       ccMD0: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccMDa; else goto ccMD9;
       ccMDa: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccMD9: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccMD0_info" {
     block_ccMD0_info:
         const _ccMD0;
         const 0;
         const 30;
 },
 sat_scLNx_entry() //  [R1]
         { []
         }
     {offset
       ccMDc: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto ccMDg; else goto ccMDf;
       ccMDg: // global
           HpAlloc = 56;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMDf: // global
           _scLLT::P64 = P64[R1 + 16];
           _scLLU::P64 = P64[R1 + 24];
           _scLLV::P64 = P64[R1 + 32];
           _scLMS::P64 = P64[R1 + 40];
           _scLMU::P64 = P64[R1 + 48];
           I64[Hp - 48] = sat_scLNw_info;
           P64[Hp - 32] = _scLLT::P64;
           P64[Hp - 24] = _scLLU::P64;
           P64[Hp - 16] = _scLLV::P64;
           P64[Hp - 8] = _scLMS::P64;
           P64[Hp] = _scLMU::P64;
           R3 = Hp - 48;
           R2 = lvl33_rcHq2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLNx_info" {
     sat_scLNx_info:
         const sat_scLNx_entry;
         const 5;
         const 4294967311;
         const ScMjD_srt;
 },
 sat_scLNy_entry() //  [R1]
         { []
         }
     {offset
       ccMDh: // global
           _scLNy::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccMDi; else goto ccMDj;
       ccMDj: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto ccMDl; else goto ccMDk;
       ccMDl: // global
           HpAlloc = 56;
           goto ccMDi;
       ccMDi: // global
           R1 = _scLNy::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMDk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scLNy::P64;
           _scLLT::P64 = P64[_scLNy::P64 + 16];
           _scLLU::P64 = P64[_scLNy::P64 + 24];
           _scLLV::P64 = P64[_scLNy::P64 + 32];
           _scLMS::P64 = P64[_scLNy::P64 + 40];
           _scLMU::P64 = P64[_scLNy::P64 + 48];
           I64[Hp - 48] = sat_scLNx_info;
           P64[Hp - 32] = _scLLT::P64;
           P64[Hp - 24] = _scLLU::P64;
           P64[Hp - 16] = _scLLV::P64;
           P64[Hp - 8] = _scLMS::P64;
           P64[Hp] = _scLMU::P64;
           R3 = Hp - 48;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLNy_info" {
     sat_scLNy_info:
         const sat_scLNy_entry;
         const 5;
         const 4294967311;
         const ScMjD_srt;
 },
 sat_scLNC_entry() //  [R1]
         { []
         }
     {offset
       ccMDm: // global
           if ((Sp + -64) < SpLim) (likely: False) goto ccMDq; else goto ccMDr;
       ccMDq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMDr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 64] = block_ccMAN_info;
           _scLLT::P64 = P64[R1 + 24];
           _scLLU::P64 = P64[R1 + 32];
           _scLLV::P64 = P64[R1 + 40];
           _scLMS::P64 = P64[R1 + 48];
           _scLMU::P64 = P64[R1 + 56];
           R1 = P64[R1 + 16];
           P64[Sp - 56] = _scLLT::P64;
           P64[Sp - 48] = _scLLU::P64;
           P64[Sp - 40] = _scLLV::P64;
           P64[Sp - 32] = _scLMS::P64;
           P64[Sp - 24] = _scLMU::P64;
           Sp = Sp - 64;
           if (R1 & 7 != 0) goto ucMDy; else goto ccMAO;
       ucMDy: // global
           call _ccMAN(R1) args: 0, res: 0, upd: 0;
       ccMAO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLNC_info" {
     sat_scLNC_info:
         const sat_scLNC_entry;
         const 6;
         const 4294967311;
         const ScMjD_srt;
 },
 _ccMAN() //  [R1]
         { []
         }
     {offset
       ccMAN: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto ccMDu; else goto ccMDt;
       ccMDu: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       ccMDt: // global
           _scLN6::I64 = I64[R1 + 7];
           I64[Hp - 48] = sat_scLNy_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = P64[Sp + 40];
           I64[Sp + 40] = block_ccMDn_info;
           R4 = Hp - 48;
           R3 = _scLN6::I64;
           R2 = 0;
           Sp = Sp + 40;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccMAN_info" {
     block_ccMAN_info:
         const _ccMAN;
         const 5;
         const 4294967326;
         const ScMjD_srt;
 },
 _ccMDn() //  [R1, R2]
         { []
         }
     {offset
       ccMDn: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccMDx; else goto ccMDw;
       ccMDx: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccMDw: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccMDn_info" {
     block_ccMDn_info:
         const _ccMDn;
         const 0;
         const 30;
 },
 sat_scLND_entry() //  [R1]
         { []
         }
     {offset
       ccMDz: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto ccMDD; else goto ccMDC;
       ccMDD: // global
           HpAlloc = 64;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMDC: // global
           _scLLS::P64 = P64[R1 + 16];
           _scLLT::P64 = P64[R1 + 24];
           _scLLU::P64 = P64[R1 + 32];
           _scLLV::P64 = P64[R1 + 40];
           _scLMS::P64 = P64[R1 + 48];
           _scLMU::P64 = P64[R1 + 56];
           I64[Hp - 56] = sat_scLNC_info;
           P64[Hp - 40] = _scLLS::P64;
           P64[Hp - 32] = _scLLT::P64;
           P64[Hp - 24] = _scLLU::P64;
           P64[Hp - 16] = _scLLV::P64;
           P64[Hp - 8] = _scLMS::P64;
           P64[Hp] = _scLMU::P64;
           R3 = Hp - 56;
           R2 = lvl32_rcHq1_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLND_info" {
     sat_scLND_info:
         const sat_scLND_entry;
         const 6;
         const 4294967311;
         const ScMjD_srt;
 },
 sat_scLNE_entry() //  [R1]
         { []
         }
     {offset
       ccMDE: // global
           _scLNE::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccMDF; else goto ccMDG;
       ccMDG: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto ccMDI; else goto ccMDH;
       ccMDI: // global
           HpAlloc = 64;
           goto ccMDF;
       ccMDF: // global
           R1 = _scLNE::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMDH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scLNE::P64;
           _scLLS::P64 = P64[_scLNE::P64 + 16];
           _scLLT::P64 = P64[_scLNE::P64 + 24];
           _scLLU::P64 = P64[_scLNE::P64 + 32];
           _scLLV::P64 = P64[_scLNE::P64 + 40];
           _scLMS::P64 = P64[_scLNE::P64 + 48];
           _scLMU::P64 = P64[_scLNE::P64 + 56];
           I64[Hp - 56] = sat_scLND_info;
           P64[Hp - 40] = _scLLS::P64;
           P64[Hp - 32] = _scLLT::P64;
           P64[Hp - 24] = _scLLU::P64;
           P64[Hp - 16] = _scLLV::P64;
           P64[Hp - 8] = _scLMS::P64;
           P64[Hp] = _scLMU::P64;
           R3 = Hp - 56;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLNE_info" {
     sat_scLNE_info:
         const sat_scLNE_entry;
         const 6;
         const 4294967311;
         const ScMjD_srt;
 },
 sat_scLNI_entry() //  [R1]
         { []
         }
     {offset
       ccMDJ: // global
           if ((Sp + -72) < SpLim) (likely: False) goto ccMDN; else goto ccMDO;
       ccMDN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMDO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 72] = block_ccMAw_info;
           _scLLS::P64 = P64[R1 + 24];
           _scLLT::P64 = P64[R1 + 32];
           _scLLU::P64 = P64[R1 + 40];
           _scLLV::P64 = P64[R1 + 48];
           _scLMS::P64 = P64[R1 + 56];
           _scLMU::P64 = P64[R1 + 64];
           R1 = P64[R1 + 16];
           P64[Sp - 64] = _scLLS::P64;
           P64[Sp - 56] = _scLLT::P64;
           P64[Sp - 48] = _scLLU::P64;
           P64[Sp - 40] = _scLLV::P64;
           P64[Sp - 32] = _scLMS::P64;
           P64[Sp - 24] = _scLMU::P64;
           Sp = Sp - 72;
           if (R1 & 7 != 0) goto ucMDV; else goto ccMAx;
       ucMDV: // global
           call _ccMAw(R1) args: 0, res: 0, upd: 0;
       ccMAx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLNI_info" {
     sat_scLNI_info:
         const sat_scLNI_entry;
         const 7;
         const 4294967311;
         const ScMjD_srt;
 },
 _ccMAw() //  [R1]
         { []
         }
     {offset
       ccMAw: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto ccMDR; else goto ccMDQ;
       ccMDR: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       ccMDQ: // global
           _scLN4::I64 = I64[R1 + 7];
           I64[Hp - 56] = sat_scLNE_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = P64[Sp + 48];
           I64[Sp + 48] = block_ccMDK_info;
           R4 = Hp - 56;
           R3 = _scLN4::I64;
           R2 = 0;
           Sp = Sp + 48;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccMAw_info" {
     block_ccMAw_info:
         const _ccMAw;
         const 6;
         const 4294967326;
         const ScMjD_srt;
 },
 _ccMDK() //  [R1, R2]
         { []
         }
     {offset
       ccMDK: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccMDU; else goto ccMDT;
       ccMDU: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccMDT: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccMDK_info" {
     block_ccMDK_info:
         const _ccMDK;
         const 0;
         const 30;
 },
 sat_scLNJ_entry() //  [R1]
         { []
         }
     {offset
       ccMDW: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto ccME0; else goto ccMDZ;
       ccME0: // global
           HpAlloc = 72;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMDZ: // global
           _scLLR::P64 = P64[R1 + 16];
           _scLLS::P64 = P64[R1 + 24];
           _scLLT::P64 = P64[R1 + 32];
           _scLLU::P64 = P64[R1 + 40];
           _scLLV::P64 = P64[R1 + 48];
           _scLMS::P64 = P64[R1 + 56];
           _scLMU::P64 = P64[R1 + 64];
           I64[Hp - 64] = sat_scLNI_info;
           P64[Hp - 48] = _scLLR::P64;
           P64[Hp - 40] = _scLLS::P64;
           P64[Hp - 32] = _scLLT::P64;
           P64[Hp - 24] = _scLLU::P64;
           P64[Hp - 16] = _scLLV::P64;
           P64[Hp - 8] = _scLMS::P64;
           P64[Hp] = _scLMU::P64;
           R3 = Hp - 64;
           R2 = lvl31_rcHq0_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLNJ_info" {
     sat_scLNJ_info:
         const sat_scLNJ_entry;
         const 7;
         const 4294967311;
         const ScMjD_srt;
 },
 sat_scLNK_entry() //  [R1]
         { []
         }
     {offset
       ccME1: // global
           _scLNK::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccME2; else goto ccME3;
       ccME3: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto ccME5; else goto ccME4;
       ccME5: // global
           HpAlloc = 72;
           goto ccME2;
       ccME2: // global
           R1 = _scLNK::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccME4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scLNK::P64;
           _scLLR::P64 = P64[_scLNK::P64 + 16];
           _scLLS::P64 = P64[_scLNK::P64 + 24];
           _scLLT::P64 = P64[_scLNK::P64 + 32];
           _scLLU::P64 = P64[_scLNK::P64 + 40];
           _scLLV::P64 = P64[_scLNK::P64 + 48];
           _scLMS::P64 = P64[_scLNK::P64 + 56];
           _scLMU::P64 = P64[_scLNK::P64 + 64];
           I64[Hp - 64] = sat_scLNJ_info;
           P64[Hp - 48] = _scLLR::P64;
           P64[Hp - 40] = _scLLS::P64;
           P64[Hp - 32] = _scLLT::P64;
           P64[Hp - 24] = _scLLU::P64;
           P64[Hp - 16] = _scLLV::P64;
           P64[Hp - 8] = _scLMS::P64;
           P64[Hp] = _scLMU::P64;
           R3 = Hp - 64;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLNK_info" {
     sat_scLNK_info:
         const sat_scLNK_entry;
         const 7;
         const 4294967311;
         const ScMjD_srt;
 },
 sat_scLNO_entry() //  [R1]
         { []
         }
     {offset
       ccME6: // global
           if ((Sp + -80) < SpLim) (likely: False) goto ccMEa; else goto ccMEb;
       ccMEa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMEb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 80] = block_ccMAf_info;
           _scLLR::P64 = P64[R1 + 24];
           _scLLS::P64 = P64[R1 + 32];
           _scLLT::P64 = P64[R1 + 40];
           _scLLU::P64 = P64[R1 + 48];
           _scLLV::P64 = P64[R1 + 56];
           _scLMS::P64 = P64[R1 + 64];
           _scLMU::P64 = P64[R1 + 72];
           R1 = P64[R1 + 16];
           P64[Sp - 72] = _scLLR::P64;
           P64[Sp - 64] = _scLLS::P64;
           P64[Sp - 56] = _scLLT::P64;
           P64[Sp - 48] = _scLLU::P64;
           P64[Sp - 40] = _scLLV::P64;
           P64[Sp - 32] = _scLMS::P64;
           P64[Sp - 24] = _scLMU::P64;
           Sp = Sp - 80;
           if (R1 & 7 != 0) goto ucMEi; else goto ccMAg;
       ucMEi: // global
           call _ccMAf(R1) args: 0, res: 0, upd: 0;
       ccMAg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLNO_info" {
     sat_scLNO_info:
         const sat_scLNO_entry;
         const 8;
         const 4294967311;
         const ScMjD_srt;
 },
 _ccMAf() //  [R1]
         { []
         }
     {offset
       ccMAf: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto ccMEe; else goto ccMEd;
       ccMEe: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       ccMEd: // global
           _scLN2::I64 = I64[R1 + 7];
           I64[Hp - 64] = sat_scLNK_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = P64[Sp + 40];
           P64[Hp - 8] = P64[Sp + 48];
           P64[Hp] = P64[Sp + 56];
           I64[Sp + 56] = block_ccME7_info;
           R4 = Hp - 64;
           R3 = _scLN2::I64;
           R2 = 0;
           Sp = Sp + 56;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccMAf_info" {
     block_ccMAf_info:
         const _ccMAf;
         const 7;
         const 4294967326;
         const ScMjD_srt;
 },
 _ccME7() //  [R1, R2]
         { []
         }
     {offset
       ccME7: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccMEh; else goto ccMEg;
       ccMEh: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccMEg: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccME7_info" {
     block_ccME7_info:
         const _ccME7;
         const 0;
         const 30;
 },
 sat_scLNP_entry() //  [R1]
         { []
         }
     {offset
       ccMEj: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto ccMEn; else goto ccMEm;
       ccMEn: // global
           HpAlloc = 80;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMEm: // global
           _scLLQ::P64 = P64[R1 + 16];
           _scLLR::P64 = P64[R1 + 24];
           _scLLS::P64 = P64[R1 + 32];
           _scLLT::P64 = P64[R1 + 40];
           _scLLU::P64 = P64[R1 + 48];
           _scLLV::P64 = P64[R1 + 56];
           _scLMS::P64 = P64[R1 + 64];
           _scLMU::P64 = P64[R1 + 72];
           I64[Hp - 72] = sat_scLNO_info;
           P64[Hp - 56] = _scLLQ::P64;
           P64[Hp - 48] = _scLLR::P64;
           P64[Hp - 40] = _scLLS::P64;
           P64[Hp - 32] = _scLLT::P64;
           P64[Hp - 24] = _scLLU::P64;
           P64[Hp - 16] = _scLLV::P64;
           P64[Hp - 8] = _scLMS::P64;
           P64[Hp] = _scLMU::P64;
           R3 = Hp - 72;
           R2 = lvl30_rcHpZ_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLNP_info" {
     sat_scLNP_info:
         const sat_scLNP_entry;
         const 8;
         const 4294967311;
         const ScMjD_srt;
 },
 sat_scLNQ_entry() //  [R1]
         { []
         }
     {offset
       ccMEo: // global
           _scLNQ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccMEp; else goto ccMEq;
       ccMEq: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto ccMEs; else goto ccMEr;
       ccMEs: // global
           HpAlloc = 80;
           goto ccMEp;
       ccMEp: // global
           R1 = _scLNQ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMEr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scLNQ::P64;
           _scLLQ::P64 = P64[_scLNQ::P64 + 16];
           _scLLR::P64 = P64[_scLNQ::P64 + 24];
           _scLLS::P64 = P64[_scLNQ::P64 + 32];
           _scLLT::P64 = P64[_scLNQ::P64 + 40];
           _scLLU::P64 = P64[_scLNQ::P64 + 48];
           _scLLV::P64 = P64[_scLNQ::P64 + 56];
           _scLMS::P64 = P64[_scLNQ::P64 + 64];
           _scLMU::P64 = P64[_scLNQ::P64 + 72];
           I64[Hp - 72] = sat_scLNP_info;
           P64[Hp - 56] = _scLLQ::P64;
           P64[Hp - 48] = _scLLR::P64;
           P64[Hp - 40] = _scLLS::P64;
           P64[Hp - 32] = _scLLT::P64;
           P64[Hp - 24] = _scLLU::P64;
           P64[Hp - 16] = _scLLV::P64;
           P64[Hp - 8] = _scLMS::P64;
           P64[Hp] = _scLMU::P64;
           R3 = Hp - 72;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLNQ_info" {
     sat_scLNQ_info:
         const sat_scLNQ_entry;
         const 8;
         const 4294967311;
         const ScMjD_srt;
 },
 sat_scLNU_entry() //  [R1]
         { []
         }
     {offset
       ccMEw: // global
           _scLNU::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto ccMEx; else goto ccMEy;
       ccMEy: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto ccMEA; else goto ccMEz;
       ccMEA: // global
           HpAlloc = 80;
           goto ccMEx;
       ccMEx: // global
           R1 = _scLNU::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMEz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scLNU::P64;
           _scLLQ::P64 = P64[_scLNU::P64 + 16];
           _scLLR::P64 = P64[_scLNU::P64 + 24];
           _scLLS::P64 = P64[_scLNU::P64 + 32];
           _scLLT::P64 = P64[_scLNU::P64 + 40];
           _scLLU::P64 = P64[_scLNU::P64 + 48];
           _scLLV::P64 = P64[_scLNU::P64 + 56];
           _scLMN::P64 = P64[_scLNU::P64 + 64];
           _scLMS::P64 = P64[_scLNU::P64 + 72];
           _scLMU::P64 = P64[_scLNU::P64 + 80];
           I64[Hp - 72] = sat_scLNQ_info;
           P64[Hp - 56] = _scLLQ::P64;
           P64[Hp - 48] = _scLLR::P64;
           P64[Hp - 40] = _scLLS::P64;
           P64[Hp - 32] = _scLLT::P64;
           P64[Hp - 24] = _scLLU::P64;
           P64[Hp - 16] = _scLLV::P64;
           P64[Hp - 8] = _scLMS::P64;
           P64[Hp] = _scLMU::P64;
           I64[Sp - 24] = block_ccMEt_info;
           R4 = Hp - 72;
           R3 = _scLMN::P64;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLNU_info" {
     sat_scLNU_info:
         const sat_scLNU_entry;
         const 9;
         const 12884901903;
         const ScMjD_srt;
 },
 _ccMEt() //  [R1, R2]
         { []
         }
     {offset
       ccMEt: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccMED; else goto ccMEC;
       ccMED: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccMEC: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccMEt_info" {
     block_ccMEt_info:
         const _ccMEt;
         const 0;
         const 30;
 },
 sat_scLNV_entry() //  [R1]
         { []
         }
     {offset
       ccMEE: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto ccMEI; else goto ccMEH;
       ccMEI: // global
           HpAlloc = 88;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMEH: // global
           _scLLQ::P64 = P64[R1 + 16];
           _scLLR::P64 = P64[R1 + 24];
           _scLLS::P64 = P64[R1 + 32];
           _scLLT::P64 = P64[R1 + 40];
           _scLLU::P64 = P64[R1 + 48];
           _scLLV::P64 = P64[R1 + 56];
           _scLMN::P64 = P64[R1 + 64];
           _scLMS::P64 = P64[R1 + 72];
           _scLMU::P64 = P64[R1 + 80];
           I64[Hp - 80] = sat_scLNU_info;
           P64[Hp - 64] = _scLLQ::P64;
           P64[Hp - 56] = _scLLR::P64;
           P64[Hp - 48] = _scLLS::P64;
           P64[Hp - 40] = _scLLT::P64;
           P64[Hp - 32] = _scLLU::P64;
           P64[Hp - 24] = _scLLV::P64;
           P64[Hp - 16] = _scLMN::P64;
           P64[Hp - 8] = _scLMS::P64;
           P64[Hp] = _scLMU::P64;
           R3 = Hp - 80;
           R2 = lvl29_rcHpY_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLNV_info" {
     sat_scLNV_info:
         const sat_scLNV_entry;
         const 9;
         const 12884901903;
         const ScMjD_srt;
 },
 sat_scLNW_entry() //  [R1]
         { []
         }
     {offset
       ccMEJ: // global
           _scLNW::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccMEK; else goto ccMEL;
       ccMEL: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto ccMEN; else goto ccMEM;
       ccMEN: // global
           HpAlloc = 88;
           goto ccMEK;
       ccMEK: // global
           R1 = _scLNW::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMEM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scLNW::P64;
           _scLLQ::P64 = P64[_scLNW::P64 + 16];
           _scLLR::P64 = P64[_scLNW::P64 + 24];
           _scLLS::P64 = P64[_scLNW::P64 + 32];
           _scLLT::P64 = P64[_scLNW::P64 + 40];
           _scLLU::P64 = P64[_scLNW::P64 + 48];
           _scLLV::P64 = P64[_scLNW::P64 + 56];
           _scLMN::P64 = P64[_scLNW::P64 + 64];
           _scLMS::P64 = P64[_scLNW::P64 + 72];
           _scLMU::P64 = P64[_scLNW::P64 + 80];
           I64[Hp - 80] = sat_scLNV_info;
           P64[Hp - 64] = _scLLQ::P64;
           P64[Hp - 56] = _scLLR::P64;
           P64[Hp - 48] = _scLLS::P64;
           P64[Hp - 40] = _scLLT::P64;
           P64[Hp - 32] = _scLLU::P64;
           P64[Hp - 24] = _scLLV::P64;
           P64[Hp - 16] = _scLMN::P64;
           P64[Hp - 8] = _scLMS::P64;
           P64[Hp] = _scLMU::P64;
           R3 = Hp - 80;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLNW_info" {
     sat_scLNW_info:
         const sat_scLNW_entry;
         const 9;
         const 12884901903;
         const ScMjD_srt;
 },
 sat_scLO0_entry() //  [R1]
         { []
         }
     {offset
       ccMER: // global
           _scLO0::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto ccMES; else goto ccMET;
       ccMET: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto ccMEV; else goto ccMEU;
       ccMEV: // global
           HpAlloc = 88;
           goto ccMES;
       ccMES: // global
           R1 = _scLO0::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMEU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scLO0::P64;
           _scLLQ::P64 = P64[_scLO0::P64 + 16];
           _scLLR::P64 = P64[_scLO0::P64 + 24];
           _scLLS::P64 = P64[_scLO0::P64 + 32];
           _scLLT::P64 = P64[_scLO0::P64 + 40];
           _scLLU::P64 = P64[_scLO0::P64 + 48];
           _scLLV::P64 = P64[_scLO0::P64 + 56];
           _scLMI::P64 = P64[_scLO0::P64 + 64];
           _scLMN::P64 = P64[_scLO0::P64 + 72];
           _scLMS::P64 = P64[_scLO0::P64 + 80];
           _scLMU::P64 = P64[_scLO0::P64 + 88];
           I64[Hp - 80] = sat_scLNW_info;
           P64[Hp - 64] = _scLLQ::P64;
           P64[Hp - 56] = _scLLR::P64;
           P64[Hp - 48] = _scLLS::P64;
           P64[Hp - 40] = _scLLT::P64;
           P64[Hp - 32] = _scLLU::P64;
           P64[Hp - 24] = _scLLV::P64;
           P64[Hp - 16] = _scLMN::P64;
           P64[Hp - 8] = _scLMS::P64;
           P64[Hp] = _scLMU::P64;
           I64[Sp - 24] = block_ccMEO_info;
           R4 = Hp - 80;
           R3 = _scLMI::P64;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLO0_info" {
     sat_scLO0_info:
         const sat_scLO0_entry;
         const 10;
         const 12884901903;
         const ScMjD_srt;
 },
 _ccMEO() //  [R1, R2]
         { []
         }
     {offset
       ccMEO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccMEY; else goto ccMEX;
       ccMEY: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccMEX: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccMEO_info" {
     block_ccMEO_info:
         const _ccMEO;
         const 0;
         const 30;
 },
 sat_scLO1_entry() //  [R1]
         { []
         }
     {offset
       ccMEZ: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto ccMF3; else goto ccMF2;
       ccMF3: // global
           HpAlloc = 96;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMF2: // global
           _scLLQ::P64 = P64[R1 + 16];
           _scLLR::P64 = P64[R1 + 24];
           _scLLS::P64 = P64[R1 + 32];
           _scLLT::P64 = P64[R1 + 40];
           _scLLU::P64 = P64[R1 + 48];
           _scLLV::P64 = P64[R1 + 56];
           _scLMI::P64 = P64[R1 + 64];
           _scLMN::P64 = P64[R1 + 72];
           _scLMS::P64 = P64[R1 + 80];
           _scLMU::P64 = P64[R1 + 88];
           I64[Hp - 88] = sat_scLO0_info;
           P64[Hp - 72] = _scLLQ::P64;
           P64[Hp - 64] = _scLLR::P64;
           P64[Hp - 56] = _scLLS::P64;
           P64[Hp - 48] = _scLLT::P64;
           P64[Hp - 40] = _scLLU::P64;
           P64[Hp - 32] = _scLLV::P64;
           P64[Hp - 24] = _scLMI::P64;
           P64[Hp - 16] = _scLMN::P64;
           P64[Hp - 8] = _scLMS::P64;
           P64[Hp] = _scLMU::P64;
           R3 = Hp - 88;
           R2 = lvl28_rcHpX_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLO1_info" {
     sat_scLO1_info:
         const sat_scLO1_entry;
         const 10;
         const 12884901903;
         const ScMjD_srt;
 },
 sat_scLO2_entry() //  [R1]
         { []
         }
     {offset
       ccMF4: // global
           _scLO2::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccMF5; else goto ccMF6;
       ccMF6: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto ccMF8; else goto ccMF7;
       ccMF8: // global
           HpAlloc = 96;
           goto ccMF5;
       ccMF5: // global
           R1 = _scLO2::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMF7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scLO2::P64;
           _scLLQ::P64 = P64[_scLO2::P64 + 16];
           _scLLR::P64 = P64[_scLO2::P64 + 24];
           _scLLS::P64 = P64[_scLO2::P64 + 32];
           _scLLT::P64 = P64[_scLO2::P64 + 40];
           _scLLU::P64 = P64[_scLO2::P64 + 48];
           _scLLV::P64 = P64[_scLO2::P64 + 56];
           _scLMI::P64 = P64[_scLO2::P64 + 64];
           _scLMN::P64 = P64[_scLO2::P64 + 72];
           _scLMS::P64 = P64[_scLO2::P64 + 80];
           _scLMU::P64 = P64[_scLO2::P64 + 88];
           I64[Hp - 88] = sat_scLO1_info;
           P64[Hp - 72] = _scLLQ::P64;
           P64[Hp - 64] = _scLLR::P64;
           P64[Hp - 56] = _scLLS::P64;
           P64[Hp - 48] = _scLLT::P64;
           P64[Hp - 40] = _scLLU::P64;
           P64[Hp - 32] = _scLLV::P64;
           P64[Hp - 24] = _scLMI::P64;
           P64[Hp - 16] = _scLMN::P64;
           P64[Hp - 8] = _scLMS::P64;
           P64[Hp] = _scLMU::P64;
           R3 = Hp - 88;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLO2_info" {
     sat_scLO2_info:
         const sat_scLO2_entry;
         const 10;
         const 12884901903;
         const ScMjD_srt;
 },
 sat_scLO6_entry() //  [R1]
         { []
         }
     {offset
       ccMFc: // global
           _scLO6::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto ccMFd; else goto ccMFe;
       ccMFe: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto ccMFg; else goto ccMFf;
       ccMFg: // global
           HpAlloc = 96;
           goto ccMFd;
       ccMFd: // global
           R1 = _scLO6::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMFf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scLO6::P64;
           _scLLQ::P64 = P64[_scLO6::P64 + 16];
           _scLLR::P64 = P64[_scLO6::P64 + 24];
           _scLLS::P64 = P64[_scLO6::P64 + 32];
           _scLLT::P64 = P64[_scLO6::P64 + 40];
           _scLLU::P64 = P64[_scLO6::P64 + 48];
           _scLLV::P64 = P64[_scLO6::P64 + 56];
           _scLMD::P64 = P64[_scLO6::P64 + 64];
           _scLMI::P64 = P64[_scLO6::P64 + 72];
           _scLMN::P64 = P64[_scLO6::P64 + 80];
           _scLMS::P64 = P64[_scLO6::P64 + 88];
           _scLMU::P64 = P64[_scLO6::P64 + 96];
           I64[Hp - 88] = sat_scLO2_info;
           P64[Hp - 72] = _scLLQ::P64;
           P64[Hp - 64] = _scLLR::P64;
           P64[Hp - 56] = _scLLS::P64;
           P64[Hp - 48] = _scLLT::P64;
           P64[Hp - 40] = _scLLU::P64;
           P64[Hp - 32] = _scLLV::P64;
           P64[Hp - 24] = _scLMI::P64;
           P64[Hp - 16] = _scLMN::P64;
           P64[Hp - 8] = _scLMS::P64;
           P64[Hp] = _scLMU::P64;
           I64[Sp - 24] = block_ccMF9_info;
           R4 = Hp - 88;
           R3 = _scLMD::P64;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLO6_info" {
     sat_scLO6_info:
         const sat_scLO6_entry;
         const 11;
         const 12884901903;
         const ScMjD_srt;
 },
 _ccMF9() //  [R1, R2]
         { []
         }
     {offset
       ccMF9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccMFj; else goto ccMFi;
       ccMFj: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccMFi: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccMF9_info" {
     block_ccMF9_info:
         const _ccMF9;
         const 0;
         const 30;
 },
 sat_scLO7_entry() //  [R1]
         { []
         }
     {offset
       ccMFk: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto ccMFo; else goto ccMFn;
       ccMFo: // global
           HpAlloc = 104;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMFn: // global
           _scLLQ::P64 = P64[R1 + 16];
           _scLLR::P64 = P64[R1 + 24];
           _scLLS::P64 = P64[R1 + 32];
           _scLLT::P64 = P64[R1 + 40];
           _scLLU::P64 = P64[R1 + 48];
           _scLLV::P64 = P64[R1 + 56];
           _scLMD::P64 = P64[R1 + 64];
           _scLMI::P64 = P64[R1 + 72];
           _scLMN::P64 = P64[R1 + 80];
           _scLMS::P64 = P64[R1 + 88];
           _scLMU::P64 = P64[R1 + 96];
           I64[Hp - 96] = sat_scLO6_info;
           P64[Hp - 80] = _scLLQ::P64;
           P64[Hp - 72] = _scLLR::P64;
           P64[Hp - 64] = _scLLS::P64;
           P64[Hp - 56] = _scLLT::P64;
           P64[Hp - 48] = _scLLU::P64;
           P64[Hp - 40] = _scLLV::P64;
           P64[Hp - 32] = _scLMD::P64;
           P64[Hp - 24] = _scLMI::P64;
           P64[Hp - 16] = _scLMN::P64;
           P64[Hp - 8] = _scLMS::P64;
           P64[Hp] = _scLMU::P64;
           R3 = Hp - 96;
           R2 = lvl27_rcHpW_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLO7_info" {
     sat_scLO7_info:
         const sat_scLO7_entry;
         const 11;
         const 12884901903;
         const ScMjD_srt;
 },
 sat_scLO8_entry() //  [R1]
         { []
         }
     {offset
       ccMFp: // global
           _scLO8::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccMFq; else goto ccMFr;
       ccMFr: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto ccMFt; else goto ccMFs;
       ccMFt: // global
           HpAlloc = 104;
           goto ccMFq;
       ccMFq: // global
           R1 = _scLO8::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMFs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scLO8::P64;
           _scLLQ::P64 = P64[_scLO8::P64 + 16];
           _scLLR::P64 = P64[_scLO8::P64 + 24];
           _scLLS::P64 = P64[_scLO8::P64 + 32];
           _scLLT::P64 = P64[_scLO8::P64 + 40];
           _scLLU::P64 = P64[_scLO8::P64 + 48];
           _scLLV::P64 = P64[_scLO8::P64 + 56];
           _scLMD::P64 = P64[_scLO8::P64 + 64];
           _scLMI::P64 = P64[_scLO8::P64 + 72];
           _scLMN::P64 = P64[_scLO8::P64 + 80];
           _scLMS::P64 = P64[_scLO8::P64 + 88];
           _scLMU::P64 = P64[_scLO8::P64 + 96];
           I64[Hp - 96] = sat_scLO7_info;
           P64[Hp - 80] = _scLLQ::P64;
           P64[Hp - 72] = _scLLR::P64;
           P64[Hp - 64] = _scLLS::P64;
           P64[Hp - 56] = _scLLT::P64;
           P64[Hp - 48] = _scLLU::P64;
           P64[Hp - 40] = _scLLV::P64;
           P64[Hp - 32] = _scLMD::P64;
           P64[Hp - 24] = _scLMI::P64;
           P64[Hp - 16] = _scLMN::P64;
           P64[Hp - 8] = _scLMS::P64;
           P64[Hp] = _scLMU::P64;
           R3 = Hp - 96;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLO8_info" {
     sat_scLO8_info:
         const sat_scLO8_entry;
         const 11;
         const 12884901903;
         const ScMjD_srt;
 },
 sat_scLOc_entry() //  [R1]
         { []
         }
     {offset
       ccMFx: // global
           _scLOc::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto ccMFy; else goto ccMFz;
       ccMFz: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto ccMFB; else goto ccMFA;
       ccMFB: // global
           HpAlloc = 104;
           goto ccMFy;
       ccMFy: // global
           R1 = _scLOc::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMFA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scLOc::P64;
           _scLLQ::P64 = P64[_scLOc::P64 + 16];
           _scLLR::P64 = P64[_scLOc::P64 + 24];
           _scLLS::P64 = P64[_scLOc::P64 + 32];
           _scLLT::P64 = P64[_scLOc::P64 + 40];
           _scLLU::P64 = P64[_scLOc::P64 + 48];
           _scLLV::P64 = P64[_scLOc::P64 + 56];
           _scLMy::P64 = P64[_scLOc::P64 + 64];
           _scLMD::P64 = P64[_scLOc::P64 + 72];
           _scLMI::P64 = P64[_scLOc::P64 + 80];
           _scLMN::P64 = P64[_scLOc::P64 + 88];
           _scLMS::P64 = P64[_scLOc::P64 + 96];
           _scLMU::P64 = P64[_scLOc::P64 + 104];
           I64[Hp - 96] = sat_scLO8_info;
           P64[Hp - 80] = _scLLQ::P64;
           P64[Hp - 72] = _scLLR::P64;
           P64[Hp - 64] = _scLLS::P64;
           P64[Hp - 56] = _scLLT::P64;
           P64[Hp - 48] = _scLLU::P64;
           P64[Hp - 40] = _scLLV::P64;
           P64[Hp - 32] = _scLMD::P64;
           P64[Hp - 24] = _scLMI::P64;
           P64[Hp - 16] = _scLMN::P64;
           P64[Hp - 8] = _scLMS::P64;
           P64[Hp] = _scLMU::P64;
           I64[Sp - 24] = block_ccMFu_info;
           R4 = Hp - 96;
           R3 = _scLMy::P64;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLOc_info" {
     sat_scLOc_info:
         const sat_scLOc_entry;
         const 12;
         const 12884901903;
         const ScMjD_srt;
 },
 _ccMFu() //  [R1, R2]
         { []
         }
     {offset
       ccMFu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccMFE; else goto ccMFD;
       ccMFE: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccMFD: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccMFu_info" {
     block_ccMFu_info:
         const _ccMFu;
         const 0;
         const 30;
 },
 sat_scLOd_entry() //  [R1]
         { []
         }
     {offset
       ccMFF: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto ccMFJ; else goto ccMFI;
       ccMFJ: // global
           HpAlloc = 112;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMFI: // global
           _scLLQ::P64 = P64[R1 + 16];
           _scLLR::P64 = P64[R1 + 24];
           _scLLS::P64 = P64[R1 + 32];
           _scLLT::P64 = P64[R1 + 40];
           _scLLU::P64 = P64[R1 + 48];
           _scLLV::P64 = P64[R1 + 56];
           _scLMy::P64 = P64[R1 + 64];
           _scLMD::P64 = P64[R1 + 72];
           _scLMI::P64 = P64[R1 + 80];
           _scLMN::P64 = P64[R1 + 88];
           _scLMS::P64 = P64[R1 + 96];
           _scLMU::P64 = P64[R1 + 104];
           I64[Hp - 104] = sat_scLOc_info;
           P64[Hp - 88] = _scLLQ::P64;
           P64[Hp - 80] = _scLLR::P64;
           P64[Hp - 72] = _scLLS::P64;
           P64[Hp - 64] = _scLLT::P64;
           P64[Hp - 56] = _scLLU::P64;
           P64[Hp - 48] = _scLLV::P64;
           P64[Hp - 40] = _scLMy::P64;
           P64[Hp - 32] = _scLMD::P64;
           P64[Hp - 24] = _scLMI::P64;
           P64[Hp - 16] = _scLMN::P64;
           P64[Hp - 8] = _scLMS::P64;
           P64[Hp] = _scLMU::P64;
           R3 = Hp - 104;
           R2 = lvl26_rcHpV_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLOd_info" {
     sat_scLOd_info:
         const sat_scLOd_entry;
         const 12;
         const 12884901903;
         const ScMjD_srt;
 },
 sat_scLOe_entry() //  [R1]
         { []
         }
     {offset
       ccMFK: // global
           _scLOe::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccMFL; else goto ccMFM;
       ccMFM: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto ccMFO; else goto ccMFN;
       ccMFO: // global
           HpAlloc = 112;
           goto ccMFL;
       ccMFL: // global
           R1 = _scLOe::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMFN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scLOe::P64;
           _scLLQ::P64 = P64[_scLOe::P64 + 16];
           _scLLR::P64 = P64[_scLOe::P64 + 24];
           _scLLS::P64 = P64[_scLOe::P64 + 32];
           _scLLT::P64 = P64[_scLOe::P64 + 40];
           _scLLU::P64 = P64[_scLOe::P64 + 48];
           _scLLV::P64 = P64[_scLOe::P64 + 56];
           _scLMy::P64 = P64[_scLOe::P64 + 64];
           _scLMD::P64 = P64[_scLOe::P64 + 72];
           _scLMI::P64 = P64[_scLOe::P64 + 80];
           _scLMN::P64 = P64[_scLOe::P64 + 88];
           _scLMS::P64 = P64[_scLOe::P64 + 96];
           _scLMU::P64 = P64[_scLOe::P64 + 104];
           I64[Hp - 104] = sat_scLOd_info;
           P64[Hp - 88] = _scLLQ::P64;
           P64[Hp - 80] = _scLLR::P64;
           P64[Hp - 72] = _scLLS::P64;
           P64[Hp - 64] = _scLLT::P64;
           P64[Hp - 56] = _scLLU::P64;
           P64[Hp - 48] = _scLLV::P64;
           P64[Hp - 40] = _scLMy::P64;
           P64[Hp - 32] = _scLMD::P64;
           P64[Hp - 24] = _scLMI::P64;
           P64[Hp - 16] = _scLMN::P64;
           P64[Hp - 8] = _scLMS::P64;
           P64[Hp] = _scLMU::P64;
           R3 = Hp - 104;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLOe_info" {
     sat_scLOe_info:
         const sat_scLOe_entry;
         const 12;
         const 12884901903;
         const ScMjD_srt;
 },
 sat_scLOi_entry() //  [R1]
         { []
         }
     {offset
       ccMFS: // global
           _scLOi::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto ccMFT; else goto ccMFU;
       ccMFU: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto ccMFW; else goto ccMFV;
       ccMFW: // global
           HpAlloc = 112;
           goto ccMFT;
       ccMFT: // global
           R1 = _scLOi::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMFV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scLOi::P64;
           _scLLQ::P64 = P64[_scLOi::P64 + 16];
           _scLLR::P64 = P64[_scLOi::P64 + 24];
           _scLLS::P64 = P64[_scLOi::P64 + 32];
           _scLLT::P64 = P64[_scLOi::P64 + 40];
           _scLLU::P64 = P64[_scLOi::P64 + 48];
           _scLLV::P64 = P64[_scLOi::P64 + 56];
           _scLMt::P64 = P64[_scLOi::P64 + 64];
           _scLMy::P64 = P64[_scLOi::P64 + 72];
           _scLMD::P64 = P64[_scLOi::P64 + 80];
           _scLMI::P64 = P64[_scLOi::P64 + 88];
           _scLMN::P64 = P64[_scLOi::P64 + 96];
           _scLMS::P64 = P64[_scLOi::P64 + 104];
           _scLMU::P64 = P64[_scLOi::P64 + 112];
           I64[Hp - 104] = sat_scLOe_info;
           P64[Hp - 88] = _scLLQ::P64;
           P64[Hp - 80] = _scLLR::P64;
           P64[Hp - 72] = _scLLS::P64;
           P64[Hp - 64] = _scLLT::P64;
           P64[Hp - 56] = _scLLU::P64;
           P64[Hp - 48] = _scLLV::P64;
           P64[Hp - 40] = _scLMy::P64;
           P64[Hp - 32] = _scLMD::P64;
           P64[Hp - 24] = _scLMI::P64;
           P64[Hp - 16] = _scLMN::P64;
           P64[Hp - 8] = _scLMS::P64;
           P64[Hp] = _scLMU::P64;
           I64[Sp - 24] = block_ccMFP_info;
           R4 = Hp - 104;
           R3 = _scLMt::P64;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLOi_info" {
     sat_scLOi_info:
         const sat_scLOi_entry;
         const 13;
         const 12884901903;
         const ScMjD_srt;
 },
 _ccMFP() //  [R1, R2]
         { []
         }
     {offset
       ccMFP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccMFZ; else goto ccMFY;
       ccMFZ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccMFY: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccMFP_info" {
     block_ccMFP_info:
         const _ccMFP;
         const 0;
         const 30;
 },
 sat_scLOj_entry() //  [R1]
         { []
         }
     {offset
       ccMG0: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto ccMG4; else goto ccMG3;
       ccMG4: // global
           HpAlloc = 120;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMG3: // global
           _scLLQ::P64 = P64[R1 + 16];
           _scLLR::P64 = P64[R1 + 24];
           _scLLS::P64 = P64[R1 + 32];
           _scLLT::P64 = P64[R1 + 40];
           _scLLU::P64 = P64[R1 + 48];
           _scLLV::P64 = P64[R1 + 56];
           _scLMt::P64 = P64[R1 + 64];
           _scLMy::P64 = P64[R1 + 72];
           _scLMD::P64 = P64[R1 + 80];
           _scLMI::P64 = P64[R1 + 88];
           _scLMN::P64 = P64[R1 + 96];
           _scLMS::P64 = P64[R1 + 104];
           _scLMU::P64 = P64[R1 + 112];
           I64[Hp - 112] = sat_scLOi_info;
           P64[Hp - 96] = _scLLQ::P64;
           P64[Hp - 88] = _scLLR::P64;
           P64[Hp - 80] = _scLLS::P64;
           P64[Hp - 72] = _scLLT::P64;
           P64[Hp - 64] = _scLLU::P64;
           P64[Hp - 56] = _scLLV::P64;
           P64[Hp - 48] = _scLMt::P64;
           P64[Hp - 40] = _scLMy::P64;
           P64[Hp - 32] = _scLMD::P64;
           P64[Hp - 24] = _scLMI::P64;
           P64[Hp - 16] = _scLMN::P64;
           P64[Hp - 8] = _scLMS::P64;
           P64[Hp] = _scLMU::P64;
           R3 = Hp - 112;
           R2 = lvl25_rcHpU_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLOj_info" {
     sat_scLOj_info:
         const sat_scLOj_entry;
         const 13;
         const 12884901903;
         const ScMjD_srt;
 },
 sat_scLOk_entry() //  [R1]
         { []
         }
     {offset
       ccMG5: // global
           _scLOk::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccMG6; else goto ccMG7;
       ccMG7: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto ccMG9; else goto ccMG8;
       ccMG9: // global
           HpAlloc = 120;
           goto ccMG6;
       ccMG6: // global
           R1 = _scLOk::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMG8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scLOk::P64;
           _scLLQ::P64 = P64[_scLOk::P64 + 16];
           _scLLR::P64 = P64[_scLOk::P64 + 24];
           _scLLS::P64 = P64[_scLOk::P64 + 32];
           _scLLT::P64 = P64[_scLOk::P64 + 40];
           _scLLU::P64 = P64[_scLOk::P64 + 48];
           _scLLV::P64 = P64[_scLOk::P64 + 56];
           _scLMt::P64 = P64[_scLOk::P64 + 64];
           _scLMy::P64 = P64[_scLOk::P64 + 72];
           _scLMD::P64 = P64[_scLOk::P64 + 80];
           _scLMI::P64 = P64[_scLOk::P64 + 88];
           _scLMN::P64 = P64[_scLOk::P64 + 96];
           _scLMS::P64 = P64[_scLOk::P64 + 104];
           _scLMU::P64 = P64[_scLOk::P64 + 112];
           I64[Hp - 112] = sat_scLOj_info;
           P64[Hp - 96] = _scLLQ::P64;
           P64[Hp - 88] = _scLLR::P64;
           P64[Hp - 80] = _scLLS::P64;
           P64[Hp - 72] = _scLLT::P64;
           P64[Hp - 64] = _scLLU::P64;
           P64[Hp - 56] = _scLLV::P64;
           P64[Hp - 48] = _scLMt::P64;
           P64[Hp - 40] = _scLMy::P64;
           P64[Hp - 32] = _scLMD::P64;
           P64[Hp - 24] = _scLMI::P64;
           P64[Hp - 16] = _scLMN::P64;
           P64[Hp - 8] = _scLMS::P64;
           P64[Hp] = _scLMU::P64;
           R3 = Hp - 112;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLOk_info" {
     sat_scLOk_info:
         const sat_scLOk_entry;
         const 13;
         const 12884901903;
         const ScMjD_srt;
 },
 sat_scLOo_entry() //  [R1]
         { []
         }
     {offset
       ccMGd: // global
           _scLOo::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto ccMGe; else goto ccMGf;
       ccMGf: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto ccMGh; else goto ccMGg;
       ccMGh: // global
           HpAlloc = 120;
           goto ccMGe;
       ccMGe: // global
           R1 = _scLOo::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMGg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scLOo::P64;
           _scLLQ::P64 = P64[_scLOo::P64 + 16];
           _scLLR::P64 = P64[_scLOo::P64 + 24];
           _scLLS::P64 = P64[_scLOo::P64 + 32];
           _scLLT::P64 = P64[_scLOo::P64 + 40];
           _scLLU::P64 = P64[_scLOo::P64 + 48];
           _scLLV::P64 = P64[_scLOo::P64 + 56];
           _scLMo::P64 = P64[_scLOo::P64 + 64];
           _scLMt::P64 = P64[_scLOo::P64 + 72];
           _scLMy::P64 = P64[_scLOo::P64 + 80];
           _scLMD::P64 = P64[_scLOo::P64 + 88];
           _scLMI::P64 = P64[_scLOo::P64 + 96];
           _scLMN::P64 = P64[_scLOo::P64 + 104];
           _scLMS::P64 = P64[_scLOo::P64 + 112];
           _scLMU::P64 = P64[_scLOo::P64 + 120];
           I64[Hp - 112] = sat_scLOk_info;
           P64[Hp - 96] = _scLLQ::P64;
           P64[Hp - 88] = _scLLR::P64;
           P64[Hp - 80] = _scLLS::P64;
           P64[Hp - 72] = _scLLT::P64;
           P64[Hp - 64] = _scLLU::P64;
           P64[Hp - 56] = _scLLV::P64;
           P64[Hp - 48] = _scLMt::P64;
           P64[Hp - 40] = _scLMy::P64;
           P64[Hp - 32] = _scLMD::P64;
           P64[Hp - 24] = _scLMI::P64;
           P64[Hp - 16] = _scLMN::P64;
           P64[Hp - 8] = _scLMS::P64;
           P64[Hp] = _scLMU::P64;
           I64[Sp - 24] = block_ccMGa_info;
           R4 = Hp - 112;
           R3 = _scLMo::P64;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLOo_info" {
     sat_scLOo_info:
         const sat_scLOo_entry;
         const 14;
         const 12884901903;
         const ScMjD_srt;
 },
 _ccMGa() //  [R1, R2]
         { []
         }
     {offset
       ccMGa: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccMGk; else goto ccMGj;
       ccMGk: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccMGj: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccMGa_info" {
     block_ccMGa_info:
         const _ccMGa;
         const 0;
         const 30;
 },
 sat_scLOp_entry() //  [R1]
         { []
         }
     {offset
       ccMGl: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto ccMGp; else goto ccMGo;
       ccMGp: // global
           HpAlloc = 128;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMGo: // global
           _scLLQ::P64 = P64[R1 + 16];
           _scLLR::P64 = P64[R1 + 24];
           _scLLS::P64 = P64[R1 + 32];
           _scLLT::P64 = P64[R1 + 40];
           _scLLU::P64 = P64[R1 + 48];
           _scLLV::P64 = P64[R1 + 56];
           _scLMo::P64 = P64[R1 + 64];
           _scLMt::P64 = P64[R1 + 72];
           _scLMy::P64 = P64[R1 + 80];
           _scLMD::P64 = P64[R1 + 88];
           _scLMI::P64 = P64[R1 + 96];
           _scLMN::P64 = P64[R1 + 104];
           _scLMS::P64 = P64[R1 + 112];
           _scLMU::P64 = P64[R1 + 120];
           I64[Hp - 120] = sat_scLOo_info;
           P64[Hp - 104] = _scLLQ::P64;
           P64[Hp - 96] = _scLLR::P64;
           P64[Hp - 88] = _scLLS::P64;
           P64[Hp - 80] = _scLLT::P64;
           P64[Hp - 72] = _scLLU::P64;
           P64[Hp - 64] = _scLLV::P64;
           P64[Hp - 56] = _scLMo::P64;
           P64[Hp - 48] = _scLMt::P64;
           P64[Hp - 40] = _scLMy::P64;
           P64[Hp - 32] = _scLMD::P64;
           P64[Hp - 24] = _scLMI::P64;
           P64[Hp - 16] = _scLMN::P64;
           P64[Hp - 8] = _scLMS::P64;
           P64[Hp] = _scLMU::P64;
           R3 = Hp - 120;
           R2 = lvl24_rcHpT_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLOp_info" {
     sat_scLOp_info:
         const sat_scLOp_entry;
         const 14;
         const 12884901903;
         const ScMjD_srt;
 },
 sat_scLOq_entry() //  [R1]
         { []
         }
     {offset
       ccMGq: // global
           _scLOq::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccMGr; else goto ccMGs;
       ccMGs: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto ccMGu; else goto ccMGt;
       ccMGu: // global
           HpAlloc = 128;
           goto ccMGr;
       ccMGr: // global
           R1 = _scLOq::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMGt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scLOq::P64;
           _scLLQ::P64 = P64[_scLOq::P64 + 16];
           _scLLR::P64 = P64[_scLOq::P64 + 24];
           _scLLS::P64 = P64[_scLOq::P64 + 32];
           _scLLT::P64 = P64[_scLOq::P64 + 40];
           _scLLU::P64 = P64[_scLOq::P64 + 48];
           _scLLV::P64 = P64[_scLOq::P64 + 56];
           _scLMo::P64 = P64[_scLOq::P64 + 64];
           _scLMt::P64 = P64[_scLOq::P64 + 72];
           _scLMy::P64 = P64[_scLOq::P64 + 80];
           _scLMD::P64 = P64[_scLOq::P64 + 88];
           _scLMI::P64 = P64[_scLOq::P64 + 96];
           _scLMN::P64 = P64[_scLOq::P64 + 104];
           _scLMS::P64 = P64[_scLOq::P64 + 112];
           _scLMU::P64 = P64[_scLOq::P64 + 120];
           I64[Hp - 120] = sat_scLOp_info;
           P64[Hp - 104] = _scLLQ::P64;
           P64[Hp - 96] = _scLLR::P64;
           P64[Hp - 88] = _scLLS::P64;
           P64[Hp - 80] = _scLLT::P64;
           P64[Hp - 72] = _scLLU::P64;
           P64[Hp - 64] = _scLLV::P64;
           P64[Hp - 56] = _scLMo::P64;
           P64[Hp - 48] = _scLMt::P64;
           P64[Hp - 40] = _scLMy::P64;
           P64[Hp - 32] = _scLMD::P64;
           P64[Hp - 24] = _scLMI::P64;
           P64[Hp - 16] = _scLMN::P64;
           P64[Hp - 8] = _scLMS::P64;
           P64[Hp] = _scLMU::P64;
           R3 = Hp - 120;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLOq_info" {
     sat_scLOq_info:
         const sat_scLOq_entry;
         const 14;
         const 12884901903;
         const ScMjD_srt;
 },
 sat_scLOu_entry() //  [R1]
         { []
         }
     {offset
       ccMGy: // global
           _scLOu::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto ccMGz; else goto ccMGA;
       ccMGA: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto ccMGC; else goto ccMGB;
       ccMGC: // global
           HpAlloc = 128;
           goto ccMGz;
       ccMGz: // global
           R1 = _scLOu::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMGB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scLOu::P64;
           _scLLQ::P64 = P64[_scLOu::P64 + 16];
           _scLLR::P64 = P64[_scLOu::P64 + 24];
           _scLLS::P64 = P64[_scLOu::P64 + 32];
           _scLLT::P64 = P64[_scLOu::P64 + 40];
           _scLLU::P64 = P64[_scLOu::P64 + 48];
           _scLLV::P64 = P64[_scLOu::P64 + 56];
           _scLMj::P64 = P64[_scLOu::P64 + 64];
           _scLMo::P64 = P64[_scLOu::P64 + 72];
           _scLMt::P64 = P64[_scLOu::P64 + 80];
           _scLMy::P64 = P64[_scLOu::P64 + 88];
           _scLMD::P64 = P64[_scLOu::P64 + 96];
           _scLMI::P64 = P64[_scLOu::P64 + 104];
           _scLMN::P64 = P64[_scLOu::P64 + 112];
           _scLMS::P64 = P64[_scLOu::P64 + 120];
           _scLMU::P64 = P64[_scLOu::P64 + 128];
           I64[Hp - 120] = sat_scLOq_info;
           P64[Hp - 104] = _scLLQ::P64;
           P64[Hp - 96] = _scLLR::P64;
           P64[Hp - 88] = _scLLS::P64;
           P64[Hp - 80] = _scLLT::P64;
           P64[Hp - 72] = _scLLU::P64;
           P64[Hp - 64] = _scLLV::P64;
           P64[Hp - 56] = _scLMo::P64;
           P64[Hp - 48] = _scLMt::P64;
           P64[Hp - 40] = _scLMy::P64;
           P64[Hp - 32] = _scLMD::P64;
           P64[Hp - 24] = _scLMI::P64;
           P64[Hp - 16] = _scLMN::P64;
           P64[Hp - 8] = _scLMS::P64;
           P64[Hp] = _scLMU::P64;
           I64[Sp - 24] = block_ccMGv_info;
           R4 = Hp - 120;
           R3 = _scLMj::P64;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLOu_info" {
     sat_scLOu_info:
         const sat_scLOu_entry;
         const 15;
         const 12884901903;
         const ScMjD_srt;
 },
 _ccMGv() //  [R1, R2]
         { []
         }
     {offset
       ccMGv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccMGF; else goto ccMGE;
       ccMGF: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccMGE: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccMGv_info" {
     block_ccMGv_info:
         const _ccMGv;
         const 0;
         const 30;
 },
 sat_scLOv_entry() //  [R1]
         { []
         }
     {offset
       ccMGG: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto ccMGK; else goto ccMGJ;
       ccMGK: // global
           HpAlloc = 136;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMGJ: // global
           _scLLQ::P64 = P64[R1 + 16];
           _scLLR::P64 = P64[R1 + 24];
           _scLLS::P64 = P64[R1 + 32];
           _scLLT::P64 = P64[R1 + 40];
           _scLLU::P64 = P64[R1 + 48];
           _scLLV::P64 = P64[R1 + 56];
           _scLMj::P64 = P64[R1 + 64];
           _scLMo::P64 = P64[R1 + 72];
           _scLMt::P64 = P64[R1 + 80];
           _scLMy::P64 = P64[R1 + 88];
           _scLMD::P64 = P64[R1 + 96];
           _scLMI::P64 = P64[R1 + 104];
           _scLMN::P64 = P64[R1 + 112];
           _scLMS::P64 = P64[R1 + 120];
           _scLMU::P64 = P64[R1 + 128];
           I64[Hp - 128] = sat_scLOu_info;
           P64[Hp - 112] = _scLLQ::P64;
           P64[Hp - 104] = _scLLR::P64;
           P64[Hp - 96] = _scLLS::P64;
           P64[Hp - 88] = _scLLT::P64;
           P64[Hp - 80] = _scLLU::P64;
           P64[Hp - 72] = _scLLV::P64;
           P64[Hp - 64] = _scLMj::P64;
           P64[Hp - 56] = _scLMo::P64;
           P64[Hp - 48] = _scLMt::P64;
           P64[Hp - 40] = _scLMy::P64;
           P64[Hp - 32] = _scLMD::P64;
           P64[Hp - 24] = _scLMI::P64;
           P64[Hp - 16] = _scLMN::P64;
           P64[Hp - 8] = _scLMS::P64;
           P64[Hp] = _scLMU::P64;
           R3 = Hp - 128;
           R2 = lvl23_rcHpS_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLOv_info" {
     sat_scLOv_info:
         const sat_scLOv_entry;
         const 15;
         const 12884901903;
         const ScMjD_srt;
 },
 sat_scLOw_entry() //  [R1]
         { []
         }
     {offset
       ccMGL: // global
           _scLOw::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccMGM; else goto ccMGN;
       ccMGN: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto ccMGP; else goto ccMGO;
       ccMGP: // global
           HpAlloc = 136;
           goto ccMGM;
       ccMGM: // global
           R1 = _scLOw::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMGO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scLOw::P64;
           _scLLQ::P64 = P64[_scLOw::P64 + 16];
           _scLLR::P64 = P64[_scLOw::P64 + 24];
           _scLLS::P64 = P64[_scLOw::P64 + 32];
           _scLLT::P64 = P64[_scLOw::P64 + 40];
           _scLLU::P64 = P64[_scLOw::P64 + 48];
           _scLLV::P64 = P64[_scLOw::P64 + 56];
           _scLMj::P64 = P64[_scLOw::P64 + 64];
           _scLMo::P64 = P64[_scLOw::P64 + 72];
           _scLMt::P64 = P64[_scLOw::P64 + 80];
           _scLMy::P64 = P64[_scLOw::P64 + 88];
           _scLMD::P64 = P64[_scLOw::P64 + 96];
           _scLMI::P64 = P64[_scLOw::P64 + 104];
           _scLMN::P64 = P64[_scLOw::P64 + 112];
           _scLMS::P64 = P64[_scLOw::P64 + 120];
           _scLMU::P64 = P64[_scLOw::P64 + 128];
           I64[Hp - 128] = sat_scLOv_info;
           P64[Hp - 112] = _scLLQ::P64;
           P64[Hp - 104] = _scLLR::P64;
           P64[Hp - 96] = _scLLS::P64;
           P64[Hp - 88] = _scLLT::P64;
           P64[Hp - 80] = _scLLU::P64;
           P64[Hp - 72] = _scLLV::P64;
           P64[Hp - 64] = _scLMj::P64;
           P64[Hp - 56] = _scLMo::P64;
           P64[Hp - 48] = _scLMt::P64;
           P64[Hp - 40] = _scLMy::P64;
           P64[Hp - 32] = _scLMD::P64;
           P64[Hp - 24] = _scLMI::P64;
           P64[Hp - 16] = _scLMN::P64;
           P64[Hp - 8] = _scLMS::P64;
           P64[Hp] = _scLMU::P64;
           R3 = Hp - 128;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLOw_info" {
     sat_scLOw_info:
         const sat_scLOw_entry;
         const 15;
         const 12884901903;
         const ScMjD_srt;
 },
 sat_scLOA_entry() //  [R1]
         { []
         }
     {offset
       ccMGT: // global
           _scLOA::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto ccMGU; else goto ccMGV;
       ccMGV: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto ccMGX; else goto ccMGW;
       ccMGX: // global
           HpAlloc = 136;
           goto ccMGU;
       ccMGU: // global
           R1 = _scLOA::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMGW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scLOA::P64;
           _scLLQ::P64 = P64[_scLOA::P64 + 16];
           _scLLR::P64 = P64[_scLOA::P64 + 24];
           _scLLS::P64 = P64[_scLOA::P64 + 32];
           _scLLT::P64 = P64[_scLOA::P64 + 40];
           _scLLU::P64 = P64[_scLOA::P64 + 48];
           _scLLV::P64 = P64[_scLOA::P64 + 56];
           _scLMe::P64 = P64[_scLOA::P64 + 64];
           _scLMj::P64 = P64[_scLOA::P64 + 72];
           _scLMo::P64 = P64[_scLOA::P64 + 80];
           _scLMt::P64 = P64[_scLOA::P64 + 88];
           _scLMy::P64 = P64[_scLOA::P64 + 96];
           _scLMD::P64 = P64[_scLOA::P64 + 104];
           _scLMI::P64 = P64[_scLOA::P64 + 112];
           _scLMN::P64 = P64[_scLOA::P64 + 120];
           _scLMS::P64 = P64[_scLOA::P64 + 128];
           _scLMU::P64 = P64[_scLOA::P64 + 136];
           I64[Hp - 128] = sat_scLOw_info;
           P64[Hp - 112] = _scLLQ::P64;
           P64[Hp - 104] = _scLLR::P64;
           P64[Hp - 96] = _scLLS::P64;
           P64[Hp - 88] = _scLLT::P64;
           P64[Hp - 80] = _scLLU::P64;
           P64[Hp - 72] = _scLLV::P64;
           P64[Hp - 64] = _scLMj::P64;
           P64[Hp - 56] = _scLMo::P64;
           P64[Hp - 48] = _scLMt::P64;
           P64[Hp - 40] = _scLMy::P64;
           P64[Hp - 32] = _scLMD::P64;
           P64[Hp - 24] = _scLMI::P64;
           P64[Hp - 16] = _scLMN::P64;
           P64[Hp - 8] = _scLMS::P64;
           P64[Hp] = _scLMU::P64;
           I64[Sp - 24] = block_ccMGQ_info;
           R4 = Hp - 128;
           R3 = _scLMe::P64;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLOA_info" {
     sat_scLOA_info:
         const sat_scLOA_entry;
         const 16;
         const 12884901903;
         const ScMjD_srt;
 },
 _ccMGQ() //  [R1, R2]
         { []
         }
     {offset
       ccMGQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccMH0; else goto ccMGZ;
       ccMH0: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccMGZ: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccMGQ_info" {
     block_ccMGQ_info:
         const _ccMGQ;
         const 0;
         const 30;
 },
 sat_scLOB_entry() //  [R1]
         { []
         }
     {offset
       ccMH1: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto ccMH5; else goto ccMH4;
       ccMH5: // global
           HpAlloc = 144;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMH4: // global
           _scLLQ::P64 = P64[R1 + 16];
           _scLLR::P64 = P64[R1 + 24];
           _scLLS::P64 = P64[R1 + 32];
           _scLLT::P64 = P64[R1 + 40];
           _scLLU::P64 = P64[R1 + 48];
           _scLLV::P64 = P64[R1 + 56];
           _scLMe::P64 = P64[R1 + 64];
           _scLMj::P64 = P64[R1 + 72];
           _scLMo::P64 = P64[R1 + 80];
           _scLMt::P64 = P64[R1 + 88];
           _scLMy::P64 = P64[R1 + 96];
           _scLMD::P64 = P64[R1 + 104];
           _scLMI::P64 = P64[R1 + 112];
           _scLMN::P64 = P64[R1 + 120];
           _scLMS::P64 = P64[R1 + 128];
           _scLMU::P64 = P64[R1 + 136];
           I64[Hp - 136] = sat_scLOA_info;
           P64[Hp - 120] = _scLLQ::P64;
           P64[Hp - 112] = _scLLR::P64;
           P64[Hp - 104] = _scLLS::P64;
           P64[Hp - 96] = _scLLT::P64;
           P64[Hp - 88] = _scLLU::P64;
           P64[Hp - 80] = _scLLV::P64;
           P64[Hp - 72] = _scLMe::P64;
           P64[Hp - 64] = _scLMj::P64;
           P64[Hp - 56] = _scLMo::P64;
           P64[Hp - 48] = _scLMt::P64;
           P64[Hp - 40] = _scLMy::P64;
           P64[Hp - 32] = _scLMD::P64;
           P64[Hp - 24] = _scLMI::P64;
           P64[Hp - 16] = _scLMN::P64;
           P64[Hp - 8] = _scLMS::P64;
           P64[Hp] = _scLMU::P64;
           R3 = Hp - 136;
           R2 = lvl22_rcHpR_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLOB_info" {
     sat_scLOB_info:
         const sat_scLOB_entry;
         const 16;
         const 12884901903;
         const ScMjD_srt;
 },
 sat_scLOC_entry() //  [R1]
         { []
         }
     {offset
       ccMH6: // global
           _scLOC::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccMH7; else goto ccMH8;
       ccMH8: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto ccMHa; else goto ccMH9;
       ccMHa: // global
           HpAlloc = 144;
           goto ccMH7;
       ccMH7: // global
           R1 = _scLOC::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMH9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scLOC::P64;
           _scLLQ::P64 = P64[_scLOC::P64 + 16];
           _scLLR::P64 = P64[_scLOC::P64 + 24];
           _scLLS::P64 = P64[_scLOC::P64 + 32];
           _scLLT::P64 = P64[_scLOC::P64 + 40];
           _scLLU::P64 = P64[_scLOC::P64 + 48];
           _scLLV::P64 = P64[_scLOC::P64 + 56];
           _scLMe::P64 = P64[_scLOC::P64 + 64];
           _scLMj::P64 = P64[_scLOC::P64 + 72];
           _scLMo::P64 = P64[_scLOC::P64 + 80];
           _scLMt::P64 = P64[_scLOC::P64 + 88];
           _scLMy::P64 = P64[_scLOC::P64 + 96];
           _scLMD::P64 = P64[_scLOC::P64 + 104];
           _scLMI::P64 = P64[_scLOC::P64 + 112];
           _scLMN::P64 = P64[_scLOC::P64 + 120];
           _scLMS::P64 = P64[_scLOC::P64 + 128];
           _scLMU::P64 = P64[_scLOC::P64 + 136];
           I64[Hp - 136] = sat_scLOB_info;
           P64[Hp - 120] = _scLLQ::P64;
           P64[Hp - 112] = _scLLR::P64;
           P64[Hp - 104] = _scLLS::P64;
           P64[Hp - 96] = _scLLT::P64;
           P64[Hp - 88] = _scLLU::P64;
           P64[Hp - 80] = _scLLV::P64;
           P64[Hp - 72] = _scLMe::P64;
           P64[Hp - 64] = _scLMj::P64;
           P64[Hp - 56] = _scLMo::P64;
           P64[Hp - 48] = _scLMt::P64;
           P64[Hp - 40] = _scLMy::P64;
           P64[Hp - 32] = _scLMD::P64;
           P64[Hp - 24] = _scLMI::P64;
           P64[Hp - 16] = _scLMN::P64;
           P64[Hp - 8] = _scLMS::P64;
           P64[Hp] = _scLMU::P64;
           R3 = Hp - 136;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLOC_info" {
     sat_scLOC_info:
         const sat_scLOC_entry;
         const 16;
         const 12884901903;
         const ScMjD_srt;
 },
 sat_scLOG_entry() //  [R1]
         { []
         }
     {offset
       ccMHe: // global
           _scLOG::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto ccMHf; else goto ccMHg;
       ccMHg: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto ccMHi; else goto ccMHh;
       ccMHi: // global
           HpAlloc = 144;
           goto ccMHf;
       ccMHf: // global
           R1 = _scLOG::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMHh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scLOG::P64;
           _scLLQ::P64 = P64[_scLOG::P64 + 16];
           _scLLR::P64 = P64[_scLOG::P64 + 24];
           _scLLS::P64 = P64[_scLOG::P64 + 32];
           _scLLT::P64 = P64[_scLOG::P64 + 40];
           _scLLU::P64 = P64[_scLOG::P64 + 48];
           _scLLV::P64 = P64[_scLOG::P64 + 56];
           _scLM9::P64 = P64[_scLOG::P64 + 64];
           _scLMe::P64 = P64[_scLOG::P64 + 72];
           _scLMj::P64 = P64[_scLOG::P64 + 80];
           _scLMo::P64 = P64[_scLOG::P64 + 88];
           _scLMt::P64 = P64[_scLOG::P64 + 96];
           _scLMy::P64 = P64[_scLOG::P64 + 104];
           _scLMD::P64 = P64[_scLOG::P64 + 112];
           _scLMI::P64 = P64[_scLOG::P64 + 120];
           _scLMN::P64 = P64[_scLOG::P64 + 128];
           _scLMS::P64 = P64[_scLOG::P64 + 136];
           _scLMU::P64 = P64[_scLOG::P64 + 144];
           I64[Hp - 136] = sat_scLOC_info;
           P64[Hp - 120] = _scLLQ::P64;
           P64[Hp - 112] = _scLLR::P64;
           P64[Hp - 104] = _scLLS::P64;
           P64[Hp - 96] = _scLLT::P64;
           P64[Hp - 88] = _scLLU::P64;
           P64[Hp - 80] = _scLLV::P64;
           P64[Hp - 72] = _scLMe::P64;
           P64[Hp - 64] = _scLMj::P64;
           P64[Hp - 56] = _scLMo::P64;
           P64[Hp - 48] = _scLMt::P64;
           P64[Hp - 40] = _scLMy::P64;
           P64[Hp - 32] = _scLMD::P64;
           P64[Hp - 24] = _scLMI::P64;
           P64[Hp - 16] = _scLMN::P64;
           P64[Hp - 8] = _scLMS::P64;
           P64[Hp] = _scLMU::P64;
           I64[Sp - 24] = block_ccMHb_info;
           R4 = Hp - 136;
           R3 = _scLM9::P64;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLOG_info" {
     sat_scLOG_info:
         const sat_scLOG_entry;
         const 17;
         const 12884901903;
         const ScMjD_srt;
 },
 _ccMHb() //  [R1, R2]
         { []
         }
     {offset
       ccMHb: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccMHl; else goto ccMHk;
       ccMHl: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccMHk: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccMHb_info" {
     block_ccMHb_info:
         const _ccMHb;
         const 0;
         const 30;
 },
 sat_scLOH_entry() //  [R1]
         { []
         }
     {offset
       ccMHm: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto ccMHq; else goto ccMHp;
       ccMHq: // global
           HpAlloc = 152;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMHp: // global
           _scLLQ::P64 = P64[R1 + 16];
           _scLLR::P64 = P64[R1 + 24];
           _scLLS::P64 = P64[R1 + 32];
           _scLLT::P64 = P64[R1 + 40];
           _scLLU::P64 = P64[R1 + 48];
           _scLLV::P64 = P64[R1 + 56];
           _scLM9::P64 = P64[R1 + 64];
           _scLMe::P64 = P64[R1 + 72];
           _scLMj::P64 = P64[R1 + 80];
           _scLMo::P64 = P64[R1 + 88];
           _scLMt::P64 = P64[R1 + 96];
           _scLMy::P64 = P64[R1 + 104];
           _scLMD::P64 = P64[R1 + 112];
           _scLMI::P64 = P64[R1 + 120];
           _scLMN::P64 = P64[R1 + 128];
           _scLMS::P64 = P64[R1 + 136];
           _scLMU::P64 = P64[R1 + 144];
           I64[Hp - 144] = sat_scLOG_info;
           P64[Hp - 128] = _scLLQ::P64;
           P64[Hp - 120] = _scLLR::P64;
           P64[Hp - 112] = _scLLS::P64;
           P64[Hp - 104] = _scLLT::P64;
           P64[Hp - 96] = _scLLU::P64;
           P64[Hp - 88] = _scLLV::P64;
           P64[Hp - 80] = _scLM9::P64;
           P64[Hp - 72] = _scLMe::P64;
           P64[Hp - 64] = _scLMj::P64;
           P64[Hp - 56] = _scLMo::P64;
           P64[Hp - 48] = _scLMt::P64;
           P64[Hp - 40] = _scLMy::P64;
           P64[Hp - 32] = _scLMD::P64;
           P64[Hp - 24] = _scLMI::P64;
           P64[Hp - 16] = _scLMN::P64;
           P64[Hp - 8] = _scLMS::P64;
           P64[Hp] = _scLMU::P64;
           R3 = Hp - 144;
           R2 = lvl21_rcHpQ_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLOH_info" {
     sat_scLOH_info:
         const sat_scLOH_entry;
         const 17;
         const 12884901903;
         const ScMjD_srt;
 },
 sat_scLOI_entry() //  [R1]
         { []
         }
     {offset
       ccMHr: // global
           _scLOI::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccMHs; else goto ccMHt;
       ccMHt: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto ccMHv; else goto ccMHu;
       ccMHv: // global
           HpAlloc = 152;
           goto ccMHs;
       ccMHs: // global
           R1 = _scLOI::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMHu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scLOI::P64;
           _scLLQ::P64 = P64[_scLOI::P64 + 16];
           _scLLR::P64 = P64[_scLOI::P64 + 24];
           _scLLS::P64 = P64[_scLOI::P64 + 32];
           _scLLT::P64 = P64[_scLOI::P64 + 40];
           _scLLU::P64 = P64[_scLOI::P64 + 48];
           _scLLV::P64 = P64[_scLOI::P64 + 56];
           _scLM9::P64 = P64[_scLOI::P64 + 64];
           _scLMe::P64 = P64[_scLOI::P64 + 72];
           _scLMj::P64 = P64[_scLOI::P64 + 80];
           _scLMo::P64 = P64[_scLOI::P64 + 88];
           _scLMt::P64 = P64[_scLOI::P64 + 96];
           _scLMy::P64 = P64[_scLOI::P64 + 104];
           _scLMD::P64 = P64[_scLOI::P64 + 112];
           _scLMI::P64 = P64[_scLOI::P64 + 120];
           _scLMN::P64 = P64[_scLOI::P64 + 128];
           _scLMS::P64 = P64[_scLOI::P64 + 136];
           _scLMU::P64 = P64[_scLOI::P64 + 144];
           I64[Hp - 144] = sat_scLOH_info;
           P64[Hp - 128] = _scLLQ::P64;
           P64[Hp - 120] = _scLLR::P64;
           P64[Hp - 112] = _scLLS::P64;
           P64[Hp - 104] = _scLLT::P64;
           P64[Hp - 96] = _scLLU::P64;
           P64[Hp - 88] = _scLLV::P64;
           P64[Hp - 80] = _scLM9::P64;
           P64[Hp - 72] = _scLMe::P64;
           P64[Hp - 64] = _scLMj::P64;
           P64[Hp - 56] = _scLMo::P64;
           P64[Hp - 48] = _scLMt::P64;
           P64[Hp - 40] = _scLMy::P64;
           P64[Hp - 32] = _scLMD::P64;
           P64[Hp - 24] = _scLMI::P64;
           P64[Hp - 16] = _scLMN::P64;
           P64[Hp - 8] = _scLMS::P64;
           P64[Hp] = _scLMU::P64;
           R3 = Hp - 144;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLOI_info" {
     sat_scLOI_info:
         const sat_scLOI_entry;
         const 17;
         const 12884901903;
         const ScMjD_srt;
 },
 sat_scLOM_entry() //  [R1]
         { []
         }
     {offset
       ccMHz: // global
           _scLOM::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto ccMHA; else goto ccMHB;
       ccMHB: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto ccMHD; else goto ccMHC;
       ccMHD: // global
           HpAlloc = 152;
           goto ccMHA;
       ccMHA: // global
           R1 = _scLOM::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMHC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scLOM::P64;
           _scLLQ::P64 = P64[_scLOM::P64 + 16];
           _scLLR::P64 = P64[_scLOM::P64 + 24];
           _scLLS::P64 = P64[_scLOM::P64 + 32];
           _scLLT::P64 = P64[_scLOM::P64 + 40];
           _scLLU::P64 = P64[_scLOM::P64 + 48];
           _scLLV::P64 = P64[_scLOM::P64 + 56];
           _scLM4::P64 = P64[_scLOM::P64 + 64];
           _scLM9::P64 = P64[_scLOM::P64 + 72];
           _scLMe::P64 = P64[_scLOM::P64 + 80];
           _scLMj::P64 = P64[_scLOM::P64 + 88];
           _scLMo::P64 = P64[_scLOM::P64 + 96];
           _scLMt::P64 = P64[_scLOM::P64 + 104];
           _scLMy::P64 = P64[_scLOM::P64 + 112];
           _scLMD::P64 = P64[_scLOM::P64 + 120];
           _scLMI::P64 = P64[_scLOM::P64 + 128];
           _scLMN::P64 = P64[_scLOM::P64 + 136];
           _scLMS::P64 = P64[_scLOM::P64 + 144];
           _scLMU::P64 = P64[_scLOM::P64 + 152];
           I64[Hp - 144] = sat_scLOI_info;
           P64[Hp - 128] = _scLLQ::P64;
           P64[Hp - 120] = _scLLR::P64;
           P64[Hp - 112] = _scLLS::P64;
           P64[Hp - 104] = _scLLT::P64;
           P64[Hp - 96] = _scLLU::P64;
           P64[Hp - 88] = _scLLV::P64;
           P64[Hp - 80] = _scLM9::P64;
           P64[Hp - 72] = _scLMe::P64;
           P64[Hp - 64] = _scLMj::P64;
           P64[Hp - 56] = _scLMo::P64;
           P64[Hp - 48] = _scLMt::P64;
           P64[Hp - 40] = _scLMy::P64;
           P64[Hp - 32] = _scLMD::P64;
           P64[Hp - 24] = _scLMI::P64;
           P64[Hp - 16] = _scLMN::P64;
           P64[Hp - 8] = _scLMS::P64;
           P64[Hp] = _scLMU::P64;
           I64[Sp - 24] = block_ccMHw_info;
           R4 = Hp - 144;
           R3 = _scLM4::P64;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLOM_info" {
     sat_scLOM_info:
         const sat_scLOM_entry;
         const 18;
         const 12884901903;
         const ScMjD_srt;
 },
 _ccMHw() //  [R1, R2]
         { []
         }
     {offset
       ccMHw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccMHG; else goto ccMHF;
       ccMHG: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccMHF: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccMHw_info" {
     block_ccMHw_info:
         const _ccMHw;
         const 0;
         const 30;
 },
 sat_scLON_entry() //  [R1]
         { []
         }
     {offset
       ccMHH: // global
           Hp = Hp + 160;
           if (Hp > HpLim) (likely: False) goto ccMHL; else goto ccMHK;
       ccMHL: // global
           HpAlloc = 160;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMHK: // global
           _scLLQ::P64 = P64[R1 + 16];
           _scLLR::P64 = P64[R1 + 24];
           _scLLS::P64 = P64[R1 + 32];
           _scLLT::P64 = P64[R1 + 40];
           _scLLU::P64 = P64[R1 + 48];
           _scLLV::P64 = P64[R1 + 56];
           _scLM4::P64 = P64[R1 + 64];
           _scLM9::P64 = P64[R1 + 72];
           _scLMe::P64 = P64[R1 + 80];
           _scLMj::P64 = P64[R1 + 88];
           _scLMo::P64 = P64[R1 + 96];
           _scLMt::P64 = P64[R1 + 104];
           _scLMy::P64 = P64[R1 + 112];
           _scLMD::P64 = P64[R1 + 120];
           _scLMI::P64 = P64[R1 + 128];
           _scLMN::P64 = P64[R1 + 136];
           _scLMS::P64 = P64[R1 + 144];
           _scLMU::P64 = P64[R1 + 152];
           I64[Hp - 152] = sat_scLOM_info;
           P64[Hp - 136] = _scLLQ::P64;
           P64[Hp - 128] = _scLLR::P64;
           P64[Hp - 120] = _scLLS::P64;
           P64[Hp - 112] = _scLLT::P64;
           P64[Hp - 104] = _scLLU::P64;
           P64[Hp - 96] = _scLLV::P64;
           P64[Hp - 88] = _scLM4::P64;
           P64[Hp - 80] = _scLM9::P64;
           P64[Hp - 72] = _scLMe::P64;
           P64[Hp - 64] = _scLMj::P64;
           P64[Hp - 56] = _scLMo::P64;
           P64[Hp - 48] = _scLMt::P64;
           P64[Hp - 40] = _scLMy::P64;
           P64[Hp - 32] = _scLMD::P64;
           P64[Hp - 24] = _scLMI::P64;
           P64[Hp - 16] = _scLMN::P64;
           P64[Hp - 8] = _scLMS::P64;
           P64[Hp] = _scLMU::P64;
           R3 = Hp - 152;
           R2 = lvl20_rcHpP_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLON_info" {
     sat_scLON_info:
         const sat_scLON_entry;
         const 18;
         const 12884901903;
         const ScMjD_srt;
 },
 sat_scLOO_entry() //  [R1]
         { []
         }
     {offset
       ccMHM: // global
           _scLOO::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccMHN; else goto ccMHO;
       ccMHO: // global
           Hp = Hp + 160;
           if (Hp > HpLim) (likely: False) goto ccMHQ; else goto ccMHP;
       ccMHQ: // global
           HpAlloc = 160;
           goto ccMHN;
       ccMHN: // global
           R1 = _scLOO::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMHP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scLOO::P64;
           _scLLQ::P64 = P64[_scLOO::P64 + 16];
           _scLLR::P64 = P64[_scLOO::P64 + 24];
           _scLLS::P64 = P64[_scLOO::P64 + 32];
           _scLLT::P64 = P64[_scLOO::P64 + 40];
           _scLLU::P64 = P64[_scLOO::P64 + 48];
           _scLLV::P64 = P64[_scLOO::P64 + 56];
           _scLM4::P64 = P64[_scLOO::P64 + 64];
           _scLM9::P64 = P64[_scLOO::P64 + 72];
           _scLMe::P64 = P64[_scLOO::P64 + 80];
           _scLMj::P64 = P64[_scLOO::P64 + 88];
           _scLMo::P64 = P64[_scLOO::P64 + 96];
           _scLMt::P64 = P64[_scLOO::P64 + 104];
           _scLMy::P64 = P64[_scLOO::P64 + 112];
           _scLMD::P64 = P64[_scLOO::P64 + 120];
           _scLMI::P64 = P64[_scLOO::P64 + 128];
           _scLMN::P64 = P64[_scLOO::P64 + 136];
           _scLMS::P64 = P64[_scLOO::P64 + 144];
           _scLMU::P64 = P64[_scLOO::P64 + 152];
           I64[Hp - 152] = sat_scLON_info;
           P64[Hp - 136] = _scLLQ::P64;
           P64[Hp - 128] = _scLLR::P64;
           P64[Hp - 120] = _scLLS::P64;
           P64[Hp - 112] = _scLLT::P64;
           P64[Hp - 104] = _scLLU::P64;
           P64[Hp - 96] = _scLLV::P64;
           P64[Hp - 88] = _scLM4::P64;
           P64[Hp - 80] = _scLM9::P64;
           P64[Hp - 72] = _scLMe::P64;
           P64[Hp - 64] = _scLMj::P64;
           P64[Hp - 56] = _scLMo::P64;
           P64[Hp - 48] = _scLMt::P64;
           P64[Hp - 40] = _scLMy::P64;
           P64[Hp - 32] = _scLMD::P64;
           P64[Hp - 24] = _scLMI::P64;
           P64[Hp - 16] = _scLMN::P64;
           P64[Hp - 8] = _scLMS::P64;
           P64[Hp] = _scLMU::P64;
           R3 = Hp - 152;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLOO_info" {
     sat_scLOO_info:
         const sat_scLOO_entry;
         const 18;
         const 12884901903;
         const ScMjD_srt;
 },
 sat_scLOS_entry() //  [R1]
         { []
         }
     {offset
       ccMHU: // global
           _scLOS::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto ccMHV; else goto ccMHW;
       ccMHW: // global
           Hp = Hp + 160;
           if (Hp > HpLim) (likely: False) goto ccMHY; else goto ccMHX;
       ccMHY: // global
           HpAlloc = 160;
           goto ccMHV;
       ccMHV: // global
           R1 = _scLOS::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMHX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scLOS::P64;
           _scLLQ::P64 = P64[_scLOS::P64 + 16];
           _scLLR::P64 = P64[_scLOS::P64 + 24];
           _scLLS::P64 = P64[_scLOS::P64 + 32];
           _scLLT::P64 = P64[_scLOS::P64 + 40];
           _scLLU::P64 = P64[_scLOS::P64 + 48];
           _scLLV::P64 = P64[_scLOS::P64 + 56];
           _scLLZ::P64 = P64[_scLOS::P64 + 64];
           _scLM4::P64 = P64[_scLOS::P64 + 72];
           _scLM9::P64 = P64[_scLOS::P64 + 80];
           _scLMe::P64 = P64[_scLOS::P64 + 88];
           _scLMj::P64 = P64[_scLOS::P64 + 96];
           _scLMo::P64 = P64[_scLOS::P64 + 104];
           _scLMt::P64 = P64[_scLOS::P64 + 112];
           _scLMy::P64 = P64[_scLOS::P64 + 120];
           _scLMD::P64 = P64[_scLOS::P64 + 128];
           _scLMI::P64 = P64[_scLOS::P64 + 136];
           _scLMN::P64 = P64[_scLOS::P64 + 144];
           _scLMS::P64 = P64[_scLOS::P64 + 152];
           _scLMU::P64 = P64[_scLOS::P64 + 160];
           I64[Hp - 152] = sat_scLOO_info;
           P64[Hp - 136] = _scLLQ::P64;
           P64[Hp - 128] = _scLLR::P64;
           P64[Hp - 120] = _scLLS::P64;
           P64[Hp - 112] = _scLLT::P64;
           P64[Hp - 104] = _scLLU::P64;
           P64[Hp - 96] = _scLLV::P64;
           P64[Hp - 88] = _scLM4::P64;
           P64[Hp - 80] = _scLM9::P64;
           P64[Hp - 72] = _scLMe::P64;
           P64[Hp - 64] = _scLMj::P64;
           P64[Hp - 56] = _scLMo::P64;
           P64[Hp - 48] = _scLMt::P64;
           P64[Hp - 40] = _scLMy::P64;
           P64[Hp - 32] = _scLMD::P64;
           P64[Hp - 24] = _scLMI::P64;
           P64[Hp - 16] = _scLMN::P64;
           P64[Hp - 8] = _scLMS::P64;
           P64[Hp] = _scLMU::P64;
           I64[Sp - 24] = block_ccMHR_info;
           R4 = Hp - 152;
           R3 = _scLLZ::P64;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLOS_info" {
     sat_scLOS_info:
         const sat_scLOS_entry;
         const 19;
         const 12884901903;
         const ScMjD_srt;
 },
 _ccMHR() //  [R1, R2]
         { []
         }
     {offset
       ccMHR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccMI1; else goto ccMI0;
       ccMI1: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccMI0: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccMHR_info" {
     block_ccMHR_info:
         const _ccMHR;
         const 0;
         const 30;
 },
 sat_scLOT_entry() //  [R1]
         { []
         }
     {offset
       ccMI2: // global
           Hp = Hp + 168;
           if (Hp > HpLim) (likely: False) goto ccMI6; else goto ccMI5;
       ccMI6: // global
           HpAlloc = 168;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMI5: // global
           _scLLQ::P64 = P64[R1 + 16];
           _scLLR::P64 = P64[R1 + 24];
           _scLLS::P64 = P64[R1 + 32];
           _scLLT::P64 = P64[R1 + 40];
           _scLLU::P64 = P64[R1 + 48];
           _scLLV::P64 = P64[R1 + 56];
           _scLLZ::P64 = P64[R1 + 64];
           _scLM4::P64 = P64[R1 + 72];
           _scLM9::P64 = P64[R1 + 80];
           _scLMe::P64 = P64[R1 + 88];
           _scLMj::P64 = P64[R1 + 96];
           _scLMo::P64 = P64[R1 + 104];
           _scLMt::P64 = P64[R1 + 112];
           _scLMy::P64 = P64[R1 + 120];
           _scLMD::P64 = P64[R1 + 128];
           _scLMI::P64 = P64[R1 + 136];
           _scLMN::P64 = P64[R1 + 144];
           _scLMS::P64 = P64[R1 + 152];
           _scLMU::P64 = P64[R1 + 160];
           I64[Hp - 160] = sat_scLOS_info;
           P64[Hp - 144] = _scLLQ::P64;
           P64[Hp - 136] = _scLLR::P64;
           P64[Hp - 128] = _scLLS::P64;
           P64[Hp - 120] = _scLLT::P64;
           P64[Hp - 112] = _scLLU::P64;
           P64[Hp - 104] = _scLLV::P64;
           P64[Hp - 96] = _scLLZ::P64;
           P64[Hp - 88] = _scLM4::P64;
           P64[Hp - 80] = _scLM9::P64;
           P64[Hp - 72] = _scLMe::P64;
           P64[Hp - 64] = _scLMj::P64;
           P64[Hp - 56] = _scLMo::P64;
           P64[Hp - 48] = _scLMt::P64;
           P64[Hp - 40] = _scLMy::P64;
           P64[Hp - 32] = _scLMD::P64;
           P64[Hp - 24] = _scLMI::P64;
           P64[Hp - 16] = _scLMN::P64;
           P64[Hp - 8] = _scLMS::P64;
           P64[Hp] = _scLMU::P64;
           R3 = Hp - 160;
           R2 = lvl19_rcHpO_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLOT_info" {
     sat_scLOT_info:
         const sat_scLOT_entry;
         const 19;
         const 12884901903;
         const ScMjD_srt;
 },
 sat_scLOU_entry() //  [R1]
         { []
         }
     {offset
       ccMI7: // global
           _scLOU::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccMI8; else goto ccMI9;
       ccMI9: // global
           Hp = Hp + 168;
           if (Hp > HpLim) (likely: False) goto ccMIb; else goto ccMIa;
       ccMIb: // global
           HpAlloc = 168;
           goto ccMI8;
       ccMI8: // global
           R1 = _scLOU::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMIa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scLOU::P64;
           _scLLQ::P64 = P64[_scLOU::P64 + 16];
           _scLLR::P64 = P64[_scLOU::P64 + 24];
           _scLLS::P64 = P64[_scLOU::P64 + 32];
           _scLLT::P64 = P64[_scLOU::P64 + 40];
           _scLLU::P64 = P64[_scLOU::P64 + 48];
           _scLLV::P64 = P64[_scLOU::P64 + 56];
           _scLLZ::P64 = P64[_scLOU::P64 + 64];
           _scLM4::P64 = P64[_scLOU::P64 + 72];
           _scLM9::P64 = P64[_scLOU::P64 + 80];
           _scLMe::P64 = P64[_scLOU::P64 + 88];
           _scLMj::P64 = P64[_scLOU::P64 + 96];
           _scLMo::P64 = P64[_scLOU::P64 + 104];
           _scLMt::P64 = P64[_scLOU::P64 + 112];
           _scLMy::P64 = P64[_scLOU::P64 + 120];
           _scLMD::P64 = P64[_scLOU::P64 + 128];
           _scLMI::P64 = P64[_scLOU::P64 + 136];
           _scLMN::P64 = P64[_scLOU::P64 + 144];
           _scLMS::P64 = P64[_scLOU::P64 + 152];
           _scLMU::P64 = P64[_scLOU::P64 + 160];
           I64[Hp - 160] = sat_scLOT_info;
           P64[Hp - 144] = _scLLQ::P64;
           P64[Hp - 136] = _scLLR::P64;
           P64[Hp - 128] = _scLLS::P64;
           P64[Hp - 120] = _scLLT::P64;
           P64[Hp - 112] = _scLLU::P64;
           P64[Hp - 104] = _scLLV::P64;
           P64[Hp - 96] = _scLLZ::P64;
           P64[Hp - 88] = _scLM4::P64;
           P64[Hp - 80] = _scLM9::P64;
           P64[Hp - 72] = _scLMe::P64;
           P64[Hp - 64] = _scLMj::P64;
           P64[Hp - 56] = _scLMo::P64;
           P64[Hp - 48] = _scLMt::P64;
           P64[Hp - 40] = _scLMy::P64;
           P64[Hp - 32] = _scLMD::P64;
           P64[Hp - 24] = _scLMI::P64;
           P64[Hp - 16] = _scLMN::P64;
           P64[Hp - 8] = _scLMS::P64;
           P64[Hp] = _scLMU::P64;
           R3 = Hp - 160;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLOU_info" {
     sat_scLOU_info:
         const sat_scLOU_entry;
         const 19;
         const 12884901903;
         const ScMjD_srt;
 },
 sat_scLOY_entry() //  [R1]
         { []
         }
     {offset
       ccMIc: // global
           if ((Sp + -176) < SpLim) (likely: False) goto ccMIj; else goto ccMIk;
       ccMIj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMIk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 176] = block_ccMxQ_info;
           _scLLQ::P64 = P64[R1 + 24];
           _scLLR::P64 = P64[R1 + 32];
           _scLLS::P64 = P64[R1 + 40];
           _scLLT::P64 = P64[R1 + 48];
           _scLLU::P64 = P64[R1 + 56];
           _scLLV::P64 = P64[R1 + 64];
           _scLLZ::P64 = P64[R1 + 72];
           _scLM4::P64 = P64[R1 + 80];
           _scLM9::P64 = P64[R1 + 88];
           _scLMe::P64 = P64[R1 + 96];
           _scLMj::P64 = P64[R1 + 104];
           _scLMo::P64 = P64[R1 + 112];
           _scLMt::P64 = P64[R1 + 120];
           _scLMy::P64 = P64[R1 + 128];
           _scLMD::P64 = P64[R1 + 136];
           _scLMI::P64 = P64[R1 + 144];
           _scLMN::P64 = P64[R1 + 152];
           _scLMS::P64 = P64[R1 + 160];
           _scLMU::P64 = P64[R1 + 168];
           R1 = P64[R1 + 16];
           P64[Sp - 168] = _scLLQ::P64;
           P64[Sp - 160] = _scLLR::P64;
           P64[Sp - 152] = _scLLS::P64;
           P64[Sp - 144] = _scLLT::P64;
           P64[Sp - 136] = _scLLU::P64;
           P64[Sp - 128] = _scLLV::P64;
           P64[Sp - 120] = _scLLZ::P64;
           P64[Sp - 112] = _scLM4::P64;
           P64[Sp - 104] = _scLM9::P64;
           P64[Sp - 96] = _scLMe::P64;
           P64[Sp - 88] = _scLMj::P64;
           P64[Sp - 80] = _scLMo::P64;
           P64[Sp - 72] = _scLMt::P64;
           P64[Sp - 64] = _scLMy::P64;
           P64[Sp - 56] = _scLMD::P64;
           P64[Sp - 48] = _scLMI::P64;
           P64[Sp - 40] = _scLMN::P64;
           P64[Sp - 32] = _scLMS::P64;
           P64[Sp - 24] = _scLMU::P64;
           Sp = Sp - 176;
           if (R1 & 7 != 0) goto ucMIr; else goto ccMxR;
       ucMIr: // global
           call _ccMxQ(R1) args: 0, res: 0, upd: 0;
       ccMxR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLOY_info" {
     sat_scLOY_info:
         const sat_scLOY_entry;
         const 20;
         const 12884901903;
         const ScMjD_srt;
 },
 _ccMxQ() //  [R1]
         { []
         }
     {offset
       ccMxQ: // global
           Hp = Hp + 168;
           if (Hp > HpLim) (likely: False) goto ccMIn; else goto ccMIm;
       ccMIn: // global
           HpAlloc = 168;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       ccMIm: // global
           _scLMZ::I64 = I64[R1 + 7];
           I64[Hp - 160] = sat_scLOU_info;
           P64[Hp - 144] = P64[Sp + 8];
           P64[Hp - 136] = P64[Sp + 16];
           P64[Hp - 128] = P64[Sp + 24];
           P64[Hp - 120] = P64[Sp + 32];
           P64[Hp - 112] = P64[Sp + 40];
           P64[Hp - 104] = P64[Sp + 48];
           P64[Hp - 96] = P64[Sp + 56];
           P64[Hp - 88] = P64[Sp + 64];
           P64[Hp - 80] = P64[Sp + 72];
           P64[Hp - 72] = P64[Sp + 80];
           P64[Hp - 64] = P64[Sp + 88];
           P64[Hp - 56] = P64[Sp + 96];
           P64[Hp - 48] = P64[Sp + 104];
           P64[Hp - 40] = P64[Sp + 112];
           P64[Hp - 32] = P64[Sp + 120];
           P64[Hp - 24] = P64[Sp + 128];
           P64[Hp - 16] = P64[Sp + 136];
           P64[Hp - 8] = P64[Sp + 144];
           P64[Hp] = P64[Sp + 152];
           I64[Sp + 152] = block_ccMIg_info;
           R3 = Hp - 160;
           R2 = _scLMZ::I64;
           Sp = Sp + 152;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccMxQ_info" {
     block_ccMxQ_info:
         const _ccMxQ;
         const 19;
         const 12884901918;
         const ScMjD_srt;
 },
 _ccMIg() //  [R1, R2]
         { []
         }
     {offset
       ccMIg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccMIq; else goto ccMIp;
       ccMIq: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccMIp: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccMIg_info" {
     block_ccMIg_info:
         const _ccMIg;
         const 0;
         const 30;
 },
 sat_scLOZ_entry() //  [R1]
         { []
         }
     {offset
       ccMIs: // global
           Hp = Hp + 176;
           if (Hp > HpLim) (likely: False) goto ccMIw; else goto ccMIv;
       ccMIw: // global
           HpAlloc = 176;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMIv: // global
           _scLLE::P64 = P64[R1 + 16];
           _scLLQ::P64 = P64[R1 + 24];
           _scLLR::P64 = P64[R1 + 32];
           _scLLS::P64 = P64[R1 + 40];
           _scLLT::P64 = P64[R1 + 48];
           _scLLU::P64 = P64[R1 + 56];
           _scLLV::P64 = P64[R1 + 64];
           _scLLZ::P64 = P64[R1 + 72];
           _scLM4::P64 = P64[R1 + 80];
           _scLM9::P64 = P64[R1 + 88];
           _scLMe::P64 = P64[R1 + 96];
           _scLMj::P64 = P64[R1 + 104];
           _scLMo::P64 = P64[R1 + 112];
           _scLMt::P64 = P64[R1 + 120];
           _scLMy::P64 = P64[R1 + 128];
           _scLMD::P64 = P64[R1 + 136];
           _scLMI::P64 = P64[R1 + 144];
           _scLMN::P64 = P64[R1 + 152];
           _scLMS::P64 = P64[R1 + 160];
           _scLMU::P64 = P64[R1 + 168];
           I64[Hp - 168] = sat_scLOY_info;
           P64[Hp - 152] = _scLLE::P64;
           P64[Hp - 144] = _scLLQ::P64;
           P64[Hp - 136] = _scLLR::P64;
           P64[Hp - 128] = _scLLS::P64;
           P64[Hp - 120] = _scLLT::P64;
           P64[Hp - 112] = _scLLU::P64;
           P64[Hp - 104] = _scLLV::P64;
           P64[Hp - 96] = _scLLZ::P64;
           P64[Hp - 88] = _scLM4::P64;
           P64[Hp - 80] = _scLM9::P64;
           P64[Hp - 72] = _scLMe::P64;
           P64[Hp - 64] = _scLMj::P64;
           P64[Hp - 56] = _scLMo::P64;
           P64[Hp - 48] = _scLMt::P64;
           P64[Hp - 40] = _scLMy::P64;
           P64[Hp - 32] = _scLMD::P64;
           P64[Hp - 24] = _scLMI::P64;
           P64[Hp - 16] = _scLMN::P64;
           P64[Hp - 8] = _scLMS::P64;
           P64[Hp] = _scLMU::P64;
           R3 = Hp - 168;
           R2 = lvl18_rcHpN_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLOZ_info" {
     sat_scLOZ_info:
         const sat_scLOZ_entry;
         const 20;
         const 12884901903;
         const ScMjD_srt;
 },
 sat_scLP0_entry() //  [R1]
         { []
         }
     {offset
       ccMIx: // global
           _scLP0::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccMIy; else goto ccMIz;
       ccMIz: // global
           Hp = Hp + 176;
           if (Hp > HpLim) (likely: False) goto ccMIB; else goto ccMIA;
       ccMIB: // global
           HpAlloc = 176;
           goto ccMIy;
       ccMIy: // global
           R1 = _scLP0::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMIA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scLP0::P64;
           _scLLE::P64 = P64[_scLP0::P64 + 16];
           _scLLQ::P64 = P64[_scLP0::P64 + 24];
           _scLLR::P64 = P64[_scLP0::P64 + 32];
           _scLLS::P64 = P64[_scLP0::P64 + 40];
           _scLLT::P64 = P64[_scLP0::P64 + 48];
           _scLLU::P64 = P64[_scLP0::P64 + 56];
           _scLLV::P64 = P64[_scLP0::P64 + 64];
           _scLLZ::P64 = P64[_scLP0::P64 + 72];
           _scLM4::P64 = P64[_scLP0::P64 + 80];
           _scLM9::P64 = P64[_scLP0::P64 + 88];
           _scLMe::P64 = P64[_scLP0::P64 + 96];
           _scLMj::P64 = P64[_scLP0::P64 + 104];
           _scLMo::P64 = P64[_scLP0::P64 + 112];
           _scLMt::P64 = P64[_scLP0::P64 + 120];
           _scLMy::P64 = P64[_scLP0::P64 + 128];
           _scLMD::P64 = P64[_scLP0::P64 + 136];
           _scLMI::P64 = P64[_scLP0::P64 + 144];
           _scLMN::P64 = P64[_scLP0::P64 + 152];
           _scLMS::P64 = P64[_scLP0::P64 + 160];
           _scLMU::P64 = P64[_scLP0::P64 + 168];
           I64[Hp - 168] = sat_scLOZ_info;
           P64[Hp - 152] = _scLLE::P64;
           P64[Hp - 144] = _scLLQ::P64;
           P64[Hp - 136] = _scLLR::P64;
           P64[Hp - 128] = _scLLS::P64;
           P64[Hp - 120] = _scLLT::P64;
           P64[Hp - 112] = _scLLU::P64;
           P64[Hp - 104] = _scLLV::P64;
           P64[Hp - 96] = _scLLZ::P64;
           P64[Hp - 88] = _scLM4::P64;
           P64[Hp - 80] = _scLM9::P64;
           P64[Hp - 72] = _scLMe::P64;
           P64[Hp - 64] = _scLMj::P64;
           P64[Hp - 56] = _scLMo::P64;
           P64[Hp - 48] = _scLMt::P64;
           P64[Hp - 40] = _scLMy::P64;
           P64[Hp - 32] = _scLMD::P64;
           P64[Hp - 24] = _scLMI::P64;
           P64[Hp - 16] = _scLMN::P64;
           P64[Hp - 8] = _scLMS::P64;
           P64[Hp] = _scLMU::P64;
           R3 = Hp - 168;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLP0_info" {
     sat_scLP0_info:
         const sat_scLP0_entry;
         const 20;
         const 12884901903;
         const ScMjD_srt;
 },
 sat_scLP4_entry() //  [R1]
         { []
         }
     {offset
       ccMIC: // global
           if ((Sp + -184) < SpLim) (likely: False) goto ccMIJ; else goto ccMIK;
       ccMIJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMIK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 184] = block_ccMxz_info;
           _scLLE::P64 = P64[R1 + 24];
           _scLLQ::P64 = P64[R1 + 32];
           _scLLR::P64 = P64[R1 + 40];
           _scLLS::P64 = P64[R1 + 48];
           _scLLT::P64 = P64[R1 + 56];
           _scLLU::P64 = P64[R1 + 64];
           _scLLV::P64 = P64[R1 + 72];
           _scLLZ::P64 = P64[R1 + 80];
           _scLM4::P64 = P64[R1 + 88];
           _scLM9::P64 = P64[R1 + 96];
           _scLMe::P64 = P64[R1 + 104];
           _scLMj::P64 = P64[R1 + 112];
           _scLMo::P64 = P64[R1 + 120];
           _scLMt::P64 = P64[R1 + 128];
           _scLMy::P64 = P64[R1 + 136];
           _scLMD::P64 = P64[R1 + 144];
           _scLMI::P64 = P64[R1 + 152];
           _scLMN::P64 = P64[R1 + 160];
           _scLMS::P64 = P64[R1 + 168];
           _scLMU::P64 = P64[R1 + 176];
           R1 = P64[R1 + 16];
           P64[Sp - 176] = _scLLE::P64;
           P64[Sp - 168] = _scLLQ::P64;
           P64[Sp - 160] = _scLLR::P64;
           P64[Sp - 152] = _scLLS::P64;
           P64[Sp - 144] = _scLLT::P64;
           P64[Sp - 136] = _scLLU::P64;
           P64[Sp - 128] = _scLLV::P64;
           P64[Sp - 120] = _scLLZ::P64;
           P64[Sp - 112] = _scLM4::P64;
           P64[Sp - 104] = _scLM9::P64;
           P64[Sp - 96] = _scLMe::P64;
           P64[Sp - 88] = _scLMj::P64;
           P64[Sp - 80] = _scLMo::P64;
           P64[Sp - 72] = _scLMt::P64;
           P64[Sp - 64] = _scLMy::P64;
           P64[Sp - 56] = _scLMD::P64;
           P64[Sp - 48] = _scLMI::P64;
           P64[Sp - 40] = _scLMN::P64;
           P64[Sp - 32] = _scLMS::P64;
           P64[Sp - 24] = _scLMU::P64;
           Sp = Sp - 184;
           if (R1 & 7 != 0) goto ucMIR; else goto ccMxA;
       ucMIR: // global
           call _ccMxz(R1) args: 0, res: 0, upd: 0;
       ccMxA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLP4_info" {
     sat_scLP4_info:
         const sat_scLP4_entry;
         const 21;
         const 12884901903;
         const ScMjD_srt;
 },
 _ccMxz() //  [R1]
         { []
         }
     {offset
       ccMxz: // global
           Hp = Hp + 176;
           if (Hp > HpLim) (likely: False) goto ccMIN; else goto ccMIM;
       ccMIN: // global
           HpAlloc = 176;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       ccMIM: // global
           _scLMW::I64 = I64[R1 + 7];
           I64[Hp - 168] = sat_scLP0_info;
           P64[Hp - 152] = P64[Sp + 8];
           P64[Hp - 144] = P64[Sp + 16];
           P64[Hp - 136] = P64[Sp + 24];
           P64[Hp - 128] = P64[Sp + 32];
           P64[Hp - 120] = P64[Sp + 40];
           P64[Hp - 112] = P64[Sp + 48];
           P64[Hp - 104] = P64[Sp + 56];
           P64[Hp - 96] = P64[Sp + 64];
           P64[Hp - 88] = P64[Sp + 72];
           P64[Hp - 80] = P64[Sp + 80];
           P64[Hp - 72] = P64[Sp + 88];
           P64[Hp - 64] = P64[Sp + 96];
           P64[Hp - 56] = P64[Sp + 104];
           P64[Hp - 48] = P64[Sp + 112];
           P64[Hp - 40] = P64[Sp + 120];
           P64[Hp - 32] = P64[Sp + 128];
           P64[Hp - 24] = P64[Sp + 136];
           P64[Hp - 16] = P64[Sp + 144];
           P64[Hp - 8] = P64[Sp + 152];
           P64[Hp] = P64[Sp + 160];
           I64[Sp + 160] = block_ccMIG_info;
           R3 = Hp - 168;
           R2 = _scLMW::I64;
           Sp = Sp + 160;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_ccMxz_info" {
     block_ccMxz_info:
         const _ccMxz;
         const 20;
         const 12884901918;
         const ScMjD_srt;
 },
 _ccMIG() //  [R1, R2]
         { []
         }
     {offset
       ccMIG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccMIQ; else goto ccMIP;
       ccMIQ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       ccMIP: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_ccMIG_info" {
     block_ccMIG_info:
         const _ccMIG;
         const 0;
         const 30;
 },
 sat_scLP5_entry() //  [R1]
         { []
         }
     {offset
       ccMIS: // global
           _scLP5::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccMIT; else goto ccMIU;
       ccMIU: // global
           Hp = Hp + 184;
           if (Hp > HpLim) (likely: False) goto ccMIW; else goto ccMIV;
       ccMIW: // global
           HpAlloc = 184;
           goto ccMIT;
       ccMIT: // global
           R1 = _scLP5::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMIV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scLP5::P64;
           _scLLD::P64 = P64[_scLP5::P64 + 16];
           _scLLE::P64 = P64[_scLP5::P64 + 24];
           _scLLQ::P64 = P64[_scLP5::P64 + 32];
           _scLLR::P64 = P64[_scLP5::P64 + 40];
           _scLLS::P64 = P64[_scLP5::P64 + 48];
           _scLLT::P64 = P64[_scLP5::P64 + 56];
           _scLLU::P64 = P64[_scLP5::P64 + 64];
           _scLLV::P64 = P64[_scLP5::P64 + 72];
           _scLLZ::P64 = P64[_scLP5::P64 + 80];
           _scLM4::P64 = P64[_scLP5::P64 + 88];
           _scLM9::P64 = P64[_scLP5::P64 + 96];
           _scLMe::P64 = P64[_scLP5::P64 + 104];
           _scLMj::P64 = P64[_scLP5::P64 + 112];
           _scLMo::P64 = P64[_scLP5::P64 + 120];
           _scLMt::P64 = P64[_scLP5::P64 + 128];
           _scLMy::P64 = P64[_scLP5::P64 + 136];
           _scLMD::P64 = P64[_scLP5::P64 + 144];
           _scLMI::P64 = P64[_scLP5::P64 + 152];
           _scLMN::P64 = P64[_scLP5::P64 + 160];
           _scLMS::P64 = P64[_scLP5::P64 + 168];
           _scLMU::P64 = P64[_scLP5::P64 + 176];
           I64[Hp - 176] = sat_scLP4_info;
           P64[Hp - 160] = _scLLD::P64;
           P64[Hp - 152] = _scLLE::P64;
           P64[Hp - 144] = _scLLQ::P64;
           P64[Hp - 136] = _scLLR::P64;
           P64[Hp - 128] = _scLLS::P64;
           P64[Hp - 120] = _scLLT::P64;
           P64[Hp - 112] = _scLLU::P64;
           P64[Hp - 104] = _scLLV::P64;
           P64[Hp - 96] = _scLLZ::P64;
           P64[Hp - 88] = _scLM4::P64;
           P64[Hp - 80] = _scLM9::P64;
           P64[Hp - 72] = _scLMe::P64;
           P64[Hp - 64] = _scLMj::P64;
           P64[Hp - 56] = _scLMo::P64;
           P64[Hp - 48] = _scLMt::P64;
           P64[Hp - 40] = _scLMy::P64;
           P64[Hp - 32] = _scLMD::P64;
           P64[Hp - 24] = _scLMI::P64;
           P64[Hp - 16] = _scLMN::P64;
           P64[Hp - 8] = _scLMS::P64;
           P64[Hp] = _scLMU::P64;
           R3 = Hp - 176;
           R2 = lvl17_rcHpM_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLP5_info" {
     sat_scLP5_info:
         const sat_scLP5_entry;
         const 21;
         const 12884901903;
         const ScMjD_srt;
 },
 p_scLMT_entry() //  [R1, R2]
         { []
         }
     {offset
       ccMIX: // global
           Hp = Hp + 184;
           if (Hp > HpLim) (likely: False) goto ccMJ1; else goto ccMJ0;
       ccMJ1: // global
           HpAlloc = 184;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccMJ0: // global
           _scLLD::P64 = P64[R1 + 7];
           _scLLE::P64 = P64[R1 + 15];
           _scLLQ::P64 = P64[R1 + 23];
           _scLLR::P64 = P64[R1 + 31];
           _scLLS::P64 = P64[R1 + 39];
           _scLLT::P64 = P64[R1 + 47];
           _scLLU::P64 = P64[R1 + 55];
           _scLLV::P64 = P64[R1 + 63];
           _scLLZ::P64 = P64[R1 + 71];
           _scLM4::P64 = P64[R1 + 79];
           _scLM9::P64 = P64[R1 + 87];
           _scLMe::P64 = P64[R1 + 95];
           _scLMj::P64 = P64[R1 + 103];
           _scLMo::P64 = P64[R1 + 111];
           _scLMt::P64 = P64[R1 + 119];
           _scLMy::P64 = P64[R1 + 127];
           _scLMD::P64 = P64[R1 + 135];
           _scLMI::P64 = P64[R1 + 143];
           _scLMN::P64 = P64[R1 + 151];
           _scLMS::P64 = P64[R1 + 159];
           I64[Hp - 176] = sat_scLP5_info;
           P64[Hp - 160] = _scLLD::P64;
           P64[Hp - 152] = _scLLE::P64;
           P64[Hp - 144] = _scLLQ::P64;
           P64[Hp - 136] = _scLLR::P64;
           P64[Hp - 128] = _scLLS::P64;
           P64[Hp - 120] = _scLLT::P64;
           P64[Hp - 112] = _scLLU::P64;
           P64[Hp - 104] = _scLLV::P64;
           P64[Hp - 96] = _scLLZ::P64;
           P64[Hp - 88] = _scLM4::P64;
           P64[Hp - 80] = _scLM9::P64;
           P64[Hp - 72] = _scLMe::P64;
           P64[Hp - 64] = _scLMj::P64;
           P64[Hp - 56] = _scLMo::P64;
           P64[Hp - 48] = _scLMt::P64;
           P64[Hp - 40] = _scLMy::P64;
           P64[Hp - 32] = _scLMD::P64;
           P64[Hp - 24] = _scLMI::P64;
           P64[Hp - 16] = _scLMN::P64;
           P64[Hp - 8] = _scLMS::P64;
           P64[Hp] = R2;
           R3 = Hp - 176;
           R2 = lvl16_rcHpL_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . p_scLMT_info" {
     p_scLMT_info:
         const p_scLMT_entry;
         const 20;
         const 12884901896;
         const 4294967301;
         const ScMjD_srt;
 },
 sat_scLP9_entry() //  [R1]
         { []
         }
     {offset
       ccMJg: // global
           _scLP9::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto ccMJh; else goto ccMJi;
       ccMJi: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccMJk; else goto ccMJj;
       ccMJk: // global
           HpAlloc = 24;
           goto ccMJh;
       ccMJh: // global
           R1 = _scLP9::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMJj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _scLP9::P64;
           _scLMT::P64 = P64[_scLP9::P64 + 16];
           _scLP7::P64 = P64[_scLP9::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _scLP7::P64;
           R2 = Hp - 14;
           R1 = _scLMT::P64;
           Sp = Sp - 16;
           call p_scLMT_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLP9_info" {
     sat_scLP9_info:
         const sat_scLP9_entry;
         const 2;
         const 12884901906;
         const ScMjD_srt;
 },
 sat_scLPa_entry() //  [R1, R2]
         { []
         }
     {offset
       ccMJm: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto ccMJq; else goto ccMJp;
       ccMJq: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccMJp: // global
           _scLMT::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_scLP9_info;
           P64[Hp - 32] = _scLMT::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLPa_info" {
     sat_scLPa_info:
         const sat_scLPa_entry;
         const 1;
         const 12884901897;
         const 4294967301;
         const ScMjD_srt;
 },
 GHC.Stats.$fShowRTSStats_$cshowsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       ccMJr: // global
           if ((Sp + -168) < SpLim) (likely: False) goto ccMJs; else goto ccMJt;
       ccMJs: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Stats.$fShowRTSStats_$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccMJt: // global
           I64[Sp - 16] = block_ccMtb_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucMJC; else goto ccMtc;
       ucMJC: // global
           call _ccMtb(R1) args: 0, res: 0, upd: 0;
       ccMtc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.$fShowRTSStats_$cshowsPrec_info" {
     GHC.Stats.$fShowRTSStats_$cshowsPrec_info:
         const GHC.Stats.$fShowRTSStats_$cshowsPrec_entry;
         const 0;
         const 167503724558;
         const 8589934607;
         const ScMjD_srt;
 },
 _ccMtb() //  [R1]
         { []
         }
     {offset
       ccMtb: // global
           I64[Sp - 152] = block_ccMtg_info;
           _scLLD::P64 = P64[R1 + 7];
           _scLLE::P64 = P64[R1 + 15];
           _scLLF::P64 = P64[R1 + 23];
           _scLLG::P64 = P64[R1 + 31];
           _scLLH::P64 = P64[R1 + 39];
           _scLLI::P64 = P64[R1 + 47];
           _scLLJ::P64 = P64[R1 + 55];
           _scLLK::P64 = P64[R1 + 63];
           _scLLL::P64 = P64[R1 + 71];
           _scLLM::P64 = P64[R1 + 79];
           _scLLN::P64 = P64[R1 + 87];
           _scLLO::P64 = P64[R1 + 95];
           _scLLP::P64 = P64[R1 + 103];
           _scLLQ::P64 = P64[R1 + 111];
           _scLLR::P64 = P64[R1 + 119];
           _scLLS::P64 = P64[R1 + 127];
           _scLLT::P64 = P64[R1 + 135];
           _scLLU::P64 = P64[R1 + 143];
           _scLLV::P64 = P64[R1 + 151];
           _scLLW::P64 = P64[R1 + 159];
           R1 = P64[Sp + 8];
           P64[Sp - 144] = _scLLF::P64;
           P64[Sp - 136] = _scLLG::P64;
           P64[Sp - 128] = _scLLH::P64;
           P64[Sp - 120] = _scLLI::P64;
           P64[Sp - 112] = _scLLJ::P64;
           P64[Sp - 104] = _scLLK::P64;
           P64[Sp - 96] = _scLLL::P64;
           P64[Sp - 88] = _scLLM::P64;
           P64[Sp - 80] = _scLLN::P64;
           P64[Sp - 72] = _scLLO::P64;
           P64[Sp - 64] = _scLLP::P64;
           P64[Sp - 56] = _scLLQ::P64;
           P64[Sp - 48] = _scLLR::P64;
           P64[Sp - 40] = _scLLS::P64;
           P64[Sp - 32] = _scLLT::P64;
           P64[Sp - 24] = _scLLU::P64;
           P64[Sp - 16] = _scLLV::P64;
           P64[Sp - 8] = _scLLW::P64;
           P64[Sp] = _scLLE::P64;
           P64[Sp + 8] = _scLLD::P64;
           Sp = Sp - 152;
           if (R1 & 7 != 0) goto ucMJB; else goto ccMth;
       ucMJB: // global
           call _ccMtg(R1) args: 0, res: 0, upd: 0;
       ccMth: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccMtb_info" {
     block_ccMtb_info:
         const _ccMtb;
         const 1;
         const 30064771102;
         const ScMjD_srt;
 },
 _ccMtg() //  [R1]
         { []
         }
     {offset
       ccMtg: // global
           Hp = Hp + 472;
           if (Hp > HpLim) (likely: False) goto ccMJx; else goto ccMJw;
       ccMJx: // global
           HpAlloc = 472;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccMJw: // global
           _scLLY::I64 = I64[R1 + 7];
           I64[Hp - 464] = w1_scLLZ_info;
           P64[Hp - 448] = P64[Sp + 8];
           I64[Hp - 440] = w2_scLM4_info;
           P64[Hp - 424] = P64[Sp + 16];
           I64[Hp - 416] = w3_scLM9_info;
           P64[Hp - 400] = P64[Sp + 24];
           I64[Hp - 392] = w4_scLMe_info;
           P64[Hp - 376] = P64[Sp + 32];
           I64[Hp - 368] = w5_scLMj_info;
           P64[Hp - 352] = P64[Sp + 40];
           I64[Hp - 344] = w6_scLMo_info;
           P64[Hp - 328] = P64[Sp + 48];
           I64[Hp - 320] = w7_scLMt_info;
           P64[Hp - 304] = P64[Sp + 56];
           I64[Hp - 296] = w8_scLMy_info;
           P64[Hp - 280] = P64[Sp + 64];
           I64[Hp - 272] = w9_scLMD_info;
           P64[Hp - 256] = P64[Sp + 72];
           I64[Hp - 248] = w10_scLMI_info;
           P64[Hp - 232] = P64[Sp + 80];
           I64[Hp - 224] = w11_scLMN_info;
           P64[Hp - 208] = P64[Sp + 88];
           I64[Hp - 200] = f_scLMS_info;
           P64[Hp - 184] = P64[Sp + 144];
           I64[Hp - 176] = p_scLMT_info;
           P64[Hp - 168] = P64[Sp + 160];
           P64[Hp - 160] = P64[Sp + 152];
           P64[Hp - 152] = P64[Sp + 96];
           P64[Hp - 144] = P64[Sp + 104];
           P64[Hp - 136] = P64[Sp + 112];
           P64[Hp - 128] = P64[Sp + 120];
           P64[Hp - 120] = P64[Sp + 128];
           P64[Hp - 112] = P64[Sp + 136];
           P64[Hp - 104] = Hp - 464;
           P64[Hp - 96] = Hp - 440;
           P64[Hp - 88] = Hp - 416;
           P64[Hp - 80] = Hp - 392;
           P64[Hp - 72] = Hp - 368;
           P64[Hp - 64] = Hp - 344;
           P64[Hp - 56] = Hp - 320;
           P64[Hp - 48] = Hp - 296;
           P64[Hp - 40] = Hp - 272;
           P64[Hp - 32] = Hp - 248;
           P64[Hp - 24] = Hp - 224;
           P64[Hp - 16] = Hp - 200;
           _ccMxm::P64 = Hp - 175;
           if (%MO_S_Lt_W64(_scLLY::I64, 11)) goto ccMJz; else goto ccMJA;
       ccMJz: // global
           Hp = Hp - 16;
           R1 = _ccMxm::P64;
           Sp = Sp + 168;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccMJA: // global
           I64[Hp - 8] = sat_scLPa_info;
           P64[Hp] = _ccMxm::P64;
           R1 = Hp - 7;
           Sp = Sp + 168;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccMtg_info" {
     block_ccMtg_info:
         const _ccMtg;
         const 20;
         const 30064771102;
         const ScMjD_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.683142299 UTC

[section ""data" . GHC.Stats.$fShowRTSStats_$cshow_closure" {
     GHC.Stats.$fShowRTSStats_$cshow_closure:
         const GHC.Stats.$fShowRTSStats_$cshow_info;
         const 0;
 },
 GHC.Stats.$fShowRTSStats_$cshow_entry() //  [R2]
         { []
         }
     {offset
       ccMVB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccMVC; else goto ccMVD;
       ccMVC: // global
           R2 = R2;
           R1 = GHC.Stats.$fShowRTSStats_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccMVD: // global
           R3 = R2;
           R2 = GHC.Stats.$fShowGCDetails2_closure+1;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 16;
           call GHC.Stats.$fShowRTSStats_$cshowsPrec_entry(R3,
                                                           R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.$fShowRTSStats_$cshow_info" {
     GHC.Stats.$fShowRTSStats_$cshow_info:
         const GHC.Stats.$fShowRTSStats_$cshow_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const ScMjD_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.686942327 UTC

[section ""data" . GHC.Stats.$fShowRTSStats1_closure" {
     GHC.Stats.$fShowRTSStats1_closure:
         const GHC.Stats.$fShowRTSStats1_info;
         const 0;
 },
 GHC.Stats.$fShowRTSStats1_entry() //  [R2]
         { []
         }
     {offset
       ccMVQ: // global
           R3 = R2;
           R2 = GHC.Stats.$fShowGCDetails2_closure+1;
           call GHC.Stats.$fShowRTSStats_$cshowsPrec_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.$fShowRTSStats1_info" {
     GHC.Stats.$fShowRTSStats1_info:
         const GHC.Stats.$fShowRTSStats1_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const ScMjD_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.690652835 UTC

[section ""data" . GHC.Stats.$fShowRTSStats_$cshowList_closure" {
     GHC.Stats.$fShowRTSStats_$cshowList_closure:
         const GHC.Stats.$fShowRTSStats_$cshowList_info;
         const 0;
 },
 GHC.Stats.$fShowRTSStats_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       ccMW1: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Stats.$fShowRTSStats1_closure+1;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.$fShowRTSStats_$cshowList_info" {
     GHC.Stats.$fShowRTSStats_$cshowList_info:
         const GHC.Stats.$fShowRTSStats_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const ScMjD_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.693799892 UTC

[section ""data" . GHC.Stats.$fShowRTSStats_closure" {
     GHC.Stats.$fShowRTSStats_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Stats.$fShowRTSStats_$cshowsPrec_closure+2;
         const GHC.Stats.$fShowRTSStats_$cshow_closure+1;
         const GHC.Stats.$fShowRTSStats_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.695507932 UTC

[section ""cstring" . GHC.Stats.$tcGCDetails2_bytes" {
     GHC.Stats.$tcGCDetails2_bytes:
         I8[] [71,67,68,101,116,97,105,108,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.697851825 UTC

[section ""data" . lexeme_rcHq6_closure" {
     lexeme_rcHq6_closure:
         const lexeme_rcHq6_info;
         const 0;
         const 0;
         const 0;
 },
 lexeme_rcHq6_entry() //  [R1]
         { []
         }
     {offset
       ccMWg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccMWh; else goto ccMWi;
       ccMWh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMWi: // global
           (_ccMWd::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccMWd::I64 == 0) goto ccMWf; else goto ccMWe;
       ccMWf: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccMWe: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccMWd::I64;
           R2 = GHC.Stats.$tcGCDetails2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lexeme_rcHq6_info" {
     lexeme_rcHq6_info:
         const lexeme_rcHq6_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.701952238 UTC

[section ""data" . lexeme1_rcHq7_closure" {
     lexeme1_rcHq7_closure:
         const Text.Read.Lex.Ident_con_info;
         const lexeme_rcHq6_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.703670574 UTC

[section ""cstring" . lexeme2_rcHq8_bytes" {
     lexeme2_rcHq8_bytes:
         I8[] [123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.705967396 UTC

[section ""data" . lexeme3_rcHq9_closure" {
     lexeme3_rcHq9_closure:
         const lexeme3_rcHq9_info;
         const 0;
         const 0;
         const 0;
 },
 lexeme3_rcHq9_entry() //  [R1]
         { []
         }
     {offset
       ccMWz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccMWA; else goto ccMWB;
       ccMWA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMWB: // global
           (_ccMWw::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccMWw::I64 == 0) goto ccMWy; else goto ccMWx;
       ccMWy: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccMWx: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccMWw::I64;
           R2 = lexeme2_rcHq8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lexeme3_rcHq9_info" {
     lexeme3_rcHq9_info:
         const lexeme3_rcHq9_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.709487672 UTC

[section ""data" . lexeme4_rcHqa_closure" {
     lexeme4_rcHqa_closure:
         const Text.Read.Lex.Punc_con_info;
         const lexeme3_rcHq9_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.711092848 UTC

[section ""cstring" . ds_rcHqb_bytes" {
     ds_rcHqb_bytes:
         I8[] [103,99,100,101,116,97,105,108,115,95,103,101,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.713223653 UTC

[section ""data" . ds1_rcHqc_closure" {
     ds1_rcHqc_closure:
         const ds1_rcHqc_info;
         const 0;
         const 0;
         const 0;
 },
 ds1_rcHqc_entry() //  [R1]
         { []
         }
     {offset
       ccMWS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccMWT; else goto ccMWU;
       ccMWT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMWU: // global
           (_ccMWP::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccMWP::I64 == 0) goto ccMWR; else goto ccMWQ;
       ccMWR: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccMWQ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccMWP::I64;
           R2 = ds_rcHqb_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds1_rcHqc_info" {
     ds1_rcHqc_info:
         const ds1_rcHqc_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.717695907 UTC

[section ""data" . lvl37_rcHqd_closure" {
     lvl37_rcHqd_closure:
         const lvl37_rcHqd_info;
         const 0;
 },
 lvl37_rcHqd_entry() //  [R2]
         { []
         }
     {offset
       ccMX7: // global
           R3 = R2;
           R2 = Text.ParserCombinators.ReadPrec.minPrec_closure;
           call GHC.Read.$fReadWord32_$creadsPrec_entry(R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl37_rcHqd_info" {
     lvl37_rcHqd_info:
         const lvl37_rcHqd_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const ScMjD_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.721752046 UTC

[section ""data" . ds2_rcHqe_closure" {
     ds2_rcHqe_closure:
         const ds2_rcHqe_info;
         const 0;
 },
 ds2_rcHqe_entry() //  [R2, R3]
         { []
         }
     {offset
       ccMXl: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccMXm; else goto ccMXn;
       ccMXm: // global
           R3 = R3;
           R2 = R2;
           R1 = ds2_rcHqe_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccMXn: // global
           I64[Sp - 8] = block_ccMXi_info;
           R3 = R3;
           R2 = lvl37_rcHqd_closure+1;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . ds2_rcHqe_info" {
     ds2_rcHqe_info:
         const ds2_rcHqe_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const ScMjD_srt+72;
 },
 _ccMXi() //  [R1]
         { []
         }
     {offset
       ccMXi: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccMXq; else goto ccMXp;
       ccMXq: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccMXp: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccMXi_info" {
     block_ccMXi_info:
         const _ccMXi;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.727541845 UTC

[section ""data" . n_rcHqf_closure" {
     n_rcHqf_closure:
         const GHC.Types.I#_con_info;
         const 11;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.729138392 UTC

[section ""cstring" . lvl38_rcHqg_bytes" {
     lvl38_rcHqg_bytes:
         I8[] [44]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.731861595 UTC

[section ""data" . lvl39_rcHqh_closure" {
     lvl39_rcHqh_closure:
         const lvl39_rcHqh_info;
         const 0;
         const 0;
         const 0;
 },
 lvl39_rcHqh_entry() //  [R1]
         { []
         }
     {offset
       ccMXK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccMXL; else goto ccMXM;
       ccMXL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMXM: // global
           (_ccMXH::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccMXH::I64 == 0) goto ccMXJ; else goto ccMXI;
       ccMXJ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccMXI: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccMXH::I64;
           R2 = lvl38_rcHqg_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl39_rcHqh_info" {
     lvl39_rcHqh_info:
         const lvl39_rcHqh_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.735494128 UTC

[section ""data" . lvl40_rcHqi_closure" {
     lvl40_rcHqi_closure:
         const Text.Read.Lex.Punc_con_info;
         const lvl39_rcHqh_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.737184738 UTC

[section ""cstring" . lvl41_rcHqj_bytes" {
     lvl41_rcHqj_bytes:
         I8[] [103,99,100,101,116,97,105,108,115,95,116,104,114,101,97,100,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.740107841 UTC

[section ""data" . lvl42_rcHqk_closure" {
     lvl42_rcHqk_closure:
         const lvl42_rcHqk_info;
         const 0;
         const 0;
         const 0;
 },
 lvl42_rcHqk_entry() //  [R1]
         { []
         }
     {offset
       ccMY3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccMY4; else goto ccMY5;
       ccMY4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMY5: // global
           (_ccMY0::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccMY0::I64 == 0) goto ccMY2; else goto ccMY1;
       ccMY2: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccMY1: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccMY0::I64;
           R2 = lvl41_rcHqj_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl42_rcHqk_info" {
     lvl42_rcHqk_info:
         const lvl42_rcHqk_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.743698925 UTC

[section ""cstring" . lvl43_rcHql_bytes" {
     lvl43_rcHql_bytes:
         I8[] [103,99,100,101,116,97,105,108,115,95,97,108,108,111,99,97,116,101,100,95,98,121,116,101,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.745924356 UTC

[section ""data" . lvl44_rcHqm_closure" {
     lvl44_rcHqm_closure:
         const lvl44_rcHqm_info;
         const 0;
         const 0;
         const 0;
 },
 lvl44_rcHqm_entry() //  [R1]
         { []
         }
     {offset
       ccMYl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccMYm; else goto ccMYn;
       ccMYm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMYn: // global
           (_ccMYi::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccMYi::I64 == 0) goto ccMYk; else goto ccMYj;
       ccMYk: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccMYj: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccMYi::I64;
           R2 = lvl43_rcHql_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl44_rcHqm_info" {
     lvl44_rcHqm_info:
         const lvl44_rcHqm_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.749797374 UTC

[section ""data" . lvl45_rcHqn_closure" {
     lvl45_rcHqn_closure:
         const lvl45_rcHqn_info;
         const 0;
 },
 lvl45_rcHqn_entry() //  [R2]
         { []
         }
     {offset
       ccMYA: // global
           R3 = R2;
           R2 = Text.ParserCombinators.ReadPrec.minPrec_closure;
           call GHC.Read.$fReadWord64_$creadsPrec_entry(R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl45_rcHqn_info" {
     lvl45_rcHqn_info:
         const lvl45_rcHqn_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const ScMjD_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.753671793 UTC

[section ""data" . lvl46_rcHqo_closure" {
     lvl46_rcHqo_closure:
         const lvl46_rcHqo_info;
         const 0;
 },
 lvl46_rcHqo_entry() //  [R2, R3]
         { []
         }
     {offset
       ccMYO: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccMYP; else goto ccMYQ;
       ccMYP: // global
           R3 = R3;
           R2 = R2;
           R1 = lvl46_rcHqo_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccMYQ: // global
           I64[Sp - 8] = block_ccMYL_info;
           R3 = R3;
           R2 = lvl45_rcHqn_closure+1;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl46_rcHqo_info" {
     lvl46_rcHqo_info:
         const lvl46_rcHqo_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const ScMjD_srt+96;
 },
 _ccMYL() //  [R1]
         { []
         }
     {offset
       ccMYL: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccMYT; else goto ccMYS;
       ccMYT: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccMYS: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccMYL_info" {
     block_ccMYL_info:
         const _ccMYL;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.758604556 UTC

[section ""cstring" . lvl47_rcHqp_bytes" {
     lvl47_rcHqp_bytes:
         I8[] [103,99,100,101,116,97,105,108,115,95,108,105,118,101,95,98,121,116,101,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.760703702 UTC

[section ""data" . lvl48_rcHqq_closure" {
     lvl48_rcHqq_closure:
         const lvl48_rcHqq_info;
         const 0;
         const 0;
         const 0;
 },
 lvl48_rcHqq_entry() //  [R1]
         { []
         }
     {offset
       ccMZc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccMZd; else goto ccMZe;
       ccMZd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMZe: // global
           (_ccMZ9::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccMZ9::I64 == 0) goto ccMZb; else goto ccMZa;
       ccMZb: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccMZa: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccMZ9::I64;
           R2 = lvl47_rcHqp_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl48_rcHqq_info" {
     lvl48_rcHqq_info:
         const lvl48_rcHqq_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.764878863 UTC

[section ""cstring" . lvl49_rcHqr_bytes" {
     lvl49_rcHqr_bytes:
         I8[] [103,99,100,101,116,97,105,108,115,95,108,97,114,103,101,95,111,98,106,101,99,116,115,95,98,121,116,101,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.767468524 UTC

[section ""data" . lvl50_rcHqs_closure" {
     lvl50_rcHqs_closure:
         const lvl50_rcHqs_info;
         const 0;
         const 0;
         const 0;
 },
 lvl50_rcHqs_entry() //  [R1]
         { []
         }
     {offset
       ccMZu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccMZv; else goto ccMZw;
       ccMZv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMZw: // global
           (_ccMZr::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccMZr::I64 == 0) goto ccMZt; else goto ccMZs;
       ccMZt: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccMZs: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccMZr::I64;
           R2 = lvl49_rcHqr_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl50_rcHqs_info" {
     lvl50_rcHqs_info:
         const lvl50_rcHqs_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.770937397 UTC

[section ""cstring" . lvl51_rcHqt_bytes" {
     lvl51_rcHqt_bytes:
         I8[] [103,99,100,101,116,97,105,108,115,95,99,111,109,112,97,99,116,95,98,121,116,101,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.773074496 UTC

[section ""data" . lvl52_rcHqu_closure" {
     lvl52_rcHqu_closure:
         const lvl52_rcHqu_info;
         const 0;
         const 0;
         const 0;
 },
 lvl52_rcHqu_entry() //  [R1]
         { []
         }
     {offset
       ccMZM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccMZN; else goto ccMZO;
       ccMZN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccMZO: // global
           (_ccMZJ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccMZJ::I64 == 0) goto ccMZL; else goto ccMZK;
       ccMZL: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccMZK: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccMZJ::I64;
           R2 = lvl51_rcHqt_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl52_rcHqu_info" {
     lvl52_rcHqu_info:
         const lvl52_rcHqu_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.776552122 UTC

[section ""cstring" . lvl53_rcHqv_bytes" {
     lvl53_rcHqv_bytes:
         I8[] [103,99,100,101,116,97,105,108,115,95,115,108,111,112,95,98,121,116,101,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.779505699 UTC

[section ""data" . lvl54_rcHqw_closure" {
     lvl54_rcHqw_closure:
         const lvl54_rcHqw_info;
         const 0;
         const 0;
         const 0;
 },
 lvl54_rcHqw_entry() //  [R1]
         { []
         }
     {offset
       ccN04: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccN05; else goto ccN06;
       ccN05: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccN06: // global
           (_ccN01::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccN01::I64 == 0) goto ccN03; else goto ccN02;
       ccN03: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccN02: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccN01::I64;
           R2 = lvl53_rcHqv_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl54_rcHqw_info" {
     lvl54_rcHqw_info:
         const lvl54_rcHqw_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.78308311 UTC

[section ""cstring" . lvl55_rcHqx_bytes" {
     lvl55_rcHqx_bytes:
         I8[] [103,99,100,101,116,97,105,108,115,95,109,101,109,95,105,110,95,117,115,101,95,98,121,116,101,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.785321592 UTC

[section ""data" . lvl56_rcHqy_closure" {
     lvl56_rcHqy_closure:
         const lvl56_rcHqy_info;
         const 0;
         const 0;
         const 0;
 },
 lvl56_rcHqy_entry() //  [R1]
         { []
         }
     {offset
       ccN0m: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccN0n; else goto ccN0o;
       ccN0n: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccN0o: // global
           (_ccN0j::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccN0j::I64 == 0) goto ccN0l; else goto ccN0k;
       ccN0l: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccN0k: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccN0j::I64;
           R2 = lvl55_rcHqx_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl56_rcHqy_info" {
     lvl56_rcHqy_info:
         const lvl56_rcHqy_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.788695101 UTC

[section ""cstring" . lvl57_rcHqz_bytes" {
     lvl57_rcHqz_bytes:
         I8[] [103,99,100,101,116,97,105,108,115,95,99,111,112,105,101,100,95,98,121,116,101,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.790949054 UTC

[section ""data" . lvl58_rcHqA_closure" {
     lvl58_rcHqA_closure:
         const lvl58_rcHqA_info;
         const 0;
         const 0;
         const 0;
 },
 lvl58_rcHqA_entry() //  [R1]
         { []
         }
     {offset
       ccN0E: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccN0F; else goto ccN0G;
       ccN0F: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccN0G: // global
           (_ccN0B::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccN0B::I64 == 0) goto ccN0D; else goto ccN0C;
       ccN0D: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccN0C: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccN0B::I64;
           R2 = lvl57_rcHqz_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl58_rcHqA_info" {
     lvl58_rcHqA_info:
         const lvl58_rcHqA_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.795422527 UTC

[section ""cstring" . lvl59_rcHqB_bytes" {
     lvl59_rcHqB_bytes:
         I8[] [103,99,100,101,116,97,105,108,115,95,112,97,114,95,109,97,120,95,99,111,112,105,101,100,95,98,121,116,101,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.797605998 UTC

[section ""data" . lvl60_rcHqC_closure" {
     lvl60_rcHqC_closure:
         const lvl60_rcHqC_info;
         const 0;
         const 0;
         const 0;
 },
 lvl60_rcHqC_entry() //  [R1]
         { []
         }
     {offset
       ccN0W: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccN0X; else goto ccN0Y;
       ccN0X: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccN0Y: // global
           (_ccN0T::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccN0T::I64 == 0) goto ccN0V; else goto ccN0U;
       ccN0V: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccN0U: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccN0T::I64;
           R2 = lvl59_rcHqB_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl60_rcHqC_info" {
     lvl60_rcHqC_info:
         const lvl60_rcHqC_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.800995056 UTC

[section ""cstring" . lvl61_rcHqD_bytes" {
     lvl61_rcHqD_bytes:
         I8[] [103,99,100,101,116,97,105,108,115,95,112,97,114,95,98,97,108,97,110,99,101,100,95,99,111,112,105,101,100,95,98,121,116,101,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.803141455 UTC

[section ""data" . lvl62_rcHqE_closure" {
     lvl62_rcHqE_closure:
         const lvl62_rcHqE_info;
         const 0;
         const 0;
         const 0;
 },
 lvl62_rcHqE_entry() //  [R1]
         { []
         }
     {offset
       ccN1e: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccN1f; else goto ccN1g;
       ccN1f: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccN1g: // global
           (_ccN1b::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccN1b::I64 == 0) goto ccN1d; else goto ccN1c;
       ccN1d: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccN1c: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccN1b::I64;
           R2 = lvl61_rcHqD_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl62_rcHqE_info" {
     lvl62_rcHqE_info:
         const lvl62_rcHqE_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.806539324 UTC

[section ""cstring" . lvl63_rcHqF_bytes" {
     lvl63_rcHqF_bytes:
         I8[] [103,99,100,101,116,97,105,108,115,95,115,121,110,99,95,101,108,97,112,115,101,100,95,110,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.808567244 UTC

[section ""data" . lvl64_rcHqG_closure" {
     lvl64_rcHqG_closure:
         const lvl64_rcHqG_info;
         const 0;
         const 0;
         const 0;
 },
 lvl64_rcHqG_entry() //  [R1]
         { []
         }
     {offset
       ccN1w: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccN1x; else goto ccN1y;
       ccN1x: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccN1y: // global
           (_ccN1t::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccN1t::I64 == 0) goto ccN1v; else goto ccN1u;
       ccN1v: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccN1u: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccN1t::I64;
           R2 = lvl63_rcHqF_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl64_rcHqG_info" {
     lvl64_rcHqG_info:
         const lvl64_rcHqG_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.812846336 UTC

[section ""data" . lvl65_rcHqH_closure" {
     lvl65_rcHqH_closure:
         const lvl65_rcHqH_info;
         const 0;
 },
 lvl65_rcHqH_entry() //  [R2]
         { []
         }
     {offset
       ccN1L: // global
           R3 = R2;
           R2 = Text.ParserCombinators.ReadPrec.minPrec_closure;
           call GHC.Int.$fReadInt64_$creadsPrec_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl65_rcHqH_info" {
     lvl65_rcHqH_info:
         const lvl65_rcHqH_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const ScMjD_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.816646767 UTC

[section ""data" . lvl66_rcHqI_closure" {
     lvl66_rcHqI_closure:
         const lvl66_rcHqI_info;
         const 0;
 },
 lvl66_rcHqI_entry() //  [R2, R3]
         { []
         }
     {offset
       ccN1Z: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccN20; else goto ccN21;
       ccN20: // global
           R3 = R3;
           R2 = R2;
           R1 = lvl66_rcHqI_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccN21: // global
           I64[Sp - 8] = block_ccN1W_info;
           R3 = R3;
           R2 = lvl65_rcHqH_closure+1;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl66_rcHqI_info" {
     lvl66_rcHqI_info:
         const lvl66_rcHqI_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const ScMjD_srt+120;
 },
 _ccN1W() //  [R1]
         { []
         }
     {offset
       ccN1W: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccN24; else goto ccN23;
       ccN24: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccN23: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccN1W_info" {
     block_ccN1W_info:
         const _ccN1W;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.823411748 UTC

[section ""cstring" . lvl67_rcHqJ_bytes" {
     lvl67_rcHqJ_bytes:
         I8[] [103,99,100,101,116,97,105,108,115,95,99,112,117,95,110,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.825822982 UTC

[section ""data" . lvl68_rcHqK_closure" {
     lvl68_rcHqK_closure:
         const lvl68_rcHqK_info;
         const 0;
         const 0;
         const 0;
 },
 lvl68_rcHqK_entry() //  [R1]
         { []
         }
     {offset
       ccN2n: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccN2o; else goto ccN2p;
       ccN2o: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccN2p: // global
           (_ccN2k::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccN2k::I64 == 0) goto ccN2m; else goto ccN2l;
       ccN2m: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccN2l: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccN2k::I64;
           R2 = lvl67_rcHqJ_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl68_rcHqK_info" {
     lvl68_rcHqK_info:
         const lvl68_rcHqK_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.830425782 UTC

[section ""cstring" . lvl69_rcHqL_bytes" {
     lvl69_rcHqL_bytes:
         I8[] [103,99,100,101,116,97,105,108,115,95,101,108,97,112,115,101,100,95,110,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.832565522 UTC

[section ""data" . lvl70_rcHqM_closure" {
     lvl70_rcHqM_closure:
         const lvl70_rcHqM_info;
         const 0;
         const 0;
         const 0;
 },
 lvl70_rcHqM_entry() //  [R1]
         { []
         }
     {offset
       ccN2F: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccN2G; else goto ccN2H;
       ccN2G: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccN2H: // global
           (_ccN2C::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccN2C::I64 == 0) goto ccN2E; else goto ccN2D;
       ccN2E: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccN2D: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccN2C::I64;
           R2 = lvl69_rcHqL_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl70_rcHqM_info" {
     lvl70_rcHqM_info:
         const lvl70_rcHqM_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.837444406 UTC

[section ""data" . lvl71_rcHqN_closure" {
     lvl71_rcHqN_closure:
         const lvl71_rcHqN_info;
         const 0;
         const 0;
         const 0;
 },
 lvl71_rcHqN_entry() //  [R1]
         { []
         }
     {offset
       ccN2W: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccN2X; else goto ccN2Y;
       ccN2X: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccN2Y: // global
           (_ccN2T::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccN2T::I64 == 0) goto ccN2V; else goto ccN2U;
       ccN2V: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccN2U: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccN2T::I64;
           R2 = lvl15_rcHpK_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl71_rcHqN_info" {
     lvl71_rcHqN_info:
         const lvl71_rcHqN_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.841100559 UTC

[section ""data" . lvl72_rcHqO_closure" {
     lvl72_rcHqO_closure:
         const Text.Read.Lex.Punc_con_info;
         const lvl71_rcHqN_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.870258243 UTC

[section ""data" . GHC.Stats.$w$creadPrec_closure" {
     GHC.Stats.$w$creadPrec_closure:
         const GHC.Stats.$w$creadPrec_info;
         const 0;
 },
 sat_scLPY_entry() //  [R1, R2]
         { []
         }
     {offset
       ccN5H: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto ccN5L; else goto ccN5K;
       ccN5L: // global
           HpAlloc = 120;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccN5K: // global
           _scLPr::P64 = P64[R1 + 7];
           _scLPv::P64 = P64[R1 + 15];
           _scLPx::P64 = P64[R1 + 23];
           _scLPz::P64 = P64[R1 + 31];
           _scLPB::P64 = P64[R1 + 39];
           _scLPD::P64 = P64[R1 + 47];
           _scLPF::P64 = P64[R1 + 55];
           _scLPH::P64 = P64[R1 + 63];
           _scLPJ::P64 = P64[R1 + 71];
           _scLPL::P64 = P64[R1 + 79];
           _scLPN::P64 = P64[R1 + 87];
           _scLPP::P64 = P64[R1 + 95];
           _scLPR::P64 = P64[R1 + 103];
           _scLPT::P64 = P64[R1 + 111];
           _scLPV::P64 = P64[R1 + 119];
           I64[Hp - 112] = GHC.Stats.GCDetails_con_info;
           P64[Hp - 104] = _scLPv::P64;
           P64[Hp - 96] = _scLPx::P64;
           P64[Hp - 88] = _scLPz::P64;
           P64[Hp - 80] = _scLPB::P64;
           P64[Hp - 72] = _scLPD::P64;
           P64[Hp - 64] = _scLPF::P64;
           P64[Hp - 56] = _scLPH::P64;
           P64[Hp - 48] = _scLPJ::P64;
           P64[Hp - 40] = _scLPL::P64;
           P64[Hp - 32] = _scLPN::P64;
           P64[Hp - 24] = _scLPP::P64;
           P64[Hp - 16] = _scLPR::P64;
           P64[Hp - 8] = _scLPT::P64;
           P64[Hp] = _scLPV::P64;
           R2 = Hp - 111;
           R1 = _scLPr::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLPY_info" {
     sat_scLPY_info:
         const sat_scLPY_entry;
         const 15;
         const 8;
         const 4294967301;
 },
 sat_scLQ1_entry() //  [R1, R2]
         { []
         }
     {offset
       ccN5P: // global
           _scLPV::P64 = R2;
           _scLQ1::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto ccN5Q; else goto ccN5R;
       ccN5R: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto ccN5T; else goto ccN5S;
       ccN5T: // global
           HpAlloc = 128;
           goto ccN5Q;
       ccN5Q: // global
           R2 = _scLPV::P64;
           R1 = _scLQ1::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccN5S: // global
           _scLPr::P64 = P64[_scLQ1::P64 + 7];
           _scLPv::P64 = P64[_scLQ1::P64 + 15];
           _scLPx::P64 = P64[_scLQ1::P64 + 23];
           _scLPz::P64 = P64[_scLQ1::P64 + 31];
           _scLPB::P64 = P64[_scLQ1::P64 + 39];
           _scLPD::P64 = P64[_scLQ1::P64 + 47];
           _scLPF::P64 = P64[_scLQ1::P64 + 55];
           _scLPH::P64 = P64[_scLQ1::P64 + 63];
           _scLPJ::P64 = P64[_scLQ1::P64 + 71];
           _scLPL::P64 = P64[_scLQ1::P64 + 79];
           _scLPN::P64 = P64[_scLQ1::P64 + 87];
           _scLPP::P64 = P64[_scLQ1::P64 + 95];
           _scLPR::P64 = P64[_scLQ1::P64 + 103];
           _scLPT::P64 = P64[_scLQ1::P64 + 111];
           I64[Hp - 120] = sat_scLPY_info;
           P64[Hp - 112] = _scLPr::P64;
           P64[Hp - 104] = _scLPv::P64;
           P64[Hp - 96] = _scLPx::P64;
           P64[Hp - 88] = _scLPz::P64;
           P64[Hp - 80] = _scLPB::P64;
           P64[Hp - 72] = _scLPD::P64;
           P64[Hp - 64] = _scLPF::P64;
           P64[Hp - 56] = _scLPH::P64;
           P64[Hp - 48] = _scLPJ::P64;
           P64[Hp - 40] = _scLPL::P64;
           P64[Hp - 32] = _scLPN::P64;
           P64[Hp - 24] = _scLPP::P64;
           P64[Hp - 16] = _scLPR::P64;
           P64[Hp - 8] = _scLPT::P64;
           P64[Hp] = _scLPV::P64;
           I64[Sp - 8] = block_ccN5M_info;
           R3 = Hp - 119;
           R2 = lvl72_rcHqO_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLQ1_info" {
     sat_scLQ1_info:
         const sat_scLQ1_entry;
         const 14;
         const 12884901896;
         const 4294967301;
         const ScMjD_srt+136;
 },
 _ccN5M() //  [R1]
         { []
         }
     {offset
       ccN5M: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccN5W; else goto ccN5V;
       ccN5W: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccN5V: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccN5M_info" {
     block_ccN5M_info:
         const _ccN5M;
         const 0;
         const 30;
 },
 sat_scLQ2_entry() //  [R1, R2]
         { []
         }
     {offset
       ccN5X: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto ccN61; else goto ccN60;
       ccN61: // global
           HpAlloc = 120;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccN60: // global
           _scLPr::P64 = P64[R1 + 7];
           _scLPv::P64 = P64[R1 + 15];
           _scLPx::P64 = P64[R1 + 23];
           _scLPz::P64 = P64[R1 + 31];
           _scLPB::P64 = P64[R1 + 39];
           _scLPD::P64 = P64[R1 + 47];
           _scLPF::P64 = P64[R1 + 55];
           _scLPH::P64 = P64[R1 + 63];
           _scLPJ::P64 = P64[R1 + 71];
           _scLPL::P64 = P64[R1 + 79];
           _scLPN::P64 = P64[R1 + 87];
           _scLPP::P64 = P64[R1 + 95];
           _scLPR::P64 = P64[R1 + 103];
           _scLPT::P64 = P64[R1 + 111];
           I64[Hp - 112] = sat_scLQ1_info;
           P64[Hp - 104] = _scLPr::P64;
           P64[Hp - 96] = _scLPv::P64;
           P64[Hp - 88] = _scLPx::P64;
           P64[Hp - 80] = _scLPz::P64;
           P64[Hp - 72] = _scLPB::P64;
           P64[Hp - 64] = _scLPD::P64;
           P64[Hp - 56] = _scLPF::P64;
           P64[Hp - 48] = _scLPH::P64;
           P64[Hp - 40] = _scLPJ::P64;
           P64[Hp - 32] = _scLPL::P64;
           P64[Hp - 24] = _scLPN::P64;
           P64[Hp - 16] = _scLPP::P64;
           P64[Hp - 8] = _scLPR::P64;
           P64[Hp] = _scLPT::P64;
           R5 = Hp - 111;
           R4 = n_rcHqf_closure+1;
           R3 = lvl66_rcHqI_closure+2;
           R2 = lvl70_rcHqM_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLQ2_info" {
     sat_scLQ2_info:
         const sat_scLQ2_entry;
         const 14;
         const 133143986184;
         const 4294967301;
         const ScMjD_srt+128;
 },
 sat_scLQ5_entry() //  [R1, R2]
         { []
         }
     {offset
       ccN65: // global
           _scLPT::P64 = R2;
           _scLQ5::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto ccN66; else goto ccN67;
       ccN67: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto ccN69; else goto ccN68;
       ccN69: // global
           HpAlloc = 120;
           goto ccN66;
       ccN66: // global
           R2 = _scLPT::P64;
           R1 = _scLQ5::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccN68: // global
           _scLPr::P64 = P64[_scLQ5::P64 + 7];
           _scLPv::P64 = P64[_scLQ5::P64 + 15];
           _scLPx::P64 = P64[_scLQ5::P64 + 23];
           _scLPz::P64 = P64[_scLQ5::P64 + 31];
           _scLPB::P64 = P64[_scLQ5::P64 + 39];
           _scLPD::P64 = P64[_scLQ5::P64 + 47];
           _scLPF::P64 = P64[_scLQ5::P64 + 55];
           _scLPH::P64 = P64[_scLQ5::P64 + 63];
           _scLPJ::P64 = P64[_scLQ5::P64 + 71];
           _scLPL::P64 = P64[_scLQ5::P64 + 79];
           _scLPN::P64 = P64[_scLQ5::P64 + 87];
           _scLPP::P64 = P64[_scLQ5::P64 + 95];
           _scLPR::P64 = P64[_scLQ5::P64 + 103];
           I64[Hp - 112] = sat_scLQ2_info;
           P64[Hp - 104] = _scLPr::P64;
           P64[Hp - 96] = _scLPv::P64;
           P64[Hp - 88] = _scLPx::P64;
           P64[Hp - 80] = _scLPz::P64;
           P64[Hp - 72] = _scLPB::P64;
           P64[Hp - 64] = _scLPD::P64;
           P64[Hp - 56] = _scLPF::P64;
           P64[Hp - 48] = _scLPH::P64;
           P64[Hp - 40] = _scLPJ::P64;
           P64[Hp - 32] = _scLPL::P64;
           P64[Hp - 24] = _scLPN::P64;
           P64[Hp - 16] = _scLPP::P64;
           P64[Hp - 8] = _scLPR::P64;
           P64[Hp] = _scLPT::P64;
           I64[Sp - 8] = block_ccN62_info;
           R3 = Hp - 111;
           R2 = lvl40_rcHqi_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLQ5_info" {
     sat_scLQ5_info:
         const sat_scLQ5_entry;
         const 13;
         const 270582939656;
         const 4294967301;
         const ScMjD_srt+128;
 },
 _ccN62() //  [R1]
         { []
         }
     {offset
       ccN62: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccN6c; else goto ccN6b;
       ccN6c: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccN6b: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccN62_info" {
     block_ccN62_info:
         const _ccN62;
         const 0;
         const 30;
 },
 sat_scLQ6_entry() //  [R1, R2]
         { []
         }
     {offset
       ccN6d: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto ccN6h; else goto ccN6g;
       ccN6h: // global
           HpAlloc = 112;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccN6g: // global
           _scLPr::P64 = P64[R1 + 7];
           _scLPv::P64 = P64[R1 + 15];
           _scLPx::P64 = P64[R1 + 23];
           _scLPz::P64 = P64[R1 + 31];
           _scLPB::P64 = P64[R1 + 39];
           _scLPD::P64 = P64[R1 + 47];
           _scLPF::P64 = P64[R1 + 55];
           _scLPH::P64 = P64[R1 + 63];
           _scLPJ::P64 = P64[R1 + 71];
           _scLPL::P64 = P64[R1 + 79];
           _scLPN::P64 = P64[R1 + 87];
           _scLPP::P64 = P64[R1 + 95];
           _scLPR::P64 = P64[R1 + 103];
           I64[Hp - 104] = sat_scLQ5_info;
           P64[Hp - 96] = _scLPr::P64;
           P64[Hp - 88] = _scLPv::P64;
           P64[Hp - 80] = _scLPx::P64;
           P64[Hp - 72] = _scLPz::P64;
           P64[Hp - 64] = _scLPB::P64;
           P64[Hp - 56] = _scLPD::P64;
           P64[Hp - 48] = _scLPF::P64;
           P64[Hp - 40] = _scLPH::P64;
           P64[Hp - 32] = _scLPJ::P64;
           P64[Hp - 24] = _scLPL::P64;
           P64[Hp - 16] = _scLPN::P64;
           P64[Hp - 8] = _scLPP::P64;
           P64[Hp] = _scLPR::P64;
           R5 = Hp - 103;
           R4 = n_rcHqf_closure+1;
           R3 = lvl66_rcHqI_closure+2;
           R2 = lvl68_rcHqK_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLQ6_info" {
     sat_scLQ6_info:
         const sat_scLQ6_entry;
         const 13;
         const 545460846600;
         const 4294967301;
         const ScMjD_srt+128;
 },
 sat_scLQ9_entry() //  [R1, R2]
         { []
         }
     {offset
       ccN6l: // global
           _scLPR::P64 = R2;
           _scLQ9::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto ccN6m; else goto ccN6n;
       ccN6n: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto ccN6p; else goto ccN6o;
       ccN6p: // global
           HpAlloc = 112;
           goto ccN6m;
       ccN6m: // global
           R2 = _scLPR::P64;
           R1 = _scLQ9::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccN6o: // global
           _scLPr::P64 = P64[_scLQ9::P64 + 7];
           _scLPv::P64 = P64[_scLQ9::P64 + 15];
           _scLPx::P64 = P64[_scLQ9::P64 + 23];
           _scLPz::P64 = P64[_scLQ9::P64 + 31];
           _scLPB::P64 = P64[_scLQ9::P64 + 39];
           _scLPD::P64 = P64[_scLQ9::P64 + 47];
           _scLPF::P64 = P64[_scLQ9::P64 + 55];
           _scLPH::P64 = P64[_scLQ9::P64 + 63];
           _scLPJ::P64 = P64[_scLQ9::P64 + 71];
           _scLPL::P64 = P64[_scLQ9::P64 + 79];
           _scLPN::P64 = P64[_scLQ9::P64 + 87];
           _scLPP::P64 = P64[_scLQ9::P64 + 95];
           I64[Hp - 104] = sat_scLQ6_info;
           P64[Hp - 96] = _scLPr::P64;
           P64[Hp - 88] = _scLPv::P64;
           P64[Hp - 80] = _scLPx::P64;
           P64[Hp - 72] = _scLPz::P64;
           P64[Hp - 64] = _scLPB::P64;
           P64[Hp - 56] = _scLPD::P64;
           P64[Hp - 48] = _scLPF::P64;
           P64[Hp - 40] = _scLPH::P64;
           P64[Hp - 32] = _scLPJ::P64;
           P64[Hp - 24] = _scLPL::P64;
           P64[Hp - 16] = _scLPN::P64;
           P64[Hp - 8] = _scLPP::P64;
           P64[Hp] = _scLPR::P64;
           I64[Sp - 8] = block_ccN6i_info;
           R3 = Hp - 103;
           R2 = lvl40_rcHqi_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLQ9_info" {
     sat_scLQ9_info:
         const sat_scLQ9_entry;
         const 12;
         const 545460846600;
         const 4294967301;
         const ScMjD_srt+128;
 },
 _ccN6i() //  [R1]
         { []
         }
     {offset
       ccN6i: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccN6s; else goto ccN6r;
       ccN6s: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccN6r: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccN6i_info" {
     block_ccN6i_info:
         const _ccN6i;
         const 0;
         const 30;
 },
 sat_scLQa_entry() //  [R1, R2]
         { []
         }
     {offset
       ccN6t: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto ccN6x; else goto ccN6w;
       ccN6x: // global
           HpAlloc = 104;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccN6w: // global
           _scLPr::P64 = P64[R1 + 7];
           _scLPv::P64 = P64[R1 + 15];
           _scLPx::P64 = P64[R1 + 23];
           _scLPz::P64 = P64[R1 + 31];
           _scLPB::P64 = P64[R1 + 39];
           _scLPD::P64 = P64[R1 + 47];
           _scLPF::P64 = P64[R1 + 55];
           _scLPH::P64 = P64[R1 + 63];
           _scLPJ::P64 = P64[R1 + 71];
           _scLPL::P64 = P64[R1 + 79];
           _scLPN::P64 = P64[R1 + 87];
           _scLPP::P64 = P64[R1 + 95];
           I64[Hp - 96] = sat_scLQ9_info;
           P64[Hp - 88] = _scLPr::P64;
           P64[Hp - 80] = _scLPv::P64;
           P64[Hp - 72] = _scLPx::P64;
           P64[Hp - 64] = _scLPz::P64;
           P64[Hp - 56] = _scLPB::P64;
           P64[Hp - 48] = _scLPD::P64;
           P64[Hp - 40] = _scLPF::P64;
           P64[Hp - 32] = _scLPH::P64;
           P64[Hp - 24] = _scLPJ::P64;
           P64[Hp - 16] = _scLPL::P64;
           P64[Hp - 8] = _scLPN::P64;
           P64[Hp] = _scLPP::P64;
           R5 = Hp - 95;
           R4 = n_rcHqf_closure+1;
           R3 = lvl66_rcHqI_closure+2;
           R2 = lvl64_rcHqG_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLQa_info" {
     sat_scLQa_info:
         const sat_scLQa_entry;
         const 12;
         const 1095216660488;
         const 4294967301;
         const ScMjD_srt+128;
 },
 sat_scLQd_entry() //  [R1, R2]
         { []
         }
     {offset
       ccN6B: // global
           _scLPP::P64 = R2;
           _scLQd::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto ccN6C; else goto ccN6D;
       ccN6D: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto ccN6F; else goto ccN6E;
       ccN6F: // global
           HpAlloc = 104;
           goto ccN6C;
       ccN6C: // global
           R2 = _scLPP::P64;
           R1 = _scLQd::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccN6E: // global
           _scLPr::P64 = P64[_scLQd::P64 + 7];
           _scLPv::P64 = P64[_scLQd::P64 + 15];
           _scLPx::P64 = P64[_scLQd::P64 + 23];
           _scLPz::P64 = P64[_scLQd::P64 + 31];
           _scLPB::P64 = P64[_scLQd::P64 + 39];
           _scLPD::P64 = P64[_scLQd::P64 + 47];
           _scLPF::P64 = P64[_scLQd::P64 + 55];
           _scLPH::P64 = P64[_scLQd::P64 + 63];
           _scLPJ::P64 = P64[_scLQd::P64 + 71];
           _scLPL::P64 = P64[_scLQd::P64 + 79];
           _scLPN::P64 = P64[_scLQd::P64 + 87];
           I64[Hp - 96] = sat_scLQa_info;
           P64[Hp - 88] = _scLPr::P64;
           P64[Hp - 80] = _scLPv::P64;
           P64[Hp - 72] = _scLPx::P64;
           P64[Hp - 64] = _scLPz::P64;
           P64[Hp - 56] = _scLPB::P64;
           P64[Hp - 48] = _scLPD::P64;
           P64[Hp - 40] = _scLPF::P64;
           P64[Hp - 32] = _scLPH::P64;
           P64[Hp - 24] = _scLPJ::P64;
           P64[Hp - 16] = _scLPL::P64;
           P64[Hp - 8] = _scLPN::P64;
           P64[Hp] = _scLPP::P64;
           I64[Sp - 8] = block_ccN6y_info;
           R3 = Hp - 95;
           R2 = lvl40_rcHqi_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLQd_info" {
     sat_scLQd_info:
         const sat_scLQd_entry;
         const 11;
         const 1095216660488;
         const 4294967301;
         const ScMjD_srt+128;
 },
 _ccN6y() //  [R1]
         { []
         }
     {offset
       ccN6y: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccN6I; else goto ccN6H;
       ccN6I: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccN6H: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccN6y_info" {
     block_ccN6y_info:
         const _ccN6y;
         const 0;
         const 30;
 },
 sat_scLQe_entry() //  [R1, R2]
         { []
         }
     {offset
       ccN6J: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto ccN6N; else goto ccN6M;
       ccN6N: // global
           HpAlloc = 96;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccN6M: // global
           _scLPr::P64 = P64[R1 + 7];
           _scLPv::P64 = P64[R1 + 15];
           _scLPx::P64 = P64[R1 + 23];
           _scLPz::P64 = P64[R1 + 31];
           _scLPB::P64 = P64[R1 + 39];
           _scLPD::P64 = P64[R1 + 47];
           _scLPF::P64 = P64[R1 + 55];
           _scLPH::P64 = P64[R1 + 63];
           _scLPJ::P64 = P64[R1 + 71];
           _scLPL::P64 = P64[R1 + 79];
           _scLPN::P64 = P64[R1 + 87];
           I64[Hp - 88] = sat_scLQd_info;
           P64[Hp - 80] = _scLPr::P64;
           P64[Hp - 72] = _scLPv::P64;
           P64[Hp - 64] = _scLPx::P64;
           P64[Hp - 56] = _scLPz::P64;
           P64[Hp - 48] = _scLPB::P64;
           P64[Hp - 40] = _scLPD::P64;
           P64[Hp - 32] = _scLPF::P64;
           P64[Hp - 24] = _scLPH::P64;
           P64[Hp - 16] = _scLPJ::P64;
           P64[Hp - 8] = _scLPL::P64;
           P64[Hp] = _scLPN::P64;
           R5 = Hp - 87;
           R4 = n_rcHqf_closure+1;
           R3 = lvl46_rcHqo_closure+2;
           R2 = lvl62_rcHqE_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLQe_info" {
     sat_scLQe_info:
         const sat_scLQe_entry;
         const 11;
         const 17562121273352;
         const 4294967301;
         const ScMjD_srt+104;
 },
 sat_scLQh_entry() //  [R1, R2]
         { []
         }
     {offset
       ccN6R: // global
           _scLPN::P64 = R2;
           _scLQh::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto ccN6S; else goto ccN6T;
       ccN6T: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto ccN6V; else goto ccN6U;
       ccN6V: // global
           HpAlloc = 96;
           goto ccN6S;
       ccN6S: // global
           R2 = _scLPN::P64;
           R1 = _scLQh::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccN6U: // global
           _scLPr::P64 = P64[_scLQh::P64 + 7];
           _scLPv::P64 = P64[_scLQh::P64 + 15];
           _scLPx::P64 = P64[_scLQh::P64 + 23];
           _scLPz::P64 = P64[_scLQh::P64 + 31];
           _scLPB::P64 = P64[_scLQh::P64 + 39];
           _scLPD::P64 = P64[_scLQh::P64 + 47];
           _scLPF::P64 = P64[_scLQh::P64 + 55];
           _scLPH::P64 = P64[_scLQh::P64 + 63];
           _scLPJ::P64 = P64[_scLQh::P64 + 71];
           _scLPL::P64 = P64[_scLQh::P64 + 79];
           I64[Hp - 88] = sat_scLQe_info;
           P64[Hp - 80] = _scLPr::P64;
           P64[Hp - 72] = _scLPv::P64;
           P64[Hp - 64] = _scLPx::P64;
           P64[Hp - 56] = _scLPz::P64;
           P64[Hp - 48] = _scLPB::P64;
           P64[Hp - 40] = _scLPD::P64;
           P64[Hp - 32] = _scLPF::P64;
           P64[Hp - 24] = _scLPH::P64;
           P64[Hp - 16] = _scLPJ::P64;
           P64[Hp - 8] = _scLPL::P64;
           P64[Hp] = _scLPN::P64;
           I64[Sp - 8] = block_ccN6O_info;
           R3 = Hp - 87;
           R2 = lvl40_rcHqi_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLQh_info" {
     sat_scLQh_info:
         const sat_scLQh_entry;
         const 10;
         const 17562121273352;
         const 4294967301;
         const ScMjD_srt+104;
 },
 _ccN6O() //  [R1]
         { []
         }
     {offset
       ccN6O: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccN6Y; else goto ccN6X;
       ccN6Y: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccN6X: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccN6O_info" {
     block_ccN6O_info:
         const _ccN6O;
         const 0;
         const 30;
 },
 sat_scLQi_entry() //  [R1, R2]
         { []
         }
     {offset
       ccN6Z: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto ccN73; else goto ccN72;
       ccN73: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccN72: // global
           _scLPr::P64 = P64[R1 + 7];
           _scLPv::P64 = P64[R1 + 15];
           _scLPx::P64 = P64[R1 + 23];
           _scLPz::P64 = P64[R1 + 31];
           _scLPB::P64 = P64[R1 + 39];
           _scLPD::P64 = P64[R1 + 47];
           _scLPF::P64 = P64[R1 + 55];
           _scLPH::P64 = P64[R1 + 63];
           _scLPJ::P64 = P64[R1 + 71];
           _scLPL::P64 = P64[R1 + 79];
           I64[Hp - 80] = sat_scLQh_info;
           P64[Hp - 72] = _scLPr::P64;
           P64[Hp - 64] = _scLPv::P64;
           P64[Hp - 56] = _scLPx::P64;
           P64[Hp - 48] = _scLPz::P64;
           P64[Hp - 40] = _scLPB::P64;
           P64[Hp - 32] = _scLPD::P64;
           P64[Hp - 24] = _scLPF::P64;
           P64[Hp - 16] = _scLPH::P64;
           P64[Hp - 8] = _scLPJ::P64;
           P64[Hp] = _scLPL::P64;
           R5 = Hp - 79;
           R4 = n_rcHqf_closure+1;
           R3 = lvl46_rcHqo_closure+2;
           R2 = lvl60_rcHqC_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLQi_info" {
     sat_scLQi_info:
         const sat_scLQi_entry;
         const 10;
         const 35154307317768;
         const 4294967301;
         const ScMjD_srt+104;
 },
 sat_scLQl_entry() //  [R1, R2]
         { []
         }
     {offset
       ccN77: // global
           _scLPL::P64 = R2;
           _scLQl::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto ccN78; else goto ccN79;
       ccN79: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto ccN7b; else goto ccN7a;
       ccN7b: // global
           HpAlloc = 88;
           goto ccN78;
       ccN78: // global
           R2 = _scLPL::P64;
           R1 = _scLQl::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccN7a: // global
           _scLPr::P64 = P64[_scLQl::P64 + 7];
           _scLPv::P64 = P64[_scLQl::P64 + 15];
           _scLPx::P64 = P64[_scLQl::P64 + 23];
           _scLPz::P64 = P64[_scLQl::P64 + 31];
           _scLPB::P64 = P64[_scLQl::P64 + 39];
           _scLPD::P64 = P64[_scLQl::P64 + 47];
           _scLPF::P64 = P64[_scLQl::P64 + 55];
           _scLPH::P64 = P64[_scLQl::P64 + 63];
           _scLPJ::P64 = P64[_scLQl::P64 + 71];
           I64[Hp - 80] = sat_scLQi_info;
           P64[Hp - 72] = _scLPr::P64;
           P64[Hp - 64] = _scLPv::P64;
           P64[Hp - 56] = _scLPx::P64;
           P64[Hp - 48] = _scLPz::P64;
           P64[Hp - 40] = _scLPB::P64;
           P64[Hp - 32] = _scLPD::P64;
           P64[Hp - 24] = _scLPF::P64;
           P64[Hp - 16] = _scLPH::P64;
           P64[Hp - 8] = _scLPJ::P64;
           P64[Hp] = _scLPL::P64;
           I64[Sp - 8] = block_ccN74_info;
           R3 = Hp - 79;
           R2 = lvl40_rcHqi_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLQl_info" {
     sat_scLQl_info:
         const sat_scLQl_entry;
         const 9;
         const 35154307317768;
         const 4294967301;
         const ScMjD_srt+104;
 },
 _ccN74() //  [R1]
         { []
         }
     {offset
       ccN74: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccN7e; else goto ccN7d;
       ccN7e: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccN7d: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccN74_info" {
     block_ccN74_info:
         const _ccN74;
         const 0;
         const 30;
 },
 sat_scLQm_entry() //  [R1, R2]
         { []
         }
     {offset
       ccN7f: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto ccN7j; else goto ccN7i;
       ccN7j: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccN7i: // global
           _scLPr::P64 = P64[R1 + 7];
           _scLPv::P64 = P64[R1 + 15];
           _scLPx::P64 = P64[R1 + 23];
           _scLPz::P64 = P64[R1 + 31];
           _scLPB::P64 = P64[R1 + 39];
           _scLPD::P64 = P64[R1 + 47];
           _scLPF::P64 = P64[R1 + 55];
           _scLPH::P64 = P64[R1 + 63];
           _scLPJ::P64 = P64[R1 + 71];
           I64[Hp - 72] = sat_scLQl_info;
           P64[Hp - 64] = _scLPr::P64;
           P64[Hp - 56] = _scLPv::P64;
           P64[Hp - 48] = _scLPx::P64;
           P64[Hp - 40] = _scLPz::P64;
           P64[Hp - 32] = _scLPB::P64;
           P64[Hp - 24] = _scLPD::P64;
           P64[Hp - 16] = _scLPF::P64;
           P64[Hp - 8] = _scLPH::P64;
           P64[Hp] = _scLPJ::P64;
           R5 = Hp - 71;
           R4 = n_rcHqf_closure+1;
           R3 = lvl46_rcHqo_closure+2;
           R2 = lvl58_rcHqA_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLQm_info" {
     sat_scLQm_info:
         const sat_scLQm_entry;
         const 9;
         const 70338679406600;
         const 4294967301;
         const ScMjD_srt+104;
 },
 sat_scLQp_entry() //  [R1, R2]
         { []
         }
     {offset
       ccN7n: // global
           _scLPJ::P64 = R2;
           _scLQp::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto ccN7o; else goto ccN7p;
       ccN7p: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto ccN7r; else goto ccN7q;
       ccN7r: // global
           HpAlloc = 80;
           goto ccN7o;
       ccN7o: // global
           R2 = _scLPJ::P64;
           R1 = _scLQp::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccN7q: // global
           _scLPr::P64 = P64[_scLQp::P64 + 7];
           _scLPv::P64 = P64[_scLQp::P64 + 15];
           _scLPx::P64 = P64[_scLQp::P64 + 23];
           _scLPz::P64 = P64[_scLQp::P64 + 31];
           _scLPB::P64 = P64[_scLQp::P64 + 39];
           _scLPD::P64 = P64[_scLQp::P64 + 47];
           _scLPF::P64 = P64[_scLQp::P64 + 55];
           _scLPH::P64 = P64[_scLQp::P64 + 63];
           I64[Hp - 72] = sat_scLQm_info;
           P64[Hp - 64] = _scLPr::P64;
           P64[Hp - 56] = _scLPv::P64;
           P64[Hp - 48] = _scLPx::P64;
           P64[Hp - 40] = _scLPz::P64;
           P64[Hp - 32] = _scLPB::P64;
           P64[Hp - 24] = _scLPD::P64;
           P64[Hp - 16] = _scLPF::P64;
           P64[Hp - 8] = _scLPH::P64;
           P64[Hp] = _scLPJ::P64;
           I64[Sp - 8] = block_ccN7k_info;
           R3 = Hp - 71;
           R2 = lvl40_rcHqi_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLQp_info" {
     sat_scLQp_info:
         const sat_scLQp_entry;
         const 8;
         const 70338679406600;
         const 4294967301;
         const ScMjD_srt+104;
 },
 _ccN7k() //  [R1]
         { []
         }
     {offset
       ccN7k: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccN7u; else goto ccN7t;
       ccN7u: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccN7t: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccN7k_info" {
     block_ccN7k_info:
         const _ccN7k;
         const 0;
         const 30;
 },
 sat_scLQq_entry() //  [R1, R2]
         { []
         }
     {offset
       ccN7v: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto ccN7z; else goto ccN7y;
       ccN7z: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccN7y: // global
           _scLPr::P64 = P64[R1 + 7];
           _scLPv::P64 = P64[R1 + 15];
           _scLPx::P64 = P64[R1 + 23];
           _scLPz::P64 = P64[R1 + 31];
           _scLPB::P64 = P64[R1 + 39];
           _scLPD::P64 = P64[R1 + 47];
           _scLPF::P64 = P64[R1 + 55];
           _scLPH::P64 = P64[R1 + 63];
           I64[Hp - 64] = sat_scLQp_info;
           P64[Hp - 56] = _scLPr::P64;
           P64[Hp - 48] = _scLPv::P64;
           P64[Hp - 40] = _scLPx::P64;
           P64[Hp - 32] = _scLPz::P64;
           P64[Hp - 24] = _scLPB::P64;
           P64[Hp - 16] = _scLPD::P64;
           P64[Hp - 8] = _scLPF::P64;
           P64[Hp] = _scLPH::P64;
           R5 = Hp - 63;
           R4 = n_rcHqf_closure+1;
           R3 = lvl46_rcHqo_closure+2;
           R2 = lvl56_rcHqy_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLQq_info" {
     sat_scLQq_info:
         const sat_scLQq_entry;
         const 8;
         const 140707423584264;
         const 4294967301;
         const ScMjD_srt+104;
 },
 sat_scLQt_entry() //  [R1, R2]
         { []
         }
     {offset
       ccN7D: // global
           _scLPH::P64 = R2;
           _scLQt::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto ccN7E; else goto ccN7F;
       ccN7F: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto ccN7H; else goto ccN7G;
       ccN7H: // global
           HpAlloc = 72;
           goto ccN7E;
       ccN7E: // global
           R2 = _scLPH::P64;
           R1 = _scLQt::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccN7G: // global
           _scLPr::P64 = P64[_scLQt::P64 + 7];
           _scLPv::P64 = P64[_scLQt::P64 + 15];
           _scLPx::P64 = P64[_scLQt::P64 + 23];
           _scLPz::P64 = P64[_scLQt::P64 + 31];
           _scLPB::P64 = P64[_scLQt::P64 + 39];
           _scLPD::P64 = P64[_scLQt::P64 + 47];
           _scLPF::P64 = P64[_scLQt::P64 + 55];
           I64[Hp - 64] = sat_scLQq_info;
           P64[Hp - 56] = _scLPr::P64;
           P64[Hp - 48] = _scLPv::P64;
           P64[Hp - 40] = _scLPx::P64;
           P64[Hp - 32] = _scLPz::P64;
           P64[Hp - 24] = _scLPB::P64;
           P64[Hp - 16] = _scLPD::P64;
           P64[Hp - 8] = _scLPF::P64;
           P64[Hp] = _scLPH::P64;
           I64[Sp - 8] = block_ccN7A_info;
           R3 = Hp - 63;
           R2 = lvl40_rcHqi_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLQt_info" {
     sat_scLQt_info:
         const sat_scLQt_entry;
         const 7;
         const 140707423584264;
         const 4294967301;
         const ScMjD_srt+104;
 },
 _ccN7A() //  [R1]
         { []
         }
     {offset
       ccN7A: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccN7K; else goto ccN7J;
       ccN7K: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccN7J: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccN7A_info" {
     block_ccN7A_info:
         const _ccN7A;
         const 0;
         const 30;
 },
 sat_scLQu_entry() //  [R1, R2]
         { []
         }
     {offset
       ccN7L: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto ccN7P; else goto ccN7O;
       ccN7P: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccN7O: // global
           _scLPr::P64 = P64[R1 + 7];
           _scLPv::P64 = P64[R1 + 15];
           _scLPx::P64 = P64[R1 + 23];
           _scLPz::P64 = P64[R1 + 31];
           _scLPB::P64 = P64[R1 + 39];
           _scLPD::P64 = P64[R1 + 47];
           _scLPF::P64 = P64[R1 + 55];
           I64[Hp - 56] = sat_scLQt_info;
           P64[Hp - 48] = _scLPr::P64;
           P64[Hp - 40] = _scLPv::P64;
           P64[Hp - 32] = _scLPx::P64;
           P64[Hp - 24] = _scLPz::P64;
           P64[Hp - 16] = _scLPB::P64;
           P64[Hp - 8] = _scLPD::P64;
           P64[Hp] = _scLPF::P64;
           R5 = Hp - 55;
           R4 = n_rcHqf_closure+1;
           R3 = lvl46_rcHqo_closure+2;
           R2 = lvl54_rcHqw_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLQu_info" {
     sat_scLQu_info:
         const sat_scLQu_entry;
         const 7;
         const 281444911939592;
         const 4294967301;
         const ScMjD_srt+104;
 },
 sat_scLQx_entry() //  [R1, R2]
         { []
         }
     {offset
       ccN7T: // global
           _scLPF::P64 = R2;
           _scLQx::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto ccN7U; else goto ccN7V;
       ccN7V: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto ccN7X; else goto ccN7W;
       ccN7X: // global
           HpAlloc = 64;
           goto ccN7U;
       ccN7U: // global
           R2 = _scLPF::P64;
           R1 = _scLQx::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccN7W: // global
           _scLPr::P64 = P64[_scLQx::P64 + 7];
           _scLPv::P64 = P64[_scLQx::P64 + 15];
           _scLPx::P64 = P64[_scLQx::P64 + 23];
           _scLPz::P64 = P64[_scLQx::P64 + 31];
           _scLPB::P64 = P64[_scLQx::P64 + 39];
           _scLPD::P64 = P64[_scLQx::P64 + 47];
           I64[Hp - 56] = sat_scLQu_info;
           P64[Hp - 48] = _scLPr::P64;
           P64[Hp - 40] = _scLPv::P64;
           P64[Hp - 32] = _scLPx::P64;
           P64[Hp - 24] = _scLPz::P64;
           P64[Hp - 16] = _scLPB::P64;
           P64[Hp - 8] = _scLPD::P64;
           P64[Hp] = _scLPF::P64;
           I64[Sp - 8] = block_ccN7Q_info;
           R3 = Hp - 55;
           R2 = lvl40_rcHqi_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLQx_info" {
     sat_scLQx_info:
         const sat_scLQx_entry;
         const 6;
         const 281444911939592;
         const 4294967301;
         const ScMjD_srt+104;
 },
 _ccN7Q() //  [R1]
         { []
         }
     {offset
       ccN7Q: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccN80; else goto ccN7Z;
       ccN80: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccN7Z: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccN7Q_info" {
     block_ccN7Q_info:
         const _ccN7Q;
         const 0;
         const 30;
 },
 sat_scLQy_entry() //  [R1, R2]
         { []
         }
     {offset
       ccN81: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto ccN85; else goto ccN84;
       ccN85: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccN84: // global
           _scLPr::P64 = P64[R1 + 7];
           _scLPv::P64 = P64[R1 + 15];
           _scLPx::P64 = P64[R1 + 23];
           _scLPz::P64 = P64[R1 + 31];
           _scLPB::P64 = P64[R1 + 39];
           _scLPD::P64 = P64[R1 + 47];
           I64[Hp - 48] = sat_scLQx_info;
           P64[Hp - 40] = _scLPr::P64;
           P64[Hp - 32] = _scLPv::P64;
           P64[Hp - 24] = _scLPx::P64;
           P64[Hp - 16] = _scLPz::P64;
           P64[Hp - 8] = _scLPB::P64;
           P64[Hp] = _scLPD::P64;
           R5 = Hp - 47;
           R4 = n_rcHqf_closure+1;
           R3 = lvl46_rcHqo_closure+2;
           R2 = lvl52_rcHqu_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLQy_info" {
     sat_scLQy_info:
         const sat_scLQy_entry;
         const 6;
         const 562919888650248;
         const 4294967301;
         const ScMjD_srt+104;
 },
 sat_scLQB_entry() //  [R1, R2]
         { []
         }
     {offset
       ccN89: // global
           _scLPD::P64 = R2;
           _scLQB::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto ccN8a; else goto ccN8b;
       ccN8b: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto ccN8d; else goto ccN8c;
       ccN8d: // global
           HpAlloc = 56;
           goto ccN8a;
       ccN8a: // global
           R2 = _scLPD::P64;
           R1 = _scLQB::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccN8c: // global
           _scLPr::P64 = P64[_scLQB::P64 + 7];
           _scLPv::P64 = P64[_scLQB::P64 + 15];
           _scLPx::P64 = P64[_scLQB::P64 + 23];
           _scLPz::P64 = P64[_scLQB::P64 + 31];
           _scLPB::P64 = P64[_scLQB::P64 + 39];
           I64[Hp - 48] = sat_scLQy_info;
           P64[Hp - 40] = _scLPr::P64;
           P64[Hp - 32] = _scLPv::P64;
           P64[Hp - 24] = _scLPx::P64;
           P64[Hp - 16] = _scLPz::P64;
           P64[Hp - 8] = _scLPB::P64;
           P64[Hp] = _scLPD::P64;
           I64[Sp - 8] = block_ccN86_info;
           R3 = Hp - 47;
           R2 = lvl40_rcHqi_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLQB_info" {
     sat_scLQB_info:
         const sat_scLQB_entry;
         const 5;
         const 562919888650248;
         const 4294967301;
         const ScMjD_srt+104;
 },
 _ccN86() //  [R1]
         { []
         }
     {offset
       ccN86: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccN8g; else goto ccN8f;
       ccN8g: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccN8f: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccN86_info" {
     block_ccN86_info:
         const _ccN86;
         const 0;
         const 30;
 },
 sat_scLQC_entry() //  [R1, R2]
         { []
         }
     {offset
       ccN8h: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccN8l; else goto ccN8k;
       ccN8l: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccN8k: // global
           _scLPr::P64 = P64[R1 + 7];
           _scLPv::P64 = P64[R1 + 15];
           _scLPx::P64 = P64[R1 + 23];
           _scLPz::P64 = P64[R1 + 31];
           _scLPB::P64 = P64[R1 + 39];
           I64[Hp - 40] = sat_scLQB_info;
           P64[Hp - 32] = _scLPr::P64;
           P64[Hp - 24] = _scLPv::P64;
           P64[Hp - 16] = _scLPx::P64;
           P64[Hp - 8] = _scLPz::P64;
           P64[Hp] = _scLPB::P64;
           R5 = Hp - 39;
           R4 = n_rcHqf_closure+1;
           R3 = lvl46_rcHqo_closure+2;
           R2 = lvl50_rcHqs_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLQC_info" {
     sat_scLQC_info:
         const sat_scLQC_entry;
         const 5;
         const 1125869842071560;
         const 4294967301;
         const ScMjD_srt+104;
 },
 sat_scLQF_entry() //  [R1, R2]
         { []
         }
     {offset
       ccN8p: // global
           _scLPB::P64 = R2;
           _scLQF::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto ccN8q; else goto ccN8r;
       ccN8r: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccN8t; else goto ccN8s;
       ccN8t: // global
           HpAlloc = 48;
           goto ccN8q;
       ccN8q: // global
           R2 = _scLPB::P64;
           R1 = _scLQF::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccN8s: // global
           _scLPr::P64 = P64[_scLQF::P64 + 7];
           _scLPv::P64 = P64[_scLQF::P64 + 15];
           _scLPx::P64 = P64[_scLQF::P64 + 23];
           _scLPz::P64 = P64[_scLQF::P64 + 31];
           I64[Hp - 40] = sat_scLQC_info;
           P64[Hp - 32] = _scLPr::P64;
           P64[Hp - 24] = _scLPv::P64;
           P64[Hp - 16] = _scLPx::P64;
           P64[Hp - 8] = _scLPz::P64;
           P64[Hp] = _scLPB::P64;
           I64[Sp - 8] = block_ccN8m_info;
           R3 = Hp - 39;
           R2 = lvl40_rcHqi_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLQF_info" {
     sat_scLQF_info:
         const sat_scLQF_entry;
         const 4;
         const 1125869842071560;
         const 4294967301;
         const ScMjD_srt+104;
 },
 _ccN8m() //  [R1]
         { []
         }
     {offset
       ccN8m: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccN8w; else goto ccN8v;
       ccN8w: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccN8v: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccN8m_info" {
     block_ccN8m_info:
         const _ccN8m;
         const 0;
         const 30;
 },
 sat_scLQG_entry() //  [R1, R2]
         { []
         }
     {offset
       ccN8x: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccN8B; else goto ccN8A;
       ccN8B: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccN8A: // global
           _scLPr::P64 = P64[R1 + 7];
           _scLPv::P64 = P64[R1 + 15];
           _scLPx::P64 = P64[R1 + 23];
           _scLPz::P64 = P64[R1 + 31];
           I64[Hp - 32] = sat_scLQF_info;
           P64[Hp - 24] = _scLPr::P64;
           P64[Hp - 16] = _scLPv::P64;
           P64[Hp - 8] = _scLPx::P64;
           P64[Hp] = _scLPz::P64;
           R5 = Hp - 31;
           R4 = n_rcHqf_closure+1;
           R3 = lvl46_rcHqo_closure+2;
           R2 = lvl48_rcHqq_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLQG_info" {
     sat_scLQG_info:
         const sat_scLQG_entry;
         const 4;
         const 2251769748914184;
         const 4294967301;
         const ScMjD_srt+104;
 },
 sat_scLQJ_entry() //  [R1, R2]
         { []
         }
     {offset
       ccN8F: // global
           _scLPz::P64 = R2;
           _scLQJ::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto ccN8G; else goto ccN8H;
       ccN8H: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccN8J; else goto ccN8I;
       ccN8J: // global
           HpAlloc = 40;
           goto ccN8G;
       ccN8G: // global
           R2 = _scLPz::P64;
           R1 = _scLQJ::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccN8I: // global
           _scLPr::P64 = P64[_scLQJ::P64 + 7];
           _scLPv::P64 = P64[_scLQJ::P64 + 15];
           _scLPx::P64 = P64[_scLQJ::P64 + 23];
           I64[Hp - 32] = sat_scLQG_info;
           P64[Hp - 24] = _scLPr::P64;
           P64[Hp - 16] = _scLPv::P64;
           P64[Hp - 8] = _scLPx::P64;
           P64[Hp] = _scLPz::P64;
           I64[Sp - 8] = block_ccN8C_info;
           R3 = Hp - 31;
           R2 = lvl40_rcHqi_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLQJ_info" {
     sat_scLQJ_info:
         const sat_scLQJ_entry;
         const 3;
         const 2251769748914184;
         const 4294967301;
         const ScMjD_srt+104;
 },
 _ccN8C() //  [R1]
         { []
         }
     {offset
       ccN8C: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccN8M; else goto ccN8L;
       ccN8M: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccN8L: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccN8C_info" {
     block_ccN8C_info:
         const _ccN8C;
         const 0;
         const 30;
 },
 sat_scLQK_entry() //  [R1, R2]
         { []
         }
     {offset
       ccN8N: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccN8R; else goto ccN8Q;
       ccN8R: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccN8Q: // global
           _scLPr::P64 = P64[R1 + 7];
           _scLPv::P64 = P64[R1 + 15];
           _scLPx::P64 = P64[R1 + 23];
           I64[Hp - 24] = sat_scLQJ_info;
           P64[Hp - 16] = _scLPr::P64;
           P64[Hp - 8] = _scLPv::P64;
           P64[Hp] = _scLPx::P64;
           R5 = Hp - 23;
           R4 = n_rcHqf_closure+1;
           R3 = lvl46_rcHqo_closure+2;
           R2 = lvl44_rcHqm_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLQK_info" {
     sat_scLQK_info:
         const sat_scLQK_entry;
         const 3;
         const 4503569562599432;
         const 4294967301;
         const ScMjD_srt+104;
 },
 sat_scLQN_entry() //  [R1, R2]
         { []
         }
     {offset
       ccN8V: // global
           _scLPx::P64 = R2;
           _scLQN::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto ccN8W; else goto ccN8X;
       ccN8X: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccN8Z; else goto ccN8Y;
       ccN8Z: // global
           HpAlloc = 32;
           goto ccN8W;
       ccN8W: // global
           R2 = _scLPx::P64;
           R1 = _scLQN::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccN8Y: // global
           _scLPr::P64 = P64[_scLQN::P64 + 7];
           _scLPv::P64 = P64[_scLQN::P64 + 15];
           I64[Hp - 24] = sat_scLQK_info;
           P64[Hp - 16] = _scLPr::P64;
           P64[Hp - 8] = _scLPv::P64;
           P64[Hp] = _scLPx::P64;
           I64[Sp - 8] = block_ccN8S_info;
           R3 = Hp - 23;
           R2 = lvl40_rcHqi_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLQN_info" {
     sat_scLQN_info:
         const sat_scLQN_entry;
         const 2;
         const 4503569562599435;
         const 4294967301;
         const ScMjD_srt+104;
 },
 _ccN8S() //  [R1]
         { []
         }
     {offset
       ccN8S: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccN92; else goto ccN91;
       ccN92: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccN91: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccN8S_info" {
     block_ccN8S_info:
         const _ccN8S;
         const 0;
         const 30;
 },
 sat_scLQO_entry() //  [R1, R2]
         { []
         }
     {offset
       ccN93: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccN97; else goto ccN96;
       ccN97: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccN96: // global
           _scLPr::P64 = P64[R1 + 7];
           _scLPv::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_scLQN_info;
           P64[Hp - 8] = _scLPr::P64;
           P64[Hp] = _scLPv::P64;
           R5 = Hp - 15;
           R4 = n_rcHqf_closure+1;
           R3 = ds2_rcHqe_closure+2;
           R2 = lvl42_rcHqk_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLQO_info" {
     sat_scLQO_info:
         const sat_scLQO_entry;
         const 2;
         const 72057357814726667;
         const 4294967301;
         const ScMjD_srt+80;
 },
 sat_scLQR_entry() //  [R1, R2]
         { []
         }
     {offset
       ccN9b: // global
           _scLPv::P64 = R2;
           _scLQR::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto ccN9c; else goto ccN9d;
       ccN9d: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccN9f; else goto ccN9e;
       ccN9f: // global
           HpAlloc = 24;
           goto ccN9c;
       ccN9c: // global
           R2 = _scLPv::P64;
           R1 = _scLQR::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccN9e: // global
           _scLPr::P64 = P64[_scLQR::P64 + 7];
           I64[Hp - 16] = sat_scLQO_info;
           P64[Hp - 8] = _scLPr::P64;
           P64[Hp] = _scLPv::P64;
           I64[Sp - 8] = block_ccN98_info;
           R3 = Hp - 15;
           R2 = lvl40_rcHqi_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLQR_info" {
     sat_scLQR_info:
         const sat_scLQR_entry;
         const 1;
         const 72057357814726665;
         const 4294967301;
         const ScMjD_srt+80;
 },
 _ccN98() //  [R1]
         { []
         }
     {offset
       ccN98: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccN9i; else goto ccN9h;
       ccN9i: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccN9h: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccN98_info" {
     block_ccN98_info:
         const _ccN98;
         const 0;
         const 30;
 },
 sat_scLQS_entry() //  [R1, R2]
         { []
         }
     {offset
       ccN9j: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccN9n; else goto ccN9m;
       ccN9n: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccN9m: // global
           _scLPr::P64 = P64[R1 + 7];
           I64[Hp - 8] = sat_scLQR_info;
           P64[Hp] = _scLPr::P64;
           R5 = Hp - 7;
           R4 = n_rcHqf_closure+1;
           R3 = ds2_rcHqe_closure+2;
           R2 = ds1_rcHqc_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLQS_info" {
     sat_scLQS_info:
         const sat_scLQS_entry;
         const 1;
         const 144114951852654601;
         const 4294967301;
         const ScMjD_srt+80;
 },
 sat_scLQV_entry() //  [R1, R2]
         { []
         }
     {offset
       ccN9r: // global
           _scLPt::P64 = R2;
           _scLQV::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto ccN9s; else goto ccN9t;
       ccN9t: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccN9v; else goto ccN9u;
       ccN9v: // global
           HpAlloc = 16;
           goto ccN9s;
       ccN9s: // global
           R2 = _scLPt::P64;
           R1 = _scLQV::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccN9u: // global
           _scLPr::P64 = P64[_scLQV::P64 + 7];
           I64[Hp - 8] = sat_scLQS_info;
           P64[Hp] = _scLPr::P64;
           I64[Sp - 8] = block_ccN9o_info;
           R3 = Hp - 7;
           R2 = lexeme4_rcHqa_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLQV_info" {
     sat_scLQV_info:
         const sat_scLQV_entry;
         const 1;
         const 288230139928510473;
         const 4294967301;
         const ScMjD_srt+80;
 },
 _ccN9o() //  [R1]
         { []
         }
     {offset
       ccN9o: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccN9y; else goto ccN9x;
       ccN9y: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccN9x: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccN9o_info" {
     block_ccN9o_info:
         const _ccN9o;
         const 0;
         const 30;
 },
 GHC.Stats.$w$creadPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       ccN9C: // global
           _scLPr::P64 = R3;
           _scLPq::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto ccN9D; else goto ccN9E;
       ccN9E: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccN9G; else goto ccN9F;
       ccN9G: // global
           HpAlloc = 16;
           goto ccN9D;
       ccN9D: // global
           R3 = _scLPr::P64;
           R2 = _scLPq::I64;
           R1 = GHC.Stats.$w$creadPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccN9F: // global
           if (%MO_S_Gt_W64(_scLPq::I64, 11)) goto ccN9A; else goto ccN9B;
       ccN9A: // global
           Hp = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccN9B: // global
           I64[Hp - 8] = sat_scLQV_info;
           P64[Hp] = _scLPr::P64;
           I64[Sp - 8] = block_ccN9H_info;
           R3 = Hp - 7;
           R2 = lexeme1_rcHq7_closure+4;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.$w$creadPrec_info" {
     GHC.Stats.$w$creadPrec_info:
         const GHC.Stats.$w$creadPrec_entry;
         const 0;
         const 1152921268383645710;
         const 8589934605;
         const ScMjD_srt+80;
 },
 _ccN9H() //  [R1]
         { []
         }
     {offset
       ccN9H: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccN9M; else goto ccN9L;
       ccN9M: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccN9L: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccN9H_info" {
     block_ccN9H_info:
         const _ccN9H;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.967466627 UTC

[section ""data" . GHC.Stats.$fReadGCDetails2_closure" {
     GHC.Stats.$fReadGCDetails2_closure:
         const GHC.Stats.$fReadGCDetails2_info;
         const 0;
 },
 GHC.Stats.$fReadGCDetails2_entry() //  [R2, R3]
         { []
         }
     {offset
       ccNdL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccNdM; else goto ccNdN;
       ccNdM: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Stats.$fReadGCDetails2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccNdN: // global
           I64[Sp - 16] = block_ccNdI_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucNdR; else goto ccNdJ;
       ucNdR: // global
           call _ccNdI(R1) args: 0, res: 0, upd: 0;
       ccNdJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.$fReadGCDetails2_info" {
     GHC.Stats.$fReadGCDetails2_info:
         const GHC.Stats.$fReadGCDetails2_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const ScMjD_srt+288;
 },
 _ccNdI() //  [R1]
         { []
         }
     {offset
       ccNdI: // global
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Stats.$w$creadPrec_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccNdI_info" {
     block_ccNdI_info:
         const _ccNdI;
         const 1;
         const 4294967326;
         const ScMjD_srt+288;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.972545156 UTC

[section ""data" . GHC.Stats.$fReadGCDetails1_closure" {
     GHC.Stats.$fReadGCDetails1_closure:
         const GHC.Stats.$fReadGCDetails1_info;
         const 0;
 },
 GHC.Stats.$fReadGCDetails1_entry() //  [R2, R3]
         { []
         }
     {offset
       ccNe6: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Stats.$fReadGCDetails2_closure+2;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.$fReadGCDetails1_info" {
     GHC.Stats.$fReadGCDetails1_info:
         const GHC.Stats.$fReadGCDetails1_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const ScMjD_srt+304;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.976532931 UTC

[section ""data" . GHC.Stats.$fReadGCDetails_$creadsPrec_closure" {
     GHC.Stats.$fReadGCDetails_$creadsPrec_closure:
         const GHC.Stats.$fReadGCDetails_$creadsPrec_info;
         const 0;
 },
 sat_scLR3_entry() //  [R1]
         { []
         }
     {offset
       ccNel: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccNem; else goto ccNen;
       ccNem: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccNen: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = P64[R1 + 16];
           R2 = GHC.Stats.$fReadGCDetails2_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list3_entry(R4, R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLR3_info" {
     sat_scLR3_info:
         const sat_scLR3_entry;
         const 1;
         const 12884901904;
         const ScMjD_srt+304;
 },
 GHC.Stats.$fReadGCDetails_$creadsPrec_entry() //  [R2]
         { []
         }
     {offset
       ccNeo: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccNes; else goto ccNer;
       ccNes: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Stats.$fReadGCDetails_$creadsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNer: // global
           I64[Hp - 16] = sat_scLR3_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.$fReadGCDetails_$creadsPrec_info" {
     GHC.Stats.$fReadGCDetails_$creadsPrec_info:
         const GHC.Stats.$fReadGCDetails_$creadsPrec_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const ScMjD_srt+304;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.983285269 UTC

[section ""data" . GHC.Stats.$fReadGCDetails_$creadListPrec_closure" {
     GHC.Stats.$fReadGCDetails_$creadListPrec_closure:
         const GHC.Stats.$fReadGCDetails_$creadListPrec_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Stats.$fReadGCDetails_$creadListPrec_entry() //  [R1]
         { []
         }
     {offset
       ccNeL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccNeM; else goto ccNeN;
       ccNeM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccNeN: // global
           (_ccNeI::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccNeI::I64 == 0) goto ccNeK; else goto ccNeJ;
       ccNeK: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccNeJ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccNeI::I64;
           R2 = GHC.Stats.$fReadGCDetails1_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Stats.$fReadGCDetails_$creadListPrec_info" {
     GHC.Stats.$fReadGCDetails_$creadListPrec_info:
         const GHC.Stats.$fReadGCDetails_$creadListPrec_entry;
         const 0;
         const 12884901909;
         const ScMjD_srt+328;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.987266942 UTC

[section ""data" . GHC.Stats.$fReadGCDetails3_closure" {
     GHC.Stats.$fReadGCDetails3_closure:
         const GHC.Stats.$fReadGCDetails3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Stats.$fReadGCDetails3_entry() //  [R1]
         { []
         }
     {offset
       ccNf2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccNf3; else goto ccNf4;
       ccNf3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccNf4: // global
           (_ccNeZ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccNeZ::I64 == 0) goto ccNf1; else goto ccNf0;
       ccNf1: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccNf0: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccNeZ::I64;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = GHC.Read.$fRead()7_closure;
           R1 = GHC.Stats.$fReadGCDetails_$creadListPrec_closure;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Stats.$fReadGCDetails3_info" {
     GHC.Stats.$fReadGCDetails3_info:
         const GHC.Stats.$fReadGCDetails3_entry;
         const 0;
         const 4294967317;
         const ScMjD_srt+344;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.991271044 UTC

[section ""data" . GHC.Stats.$fReadGCDetails_$creadList_closure" {
     GHC.Stats.$fReadGCDetails_$creadList_closure:
         const GHC.Stats.$fReadGCDetails_$creadList_info;
         const 0;
 },
 GHC.Stats.$fReadGCDetails_$creadList_entry() //  [R2]
         { []
         }
     {offset
       ccNfi: // global
           R3 = R2;
           R2 = GHC.Stats.$fReadGCDetails3_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.$fReadGCDetails_$creadList_info" {
     GHC.Stats.$fReadGCDetails_$creadList_info:
         const GHC.Stats.$fReadGCDetails_$creadList_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const ScMjD_srt+352;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.994292607 UTC

[section ""data" . GHC.Stats.$fReadGCDetails_closure" {
     GHC.Stats.$fReadGCDetails_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.Stats.$fReadGCDetails_$creadsPrec_closure+1;
         const GHC.Stats.$fReadGCDetails_$creadList_closure+1;
         const GHC.Stats.$fReadGCDetails1_closure+2;
         const GHC.Stats.$fReadGCDetails_$creadListPrec_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.995970233 UTC

[section ""cstring" . GHC.Stats.$tcRTSStats2_bytes" {
     GHC.Stats.$tcRTSStats2_bytes:
         I8[] [82,84,83,83,116,97,116,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:47.998073237 UTC

[section ""data" . lexeme5_rcHqP_closure" {
     lexeme5_rcHqP_closure:
         const lexeme5_rcHqP_info;
         const 0;
         const 0;
         const 0;
 },
 lexeme5_rcHqP_entry() //  [R1]
         { []
         }
     {offset
       ccNfx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccNfy; else goto ccNfz;
       ccNfy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccNfz: // global
           (_ccNfu::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccNfu::I64 == 0) goto ccNfw; else goto ccNfv;
       ccNfw: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccNfv: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccNfu::I64;
           R2 = GHC.Stats.$tcRTSStats2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lexeme5_rcHqP_info" {
     lexeme5_rcHqP_info:
         const lexeme5_rcHqP_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.001653609 UTC

[section ""data" . lexeme6_rcHqQ_closure" {
     lexeme6_rcHqQ_closure:
         const Text.Read.Lex.Ident_con_info;
         const lexeme5_rcHqP_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.003191483 UTC

[section ""cstring" . ds3_rcHqR_bytes" {
     ds3_rcHqR_bytes:
         I8[] [103,99,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.005220252 UTC

[section ""data" . ds4_rcHqS_closure" {
     ds4_rcHqS_closure:
         const ds4_rcHqS_info;
         const 0;
         const 0;
         const 0;
 },
 ds4_rcHqS_entry() //  [R1]
         { []
         }
     {offset
       ccNfQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccNfR; else goto ccNfS;
       ccNfR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccNfS: // global
           (_ccNfN::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccNfN::I64 == 0) goto ccNfP; else goto ccNfO;
       ccNfP: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccNfO: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccNfN::I64;
           R2 = ds3_rcHqR_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds4_rcHqS_info" {
     ds4_rcHqS_info:
         const ds4_rcHqS_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.00920522 UTC

[section ""cstring" . lvl73_rcHqT_bytes" {
     lvl73_rcHqT_bytes:
         I8[] [109,97,106,111,114,95,103,99,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.011383166 UTC

[section ""data" . lvl74_rcHqU_closure" {
     lvl74_rcHqU_closure:
         const lvl74_rcHqU_info;
         const 0;
         const 0;
         const 0;
 },
 lvl74_rcHqU_entry() //  [R1]
         { []
         }
     {offset
       ccNg8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccNg9; else goto ccNga;
       ccNg9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccNga: // global
           (_ccNg5::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccNg5::I64 == 0) goto ccNg7; else goto ccNg6;
       ccNg7: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccNg6: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccNg5::I64;
           R2 = lvl73_rcHqT_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl74_rcHqU_info" {
     lvl74_rcHqU_info:
         const lvl74_rcHqU_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.014764109 UTC

[section ""cstring" . lvl75_rcHqV_bytes" {
     lvl75_rcHqV_bytes:
         I8[] [97,108,108,111,99,97,116,101,100,95,98,121,116,101,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.016826693 UTC

[section ""data" . lvl76_rcHqW_closure" {
     lvl76_rcHqW_closure:
         const lvl76_rcHqW_info;
         const 0;
         const 0;
         const 0;
 },
 lvl76_rcHqW_entry() //  [R1]
         { []
         }
     {offset
       ccNgq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccNgr; else goto ccNgs;
       ccNgr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccNgs: // global
           (_ccNgn::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccNgn::I64 == 0) goto ccNgp; else goto ccNgo;
       ccNgp: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccNgo: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccNgn::I64;
           R2 = lvl75_rcHqV_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl76_rcHqW_info" {
     lvl76_rcHqW_info:
         const lvl76_rcHqW_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.02043973 UTC

[section ""cstring" . lvl77_rcHqX_bytes" {
     lvl77_rcHqX_bytes:
         I8[] [109,97,120,95,108,105,118,101,95,98,121,116,101,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.022614417 UTC

[section ""data" . lvl78_rcHqY_closure" {
     lvl78_rcHqY_closure:
         const lvl78_rcHqY_info;
         const 0;
         const 0;
         const 0;
 },
 lvl78_rcHqY_entry() //  [R1]
         { []
         }
     {offset
       ccNgI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccNgJ; else goto ccNgK;
       ccNgJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccNgK: // global
           (_ccNgF::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccNgF::I64 == 0) goto ccNgH; else goto ccNgG;
       ccNgH: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccNgG: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccNgF::I64;
           R2 = lvl77_rcHqX_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl78_rcHqY_info" {
     lvl78_rcHqY_info:
         const lvl78_rcHqY_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.025933673 UTC

[section ""cstring" . lvl79_rcHqZ_bytes" {
     lvl79_rcHqZ_bytes:
         I8[] [109,97,120,95,108,97,114,103,101,95,111,98,106,101,99,116,115,95,98,121,116,101,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.028038247 UTC

[section ""data" . lvl80_rcHr0_closure" {
     lvl80_rcHr0_closure:
         const lvl80_rcHr0_info;
         const 0;
         const 0;
         const 0;
 },
 lvl80_rcHr0_entry() //  [R1]
         { []
         }
     {offset
       ccNh0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccNh1; else goto ccNh2;
       ccNh1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccNh2: // global
           (_ccNgX::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccNgX::I64 == 0) goto ccNgZ; else goto ccNgY;
       ccNgZ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccNgY: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccNgX::I64;
           R2 = lvl79_rcHqZ_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl80_rcHr0_info" {
     lvl80_rcHr0_info:
         const lvl80_rcHr0_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.031448942 UTC

[section ""cstring" . lvl81_rcHr1_bytes" {
     lvl81_rcHr1_bytes:
         I8[] [109,97,120,95,99,111,109,112,97,99,116,95,98,121,116,101,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.033607055 UTC

[section ""data" . lvl82_rcHr2_closure" {
     lvl82_rcHr2_closure:
         const lvl82_rcHr2_info;
         const 0;
         const 0;
         const 0;
 },
 lvl82_rcHr2_entry() //  [R1]
         { []
         }
     {offset
       ccNhi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccNhj; else goto ccNhk;
       ccNhj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccNhk: // global
           (_ccNhf::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccNhf::I64 == 0) goto ccNhh; else goto ccNhg;
       ccNhh: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccNhg: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccNhf::I64;
           R2 = lvl81_rcHr1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl82_rcHr2_info" {
     lvl82_rcHr2_info:
         const lvl82_rcHr2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.03690996 UTC

[section ""cstring" . lvl83_rcHr3_bytes" {
     lvl83_rcHr3_bytes:
         I8[] [109,97,120,95,115,108,111,112,95,98,121,116,101,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.039650953 UTC

[section ""data" . lvl84_rcHr4_closure" {
     lvl84_rcHr4_closure:
         const lvl84_rcHr4_info;
         const 0;
         const 0;
         const 0;
 },
 lvl84_rcHr4_entry() //  [R1]
         { []
         }
     {offset
       ccNhA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccNhB; else goto ccNhC;
       ccNhB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccNhC: // global
           (_ccNhx::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccNhx::I64 == 0) goto ccNhz; else goto ccNhy;
       ccNhz: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccNhy: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccNhx::I64;
           R2 = lvl83_rcHr3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl84_rcHr4_info" {
     lvl84_rcHr4_info:
         const lvl84_rcHr4_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.043037395 UTC

[section ""cstring" . lvl85_rcHr5_bytes" {
     lvl85_rcHr5_bytes:
         I8[] [109,97,120,95,109,101,109,95,105,110,95,117,115,101,95,98,121,116,101,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.045113088 UTC

[section ""data" . lvl86_rcHr6_closure" {
     lvl86_rcHr6_closure:
         const lvl86_rcHr6_info;
         const 0;
         const 0;
         const 0;
 },
 lvl86_rcHr6_entry() //  [R1]
         { []
         }
     {offset
       ccNhS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccNhT; else goto ccNhU;
       ccNhT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccNhU: // global
           (_ccNhP::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccNhP::I64 == 0) goto ccNhR; else goto ccNhQ;
       ccNhR: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccNhQ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccNhP::I64;
           R2 = lvl85_rcHr5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl86_rcHr6_info" {
     lvl86_rcHr6_info:
         const lvl86_rcHr6_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.049010953 UTC

[section ""cstring" . lvl87_rcHr7_bytes" {
     lvl87_rcHr7_bytes:
         I8[] [99,117,109,117,108,97,116,105,118,101,95,108,105,118,101,95,98,121,116,101,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.051155768 UTC

[section ""data" . lvl88_rcHr8_closure" {
     lvl88_rcHr8_closure:
         const lvl88_rcHr8_info;
         const 0;
         const 0;
         const 0;
 },
 lvl88_rcHr8_entry() //  [R1]
         { []
         }
     {offset
       ccNia: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccNib; else goto ccNic;
       ccNib: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccNic: // global
           (_ccNi7::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccNi7::I64 == 0) goto ccNi9; else goto ccNi8;
       ccNi9: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccNi8: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccNi7::I64;
           R2 = lvl87_rcHr7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl88_rcHr8_info" {
     lvl88_rcHr8_info:
         const lvl88_rcHr8_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.054685628 UTC

[section ""cstring" . lvl89_rcHr9_bytes" {
     lvl89_rcHr9_bytes:
         I8[] [99,111,112,105,101,100,95,98,121,116,101,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.056782582 UTC

[section ""data" . lvl90_rcHra_closure" {
     lvl90_rcHra_closure:
         const lvl90_rcHra_info;
         const 0;
         const 0;
         const 0;
 },
 lvl90_rcHra_entry() //  [R1]
         { []
         }
     {offset
       ccNis: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccNit; else goto ccNiu;
       ccNit: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccNiu: // global
           (_ccNip::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccNip::I64 == 0) goto ccNir; else goto ccNiq;
       ccNir: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccNiq: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccNip::I64;
           R2 = lvl89_rcHr9_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl90_rcHra_info" {
     lvl90_rcHra_info:
         const lvl90_rcHra_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.060401258 UTC

[section ""cstring" . lvl91_rcHrb_bytes" {
     lvl91_rcHrb_bytes:
         I8[] [112,97,114,95,99,111,112,105,101,100,95,98,121,116,101,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.062568869 UTC

[section ""data" . lvl92_rcHrc_closure" {
     lvl92_rcHrc_closure:
         const lvl92_rcHrc_info;
         const 0;
         const 0;
         const 0;
 },
 lvl92_rcHrc_entry() //  [R1]
         { []
         }
     {offset
       ccNiK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccNiL; else goto ccNiM;
       ccNiL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccNiM: // global
           (_ccNiH::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccNiH::I64 == 0) goto ccNiJ; else goto ccNiI;
       ccNiJ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccNiI: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccNiH::I64;
           R2 = lvl91_rcHrb_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl92_rcHrc_info" {
     lvl92_rcHrc_info:
         const lvl92_rcHrc_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.06597887 UTC

[section ""cstring" . lvl93_rcHrd_bytes" {
     lvl93_rcHrd_bytes:
         I8[] [99,117,109,117,108,97,116,105,118,101,95,112,97,114,95,109,97,120,95,99,111,112,105,101,100,95,98,121,116,101,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.068080935 UTC

[section ""data" . lvl94_rcHre_closure" {
     lvl94_rcHre_closure:
         const lvl94_rcHre_info;
         const 0;
         const 0;
         const 0;
 },
 lvl94_rcHre_entry() //  [R1]
         { []
         }
     {offset
       ccNj2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccNj3; else goto ccNj4;
       ccNj3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccNj4: // global
           (_ccNiZ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccNiZ::I64 == 0) goto ccNj1; else goto ccNj0;
       ccNj1: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccNj0: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccNiZ::I64;
           R2 = lvl93_rcHrd_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl94_rcHre_info" {
     lvl94_rcHre_info:
         const lvl94_rcHre_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.072650695 UTC

[section ""cstring" . lvl95_rcHrf_bytes" {
     lvl95_rcHrf_bytes:
         I8[] [99,117,109,117,108,97,116,105,118,101,95,112,97,114,95,98,97,108,97,110,99,101,100,95,99,111,112,105,101,100,95,98,121,116,101,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.074845906 UTC

[section ""data" . lvl96_rcHrg_closure" {
     lvl96_rcHrg_closure:
         const lvl96_rcHrg_info;
         const 0;
         const 0;
         const 0;
 },
 lvl96_rcHrg_entry() //  [R1]
         { []
         }
     {offset
       ccNjk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccNjl; else goto ccNjm;
       ccNjl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccNjm: // global
           (_ccNjh::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccNjh::I64 == 0) goto ccNjj; else goto ccNji;
       ccNjj: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccNji: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccNjh::I64;
           R2 = lvl95_rcHrf_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl96_rcHrg_info" {
     lvl96_rcHrg_info:
         const lvl96_rcHrg_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.078280649 UTC

[section ""cstring" . lvl97_rcHrh_bytes" {
     lvl97_rcHrh_bytes:
         I8[] [109,117,116,97,116,111,114,95,99,112,117,95,110,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.080397218 UTC

[section ""data" . lvl98_rcHri_closure" {
     lvl98_rcHri_closure:
         const lvl98_rcHri_info;
         const 0;
         const 0;
         const 0;
 },
 lvl98_rcHri_entry() //  [R1]
         { []
         }
     {offset
       ccNjC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccNjD; else goto ccNjE;
       ccNjD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccNjE: // global
           (_ccNjz::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccNjz::I64 == 0) goto ccNjB; else goto ccNjA;
       ccNjB: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccNjA: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccNjz::I64;
           R2 = lvl97_rcHrh_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl98_rcHri_info" {
     lvl98_rcHri_info:
         const lvl98_rcHri_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.083870249 UTC

[section ""cstring" . lvl99_rcHrj_bytes" {
     lvl99_rcHrj_bytes:
         I8[] [109,117,116,97,116,111,114,95,101,108,97,112,115,101,100,95,110,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.08608775 UTC

[section ""data" . lvl100_rcHrk_closure" {
     lvl100_rcHrk_closure:
         const lvl100_rcHrk_info;
         const 0;
         const 0;
         const 0;
 },
 lvl100_rcHrk_entry() //  [R1]
         { []
         }
     {offset
       ccNjU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccNjV; else goto ccNjW;
       ccNjV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccNjW: // global
           (_ccNjR::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccNjR::I64 == 0) goto ccNjT; else goto ccNjS;
       ccNjT: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccNjS: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccNjR::I64;
           R2 = lvl99_rcHrj_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl100_rcHrk_info" {
     lvl100_rcHrk_info:
         const lvl100_rcHrk_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.089418767 UTC

[section ""cstring" . lvl101_rcHrl_bytes" {
     lvl101_rcHrl_bytes:
         I8[] [103,99,95,99,112,117,95,110,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.091527406 UTC

[section ""data" . lvl102_rcHrm_closure" {
     lvl102_rcHrm_closure:
         const lvl102_rcHrm_info;
         const 0;
         const 0;
         const 0;
 },
 lvl102_rcHrm_entry() //  [R1]
         { []
         }
     {offset
       ccNkc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccNkd; else goto ccNke;
       ccNkd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccNke: // global
           (_ccNk9::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccNk9::I64 == 0) goto ccNkb; else goto ccNka;
       ccNkb: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccNka: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccNk9::I64;
           R2 = lvl101_rcHrl_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl102_rcHrm_info" {
     lvl102_rcHrm_info:
         const lvl102_rcHrm_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.095300654 UTC

[section ""cstring" . lvl103_rcHrn_bytes" {
     lvl103_rcHrn_bytes:
         I8[] [103,99,95,101,108,97,112,115,101,100,95,110,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.097501846 UTC

[section ""data" . lvl104_rcHro_closure" {
     lvl104_rcHro_closure:
         const lvl104_rcHro_info;
         const 0;
         const 0;
         const 0;
 },
 lvl104_rcHro_entry() //  [R1]
         { []
         }
     {offset
       ccNku: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccNkv; else goto ccNkw;
       ccNkv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccNkw: // global
           (_ccNkr::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccNkr::I64 == 0) goto ccNkt; else goto ccNks;
       ccNkt: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccNks: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccNkr::I64;
           R2 = lvl103_rcHrn_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl104_rcHro_info" {
     lvl104_rcHro_info:
         const lvl104_rcHro_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.101377012 UTC

[section ""cstring" . lvl105_rcHrp_bytes" {
     lvl105_rcHrp_bytes:
         I8[] [99,112,117,95,110,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.103587042 UTC

[section ""data" . lvl106_rcHrq_closure" {
     lvl106_rcHrq_closure:
         const lvl106_rcHrq_info;
         const 0;
         const 0;
         const 0;
 },
 lvl106_rcHrq_entry() //  [R1]
         { []
         }
     {offset
       ccNkM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccNkN; else goto ccNkO;
       ccNkN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccNkO: // global
           (_ccNkJ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccNkJ::I64 == 0) goto ccNkL; else goto ccNkK;
       ccNkL: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccNkK: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccNkJ::I64;
           R2 = lvl105_rcHrp_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl106_rcHrq_info" {
     lvl106_rcHrq_info:
         const lvl106_rcHrq_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.10705294 UTC

[section ""cstring" . lvl107_rcHrr_bytes" {
     lvl107_rcHrr_bytes:
         I8[] [101,108,97,112,115,101,100,95,110,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.10912236 UTC

[section ""data" . lvl108_rcHrs_closure" {
     lvl108_rcHrs_closure:
         const lvl108_rcHrs_info;
         const 0;
         const 0;
         const 0;
 },
 lvl108_rcHrs_entry() //  [R1]
         { []
         }
     {offset
       ccNl4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccNl5; else goto ccNl6;
       ccNl5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccNl6: // global
           (_ccNl1::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccNl1::I64 == 0) goto ccNl3; else goto ccNl2;
       ccNl3: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccNl2: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccNl1::I64;
           R2 = lvl107_rcHrr_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl108_rcHrs_info" {
     lvl108_rcHrs_info:
         const lvl108_rcHrs_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.112872627 UTC

[section ""cstring" . lvl109_rcHrt_bytes" {
     lvl109_rcHrt_bytes:
         I8[] [103,99]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.115073197 UTC

[section ""data" . lvl110_rcHru_closure" {
     lvl110_rcHru_closure:
         const lvl110_rcHru_info;
         const 0;
         const 0;
         const 0;
 },
 lvl110_rcHru_entry() //  [R1]
         { []
         }
     {offset
       ccNlm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccNln; else goto ccNlo;
       ccNln: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccNlo: // global
           (_ccNlj::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccNlj::I64 == 0) goto ccNll; else goto ccNlk;
       ccNll: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccNlk: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccNlj::I64;
           R2 = lvl109_rcHrt_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl110_rcHru_info" {
     lvl110_rcHru_info:
         const lvl110_rcHru_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.118873797 UTC

[section ""data" . lvl111_rcHrv_closure" {
     lvl111_rcHrv_closure:
         const lvl111_rcHrv_info;
         const 0;
 },
 lvl111_rcHrv_entry() //  [R3]
         { []
         }
     {offset
       ccNlB: // global
           R4 = R3;
           R3 = Text.ParserCombinators.ReadPrec.minPrec_closure;
           R2 = GHC.Stats.$fReadGCDetails2_closure+2;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl111_rcHrv_info" {
     lvl111_rcHrv_info:
         const lvl111_rcHrv_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const ScMjD_srt+304;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.164147028 UTC

[section ""data" . GHC.Stats.$w$creadPrec1_closure" {
     GHC.Stats.$w$creadPrec1_closure:
         const GHC.Stats.$w$creadPrec1_info;
         const 0;
 },
 sat_scLRQ_entry() //  [R1, R2]
         { []
         }
     {offset
       ccNpf: // global
           Hp = Hp + 168;
           if (Hp > HpLim) (likely: False) goto ccNpj; else goto ccNpi;
       ccNpj: // global
           HpAlloc = 168;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNpi: // global
           _scLR7::P64 = P64[R1 + 7];
           _scLRb::P64 = P64[R1 + 15];
           _scLRd::P64 = P64[R1 + 23];
           _scLRf::P64 = P64[R1 + 31];
           _scLRh::P64 = P64[R1 + 39];
           _scLRj::P64 = P64[R1 + 47];
           _scLRl::P64 = P64[R1 + 55];
           _scLRn::P64 = P64[R1 + 63];
           _scLRp::P64 = P64[R1 + 71];
           _scLRr::P64 = P64[R1 + 79];
           _scLRt::P64 = P64[R1 + 87];
           _scLRv::P64 = P64[R1 + 95];
           _scLRx::P64 = P64[R1 + 103];
           _scLRz::P64 = P64[R1 + 111];
           _scLRB::P64 = P64[R1 + 119];
           _scLRD::P64 = P64[R1 + 127];
           _scLRF::P64 = P64[R1 + 135];
           _scLRH::P64 = P64[R1 + 143];
           _scLRJ::P64 = P64[R1 + 151];
           _scLRL::P64 = P64[R1 + 159];
           _scLRN::P64 = P64[R1 + 167];
           I64[Hp - 160] = GHC.Stats.RTSStats_con_info;
           P64[Hp - 152] = _scLRb::P64;
           P64[Hp - 144] = _scLRd::P64;
           P64[Hp - 136] = _scLRf::P64;
           P64[Hp - 128] = _scLRh::P64;
           P64[Hp - 120] = _scLRj::P64;
           P64[Hp - 112] = _scLRl::P64;
           P64[Hp - 104] = _scLRn::P64;
           P64[Hp - 96] = _scLRp::P64;
           P64[Hp - 88] = _scLRr::P64;
           P64[Hp - 80] = _scLRt::P64;
           P64[Hp - 72] = _scLRv::P64;
           P64[Hp - 64] = _scLRx::P64;
           P64[Hp - 56] = _scLRz::P64;
           P64[Hp - 48] = _scLRB::P64;
           P64[Hp - 40] = _scLRD::P64;
           P64[Hp - 32] = _scLRF::P64;
           P64[Hp - 24] = _scLRH::P64;
           P64[Hp - 16] = _scLRJ::P64;
           P64[Hp - 8] = _scLRL::P64;
           P64[Hp] = _scLRN::P64;
           R2 = Hp - 159;
           R1 = _scLR7::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLRQ_info" {
     sat_scLRQ_info:
         const sat_scLRQ_entry;
         const 21;
         const 8;
         const 4294967301;
 },
 sat_scLRT_entry() //  [R1, R2]
         { []
         }
     {offset
       ccNpn: // global
           _scLRN::P64 = R2;
           _scLRT::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto ccNpo; else goto ccNpp;
       ccNpp: // global
           Hp = Hp + 176;
           if (Hp > HpLim) (likely: False) goto ccNpr; else goto ccNpq;
       ccNpr: // global
           HpAlloc = 176;
           goto ccNpo;
       ccNpo: // global
           R2 = _scLRN::P64;
           R1 = _scLRT::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNpq: // global
           _scLR7::P64 = P64[_scLRT::P64 + 7];
           _scLRb::P64 = P64[_scLRT::P64 + 15];
           _scLRd::P64 = P64[_scLRT::P64 + 23];
           _scLRf::P64 = P64[_scLRT::P64 + 31];
           _scLRh::P64 = P64[_scLRT::P64 + 39];
           _scLRj::P64 = P64[_scLRT::P64 + 47];
           _scLRl::P64 = P64[_scLRT::P64 + 55];
           _scLRn::P64 = P64[_scLRT::P64 + 63];
           _scLRp::P64 = P64[_scLRT::P64 + 71];
           _scLRr::P64 = P64[_scLRT::P64 + 79];
           _scLRt::P64 = P64[_scLRT::P64 + 87];
           _scLRv::P64 = P64[_scLRT::P64 + 95];
           _scLRx::P64 = P64[_scLRT::P64 + 103];
           _scLRz::P64 = P64[_scLRT::P64 + 111];
           _scLRB::P64 = P64[_scLRT::P64 + 119];
           _scLRD::P64 = P64[_scLRT::P64 + 127];
           _scLRF::P64 = P64[_scLRT::P64 + 135];
           _scLRH::P64 = P64[_scLRT::P64 + 143];
           _scLRJ::P64 = P64[_scLRT::P64 + 151];
           _scLRL::P64 = P64[_scLRT::P64 + 159];
           I64[Hp - 168] = sat_scLRQ_info;
           P64[Hp - 160] = _scLR7::P64;
           P64[Hp - 152] = _scLRb::P64;
           P64[Hp - 144] = _scLRd::P64;
           P64[Hp - 136] = _scLRf::P64;
           P64[Hp - 128] = _scLRh::P64;
           P64[Hp - 120] = _scLRj::P64;
           P64[Hp - 112] = _scLRl::P64;
           P64[Hp - 104] = _scLRn::P64;
           P64[Hp - 96] = _scLRp::P64;
           P64[Hp - 88] = _scLRr::P64;
           P64[Hp - 80] = _scLRt::P64;
           P64[Hp - 72] = _scLRv::P64;
           P64[Hp - 64] = _scLRx::P64;
           P64[Hp - 56] = _scLRz::P64;
           P64[Hp - 48] = _scLRB::P64;
           P64[Hp - 40] = _scLRD::P64;
           P64[Hp - 32] = _scLRF::P64;
           P64[Hp - 24] = _scLRH::P64;
           P64[Hp - 16] = _scLRJ::P64;
           P64[Hp - 8] = _scLRL::P64;
           P64[Hp] = _scLRN::P64;
           I64[Sp - 8] = block_ccNpk_info;
           R3 = Hp - 167;
           R2 = lvl72_rcHqO_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLRT_info" {
     sat_scLRT_info:
         const sat_scLRT_entry;
         const 20;
         const 12884901896;
         const 4294967301;
         const ScMjD_srt+136;
 },
 _ccNpk() //  [R1]
         { []
         }
     {offset
       ccNpk: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccNpu; else goto ccNpt;
       ccNpu: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccNpt: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccNpk_info" {
     block_ccNpk_info:
         const _ccNpk;
         const 0;
         const 30;
 },
 sat_scLRU_entry() //  [R1, R2]
         { []
         }
     {offset
       ccNpv: // global
           Hp = Hp + 168;
           if (Hp > HpLim) (likely: False) goto ccNpz; else goto ccNpy;
       ccNpz: // global
           HpAlloc = 168;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNpy: // global
           _scLR7::P64 = P64[R1 + 7];
           _scLRb::P64 = P64[R1 + 15];
           _scLRd::P64 = P64[R1 + 23];
           _scLRf::P64 = P64[R1 + 31];
           _scLRh::P64 = P64[R1 + 39];
           _scLRj::P64 = P64[R1 + 47];
           _scLRl::P64 = P64[R1 + 55];
           _scLRn::P64 = P64[R1 + 63];
           _scLRp::P64 = P64[R1 + 71];
           _scLRr::P64 = P64[R1 + 79];
           _scLRt::P64 = P64[R1 + 87];
           _scLRv::P64 = P64[R1 + 95];
           _scLRx::P64 = P64[R1 + 103];
           _scLRz::P64 = P64[R1 + 111];
           _scLRB::P64 = P64[R1 + 119];
           _scLRD::P64 = P64[R1 + 127];
           _scLRF::P64 = P64[R1 + 135];
           _scLRH::P64 = P64[R1 + 143];
           _scLRJ::P64 = P64[R1 + 151];
           _scLRL::P64 = P64[R1 + 159];
           I64[Hp - 160] = sat_scLRT_info;
           P64[Hp - 152] = _scLR7::P64;
           P64[Hp - 144] = _scLRb::P64;
           P64[Hp - 136] = _scLRd::P64;
           P64[Hp - 128] = _scLRf::P64;
           P64[Hp - 120] = _scLRh::P64;
           P64[Hp - 112] = _scLRj::P64;
           P64[Hp - 104] = _scLRl::P64;
           P64[Hp - 96] = _scLRn::P64;
           P64[Hp - 88] = _scLRp::P64;
           P64[Hp - 80] = _scLRr::P64;
           P64[Hp - 72] = _scLRt::P64;
           P64[Hp - 64] = _scLRv::P64;
           P64[Hp - 56] = _scLRx::P64;
           P64[Hp - 48] = _scLRz::P64;
           P64[Hp - 40] = _scLRB::P64;
           P64[Hp - 32] = _scLRD::P64;
           P64[Hp - 24] = _scLRF::P64;
           P64[Hp - 16] = _scLRH::P64;
           P64[Hp - 8] = _scLRJ::P64;
           P64[Hp] = _scLRL::P64;
           R5 = Hp - 159;
           R4 = n_rcHqf_closure+1;
           R3 = lvl111_rcHrv_closure+2;
           R2 = lvl110_rcHru_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLRU_info" {
     sat_scLRU_info:
         const sat_scLRU_entry;
         const 20;
         const 3458764543885312008;
         const 4294967301;
         const ScMjD_srt+136;
 },
 sat_scLRX_entry() //  [R1, R2]
         { []
         }
     {offset
       ccNpD: // global
           _scLRL::P64 = R2;
           _scLRX::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto ccNpE; else goto ccNpF;
       ccNpF: // global
           Hp = Hp + 168;
           if (Hp > HpLim) (likely: False) goto ccNpH; else goto ccNpG;
       ccNpH: // global
           HpAlloc = 168;
           goto ccNpE;
       ccNpE: // global
           R2 = _scLRL::P64;
           R1 = _scLRX::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNpG: // global
           _scLR7::P64 = P64[_scLRX::P64 + 7];
           _scLRb::P64 = P64[_scLRX::P64 + 15];
           _scLRd::P64 = P64[_scLRX::P64 + 23];
           _scLRf::P64 = P64[_scLRX::P64 + 31];
           _scLRh::P64 = P64[_scLRX::P64 + 39];
           _scLRj::P64 = P64[_scLRX::P64 + 47];
           _scLRl::P64 = P64[_scLRX::P64 + 55];
           _scLRn::P64 = P64[_scLRX::P64 + 63];
           _scLRp::P64 = P64[_scLRX::P64 + 71];
           _scLRr::P64 = P64[_scLRX::P64 + 79];
           _scLRt::P64 = P64[_scLRX::P64 + 87];
           _scLRv::P64 = P64[_scLRX::P64 + 95];
           _scLRx::P64 = P64[_scLRX::P64 + 103];
           _scLRz::P64 = P64[_scLRX::P64 + 111];
           _scLRB::P64 = P64[_scLRX::P64 + 119];
           _scLRD::P64 = P64[_scLRX::P64 + 127];
           _scLRF::P64 = P64[_scLRX::P64 + 135];
           _scLRH::P64 = P64[_scLRX::P64 + 143];
           _scLRJ::P64 = P64[_scLRX::P64 + 151];
           I64[Hp - 160] = sat_scLRU_info;
           P64[Hp - 152] = _scLR7::P64;
           P64[Hp - 144] = _scLRb::P64;
           P64[Hp - 136] = _scLRd::P64;
           P64[Hp - 128] = _scLRf::P64;
           P64[Hp - 120] = _scLRh::P64;
           P64[Hp - 112] = _scLRj::P64;
           P64[Hp - 104] = _scLRl::P64;
           P64[Hp - 96] = _scLRn::P64;
           P64[Hp - 88] = _scLRp::P64;
           P64[Hp - 80] = _scLRr::P64;
           P64[Hp - 72] = _scLRt::P64;
           P64[Hp - 64] = _scLRv::P64;
           P64[Hp - 56] = _scLRx::P64;
           P64[Hp - 48] = _scLRz::P64;
           P64[Hp - 40] = _scLRB::P64;
           P64[Hp - 32] = _scLRD::P64;
           P64[Hp - 24] = _scLRF::P64;
           P64[Hp - 16] = _scLRH::P64;
           P64[Hp - 8] = _scLRJ::P64;
           P64[Hp] = _scLRL::P64;
           I64[Sp - 8] = block_ccNpA_info;
           R3 = Hp - 159;
           R2 = lvl40_rcHqi_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLRX_info" {
     sat_scLRX_info:
         const sat_scLRX_entry;
         const 19;
         const 3458764612604788744;
         const 4294967301;
         const ScMjD_srt+136;
 },
 _ccNpA() //  [R1]
         { []
         }
     {offset
       ccNpA: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccNpK; else goto ccNpJ;
       ccNpK: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccNpJ: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccNpA_info" {
     block_ccNpA_info:
         const _ccNpA;
         const 0;
         const 30;
 },
 sat_scLRY_entry() //  [R1, R2]
         { []
         }
     {offset
       ccNpL: // global
           Hp = Hp + 160;
           if (Hp > HpLim) (likely: False) goto ccNpP; else goto ccNpO;
       ccNpP: // global
           HpAlloc = 160;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNpO: // global
           _scLR7::P64 = P64[R1 + 7];
           _scLRb::P64 = P64[R1 + 15];
           _scLRd::P64 = P64[R1 + 23];
           _scLRf::P64 = P64[R1 + 31];
           _scLRh::P64 = P64[R1 + 39];
           _scLRj::P64 = P64[R1 + 47];
           _scLRl::P64 = P64[R1 + 55];
           _scLRn::P64 = P64[R1 + 63];
           _scLRp::P64 = P64[R1 + 71];
           _scLRr::P64 = P64[R1 + 79];
           _scLRt::P64 = P64[R1 + 87];
           _scLRv::P64 = P64[R1 + 95];
           _scLRx::P64 = P64[R1 + 103];
           _scLRz::P64 = P64[R1 + 111];
           _scLRB::P64 = P64[R1 + 119];
           _scLRD::P64 = P64[R1 + 127];
           _scLRF::P64 = P64[R1 + 135];
           _scLRH::P64 = P64[R1 + 143];
           _scLRJ::P64 = P64[R1 + 151];
           I64[Hp - 152] = sat_scLRX_info;
           P64[Hp - 144] = _scLR7::P64;
           P64[Hp - 136] = _scLRb::P64;
           P64[Hp - 128] = _scLRd::P64;
           P64[Hp - 120] = _scLRf::P64;
           P64[Hp - 112] = _scLRh::P64;
           P64[Hp - 104] = _scLRj::P64;
           P64[Hp - 96] = _scLRl::P64;
           P64[Hp - 88] = _scLRn::P64;
           P64[Hp - 80] = _scLRp::P64;
           P64[Hp - 72] = _scLRr::P64;
           P64[Hp - 64] = _scLRt::P64;
           P64[Hp - 56] = _scLRv::P64;
           P64[Hp - 48] = _scLRx::P64;
           P64[Hp - 40] = _scLRz::P64;
           P64[Hp - 32] = _scLRB::P64;
           P64[Hp - 24] = _scLRD::P64;
           P64[Hp - 16] = _scLRF::P64;
           P64[Hp - 8] = _scLRH::P64;
           P64[Hp] = _scLRJ::P64;
           R5 = Hp - 151;
           R4 = n_rcHqf_closure+1;
           R3 = lvl66_rcHqI_closure+2;
           R2 = lvl108_rcHrs_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLRY_info" {
     sat_scLRY_info:
         const sat_scLRY_entry;
         const 19;
         const 16140901266359320584;
         const 4294967301;
         const ScMjD_srt+128;
 },
 sat_scLS1_entry() //  [R1, R2]
         { []
         }
     {offset
       ccNpT: // global
           _scLRJ::P64 = R2;
           _scLS1::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto ccNpU; else goto ccNpV;
       ccNpV: // global
           Hp = Hp + 160;
           if (Hp > HpLim) (likely: False) goto ccNpX; else goto ccNpW;
       ccNpX: // global
           HpAlloc = 160;
           goto ccNpU;
       ccNpU: // global
           R2 = _scLRJ::P64;
           R1 = _scLS1::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNpW: // global
           _scLR7::P64 = P64[_scLS1::P64 + 7];
           _scLRb::P64 = P64[_scLS1::P64 + 15];
           _scLRd::P64 = P64[_scLS1::P64 + 23];
           _scLRf::P64 = P64[_scLS1::P64 + 31];
           _scLRh::P64 = P64[_scLS1::P64 + 39];
           _scLRj::P64 = P64[_scLS1::P64 + 47];
           _scLRl::P64 = P64[_scLS1::P64 + 55];
           _scLRn::P64 = P64[_scLS1::P64 + 63];
           _scLRp::P64 = P64[_scLS1::P64 + 71];
           _scLRr::P64 = P64[_scLS1::P64 + 79];
           _scLRt::P64 = P64[_scLS1::P64 + 87];
           _scLRv::P64 = P64[_scLS1::P64 + 95];
           _scLRx::P64 = P64[_scLS1::P64 + 103];
           _scLRz::P64 = P64[_scLS1::P64 + 111];
           _scLRB::P64 = P64[_scLS1::P64 + 119];
           _scLRD::P64 = P64[_scLS1::P64 + 127];
           _scLRF::P64 = P64[_scLS1::P64 + 135];
           _scLRH::P64 = P64[_scLS1::P64 + 143];
           I64[Hp - 152] = sat_scLRY_info;
           P64[Hp - 144] = _scLR7::P64;
           P64[Hp - 136] = _scLRb::P64;
           P64[Hp - 128] = _scLRd::P64;
           P64[Hp - 120] = _scLRf::P64;
           P64[Hp - 112] = _scLRh::P64;
           P64[Hp - 104] = _scLRj::P64;
           P64[Hp - 96] = _scLRl::P64;
           P64[Hp - 88] = _scLRn::P64;
           P64[Hp - 80] = _scLRp::P64;
           P64[Hp - 72] = _scLRr::P64;
           P64[Hp - 64] = _scLRt::P64;
           P64[Hp - 56] = _scLRv::P64;
           P64[Hp - 48] = _scLRx::P64;
           P64[Hp - 40] = _scLRz::P64;
           P64[Hp - 32] = _scLRB::P64;
           P64[Hp - 24] = _scLRD::P64;
           P64[Hp - 16] = _scLRF::P64;
           P64[Hp - 8] = _scLRH::P64;
           P64[Hp] = _scLRJ::P64;
           I64[Sp - 8] = block_ccNpQ_info;
           R3 = Hp - 151;
           R2 = lvl40_rcHqi_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLS1_info" {
     sat_scLS1_info:
         const sat_scLS1_entry;
         const 18;
         const 16140901266359320584;
         const 4294967301;
         const ScMjD_srt+128;
 },
 _ccNpQ() //  [R1]
         { []
         }
     {offset
       ccNpQ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccNq0; else goto ccNpZ;
       ccNq0: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccNpZ: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccNpQ_info" {
     block_ccNpQ_info:
         const _ccNpQ;
         const 0;
         const 30;
 },
 section ""relreadonly" . ucNuT_srtd" {
     ucNuT_srtd:
         const ScMjD_srt+128;
         const 33;
         const 8053063727;
 },
 sat_scLS2_entry() //  [R1, R2]
         { []
         }
     {offset
       ccNq1: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto ccNq5; else goto ccNq4;
       ccNq5: // global
           HpAlloc = 152;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNq4: // global
           _scLR7::P64 = P64[R1 + 7];
           _scLRb::P64 = P64[R1 + 15];
           _scLRd::P64 = P64[R1 + 23];
           _scLRf::P64 = P64[R1 + 31];
           _scLRh::P64 = P64[R1 + 39];
           _scLRj::P64 = P64[R1 + 47];
           _scLRl::P64 = P64[R1 + 55];
           _scLRn::P64 = P64[R1 + 63];
           _scLRp::P64 = P64[R1 + 71];
           _scLRr::P64 = P64[R1 + 79];
           _scLRt::P64 = P64[R1 + 87];
           _scLRv::P64 = P64[R1 + 95];
           _scLRx::P64 = P64[R1 + 103];
           _scLRz::P64 = P64[R1 + 111];
           _scLRB::P64 = P64[R1 + 119];
           _scLRD::P64 = P64[R1 + 127];
           _scLRF::P64 = P64[R1 + 135];
           _scLRH::P64 = P64[R1 + 143];
           I64[Hp - 144] = sat_scLS1_info;
           P64[Hp - 136] = _scLR7::P64;
           P64[Hp - 128] = _scLRb::P64;
           P64[Hp - 120] = _scLRd::P64;
           P64[Hp - 112] = _scLRf::P64;
           P64[Hp - 104] = _scLRh::P64;
           P64[Hp - 96] = _scLRj::P64;
           P64[Hp - 88] = _scLRl::P64;
           P64[Hp - 80] = _scLRn::P64;
           P64[Hp - 72] = _scLRp::P64;
           P64[Hp - 64] = _scLRr::P64;
           P64[Hp - 56] = _scLRt::P64;
           P64[Hp - 48] = _scLRv::P64;
           P64[Hp - 40] = _scLRx::P64;
           P64[Hp - 32] = _scLRz::P64;
           P64[Hp - 24] = _scLRB::P64;
           P64[Hp - 16] = _scLRD::P64;
           P64[Hp - 8] = _scLRF::P64;
           P64[Hp] = _scLRH::P64;
           R5 = Hp - 143;
           R4 = n_rcHqf_closure+1;
           R3 = lvl66_rcHqI_closure+2;
           R2 = lvl106_rcHrq_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLS2_info" {
     sat_scLS2_info:
         const sat_scLS2_entry;
         const 18;
         const 18446744069414584328;
         const 4294967301;
         const ucNuT_srtd;
 },
 section ""relreadonly" . ucNuU_srtd" {
     ucNuU_srtd:
         const ScMjD_srt+128;
         const 33;
         const 8053063727;
 },
 sat_scLS5_entry() //  [R1, R2]
         { []
         }
     {offset
       ccNq9: // global
           _scLRH::P64 = R2;
           _scLS5::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto ccNqa; else goto ccNqb;
       ccNqb: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto ccNqd; else goto ccNqc;
       ccNqd: // global
           HpAlloc = 152;
           goto ccNqa;
       ccNqa: // global
           R2 = _scLRH::P64;
           R1 = _scLS5::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNqc: // global
           _scLR7::P64 = P64[_scLS5::P64 + 7];
           _scLRb::P64 = P64[_scLS5::P64 + 15];
           _scLRd::P64 = P64[_scLS5::P64 + 23];
           _scLRf::P64 = P64[_scLS5::P64 + 31];
           _scLRh::P64 = P64[_scLS5::P64 + 39];
           _scLRj::P64 = P64[_scLS5::P64 + 47];
           _scLRl::P64 = P64[_scLS5::P64 + 55];
           _scLRn::P64 = P64[_scLS5::P64 + 63];
           _scLRp::P64 = P64[_scLS5::P64 + 71];
           _scLRr::P64 = P64[_scLS5::P64 + 79];
           _scLRt::P64 = P64[_scLS5::P64 + 87];
           _scLRv::P64 = P64[_scLS5::P64 + 95];
           _scLRx::P64 = P64[_scLS5::P64 + 103];
           _scLRz::P64 = P64[_scLS5::P64 + 111];
           _scLRB::P64 = P64[_scLS5::P64 + 119];
           _scLRD::P64 = P64[_scLS5::P64 + 127];
           _scLRF::P64 = P64[_scLS5::P64 + 135];
           I64[Hp - 144] = sat_scLS2_info;
           P64[Hp - 136] = _scLR7::P64;
           P64[Hp - 128] = _scLRb::P64;
           P64[Hp - 120] = _scLRd::P64;
           P64[Hp - 112] = _scLRf::P64;
           P64[Hp - 104] = _scLRh::P64;
           P64[Hp - 96] = _scLRj::P64;
           P64[Hp - 88] = _scLRl::P64;
           P64[Hp - 80] = _scLRn::P64;
           P64[Hp - 72] = _scLRp::P64;
           P64[Hp - 64] = _scLRr::P64;
           P64[Hp - 56] = _scLRt::P64;
           P64[Hp - 48] = _scLRv::P64;
           P64[Hp - 40] = _scLRx::P64;
           P64[Hp - 32] = _scLRz::P64;
           P64[Hp - 24] = _scLRB::P64;
           P64[Hp - 16] = _scLRD::P64;
           P64[Hp - 8] = _scLRF::P64;
           P64[Hp] = _scLRH::P64;
           I64[Sp - 8] = block_ccNq6_info;
           R3 = Hp - 143;
           R2 = lvl40_rcHqi_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLS5_info" {
     sat_scLS5_info:
         const sat_scLS5_entry;
         const 17;
         const 18446744069414584328;
         const 4294967301;
         const ucNuU_srtd;
 },
 _ccNq6() //  [R1]
         { []
         }
     {offset
       ccNq6: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccNqg; else goto ccNqf;
       ccNqg: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccNqf: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccNq6_info" {
     block_ccNq6_info:
         const _ccNq6;
         const 0;
         const 30;
 },
 section ""relreadonly" . ucNuV_srtd" {
     ucNuV_srtd:
         const ScMjD_srt+128;
         const 34;
         const 16642998319;
 },
 sat_scLS6_entry() //  [R1, R2]
         { []
         }
     {offset
       ccNqh: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto ccNql; else goto ccNqk;
       ccNql: // global
           HpAlloc = 144;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNqk: // global
           _scLR7::P64 = P64[R1 + 7];
           _scLRb::P64 = P64[R1 + 15];
           _scLRd::P64 = P64[R1 + 23];
           _scLRf::P64 = P64[R1 + 31];
           _scLRh::P64 = P64[R1 + 39];
           _scLRj::P64 = P64[R1 + 47];
           _scLRl::P64 = P64[R1 + 55];
           _scLRn::P64 = P64[R1 + 63];
           _scLRp::P64 = P64[R1 + 71];
           _scLRr::P64 = P64[R1 + 79];
           _scLRt::P64 = P64[R1 + 87];
           _scLRv::P64 = P64[R1 + 95];
           _scLRx::P64 = P64[R1 + 103];
           _scLRz::P64 = P64[R1 + 111];
           _scLRB::P64 = P64[R1 + 119];
           _scLRD::P64 = P64[R1 + 127];
           _scLRF::P64 = P64[R1 + 135];
           I64[Hp - 136] = sat_scLS5_info;
           P64[Hp - 128] = _scLR7::P64;
           P64[Hp - 120] = _scLRb::P64;
           P64[Hp - 112] = _scLRd::P64;
           P64[Hp - 104] = _scLRf::P64;
           P64[Hp - 96] = _scLRh::P64;
           P64[Hp - 88] = _scLRj::P64;
           P64[Hp - 80] = _scLRl::P64;
           P64[Hp - 72] = _scLRn::P64;
           P64[Hp - 64] = _scLRp::P64;
           P64[Hp - 56] = _scLRr::P64;
           P64[Hp - 48] = _scLRt::P64;
           P64[Hp - 40] = _scLRv::P64;
           P64[Hp - 32] = _scLRx::P64;
           P64[Hp - 24] = _scLRz::P64;
           P64[Hp - 16] = _scLRB::P64;
           P64[Hp - 8] = _scLRD::P64;
           P64[Hp] = _scLRF::P64;
           R5 = Hp - 135;
           R4 = n_rcHqf_closure+1;
           R3 = lvl66_rcHqI_closure+2;
           R2 = lvl104_rcHro_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLS6_info" {
     sat_scLS6_info:
         const sat_scLS6_entry;
         const 17;
         const 18446744069414584328;
         const 4294967301;
         const ucNuV_srtd;
 },
 section ""relreadonly" . ucNuW_srtd" {
     ucNuW_srtd:
         const ScMjD_srt+128;
         const 34;
         const 16642998319;
 },
 sat_scLS9_entry() //  [R1, R2]
         { []
         }
     {offset
       ccNqp: // global
           _scLRF::P64 = R2;
           _scLS9::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto ccNqq; else goto ccNqr;
       ccNqr: // global
           Hp = Hp + 144;
           if (Hp > HpLim) (likely: False) goto ccNqt; else goto ccNqs;
       ccNqt: // global
           HpAlloc = 144;
           goto ccNqq;
       ccNqq: // global
           R2 = _scLRF::P64;
           R1 = _scLS9::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNqs: // global
           _scLR7::P64 = P64[_scLS9::P64 + 7];
           _scLRb::P64 = P64[_scLS9::P64 + 15];
           _scLRd::P64 = P64[_scLS9::P64 + 23];
           _scLRf::P64 = P64[_scLS9::P64 + 31];
           _scLRh::P64 = P64[_scLS9::P64 + 39];
           _scLRj::P64 = P64[_scLS9::P64 + 47];
           _scLRl::P64 = P64[_scLS9::P64 + 55];
           _scLRn::P64 = P64[_scLS9::P64 + 63];
           _scLRp::P64 = P64[_scLS9::P64 + 71];
           _scLRr::P64 = P64[_scLS9::P64 + 79];
           _scLRt::P64 = P64[_scLS9::P64 + 87];
           _scLRv::P64 = P64[_scLS9::P64 + 95];
           _scLRx::P64 = P64[_scLS9::P64 + 103];
           _scLRz::P64 = P64[_scLS9::P64 + 111];
           _scLRB::P64 = P64[_scLS9::P64 + 119];
           _scLRD::P64 = P64[_scLS9::P64 + 127];
           I64[Hp - 136] = sat_scLS6_info;
           P64[Hp - 128] = _scLR7::P64;
           P64[Hp - 120] = _scLRb::P64;
           P64[Hp - 112] = _scLRd::P64;
           P64[Hp - 104] = _scLRf::P64;
           P64[Hp - 96] = _scLRh::P64;
           P64[Hp - 88] = _scLRj::P64;
           P64[Hp - 80] = _scLRl::P64;
           P64[Hp - 72] = _scLRn::P64;
           P64[Hp - 64] = _scLRp::P64;
           P64[Hp - 56] = _scLRr::P64;
           P64[Hp - 48] = _scLRt::P64;
           P64[Hp - 40] = _scLRv::P64;
           P64[Hp - 32] = _scLRx::P64;
           P64[Hp - 24] = _scLRz::P64;
           P64[Hp - 16] = _scLRB::P64;
           P64[Hp - 8] = _scLRD::P64;
           P64[Hp] = _scLRF::P64;
           I64[Sp - 8] = block_ccNqm_info;
           R3 = Hp - 135;
           R2 = lvl40_rcHqi_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLS9_info" {
     sat_scLS9_info:
         const sat_scLS9_entry;
         const 16;
         const 18446744069414584328;
         const 4294967301;
         const ucNuW_srtd;
 },
 _ccNqm() //  [R1]
         { []
         }
     {offset
       ccNqm: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccNqw; else goto ccNqv;
       ccNqw: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccNqv: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccNqm_info" {
     block_ccNqm_info:
         const _ccNqm;
         const 0;
         const 30;
 },
 section ""relreadonly" . ucNuX_srtd" {
     ucNuX_srtd:
         const ScMjD_srt+128;
         const 35;
         const 33822867503;
 },
 sat_scLSa_entry() //  [R1, R2]
         { []
         }
     {offset
       ccNqx: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto ccNqB; else goto ccNqA;
       ccNqB: // global
           HpAlloc = 136;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNqA: // global
           _scLR7::P64 = P64[R1 + 7];
           _scLRb::P64 = P64[R1 + 15];
           _scLRd::P64 = P64[R1 + 23];
           _scLRf::P64 = P64[R1 + 31];
           _scLRh::P64 = P64[R1 + 39];
           _scLRj::P64 = P64[R1 + 47];
           _scLRl::P64 = P64[R1 + 55];
           _scLRn::P64 = P64[R1 + 63];
           _scLRp::P64 = P64[R1 + 71];
           _scLRr::P64 = P64[R1 + 79];
           _scLRt::P64 = P64[R1 + 87];
           _scLRv::P64 = P64[R1 + 95];
           _scLRx::P64 = P64[R1 + 103];
           _scLRz::P64 = P64[R1 + 111];
           _scLRB::P64 = P64[R1 + 119];
           _scLRD::P64 = P64[R1 + 127];
           I64[Hp - 128] = sat_scLS9_info;
           P64[Hp - 120] = _scLR7::P64;
           P64[Hp - 112] = _scLRb::P64;
           P64[Hp - 104] = _scLRd::P64;
           P64[Hp - 96] = _scLRf::P64;
           P64[Hp - 88] = _scLRh::P64;
           P64[Hp - 80] = _scLRj::P64;
           P64[Hp - 72] = _scLRl::P64;
           P64[Hp - 64] = _scLRn::P64;
           P64[Hp - 56] = _scLRp::P64;
           P64[Hp - 48] = _scLRr::P64;
           P64[Hp - 40] = _scLRt::P64;
           P64[Hp - 32] = _scLRv::P64;
           P64[Hp - 24] = _scLRx::P64;
           P64[Hp - 16] = _scLRz::P64;
           P64[Hp - 8] = _scLRB::P64;
           P64[Hp] = _scLRD::P64;
           R5 = Hp - 127;
           R4 = n_rcHqf_closure+1;
           R3 = lvl66_rcHqI_closure+2;
           R2 = lvl102_rcHrm_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLSa_info" {
     sat_scLSa_info:
         const sat_scLSa_entry;
         const 16;
         const 18446744069414584328;
         const 4294967301;
         const ucNuX_srtd;
 },
 section ""relreadonly" . ucNuY_srtd" {
     ucNuY_srtd:
         const ScMjD_srt+128;
         const 35;
         const 33822867503;
 },
 sat_scLSd_entry() //  [R1, R2]
         { []
         }
     {offset
       ccNqF: // global
           _scLRD::P64 = R2;
           _scLSd::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto ccNqG; else goto ccNqH;
       ccNqH: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto ccNqJ; else goto ccNqI;
       ccNqJ: // global
           HpAlloc = 136;
           goto ccNqG;
       ccNqG: // global
           R2 = _scLRD::P64;
           R1 = _scLSd::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNqI: // global
           _scLR7::P64 = P64[_scLSd::P64 + 7];
           _scLRb::P64 = P64[_scLSd::P64 + 15];
           _scLRd::P64 = P64[_scLSd::P64 + 23];
           _scLRf::P64 = P64[_scLSd::P64 + 31];
           _scLRh::P64 = P64[_scLSd::P64 + 39];
           _scLRj::P64 = P64[_scLSd::P64 + 47];
           _scLRl::P64 = P64[_scLSd::P64 + 55];
           _scLRn::P64 = P64[_scLSd::P64 + 63];
           _scLRp::P64 = P64[_scLSd::P64 + 71];
           _scLRr::P64 = P64[_scLSd::P64 + 79];
           _scLRt::P64 = P64[_scLSd::P64 + 87];
           _scLRv::P64 = P64[_scLSd::P64 + 95];
           _scLRx::P64 = P64[_scLSd::P64 + 103];
           _scLRz::P64 = P64[_scLSd::P64 + 111];
           _scLRB::P64 = P64[_scLSd::P64 + 119];
           I64[Hp - 128] = sat_scLSa_info;
           P64[Hp - 120] = _scLR7::P64;
           P64[Hp - 112] = _scLRb::P64;
           P64[Hp - 104] = _scLRd::P64;
           P64[Hp - 96] = _scLRf::P64;
           P64[Hp - 88] = _scLRh::P64;
           P64[Hp - 80] = _scLRj::P64;
           P64[Hp - 72] = _scLRl::P64;
           P64[Hp - 64] = _scLRn::P64;
           P64[Hp - 56] = _scLRp::P64;
           P64[Hp - 48] = _scLRr::P64;
           P64[Hp - 40] = _scLRt::P64;
           P64[Hp - 32] = _scLRv::P64;
           P64[Hp - 24] = _scLRx::P64;
           P64[Hp - 16] = _scLRz::P64;
           P64[Hp - 8] = _scLRB::P64;
           P64[Hp] = _scLRD::P64;
           I64[Sp - 8] = block_ccNqC_info;
           R3 = Hp - 127;
           R2 = lvl40_rcHqi_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLSd_info" {
     sat_scLSd_info:
         const sat_scLSd_entry;
         const 15;
         const 18446744069414584328;
         const 4294967301;
         const ucNuY_srtd;
 },
 _ccNqC() //  [R1]
         { []
         }
     {offset
       ccNqC: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccNqM; else goto ccNqL;
       ccNqM: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccNqL: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccNqC_info" {
     block_ccNqC_info:
         const _ccNqC;
         const 0;
         const 30;
 },
 section ""relreadonly" . ucNuZ_srtd" {
     ucNuZ_srtd:
         const ScMjD_srt+128;
         const 36;
         const 68182605871;
 },
 sat_scLSe_entry() //  [R1, R2]
         { []
         }
     {offset
       ccNqN: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto ccNqR; else goto ccNqQ;
       ccNqR: // global
           HpAlloc = 128;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNqQ: // global
           _scLR7::P64 = P64[R1 + 7];
           _scLRb::P64 = P64[R1 + 15];
           _scLRd::P64 = P64[R1 + 23];
           _scLRf::P64 = P64[R1 + 31];
           _scLRh::P64 = P64[R1 + 39];
           _scLRj::P64 = P64[R1 + 47];
           _scLRl::P64 = P64[R1 + 55];
           _scLRn::P64 = P64[R1 + 63];
           _scLRp::P64 = P64[R1 + 71];
           _scLRr::P64 = P64[R1 + 79];
           _scLRt::P64 = P64[R1 + 87];
           _scLRv::P64 = P64[R1 + 95];
           _scLRx::P64 = P64[R1 + 103];
           _scLRz::P64 = P64[R1 + 111];
           _scLRB::P64 = P64[R1 + 119];
           I64[Hp - 120] = sat_scLSd_info;
           P64[Hp - 112] = _scLR7::P64;
           P64[Hp - 104] = _scLRb::P64;
           P64[Hp - 96] = _scLRd::P64;
           P64[Hp - 88] = _scLRf::P64;
           P64[Hp - 80] = _scLRh::P64;
           P64[Hp - 72] = _scLRj::P64;
           P64[Hp - 64] = _scLRl::P64;
           P64[Hp - 56] = _scLRn::P64;
           P64[Hp - 48] = _scLRp::P64;
           P64[Hp - 40] = _scLRr::P64;
           P64[Hp - 32] = _scLRt::P64;
           P64[Hp - 24] = _scLRv::P64;
           P64[Hp - 16] = _scLRx::P64;
           P64[Hp - 8] = _scLRz::P64;
           P64[Hp] = _scLRB::P64;
           R5 = Hp - 119;
           R4 = n_rcHqf_closure+1;
           R3 = lvl66_rcHqI_closure+2;
           R2 = lvl100_rcHrk_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLSe_info" {
     sat_scLSe_info:
         const sat_scLSe_entry;
         const 15;
         const 18446744069414584328;
         const 4294967301;
         const ucNuZ_srtd;
 },
 section ""relreadonly" . ucNv0_srtd" {
     ucNv0_srtd:
         const ScMjD_srt+128;
         const 36;
         const 68182605871;
 },
 sat_scLSh_entry() //  [R1, R2]
         { []
         }
     {offset
       ccNqV: // global
           _scLRB::P64 = R2;
           _scLSh::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto ccNqW; else goto ccNqX;
       ccNqX: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto ccNqZ; else goto ccNqY;
       ccNqZ: // global
           HpAlloc = 128;
           goto ccNqW;
       ccNqW: // global
           R2 = _scLRB::P64;
           R1 = _scLSh::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNqY: // global
           _scLR7::P64 = P64[_scLSh::P64 + 7];
           _scLRb::P64 = P64[_scLSh::P64 + 15];
           _scLRd::P64 = P64[_scLSh::P64 + 23];
           _scLRf::P64 = P64[_scLSh::P64 + 31];
           _scLRh::P64 = P64[_scLSh::P64 + 39];
           _scLRj::P64 = P64[_scLSh::P64 + 47];
           _scLRl::P64 = P64[_scLSh::P64 + 55];
           _scLRn::P64 = P64[_scLSh::P64 + 63];
           _scLRp::P64 = P64[_scLSh::P64 + 71];
           _scLRr::P64 = P64[_scLSh::P64 + 79];
           _scLRt::P64 = P64[_scLSh::P64 + 87];
           _scLRv::P64 = P64[_scLSh::P64 + 95];
           _scLRx::P64 = P64[_scLSh::P64 + 103];
           _scLRz::P64 = P64[_scLSh::P64 + 111];
           I64[Hp - 120] = sat_scLSe_info;
           P64[Hp - 112] = _scLR7::P64;
           P64[Hp - 104] = _scLRb::P64;
           P64[Hp - 96] = _scLRd::P64;
           P64[Hp - 88] = _scLRf::P64;
           P64[Hp - 80] = _scLRh::P64;
           P64[Hp - 72] = _scLRj::P64;
           P64[Hp - 64] = _scLRl::P64;
           P64[Hp - 56] = _scLRn::P64;
           P64[Hp - 48] = _scLRp::P64;
           P64[Hp - 40] = _scLRr::P64;
           P64[Hp - 32] = _scLRt::P64;
           P64[Hp - 24] = _scLRv::P64;
           P64[Hp - 16] = _scLRx::P64;
           P64[Hp - 8] = _scLRz::P64;
           P64[Hp] = _scLRB::P64;
           I64[Sp - 8] = block_ccNqS_info;
           R3 = Hp - 119;
           R2 = lvl40_rcHqi_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLSh_info" {
     sat_scLSh_info:
         const sat_scLSh_entry;
         const 14;
         const 18446744069414584328;
         const 4294967301;
         const ucNv0_srtd;
 },
 _ccNqS() //  [R1]
         { []
         }
     {offset
       ccNqS: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccNr2; else goto ccNr1;
       ccNr2: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccNr1: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccNqS_info" {
     block_ccNqS_info:
         const _ccNqS;
         const 0;
         const 30;
 },
 section ""relreadonly" . ucNv1_srtd" {
     ucNv1_srtd:
         const ScMjD_srt+128;
         const 37;
         const 136902082607;
 },
 sat_scLSi_entry() //  [R1, R2]
         { []
         }
     {offset
       ccNr3: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto ccNr7; else goto ccNr6;
       ccNr7: // global
           HpAlloc = 120;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNr6: // global
           _scLR7::P64 = P64[R1 + 7];
           _scLRb::P64 = P64[R1 + 15];
           _scLRd::P64 = P64[R1 + 23];
           _scLRf::P64 = P64[R1 + 31];
           _scLRh::P64 = P64[R1 + 39];
           _scLRj::P64 = P64[R1 + 47];
           _scLRl::P64 = P64[R1 + 55];
           _scLRn::P64 = P64[R1 + 63];
           _scLRp::P64 = P64[R1 + 71];
           _scLRr::P64 = P64[R1 + 79];
           _scLRt::P64 = P64[R1 + 87];
           _scLRv::P64 = P64[R1 + 95];
           _scLRx::P64 = P64[R1 + 103];
           _scLRz::P64 = P64[R1 + 111];
           I64[Hp - 112] = sat_scLSh_info;
           P64[Hp - 104] = _scLR7::P64;
           P64[Hp - 96] = _scLRb::P64;
           P64[Hp - 88] = _scLRd::P64;
           P64[Hp - 80] = _scLRf::P64;
           P64[Hp - 72] = _scLRh::P64;
           P64[Hp - 64] = _scLRj::P64;
           P64[Hp - 56] = _scLRl::P64;
           P64[Hp - 48] = _scLRn::P64;
           P64[Hp - 40] = _scLRp::P64;
           P64[Hp - 32] = _scLRr::P64;
           P64[Hp - 24] = _scLRt::P64;
           P64[Hp - 16] = _scLRv::P64;
           P64[Hp - 8] = _scLRx::P64;
           P64[Hp] = _scLRz::P64;
           R5 = Hp - 111;
           R4 = n_rcHqf_closure+1;
           R3 = lvl66_rcHqI_closure+2;
           R2 = lvl98_rcHri_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLSi_info" {
     sat_scLSi_info:
         const sat_scLSi_entry;
         const 14;
         const 18446744069414584328;
         const 4294967301;
         const ucNv1_srtd;
 },
 section ""relreadonly" . ucNv2_srtd" {
     ucNv2_srtd:
         const ScMjD_srt+128;
         const 37;
         const 136902082607;
 },
 sat_scLSl_entry() //  [R1, R2]
         { []
         }
     {offset
       ccNrb: // global
           _scLRz::P64 = R2;
           _scLSl::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto ccNrc; else goto ccNrd;
       ccNrd: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto ccNrf; else goto ccNre;
       ccNrf: // global
           HpAlloc = 120;
           goto ccNrc;
       ccNrc: // global
           R2 = _scLRz::P64;
           R1 = _scLSl::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNre: // global
           _scLR7::P64 = P64[_scLSl::P64 + 7];
           _scLRb::P64 = P64[_scLSl::P64 + 15];
           _scLRd::P64 = P64[_scLSl::P64 + 23];
           _scLRf::P64 = P64[_scLSl::P64 + 31];
           _scLRh::P64 = P64[_scLSl::P64 + 39];
           _scLRj::P64 = P64[_scLSl::P64 + 47];
           _scLRl::P64 = P64[_scLSl::P64 + 55];
           _scLRn::P64 = P64[_scLSl::P64 + 63];
           _scLRp::P64 = P64[_scLSl::P64 + 71];
           _scLRr::P64 = P64[_scLSl::P64 + 79];
           _scLRt::P64 = P64[_scLSl::P64 + 87];
           _scLRv::P64 = P64[_scLSl::P64 + 95];
           _scLRx::P64 = P64[_scLSl::P64 + 103];
           I64[Hp - 112] = sat_scLSi_info;
           P64[Hp - 104] = _scLR7::P64;
           P64[Hp - 96] = _scLRb::P64;
           P64[Hp - 88] = _scLRd::P64;
           P64[Hp - 80] = _scLRf::P64;
           P64[Hp - 72] = _scLRh::P64;
           P64[Hp - 64] = _scLRj::P64;
           P64[Hp - 56] = _scLRl::P64;
           P64[Hp - 48] = _scLRn::P64;
           P64[Hp - 40] = _scLRp::P64;
           P64[Hp - 32] = _scLRr::P64;
           P64[Hp - 24] = _scLRt::P64;
           P64[Hp - 16] = _scLRv::P64;
           P64[Hp - 8] = _scLRx::P64;
           P64[Hp] = _scLRz::P64;
           I64[Sp - 8] = block_ccNr8_info;
           R3 = Hp - 111;
           R2 = lvl40_rcHqi_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLSl_info" {
     sat_scLSl_info:
         const sat_scLSl_entry;
         const 13;
         const 18446744069414584328;
         const 4294967301;
         const ucNv2_srtd;
 },
 _ccNr8() //  [R1]
         { []
         }
     {offset
       ccNr8: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccNri; else goto ccNrh;
       ccNri: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccNrh: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccNr8_info" {
     block_ccNr8_info:
         const _ccNr8;
         const 0;
         const 30;
 },
 section ""relreadonly" . ucNv3_srtd" {
     ucNv3_srtd:
         const ScMjD_srt+104;
         const 41;
         const 2194728288633;
 },
 sat_scLSm_entry() //  [R1, R2]
         { []
         }
     {offset
       ccNrj: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto ccNrn; else goto ccNrm;
       ccNrn: // global
           HpAlloc = 112;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNrm: // global
           _scLR7::P64 = P64[R1 + 7];
           _scLRb::P64 = P64[R1 + 15];
           _scLRd::P64 = P64[R1 + 23];
           _scLRf::P64 = P64[R1 + 31];
           _scLRh::P64 = P64[R1 + 39];
           _scLRj::P64 = P64[R1 + 47];
           _scLRl::P64 = P64[R1 + 55];
           _scLRn::P64 = P64[R1 + 63];
           _scLRp::P64 = P64[R1 + 71];
           _scLRr::P64 = P64[R1 + 79];
           _scLRt::P64 = P64[R1 + 87];
           _scLRv::P64 = P64[R1 + 95];
           _scLRx::P64 = P64[R1 + 103];
           I64[Hp - 104] = sat_scLSl_info;
           P64[Hp - 96] = _scLR7::P64;
           P64[Hp - 88] = _scLRb::P64;
           P64[Hp - 80] = _scLRd::P64;
           P64[Hp - 72] = _scLRf::P64;
           P64[Hp - 64] = _scLRh::P64;
           P64[Hp - 56] = _scLRj::P64;
           P64[Hp - 48] = _scLRl::P64;
           P64[Hp - 40] = _scLRn::P64;
           P64[Hp - 32] = _scLRp::P64;
           P64[Hp - 24] = _scLRr::P64;
           P64[Hp - 16] = _scLRt::P64;
           P64[Hp - 8] = _scLRv::P64;
           P64[Hp] = _scLRx::P64;
           R5 = Hp - 103;
           R4 = n_rcHqf_closure+1;
           R3 = lvl46_rcHqo_closure+2;
           R2 = lvl96_rcHrg_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLSm_info" {
     sat_scLSm_info:
         const sat_scLSm_entry;
         const 13;
         const 18446744069414584328;
         const 4294967301;
         const ucNv3_srtd;
 },
 section ""relreadonly" . ucNv4_srtd" {
     ucNv4_srtd:
         const ScMjD_srt+104;
         const 41;
         const 2194728288633;
 },
 sat_scLSp_entry() //  [R1, R2]
         { []
         }
     {offset
       ccNrr: // global
           _scLRx::P64 = R2;
           _scLSp::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto ccNrs; else goto ccNrt;
       ccNrt: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto ccNrv; else goto ccNru;
       ccNrv: // global
           HpAlloc = 112;
           goto ccNrs;
       ccNrs: // global
           R2 = _scLRx::P64;
           R1 = _scLSp::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNru: // global
           _scLR7::P64 = P64[_scLSp::P64 + 7];
           _scLRb::P64 = P64[_scLSp::P64 + 15];
           _scLRd::P64 = P64[_scLSp::P64 + 23];
           _scLRf::P64 = P64[_scLSp::P64 + 31];
           _scLRh::P64 = P64[_scLSp::P64 + 39];
           _scLRj::P64 = P64[_scLSp::P64 + 47];
           _scLRl::P64 = P64[_scLSp::P64 + 55];
           _scLRn::P64 = P64[_scLSp::P64 + 63];
           _scLRp::P64 = P64[_scLSp::P64 + 71];
           _scLRr::P64 = P64[_scLSp::P64 + 79];
           _scLRt::P64 = P64[_scLSp::P64 + 87];
           _scLRv::P64 = P64[_scLSp::P64 + 95];
           I64[Hp - 104] = sat_scLSm_info;
           P64[Hp - 96] = _scLR7::P64;
           P64[Hp - 88] = _scLRb::P64;
           P64[Hp - 80] = _scLRd::P64;
           P64[Hp - 72] = _scLRf::P64;
           P64[Hp - 64] = _scLRh::P64;
           P64[Hp - 56] = _scLRj::P64;
           P64[Hp - 48] = _scLRl::P64;
           P64[Hp - 40] = _scLRn::P64;
           P64[Hp - 32] = _scLRp::P64;
           P64[Hp - 24] = _scLRr::P64;
           P64[Hp - 16] = _scLRt::P64;
           P64[Hp - 8] = _scLRv::P64;
           P64[Hp] = _scLRx::P64;
           I64[Sp - 8] = block_ccNro_info;
           R3 = Hp - 103;
           R2 = lvl40_rcHqi_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLSp_info" {
     sat_scLSp_info:
         const sat_scLSp_entry;
         const 12;
         const 18446744069414584328;
         const 4294967301;
         const ucNv4_srtd;
 },
 _ccNro() //  [R1]
         { []
         }
     {offset
       ccNro: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccNry; else goto ccNrx;
       ccNry: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccNrx: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccNro_info" {
     block_ccNro_info:
         const _ccNro;
         const 0;
         const 30;
 },
 section ""relreadonly" . ucNv5_srtd" {
     ucNv5_srtd:
         const ScMjD_srt+104;
         const 42;
         const 4393751544185;
 },
 sat_scLSq_entry() //  [R1, R2]
         { []
         }
     {offset
       ccNrz: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto ccNrD; else goto ccNrC;
       ccNrD: // global
           HpAlloc = 104;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNrC: // global
           _scLR7::P64 = P64[R1 + 7];
           _scLRb::P64 = P64[R1 + 15];
           _scLRd::P64 = P64[R1 + 23];
           _scLRf::P64 = P64[R1 + 31];
           _scLRh::P64 = P64[R1 + 39];
           _scLRj::P64 = P64[R1 + 47];
           _scLRl::P64 = P64[R1 + 55];
           _scLRn::P64 = P64[R1 + 63];
           _scLRp::P64 = P64[R1 + 71];
           _scLRr::P64 = P64[R1 + 79];
           _scLRt::P64 = P64[R1 + 87];
           _scLRv::P64 = P64[R1 + 95];
           I64[Hp - 96] = sat_scLSp_info;
           P64[Hp - 88] = _scLR7::P64;
           P64[Hp - 80] = _scLRb::P64;
           P64[Hp - 72] = _scLRd::P64;
           P64[Hp - 64] = _scLRf::P64;
           P64[Hp - 56] = _scLRh::P64;
           P64[Hp - 48] = _scLRj::P64;
           P64[Hp - 40] = _scLRl::P64;
           P64[Hp - 32] = _scLRn::P64;
           P64[Hp - 24] = _scLRp::P64;
           P64[Hp - 16] = _scLRr::P64;
           P64[Hp - 8] = _scLRt::P64;
           P64[Hp] = _scLRv::P64;
           R5 = Hp - 95;
           R4 = n_rcHqf_closure+1;
           R3 = lvl46_rcHqo_closure+2;
           R2 = lvl94_rcHre_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLSq_info" {
     sat_scLSq_info:
         const sat_scLSq_entry;
         const 12;
         const 18446744069414584328;
         const 4294967301;
         const ucNv5_srtd;
 },
 section ""relreadonly" . ucNv6_srtd" {
     ucNv6_srtd:
         const ScMjD_srt+104;
         const 42;
         const 4393751544185;
 },
 sat_scLSt_entry() //  [R1, R2]
         { []
         }
     {offset
       ccNrH: // global
           _scLRv::P64 = R2;
           _scLSt::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto ccNrI; else goto ccNrJ;
       ccNrJ: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto ccNrL; else goto ccNrK;
       ccNrL: // global
           HpAlloc = 104;
           goto ccNrI;
       ccNrI: // global
           R2 = _scLRv::P64;
           R1 = _scLSt::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNrK: // global
           _scLR7::P64 = P64[_scLSt::P64 + 7];
           _scLRb::P64 = P64[_scLSt::P64 + 15];
           _scLRd::P64 = P64[_scLSt::P64 + 23];
           _scLRf::P64 = P64[_scLSt::P64 + 31];
           _scLRh::P64 = P64[_scLSt::P64 + 39];
           _scLRj::P64 = P64[_scLSt::P64 + 47];
           _scLRl::P64 = P64[_scLSt::P64 + 55];
           _scLRn::P64 = P64[_scLSt::P64 + 63];
           _scLRp::P64 = P64[_scLSt::P64 + 71];
           _scLRr::P64 = P64[_scLSt::P64 + 79];
           _scLRt::P64 = P64[_scLSt::P64 + 87];
           I64[Hp - 96] = sat_scLSq_info;
           P64[Hp - 88] = _scLR7::P64;
           P64[Hp - 80] = _scLRb::P64;
           P64[Hp - 72] = _scLRd::P64;
           P64[Hp - 64] = _scLRf::P64;
           P64[Hp - 56] = _scLRh::P64;
           P64[Hp - 48] = _scLRj::P64;
           P64[Hp - 40] = _scLRl::P64;
           P64[Hp - 32] = _scLRn::P64;
           P64[Hp - 24] = _scLRp::P64;
           P64[Hp - 16] = _scLRr::P64;
           P64[Hp - 8] = _scLRt::P64;
           P64[Hp] = _scLRv::P64;
           I64[Sp - 8] = block_ccNrE_info;
           R3 = Hp - 95;
           R2 = lvl40_rcHqi_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLSt_info" {
     sat_scLSt_info:
         const sat_scLSt_entry;
         const 11;
         const 18446744069414584328;
         const 4294967301;
         const ucNv6_srtd;
 },
 _ccNrE() //  [R1]
         { []
         }
     {offset
       ccNrE: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccNrO; else goto ccNrN;
       ccNrO: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccNrN: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccNrE_info" {
     block_ccNrE_info:
         const _ccNrE;
         const 0;
         const 30;
 },
 section ""relreadonly" . ucNv7_srtd" {
     ucNv7_srtd:
         const ScMjD_srt+104;
         const 43;
         const 8791798055289;
 },
 sat_scLSu_entry() //  [R1, R2]
         { []
         }
     {offset
       ccNrP: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto ccNrT; else goto ccNrS;
       ccNrT: // global
           HpAlloc = 96;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNrS: // global
           _scLR7::P64 = P64[R1 + 7];
           _scLRb::P64 = P64[R1 + 15];
           _scLRd::P64 = P64[R1 + 23];
           _scLRf::P64 = P64[R1 + 31];
           _scLRh::P64 = P64[R1 + 39];
           _scLRj::P64 = P64[R1 + 47];
           _scLRl::P64 = P64[R1 + 55];
           _scLRn::P64 = P64[R1 + 63];
           _scLRp::P64 = P64[R1 + 71];
           _scLRr::P64 = P64[R1 + 79];
           _scLRt::P64 = P64[R1 + 87];
           I64[Hp - 88] = sat_scLSt_info;
           P64[Hp - 80] = _scLR7::P64;
           P64[Hp - 72] = _scLRb::P64;
           P64[Hp - 64] = _scLRd::P64;
           P64[Hp - 56] = _scLRf::P64;
           P64[Hp - 48] = _scLRh::P64;
           P64[Hp - 40] = _scLRj::P64;
           P64[Hp - 32] = _scLRl::P64;
           P64[Hp - 24] = _scLRn::P64;
           P64[Hp - 16] = _scLRp::P64;
           P64[Hp - 8] = _scLRr::P64;
           P64[Hp] = _scLRt::P64;
           R5 = Hp - 87;
           R4 = n_rcHqf_closure+1;
           R3 = lvl46_rcHqo_closure+2;
           R2 = lvl92_rcHrc_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLSu_info" {
     sat_scLSu_info:
         const sat_scLSu_entry;
         const 11;
         const 18446744069414584328;
         const 4294967301;
         const ucNv7_srtd;
 },
 section ""relreadonly" . ucNv8_srtd" {
     ucNv8_srtd:
         const ScMjD_srt+104;
         const 43;
         const 8791798055289;
 },
 sat_scLSx_entry() //  [R1, R2]
         { []
         }
     {offset
       ccNrX: // global
           _scLRt::P64 = R2;
           _scLSx::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto ccNrY; else goto ccNrZ;
       ccNrZ: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto ccNs1; else goto ccNs0;
       ccNs1: // global
           HpAlloc = 96;
           goto ccNrY;
       ccNrY: // global
           R2 = _scLRt::P64;
           R1 = _scLSx::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNs0: // global
           _scLR7::P64 = P64[_scLSx::P64 + 7];
           _scLRb::P64 = P64[_scLSx::P64 + 15];
           _scLRd::P64 = P64[_scLSx::P64 + 23];
           _scLRf::P64 = P64[_scLSx::P64 + 31];
           _scLRh::P64 = P64[_scLSx::P64 + 39];
           _scLRj::P64 = P64[_scLSx::P64 + 47];
           _scLRl::P64 = P64[_scLSx::P64 + 55];
           _scLRn::P64 = P64[_scLSx::P64 + 63];
           _scLRp::P64 = P64[_scLSx::P64 + 71];
           _scLRr::P64 = P64[_scLSx::P64 + 79];
           I64[Hp - 88] = sat_scLSu_info;
           P64[Hp - 80] = _scLR7::P64;
           P64[Hp - 72] = _scLRb::P64;
           P64[Hp - 64] = _scLRd::P64;
           P64[Hp - 56] = _scLRf::P64;
           P64[Hp - 48] = _scLRh::P64;
           P64[Hp - 40] = _scLRj::P64;
           P64[Hp - 32] = _scLRl::P64;
           P64[Hp - 24] = _scLRn::P64;
           P64[Hp - 16] = _scLRp::P64;
           P64[Hp - 8] = _scLRr::P64;
           P64[Hp] = _scLRt::P64;
           I64[Sp - 8] = block_ccNrU_info;
           R3 = Hp - 87;
           R2 = lvl40_rcHqi_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLSx_info" {
     sat_scLSx_info:
         const sat_scLSx_entry;
         const 10;
         const 18446744069414584328;
         const 4294967301;
         const ucNv8_srtd;
 },
 _ccNrU() //  [R1]
         { []
         }
     {offset
       ccNrU: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccNs4; else goto ccNs3;
       ccNs4: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccNs3: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccNrU_info" {
     block_ccNrU_info:
         const _ccNrU;
         const 0;
         const 30;
 },
 section ""relreadonly" . ucNv9_srtd" {
     ucNv9_srtd:
         const ScMjD_srt+104;
         const 44;
         const 17587891077497;
 },
 sat_scLSy_entry() //  [R1, R2]
         { []
         }
     {offset
       ccNs5: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto ccNs9; else goto ccNs8;
       ccNs9: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNs8: // global
           _scLR7::P64 = P64[R1 + 7];
           _scLRb::P64 = P64[R1 + 15];
           _scLRd::P64 = P64[R1 + 23];
           _scLRf::P64 = P64[R1 + 31];
           _scLRh::P64 = P64[R1 + 39];
           _scLRj::P64 = P64[R1 + 47];
           _scLRl::P64 = P64[R1 + 55];
           _scLRn::P64 = P64[R1 + 63];
           _scLRp::P64 = P64[R1 + 71];
           _scLRr::P64 = P64[R1 + 79];
           I64[Hp - 80] = sat_scLSx_info;
           P64[Hp - 72] = _scLR7::P64;
           P64[Hp - 64] = _scLRb::P64;
           P64[Hp - 56] = _scLRd::P64;
           P64[Hp - 48] = _scLRf::P64;
           P64[Hp - 40] = _scLRh::P64;
           P64[Hp - 32] = _scLRj::P64;
           P64[Hp - 24] = _scLRl::P64;
           P64[Hp - 16] = _scLRn::P64;
           P64[Hp - 8] = _scLRp::P64;
           P64[Hp] = _scLRr::P64;
           R5 = Hp - 79;
           R4 = n_rcHqf_closure+1;
           R3 = lvl46_rcHqo_closure+2;
           R2 = lvl90_rcHra_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLSy_info" {
     sat_scLSy_info:
         const sat_scLSy_entry;
         const 10;
         const 18446744069414584328;
         const 4294967301;
         const ucNv9_srtd;
 },
 section ""relreadonly" . ucNva_srtd" {
     ucNva_srtd:
         const ScMjD_srt+104;
         const 44;
         const 17587891077497;
 },
 sat_scLSB_entry() //  [R1, R2]
         { []
         }
     {offset
       ccNsd: // global
           _scLRr::P64 = R2;
           _scLSB::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto ccNse; else goto ccNsf;
       ccNsf: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto ccNsh; else goto ccNsg;
       ccNsh: // global
           HpAlloc = 88;
           goto ccNse;
       ccNse: // global
           R2 = _scLRr::P64;
           R1 = _scLSB::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNsg: // global
           _scLR7::P64 = P64[_scLSB::P64 + 7];
           _scLRb::P64 = P64[_scLSB::P64 + 15];
           _scLRd::P64 = P64[_scLSB::P64 + 23];
           _scLRf::P64 = P64[_scLSB::P64 + 31];
           _scLRh::P64 = P64[_scLSB::P64 + 39];
           _scLRj::P64 = P64[_scLSB::P64 + 47];
           _scLRl::P64 = P64[_scLSB::P64 + 55];
           _scLRn::P64 = P64[_scLSB::P64 + 63];
           _scLRp::P64 = P64[_scLSB::P64 + 71];
           I64[Hp - 80] = sat_scLSy_info;
           P64[Hp - 72] = _scLR7::P64;
           P64[Hp - 64] = _scLRb::P64;
           P64[Hp - 56] = _scLRd::P64;
           P64[Hp - 48] = _scLRf::P64;
           P64[Hp - 40] = _scLRh::P64;
           P64[Hp - 32] = _scLRj::P64;
           P64[Hp - 24] = _scLRl::P64;
           P64[Hp - 16] = _scLRn::P64;
           P64[Hp - 8] = _scLRp::P64;
           P64[Hp] = _scLRr::P64;
           I64[Sp - 8] = block_ccNsa_info;
           R3 = Hp - 79;
           R2 = lvl40_rcHqi_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLSB_info" {
     sat_scLSB_info:
         const sat_scLSB_entry;
         const 9;
         const 18446744069414584328;
         const 4294967301;
         const ucNva_srtd;
 },
 _ccNsa() //  [R1]
         { []
         }
     {offset
       ccNsa: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccNsk; else goto ccNsj;
       ccNsk: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccNsj: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccNsa_info" {
     block_ccNsa_info:
         const _ccNsa;
         const 0;
         const 30;
 },
 section ""relreadonly" . ucNvb_srtd" {
     ucNvb_srtd:
         const ScMjD_srt+104;
         const 45;
         const 35180077121913;
 },
 sat_scLSC_entry() //  [R1, R2]
         { []
         }
     {offset
       ccNsl: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto ccNsp; else goto ccNso;
       ccNsp: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNso: // global
           _scLR7::P64 = P64[R1 + 7];
           _scLRb::P64 = P64[R1 + 15];
           _scLRd::P64 = P64[R1 + 23];
           _scLRf::P64 = P64[R1 + 31];
           _scLRh::P64 = P64[R1 + 39];
           _scLRj::P64 = P64[R1 + 47];
           _scLRl::P64 = P64[R1 + 55];
           _scLRn::P64 = P64[R1 + 63];
           _scLRp::P64 = P64[R1 + 71];
           I64[Hp - 72] = sat_scLSB_info;
           P64[Hp - 64] = _scLR7::P64;
           P64[Hp - 56] = _scLRb::P64;
           P64[Hp - 48] = _scLRd::P64;
           P64[Hp - 40] = _scLRf::P64;
           P64[Hp - 32] = _scLRh::P64;
           P64[Hp - 24] = _scLRj::P64;
           P64[Hp - 16] = _scLRl::P64;
           P64[Hp - 8] = _scLRn::P64;
           P64[Hp] = _scLRp::P64;
           R5 = Hp - 71;
           R4 = n_rcHqf_closure+1;
           R3 = lvl46_rcHqo_closure+2;
           R2 = lvl88_rcHr8_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLSC_info" {
     sat_scLSC_info:
         const sat_scLSC_entry;
         const 9;
         const 18446744069414584328;
         const 4294967301;
         const ucNvb_srtd;
 },
 section ""relreadonly" . ucNvc_srtd" {
     ucNvc_srtd:
         const ScMjD_srt+104;
         const 45;
         const 35180077121913;
 },
 sat_scLSF_entry() //  [R1, R2]
         { []
         }
     {offset
       ccNst: // global
           _scLRp::P64 = R2;
           _scLSF::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto ccNsu; else goto ccNsv;
       ccNsv: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto ccNsx; else goto ccNsw;
       ccNsx: // global
           HpAlloc = 80;
           goto ccNsu;
       ccNsu: // global
           R2 = _scLRp::P64;
           R1 = _scLSF::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNsw: // global
           _scLR7::P64 = P64[_scLSF::P64 + 7];
           _scLRb::P64 = P64[_scLSF::P64 + 15];
           _scLRd::P64 = P64[_scLSF::P64 + 23];
           _scLRf::P64 = P64[_scLSF::P64 + 31];
           _scLRh::P64 = P64[_scLSF::P64 + 39];
           _scLRj::P64 = P64[_scLSF::P64 + 47];
           _scLRl::P64 = P64[_scLSF::P64 + 55];
           _scLRn::P64 = P64[_scLSF::P64 + 63];
           I64[Hp - 72] = sat_scLSC_info;
           P64[Hp - 64] = _scLR7::P64;
           P64[Hp - 56] = _scLRb::P64;
           P64[Hp - 48] = _scLRd::P64;
           P64[Hp - 40] = _scLRf::P64;
           P64[Hp - 32] = _scLRh::P64;
           P64[Hp - 24] = _scLRj::P64;
           P64[Hp - 16] = _scLRl::P64;
           P64[Hp - 8] = _scLRn::P64;
           P64[Hp] = _scLRp::P64;
           I64[Sp - 8] = block_ccNsq_info;
           R3 = Hp - 71;
           R2 = lvl40_rcHqi_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLSF_info" {
     sat_scLSF_info:
         const sat_scLSF_entry;
         const 8;
         const 18446744069414584328;
         const 4294967301;
         const ucNvc_srtd;
 },
 _ccNsq() //  [R1]
         { []
         }
     {offset
       ccNsq: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccNsA; else goto ccNsz;
       ccNsA: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccNsz: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccNsq_info" {
     block_ccNsq_info:
         const _ccNsq;
         const 0;
         const 30;
 },
 section ""relreadonly" . ucNvd_srtd" {
     ucNvd_srtd:
         const ScMjD_srt+104;
         const 46;
         const 70364449210745;
 },
 sat_scLSG_entry() //  [R1, R2]
         { []
         }
     {offset
       ccNsB: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto ccNsF; else goto ccNsE;
       ccNsF: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNsE: // global
           _scLR7::P64 = P64[R1 + 7];
           _scLRb::P64 = P64[R1 + 15];
           _scLRd::P64 = P64[R1 + 23];
           _scLRf::P64 = P64[R1 + 31];
           _scLRh::P64 = P64[R1 + 39];
           _scLRj::P64 = P64[R1 + 47];
           _scLRl::P64 = P64[R1 + 55];
           _scLRn::P64 = P64[R1 + 63];
           I64[Hp - 64] = sat_scLSF_info;
           P64[Hp - 56] = _scLR7::P64;
           P64[Hp - 48] = _scLRb::P64;
           P64[Hp - 40] = _scLRd::P64;
           P64[Hp - 32] = _scLRf::P64;
           P64[Hp - 24] = _scLRh::P64;
           P64[Hp - 16] = _scLRj::P64;
           P64[Hp - 8] = _scLRl::P64;
           P64[Hp] = _scLRn::P64;
           R5 = Hp - 63;
           R4 = n_rcHqf_closure+1;
           R3 = lvl46_rcHqo_closure+2;
           R2 = lvl86_rcHr6_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLSG_info" {
     sat_scLSG_info:
         const sat_scLSG_entry;
         const 8;
         const 18446744069414584328;
         const 4294967301;
         const ucNvd_srtd;
 },
 section ""relreadonly" . ucNve_srtd" {
     ucNve_srtd:
         const ScMjD_srt+104;
         const 46;
         const 70364449210745;
 },
 sat_scLSJ_entry() //  [R1, R2]
         { []
         }
     {offset
       ccNsJ: // global
           _scLRn::P64 = R2;
           _scLSJ::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto ccNsK; else goto ccNsL;
       ccNsL: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto ccNsN; else goto ccNsM;
       ccNsN: // global
           HpAlloc = 72;
           goto ccNsK;
       ccNsK: // global
           R2 = _scLRn::P64;
           R1 = _scLSJ::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNsM: // global
           _scLR7::P64 = P64[_scLSJ::P64 + 7];
           _scLRb::P64 = P64[_scLSJ::P64 + 15];
           _scLRd::P64 = P64[_scLSJ::P64 + 23];
           _scLRf::P64 = P64[_scLSJ::P64 + 31];
           _scLRh::P64 = P64[_scLSJ::P64 + 39];
           _scLRj::P64 = P64[_scLSJ::P64 + 47];
           _scLRl::P64 = P64[_scLSJ::P64 + 55];
           I64[Hp - 64] = sat_scLSG_info;
           P64[Hp - 56] = _scLR7::P64;
           P64[Hp - 48] = _scLRb::P64;
           P64[Hp - 40] = _scLRd::P64;
           P64[Hp - 32] = _scLRf::P64;
           P64[Hp - 24] = _scLRh::P64;
           P64[Hp - 16] = _scLRj::P64;
           P64[Hp - 8] = _scLRl::P64;
           P64[Hp] = _scLRn::P64;
           I64[Sp - 8] = block_ccNsG_info;
           R3 = Hp - 63;
           R2 = lvl40_rcHqi_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLSJ_info" {
     sat_scLSJ_info:
         const sat_scLSJ_entry;
         const 7;
         const 18446744069414584328;
         const 4294967301;
         const ucNve_srtd;
 },
 _ccNsG() //  [R1]
         { []
         }
     {offset
       ccNsG: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccNsQ; else goto ccNsP;
       ccNsQ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccNsP: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccNsG_info" {
     block_ccNsG_info:
         const _ccNsG;
         const 0;
         const 30;
 },
 section ""relreadonly" . ucNvf_srtd" {
     ucNvf_srtd:
         const ScMjD_srt+104;
         const 47;
         const 140733193388409;
 },
 sat_scLSK_entry() //  [R1, R2]
         { []
         }
     {offset
       ccNsR: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto ccNsV; else goto ccNsU;
       ccNsV: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNsU: // global
           _scLR7::P64 = P64[R1 + 7];
           _scLRb::P64 = P64[R1 + 15];
           _scLRd::P64 = P64[R1 + 23];
           _scLRf::P64 = P64[R1 + 31];
           _scLRh::P64 = P64[R1 + 39];
           _scLRj::P64 = P64[R1 + 47];
           _scLRl::P64 = P64[R1 + 55];
           I64[Hp - 56] = sat_scLSJ_info;
           P64[Hp - 48] = _scLR7::P64;
           P64[Hp - 40] = _scLRb::P64;
           P64[Hp - 32] = _scLRd::P64;
           P64[Hp - 24] = _scLRf::P64;
           P64[Hp - 16] = _scLRh::P64;
           P64[Hp - 8] = _scLRj::P64;
           P64[Hp] = _scLRl::P64;
           R5 = Hp - 55;
           R4 = n_rcHqf_closure+1;
           R3 = lvl46_rcHqo_closure+2;
           R2 = lvl84_rcHr4_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLSK_info" {
     sat_scLSK_info:
         const sat_scLSK_entry;
         const 7;
         const 18446744069414584328;
         const 4294967301;
         const ucNvf_srtd;
 },
 section ""relreadonly" . ucNvg_srtd" {
     ucNvg_srtd:
         const ScMjD_srt+104;
         const 47;
         const 140733193388409;
 },
 sat_scLSN_entry() //  [R1, R2]
         { []
         }
     {offset
       ccNsZ: // global
           _scLRl::P64 = R2;
           _scLSN::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto ccNt0; else goto ccNt1;
       ccNt1: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto ccNt3; else goto ccNt2;
       ccNt3: // global
           HpAlloc = 64;
           goto ccNt0;
       ccNt0: // global
           R2 = _scLRl::P64;
           R1 = _scLSN::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNt2: // global
           _scLR7::P64 = P64[_scLSN::P64 + 7];
           _scLRb::P64 = P64[_scLSN::P64 + 15];
           _scLRd::P64 = P64[_scLSN::P64 + 23];
           _scLRf::P64 = P64[_scLSN::P64 + 31];
           _scLRh::P64 = P64[_scLSN::P64 + 39];
           _scLRj::P64 = P64[_scLSN::P64 + 47];
           I64[Hp - 56] = sat_scLSK_info;
           P64[Hp - 48] = _scLR7::P64;
           P64[Hp - 40] = _scLRb::P64;
           P64[Hp - 32] = _scLRd::P64;
           P64[Hp - 24] = _scLRf::P64;
           P64[Hp - 16] = _scLRh::P64;
           P64[Hp - 8] = _scLRj::P64;
           P64[Hp] = _scLRl::P64;
           I64[Sp - 8] = block_ccNsW_info;
           R3 = Hp - 55;
           R2 = lvl40_rcHqi_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLSN_info" {
     sat_scLSN_info:
         const sat_scLSN_entry;
         const 6;
         const 18446744069414584328;
         const 4294967301;
         const ucNvg_srtd;
 },
 _ccNsW() //  [R1]
         { []
         }
     {offset
       ccNsW: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccNt6; else goto ccNt5;
       ccNt6: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccNt5: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccNsW_info" {
     block_ccNsW_info:
         const _ccNsW;
         const 0;
         const 30;
 },
 section ""relreadonly" . ucNvh_srtd" {
     ucNvh_srtd:
         const ScMjD_srt+104;
         const 48;
         const 281470681743737;
 },
 sat_scLSO_entry() //  [R1, R2]
         { []
         }
     {offset
       ccNt7: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto ccNtb; else goto ccNta;
       ccNtb: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNta: // global
           _scLR7::P64 = P64[R1 + 7];
           _scLRb::P64 = P64[R1 + 15];
           _scLRd::P64 = P64[R1 + 23];
           _scLRf::P64 = P64[R1 + 31];
           _scLRh::P64 = P64[R1 + 39];
           _scLRj::P64 = P64[R1 + 47];
           I64[Hp - 48] = sat_scLSN_info;
           P64[Hp - 40] = _scLR7::P64;
           P64[Hp - 32] = _scLRb::P64;
           P64[Hp - 24] = _scLRd::P64;
           P64[Hp - 16] = _scLRf::P64;
           P64[Hp - 8] = _scLRh::P64;
           P64[Hp] = _scLRj::P64;
           R5 = Hp - 47;
           R4 = n_rcHqf_closure+1;
           R3 = lvl46_rcHqo_closure+2;
           R2 = lvl82_rcHr2_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLSO_info" {
     sat_scLSO_info:
         const sat_scLSO_entry;
         const 6;
         const 18446744069414584328;
         const 4294967301;
         const ucNvh_srtd;
 },
 section ""relreadonly" . ucNvi_srtd" {
     ucNvi_srtd:
         const ScMjD_srt+104;
         const 48;
         const 281470681743737;
 },
 sat_scLSR_entry() //  [R1, R2]
         { []
         }
     {offset
       ccNtf: // global
           _scLRj::P64 = R2;
           _scLSR::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto ccNtg; else goto ccNth;
       ccNth: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto ccNtj; else goto ccNti;
       ccNtj: // global
           HpAlloc = 56;
           goto ccNtg;
       ccNtg: // global
           R2 = _scLRj::P64;
           R1 = _scLSR::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNti: // global
           _scLR7::P64 = P64[_scLSR::P64 + 7];
           _scLRb::P64 = P64[_scLSR::P64 + 15];
           _scLRd::P64 = P64[_scLSR::P64 + 23];
           _scLRf::P64 = P64[_scLSR::P64 + 31];
           _scLRh::P64 = P64[_scLSR::P64 + 39];
           I64[Hp - 48] = sat_scLSO_info;
           P64[Hp - 40] = _scLR7::P64;
           P64[Hp - 32] = _scLRb::P64;
           P64[Hp - 24] = _scLRd::P64;
           P64[Hp - 16] = _scLRf::P64;
           P64[Hp - 8] = _scLRh::P64;
           P64[Hp] = _scLRj::P64;
           I64[Sp - 8] = block_ccNtc_info;
           R3 = Hp - 47;
           R2 = lvl40_rcHqi_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLSR_info" {
     sat_scLSR_info:
         const sat_scLSR_entry;
         const 5;
         const 18446744069414584328;
         const 4294967301;
         const ucNvi_srtd;
 },
 _ccNtc() //  [R1]
         { []
         }
     {offset
       ccNtc: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccNtm; else goto ccNtl;
       ccNtm: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccNtl: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccNtc_info" {
     block_ccNtc_info:
         const _ccNtc;
         const 0;
         const 30;
 },
 section ""relreadonly" . ucNvj_srtd" {
     ucNvj_srtd:
         const ScMjD_srt+104;
         const 49;
         const 562945658454393;
 },
 sat_scLSS_entry() //  [R1, R2]
         { []
         }
     {offset
       ccNtn: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccNtr; else goto ccNtq;
       ccNtr: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNtq: // global
           _scLR7::P64 = P64[R1 + 7];
           _scLRb::P64 = P64[R1 + 15];
           _scLRd::P64 = P64[R1 + 23];
           _scLRf::P64 = P64[R1 + 31];
           _scLRh::P64 = P64[R1 + 39];
           I64[Hp - 40] = sat_scLSR_info;
           P64[Hp - 32] = _scLR7::P64;
           P64[Hp - 24] = _scLRb::P64;
           P64[Hp - 16] = _scLRd::P64;
           P64[Hp - 8] = _scLRf::P64;
           P64[Hp] = _scLRh::P64;
           R5 = Hp - 39;
           R4 = n_rcHqf_closure+1;
           R3 = lvl46_rcHqo_closure+2;
           R2 = lvl80_rcHr0_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLSS_info" {
     sat_scLSS_info:
         const sat_scLSS_entry;
         const 5;
         const 18446744069414584328;
         const 4294967301;
         const ucNvj_srtd;
 },
 section ""relreadonly" . ucNvk_srtd" {
     ucNvk_srtd:
         const ScMjD_srt+104;
         const 49;
         const 562945658454393;
 },
 sat_scLSV_entry() //  [R1, R2]
         { []
         }
     {offset
       ccNtv: // global
           _scLRh::P64 = R2;
           _scLSV::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto ccNtw; else goto ccNtx;
       ccNtx: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto ccNtz; else goto ccNty;
       ccNtz: // global
           HpAlloc = 48;
           goto ccNtw;
       ccNtw: // global
           R2 = _scLRh::P64;
           R1 = _scLSV::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNty: // global
           _scLR7::P64 = P64[_scLSV::P64 + 7];
           _scLRb::P64 = P64[_scLSV::P64 + 15];
           _scLRd::P64 = P64[_scLSV::P64 + 23];
           _scLRf::P64 = P64[_scLSV::P64 + 31];
           I64[Hp - 40] = sat_scLSS_info;
           P64[Hp - 32] = _scLR7::P64;
           P64[Hp - 24] = _scLRb::P64;
           P64[Hp - 16] = _scLRd::P64;
           P64[Hp - 8] = _scLRf::P64;
           P64[Hp] = _scLRh::P64;
           I64[Sp - 8] = block_ccNts_info;
           R3 = Hp - 39;
           R2 = lvl40_rcHqi_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLSV_info" {
     sat_scLSV_info:
         const sat_scLSV_entry;
         const 4;
         const 18446744069414584328;
         const 4294967301;
         const ucNvk_srtd;
 },
 _ccNts() //  [R1]
         { []
         }
     {offset
       ccNts: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccNtC; else goto ccNtB;
       ccNtC: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccNtB: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccNts_info" {
     block_ccNts_info:
         const _ccNts;
         const 0;
         const 30;
 },
 section ""relreadonly" . ucNvl_srtd" {
     ucNvl_srtd:
         const ScMjD_srt+104;
         const 50;
         const 1125895611875705;
 },
 sat_scLSW_entry() //  [R1, R2]
         { []
         }
     {offset
       ccNtD: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccNtH; else goto ccNtG;
       ccNtH: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNtG: // global
           _scLR7::P64 = P64[R1 + 7];
           _scLRb::P64 = P64[R1 + 15];
           _scLRd::P64 = P64[R1 + 23];
           _scLRf::P64 = P64[R1 + 31];
           I64[Hp - 32] = sat_scLSV_info;
           P64[Hp - 24] = _scLR7::P64;
           P64[Hp - 16] = _scLRb::P64;
           P64[Hp - 8] = _scLRd::P64;
           P64[Hp] = _scLRf::P64;
           R5 = Hp - 31;
           R4 = n_rcHqf_closure+1;
           R3 = lvl46_rcHqo_closure+2;
           R2 = lvl78_rcHqY_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLSW_info" {
     sat_scLSW_info:
         const sat_scLSW_entry;
         const 4;
         const 18446744069414584328;
         const 4294967301;
         const ucNvl_srtd;
 },
 section ""relreadonly" . ucNvm_srtd" {
     ucNvm_srtd:
         const ScMjD_srt+104;
         const 50;
         const 1125895611875705;
 },
 sat_scLSZ_entry() //  [R1, R2]
         { []
         }
     {offset
       ccNtL: // global
           _scLRf::P64 = R2;
           _scLSZ::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto ccNtM; else goto ccNtN;
       ccNtN: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto ccNtP; else goto ccNtO;
       ccNtP: // global
           HpAlloc = 40;
           goto ccNtM;
       ccNtM: // global
           R2 = _scLRf::P64;
           R1 = _scLSZ::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNtO: // global
           _scLR7::P64 = P64[_scLSZ::P64 + 7];
           _scLRb::P64 = P64[_scLSZ::P64 + 15];
           _scLRd::P64 = P64[_scLSZ::P64 + 23];
           I64[Hp - 32] = sat_scLSW_info;
           P64[Hp - 24] = _scLR7::P64;
           P64[Hp - 16] = _scLRb::P64;
           P64[Hp - 8] = _scLRd::P64;
           P64[Hp] = _scLRf::P64;
           I64[Sp - 8] = block_ccNtI_info;
           R3 = Hp - 31;
           R2 = lvl40_rcHqi_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLSZ_info" {
     sat_scLSZ_info:
         const sat_scLSZ_entry;
         const 3;
         const 18446744069414584328;
         const 4294967301;
         const ucNvm_srtd;
 },
 _ccNtI() //  [R1]
         { []
         }
     {offset
       ccNtI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccNtS; else goto ccNtR;
       ccNtS: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccNtR: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccNtI_info" {
     block_ccNtI_info:
         const _ccNtI;
         const 0;
         const 30;
 },
 section ""relreadonly" . ucNvn_srtd" {
     ucNvn_srtd:
         const ScMjD_srt+104;
         const 51;
         const 2251795518718329;
 },
 sat_scLT0_entry() //  [R1, R2]
         { []
         }
     {offset
       ccNtT: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccNtX; else goto ccNtW;
       ccNtX: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNtW: // global
           _scLR7::P64 = P64[R1 + 7];
           _scLRb::P64 = P64[R1 + 15];
           _scLRd::P64 = P64[R1 + 23];
           I64[Hp - 24] = sat_scLSZ_info;
           P64[Hp - 16] = _scLR7::P64;
           P64[Hp - 8] = _scLRb::P64;
           P64[Hp] = _scLRd::P64;
           R5 = Hp - 23;
           R4 = n_rcHqf_closure+1;
           R3 = lvl46_rcHqo_closure+2;
           R2 = lvl76_rcHqW_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLT0_info" {
     sat_scLT0_info:
         const sat_scLT0_entry;
         const 3;
         const 18446744069414584328;
         const 4294967301;
         const ucNvn_srtd;
 },
 section ""relreadonly" . ucNvo_srtd" {
     ucNvo_srtd:
         const ScMjD_srt+104;
         const 51;
         const 2251795518718329;
 },
 sat_scLT3_entry() //  [R1, R2]
         { []
         }
     {offset
       ccNu1: // global
           _scLRd::P64 = R2;
           _scLT3::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto ccNu2; else goto ccNu3;
       ccNu3: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto ccNu5; else goto ccNu4;
       ccNu5: // global
           HpAlloc = 32;
           goto ccNu2;
       ccNu2: // global
           R2 = _scLRd::P64;
           R1 = _scLT3::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNu4: // global
           _scLR7::P64 = P64[_scLT3::P64 + 7];
           _scLRb::P64 = P64[_scLT3::P64 + 15];
           I64[Hp - 24] = sat_scLT0_info;
           P64[Hp - 16] = _scLR7::P64;
           P64[Hp - 8] = _scLRb::P64;
           P64[Hp] = _scLRd::P64;
           I64[Sp - 8] = block_ccNtY_info;
           R3 = Hp - 23;
           R2 = lvl40_rcHqi_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLT3_info" {
     sat_scLT3_info:
         const sat_scLT3_entry;
         const 2;
         const 18446744069414584331;
         const 4294967301;
         const ucNvo_srtd;
 },
 _ccNtY() //  [R1]
         { []
         }
     {offset
       ccNtY: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccNu8; else goto ccNu7;
       ccNu8: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccNu7: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccNtY_info" {
     block_ccNtY_info:
         const _ccNtY;
         const 0;
         const 30;
 },
 section ""relreadonly" . ucNvp_srtd" {
     ucNvp_srtd:
         const ScMjD_srt+80;
         const 55;
         const 36028762659228617;
 },
 sat_scLT4_entry() //  [R1, R2]
         { []
         }
     {offset
       ccNu9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccNud; else goto ccNuc;
       ccNud: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNuc: // global
           _scLR7::P64 = P64[R1 + 7];
           _scLRb::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_scLT3_info;
           P64[Hp - 8] = _scLR7::P64;
           P64[Hp] = _scLRb::P64;
           R5 = Hp - 15;
           R4 = n_rcHqf_closure+1;
           R3 = ds2_rcHqe_closure+2;
           R2 = lvl74_rcHqU_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLT4_info" {
     sat_scLT4_info:
         const sat_scLT4_entry;
         const 2;
         const 18446744069414584331;
         const 4294967301;
         const ucNvp_srtd;
 },
 section ""relreadonly" . ucNvq_srtd" {
     ucNvq_srtd:
         const ScMjD_srt+80;
         const 55;
         const 36028762659228617;
 },
 sat_scLT7_entry() //  [R1, R2]
         { []
         }
     {offset
       ccNuh: // global
           _scLRb::P64 = R2;
           _scLT7::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto ccNui; else goto ccNuj;
       ccNuj: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccNul; else goto ccNuk;
       ccNul: // global
           HpAlloc = 24;
           goto ccNui;
       ccNui: // global
           R2 = _scLRb::P64;
           R1 = _scLT7::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNuk: // global
           _scLR7::P64 = P64[_scLT7::P64 + 7];
           I64[Hp - 16] = sat_scLT4_info;
           P64[Hp - 8] = _scLR7::P64;
           P64[Hp] = _scLRb::P64;
           I64[Sp - 8] = block_ccNue_info;
           R3 = Hp - 15;
           R2 = lvl40_rcHqi_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLT7_info" {
     sat_scLT7_info:
         const sat_scLT7_entry;
         const 1;
         const 18446744069414584329;
         const 4294967301;
         const ucNvq_srtd;
 },
 _ccNue() //  [R1]
         { []
         }
     {offset
       ccNue: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccNuo; else goto ccNun;
       ccNuo: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccNun: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccNue_info" {
     block_ccNue_info:
         const _ccNue;
         const 0;
         const 30;
 },
 section ""relreadonly" . ucNvr_srtd" {
     ucNvr_srtd:
         const ScMjD_srt+80;
         const 56;
         const 72057559678192585;
 },
 sat_scLT8_entry() //  [R1, R2]
         { []
         }
     {offset
       ccNup: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccNut; else goto ccNus;
       ccNut: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNus: // global
           _scLR7::P64 = P64[R1 + 7];
           I64[Hp - 8] = sat_scLT7_info;
           P64[Hp] = _scLR7::P64;
           R5 = Hp - 7;
           R4 = n_rcHqf_closure+1;
           R3 = ds2_rcHqe_closure+2;
           R2 = ds4_rcHqS_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLT8_info" {
     sat_scLT8_info:
         const sat_scLT8_entry;
         const 1;
         const 18446744069414584329;
         const 4294967301;
         const ucNvr_srtd;
 },
 section ""relreadonly" . ucNvs_srtd" {
     ucNvs_srtd:
         const ScMjD_srt+80;
         const 56;
         const 72057559711747017;
 },
 sat_scLTb_entry() //  [R1, R2]
         { []
         }
     {offset
       ccNux: // global
           _scLR9::P64 = R2;
           _scLTb::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto ccNuy; else goto ccNuz;
       ccNuz: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccNuB; else goto ccNuA;
       ccNuB: // global
           HpAlloc = 16;
           goto ccNuy;
       ccNuy: // global
           R2 = _scLR9::P64;
           R1 = _scLTb::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNuA: // global
           _scLR7::P64 = P64[_scLTb::P64 + 7];
           I64[Hp - 8] = sat_scLT8_info;
           P64[Hp] = _scLR7::P64;
           I64[Sp - 8] = block_ccNuu_info;
           R3 = Hp - 7;
           R2 = lexeme4_rcHqa_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_scLTb_info" {
     sat_scLTb_info:
         const sat_scLTb_entry;
         const 1;
         const 18446744069414584329;
         const 4294967301;
         const ucNvs_srtd;
 },
 _ccNuu() //  [R1]
         { []
         }
     {offset
       ccNuu: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccNuE; else goto ccNuD;
       ccNuE: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccNuD: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccNuu_info" {
     block_ccNuu_info:
         const _ccNuu;
         const 0;
         const 30;
 },
 section ""relreadonly" . ucNvt_srtd" {
     ucNvt_srtd:
         const ScMjD_srt+80;
         const 58;
         const 288230341825530825;
 },
 GHC.Stats.$w$creadPrec1_entry() //  [R2, R3]
         { []
         }
     {offset
       ccNuI: // global
           _scLR7::P64 = R3;
           _scLR6::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto ccNuJ; else goto ccNuK;
       ccNuK: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccNuM; else goto ccNuL;
       ccNuM: // global
           HpAlloc = 16;
           goto ccNuJ;
       ccNuJ: // global
           R3 = _scLR7::P64;
           R2 = _scLR6::I64;
           R1 = GHC.Stats.$w$creadPrec1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccNuL: // global
           if (%MO_S_Gt_W64(_scLR6::I64, 11)) goto ccNuG; else goto ccNuH;
       ccNuG: // global
           Hp = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ccNuH: // global
           I64[Hp - 8] = sat_scLTb_info;
           P64[Hp] = _scLR7::P64;
           I64[Sp - 8] = block_ccNuN_info;
           R3 = Hp - 7;
           R2 = lexeme6_rcHqQ_closure+4;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.$w$creadPrec1_info" {
     GHC.Stats.$w$creadPrec1_info:
         const GHC.Stats.$w$creadPrec1_entry;
         const 0;
         const 18446744069414584334;
         const 8589934605;
         const ucNvt_srtd;
 },
 _ccNuN() //  [R1]
         { []
         }
     {offset
       ccNuN: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto ccNuS; else goto ccNuR;
       ccNuS: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       ccNuR: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccNuN_info" {
     block_ccNuN_info:
         const _ccNuN;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.327169169 UTC

[section ""data" . GHC.Stats.$fReadRTSStats2_closure" {
     GHC.Stats.$fReadRTSStats2_closure:
         const GHC.Stats.$fReadRTSStats2_info;
         const 0;
 },
 GHC.Stats.$fReadRTSStats2_entry() //  [R2, R3]
         { []
         }
     {offset
       ccNBv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccNBw; else goto ccNBx;
       ccNBw: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Stats.$fReadRTSStats2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       ccNBx: // global
           I64[Sp - 16] = block_ccNBs_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ucNBB; else goto ccNBt;
       ucNBB: // global
           call _ccNBs(R1) args: 0, res: 0, upd: 0;
       ccNBt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.$fReadRTSStats2_info" {
     GHC.Stats.$fReadRTSStats2_info:
         const GHC.Stats.$fReadRTSStats2_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const ScMjD_srt+528;
 },
 _ccNBs() //  [R1]
         { []
         }
     {offset
       ccNBs: // global
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Stats.$w$creadPrec1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccNBs_info" {
     block_ccNBs_info:
         const _ccNBs;
         const 1;
         const 4294967326;
         const ScMjD_srt+528;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.332140768 UTC

[section ""data" . GHC.Stats.$fReadRTSStats1_closure" {
     GHC.Stats.$fReadRTSStats1_closure:
         const GHC.Stats.$fReadRTSStats1_info;
         const 0;
 },
 GHC.Stats.$fReadRTSStats1_entry() //  [R2, R3]
         { []
         }
     {offset
       ccNBQ: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Stats.$fReadRTSStats2_closure+2;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.$fReadRTSStats1_info" {
     GHC.Stats.$fReadRTSStats1_info:
         const GHC.Stats.$fReadRTSStats1_entry;
         const 0;
         const 2305843013508661262;
         const 8589934607;
         const ScMjD_srt+312;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.33601631 UTC

[section ""data" . GHC.Stats.$fReadRTSStats_$creadsPrec_closure" {
     GHC.Stats.$fReadRTSStats_$creadsPrec_closure:
         const GHC.Stats.$fReadRTSStats_$creadsPrec_info;
         const 0;
 },
 sat_scLTj_entry() //  [R1]
         { []
         }
     {offset
       ccNC5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccNC6; else goto ccNC7;
       ccNC6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccNC7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = P64[R1 + 16];
           R2 = GHC.Stats.$fReadRTSStats2_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list3_entry(R4, R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scLTj_info" {
     sat_scLTj_info:
         const sat_scLTj_entry;
         const 1;
         const 2305843013508661264;
         const ScMjD_srt+312;
 },
 GHC.Stats.$fReadRTSStats_$creadsPrec_entry() //  [R2]
         { []
         }
     {offset
       ccNC8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccNCc; else goto ccNCb;
       ccNCc: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Stats.$fReadRTSStats_$creadsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNCb: // global
           I64[Hp - 16] = sat_scLTj_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.$fReadRTSStats_$creadsPrec_info" {
     GHC.Stats.$fReadRTSStats_$creadsPrec_info:
         const GHC.Stats.$fReadRTSStats_$creadsPrec_entry;
         const 0;
         const 6917529031936049166;
         const 4294967301;
         const ScMjD_srt+312;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.342270187 UTC

[section ""data" . GHC.Stats.$fReadRTSStats_$creadListPrec_closure" {
     GHC.Stats.$fReadRTSStats_$creadListPrec_closure:
         const GHC.Stats.$fReadRTSStats_$creadListPrec_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Stats.$fReadRTSStats_$creadListPrec_entry() //  [R1]
         { []
         }
     {offset
       ccNCv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccNCw; else goto ccNCx;
       ccNCw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccNCx: // global
           (_ccNCs::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccNCs::I64 == 0) goto ccNCu; else goto ccNCt;
       ccNCu: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccNCt: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccNCs::I64;
           R2 = GHC.Stats.$fReadRTSStats1_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Stats.$fReadRTSStats_$creadListPrec_info" {
     GHC.Stats.$fReadRTSStats_$creadListPrec_info:
         const GHC.Stats.$fReadRTSStats_$creadListPrec_entry;
         const 0;
         const 2305843013508661269;
         const ScMjD_srt+328;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.346330268 UTC

[section ""data" . GHC.Stats.$fReadRTSStats3_closure" {
     GHC.Stats.$fReadRTSStats3_closure:
         const GHC.Stats.$fReadRTSStats3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Stats.$fReadRTSStats3_entry() //  [R1]
         { []
         }
     {offset
       ccNCM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccNCN; else goto ccNCO;
       ccNCN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccNCO: // global
           (_ccNCJ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccNCJ::I64 == 0) goto ccNCL; else goto ccNCK;
       ccNCL: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccNCK: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccNCJ::I64;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = GHC.Read.$fRead()7_closure;
           R1 = GHC.Stats.$fReadRTSStats_$creadListPrec_closure;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Stats.$fReadRTSStats3_info" {
     GHC.Stats.$fReadRTSStats3_info:
         const GHC.Stats.$fReadRTSStats3_entry;
         const 0;
         const 4294967317;
         const ScMjD_srt+568;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.350661703 UTC

[section ""data" . GHC.Stats.$fReadRTSStats_$creadList_closure" {
     GHC.Stats.$fReadRTSStats_$creadList_closure:
         const GHC.Stats.$fReadRTSStats_$creadList_info;
         const 0;
 },
 GHC.Stats.$fReadRTSStats_$creadList_entry() //  [R2]
         { []
         }
     {offset
       ccND2: // global
           R3 = R2;
           R2 = GHC.Stats.$fReadRTSStats3_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.$fReadRTSStats_$creadList_info" {
     GHC.Stats.$fReadRTSStats_$creadList_info:
         const GHC.Stats.$fReadRTSStats_$creadList_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const ScMjD_srt+576;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.353852741 UTC

[section ""data" . GHC.Stats.$fReadRTSStats_closure" {
     GHC.Stats.$fReadRTSStats_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.Stats.$fReadRTSStats_$creadsPrec_closure+1;
         const GHC.Stats.$fReadRTSStats_$creadList_closure+1;
         const GHC.Stats.$fReadRTSStats1_closure+2;
         const GHC.Stats.$fReadRTSStats_$creadListPrec_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.356316931 UTC

[section ""data" . GHC.Stats.gcdetails_elapsed_ns_closure" {
     GHC.Stats.gcdetails_elapsed_ns_closure:
         const GHC.Stats.gcdetails_elapsed_ns_info;
 },
 GHC.Stats.gcdetails_elapsed_ns_entry() //  [R2]
         { []
         }
     {offset
       ccNDh: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccNDi; else goto ccNDj;
       ccNDi: // global
           R2 = R2;
           R1 = GHC.Stats.gcdetails_elapsed_ns_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNDj: // global
           I64[Sp - 8] = block_ccNDe_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucNDn; else goto ccNDf;
       ucNDn: // global
           call _ccNDe(R1) args: 0, res: 0, upd: 0;
       ccNDf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.gcdetails_elapsed_ns_info" {
     GHC.Stats.gcdetails_elapsed_ns_info:
         const GHC.Stats.gcdetails_elapsed_ns_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccNDe() //  [R1]
         { []
         }
     {offset
       ccNDe: // global
           R1 = P64[R1 + 111] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccNDe_info" {
     block_ccNDe_info:
         const _ccNDe;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.361758208 UTC

[section ""data" . GHC.Stats.gcdetails_cpu_ns_closure" {
     GHC.Stats.gcdetails_cpu_ns_closure:
         const GHC.Stats.gcdetails_cpu_ns_info;
 },
 GHC.Stats.gcdetails_cpu_ns_entry() //  [R2]
         { []
         }
     {offset
       ccNDH: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccNDI; else goto ccNDJ;
       ccNDI: // global
           R2 = R2;
           R1 = GHC.Stats.gcdetails_cpu_ns_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNDJ: // global
           I64[Sp - 8] = block_ccNDE_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucNDN; else goto ccNDF;
       ucNDN: // global
           call _ccNDE(R1) args: 0, res: 0, upd: 0;
       ccNDF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.gcdetails_cpu_ns_info" {
     GHC.Stats.gcdetails_cpu_ns_info:
         const GHC.Stats.gcdetails_cpu_ns_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccNDE() //  [R1]
         { []
         }
     {offset
       ccNDE: // global
           R1 = P64[R1 + 103] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccNDE_info" {
     block_ccNDE_info:
         const _ccNDE;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.367095202 UTC

[section ""data" . GHC.Stats.gcdetails_sync_elapsed_ns_closure" {
     GHC.Stats.gcdetails_sync_elapsed_ns_closure:
         const GHC.Stats.gcdetails_sync_elapsed_ns_info;
 },
 GHC.Stats.gcdetails_sync_elapsed_ns_entry() //  [R2]
         { []
         }
     {offset
       ccNE7: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccNE8; else goto ccNE9;
       ccNE8: // global
           R2 = R2;
           R1 = GHC.Stats.gcdetails_sync_elapsed_ns_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNE9: // global
           I64[Sp - 8] = block_ccNE4_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucNEd; else goto ccNE5;
       ucNEd: // global
           call _ccNE4(R1) args: 0, res: 0, upd: 0;
       ccNE5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.gcdetails_sync_elapsed_ns_info" {
     GHC.Stats.gcdetails_sync_elapsed_ns_info:
         const GHC.Stats.gcdetails_sync_elapsed_ns_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccNE4() //  [R1]
         { []
         }
     {offset
       ccNE4: // global
           R1 = P64[R1 + 95] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccNE4_info" {
     block_ccNE4_info:
         const _ccNE4;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.373484045 UTC

[section ""data" . GHC.Stats.gcdetails_par_balanced_copied_bytes_closure" {
     GHC.Stats.gcdetails_par_balanced_copied_bytes_closure:
         const GHC.Stats.gcdetails_par_balanced_copied_bytes_info;
 },
 GHC.Stats.gcdetails_par_balanced_copied_bytes_entry() //  [R2]
         { []
         }
     {offset
       ccNEx: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccNEy; else goto ccNEz;
       ccNEy: // global
           R2 = R2;
           R1 = GHC.Stats.gcdetails_par_balanced_copied_bytes_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNEz: // global
           I64[Sp - 8] = block_ccNEu_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucNED; else goto ccNEv;
       ucNED: // global
           call _ccNEu(R1) args: 0, res: 0, upd: 0;
       ccNEv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.gcdetails_par_balanced_copied_bytes_info" {
     GHC.Stats.gcdetails_par_balanced_copied_bytes_info:
         const GHC.Stats.gcdetails_par_balanced_copied_bytes_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccNEu() //  [R1]
         { []
         }
     {offset
       ccNEu: // global
           R1 = P64[R1 + 87] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccNEu_info" {
     block_ccNEu_info:
         const _ccNEu;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.378735034 UTC

[section ""data" . GHC.Stats.gcdetails_par_max_copied_bytes_closure" {
     GHC.Stats.gcdetails_par_max_copied_bytes_closure:
         const GHC.Stats.gcdetails_par_max_copied_bytes_info;
 },
 GHC.Stats.gcdetails_par_max_copied_bytes_entry() //  [R2]
         { []
         }
     {offset
       ccNEX: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccNEY; else goto ccNEZ;
       ccNEY: // global
           R2 = R2;
           R1 = GHC.Stats.gcdetails_par_max_copied_bytes_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNEZ: // global
           I64[Sp - 8] = block_ccNEU_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucNF3; else goto ccNEV;
       ucNF3: // global
           call _ccNEU(R1) args: 0, res: 0, upd: 0;
       ccNEV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.gcdetails_par_max_copied_bytes_info" {
     GHC.Stats.gcdetails_par_max_copied_bytes_info:
         const GHC.Stats.gcdetails_par_max_copied_bytes_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccNEU() //  [R1]
         { []
         }
     {offset
       ccNEU: // global
           R1 = P64[R1 + 79] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccNEU_info" {
     block_ccNEU_info:
         const _ccNEU;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.384124885 UTC

[section ""data" . GHC.Stats.gcdetails_copied_bytes_closure" {
     GHC.Stats.gcdetails_copied_bytes_closure:
         const GHC.Stats.gcdetails_copied_bytes_info;
 },
 GHC.Stats.gcdetails_copied_bytes_entry() //  [R2]
         { []
         }
     {offset
       ccNFn: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccNFo; else goto ccNFp;
       ccNFo: // global
           R2 = R2;
           R1 = GHC.Stats.gcdetails_copied_bytes_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNFp: // global
           I64[Sp - 8] = block_ccNFk_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucNFt; else goto ccNFl;
       ucNFt: // global
           call _ccNFk(R1) args: 0, res: 0, upd: 0;
       ccNFl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.gcdetails_copied_bytes_info" {
     GHC.Stats.gcdetails_copied_bytes_info:
         const GHC.Stats.gcdetails_copied_bytes_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccNFk() //  [R1]
         { []
         }
     {offset
       ccNFk: // global
           R1 = P64[R1 + 71] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccNFk_info" {
     block_ccNFk_info:
         const _ccNFk;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.389884502 UTC

[section ""data" . GHC.Stats.gcdetails_mem_in_use_bytes_closure" {
     GHC.Stats.gcdetails_mem_in_use_bytes_closure:
         const GHC.Stats.gcdetails_mem_in_use_bytes_info;
 },
 GHC.Stats.gcdetails_mem_in_use_bytes_entry() //  [R2]
         { []
         }
     {offset
       ccNFN: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccNFO; else goto ccNFP;
       ccNFO: // global
           R2 = R2;
           R1 = GHC.Stats.gcdetails_mem_in_use_bytes_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNFP: // global
           I64[Sp - 8] = block_ccNFK_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucNFT; else goto ccNFL;
       ucNFT: // global
           call _ccNFK(R1) args: 0, res: 0, upd: 0;
       ccNFL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.gcdetails_mem_in_use_bytes_info" {
     GHC.Stats.gcdetails_mem_in_use_bytes_info:
         const GHC.Stats.gcdetails_mem_in_use_bytes_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccNFK() //  [R1]
         { []
         }
     {offset
       ccNFK: // global
           R1 = P64[R1 + 63] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccNFK_info" {
     block_ccNFK_info:
         const _ccNFK;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.395144323 UTC

[section ""data" . GHC.Stats.gcdetails_slop_bytes_closure" {
     GHC.Stats.gcdetails_slop_bytes_closure:
         const GHC.Stats.gcdetails_slop_bytes_info;
 },
 GHC.Stats.gcdetails_slop_bytes_entry() //  [R2]
         { []
         }
     {offset
       ccNGd: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccNGe; else goto ccNGf;
       ccNGe: // global
           R2 = R2;
           R1 = GHC.Stats.gcdetails_slop_bytes_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNGf: // global
           I64[Sp - 8] = block_ccNGa_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucNGj; else goto ccNGb;
       ucNGj: // global
           call _ccNGa(R1) args: 0, res: 0, upd: 0;
       ccNGb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.gcdetails_slop_bytes_info" {
     GHC.Stats.gcdetails_slop_bytes_info:
         const GHC.Stats.gcdetails_slop_bytes_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccNGa() //  [R1]
         { []
         }
     {offset
       ccNGa: // global
           R1 = P64[R1 + 55] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccNGa_info" {
     block_ccNGa_info:
         const _ccNGa;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.400435697 UTC

[section ""data" . GHC.Stats.gcdetails_compact_bytes_closure" {
     GHC.Stats.gcdetails_compact_bytes_closure:
         const GHC.Stats.gcdetails_compact_bytes_info;
 },
 GHC.Stats.gcdetails_compact_bytes_entry() //  [R2]
         { []
         }
     {offset
       ccNGD: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccNGE; else goto ccNGF;
       ccNGE: // global
           R2 = R2;
           R1 = GHC.Stats.gcdetails_compact_bytes_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNGF: // global
           I64[Sp - 8] = block_ccNGA_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucNGJ; else goto ccNGB;
       ucNGJ: // global
           call _ccNGA(R1) args: 0, res: 0, upd: 0;
       ccNGB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.gcdetails_compact_bytes_info" {
     GHC.Stats.gcdetails_compact_bytes_info:
         const GHC.Stats.gcdetails_compact_bytes_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccNGA() //  [R1]
         { []
         }
     {offset
       ccNGA: // global
           R1 = P64[R1 + 47] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccNGA_info" {
     block_ccNGA_info:
         const _ccNGA;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.406457904 UTC

[section ""data" . GHC.Stats.gcdetails_large_objects_bytes_closure" {
     GHC.Stats.gcdetails_large_objects_bytes_closure:
         const GHC.Stats.gcdetails_large_objects_bytes_info;
 },
 GHC.Stats.gcdetails_large_objects_bytes_entry() //  [R2]
         { []
         }
     {offset
       ccNH3: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccNH4; else goto ccNH5;
       ccNH4: // global
           R2 = R2;
           R1 = GHC.Stats.gcdetails_large_objects_bytes_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNH5: // global
           I64[Sp - 8] = block_ccNH0_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucNH9; else goto ccNH1;
       ucNH9: // global
           call _ccNH0(R1) args: 0, res: 0, upd: 0;
       ccNH1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.gcdetails_large_objects_bytes_info" {
     GHC.Stats.gcdetails_large_objects_bytes_info:
         const GHC.Stats.gcdetails_large_objects_bytes_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccNH0() //  [R1]
         { []
         }
     {offset
       ccNH0: // global
           R1 = P64[R1 + 39] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccNH0_info" {
     block_ccNH0_info:
         const _ccNH0;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.411770466 UTC

[section ""data" . GHC.Stats.gcdetails_live_bytes_closure" {
     GHC.Stats.gcdetails_live_bytes_closure:
         const GHC.Stats.gcdetails_live_bytes_info;
 },
 GHC.Stats.gcdetails_live_bytes_entry() //  [R2]
         { []
         }
     {offset
       ccNHt: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccNHu; else goto ccNHv;
       ccNHu: // global
           R2 = R2;
           R1 = GHC.Stats.gcdetails_live_bytes_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNHv: // global
           I64[Sp - 8] = block_ccNHq_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucNHz; else goto ccNHr;
       ucNHz: // global
           call _ccNHq(R1) args: 0, res: 0, upd: 0;
       ccNHr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.gcdetails_live_bytes_info" {
     GHC.Stats.gcdetails_live_bytes_info:
         const GHC.Stats.gcdetails_live_bytes_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccNHq() //  [R1]
         { []
         }
     {offset
       ccNHq: // global
           R1 = P64[R1 + 31] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccNHq_info" {
     block_ccNHq_info:
         const _ccNHq;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.418305578 UTC

[section ""data" . GHC.Stats.gcdetails_allocated_bytes_closure" {
     GHC.Stats.gcdetails_allocated_bytes_closure:
         const GHC.Stats.gcdetails_allocated_bytes_info;
 },
 GHC.Stats.gcdetails_allocated_bytes_entry() //  [R2]
         { []
         }
     {offset
       ccNHT: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccNHU; else goto ccNHV;
       ccNHU: // global
           R2 = R2;
           R1 = GHC.Stats.gcdetails_allocated_bytes_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNHV: // global
           I64[Sp - 8] = block_ccNHQ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucNHZ; else goto ccNHR;
       ucNHZ: // global
           call _ccNHQ(R1) args: 0, res: 0, upd: 0;
       ccNHR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.gcdetails_allocated_bytes_info" {
     GHC.Stats.gcdetails_allocated_bytes_info:
         const GHC.Stats.gcdetails_allocated_bytes_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccNHQ() //  [R1]
         { []
         }
     {offset
       ccNHQ: // global
           R1 = P64[R1 + 23] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccNHQ_info" {
     block_ccNHQ_info:
         const _ccNHQ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.424902095 UTC

[section ""data" . GHC.Stats.gcdetails_threads_closure" {
     GHC.Stats.gcdetails_threads_closure:
         const GHC.Stats.gcdetails_threads_info;
 },
 GHC.Stats.gcdetails_threads_entry() //  [R2]
         { []
         }
     {offset
       ccNIj: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccNIk; else goto ccNIl;
       ccNIk: // global
           R2 = R2;
           R1 = GHC.Stats.gcdetails_threads_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNIl: // global
           I64[Sp - 8] = block_ccNIg_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucNIp; else goto ccNIh;
       ucNIp: // global
           call _ccNIg(R1) args: 0, res: 0, upd: 0;
       ccNIh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.gcdetails_threads_info" {
     GHC.Stats.gcdetails_threads_info:
         const GHC.Stats.gcdetails_threads_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccNIg() //  [R1]
         { []
         }
     {offset
       ccNIg: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccNIg_info" {
     block_ccNIg_info:
         const _ccNIg;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.430576361 UTC

[section ""data" . GHC.Stats.gcdetails_gen_closure" {
     GHC.Stats.gcdetails_gen_closure:
         const GHC.Stats.gcdetails_gen_info;
 },
 GHC.Stats.gcdetails_gen_entry() //  [R2]
         { []
         }
     {offset
       ccNIJ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccNIK; else goto ccNIL;
       ccNIK: // global
           R2 = R2;
           R1 = GHC.Stats.gcdetails_gen_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNIL: // global
           I64[Sp - 8] = block_ccNIG_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucNIP; else goto ccNIH;
       ucNIP: // global
           call _ccNIG(R1) args: 0, res: 0, upd: 0;
       ccNIH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.gcdetails_gen_info" {
     GHC.Stats.gcdetails_gen_info:
         const GHC.Stats.gcdetails_gen_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccNIG() //  [R1]
         { []
         }
     {offset
       ccNIG: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccNIG_info" {
     block_ccNIG_info:
         const _ccNIG;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.43650342 UTC

[section ""data" . GHC.Stats.gc_closure" {
     GHC.Stats.gc_closure:
         const GHC.Stats.gc_info;
 },
 GHC.Stats.gc_entry() //  [R2]
         { []
         }
     {offset
       ccNJ9: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccNJa; else goto ccNJb;
       ccNJa: // global
           R2 = R2;
           R1 = GHC.Stats.gc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNJb: // global
           I64[Sp - 8] = block_ccNJ6_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucNJf; else goto ccNJ7;
       ucNJf: // global
           call _ccNJ6(R1) args: 0, res: 0, upd: 0;
       ccNJ7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.gc_info" {
     GHC.Stats.gc_info:
         const GHC.Stats.gc_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccNJ6() //  [R1]
         { []
         }
     {offset
       ccNJ6: // global
           R1 = P64[R1 + 159] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccNJ6_info" {
     block_ccNJ6_info:
         const _ccNJ6;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.442248125 UTC

[section ""data" . GHC.Stats.elapsed_ns_closure" {
     GHC.Stats.elapsed_ns_closure:
         const GHC.Stats.elapsed_ns_info;
 },
 GHC.Stats.elapsed_ns_entry() //  [R2]
         { []
         }
     {offset
       ccNJz: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccNJA; else goto ccNJB;
       ccNJA: // global
           R2 = R2;
           R1 = GHC.Stats.elapsed_ns_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNJB: // global
           I64[Sp - 8] = block_ccNJw_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucNJF; else goto ccNJx;
       ucNJF: // global
           call _ccNJw(R1) args: 0, res: 0, upd: 0;
       ccNJx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.elapsed_ns_info" {
     GHC.Stats.elapsed_ns_info:
         const GHC.Stats.elapsed_ns_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccNJw() //  [R1]
         { []
         }
     {offset
       ccNJw: // global
           R1 = P64[R1 + 151] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccNJw_info" {
     block_ccNJw_info:
         const _ccNJw;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.451618214 UTC

[section ""data" . GHC.Stats.cpu_ns_closure" {
     GHC.Stats.cpu_ns_closure:
         const GHC.Stats.cpu_ns_info;
 },
 GHC.Stats.cpu_ns_entry() //  [R2]
         { []
         }
     {offset
       ccNJZ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccNK0; else goto ccNK1;
       ccNK0: // global
           R2 = R2;
           R1 = GHC.Stats.cpu_ns_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNK1: // global
           I64[Sp - 8] = block_ccNJW_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucNK5; else goto ccNJX;
       ucNK5: // global
           call _ccNJW(R1) args: 0, res: 0, upd: 0;
       ccNJX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.cpu_ns_info" {
     GHC.Stats.cpu_ns_info:
         const GHC.Stats.cpu_ns_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccNJW() //  [R1]
         { []
         }
     {offset
       ccNJW: // global
           R1 = P64[R1 + 143] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccNJW_info" {
     block_ccNJW_info:
         const _ccNJW;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.457962956 UTC

[section ""data" . GHC.Stats.gc_elapsed_ns_closure" {
     GHC.Stats.gc_elapsed_ns_closure:
         const GHC.Stats.gc_elapsed_ns_info;
 },
 GHC.Stats.gc_elapsed_ns_entry() //  [R2]
         { []
         }
     {offset
       ccNKp: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccNKq; else goto ccNKr;
       ccNKq: // global
           R2 = R2;
           R1 = GHC.Stats.gc_elapsed_ns_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNKr: // global
           I64[Sp - 8] = block_ccNKm_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucNKv; else goto ccNKn;
       ucNKv: // global
           call _ccNKm(R1) args: 0, res: 0, upd: 0;
       ccNKn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.gc_elapsed_ns_info" {
     GHC.Stats.gc_elapsed_ns_info:
         const GHC.Stats.gc_elapsed_ns_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccNKm() //  [R1]
         { []
         }
     {offset
       ccNKm: // global
           R1 = P64[R1 + 135] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccNKm_info" {
     block_ccNKm_info:
         const _ccNKm;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.46321662 UTC

[section ""data" . GHC.Stats.gc_cpu_ns_closure" {
     GHC.Stats.gc_cpu_ns_closure:
         const GHC.Stats.gc_cpu_ns_info;
 },
 GHC.Stats.gc_cpu_ns_entry() //  [R2]
         { []
         }
     {offset
       ccNKP: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccNKQ; else goto ccNKR;
       ccNKQ: // global
           R2 = R2;
           R1 = GHC.Stats.gc_cpu_ns_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNKR: // global
           I64[Sp - 8] = block_ccNKM_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucNKV; else goto ccNKN;
       ucNKV: // global
           call _ccNKM(R1) args: 0, res: 0, upd: 0;
       ccNKN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.gc_cpu_ns_info" {
     GHC.Stats.gc_cpu_ns_info:
         const GHC.Stats.gc_cpu_ns_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccNKM() //  [R1]
         { []
         }
     {offset
       ccNKM: // global
           R1 = P64[R1 + 127] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccNKM_info" {
     block_ccNKM_info:
         const _ccNKM;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.468890168 UTC

[section ""data" . GHC.Stats.mutator_elapsed_ns_closure" {
     GHC.Stats.mutator_elapsed_ns_closure:
         const GHC.Stats.mutator_elapsed_ns_info;
 },
 GHC.Stats.mutator_elapsed_ns_entry() //  [R2]
         { []
         }
     {offset
       ccNLf: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccNLg; else goto ccNLh;
       ccNLg: // global
           R2 = R2;
           R1 = GHC.Stats.mutator_elapsed_ns_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNLh: // global
           I64[Sp - 8] = block_ccNLc_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucNLl; else goto ccNLd;
       ucNLl: // global
           call _ccNLc(R1) args: 0, res: 0, upd: 0;
       ccNLd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.mutator_elapsed_ns_info" {
     GHC.Stats.mutator_elapsed_ns_info:
         const GHC.Stats.mutator_elapsed_ns_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccNLc() //  [R1]
         { []
         }
     {offset
       ccNLc: // global
           R1 = P64[R1 + 119] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccNLc_info" {
     block_ccNLc_info:
         const _ccNLc;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.475093308 UTC

[section ""data" . GHC.Stats.mutator_cpu_ns_closure" {
     GHC.Stats.mutator_cpu_ns_closure:
         const GHC.Stats.mutator_cpu_ns_info;
 },
 GHC.Stats.mutator_cpu_ns_entry() //  [R2]
         { []
         }
     {offset
       ccNLF: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccNLG; else goto ccNLH;
       ccNLG: // global
           R2 = R2;
           R1 = GHC.Stats.mutator_cpu_ns_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNLH: // global
           I64[Sp - 8] = block_ccNLC_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucNLL; else goto ccNLD;
       ucNLL: // global
           call _ccNLC(R1) args: 0, res: 0, upd: 0;
       ccNLD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.mutator_cpu_ns_info" {
     GHC.Stats.mutator_cpu_ns_info:
         const GHC.Stats.mutator_cpu_ns_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccNLC() //  [R1]
         { []
         }
     {offset
       ccNLC: // global
           R1 = P64[R1 + 111] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccNLC_info" {
     block_ccNLC_info:
         const _ccNLC;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.480977574 UTC

[section ""data" . GHC.Stats.cumulative_par_balanced_copied_bytes_closure" {
     GHC.Stats.cumulative_par_balanced_copied_bytes_closure:
         const GHC.Stats.cumulative_par_balanced_copied_bytes_info;
 },
 GHC.Stats.cumulative_par_balanced_copied_bytes_entry() //  [R2]
         { []
         }
     {offset
       ccNM5: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccNM6; else goto ccNM7;
       ccNM6: // global
           R2 = R2;
           R1 = GHC.Stats.cumulative_par_balanced_copied_bytes_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNM7: // global
           I64[Sp - 8] = block_ccNM2_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucNMb; else goto ccNM3;
       ucNMb: // global
           call _ccNM2(R1) args: 0, res: 0, upd: 0;
       ccNM3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.cumulative_par_balanced_copied_bytes_info" {
     GHC.Stats.cumulative_par_balanced_copied_bytes_info:
         const GHC.Stats.cumulative_par_balanced_copied_bytes_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccNM2() //  [R1]
         { []
         }
     {offset
       ccNM2: // global
           R1 = P64[R1 + 103] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccNM2_info" {
     block_ccNM2_info:
         const _ccNM2;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.487731777 UTC

[section ""data" . GHC.Stats.cumulative_par_max_copied_bytes_closure" {
     GHC.Stats.cumulative_par_max_copied_bytes_closure:
         const GHC.Stats.cumulative_par_max_copied_bytes_info;
 },
 GHC.Stats.cumulative_par_max_copied_bytes_entry() //  [R2]
         { []
         }
     {offset
       ccNMv: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccNMw; else goto ccNMx;
       ccNMw: // global
           R2 = R2;
           R1 = GHC.Stats.cumulative_par_max_copied_bytes_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNMx: // global
           I64[Sp - 8] = block_ccNMs_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucNMB; else goto ccNMt;
       ucNMB: // global
           call _ccNMs(R1) args: 0, res: 0, upd: 0;
       ccNMt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.cumulative_par_max_copied_bytes_info" {
     GHC.Stats.cumulative_par_max_copied_bytes_info:
         const GHC.Stats.cumulative_par_max_copied_bytes_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccNMs() //  [R1]
         { []
         }
     {offset
       ccNMs: // global
           R1 = P64[R1 + 95] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccNMs_info" {
     block_ccNMs_info:
         const _ccNMs;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.492950929 UTC

[section ""data" . GHC.Stats.par_copied_bytes_closure" {
     GHC.Stats.par_copied_bytes_closure:
         const GHC.Stats.par_copied_bytes_info;
 },
 GHC.Stats.par_copied_bytes_entry() //  [R2]
         { []
         }
     {offset
       ccNMV: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccNMW; else goto ccNMX;
       ccNMW: // global
           R2 = R2;
           R1 = GHC.Stats.par_copied_bytes_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNMX: // global
           I64[Sp - 8] = block_ccNMS_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucNN1; else goto ccNMT;
       ucNN1: // global
           call _ccNMS(R1) args: 0, res: 0, upd: 0;
       ccNMT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.par_copied_bytes_info" {
     GHC.Stats.par_copied_bytes_info:
         const GHC.Stats.par_copied_bytes_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccNMS() //  [R1]
         { []
         }
     {offset
       ccNMS: // global
           R1 = P64[R1 + 87] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccNMS_info" {
     block_ccNMS_info:
         const _ccNMS;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.49847944 UTC

[section ""data" . GHC.Stats.copied_bytes_closure" {
     GHC.Stats.copied_bytes_closure:
         const GHC.Stats.copied_bytes_info;
 },
 GHC.Stats.copied_bytes_entry() //  [R2]
         { []
         }
     {offset
       ccNNl: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccNNm; else goto ccNNn;
       ccNNm: // global
           R2 = R2;
           R1 = GHC.Stats.copied_bytes_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNNn: // global
           I64[Sp - 8] = block_ccNNi_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucNNr; else goto ccNNj;
       ucNNr: // global
           call _ccNNi(R1) args: 0, res: 0, upd: 0;
       ccNNj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.copied_bytes_info" {
     GHC.Stats.copied_bytes_info:
         const GHC.Stats.copied_bytes_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccNNi() //  [R1]
         { []
         }
     {offset
       ccNNi: // global
           R1 = P64[R1 + 79] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccNNi_info" {
     block_ccNNi_info:
         const _ccNNi;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.50362258 UTC

[section ""data" . GHC.Stats.cumulative_live_bytes_closure" {
     GHC.Stats.cumulative_live_bytes_closure:
         const GHC.Stats.cumulative_live_bytes_info;
 },
 GHC.Stats.cumulative_live_bytes_entry() //  [R2]
         { []
         }
     {offset
       ccNNL: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccNNM; else goto ccNNN;
       ccNNM: // global
           R2 = R2;
           R1 = GHC.Stats.cumulative_live_bytes_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNNN: // global
           I64[Sp - 8] = block_ccNNI_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucNNR; else goto ccNNJ;
       ucNNR: // global
           call _ccNNI(R1) args: 0, res: 0, upd: 0;
       ccNNJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.cumulative_live_bytes_info" {
     GHC.Stats.cumulative_live_bytes_info:
         const GHC.Stats.cumulative_live_bytes_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccNNI() //  [R1]
         { []
         }
     {offset
       ccNNI: // global
           R1 = P64[R1 + 71] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccNNI_info" {
     block_ccNNI_info:
         const _ccNNI;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.508916313 UTC

[section ""data" . GHC.Stats.max_mem_in_use_bytes_closure" {
     GHC.Stats.max_mem_in_use_bytes_closure:
         const GHC.Stats.max_mem_in_use_bytes_info;
 },
 GHC.Stats.max_mem_in_use_bytes_entry() //  [R2]
         { []
         }
     {offset
       ccNOb: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccNOc; else goto ccNOd;
       ccNOc: // global
           R2 = R2;
           R1 = GHC.Stats.max_mem_in_use_bytes_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNOd: // global
           I64[Sp - 8] = block_ccNO8_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucNOh; else goto ccNO9;
       ucNOh: // global
           call _ccNO8(R1) args: 0, res: 0, upd: 0;
       ccNO9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.max_mem_in_use_bytes_info" {
     GHC.Stats.max_mem_in_use_bytes_info:
         const GHC.Stats.max_mem_in_use_bytes_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccNO8() //  [R1]
         { []
         }
     {offset
       ccNO8: // global
           R1 = P64[R1 + 63] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccNO8_info" {
     block_ccNO8_info:
         const _ccNO8;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.514485067 UTC

[section ""data" . GHC.Stats.max_slop_bytes_closure" {
     GHC.Stats.max_slop_bytes_closure:
         const GHC.Stats.max_slop_bytes_info;
 },
 GHC.Stats.max_slop_bytes_entry() //  [R2]
         { []
         }
     {offset
       ccNOB: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccNOC; else goto ccNOD;
       ccNOC: // global
           R2 = R2;
           R1 = GHC.Stats.max_slop_bytes_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNOD: // global
           I64[Sp - 8] = block_ccNOy_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucNOH; else goto ccNOz;
       ucNOH: // global
           call _ccNOy(R1) args: 0, res: 0, upd: 0;
       ccNOz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.max_slop_bytes_info" {
     GHC.Stats.max_slop_bytes_info:
         const GHC.Stats.max_slop_bytes_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccNOy() //  [R1]
         { []
         }
     {offset
       ccNOy: // global
           R1 = P64[R1 + 55] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccNOy_info" {
     block_ccNOy_info:
         const _ccNOy;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.520286615 UTC

[section ""data" . GHC.Stats.max_compact_bytes_closure" {
     GHC.Stats.max_compact_bytes_closure:
         const GHC.Stats.max_compact_bytes_info;
 },
 GHC.Stats.max_compact_bytes_entry() //  [R2]
         { []
         }
     {offset
       ccNP1: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccNP2; else goto ccNP3;
       ccNP2: // global
           R2 = R2;
           R1 = GHC.Stats.max_compact_bytes_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNP3: // global
           I64[Sp - 8] = block_ccNOY_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucNP7; else goto ccNOZ;
       ucNP7: // global
           call _ccNOY(R1) args: 0, res: 0, upd: 0;
       ccNOZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.max_compact_bytes_info" {
     GHC.Stats.max_compact_bytes_info:
         const GHC.Stats.max_compact_bytes_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccNOY() //  [R1]
         { []
         }
     {offset
       ccNOY: // global
           R1 = P64[R1 + 47] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccNOY_info" {
     block_ccNOY_info:
         const _ccNOY;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.525575252 UTC

[section ""data" . GHC.Stats.max_large_objects_bytes_closure" {
     GHC.Stats.max_large_objects_bytes_closure:
         const GHC.Stats.max_large_objects_bytes_info;
 },
 GHC.Stats.max_large_objects_bytes_entry() //  [R2]
         { []
         }
     {offset
       ccNPr: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccNPs; else goto ccNPt;
       ccNPs: // global
           R2 = R2;
           R1 = GHC.Stats.max_large_objects_bytes_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNPt: // global
           I64[Sp - 8] = block_ccNPo_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucNPx; else goto ccNPp;
       ucNPx: // global
           call _ccNPo(R1) args: 0, res: 0, upd: 0;
       ccNPp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.max_large_objects_bytes_info" {
     GHC.Stats.max_large_objects_bytes_info:
         const GHC.Stats.max_large_objects_bytes_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccNPo() //  [R1]
         { []
         }
     {offset
       ccNPo: // global
           R1 = P64[R1 + 39] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccNPo_info" {
     block_ccNPo_info:
         const _ccNPo;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.531328324 UTC

[section ""data" . GHC.Stats.max_live_bytes_closure" {
     GHC.Stats.max_live_bytes_closure:
         const GHC.Stats.max_live_bytes_info;
 },
 GHC.Stats.max_live_bytes_entry() //  [R2]
         { []
         }
     {offset
       ccNPR: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccNPS; else goto ccNPT;
       ccNPS: // global
           R2 = R2;
           R1 = GHC.Stats.max_live_bytes_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNPT: // global
           I64[Sp - 8] = block_ccNPO_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucNPX; else goto ccNPP;
       ucNPX: // global
           call _ccNPO(R1) args: 0, res: 0, upd: 0;
       ccNPP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.max_live_bytes_info" {
     GHC.Stats.max_live_bytes_info:
         const GHC.Stats.max_live_bytes_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccNPO() //  [R1]
         { []
         }
     {offset
       ccNPO: // global
           R1 = P64[R1 + 31] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccNPO_info" {
     block_ccNPO_info:
         const _ccNPO;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.536806602 UTC

[section ""data" . GHC.Stats.allocated_bytes_closure" {
     GHC.Stats.allocated_bytes_closure:
         const GHC.Stats.allocated_bytes_info;
 },
 GHC.Stats.allocated_bytes_entry() //  [R2]
         { []
         }
     {offset
       ccNQh: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccNQi; else goto ccNQj;
       ccNQi: // global
           R2 = R2;
           R1 = GHC.Stats.allocated_bytes_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNQj: // global
           I64[Sp - 8] = block_ccNQe_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucNQn; else goto ccNQf;
       ucNQn: // global
           call _ccNQe(R1) args: 0, res: 0, upd: 0;
       ccNQf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.allocated_bytes_info" {
     GHC.Stats.allocated_bytes_info:
         const GHC.Stats.allocated_bytes_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccNQe() //  [R1]
         { []
         }
     {offset
       ccNQe: // global
           R1 = P64[R1 + 23] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccNQe_info" {
     block_ccNQe_info:
         const _ccNQe;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.542132759 UTC

[section ""data" . GHC.Stats.major_gcs_closure" {
     GHC.Stats.major_gcs_closure:
         const GHC.Stats.major_gcs_info;
 },
 GHC.Stats.major_gcs_entry() //  [R2]
         { []
         }
     {offset
       ccNQH: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccNQI; else goto ccNQJ;
       ccNQI: // global
           R2 = R2;
           R1 = GHC.Stats.major_gcs_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNQJ: // global
           I64[Sp - 8] = block_ccNQE_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucNQN; else goto ccNQF;
       ucNQN: // global
           call _ccNQE(R1) args: 0, res: 0, upd: 0;
       ccNQF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.major_gcs_info" {
     GHC.Stats.major_gcs_info:
         const GHC.Stats.major_gcs_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccNQE() //  [R1]
         { []
         }
     {offset
       ccNQE: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccNQE_info" {
     block_ccNQE_info:
         const _ccNQE;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.547527583 UTC

[section ""data" . GHC.Stats.gcs_closure" {
     GHC.Stats.gcs_closure:
         const GHC.Stats.gcs_info;
 },
 GHC.Stats.gcs_entry() //  [R2]
         { []
         }
     {offset
       ccNR7: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccNR8; else goto ccNR9;
       ccNR8: // global
           R2 = R2;
           R1 = GHC.Stats.gcs_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       ccNR9: // global
           I64[Sp - 8] = block_ccNR4_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ucNRd; else goto ccNR5;
       ucNRd: // global
           call _ccNR4(R1) args: 0, res: 0, upd: 0;
       ccNR5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.gcs_info" {
     GHC.Stats.gcs_info:
         const GHC.Stats.gcs_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _ccNR4() //  [R1]
         { []
         }
     {offset
       ccNR4: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccNR4_info" {
     block_ccNR4_info:
         const _ccNR4;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.552915901 UTC

[section ""cstring" . GHC.Stats.$trModule4_bytes" {
     GHC.Stats.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.554569929 UTC

[section ""data" . GHC.Stats.$trModule3_closure" {
     GHC.Stats.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Stats.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.556248192 UTC

[section ""cstring" . GHC.Stats.$trModule2_bytes" {
     GHC.Stats.$trModule2_bytes:
         I8[] [71,72,67,46,83,116,97,116,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.557893762 UTC

[section ""data" . GHC.Stats.$trModule1_closure" {
     GHC.Stats.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Stats.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.559547338 UTC

[section ""data" . GHC.Stats.$trModule_closure" {
     GHC.Stats.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Stats.$trModule3_closure+1;
         const GHC.Stats.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.561354459 UTC

[section ""data" . $krep_rcHrw_closure" {
     $krep_rcHrw_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Int.$tcInt64_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.563129353 UTC

[section ""data" . $krep1_rcHrx_closure" {
     $krep1_rcHrx_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Word.$tcWord64_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.56486963 UTC

[section ""data" . $krep2_rcHry_closure" {
     $krep2_rcHry_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Word.$tcWord32_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.566565541 UTC

[section ""data" . GHC.Stats.$tcGCDetails1_closure" {
     GHC.Stats.$tcGCDetails1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Stats.$tcGCDetails2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.56832404 UTC

[section ""data" . GHC.Stats.$tcGCDetails_closure" {
     GHC.Stats.$tcGCDetails_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Stats.$trModule_closure+1;
         const GHC.Stats.$tcGCDetails1_closure+1;
         const GHC.Types.krep$*_closure;
         const 1853976479346877039;
         const 12435514499433877542;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.570456167 UTC

[section ""data" . $krep3_rcHrz_closure" {
     $krep3_rcHrz_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Stats.$tcGCDetails_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.572188501 UTC

[section ""data" . $krep4_rcHrA_closure" {
     $krep4_rcHrA_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rcHrw_closure+1;
         const $krep3_rcHrz_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.573941338 UTC

[section ""data" . $krep5_rcHrB_closure" {
     $krep5_rcHrB_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rcHrw_closure+1;
         const $krep4_rcHrA_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.576145682 UTC

[section ""data" . $krep6_rcHrC_closure" {
     $krep6_rcHrC_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rcHrw_closure+1;
         const $krep5_rcHrB_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.57791219 UTC

[section ""data" . $krep7_rcHrD_closure" {
     $krep7_rcHrD_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rcHrx_closure+1;
         const $krep6_rcHrC_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.579569451 UTC

[section ""data" . $krep8_rcHrE_closure" {
     $krep8_rcHrE_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rcHrx_closure+1;
         const $krep7_rcHrD_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.581816101 UTC

[section ""data" . $krep9_rcHrF_closure" {
     $krep9_rcHrF_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rcHrx_closure+1;
         const $krep8_rcHrE_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.583514618 UTC

[section ""data" . $krep10_rcHrG_closure" {
     $krep10_rcHrG_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rcHrx_closure+1;
         const $krep9_rcHrF_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.585196362 UTC

[section ""data" . $krep11_rcHrH_closure" {
     $krep11_rcHrH_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rcHrx_closure+1;
         const $krep10_rcHrG_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.58697723 UTC

[section ""data" . $krep12_rcHrI_closure" {
     $krep12_rcHrI_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rcHrx_closure+1;
         const $krep11_rcHrH_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.588644942 UTC

[section ""data" . $krep13_rcHrJ_closure" {
     $krep13_rcHrJ_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rcHrx_closure+1;
         const $krep12_rcHrI_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.590424969 UTC

[section ""data" . $krep14_rcHrK_closure" {
     $krep14_rcHrK_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rcHrx_closure+1;
         const $krep13_rcHrJ_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.592151852 UTC

[section ""data" . $krep15_rcHrL_closure" {
     $krep15_rcHrL_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rcHrx_closure+1;
         const $krep14_rcHrK_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.594448918 UTC

[section ""data" . $krep16_rcHrM_closure" {
     $krep16_rcHrM_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rcHry_closure+1;
         const $krep15_rcHrL_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.596195276 UTC

[section ""data" . GHC.Stats.$tc'GCDetails1_closure" {
     GHC.Stats.$tc'GCDetails1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rcHry_closure+1;
         const $krep16_rcHrM_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.597917137 UTC

[section ""cstring" . GHC.Stats.$tc'GCDetails3_bytes" {
     GHC.Stats.$tc'GCDetails3_bytes:
         I8[] [39,71,67,68,101,116,97,105,108,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.599586589 UTC

[section ""data" . GHC.Stats.$tc'GCDetails2_closure" {
     GHC.Stats.$tc'GCDetails2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Stats.$tc'GCDetails3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.60187036 UTC

[section ""data" . GHC.Stats.$tc'GCDetails_closure" {
     GHC.Stats.$tc'GCDetails_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Stats.$trModule_closure+1;
         const GHC.Stats.$tc'GCDetails2_closure+1;
         const GHC.Stats.$tc'GCDetails1_closure+4;
         const 5964953867232766897;
         const 8889994537819840032;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.603674756 UTC

[section ""data" . GHC.Stats.$tcRTSStats1_closure" {
     GHC.Stats.$tcRTSStats1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Stats.$tcRTSStats2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.605807947 UTC

[section ""data" . GHC.Stats.$tcRTSStats_closure" {
     GHC.Stats.$tcRTSStats_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Stats.$trModule_closure+1;
         const GHC.Stats.$tcRTSStats1_closure+1;
         const GHC.Types.krep$*_closure;
         const 1006825398788898151;
         const 9122067856566178937;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.60761304 UTC

[section ""data" . $krep17_rcHrN_closure" {
     $krep17_rcHrN_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Stats.$tcRTSStats_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.609335054 UTC

[section ""data" . $krep18_rcHrO_closure" {
     $krep18_rcHrO_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_rcHrz_closure+1;
         const $krep17_rcHrN_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.611143811 UTC

[section ""data" . $krep19_rcHrP_closure" {
     $krep19_rcHrP_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rcHrw_closure+1;
         const $krep18_rcHrO_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.612957415 UTC

[section ""data" . $krep20_rcHrQ_closure" {
     $krep20_rcHrQ_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rcHrw_closure+1;
         const $krep19_rcHrP_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.614713559 UTC

[section ""data" . $krep21_rcHrR_closure" {
     $krep21_rcHrR_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rcHrw_closure+1;
         const $krep20_rcHrQ_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.616396047 UTC

[section ""data" . $krep22_rcHrS_closure" {
     $krep22_rcHrS_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rcHrw_closure+1;
         const $krep21_rcHrR_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.618448935 UTC

[section ""data" . $krep23_rcHrT_closure" {
     $krep23_rcHrT_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rcHrw_closure+1;
         const $krep22_rcHrS_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.620160783 UTC

[section ""data" . $krep24_rcHrU_closure" {
     $krep24_rcHrU_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rcHrw_closure+1;
         const $krep23_rcHrT_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.621941121 UTC

[section ""data" . $krep25_rcHrV_closure" {
     $krep25_rcHrV_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rcHrx_closure+1;
         const $krep24_rcHrU_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.623714497 UTC

[section ""data" . $krep26_rcHrW_closure" {
     $krep26_rcHrW_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rcHrx_closure+1;
         const $krep25_rcHrV_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.625977737 UTC

[section ""data" . $krep27_rcHrX_closure" {
     $krep27_rcHrX_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rcHrx_closure+1;
         const $krep26_rcHrW_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.628280662 UTC

[section ""data" . $krep28_rcHrY_closure" {
     $krep28_rcHrY_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rcHrx_closure+1;
         const $krep27_rcHrX_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.630169871 UTC

[section ""data" . $krep29_rcHrZ_closure" {
     $krep29_rcHrZ_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rcHrx_closure+1;
         const $krep28_rcHrY_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.631935456 UTC

[section ""data" . $krep30_rcHs0_closure" {
     $krep30_rcHs0_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rcHrx_closure+1;
         const $krep29_rcHrZ_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.633766455 UTC

[section ""data" . $krep31_rcHs1_closure" {
     $krep31_rcHs1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rcHrx_closure+1;
         const $krep30_rcHs0_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.635541041 UTC

[section ""data" . $krep32_rcHs2_closure" {
     $krep32_rcHs2_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rcHrx_closure+1;
         const $krep31_rcHs1_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.637537796 UTC

[section ""data" . $krep33_rcHs3_closure" {
     $krep33_rcHs3_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rcHrx_closure+1;
         const $krep32_rcHs2_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.639270503 UTC

[section ""data" . $krep34_rcHs4_closure" {
     $krep34_rcHs4_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rcHrx_closure+1;
         const $krep33_rcHs3_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.640997349 UTC

[section ""data" . $krep35_rcHs5_closure" {
     $krep35_rcHs5_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rcHrx_closure+1;
         const $krep34_rcHs4_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.642793793 UTC

[section ""data" . $krep36_rcHs6_closure" {
     $krep36_rcHs6_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rcHry_closure+1;
         const $krep35_rcHs5_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.644517845 UTC

[section ""data" . GHC.Stats.$tc'RTSStats1_closure" {
     GHC.Stats.$tc'RTSStats1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rcHry_closure+1;
         const $krep36_rcHs6_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.646230859 UTC

[section ""cstring" . GHC.Stats.$tc'RTSStats3_bytes" {
     GHC.Stats.$tc'RTSStats3_bytes:
         I8[] [39,82,84,83,83,116,97,116,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.647961052 UTC

[section ""data" . GHC.Stats.$tc'RTSStats2_closure" {
     GHC.Stats.$tc'RTSStats2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Stats.$tc'RTSStats3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.650138287 UTC

[section ""data" . GHC.Stats.$tc'RTSStats_closure" {
     GHC.Stats.$tc'RTSStats_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Stats.$trModule_closure+1;
         const GHC.Stats.$tc'RTSStats2_closure+1;
         const GHC.Stats.$tc'RTSStats1_closure+4;
         const 10718900236833312508;
         const 16334729378492634062;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.653786632 UTC

[section ""data" . getRTSStatsEnabled1_rcHs7_closure" {
     getRTSStatsEnabled1_rcHs7_closure:
         const getRTSStatsEnabled1_rcHs7_info;
 },
 sat_scM48_entry() //  [R1]
         { []
         }
     {offset
       ccNSx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccNSy; else goto ccNSz;
       ccNSy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccNSz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           if (I64[R1 + 16] == 0) goto ccNSw; else goto ccNSv;
       ccNSw: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ccNSv: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_scM48_info" {
     sat_scM48_info:
         const sat_scM48_entry;
         const 4294967296;
         const 17;
 },
 getRTSStatsEnabled1_rcHs7_entry() //  []
         { []
         }
     {offset
       ccNSA: // global
           if ((Sp + -8) < SpLim) (likely: False) goto ccNSB; else goto ccNSC;
       ccNSB: // global
           R1 = getRTSStatsEnabled1_rcHs7_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       ccNSC: // global
           I64[Sp - 8] = block_ccNSn_info;
           Sp = Sp - 8;
           _ucNSI::P64 = CurrentTSO;
           I64[I64[_ucNSI::P64 + 24] + 16] = Sp;
           _ucNSJ::I64 = CurrentNursery;
           P64[_ucNSJ::I64 + 8] = Hp + 8;
           I64[_ucNSI::P64 + 104] = I64[_ucNSI::P64 + 104] - ((Hp + 8) - I64[_ucNSJ::I64]);
           (_ucNSG::I64) = call "ccall" arg hints:  [PtrHint,]  result hints:  [PtrHint] suspendThread(BaseReg, 0);
           (_scM46::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] getRTSStatsEnabled();
           (_ucNSH::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [PtrHint] resumeThread(_ucNSG::I64);
           BaseReg = _ucNSH::I64;
           _ucNSK::P64 = CurrentTSO;
           _ucNSL::P64 = I64[_ucNSK::P64 + 24];
           Sp = I64[_ucNSL::P64 + 16];
           SpLim = _ucNSL::P64 + 192;
           HpAlloc = 0;
           _ucNSM::I64 = CurrentNursery;
           _ucNSN::I64 = I64[_ucNSM::I64 + 8];
           Hp = _ucNSN::I64 - 8;
           _ucNSO::I64 = I64[_ucNSM::I64];
           HpLim = _ucNSO::I64 + ((%MO_SS_Conv_W32_W64(I32[_ucNSM::I64 + 48]) << 12) - 1);
           I64[_ucNSK::P64 + 104] = I64[_ucNSK::P64 + 104] + (_ucNSN::I64 - _ucNSO::I64);
           R1 = _scM46::I64;
           call (I64[I64[Sp]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . getRTSStatsEnabled1_rcHs7_info" {
     getRTSStatsEnabled1_rcHs7_info:
         const getRTSStatsEnabled1_rcHs7_entry;
         const 0;
         const 14;
         const 4294967299;
 },
 _ccNSn() //  [R1]
         { []
         }
     {offset
       ccNSn: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto ccNSF; else goto ccNSE;
       ccNSF: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       ccNSE: // global
           I64[Hp - 16] = sat_scM48_info;
           I64[Hp] = R1;
           R1 = Hp - 16;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccNSn_info" {
     block_ccNSn_info:
         const _ccNSn;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.662417023 UTC

[section ""data" . GHC.Stats.getRTSStatsEnabled_closure" {
     GHC.Stats.getRTSStatsEnabled_closure:
         const GHC.Stats.getRTSStatsEnabled_info;
 },
 GHC.Stats.getRTSStatsEnabled_entry() //  []
         { []
         }
     {offset
       ccNTt: // global
           call getRTSStatsEnabled1_rcHs7_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.getRTSStatsEnabled_info" {
     GHC.Stats.getRTSStatsEnabled_info:
         const GHC.Stats.getRTSStatsEnabled_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.665450464 UTC

[section ""cstring" . GHC.Stats.getRTSStats5_bytes" {
     GHC.Stats.getRTSStats5_bytes:
         I8[] [71,72,67,46,83,116,97,116,115,46,103,101,116,82,84,83,83,116,97,116,115,58,32,71,67,32,115,116,97,116,115,32,110,111,116,32,101,110,97,98,108,101,100,46,32,85,115,101,32,96,43,82,84,83,32,45,84,32,45,82,84,83,39,32,116,111,32,101,110,97,98,108,101,32,116,104,101,109,46]
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.66771152 UTC

[section ""data" . GHC.Stats.getRTSStats4_closure" {
     GHC.Stats.getRTSStats4_closure:
         const GHC.Stats.getRTSStats4_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Stats.getRTSStats4_entry() //  [R1]
         { []
         }
     {offset
       ccNTH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccNTI; else goto ccNTJ;
       ccNTI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccNTJ: // global
           (_ccNTE::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccNTE::I64 == 0) goto ccNTG; else goto ccNTF;
       ccNTG: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccNTF: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccNTE::I64;
           R2 = GHC.Stats.getRTSStats5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Stats.getRTSStats4_info" {
     GHC.Stats.getRTSStats4_info:
         const GHC.Stats.getRTSStats4_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.671422081 UTC

[section ""data" . GHC.Stats.getRTSStats3_closure" {
     GHC.Stats.getRTSStats3_closure:
         const GHC.IO.Exception.IOError_con_info;
         const GHC.Base.Nothing_closure+1;
         const GHC.IO.Exception.UnsupportedOperation_closure+1;
         const GHC.Types.[]_closure+1;
         const GHC.Stats.getRTSStats4_closure;
         const GHC.Base.Nothing_closure+1;
         const GHC.Base.Nothing_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.673896697 UTC

[section ""data" . GHC.Stats.getRTSStats2_closure" {
     GHC.Stats.getRTSStats2_closure:
         const GHC.Stats.getRTSStats2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Stats.getRTSStats2_entry() //  [R1]
         { []
         }
     {offset
       ccNTZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto ccNU0; else goto ccNU1;
       ccNU0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       ccNU1: // global
           (_ccNTW::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_ccNTW::I64 == 0) goto ccNTY; else goto ccNTX;
       ccNTY: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       ccNTX: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _ccNTW::I64;
           R2 = GHC.Stats.getRTSStats3_closure+1;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionIOException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Stats.getRTSStats2_info" {
     GHC.Stats.getRTSStats2_info:
         const GHC.Stats.getRTSStats2_entry;
         const 0;
         const 12884901909;
         const ScMjD_srt+584;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.683114554 UTC

[section ""data" . GHC.Stats.getRTSStats1_closure" {
     GHC.Stats.getRTSStats1_closure:
         const GHC.Stats.getRTSStats1_info;
         const 0;
 },
 GHC.Stats.getRTSStats1_entry() //  []
         { []
         }
     {offset
       ccNUl: // global
           if ((Sp + -24) < SpLim) (likely: False) goto ccNUm; else goto ccNUn;
       ccNUm: // global
           R1 = GHC.Stats.getRTSStats1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       ccNUn: // global
           I64[Sp - 8] = block_ccNUf_info;
           Sp = Sp - 8;
           _ucNWN::P64 = CurrentTSO;
           I64[I64[_ucNWN::P64 + 24] + 16] = Sp;
           _ucNWO::I64 = CurrentNursery;
           P64[_ucNWO::I64 + 8] = Hp + 8;
           I64[_ucNWN::P64 + 104] = I64[_ucNWN::P64 + 104] - ((Hp + 8) - I64[_ucNWO::I64]);
           (_ucNWL::I64) = call "ccall" arg hints:  [PtrHint,]  result hints:  [PtrHint] suspendThread(BaseReg, 0);
           (_scM4d::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] getRTSStatsEnabled();
           (_ucNWM::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [PtrHint] resumeThread(_ucNWL::I64);
           BaseReg = _ucNWM::I64;
           _ucNWP::P64 = CurrentTSO;
           _ucNWQ::P64 = I64[_ucNWP::P64 + 24];
           Sp = I64[_ucNWQ::P64 + 16];
           SpLim = _ucNWQ::P64 + 192;
           HpAlloc = 0;
           _ucNWR::I64 = CurrentNursery;
           _ucNWS::I64 = I64[_ucNWR::I64 + 8];
           Hp = _ucNWS::I64 - 8;
           _ucNWT::I64 = I64[_ucNWR::I64];
           HpLim = _ucNWT::I64 + ((%MO_SS_Conv_W32_W64(I32[_ucNWR::I64 + 48]) << 12) - 1);
           I64[_ucNWP::P64 + 104] = I64[_ucNWP::P64 + 104] + (_ucNWS::I64 - _ucNWT::I64);
           R1 = _scM4d::I64;
           call (I64[I64[Sp]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.getRTSStats1_info" {
     GHC.Stats.getRTSStats1_info:
         const GHC.Stats.getRTSStats1_entry;
         const 0;
         const 12884901902;
         const 4294967299;
         const ScMjD_srt+600;
 },
 _ccNUf() //  [R1]
         { []
         }
     {offset
       ccNUf: // global
           if (R1 == 0) goto ccNUk; else goto ccNUj;
       ccNUk: // global
           R1 = GHC.Stats.getRTSStats2_closure;
           Sp = Sp + 8;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       ccNUj: // global
           I64[Sp] = block_ccNUq_info;
           R1 = 248;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccNUf_info" {
     block_ccNUf_info:
         const _ccNUf;
         const 0;
         const 4294967326;
         const ScMjD_srt+608;
 },
 _ccNUq() //  [R1]
         { []
         }
     {offset
       ccNUq: // global
           I64[Sp - 16] = block_ccNUx_info;
           _scM4l::I64 = R1 + 16;
           I64[Sp - 8] = _scM4l::I64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           _ucNWX::P64 = CurrentTSO;
           I64[I64[_ucNWX::P64 + 24] + 16] = Sp;
           _ucNWY::I64 = CurrentNursery;
           P64[_ucNWY::I64 + 8] = Hp + 8;
           I64[_ucNWX::P64 + 104] = I64[_ucNWX::P64 + 104] - ((Hp + 8) - I64[_ucNWY::I64]);
           (_ucNWV::I64) = call "ccall" arg hints:  [PtrHint,]  result hints:  [PtrHint] suspendThread(BaseReg, 0);
           call "ccall" arg hints:  [PtrHint]  result hints:  [] getRTSStats(_scM4l::I64);
           (_ucNWW::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [PtrHint] resumeThread(_ucNWV::I64);
           BaseReg = _ucNWW::I64;
           _ucNWZ::P64 = CurrentTSO;
           _ucNX0::P64 = I64[_ucNWZ::P64 + 24];
           Sp = I64[_ucNX0::P64 + 16];
           SpLim = _ucNX0::P64 + 192;
           HpAlloc = 0;
           _ucNX1::I64 = CurrentNursery;
           _ucNX2::I64 = I64[_ucNX1::I64 + 8];
           Hp = _ucNX2::I64 - 8;
           _ucNX3::I64 = I64[_ucNX1::I64];
           HpLim = _ucNX3::I64 + ((%MO_SS_Conv_W32_W64(I32[_ucNX1::I64 + 48]) << 12) - 1);
           I64[_ucNWZ::P64 + 104] = I64[_ucNWZ::P64 + 104] + (_ucNX2::I64 - _ucNX3::I64);
           call (I64[I64[Sp]])() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_ccNUq_info" {
     block_ccNUq_info:
         const _ccNUq;
         const 0;
         const 30;
 },
 _ccNUx() //  []
         { []
         }
     {offset
       ccNUx: // global
           Hp = Hp + 816;
           if (Hp > HpLim) (likely: False) goto ccNWK; else goto ccNWJ;
       ccNWK: // global
           HpAlloc = 816;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       ccNWJ: // global
           _scM4l::I64 = I64[Sp + 8];
           _scM4r::I64 = %MO_UU_Conv_W32_W64(I32[_scM4l::I64]);
           _scM4v::I64 = %MO_UU_Conv_W32_W64(I32[_scM4l::I64 + 4]);
           _scM4z::I64 = I64[_scM4l::I64 + 8];
           _scM4D::I64 = I64[_scM4l::I64 + 16];
           _scM4H::I64 = I64[_scM4l::I64 + 24];
           _scM4L::I64 = I64[_scM4l::I64 + 32];
           _scM4P::I64 = I64[_scM4l::I64 + 40];
           _scM4T::I64 = I64[_scM4l::I64 + 48];
           _scM4X::I64 = I64[_scM4l::I64 + 56];
           _scM51::I64 = I64[_scM4l::I64 + 64];
           _scM55::I64 = I64[_scM4l::I64 + 72];
           _scM59::I64 = I64[_scM4l::I64 + 80];
           _scM5d::I64 = I64[_scM4l::I64 + 88];
           _scM5h::I64 = I64[_scM4l::I64 + 96];
           _scM5l::I64 = I64[_scM4l::I64 + 104];
           _scM5p::I64 = I64[_scM4l::I64 + 112];
           _scM5t::I64 = I64[_scM4l::I64 + 120];
           _scM5x::I64 = I64[_scM4l::I64 + 128];
           _scM5B::I64 = I64[_scM4l::I64 + 136];
           _scM5C::I64 = _scM4l::I64 + 144;
           _scM5F::I64 = %MO_UU_Conv_W32_W64(I32[_scM5C::I64]);
           _scM5J::I64 = %MO_UU_Conv_W32_W64(I32[_scM5C::I64 + 4]);
           _scM5N::I64 = I64[_scM5C::I64 + 8];
           _scM5R::I64 = I64[_scM5C::I64 + 16];
           _scM5V::I64 = I64[_scM5C::I64 + 24];
           _scM5Z::I64 = I64[_scM5C::I64 + 32];
           _scM63::I64 = I64[_scM5C::I64 + 40];
           _scM67::I64 = I64[_scM5C::I64 + 48];
           _scM6b::I64 = I64[_scM5C::I64 + 56];
           _scM6f::I64 = I64[_scM5C::I64 + 64];
           _scM6j::I64 = I64[_scM5C::I64 + 72];
           _scM6n::I64 = I64[_scM5C::I64 + 80];
           _scM6r::I64 = I64[_scM5C::I64 + 88];
           _scM6v::I64 = I64[_scM5C::I64 + 96];
           call MO_Touch(P64[Sp + 16]);
           I64[Hp - 808] = GHC.Int.I64#_con_info;
           I64[Hp - 800] = _scM6v::I64;
           I64[Hp - 792] = GHC.Int.I64#_con_info;
           I64[Hp - 784] = _scM6r::I64;
           I64[Hp - 776] = GHC.Int.I64#_con_info;
           I64[Hp - 768] = _scM6n::I64;
           I64[Hp - 760] = GHC.Word.W64#_con_info;
           I64[Hp - 752] = _scM6j::I64;
           I64[Hp - 744] = GHC.Word.W64#_con_info;
           I64[Hp - 736] = _scM6f::I64;
           I64[Hp - 728] = GHC.Word.W64#_con_info;
           I64[Hp - 720] = _scM6b::I64;
           I64[Hp - 712] = GHC.Word.W64#_con_info;
           I64[Hp - 704] = _scM67::I64;
           I64[Hp - 696] = GHC.Word.W64#_con_info;
           I64[Hp - 688] = _scM63::I64;
           I64[Hp - 680] = GHC.Word.W64#_con_info;
           I64[Hp - 672] = _scM5Z::I64;
           I64[Hp - 664] = GHC.Word.W64#_con_info;
           I64[Hp - 656] = _scM5V::I64;
           I64[Hp - 648] = GHC.Word.W64#_con_info;
           I64[Hp - 640] = _scM5R::I64;
           I64[Hp - 632] = GHC.Word.W64#_con_info;
           I64[Hp - 624] = _scM5N::I64;
           I64[Hp - 616] = GHC.Word.W32#_con_info;
           I64[Hp - 608] = _scM5J::I64;
           I64[Hp - 600] = GHC.Word.W32#_con_info;
           I64[Hp - 592] = _scM5F::I64;
           I64[Hp - 584] = GHC.Stats.GCDetails_con_info;
           P64[Hp - 576] = Hp - 599;
           P64[Hp - 568] = Hp - 615;
           P64[Hp - 560] = Hp - 631;
           P64[Hp - 552] = Hp - 647;
           P64[Hp - 544] = Hp - 663;
           P64[Hp - 536] = Hp - 679;
           P64[Hp - 528] = Hp - 695;
           P64[Hp - 520] = Hp - 711;
           P64[Hp - 512] = Hp - 727;
           P64[Hp - 504] = Hp - 743;
           P64[Hp - 496] = Hp - 759;
           P64[Hp - 488] = Hp - 775;
           P64[Hp - 480] = Hp - 791;
           P64[Hp - 472] = Hp - 807;
           I64[Hp - 464] = GHC.Int.I64#_con_info;
           I64[Hp - 456] = _scM5B::I64;
           I64[Hp - 448] = GHC.Int.I64#_con_info;
           I64[Hp - 440] = _scM5x::I64;
           I64[Hp - 432] = GHC.Int.I64#_con_info;
           I64[Hp - 424] = _scM5t::I64;
           I64[Hp - 416] = GHC.Int.I64#_con_info;
           I64[Hp - 408] = _scM5p::I64;
           I64[Hp - 400] = GHC.Int.I64#_con_info;
           I64[Hp - 392] = _scM5l::I64;
           I64[Hp - 384] = GHC.Int.I64#_con_info;
           I64[Hp - 376] = _scM5h::I64;
           I64[Hp - 368] = GHC.Word.W64#_con_info;
           I64[Hp - 360] = _scM5d::I64;
           I64[Hp - 352] = GHC.Word.W64#_con_info;
           I64[Hp - 344] = _scM59::I64;
           I64[Hp - 336] = GHC.Word.W64#_con_info;
           I64[Hp - 328] = _scM55::I64;
           I64[Hp - 320] = GHC.Word.W64#_con_info;
           I64[Hp - 312] = _scM51::I64;
           I64[Hp - 304] = GHC.Word.W64#_con_info;
           I64[Hp - 296] = _scM4X::I64;
           I64[Hp - 288] = GHC.Word.W64#_con_info;
           I64[Hp - 280] = _scM4T::I64;
           I64[Hp - 272] = GHC.Word.W64#_con_info;
           I64[Hp - 264] = _scM4P::I64;
           I64[Hp - 256] = GHC.Word.W64#_con_info;
           I64[Hp - 248] = _scM4L::I64;
           I64[Hp - 240] = GHC.Word.W64#_con_info;
           I64[Hp - 232] = _scM4H::I64;
           I64[Hp - 224] = GHC.Word.W64#_con_info;
           I64[Hp - 216] = _scM4D::I64;
           I64[Hp - 208] = GHC.Word.W64#_con_info;
           I64[Hp - 200] = _scM4z::I64;
           I64[Hp - 192] = GHC.Word.W32#_con_info;
           I64[Hp - 184] = _scM4v::I64;
           I64[Hp - 176] = GHC.Word.W32#_con_info;
           I64[Hp - 168] = _scM4r::I64;
           I64[Hp - 160] = GHC.Stats.RTSStats_con_info;
           P64[Hp - 152] = Hp - 175;
           P64[Hp - 144] = Hp - 191;
           P64[Hp - 136] = Hp - 207;
           P64[Hp - 128] = Hp - 223;
           P64[Hp - 120] = Hp - 239;
           P64[Hp - 112] = Hp - 255;
           P64[Hp - 104] = Hp - 271;
           P64[Hp - 96] = Hp - 287;
           P64[Hp - 88] = Hp - 303;
           P64[Hp - 80] = Hp - 319;
           P64[Hp - 72] = Hp - 335;
           P64[Hp - 64] = Hp - 351;
           P64[Hp - 56] = Hp - 367;
           P64[Hp - 48] = Hp - 383;
           P64[Hp - 40] = Hp - 399;
           P64[Hp - 32] = Hp - 415;
           P64[Hp - 24] = Hp - 431;
           P64[Hp - 16] = Hp - 447;
           P64[Hp - 8] = Hp - 463;
           P64[Hp] = Hp - 583;
           R1 = Hp - 159;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_ccNUx_info" {
     block_ccNUx_info:
         const _ccNUx;
         const 66;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.698408001 UTC

[section ""data" . GHC.Stats.getRTSStats_closure" {
     GHC.Stats.getRTSStats_closure:
         const GHC.Stats.getRTSStats_info;
         const 0;
 },
 GHC.Stats.getRTSStats_entry() //  []
         { []
         }
     {offset
       ccNZ2: // global
           call GHC.Stats.getRTSStats1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.getRTSStats_info" {
     GHC.Stats.getRTSStats_info:
         const GHC.Stats.getRTSStats_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const ScMjD_srt+600;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.703182528 UTC

[section ""data" . GHC.Stats.GCDetails_closure" {
     GHC.Stats.GCDetails_closure:
         const GHC.Stats.GCDetails_info;
 },
 GHC.Stats.GCDetails_slow() //  [R1]
         { []
         }
     {offset
       ccNZa: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Stats.GCDetails_entry(R6,
                                          R5,
                                          R4,
                                          R3,
                                          R2,
                                          R1) args: 80, res: 0, upd: 8;
     }
 },
 GHC.Stats.GCDetails_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       ccNZf: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto ccNZj; else goto ccNZi;
       ccNZj: // global
           HpAlloc = 120;
           R1 = GHC.Stats.GCDetails_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 120, res: 0, upd: 8;
       ccNZi: // global
           I64[Hp - 112] = GHC.Stats.GCDetails_con_info;
           P64[Hp - 104] = R2;
           P64[Hp - 96] = R3;
           P64[Hp - 88] = R4;
           P64[Hp - 80] = R5;
           P64[Hp - 72] = R6;
           P64[Hp - 64] = P64[Sp];
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = P64[Sp + 16];
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = P64[Sp + 40];
           P64[Hp - 16] = P64[Sp + 48];
           P64[Hp - 8] = P64[Sp + 56];
           P64[Hp] = P64[Sp + 64];
           R1 = Hp - 111;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.GCDetails_info" {
     GHC.Stats.GCDetails_info:
         const GHC.Stats.GCDetails_entry;
         const 0;
         const 14;
         const 60129542144;
         const 0;
         const 14;
         const GHC.Stats.GCDetails_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.71050733 UTC

[section ""data" . GHC.Stats.RTSStats_closure" {
     GHC.Stats.RTSStats_closure:
         const GHC.Stats.RTSStats_info;
 },
 GHC.Stats.RTSStats_slow() //  [R1]
         { []
         }
     {offset
       ccNZC: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Stats.RTSStats_entry(R6,
                                         R5,
                                         R4,
                                         R3,
                                         R2,
                                         R1) args: 128, res: 0, upd: 8;
     }
 },
 GHC.Stats.RTSStats_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       ccNZH: // global
           Hp = Hp + 168;
           if (Hp > HpLim) (likely: False) goto ccNZL; else goto ccNZK;
       ccNZL: // global
           HpAlloc = 168;
           R1 = GHC.Stats.RTSStats_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 168, res: 0, upd: 8;
       ccNZK: // global
           I64[Hp - 160] = GHC.Stats.RTSStats_con_info;
           P64[Hp - 152] = R2;
           P64[Hp - 144] = R3;
           P64[Hp - 136] = R4;
           P64[Hp - 128] = R5;
           P64[Hp - 120] = R6;
           P64[Hp - 112] = P64[Sp];
           P64[Hp - 104] = P64[Sp + 8];
           P64[Hp - 96] = P64[Sp + 16];
           P64[Hp - 88] = P64[Sp + 24];
           P64[Hp - 80] = P64[Sp + 32];
           P64[Hp - 72] = P64[Sp + 40];
           P64[Hp - 64] = P64[Sp + 48];
           P64[Hp - 56] = P64[Sp + 56];
           P64[Hp - 48] = P64[Sp + 64];
           P64[Hp - 40] = P64[Sp + 72];
           P64[Hp - 32] = P64[Sp + 80];
           P64[Hp - 24] = P64[Sp + 88];
           P64[Hp - 16] = P64[Sp + 96];
           P64[Hp - 8] = P64[Sp + 104];
           P64[Hp] = P64[Sp + 112];
           R1 = Hp - 159;
           Sp = Sp + 120;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.RTSStats_info" {
     GHC.Stats.RTSStats_info:
         const GHC.Stats.RTSStats_entry;
         const 0;
         const 14;
         const 85899345920;
         const 0;
         const 20;
         const GHC.Stats.RTSStats_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.715847043 UTC

[section ""cstring" . icO0a_str" {
     icO0a_str:
         I8[] [98,97,115,101,58,71,72,67,46,83,116,97,116,115,46,71,67,68,101,116,97,105,108,115]
 },
 GHC.Stats.GCDetails_con_entry() //  [R1]
         { []
         }
     {offset
       ccO09: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.GCDetails_con_info" {
     GHC.Stats.GCDetails_con_info:
         const GHC.Stats.GCDetails_con_entry;
         const 14;
         const 1;
         const icO0a_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.719047018 UTC

[section ""cstring" . icO0h_str" {
     icO0h_str:
         I8[] [98,97,115,101,58,71,72,67,46,83,116,97,116,115,46,82,84,83,83,116,97,116,115]
 },
 GHC.Stats.RTSStats_con_entry() //  [R1]
         { []
         }
     {offset
       ccO0g: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Stats.RTSStats_con_info" {
     GHC.Stats.RTSStats_con_info:
         const GHC.Stats.RTSStats_con_entry;
         const 20;
         const 1;
         const icO0h_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:07:48.722584269 UTC

[section ""relreadonly" . ScMjD_srt" {
     ScMjD_srt:
         const GHC.Show.showCommaSpace1_closure;
         const GHC.Show.$w$cshowsPrec4_closure;
         const GHC.Stats.$fShowGCDetails_$cshowsPrec_closure;
         const GHC.Stats.$fShowGCDetails_$cshow_closure;
         const GHC.Stats.$fShowGCDetails1_closure;
         const GHC.Stats.$fShowRTSStats_$cshowsPrec_closure;
         const GHC.Stats.$fShowRTSStats_$cshow_closure;
         const GHC.Stats.$fShowRTSStats1_closure;
         const GHC.Read.$fReadWord32_$creadsPrec_closure;
         const lvl37_rcHqd_closure;
         const ds2_rcHqe_closure;
         const GHC.Read.$fReadWord64_$creadsPrec_closure;
         const lvl45_rcHqn_closure;
         const lvl46_rcHqo_closure;
         const GHC.Int.$fReadInt64_$creadsPrec_closure;
         const lvl65_rcHqH_closure;
         const lvl66_rcHqI_closure;
         const Text.Read.Lex.$wexpect_closure;
         const lvl72_rcHqO_closure;
         const GHC.Read.readField_closure;
         const lvl70_rcHqM_closure;
         const lvl40_rcHqi_closure;
         const lvl68_rcHqK_closure;
         const lvl64_rcHqG_closure;
         const lvl62_rcHqE_closure;
         const lvl60_rcHqC_closure;
         const lvl58_rcHqA_closure;
         const lvl56_rcHqy_closure;
         const lvl54_rcHqw_closure;
         const lvl52_rcHqu_closure;
         const lvl50_rcHqs_closure;
         const lvl48_rcHqq_closure;
         const lvl44_rcHqm_closure;
         const lvl42_rcHqk_closure;
         const ds1_rcHqc_closure;
         const lexeme4_rcHqa_closure;
         const GHC.Stats.$w$creadPrec_closure;
         const lexeme1_rcHq7_closure;
         const GHC.Stats.$fReadGCDetails2_closure;
         const GHC.Read.list3_closure;
         const GHC.Stats.$fReadGCDetails_$creadsPrec_closure;
         const GHC.Read.list_closure;
         const GHC.Stats.$fReadGCDetails1_closure;
         const GHC.Stats.$fReadGCDetails_$creadListPrec_closure;
         const GHC.Stats.$fReadGCDetails3_closure;
         const lvl110_rcHru_closure;
         const lvl111_rcHrv_closure;
         const lvl108_rcHrs_closure;
         const lvl106_rcHrq_closure;
         const lvl104_rcHro_closure;
         const lvl102_rcHrm_closure;
         const lvl100_rcHrk_closure;
         const lvl98_rcHri_closure;
         const lvl96_rcHrg_closure;
         const lvl94_rcHre_closure;
         const lvl92_rcHrc_closure;
         const lvl90_rcHra_closure;
         const lvl88_rcHr8_closure;
         const lvl86_rcHr6_closure;
         const lvl84_rcHr4_closure;
         const lvl82_rcHr2_closure;
         const lvl80_rcHr0_closure;
         const lvl78_rcHqY_closure;
         const lvl76_rcHqW_closure;
         const lvl74_rcHqU_closure;
         const ds4_rcHqS_closure;
         const GHC.Stats.$w$creadPrec1_closure;
         const lexeme6_rcHqQ_closure;
         const GHC.Stats.$fReadRTSStats2_closure;
         const GHC.Stats.$fReadRTSStats_$creadsPrec_closure;
         const GHC.Stats.$fReadRTSStats1_closure;
         const GHC.Stats.$fReadRTSStats_$creadListPrec_closure;
         const GHC.Stats.$fReadRTSStats3_closure;
         const GHC.IO.Exception.$fExceptionIOException_$ctoException_closure;
         const GHC.Stats.getRTSStats3_closure;
         const GHC.Stats.getRTSStats1_closure;
         const GHC.Stats.getRTSStats2_closure;
 }]

