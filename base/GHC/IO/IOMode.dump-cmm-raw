
==================== Raw Cmm ====================
2018-03-16 15:59:39.364866825 UTC

[]


==================== Raw Cmm ====================
2018-03-16 15:59:39.366088458 UTC

[section ""cstring" . GHC.IO.IOMode.$fReadIOMode21_bytes" {
     GHC.IO.IOMode.$fReadIOMode21_bytes:
         I8[] [82,101,97,100,77,111,100,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.368707754 UTC

[section ""data" . GHC.IO.IOMode.$fReadIOMode20_closure" {
     GHC.IO.IOMode.$fReadIOMode20_closure:
         const GHC.IO.IOMode.$fReadIOMode20_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.IOMode.$fReadIOMode20_entry() //  [R1]
         { []
         }
     {offset
       c4NhD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4NhE; else goto c4NhF;
       c4NhE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4NhF: // global
           (_c4NhA::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4NhA::I64 == 0) goto c4NhC; else goto c4NhB;
       c4NhC: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c4NhB: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4NhA::I64;
           R2 = GHC.IO.IOMode.$fReadIOMode21_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fReadIOMode20_info" {
     GHC.IO.IOMode.$fReadIOMode20_info:
         const GHC.IO.IOMode.$fReadIOMode20_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.374138736 UTC

[section ""cstring" . GHC.IO.IOMode.$fReadIOMode17_bytes" {
     GHC.IO.IOMode.$fReadIOMode17_bytes:
         I8[] [87,114,105,116,101,77,111,100,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.377473112 UTC

[section ""data" . GHC.IO.IOMode.$fReadIOMode16_closure" {
     GHC.IO.IOMode.$fReadIOMode16_closure:
         const GHC.IO.IOMode.$fReadIOMode16_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.IOMode.$fReadIOMode16_entry() //  [R1]
         { []
         }
     {offset
       c4NhU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4NhV; else goto c4NhW;
       c4NhV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4NhW: // global
           (_c4NhR::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4NhR::I64 == 0) goto c4NhT; else goto c4NhS;
       c4NhT: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c4NhS: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4NhR::I64;
           R2 = GHC.IO.IOMode.$fReadIOMode17_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fReadIOMode16_info" {
     GHC.IO.IOMode.$fReadIOMode16_info:
         const GHC.IO.IOMode.$fReadIOMode16_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.383063529 UTC

[section ""cstring" . GHC.IO.IOMode.$fReadIOMode13_bytes" {
     GHC.IO.IOMode.$fReadIOMode13_bytes:
         I8[] [65,112,112,101,110,100,77,111,100,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.386642393 UTC

[section ""data" . GHC.IO.IOMode.$fReadIOMode12_closure" {
     GHC.IO.IOMode.$fReadIOMode12_closure:
         const GHC.IO.IOMode.$fReadIOMode12_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.IOMode.$fReadIOMode12_entry() //  [R1]
         { []
         }
     {offset
       c4Nib: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Nic; else goto c4Nid;
       c4Nic: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Nid: // global
           (_c4Ni8::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4Ni8::I64 == 0) goto c4Nia; else goto c4Ni9;
       c4Nia: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c4Ni9: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4Ni8::I64;
           R2 = GHC.IO.IOMode.$fReadIOMode13_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fReadIOMode12_info" {
     GHC.IO.IOMode.$fReadIOMode12_info:
         const GHC.IO.IOMode.$fReadIOMode12_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.392006935 UTC

[section ""cstring" . GHC.IO.IOMode.$fReadIOMode9_bytes" {
     GHC.IO.IOMode.$fReadIOMode9_bytes:
         I8[] [82,101,97,100,87,114,105,116,101,77,111,100,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.394523106 UTC

[section ""data" . GHC.IO.IOMode.$fReadIOMode8_closure" {
     GHC.IO.IOMode.$fReadIOMode8_closure:
         const GHC.IO.IOMode.$fReadIOMode8_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.IOMode.$fReadIOMode8_entry() //  [R1]
         { []
         }
     {offset
       c4Nis: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Nit; else goto c4Niu;
       c4Nit: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Niu: // global
           (_c4Nip::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4Nip::I64 == 0) goto c4Nir; else goto c4Niq;
       c4Nir: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c4Niq: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4Nip::I64;
           R2 = GHC.IO.IOMode.$fReadIOMode9_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fReadIOMode8_info" {
     GHC.IO.IOMode.$fReadIOMode8_info:
         const GHC.IO.IOMode.$fReadIOMode8_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.400258755 UTC

[section ""data" . GHC.IO.IOMode.$w$cshowsPrec_closure" {
     GHC.IO.IOMode.$w$cshowsPrec_closure:
         const GHC.IO.IOMode.$w$cshowsPrec_info;
         const 0;
 },
 GHC.IO.IOMode.$w$cshowsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       c4NiP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4NiQ; else goto c4NiR;
       c4NiQ: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.IOMode.$w$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4NiR: // global
           I64[Sp - 16] = block_c4NiG_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4Nj6; else goto c4NiH;
       u4Nj6: // global
           call _c4NiG(R1) args: 0, res: 0, upd: 0;
       c4NiH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$w$cshowsPrec_info" {
     GHC.IO.IOMode.$w$cshowsPrec_info:
         const GHC.IO.IOMode.$w$cshowsPrec_entry;
         const 0;
         const 133143986190;
         const 8589934607;
         const S4L8g_srt;
 },
 _c4NiG() //  [R1]
         { []
         }
     {offset
       c4NiG: // global
           _s4KZ9::P64 = P64[Sp + 8];
           _c4NiO::P64 = R1 & 7;
           if (_c4NiO::P64 < 3) goto u4Nj4; else goto u4Nj5;
       u4Nj4: // global
           if (_c4NiO::P64 < 2) goto c4NiK; else goto c4NiL;
       c4NiK: // global
           R3 = _s4KZ9::P64;
           R2 = GHC.IO.IOMode.$fReadIOMode20_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c4NiL: // global
           R3 = _s4KZ9::P64;
           R2 = GHC.IO.IOMode.$fReadIOMode16_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       u4Nj5: // global
           if (_c4NiO::P64 < 4) goto c4NiM; else goto c4NiN;
       c4NiM: // global
           R3 = _s4KZ9::P64;
           R2 = GHC.IO.IOMode.$fReadIOMode12_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c4NiN: // global
           R3 = _s4KZ9::P64;
           R2 = GHC.IO.IOMode.$fReadIOMode8_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4NiG_info" {
     block_c4NiG_info:
         const _c4NiG;
         const 1;
         const 64424509470;
         const S4L8g_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.406979139 UTC

[section ""data" . GHC.IO.IOMode.$fShowIOMode_$cshowsPrec_closure" {
     GHC.IO.IOMode.$fShowIOMode_$cshowsPrec_closure:
         const GHC.IO.IOMode.$fShowIOMode_$cshowsPrec_info;
         const 0;
 },
 GHC.IO.IOMode.$fShowIOMode_$cshowsPrec_entry() //  [R3, R4]
         { []
         }
     {offset
       c4Njl: // global
           _s4KZc::P64 = R3;
           R3 = R4;
           R2 = _s4KZc::P64;
           call GHC.IO.IOMode.$w$cshowsPrec_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fShowIOMode_$cshowsPrec_info" {
     GHC.IO.IOMode.$fShowIOMode_$cshowsPrec_info:
         const GHC.IO.IOMode.$fShowIOMode_$cshowsPrec_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const S4L8g_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.411698037 UTC

[section ""data" . GHC.IO.IOMode.$fShowIOMode_$cshow_closure" {
     GHC.IO.IOMode.$fShowIOMode_$cshow_closure:
         const GHC.IO.IOMode.$fShowIOMode_$cshow_info;
         const 0;
 },
 GHC.IO.IOMode.$fShowIOMode_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c4NjF: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c4NjG; else goto c4NjH;
       c4NjG: // global
           R2 = R2;
           R1 = GHC.IO.IOMode.$fShowIOMode_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4NjH: // global
           I64[Sp - 8] = block_c4Njw_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u4NjW; else goto c4Njx;
       u4NjW: // global
           call _c4Njw(R1) args: 0, res: 0, upd: 0;
       c4Njx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fShowIOMode_$cshow_info" {
     GHC.IO.IOMode.$fShowIOMode_$cshow_info:
         const GHC.IO.IOMode.$fShowIOMode_$cshow_entry;
         const 0;
         const 201863462926;
         const 4294967301;
         const S4L8g_srt;
 },
 _c4Njw() //  [R1]
         { []
         }
     {offset
       c4Njw: // global
           _c4NjE::P64 = R1 & 7;
           if (_c4NjE::P64 < 3) goto u4NjU; else goto u4NjV;
       u4NjU: // global
           if (_c4NjE::P64 < 2) goto c4NjA; else goto c4NjB;
       c4NjA: // global
           R1 = GHC.IO.IOMode.$fReadIOMode20_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c4NjB: // global
           R1 = GHC.IO.IOMode.$fReadIOMode16_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u4NjV: // global
           if (_c4NjE::P64 < 4) goto c4NjC; else goto c4NjD;
       c4NjC: // global
           R1 = GHC.IO.IOMode.$fReadIOMode12_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c4NjD: // global
           R1 = GHC.IO.IOMode.$fReadIOMode8_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Njw_info" {
     block_c4Njw_info:
         const _c4Njw;
         const 0;
         const 64424509470;
         const S4L8g_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.418522984 UTC

[section ""data" . GHC.IO.IOMode.$fShowIOMode_$cshowList_closure" {
     GHC.IO.IOMode.$fShowIOMode_$cshowList_closure:
         const GHC.IO.IOMode.$fShowIOMode_$cshowList_info;
         const 0;
 },
 GHC.IO.IOMode.$fShowIOMode_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       c4Nkf: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.IOMode.$w$cshowsPrec_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fShowIOMode_$cshowList_info" {
     GHC.IO.IOMode.$fShowIOMode_$cshowList_info:
         const GHC.IO.IOMode.$fShowIOMode_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S4L8g_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.421932418 UTC

[section ""data" . GHC.IO.IOMode.$fShowIOMode_closure" {
     GHC.IO.IOMode.$fShowIOMode_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.IO.IOMode.$fShowIOMode_$cshowsPrec_closure+3;
         const GHC.IO.IOMode.$fShowIOMode_$cshow_closure+1;
         const GHC.IO.IOMode.$fShowIOMode_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.424151754 UTC

[section ""data" . GHC.IO.IOMode.$fReadIOMode19_closure" {
     GHC.IO.IOMode.$fReadIOMode19_closure:
         const GHC.IO.IOMode.$fReadIOMode19_info;
 },
 GHC.IO.IOMode.$fReadIOMode19_entry() //  [R3]
         { []
         }
     {offset
       c4Nkr: // global
           R2 = GHC.IO.IOMode.ReadMode_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fReadIOMode19_info" {
     GHC.IO.IOMode.$fReadIOMode19_info:
         const GHC.IO.IOMode.$fReadIOMode19_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.427809773 UTC

[section ""data" . GHC.IO.IOMode.$fReadIOMode18_closure" {
     GHC.IO.IOMode.$fReadIOMode18_closure:
         const (,)_con_info;
         const GHC.IO.IOMode.$fReadIOMode20_closure;
         const GHC.IO.IOMode.$fReadIOMode19_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.429945492 UTC

[section ""data" . GHC.IO.IOMode.$fReadIOMode15_closure" {
     GHC.IO.IOMode.$fReadIOMode15_closure:
         const GHC.IO.IOMode.$fReadIOMode15_info;
 },
 GHC.IO.IOMode.$fReadIOMode15_entry() //  [R3]
         { []
         }
     {offset
       c4NkD: // global
           R2 = GHC.IO.IOMode.WriteMode_closure+2;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fReadIOMode15_info" {
     GHC.IO.IOMode.$fReadIOMode15_info:
         const GHC.IO.IOMode.$fReadIOMode15_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.433333873 UTC

[section ""data" . GHC.IO.IOMode.$fReadIOMode14_closure" {
     GHC.IO.IOMode.$fReadIOMode14_closure:
         const (,)_con_info;
         const GHC.IO.IOMode.$fReadIOMode16_closure;
         const GHC.IO.IOMode.$fReadIOMode15_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.435440073 UTC

[section ""data" . GHC.IO.IOMode.$fReadIOMode11_closure" {
     GHC.IO.IOMode.$fReadIOMode11_closure:
         const GHC.IO.IOMode.$fReadIOMode11_info;
 },
 GHC.IO.IOMode.$fReadIOMode11_entry() //  [R3]
         { []
         }
     {offset
       c4NkP: // global
           R2 = GHC.IO.IOMode.AppendMode_closure+3;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fReadIOMode11_info" {
     GHC.IO.IOMode.$fReadIOMode11_info:
         const GHC.IO.IOMode.$fReadIOMode11_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.438619277 UTC

[section ""data" . GHC.IO.IOMode.$fReadIOMode10_closure" {
     GHC.IO.IOMode.$fReadIOMode10_closure:
         const (,)_con_info;
         const GHC.IO.IOMode.$fReadIOMode12_closure;
         const GHC.IO.IOMode.$fReadIOMode11_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.440767705 UTC

[section ""data" . GHC.IO.IOMode.$fReadIOMode7_closure" {
     GHC.IO.IOMode.$fReadIOMode7_closure:
         const GHC.IO.IOMode.$fReadIOMode7_info;
 },
 GHC.IO.IOMode.$fReadIOMode7_entry() //  [R3]
         { []
         }
     {offset
       c4Nl1: // global
           R2 = GHC.IO.IOMode.ReadWriteMode_closure+4;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fReadIOMode7_info" {
     GHC.IO.IOMode.$fReadIOMode7_info:
         const GHC.IO.IOMode.$fReadIOMode7_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.444455688 UTC

[section ""data" . GHC.IO.IOMode.$fReadIOMode6_closure" {
     GHC.IO.IOMode.$fReadIOMode6_closure:
         const (,)_con_info;
         const GHC.IO.IOMode.$fReadIOMode8_closure;
         const GHC.IO.IOMode.$fReadIOMode7_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.447583434 UTC

[section ""data" . GHC.IO.IOMode.$fReadIOMode5_closure" {
     GHC.IO.IOMode.$fReadIOMode5_closure:
         const :_con_info;
         const GHC.IO.IOMode.$fReadIOMode6_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.450482728 UTC

[section ""data" . GHC.IO.IOMode.$fReadIOMode4_closure" {
     GHC.IO.IOMode.$fReadIOMode4_closure:
         const :_con_info;
         const GHC.IO.IOMode.$fReadIOMode10_closure+1;
         const GHC.IO.IOMode.$fReadIOMode5_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.453092469 UTC

[section ""data" . GHC.IO.IOMode.$fReadIOMode3_closure" {
     GHC.IO.IOMode.$fReadIOMode3_closure:
         const :_con_info;
         const GHC.IO.IOMode.$fReadIOMode14_closure+1;
         const GHC.IO.IOMode.$fReadIOMode4_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.455396797 UTC

[section ""data" . GHC.IO.IOMode.$fReadIOMode_sps_closure" {
     GHC.IO.IOMode.$fReadIOMode_sps_closure:
         const :_con_info;
         const GHC.IO.IOMode.$fReadIOMode18_closure+1;
         const GHC.IO.IOMode.$fReadIOMode3_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.458179875 UTC

[section ""data" . GHC.IO.IOMode.$fReadIOMode2_closure" {
     GHC.IO.IOMode.$fReadIOMode2_closure:
         const GHC.IO.IOMode.$fReadIOMode2_info;
         const 0;
 },
 GHC.IO.IOMode.$fReadIOMode2_entry() //  [R2]
         { []
         }
     {offset
       c4Nlh: // global
           R3 = R2;
           R2 = GHC.IO.IOMode.$fReadIOMode_sps_closure+2;
           call GHC.Read.choose2_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fReadIOMode2_info" {
     GHC.IO.IOMode.$fReadIOMode2_info:
         const GHC.IO.IOMode.$fReadIOMode2_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S4L8g_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.461892384 UTC

[section ""data" . GHC.IO.IOMode.$fReadIOMode1_closure" {
     GHC.IO.IOMode.$fReadIOMode1_closure:
         const GHC.IO.IOMode.$fReadIOMode1_info;
         const 0;
 },
 GHC.IO.IOMode.$fReadIOMode1_entry() //  [R2, R3]
         { []
         }
     {offset
       c4Nls: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.IOMode.$fReadIOMode2_closure+1;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fReadIOMode1_info" {
     GHC.IO.IOMode.$fReadIOMode1_info:
         const GHC.IO.IOMode.$fReadIOMode1_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S4L8g_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.465993689 UTC

[section ""data" . GHC.IO.IOMode.$fReadIOMode_$creadsPrec_closure" {
     GHC.IO.IOMode.$fReadIOMode_$creadsPrec_closure:
         const GHC.IO.IOMode.$fReadIOMode_$creadsPrec_info;
         const 0;
 },
 sat_s4KZs_entry() //  [R1]
         { []
         }
     {offset
       c4NlH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4NlI; else goto c4NlJ;
       c4NlI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4NlJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = P64[R1 + 16];
           R2 = GHC.IO.IOMode.$fReadIOMode2_closure+1;
           Sp = Sp - 16;
           call GHC.Read.list3_entry(R4, R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4KZs_info" {
     sat_s4KZs_info:
         const sat_s4KZs_entry;
         const 1;
         const 12884901904;
         const S4L8g_srt+64;
 },
 GHC.IO.IOMode.$fReadIOMode_$creadsPrec_entry() //  [R2]
         { []
         }
     {offset
       c4NlK: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c4NlO; else goto c4NlN;
       c4NlO: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.IO.IOMode.$fReadIOMode_$creadsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4NlN: // global
           I64[Hp - 16] = sat_s4KZs_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fReadIOMode_$creadsPrec_info" {
     GHC.IO.IOMode.$fReadIOMode_$creadsPrec_info:
         const GHC.IO.IOMode.$fReadIOMode_$creadsPrec_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const S4L8g_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.471717859 UTC

[section ""data" . GHC.IO.IOMode.$fReadIOMode_$creadListPrec_closure" {
     GHC.IO.IOMode.$fReadIOMode_$creadListPrec_closure:
         const GHC.IO.IOMode.$fReadIOMode_$creadListPrec_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.IOMode.$fReadIOMode_$creadListPrec_entry() //  [R1]
         { []
         }
     {offset
       c4Nm3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Nm4; else goto c4Nm5;
       c4Nm4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Nm5: // global
           (_c4Nm0::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4Nm0::I64 == 0) goto c4Nm2; else goto c4Nm1;
       c4Nm2: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c4Nm1: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4Nm0::I64;
           R2 = GHC.IO.IOMode.$fReadIOMode1_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fReadIOMode_$creadListPrec_info" {
     GHC.IO.IOMode.$fReadIOMode_$creadListPrec_info:
         const GHC.IO.IOMode.$fReadIOMode_$creadListPrec_entry;
         const 0;
         const 12884901909;
         const S4L8g_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.476659949 UTC

[section ""data" . GHC.IO.IOMode.$fReadIOMode22_closure" {
     GHC.IO.IOMode.$fReadIOMode22_closure:
         const GHC.IO.IOMode.$fReadIOMode22_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.IOMode.$fReadIOMode22_entry() //  [R1]
         { []
         }
     {offset
       c4Nmj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Nmk; else goto c4Nml;
       c4Nmk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Nml: // global
           (_c4Nmg::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4Nmg::I64 == 0) goto c4Nmi; else goto c4Nmh;
       c4Nmi: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c4Nmh: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4Nmg::I64;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = GHC.Read.$fRead()7_closure;
           R1 = GHC.IO.IOMode.$fReadIOMode_$creadListPrec_closure;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fReadIOMode22_info" {
     GHC.IO.IOMode.$fReadIOMode22_info:
         const GHC.IO.IOMode.$fReadIOMode22_entry;
         const 0;
         const 4294967317;
         const S4L8g_srt+104;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.480873249 UTC

[section ""data" . GHC.IO.IOMode.$fReadIOMode_$creadList_closure" {
     GHC.IO.IOMode.$fReadIOMode_$creadList_closure:
         const GHC.IO.IOMode.$fReadIOMode_$creadList_info;
         const 0;
 },
 GHC.IO.IOMode.$fReadIOMode_$creadList_entry() //  [R2]
         { []
         }
     {offset
       c4Nmx: // global
           R3 = R2;
           R2 = GHC.IO.IOMode.$fReadIOMode22_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fReadIOMode_$creadList_info" {
     GHC.IO.IOMode.$fReadIOMode_$creadList_info:
         const GHC.IO.IOMode.$fReadIOMode_$creadList_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S4L8g_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.484768286 UTC

[section ""data" . GHC.IO.IOMode.$fReadIOMode_closure" {
     GHC.IO.IOMode.$fReadIOMode_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.IO.IOMode.$fReadIOMode_$creadsPrec_closure+1;
         const GHC.IO.IOMode.$fReadIOMode_$creadList_closure+1;
         const GHC.IO.IOMode.$fReadIOMode1_closure+2;
         const GHC.IO.IOMode.$fReadIOMode_$creadListPrec_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.489102001 UTC

[section ""data" . GHC.IO.IOMode.$fEqIOMode_$c==_closure" {
     GHC.IO.IOMode.$fEqIOMode_$c==_closure:
         const GHC.IO.IOMode.$fEqIOMode_$c==_info;
 },
 GHC.IO.IOMode.$fEqIOMode_$c==_entry() //  [R2, R3]
         { []
         }
     {offset
       c4NmS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4NmT; else goto c4NmU;
       c4NmT: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.IOMode.$fEqIOMode_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4NmU: // global
           I64[Sp - 16] = block_c4NmJ_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4Nob; else goto c4NmK;
       u4Nob: // global
           call _c4NmJ(R1) args: 0, res: 0, upd: 0;
       c4NmK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fEqIOMode_$c==_info" {
     GHC.IO.IOMode.$fEqIOMode_$c==_info:
         const GHC.IO.IOMode.$fEqIOMode_$c==_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c4NmJ() //  [R1]
         { []
         }
     {offset
       c4NmJ: // global
           _s4KZu::P64 = P64[Sp + 8];
           _c4NmR::P64 = R1 & 7;
           if (_c4NmR::P64 < 3) goto u4NnX; else goto u4NnY;
       u4NnX: // global
           if (_c4NmR::P64 < 2) goto c4NmN; else goto c4NmO;
       c4NmN: // global
           I64[Sp + 8] = block_c4NmX_info;
           R1 = _s4KZu::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4No7; else goto c4NmZ;
       u4No7: // global
           call _c4NmX(R1) args: 0, res: 0, upd: 0;
       c4NmZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c4NmO: // global
           I64[Sp + 8] = block_c4Nnc_info;
           R1 = _s4KZu::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4No8; else goto c4Nne;
       u4No8: // global
           call _c4Nnc(R1) args: 0, res: 0, upd: 0;
       c4Nne: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u4NnY: // global
           if (_c4NmR::P64 < 4) goto c4NmP; else goto c4NmQ;
       c4NmP: // global
           I64[Sp + 8] = block_c4Nnr_info;
           R1 = _s4KZu::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4No9; else goto c4Nnt;
       u4No9: // global
           call _c4Nnr(R1) args: 0, res: 0, upd: 0;
       c4Nnt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c4NmQ: // global
           I64[Sp + 8] = block_c4NnG_info;
           R1 = _s4KZu::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4Noa; else goto c4NnI;
       u4Noa: // global
           call _c4NnG(R1) args: 0, res: 0, upd: 0;
       c4NnI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4NmJ_info" {
     block_c4NmJ_info:
         const _c4NmJ;
         const 1;
         const 30;
 },
 _c4NmX() //  [R1]
         { []
         }
     {offset
       c4NmX: // global
           if (R1 & 7 == 1) goto u4NnZ; else goto u4No0;
       u4NnZ: // global
           Sp = Sp + 8;
           call _c4NnS() args: 0, res: 0, upd: 0;
       u4No0: // global
           Sp = Sp + 8;
           call _c4NnO() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4NmX_info" {
     block_c4NmX_info:
         const _c4NmX;
         const 0;
         const 30;
 },
 _c4Nnc() //  [R1]
         { []
         }
     {offset
       c4Nnc: // global
           if (R1 & 7 == 2) goto u4No1; else goto u4No2;
       u4No1: // global
           Sp = Sp + 8;
           call _c4NnS() args: 0, res: 0, upd: 0;
       u4No2: // global
           Sp = Sp + 8;
           call _c4NnO() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4Nnc_info" {
     block_c4Nnc_info:
         const _c4Nnc;
         const 0;
         const 30;
 },
 _c4Nnr() //  [R1]
         { []
         }
     {offset
       c4Nnr: // global
           if (R1 & 7 == 3) goto u4No3; else goto u4No4;
       u4No3: // global
           Sp = Sp + 8;
           call _c4NnS() args: 0, res: 0, upd: 0;
       u4No4: // global
           Sp = Sp + 8;
           call _c4NnO() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4Nnr_info" {
     block_c4Nnr_info:
         const _c4Nnr;
         const 0;
         const 30;
 },
 _c4NnG() //  [R1]
         { []
         }
     {offset
       c4NnG: // global
           if (R1 & 7 == 4) goto u4No5; else goto u4No6;
       u4No5: // global
           Sp = Sp + 8;
           call _c4NnS() args: 0, res: 0, upd: 0;
       u4No6: // global
           Sp = Sp + 8;
           call _c4NnO() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4NnG_info" {
     block_c4NnG_info:
         const _c4NnG;
         const 0;
         const 30;
 },
 _c4NnS() //  []
         { []
         }
     {offset
       c4NnS: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c4NnO() //  []
         { []
         }
     {offset
       c4NnO: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.50478454 UTC

[section ""data" . GHC.IO.IOMode.$fEqIOMode_$c/=_closure" {
     GHC.IO.IOMode.$fEqIOMode_$c/=_closure:
         const GHC.IO.IOMode.$fEqIOMode_$c/=_info;
 },
 GHC.IO.IOMode.$fEqIOMode_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       c4Npb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Npc; else goto c4Npd;
       c4Npc: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.IOMode.$fEqIOMode_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4Npd: // global
           I64[Sp - 16] = block_c4Np2_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4Nqu; else goto c4Np3;
       u4Nqu: // global
           call _c4Np2(R1) args: 0, res: 0, upd: 0;
       c4Np3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fEqIOMode_$c/=_info" {
     GHC.IO.IOMode.$fEqIOMode_$c/=_info:
         const GHC.IO.IOMode.$fEqIOMode_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c4Np2() //  [R1]
         { []
         }
     {offset
       c4Np2: // global
           _s4KZB::P64 = P64[Sp + 8];
           _c4Npa::P64 = R1 & 7;
           if (_c4Npa::P64 < 3) goto u4Nqg; else goto u4Nqh;
       u4Nqg: // global
           if (_c4Npa::P64 < 2) goto c4Np6; else goto c4Np7;
       c4Np6: // global
           I64[Sp + 8] = block_c4Npg_info;
           R1 = _s4KZB::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4Nqq; else goto c4Npi;
       u4Nqq: // global
           call _c4Npg(R1) args: 0, res: 0, upd: 0;
       c4Npi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c4Np7: // global
           I64[Sp + 8] = block_c4Npv_info;
           R1 = _s4KZB::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4Nqr; else goto c4Npx;
       u4Nqr: // global
           call _c4Npv(R1) args: 0, res: 0, upd: 0;
       c4Npx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u4Nqh: // global
           if (_c4Npa::P64 < 4) goto c4Np8; else goto c4Np9;
       c4Np8: // global
           I64[Sp + 8] = block_c4NpK_info;
           R1 = _s4KZB::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4Nqs; else goto c4NpM;
       u4Nqs: // global
           call _c4NpK(R1) args: 0, res: 0, upd: 0;
       c4NpM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c4Np9: // global
           I64[Sp + 8] = block_c4NpZ_info;
           R1 = _s4KZB::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4Nqt; else goto c4Nq1;
       u4Nqt: // global
           call _c4NpZ(R1) args: 0, res: 0, upd: 0;
       c4Nq1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Np2_info" {
     block_c4Np2_info:
         const _c4Np2;
         const 1;
         const 30;
 },
 _c4Npg() //  [R1]
         { []
         }
     {offset
       c4Npg: // global
           if (R1 & 7 == 1) goto u4Nqi; else goto u4Nqj;
       u4Nqi: // global
           Sp = Sp + 8;
           call _c4Nqb() args: 0, res: 0, upd: 0;
       u4Nqj: // global
           Sp = Sp + 8;
           call _c4Nq7() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4Npg_info" {
     block_c4Npg_info:
         const _c4Npg;
         const 0;
         const 30;
 },
 _c4Npv() //  [R1]
         { []
         }
     {offset
       c4Npv: // global
           if (R1 & 7 == 2) goto u4Nqk; else goto u4Nql;
       u4Nqk: // global
           Sp = Sp + 8;
           call _c4Nqb() args: 0, res: 0, upd: 0;
       u4Nql: // global
           Sp = Sp + 8;
           call _c4Nq7() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4Npv_info" {
     block_c4Npv_info:
         const _c4Npv;
         const 0;
         const 30;
 },
 _c4NpK() //  [R1]
         { []
         }
     {offset
       c4NpK: // global
           if (R1 & 7 == 3) goto u4Nqm; else goto u4Nqn;
       u4Nqm: // global
           Sp = Sp + 8;
           call _c4Nqb() args: 0, res: 0, upd: 0;
       u4Nqn: // global
           Sp = Sp + 8;
           call _c4Nq7() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4NpK_info" {
     block_c4NpK_info:
         const _c4NpK;
         const 0;
         const 30;
 },
 _c4NpZ() //  [R1]
         { []
         }
     {offset
       c4NpZ: // global
           if (R1 & 7 == 4) goto u4Nqo; else goto u4Nqp;
       u4Nqo: // global
           Sp = Sp + 8;
           call _c4Nqb() args: 0, res: 0, upd: 0;
       u4Nqp: // global
           Sp = Sp + 8;
           call _c4Nq7() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4NpZ_info" {
     block_c4NpZ_info:
         const _c4NpZ;
         const 0;
         const 30;
 },
 _c4Nqb() //  []
         { []
         }
     {offset
       c4Nqb: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c4Nq7() //  []
         { []
         }
     {offset
       c4Nq7: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.518149195 UTC

[section ""data" . GHC.IO.IOMode.$fEqIOMode_closure" {
     GHC.IO.IOMode.$fEqIOMode_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.IO.IOMode.$fEqIOMode_$c==_closure+2;
         const GHC.IO.IOMode.$fEqIOMode_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.523147687 UTC

[section ""data" . GHC.IO.IOMode.$fOrdIOMode_$ccompare_closure" {
     GHC.IO.IOMode.$fOrdIOMode_$ccompare_closure:
         const GHC.IO.IOMode.$fOrdIOMode_$ccompare_info;
 },
 GHC.IO.IOMode.$fOrdIOMode_$ccompare_entry() //  [R2, R3]
         { []
         }
     {offset
       c4Nrv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Nrw; else goto c4Nrx;
       c4Nrw: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.IOMode.$fOrdIOMode_$ccompare_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4Nrx: // global
           I64[Sp - 16] = block_c4Nrm_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4Ntg; else goto c4Nrn;
       u4Ntg: // global
           call _c4Nrm(R1) args: 0, res: 0, upd: 0;
       c4Nrn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fOrdIOMode_$ccompare_info" {
     GHC.IO.IOMode.$fOrdIOMode_$ccompare_info:
         const GHC.IO.IOMode.$fOrdIOMode_$ccompare_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c4Nrm() //  [R1]
         { []
         }
     {offset
       c4Nrm: // global
           _s4KZI::P64 = P64[Sp + 8];
           _c4Nru::P64 = R1 & 7;
           if (_c4Nru::P64 < 3) goto u4NsU; else goto u4NsV;
       u4NsU: // global
           if (_c4Nru::P64 < 2) goto c4Nrq; else goto c4Nrr;
       c4Nrq: // global
           I64[Sp + 8] = block_c4NrA_info;
           R1 = _s4KZI::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4Ntc; else goto c4NrC;
       u4Ntc: // global
           call _c4NrA(R1) args: 0, res: 0, upd: 0;
       c4NrC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c4Nrr: // global
           I64[Sp + 8] = block_c4NrX_info;
           R1 = _s4KZI::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4Ntd; else goto c4NrZ;
       u4Ntd: // global
           call _c4NrX(R1) args: 0, res: 0, upd: 0;
       c4NrZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u4NsV: // global
           if (_c4Nru::P64 < 4) goto c4Nrs; else goto c4Nrt;
       c4Nrs: // global
           I64[Sp + 8] = block_c4Nsk_info;
           R1 = _s4KZI::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4Nte; else goto c4Nsm;
       u4Nte: // global
           call _c4Nsk(R1) args: 0, res: 0, upd: 0;
       c4Nsm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c4Nrt: // global
           I64[Sp + 8] = block_c4NsD_info;
           R1 = _s4KZI::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4Ntf; else goto c4NsF;
       u4Ntf: // global
           call _c4NsD(R1) args: 0, res: 0, upd: 0;
       c4NsF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Nrm_info" {
     block_c4Nrm_info:
         const _c4Nrm;
         const 1;
         const 30;
 },
 _c4NrA() //  [R1]
         { []
         }
     {offset
       c4NrA: // global
           _c4NsT::P64 = R1 & 7;
           if (_c4NsT::P64 < 2) goto u4Nt0; else goto u4NsW;
       u4Nt0: // global
           Sp = Sp + 8;
           call _c4NsP() args: 0, res: 0, upd: 0;
       u4NsW: // global
           if (_c4NsT::P64 != 3) goto u4Nt2; else goto u4Nt2;
       u4Nt2: // global
           Sp = Sp + 8;
           call _c4NsA() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4NrA_info" {
     block_c4NrA_info:
         const _c4NrA;
         const 0;
         const 30;
 },
 _c4NrX() //  [R1]
         { []
         }
     {offset
       c4NrX: // global
           _c4NsS::P64 = R1 & 7;
           if (_c4NsS::P64 < 3) goto u4NsX; else goto u4NsY;
       u4NsX: // global
           if (_c4NsS::P64 < 2) goto u4Nt4; else goto u4Nt3;
       u4Nt4: // global
           Sp = Sp + 8;
           call _c4NsL() args: 0, res: 0, upd: 0;
       u4Nt3: // global
           Sp = Sp + 8;
           call _c4NsP() args: 0, res: 0, upd: 0;
       u4NsY: // global
           if (_c4NsS::P64 < 4) goto u4Nt6; else goto u4Nt6;
       u4Nt6: // global
           Sp = Sp + 8;
           call _c4NsA() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4NrX_info" {
     block_c4NrX_info:
         const _c4NrX;
         const 0;
         const 30;
 },
 _c4Nsk() //  [R1]
         { []
         }
     {offset
       c4Nsk: // global
           _c4NsR::P64 = R1 & 7;
           if (_c4NsR::P64 != 3) goto u4NsZ; else goto u4Nt7;
       u4NsZ: // global
           if (_c4NsR::P64 != 4) goto u4Nt9; else goto u4Nt8;
       u4Nt9: // global
           Sp = Sp + 8;
           call _c4NsL() args: 0, res: 0, upd: 0;
       u4Nt8: // global
           Sp = Sp + 8;
           call _c4NsA() args: 0, res: 0, upd: 0;
       u4Nt7: // global
           Sp = Sp + 8;
           call _c4NsP() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4Nsk_info" {
     block_c4Nsk_info:
         const _c4Nsk;
         const 0;
         const 30;
 },
 _c4NsA() //  []
         { []
         }
     {offset
       c4NsA: // global
           R1 = GHC.Types.LT_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c4NsD() //  [R1]
         { []
         }
     {offset
       c4NsD: // global
           if (R1 & 7 == 4) goto u4Nta; else goto u4Ntb;
       u4Nta: // global
           Sp = Sp + 8;
           call _c4NsP() args: 0, res: 0, upd: 0;
       u4Ntb: // global
           Sp = Sp + 8;
           call _c4NsL() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4NsD_info" {
     block_c4NsD_info:
         const _c4NsD;
         const 0;
         const 30;
 },
 _c4NsP() //  []
         { []
         }
     {offset
       c4NsP: // global
           R1 = GHC.Types.EQ_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c4NsL() //  []
         { []
         }
     {offset
       c4NsL: // global
           R1 = GHC.Types.GT_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.541553887 UTC

[section ""data" . GHC.IO.IOMode.$fOrdIOMode_$c<_closure" {
     GHC.IO.IOMode.$fOrdIOMode_$c<_closure:
         const GHC.IO.IOMode.$fOrdIOMode_$c<_info;
 },
 GHC.IO.IOMode.$fOrdIOMode_$c<_entry() //  [R2, R3]
         { []
         }
     {offset
       c4Nui: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Nuj; else goto c4Nuk;
       c4Nuj: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.IOMode.$fOrdIOMode_$c<_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4Nuk: // global
           I64[Sp - 16] = block_c4Nu9_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4NvI; else goto c4Nua;
       u4NvI: // global
           call _c4Nu9(R1) args: 0, res: 0, upd: 0;
       c4Nua: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fOrdIOMode_$c<_info" {
     GHC.IO.IOMode.$fOrdIOMode_$c<_info:
         const GHC.IO.IOMode.$fOrdIOMode_$c<_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c4Nu9() //  [R1]
         { []
         }
     {offset
       c4Nu9: // global
           _s4KZP::P64 = P64[Sp + 8];
           _c4Nuh::P64 = R1 & 7;
           if (_c4Nuh::P64 < 3) goto u4Nvs; else goto u4Nvt;
       u4Nvs: // global
           if (_c4Nuh::P64 < 2) goto c4Nud; else goto c4Nue;
       c4Nud: // global
           I64[Sp + 8] = block_c4Nun_info;
           R1 = _s4KZP::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4NvE; else goto c4Nup;
       u4NvE: // global
           call _c4Nun(R1) args: 0, res: 0, upd: 0;
       c4Nup: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c4Nue: // global
           I64[Sp + 8] = block_c4NuK_info;
           R1 = _s4KZP::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4NvF; else goto c4NuM;
       u4NvF: // global
           call _c4NuK(R1) args: 0, res: 0, upd: 0;
       c4NuM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u4Nvt: // global
           if (_c4Nuh::P64 < 4) goto c4Nuf; else goto c4Nug;
       c4Nuf: // global
           I64[Sp + 8] = block_c4Nv3_info;
           R1 = _s4KZP::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4NvG; else goto c4Nv5;
       u4NvG: // global
           call _c4Nv3(R1) args: 0, res: 0, upd: 0;
       c4Nv5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c4Nug: // global
           I64[Sp + 8] = block_c4Nvi_info;
           R1 = _s4KZP::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4NvH; else goto c4Nvk;
       u4NvH: // global
           call _c4Nvi() args: 0, res: 0, upd: 0;
       c4Nvk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Nu9_info" {
     block_c4Nu9_info:
         const _c4Nu9;
         const 1;
         const 30;
 },
 _c4Nun() //  [R1]
         { []
         }
     {offset
       c4Nun: // global
           _c4Nvr::P64 = R1 & 7;
           if (_c4Nvr::P64 < 2) goto u4Nvw; else goto u4Nvu;
       u4Nvw: // global
           Sp = Sp + 8;
           call _c4Nvb() args: 0, res: 0, upd: 0;
       u4Nvu: // global
           if (_c4Nvr::P64 != 3) goto u4Nvy; else goto u4Nvy;
       u4Nvy: // global
           Sp = Sp + 8;
           call _c4Nvf() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4Nun_info" {
     block_c4Nun_info:
         const _c4Nun;
         const 0;
         const 30;
 },
 _c4NuK() //  [R1]
         { []
         }
     {offset
       c4NuK: // global
           _c4Nvq::P64 = R1 & 7;
           if (_c4Nvq::P64 != 3) goto u4Nvv; else goto u4Nvz;
       u4Nvv: // global
           if (_c4Nvq::P64 != 4) goto u4NvB; else goto u4NvA;
       u4NvB: // global
           Sp = Sp + 8;
           call _c4Nvb() args: 0, res: 0, upd: 0;
       u4NvA: // global
           Sp = Sp + 8;
           goto u4NvM;
       u4Nvz: // global
           Sp = Sp + 8;
           goto u4NvM;
       u4NvM: // global
           call _c4Nvf() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4NuK_info" {
     block_c4NuK_info:
         const _c4NuK;
         const 0;
         const 30;
 },
 _c4Nv3() //  [R1]
         { []
         }
     {offset
       c4Nv3: // global
           if (R1 & 7 == 4) goto u4NvC; else goto u4NvD;
       u4NvC: // global
           Sp = Sp + 8;
           call _c4Nvf() args: 0, res: 0, upd: 0;
       u4NvD: // global
           Sp = Sp + 8;
           call _c4Nvb() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4Nv3_info" {
     block_c4Nv3_info:
         const _c4Nv3;
         const 0;
         const 30;
 },
 _c4Nvf() //  []
         { []
         }
     {offset
       c4Nvf: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c4Nvb() //  []
         { []
         }
     {offset
       c4Nvb: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c4Nvi() //  []
         { []
         }
     {offset
       c4Nvi: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Nvi_info" {
     block_c4Nvi_info:
         const _c4Nvi;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.560684275 UTC

[section ""data" . GHC.IO.IOMode.$fOrdIOMode_$c<=_closure" {
     GHC.IO.IOMode.$fOrdIOMode_$c<=_closure:
         const GHC.IO.IOMode.$fOrdIOMode_$c<=_info;
 },
 GHC.IO.IOMode.$fOrdIOMode_$c<=_entry() //  [R2, R3]
         { []
         }
     {offset
       c4NwE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4NwF; else goto c4NwG;
       c4NwF: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.IOMode.$fOrdIOMode_$c<=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4NwG: // global
           I64[Sp - 16] = block_c4Nwv_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4Ny4; else goto c4Nww;
       u4Ny4: // global
           call _c4Nwv(R1) args: 0, res: 0, upd: 0;
       c4Nww: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fOrdIOMode_$c<=_info" {
     GHC.IO.IOMode.$fOrdIOMode_$c<=_info:
         const GHC.IO.IOMode.$fOrdIOMode_$c<=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c4Nwv() //  [R1]
         { []
         }
     {offset
       c4Nwv: // global
           _s4KZV::P64 = P64[Sp + 8];
           _c4NwD::P64 = R1 & 7;
           if (_c4NwD::P64 < 3) goto u4NxO; else goto u4NxP;
       u4NxO: // global
           if (_c4NwD::P64 < 2) goto c4Nwz; else goto c4NwA;
       c4Nwz: // global
           I64[Sp + 8] = block_c4NwJ_info;
           R1 = _s4KZV::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4Ny0; else goto c4NwL;
       u4Ny0: // global
           call _c4NwJ(R1) args: 0, res: 0, upd: 0;
       c4NwL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c4NwA: // global
           I64[Sp + 8] = block_c4Nx6_info;
           R1 = _s4KZV::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4Ny1; else goto c4Nx8;
       u4Ny1: // global
           call _c4Nx6(R1) args: 0, res: 0, upd: 0;
       c4Nx8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u4NxP: // global
           if (_c4NwD::P64 < 4) goto c4NwB; else goto c4NwC;
       c4NwB: // global
           I64[Sp + 8] = block_c4Nxp_info;
           R1 = _s4KZV::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4Ny2; else goto c4Nxr;
       u4Ny2: // global
           call _c4Nxp(R1) args: 0, res: 0, upd: 0;
       c4Nxr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c4NwC: // global
           I64[Sp + 8] = block_c4NxE_info;
           R1 = _s4KZV::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4Ny3; else goto c4NxG;
       u4Ny3: // global
           call _c4NxE() args: 0, res: 0, upd: 0;
       c4NxG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Nwv_info" {
     block_c4Nwv_info:
         const _c4Nwv;
         const 1;
         const 30;
 },
 _c4NwJ() //  [R1]
         { []
         }
     {offset
       c4NwJ: // global
           _c4NxN::P64 = R1 & 7;
           if (_c4NxN::P64 < 2) goto u4NxS; else goto u4NxQ;
       u4NxS: // global
           Sp = Sp + 8;
           call _c4Nxx() args: 0, res: 0, upd: 0;
       u4NxQ: // global
           if (_c4NxN::P64 != 3) goto u4NxU; else goto u4NxU;
       u4NxU: // global
           Sp = Sp + 8;
           call _c4NxB() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4NwJ_info" {
     block_c4NwJ_info:
         const _c4NwJ;
         const 0;
         const 30;
 },
 _c4Nx6() //  [R1]
         { []
         }
     {offset
       c4Nx6: // global
           _c4NxM::P64 = R1 & 7;
           if (_c4NxM::P64 != 3) goto u4NxR; else goto u4NxV;
       u4NxR: // global
           if (_c4NxM::P64 != 4) goto u4NxX; else goto u4NxW;
       u4NxX: // global
           Sp = Sp + 8;
           call _c4Nxx() args: 0, res: 0, upd: 0;
       u4NxW: // global
           Sp = Sp + 8;
           goto u4Ny8;
       u4NxV: // global
           Sp = Sp + 8;
           goto u4Ny8;
       u4Ny8: // global
           call _c4NxB() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4Nx6_info" {
     block_c4Nx6_info:
         const _c4Nx6;
         const 0;
         const 30;
 },
 _c4Nxp() //  [R1]
         { []
         }
     {offset
       c4Nxp: // global
           if (R1 & 7 == 4) goto u4NxY; else goto u4NxZ;
       u4NxY: // global
           Sp = Sp + 8;
           call _c4NxB() args: 0, res: 0, upd: 0;
       u4NxZ: // global
           Sp = Sp + 8;
           call _c4Nxx() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4Nxp_info" {
     block_c4Nxp_info:
         const _c4Nxp;
         const 0;
         const 30;
 },
 _c4NxB() //  []
         { []
         }
     {offset
       c4NxB: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c4Nxx() //  []
         { []
         }
     {offset
       c4Nxx: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c4NxE() //  []
         { []
         }
     {offset
       c4NxE: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4NxE_info" {
     block_c4NxE_info:
         const _c4NxE;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.578088186 UTC

[section ""data" . GHC.IO.IOMode.$fOrdIOMode_$cmax_closure" {
     GHC.IO.IOMode.$fOrdIOMode_$cmax_closure:
         const GHC.IO.IOMode.$fOrdIOMode_$cmax_info;
 },
 GHC.IO.IOMode.$fOrdIOMode_$cmax_entry() //  [R2, R3]
         { []
         }
     {offset
       c4Nz0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Nz1; else goto c4Nz2;
       c4Nz1: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.IOMode.$fOrdIOMode_$cmax_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4Nz2: // global
           I64[Sp - 16] = block_c4NyR_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4NzZ; else goto c4NyS;
       u4NzZ: // global
           call _c4NyR(R1) args: 0, res: 0, upd: 0;
       c4NyS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fOrdIOMode_$cmax_info" {
     GHC.IO.IOMode.$fOrdIOMode_$cmax_info:
         const GHC.IO.IOMode.$fOrdIOMode_$cmax_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c4NyR() //  [R1]
         { []
         }
     {offset
       c4NyR: // global
           _s4L02::P64 = P64[Sp + 8];
           _c4NyZ::P64 = R1 & 7;
           if (_c4NyZ::P64 < 3) goto u4NzP; else goto u4NzQ;
       u4NzP: // global
           if (_c4NyZ::P64 < 2) goto c4NyV; else goto c4NyW;
       c4NyV: // global
           R1 = _s4L02::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c4NyW: // global
           I64[Sp + 8] = block_c4Nz8_info;
           R1 = _s4L02::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4NzW; else goto c4Nza;
       u4NzW: // global
           call _c4Nz8(R1) args: 0, res: 0, upd: 0;
       c4Nza: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u4NzQ: // global
           if (_c4NyZ::P64 < 4) goto c4NyX; else goto c4NyY;
       c4NyX: // global
           I64[Sp + 8] = block_c4Nzr_info;
           R1 = _s4L02::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4NzX; else goto c4Nzt;
       u4NzX: // global
           call _c4Nzr(R1) args: 0, res: 0, upd: 0;
       c4Nzt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c4NyY: // global
           I64[Sp + 8] = block_c4NzG_info;
           R1 = _s4L02::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4NzY; else goto c4NzI;
       u4NzY: // global
           call _c4NzG() args: 0, res: 0, upd: 0;
       c4NzI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4NyR_info" {
     block_c4NyR_info:
         const _c4NyR;
         const 1;
         const 30;
 },
 _c4Nz8() //  [R1]
         { []
         }
     {offset
       c4Nz8: // global
           _c4NzO::P64 = R1 & 7;
           if (_c4NzO::P64 != 3) goto u4NzR; else goto u4NzS;
       u4NzR: // global
           if (_c4NzO::P64 != 4) goto c4Nzg; else goto u4NzT;
       c4Nzg: // global
           R1 = GHC.IO.IOMode.WriteMode_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u4NzT: // global
           Sp = Sp + 8;
           call _c4NzD() args: 0, res: 0, upd: 0;
       u4NzS: // global
           Sp = Sp + 8;
           call _c4Nzz() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4Nz8_info" {
     block_c4Nz8_info:
         const _c4Nz8;
         const 0;
         const 30;
 },
 _c4Nzr() //  [R1]
         { []
         }
     {offset
       c4Nzr: // global
           if (R1 & 7 == 4) goto u4NzU; else goto u4NzV;
       u4NzU: // global
           Sp = Sp + 8;
           call _c4NzD() args: 0, res: 0, upd: 0;
       u4NzV: // global
           Sp = Sp + 8;
           call _c4Nzz() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4Nzr_info" {
     block_c4Nzr_info:
         const _c4Nzr;
         const 0;
         const 30;
 },
 _c4NzD() //  []
         { []
         }
     {offset
       c4NzD: // global
           R1 = GHC.IO.IOMode.ReadWriteMode_closure+4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c4Nzz() //  []
         { []
         }
     {offset
       c4Nzz: // global
           R1 = GHC.IO.IOMode.AppendMode_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c4NzG() //  []
         { []
         }
     {offset
       c4NzG: // global
           R1 = GHC.IO.IOMode.ReadWriteMode_closure+4;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4NzG_info" {
     block_c4NzG_info:
         const _c4NzG;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.593332786 UTC

[section ""data" . GHC.IO.IOMode.$fOrdIOMode_$c>=_closure" {
     GHC.IO.IOMode.$fOrdIOMode_$c>=_closure:
         const GHC.IO.IOMode.$fOrdIOMode_$c>=_info;
 },
 GHC.IO.IOMode.$fOrdIOMode_$c>=_entry() //  [R2, R3]
         { []
         }
     {offset
       c4NAQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4NAR; else goto c4NAS;
       c4NAR: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.IOMode.$fOrdIOMode_$c>=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4NAS: // global
           I64[Sp - 16] = block_c4NAH_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4NCg; else goto c4NAI;
       u4NCg: // global
           call _c4NAH(R1) args: 0, res: 0, upd: 0;
       c4NAI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fOrdIOMode_$c>=_info" {
     GHC.IO.IOMode.$fOrdIOMode_$c>=_info:
         const GHC.IO.IOMode.$fOrdIOMode_$c>=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c4NAH() //  [R1]
         { []
         }
     {offset
       c4NAH: // global
           _s4L09::P64 = P64[Sp + 8];
           _c4NAP::P64 = R1 & 7;
           if (_c4NAP::P64 < 3) goto u4NC0; else goto u4NC1;
       u4NC0: // global
           if (_c4NAP::P64 < 2) goto c4NAL; else goto c4NAM;
       c4NAL: // global
           I64[Sp + 8] = block_c4NAV_info;
           R1 = _s4L09::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4NCc; else goto c4NAX;
       u4NCc: // global
           call _c4NAV(R1) args: 0, res: 0, upd: 0;
       c4NAX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c4NAM: // global
           I64[Sp + 8] = block_c4NBi_info;
           R1 = _s4L09::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4NCd; else goto c4NBk;
       u4NCd: // global
           call _c4NBi(R1) args: 0, res: 0, upd: 0;
       c4NBk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u4NC1: // global
           if (_c4NAP::P64 < 4) goto c4NAN; else goto c4NAO;
       c4NAN: // global
           I64[Sp + 8] = block_c4NBB_info;
           R1 = _s4L09::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4NCe; else goto c4NBD;
       u4NCe: // global
           call _c4NBB(R1) args: 0, res: 0, upd: 0;
       c4NBD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c4NAO: // global
           I64[Sp + 8] = block_c4NBQ_info;
           R1 = _s4L09::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4NCf; else goto c4NBS;
       u4NCf: // global
           call _c4NBQ() args: 0, res: 0, upd: 0;
       c4NBS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4NAH_info" {
     block_c4NAH_info:
         const _c4NAH;
         const 1;
         const 30;
 },
 _c4NAV() //  [R1]
         { []
         }
     {offset
       c4NAV: // global
           _c4NBZ::P64 = R1 & 7;
           if (_c4NBZ::P64 < 2) goto u4NC4; else goto u4NC2;
       u4NC4: // global
           Sp = Sp + 8;
           call _c4NBJ() args: 0, res: 0, upd: 0;
       u4NC2: // global
           if (_c4NBZ::P64 != 3) goto u4NC6; else goto u4NC6;
       u4NC6: // global
           Sp = Sp + 8;
           call _c4NBN() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4NAV_info" {
     block_c4NAV_info:
         const _c4NAV;
         const 0;
         const 30;
 },
 _c4NBi() //  [R1]
         { []
         }
     {offset
       c4NBi: // global
           _c4NBY::P64 = R1 & 7;
           if (_c4NBY::P64 != 3) goto u4NC3; else goto u4NC7;
       u4NC3: // global
           if (_c4NBY::P64 != 4) goto u4NC9; else goto u4NC8;
       u4NC9: // global
           Sp = Sp + 8;
           call _c4NBJ() args: 0, res: 0, upd: 0;
       u4NC8: // global
           Sp = Sp + 8;
           goto u4NCk;
       u4NC7: // global
           Sp = Sp + 8;
           goto u4NCk;
       u4NCk: // global
           call _c4NBN() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4NBi_info" {
     block_c4NBi_info:
         const _c4NBi;
         const 0;
         const 30;
 },
 _c4NBB() //  [R1]
         { []
         }
     {offset
       c4NBB: // global
           if (R1 & 7 == 4) goto u4NCa; else goto u4NCb;
       u4NCa: // global
           Sp = Sp + 8;
           call _c4NBN() args: 0, res: 0, upd: 0;
       u4NCb: // global
           Sp = Sp + 8;
           call _c4NBJ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4NBB_info" {
     block_c4NBB_info:
         const _c4NBB;
         const 0;
         const 30;
 },
 _c4NBN() //  []
         { []
         }
     {offset
       c4NBN: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c4NBJ() //  []
         { []
         }
     {offset
       c4NBJ: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c4NBQ() //  []
         { []
         }
     {offset
       c4NBQ: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4NBQ_info" {
     block_c4NBQ_info:
         const _c4NBQ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.607505461 UTC

[section ""data" . GHC.IO.IOMode.$fOrdIOMode_$c>_closure" {
     GHC.IO.IOMode.$fOrdIOMode_$c>_closure:
         const GHC.IO.IOMode.$fOrdIOMode_$c>_info;
 },
 GHC.IO.IOMode.$fOrdIOMode_$c>_entry() //  [R2, R3]
         { []
         }
     {offset
       c4ND3: // global
           _s4L0g::P64 = R3;
           R3 = R2;
           R2 = _s4L0g::P64;
           call GHC.IO.IOMode.$fOrdIOMode_$c<_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fOrdIOMode_$c>_info" {
     GHC.IO.IOMode.$fOrdIOMode_$c>_info:
         const GHC.IO.IOMode.$fOrdIOMode_$c>_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.613978828 UTC

[section ""data" . GHC.IO.IOMode.$fOrdIOMode_$cmin_closure" {
     GHC.IO.IOMode.$fOrdIOMode_$cmin_closure:
         const GHC.IO.IOMode.$fOrdIOMode_$cmin_info;
 },
 GHC.IO.IOMode.$fOrdIOMode_$cmin_entry() //  [R2, R3]
         { []
         }
     {offset
       c4NDn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4NDo; else goto c4NDp;
       c4NDo: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.IOMode.$fOrdIOMode_$cmin_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4NDp: // global
           I64[Sp - 16] = block_c4NDe_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4NEi; else goto c4NDf;
       u4NEi: // global
           call _c4NDe(R1) args: 0, res: 0, upd: 0;
       c4NDf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fOrdIOMode_$cmin_info" {
     GHC.IO.IOMode.$fOrdIOMode_$cmin_info:
         const GHC.IO.IOMode.$fOrdIOMode_$cmin_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c4NDe() //  [R1]
         { []
         }
     {offset
       c4NDe: // global
           _s4L0h::P64 = P64[Sp + 8];
           _c4NDm::P64 = R1 & 7;
           if (_c4NDm::P64 < 3) goto u4NEc; else goto u4NEd;
       u4NEc: // global
           if (_c4NDm::P64 < 2) goto c4NDi; else goto c4NDj;
       c4NDi: // global
           I64[Sp + 8] = block_c4NDs_info;
           R1 = _s4L0h::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4NEf; else goto c4NDu;
       u4NEf: // global
           call _c4NDs() args: 0, res: 0, upd: 0;
       c4NDu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c4NDj: // global
           I64[Sp + 8] = block_c4NDB_info;
           R1 = _s4L0h::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4NEg; else goto c4NDD;
       u4NEg: // global
           call _c4NDB(R1) args: 0, res: 0, upd: 0;
       c4NDD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u4NEd: // global
           if (_c4NDm::P64 < 4) goto c4NDk; else goto c4NDl;
       c4NDk: // global
           I64[Sp + 8] = block_c4NDU_info;
           R1 = _s4L0h::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4NEh; else goto c4NDW;
       u4NEh: // global
           call _c4NDU(R1) args: 0, res: 0, upd: 0;
       c4NDW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c4NDl: // global
           R1 = _s4L0h::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4NDe_info" {
     block_c4NDe_info:
         const _c4NDe;
         const 1;
         const 30;
 },
 _c4NDs() //  []
         { []
         }
     {offset
       c4NDs: // global
           R1 = GHC.IO.IOMode.ReadMode_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4NDs_info" {
     block_c4NDs_info:
         const _c4NDs;
         const 0;
         const 30;
 },
 _c4NDB() //  [R1]
         { []
         }
     {offset
       c4NDB: // global
           _c4NEb::P64 = R1 & 7;
           if (_c4NEb::P64 == 3) goto c4NDR; else goto u4NEe;
       u4NEe: // global
           if (_c4NEb::P64 == 4) goto c4NDR; else goto c4NDJ;
       c4NDR: // global
           R1 = GHC.IO.IOMode.WriteMode_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4NDJ: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4NDB_info" {
     block_c4NDB_info:
         const _c4NDB;
         const 0;
         const 30;
 },
 _c4NDU() //  [R1]
         { []
         }
     {offset
       c4NDU: // global
           if (R1 & 7 == 4) goto c4NE6; else goto c4NE2;
       c4NE6: // global
           R1 = GHC.IO.IOMode.AppendMode_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4NE2: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4NDU_info" {
     block_c4NDU_info:
         const _c4NDU;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.624775386 UTC

[section ""data" . GHC.IO.IOMode.$fOrdIOMode_closure" {
     GHC.IO.IOMode.$fOrdIOMode_closure:
         const GHC.Classes.C:Ord_con_info;
         const GHC.IO.IOMode.$fEqIOMode_closure+1;
         const GHC.IO.IOMode.$fOrdIOMode_$ccompare_closure+2;
         const GHC.IO.IOMode.$fOrdIOMode_$c<_closure+2;
         const GHC.IO.IOMode.$fOrdIOMode_$c<=_closure+2;
         const GHC.IO.IOMode.$fOrdIOMode_$c>_closure+2;
         const GHC.IO.IOMode.$fOrdIOMode_$c>=_closure+2;
         const GHC.IO.IOMode.$fOrdIOMode_$cmax_closure+2;
         const GHC.IO.IOMode.$fOrdIOMode_$cmin_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.630453263 UTC

[section ""data" . GHC.IO.IOMode.$w$cunsafeIndex_closure" {
     GHC.IO.IOMode.$w$cunsafeIndex_closure:
         const GHC.IO.IOMode.$w$cunsafeIndex_info;
 },
 GHC.IO.IOMode.$w$cunsafeIndex_entry() //  [R2, R3]
         { []
         }
     {offset
       c4NF5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4NF6; else goto c4NF7;
       c4NF6: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.IOMode.$w$cunsafeIndex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4NF7: // global
           I64[Sp - 16] = block_c4NEW_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4NH8; else goto c4NEX;
       u4NH8: // global
           call _c4NEW(R1) args: 0, res: 0, upd: 0;
       c4NEX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$w$cunsafeIndex_info" {
     GHC.IO.IOMode.$w$cunsafeIndex_info:
         const GHC.IO.IOMode.$w$cunsafeIndex_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c4NEW() //  [R1]
         { []
         }
     {offset
       c4NEW: // global
           _s4L0o::P64 = P64[Sp + 8];
           _c4NF4::P64 = R1 & 7;
           if (_c4NF4::P64 < 3) goto u4NGG; else goto u4NGH;
       u4NGG: // global
           if (_c4NF4::P64 < 2) goto c4NF0; else goto c4NF1;
       c4NF0: // global
           I64[Sp + 8] = block_c4NFa_info;
           R1 = _s4L0o::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4NH4; else goto c4NFc;
       u4NH4: // global
           call _c4NFa(R1) args: 0, res: 0, upd: 0;
       c4NFc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c4NF1: // global
           I64[Sp + 8] = block_c4NFx_info;
           R1 = _s4L0o::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4NH5; else goto c4NFz;
       u4NH5: // global
           call _c4NFx(R1) args: 0, res: 0, upd: 0;
       c4NFz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u4NGH: // global
           if (_c4NF4::P64 < 4) goto c4NF2; else goto c4NF3;
       c4NF2: // global
           I64[Sp + 8] = block_c4NFU_info;
           R1 = _s4L0o::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4NH6; else goto c4NFW;
       u4NH6: // global
           call _c4NFU(R1) args: 0, res: 0, upd: 0;
       c4NFW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c4NF3: // global
           I64[Sp + 8] = block_c4NGh_info;
           R1 = _s4L0o::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4NH7; else goto c4NGj;
       u4NH7: // global
           call _c4NGh(R1) args: 0, res: 0, upd: 0;
       c4NGj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4NEW_info" {
     block_c4NEW_info:
         const _c4NEW;
         const 1;
         const 30;
 },
 _c4NFa() //  [R1]
         { []
         }
     {offset
       c4NFa: // global
           _c4NGF::P64 = R1 & 7;
           if (_c4NGF::P64 < 3) goto u4NGI; else goto u4NGJ;
       u4NGI: // global
           if (_c4NGF::P64 < 2) goto u4NGR; else goto u4NGQ;
       u4NGR: // global
           Sp = Sp + 8;
           call _c4NGB() args: 0, res: 0, upd: 0;
       u4NGQ: // global
           Sp = Sp + 8;
           call _c4NGe() args: 0, res: 0, upd: 0;
       u4NGJ: // global
           if (_c4NGF::P64 < 4) goto u4NGS; else goto c4NFu;
       u4NGS: // global
           Sp = Sp + 8;
           call _c4NFR() args: 0, res: 0, upd: 0;
       c4NFu: // global
           R1 = 3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4NFa_info" {
     block_c4NFa_info:
         const _c4NFa;
         const 0;
         const 30;
 },
 _c4NFx() //  [R1]
         { []
         }
     {offset
       c4NFx: // global
           _c4NGE::P64 = R1 & 7;
           if (_c4NGE::P64 < 3) goto u4NGK; else goto u4NGL;
       u4NGK: // global
           if (_c4NGE::P64 < 2) goto u4NGU; else goto u4NGT;
       u4NGU: // global
           Sp = Sp + 8;
           call _c4NGx() args: 0, res: 0, upd: 0;
       u4NGT: // global
           Sp = Sp + 8;
           call _c4NGB() args: 0, res: 0, upd: 0;
       u4NGL: // global
           if (_c4NGE::P64 < 4) goto u4NGW; else goto u4NGV;
       u4NGW: // global
           Sp = Sp + 8;
           call _c4NGe() args: 0, res: 0, upd: 0;
       u4NGV: // global
           Sp = Sp + 8;
           call _c4NFR() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4NFx_info" {
     block_c4NFx_info:
         const _c4NFx;
         const 0;
         const 30;
 },
 _c4NFR() //  []
         { []
         }
     {offset
       c4NFR: // global
           R1 = 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c4NFU() //  [R1]
         { []
         }
     {offset
       c4NFU: // global
           _c4NGD::P64 = R1 & 7;
           if (_c4NGD::P64 < 3) goto u4NGM; else goto u4NGN;
       u4NGM: // global
           if (_c4NGD::P64 < 2) goto u4NGY; else goto u4NGX;
       u4NGY: // global
           Sp = Sp + 8;
           call _c4NGt() args: 0, res: 0, upd: 0;
       u4NGX: // global
           Sp = Sp + 8;
           call _c4NGx() args: 0, res: 0, upd: 0;
       u4NGN: // global
           if (_c4NGD::P64 < 4) goto u4NH0; else goto u4NGZ;
       u4NH0: // global
           Sp = Sp + 8;
           call _c4NGB() args: 0, res: 0, upd: 0;
       u4NGZ: // global
           Sp = Sp + 8;
           call _c4NGe() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4NFU_info" {
     block_c4NFU_info:
         const _c4NFU;
         const 0;
         const 30;
 },
 _c4NGe() //  []
         { []
         }
     {offset
       c4NGe: // global
           R1 = 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c4NGh() //  [R1]
         { []
         }
     {offset
       c4NGh: // global
           _c4NGC::P64 = R1 & 7;
           if (_c4NGC::P64 < 3) goto u4NGO; else goto u4NGP;
       u4NGO: // global
           if (_c4NGC::P64 < 2) goto c4NGp; else goto u4NH1;
       c4NGp: // global
           R1 = (-3);
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u4NH1: // global
           Sp = Sp + 8;
           call _c4NGt() args: 0, res: 0, upd: 0;
       u4NGP: // global
           if (_c4NGC::P64 < 4) goto u4NH3; else goto u4NH2;
       u4NH3: // global
           Sp = Sp + 8;
           call _c4NGx() args: 0, res: 0, upd: 0;
       u4NH2: // global
           Sp = Sp + 8;
           call _c4NGB() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4NGh_info" {
     block_c4NGh_info:
         const _c4NGh;
         const 0;
         const 30;
 },
 _c4NGt() //  []
         { []
         }
     {offset
       c4NGt: // global
           R1 = (-2);
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c4NGx() //  []
         { []
         }
     {offset
       c4NGx: // global
           R1 = (-1);
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c4NGB() //  []
         { []
         }
     {offset
       c4NGB: // global
           R1 = 0;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.648772202 UTC

[section ""data" . GHC.IO.IOMode.$fIxIOMode_$cunsafeIndex_closure" {
     GHC.IO.IOMode.$fIxIOMode_$cunsafeIndex_closure:
         const GHC.IO.IOMode.$fIxIOMode_$cunsafeIndex_info;
 },
 GHC.IO.IOMode.$fIxIOMode_$cunsafeIndex_entry() //  [R2, R3]
         { []
         }
     {offset
       c4NIf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4NIn; else goto c4NIo;
       c4NIn: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.IOMode.$fIxIOMode_$cunsafeIndex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4NIo: // global
           I64[Sp - 16] = block_c4NIc_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4NIt; else goto c4NId;
       u4NIt: // global
           call _c4NIc(R1) args: 0, res: 0, upd: 0;
       c4NId: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fIxIOMode_$cunsafeIndex_info" {
     GHC.IO.IOMode.$fIxIOMode_$cunsafeIndex_info:
         const GHC.IO.IOMode.$fIxIOMode_$cunsafeIndex_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c4NIc() //  [R1]
         { []
         }
     {offset
       c4NIc: // global
           _s4L0v::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c4NIi_info;
           R3 = _s4L0v::P64;
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.IO.IOMode.$w$cunsafeIndex_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4NIc_info" {
     block_c4NIc_info:
         const _c4NIc;
         const 1;
         const 30;
 },
 _c4NIi() //  [R1]
         { []
         }
     {offset
       c4NIi: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4NIs; else goto c4NIr;
       c4NIs: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c4NIr: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4NIi_info" {
     block_c4NIi_info:
         const _c4NIi;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.663423556 UTC

[section ""data" . GHC.IO.IOMode.$w$cinRange_closure" {
     GHC.IO.IOMode.$w$cinRange_closure:
         const GHC.IO.IOMode.$w$cinRange_info;
 },
 GHC.IO.IOMode.$w$cinRange_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c4NIW: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4NIX; else goto c4NIY;
       c4NIX: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.IOMode.$w$cinRange_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c4NIY: // global
           I64[Sp - 24] = block_c4NIN_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u4NKE; else goto c4NIO;
       u4NKE: // global
           call _c4NIN(R1) args: 0, res: 0, upd: 0;
       c4NIO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$w$cinRange_info" {
     GHC.IO.IOMode.$w$cinRange_info:
         const GHC.IO.IOMode.$w$cinRange_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c4NIN() //  [R1]
         { []
         }
     {offset
       c4NIN: // global
           _s4L0B::P64 = P64[Sp + 8];
           _c4NIV::P64 = R1 & 7;
           if (_c4NIV::P64 < 3) goto u4NKx; else goto u4NKy;
       u4NKx: // global
           if (_c4NIV::P64 < 2) goto c4NIR; else goto c4NIS;
       c4NIR: // global
           _s4L0E::I64 = 0;
           goto s4L0D;
       c4NIS: // global
           _s4L0E::I64 = 1;
           goto s4L0D;
       u4NKy: // global
           if (_c4NIV::P64 < 4) goto c4NIT; else goto c4NIU;
       c4NIT: // global
           _s4L0E::I64 = 2;
           goto s4L0D;
       c4NIU: // global
           _s4L0E::I64 = 3;
           goto s4L0D;
       s4L0D: // global
           I64[Sp] = block_c4NJ4_info;
           R1 = _s4L0B::P64;
           I64[Sp + 8] = _s4L0E::I64;
           if (R1 & 7 != 0) goto u4NKD; else goto c4NJO;
       u4NKD: // global
           call _c4NJ4(R1) args: 0, res: 0, upd: 0;
       c4NJO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4NIN_info" {
     block_c4NIN_info:
         const _c4NIN;
         const 2;
         const 30;
 },
 _c4NJ4() //  [R1]
         { []
         }
     {offset
       c4NJ4: // global
           _s4L0C::P64 = P64[Sp + 16];
           _c4NKj::P64 = R1 & 7;
           if (_c4NKj::P64 < 3) goto u4NKz; else goto u4NKA;
       u4NKz: // global
           if (_c4NKj::P64 < 2) goto c4NJU; else goto c4NJY;
       c4NJU: // global
           _s4L0G::I64 = 0;
           goto s4L0F;
       c4NJY: // global
           _s4L0G::I64 = 1;
           goto s4L0F;
       u4NKA: // global
           if (_c4NKj::P64 < 4) goto c4NK2; else goto c4NK6;
       c4NK2: // global
           _s4L0G::I64 = 2;
           goto s4L0F;
       c4NK6: // global
           _s4L0G::I64 = 3;
           goto s4L0F;
       s4L0F: // global
           I64[Sp] = block_c4NJ9_info;
           R1 = _s4L0C::P64;
           I64[Sp + 16] = _s4L0G::I64;
           if (R1 & 7 != 0) goto u4NKF; else goto c4NJb;
       u4NKF: // global
           call _c4NJ9(R1) args: 0, res: 0, upd: 0;
       c4NJb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4NJ4_info" {
     block_c4NJ4_info:
         const _c4NJ4;
         const 66;
         const 30;
 },
 _c4NJ9() //  [R1]
         { []
         }
     {offset
       c4NJ9: // global
           _s4L0E::I64 = I64[Sp + 8];
           _s4L0G::I64 = I64[Sp + 16];
           _c4NKk::P64 = R1 & 7;
           if (_c4NKk::P64 < 3) goto u4NKB; else goto u4NKC;
       u4NKB: // global
           if (_c4NKk::P64 < 2) goto c4NJm; else goto c4NJv;
       c4NJm: // global
           if (%MO_S_Lt_W64(0, _s4L0E::I64)) goto c4NJL; else goto c4NJk;
       c4NJk: // global
           R1 = I64[(%MO_S_Le_W64(0,
                                  _s4L0G::I64) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4NJv: // global
           if (%MO_S_Lt_W64(1, _s4L0E::I64)) goto c4NJL; else goto c4NJu;
       c4NJu: // global
           R1 = I64[(%MO_S_Le_W64(1,
                                  _s4L0G::I64) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u4NKC: // global
           if (_c4NKk::P64 < 4) goto c4NJE; else goto c4NJN;
       c4NJE: // global
           if (%MO_S_Lt_W64(2, _s4L0E::I64)) goto c4NJL; else goto c4NJD;
       c4NJD: // global
           R1 = I64[(%MO_S_Le_W64(2,
                                  _s4L0G::I64) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4NJN: // global
           if (%MO_S_Lt_W64(3, _s4L0E::I64)) goto c4NJL; else goto c4NJM;
       c4NJL: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4NJM: // global
           R1 = I64[(%MO_S_Le_W64(3,
                                  _s4L0G::I64) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4NJ9_info" {
     block_c4NJ9_info:
         const _c4NJ9;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.677441508 UTC

[section ""data" . GHC.IO.IOMode.$fIxIOMode_$cinRange_closure" {
     GHC.IO.IOMode.$fIxIOMode_$cinRange_closure:
         const GHC.IO.IOMode.$fIxIOMode_$cinRange_info;
 },
 GHC.IO.IOMode.$fIxIOMode_$cinRange_entry() //  [R2, R3]
         { []
         }
     {offset
       c4NLk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4NLl; else goto c4NLm;
       c4NLl: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.IOMode.$fIxIOMode_$cinRange_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4NLm: // global
           I64[Sp - 16] = block_c4NLh_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4NLq; else goto c4NLi;
       u4NLq: // global
           call _c4NLh(R1) args: 0, res: 0, upd: 0;
       c4NLi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fIxIOMode_$cinRange_info" {
     GHC.IO.IOMode.$fIxIOMode_$cinRange_info:
         const GHC.IO.IOMode.$fIxIOMode_$cinRange_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c4NLh() //  [R1]
         { []
         }
     {offset
       c4NLh: // global
           R4 = P64[Sp + 8];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call GHC.IO.IOMode.$w$cinRange_entry(R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4NLh_info" {
     block_c4NLh_info:
         const _c4NLh;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.682649596 UTC

[section ""data" . lvl_r4KYL_closure" {
     lvl_r4KYL_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.684377362 UTC

[section ""data" . lvl1_r4KYM_closure" {
     lvl1_r4KYM_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.686105246 UTC

[section ""data" . lvl2_r4KYN_closure" {
     lvl2_r4KYN_closure:
         const GHC.Types.I#_con_info;
         const 2;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.687847602 UTC

[section ""data" . lvl3_r4KYO_closure" {
     lvl3_r4KYO_closure:
         const GHC.Types.I#_con_info;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.690872696 UTC

[section ""data" . GHC.IO.IOMode.$fEnumIOMode_$cfromEnum_closure" {
     GHC.IO.IOMode.$fEnumIOMode_$cfromEnum_closure:
         const GHC.IO.IOMode.$fEnumIOMode_$cfromEnum_info;
 },
 GHC.IO.IOMode.$fEnumIOMode_$cfromEnum_entry() //  [R2]
         { []
         }
     {offset
       c4NLR: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c4NLS; else goto c4NLT;
       c4NLS: // global
           R2 = R2;
           R1 = GHC.IO.IOMode.$fEnumIOMode_$cfromEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4NLT: // global
           I64[Sp - 8] = block_c4NLI_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u4NM8; else goto c4NLJ;
       u4NM8: // global
           call _c4NLI(R1) args: 0, res: 0, upd: 0;
       c4NLJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fEnumIOMode_$cfromEnum_info" {
     GHC.IO.IOMode.$fEnumIOMode_$cfromEnum_info:
         const GHC.IO.IOMode.$fEnumIOMode_$cfromEnum_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c4NLI() //  [R1]
         { []
         }
     {offset
       c4NLI: // global
           _c4NLQ::P64 = R1 & 7;
           if (_c4NLQ::P64 < 3) goto u4NM6; else goto u4NM7;
       u4NM6: // global
           if (_c4NLQ::P64 < 2) goto c4NLM; else goto c4NLN;
       c4NLM: // global
           R1 = lvl_r4KYL_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4NLN: // global
           R1 = lvl1_r4KYM_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u4NM7: // global
           if (_c4NLQ::P64 < 4) goto c4NLO; else goto c4NLP;
       c4NLO: // global
           R1 = lvl2_r4KYN_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4NLP: // global
           R1 = lvl3_r4KYO_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4NLI_info" {
     block_c4NLI_info:
         const _c4NLI;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.698892218 UTC

[section ""data" . GHC.IO.IOMode.$fIxIOMode_go2_closure" {
     GHC.IO.IOMode.$fIxIOMode_go2_closure:
         const GHC.IO.IOMode.$fIxIOMode_go2_info;
 },
 sat_s4L13_entry() //  [R1]
         { []
         }
     {offset
       c4NMz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4NMA; else goto c4NMB;
       c4NMA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4NMB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4L11::I64 = I64[R1 + 16];
           if (_s4L11::I64 != 0) goto c4NMx; else goto c4NMy;
       c4NMx: // global
           R2 = _s4L11::I64 + 1;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$fIxIOMode_go2_entry(R2) args: 24, res: 0, upd: 24;
       c4NMy: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L13_info" {
     sat_s4L13_info:
         const sat_s4L13_entry;
         const 4294967296;
         const 17;
 },
 sat_s4L10_entry() //  [R1]
         { []
         }
     {offset
       c4NMI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4NMJ; else goto c4NMK;
       c4NMJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4NMK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L10_info" {
     sat_s4L10_info:
         const sat_s4L10_entry;
         const 4294967296;
         const 17;
 },
 GHC.IO.IOMode.$fIxIOMode_go2_entry() //  [R2]
         { []
         }
     {offset
       c4NMM: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c4NMQ; else goto c4NMP;
       c4NMQ: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.IO.IOMode.$fIxIOMode_go2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4NMP: // global
           I64[Hp - 64] = sat_s4L13_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s4L10_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fIxIOMode_go2_info" {
     GHC.IO.IOMode.$fIxIOMode_go2_info:
         const GHC.IO.IOMode.$fIxIOMode_go2_entry;
         const 0;
         const 14;
         const 4294967300;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.707938212 UTC

[section ""data" . GHC.IO.IOMode.$fIxIOMode_go1_closure" {
     GHC.IO.IOMode.$fIxIOMode_go1_closure:
         const GHC.IO.IOMode.$fIxIOMode_go1_info;
 },
 sat_s4L18_entry() //  [R1]
         { []
         }
     {offset
       c4NNl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4NNm; else goto c4NNn;
       c4NNm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4NNn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4L16::I64 = I64[R1 + 16];
           if (_s4L16::I64 != 1) goto c4NNj; else goto c4NNk;
       c4NNj: // global
           R2 = _s4L16::I64 + 1;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$fIxIOMode_go1_entry(R2) args: 24, res: 0, upd: 24;
       c4NNk: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L18_info" {
     sat_s4L18_info:
         const sat_s4L18_entry;
         const 4294967296;
         const 17;
 },
 sat_s4L15_entry() //  [R1]
         { []
         }
     {offset
       c4NNu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4NNv; else goto c4NNw;
       c4NNv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4NNw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L15_info" {
     sat_s4L15_info:
         const sat_s4L15_entry;
         const 4294967296;
         const 17;
 },
 GHC.IO.IOMode.$fIxIOMode_go1_entry() //  [R2]
         { []
         }
     {offset
       c4NNy: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c4NNC; else goto c4NNB;
       c4NNC: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.IO.IOMode.$fIxIOMode_go1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4NNB: // global
           I64[Hp - 64] = sat_s4L18_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s4L15_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fIxIOMode_go1_info" {
     GHC.IO.IOMode.$fIxIOMode_go1_info:
         const GHC.IO.IOMode.$fIxIOMode_go1_entry;
         const 0;
         const 14;
         const 4294967300;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.716789408 UTC

[section ""data" . GHC.IO.IOMode.$fIxIOMode_go_closure" {
     GHC.IO.IOMode.$fIxIOMode_go_closure:
         const GHC.IO.IOMode.$fIxIOMode_go_info;
 },
 sat_s4L1d_entry() //  [R1]
         { []
         }
     {offset
       c4NO7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4NO8; else goto c4NO9;
       c4NO8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4NO9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4L1b::I64 = I64[R1 + 16];
           if (_s4L1b::I64 != 2) goto c4NO5; else goto c4NO6;
       c4NO5: // global
           R2 = _s4L1b::I64 + 1;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$fIxIOMode_go_entry(R2) args: 24, res: 0, upd: 24;
       c4NO6: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L1d_info" {
     sat_s4L1d_info:
         const sat_s4L1d_entry;
         const 4294967296;
         const 17;
 },
 sat_s4L1a_entry() //  [R1]
         { []
         }
     {offset
       c4NOg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4NOh; else goto c4NOi;
       c4NOh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4NOi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L1a_info" {
     sat_s4L1a_info:
         const sat_s4L1a_entry;
         const 4294967296;
         const 17;
 },
 GHC.IO.IOMode.$fIxIOMode_go_entry() //  [R2]
         { []
         }
     {offset
       c4NOk: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c4NOo; else goto c4NOn;
       c4NOo: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.IO.IOMode.$fIxIOMode_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4NOn: // global
           I64[Hp - 64] = sat_s4L1d_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s4L1a_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fIxIOMode_go_info" {
     GHC.IO.IOMode.$fIxIOMode_go_info:
         const GHC.IO.IOMode.$fIxIOMode_go_entry;
         const 0;
         const 14;
         const 4294967300;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.725663433 UTC

[section ""data" . GHC.IO.IOMode.$fEnumIOMode_go4_closure" {
     GHC.IO.IOMode.$fEnumIOMode_go4_closure:
         const GHC.IO.IOMode.$fEnumIOMode_go4_info;
 },
 sat_s4L1i_entry() //  [R1]
         { []
         }
     {offset
       c4NOT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4NOU; else goto c4NOV;
       c4NOU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4NOV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4L1g::I64 = I64[R1 + 16];
           if (_s4L1g::I64 != 3) goto c4NOR; else goto c4NOS;
       c4NOR: // global
           R2 = _s4L1g::I64 + 1;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$fEnumIOMode_go4_entry(R2) args: 24, res: 0, upd: 24;
       c4NOS: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L1i_info" {
     sat_s4L1i_info:
         const sat_s4L1i_entry;
         const 4294967296;
         const 17;
 },
 sat_s4L1f_entry() //  [R1]
         { []
         }
     {offset
       c4NP2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4NP3; else goto c4NP4;
       c4NP3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4NP4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L1f_info" {
     sat_s4L1f_info:
         const sat_s4L1f_entry;
         const 4294967296;
         const 17;
 },
 GHC.IO.IOMode.$fEnumIOMode_go4_entry() //  [R2]
         { []
         }
     {offset
       c4NP6: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c4NPa; else goto c4NP9;
       c4NPa: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.IO.IOMode.$fEnumIOMode_go4_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4NP9: // global
           I64[Hp - 64] = sat_s4L1i_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s4L1f_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fEnumIOMode_go4_info" {
     GHC.IO.IOMode.$fEnumIOMode_go4_info:
         const GHC.IO.IOMode.$fEnumIOMode_go4_entry;
         const 0;
         const 14;
         const 4294967300;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.73622863 UTC

[section ""data" . GHC.IO.IOMode.$w$crange_closure" {
     GHC.IO.IOMode.$w$crange_closure:
         const GHC.IO.IOMode.$w$crange_info;
 },
 GHC.IO.IOMode.$w$crange_entry() //  [R2, R3]
         { []
         }
     {offset
       c4NPI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4NPJ; else goto c4NPK;
       c4NPJ: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.IOMode.$w$crange_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4NPK: // global
           I64[Sp - 16] = block_c4NPz_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4NQL; else goto c4NPA;
       u4NQL: // global
           call _c4NPz(R1) args: 0, res: 0, upd: 0;
       c4NPA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$w$crange_info" {
     GHC.IO.IOMode.$w$crange_info:
         const GHC.IO.IOMode.$w$crange_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c4NPz() //  [R1]
         { []
         }
     {offset
       c4NPz: // global
           _s4L1k::P64 = P64[Sp + 8];
           _c4NPH::P64 = R1 & 7;
           if (_c4NPH::P64 < 3) goto u4NQG; else goto u4NQH;
       u4NQG: // global
           if (_c4NPH::P64 < 2) goto c4NPD; else goto c4NPE;
       c4NPD: // global
           _s4L1m::I64 = 0;
           goto s4L1l;
       c4NPE: // global
           _s4L1m::I64 = 1;
           goto s4L1l;
       u4NQH: // global
           if (_c4NPH::P64 < 4) goto c4NPF; else goto c4NPG;
       c4NPF: // global
           _s4L1m::I64 = 2;
           goto s4L1l;
       c4NPG: // global
           _s4L1m::I64 = 3;
           goto s4L1l;
       s4L1l: // global
           I64[Sp] = block_c4NPO_info;
           R1 = _s4L1k::P64;
           I64[Sp + 8] = _s4L1m::I64;
           if (R1 & 7 != 0) goto u4NQK; else goto c4NPQ;
       u4NQK: // global
           call _c4NPO(R1) args: 0, res: 0, upd: 0;
       c4NPQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4NPz_info" {
     block_c4NPz_info:
         const _c4NPz;
         const 1;
         const 30;
 },
 _c4NPO() //  [R1]
         { []
         }
     {offset
       c4NPO: // global
           _s4L1m::I64 = I64[Sp + 8];
           _c4NQF::P64 = R1 & 7;
           if (_c4NQF::P64 < 3) goto u4NQI; else goto u4NQJ;
       u4NQI: // global
           if (_c4NQF::P64 < 2) goto c4NQ1; else goto c4NQa;
       c4NQ1: // global
           if (%MO_S_Gt_W64(_s4L1m::I64, 0)) goto c4NQr; else goto c4NPY;
       c4NPY: // global
           R2 = _s4L1m::I64;
           Sp = Sp + 16;
           call GHC.IO.IOMode.$fIxIOMode_go2_entry(R2) args: 8, res: 0, upd: 8;
       c4NQa: // global
           if (%MO_S_Gt_W64(_s4L1m::I64, 1)) goto c4NQr; else goto c4NQ8;
       c4NQ8: // global
           R2 = _s4L1m::I64;
           Sp = Sp + 16;
           call GHC.IO.IOMode.$fIxIOMode_go1_entry(R2) args: 8, res: 0, upd: 8;
       u4NQJ: // global
           if (_c4NQF::P64 < 4) goto c4NQj; else goto c4NQs;
       c4NQj: // global
           if (%MO_S_Gt_W64(_s4L1m::I64, 2)) goto c4NQr; else goto c4NQh;
       c4NQh: // global
           R2 = _s4L1m::I64;
           Sp = Sp + 16;
           call GHC.IO.IOMode.$fIxIOMode_go_entry(R2) args: 8, res: 0, upd: 8;
       c4NQs: // global
           if (%MO_S_Gt_W64(_s4L1m::I64, 3)) goto c4NQr; else goto c4NQq;
       c4NQr: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4NQq: // global
           R2 = _s4L1m::I64;
           Sp = Sp + 16;
           call GHC.IO.IOMode.$fEnumIOMode_go4_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4NPO_info" {
     block_c4NPO_info:
         const _c4NPO;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.746177428 UTC

[section ""data" . GHC.IO.IOMode.$fIxIOMode_$crange_closure" {
     GHC.IO.IOMode.$fIxIOMode_$crange_closure:
         const GHC.IO.IOMode.$fIxIOMode_$crange_info;
 },
 GHC.IO.IOMode.$fIxIOMode_$crange_entry() //  [R2]
         { []
         }
     {offset
       c4NR9: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c4NRa; else goto c4NRb;
       c4NRa: // global
           R2 = R2;
           R1 = GHC.IO.IOMode.$fIxIOMode_$crange_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4NRb: // global
           I64[Sp - 8] = block_c4NR6_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u4NRf; else goto c4NR7;
       u4NRf: // global
           call _c4NR6(R1) args: 0, res: 0, upd: 0;
       c4NR7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fIxIOMode_$crange_info" {
     GHC.IO.IOMode.$fIxIOMode_$crange_info:
         const GHC.IO.IOMode.$fIxIOMode_$crange_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c4NR6() //  [R1]
         { []
         }
     {offset
       c4NR6: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.IO.IOMode.$w$crange_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4NR6_info" {
     block_c4NR6_info:
         const _c4NR6;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.755208566 UTC

[section ""data" . GHC.IO.IOMode.$w$crangeSize_closure" {
     GHC.IO.IOMode.$w$crangeSize_closure:
         const GHC.IO.IOMode.$w$crangeSize_info;
 },
 GHC.IO.IOMode.$w$crangeSize_entry() //  [R2, R3]
         { []
         }
     {offset
       c4NRz: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4NRA; else goto c4NRB;
       c4NRA: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.IOMode.$w$crangeSize_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4NRB: // global
           I64[Sp - 24] = block_c4NRt_info;
           R4 = R3;
           _s4L1y::P64 = R3;
           R3 = R3;
           _s4L1x::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s4L1x::P64;
           P64[Sp - 8] = _s4L1y::P64;
           Sp = Sp - 24;
           call GHC.IO.IOMode.$w$cinRange_entry(R4,
                                                R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$w$crangeSize_info" {
     GHC.IO.IOMode.$w$crangeSize_info:
         const GHC.IO.IOMode.$w$crangeSize_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c4NRt() //  [R1]
         { []
         }
     {offset
       c4NRt: // global
           if (R1 & 7 == 1) goto u4NTz; else goto c4NRx;
       u4NTz: // global
           Sp = Sp + 24;
           call _c4NTf() args: 0, res: 0, upd: 0;
       c4NRx: // global
           _s4L1x::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c4NRH_info;
           R1 = _s4L1x::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4NTO; else goto c4NRJ;
       u4NTO: // global
           call _c4NRH(R1) args: 0, res: 0, upd: 0;
       c4NRJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4NRt_info" {
     block_c4NRt_info:
         const _c4NRt;
         const 2;
         const 30;
 },
 _c4NRH() //  [R1]
         { []
         }
     {offset
       c4NRH: // global
           _s4L1y::P64 = P64[Sp + 8];
           _c4NTk::P64 = R1 & 7;
           if (_c4NTk::P64 < 3) goto u4NTp; else goto u4NTq;
       u4NTp: // global
           if (_c4NTk::P64 < 2) goto c4NRQ; else goto c4NSe;
       c4NRQ: // global
           I64[Sp + 8] = block_c4NRN_info;
           R1 = _s4L1y::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4NTQ; else goto c4NRR;
       u4NTQ: // global
           call _c4NRN(R1) args: 0, res: 0, upd: 0;
       c4NRR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c4NSe: // global
           I64[Sp + 8] = block_c4NSc_info;
           R1 = _s4L1y::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4NTR; else goto c4NSf;
       u4NTR: // global
           call _c4NSc(R1) args: 0, res: 0, upd: 0;
       c4NSf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u4NTq: // global
           if (_c4NTk::P64 < 4) goto c4NSC; else goto c4NT0;
       c4NSC: // global
           I64[Sp + 8] = block_c4NSA_info;
           R1 = _s4L1y::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4NTS; else goto c4NSD;
       u4NTS: // global
           call _c4NSA(R1) args: 0, res: 0, upd: 0;
       c4NSD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c4NT0: // global
           I64[Sp + 8] = block_c4NSY_info;
           R1 = _s4L1y::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4NTT; else goto c4NT1;
       u4NTT: // global
           call _c4NSY(R1) args: 0, res: 0, upd: 0;
       c4NT1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4NRH_info" {
     block_c4NRH_info:
         const _c4NRH;
         const 1;
         const 30;
 },
 _c4NRN() //  [R1]
         { []
         }
     {offset
       c4NRN: // global
           _c4NTo::P64 = R1 & 7;
           if (_c4NTo::P64 < 3) goto u4NTr; else goto u4NTs;
       u4NTr: // global
           if (_c4NTo::P64 < 2) goto u4NTB; else goto u4NTA;
       u4NTB: // global
           Sp = Sp + 8;
           call _c4NTj() args: 0, res: 0, upd: 0;
       u4NTA: // global
           Sp = Sp + 8;
           call _c4NSV() args: 0, res: 0, upd: 0;
       u4NTs: // global
           if (_c4NTo::P64 < 4) goto u4NTC; else goto c4NS9;
       u4NTC: // global
           Sp = Sp + 8;
           call _c4NSx() args: 0, res: 0, upd: 0;
       c4NS9: // global
           R1 = 4;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4NRN_info" {
     block_c4NRN_info:
         const _c4NRN;
         const 0;
         const 30;
 },
 _c4NSc() //  [R1]
         { []
         }
     {offset
       c4NSc: // global
           _c4NTn::P64 = R1 & 7;
           if (_c4NTn::P64 < 3) goto u4NTt; else goto u4NTu;
       u4NTt: // global
           if (_c4NTn::P64 < 2) goto u4NTE; else goto u4NTD;
       u4NTE: // global
           Sp = Sp + 8;
           call _c4NTf() args: 0, res: 0, upd: 0;
       u4NTD: // global
           Sp = Sp + 8;
           call _c4NTj() args: 0, res: 0, upd: 0;
       u4NTu: // global
           if (_c4NTn::P64 < 4) goto u4NTG; else goto u4NTF;
       u4NTG: // global
           Sp = Sp + 8;
           call _c4NSV() args: 0, res: 0, upd: 0;
       u4NTF: // global
           Sp = Sp + 8;
           call _c4NSx() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4NSc_info" {
     block_c4NSc_info:
         const _c4NSc;
         const 0;
         const 30;
 },
 _c4NSx() //  []
         { []
         }
     {offset
       c4NSx: // global
           R1 = 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c4NSA() //  [R1]
         { []
         }
     {offset
       c4NSA: // global
           _c4NTm::P64 = R1 & 7;
           if (_c4NTm::P64 < 3) goto u4NTv; else goto u4NTw;
       u4NTv: // global
           if (_c4NTm::P64 < 2) goto u4NTI; else goto u4NTH;
       u4NTI: // global
           Sp = Sp + 8;
           call _c4NTb() args: 0, res: 0, upd: 0;
       u4NTH: // global
           Sp = Sp + 8;
           call _c4NTf() args: 0, res: 0, upd: 0;
       u4NTw: // global
           if (_c4NTm::P64 < 4) goto u4NTK; else goto u4NTJ;
       u4NTK: // global
           Sp = Sp + 8;
           call _c4NTj() args: 0, res: 0, upd: 0;
       u4NTJ: // global
           Sp = Sp + 8;
           call _c4NSV() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4NSA_info" {
     block_c4NSA_info:
         const _c4NSA;
         const 0;
         const 30;
 },
 _c4NSV() //  []
         { []
         }
     {offset
       c4NSV: // global
           R1 = 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c4NSY() //  [R1]
         { []
         }
     {offset
       c4NSY: // global
           _c4NTl::P64 = R1 & 7;
           if (_c4NTl::P64 < 3) goto u4NTx; else goto u4NTy;
       u4NTx: // global
           if (_c4NTl::P64 < 2) goto c4NT7; else goto u4NTL;
       c4NT7: // global
           R1 = (-2);
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u4NTL: // global
           Sp = Sp + 8;
           call _c4NTb() args: 0, res: 0, upd: 0;
       u4NTy: // global
           if (_c4NTl::P64 < 4) goto u4NTN; else goto u4NTM;
       u4NTN: // global
           Sp = Sp + 8;
           call _c4NTf() args: 0, res: 0, upd: 0;
       u4NTM: // global
           Sp = Sp + 8;
           call _c4NTj() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4NSY_info" {
     block_c4NSY_info:
         const _c4NSY;
         const 0;
         const 30;
 },
 _c4NTb() //  []
         { []
         }
     {offset
       c4NTb: // global
           R1 = (-1);
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c4NTf() //  []
         { []
         }
     {offset
       c4NTf: // global
           R1 = 0;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c4NTj() //  []
         { []
         }
     {offset
       c4NTj: // global
           R1 = 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.775563489 UTC

[section ""data" . GHC.IO.IOMode.$fIxIOMode_$crangeSize_closure" {
     GHC.IO.IOMode.$fIxIOMode_$crangeSize_closure:
         const GHC.IO.IOMode.$fIxIOMode_$crangeSize_info;
 },
 GHC.IO.IOMode.$fIxIOMode_$crangeSize_entry() //  [R2]
         { []
         }
     {offset
       c4NV5: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c4NVd; else goto c4NVe;
       c4NVd: // global
           R2 = R2;
           R1 = GHC.IO.IOMode.$fIxIOMode_$crangeSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4NVe: // global
           I64[Sp - 8] = block_c4NV2_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u4NVj; else goto c4NV3;
       u4NVj: // global
           call _c4NV2(R1) args: 0, res: 0, upd: 0;
       c4NV3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fIxIOMode_$crangeSize_info" {
     GHC.IO.IOMode.$fIxIOMode_$crangeSize_info:
         const GHC.IO.IOMode.$fIxIOMode_$crangeSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c4NV2() //  [R1]
         { []
         }
     {offset
       c4NV2: // global
           I64[Sp] = block_c4NV8_info;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.IO.IOMode.$w$crangeSize_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4NV2_info" {
     block_c4NV2_info:
         const _c4NV2;
         const 0;
         const 30;
 },
 _c4NV8() //  [R1]
         { []
         }
     {offset
       c4NV8: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4NVi; else goto c4NVh;
       c4NVi: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c4NVh: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4NV8_info" {
     block_c4NV8_info:
         const _c4NV8;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.787138291 UTC

[section ""data" . GHC.IO.IOMode.$w$cunsafeRangeSize_closure" {
     GHC.IO.IOMode.$w$cunsafeRangeSize_closure:
         const GHC.IO.IOMode.$w$cunsafeRangeSize_info;
 },
 GHC.IO.IOMode.$w$cunsafeRangeSize_entry() //  [R2, R3]
         { []
         }
     {offset
       c4NVK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4NVL; else goto c4NVM;
       c4NVL: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.IOMode.$w$cunsafeRangeSize_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4NVM: // global
           I64[Sp - 16] = block_c4NVB_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4NXN; else goto c4NVC;
       u4NXN: // global
           call _c4NVB(R1) args: 0, res: 0, upd: 0;
       c4NVC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$w$cunsafeRangeSize_info" {
     GHC.IO.IOMode.$w$cunsafeRangeSize_info:
         const GHC.IO.IOMode.$w$cunsafeRangeSize_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c4NVB() //  [R1]
         { []
         }
     {offset
       c4NVB: // global
           _s4L1L::P64 = P64[Sp + 8];
           _c4NVJ::P64 = R1 & 7;
           if (_c4NVJ::P64 < 3) goto u4NXl; else goto u4NXm;
       u4NXl: // global
           if (_c4NVJ::P64 < 2) goto c4NVF; else goto c4NVG;
       c4NVF: // global
           I64[Sp + 8] = block_c4NVP_info;
           R1 = _s4L1L::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4NXJ; else goto c4NVR;
       u4NXJ: // global
           call _c4NVP(R1) args: 0, res: 0, upd: 0;
       c4NVR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c4NVG: // global
           I64[Sp + 8] = block_c4NWc_info;
           R1 = _s4L1L::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4NXK; else goto c4NWe;
       u4NXK: // global
           call _c4NWc(R1) args: 0, res: 0, upd: 0;
       c4NWe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u4NXm: // global
           if (_c4NVJ::P64 < 4) goto c4NVH; else goto c4NVI;
       c4NVH: // global
           I64[Sp + 8] = block_c4NWz_info;
           R1 = _s4L1L::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4NXL; else goto c4NWB;
       u4NXL: // global
           call _c4NWz(R1) args: 0, res: 0, upd: 0;
       c4NWB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c4NVI: // global
           I64[Sp + 8] = block_c4NWW_info;
           R1 = _s4L1L::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4NXM; else goto c4NWY;
       u4NXM: // global
           call _c4NWW(R1) args: 0, res: 0, upd: 0;
       c4NWY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4NVB_info" {
     block_c4NVB_info:
         const _c4NVB;
         const 1;
         const 30;
 },
 _c4NVP() //  [R1]
         { []
         }
     {offset
       c4NVP: // global
           _c4NXk::P64 = R1 & 7;
           if (_c4NXk::P64 < 3) goto u4NXn; else goto u4NXo;
       u4NXn: // global
           if (_c4NXk::P64 < 2) goto u4NXw; else goto u4NXv;
       u4NXw: // global
           Sp = Sp + 8;
           call _c4NXg() args: 0, res: 0, upd: 0;
       u4NXv: // global
           Sp = Sp + 8;
           call _c4NWT() args: 0, res: 0, upd: 0;
       u4NXo: // global
           if (_c4NXk::P64 < 4) goto u4NXx; else goto c4NW9;
       u4NXx: // global
           Sp = Sp + 8;
           call _c4NWw() args: 0, res: 0, upd: 0;
       c4NW9: // global
           R1 = 4;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4NVP_info" {
     block_c4NVP_info:
         const _c4NVP;
         const 0;
         const 30;
 },
 _c4NWc() //  [R1]
         { []
         }
     {offset
       c4NWc: // global
           _c4NXj::P64 = R1 & 7;
           if (_c4NXj::P64 < 3) goto u4NXp; else goto u4NXq;
       u4NXp: // global
           if (_c4NXj::P64 < 2) goto u4NXz; else goto u4NXy;
       u4NXz: // global
           Sp = Sp + 8;
           call _c4NXc() args: 0, res: 0, upd: 0;
       u4NXy: // global
           Sp = Sp + 8;
           call _c4NXg() args: 0, res: 0, upd: 0;
       u4NXq: // global
           if (_c4NXj::P64 < 4) goto u4NXB; else goto u4NXA;
       u4NXB: // global
           Sp = Sp + 8;
           call _c4NWT() args: 0, res: 0, upd: 0;
       u4NXA: // global
           Sp = Sp + 8;
           call _c4NWw() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4NWc_info" {
     block_c4NWc_info:
         const _c4NWc;
         const 0;
         const 30;
 },
 _c4NWw() //  []
         { []
         }
     {offset
       c4NWw: // global
           R1 = 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c4NWz() //  [R1]
         { []
         }
     {offset
       c4NWz: // global
           _c4NXi::P64 = R1 & 7;
           if (_c4NXi::P64 < 3) goto u4NXr; else goto u4NXs;
       u4NXr: // global
           if (_c4NXi::P64 < 2) goto u4NXD; else goto u4NXC;
       u4NXD: // global
           Sp = Sp + 8;
           call _c4NX8() args: 0, res: 0, upd: 0;
       u4NXC: // global
           Sp = Sp + 8;
           call _c4NXc() args: 0, res: 0, upd: 0;
       u4NXs: // global
           if (_c4NXi::P64 < 4) goto u4NXF; else goto u4NXE;
       u4NXF: // global
           Sp = Sp + 8;
           call _c4NXg() args: 0, res: 0, upd: 0;
       u4NXE: // global
           Sp = Sp + 8;
           call _c4NWT() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4NWz_info" {
     block_c4NWz_info:
         const _c4NWz;
         const 0;
         const 30;
 },
 _c4NWT() //  []
         { []
         }
     {offset
       c4NWT: // global
           R1 = 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c4NWW() //  [R1]
         { []
         }
     {offset
       c4NWW: // global
           _c4NXh::P64 = R1 & 7;
           if (_c4NXh::P64 < 3) goto u4NXt; else goto u4NXu;
       u4NXt: // global
           if (_c4NXh::P64 < 2) goto c4NX4; else goto u4NXG;
       c4NX4: // global
           R1 = (-2);
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u4NXG: // global
           Sp = Sp + 8;
           call _c4NX8() args: 0, res: 0, upd: 0;
       u4NXu: // global
           if (_c4NXh::P64 < 4) goto u4NXI; else goto u4NXH;
       u4NXI: // global
           Sp = Sp + 8;
           call _c4NXc() args: 0, res: 0, upd: 0;
       u4NXH: // global
           Sp = Sp + 8;
           call _c4NXg() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4NWW_info" {
     block_c4NWW_info:
         const _c4NWW;
         const 0;
         const 30;
 },
 _c4NX8() //  []
         { []
         }
     {offset
       c4NX8: // global
           R1 = (-1);
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c4NXc() //  []
         { []
         }
     {offset
       c4NXc: // global
           R1 = 0;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c4NXg() //  []
         { []
         }
     {offset
       c4NXg: // global
           R1 = 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.80510976 UTC

[section ""data" . GHC.IO.IOMode.$fIxIOMode_$cunsafeRangeSize_closure" {
     GHC.IO.IOMode.$fIxIOMode_$cunsafeRangeSize_closure:
         const GHC.IO.IOMode.$fIxIOMode_$cunsafeRangeSize_info;
 },
 GHC.IO.IOMode.$fIxIOMode_$cunsafeRangeSize_entry() //  [R2]
         { []
         }
     {offset
       c4NYU: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c4NZ2; else goto c4NZ3;
       c4NZ2: // global
           R2 = R2;
           R1 = GHC.IO.IOMode.$fIxIOMode_$cunsafeRangeSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4NZ3: // global
           I64[Sp - 8] = block_c4NYR_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u4NZ8; else goto c4NYS;
       u4NZ8: // global
           call _c4NYR(R1) args: 0, res: 0, upd: 0;
       c4NYS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fIxIOMode_$cunsafeRangeSize_info" {
     GHC.IO.IOMode.$fIxIOMode_$cunsafeRangeSize_info:
         const GHC.IO.IOMode.$fIxIOMode_$cunsafeRangeSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c4NYR() //  [R1]
         { []
         }
     {offset
       c4NYR: // global
           I64[Sp] = block_c4NYX_info;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.IO.IOMode.$w$cunsafeRangeSize_entry(R3,
                                                        R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4NYR_info" {
     block_c4NYR_info:
         const _c4NYR;
         const 0;
         const 30;
 },
 _c4NYX() //  [R1]
         { []
         }
     {offset
       c4NYX: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4NZ7; else goto c4NZ6;
       c4NZ7: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c4NZ6: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4NYX_info" {
     block_c4NYX_info:
         const _c4NYX;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.813768432 UTC

[section ""data" . GHC.IO.IOMode.$fIxIOMode_$cindex_closure" {
     GHC.IO.IOMode.$fIxIOMode_$cindex_closure:
         const GHC.IO.IOMode.$fIxIOMode_$cindex_info;
         const 0;
 },
 GHC.IO.IOMode.$fIxIOMode_$cindex_entry() //  [R2, R3]
         { []
         }
     {offset
       c4NZt: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4NZu; else goto c4NZv;
       c4NZu: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.IOMode.$fIxIOMode_$cindex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4NZv: // global
           I64[Sp - 16] = block_c4NZq_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4NZT; else goto c4NZr;
       u4NZT: // global
           call _c4NZq(R1) args: 0, res: 0, upd: 0;
       c4NZr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fIxIOMode_$cindex_info" {
     GHC.IO.IOMode.$fIxIOMode_$cindex_info:
         const GHC.IO.IOMode.$fIxIOMode_$cindex_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S4L8g_srt+120;
 },
 _c4NZq() //  [R1]
         { []
         }
     {offset
       c4NZq: // global
           I64[Sp - 8] = block_c4NZy_info;
           R4 = P64[Sp + 8];
           R3 = P64[R1 + 15];
           _s4L1Z::P64 = P64[R1 + 7];
           R2 = _s4L1Z::P64;
           P64[Sp] = _s4L1Z::P64;
           Sp = Sp - 8;
           call GHC.IO.IOMode.$w$cinRange_entry(R4,
                                                R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4NZq_info" {
     block_c4NZq_info:
         const _c4NZq;
         const 1;
         const 4294967326;
         const S4L8g_srt+120;
 },
 _c4NZy() //  [R1]
         { []
         }
     {offset
       c4NZy: // global
           if (R1 & 7 == 1) goto c4NZF; else goto c4NZO;
       c4NZF: // global
           R1 = GHC.Arr.hopelessIndexError_closure;
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c4NZO: // global
           _s4L1X::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c4NZI_info;
           R3 = _s4L1X::P64;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.IO.IOMode.$w$cunsafeIndex_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4NZy_info" {
     block_c4NZy_info:
         const _c4NZy;
         const 2;
         const 4294967326;
         const S4L8g_srt+120;
 },
 _c4NZI() //  [R1]
         { []
         }
     {offset
       c4NZI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4NZR; else goto c4NZQ;
       c4NZR: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c4NZQ: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4NZI_info" {
     block_c4NZI_info:
         const _c4NZI;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.822798634 UTC

[section ""data" . GHC.IO.IOMode.$fIxIOMode_closure" {
     GHC.IO.IOMode.$fIxIOMode_closure:
         const GHC.Arr.C:Ix_con_info;
         const GHC.IO.IOMode.$fOrdIOMode_closure+1;
         const GHC.IO.IOMode.$fIxIOMode_$crange_closure+1;
         const GHC.IO.IOMode.$fIxIOMode_$cindex_closure+2;
         const GHC.IO.IOMode.$fIxIOMode_$cunsafeIndex_closure+2;
         const GHC.IO.IOMode.$fIxIOMode_$cinRange_closure+2;
         const GHC.IO.IOMode.$fIxIOMode_$crangeSize_closure+1;
         const GHC.IO.IOMode.$fIxIOMode_$cunsafeRangeSize_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.825339091 UTC

[section ""cstring" . lvl4_r4KYP_bytes" {
     lvl4_r4KYP_bytes:
         I8[] [101,114,114,111,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.827799677 UTC

[section ""data" . lvl5_r4KYQ_closure" {
     lvl5_r4KYQ_closure:
         const lvl5_r4KYQ_info;
         const 0;
         const 0;
         const 0;
 },
 lvl5_r4KYQ_entry() //  [R1]
         { []
         }
     {offset
       c4O0l: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4O0m; else goto c4O0n;
       c4O0m: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4O0n: // global
           (_c4O0i::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4O0i::I64 == 0) goto c4O0k; else goto c4O0j;
       c4O0k: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c4O0j: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4O0i::I64;
           R2 = lvl4_r4KYP_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl5_r4KYQ_info" {
     lvl5_r4KYQ_info:
         const lvl5_r4KYQ_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.831485393 UTC

[section ""cstring" . GHC.IO.IOMode.$trModule4_bytes" {
     GHC.IO.IOMode.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.833946092 UTC

[section ""data" . lvl6_r4KYR_closure" {
     lvl6_r4KYR_closure:
         const lvl6_r4KYR_info;
         const 0;
         const 0;
         const 0;
 },
 lvl6_r4KYR_entry() //  [R1]
         { []
         }
     {offset
       c4O0C: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4O0D; else goto c4O0E;
       c4O0D: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4O0E: // global
           (_c4O0z::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4O0z::I64 == 0) goto c4O0B; else goto c4O0A;
       c4O0B: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c4O0A: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4O0z::I64;
           R2 = GHC.IO.IOMode.$trModule4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl6_r4KYR_info" {
     lvl6_r4KYR_info:
         const lvl6_r4KYR_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.837833092 UTC

[section ""cstring" . GHC.IO.IOMode.$trModule2_bytes" {
     GHC.IO.IOMode.$trModule2_bytes:
         I8[] [71,72,67,46,73,79,46,73,79,77,111,100,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.84021043 UTC

[section ""data" . lvl7_r4KYS_closure" {
     lvl7_r4KYS_closure:
         const lvl7_r4KYS_info;
         const 0;
         const 0;
         const 0;
 },
 lvl7_r4KYS_entry() //  [R1]
         { []
         }
     {offset
       c4O0T: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4O0U; else goto c4O0V;
       c4O0U: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4O0V: // global
           (_c4O0Q::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4O0Q::I64 == 0) goto c4O0S; else goto c4O0R;
       c4O0S: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c4O0R: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4O0Q::I64;
           R2 = GHC.IO.IOMode.$trModule2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl7_r4KYS_info" {
     lvl7_r4KYS_info:
         const lvl7_r4KYS_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.844014091 UTC

[section ""cstring" . lvl8_r4KYT_bytes" {
     lvl8_r4KYT_bytes:
         I8[] [46,47,71,72,67,47,73,79,47,73,79,77,111,100,101,46,104,115]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.846472987 UTC

[section ""data" . lvl9_r4KYU_closure" {
     lvl9_r4KYU_closure:
         const lvl9_r4KYU_info;
         const 0;
         const 0;
         const 0;
 },
 lvl9_r4KYU_entry() //  [R1]
         { []
         }
     {offset
       c4O1a: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4O1b; else goto c4O1c;
       c4O1b: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4O1c: // global
           (_c4O17::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4O17::I64 == 0) goto c4O19; else goto c4O18;
       c4O19: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c4O18: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4O17::I64;
           R2 = lvl8_r4KYT_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl9_r4KYU_info" {
     lvl9_r4KYU_info:
         const lvl9_r4KYU_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.850208556 UTC

[section ""data" . lvl10_r4KYV_closure" {
     lvl10_r4KYV_closure:
         const GHC.Types.I#_con_info;
         const 32;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.851940493 UTC

[section ""data" . lvl11_r4KYW_closure" {
     lvl11_r4KYW_closure:
         const GHC.Types.I#_con_info;
         const 36;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.854647471 UTC

[section ""data" . lvl12_r4KYX_closure" {
     lvl12_r4KYX_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl6_r4KYR_closure;
         const lvl7_r4KYS_closure;
         const lvl9_r4KYU_closure;
         const lvl10_r4KYV_closure+1;
         const lvl10_r4KYV_closure+1;
         const lvl10_r4KYV_closure+1;
         const lvl11_r4KYW_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.856594781 UTC

[section ""data" . lvl13_r4KYY_closure" {
     lvl13_r4KYY_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl5_r4KYQ_closure;
         const lvl12_r4KYX_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.859085354 UTC

[section ""cstring" . lvl14_r4KYZ_bytes" {
     lvl14_r4KYZ_bytes:
         I8[] [112,114,101,100,123,73,79,77,111,100,101,125,58,32,116,114,105,101,100,32,116,111,32,116,97,107,101,32,96,112,114,101,100,39,32,111,102,32,102,105,114,115,116,32,116,97,103,32,105,110,32,101,110,117,109,101,114,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.861743308 UTC

[section ""data" . GHC.IO.IOMode.$fEnumIOMode5_closure" {
     GHC.IO.IOMode.$fEnumIOMode5_closure:
         const GHC.IO.IOMode.$fEnumIOMode5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.IOMode.$fEnumIOMode5_entry() //  [R1]
         { []
         }
     {offset
       c4O1x: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4O1y; else goto c4O1z;
       c4O1y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4O1z: // global
           (_c4O1s::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4O1s::I64 == 0) goto c4O1u; else goto c4O1t;
       c4O1u: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c4O1t: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4O1s::I64;
           I64[Sp - 24] = block_c4O1v_info;
           R2 = lvl14_r4KYZ_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fEnumIOMode5_info" {
     GHC.IO.IOMode.$fEnumIOMode5_info:
         const GHC.IO.IOMode.$fEnumIOMode5_entry;
         const 0;
         const 12884901909;
         const S4L8g_srt+136;
 },
 _c4O1v() //  [R1]
         { []
         }
     {offset
       c4O1v: // global
           R3 = R1;
           R2 = lvl13_r4KYY_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c4O1v_info" {
     block_c4O1v_info:
         const _c4O1v;
         const 0;
         const 12884901918;
         const S4L8g_srt+136;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.868151474 UTC

[section ""data" . GHC.IO.IOMode.$fEnumIOMode_$cpred_closure" {
     GHC.IO.IOMode.$fEnumIOMode_$cpred_closure:
         const GHC.IO.IOMode.$fEnumIOMode_$cpred_info;
         const 0;
 },
 GHC.IO.IOMode.$fEnumIOMode_$cpred_entry() //  [R2]
         { []
         }
     {offset
       c4O20: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c4O21; else goto c4O22;
       c4O21: // global
           R2 = R2;
           R1 = GHC.IO.IOMode.$fEnumIOMode_$cpred_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4O22: // global
           I64[Sp - 8] = block_c4O1R_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u4O2h; else goto c4O1S;
       u4O2h: // global
           call _c4O1R(R1) args: 0, res: 0, upd: 0;
       c4O1S: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fEnumIOMode_$cpred_info" {
     GHC.IO.IOMode.$fEnumIOMode_$cpred_info:
         const GHC.IO.IOMode.$fEnumIOMode_$cpred_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S4L8g_srt+152;
 },
 _c4O1R() //  [R1]
         { []
         }
     {offset
       c4O1R: // global
           _c4O1Z::P64 = R1 & 7;
           if (_c4O1Z::P64 < 3) goto u4O2f; else goto u4O2g;
       u4O2f: // global
           if (_c4O1Z::P64 < 2) goto c4O1V; else goto c4O1W;
       c4O1V: // global
           R1 = GHC.IO.IOMode.$fEnumIOMode5_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c4O1W: // global
           R1 = GHC.IO.IOMode.ReadMode_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u4O2g: // global
           if (_c4O1Z::P64 < 4) goto c4O1X; else goto c4O1Y;
       c4O1X: // global
           R1 = GHC.IO.IOMode.WriteMode_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4O1Y: // global
           R1 = GHC.IO.IOMode.AppendMode_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4O1R_info" {
     block_c4O1R_info:
         const _c4O1R;
         const 0;
         const 4294967326;
         const S4L8g_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.873711334 UTC

[section ""cstring" . lvl15_r4KZ0_bytes" {
     lvl15_r4KZ0_bytes:
         I8[] [115,117,99,99,123,73,79,77,111,100,101,125,58,32,116,114,105,101,100,32,116,111,32,116,97,107,101,32,96,115,117,99,99,39,32,111,102,32,108,97,115,116,32,116,97,103,32,105,110,32,101,110,117,109,101,114,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.876254778 UTC

[section ""data" . GHC.IO.IOMode.$fEnumIOMode6_closure" {
     GHC.IO.IOMode.$fEnumIOMode6_closure:
         const GHC.IO.IOMode.$fEnumIOMode6_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.IOMode.$fEnumIOMode6_entry() //  [R1]
         { []
         }
     {offset
       c4O2F: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4O2G; else goto c4O2H;
       c4O2G: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4O2H: // global
           (_c4O2A::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4O2A::I64 == 0) goto c4O2C; else goto c4O2B;
       c4O2C: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c4O2B: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4O2A::I64;
           I64[Sp - 24] = block_c4O2D_info;
           R2 = lvl15_r4KZ0_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fEnumIOMode6_info" {
     GHC.IO.IOMode.$fEnumIOMode6_info:
         const GHC.IO.IOMode.$fEnumIOMode6_entry;
         const 0;
         const 12884901909;
         const S4L8g_srt+136;
 },
 _c4O2D() //  [R1]
         { []
         }
     {offset
       c4O2D: // global
           R3 = R1;
           R2 = lvl13_r4KYY_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c4O2D_info" {
     block_c4O2D_info:
         const _c4O2D;
         const 0;
         const 12884901918;
         const S4L8g_srt+136;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.88310558 UTC

[section ""data" . GHC.IO.IOMode.$fEnumIOMode_$csucc_closure" {
     GHC.IO.IOMode.$fEnumIOMode_$csucc_closure:
         const GHC.IO.IOMode.$fEnumIOMode_$csucc_info;
         const 0;
 },
 GHC.IO.IOMode.$fEnumIOMode_$csucc_entry() //  [R2]
         { []
         }
     {offset
       c4O38: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c4O39; else goto c4O3a;
       c4O39: // global
           R2 = R2;
           R1 = GHC.IO.IOMode.$fEnumIOMode_$csucc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4O3a: // global
           I64[Sp - 8] = block_c4O2Z_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u4O3p; else goto c4O30;
       u4O3p: // global
           call _c4O2Z(R1) args: 0, res: 0, upd: 0;
       c4O30: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fEnumIOMode_$csucc_info" {
     GHC.IO.IOMode.$fEnumIOMode_$csucc_info:
         const GHC.IO.IOMode.$fEnumIOMode_$csucc_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S4L8g_srt+168;
 },
 _c4O2Z() //  [R1]
         { []
         }
     {offset
       c4O2Z: // global
           _c4O37::P64 = R1 & 7;
           if (_c4O37::P64 < 3) goto u4O3n; else goto u4O3o;
       u4O3n: // global
           if (_c4O37::P64 < 2) goto c4O33; else goto c4O34;
       c4O33: // global
           R1 = GHC.IO.IOMode.WriteMode_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4O34: // global
           R1 = GHC.IO.IOMode.AppendMode_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u4O3o: // global
           if (_c4O37::P64 < 4) goto c4O35; else goto c4O36;
       c4O35: // global
           R1 = GHC.IO.IOMode.ReadWriteMode_closure+4;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4O36: // global
           R1 = GHC.IO.IOMode.$fEnumIOMode6_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4O2Z_info" {
     block_c4O2Z_info:
         const _c4O2Z;
         const 0;
         const 4294967326;
         const S4L8g_srt+176;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.888518774 UTC

[section ""cstring" . lvl16_r4KZ1_bytes" {
     lvl16_r4KZ1_bytes:
         I8[] [41,32,105,115,32,111,117,116,115,105,100,101,32,111,102,32,101,110,117,109,101,114,97,116,105,111,110,39,115,32,114,97,110,103,101,32,40,48,44]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.890719921 UTC

[section ""cstring" . lvl17_r4KZ2_bytes" {
     lvl17_r4KZ2_bytes:
         I8[] [41]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.893122422 UTC

[section ""data" . lvl18_r4KZ3_closure" {
     lvl18_r4KZ3_closure:
         const lvl18_r4KZ3_info;
         const 0;
         const 0;
         const 0;
 },
 lvl18_r4KZ3_entry() //  [R1]
         { []
         }
     {offset
       c4O3M: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4O3N; else goto c4O3O;
       c4O3N: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4O3O: // global
           (_c4O3J::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4O3J::I64 == 0) goto c4O3L; else goto c4O3K;
       c4O3L: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c4O3K: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4O3J::I64;
           R2 = lvl17_r4KZ2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl18_r4KZ3_info" {
     lvl18_r4KZ3_info:
         const lvl18_r4KZ3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.898539095 UTC

[section ""data" . lvl19_r4KZ4_closure" {
     lvl19_r4KZ4_closure:
         const lvl19_r4KZ4_info;
         const 0;
         const 0;
         const 0;
 },
 lvl19_r4KZ4_entry() //  [R1]
         { []
         }
     {offset
       c4O45: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4O46; else goto c4O47;
       c4O46: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4O47: // global
           (_c4O3Z::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4O3Z::I64 == 0) goto c4O41; else goto c4O40;
       c4O41: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c4O40: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4O3Z::I64;
           I64[Sp - 24] = block_c4O42_info;
           R4 = lvl18_r4KZ3_closure;
           R3 = 3;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl19_r4KZ4_info" {
     lvl19_r4KZ4_info:
         const lvl19_r4KZ4_entry;
         const 0;
         const 4294967317;
         const S4L8g_srt+184;
 },
 _c4O42() //  [R1, R2]
         { []
         }
     {offset
       c4O42: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c4O4a; else goto c4O49;
       c4O4a: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c4O49: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c4O42_info" {
     block_c4O42_info:
         const _c4O42;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.904370045 UTC

[section ""data" . lvl20_r4KZ5_closure" {
     lvl20_r4KZ5_closure:
         const lvl20_r4KZ5_info;
         const 0;
         const 0;
         const 0;
 },
 lvl20_r4KZ5_entry() //  [R1]
         { []
         }
     {offset
       c4O4s: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4O4t; else goto c4O4u;
       c4O4t: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4O4u: // global
           (_c4O4p::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4O4p::I64 == 0) goto c4O4r; else goto c4O4q;
       c4O4r: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c4O4q: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4O4p::I64;
           R3 = lvl19_r4KZ4_closure;
           R2 = lvl16_r4KZ1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl20_r4KZ5_info" {
     lvl20_r4KZ5_info:
         const lvl20_r4KZ5_entry;
         const 0;
         const 4294967317;
         const S4L8g_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.908340127 UTC

[section ""cstring" . lvl21_r4KZ6_bytes" {
     lvl21_r4KZ6_bytes:
         I8[] [116,111,69,110,117,109,123,73,79,77,111,100,101,125,58,32,116,97,103,32,40]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.91178309 UTC

[section ""data" . GHC.IO.IOMode.$wlvl_closure" {
     GHC.IO.IOMode.$wlvl_closure:
         const GHC.IO.IOMode.$wlvl_info;
         const 0;
 },
 sat_s4L2g_entry() //  [R1]
         { []
         }
     {offset
       c4O4O: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4O4P; else goto c4O4Q;
       c4O4P: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4O4Q: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c4O4L_info;
           R4 = lvl20_r4KZ5_closure;
           R3 = I64[R1 + 16];
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L2g_info" {
     sat_s4L2g_info:
         const sat_s4L2g_entry;
         const 4294967296;
         const 4294967313;
         const S4L8g_srt+200;
 },
 _c4O4L() //  [R1, R2]
         { []
         }
     {offset
       c4O4L: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c4O4T; else goto c4O4S;
       c4O4T: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c4O4S: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c4O4L_info" {
     block_c4O4L_info:
         const _c4O4L;
         const 0;
         const 30;
 },
 GHC.IO.IOMode.$wlvl_entry() //  [R2]
         { []
         }
     {offset
       c4O4W: // global
           _s4L2c::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c4O4X; else goto c4O4Y;
       c4O4Y: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c4O50; else goto c4O4Z;
       c4O50: // global
           HpAlloc = 24;
           goto c4O4X;
       c4O4X: // global
           R2 = _s4L2c::I64;
           R1 = GHC.IO.IOMode.$wlvl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4O4Z: // global
           I64[Hp - 16] = sat_s4L2g_info;
           I64[Hp] = _s4L2c::I64;
           I64[Sp - 8] = block_c4O4U_info;
           R3 = Hp - 16;
           R2 = lvl21_r4KZ6_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$wlvl_info" {
     GHC.IO.IOMode.$wlvl_info:
         const GHC.IO.IOMode.$wlvl_entry;
         const 0;
         const 3311419785230;
         const 4294967300;
         const S4L8g_srt+136;
 },
 _c4O4U() //  [R1]
         { []
         }
     {offset
       c4O4U: // global
           R3 = R1;
           R2 = lvl13_r4KYY_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4O4U_info" {
     block_c4O4U_info:
         const _c4O4U;
         const 0;
         const 12884901918;
         const S4L8g_srt+136;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.920869174 UTC

[section ""data" . GHC.IO.IOMode.$w$ctoEnum_closure" {
     GHC.IO.IOMode.$w$ctoEnum_closure:
         const GHC.IO.IOMode.$w$ctoEnum_info;
         const 0;
 },
 GHC.IO.IOMode.$w$ctoEnum_entry() //  [R2]
         { []
         }
     {offset
       c4O5t: // global
           _s4L2i::I64 = R2;
           if (%MO_S_Lt_W64(R2, 0)) goto c4O5B; else goto c4O5s;
       c4O5s: // global
           if (%MO_S_Gt_W64(_s4L2i::I64, 3)) goto c4O5B; else goto c4O5C;
       c4O5B: // global
           R2 = _s4L2i::I64;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
       c4O5C: // global
           R1 = I64[(_s4L2i::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$w$ctoEnum_info" {
     GHC.IO.IOMode.$w$ctoEnum_info:
         const GHC.IO.IOMode.$w$ctoEnum_entry;
         const 0;
         const 4294967310;
         const 4294967300;
         const S4L8g_srt+208;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.925559334 UTC

[section ""data" . GHC.IO.IOMode.$fEnumIOMode_$ctoEnum_closure" {
     GHC.IO.IOMode.$fEnumIOMode_$ctoEnum_closure:
         const GHC.IO.IOMode.$fEnumIOMode_$ctoEnum_info;
         const 0;
 },
 GHC.IO.IOMode.$fEnumIOMode_$ctoEnum_entry() //  [R2]
         { []
         }
     {offset
       c4O5Q: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c4O5R; else goto c4O5S;
       c4O5R: // global
           R2 = R2;
           R1 = GHC.IO.IOMode.$fEnumIOMode_$ctoEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4O5S: // global
           I64[Sp - 8] = block_c4O5N_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u4O5W; else goto c4O5O;
       u4O5W: // global
           call _c4O5N(R1) args: 0, res: 0, upd: 0;
       c4O5O: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fEnumIOMode_$ctoEnum_info" {
     GHC.IO.IOMode.$fEnumIOMode_$ctoEnum_info:
         const GHC.IO.IOMode.$fEnumIOMode_$ctoEnum_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S4L8g_srt+216;
 },
 _c4O5N() //  [R1]
         { []
         }
     {offset
       c4O5N: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.IO.IOMode.$w$ctoEnum_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4O5N_info" {
     block_c4O5N_info:
         const _c4O5N;
         const 0;
         const 4294967326;
         const S4L8g_srt+224;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.931671116 UTC

[section ""data" . GHC.IO.IOMode.$fEnumIOMode4_closure" {
     GHC.IO.IOMode.$fEnumIOMode4_closure:
         const GHC.IO.IOMode.$fEnumIOMode4_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.IOMode.$fEnumIOMode4_entry() //  [R1]
         { []
         }
     {offset
       c4O6c: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4O6d; else goto c4O6e;
       c4O6d: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4O6e: // global
           (_c4O69::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4O69::I64 == 0) goto c4O6b; else goto c4O6a;
       c4O6b: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c4O6a: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4O69::I64;
           R2 = 0;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$fEnumIOMode_go4_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fEnumIOMode4_info" {
     GHC.IO.IOMode.$fEnumIOMode4_info:
         const GHC.IO.IOMode.$fEnumIOMode4_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.936101179 UTC

[section ""data" . GHC.IO.IOMode.$fEnumIOMode3_closure" {
     GHC.IO.IOMode.$fEnumIOMode3_closure:
         const GHC.IO.IOMode.$fEnumIOMode3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.IOMode.$fEnumIOMode3_entry() //  [R1]
         { []
         }
     {offset
       c4O6s: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4O6t; else goto c4O6u;
       c4O6t: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4O6u: // global
           (_c4O6p::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4O6p::I64 == 0) goto c4O6r; else goto c4O6q;
       c4O6r: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c4O6q: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4O6p::I64;
           R2 = 1;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$fEnumIOMode_go4_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fEnumIOMode3_info" {
     GHC.IO.IOMode.$fEnumIOMode3_info:
         const GHC.IO.IOMode.$fEnumIOMode3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.94106468 UTC

[section ""data" . GHC.IO.IOMode.$fEnumIOMode2_closure" {
     GHC.IO.IOMode.$fEnumIOMode2_closure:
         const GHC.IO.IOMode.$fEnumIOMode2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.IOMode.$fEnumIOMode2_entry() //  [R1]
         { []
         }
     {offset
       c4O6I: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4O6J; else goto c4O6K;
       c4O6J: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4O6K: // global
           (_c4O6F::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4O6F::I64 == 0) goto c4O6H; else goto c4O6G;
       c4O6H: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c4O6G: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4O6F::I64;
           R2 = 2;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$fEnumIOMode_go4_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fEnumIOMode2_info" {
     GHC.IO.IOMode.$fEnumIOMode2_info:
         const GHC.IO.IOMode.$fEnumIOMode2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.945323488 UTC

[section ""data" . GHC.IO.IOMode.$fEnumIOMode1_closure" {
     GHC.IO.IOMode.$fEnumIOMode1_closure:
         const GHC.IO.IOMode.$fEnumIOMode1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.IOMode.$fEnumIOMode1_entry() //  [R1]
         { []
         }
     {offset
       c4O6Y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4O6Z; else goto c4O70;
       c4O6Z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4O70: // global
           (_c4O6V::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4O6V::I64 == 0) goto c4O6X; else goto c4O6W;
       c4O6X: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c4O6W: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4O6V::I64;
           R2 = 3;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$fEnumIOMode_go4_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fEnumIOMode1_info" {
     GHC.IO.IOMode.$fEnumIOMode1_info:
         const GHC.IO.IOMode.$fEnumIOMode1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.950053994 UTC

[section ""data" . GHC.IO.IOMode.$fEnumIOMode_$cenumFrom_closure" {
     GHC.IO.IOMode.$fEnumIOMode_$cenumFrom_closure:
         const GHC.IO.IOMode.$fEnumIOMode_$cenumFrom_info;
         const 0;
 },
 GHC.IO.IOMode.$fEnumIOMode_$cenumFrom_entry() //  [R2]
         { []
         }
     {offset
       c4O7l: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c4O7m; else goto c4O7n;
       c4O7m: // global
           R2 = R2;
           R1 = GHC.IO.IOMode.$fEnumIOMode_$cenumFrom_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4O7n: // global
           I64[Sp - 8] = block_c4O7c_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u4O7C; else goto c4O7d;
       u4O7C: // global
           call _c4O7c(R1) args: 0, res: 0, upd: 0;
       c4O7d: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fEnumIOMode_$cenumFrom_info" {
     GHC.IO.IOMode.$fEnumIOMode_$cenumFrom_info:
         const GHC.IO.IOMode.$fEnumIOMode_$cenumFrom_entry;
         const 0;
         const 133143986190;
         const 4294967301;
         const S4L8g_srt+232;
 },
 _c4O7c() //  [R1]
         { []
         }
     {offset
       c4O7c: // global
           _c4O7k::P64 = R1 & 7;
           if (_c4O7k::P64 < 3) goto u4O7A; else goto u4O7B;
       u4O7A: // global
           if (_c4O7k::P64 < 2) goto c4O7g; else goto c4O7h;
       c4O7g: // global
           R1 = GHC.IO.IOMode.$fEnumIOMode4_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c4O7h: // global
           R1 = GHC.IO.IOMode.$fEnumIOMode3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u4O7B: // global
           if (_c4O7k::P64 < 4) goto c4O7i; else goto c4O7j;
       c4O7i: // global
           R1 = GHC.IO.IOMode.$fEnumIOMode2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c4O7j: // global
           R1 = GHC.IO.IOMode.$fEnumIOMode1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4O7c_info" {
     block_c4O7c_info:
         const _c4O7c;
         const 0;
         const 64424509470;
         const S4L8g_srt+240;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:39.973003631 UTC

[section ""data" . GHC.IO.IOMode.$fEnumIOMode_$cenumFromThen_closure" {
     GHC.IO.IOMode.$fEnumIOMode_$cenumFromThen_closure:
         const GHC.IO.IOMode.$fEnumIOMode_$cenumFromThen_info;
 },
 sat_s4L2H_entry() //  [R1]
         { []
         }
     {offset
       c4O8C: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4O8D; else goto c4O8E;
       c4O8D: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4O8E: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s4L2C_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L2H_info" {
     sat_s4L2H_info:
         const sat_s4L2H_entry;
         const 8589934593;
         const 15;
 },
 sat_s4L2F_entry() //  [R1]
         { []
         }
     {offset
       c4O8J: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4O8K; else goto c4O8L;
       c4O8K: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4O8L: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L2F_info" {
     sat_s4L2F_info:
         const sat_s4L2F_entry;
         const 4294967296;
         const 17;
 },
 sat_s4L2I_entry() //  [R1]
         { []
         }
     {offset
       c4O8R: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4O8S; else goto c4O8T;
       c4O8S: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4O8T: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L2I_info" {
     sat_s4L2I_info:
         const sat_s4L2I_entry;
         const 4294967296;
         const 17;
 },
 go_dn_s4L2C_entry() //  [R1, R2]
         { []
         }
     {offset
       c4O8X: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c4O91; else goto c4O90;
       c4O91: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4O90: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c4O8V; else goto c4O8W;
       c4O8V: // global
           _s4L2A::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s4L2H_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s4L2A::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s4L2F_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4O8W: // global
           I64[Hp - 80] = sat_s4L2I_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c4O93::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c4O93::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_s4L2C_info" {
     go_dn_s4L2C_info:
         const go_dn_s4L2C_entry;
         const 8589934592;
         const 13;
         const 4294967300;
 },
 sat_s4L2J_entry() //  [R1]
         { []
         }
     {offset
       c4O94: // global
           _s4L2J::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c4O95; else goto c4O96;
       c4O96: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c4O98; else goto c4O97;
       c4O98: // global
           HpAlloc = 24;
           goto c4O95;
       c4O95: // global
           R1 = _s4L2J::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4O97: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s4L2J::P64;
           _s4L2v::I64 = I64[_s4L2J::P64 + 24];
           _s4L2A::I64 = _s4L2v::I64 - I64[_s4L2J::P64 + 16];
           I64[Hp - 16] = go_dn_s4L2C_info;
           I64[Hp - 8] = _s4L2A::I64;
           I64[Hp] = 3 - _s4L2A::I64;
           R2 = _s4L2v::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s4L2C_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L2J_info" {
     sat_s4L2J_info:
         const sat_s4L2J_entry;
         const 8589934592;
         const 20;
 },
 sat_s4L2z_entry() //  [R1]
         { []
         }
     {offset
       c4O9d: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4O9e; else goto c4O9f;
       c4O9e: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4O9f: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L2z_info" {
     sat_s4L2z_info:
         const sat_s4L2z_entry;
         const 4294967296;
         const 17;
 },
 sat_s4L2L_entry() //  [R1]
         { []
         }
     {offset
       c4O9o: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4O9p; else goto c4O9q;
       c4O9p: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4O9q: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L2L_info" {
     sat_s4L2L_info:
         const sat_s4L2L_entry;
         const 4294967296;
         const 17;
 },
 sat_s4L2V_entry() //  [R1]
         { []
         }
     {offset
       c4O9T: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4O9U; else goto c4O9V;
       c4O9U: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4O9V: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s4L2Q_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L2V_info" {
     sat_s4L2V_info:
         const sat_s4L2V_entry;
         const 8589934593;
         const 15;
 },
 sat_s4L2T_entry() //  [R1]
         { []
         }
     {offset
       c4Oa0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Oa1; else goto c4Oa2;
       c4Oa1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Oa2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L2T_info" {
     sat_s4L2T_info:
         const sat_s4L2T_entry;
         const 4294967296;
         const 17;
 },
 sat_s4L2W_entry() //  [R1]
         { []
         }
     {offset
       c4Oa8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Oa9; else goto c4Oaa;
       c4Oa9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Oaa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L2W_info" {
     sat_s4L2W_info:
         const sat_s4L2W_entry;
         const 4294967296;
         const 17;
 },
 go_up_s4L2Q_entry() //  [R1, R2]
         { []
         }
     {offset
       c4Oae: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c4Oai; else goto c4Oah;
       c4Oai: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4Oah: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c4Oac; else goto c4Oad;
       c4Oac: // global
           _s4L2O::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s4L2V_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s4L2O::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s4L2T_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4Oad: // global
           I64[Hp - 80] = sat_s4L2W_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c4Oak::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c4Oak::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_s4L2Q_info" {
     go_up_s4L2Q_info:
         const go_up_s4L2Q_entry;
         const 8589934592;
         const 13;
         const 4294967300;
 },
 sat_s4L2X_entry() //  [R1]
         { []
         }
     {offset
       c4Oal: // global
           _s4L2X::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c4Oam; else goto c4Oan;
       c4Oan: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c4Oap; else goto c4Oao;
       c4Oap: // global
           HpAlloc = 24;
           goto c4Oam;
       c4Oam: // global
           R1 = _s4L2X::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Oao: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s4L2X::P64;
           _s4L2v::I64 = I64[_s4L2X::P64 + 24];
           _s4L2O::I64 = _s4L2v::I64 - I64[_s4L2X::P64 + 16];
           I64[Hp - 16] = go_up_s4L2Q_info;
           I64[Hp - 8] = _s4L2O::I64;
           I64[Hp] = 3 - _s4L2O::I64;
           R2 = _s4L2v::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s4L2Q_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L2X_info" {
     sat_s4L2X_info:
         const sat_s4L2X_entry;
         const 8589934592;
         const 20;
 },
 sat_s4L2N_entry() //  [R1]
         { []
         }
     {offset
       c4Oau: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Oav; else goto c4Oaw;
       c4Oav: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Oaw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L2N_info" {
     sat_s4L2N_info:
         const sat_s4L2N_entry;
         const 4294967296;
         const 17;
 },
 sat_s4L2Z_entry() //  [R1]
         { []
         }
     {offset
       c4OaF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4OaG; else goto c4OaH;
       c4OaG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4OaH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L2Z_info" {
     sat_s4L2Z_info:
         const sat_s4L2Z_entry;
         const 4294967296;
         const 17;
 },
 sat_s4L3a_entry() //  [R1]
         { []
         }
     {offset
       c4Obd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Obe; else goto c4Obf;
       c4Obe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Obf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s4L35_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L3a_info" {
     sat_s4L3a_info:
         const sat_s4L3a_entry;
         const 8589934593;
         const 15;
 },
 sat_s4L38_entry() //  [R1]
         { []
         }
     {offset
       c4Obk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Obl; else goto c4Obm;
       c4Obl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Obm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L38_info" {
     sat_s4L38_info:
         const sat_s4L38_entry;
         const 4294967296;
         const 17;
 },
 sat_s4L3b_entry() //  [R1]
         { []
         }
     {offset
       c4Obs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Obt; else goto c4Obu;
       c4Obt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Obu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L3b_info" {
     sat_s4L3b_info:
         const sat_s4L3b_entry;
         const 4294967296;
         const 17;
 },
 go_dn_s4L35_entry() //  [R1, R2]
         { []
         }
     {offset
       c4Oby: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c4ObC; else goto c4ObB;
       c4ObC: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4ObB: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c4Obw; else goto c4Obx;
       c4Obw: // global
           _s4L33::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s4L3a_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s4L33::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s4L38_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4Obx: // global
           I64[Hp - 80] = sat_s4L3b_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c4ObE::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c4ObE::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_s4L35_info" {
     go_dn_s4L35_info:
         const go_dn_s4L35_entry;
         const 8589934592;
         const 13;
         const 4294967300;
 },
 sat_s4L3c_entry() //  [R1]
         { []
         }
     {offset
       c4ObF: // global
           _s4L3c::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c4ObG; else goto c4ObH;
       c4ObH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c4ObJ; else goto c4ObI;
       c4ObJ: // global
           HpAlloc = 24;
           goto c4ObG;
       c4ObG: // global
           R1 = _s4L3c::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4ObI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s4L3c::P64;
           _s4L2v::I64 = I64[_s4L3c::P64 + 24];
           _s4L33::I64 = _s4L2v::I64 - I64[_s4L3c::P64 + 16];
           I64[Hp - 16] = go_dn_s4L35_info;
           I64[Hp - 8] = _s4L33::I64;
           I64[Hp] = 0 - _s4L33::I64;
           R2 = _s4L2v::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s4L35_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L3c_info" {
     sat_s4L3c_info:
         const sat_s4L3c_entry;
         const 8589934592;
         const 20;
 },
 sat_s4L32_entry() //  [R1]
         { []
         }
     {offset
       c4ObO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4ObP; else goto c4ObQ;
       c4ObP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4ObQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L32_info" {
     sat_s4L32_info:
         const sat_s4L32_entry;
         const 4294967296;
         const 17;
 },
 sat_s4L3e_entry() //  [R1]
         { []
         }
     {offset
       c4ObZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Oc0; else goto c4Oc1;
       c4Oc0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Oc1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L3e_info" {
     sat_s4L3e_info:
         const sat_s4L3e_entry;
         const 4294967296;
         const 17;
 },
 sat_s4L3o_entry() //  [R1]
         { []
         }
     {offset
       c4Ocu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Ocv; else goto c4Ocw;
       c4Ocv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Ocw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s4L3j_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L3o_info" {
     sat_s4L3o_info:
         const sat_s4L3o_entry;
         const 8589934593;
         const 15;
 },
 sat_s4L3m_entry() //  [R1]
         { []
         }
     {offset
       c4OcB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4OcC; else goto c4OcD;
       c4OcC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4OcD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L3m_info" {
     sat_s4L3m_info:
         const sat_s4L3m_entry;
         const 4294967296;
         const 17;
 },
 sat_s4L3p_entry() //  [R1]
         { []
         }
     {offset
       c4OcJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4OcK; else goto c4OcL;
       c4OcK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4OcL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L3p_info" {
     sat_s4L3p_info:
         const sat_s4L3p_entry;
         const 4294967296;
         const 17;
 },
 go_up_s4L3j_entry() //  [R1, R2]
         { []
         }
     {offset
       c4OcP: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c4OcT; else goto c4OcS;
       c4OcT: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4OcS: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c4OcN; else goto c4OcO;
       c4OcN: // global
           _s4L3h::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s4L3o_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s4L3h::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s4L3m_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4OcO: // global
           I64[Hp - 80] = sat_s4L3p_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c4OcV::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c4OcV::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_s4L3j_info" {
     go_up_s4L3j_info:
         const go_up_s4L3j_entry;
         const 8589934592;
         const 13;
         const 4294967300;
 },
 sat_s4L3q_entry() //  [R1]
         { []
         }
     {offset
       c4OcW: // global
           _s4L3q::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c4OcX; else goto c4OcY;
       c4OcY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c4Od0; else goto c4OcZ;
       c4Od0: // global
           HpAlloc = 24;
           goto c4OcX;
       c4OcX: // global
           R1 = _s4L3q::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4OcZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s4L3q::P64;
           _s4L2v::I64 = I64[_s4L3q::P64 + 24];
           _s4L3h::I64 = _s4L2v::I64 - I64[_s4L3q::P64 + 16];
           I64[Hp - 16] = go_up_s4L3j_info;
           I64[Hp - 8] = _s4L3h::I64;
           I64[Hp] = 0 - _s4L3h::I64;
           R2 = _s4L2v::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s4L3j_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L3q_info" {
     sat_s4L3q_info:
         const sat_s4L3q_entry;
         const 8589934592;
         const 20;
 },
 sat_s4L3g_entry() //  [R1]
         { []
         }
     {offset
       c4Od5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Od6; else goto c4Od7;
       c4Od6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Od7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L3g_info" {
     sat_s4L3g_info:
         const sat_s4L3g_entry;
         const 4294967296;
         const 17;
 },
 sat_s4L3s_entry() //  [R1]
         { []
         }
     {offset
       c4Odg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Odh; else goto c4Odi;
       c4Odh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Odi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L3s_info" {
     sat_s4L3s_info:
         const sat_s4L3s_entry;
         const 4294967296;
         const 17;
 },
 GHC.IO.IOMode.$fEnumIOMode_$cenumFromThen_entry() //  [R2, R3]
         { []
         }
     {offset
       c4Ods: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Odt; else goto c4Odu;
       c4Odt: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.IOMode.$fEnumIOMode_$cenumFromThen_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4Odu: // global
           I64[Sp - 16] = block_c4Odj_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4OeW; else goto c4Odk;
       u4OeW: // global
           call _c4Odj(R1) args: 0, res: 0, upd: 0;
       c4Odk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fEnumIOMode_$cenumFromThen_info" {
     GHC.IO.IOMode.$fEnumIOMode_$cenumFromThen_info:
         const GHC.IO.IOMode.$fEnumIOMode_$cenumFromThen_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c4Odj() //  [R1]
         { []
         }
     {offset
       c4Odj: // global
           _s4L2r::P64 = P64[Sp + 8];
           _c4Odr::P64 = R1 & 7;
           if (_c4Odr::P64 < 3) goto u4OeL; else goto u4OeM;
       u4OeL: // global
           if (_c4Odr::P64 < 2) goto c4Odn; else goto c4Odo;
       c4Odn: // global
           _s4L2t::I64 = 0;
           goto s4L2s;
       c4Odo: // global
           _s4L2t::I64 = 1;
           goto s4L2s;
       u4OeM: // global
           if (_c4Odr::P64 < 4) goto c4Odp; else goto c4Odq;
       c4Odp: // global
           _s4L2t::I64 = 2;
           goto s4L2s;
       c4Odq: // global
           _s4L2t::I64 = 3;
           goto s4L2s;
       s4L2s: // global
           I64[Sp] = block_c4Odv_info;
           R1 = _s4L2r::P64;
           I64[Sp + 8] = _s4L2t::I64;
           if (R1 & 7 != 0) goto u4OeV; else goto c4Oef;
       u4OeV: // global
           call _c4Odv(R1) args: 0, res: 0, upd: 0;
       c4Oef: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Odj_info" {
     block_c4Odj_info:
         const _c4Odj;
         const 1;
         const 30;
 },
 _c4Odv() //  [R1]
         { []
         }
     {offset
       c4Odv: // global
           _c4OeK::P64 = R1 & 7;
           if (_c4OeK::P64 < 3) goto u4OeN; else goto u4OeO;
       u4OeN: // global
           if (_c4OeK::P64 < 2) goto c4Oel; else goto c4Oep;
       c4Oel: // global
           I64[Sp] = 0;
           goto u4Of0;
       c4Oep: // global
           I64[Sp] = 1;
           goto u4Of0;
       u4OeO: // global
           if (_c4OeK::P64 < 4) goto c4Oet; else goto c4Oex;
       c4Oet: // global
           I64[Sp] = 2;
           goto u4Of0;
       c4Oex: // global
           I64[Sp] = 3;
           goto u4Of0;
       u4Of0: // global
           call _c4O83() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4Odv_info" {
     block_c4Odv_info:
         const _c4Odv;
         const 65;
         const 30;
 },
 _c4O83() //  []
         { []
         }
     {offset
       c4O83: // global
           Hp = Hp + 80;
           _s4L2v::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c4Odz; else goto c4Ody;
       c4Odz: // global
           HpAlloc = 80;
           I64[Sp] = block_c4O82_info;
           R1 = _s4L2v::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c4Ody: // global
           _s4L2t::I64 = I64[Sp + 8];
           if (%MO_S_Le_W64(_s4L2t::I64,
                            _s4L2v::I64)) goto c4OdU; else goto c4Oee;
       c4OdU: // global
           if (%MO_S_Lt_W64(_s4L2v::I64,
                            _s4L2t::I64)) goto c4OdJ; else goto c4OdS;
       c4OdJ: // global
           if (%MO_S_Le_W64(3, _s4L2v::I64)) goto c4OdC; else goto c4OdH;
       c4OdC: // global
           I64[Hp - 72] = sat_s4L2J_info;
           I64[Hp - 56] = _s4L2t::I64;
           I64[Hp - 48] = _s4L2v::I64;
           I64[Hp - 40] = sat_s4L2z_info;
           I64[Hp - 24] = _s4L2t::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4OdH: // global
           if (%MO_S_Gt_W64(3, _s4L2t::I64)) goto c4Oeb; else goto c4OdF;
       c4OdF: // global
           I64[Hp - 72] = sat_s4L2L_info;
           I64[Hp - 56] = _s4L2t::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c4OdD::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c4OdD::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4OdS: // global
           if (%MO_S_Ge_W64(3, _s4L2v::I64)) goto c4OdM; else goto c4OdR;
       c4OdM: // global
           I64[Hp - 72] = sat_s4L2X_info;
           I64[Hp - 56] = _s4L2t::I64;
           I64[Hp - 48] = _s4L2v::I64;
           I64[Hp - 40] = sat_s4L2N_info;
           I64[Hp - 24] = _s4L2t::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4OdR: // global
           if (%MO_S_Lt_W64(3, _s4L2t::I64)) goto c4Oeb; else goto c4OdP;
       c4OdP: // global
           I64[Hp - 72] = sat_s4L2Z_info;
           I64[Hp - 56] = _s4L2t::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c4OdN::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c4OdN::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4Oee: // global
           if (%MO_S_Lt_W64(_s4L2v::I64,
                            _s4L2t::I64)) goto c4Oe4; else goto c4Oed;
       c4Oe4: // global
           if (%MO_S_Le_W64(0, _s4L2v::I64)) goto c4OdX; else goto c4Oe2;
       c4OdX: // global
           I64[Hp - 72] = sat_s4L3c_info;
           I64[Hp - 56] = _s4L2t::I64;
           I64[Hp - 48] = _s4L2v::I64;
           I64[Hp - 40] = sat_s4L32_info;
           I64[Hp - 24] = _s4L2t::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4Oe2: // global
           if (%MO_S_Gt_W64(0, _s4L2t::I64)) goto c4Oeb; else goto c4Oe0;
       c4Oe0: // global
           I64[Hp - 72] = sat_s4L3e_info;
           I64[Hp - 56] = _s4L2t::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c4OdY::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c4OdY::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4Oed: // global
           if (%MO_S_Ge_W64(0, _s4L2v::I64)) goto c4Oe7; else goto c4Oec;
       c4Oe7: // global
           I64[Hp - 72] = sat_s4L3q_info;
           I64[Hp - 56] = _s4L2t::I64;
           I64[Hp - 48] = _s4L2v::I64;
           I64[Hp - 40] = sat_s4L3g_info;
           I64[Hp - 24] = _s4L2t::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4Oec: // global
           if (%MO_S_Lt_W64(0, _s4L2t::I64)) goto c4Oeb; else goto c4Oea;
       c4Oeb: // global
           Hp = Hp - 80;
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4Oea: // global
           I64[Hp - 72] = sat_s4L3s_info;
           I64[Hp - 56] = _s4L2t::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c4Oe8::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c4Oe8::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c4O82() //  [R1]
         { []
         }
     {offset
       c4O82: // global
           I64[Sp] = R1;
           call _c4O83() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4O82_info" {
     block_c4O82_info:
         const _c4O82;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:40.044159681 UTC

[section ""data" . GHC.IO.IOMode.$fEnumIOMode_go3_closure" {
     GHC.IO.IOMode.$fEnumIOMode_go3_closure:
         const GHC.IO.IOMode.$fEnumIOMode_go3_info;
         const 0;
 },
 sat_s4L3B_entry() //  [R1]
         { []
         }
     {offset
       c4OiM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4OiN; else goto c4OiO;
       c4OiN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4OiO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4L3z::I64 = I64[R1 + 16];
           if (_s4L3z::I64 != 0) goto c4OiK; else goto c4OiL;
       c4OiK: // global
           R2 = _s4L3z::I64 + 1;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$fEnumIOMode_go3_entry(R2) args: 24, res: 0, upd: 24;
       c4OiL: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L3B_info" {
     sat_s4L3B_info:
         const sat_s4L3B_entry;
         const 4294967296;
         const 4294967313;
         const S4L8g_srt+272;
 },
 sat_s4L3y_entry() //  [R1]
         { []
         }
     {offset
       c4Oj0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Oj1; else goto c4Oj9;
       c4Oj1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Oj9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4L3v::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s4L3v::I64, 0)) goto c4Oj7; else goto c4OiZ;
       c4OiZ: // global
           if (%MO_S_Gt_W64(_s4L3v::I64, 3)) goto c4Oj7; else goto c4Oj8;
       c4Oj7: // global
           R2 = _s4L3v::I64;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c4Oj8: // global
           R1 = I64[(_s4L3v::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L3y_info" {
     sat_s4L3y_info:
         const sat_s4L3y_entry;
         const 4294967296;
         const 4294967313;
         const S4L8g_srt+208;
 },
 GHC.IO.IOMode.$fEnumIOMode_go3_entry() //  [R2]
         { []
         }
     {offset
       c4Ojb: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c4Ojf; else goto c4Oje;
       c4Ojf: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.IO.IOMode.$fEnumIOMode_go3_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4Oje: // global
           I64[Hp - 64] = sat_s4L3B_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s4L3y_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fEnumIOMode_go3_info" {
     GHC.IO.IOMode.$fEnumIOMode_go3_info:
         const GHC.IO.IOMode.$fEnumIOMode_go3_entry;
         const 0;
         const 1103806595086;
         const 4294967300;
         const S4L8g_srt+208;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:40.059257533 UTC

[section ""data" . GHC.IO.IOMode.$fEnumIOMode_go2_closure" {
     GHC.IO.IOMode.$fEnumIOMode_go2_closure:
         const GHC.IO.IOMode.$fEnumIOMode_go2_info;
         const 0;
 },
 sat_s4L3I_entry() //  [R1]
         { []
         }
     {offset
       c4OjK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4OjL; else goto c4OjM;
       c4OjL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4OjM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4L3G::I64 = I64[R1 + 16];
           if (_s4L3G::I64 != 1) goto c4OjI; else goto c4OjJ;
       c4OjI: // global
           R2 = _s4L3G::I64 + 1;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$fEnumIOMode_go2_entry(R2) args: 24, res: 0, upd: 24;
       c4OjJ: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L3I_info" {
     sat_s4L3I_info:
         const sat_s4L3I_entry;
         const 4294967296;
         const 4294967313;
         const S4L8g_srt+280;
 },
 sat_s4L3F_entry() //  [R1]
         { []
         }
     {offset
       c4OjY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4OjZ; else goto c4Ok7;
       c4OjZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Ok7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4L3C::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s4L3C::I64, 0)) goto c4Ok5; else goto c4OjX;
       c4OjX: // global
           if (%MO_S_Gt_W64(_s4L3C::I64, 3)) goto c4Ok5; else goto c4Ok6;
       c4Ok5: // global
           R2 = _s4L3C::I64;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c4Ok6: // global
           R1 = I64[(_s4L3C::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L3F_info" {
     sat_s4L3F_info:
         const sat_s4L3F_entry;
         const 4294967296;
         const 4294967313;
         const S4L8g_srt+208;
 },
 GHC.IO.IOMode.$fEnumIOMode_go2_entry() //  [R2]
         { []
         }
     {offset
       c4Ok9: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c4Okd; else goto c4Okc;
       c4Okd: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.IO.IOMode.$fEnumIOMode_go2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4Okc: // global
           I64[Hp - 64] = sat_s4L3I_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s4L3F_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fEnumIOMode_go2_info" {
     GHC.IO.IOMode.$fEnumIOMode_go2_info:
         const GHC.IO.IOMode.$fEnumIOMode_go2_entry;
         const 0;
         const 2203318222862;
         const 4294967300;
         const S4L8g_srt+208;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:40.07203109 UTC

[section ""data" . GHC.IO.IOMode.$fEnumIOMode_go1_closure" {
     GHC.IO.IOMode.$fEnumIOMode_go1_closure:
         const GHC.IO.IOMode.$fEnumIOMode_go1_info;
         const 0;
 },
 sat_s4L3P_entry() //  [R1]
         { []
         }
     {offset
       c4OkI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4OkJ; else goto c4OkK;
       c4OkJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4OkK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4L3N::I64 = I64[R1 + 16];
           if (_s4L3N::I64 != 2) goto c4OkG; else goto c4OkH;
       c4OkG: // global
           R2 = _s4L3N::I64 + 1;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$fEnumIOMode_go1_entry(R2) args: 24, res: 0, upd: 24;
       c4OkH: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L3P_info" {
     sat_s4L3P_info:
         const sat_s4L3P_entry;
         const 4294967296;
         const 4294967313;
         const S4L8g_srt+288;
 },
 sat_s4L3M_entry() //  [R1]
         { []
         }
     {offset
       c4OkW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4OkX; else goto c4Ol5;
       c4OkX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Ol5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4L3J::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s4L3J::I64, 0)) goto c4Ol3; else goto c4OkV;
       c4OkV: // global
           if (%MO_S_Gt_W64(_s4L3J::I64, 3)) goto c4Ol3; else goto c4Ol4;
       c4Ol3: // global
           R2 = _s4L3J::I64;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c4Ol4: // global
           R1 = I64[(_s4L3J::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L3M_info" {
     sat_s4L3M_info:
         const sat_s4L3M_entry;
         const 4294967296;
         const 4294967313;
         const S4L8g_srt+208;
 },
 GHC.IO.IOMode.$fEnumIOMode_go1_entry() //  [R2]
         { []
         }
     {offset
       c4Ol7: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c4Olb; else goto c4Ola;
       c4Olb: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.IO.IOMode.$fEnumIOMode_go1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4Ola: // global
           I64[Hp - 64] = sat_s4L3P_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s4L3M_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fEnumIOMode_go1_info" {
     GHC.IO.IOMode.$fEnumIOMode_go1_info:
         const GHC.IO.IOMode.$fEnumIOMode_go1_entry;
         const 0;
         const 4402341478414;
         const 4294967300;
         const S4L8g_srt+208;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:40.086875607 UTC

[section ""data" . GHC.IO.IOMode.$fEnumIOMode_go_closure" {
     GHC.IO.IOMode.$fEnumIOMode_go_closure:
         const GHC.IO.IOMode.$fEnumIOMode_go_info;
         const 0;
 },
 sat_s4L3W_entry() //  [R1]
         { []
         }
     {offset
       c4OlG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4OlH; else goto c4OlI;
       c4OlH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4OlI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4L3U::I64 = I64[R1 + 16];
           if (_s4L3U::I64 != 3) goto c4OlE; else goto c4OlF;
       c4OlE: // global
           R2 = _s4L3U::I64 + 1;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$fEnumIOMode_go_entry(R2) args: 24, res: 0, upd: 24;
       c4OlF: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L3W_info" {
     sat_s4L3W_info:
         const sat_s4L3W_entry;
         const 4294967296;
         const 4294967313;
         const S4L8g_srt+296;
 },
 sat_s4L3T_entry() //  [R1]
         { []
         }
     {offset
       c4OlU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4OlV; else goto c4Om3;
       c4OlV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Om3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4L3Q::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s4L3Q::I64, 0)) goto c4Om1; else goto c4OlT;
       c4OlT: // global
           if (%MO_S_Gt_W64(_s4L3Q::I64, 3)) goto c4Om1; else goto c4Om2;
       c4Om1: // global
           R2 = _s4L3Q::I64;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c4Om2: // global
           R1 = I64[(_s4L3Q::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L3T_info" {
     sat_s4L3T_info:
         const sat_s4L3T_entry;
         const 4294967296;
         const 4294967313;
         const S4L8g_srt+208;
 },
 GHC.IO.IOMode.$fEnumIOMode_go_entry() //  [R2]
         { []
         }
     {offset
       c4Om5: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c4Om9; else goto c4Om8;
       c4Om9: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.IO.IOMode.$fEnumIOMode_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4Om8: // global
           I64[Hp - 64] = sat_s4L3W_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s4L3T_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fEnumIOMode_go_info" {
     GHC.IO.IOMode.$fEnumIOMode_go_info:
         const GHC.IO.IOMode.$fEnumIOMode_go_entry;
         const 0;
         const 8800387989518;
         const 4294967300;
         const S4L8g_srt+208;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:40.104301767 UTC

[section ""data" . GHC.IO.IOMode.$fEnumIOMode_$cenumFromTo_closure" {
     GHC.IO.IOMode.$fEnumIOMode_$cenumFromTo_closure:
         const GHC.IO.IOMode.$fEnumIOMode_$cenumFromTo_info;
         const 0;
 },
 GHC.IO.IOMode.$fEnumIOMode_$cenumFromTo_entry() //  [R2, R3]
         { []
         }
     {offset
       c4OmH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4OmI; else goto c4OmJ;
       c4OmI: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.IOMode.$fEnumIOMode_$cenumFromTo_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4OmJ: // global
           I64[Sp - 16] = block_c4Omy_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4OnK; else goto c4Omz;
       u4OnK: // global
           call _c4Omy(R1) args: 0, res: 0, upd: 0;
       c4Omz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fEnumIOMode_$cenumFromTo_info" {
     GHC.IO.IOMode.$fEnumIOMode_$cenumFromTo_info:
         const GHC.IO.IOMode.$fEnumIOMode_$cenumFromTo_entry;
         const 0;
         const 133143986190;
         const 8589934607;
         const S4L8g_srt+272;
 },
 _c4Omy() //  [R1]
         { []
         }
     {offset
       c4Omy: // global
           _s4L3Y::P64 = P64[Sp + 8];
           _c4OmG::P64 = R1 & 7;
           if (_c4OmG::P64 < 3) goto u4OnF; else goto u4OnG;
       u4OnF: // global
           if (_c4OmG::P64 < 2) goto c4OmC; else goto c4OmD;
       c4OmC: // global
           _s4L40::I64 = 0;
           goto s4L3Z;
       c4OmD: // global
           _s4L40::I64 = 1;
           goto s4L3Z;
       u4OnG: // global
           if (_c4OmG::P64 < 4) goto c4OmE; else goto c4OmF;
       c4OmE: // global
           _s4L40::I64 = 2;
           goto s4L3Z;
       c4OmF: // global
           _s4L40::I64 = 3;
           goto s4L3Z;
       s4L3Z: // global
           I64[Sp] = block_c4OmN_info;
           R1 = _s4L3Y::P64;
           I64[Sp + 8] = _s4L40::I64;
           if (R1 & 7 != 0) goto u4OnJ; else goto c4OmP;
       u4OnJ: // global
           call _c4OmN(R1) args: 0, res: 0, upd: 0;
       c4OmP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Omy_info" {
     block_c4Omy_info:
         const _c4Omy;
         const 1;
         const 64424509470;
         const S4L8g_srt+272;
 },
 _c4OmN() //  [R1]
         { []
         }
     {offset
       c4OmN: // global
           _s4L40::I64 = I64[Sp + 8];
           _c4OnE::P64 = R1 & 7;
           if (_c4OnE::P64 < 3) goto u4OnH; else goto u4OnI;
       u4OnH: // global
           if (_c4OnE::P64 < 2) goto c4On0; else goto c4On9;
       c4On0: // global
           if (%MO_S_Gt_W64(_s4L40::I64, 0)) goto c4Onq; else goto c4OmX;
       c4OmX: // global
           R2 = _s4L40::I64;
           Sp = Sp + 16;
           call GHC.IO.IOMode.$fEnumIOMode_go3_entry(R2) args: 8, res: 0, upd: 8;
       c4On9: // global
           if (%MO_S_Gt_W64(_s4L40::I64, 1)) goto c4Onq; else goto c4On7;
       c4On7: // global
           R2 = _s4L40::I64;
           Sp = Sp + 16;
           call GHC.IO.IOMode.$fEnumIOMode_go2_entry(R2) args: 8, res: 0, upd: 8;
       u4OnI: // global
           if (_c4OnE::P64 < 4) goto c4Oni; else goto c4Onr;
       c4Oni: // global
           if (%MO_S_Gt_W64(_s4L40::I64, 2)) goto c4Onq; else goto c4Ong;
       c4Ong: // global
           R2 = _s4L40::I64;
           Sp = Sp + 16;
           call GHC.IO.IOMode.$fEnumIOMode_go1_entry(R2) args: 8, res: 0, upd: 8;
       c4Onr: // global
           if (%MO_S_Gt_W64(_s4L40::I64, 3)) goto c4Onq; else goto c4Onp;
       c4Onq: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4Onp: // global
           R2 = _s4L40::I64;
           Sp = Sp + 16;
           call GHC.IO.IOMode.$fEnumIOMode_go_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4OmN_info" {
     block_c4OmN_info:
         const _c4OmN;
         const 65;
         const 64424509470;
         const S4L8g_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:40.164168131 UTC

[section ""data" . GHC.IO.IOMode.$fEnumIOMode_$cenumFromThenTo_closure" {
     GHC.IO.IOMode.$fEnumIOMode_$cenumFromThenTo_closure:
         const GHC.IO.IOMode.$fEnumIOMode_$cenumFromThenTo_info;
         const 0;
 },
 sat_s4L4t_entry() //  [R1]
         { []
         }
     {offset
       c4OoO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4OoP; else goto c4OoQ;
       c4OoP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4OoQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s4L4m_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L4t_info" {
     sat_s4L4t_info:
         const sat_s4L4t_entry;
         const 8589934593;
         const 4294967311;
         const S4L8g_srt+208;
 },
 sat_s4L4r_entry() //  [R1]
         { []
         }
     {offset
       c4Op0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Op1; else goto c4Op9;
       c4Op1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Op9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4L4n::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s4L4n::I64, 0)) goto c4Op7; else goto c4OoZ;
       c4OoZ: // global
           if (%MO_S_Gt_W64(_s4L4n::I64, 3)) goto c4Op7; else goto c4Op8;
       c4Op7: // global
           R2 = _s4L4n::I64;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c4Op8: // global
           R1 = I64[(_s4L4n::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L4r_info" {
     sat_s4L4r_info:
         const sat_s4L4r_entry;
         const 4294967296;
         const 4294967313;
         const S4L8g_srt+208;
 },
 sat_s4L4w_entry() //  [R1]
         { []
         }
     {offset
       c4Opk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Opl; else goto c4Opt;
       c4Opl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Opt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4L4n::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s4L4n::I64, 0)) goto c4Opr; else goto c4Opj;
       c4Opj: // global
           if (%MO_S_Gt_W64(_s4L4n::I64, 3)) goto c4Opr; else goto c4Ops;
       c4Opr: // global
           R2 = _s4L4n::I64;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c4Ops: // global
           R1 = I64[(_s4L4n::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L4w_info" {
     sat_s4L4w_info:
         const sat_s4L4w_entry;
         const 4294967296;
         const 4294967313;
         const S4L8g_srt+208;
 },
 go_dn_s4L4m_entry() //  [R1, R2]
         { []
         }
     {offset
       c4Opx: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c4OpB; else goto c4OpA;
       c4OpB: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4OpA: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c4Opv; else goto c4Opw;
       c4Opv: // global
           _s4L4k::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s4L4t_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s4L4k::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s4L4r_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4Opw: // global
           I64[Hp - 80] = sat_s4L4w_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c4OpD::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c4OpD::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_s4L4m_info" {
     go_dn_s4L4m_info:
         const go_dn_s4L4m_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const S4L8g_srt+208;
 },
 sat_s4L4x_entry() //  [R1]
         { []
         }
     {offset
       c4OpE: // global
           _s4L4x::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c4OpF; else goto c4OpG;
       c4OpG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c4OpI; else goto c4OpH;
       c4OpI: // global
           HpAlloc = 24;
           goto c4OpF;
       c4OpF: // global
           R1 = _s4L4x::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4OpH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s4L4x::P64;
           _s4L4d::I64 = I64[_s4L4x::P64 + 24];
           _s4L4k::I64 = _s4L4d::I64 - I64[_s4L4x::P64 + 16];
           I64[Hp - 16] = go_dn_s4L4m_info;
           I64[Hp - 8] = _s4L4k::I64;
           I64[Hp] = 0 - _s4L4k::I64;
           R2 = _s4L4d::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s4L4m_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L4x_info" {
     sat_s4L4x_info:
         const sat_s4L4x_entry;
         const 8589934592;
         const 4294967316;
         const S4L8g_srt+208;
 },
 sat_s4L4j_entry() //  [R1]
         { []
         }
     {offset
       c4OpS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4OpT; else goto c4Oq1;
       c4OpT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Oq1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4L4b::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s4L4b::I64, 0)) goto c4OpZ; else goto c4OpR;
       c4OpR: // global
           if (%MO_S_Gt_W64(_s4L4b::I64, 3)) goto c4OpZ; else goto c4Oq0;
       c4OpZ: // global
           R2 = _s4L4b::I64;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c4Oq0: // global
           R1 = I64[(_s4L4b::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L4j_info" {
     sat_s4L4j_info:
         const sat_s4L4j_entry;
         const 4294967296;
         const 4294967313;
         const S4L8g_srt+208;
 },
 sat_s4L4B_entry() //  [R1]
         { []
         }
     {offset
       c4Oqf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Oqg; else goto c4Oqo;
       c4Oqg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Oqo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4L4b::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s4L4b::I64, 0)) goto c4Oqm; else goto c4Oqe;
       c4Oqe: // global
           if (%MO_S_Gt_W64(_s4L4b::I64, 3)) goto c4Oqm; else goto c4Oqn;
       c4Oqm: // global
           R2 = _s4L4b::I64;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c4Oqn: // global
           R1 = I64[(_s4L4b::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L4B_info" {
     sat_s4L4B_info:
         const sat_s4L4B_entry;
         const 4294967296;
         const 4294967313;
         const S4L8g_srt+208;
 },
 sat_s4L4P_entry() //  [R1]
         { []
         }
     {offset
       c4OqR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4OqS; else goto c4OqT;
       c4OqS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4OqT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s4L4I_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L4P_info" {
     sat_s4L4P_info:
         const sat_s4L4P_entry;
         const 8589934593;
         const 4294967311;
         const S4L8g_srt+208;
 },
 sat_s4L4N_entry() //  [R1]
         { []
         }
     {offset
       c4Or3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Or4; else goto c4Orc;
       c4Or4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Orc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4L4J::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s4L4J::I64, 0)) goto c4Ora; else goto c4Or2;
       c4Or2: // global
           if (%MO_S_Gt_W64(_s4L4J::I64, 3)) goto c4Ora; else goto c4Orb;
       c4Ora: // global
           R2 = _s4L4J::I64;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c4Orb: // global
           R1 = I64[(_s4L4J::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L4N_info" {
     sat_s4L4N_info:
         const sat_s4L4N_entry;
         const 4294967296;
         const 4294967313;
         const S4L8g_srt+208;
 },
 sat_s4L4S_entry() //  [R1]
         { []
         }
     {offset
       c4Orn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Oro; else goto c4Orw;
       c4Oro: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Orw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4L4J::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s4L4J::I64, 0)) goto c4Oru; else goto c4Orm;
       c4Orm: // global
           if (%MO_S_Gt_W64(_s4L4J::I64, 3)) goto c4Oru; else goto c4Orv;
       c4Oru: // global
           R2 = _s4L4J::I64;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c4Orv: // global
           R1 = I64[(_s4L4J::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L4S_info" {
     sat_s4L4S_info:
         const sat_s4L4S_entry;
         const 4294967296;
         const 4294967313;
         const S4L8g_srt+208;
 },
 go_up_s4L4I_entry() //  [R1, R2]
         { []
         }
     {offset
       c4OrA: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c4OrE; else goto c4OrD;
       c4OrE: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4OrD: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c4Ory; else goto c4Orz;
       c4Ory: // global
           _s4L4G::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s4L4P_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s4L4G::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s4L4N_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4Orz: // global
           I64[Hp - 80] = sat_s4L4S_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c4OrG::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c4OrG::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_s4L4I_info" {
     go_up_s4L4I_info:
         const go_up_s4L4I_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const S4L8g_srt+208;
 },
 sat_s4L4T_entry() //  [R1]
         { []
         }
     {offset
       c4OrH: // global
           _s4L4T::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c4OrI; else goto c4OrJ;
       c4OrJ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c4OrL; else goto c4OrK;
       c4OrL: // global
           HpAlloc = 24;
           goto c4OrI;
       c4OrI: // global
           R1 = _s4L4T::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4OrK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s4L4T::P64;
           _s4L4d::I64 = I64[_s4L4T::P64 + 24];
           _s4L4G::I64 = _s4L4d::I64 - I64[_s4L4T::P64 + 16];
           I64[Hp - 16] = go_up_s4L4I_info;
           I64[Hp - 8] = _s4L4G::I64;
           I64[Hp] = 0 - _s4L4G::I64;
           R2 = _s4L4d::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s4L4I_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L4T_info" {
     sat_s4L4T_info:
         const sat_s4L4T_entry;
         const 8589934592;
         const 4294967316;
         const S4L8g_srt+208;
 },
 sat_s4L4F_entry() //  [R1]
         { []
         }
     {offset
       c4OrV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4OrW; else goto c4Os4;
       c4OrW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Os4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4L4b::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s4L4b::I64, 0)) goto c4Os2; else goto c4OrU;
       c4OrU: // global
           if (%MO_S_Gt_W64(_s4L4b::I64, 3)) goto c4Os2; else goto c4Os3;
       c4Os2: // global
           R2 = _s4L4b::I64;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c4Os3: // global
           R1 = I64[(_s4L4b::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L4F_info" {
     sat_s4L4F_info:
         const sat_s4L4F_entry;
         const 4294967296;
         const 4294967313;
         const S4L8g_srt+208;
 },
 sat_s4L4X_entry() //  [R1]
         { []
         }
     {offset
       c4Osi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Osj; else goto c4Osr;
       c4Osj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Osr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4L4b::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s4L4b::I64, 0)) goto c4Osp; else goto c4Osh;
       c4Osh: // global
           if (%MO_S_Gt_W64(_s4L4b::I64, 3)) goto c4Osp; else goto c4Osq;
       c4Osp: // global
           R2 = _s4L4b::I64;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c4Osq: // global
           R1 = I64[(_s4L4b::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L4X_info" {
     sat_s4L4X_info:
         const sat_s4L4X_entry;
         const 4294967296;
         const 4294967313;
         const S4L8g_srt+208;
 },
 sat_s4L5c_entry() //  [R1]
         { []
         }
     {offset
       c4OsY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4OsZ; else goto c4Ot0;
       c4OsZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Ot0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s4L55_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L5c_info" {
     sat_s4L5c_info:
         const sat_s4L5c_entry;
         const 8589934593;
         const 4294967311;
         const S4L8g_srt+208;
 },
 sat_s4L5a_entry() //  [R1]
         { []
         }
     {offset
       c4Ota: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Otb; else goto c4Otj;
       c4Otb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Otj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4L56::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s4L56::I64, 0)) goto c4Oth; else goto c4Ot9;
       c4Ot9: // global
           if (%MO_S_Gt_W64(_s4L56::I64, 3)) goto c4Oth; else goto c4Oti;
       c4Oth: // global
           R2 = _s4L56::I64;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c4Oti: // global
           R1 = I64[(_s4L56::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L5a_info" {
     sat_s4L5a_info:
         const sat_s4L5a_entry;
         const 4294967296;
         const 4294967313;
         const S4L8g_srt+208;
 },
 sat_s4L5f_entry() //  [R1]
         { []
         }
     {offset
       c4Otu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Otv; else goto c4OtD;
       c4Otv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4OtD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4L56::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s4L56::I64, 0)) goto c4OtB; else goto c4Ott;
       c4Ott: // global
           if (%MO_S_Gt_W64(_s4L56::I64, 3)) goto c4OtB; else goto c4OtC;
       c4OtB: // global
           R2 = _s4L56::I64;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c4OtC: // global
           R1 = I64[(_s4L56::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L5f_info" {
     sat_s4L5f_info:
         const sat_s4L5f_entry;
         const 4294967296;
         const 4294967313;
         const S4L8g_srt+208;
 },
 go_dn_s4L55_entry() //  [R1, R2]
         { []
         }
     {offset
       c4OtH: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c4OtL; else goto c4OtK;
       c4OtL: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4OtK: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c4OtF; else goto c4OtG;
       c4OtF: // global
           _s4L53::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s4L5c_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s4L53::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s4L5a_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4OtG: // global
           I64[Hp - 80] = sat_s4L5f_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c4OtN::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c4OtN::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_s4L55_info" {
     go_dn_s4L55_info:
         const go_dn_s4L55_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const S4L8g_srt+208;
 },
 sat_s4L5g_entry() //  [R1]
         { []
         }
     {offset
       c4OtO: // global
           _s4L5g::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c4OtP; else goto c4OtQ;
       c4OtQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c4OtS; else goto c4OtR;
       c4OtS: // global
           HpAlloc = 24;
           goto c4OtP;
       c4OtP: // global
           R1 = _s4L5g::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4OtR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s4L5g::P64;
           _s4L4d::I64 = I64[_s4L5g::P64 + 24];
           _s4L53::I64 = _s4L4d::I64 - I64[_s4L5g::P64 + 16];
           I64[Hp - 16] = go_dn_s4L55_info;
           I64[Hp - 8] = _s4L53::I64;
           I64[Hp] = 1 - _s4L53::I64;
           R2 = _s4L4d::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s4L55_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L5g_info" {
     sat_s4L5g_info:
         const sat_s4L5g_entry;
         const 8589934592;
         const 4294967316;
         const S4L8g_srt+208;
 },
 sat_s4L52_entry() //  [R1]
         { []
         }
     {offset
       c4Ou2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Ou3; else goto c4Oub;
       c4Ou3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Oub: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4L4b::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s4L4b::I64, 0)) goto c4Ou9; else goto c4Ou1;
       c4Ou1: // global
           if (%MO_S_Gt_W64(_s4L4b::I64, 3)) goto c4Ou9; else goto c4Oua;
       c4Ou9: // global
           R2 = _s4L4b::I64;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c4Oua: // global
           R1 = I64[(_s4L4b::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L52_info" {
     sat_s4L52_info:
         const sat_s4L52_entry;
         const 4294967296;
         const 4294967313;
         const S4L8g_srt+208;
 },
 sat_s4L5k_entry() //  [R1]
         { []
         }
     {offset
       c4Oup: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Ouq; else goto c4Ouy;
       c4Ouq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Ouy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4L4b::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s4L4b::I64, 0)) goto c4Ouw; else goto c4Ouo;
       c4Ouo: // global
           if (%MO_S_Gt_W64(_s4L4b::I64, 3)) goto c4Ouw; else goto c4Oux;
       c4Ouw: // global
           R2 = _s4L4b::I64;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c4Oux: // global
           R1 = I64[(_s4L4b::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L5k_info" {
     sat_s4L5k_info:
         const sat_s4L5k_entry;
         const 4294967296;
         const 4294967313;
         const S4L8g_srt+208;
 },
 sat_s4L5y_entry() //  [R1]
         { []
         }
     {offset
       c4Ov1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Ov2; else goto c4Ov3;
       c4Ov2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Ov3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s4L5r_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L5y_info" {
     sat_s4L5y_info:
         const sat_s4L5y_entry;
         const 8589934593;
         const 4294967311;
         const S4L8g_srt+208;
 },
 sat_s4L5w_entry() //  [R1]
         { []
         }
     {offset
       c4Ovd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Ove; else goto c4Ovm;
       c4Ove: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Ovm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4L5s::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s4L5s::I64, 0)) goto c4Ovk; else goto c4Ovc;
       c4Ovc: // global
           if (%MO_S_Gt_W64(_s4L5s::I64, 3)) goto c4Ovk; else goto c4Ovl;
       c4Ovk: // global
           R2 = _s4L5s::I64;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c4Ovl: // global
           R1 = I64[(_s4L5s::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L5w_info" {
     sat_s4L5w_info:
         const sat_s4L5w_entry;
         const 4294967296;
         const 4294967313;
         const S4L8g_srt+208;
 },
 sat_s4L5B_entry() //  [R1]
         { []
         }
     {offset
       c4Ovx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Ovy; else goto c4OvG;
       c4Ovy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4OvG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4L5s::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s4L5s::I64, 0)) goto c4OvE; else goto c4Ovw;
       c4Ovw: // global
           if (%MO_S_Gt_W64(_s4L5s::I64, 3)) goto c4OvE; else goto c4OvF;
       c4OvE: // global
           R2 = _s4L5s::I64;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c4OvF: // global
           R1 = I64[(_s4L5s::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L5B_info" {
     sat_s4L5B_info:
         const sat_s4L5B_entry;
         const 4294967296;
         const 4294967313;
         const S4L8g_srt+208;
 },
 go_up_s4L5r_entry() //  [R1, R2]
         { []
         }
     {offset
       c4OvK: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c4OvO; else goto c4OvN;
       c4OvO: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4OvN: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c4OvI; else goto c4OvJ;
       c4OvI: // global
           _s4L5p::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s4L5y_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s4L5p::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s4L5w_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4OvJ: // global
           I64[Hp - 80] = sat_s4L5B_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c4OvQ::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c4OvQ::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_s4L5r_info" {
     go_up_s4L5r_info:
         const go_up_s4L5r_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const S4L8g_srt+208;
 },
 sat_s4L5C_entry() //  [R1]
         { []
         }
     {offset
       c4OvR: // global
           _s4L5C::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c4OvS; else goto c4OvT;
       c4OvT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c4OvV; else goto c4OvU;
       c4OvV: // global
           HpAlloc = 24;
           goto c4OvS;
       c4OvS: // global
           R1 = _s4L5C::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4OvU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s4L5C::P64;
           _s4L4d::I64 = I64[_s4L5C::P64 + 24];
           _s4L5p::I64 = _s4L4d::I64 - I64[_s4L5C::P64 + 16];
           I64[Hp - 16] = go_up_s4L5r_info;
           I64[Hp - 8] = _s4L5p::I64;
           I64[Hp] = 1 - _s4L5p::I64;
           R2 = _s4L4d::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s4L5r_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L5C_info" {
     sat_s4L5C_info:
         const sat_s4L5C_entry;
         const 8589934592;
         const 4294967316;
         const S4L8g_srt+208;
 },
 sat_s4L5o_entry() //  [R1]
         { []
         }
     {offset
       c4Ow5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Ow6; else goto c4Owe;
       c4Ow6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Owe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4L4b::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s4L4b::I64, 0)) goto c4Owc; else goto c4Ow4;
       c4Ow4: // global
           if (%MO_S_Gt_W64(_s4L4b::I64, 3)) goto c4Owc; else goto c4Owd;
       c4Owc: // global
           R2 = _s4L4b::I64;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c4Owd: // global
           R1 = I64[(_s4L4b::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L5o_info" {
     sat_s4L5o_info:
         const sat_s4L5o_entry;
         const 4294967296;
         const 4294967313;
         const S4L8g_srt+208;
 },
 sat_s4L5G_entry() //  [R1]
         { []
         }
     {offset
       c4Ows: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Owt; else goto c4OwB;
       c4Owt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4OwB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4L4b::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s4L4b::I64, 0)) goto c4Owz; else goto c4Owr;
       c4Owr: // global
           if (%MO_S_Gt_W64(_s4L4b::I64, 3)) goto c4Owz; else goto c4OwA;
       c4Owz: // global
           R2 = _s4L4b::I64;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c4OwA: // global
           R1 = I64[(_s4L4b::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L5G_info" {
     sat_s4L5G_info:
         const sat_s4L5G_entry;
         const 4294967296;
         const 4294967313;
         const S4L8g_srt+208;
 },
 sat_s4L5V_entry() //  [R1]
         { []
         }
     {offset
       c4Ox8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Ox9; else goto c4Oxa;
       c4Ox9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Oxa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s4L5O_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L5V_info" {
     sat_s4L5V_info:
         const sat_s4L5V_entry;
         const 8589934593;
         const 4294967311;
         const S4L8g_srt+208;
 },
 sat_s4L5T_entry() //  [R1]
         { []
         }
     {offset
       c4Oxk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Oxl; else goto c4Oxt;
       c4Oxl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Oxt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4L5P::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s4L5P::I64, 0)) goto c4Oxr; else goto c4Oxj;
       c4Oxj: // global
           if (%MO_S_Gt_W64(_s4L5P::I64, 3)) goto c4Oxr; else goto c4Oxs;
       c4Oxr: // global
           R2 = _s4L5P::I64;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c4Oxs: // global
           R1 = I64[(_s4L5P::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L5T_info" {
     sat_s4L5T_info:
         const sat_s4L5T_entry;
         const 4294967296;
         const 4294967313;
         const S4L8g_srt+208;
 },
 sat_s4L5Y_entry() //  [R1]
         { []
         }
     {offset
       c4OxE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4OxF; else goto c4OxN;
       c4OxF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4OxN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4L5P::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s4L5P::I64, 0)) goto c4OxL; else goto c4OxD;
       c4OxD: // global
           if (%MO_S_Gt_W64(_s4L5P::I64, 3)) goto c4OxL; else goto c4OxM;
       c4OxL: // global
           R2 = _s4L5P::I64;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c4OxM: // global
           R1 = I64[(_s4L5P::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L5Y_info" {
     sat_s4L5Y_info:
         const sat_s4L5Y_entry;
         const 4294967296;
         const 4294967313;
         const S4L8g_srt+208;
 },
 go_dn_s4L5O_entry() //  [R1, R2]
         { []
         }
     {offset
       c4OxR: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c4OxV; else goto c4OxU;
       c4OxV: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4OxU: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c4OxP; else goto c4OxQ;
       c4OxP: // global
           _s4L5M::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s4L5V_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s4L5M::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s4L5T_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4OxQ: // global
           I64[Hp - 80] = sat_s4L5Y_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c4OxX::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c4OxX::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_s4L5O_info" {
     go_dn_s4L5O_info:
         const go_dn_s4L5O_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const S4L8g_srt+208;
 },
 sat_s4L5Z_entry() //  [R1]
         { []
         }
     {offset
       c4OxY: // global
           _s4L5Z::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c4OxZ; else goto c4Oy0;
       c4Oy0: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c4Oy2; else goto c4Oy1;
       c4Oy2: // global
           HpAlloc = 24;
           goto c4OxZ;
       c4OxZ: // global
           R1 = _s4L5Z::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Oy1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s4L5Z::P64;
           _s4L4d::I64 = I64[_s4L5Z::P64 + 24];
           _s4L5M::I64 = _s4L4d::I64 - I64[_s4L5Z::P64 + 16];
           I64[Hp - 16] = go_dn_s4L5O_info;
           I64[Hp - 8] = _s4L5M::I64;
           I64[Hp] = 2 - _s4L5M::I64;
           R2 = _s4L4d::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s4L5O_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L5Z_info" {
     sat_s4L5Z_info:
         const sat_s4L5Z_entry;
         const 8589934592;
         const 4294967316;
         const S4L8g_srt+208;
 },
 sat_s4L5L_entry() //  [R1]
         { []
         }
     {offset
       c4Oyc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Oyd; else goto c4Oyl;
       c4Oyd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Oyl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4L4b::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s4L4b::I64, 0)) goto c4Oyj; else goto c4Oyb;
       c4Oyb: // global
           if (%MO_S_Gt_W64(_s4L4b::I64, 3)) goto c4Oyj; else goto c4Oyk;
       c4Oyj: // global
           R2 = _s4L4b::I64;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c4Oyk: // global
           R1 = I64[(_s4L4b::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L5L_info" {
     sat_s4L5L_info:
         const sat_s4L5L_entry;
         const 4294967296;
         const 4294967313;
         const S4L8g_srt+208;
 },
 sat_s4L63_entry() //  [R1]
         { []
         }
     {offset
       c4Oyz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4OyA; else goto c4OyI;
       c4OyA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4OyI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4L4b::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s4L4b::I64, 0)) goto c4OyG; else goto c4Oyy;
       c4Oyy: // global
           if (%MO_S_Gt_W64(_s4L4b::I64, 3)) goto c4OyG; else goto c4OyH;
       c4OyG: // global
           R2 = _s4L4b::I64;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c4OyH: // global
           R1 = I64[(_s4L4b::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L63_info" {
     sat_s4L63_info:
         const sat_s4L63_entry;
         const 4294967296;
         const 4294967313;
         const S4L8g_srt+208;
 },
 sat_s4L6h_entry() //  [R1]
         { []
         }
     {offset
       c4Ozb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Ozc; else goto c4Ozd;
       c4Ozc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Ozd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s4L6a_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L6h_info" {
     sat_s4L6h_info:
         const sat_s4L6h_entry;
         const 8589934593;
         const 4294967311;
         const S4L8g_srt+208;
 },
 sat_s4L6f_entry() //  [R1]
         { []
         }
     {offset
       c4Ozn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Ozo; else goto c4Ozw;
       c4Ozo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Ozw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4L6b::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s4L6b::I64, 0)) goto c4Ozu; else goto c4Ozm;
       c4Ozm: // global
           if (%MO_S_Gt_W64(_s4L6b::I64, 3)) goto c4Ozu; else goto c4Ozv;
       c4Ozu: // global
           R2 = _s4L6b::I64;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c4Ozv: // global
           R1 = I64[(_s4L6b::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L6f_info" {
     sat_s4L6f_info:
         const sat_s4L6f_entry;
         const 4294967296;
         const 4294967313;
         const S4L8g_srt+208;
 },
 sat_s4L6k_entry() //  [R1]
         { []
         }
     {offset
       c4OzH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4OzI; else goto c4OzQ;
       c4OzI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4OzQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4L6b::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s4L6b::I64, 0)) goto c4OzO; else goto c4OzG;
       c4OzG: // global
           if (%MO_S_Gt_W64(_s4L6b::I64, 3)) goto c4OzO; else goto c4OzP;
       c4OzO: // global
           R2 = _s4L6b::I64;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c4OzP: // global
           R1 = I64[(_s4L6b::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L6k_info" {
     sat_s4L6k_info:
         const sat_s4L6k_entry;
         const 4294967296;
         const 4294967313;
         const S4L8g_srt+208;
 },
 go_up_s4L6a_entry() //  [R1, R2]
         { []
         }
     {offset
       c4OzU: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c4OzY; else goto c4OzX;
       c4OzY: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4OzX: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c4OzS; else goto c4OzT;
       c4OzS: // global
           _s4L68::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s4L6h_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s4L68::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s4L6f_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4OzT: // global
           I64[Hp - 80] = sat_s4L6k_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c4OA0::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c4OA0::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_s4L6a_info" {
     go_up_s4L6a_info:
         const go_up_s4L6a_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const S4L8g_srt+208;
 },
 sat_s4L6l_entry() //  [R1]
         { []
         }
     {offset
       c4OA1: // global
           _s4L6l::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c4OA2; else goto c4OA3;
       c4OA3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c4OA5; else goto c4OA4;
       c4OA5: // global
           HpAlloc = 24;
           goto c4OA2;
       c4OA2: // global
           R1 = _s4L6l::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4OA4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s4L6l::P64;
           _s4L4d::I64 = I64[_s4L6l::P64 + 24];
           _s4L68::I64 = _s4L4d::I64 - I64[_s4L6l::P64 + 16];
           I64[Hp - 16] = go_up_s4L6a_info;
           I64[Hp - 8] = _s4L68::I64;
           I64[Hp] = 2 - _s4L68::I64;
           R2 = _s4L4d::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s4L6a_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L6l_info" {
     sat_s4L6l_info:
         const sat_s4L6l_entry;
         const 8589934592;
         const 4294967316;
         const S4L8g_srt+208;
 },
 sat_s4L67_entry() //  [R1]
         { []
         }
     {offset
       c4OAf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4OAg; else goto c4OAo;
       c4OAg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4OAo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4L4b::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s4L4b::I64, 0)) goto c4OAm; else goto c4OAe;
       c4OAe: // global
           if (%MO_S_Gt_W64(_s4L4b::I64, 3)) goto c4OAm; else goto c4OAn;
       c4OAm: // global
           R2 = _s4L4b::I64;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c4OAn: // global
           R1 = I64[(_s4L4b::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L67_info" {
     sat_s4L67_info:
         const sat_s4L67_entry;
         const 4294967296;
         const 4294967313;
         const S4L8g_srt+208;
 },
 sat_s4L6p_entry() //  [R1]
         { []
         }
     {offset
       c4OAC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4OAD; else goto c4OAL;
       c4OAD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4OAL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4L4b::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s4L4b::I64, 0)) goto c4OAJ; else goto c4OAB;
       c4OAB: // global
           if (%MO_S_Gt_W64(_s4L4b::I64, 3)) goto c4OAJ; else goto c4OAK;
       c4OAJ: // global
           R2 = _s4L4b::I64;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c4OAK: // global
           R1 = I64[(_s4L4b::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L6p_info" {
     sat_s4L6p_info:
         const sat_s4L6p_entry;
         const 4294967296;
         const 4294967313;
         const S4L8g_srt+208;
 },
 sat_s4L6E_entry() //  [R1]
         { []
         }
     {offset
       c4OBi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4OBj; else goto c4OBk;
       c4OBj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4OBk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s4L6x_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L6E_info" {
     sat_s4L6E_info:
         const sat_s4L6E_entry;
         const 8589934593;
         const 4294967311;
         const S4L8g_srt+208;
 },
 sat_s4L6C_entry() //  [R1]
         { []
         }
     {offset
       c4OBu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4OBv; else goto c4OBD;
       c4OBv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4OBD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4L6y::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s4L6y::I64, 0)) goto c4OBB; else goto c4OBt;
       c4OBt: // global
           if (%MO_S_Gt_W64(_s4L6y::I64, 3)) goto c4OBB; else goto c4OBC;
       c4OBB: // global
           R2 = _s4L6y::I64;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c4OBC: // global
           R1 = I64[(_s4L6y::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L6C_info" {
     sat_s4L6C_info:
         const sat_s4L6C_entry;
         const 4294967296;
         const 4294967313;
         const S4L8g_srt+208;
 },
 sat_s4L6H_entry() //  [R1]
         { []
         }
     {offset
       c4OBO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4OBP; else goto c4OBX;
       c4OBP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4OBX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4L6y::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s4L6y::I64, 0)) goto c4OBV; else goto c4OBN;
       c4OBN: // global
           if (%MO_S_Gt_W64(_s4L6y::I64, 3)) goto c4OBV; else goto c4OBW;
       c4OBV: // global
           R2 = _s4L6y::I64;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c4OBW: // global
           R1 = I64[(_s4L6y::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L6H_info" {
     sat_s4L6H_info:
         const sat_s4L6H_entry;
         const 4294967296;
         const 4294967313;
         const S4L8g_srt+208;
 },
 go_dn_s4L6x_entry() //  [R1, R2]
         { []
         }
     {offset
       c4OC1: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c4OC5; else goto c4OC4;
       c4OC5: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4OC4: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c4OBZ; else goto c4OC0;
       c4OBZ: // global
           _s4L6v::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s4L6E_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s4L6v::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s4L6C_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4OC0: // global
           I64[Hp - 80] = sat_s4L6H_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c4OC7::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c4OC7::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_s4L6x_info" {
     go_dn_s4L6x_info:
         const go_dn_s4L6x_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const S4L8g_srt+208;
 },
 sat_s4L6I_entry() //  [R1]
         { []
         }
     {offset
       c4OC8: // global
           _s4L6I::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c4OC9; else goto c4OCa;
       c4OCa: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c4OCc; else goto c4OCb;
       c4OCc: // global
           HpAlloc = 24;
           goto c4OC9;
       c4OC9: // global
           R1 = _s4L6I::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4OCb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s4L6I::P64;
           _s4L4d::I64 = I64[_s4L6I::P64 + 24];
           _s4L6v::I64 = _s4L4d::I64 - I64[_s4L6I::P64 + 16];
           I64[Hp - 16] = go_dn_s4L6x_info;
           I64[Hp - 8] = _s4L6v::I64;
           I64[Hp] = 3 - _s4L6v::I64;
           R2 = _s4L4d::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s4L6x_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L6I_info" {
     sat_s4L6I_info:
         const sat_s4L6I_entry;
         const 8589934592;
         const 4294967316;
         const S4L8g_srt+208;
 },
 sat_s4L6u_entry() //  [R1]
         { []
         }
     {offset
       c4OCm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4OCn; else goto c4OCv;
       c4OCn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4OCv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4L4b::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s4L4b::I64, 0)) goto c4OCt; else goto c4OCl;
       c4OCl: // global
           if (%MO_S_Gt_W64(_s4L4b::I64, 3)) goto c4OCt; else goto c4OCu;
       c4OCt: // global
           R2 = _s4L4b::I64;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c4OCu: // global
           R1 = I64[(_s4L4b::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L6u_info" {
     sat_s4L6u_info:
         const sat_s4L6u_entry;
         const 4294967296;
         const 4294967313;
         const S4L8g_srt+208;
 },
 sat_s4L6M_entry() //  [R1]
         { []
         }
     {offset
       c4OCJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4OCK; else goto c4OCS;
       c4OCK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4OCS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4L4b::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s4L4b::I64, 0)) goto c4OCQ; else goto c4OCI;
       c4OCI: // global
           if (%MO_S_Gt_W64(_s4L4b::I64, 3)) goto c4OCQ; else goto c4OCR;
       c4OCQ: // global
           R2 = _s4L4b::I64;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c4OCR: // global
           R1 = I64[(_s4L4b::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L6M_info" {
     sat_s4L6M_info:
         const sat_s4L6M_entry;
         const 4294967296;
         const 4294967313;
         const S4L8g_srt+208;
 },
 sat_s4L70_entry() //  [R1]
         { []
         }
     {offset
       c4ODl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4ODm; else goto c4ODn;
       c4ODm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4ODn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s4L6T_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L70_info" {
     sat_s4L70_info:
         const sat_s4L70_entry;
         const 8589934593;
         const 4294967311;
         const S4L8g_srt+208;
 },
 sat_s4L6Y_entry() //  [R1]
         { []
         }
     {offset
       c4ODx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4ODy; else goto c4ODG;
       c4ODy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4ODG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4L6U::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s4L6U::I64, 0)) goto c4ODE; else goto c4ODw;
       c4ODw: // global
           if (%MO_S_Gt_W64(_s4L6U::I64, 3)) goto c4ODE; else goto c4ODF;
       c4ODE: // global
           R2 = _s4L6U::I64;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c4ODF: // global
           R1 = I64[(_s4L6U::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L6Y_info" {
     sat_s4L6Y_info:
         const sat_s4L6Y_entry;
         const 4294967296;
         const 4294967313;
         const S4L8g_srt+208;
 },
 sat_s4L73_entry() //  [R1]
         { []
         }
     {offset
       c4ODR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4ODS; else goto c4OE0;
       c4ODS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4OE0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4L6U::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s4L6U::I64, 0)) goto c4ODY; else goto c4ODQ;
       c4ODQ: // global
           if (%MO_S_Gt_W64(_s4L6U::I64, 3)) goto c4ODY; else goto c4ODZ;
       c4ODY: // global
           R2 = _s4L6U::I64;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c4ODZ: // global
           R1 = I64[(_s4L6U::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L73_info" {
     sat_s4L73_info:
         const sat_s4L73_entry;
         const 4294967296;
         const 4294967313;
         const S4L8g_srt+208;
 },
 go_up_s4L6T_entry() //  [R1, R2]
         { []
         }
     {offset
       c4OE4: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c4OE8; else goto c4OE7;
       c4OE8: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4OE7: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c4OE2; else goto c4OE3;
       c4OE2: // global
           _s4L6R::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s4L70_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s4L6R::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s4L6Y_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4OE3: // global
           I64[Hp - 80] = sat_s4L73_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c4OEa::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c4OEa::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_s4L6T_info" {
     go_up_s4L6T_info:
         const go_up_s4L6T_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const S4L8g_srt+208;
 },
 sat_s4L74_entry() //  [R1]
         { []
         }
     {offset
       c4OEb: // global
           _s4L74::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c4OEc; else goto c4OEd;
       c4OEd: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c4OEf; else goto c4OEe;
       c4OEf: // global
           HpAlloc = 24;
           goto c4OEc;
       c4OEc: // global
           R1 = _s4L74::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4OEe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s4L74::P64;
           _s4L4d::I64 = I64[_s4L74::P64 + 24];
           _s4L6R::I64 = _s4L4d::I64 - I64[_s4L74::P64 + 16];
           I64[Hp - 16] = go_up_s4L6T_info;
           I64[Hp - 8] = _s4L6R::I64;
           I64[Hp] = 3 - _s4L6R::I64;
           R2 = _s4L4d::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s4L6T_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L74_info" {
     sat_s4L74_info:
         const sat_s4L74_entry;
         const 8589934592;
         const 4294967316;
         const S4L8g_srt+208;
 },
 sat_s4L6Q_entry() //  [R1]
         { []
         }
     {offset
       c4OEp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4OEq; else goto c4OEy;
       c4OEq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4OEy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4L4b::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s4L4b::I64, 0)) goto c4OEw; else goto c4OEo;
       c4OEo: // global
           if (%MO_S_Gt_W64(_s4L4b::I64, 3)) goto c4OEw; else goto c4OEx;
       c4OEw: // global
           R2 = _s4L4b::I64;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c4OEx: // global
           R1 = I64[(_s4L4b::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L6Q_info" {
     sat_s4L6Q_info:
         const sat_s4L6Q_entry;
         const 4294967296;
         const 4294967313;
         const S4L8g_srt+208;
 },
 sat_s4L78_entry() //  [R1]
         { []
         }
     {offset
       c4OEM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4OEN; else goto c4OEV;
       c4OEN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4OEV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4L4b::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s4L4b::I64, 0)) goto c4OET; else goto c4OEL;
       c4OEL: // global
           if (%MO_S_Gt_W64(_s4L4b::I64, 3)) goto c4OET; else goto c4OEU;
       c4OET: // global
           R2 = _s4L4b::I64;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c4OEU: // global
           R1 = I64[(_s4L4b::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4L78_info" {
     sat_s4L78_info:
         const sat_s4L78_entry;
         const 4294967296;
         const 4294967313;
         const S4L8g_srt+208;
 },
 GHC.IO.IOMode.$fEnumIOMode_$cenumFromThenTo_entry() //  [R2, R3,
                                                          R4]
         { []
         }
     {offset
       c4OF5: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4OF6; else goto c4OF7;
       c4OF6: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.IOMode.$fEnumIOMode_$cenumFromThenTo_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c4OF7: // global
           I64[Sp - 24] = block_c4OEW_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u4OHk; else goto c4OEX;
       u4OHk: // global
           call _c4OEW(R1) args: 0, res: 0, upd: 0;
       c4OEX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fEnumIOMode_$cenumFromThenTo_info" {
     GHC.IO.IOMode.$fEnumIOMode_$cenumFromThenTo_info:
         const GHC.IO.IOMode.$fEnumIOMode_$cenumFromThenTo_entry;
         const 0;
         const 35188667056142;
         const 12884901911;
         const S4L8g_srt+208;
 },
 _c4OEW() //  [R1]
         { []
         }
     {offset
       c4OEW: // global
           _s4L48::P64 = P64[Sp + 8];
           _c4OF4::P64 = R1 & 7;
           if (_c4OF4::P64 < 3) goto u4OHf; else goto u4OHg;
       u4OHf: // global
           if (_c4OF4::P64 < 2) goto c4OF0; else goto c4OF1;
       c4OF0: // global
           _s4L4b::I64 = 0;
           goto s4L4a;
       c4OF1: // global
           _s4L4b::I64 = 1;
           goto s4L4a;
       u4OHg: // global
           if (_c4OF4::P64 < 4) goto c4OF2; else goto c4OF3;
       c4OF2: // global
           _s4L4b::I64 = 2;
           goto s4L4a;
       c4OF3: // global
           _s4L4b::I64 = 3;
           goto s4L4a;
       s4L4a: // global
           I64[Sp] = block_c4OF8_info;
           R1 = _s4L48::P64;
           I64[Sp + 8] = _s4L4b::I64;
           if (R1 & 7 != 0) goto u4OHj; else goto c4OGG;
       u4OHj: // global
           call _c4OF8(R1) args: 0, res: 0, upd: 0;
       c4OGG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4OEW_info" {
     block_c4OEW_info:
         const _c4OEW;
         const 2;
         const 4294967326;
         const S4L8g_srt+208;
 },
 _c4OF8() //  [R1]
         { []
         }
     {offset
       c4OF8: // global
           _s4L49::P64 = P64[Sp + 16];
           _c4OHb::P64 = R1 & 7;
           if (_c4OHb::P64 < 3) goto u4OHh; else goto u4OHi;
       u4OHh: // global
           if (_c4OHb::P64 < 2) goto c4OGM; else goto c4OGQ;
       c4OGM: // global
           _s4L4d::I64 = 0;
           goto s4L4c;
       c4OGQ: // global
           _s4L4d::I64 = 1;
           goto s4L4c;
       u4OHi: // global
           if (_c4OHb::P64 < 4) goto c4OGU; else goto c4OGY;
       c4OGU: // global
           _s4L4d::I64 = 2;
           goto s4L4c;
       c4OGY: // global
           _s4L4d::I64 = 3;
           goto s4L4c;
       s4L4c: // global
           I64[Sp] = block_c4Oof_info;
           R1 = _s4L49::P64;
           I64[Sp + 16] = _s4L4d::I64;
           if (R1 & 7 != 0) goto u4OHl; else goto c4Oog;
       u4OHl: // global
           call _c4Oof(R1) args: 0, res: 0, upd: 0;
       c4Oog: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4OF8_info" {
     block_c4OF8_info:
         const _c4OF8;
         const 66;
         const 4294967326;
         const S4L8g_srt+208;
 },
 _c4Oof() //  [R1]
         { []
         }
     {offset
       c4Oof: // global
           _s4L4b::I64 = I64[Sp + 8];
           _s4L4d::I64 = I64[Sp + 16];
           _c4OHc::P64 = R1 & 7;
           if (_c4OHc::P64 < 3) goto u4OHd; else goto u4OHe;
       u4OHd: // global
           if (_c4OHc::P64 < 2) goto c4OFc; else goto c4OFz;
       c4OFc: // global
           Hp = Hp + 80;
           _s4L4e::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c4OGm; else goto c4OFe;
       c4OFe: // global
           if (%MO_S_Lt_W64(_s4L4d::I64,
                            _s4L4b::I64)) goto c4OFp; else goto c4OFy;
       c4OFp: // global
           if (%MO_S_Le_W64(0, _s4L4d::I64)) goto c4OFi; else goto c4OFn;
       c4OFi: // global
           I64[Hp - 72] = sat_s4L4x_info;
           I64[Hp - 56] = _s4L4b::I64;
           I64[Hp - 48] = _s4L4d::I64;
           I64[Hp - 40] = sat_s4L4j_info;
           I64[Hp - 24] = _s4L4b::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4OFn: // global
           if (%MO_S_Gt_W64(0, _s4L4b::I64)) goto c4OGD; else goto c4OFl;
       c4OFl: // global
           I64[Hp - 72] = sat_s4L4B_info;
           I64[Hp - 56] = _s4L4b::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c4OFj::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c4OFj::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4OFy: // global
           if (%MO_S_Ge_W64(0, _s4L4d::I64)) goto c4OFs; else goto c4OFx;
       c4OFs: // global
           I64[Hp - 72] = sat_s4L4T_info;
           I64[Hp - 56] = _s4L4b::I64;
           I64[Hp - 48] = _s4L4d::I64;
           I64[Hp - 40] = sat_s4L4F_info;
           I64[Hp - 24] = _s4L4b::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4OFx: // global
           if (%MO_S_Lt_W64(0, _s4L4b::I64)) goto c4OGD; else goto c4OFv;
       c4OFv: // global
           I64[Hp - 72] = sat_s4L4X_info;
           I64[Hp - 56] = _s4L4b::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c4OFt::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c4OFt::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4OFz: // global
           Hp = Hp + 80;
           _s4L4e::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c4OGm; else goto c4OFB;
       c4OFB: // global
           if (%MO_S_Lt_W64(_s4L4d::I64,
                            _s4L4b::I64)) goto c4OFM; else goto c4OFV;
       c4OFM: // global
           if (%MO_S_Le_W64(1, _s4L4d::I64)) goto c4OFF; else goto c4OFK;
       c4OFF: // global
           I64[Hp - 72] = sat_s4L5g_info;
           I64[Hp - 56] = _s4L4b::I64;
           I64[Hp - 48] = _s4L4d::I64;
           I64[Hp - 40] = sat_s4L52_info;
           I64[Hp - 24] = _s4L4b::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4OFK: // global
           if (%MO_S_Gt_W64(1, _s4L4b::I64)) goto c4OGD; else goto c4OFI;
       c4OFI: // global
           I64[Hp - 72] = sat_s4L5k_info;
           I64[Hp - 56] = _s4L4b::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c4OFG::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c4OFG::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4OFV: // global
           if (%MO_S_Ge_W64(1, _s4L4d::I64)) goto c4OFP; else goto c4OFU;
       c4OFP: // global
           I64[Hp - 72] = sat_s4L5C_info;
           I64[Hp - 56] = _s4L4b::I64;
           I64[Hp - 48] = _s4L4d::I64;
           I64[Hp - 40] = sat_s4L5o_info;
           I64[Hp - 24] = _s4L4b::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4OFU: // global
           if (%MO_S_Lt_W64(1, _s4L4b::I64)) goto c4OGD; else goto c4OFS;
       c4OFS: // global
           I64[Hp - 72] = sat_s4L5G_info;
           I64[Hp - 56] = _s4L4b::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c4OFQ::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c4OFQ::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u4OHe: // global
           if (_c4OHc::P64 < 4) goto c4OFW; else goto c4OGj;
       c4OFW: // global
           Hp = Hp + 80;
           _s4L4e::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c4OGm; else goto c4OFY;
       c4OFY: // global
           if (%MO_S_Lt_W64(_s4L4d::I64,
                            _s4L4b::I64)) goto c4OG9; else goto c4OGi;
       c4OG9: // global
           if (%MO_S_Le_W64(2, _s4L4d::I64)) goto c4OG2; else goto c4OG7;
       c4OG2: // global
           I64[Hp - 72] = sat_s4L5Z_info;
           I64[Hp - 56] = _s4L4b::I64;
           I64[Hp - 48] = _s4L4d::I64;
           I64[Hp - 40] = sat_s4L5L_info;
           I64[Hp - 24] = _s4L4b::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4OG7: // global
           if (%MO_S_Gt_W64(2, _s4L4b::I64)) goto c4OGD; else goto c4OG5;
       c4OG5: // global
           I64[Hp - 72] = sat_s4L63_info;
           I64[Hp - 56] = _s4L4b::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c4OG3::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c4OG3::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4OGi: // global
           if (%MO_S_Ge_W64(2, _s4L4d::I64)) goto c4OGc; else goto c4OGh;
       c4OGc: // global
           I64[Hp - 72] = sat_s4L6l_info;
           I64[Hp - 56] = _s4L4b::I64;
           I64[Hp - 48] = _s4L4d::I64;
           I64[Hp - 40] = sat_s4L67_info;
           I64[Hp - 24] = _s4L4b::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4OGh: // global
           if (%MO_S_Lt_W64(2, _s4L4b::I64)) goto c4OGD; else goto c4OGf;
       c4OGf: // global
           I64[Hp - 72] = sat_s4L6p_info;
           I64[Hp - 56] = _s4L4b::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c4OGd::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c4OGd::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4OGj: // global
           Hp = Hp + 80;
           _s4L4e::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c4OGm; else goto c4OGl;
       c4OGm: // global
           HpAlloc = 80;
           R1 = _s4L4e::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c4OGl: // global
           if (%MO_S_Lt_W64(_s4L4d::I64,
                            _s4L4b::I64)) goto c4OGw; else goto c4OGF;
       c4OGw: // global
           if (%MO_S_Le_W64(3, _s4L4d::I64)) goto c4OGp; else goto c4OGu;
       c4OGp: // global
           I64[Hp - 72] = sat_s4L6I_info;
           I64[Hp - 56] = _s4L4b::I64;
           I64[Hp - 48] = _s4L4d::I64;
           I64[Hp - 40] = sat_s4L6u_info;
           I64[Hp - 24] = _s4L4b::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4OGu: // global
           if (%MO_S_Gt_W64(3, _s4L4b::I64)) goto c4OGD; else goto c4OGs;
       c4OGs: // global
           I64[Hp - 72] = sat_s4L6M_info;
           I64[Hp - 56] = _s4L4b::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c4OGq::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c4OGq::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4OGF: // global
           if (%MO_S_Ge_W64(3, _s4L4d::I64)) goto c4OGz; else goto c4OGE;
       c4OGz: // global
           I64[Hp - 72] = sat_s4L74_info;
           I64[Hp - 56] = _s4L4b::I64;
           I64[Hp - 48] = _s4L4d::I64;
           I64[Hp - 40] = sat_s4L6Q_info;
           I64[Hp - 24] = _s4L4b::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4OGE: // global
           if (%MO_S_Lt_W64(3, _s4L4b::I64)) goto c4OGD; else goto c4OGC;
       c4OGD: // global
           Hp = Hp - 80;
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4OGC: // global
           I64[Hp - 72] = sat_s4L78_info;
           I64[Hp - 56] = _s4L4b::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c4OGA::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c4OGA::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Oof_info" {
     block_c4Oof_info:
         const _c4Oof;
         const 194;
         const 4294967326;
         const S4L8g_srt+208;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:40.289034421 UTC

[section ""data" . GHC.IO.IOMode.$fEnumIOMode_closure" {
     GHC.IO.IOMode.$fEnumIOMode_closure:
         const GHC.Enum.C:Enum_con_info;
         const GHC.IO.IOMode.$fEnumIOMode_$csucc_closure+1;
         const GHC.IO.IOMode.$fEnumIOMode_$cpred_closure+1;
         const GHC.IO.IOMode.$fEnumIOMode_$ctoEnum_closure+1;
         const GHC.IO.IOMode.$fEnumIOMode_$cfromEnum_closure+1;
         const GHC.IO.IOMode.$fEnumIOMode_$cenumFrom_closure+1;
         const GHC.IO.IOMode.$fEnumIOMode_$cenumFromThen_closure+2;
         const GHC.IO.IOMode.$fEnumIOMode_$cenumFromTo_closure+2;
         const GHC.IO.IOMode.$fEnumIOMode_$cenumFromThenTo_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:40.291115062 UTC

[section ""data" . GHC.IO.IOMode.$trModule3_closure" {
     GHC.IO.IOMode.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.IOMode.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:40.294069017 UTC

[section ""data" . GHC.IO.IOMode.$trModule1_closure" {
     GHC.IO.IOMode.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.IOMode.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:40.295889034 UTC

[section ""data" . GHC.IO.IOMode.$trModule_closure" {
     GHC.IO.IOMode.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.IO.IOMode.$trModule3_closure+1;
         const GHC.IO.IOMode.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:40.297749528 UTC

[section ""cstring" . GHC.IO.IOMode.$tcIOMode2_bytes" {
     GHC.IO.IOMode.$tcIOMode2_bytes:
         I8[] [73,79,77,111,100,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:40.299412571 UTC

[section ""data" . GHC.IO.IOMode.$tcIOMode1_closure" {
     GHC.IO.IOMode.$tcIOMode1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.IOMode.$tcIOMode2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:40.301172212 UTC

[section ""data" . GHC.IO.IOMode.$tcIOMode_closure" {
     GHC.IO.IOMode.$tcIOMode_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.IOMode.$trModule_closure+1;
         const GHC.IO.IOMode.$tcIOMode1_closure+1;
         const GHC.Types.krep$*_closure;
         const 9818555080744742578;
         const 14348064797489060312;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:40.303014215 UTC

[section ""data" . GHC.IO.IOMode.$tc'AppendMode1_closure" {
     GHC.IO.IOMode.$tc'AppendMode1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.IOMode.$tcIOMode_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:40.304754885 UTC

[section ""cstring" . GHC.IO.IOMode.$tc'ReadMode2_bytes" {
     GHC.IO.IOMode.$tc'ReadMode2_bytes:
         I8[] [39,82,101,97,100,77,111,100,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:40.306516551 UTC

[section ""data" . GHC.IO.IOMode.$tc'ReadMode1_closure" {
     GHC.IO.IOMode.$tc'ReadMode1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.IOMode.$tc'ReadMode2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:40.308291517 UTC

[section ""data" . GHC.IO.IOMode.$tc'ReadMode_closure" {
     GHC.IO.IOMode.$tc'ReadMode_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.IOMode.$trModule_closure+1;
         const GHC.IO.IOMode.$tc'ReadMode1_closure+1;
         const GHC.IO.IOMode.$tc'AppendMode1_closure+1;
         const 17697021977009842408;
         const 16081808542294250782;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:40.310210549 UTC

[section ""cstring" . GHC.IO.IOMode.$tc'WriteMode2_bytes" {
     GHC.IO.IOMode.$tc'WriteMode2_bytes:
         I8[] [39,87,114,105,116,101,77,111,100,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:40.311945839 UTC

[section ""data" . GHC.IO.IOMode.$tc'WriteMode1_closure" {
     GHC.IO.IOMode.$tc'WriteMode1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.IOMode.$tc'WriteMode2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:40.314373768 UTC

[section ""data" . GHC.IO.IOMode.$tc'WriteMode_closure" {
     GHC.IO.IOMode.$tc'WriteMode_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.IOMode.$trModule_closure+1;
         const GHC.IO.IOMode.$tc'WriteMode1_closure+1;
         const GHC.IO.IOMode.$tc'AppendMode1_closure+1;
         const 16610458722029011495;
         const 11554819901902375488;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:40.316192778 UTC

[section ""cstring" . GHC.IO.IOMode.$tc'AppendMode3_bytes" {
     GHC.IO.IOMode.$tc'AppendMode3_bytes:
         I8[] [39,65,112,112,101,110,100,77,111,100,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:40.317922447 UTC

[section ""data" . GHC.IO.IOMode.$tc'AppendMode2_closure" {
     GHC.IO.IOMode.$tc'AppendMode2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.IOMode.$tc'AppendMode3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:40.320175787 UTC

[section ""data" . GHC.IO.IOMode.$tc'AppendMode_closure" {
     GHC.IO.IOMode.$tc'AppendMode_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.IOMode.$trModule_closure+1;
         const GHC.IO.IOMode.$tc'AppendMode2_closure+1;
         const GHC.IO.IOMode.$tc'AppendMode1_closure+1;
         const 3610623883618650464;
         const 11131639874085434472;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:40.322065668 UTC

[section ""cstring" . GHC.IO.IOMode.$tc'ReadWriteMode2_bytes" {
     GHC.IO.IOMode.$tc'ReadWriteMode2_bytes:
         I8[] [39,82,101,97,100,87,114,105,116,101,77,111,100,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:40.323792989 UTC

[section ""data" . GHC.IO.IOMode.$tc'ReadWriteMode1_closure" {
     GHC.IO.IOMode.$tc'ReadWriteMode1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.IOMode.$tc'ReadWriteMode2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:40.326107611 UTC

[section ""data" . GHC.IO.IOMode.$tc'ReadWriteMode_closure" {
     GHC.IO.IOMode.$tc'ReadWriteMode_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.IOMode.$trModule_closure+1;
         const GHC.IO.IOMode.$tc'ReadWriteMode1_closure+1;
         const GHC.IO.IOMode.$tc'AppendMode1_closure+1;
         const 626157189396725199;
         const 9407417215311302278;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:40.327822698 UTC

[section ""data" . GHC.IO.IOMode.ReadMode_closure" {
     GHC.IO.IOMode.ReadMode_closure:
         const GHC.IO.IOMode.ReadMode_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:40.329554118 UTC

[section ""data" . GHC.IO.IOMode.WriteMode_closure" {
     GHC.IO.IOMode.WriteMode_closure:
         const GHC.IO.IOMode.WriteMode_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:40.331189758 UTC

[section ""data" . GHC.IO.IOMode.AppendMode_closure" {
     GHC.IO.IOMode.AppendMode_closure:
         const GHC.IO.IOMode.AppendMode_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:40.332801728 UTC

[section ""data" . GHC.IO.IOMode.ReadWriteMode_closure" {
     GHC.IO.IOMode.ReadWriteMode_closure:
         const GHC.IO.IOMode.ReadWriteMode_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:40.334534697 UTC

[section ""relreadonly" . GHC.IO.IOMode.IOMode_closure_tbl" {
     GHC.IO.IOMode.IOMode_closure_tbl:
         const GHC.IO.IOMode.ReadMode_closure+1;
         const GHC.IO.IOMode.WriteMode_closure+2;
         const GHC.IO.IOMode.AppendMode_closure+3;
         const GHC.IO.IOMode.ReadWriteMode_closure+4;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:40.337441701 UTC

[section ""cstring" . i4Nhp_str" {
     i4Nhp_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,73,79,77,111,100,101,46,82,101,97,100,77,111,100,101]
 },
 GHC.IO.IOMode.ReadMode_con_entry() //  [R1]
         { []
         }
     {offset
       c4OOy: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.ReadMode_con_info" {
     GHC.IO.IOMode.ReadMode_con_info:
         const GHC.IO.IOMode.ReadMode_con_entry;
         const 4294967296;
         const 3;
         const i4Nhp_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:40.340853105 UTC

[section ""cstring" . i4Nhr_str" {
     i4Nhr_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,73,79,77,111,100,101,46,87,114,105,116,101,77,111,100,101]
 },
 GHC.IO.IOMode.WriteMode_con_entry() //  [R1]
         { []
         }
     {offset
       c4OOE: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.WriteMode_con_info" {
     GHC.IO.IOMode.WriteMode_con_info:
         const GHC.IO.IOMode.WriteMode_con_entry;
         const 4294967296;
         const 4294967299;
         const i4Nhr_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:40.34425509 UTC

[section ""cstring" . i4Nht_str" {
     i4Nht_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,73,79,77,111,100,101,46,65,112,112,101,110,100,77,111,100,101]
 },
 GHC.IO.IOMode.AppendMode_con_entry() //  [R1]
         { []
         }
     {offset
       c4OOK: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.AppendMode_con_info" {
     GHC.IO.IOMode.AppendMode_con_info:
         const GHC.IO.IOMode.AppendMode_con_entry;
         const 4294967296;
         const 8589934595;
         const i4Nht_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:40.348229663 UTC

[section ""cstring" . i4Nhv_str" {
     i4Nhv_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,73,79,77,111,100,101,46,82,101,97,100,87,114,105,116,101,77,111,100,101]
 },
 GHC.IO.IOMode.ReadWriteMode_con_entry() //  [R1]
         { []
         }
     {offset
       c4OOQ: // global
           R1 = R1 + 4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.ReadWriteMode_con_info" {
     GHC.IO.IOMode.ReadWriteMode_con_info:
         const GHC.IO.IOMode.ReadWriteMode_con_entry;
         const 4294967296;
         const 12884901891;
         const i4Nhv_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:40.352331431 UTC

[section ""relreadonly" . S4L8g_srt" {
     S4L8g_srt:
         const GHC.IO.IOMode.$fReadIOMode8_closure;
         const GHC.IO.IOMode.$fReadIOMode12_closure;
         const GHC.IO.IOMode.$fReadIOMode16_closure;
         const GHC.IO.IOMode.$fReadIOMode20_closure;
         const GHC.IO.IOMode.$w$cshowsPrec_closure;
         const GHC.IO.IOMode.$fShowIOMode_$cshow_closure;
         const GHC.Read.choose2_closure;
         const GHC.IO.IOMode.$fReadIOMode_sps_closure;
         const GHC.Read.list3_closure;
         const GHC.IO.IOMode.$fReadIOMode2_closure;
         const GHC.IO.IOMode.$fReadIOMode_$creadsPrec_closure;
         const GHC.Read.list_closure;
         const GHC.IO.IOMode.$fReadIOMode1_closure;
         const GHC.IO.IOMode.$fReadIOMode_$creadListPrec_closure;
         const GHC.IO.IOMode.$fReadIOMode22_closure;
         const GHC.Arr.hopelessIndexError_closure;
         const GHC.IO.IOMode.$fIxIOMode_$cindex_closure;
         const GHC.Err.error_closure;
         const lvl13_r4KYY_closure;
         const GHC.IO.IOMode.$fEnumIOMode_$cpred_closure;
         const GHC.IO.IOMode.$fEnumIOMode5_closure;
         const GHC.IO.IOMode.$fEnumIOMode_$csucc_closure;
         const GHC.IO.IOMode.$fEnumIOMode6_closure;
         const lvl18_r4KZ3_closure;
         const lvl19_r4KZ4_closure;
         const lvl20_r4KZ5_closure;
         const GHC.IO.IOMode.$wlvl_closure;
         const GHC.IO.IOMode.$fEnumIOMode_$ctoEnum_closure;
         const GHC.IO.IOMode.$w$ctoEnum_closure;
         const GHC.IO.IOMode.$fEnumIOMode_$cenumFrom_closure;
         const GHC.IO.IOMode.$fEnumIOMode1_closure;
         const GHC.IO.IOMode.$fEnumIOMode2_closure;
         const GHC.IO.IOMode.$fEnumIOMode3_closure;
         const GHC.IO.IOMode.$fEnumIOMode4_closure;
         const GHC.IO.IOMode.$fEnumIOMode_go3_closure;
         const GHC.IO.IOMode.$fEnumIOMode_go2_closure;
         const GHC.IO.IOMode.$fEnumIOMode_go1_closure;
         const GHC.IO.IOMode.$fEnumIOMode_go_closure;
         const GHC.IO.IOMode.$fEnumIOMode_$cenumFromTo_closure;
         const GHC.IO.IOMode.$fEnumIOMode_$cenumFromThenTo_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:44.593458949 UTC

[]


==================== Raw Cmm ====================
2018-03-16 15:59:44.595102757 UTC

[section ""cstring" . GHC.IO.IOMode.$fReadIOMode21_bytes" {
     GHC.IO.IOMode.$fReadIOMode21_bytes:
         I8[] [82,101,97,100,77,111,100,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:44.598826686 UTC

[section ""data" . GHC.IO.IOMode.$fReadIOMode20_closure" {
     GHC.IO.IOMode.$fReadIOMode20_closure:
         const GHC.IO.IOMode.$fReadIOMode20_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.IOMode.$fReadIOMode20_entry() //  [R1]
         { []
         }
     {offset
       c4OX7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4OX8; else goto c4OX9;
       c4OX8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4OX9: // global
           (_c4OX4::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4OX4::I64 == 0) goto c4OX6; else goto c4OX5;
       c4OX6: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c4OX5: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4OX4::I64;
           R2 = GHC.IO.IOMode.$fReadIOMode21_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fReadIOMode20_info" {
     GHC.IO.IOMode.$fReadIOMode20_info:
         const GHC.IO.IOMode.$fReadIOMode20_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:44.604492816 UTC

[section ""cstring" . GHC.IO.IOMode.$fReadIOMode17_bytes" {
     GHC.IO.IOMode.$fReadIOMode17_bytes:
         I8[] [87,114,105,116,101,77,111,100,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:44.608200408 UTC

[section ""data" . GHC.IO.IOMode.$fReadIOMode16_closure" {
     GHC.IO.IOMode.$fReadIOMode16_closure:
         const GHC.IO.IOMode.$fReadIOMode16_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.IOMode.$fReadIOMode16_entry() //  [R1]
         { []
         }
     {offset
       c4OXp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4OXq; else goto c4OXr;
       c4OXq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4OXr: // global
           (_c4OXm::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4OXm::I64 == 0) goto c4OXo; else goto c4OXn;
       c4OXo: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c4OXn: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4OXm::I64;
           R2 = GHC.IO.IOMode.$fReadIOMode17_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fReadIOMode16_info" {
     GHC.IO.IOMode.$fReadIOMode16_info:
         const GHC.IO.IOMode.$fReadIOMode16_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:44.613965972 UTC

[section ""cstring" . GHC.IO.IOMode.$fReadIOMode13_bytes" {
     GHC.IO.IOMode.$fReadIOMode13_bytes:
         I8[] [65,112,112,101,110,100,77,111,100,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:44.617619261 UTC

[section ""data" . GHC.IO.IOMode.$fReadIOMode12_closure" {
     GHC.IO.IOMode.$fReadIOMode12_closure:
         const GHC.IO.IOMode.$fReadIOMode12_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.IOMode.$fReadIOMode12_entry() //  [R1]
         { []
         }
     {offset
       c4OXH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4OXI; else goto c4OXJ;
       c4OXI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4OXJ: // global
           (_c4OXE::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4OXE::I64 == 0) goto c4OXG; else goto c4OXF;
       c4OXG: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c4OXF: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4OXE::I64;
           R2 = GHC.IO.IOMode.$fReadIOMode13_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fReadIOMode12_info" {
     GHC.IO.IOMode.$fReadIOMode12_info:
         const GHC.IO.IOMode.$fReadIOMode12_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:44.623292816 UTC

[section ""cstring" . GHC.IO.IOMode.$fReadIOMode9_bytes" {
     GHC.IO.IOMode.$fReadIOMode9_bytes:
         I8[] [82,101,97,100,87,114,105,116,101,77,111,100,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:44.626708395 UTC

[section ""data" . GHC.IO.IOMode.$fReadIOMode8_closure" {
     GHC.IO.IOMode.$fReadIOMode8_closure:
         const GHC.IO.IOMode.$fReadIOMode8_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.IOMode.$fReadIOMode8_entry() //  [R1]
         { []
         }
     {offset
       c4OXZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4OY0; else goto c4OY1;
       c4OY0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4OY1: // global
           (_c4OXW::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4OXW::I64 == 0) goto c4OXY; else goto c4OXX;
       c4OXY: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c4OXX: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4OXW::I64;
           R2 = GHC.IO.IOMode.$fReadIOMode9_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fReadIOMode8_info" {
     GHC.IO.IOMode.$fReadIOMode8_info:
         const GHC.IO.IOMode.$fReadIOMode8_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:44.631823407 UTC

[section ""data" . GHC.IO.IOMode.$w$cshowsPrec_closure" {
     GHC.IO.IOMode.$w$cshowsPrec_closure:
         const GHC.IO.IOMode.$w$cshowsPrec_info;
         const 0;
 },
 GHC.IO.IOMode.$w$cshowsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       c4OYn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4OYo; else goto c4OYp;
       c4OYo: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.IOMode.$w$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4OYp: // global
           I64[Sp - 16] = block_c4OYe_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4OYE; else goto c4OYf;
       u4OYE: // global
           call _c4OYe(R1) args: 0, res: 0, upd: 0;
       c4OYf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$w$cshowsPrec_info" {
     GHC.IO.IOMode.$w$cshowsPrec_info:
         const GHC.IO.IOMode.$w$cshowsPrec_entry;
         const 0;
         const 133143986190;
         const 8589934607;
         const S4OYF_srt;
 },
 _c4OYe() //  [R1]
         { []
         }
     {offset
       c4OYe: // global
           _s4OOY::P64 = P64[Sp + 8];
           _c4OYm::P64 = R1 & 7;
           if (_c4OYm::P64 < 3) goto u4OYC; else goto u4OYD;
       u4OYC: // global
           if (_c4OYm::P64 < 2) goto c4OYi; else goto c4OYj;
       c4OYi: // global
           R3 = _s4OOY::P64;
           R2 = GHC.IO.IOMode.$fReadIOMode20_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c4OYj: // global
           R3 = _s4OOY::P64;
           R2 = GHC.IO.IOMode.$fReadIOMode16_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       u4OYD: // global
           if (_c4OYm::P64 < 4) goto c4OYk; else goto c4OYl;
       c4OYk: // global
           R3 = _s4OOY::P64;
           R2 = GHC.IO.IOMode.$fReadIOMode12_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c4OYl: // global
           R3 = _s4OOY::P64;
           R2 = GHC.IO.IOMode.$fReadIOMode8_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4OYe_info" {
     block_c4OYe_info:
         const _c4OYe;
         const 1;
         const 64424509470;
         const S4OYF_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:44.638947868 UTC

[section ""data" . GHC.IO.IOMode.$fShowIOMode_$cshowsPrec_closure" {
     GHC.IO.IOMode.$fShowIOMode_$cshowsPrec_closure:
         const GHC.IO.IOMode.$fShowIOMode_$cshowsPrec_info;
         const 0;
 },
 GHC.IO.IOMode.$fShowIOMode_$cshowsPrec_entry() //  [R3, R4]
         { []
         }
     {offset
       c4OYV: // global
           _s4OP1::P64 = R3;
           R3 = R4;
           R2 = _s4OP1::P64;
           call GHC.IO.IOMode.$w$cshowsPrec_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fShowIOMode_$cshowsPrec_info" {
     GHC.IO.IOMode.$fShowIOMode_$cshowsPrec_info:
         const GHC.IO.IOMode.$fShowIOMode_$cshowsPrec_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const S4OYF_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:44.643664985 UTC

[section ""data" . GHC.IO.IOMode.$fShowIOMode_$cshow_closure" {
     GHC.IO.IOMode.$fShowIOMode_$cshow_closure:
         const GHC.IO.IOMode.$fShowIOMode_$cshow_info;
         const 0;
 },
 GHC.IO.IOMode.$fShowIOMode_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c4OZf: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c4OZg; else goto c4OZh;
       c4OZg: // global
           R2 = R2;
           R1 = GHC.IO.IOMode.$fShowIOMode_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4OZh: // global
           I64[Sp - 8] = block_c4OZ6_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u4OZw; else goto c4OZ7;
       u4OZw: // global
           call _c4OZ6(R1) args: 0, res: 0, upd: 0;
       c4OZ7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fShowIOMode_$cshow_info" {
     GHC.IO.IOMode.$fShowIOMode_$cshow_info:
         const GHC.IO.IOMode.$fShowIOMode_$cshow_entry;
         const 0;
         const 201863462926;
         const 4294967301;
         const S4OYF_srt;
 },
 _c4OZ6() //  [R1]
         { []
         }
     {offset
       c4OZ6: // global
           _c4OZe::P64 = R1 & 7;
           if (_c4OZe::P64 < 3) goto u4OZu; else goto u4OZv;
       u4OZu: // global
           if (_c4OZe::P64 < 2) goto c4OZa; else goto c4OZb;
       c4OZa: // global
           R1 = GHC.IO.IOMode.$fReadIOMode20_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c4OZb: // global
           R1 = GHC.IO.IOMode.$fReadIOMode16_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u4OZv: // global
           if (_c4OZe::P64 < 4) goto c4OZc; else goto c4OZd;
       c4OZc: // global
           R1 = GHC.IO.IOMode.$fReadIOMode12_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c4OZd: // global
           R1 = GHC.IO.IOMode.$fReadIOMode8_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4OZ6_info" {
     block_c4OZ6_info:
         const _c4OZ6;
         const 0;
         const 64424509470;
         const S4OYF_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:44.650161142 UTC

[section ""data" . GHC.IO.IOMode.$fShowIOMode_$cshowList_closure" {
     GHC.IO.IOMode.$fShowIOMode_$cshowList_closure:
         const GHC.IO.IOMode.$fShowIOMode_$cshowList_info;
         const 0;
 },
 GHC.IO.IOMode.$fShowIOMode_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       c4OZQ: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.IOMode.$w$cshowsPrec_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fShowIOMode_$cshowList_info" {
     GHC.IO.IOMode.$fShowIOMode_$cshowList_info:
         const GHC.IO.IOMode.$fShowIOMode_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S4OYF_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:44.65358075 UTC

[section ""data" . GHC.IO.IOMode.$fShowIOMode_closure" {
     GHC.IO.IOMode.$fShowIOMode_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.IO.IOMode.$fShowIOMode_$cshowsPrec_closure+3;
         const GHC.IO.IOMode.$fShowIOMode_$cshow_closure+1;
         const GHC.IO.IOMode.$fShowIOMode_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:44.655836691 UTC

[section ""data" . GHC.IO.IOMode.$fReadIOMode19_closure" {
     GHC.IO.IOMode.$fReadIOMode19_closure:
         const GHC.IO.IOMode.$fReadIOMode19_info;
 },
 GHC.IO.IOMode.$fReadIOMode19_entry() //  [R3]
         { []
         }
     {offset
       c4P02: // global
           R2 = GHC.IO.IOMode.ReadMode_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fReadIOMode19_info" {
     GHC.IO.IOMode.$fReadIOMode19_info:
         const GHC.IO.IOMode.$fReadIOMode19_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:44.659237194 UTC

[section ""data" . GHC.IO.IOMode.$fReadIOMode18_closure" {
     GHC.IO.IOMode.$fReadIOMode18_closure:
         const (,)_con_info;
         const GHC.IO.IOMode.$fReadIOMode20_closure;
         const GHC.IO.IOMode.$fReadIOMode19_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:44.66149867 UTC

[section ""data" . GHC.IO.IOMode.$fReadIOMode15_closure" {
     GHC.IO.IOMode.$fReadIOMode15_closure:
         const GHC.IO.IOMode.$fReadIOMode15_info;
 },
 GHC.IO.IOMode.$fReadIOMode15_entry() //  [R3]
         { []
         }
     {offset
       c4P0e: // global
           R2 = GHC.IO.IOMode.WriteMode_closure+2;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fReadIOMode15_info" {
     GHC.IO.IOMode.$fReadIOMode15_info:
         const GHC.IO.IOMode.$fReadIOMode15_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:44.664816458 UTC

[section ""data" . GHC.IO.IOMode.$fReadIOMode14_closure" {
     GHC.IO.IOMode.$fReadIOMode14_closure:
         const (,)_con_info;
         const GHC.IO.IOMode.$fReadIOMode16_closure;
         const GHC.IO.IOMode.$fReadIOMode15_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:44.667094758 UTC

[section ""data" . GHC.IO.IOMode.$fReadIOMode11_closure" {
     GHC.IO.IOMode.$fReadIOMode11_closure:
         const GHC.IO.IOMode.$fReadIOMode11_info;
 },
 GHC.IO.IOMode.$fReadIOMode11_entry() //  [R3]
         { []
         }
     {offset
       c4P0q: // global
           R2 = GHC.IO.IOMode.AppendMode_closure+3;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fReadIOMode11_info" {
     GHC.IO.IOMode.$fReadIOMode11_info:
         const GHC.IO.IOMode.$fReadIOMode11_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:44.670379858 UTC

[section ""data" . GHC.IO.IOMode.$fReadIOMode10_closure" {
     GHC.IO.IOMode.$fReadIOMode10_closure:
         const (,)_con_info;
         const GHC.IO.IOMode.$fReadIOMode12_closure;
         const GHC.IO.IOMode.$fReadIOMode11_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:44.673216237 UTC

[section ""data" . GHC.IO.IOMode.$fReadIOMode7_closure" {
     GHC.IO.IOMode.$fReadIOMode7_closure:
         const GHC.IO.IOMode.$fReadIOMode7_info;
 },
 GHC.IO.IOMode.$fReadIOMode7_entry() //  [R3]
         { []
         }
     {offset
       c4P0C: // global
           R2 = GHC.IO.IOMode.ReadWriteMode_closure+4;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fReadIOMode7_info" {
     GHC.IO.IOMode.$fReadIOMode7_info:
         const GHC.IO.IOMode.$fReadIOMode7_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:44.677312345 UTC

[section ""data" . GHC.IO.IOMode.$fReadIOMode6_closure" {
     GHC.IO.IOMode.$fReadIOMode6_closure:
         const (,)_con_info;
         const GHC.IO.IOMode.$fReadIOMode8_closure;
         const GHC.IO.IOMode.$fReadIOMode7_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:44.679112265 UTC

[section ""data" . GHC.IO.IOMode.$fReadIOMode5_closure" {
     GHC.IO.IOMode.$fReadIOMode5_closure:
         const :_con_info;
         const GHC.IO.IOMode.$fReadIOMode6_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:44.680980385 UTC

[section ""data" . GHC.IO.IOMode.$fReadIOMode4_closure" {
     GHC.IO.IOMode.$fReadIOMode4_closure:
         const :_con_info;
         const GHC.IO.IOMode.$fReadIOMode10_closure+1;
         const GHC.IO.IOMode.$fReadIOMode5_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:44.682751538 UTC

[section ""data" . GHC.IO.IOMode.$fReadIOMode3_closure" {
     GHC.IO.IOMode.$fReadIOMode3_closure:
         const :_con_info;
         const GHC.IO.IOMode.$fReadIOMode14_closure+1;
         const GHC.IO.IOMode.$fReadIOMode4_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:44.684533479 UTC

[section ""data" . GHC.IO.IOMode.$fReadIOMode_sps_closure" {
     GHC.IO.IOMode.$fReadIOMode_sps_closure:
         const :_con_info;
         const GHC.IO.IOMode.$fReadIOMode18_closure+1;
         const GHC.IO.IOMode.$fReadIOMode3_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:44.686847685 UTC

[section ""data" . GHC.IO.IOMode.$fReadIOMode2_closure" {
     GHC.IO.IOMode.$fReadIOMode2_closure:
         const GHC.IO.IOMode.$fReadIOMode2_info;
         const 0;
 },
 GHC.IO.IOMode.$fReadIOMode2_entry() //  [R2]
         { []
         }
     {offset
       c4P0S: // global
           R3 = R2;
           R2 = GHC.IO.IOMode.$fReadIOMode_sps_closure+2;
           call GHC.Read.choose2_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fReadIOMode2_info" {
     GHC.IO.IOMode.$fReadIOMode2_info:
         const GHC.IO.IOMode.$fReadIOMode2_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S4OYF_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:44.69047121 UTC

[section ""data" . GHC.IO.IOMode.$fReadIOMode1_closure" {
     GHC.IO.IOMode.$fReadIOMode1_closure:
         const GHC.IO.IOMode.$fReadIOMode1_info;
         const 0;
 },
 GHC.IO.IOMode.$fReadIOMode1_entry() //  [R2, R3]
         { []
         }
     {offset
       c4P13: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.IOMode.$fReadIOMode2_closure+1;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fReadIOMode1_info" {
     GHC.IO.IOMode.$fReadIOMode1_info:
         const GHC.IO.IOMode.$fReadIOMode1_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S4OYF_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:44.694890424 UTC

[section ""data" . GHC.IO.IOMode.$fReadIOMode_$creadsPrec_closure" {
     GHC.IO.IOMode.$fReadIOMode_$creadsPrec_closure:
         const GHC.IO.IOMode.$fReadIOMode_$creadsPrec_info;
         const 0;
 },
 sat_s4OPh_entry() //  [R1]
         { []
         }
     {offset
       c4P1i: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4P1j; else goto c4P1k;
       c4P1j: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4P1k: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = P64[R1 + 16];
           R2 = GHC.IO.IOMode.$fReadIOMode2_closure+1;
           Sp = Sp - 16;
           call GHC.Read.list3_entry(R4, R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OPh_info" {
     sat_s4OPh_info:
         const sat_s4OPh_entry;
         const 1;
         const 12884901904;
         const S4OYF_srt+64;
 },
 GHC.IO.IOMode.$fReadIOMode_$creadsPrec_entry() //  [R2]
         { []
         }
     {offset
       c4P1l: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c4P1p; else goto c4P1o;
       c4P1p: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.IO.IOMode.$fReadIOMode_$creadsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4P1o: // global
           I64[Hp - 16] = sat_s4OPh_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fReadIOMode_$creadsPrec_info" {
     GHC.IO.IOMode.$fReadIOMode_$creadsPrec_info:
         const GHC.IO.IOMode.$fReadIOMode_$creadsPrec_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const S4OYF_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:44.701023821 UTC

[section ""data" . GHC.IO.IOMode.$fReadIOMode_$creadListPrec_closure" {
     GHC.IO.IOMode.$fReadIOMode_$creadListPrec_closure:
         const GHC.IO.IOMode.$fReadIOMode_$creadListPrec_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.IOMode.$fReadIOMode_$creadListPrec_entry() //  [R1]
         { []
         }
     {offset
       c4P1I: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4P1J; else goto c4P1K;
       c4P1J: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4P1K: // global
           (_c4P1F::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4P1F::I64 == 0) goto c4P1H; else goto c4P1G;
       c4P1H: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c4P1G: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4P1F::I64;
           R2 = GHC.IO.IOMode.$fReadIOMode1_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fReadIOMode_$creadListPrec_info" {
     GHC.IO.IOMode.$fReadIOMode_$creadListPrec_info:
         const GHC.IO.IOMode.$fReadIOMode_$creadListPrec_entry;
         const 0;
         const 12884901909;
         const S4OYF_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:44.710146681 UTC

[section ""data" . GHC.IO.IOMode.$fReadIOMode22_closure" {
     GHC.IO.IOMode.$fReadIOMode22_closure:
         const GHC.IO.IOMode.$fReadIOMode22_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.IOMode.$fReadIOMode22_entry() //  [R1]
         { []
         }
     {offset
       c4P1Z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4P20; else goto c4P21;
       c4P20: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4P21: // global
           (_c4P1W::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4P1W::I64 == 0) goto c4P1Y; else goto c4P1X;
       c4P1Y: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c4P1X: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4P1W::I64;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = GHC.Read.$fRead()7_closure;
           R1 = GHC.IO.IOMode.$fReadIOMode_$creadListPrec_closure;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fReadIOMode22_info" {
     GHC.IO.IOMode.$fReadIOMode22_info:
         const GHC.IO.IOMode.$fReadIOMode22_entry;
         const 0;
         const 4294967317;
         const S4OYF_srt+104;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:44.716539072 UTC

[section ""data" . GHC.IO.IOMode.$fReadIOMode_$creadList_closure" {
     GHC.IO.IOMode.$fReadIOMode_$creadList_closure:
         const GHC.IO.IOMode.$fReadIOMode_$creadList_info;
         const 0;
 },
 GHC.IO.IOMode.$fReadIOMode_$creadList_entry() //  [R2]
         { []
         }
     {offset
       c4P2f: // global
           R3 = R2;
           R2 = GHC.IO.IOMode.$fReadIOMode22_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fReadIOMode_$creadList_info" {
     GHC.IO.IOMode.$fReadIOMode_$creadList_info:
         const GHC.IO.IOMode.$fReadIOMode_$creadList_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S4OYF_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:44.72263198 UTC

[section ""data" . GHC.IO.IOMode.$fReadIOMode_closure" {
     GHC.IO.IOMode.$fReadIOMode_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.IO.IOMode.$fReadIOMode_$creadsPrec_closure+1;
         const GHC.IO.IOMode.$fReadIOMode_$creadList_closure+1;
         const GHC.IO.IOMode.$fReadIOMode1_closure+2;
         const GHC.IO.IOMode.$fReadIOMode_$creadListPrec_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:44.728798657 UTC

[section ""data" . GHC.IO.IOMode.$fEqIOMode_$c==_closure" {
     GHC.IO.IOMode.$fEqIOMode_$c==_closure:
         const GHC.IO.IOMode.$fEqIOMode_$c==_info;
 },
 GHC.IO.IOMode.$fEqIOMode_$c==_entry() //  [R2, R3]
         { []
         }
     {offset
       c4P2A: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4P2B; else goto c4P2C;
       c4P2B: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.IOMode.$fEqIOMode_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4P2C: // global
           I64[Sp - 16] = block_c4P2r_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4P3T; else goto c4P2s;
       u4P3T: // global
           call _c4P2r(R1) args: 0, res: 0, upd: 0;
       c4P2s: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fEqIOMode_$c==_info" {
     GHC.IO.IOMode.$fEqIOMode_$c==_info:
         const GHC.IO.IOMode.$fEqIOMode_$c==_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c4P2r() //  [R1]
         { []
         }
     {offset
       c4P2r: // global
           _s4OPj::P64 = P64[Sp + 8];
           _c4P2z::P64 = R1 & 7;
           if (_c4P2z::P64 < 3) goto u4P3F; else goto u4P3G;
       u4P3F: // global
           if (_c4P2z::P64 < 2) goto c4P2v; else goto c4P2w;
       c4P2v: // global
           I64[Sp + 8] = block_c4P2F_info;
           R1 = _s4OPj::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4P3P; else goto c4P2H;
       u4P3P: // global
           call _c4P2F(R1) args: 0, res: 0, upd: 0;
       c4P2H: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c4P2w: // global
           I64[Sp + 8] = block_c4P2U_info;
           R1 = _s4OPj::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4P3Q; else goto c4P2W;
       u4P3Q: // global
           call _c4P2U(R1) args: 0, res: 0, upd: 0;
       c4P2W: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u4P3G: // global
           if (_c4P2z::P64 < 4) goto c4P2x; else goto c4P2y;
       c4P2x: // global
           I64[Sp + 8] = block_c4P39_info;
           R1 = _s4OPj::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4P3R; else goto c4P3b;
       u4P3R: // global
           call _c4P39(R1) args: 0, res: 0, upd: 0;
       c4P3b: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c4P2y: // global
           I64[Sp + 8] = block_c4P3o_info;
           R1 = _s4OPj::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4P3S; else goto c4P3q;
       u4P3S: // global
           call _c4P3o(R1) args: 0, res: 0, upd: 0;
       c4P3q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4P2r_info" {
     block_c4P2r_info:
         const _c4P2r;
         const 1;
         const 30;
 },
 _c4P2F() //  [R1]
         { []
         }
     {offset
       c4P2F: // global
           if (R1 & 7 == 1) goto u4P3H; else goto u4P3I;
       u4P3H: // global
           Sp = Sp + 8;
           call _c4P3A() args: 0, res: 0, upd: 0;
       u4P3I: // global
           Sp = Sp + 8;
           call _c4P3w() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4P2F_info" {
     block_c4P2F_info:
         const _c4P2F;
         const 0;
         const 30;
 },
 _c4P2U() //  [R1]
         { []
         }
     {offset
       c4P2U: // global
           if (R1 & 7 == 2) goto u4P3J; else goto u4P3K;
       u4P3J: // global
           Sp = Sp + 8;
           call _c4P3A() args: 0, res: 0, upd: 0;
       u4P3K: // global
           Sp = Sp + 8;
           call _c4P3w() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4P2U_info" {
     block_c4P2U_info:
         const _c4P2U;
         const 0;
         const 30;
 },
 _c4P39() //  [R1]
         { []
         }
     {offset
       c4P39: // global
           if (R1 & 7 == 3) goto u4P3L; else goto u4P3M;
       u4P3L: // global
           Sp = Sp + 8;
           call _c4P3A() args: 0, res: 0, upd: 0;
       u4P3M: // global
           Sp = Sp + 8;
           call _c4P3w() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4P39_info" {
     block_c4P39_info:
         const _c4P39;
         const 0;
         const 30;
 },
 _c4P3o() //  [R1]
         { []
         }
     {offset
       c4P3o: // global
           if (R1 & 7 == 4) goto u4P3N; else goto u4P3O;
       u4P3N: // global
           Sp = Sp + 8;
           call _c4P3A() args: 0, res: 0, upd: 0;
       u4P3O: // global
           Sp = Sp + 8;
           call _c4P3w() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4P3o_info" {
     block_c4P3o_info:
         const _c4P3o;
         const 0;
         const 30;
 },
 _c4P3A() //  []
         { []
         }
     {offset
       c4P3A: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c4P3w() //  []
         { []
         }
     {offset
       c4P3w: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:44.749868849 UTC

[section ""data" . GHC.IO.IOMode.$fEqIOMode_$c/=_closure" {
     GHC.IO.IOMode.$fEqIOMode_$c/=_closure:
         const GHC.IO.IOMode.$fEqIOMode_$c/=_info;
 },
 GHC.IO.IOMode.$fEqIOMode_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       c4P50: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4P51; else goto c4P52;
       c4P51: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.IOMode.$fEqIOMode_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4P52: // global
           I64[Sp - 16] = block_c4P4R_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4P6j; else goto c4P4S;
       u4P6j: // global
           call _c4P4R(R1) args: 0, res: 0, upd: 0;
       c4P4S: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fEqIOMode_$c/=_info" {
     GHC.IO.IOMode.$fEqIOMode_$c/=_info:
         const GHC.IO.IOMode.$fEqIOMode_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c4P4R() //  [R1]
         { []
         }
     {offset
       c4P4R: // global
           _s4OPq::P64 = P64[Sp + 8];
           _c4P4Z::P64 = R1 & 7;
           if (_c4P4Z::P64 < 3) goto u4P65; else goto u4P66;
       u4P65: // global
           if (_c4P4Z::P64 < 2) goto c4P4V; else goto c4P4W;
       c4P4V: // global
           I64[Sp + 8] = block_c4P55_info;
           R1 = _s4OPq::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4P6f; else goto c4P57;
       u4P6f: // global
           call _c4P55(R1) args: 0, res: 0, upd: 0;
       c4P57: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c4P4W: // global
           I64[Sp + 8] = block_c4P5k_info;
           R1 = _s4OPq::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4P6g; else goto c4P5m;
       u4P6g: // global
           call _c4P5k(R1) args: 0, res: 0, upd: 0;
       c4P5m: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u4P66: // global
           if (_c4P4Z::P64 < 4) goto c4P4X; else goto c4P4Y;
       c4P4X: // global
           I64[Sp + 8] = block_c4P5z_info;
           R1 = _s4OPq::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4P6h; else goto c4P5B;
       u4P6h: // global
           call _c4P5z(R1) args: 0, res: 0, upd: 0;
       c4P5B: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c4P4Y: // global
           I64[Sp + 8] = block_c4P5O_info;
           R1 = _s4OPq::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4P6i; else goto c4P5Q;
       u4P6i: // global
           call _c4P5O(R1) args: 0, res: 0, upd: 0;
       c4P5Q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4P4R_info" {
     block_c4P4R_info:
         const _c4P4R;
         const 1;
         const 30;
 },
 _c4P55() //  [R1]
         { []
         }
     {offset
       c4P55: // global
           if (R1 & 7 == 1) goto u4P67; else goto u4P68;
       u4P67: // global
           Sp = Sp + 8;
           call _c4P60() args: 0, res: 0, upd: 0;
       u4P68: // global
           Sp = Sp + 8;
           call _c4P5W() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4P55_info" {
     block_c4P55_info:
         const _c4P55;
         const 0;
         const 30;
 },
 _c4P5k() //  [R1]
         { []
         }
     {offset
       c4P5k: // global
           if (R1 & 7 == 2) goto u4P69; else goto u4P6a;
       u4P69: // global
           Sp = Sp + 8;
           call _c4P60() args: 0, res: 0, upd: 0;
       u4P6a: // global
           Sp = Sp + 8;
           call _c4P5W() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4P5k_info" {
     block_c4P5k_info:
         const _c4P5k;
         const 0;
         const 30;
 },
 _c4P5z() //  [R1]
         { []
         }
     {offset
       c4P5z: // global
           if (R1 & 7 == 3) goto u4P6b; else goto u4P6c;
       u4P6b: // global
           Sp = Sp + 8;
           call _c4P60() args: 0, res: 0, upd: 0;
       u4P6c: // global
           Sp = Sp + 8;
           call _c4P5W() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4P5z_info" {
     block_c4P5z_info:
         const _c4P5z;
         const 0;
         const 30;
 },
 _c4P5O() //  [R1]
         { []
         }
     {offset
       c4P5O: // global
           if (R1 & 7 == 4) goto u4P6d; else goto u4P6e;
       u4P6d: // global
           Sp = Sp + 8;
           call _c4P60() args: 0, res: 0, upd: 0;
       u4P6e: // global
           Sp = Sp + 8;
           call _c4P5W() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4P5O_info" {
     block_c4P5O_info:
         const _c4P5O;
         const 0;
         const 30;
 },
 _c4P60() //  []
         { []
         }
     {offset
       c4P60: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c4P5W() //  []
         { []
         }
     {offset
       c4P5W: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:44.764078543 UTC

[section ""data" . GHC.IO.IOMode.$fEqIOMode_closure" {
     GHC.IO.IOMode.$fEqIOMode_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.IO.IOMode.$fEqIOMode_$c==_closure+2;
         const GHC.IO.IOMode.$fEqIOMode_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:44.768995234 UTC

[section ""data" . GHC.IO.IOMode.$fOrdIOMode_$ccompare_closure" {
     GHC.IO.IOMode.$fOrdIOMode_$ccompare_closure:
         const GHC.IO.IOMode.$fOrdIOMode_$ccompare_info;
 },
 GHC.IO.IOMode.$fOrdIOMode_$ccompare_entry() //  [R2, R3]
         { []
         }
     {offset
       c4P7r: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4P7s; else goto c4P7t;
       c4P7s: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.IOMode.$fOrdIOMode_$ccompare_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4P7t: // global
           I64[Sp - 16] = block_c4P7i_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4P9c; else goto c4P7j;
       u4P9c: // global
           call _c4P7i(R1) args: 0, res: 0, upd: 0;
       c4P7j: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fOrdIOMode_$ccompare_info" {
     GHC.IO.IOMode.$fOrdIOMode_$ccompare_info:
         const GHC.IO.IOMode.$fOrdIOMode_$ccompare_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c4P7i() //  [R1]
         { []
         }
     {offset
       c4P7i: // global
           _s4OPx::P64 = P64[Sp + 8];
           _c4P7q::P64 = R1 & 7;
           if (_c4P7q::P64 < 3) goto u4P8Q; else goto u4P8R;
       u4P8Q: // global
           if (_c4P7q::P64 < 2) goto c4P7m; else goto c4P7n;
       c4P7m: // global
           I64[Sp + 8] = block_c4P7w_info;
           R1 = _s4OPx::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4P98; else goto c4P7y;
       u4P98: // global
           call _c4P7w(R1) args: 0, res: 0, upd: 0;
       c4P7y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c4P7n: // global
           I64[Sp + 8] = block_c4P7T_info;
           R1 = _s4OPx::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4P99; else goto c4P7V;
       u4P99: // global
           call _c4P7T(R1) args: 0, res: 0, upd: 0;
       c4P7V: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u4P8R: // global
           if (_c4P7q::P64 < 4) goto c4P7o; else goto c4P7p;
       c4P7o: // global
           I64[Sp + 8] = block_c4P8g_info;
           R1 = _s4OPx::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4P9a; else goto c4P8i;
       u4P9a: // global
           call _c4P8g(R1) args: 0, res: 0, upd: 0;
       c4P8i: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c4P7p: // global
           I64[Sp + 8] = block_c4P8z_info;
           R1 = _s4OPx::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4P9b; else goto c4P8B;
       u4P9b: // global
           call _c4P8z(R1) args: 0, res: 0, upd: 0;
       c4P8B: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4P7i_info" {
     block_c4P7i_info:
         const _c4P7i;
         const 1;
         const 30;
 },
 _c4P7w() //  [R1]
         { []
         }
     {offset
       c4P7w: // global
           _c4P8P::P64 = R1 & 7;
           if (_c4P8P::P64 < 2) goto u4P8W; else goto u4P8S;
       u4P8W: // global
           Sp = Sp + 8;
           call _c4P8L() args: 0, res: 0, upd: 0;
       u4P8S: // global
           if (_c4P8P::P64 != 3) goto u4P8Y; else goto u4P8Y;
       u4P8Y: // global
           Sp = Sp + 8;
           call _c4P8w() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4P7w_info" {
     block_c4P7w_info:
         const _c4P7w;
         const 0;
         const 30;
 },
 _c4P7T() //  [R1]
         { []
         }
     {offset
       c4P7T: // global
           _c4P8O::P64 = R1 & 7;
           if (_c4P8O::P64 < 3) goto u4P8T; else goto u4P8U;
       u4P8T: // global
           if (_c4P8O::P64 < 2) goto u4P90; else goto u4P8Z;
       u4P90: // global
           Sp = Sp + 8;
           call _c4P8H() args: 0, res: 0, upd: 0;
       u4P8Z: // global
           Sp = Sp + 8;
           call _c4P8L() args: 0, res: 0, upd: 0;
       u4P8U: // global
           if (_c4P8O::P64 < 4) goto u4P92; else goto u4P92;
       u4P92: // global
           Sp = Sp + 8;
           call _c4P8w() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4P7T_info" {
     block_c4P7T_info:
         const _c4P7T;
         const 0;
         const 30;
 },
 _c4P8g() //  [R1]
         { []
         }
     {offset
       c4P8g: // global
           _c4P8N::P64 = R1 & 7;
           if (_c4P8N::P64 != 3) goto u4P8V; else goto u4P93;
       u4P8V: // global
           if (_c4P8N::P64 != 4) goto u4P95; else goto u4P94;
       u4P95: // global
           Sp = Sp + 8;
           call _c4P8H() args: 0, res: 0, upd: 0;
       u4P94: // global
           Sp = Sp + 8;
           call _c4P8w() args: 0, res: 0, upd: 0;
       u4P93: // global
           Sp = Sp + 8;
           call _c4P8L() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4P8g_info" {
     block_c4P8g_info:
         const _c4P8g;
         const 0;
         const 30;
 },
 _c4P8w() //  []
         { []
         }
     {offset
       c4P8w: // global
           R1 = GHC.Types.LT_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c4P8z() //  [R1]
         { []
         }
     {offset
       c4P8z: // global
           if (R1 & 7 == 4) goto u4P96; else goto u4P97;
       u4P96: // global
           Sp = Sp + 8;
           call _c4P8L() args: 0, res: 0, upd: 0;
       u4P97: // global
           Sp = Sp + 8;
           call _c4P8H() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4P8z_info" {
     block_c4P8z_info:
         const _c4P8z;
         const 0;
         const 30;
 },
 _c4P8L() //  []
         { []
         }
     {offset
       c4P8L: // global
           R1 = GHC.Types.EQ_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c4P8H() //  []
         { []
         }
     {offset
       c4P8H: // global
           R1 = GHC.Types.GT_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:44.786839912 UTC

[section ""data" . GHC.IO.IOMode.$fOrdIOMode_$c<_closure" {
     GHC.IO.IOMode.$fOrdIOMode_$c<_closure:
         const GHC.IO.IOMode.$fOrdIOMode_$c<_info;
 },
 GHC.IO.IOMode.$fOrdIOMode_$c<_entry() //  [R2, R3]
         { []
         }
     {offset
       c4Pam: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Pan; else goto c4Pao;
       c4Pan: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.IOMode.$fOrdIOMode_$c<_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4Pao: // global
           I64[Sp - 16] = block_c4Pad_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4PbM; else goto c4Pae;
       u4PbM: // global
           call _c4Pad(R1) args: 0, res: 0, upd: 0;
       c4Pae: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fOrdIOMode_$c<_info" {
     GHC.IO.IOMode.$fOrdIOMode_$c<_info:
         const GHC.IO.IOMode.$fOrdIOMode_$c<_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c4Pad() //  [R1]
         { []
         }
     {offset
       c4Pad: // global
           _s4OPE::P64 = P64[Sp + 8];
           _c4Pal::P64 = R1 & 7;
           if (_c4Pal::P64 < 3) goto u4Pbw; else goto u4Pbx;
       u4Pbw: // global
           if (_c4Pal::P64 < 2) goto c4Pah; else goto c4Pai;
       c4Pah: // global
           I64[Sp + 8] = block_c4Par_info;
           R1 = _s4OPE::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4PbI; else goto c4Pat;
       u4PbI: // global
           call _c4Par(R1) args: 0, res: 0, upd: 0;
       c4Pat: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c4Pai: // global
           I64[Sp + 8] = block_c4PaO_info;
           R1 = _s4OPE::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4PbJ; else goto c4PaQ;
       u4PbJ: // global
           call _c4PaO(R1) args: 0, res: 0, upd: 0;
       c4PaQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u4Pbx: // global
           if (_c4Pal::P64 < 4) goto c4Paj; else goto c4Pak;
       c4Paj: // global
           I64[Sp + 8] = block_c4Pb7_info;
           R1 = _s4OPE::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4PbK; else goto c4Pb9;
       u4PbK: // global
           call _c4Pb7(R1) args: 0, res: 0, upd: 0;
       c4Pb9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c4Pak: // global
           I64[Sp + 8] = block_c4Pbm_info;
           R1 = _s4OPE::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4PbL; else goto c4Pbo;
       u4PbL: // global
           call _c4Pbm() args: 0, res: 0, upd: 0;
       c4Pbo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Pad_info" {
     block_c4Pad_info:
         const _c4Pad;
         const 1;
         const 30;
 },
 _c4Par() //  [R1]
         { []
         }
     {offset
       c4Par: // global
           _c4Pbv::P64 = R1 & 7;
           if (_c4Pbv::P64 < 2) goto u4PbA; else goto u4Pby;
       u4PbA: // global
           Sp = Sp + 8;
           call _c4Pbf() args: 0, res: 0, upd: 0;
       u4Pby: // global
           if (_c4Pbv::P64 != 3) goto u4PbC; else goto u4PbC;
       u4PbC: // global
           Sp = Sp + 8;
           call _c4Pbj() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4Par_info" {
     block_c4Par_info:
         const _c4Par;
         const 0;
         const 30;
 },
 _c4PaO() //  [R1]
         { []
         }
     {offset
       c4PaO: // global
           _c4Pbu::P64 = R1 & 7;
           if (_c4Pbu::P64 != 3) goto u4Pbz; else goto u4PbD;
       u4Pbz: // global
           if (_c4Pbu::P64 != 4) goto u4PbF; else goto u4PbE;
       u4PbF: // global
           Sp = Sp + 8;
           call _c4Pbf() args: 0, res: 0, upd: 0;
       u4PbE: // global
           Sp = Sp + 8;
           goto u4PbQ;
       u4PbD: // global
           Sp = Sp + 8;
           goto u4PbQ;
       u4PbQ: // global
           call _c4Pbj() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4PaO_info" {
     block_c4PaO_info:
         const _c4PaO;
         const 0;
         const 30;
 },
 _c4Pb7() //  [R1]
         { []
         }
     {offset
       c4Pb7: // global
           if (R1 & 7 == 4) goto u4PbG; else goto u4PbH;
       u4PbG: // global
           Sp = Sp + 8;
           call _c4Pbj() args: 0, res: 0, upd: 0;
       u4PbH: // global
           Sp = Sp + 8;
           call _c4Pbf() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4Pb7_info" {
     block_c4Pb7_info:
         const _c4Pb7;
         const 0;
         const 30;
 },
 _c4Pbj() //  []
         { []
         }
     {offset
       c4Pbj: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c4Pbf() //  []
         { []
         }
     {offset
       c4Pbf: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c4Pbm() //  []
         { []
         }
     {offset
       c4Pbm: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Pbm_info" {
     block_c4Pbm_info:
         const _c4Pbm;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:44.804595396 UTC

[section ""data" . GHC.IO.IOMode.$fOrdIOMode_$c<=_closure" {
     GHC.IO.IOMode.$fOrdIOMode_$c<=_closure:
         const GHC.IO.IOMode.$fOrdIOMode_$c<=_info;
 },
 GHC.IO.IOMode.$fOrdIOMode_$c<=_entry() //  [R2, R3]
         { []
         }
     {offset
       c4PcQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4PcR; else goto c4PcS;
       c4PcR: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.IOMode.$fOrdIOMode_$c<=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4PcS: // global
           I64[Sp - 16] = block_c4PcH_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4Peg; else goto c4PcI;
       u4Peg: // global
           call _c4PcH(R1) args: 0, res: 0, upd: 0;
       c4PcI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fOrdIOMode_$c<=_info" {
     GHC.IO.IOMode.$fOrdIOMode_$c<=_info:
         const GHC.IO.IOMode.$fOrdIOMode_$c<=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c4PcH() //  [R1]
         { []
         }
     {offset
       c4PcH: // global
           _s4OPK::P64 = P64[Sp + 8];
           _c4PcP::P64 = R1 & 7;
           if (_c4PcP::P64 < 3) goto u4Pe0; else goto u4Pe1;
       u4Pe0: // global
           if (_c4PcP::P64 < 2) goto c4PcL; else goto c4PcM;
       c4PcL: // global
           I64[Sp + 8] = block_c4PcV_info;
           R1 = _s4OPK::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4Pec; else goto c4PcX;
       u4Pec: // global
           call _c4PcV(R1) args: 0, res: 0, upd: 0;
       c4PcX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c4PcM: // global
           I64[Sp + 8] = block_c4Pdi_info;
           R1 = _s4OPK::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4Ped; else goto c4Pdk;
       u4Ped: // global
           call _c4Pdi(R1) args: 0, res: 0, upd: 0;
       c4Pdk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u4Pe1: // global
           if (_c4PcP::P64 < 4) goto c4PcN; else goto c4PcO;
       c4PcN: // global
           I64[Sp + 8] = block_c4PdB_info;
           R1 = _s4OPK::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4Pee; else goto c4PdD;
       u4Pee: // global
           call _c4PdB(R1) args: 0, res: 0, upd: 0;
       c4PdD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c4PcO: // global
           I64[Sp + 8] = block_c4PdQ_info;
           R1 = _s4OPK::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4Pef; else goto c4PdS;
       u4Pef: // global
           call _c4PdQ() args: 0, res: 0, upd: 0;
       c4PdS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4PcH_info" {
     block_c4PcH_info:
         const _c4PcH;
         const 1;
         const 30;
 },
 _c4PcV() //  [R1]
         { []
         }
     {offset
       c4PcV: // global
           _c4PdZ::P64 = R1 & 7;
           if (_c4PdZ::P64 < 2) goto u4Pe4; else goto u4Pe2;
       u4Pe4: // global
           Sp = Sp + 8;
           call _c4PdJ() args: 0, res: 0, upd: 0;
       u4Pe2: // global
           if (_c4PdZ::P64 != 3) goto u4Pe6; else goto u4Pe6;
       u4Pe6: // global
           Sp = Sp + 8;
           call _c4PdN() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4PcV_info" {
     block_c4PcV_info:
         const _c4PcV;
         const 0;
         const 30;
 },
 _c4Pdi() //  [R1]
         { []
         }
     {offset
       c4Pdi: // global
           _c4PdY::P64 = R1 & 7;
           if (_c4PdY::P64 != 3) goto u4Pe3; else goto u4Pe7;
       u4Pe3: // global
           if (_c4PdY::P64 != 4) goto u4Pe9; else goto u4Pe8;
       u4Pe9: // global
           Sp = Sp + 8;
           call _c4PdJ() args: 0, res: 0, upd: 0;
       u4Pe8: // global
           Sp = Sp + 8;
           goto u4Pek;
       u4Pe7: // global
           Sp = Sp + 8;
           goto u4Pek;
       u4Pek: // global
           call _c4PdN() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4Pdi_info" {
     block_c4Pdi_info:
         const _c4Pdi;
         const 0;
         const 30;
 },
 _c4PdB() //  [R1]
         { []
         }
     {offset
       c4PdB: // global
           if (R1 & 7 == 4) goto u4Pea; else goto u4Peb;
       u4Pea: // global
           Sp = Sp + 8;
           call _c4PdN() args: 0, res: 0, upd: 0;
       u4Peb: // global
           Sp = Sp + 8;
           call _c4PdJ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4PdB_info" {
     block_c4PdB_info:
         const _c4PdB;
         const 0;
         const 30;
 },
 _c4PdN() //  []
         { []
         }
     {offset
       c4PdN: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c4PdJ() //  []
         { []
         }
     {offset
       c4PdJ: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c4PdQ() //  []
         { []
         }
     {offset
       c4PdQ: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4PdQ_info" {
     block_c4PdQ_info:
         const _c4PdQ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:44.82083411 UTC

[section ""data" . GHC.IO.IOMode.$fOrdIOMode_$cmax_closure" {
     GHC.IO.IOMode.$fOrdIOMode_$cmax_closure:
         const GHC.IO.IOMode.$fOrdIOMode_$cmax_info;
 },
 GHC.IO.IOMode.$fOrdIOMode_$cmax_entry() //  [R2, R3]
         { []
         }
     {offset
       c4Pfk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Pfl; else goto c4Pfm;
       c4Pfl: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.IOMode.$fOrdIOMode_$cmax_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4Pfm: // global
           I64[Sp - 16] = block_c4Pfb_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4Pgj; else goto c4Pfc;
       u4Pgj: // global
           call _c4Pfb(R1) args: 0, res: 0, upd: 0;
       c4Pfc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fOrdIOMode_$cmax_info" {
     GHC.IO.IOMode.$fOrdIOMode_$cmax_info:
         const GHC.IO.IOMode.$fOrdIOMode_$cmax_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c4Pfb() //  [R1]
         { []
         }
     {offset
       c4Pfb: // global
           _s4OPR::P64 = P64[Sp + 8];
           _c4Pfj::P64 = R1 & 7;
           if (_c4Pfj::P64 < 3) goto u4Pg9; else goto u4Pga;
       u4Pg9: // global
           if (_c4Pfj::P64 < 2) goto c4Pff; else goto c4Pfg;
       c4Pff: // global
           R1 = _s4OPR::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c4Pfg: // global
           I64[Sp + 8] = block_c4Pfs_info;
           R1 = _s4OPR::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4Pgg; else goto c4Pfu;
       u4Pgg: // global
           call _c4Pfs(R1) args: 0, res: 0, upd: 0;
       c4Pfu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u4Pga: // global
           if (_c4Pfj::P64 < 4) goto c4Pfh; else goto c4Pfi;
       c4Pfh: // global
           I64[Sp + 8] = block_c4PfL_info;
           R1 = _s4OPR::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4Pgh; else goto c4PfN;
       u4Pgh: // global
           call _c4PfL(R1) args: 0, res: 0, upd: 0;
       c4PfN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c4Pfi: // global
           I64[Sp + 8] = block_c4Pg0_info;
           R1 = _s4OPR::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4Pgi; else goto c4Pg2;
       u4Pgi: // global
           call _c4Pg0() args: 0, res: 0, upd: 0;
       c4Pg2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Pfb_info" {
     block_c4Pfb_info:
         const _c4Pfb;
         const 1;
         const 30;
 },
 _c4Pfs() //  [R1]
         { []
         }
     {offset
       c4Pfs: // global
           _c4Pg8::P64 = R1 & 7;
           if (_c4Pg8::P64 != 3) goto u4Pgb; else goto u4Pgc;
       u4Pgb: // global
           if (_c4Pg8::P64 != 4) goto c4PfA; else goto u4Pgd;
       c4PfA: // global
           R1 = GHC.IO.IOMode.WriteMode_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u4Pgd: // global
           Sp = Sp + 8;
           call _c4PfX() args: 0, res: 0, upd: 0;
       u4Pgc: // global
           Sp = Sp + 8;
           call _c4PfT() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4Pfs_info" {
     block_c4Pfs_info:
         const _c4Pfs;
         const 0;
         const 30;
 },
 _c4PfL() //  [R1]
         { []
         }
     {offset
       c4PfL: // global
           if (R1 & 7 == 4) goto u4Pge; else goto u4Pgf;
       u4Pge: // global
           Sp = Sp + 8;
           call _c4PfX() args: 0, res: 0, upd: 0;
       u4Pgf: // global
           Sp = Sp + 8;
           call _c4PfT() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4PfL_info" {
     block_c4PfL_info:
         const _c4PfL;
         const 0;
         const 30;
 },
 _c4PfX() //  []
         { []
         }
     {offset
       c4PfX: // global
           R1 = GHC.IO.IOMode.ReadWriteMode_closure+4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c4PfT() //  []
         { []
         }
     {offset
       c4PfT: // global
           R1 = GHC.IO.IOMode.AppendMode_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c4Pg0() //  []
         { []
         }
     {offset
       c4Pg0: // global
           R1 = GHC.IO.IOMode.ReadWriteMode_closure+4;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Pg0_info" {
     block_c4Pg0_info:
         const _c4Pg0;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:44.83525384 UTC

[section ""data" . GHC.IO.IOMode.$fOrdIOMode_$c>=_closure" {
     GHC.IO.IOMode.$fOrdIOMode_$c>=_closure:
         const GHC.IO.IOMode.$fOrdIOMode_$c>=_info;
 },
 GHC.IO.IOMode.$fOrdIOMode_$c>=_entry() //  [R2, R3]
         { []
         }
     {offset
       c4Phe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Phf; else goto c4Phg;
       c4Phf: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.IOMode.$fOrdIOMode_$c>=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4Phg: // global
           I64[Sp - 16] = block_c4Ph5_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4PiE; else goto c4Ph6;
       u4PiE: // global
           call _c4Ph5(R1) args: 0, res: 0, upd: 0;
       c4Ph6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fOrdIOMode_$c>=_info" {
     GHC.IO.IOMode.$fOrdIOMode_$c>=_info:
         const GHC.IO.IOMode.$fOrdIOMode_$c>=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c4Ph5() //  [R1]
         { []
         }
     {offset
       c4Ph5: // global
           _s4OPY::P64 = P64[Sp + 8];
           _c4Phd::P64 = R1 & 7;
           if (_c4Phd::P64 < 3) goto u4Pio; else goto u4Pip;
       u4Pio: // global
           if (_c4Phd::P64 < 2) goto c4Ph9; else goto c4Pha;
       c4Ph9: // global
           I64[Sp + 8] = block_c4Phj_info;
           R1 = _s4OPY::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4PiA; else goto c4Phl;
       u4PiA: // global
           call _c4Phj(R1) args: 0, res: 0, upd: 0;
       c4Phl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c4Pha: // global
           I64[Sp + 8] = block_c4PhG_info;
           R1 = _s4OPY::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4PiB; else goto c4PhI;
       u4PiB: // global
           call _c4PhG(R1) args: 0, res: 0, upd: 0;
       c4PhI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u4Pip: // global
           if (_c4Phd::P64 < 4) goto c4Phb; else goto c4Phc;
       c4Phb: // global
           I64[Sp + 8] = block_c4PhZ_info;
           R1 = _s4OPY::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4PiC; else goto c4Pi1;
       u4PiC: // global
           call _c4PhZ(R1) args: 0, res: 0, upd: 0;
       c4Pi1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c4Phc: // global
           I64[Sp + 8] = block_c4Pie_info;
           R1 = _s4OPY::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4PiD; else goto c4Pig;
       u4PiD: // global
           call _c4Pie() args: 0, res: 0, upd: 0;
       c4Pig: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Ph5_info" {
     block_c4Ph5_info:
         const _c4Ph5;
         const 1;
         const 30;
 },
 _c4Phj() //  [R1]
         { []
         }
     {offset
       c4Phj: // global
           _c4Pin::P64 = R1 & 7;
           if (_c4Pin::P64 < 2) goto u4Pis; else goto u4Piq;
       u4Pis: // global
           Sp = Sp + 8;
           call _c4Pi7() args: 0, res: 0, upd: 0;
       u4Piq: // global
           if (_c4Pin::P64 != 3) goto u4Piu; else goto u4Piu;
       u4Piu: // global
           Sp = Sp + 8;
           call _c4Pib() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4Phj_info" {
     block_c4Phj_info:
         const _c4Phj;
         const 0;
         const 30;
 },
 _c4PhG() //  [R1]
         { []
         }
     {offset
       c4PhG: // global
           _c4Pim::P64 = R1 & 7;
           if (_c4Pim::P64 != 3) goto u4Pir; else goto u4Piv;
       u4Pir: // global
           if (_c4Pim::P64 != 4) goto u4Pix; else goto u4Piw;
       u4Pix: // global
           Sp = Sp + 8;
           call _c4Pi7() args: 0, res: 0, upd: 0;
       u4Piw: // global
           Sp = Sp + 8;
           goto u4PiI;
       u4Piv: // global
           Sp = Sp + 8;
           goto u4PiI;
       u4PiI: // global
           call _c4Pib() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4PhG_info" {
     block_c4PhG_info:
         const _c4PhG;
         const 0;
         const 30;
 },
 _c4PhZ() //  [R1]
         { []
         }
     {offset
       c4PhZ: // global
           if (R1 & 7 == 4) goto u4Piy; else goto u4Piz;
       u4Piy: // global
           Sp = Sp + 8;
           call _c4Pib() args: 0, res: 0, upd: 0;
       u4Piz: // global
           Sp = Sp + 8;
           call _c4Pi7() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4PhZ_info" {
     block_c4PhZ_info:
         const _c4PhZ;
         const 0;
         const 30;
 },
 _c4Pib() //  []
         { []
         }
     {offset
       c4Pib: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c4Pi7() //  []
         { []
         }
     {offset
       c4Pi7: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c4Pie() //  []
         { []
         }
     {offset
       c4Pie: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Pie_info" {
     block_c4Pie_info:
         const _c4Pie;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:44.850094654 UTC

[section ""data" . GHC.IO.IOMode.$fOrdIOMode_$c>_closure" {
     GHC.IO.IOMode.$fOrdIOMode_$c>_closure:
         const GHC.IO.IOMode.$fOrdIOMode_$c>_info;
 },
 GHC.IO.IOMode.$fOrdIOMode_$c>_entry() //  [R2, R3]
         { []
         }
     {offset
       c4Pjz: // global
           _s4OQ5::P64 = R3;
           R3 = R2;
           R2 = _s4OQ5::P64;
           call GHC.IO.IOMode.$fOrdIOMode_$c<_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fOrdIOMode_$c>_info" {
     GHC.IO.IOMode.$fOrdIOMode_$c>_info:
         const GHC.IO.IOMode.$fOrdIOMode_$c>_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:44.855614455 UTC

[section ""data" . GHC.IO.IOMode.$fOrdIOMode_$cmin_closure" {
     GHC.IO.IOMode.$fOrdIOMode_$cmin_closure:
         const GHC.IO.IOMode.$fOrdIOMode_$cmin_info;
 },
 GHC.IO.IOMode.$fOrdIOMode_$cmin_entry() //  [R2, R3]
         { []
         }
     {offset
       c4PjT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4PjU; else goto c4PjV;
       c4PjU: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.IOMode.$fOrdIOMode_$cmin_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4PjV: // global
           I64[Sp - 16] = block_c4PjK_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4PkO; else goto c4PjL;
       u4PkO: // global
           call _c4PjK(R1) args: 0, res: 0, upd: 0;
       c4PjL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fOrdIOMode_$cmin_info" {
     GHC.IO.IOMode.$fOrdIOMode_$cmin_info:
         const GHC.IO.IOMode.$fOrdIOMode_$cmin_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c4PjK() //  [R1]
         { []
         }
     {offset
       c4PjK: // global
           _s4OQ6::P64 = P64[Sp + 8];
           _c4PjS::P64 = R1 & 7;
           if (_c4PjS::P64 < 3) goto u4PkI; else goto u4PkJ;
       u4PkI: // global
           if (_c4PjS::P64 < 2) goto c4PjO; else goto c4PjP;
       c4PjO: // global
           I64[Sp + 8] = block_c4PjY_info;
           R1 = _s4OQ6::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4PkL; else goto c4Pk0;
       u4PkL: // global
           call _c4PjY() args: 0, res: 0, upd: 0;
       c4Pk0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c4PjP: // global
           I64[Sp + 8] = block_c4Pk7_info;
           R1 = _s4OQ6::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4PkM; else goto c4Pk9;
       u4PkM: // global
           call _c4Pk7(R1) args: 0, res: 0, upd: 0;
       c4Pk9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u4PkJ: // global
           if (_c4PjS::P64 < 4) goto c4PjQ; else goto c4PjR;
       c4PjQ: // global
           I64[Sp + 8] = block_c4Pkq_info;
           R1 = _s4OQ6::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4PkN; else goto c4Pks;
       u4PkN: // global
           call _c4Pkq(R1) args: 0, res: 0, upd: 0;
       c4Pks: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c4PjR: // global
           R1 = _s4OQ6::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4PjK_info" {
     block_c4PjK_info:
         const _c4PjK;
         const 1;
         const 30;
 },
 _c4PjY() //  []
         { []
         }
     {offset
       c4PjY: // global
           R1 = GHC.IO.IOMode.ReadMode_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4PjY_info" {
     block_c4PjY_info:
         const _c4PjY;
         const 0;
         const 30;
 },
 _c4Pk7() //  [R1]
         { []
         }
     {offset
       c4Pk7: // global
           _c4PkH::P64 = R1 & 7;
           if (_c4PkH::P64 == 3) goto c4Pkn; else goto u4PkK;
       u4PkK: // global
           if (_c4PkH::P64 == 4) goto c4Pkn; else goto c4Pkf;
       c4Pkn: // global
           R1 = GHC.IO.IOMode.WriteMode_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4Pkf: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Pk7_info" {
     block_c4Pk7_info:
         const _c4Pk7;
         const 0;
         const 30;
 },
 _c4Pkq() //  [R1]
         { []
         }
     {offset
       c4Pkq: // global
           if (R1 & 7 == 4) goto c4PkC; else goto c4Pky;
       c4PkC: // global
           R1 = GHC.IO.IOMode.AppendMode_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4Pky: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Pkq_info" {
     block_c4Pkq_info:
         const _c4Pkq;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:44.866259922 UTC

[section ""data" . GHC.IO.IOMode.$fOrdIOMode_closure" {
     GHC.IO.IOMode.$fOrdIOMode_closure:
         const GHC.Classes.C:Ord_con_info;
         const GHC.IO.IOMode.$fEqIOMode_closure+1;
         const GHC.IO.IOMode.$fOrdIOMode_$ccompare_closure+2;
         const GHC.IO.IOMode.$fOrdIOMode_$c<_closure+2;
         const GHC.IO.IOMode.$fOrdIOMode_$c<=_closure+2;
         const GHC.IO.IOMode.$fOrdIOMode_$c>_closure+2;
         const GHC.IO.IOMode.$fOrdIOMode_$c>=_closure+2;
         const GHC.IO.IOMode.$fOrdIOMode_$cmax_closure+2;
         const GHC.IO.IOMode.$fOrdIOMode_$cmin_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:44.872101736 UTC

[section ""data" . GHC.IO.IOMode.$w$cunsafeIndex_closure" {
     GHC.IO.IOMode.$w$cunsafeIndex_closure:
         const GHC.IO.IOMode.$w$cunsafeIndex_info;
 },
 GHC.IO.IOMode.$w$cunsafeIndex_entry() //  [R2, R3]
         { []
         }
     {offset
       c4PlF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4PlG; else goto c4PlH;
       c4PlG: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.IOMode.$w$cunsafeIndex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4PlH: // global
           I64[Sp - 16] = block_c4Plw_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4PnI; else goto c4Plx;
       u4PnI: // global
           call _c4Plw(R1) args: 0, res: 0, upd: 0;
       c4Plx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$w$cunsafeIndex_info" {
     GHC.IO.IOMode.$w$cunsafeIndex_info:
         const GHC.IO.IOMode.$w$cunsafeIndex_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c4Plw() //  [R1]
         { []
         }
     {offset
       c4Plw: // global
           _s4OQd::P64 = P64[Sp + 8];
           _c4PlE::P64 = R1 & 7;
           if (_c4PlE::P64 < 3) goto u4Png; else goto u4Pnh;
       u4Png: // global
           if (_c4PlE::P64 < 2) goto c4PlA; else goto c4PlB;
       c4PlA: // global
           I64[Sp + 8] = block_c4PlK_info;
           R1 = _s4OQd::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4PnE; else goto c4PlM;
       u4PnE: // global
           call _c4PlK(R1) args: 0, res: 0, upd: 0;
       c4PlM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c4PlB: // global
           I64[Sp + 8] = block_c4Pm7_info;
           R1 = _s4OQd::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4PnF; else goto c4Pm9;
       u4PnF: // global
           call _c4Pm7(R1) args: 0, res: 0, upd: 0;
       c4Pm9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u4Pnh: // global
           if (_c4PlE::P64 < 4) goto c4PlC; else goto c4PlD;
       c4PlC: // global
           I64[Sp + 8] = block_c4Pmu_info;
           R1 = _s4OQd::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4PnG; else goto c4Pmw;
       u4PnG: // global
           call _c4Pmu(R1) args: 0, res: 0, upd: 0;
       c4Pmw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c4PlD: // global
           I64[Sp + 8] = block_c4PmR_info;
           R1 = _s4OQd::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4PnH; else goto c4PmT;
       u4PnH: // global
           call _c4PmR(R1) args: 0, res: 0, upd: 0;
       c4PmT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Plw_info" {
     block_c4Plw_info:
         const _c4Plw;
         const 1;
         const 30;
 },
 _c4PlK() //  [R1]
         { []
         }
     {offset
       c4PlK: // global
           _c4Pnf::P64 = R1 & 7;
           if (_c4Pnf::P64 < 3) goto u4Pni; else goto u4Pnj;
       u4Pni: // global
           if (_c4Pnf::P64 < 2) goto u4Pnr; else goto u4Pnq;
       u4Pnr: // global
           Sp = Sp + 8;
           call _c4Pnb() args: 0, res: 0, upd: 0;
       u4Pnq: // global
           Sp = Sp + 8;
           call _c4PmO() args: 0, res: 0, upd: 0;
       u4Pnj: // global
           if (_c4Pnf::P64 < 4) goto u4Pns; else goto c4Pm4;
       u4Pns: // global
           Sp = Sp + 8;
           call _c4Pmr() args: 0, res: 0, upd: 0;
       c4Pm4: // global
           R1 = 3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4PlK_info" {
     block_c4PlK_info:
         const _c4PlK;
         const 0;
         const 30;
 },
 _c4Pm7() //  [R1]
         { []
         }
     {offset
       c4Pm7: // global
           _c4Pne::P64 = R1 & 7;
           if (_c4Pne::P64 < 3) goto u4Pnk; else goto u4Pnl;
       u4Pnk: // global
           if (_c4Pne::P64 < 2) goto u4Pnu; else goto u4Pnt;
       u4Pnu: // global
           Sp = Sp + 8;
           call _c4Pn7() args: 0, res: 0, upd: 0;
       u4Pnt: // global
           Sp = Sp + 8;
           call _c4Pnb() args: 0, res: 0, upd: 0;
       u4Pnl: // global
           if (_c4Pne::P64 < 4) goto u4Pnw; else goto u4Pnv;
       u4Pnw: // global
           Sp = Sp + 8;
           call _c4PmO() args: 0, res: 0, upd: 0;
       u4Pnv: // global
           Sp = Sp + 8;
           call _c4Pmr() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4Pm7_info" {
     block_c4Pm7_info:
         const _c4Pm7;
         const 0;
         const 30;
 },
 _c4Pmr() //  []
         { []
         }
     {offset
       c4Pmr: // global
           R1 = 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c4Pmu() //  [R1]
         { []
         }
     {offset
       c4Pmu: // global
           _c4Pnd::P64 = R1 & 7;
           if (_c4Pnd::P64 < 3) goto u4Pnm; else goto u4Pnn;
       u4Pnm: // global
           if (_c4Pnd::P64 < 2) goto u4Pny; else goto u4Pnx;
       u4Pny: // global
           Sp = Sp + 8;
           call _c4Pn3() args: 0, res: 0, upd: 0;
       u4Pnx: // global
           Sp = Sp + 8;
           call _c4Pn7() args: 0, res: 0, upd: 0;
       u4Pnn: // global
           if (_c4Pnd::P64 < 4) goto u4PnA; else goto u4Pnz;
       u4PnA: // global
           Sp = Sp + 8;
           call _c4Pnb() args: 0, res: 0, upd: 0;
       u4Pnz: // global
           Sp = Sp + 8;
           call _c4PmO() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4Pmu_info" {
     block_c4Pmu_info:
         const _c4Pmu;
         const 0;
         const 30;
 },
 _c4PmO() //  []
         { []
         }
     {offset
       c4PmO: // global
           R1 = 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c4PmR() //  [R1]
         { []
         }
     {offset
       c4PmR: // global
           _c4Pnc::P64 = R1 & 7;
           if (_c4Pnc::P64 < 3) goto u4Pno; else goto u4Pnp;
       u4Pno: // global
           if (_c4Pnc::P64 < 2) goto c4PmZ; else goto u4PnB;
       c4PmZ: // global
           R1 = (-3);
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u4PnB: // global
           Sp = Sp + 8;
           call _c4Pn3() args: 0, res: 0, upd: 0;
       u4Pnp: // global
           if (_c4Pnc::P64 < 4) goto u4PnD; else goto u4PnC;
       u4PnD: // global
           Sp = Sp + 8;
           call _c4Pn7() args: 0, res: 0, upd: 0;
       u4PnC: // global
           Sp = Sp + 8;
           call _c4Pnb() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4PmR_info" {
     block_c4PmR_info:
         const _c4PmR;
         const 0;
         const 30;
 },
 _c4Pn3() //  []
         { []
         }
     {offset
       c4Pn3: // global
           R1 = (-2);
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c4Pn7() //  []
         { []
         }
     {offset
       c4Pn7: // global
           R1 = (-1);
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c4Pnb() //  []
         { []
         }
     {offset
       c4Pnb: // global
           R1 = 0;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:44.8903928 UTC

[section ""data" . GHC.IO.IOMode.$fIxIOMode_$cunsafeIndex_closure" {
     GHC.IO.IOMode.$fIxIOMode_$cunsafeIndex_closure:
         const GHC.IO.IOMode.$fIxIOMode_$cunsafeIndex_info;
 },
 GHC.IO.IOMode.$fIxIOMode_$cunsafeIndex_entry() //  [R2, R3]
         { []
         }
     {offset
       c4PoU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Pp2; else goto c4Pp3;
       c4Pp2: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.IOMode.$fIxIOMode_$cunsafeIndex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4Pp3: // global
           I64[Sp - 16] = block_c4PoR_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4Pp8; else goto c4PoS;
       u4Pp8: // global
           call _c4PoR(R1) args: 0, res: 0, upd: 0;
       c4PoS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fIxIOMode_$cunsafeIndex_info" {
     GHC.IO.IOMode.$fIxIOMode_$cunsafeIndex_info:
         const GHC.IO.IOMode.$fIxIOMode_$cunsafeIndex_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c4PoR() //  [R1]
         { []
         }
     {offset
       c4PoR: // global
           _s4OQk::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c4PoX_info;
           R3 = _s4OQk::P64;
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.IO.IOMode.$w$cunsafeIndex_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4PoR_info" {
     block_c4PoR_info:
         const _c4PoR;
         const 1;
         const 30;
 },
 _c4PoX() //  [R1]
         { []
         }
     {offset
       c4PoX: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4Pp7; else goto c4Pp6;
       c4Pp7: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c4Pp6: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4PoX_info" {
     block_c4PoX_info:
         const _c4PoX;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:44.900308297 UTC

[section ""data" . GHC.IO.IOMode.$w$cinRange_closure" {
     GHC.IO.IOMode.$w$cinRange_closure:
         const GHC.IO.IOMode.$w$cinRange_info;
 },
 GHC.IO.IOMode.$w$cinRange_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c4PpE: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4PpF; else goto c4PpG;
       c4PpF: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.IOMode.$w$cinRange_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c4PpG: // global
           I64[Sp - 24] = block_c4Ppv_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u4Prm; else goto c4Ppw;
       u4Prm: // global
           call _c4Ppv(R1) args: 0, res: 0, upd: 0;
       c4Ppw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$w$cinRange_info" {
     GHC.IO.IOMode.$w$cinRange_info:
         const GHC.IO.IOMode.$w$cinRange_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c4Ppv() //  [R1]
         { []
         }
     {offset
       c4Ppv: // global
           _s4OQq::P64 = P64[Sp + 8];
           _c4PpD::P64 = R1 & 7;
           if (_c4PpD::P64 < 3) goto u4Prf; else goto u4Prg;
       u4Prf: // global
           if (_c4PpD::P64 < 2) goto c4Ppz; else goto c4PpA;
       c4Ppz: // global
           _s4OQt::I64 = 0;
           goto s4OQs;
       c4PpA: // global
           _s4OQt::I64 = 1;
           goto s4OQs;
       u4Prg: // global
           if (_c4PpD::P64 < 4) goto c4PpB; else goto c4PpC;
       c4PpB: // global
           _s4OQt::I64 = 2;
           goto s4OQs;
       c4PpC: // global
           _s4OQt::I64 = 3;
           goto s4OQs;
       s4OQs: // global
           I64[Sp] = block_c4PpM_info;
           R1 = _s4OQq::P64;
           I64[Sp + 8] = _s4OQt::I64;
           if (R1 & 7 != 0) goto u4Prl; else goto c4Pqw;
       u4Prl: // global
           call _c4PpM(R1) args: 0, res: 0, upd: 0;
       c4Pqw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Ppv_info" {
     block_c4Ppv_info:
         const _c4Ppv;
         const 2;
         const 30;
 },
 _c4PpM() //  [R1]
         { []
         }
     {offset
       c4PpM: // global
           _s4OQr::P64 = P64[Sp + 16];
           _c4Pr1::P64 = R1 & 7;
           if (_c4Pr1::P64 < 3) goto u4Prh; else goto u4Pri;
       u4Prh: // global
           if (_c4Pr1::P64 < 2) goto c4PqC; else goto c4PqG;
       c4PqC: // global
           _s4OQv::I64 = 0;
           goto s4OQu;
       c4PqG: // global
           _s4OQv::I64 = 1;
           goto s4OQu;
       u4Pri: // global
           if (_c4Pr1::P64 < 4) goto c4PqK; else goto c4PqO;
       c4PqK: // global
           _s4OQv::I64 = 2;
           goto s4OQu;
       c4PqO: // global
           _s4OQv::I64 = 3;
           goto s4OQu;
       s4OQu: // global
           I64[Sp] = block_c4PpR_info;
           R1 = _s4OQr::P64;
           I64[Sp + 16] = _s4OQv::I64;
           if (R1 & 7 != 0) goto u4Prn; else goto c4PpT;
       u4Prn: // global
           call _c4PpR(R1) args: 0, res: 0, upd: 0;
       c4PpT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4PpM_info" {
     block_c4PpM_info:
         const _c4PpM;
         const 66;
         const 30;
 },
 _c4PpR() //  [R1]
         { []
         }
     {offset
       c4PpR: // global
           _s4OQt::I64 = I64[Sp + 8];
           _s4OQv::I64 = I64[Sp + 16];
           _c4Pr2::P64 = R1 & 7;
           if (_c4Pr2::P64 < 3) goto u4Prj; else goto u4Prk;
       u4Prj: // global
           if (_c4Pr2::P64 < 2) goto c4Pq4; else goto c4Pqd;
       c4Pq4: // global
           if (%MO_S_Lt_W64(0, _s4OQt::I64)) goto c4Pqt; else goto c4Pq2;
       c4Pq2: // global
           R1 = I64[(%MO_S_Le_W64(0,
                                  _s4OQv::I64) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4Pqd: // global
           if (%MO_S_Lt_W64(1, _s4OQt::I64)) goto c4Pqt; else goto c4Pqc;
       c4Pqc: // global
           R1 = I64[(%MO_S_Le_W64(1,
                                  _s4OQv::I64) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u4Prk: // global
           if (_c4Pr2::P64 < 4) goto c4Pqm; else goto c4Pqv;
       c4Pqm: // global
           if (%MO_S_Lt_W64(2, _s4OQt::I64)) goto c4Pqt; else goto c4Pql;
       c4Pql: // global
           R1 = I64[(%MO_S_Le_W64(2,
                                  _s4OQv::I64) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4Pqv: // global
           if (%MO_S_Lt_W64(3, _s4OQt::I64)) goto c4Pqt; else goto c4Pqu;
       c4Pqt: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4Pqu: // global
           R1 = I64[(%MO_S_Le_W64(3,
                                  _s4OQv::I64) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4PpR_info" {
     block_c4PpR_info:
         const _c4PpR;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:44.911157121 UTC

[section ""data" . GHC.IO.IOMode.$fIxIOMode_$cinRange_closure" {
     GHC.IO.IOMode.$fIxIOMode_$cinRange_closure:
         const GHC.IO.IOMode.$fIxIOMode_$cinRange_info;
 },
 GHC.IO.IOMode.$fIxIOMode_$cinRange_entry() //  [R2, R3]
         { []
         }
     {offset
       c4Psa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Psb; else goto c4Psc;
       c4Psb: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.IOMode.$fIxIOMode_$cinRange_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4Psc: // global
           I64[Sp - 16] = block_c4Ps7_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4Psg; else goto c4Ps8;
       u4Psg: // global
           call _c4Ps7(R1) args: 0, res: 0, upd: 0;
       c4Ps8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fIxIOMode_$cinRange_info" {
     GHC.IO.IOMode.$fIxIOMode_$cinRange_info:
         const GHC.IO.IOMode.$fIxIOMode_$cinRange_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c4Ps7() //  [R1]
         { []
         }
     {offset
       c4Ps7: // global
           R4 = P64[Sp + 8];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call GHC.IO.IOMode.$w$cinRange_entry(R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Ps7_info" {
     block_c4Ps7_info:
         const _c4Ps7;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:44.916049908 UTC

[section ""data" . lvl_r4KYL_closure" {
     lvl_r4KYL_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:44.917702477 UTC

[section ""data" . lvl1_r4KYM_closure" {
     lvl1_r4KYM_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:44.919379532 UTC

[section ""data" . lvl2_r4KYN_closure" {
     lvl2_r4KYN_closure:
         const GHC.Types.I#_con_info;
         const 2;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:44.921062741 UTC

[section ""data" . lvl3_r4KYO_closure" {
     lvl3_r4KYO_closure:
         const GHC.Types.I#_con_info;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:44.924478482 UTC

[section ""data" . GHC.IO.IOMode.$fEnumIOMode_$cfromEnum_closure" {
     GHC.IO.IOMode.$fEnumIOMode_$cfromEnum_closure:
         const GHC.IO.IOMode.$fEnumIOMode_$cfromEnum_info;
 },
 GHC.IO.IOMode.$fEnumIOMode_$cfromEnum_entry() //  [R2]
         { []
         }
     {offset
       c4PsI: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c4PsJ; else goto c4PsK;
       c4PsJ: // global
           R2 = R2;
           R1 = GHC.IO.IOMode.$fEnumIOMode_$cfromEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4PsK: // global
           I64[Sp - 8] = block_c4Psz_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u4PsZ; else goto c4PsA;
       u4PsZ: // global
           call _c4Psz(R1) args: 0, res: 0, upd: 0;
       c4PsA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fEnumIOMode_$cfromEnum_info" {
     GHC.IO.IOMode.$fEnumIOMode_$cfromEnum_info:
         const GHC.IO.IOMode.$fEnumIOMode_$cfromEnum_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c4Psz() //  [R1]
         { []
         }
     {offset
       c4Psz: // global
           _c4PsH::P64 = R1 & 7;
           if (_c4PsH::P64 < 3) goto u4PsX; else goto u4PsY;
       u4PsX: // global
           if (_c4PsH::P64 < 2) goto c4PsD; else goto c4PsE;
       c4PsD: // global
           R1 = lvl_r4KYL_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4PsE: // global
           R1 = lvl1_r4KYM_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u4PsY: // global
           if (_c4PsH::P64 < 4) goto c4PsF; else goto c4PsG;
       c4PsF: // global
           R1 = lvl2_r4KYN_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4PsG: // global
           R1 = lvl3_r4KYO_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Psz_info" {
     block_c4Psz_info:
         const _c4Psz;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:44.931337618 UTC

[section ""data" . GHC.IO.IOMode.$fIxIOMode_go2_closure" {
     GHC.IO.IOMode.$fIxIOMode_go2_closure:
         const GHC.IO.IOMode.$fIxIOMode_go2_info;
 },
 sat_s4OQS_entry() //  [R1]
         { []
         }
     {offset
       c4Ptr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Pts; else goto c4Ptt;
       c4Pts: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Ptt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4OQQ::I64 = I64[R1 + 16];
           if (_s4OQQ::I64 != 0) goto c4Ptp; else goto c4Ptq;
       c4Ptp: // global
           R2 = _s4OQQ::I64 + 1;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$fIxIOMode_go2_entry(R2) args: 24, res: 0, upd: 24;
       c4Ptq: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OQS_info" {
     sat_s4OQS_info:
         const sat_s4OQS_entry;
         const 4294967296;
         const 17;
 },
 sat_s4OQP_entry() //  [R1]
         { []
         }
     {offset
       c4PtA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4PtB; else goto c4PtC;
       c4PtB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4PtC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OQP_info" {
     sat_s4OQP_info:
         const sat_s4OQP_entry;
         const 4294967296;
         const 17;
 },
 GHC.IO.IOMode.$fIxIOMode_go2_entry() //  [R2]
         { []
         }
     {offset
       c4PtE: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c4PtI; else goto c4PtH;
       c4PtI: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.IO.IOMode.$fIxIOMode_go2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4PtH: // global
           I64[Hp - 64] = sat_s4OQS_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s4OQP_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fIxIOMode_go2_info" {
     GHC.IO.IOMode.$fIxIOMode_go2_info:
         const GHC.IO.IOMode.$fIxIOMode_go2_entry;
         const 0;
         const 14;
         const 4294967300;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:44.94119214 UTC

[section ""data" . GHC.IO.IOMode.$fIxIOMode_go1_closure" {
     GHC.IO.IOMode.$fIxIOMode_go1_closure:
         const GHC.IO.IOMode.$fIxIOMode_go1_info;
 },
 sat_s4OQX_entry() //  [R1]
         { []
         }
     {offset
       c4Puk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Pul; else goto c4Pum;
       c4Pul: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Pum: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4OQV::I64 = I64[R1 + 16];
           if (_s4OQV::I64 != 1) goto c4Pui; else goto c4Puj;
       c4Pui: // global
           R2 = _s4OQV::I64 + 1;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$fIxIOMode_go1_entry(R2) args: 24, res: 0, upd: 24;
       c4Puj: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OQX_info" {
     sat_s4OQX_info:
         const sat_s4OQX_entry;
         const 4294967296;
         const 17;
 },
 sat_s4OQU_entry() //  [R1]
         { []
         }
     {offset
       c4Put: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Puu; else goto c4Puv;
       c4Puu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Puv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OQU_info" {
     sat_s4OQU_info:
         const sat_s4OQU_entry;
         const 4294967296;
         const 17;
 },
 GHC.IO.IOMode.$fIxIOMode_go1_entry() //  [R2]
         { []
         }
     {offset
       c4Pux: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c4PuB; else goto c4PuA;
       c4PuB: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.IO.IOMode.$fIxIOMode_go1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4PuA: // global
           I64[Hp - 64] = sat_s4OQX_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s4OQU_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fIxIOMode_go1_info" {
     GHC.IO.IOMode.$fIxIOMode_go1_info:
         const GHC.IO.IOMode.$fIxIOMode_go1_entry;
         const 0;
         const 14;
         const 4294967300;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:44.953403998 UTC

[section ""data" . GHC.IO.IOMode.$fIxIOMode_go_closure" {
     GHC.IO.IOMode.$fIxIOMode_go_closure:
         const GHC.IO.IOMode.$fIxIOMode_go_info;
 },
 sat_s4OR2_entry() //  [R1]
         { []
         }
     {offset
       c4Pvd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Pve; else goto c4Pvf;
       c4Pve: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Pvf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4OR0::I64 = I64[R1 + 16];
           if (_s4OR0::I64 != 2) goto c4Pvb; else goto c4Pvc;
       c4Pvb: // global
           R2 = _s4OR0::I64 + 1;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$fIxIOMode_go_entry(R2) args: 24, res: 0, upd: 24;
       c4Pvc: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OR2_info" {
     sat_s4OR2_info:
         const sat_s4OR2_entry;
         const 4294967296;
         const 17;
 },
 sat_s4OQZ_entry() //  [R1]
         { []
         }
     {offset
       c4Pvm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Pvn; else goto c4Pvo;
       c4Pvn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Pvo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OQZ_info" {
     sat_s4OQZ_info:
         const sat_s4OQZ_entry;
         const 4294967296;
         const 17;
 },
 GHC.IO.IOMode.$fIxIOMode_go_entry() //  [R2]
         { []
         }
     {offset
       c4Pvq: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c4Pvu; else goto c4Pvt;
       c4Pvu: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.IO.IOMode.$fIxIOMode_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4Pvt: // global
           I64[Hp - 64] = sat_s4OR2_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s4OQZ_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fIxIOMode_go_info" {
     GHC.IO.IOMode.$fIxIOMode_go_info:
         const GHC.IO.IOMode.$fIxIOMode_go_entry;
         const 0;
         const 14;
         const 4294967300;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:44.96359774 UTC

[section ""data" . GHC.IO.IOMode.$fEnumIOMode_go4_closure" {
     GHC.IO.IOMode.$fEnumIOMode_go4_closure:
         const GHC.IO.IOMode.$fEnumIOMode_go4_info;
 },
 sat_s4OR7_entry() //  [R1]
         { []
         }
     {offset
       c4Pw6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Pw7; else goto c4Pw8;
       c4Pw7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Pw8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4OR5::I64 = I64[R1 + 16];
           if (_s4OR5::I64 != 3) goto c4Pw4; else goto c4Pw5;
       c4Pw4: // global
           R2 = _s4OR5::I64 + 1;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$fEnumIOMode_go4_entry(R2) args: 24, res: 0, upd: 24;
       c4Pw5: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OR7_info" {
     sat_s4OR7_info:
         const sat_s4OR7_entry;
         const 4294967296;
         const 17;
 },
 sat_s4OR4_entry() //  [R1]
         { []
         }
     {offset
       c4Pwf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Pwg; else goto c4Pwh;
       c4Pwg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Pwh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OR4_info" {
     sat_s4OR4_info:
         const sat_s4OR4_entry;
         const 4294967296;
         const 17;
 },
 GHC.IO.IOMode.$fEnumIOMode_go4_entry() //  [R2]
         { []
         }
     {offset
       c4Pwj: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c4Pwn; else goto c4Pwm;
       c4Pwn: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.IO.IOMode.$fEnumIOMode_go4_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4Pwm: // global
           I64[Hp - 64] = sat_s4OR7_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s4OR4_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fEnumIOMode_go4_info" {
     GHC.IO.IOMode.$fEnumIOMode_go4_info:
         const GHC.IO.IOMode.$fEnumIOMode_go4_entry;
         const 0;
         const 14;
         const 4294967300;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:44.973400444 UTC

[section ""data" . GHC.IO.IOMode.$w$crange_closure" {
     GHC.IO.IOMode.$w$crange_closure:
         const GHC.IO.IOMode.$w$crange_info;
 },
 GHC.IO.IOMode.$w$crange_entry() //  [R2, R3]
         { []
         }
     {offset
       c4Px2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Px3; else goto c4Px4;
       c4Px3: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.IOMode.$w$crange_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4Px4: // global
           I64[Sp - 16] = block_c4PwT_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4Py5; else goto c4PwU;
       u4Py5: // global
           call _c4PwT(R1) args: 0, res: 0, upd: 0;
       c4PwU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$w$crange_info" {
     GHC.IO.IOMode.$w$crange_info:
         const GHC.IO.IOMode.$w$crange_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c4PwT() //  [R1]
         { []
         }
     {offset
       c4PwT: // global
           _s4OR9::P64 = P64[Sp + 8];
           _c4Px1::P64 = R1 & 7;
           if (_c4Px1::P64 < 3) goto u4Py0; else goto u4Py1;
       u4Py0: // global
           if (_c4Px1::P64 < 2) goto c4PwX; else goto c4PwY;
       c4PwX: // global
           _s4ORb::I64 = 0;
           goto s4ORa;
       c4PwY: // global
           _s4ORb::I64 = 1;
           goto s4ORa;
       u4Py1: // global
           if (_c4Px1::P64 < 4) goto c4PwZ; else goto c4Px0;
       c4PwZ: // global
           _s4ORb::I64 = 2;
           goto s4ORa;
       c4Px0: // global
           _s4ORb::I64 = 3;
           goto s4ORa;
       s4ORa: // global
           I64[Sp] = block_c4Px8_info;
           R1 = _s4OR9::P64;
           I64[Sp + 8] = _s4ORb::I64;
           if (R1 & 7 != 0) goto u4Py4; else goto c4Pxa;
       u4Py4: // global
           call _c4Px8(R1) args: 0, res: 0, upd: 0;
       c4Pxa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4PwT_info" {
     block_c4PwT_info:
         const _c4PwT;
         const 1;
         const 30;
 },
 _c4Px8() //  [R1]
         { []
         }
     {offset
       c4Px8: // global
           _s4ORb::I64 = I64[Sp + 8];
           _c4PxZ::P64 = R1 & 7;
           if (_c4PxZ::P64 < 3) goto u4Py2; else goto u4Py3;
       u4Py2: // global
           if (_c4PxZ::P64 < 2) goto c4Pxl; else goto c4Pxu;
       c4Pxl: // global
           if (%MO_S_Gt_W64(_s4ORb::I64, 0)) goto c4PxL; else goto c4Pxi;
       c4Pxi: // global
           R2 = _s4ORb::I64;
           Sp = Sp + 16;
           call GHC.IO.IOMode.$fIxIOMode_go2_entry(R2) args: 8, res: 0, upd: 8;
       c4Pxu: // global
           if (%MO_S_Gt_W64(_s4ORb::I64, 1)) goto c4PxL; else goto c4Pxs;
       c4Pxs: // global
           R2 = _s4ORb::I64;
           Sp = Sp + 16;
           call GHC.IO.IOMode.$fIxIOMode_go1_entry(R2) args: 8, res: 0, upd: 8;
       u4Py3: // global
           if (_c4PxZ::P64 < 4) goto c4PxD; else goto c4PxM;
       c4PxD: // global
           if (%MO_S_Gt_W64(_s4ORb::I64, 2)) goto c4PxL; else goto c4PxB;
       c4PxB: // global
           R2 = _s4ORb::I64;
           Sp = Sp + 16;
           call GHC.IO.IOMode.$fIxIOMode_go_entry(R2) args: 8, res: 0, upd: 8;
       c4PxM: // global
           if (%MO_S_Gt_W64(_s4ORb::I64, 3)) goto c4PxL; else goto c4PxK;
       c4PxL: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4PxK: // global
           R2 = _s4ORb::I64;
           Sp = Sp + 16;
           call GHC.IO.IOMode.$fEnumIOMode_go4_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Px8_info" {
     block_c4Px8_info:
         const _c4Px8;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:44.981967925 UTC

[section ""data" . GHC.IO.IOMode.$fIxIOMode_$crange_closure" {
     GHC.IO.IOMode.$fIxIOMode_$crange_closure:
         const GHC.IO.IOMode.$fIxIOMode_$crange_info;
 },
 GHC.IO.IOMode.$fIxIOMode_$crange_entry() //  [R2]
         { []
         }
     {offset
       c4Pyw: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c4Pyx; else goto c4Pyy;
       c4Pyx: // global
           R2 = R2;
           R1 = GHC.IO.IOMode.$fIxIOMode_$crange_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4Pyy: // global
           I64[Sp - 8] = block_c4Pyt_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u4PyC; else goto c4Pyu;
       u4PyC: // global
           call _c4Pyt(R1) args: 0, res: 0, upd: 0;
       c4Pyu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fIxIOMode_$crange_info" {
     GHC.IO.IOMode.$fIxIOMode_$crange_info:
         const GHC.IO.IOMode.$fIxIOMode_$crange_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c4Pyt() //  [R1]
         { []
         }
     {offset
       c4Pyt: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.IO.IOMode.$w$crange_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Pyt_info" {
     block_c4Pyt_info:
         const _c4Pyt;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:44.991004276 UTC

[section ""data" . GHC.IO.IOMode.$w$crangeSize_closure" {
     GHC.IO.IOMode.$w$crangeSize_closure:
         const GHC.IO.IOMode.$w$crangeSize_info;
 },
 GHC.IO.IOMode.$w$crangeSize_entry() //  [R2, R3]
         { []
         }
     {offset
       c4PyX: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4PyY; else goto c4PyZ;
       c4PyY: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.IOMode.$w$crangeSize_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4PyZ: // global
           I64[Sp - 24] = block_c4PyR_info;
           R4 = R3;
           _s4ORn::P64 = R3;
           R3 = R3;
           _s4ORm::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s4ORm::P64;
           P64[Sp - 8] = _s4ORn::P64;
           Sp = Sp - 24;
           call GHC.IO.IOMode.$w$cinRange_entry(R4,
                                                R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$w$crangeSize_info" {
     GHC.IO.IOMode.$w$crangeSize_info:
         const GHC.IO.IOMode.$w$crangeSize_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c4PyR() //  [R1]
         { []
         }
     {offset
       c4PyR: // global
           if (R1 & 7 == 1) goto u4PAX; else goto c4PyV;
       u4PAX: // global
           Sp = Sp + 24;
           call _c4PAD() args: 0, res: 0, upd: 0;
       c4PyV: // global
           _s4ORm::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c4Pz5_info;
           R1 = _s4ORm::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4PBc; else goto c4Pz7;
       u4PBc: // global
           call _c4Pz5(R1) args: 0, res: 0, upd: 0;
       c4Pz7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4PyR_info" {
     block_c4PyR_info:
         const _c4PyR;
         const 2;
         const 30;
 },
 _c4Pz5() //  [R1]
         { []
         }
     {offset
       c4Pz5: // global
           _s4ORn::P64 = P64[Sp + 8];
           _c4PAI::P64 = R1 & 7;
           if (_c4PAI::P64 < 3) goto u4PAN; else goto u4PAO;
       u4PAN: // global
           if (_c4PAI::P64 < 2) goto c4Pze; else goto c4PzC;
       c4Pze: // global
           I64[Sp + 8] = block_c4Pzb_info;
           R1 = _s4ORn::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4PBe; else goto c4Pzf;
       u4PBe: // global
           call _c4Pzb(R1) args: 0, res: 0, upd: 0;
       c4Pzf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c4PzC: // global
           I64[Sp + 8] = block_c4PzA_info;
           R1 = _s4ORn::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4PBf; else goto c4PzD;
       u4PBf: // global
           call _c4PzA(R1) args: 0, res: 0, upd: 0;
       c4PzD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u4PAO: // global
           if (_c4PAI::P64 < 4) goto c4PA0; else goto c4PAo;
       c4PA0: // global
           I64[Sp + 8] = block_c4PzY_info;
           R1 = _s4ORn::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4PBg; else goto c4PA1;
       u4PBg: // global
           call _c4PzY(R1) args: 0, res: 0, upd: 0;
       c4PA1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c4PAo: // global
           I64[Sp + 8] = block_c4PAm_info;
           R1 = _s4ORn::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4PBh; else goto c4PAp;
       u4PBh: // global
           call _c4PAm(R1) args: 0, res: 0, upd: 0;
       c4PAp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Pz5_info" {
     block_c4Pz5_info:
         const _c4Pz5;
         const 1;
         const 30;
 },
 _c4Pzb() //  [R1]
         { []
         }
     {offset
       c4Pzb: // global
           _c4PAM::P64 = R1 & 7;
           if (_c4PAM::P64 < 3) goto u4PAP; else goto u4PAQ;
       u4PAP: // global
           if (_c4PAM::P64 < 2) goto u4PAZ; else goto u4PAY;
       u4PAZ: // global
           Sp = Sp + 8;
           call _c4PAH() args: 0, res: 0, upd: 0;
       u4PAY: // global
           Sp = Sp + 8;
           call _c4PAj() args: 0, res: 0, upd: 0;
       u4PAQ: // global
           if (_c4PAM::P64 < 4) goto u4PB0; else goto c4Pzx;
       u4PB0: // global
           Sp = Sp + 8;
           call _c4PzV() args: 0, res: 0, upd: 0;
       c4Pzx: // global
           R1 = 4;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Pzb_info" {
     block_c4Pzb_info:
         const _c4Pzb;
         const 0;
         const 30;
 },
 _c4PzA() //  [R1]
         { []
         }
     {offset
       c4PzA: // global
           _c4PAL::P64 = R1 & 7;
           if (_c4PAL::P64 < 3) goto u4PAR; else goto u4PAS;
       u4PAR: // global
           if (_c4PAL::P64 < 2) goto u4PB2; else goto u4PB1;
       u4PB2: // global
           Sp = Sp + 8;
           call _c4PAD() args: 0, res: 0, upd: 0;
       u4PB1: // global
           Sp = Sp + 8;
           call _c4PAH() args: 0, res: 0, upd: 0;
       u4PAS: // global
           if (_c4PAL::P64 < 4) goto u4PB4; else goto u4PB3;
       u4PB4: // global
           Sp = Sp + 8;
           call _c4PAj() args: 0, res: 0, upd: 0;
       u4PB3: // global
           Sp = Sp + 8;
           call _c4PzV() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4PzA_info" {
     block_c4PzA_info:
         const _c4PzA;
         const 0;
         const 30;
 },
 _c4PzV() //  []
         { []
         }
     {offset
       c4PzV: // global
           R1 = 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c4PzY() //  [R1]
         { []
         }
     {offset
       c4PzY: // global
           _c4PAK::P64 = R1 & 7;
           if (_c4PAK::P64 < 3) goto u4PAT; else goto u4PAU;
       u4PAT: // global
           if (_c4PAK::P64 < 2) goto u4PB6; else goto u4PB5;
       u4PB6: // global
           Sp = Sp + 8;
           call _c4PAz() args: 0, res: 0, upd: 0;
       u4PB5: // global
           Sp = Sp + 8;
           call _c4PAD() args: 0, res: 0, upd: 0;
       u4PAU: // global
           if (_c4PAK::P64 < 4) goto u4PB8; else goto u4PB7;
       u4PB8: // global
           Sp = Sp + 8;
           call _c4PAH() args: 0, res: 0, upd: 0;
       u4PB7: // global
           Sp = Sp + 8;
           call _c4PAj() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4PzY_info" {
     block_c4PzY_info:
         const _c4PzY;
         const 0;
         const 30;
 },
 _c4PAj() //  []
         { []
         }
     {offset
       c4PAj: // global
           R1 = 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c4PAm() //  [R1]
         { []
         }
     {offset
       c4PAm: // global
           _c4PAJ::P64 = R1 & 7;
           if (_c4PAJ::P64 < 3) goto u4PAV; else goto u4PAW;
       u4PAV: // global
           if (_c4PAJ::P64 < 2) goto c4PAv; else goto u4PB9;
       c4PAv: // global
           R1 = (-2);
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u4PB9: // global
           Sp = Sp + 8;
           call _c4PAz() args: 0, res: 0, upd: 0;
       u4PAW: // global
           if (_c4PAJ::P64 < 4) goto u4PBb; else goto u4PBa;
       u4PBb: // global
           Sp = Sp + 8;
           call _c4PAD() args: 0, res: 0, upd: 0;
       u4PBa: // global
           Sp = Sp + 8;
           call _c4PAH() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4PAm_info" {
     block_c4PAm_info:
         const _c4PAm;
         const 0;
         const 30;
 },
 _c4PAz() //  []
         { []
         }
     {offset
       c4PAz: // global
           R1 = (-1);
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c4PAD() //  []
         { []
         }
     {offset
       c4PAD: // global
           R1 = 0;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c4PAH() //  []
         { []
         }
     {offset
       c4PAH: // global
           R1 = 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.009489039 UTC

[section ""data" . GHC.IO.IOMode.$fIxIOMode_$crangeSize_closure" {
     GHC.IO.IOMode.$fIxIOMode_$crangeSize_closure:
         const GHC.IO.IOMode.$fIxIOMode_$crangeSize_info;
 },
 GHC.IO.IOMode.$fIxIOMode_$crangeSize_entry() //  [R2]
         { []
         }
     {offset
       c4PCz: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c4PCH; else goto c4PCI;
       c4PCH: // global
           R2 = R2;
           R1 = GHC.IO.IOMode.$fIxIOMode_$crangeSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4PCI: // global
           I64[Sp - 8] = block_c4PCw_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u4PCN; else goto c4PCx;
       u4PCN: // global
           call _c4PCw(R1) args: 0, res: 0, upd: 0;
       c4PCx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fIxIOMode_$crangeSize_info" {
     GHC.IO.IOMode.$fIxIOMode_$crangeSize_info:
         const GHC.IO.IOMode.$fIxIOMode_$crangeSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c4PCw() //  [R1]
         { []
         }
     {offset
       c4PCw: // global
           I64[Sp] = block_c4PCC_info;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.IO.IOMode.$w$crangeSize_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4PCw_info" {
     block_c4PCw_info:
         const _c4PCw;
         const 0;
         const 30;
 },
 _c4PCC() //  [R1]
         { []
         }
     {offset
       c4PCC: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4PCM; else goto c4PCL;
       c4PCM: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c4PCL: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4PCC_info" {
     block_c4PCC_info:
         const _c4PCC;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.020149821 UTC

[section ""data" . GHC.IO.IOMode.$w$cunsafeRangeSize_closure" {
     GHC.IO.IOMode.$w$cunsafeRangeSize_closure:
         const GHC.IO.IOMode.$w$cunsafeRangeSize_info;
 },
 GHC.IO.IOMode.$w$cunsafeRangeSize_entry() //  [R2, R3]
         { []
         }
     {offset
       c4PDh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4PDi; else goto c4PDj;
       c4PDi: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.IOMode.$w$cunsafeRangeSize_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4PDj: // global
           I64[Sp - 16] = block_c4PD8_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4PFk; else goto c4PD9;
       u4PFk: // global
           call _c4PD8(R1) args: 0, res: 0, upd: 0;
       c4PD9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$w$cunsafeRangeSize_info" {
     GHC.IO.IOMode.$w$cunsafeRangeSize_info:
         const GHC.IO.IOMode.$w$cunsafeRangeSize_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c4PD8() //  [R1]
         { []
         }
     {offset
       c4PD8: // global
           _s4ORA::P64 = P64[Sp + 8];
           _c4PDg::P64 = R1 & 7;
           if (_c4PDg::P64 < 3) goto u4PES; else goto u4PET;
       u4PES: // global
           if (_c4PDg::P64 < 2) goto c4PDc; else goto c4PDd;
       c4PDc: // global
           I64[Sp + 8] = block_c4PDm_info;
           R1 = _s4ORA::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4PFg; else goto c4PDo;
       u4PFg: // global
           call _c4PDm(R1) args: 0, res: 0, upd: 0;
       c4PDo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c4PDd: // global
           I64[Sp + 8] = block_c4PDJ_info;
           R1 = _s4ORA::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4PFh; else goto c4PDL;
       u4PFh: // global
           call _c4PDJ(R1) args: 0, res: 0, upd: 0;
       c4PDL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u4PET: // global
           if (_c4PDg::P64 < 4) goto c4PDe; else goto c4PDf;
       c4PDe: // global
           I64[Sp + 8] = block_c4PE6_info;
           R1 = _s4ORA::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4PFi; else goto c4PE8;
       u4PFi: // global
           call _c4PE6(R1) args: 0, res: 0, upd: 0;
       c4PE8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c4PDf: // global
           I64[Sp + 8] = block_c4PEt_info;
           R1 = _s4ORA::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u4PFj; else goto c4PEv;
       u4PFj: // global
           call _c4PEt(R1) args: 0, res: 0, upd: 0;
       c4PEv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4PD8_info" {
     block_c4PD8_info:
         const _c4PD8;
         const 1;
         const 30;
 },
 _c4PDm() //  [R1]
         { []
         }
     {offset
       c4PDm: // global
           _c4PER::P64 = R1 & 7;
           if (_c4PER::P64 < 3) goto u4PEU; else goto u4PEV;
       u4PEU: // global
           if (_c4PER::P64 < 2) goto u4PF3; else goto u4PF2;
       u4PF3: // global
           Sp = Sp + 8;
           call _c4PEN() args: 0, res: 0, upd: 0;
       u4PF2: // global
           Sp = Sp + 8;
           call _c4PEq() args: 0, res: 0, upd: 0;
       u4PEV: // global
           if (_c4PER::P64 < 4) goto u4PF4; else goto c4PDG;
       u4PF4: // global
           Sp = Sp + 8;
           call _c4PE3() args: 0, res: 0, upd: 0;
       c4PDG: // global
           R1 = 4;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4PDm_info" {
     block_c4PDm_info:
         const _c4PDm;
         const 0;
         const 30;
 },
 _c4PDJ() //  [R1]
         { []
         }
     {offset
       c4PDJ: // global
           _c4PEQ::P64 = R1 & 7;
           if (_c4PEQ::P64 < 3) goto u4PEW; else goto u4PEX;
       u4PEW: // global
           if (_c4PEQ::P64 < 2) goto u4PF6; else goto u4PF5;
       u4PF6: // global
           Sp = Sp + 8;
           call _c4PEJ() args: 0, res: 0, upd: 0;
       u4PF5: // global
           Sp = Sp + 8;
           call _c4PEN() args: 0, res: 0, upd: 0;
       u4PEX: // global
           if (_c4PEQ::P64 < 4) goto u4PF8; else goto u4PF7;
       u4PF8: // global
           Sp = Sp + 8;
           call _c4PEq() args: 0, res: 0, upd: 0;
       u4PF7: // global
           Sp = Sp + 8;
           call _c4PE3() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4PDJ_info" {
     block_c4PDJ_info:
         const _c4PDJ;
         const 0;
         const 30;
 },
 _c4PE3() //  []
         { []
         }
     {offset
       c4PE3: // global
           R1 = 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c4PE6() //  [R1]
         { []
         }
     {offset
       c4PE6: // global
           _c4PEP::P64 = R1 & 7;
           if (_c4PEP::P64 < 3) goto u4PEY; else goto u4PEZ;
       u4PEY: // global
           if (_c4PEP::P64 < 2) goto u4PFa; else goto u4PF9;
       u4PFa: // global
           Sp = Sp + 8;
           call _c4PEF() args: 0, res: 0, upd: 0;
       u4PF9: // global
           Sp = Sp + 8;
           call _c4PEJ() args: 0, res: 0, upd: 0;
       u4PEZ: // global
           if (_c4PEP::P64 < 4) goto u4PFc; else goto u4PFb;
       u4PFc: // global
           Sp = Sp + 8;
           call _c4PEN() args: 0, res: 0, upd: 0;
       u4PFb: // global
           Sp = Sp + 8;
           call _c4PEq() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4PE6_info" {
     block_c4PE6_info:
         const _c4PE6;
         const 0;
         const 30;
 },
 _c4PEq() //  []
         { []
         }
     {offset
       c4PEq: // global
           R1 = 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c4PEt() //  [R1]
         { []
         }
     {offset
       c4PEt: // global
           _c4PEO::P64 = R1 & 7;
           if (_c4PEO::P64 < 3) goto u4PF0; else goto u4PF1;
       u4PF0: // global
           if (_c4PEO::P64 < 2) goto c4PEB; else goto u4PFd;
       c4PEB: // global
           R1 = (-2);
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u4PFd: // global
           Sp = Sp + 8;
           call _c4PEF() args: 0, res: 0, upd: 0;
       u4PF1: // global
           if (_c4PEO::P64 < 4) goto u4PFf; else goto u4PFe;
       u4PFf: // global
           Sp = Sp + 8;
           call _c4PEJ() args: 0, res: 0, upd: 0;
       u4PFe: // global
           Sp = Sp + 8;
           call _c4PEN() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4PEt_info" {
     block_c4PEt_info:
         const _c4PEt;
         const 0;
         const 30;
 },
 _c4PEF() //  []
         { []
         }
     {offset
       c4PEF: // global
           R1 = (-1);
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c4PEJ() //  []
         { []
         }
     {offset
       c4PEJ: // global
           R1 = 0;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c4PEN() //  []
         { []
         }
     {offset
       c4PEN: // global
           R1 = 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.037047045 UTC

[section ""data" . GHC.IO.IOMode.$fIxIOMode_$cunsafeRangeSize_closure" {
     GHC.IO.IOMode.$fIxIOMode_$cunsafeRangeSize_closure:
         const GHC.IO.IOMode.$fIxIOMode_$cunsafeRangeSize_info;
 },
 GHC.IO.IOMode.$fIxIOMode_$cunsafeRangeSize_entry() //  [R2]
         { []
         }
     {offset
       c4PGw: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c4PGE; else goto c4PGF;
       c4PGE: // global
           R2 = R2;
           R1 = GHC.IO.IOMode.$fIxIOMode_$cunsafeRangeSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4PGF: // global
           I64[Sp - 8] = block_c4PGt_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u4PGK; else goto c4PGu;
       u4PGK: // global
           call _c4PGt(R1) args: 0, res: 0, upd: 0;
       c4PGu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fIxIOMode_$cunsafeRangeSize_info" {
     GHC.IO.IOMode.$fIxIOMode_$cunsafeRangeSize_info:
         const GHC.IO.IOMode.$fIxIOMode_$cunsafeRangeSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c4PGt() //  [R1]
         { []
         }
     {offset
       c4PGt: // global
           I64[Sp] = block_c4PGz_info;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.IO.IOMode.$w$cunsafeRangeSize_entry(R3,
                                                        R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4PGt_info" {
     block_c4PGt_info:
         const _c4PGt;
         const 0;
         const 30;
 },
 _c4PGz() //  [R1]
         { []
         }
     {offset
       c4PGz: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4PGJ; else goto c4PGI;
       c4PGJ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c4PGI: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4PGz_info" {
     block_c4PGz_info:
         const _c4PGz;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.045116341 UTC

[section ""data" . GHC.IO.IOMode.$fIxIOMode_$cindex_closure" {
     GHC.IO.IOMode.$fIxIOMode_$cindex_closure:
         const GHC.IO.IOMode.$fIxIOMode_$cindex_info;
         const 0;
 },
 GHC.IO.IOMode.$fIxIOMode_$cindex_entry() //  [R2, R3]
         { []
         }
     {offset
       c4PH8: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4PH9; else goto c4PHa;
       c4PH9: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.IOMode.$fIxIOMode_$cindex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4PHa: // global
           I64[Sp - 16] = block_c4PH5_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4PHy; else goto c4PH6;
       u4PHy: // global
           call _c4PH5(R1) args: 0, res: 0, upd: 0;
       c4PH6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fIxIOMode_$cindex_info" {
     GHC.IO.IOMode.$fIxIOMode_$cindex_info:
         const GHC.IO.IOMode.$fIxIOMode_$cindex_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S4OYF_srt+120;
 },
 _c4PH5() //  [R1]
         { []
         }
     {offset
       c4PH5: // global
           I64[Sp - 8] = block_c4PHd_info;
           R4 = P64[Sp + 8];
           R3 = P64[R1 + 15];
           _s4ORO::P64 = P64[R1 + 7];
           R2 = _s4ORO::P64;
           P64[Sp] = _s4ORO::P64;
           Sp = Sp - 8;
           call GHC.IO.IOMode.$w$cinRange_entry(R4,
                                                R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4PH5_info" {
     block_c4PH5_info:
         const _c4PH5;
         const 1;
         const 4294967326;
         const S4OYF_srt+120;
 },
 _c4PHd() //  [R1]
         { []
         }
     {offset
       c4PHd: // global
           if (R1 & 7 == 1) goto c4PHk; else goto c4PHt;
       c4PHk: // global
           R1 = GHC.Arr.hopelessIndexError_closure;
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c4PHt: // global
           _s4ORM::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c4PHn_info;
           R3 = _s4ORM::P64;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.IO.IOMode.$w$cunsafeIndex_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4PHd_info" {
     block_c4PHd_info:
         const _c4PHd;
         const 2;
         const 4294967326;
         const S4OYF_srt+120;
 },
 _c4PHn() //  [R1]
         { []
         }
     {offset
       c4PHn: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4PHw; else goto c4PHv;
       c4PHw: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c4PHv: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4PHn_info" {
     block_c4PHn_info:
         const _c4PHn;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.053911236 UTC

[section ""data" . GHC.IO.IOMode.$fIxIOMode_closure" {
     GHC.IO.IOMode.$fIxIOMode_closure:
         const GHC.Arr.C:Ix_con_info;
         const GHC.IO.IOMode.$fOrdIOMode_closure+1;
         const GHC.IO.IOMode.$fIxIOMode_$crange_closure+1;
         const GHC.IO.IOMode.$fIxIOMode_$cindex_closure+2;
         const GHC.IO.IOMode.$fIxIOMode_$cunsafeIndex_closure+2;
         const GHC.IO.IOMode.$fIxIOMode_$cinRange_closure+2;
         const GHC.IO.IOMode.$fIxIOMode_$crangeSize_closure+1;
         const GHC.IO.IOMode.$fIxIOMode_$cunsafeRangeSize_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.055604434 UTC

[section ""cstring" . lvl4_r4KYP_bytes" {
     lvl4_r4KYP_bytes:
         I8[] [101,114,114,111,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.057990025 UTC

[section ""data" . lvl5_r4KYQ_closure" {
     lvl5_r4KYQ_closure:
         const lvl5_r4KYQ_info;
         const 0;
         const 0;
         const 0;
 },
 lvl5_r4KYQ_entry() //  [R1]
         { []
         }
     {offset
       c4PI4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4PI5; else goto c4PI6;
       c4PI5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4PI6: // global
           (_c4PI1::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4PI1::I64 == 0) goto c4PI3; else goto c4PI2;
       c4PI3: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c4PI2: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4PI1::I64;
           R2 = lvl4_r4KYP_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl5_r4KYQ_info" {
     lvl5_r4KYQ_info:
         const lvl5_r4KYQ_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.061532183 UTC

[section ""cstring" . GHC.IO.IOMode.$trModule4_bytes" {
     GHC.IO.IOMode.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.063866707 UTC

[section ""data" . lvl6_r4KYR_closure" {
     lvl6_r4KYR_closure:
         const lvl6_r4KYR_info;
         const 0;
         const 0;
         const 0;
 },
 lvl6_r4KYR_entry() //  [R1]
         { []
         }
     {offset
       c4PIm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4PIn; else goto c4PIo;
       c4PIn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4PIo: // global
           (_c4PIj::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4PIj::I64 == 0) goto c4PIl; else goto c4PIk;
       c4PIl: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c4PIk: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4PIj::I64;
           R2 = GHC.IO.IOMode.$trModule4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl6_r4KYR_info" {
     lvl6_r4KYR_info:
         const lvl6_r4KYR_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.067439951 UTC

[section ""cstring" . GHC.IO.IOMode.$trModule2_bytes" {
     GHC.IO.IOMode.$trModule2_bytes:
         I8[] [71,72,67,46,73,79,46,73,79,77,111,100,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.069825125 UTC

[section ""data" . lvl7_r4KYS_closure" {
     lvl7_r4KYS_closure:
         const lvl7_r4KYS_info;
         const 0;
         const 0;
         const 0;
 },
 lvl7_r4KYS_entry() //  [R1]
         { []
         }
     {offset
       c4PIE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4PIF; else goto c4PIG;
       c4PIF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4PIG: // global
           (_c4PIB::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4PIB::I64 == 0) goto c4PID; else goto c4PIC;
       c4PID: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c4PIC: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4PIB::I64;
           R2 = GHC.IO.IOMode.$trModule2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl7_r4KYS_info" {
     lvl7_r4KYS_info:
         const lvl7_r4KYS_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.073865139 UTC

[section ""cstring" . lvl8_r4KYT_bytes" {
     lvl8_r4KYT_bytes:
         I8[] [46,47,71,72,67,47,73,79,47,73,79,77,111,100,101,46,104,115]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.076142853 UTC

[section ""data" . lvl9_r4KYU_closure" {
     lvl9_r4KYU_closure:
         const lvl9_r4KYU_info;
         const 0;
         const 0;
         const 0;
 },
 lvl9_r4KYU_entry() //  [R1]
         { []
         }
     {offset
       c4PIW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4PIX; else goto c4PIY;
       c4PIX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4PIY: // global
           (_c4PIT::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4PIT::I64 == 0) goto c4PIV; else goto c4PIU;
       c4PIV: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c4PIU: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4PIT::I64;
           R2 = lvl8_r4KYT_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl9_r4KYU_info" {
     lvl9_r4KYU_info:
         const lvl9_r4KYU_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.079675394 UTC

[section ""data" . lvl10_r4KYV_closure" {
     lvl10_r4KYV_closure:
         const GHC.Types.I#_con_info;
         const 32;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.081368968 UTC

[section ""data" . lvl11_r4KYW_closure" {
     lvl11_r4KYW_closure:
         const GHC.Types.I#_con_info;
         const 36;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.083576754 UTC

[section ""data" . lvl12_r4KYX_closure" {
     lvl12_r4KYX_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl6_r4KYR_closure;
         const lvl7_r4KYS_closure;
         const lvl9_r4KYU_closure;
         const lvl10_r4KYV_closure+1;
         const lvl10_r4KYV_closure+1;
         const lvl10_r4KYV_closure+1;
         const lvl11_r4KYW_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.085496284 UTC

[section ""data" . lvl13_r4KYY_closure" {
     lvl13_r4KYY_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl5_r4KYQ_closure;
         const lvl12_r4KYX_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.087160869 UTC

[section ""cstring" . lvl14_r4KYZ_bytes" {
     lvl14_r4KYZ_bytes:
         I8[] [112,114,101,100,123,73,79,77,111,100,101,125,58,32,116,114,105,101,100,32,116,111,32,116,97,107,101,32,96,112,114,101,100,39,32,111,102,32,102,105,114,115,116,32,116,97,103,32,105,110,32,101,110,117,109,101,114,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.09013515 UTC

[section ""data" . GHC.IO.IOMode.$fEnumIOMode5_closure" {
     GHC.IO.IOMode.$fEnumIOMode5_closure:
         const GHC.IO.IOMode.$fEnumIOMode5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.IOMode.$fEnumIOMode5_entry() //  [R1]
         { []
         }
     {offset
       c4PJk: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4PJl; else goto c4PJm;
       c4PJl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4PJm: // global
           (_c4PJf::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4PJf::I64 == 0) goto c4PJh; else goto c4PJg;
       c4PJh: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c4PJg: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4PJf::I64;
           I64[Sp - 24] = block_c4PJi_info;
           R2 = lvl14_r4KYZ_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fEnumIOMode5_info" {
     GHC.IO.IOMode.$fEnumIOMode5_info:
         const GHC.IO.IOMode.$fEnumIOMode5_entry;
         const 0;
         const 12884901909;
         const S4OYF_srt+136;
 },
 _c4PJi() //  [R1]
         { []
         }
     {offset
       c4PJi: // global
           R3 = R1;
           R2 = lvl13_r4KYY_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c4PJi_info" {
     block_c4PJi_info:
         const _c4PJi;
         const 0;
         const 12884901918;
         const S4OYF_srt+136;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.096467431 UTC

[section ""data" . GHC.IO.IOMode.$fEnumIOMode_$cpred_closure" {
     GHC.IO.IOMode.$fEnumIOMode_$cpred_closure:
         const GHC.IO.IOMode.$fEnumIOMode_$cpred_info;
         const 0;
 },
 GHC.IO.IOMode.$fEnumIOMode_$cpred_entry() //  [R2]
         { []
         }
     {offset
       c4PJP: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c4PJQ; else goto c4PJR;
       c4PJQ: // global
           R2 = R2;
           R1 = GHC.IO.IOMode.$fEnumIOMode_$cpred_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4PJR: // global
           I64[Sp - 8] = block_c4PJG_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u4PK6; else goto c4PJH;
       u4PK6: // global
           call _c4PJG(R1) args: 0, res: 0, upd: 0;
       c4PJH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fEnumIOMode_$cpred_info" {
     GHC.IO.IOMode.$fEnumIOMode_$cpred_info:
         const GHC.IO.IOMode.$fEnumIOMode_$cpred_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S4OYF_srt+152;
 },
 _c4PJG() //  [R1]
         { []
         }
     {offset
       c4PJG: // global
           _c4PJO::P64 = R1 & 7;
           if (_c4PJO::P64 < 3) goto u4PK4; else goto u4PK5;
       u4PK4: // global
           if (_c4PJO::P64 < 2) goto c4PJK; else goto c4PJL;
       c4PJK: // global
           R1 = GHC.IO.IOMode.$fEnumIOMode5_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c4PJL: // global
           R1 = GHC.IO.IOMode.ReadMode_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u4PK5: // global
           if (_c4PJO::P64 < 4) goto c4PJM; else goto c4PJN;
       c4PJM: // global
           R1 = GHC.IO.IOMode.WriteMode_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4PJN: // global
           R1 = GHC.IO.IOMode.AppendMode_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4PJG_info" {
     block_c4PJG_info:
         const _c4PJG;
         const 0;
         const 4294967326;
         const S4OYF_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.102930327 UTC

[section ""cstring" . lvl15_r4KZ0_bytes" {
     lvl15_r4KZ0_bytes:
         I8[] [115,117,99,99,123,73,79,77,111,100,101,125,58,32,116,114,105,101,100,32,116,111,32,116,97,107,101,32,96,115,117,99,99,39,32,111,102,32,108,97,115,116,32,116,97,103,32,105,110,32,101,110,117,109,101,114,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.10560767 UTC

[section ""data" . GHC.IO.IOMode.$fEnumIOMode6_closure" {
     GHC.IO.IOMode.$fEnumIOMode6_closure:
         const GHC.IO.IOMode.$fEnumIOMode6_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.IOMode.$fEnumIOMode6_entry() //  [R1]
         { []
         }
     {offset
       c4PKv: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4PKw; else goto c4PKx;
       c4PKw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4PKx: // global
           (_c4PKq::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4PKq::I64 == 0) goto c4PKs; else goto c4PKr;
       c4PKs: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c4PKr: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4PKq::I64;
           I64[Sp - 24] = block_c4PKt_info;
           R2 = lvl15_r4KZ0_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fEnumIOMode6_info" {
     GHC.IO.IOMode.$fEnumIOMode6_info:
         const GHC.IO.IOMode.$fEnumIOMode6_entry;
         const 0;
         const 12884901909;
         const S4OYF_srt+136;
 },
 _c4PKt() //  [R1]
         { []
         }
     {offset
       c4PKt: // global
           R3 = R1;
           R2 = lvl13_r4KYY_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c4PKt_info" {
     block_c4PKt_info:
         const _c4PKt;
         const 0;
         const 12884901918;
         const S4OYF_srt+136;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.111857983 UTC

[section ""data" . GHC.IO.IOMode.$fEnumIOMode_$csucc_closure" {
     GHC.IO.IOMode.$fEnumIOMode_$csucc_closure:
         const GHC.IO.IOMode.$fEnumIOMode_$csucc_info;
         const 0;
 },
 GHC.IO.IOMode.$fEnumIOMode_$csucc_entry() //  [R2]
         { []
         }
     {offset
       c4PL0: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c4PL1; else goto c4PL2;
       c4PL1: // global
           R2 = R2;
           R1 = GHC.IO.IOMode.$fEnumIOMode_$csucc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4PL2: // global
           I64[Sp - 8] = block_c4PKR_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u4PLh; else goto c4PKS;
       u4PLh: // global
           call _c4PKR(R1) args: 0, res: 0, upd: 0;
       c4PKS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fEnumIOMode_$csucc_info" {
     GHC.IO.IOMode.$fEnumIOMode_$csucc_info:
         const GHC.IO.IOMode.$fEnumIOMode_$csucc_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S4OYF_srt+168;
 },
 _c4PKR() //  [R1]
         { []
         }
     {offset
       c4PKR: // global
           _c4PKZ::P64 = R1 & 7;
           if (_c4PKZ::P64 < 3) goto u4PLf; else goto u4PLg;
       u4PLf: // global
           if (_c4PKZ::P64 < 2) goto c4PKV; else goto c4PKW;
       c4PKV: // global
           R1 = GHC.IO.IOMode.WriteMode_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4PKW: // global
           R1 = GHC.IO.IOMode.AppendMode_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u4PLg: // global
           if (_c4PKZ::P64 < 4) goto c4PKX; else goto c4PKY;
       c4PKX: // global
           R1 = GHC.IO.IOMode.ReadWriteMode_closure+4;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4PKY: // global
           R1 = GHC.IO.IOMode.$fEnumIOMode6_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4PKR_info" {
     block_c4PKR_info:
         const _c4PKR;
         const 0;
         const 4294967326;
         const S4OYF_srt+176;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.117801549 UTC

[section ""cstring" . lvl16_r4KZ1_bytes" {
     lvl16_r4KZ1_bytes:
         I8[] [41,32,105,115,32,111,117,116,115,105,100,101,32,111,102,32,101,110,117,109,101,114,97,116,105,111,110,39,115,32,114,97,110,103,101,32,40,48,44]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.120025281 UTC

[section ""cstring" . lvl17_r4KZ2_bytes" {
     lvl17_r4KZ2_bytes:
         I8[] [41]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.122390058 UTC

[section ""data" . lvl18_r4KZ3_closure" {
     lvl18_r4KZ3_closure:
         const lvl18_r4KZ3_info;
         const 0;
         const 0;
         const 0;
 },
 lvl18_r4KZ3_entry() //  [R1]
         { []
         }
     {offset
       c4PLF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4PLG; else goto c4PLH;
       c4PLG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4PLH: // global
           (_c4PLC::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4PLC::I64 == 0) goto c4PLE; else goto c4PLD;
       c4PLE: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c4PLD: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4PLC::I64;
           R2 = lvl17_r4KZ2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl18_r4KZ3_info" {
     lvl18_r4KZ3_info:
         const lvl18_r4KZ3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.127102632 UTC

[section ""data" . lvl19_r4KZ4_closure" {
     lvl19_r4KZ4_closure:
         const lvl19_r4KZ4_info;
         const 0;
         const 0;
         const 0;
 },
 lvl19_r4KZ4_entry() //  [R1]
         { []
         }
     {offset
       c4PLZ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4PM0; else goto c4PM1;
       c4PM0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4PM1: // global
           (_c4PLT::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4PLT::I64 == 0) goto c4PLV; else goto c4PLU;
       c4PLV: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c4PLU: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4PLT::I64;
           I64[Sp - 24] = block_c4PLW_info;
           R4 = lvl18_r4KZ3_closure;
           R3 = 3;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl19_r4KZ4_info" {
     lvl19_r4KZ4_info:
         const lvl19_r4KZ4_entry;
         const 0;
         const 4294967317;
         const S4OYF_srt+184;
 },
 _c4PLW() //  [R1, R2]
         { []
         }
     {offset
       c4PLW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c4PM4; else goto c4PM3;
       c4PM4: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c4PM3: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c4PLW_info" {
     block_c4PLW_info:
         const _c4PLW;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.13334457 UTC

[section ""data" . lvl20_r4KZ5_closure" {
     lvl20_r4KZ5_closure:
         const lvl20_r4KZ5_info;
         const 0;
         const 0;
         const 0;
 },
 lvl20_r4KZ5_entry() //  [R1]
         { []
         }
     {offset
       c4PMp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4PMq; else goto c4PMr;
       c4PMq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4PMr: // global
           (_c4PMm::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4PMm::I64 == 0) goto c4PMo; else goto c4PMn;
       c4PMo: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c4PMn: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4PMm::I64;
           R3 = lvl19_r4KZ4_closure;
           R2 = lvl16_r4KZ1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl20_r4KZ5_info" {
     lvl20_r4KZ5_info:
         const lvl20_r4KZ5_entry;
         const 0;
         const 4294967317;
         const S4OYF_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.13694529 UTC

[section ""cstring" . lvl21_r4KZ6_bytes" {
     lvl21_r4KZ6_bytes:
         I8[] [116,111,69,110,117,109,123,73,79,77,111,100,101,125,58,32,116,97,103,32,40]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.140324945 UTC

[section ""data" . GHC.IO.IOMode.$wlvl_closure" {
     GHC.IO.IOMode.$wlvl_closure:
         const GHC.IO.IOMode.$wlvl_info;
         const 0;
 },
 sat_s4OS5_entry() //  [R1]
         { []
         }
     {offset
       c4PMM: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4PMN; else goto c4PMO;
       c4PMN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4PMO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c4PMJ_info;
           R4 = lvl20_r4KZ5_closure;
           R3 = I64[R1 + 16];
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OS5_info" {
     sat_s4OS5_info:
         const sat_s4OS5_entry;
         const 4294967296;
         const 4294967313;
         const S4OYF_srt+200;
 },
 _c4PMJ() //  [R1, R2]
         { []
         }
     {offset
       c4PMJ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c4PMR; else goto c4PMQ;
       c4PMR: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c4PMQ: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c4PMJ_info" {
     block_c4PMJ_info:
         const _c4PMJ;
         const 0;
         const 30;
 },
 GHC.IO.IOMode.$wlvl_entry() //  [R2]
         { []
         }
     {offset
       c4PMU: // global
           _s4OS1::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c4PMV; else goto c4PMW;
       c4PMW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c4PMY; else goto c4PMX;
       c4PMY: // global
           HpAlloc = 24;
           goto c4PMV;
       c4PMV: // global
           R2 = _s4OS1::I64;
           R1 = GHC.IO.IOMode.$wlvl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4PMX: // global
           I64[Hp - 16] = sat_s4OS5_info;
           I64[Hp] = _s4OS1::I64;
           I64[Sp - 8] = block_c4PMS_info;
           R3 = Hp - 16;
           R2 = lvl21_r4KZ6_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$wlvl_info" {
     GHC.IO.IOMode.$wlvl_info:
         const GHC.IO.IOMode.$wlvl_entry;
         const 0;
         const 3311419785230;
         const 4294967300;
         const S4OYF_srt+136;
 },
 _c4PMS() //  [R1]
         { []
         }
     {offset
       c4PMS: // global
           R3 = R1;
           R2 = lvl13_r4KYY_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4PMS_info" {
     block_c4PMS_info:
         const _c4PMS;
         const 0;
         const 12884901918;
         const S4OYF_srt+136;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.149764358 UTC

[section ""data" . GHC.IO.IOMode.$w$ctoEnum_closure" {
     GHC.IO.IOMode.$w$ctoEnum_closure:
         const GHC.IO.IOMode.$w$ctoEnum_info;
         const 0;
 },
 GHC.IO.IOMode.$w$ctoEnum_entry() //  [R2]
         { []
         }
     {offset
       c4PNw: // global
           _s4OS7::I64 = R2;
           if (%MO_S_Lt_W64(R2, 0)) goto c4PNE; else goto c4PNv;
       c4PNv: // global
           if (%MO_S_Gt_W64(_s4OS7::I64, 3)) goto c4PNE; else goto c4PNF;
       c4PNE: // global
           R2 = _s4OS7::I64;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
       c4PNF: // global
           R1 = I64[(_s4OS7::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$w$ctoEnum_info" {
     GHC.IO.IOMode.$w$ctoEnum_info:
         const GHC.IO.IOMode.$w$ctoEnum_entry;
         const 0;
         const 4294967310;
         const 4294967300;
         const S4OYF_srt+208;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.154461463 UTC

[section ""data" . GHC.IO.IOMode.$fEnumIOMode_$ctoEnum_closure" {
     GHC.IO.IOMode.$fEnumIOMode_$ctoEnum_closure:
         const GHC.IO.IOMode.$fEnumIOMode_$ctoEnum_info;
         const 0;
 },
 GHC.IO.IOMode.$fEnumIOMode_$ctoEnum_entry() //  [R2]
         { []
         }
     {offset
       c4PNU: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c4PNV; else goto c4PNW;
       c4PNV: // global
           R2 = R2;
           R1 = GHC.IO.IOMode.$fEnumIOMode_$ctoEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4PNW: // global
           I64[Sp - 8] = block_c4PNR_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u4PO0; else goto c4PNS;
       u4PO0: // global
           call _c4PNR(R1) args: 0, res: 0, upd: 0;
       c4PNS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fEnumIOMode_$ctoEnum_info" {
     GHC.IO.IOMode.$fEnumIOMode_$ctoEnum_info:
         const GHC.IO.IOMode.$fEnumIOMode_$ctoEnum_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S4OYF_srt+216;
 },
 _c4PNR() //  [R1]
         { []
         }
     {offset
       c4PNR: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.IO.IOMode.$w$ctoEnum_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4PNR_info" {
     block_c4PNR_info:
         const _c4PNR;
         const 0;
         const 4294967326;
         const S4OYF_srt+224;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.16064147 UTC

[section ""data" . GHC.IO.IOMode.$fEnumIOMode4_closure" {
     GHC.IO.IOMode.$fEnumIOMode4_closure:
         const GHC.IO.IOMode.$fEnumIOMode4_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.IOMode.$fEnumIOMode4_entry() //  [R1]
         { []
         }
     {offset
       c4POh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4POi; else goto c4POj;
       c4POi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4POj: // global
           (_c4POe::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4POe::I64 == 0) goto c4POg; else goto c4POf;
       c4POg: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c4POf: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4POe::I64;
           R2 = 0;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$fEnumIOMode_go4_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fEnumIOMode4_info" {
     GHC.IO.IOMode.$fEnumIOMode4_info:
         const GHC.IO.IOMode.$fEnumIOMode4_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.1649773 UTC

[section ""data" . GHC.IO.IOMode.$fEnumIOMode3_closure" {
     GHC.IO.IOMode.$fEnumIOMode3_closure:
         const GHC.IO.IOMode.$fEnumIOMode3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.IOMode.$fEnumIOMode3_entry() //  [R1]
         { []
         }
     {offset
       c4POy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4POz; else goto c4POA;
       c4POz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4POA: // global
           (_c4POv::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4POv::I64 == 0) goto c4POx; else goto c4POw;
       c4POx: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c4POw: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4POv::I64;
           R2 = 1;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$fEnumIOMode_go4_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fEnumIOMode3_info" {
     GHC.IO.IOMode.$fEnumIOMode3_info:
         const GHC.IO.IOMode.$fEnumIOMode3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.169748958 UTC

[section ""data" . GHC.IO.IOMode.$fEnumIOMode2_closure" {
     GHC.IO.IOMode.$fEnumIOMode2_closure:
         const GHC.IO.IOMode.$fEnumIOMode2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.IOMode.$fEnumIOMode2_entry() //  [R1]
         { []
         }
     {offset
       c4POP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4POQ; else goto c4POR;
       c4POQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4POR: // global
           (_c4POM::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4POM::I64 == 0) goto c4POO; else goto c4PON;
       c4POO: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c4PON: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4POM::I64;
           R2 = 2;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$fEnumIOMode_go4_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fEnumIOMode2_info" {
     GHC.IO.IOMode.$fEnumIOMode2_info:
         const GHC.IO.IOMode.$fEnumIOMode2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.174208557 UTC

[section ""data" . GHC.IO.IOMode.$fEnumIOMode1_closure" {
     GHC.IO.IOMode.$fEnumIOMode1_closure:
         const GHC.IO.IOMode.$fEnumIOMode1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.IOMode.$fEnumIOMode1_entry() //  [R1]
         { []
         }
     {offset
       c4PP6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4PP7; else goto c4PP8;
       c4PP7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4PP8: // global
           (_c4PP3::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4PP3::I64 == 0) goto c4PP5; else goto c4PP4;
       c4PP5: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c4PP4: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4PP3::I64;
           R2 = 3;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$fEnumIOMode_go4_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fEnumIOMode1_info" {
     GHC.IO.IOMode.$fEnumIOMode1_info:
         const GHC.IO.IOMode.$fEnumIOMode1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.179025454 UTC

[section ""data" . GHC.IO.IOMode.$fEnumIOMode_$cenumFrom_closure" {
     GHC.IO.IOMode.$fEnumIOMode_$cenumFrom_closure:
         const GHC.IO.IOMode.$fEnumIOMode_$cenumFrom_info;
         const 0;
 },
 GHC.IO.IOMode.$fEnumIOMode_$cenumFrom_entry() //  [R2]
         { []
         }
     {offset
       c4PPu: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c4PPv; else goto c4PPw;
       c4PPv: // global
           R2 = R2;
           R1 = GHC.IO.IOMode.$fEnumIOMode_$cenumFrom_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4PPw: // global
           I64[Sp - 8] = block_c4PPl_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u4PPL; else goto c4PPm;
       u4PPL: // global
           call _c4PPl(R1) args: 0, res: 0, upd: 0;
       c4PPm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fEnumIOMode_$cenumFrom_info" {
     GHC.IO.IOMode.$fEnumIOMode_$cenumFrom_info:
         const GHC.IO.IOMode.$fEnumIOMode_$cenumFrom_entry;
         const 0;
         const 133143986190;
         const 4294967301;
         const S4OYF_srt+232;
 },
 _c4PPl() //  [R1]
         { []
         }
     {offset
       c4PPl: // global
           _c4PPt::P64 = R1 & 7;
           if (_c4PPt::P64 < 3) goto u4PPJ; else goto u4PPK;
       u4PPJ: // global
           if (_c4PPt::P64 < 2) goto c4PPp; else goto c4PPq;
       c4PPp: // global
           R1 = GHC.IO.IOMode.$fEnumIOMode4_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c4PPq: // global
           R1 = GHC.IO.IOMode.$fEnumIOMode3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u4PPK: // global
           if (_c4PPt::P64 < 4) goto c4PPr; else goto c4PPs;
       c4PPr: // global
           R1 = GHC.IO.IOMode.$fEnumIOMode2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c4PPs: // global
           R1 = GHC.IO.IOMode.$fEnumIOMode1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4PPl_info" {
     block_c4PPl_info:
         const _c4PPl;
         const 0;
         const 64424509470;
         const S4OYF_srt+240;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.210215342 UTC

[section ""data" . GHC.IO.IOMode.$fEnumIOMode_$cenumFromThen_closure" {
     GHC.IO.IOMode.$fEnumIOMode_$cenumFromThen_closure:
         const GHC.IO.IOMode.$fEnumIOMode_$cenumFromThen_info;
 },
 sat_s4OSw_entry() //  [R1]
         { []
         }
     {offset
       c4PQM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4PQN; else goto c4PQO;
       c4PQN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4PQO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s4OSr_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OSw_info" {
     sat_s4OSw_info:
         const sat_s4OSw_entry;
         const 8589934593;
         const 15;
 },
 sat_s4OSu_entry() //  [R1]
         { []
         }
     {offset
       c4PQT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4PQU; else goto c4PQV;
       c4PQU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4PQV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OSu_info" {
     sat_s4OSu_info:
         const sat_s4OSu_entry;
         const 4294967296;
         const 17;
 },
 sat_s4OSx_entry() //  [R1]
         { []
         }
     {offset
       c4PR1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4PR2; else goto c4PR3;
       c4PR2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4PR3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OSx_info" {
     sat_s4OSx_info:
         const sat_s4OSx_entry;
         const 4294967296;
         const 17;
 },
 go_dn_s4OSr_entry() //  [R1, R2]
         { []
         }
     {offset
       c4PR7: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c4PRb; else goto c4PRa;
       c4PRb: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4PRa: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c4PR5; else goto c4PR6;
       c4PR5: // global
           _s4OSp::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s4OSw_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s4OSp::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s4OSu_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4PR6: // global
           I64[Hp - 80] = sat_s4OSx_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c4PRd::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c4PRd::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_s4OSr_info" {
     go_dn_s4OSr_info:
         const go_dn_s4OSr_entry;
         const 8589934592;
         const 13;
         const 4294967300;
 },
 sat_s4OSy_entry() //  [R1]
         { []
         }
     {offset
       c4PRe: // global
           _s4OSy::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c4PRf; else goto c4PRg;
       c4PRg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c4PRi; else goto c4PRh;
       c4PRi: // global
           HpAlloc = 24;
           goto c4PRf;
       c4PRf: // global
           R1 = _s4OSy::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4PRh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s4OSy::P64;
           _s4OSk::I64 = I64[_s4OSy::P64 + 24];
           _s4OSp::I64 = _s4OSk::I64 - I64[_s4OSy::P64 + 16];
           I64[Hp - 16] = go_dn_s4OSr_info;
           I64[Hp - 8] = _s4OSp::I64;
           I64[Hp] = 3 - _s4OSp::I64;
           R2 = _s4OSk::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s4OSr_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OSy_info" {
     sat_s4OSy_info:
         const sat_s4OSy_entry;
         const 8589934592;
         const 20;
 },
 sat_s4OSo_entry() //  [R1]
         { []
         }
     {offset
       c4PRn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4PRo; else goto c4PRp;
       c4PRo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4PRp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OSo_info" {
     sat_s4OSo_info:
         const sat_s4OSo_entry;
         const 4294967296;
         const 17;
 },
 sat_s4OSA_entry() //  [R1]
         { []
         }
     {offset
       c4PRy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4PRz; else goto c4PRA;
       c4PRz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4PRA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OSA_info" {
     sat_s4OSA_info:
         const sat_s4OSA_entry;
         const 4294967296;
         const 17;
 },
 sat_s4OSK_entry() //  [R1]
         { []
         }
     {offset
       c4PS3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4PS4; else goto c4PS5;
       c4PS4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4PS5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s4OSF_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OSK_info" {
     sat_s4OSK_info:
         const sat_s4OSK_entry;
         const 8589934593;
         const 15;
 },
 sat_s4OSI_entry() //  [R1]
         { []
         }
     {offset
       c4PSa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4PSb; else goto c4PSc;
       c4PSb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4PSc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OSI_info" {
     sat_s4OSI_info:
         const sat_s4OSI_entry;
         const 4294967296;
         const 17;
 },
 sat_s4OSL_entry() //  [R1]
         { []
         }
     {offset
       c4PSi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4PSj; else goto c4PSk;
       c4PSj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4PSk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OSL_info" {
     sat_s4OSL_info:
         const sat_s4OSL_entry;
         const 4294967296;
         const 17;
 },
 go_up_s4OSF_entry() //  [R1, R2]
         { []
         }
     {offset
       c4PSo: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c4PSs; else goto c4PSr;
       c4PSs: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4PSr: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c4PSm; else goto c4PSn;
       c4PSm: // global
           _s4OSD::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s4OSK_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s4OSD::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s4OSI_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4PSn: // global
           I64[Hp - 80] = sat_s4OSL_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c4PSu::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c4PSu::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_s4OSF_info" {
     go_up_s4OSF_info:
         const go_up_s4OSF_entry;
         const 8589934592;
         const 13;
         const 4294967300;
 },
 sat_s4OSM_entry() //  [R1]
         { []
         }
     {offset
       c4PSv: // global
           _s4OSM::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c4PSw; else goto c4PSx;
       c4PSx: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c4PSz; else goto c4PSy;
       c4PSz: // global
           HpAlloc = 24;
           goto c4PSw;
       c4PSw: // global
           R1 = _s4OSM::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4PSy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s4OSM::P64;
           _s4OSk::I64 = I64[_s4OSM::P64 + 24];
           _s4OSD::I64 = _s4OSk::I64 - I64[_s4OSM::P64 + 16];
           I64[Hp - 16] = go_up_s4OSF_info;
           I64[Hp - 8] = _s4OSD::I64;
           I64[Hp] = 3 - _s4OSD::I64;
           R2 = _s4OSk::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s4OSF_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OSM_info" {
     sat_s4OSM_info:
         const sat_s4OSM_entry;
         const 8589934592;
         const 20;
 },
 sat_s4OSC_entry() //  [R1]
         { []
         }
     {offset
       c4PSE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4PSF; else goto c4PSG;
       c4PSF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4PSG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OSC_info" {
     sat_s4OSC_info:
         const sat_s4OSC_entry;
         const 4294967296;
         const 17;
 },
 sat_s4OSO_entry() //  [R1]
         { []
         }
     {offset
       c4PSP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4PSQ; else goto c4PSR;
       c4PSQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4PSR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OSO_info" {
     sat_s4OSO_info:
         const sat_s4OSO_entry;
         const 4294967296;
         const 17;
 },
 sat_s4OSZ_entry() //  [R1]
         { []
         }
     {offset
       c4PTn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4PTo; else goto c4PTp;
       c4PTo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4PTp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s4OSU_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OSZ_info" {
     sat_s4OSZ_info:
         const sat_s4OSZ_entry;
         const 8589934593;
         const 15;
 },
 sat_s4OSX_entry() //  [R1]
         { []
         }
     {offset
       c4PTu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4PTv; else goto c4PTw;
       c4PTv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4PTw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OSX_info" {
     sat_s4OSX_info:
         const sat_s4OSX_entry;
         const 4294967296;
         const 17;
 },
 sat_s4OT0_entry() //  [R1]
         { []
         }
     {offset
       c4PTC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4PTD; else goto c4PTE;
       c4PTD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4PTE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OT0_info" {
     sat_s4OT0_info:
         const sat_s4OT0_entry;
         const 4294967296;
         const 17;
 },
 go_dn_s4OSU_entry() //  [R1, R2]
         { []
         }
     {offset
       c4PTI: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c4PTM; else goto c4PTL;
       c4PTM: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4PTL: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c4PTG; else goto c4PTH;
       c4PTG: // global
           _s4OSS::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s4OSZ_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s4OSS::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s4OSX_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4PTH: // global
           I64[Hp - 80] = sat_s4OT0_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c4PTO::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c4PTO::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_s4OSU_info" {
     go_dn_s4OSU_info:
         const go_dn_s4OSU_entry;
         const 8589934592;
         const 13;
         const 4294967300;
 },
 sat_s4OT1_entry() //  [R1]
         { []
         }
     {offset
       c4PTP: // global
           _s4OT1::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c4PTQ; else goto c4PTR;
       c4PTR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c4PTT; else goto c4PTS;
       c4PTT: // global
           HpAlloc = 24;
           goto c4PTQ;
       c4PTQ: // global
           R1 = _s4OT1::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4PTS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s4OT1::P64;
           _s4OSk::I64 = I64[_s4OT1::P64 + 24];
           _s4OSS::I64 = _s4OSk::I64 - I64[_s4OT1::P64 + 16];
           I64[Hp - 16] = go_dn_s4OSU_info;
           I64[Hp - 8] = _s4OSS::I64;
           I64[Hp] = 0 - _s4OSS::I64;
           R2 = _s4OSk::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s4OSU_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OT1_info" {
     sat_s4OT1_info:
         const sat_s4OT1_entry;
         const 8589934592;
         const 20;
 },
 sat_s4OSR_entry() //  [R1]
         { []
         }
     {offset
       c4PTY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4PTZ; else goto c4PU0;
       c4PTZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4PU0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OSR_info" {
     sat_s4OSR_info:
         const sat_s4OSR_entry;
         const 4294967296;
         const 17;
 },
 sat_s4OT3_entry() //  [R1]
         { []
         }
     {offset
       c4PU9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4PUa; else goto c4PUb;
       c4PUa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4PUb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OT3_info" {
     sat_s4OT3_info:
         const sat_s4OT3_entry;
         const 4294967296;
         const 17;
 },
 sat_s4OTd_entry() //  [R1]
         { []
         }
     {offset
       c4PUE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4PUF; else goto c4PUG;
       c4PUF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4PUG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s4OT8_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OTd_info" {
     sat_s4OTd_info:
         const sat_s4OTd_entry;
         const 8589934593;
         const 15;
 },
 sat_s4OTb_entry() //  [R1]
         { []
         }
     {offset
       c4PUL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4PUM; else goto c4PUN;
       c4PUM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4PUN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OTb_info" {
     sat_s4OTb_info:
         const sat_s4OTb_entry;
         const 4294967296;
         const 17;
 },
 sat_s4OTe_entry() //  [R1]
         { []
         }
     {offset
       c4PUT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4PUU; else goto c4PUV;
       c4PUU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4PUV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OTe_info" {
     sat_s4OTe_info:
         const sat_s4OTe_entry;
         const 4294967296;
         const 17;
 },
 go_up_s4OT8_entry() //  [R1, R2]
         { []
         }
     {offset
       c4PUZ: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c4PV3; else goto c4PV2;
       c4PV3: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4PV2: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c4PUX; else goto c4PUY;
       c4PUX: // global
           _s4OT6::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s4OTd_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s4OT6::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s4OTb_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4PUY: // global
           I64[Hp - 80] = sat_s4OTe_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c4PV5::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c4PV5::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_s4OT8_info" {
     go_up_s4OT8_info:
         const go_up_s4OT8_entry;
         const 8589934592;
         const 13;
         const 4294967300;
 },
 sat_s4OTf_entry() //  [R1]
         { []
         }
     {offset
       c4PV6: // global
           _s4OTf::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c4PV7; else goto c4PV8;
       c4PV8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c4PVa; else goto c4PV9;
       c4PVa: // global
           HpAlloc = 24;
           goto c4PV7;
       c4PV7: // global
           R1 = _s4OTf::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4PV9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s4OTf::P64;
           _s4OSk::I64 = I64[_s4OTf::P64 + 24];
           _s4OT6::I64 = _s4OSk::I64 - I64[_s4OTf::P64 + 16];
           I64[Hp - 16] = go_up_s4OT8_info;
           I64[Hp - 8] = _s4OT6::I64;
           I64[Hp] = 0 - _s4OT6::I64;
           R2 = _s4OSk::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s4OT8_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OTf_info" {
     sat_s4OTf_info:
         const sat_s4OTf_entry;
         const 8589934592;
         const 20;
 },
 sat_s4OT5_entry() //  [R1]
         { []
         }
     {offset
       c4PVf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4PVg; else goto c4PVh;
       c4PVg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4PVh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OT5_info" {
     sat_s4OT5_info:
         const sat_s4OT5_entry;
         const 4294967296;
         const 17;
 },
 sat_s4OTh_entry() //  [R1]
         { []
         }
     {offset
       c4PVq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4PVr; else goto c4PVs;
       c4PVr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4PVs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OTh_info" {
     sat_s4OTh_info:
         const sat_s4OTh_entry;
         const 4294967296;
         const 17;
 },
 GHC.IO.IOMode.$fEnumIOMode_$cenumFromThen_entry() //  [R2, R3]
         { []
         }
     {offset
       c4PVC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4PVD; else goto c4PVE;
       c4PVD: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.IOMode.$fEnumIOMode_$cenumFromThen_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4PVE: // global
           I64[Sp - 16] = block_c4PVt_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4PX6; else goto c4PVu;
       u4PX6: // global
           call _c4PVt(R1) args: 0, res: 0, upd: 0;
       c4PVu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fEnumIOMode_$cenumFromThen_info" {
     GHC.IO.IOMode.$fEnumIOMode_$cenumFromThen_info:
         const GHC.IO.IOMode.$fEnumIOMode_$cenumFromThen_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c4PVt() //  [R1]
         { []
         }
     {offset
       c4PVt: // global
           _s4OSg::P64 = P64[Sp + 8];
           _c4PVB::P64 = R1 & 7;
           if (_c4PVB::P64 < 3) goto u4PWV; else goto u4PWW;
       u4PWV: // global
           if (_c4PVB::P64 < 2) goto c4PVx; else goto c4PVy;
       c4PVx: // global
           _s4OSi::I64 = 0;
           goto s4OSh;
       c4PVy: // global
           _s4OSi::I64 = 1;
           goto s4OSh;
       u4PWW: // global
           if (_c4PVB::P64 < 4) goto c4PVz; else goto c4PVA;
       c4PVz: // global
           _s4OSi::I64 = 2;
           goto s4OSh;
       c4PVA: // global
           _s4OSi::I64 = 3;
           goto s4OSh;
       s4OSh: // global
           I64[Sp] = block_c4PVF_info;
           R1 = _s4OSg::P64;
           I64[Sp + 8] = _s4OSi::I64;
           if (R1 & 7 != 0) goto u4PX5; else goto c4PWp;
       u4PX5: // global
           call _c4PVF(R1) args: 0, res: 0, upd: 0;
       c4PWp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4PVt_info" {
     block_c4PVt_info:
         const _c4PVt;
         const 1;
         const 30;
 },
 _c4PVF() //  [R1]
         { []
         }
     {offset
       c4PVF: // global
           _c4PWU::P64 = R1 & 7;
           if (_c4PWU::P64 < 3) goto u4PWX; else goto u4PWY;
       u4PWX: // global
           if (_c4PWU::P64 < 2) goto c4PWv; else goto c4PWz;
       c4PWv: // global
           I64[Sp] = 0;
           goto u4PXa;
       c4PWz: // global
           I64[Sp] = 1;
           goto u4PXa;
       u4PWY: // global
           if (_c4PWU::P64 < 4) goto c4PWD; else goto c4PWH;
       c4PWD: // global
           I64[Sp] = 2;
           goto u4PXa;
       c4PWH: // global
           I64[Sp] = 3;
           goto u4PXa;
       u4PXa: // global
           call _c4PQd() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4PVF_info" {
     block_c4PVF_info:
         const _c4PVF;
         const 65;
         const 30;
 },
 _c4PQd() //  []
         { []
         }
     {offset
       c4PQd: // global
           Hp = Hp + 80;
           _s4OSk::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c4PVJ; else goto c4PVI;
       c4PVJ: // global
           HpAlloc = 80;
           I64[Sp] = block_c4PQc_info;
           R1 = _s4OSk::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c4PVI: // global
           _s4OSi::I64 = I64[Sp + 8];
           if (%MO_S_Le_W64(_s4OSi::I64,
                            _s4OSk::I64)) goto c4PW4; else goto c4PWo;
       c4PW4: // global
           if (%MO_S_Lt_W64(_s4OSk::I64,
                            _s4OSi::I64)) goto c4PVT; else goto c4PW2;
       c4PVT: // global
           if (%MO_S_Le_W64(3, _s4OSk::I64)) goto c4PVM; else goto c4PVR;
       c4PVM: // global
           I64[Hp - 72] = sat_s4OSy_info;
           I64[Hp - 56] = _s4OSi::I64;
           I64[Hp - 48] = _s4OSk::I64;
           I64[Hp - 40] = sat_s4OSo_info;
           I64[Hp - 24] = _s4OSi::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4PVR: // global
           if (%MO_S_Gt_W64(3, _s4OSi::I64)) goto c4PWl; else goto c4PVP;
       c4PVP: // global
           I64[Hp - 72] = sat_s4OSA_info;
           I64[Hp - 56] = _s4OSi::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c4PVN::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c4PVN::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4PW2: // global
           if (%MO_S_Ge_W64(3, _s4OSk::I64)) goto c4PVW; else goto c4PW1;
       c4PVW: // global
           I64[Hp - 72] = sat_s4OSM_info;
           I64[Hp - 56] = _s4OSi::I64;
           I64[Hp - 48] = _s4OSk::I64;
           I64[Hp - 40] = sat_s4OSC_info;
           I64[Hp - 24] = _s4OSi::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4PW1: // global
           if (%MO_S_Lt_W64(3, _s4OSi::I64)) goto c4PWl; else goto c4PVZ;
       c4PVZ: // global
           I64[Hp - 72] = sat_s4OSO_info;
           I64[Hp - 56] = _s4OSi::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c4PVX::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c4PVX::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4PWo: // global
           if (%MO_S_Lt_W64(_s4OSk::I64,
                            _s4OSi::I64)) goto c4PWe; else goto c4PWn;
       c4PWe: // global
           if (%MO_S_Le_W64(0, _s4OSk::I64)) goto c4PW7; else goto c4PWc;
       c4PW7: // global
           I64[Hp - 72] = sat_s4OT1_info;
           I64[Hp - 56] = _s4OSi::I64;
           I64[Hp - 48] = _s4OSk::I64;
           I64[Hp - 40] = sat_s4OSR_info;
           I64[Hp - 24] = _s4OSi::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4PWc: // global
           if (%MO_S_Gt_W64(0, _s4OSi::I64)) goto c4PWl; else goto c4PWa;
       c4PWa: // global
           I64[Hp - 72] = sat_s4OT3_info;
           I64[Hp - 56] = _s4OSi::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c4PW8::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c4PW8::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4PWn: // global
           if (%MO_S_Ge_W64(0, _s4OSk::I64)) goto c4PWh; else goto c4PWm;
       c4PWh: // global
           I64[Hp - 72] = sat_s4OTf_info;
           I64[Hp - 56] = _s4OSi::I64;
           I64[Hp - 48] = _s4OSk::I64;
           I64[Hp - 40] = sat_s4OT5_info;
           I64[Hp - 24] = _s4OSi::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4PWm: // global
           if (%MO_S_Lt_W64(0, _s4OSi::I64)) goto c4PWl; else goto c4PWk;
       c4PWl: // global
           Hp = Hp - 80;
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4PWk: // global
           I64[Hp - 72] = sat_s4OTh_info;
           I64[Hp - 56] = _s4OSi::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c4PWi::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c4PWi::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c4PQc() //  [R1]
         { []
         }
     {offset
       c4PQc: // global
           I64[Sp] = R1;
           call _c4PQd() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c4PQc_info" {
     block_c4PQc_info:
         const _c4PQc;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.292543912 UTC

[section ""data" . GHC.IO.IOMode.$fEnumIOMode_go3_closure" {
     GHC.IO.IOMode.$fEnumIOMode_go3_closure:
         const GHC.IO.IOMode.$fEnumIOMode_go3_info;
         const 0;
 },
 sat_s4OTq_entry() //  [R1]
         { []
         }
     {offset
       c4Q2C: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Q2D; else goto c4Q2E;
       c4Q2D: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Q2E: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4OTo::I64 = I64[R1 + 16];
           if (_s4OTo::I64 != 0) goto c4Q2A; else goto c4Q2B;
       c4Q2A: // global
           R2 = _s4OTo::I64 + 1;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$fEnumIOMode_go3_entry(R2) args: 24, res: 0, upd: 24;
       c4Q2B: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OTq_info" {
     sat_s4OTq_info:
         const sat_s4OTq_entry;
         const 4294967296;
         const 4294967313;
         const S4OYF_srt+272;
 },
 sat_s4OTn_entry() //  [R1]
         { []
         }
     {offset
       c4Q2Q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Q2R; else goto c4Q2Z;
       c4Q2R: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Q2Z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4OTk::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s4OTk::I64, 0)) goto c4Q2X; else goto c4Q2P;
       c4Q2P: // global
           if (%MO_S_Gt_W64(_s4OTk::I64, 3)) goto c4Q2X; else goto c4Q2Y;
       c4Q2X: // global
           R2 = _s4OTk::I64;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c4Q2Y: // global
           R1 = I64[(_s4OTk::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OTn_info" {
     sat_s4OTn_info:
         const sat_s4OTn_entry;
         const 4294967296;
         const 4294967313;
         const S4OYF_srt+208;
 },
 GHC.IO.IOMode.$fEnumIOMode_go3_entry() //  [R2]
         { []
         }
     {offset
       c4Q31: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c4Q35; else goto c4Q34;
       c4Q35: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.IO.IOMode.$fEnumIOMode_go3_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4Q34: // global
           I64[Hp - 64] = sat_s4OTq_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s4OTn_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fEnumIOMode_go3_info" {
     GHC.IO.IOMode.$fEnumIOMode_go3_info:
         const GHC.IO.IOMode.$fEnumIOMode_go3_entry;
         const 0;
         const 1103806595086;
         const 4294967300;
         const S4OYF_srt+208;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.302229586 UTC

[section ""data" . GHC.IO.IOMode.$fEnumIOMode_go2_closure" {
     GHC.IO.IOMode.$fEnumIOMode_go2_closure:
         const GHC.IO.IOMode.$fEnumIOMode_go2_info;
         const 0;
 },
 sat_s4OTx_entry() //  [R1]
         { []
         }
     {offset
       c4Q3H: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Q3I; else goto c4Q3J;
       c4Q3I: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Q3J: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4OTv::I64 = I64[R1 + 16];
           if (_s4OTv::I64 != 1) goto c4Q3F; else goto c4Q3G;
       c4Q3F: // global
           R2 = _s4OTv::I64 + 1;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$fEnumIOMode_go2_entry(R2) args: 24, res: 0, upd: 24;
       c4Q3G: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OTx_info" {
     sat_s4OTx_info:
         const sat_s4OTx_entry;
         const 4294967296;
         const 4294967313;
         const S4OYF_srt+280;
 },
 sat_s4OTu_entry() //  [R1]
         { []
         }
     {offset
       c4Q3V: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Q3W; else goto c4Q44;
       c4Q3W: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Q44: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4OTr::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s4OTr::I64, 0)) goto c4Q42; else goto c4Q3U;
       c4Q3U: // global
           if (%MO_S_Gt_W64(_s4OTr::I64, 3)) goto c4Q42; else goto c4Q43;
       c4Q42: // global
           R2 = _s4OTr::I64;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c4Q43: // global
           R1 = I64[(_s4OTr::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OTu_info" {
     sat_s4OTu_info:
         const sat_s4OTu_entry;
         const 4294967296;
         const 4294967313;
         const S4OYF_srt+208;
 },
 GHC.IO.IOMode.$fEnumIOMode_go2_entry() //  [R2]
         { []
         }
     {offset
       c4Q46: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c4Q4a; else goto c4Q49;
       c4Q4a: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.IO.IOMode.$fEnumIOMode_go2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4Q49: // global
           I64[Hp - 64] = sat_s4OTx_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s4OTu_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fEnumIOMode_go2_info" {
     GHC.IO.IOMode.$fEnumIOMode_go2_info:
         const GHC.IO.IOMode.$fEnumIOMode_go2_entry;
         const 0;
         const 2203318222862;
         const 4294967300;
         const S4OYF_srt+208;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.31110137 UTC

[section ""data" . GHC.IO.IOMode.$fEnumIOMode_go1_closure" {
     GHC.IO.IOMode.$fEnumIOMode_go1_closure:
         const GHC.IO.IOMode.$fEnumIOMode_go1_info;
         const 0;
 },
 sat_s4OTE_entry() //  [R1]
         { []
         }
     {offset
       c4Q4M: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Q4N; else goto c4Q4O;
       c4Q4N: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Q4O: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4OTC::I64 = I64[R1 + 16];
           if (_s4OTC::I64 != 2) goto c4Q4K; else goto c4Q4L;
       c4Q4K: // global
           R2 = _s4OTC::I64 + 1;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$fEnumIOMode_go1_entry(R2) args: 24, res: 0, upd: 24;
       c4Q4L: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OTE_info" {
     sat_s4OTE_info:
         const sat_s4OTE_entry;
         const 4294967296;
         const 4294967313;
         const S4OYF_srt+288;
 },
 sat_s4OTB_entry() //  [R1]
         { []
         }
     {offset
       c4Q50: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Q51; else goto c4Q59;
       c4Q51: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Q59: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4OTy::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s4OTy::I64, 0)) goto c4Q57; else goto c4Q4Z;
       c4Q4Z: // global
           if (%MO_S_Gt_W64(_s4OTy::I64, 3)) goto c4Q57; else goto c4Q58;
       c4Q57: // global
           R2 = _s4OTy::I64;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c4Q58: // global
           R1 = I64[(_s4OTy::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OTB_info" {
     sat_s4OTB_info:
         const sat_s4OTB_entry;
         const 4294967296;
         const 4294967313;
         const S4OYF_srt+208;
 },
 GHC.IO.IOMode.$fEnumIOMode_go1_entry() //  [R2]
         { []
         }
     {offset
       c4Q5b: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c4Q5f; else goto c4Q5e;
       c4Q5f: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.IO.IOMode.$fEnumIOMode_go1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4Q5e: // global
           I64[Hp - 64] = sat_s4OTE_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s4OTB_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fEnumIOMode_go1_info" {
     GHC.IO.IOMode.$fEnumIOMode_go1_info:
         const GHC.IO.IOMode.$fEnumIOMode_go1_entry;
         const 0;
         const 4402341478414;
         const 4294967300;
         const S4OYF_srt+208;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.320984889 UTC

[section ""data" . GHC.IO.IOMode.$fEnumIOMode_go_closure" {
     GHC.IO.IOMode.$fEnumIOMode_go_closure:
         const GHC.IO.IOMode.$fEnumIOMode_go_info;
         const 0;
 },
 sat_s4OTL_entry() //  [R1]
         { []
         }
     {offset
       c4Q5R: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Q5S; else goto c4Q5T;
       c4Q5S: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Q5T: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4OTJ::I64 = I64[R1 + 16];
           if (_s4OTJ::I64 != 3) goto c4Q5P; else goto c4Q5Q;
       c4Q5P: // global
           R2 = _s4OTJ::I64 + 1;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$fEnumIOMode_go_entry(R2) args: 24, res: 0, upd: 24;
       c4Q5Q: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OTL_info" {
     sat_s4OTL_info:
         const sat_s4OTL_entry;
         const 4294967296;
         const 4294967313;
         const S4OYF_srt+296;
 },
 sat_s4OTI_entry() //  [R1]
         { []
         }
     {offset
       c4Q65: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Q66; else goto c4Q6e;
       c4Q66: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Q6e: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4OTF::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s4OTF::I64, 0)) goto c4Q6c; else goto c4Q64;
       c4Q64: // global
           if (%MO_S_Gt_W64(_s4OTF::I64, 3)) goto c4Q6c; else goto c4Q6d;
       c4Q6c: // global
           R2 = _s4OTF::I64;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c4Q6d: // global
           R1 = I64[(_s4OTF::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OTI_info" {
     sat_s4OTI_info:
         const sat_s4OTI_entry;
         const 4294967296;
         const 4294967313;
         const S4OYF_srt+208;
 },
 GHC.IO.IOMode.$fEnumIOMode_go_entry() //  [R2]
         { []
         }
     {offset
       c4Q6g: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c4Q6k; else goto c4Q6j;
       c4Q6k: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.IO.IOMode.$fEnumIOMode_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4Q6j: // global
           I64[Hp - 64] = sat_s4OTL_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s4OTI_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fEnumIOMode_go_info" {
     GHC.IO.IOMode.$fEnumIOMode_go_info:
         const GHC.IO.IOMode.$fEnumIOMode_go_entry;
         const 0;
         const 8800387989518;
         const 4294967300;
         const S4OYF_srt+208;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.330372796 UTC

[section ""data" . GHC.IO.IOMode.$fEnumIOMode_$cenumFromTo_closure" {
     GHC.IO.IOMode.$fEnumIOMode_$cenumFromTo_closure:
         const GHC.IO.IOMode.$fEnumIOMode_$cenumFromTo_info;
         const 0;
 },
 GHC.IO.IOMode.$fEnumIOMode_$cenumFromTo_entry() //  [R2, R3]
         { []
         }
     {offset
       c4Q6Z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Q70; else goto c4Q71;
       c4Q70: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.IOMode.$fEnumIOMode_$cenumFromTo_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4Q71: // global
           I64[Sp - 16] = block_c4Q6Q_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4Q82; else goto c4Q6R;
       u4Q82: // global
           call _c4Q6Q(R1) args: 0, res: 0, upd: 0;
       c4Q6R: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fEnumIOMode_$cenumFromTo_info" {
     GHC.IO.IOMode.$fEnumIOMode_$cenumFromTo_info:
         const GHC.IO.IOMode.$fEnumIOMode_$cenumFromTo_entry;
         const 0;
         const 133143986190;
         const 8589934607;
         const S4OYF_srt+272;
 },
 _c4Q6Q() //  [R1]
         { []
         }
     {offset
       c4Q6Q: // global
           _s4OTN::P64 = P64[Sp + 8];
           _c4Q6Y::P64 = R1 & 7;
           if (_c4Q6Y::P64 < 3) goto u4Q7X; else goto u4Q7Y;
       u4Q7X: // global
           if (_c4Q6Y::P64 < 2) goto c4Q6U; else goto c4Q6V;
       c4Q6U: // global
           _s4OTP::I64 = 0;
           goto s4OTO;
       c4Q6V: // global
           _s4OTP::I64 = 1;
           goto s4OTO;
       u4Q7Y: // global
           if (_c4Q6Y::P64 < 4) goto c4Q6W; else goto c4Q6X;
       c4Q6W: // global
           _s4OTP::I64 = 2;
           goto s4OTO;
       c4Q6X: // global
           _s4OTP::I64 = 3;
           goto s4OTO;
       s4OTO: // global
           I64[Sp] = block_c4Q75_info;
           R1 = _s4OTN::P64;
           I64[Sp + 8] = _s4OTP::I64;
           if (R1 & 7 != 0) goto u4Q81; else goto c4Q77;
       u4Q81: // global
           call _c4Q75(R1) args: 0, res: 0, upd: 0;
       c4Q77: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Q6Q_info" {
     block_c4Q6Q_info:
         const _c4Q6Q;
         const 1;
         const 64424509470;
         const S4OYF_srt+272;
 },
 _c4Q75() //  [R1]
         { []
         }
     {offset
       c4Q75: // global
           _s4OTP::I64 = I64[Sp + 8];
           _c4Q7W::P64 = R1 & 7;
           if (_c4Q7W::P64 < 3) goto u4Q7Z; else goto u4Q80;
       u4Q7Z: // global
           if (_c4Q7W::P64 < 2) goto c4Q7i; else goto c4Q7r;
       c4Q7i: // global
           if (%MO_S_Gt_W64(_s4OTP::I64, 0)) goto c4Q7I; else goto c4Q7f;
       c4Q7f: // global
           R2 = _s4OTP::I64;
           Sp = Sp + 16;
           call GHC.IO.IOMode.$fEnumIOMode_go3_entry(R2) args: 8, res: 0, upd: 8;
       c4Q7r: // global
           if (%MO_S_Gt_W64(_s4OTP::I64, 1)) goto c4Q7I; else goto c4Q7p;
       c4Q7p: // global
           R2 = _s4OTP::I64;
           Sp = Sp + 16;
           call GHC.IO.IOMode.$fEnumIOMode_go2_entry(R2) args: 8, res: 0, upd: 8;
       u4Q80: // global
           if (_c4Q7W::P64 < 4) goto c4Q7A; else goto c4Q7J;
       c4Q7A: // global
           if (%MO_S_Gt_W64(_s4OTP::I64, 2)) goto c4Q7I; else goto c4Q7y;
       c4Q7y: // global
           R2 = _s4OTP::I64;
           Sp = Sp + 16;
           call GHC.IO.IOMode.$fEnumIOMode_go1_entry(R2) args: 8, res: 0, upd: 8;
       c4Q7J: // global
           if (%MO_S_Gt_W64(_s4OTP::I64, 3)) goto c4Q7I; else goto c4Q7H;
       c4Q7I: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4Q7H: // global
           R2 = _s4OTP::I64;
           Sp = Sp + 16;
           call GHC.IO.IOMode.$fEnumIOMode_go_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Q75_info" {
     block_c4Q75_info:
         const _c4Q75;
         const 65;
         const 64424509470;
         const S4OYF_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.377795523 UTC

[section ""data" . GHC.IO.IOMode.$fEnumIOMode_$cenumFromThenTo_closure" {
     GHC.IO.IOMode.$fEnumIOMode_$cenumFromThenTo_closure:
         const GHC.IO.IOMode.$fEnumIOMode_$cenumFromThenTo_info;
         const 0;
 },
 sat_s4OUi_entry() //  [R1]
         { []
         }
     {offset
       c4Q99: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Q9a; else goto c4Q9b;
       c4Q9a: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Q9b: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s4OUb_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OUi_info" {
     sat_s4OUi_info:
         const sat_s4OUi_entry;
         const 8589934593;
         const 4294967311;
         const S4OYF_srt+208;
 },
 sat_s4OUg_entry() //  [R1]
         { []
         }
     {offset
       c4Q9l: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Q9m; else goto c4Q9u;
       c4Q9m: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Q9u: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4OUc::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s4OUc::I64, 0)) goto c4Q9s; else goto c4Q9k;
       c4Q9k: // global
           if (%MO_S_Gt_W64(_s4OUc::I64, 3)) goto c4Q9s; else goto c4Q9t;
       c4Q9s: // global
           R2 = _s4OUc::I64;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c4Q9t: // global
           R1 = I64[(_s4OUc::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OUg_info" {
     sat_s4OUg_info:
         const sat_s4OUg_entry;
         const 4294967296;
         const 4294967313;
         const S4OYF_srt+208;
 },
 sat_s4OUl_entry() //  [R1]
         { []
         }
     {offset
       c4Q9F: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Q9G; else goto c4Q9O;
       c4Q9G: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Q9O: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4OUc::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s4OUc::I64, 0)) goto c4Q9M; else goto c4Q9E;
       c4Q9E: // global
           if (%MO_S_Gt_W64(_s4OUc::I64, 3)) goto c4Q9M; else goto c4Q9N;
       c4Q9M: // global
           R2 = _s4OUc::I64;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c4Q9N: // global
           R1 = I64[(_s4OUc::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OUl_info" {
     sat_s4OUl_info:
         const sat_s4OUl_entry;
         const 4294967296;
         const 4294967313;
         const S4OYF_srt+208;
 },
 go_dn_s4OUb_entry() //  [R1, R2]
         { []
         }
     {offset
       c4Q9S: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c4Q9W; else goto c4Q9V;
       c4Q9W: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4Q9V: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c4Q9Q; else goto c4Q9R;
       c4Q9Q: // global
           _s4OU9::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s4OUi_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s4OU9::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s4OUg_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4Q9R: // global
           I64[Hp - 80] = sat_s4OUl_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c4Q9Y::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c4Q9Y::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_s4OUb_info" {
     go_dn_s4OUb_info:
         const go_dn_s4OUb_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const S4OYF_srt+208;
 },
 sat_s4OUm_entry() //  [R1]
         { []
         }
     {offset
       c4Q9Z: // global
           _s4OUm::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c4Qa0; else goto c4Qa1;
       c4Qa1: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c4Qa3; else goto c4Qa2;
       c4Qa3: // global
           HpAlloc = 24;
           goto c4Qa0;
       c4Qa0: // global
           R1 = _s4OUm::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Qa2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s4OUm::P64;
           _s4OU2::I64 = I64[_s4OUm::P64 + 24];
           _s4OU9::I64 = _s4OU2::I64 - I64[_s4OUm::P64 + 16];
           I64[Hp - 16] = go_dn_s4OUb_info;
           I64[Hp - 8] = _s4OU9::I64;
           I64[Hp] = 0 - _s4OU9::I64;
           R2 = _s4OU2::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s4OUb_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OUm_info" {
     sat_s4OUm_info:
         const sat_s4OUm_entry;
         const 8589934592;
         const 4294967316;
         const S4OYF_srt+208;
 },
 sat_s4OU8_entry() //  [R1]
         { []
         }
     {offset
       c4Qad: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Qae; else goto c4Qam;
       c4Qae: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Qam: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4OU0::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s4OU0::I64, 0)) goto c4Qak; else goto c4Qac;
       c4Qac: // global
           if (%MO_S_Gt_W64(_s4OU0::I64, 3)) goto c4Qak; else goto c4Qal;
       c4Qak: // global
           R2 = _s4OU0::I64;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c4Qal: // global
           R1 = I64[(_s4OU0::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OU8_info" {
     sat_s4OU8_info:
         const sat_s4OU8_entry;
         const 4294967296;
         const 4294967313;
         const S4OYF_srt+208;
 },
 sat_s4OUq_entry() //  [R1]
         { []
         }
     {offset
       c4QaA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4QaB; else goto c4QaJ;
       c4QaB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4QaJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4OU0::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s4OU0::I64, 0)) goto c4QaH; else goto c4Qaz;
       c4Qaz: // global
           if (%MO_S_Gt_W64(_s4OU0::I64, 3)) goto c4QaH; else goto c4QaI;
       c4QaH: // global
           R2 = _s4OU0::I64;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c4QaI: // global
           R1 = I64[(_s4OU0::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OUq_info" {
     sat_s4OUq_info:
         const sat_s4OUq_entry;
         const 4294967296;
         const 4294967313;
         const S4OYF_srt+208;
 },
 sat_s4OUE_entry() //  [R1]
         { []
         }
     {offset
       c4Qbc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Qbd; else goto c4Qbe;
       c4Qbd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Qbe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s4OUx_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OUE_info" {
     sat_s4OUE_info:
         const sat_s4OUE_entry;
         const 8589934593;
         const 4294967311;
         const S4OYF_srt+208;
 },
 sat_s4OUC_entry() //  [R1]
         { []
         }
     {offset
       c4Qbo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Qbp; else goto c4Qbx;
       c4Qbp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Qbx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4OUy::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s4OUy::I64, 0)) goto c4Qbv; else goto c4Qbn;
       c4Qbn: // global
           if (%MO_S_Gt_W64(_s4OUy::I64, 3)) goto c4Qbv; else goto c4Qbw;
       c4Qbv: // global
           R2 = _s4OUy::I64;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c4Qbw: // global
           R1 = I64[(_s4OUy::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OUC_info" {
     sat_s4OUC_info:
         const sat_s4OUC_entry;
         const 4294967296;
         const 4294967313;
         const S4OYF_srt+208;
 },
 sat_s4OUH_entry() //  [R1]
         { []
         }
     {offset
       c4QbI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4QbJ; else goto c4QbR;
       c4QbJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4QbR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4OUy::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s4OUy::I64, 0)) goto c4QbP; else goto c4QbH;
       c4QbH: // global
           if (%MO_S_Gt_W64(_s4OUy::I64, 3)) goto c4QbP; else goto c4QbQ;
       c4QbP: // global
           R2 = _s4OUy::I64;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c4QbQ: // global
           R1 = I64[(_s4OUy::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OUH_info" {
     sat_s4OUH_info:
         const sat_s4OUH_entry;
         const 4294967296;
         const 4294967313;
         const S4OYF_srt+208;
 },
 go_up_s4OUx_entry() //  [R1, R2]
         { []
         }
     {offset
       c4QbV: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c4QbZ; else goto c4QbY;
       c4QbZ: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4QbY: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c4QbT; else goto c4QbU;
       c4QbT: // global
           _s4OUv::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s4OUE_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s4OUv::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s4OUC_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4QbU: // global
           I64[Hp - 80] = sat_s4OUH_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c4Qc1::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c4Qc1::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_s4OUx_info" {
     go_up_s4OUx_info:
         const go_up_s4OUx_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const S4OYF_srt+208;
 },
 sat_s4OUI_entry() //  [R1]
         { []
         }
     {offset
       c4Qc2: // global
           _s4OUI::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c4Qc3; else goto c4Qc4;
       c4Qc4: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c4Qc6; else goto c4Qc5;
       c4Qc6: // global
           HpAlloc = 24;
           goto c4Qc3;
       c4Qc3: // global
           R1 = _s4OUI::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Qc5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s4OUI::P64;
           _s4OU2::I64 = I64[_s4OUI::P64 + 24];
           _s4OUv::I64 = _s4OU2::I64 - I64[_s4OUI::P64 + 16];
           I64[Hp - 16] = go_up_s4OUx_info;
           I64[Hp - 8] = _s4OUv::I64;
           I64[Hp] = 0 - _s4OUv::I64;
           R2 = _s4OU2::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s4OUx_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OUI_info" {
     sat_s4OUI_info:
         const sat_s4OUI_entry;
         const 8589934592;
         const 4294967316;
         const S4OYF_srt+208;
 },
 sat_s4OUu_entry() //  [R1]
         { []
         }
     {offset
       c4Qcg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Qch; else goto c4Qcp;
       c4Qch: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Qcp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4OU0::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s4OU0::I64, 0)) goto c4Qcn; else goto c4Qcf;
       c4Qcf: // global
           if (%MO_S_Gt_W64(_s4OU0::I64, 3)) goto c4Qcn; else goto c4Qco;
       c4Qcn: // global
           R2 = _s4OU0::I64;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c4Qco: // global
           R1 = I64[(_s4OU0::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OUu_info" {
     sat_s4OUu_info:
         const sat_s4OUu_entry;
         const 4294967296;
         const 4294967313;
         const S4OYF_srt+208;
 },
 sat_s4OUM_entry() //  [R1]
         { []
         }
     {offset
       c4QcD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4QcE; else goto c4QcM;
       c4QcE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4QcM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4OU0::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s4OU0::I64, 0)) goto c4QcK; else goto c4QcC;
       c4QcC: // global
           if (%MO_S_Gt_W64(_s4OU0::I64, 3)) goto c4QcK; else goto c4QcL;
       c4QcK: // global
           R2 = _s4OU0::I64;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c4QcL: // global
           R1 = I64[(_s4OU0::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OUM_info" {
     sat_s4OUM_info:
         const sat_s4OUM_entry;
         const 4294967296;
         const 4294967313;
         const S4OYF_srt+208;
 },
 sat_s4OV1_entry() //  [R1]
         { []
         }
     {offset
       c4Qdj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Qdk; else goto c4Qdl;
       c4Qdk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Qdl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s4OUU_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OV1_info" {
     sat_s4OV1_info:
         const sat_s4OV1_entry;
         const 8589934593;
         const 4294967311;
         const S4OYF_srt+208;
 },
 sat_s4OUZ_entry() //  [R1]
         { []
         }
     {offset
       c4Qdv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Qdw; else goto c4QdE;
       c4Qdw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4QdE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4OUV::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s4OUV::I64, 0)) goto c4QdC; else goto c4Qdu;
       c4Qdu: // global
           if (%MO_S_Gt_W64(_s4OUV::I64, 3)) goto c4QdC; else goto c4QdD;
       c4QdC: // global
           R2 = _s4OUV::I64;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c4QdD: // global
           R1 = I64[(_s4OUV::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OUZ_info" {
     sat_s4OUZ_info:
         const sat_s4OUZ_entry;
         const 4294967296;
         const 4294967313;
         const S4OYF_srt+208;
 },
 sat_s4OV4_entry() //  [R1]
         { []
         }
     {offset
       c4QdP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4QdQ; else goto c4QdY;
       c4QdQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4QdY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4OUV::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s4OUV::I64, 0)) goto c4QdW; else goto c4QdO;
       c4QdO: // global
           if (%MO_S_Gt_W64(_s4OUV::I64, 3)) goto c4QdW; else goto c4QdX;
       c4QdW: // global
           R2 = _s4OUV::I64;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c4QdX: // global
           R1 = I64[(_s4OUV::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OV4_info" {
     sat_s4OV4_info:
         const sat_s4OV4_entry;
         const 4294967296;
         const 4294967313;
         const S4OYF_srt+208;
 },
 go_dn_s4OUU_entry() //  [R1, R2]
         { []
         }
     {offset
       c4Qe2: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c4Qe6; else goto c4Qe5;
       c4Qe6: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4Qe5: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c4Qe0; else goto c4Qe1;
       c4Qe0: // global
           _s4OUS::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s4OV1_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s4OUS::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s4OUZ_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4Qe1: // global
           I64[Hp - 80] = sat_s4OV4_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c4Qe8::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c4Qe8::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_s4OUU_info" {
     go_dn_s4OUU_info:
         const go_dn_s4OUU_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const S4OYF_srt+208;
 },
 sat_s4OV5_entry() //  [R1]
         { []
         }
     {offset
       c4Qe9: // global
           _s4OV5::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c4Qea; else goto c4Qeb;
       c4Qeb: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c4Qed; else goto c4Qec;
       c4Qed: // global
           HpAlloc = 24;
           goto c4Qea;
       c4Qea: // global
           R1 = _s4OV5::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Qec: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s4OV5::P64;
           _s4OU2::I64 = I64[_s4OV5::P64 + 24];
           _s4OUS::I64 = _s4OU2::I64 - I64[_s4OV5::P64 + 16];
           I64[Hp - 16] = go_dn_s4OUU_info;
           I64[Hp - 8] = _s4OUS::I64;
           I64[Hp] = 1 - _s4OUS::I64;
           R2 = _s4OU2::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s4OUU_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OV5_info" {
     sat_s4OV5_info:
         const sat_s4OV5_entry;
         const 8589934592;
         const 4294967316;
         const S4OYF_srt+208;
 },
 sat_s4OUR_entry() //  [R1]
         { []
         }
     {offset
       c4Qen: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Qeo; else goto c4Qew;
       c4Qeo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Qew: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4OU0::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s4OU0::I64, 0)) goto c4Qeu; else goto c4Qem;
       c4Qem: // global
           if (%MO_S_Gt_W64(_s4OU0::I64, 3)) goto c4Qeu; else goto c4Qev;
       c4Qeu: // global
           R2 = _s4OU0::I64;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c4Qev: // global
           R1 = I64[(_s4OU0::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OUR_info" {
     sat_s4OUR_info:
         const sat_s4OUR_entry;
         const 4294967296;
         const 4294967313;
         const S4OYF_srt+208;
 },
 sat_s4OV9_entry() //  [R1]
         { []
         }
     {offset
       c4QeK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4QeL; else goto c4QeT;
       c4QeL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4QeT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4OU0::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s4OU0::I64, 0)) goto c4QeR; else goto c4QeJ;
       c4QeJ: // global
           if (%MO_S_Gt_W64(_s4OU0::I64, 3)) goto c4QeR; else goto c4QeS;
       c4QeR: // global
           R2 = _s4OU0::I64;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c4QeS: // global
           R1 = I64[(_s4OU0::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OV9_info" {
     sat_s4OV9_info:
         const sat_s4OV9_entry;
         const 4294967296;
         const 4294967313;
         const S4OYF_srt+208;
 },
 sat_s4OVn_entry() //  [R1]
         { []
         }
     {offset
       c4Qfm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Qfn; else goto c4Qfo;
       c4Qfn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Qfo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s4OVg_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OVn_info" {
     sat_s4OVn_info:
         const sat_s4OVn_entry;
         const 8589934593;
         const 4294967311;
         const S4OYF_srt+208;
 },
 sat_s4OVl_entry() //  [R1]
         { []
         }
     {offset
       c4Qfy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Qfz; else goto c4QfH;
       c4Qfz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4QfH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4OVh::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s4OVh::I64, 0)) goto c4QfF; else goto c4Qfx;
       c4Qfx: // global
           if (%MO_S_Gt_W64(_s4OVh::I64, 3)) goto c4QfF; else goto c4QfG;
       c4QfF: // global
           R2 = _s4OVh::I64;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c4QfG: // global
           R1 = I64[(_s4OVh::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OVl_info" {
     sat_s4OVl_info:
         const sat_s4OVl_entry;
         const 4294967296;
         const 4294967313;
         const S4OYF_srt+208;
 },
 sat_s4OVq_entry() //  [R1]
         { []
         }
     {offset
       c4QfS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4QfT; else goto c4Qg1;
       c4QfT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Qg1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4OVh::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s4OVh::I64, 0)) goto c4QfZ; else goto c4QfR;
       c4QfR: // global
           if (%MO_S_Gt_W64(_s4OVh::I64, 3)) goto c4QfZ; else goto c4Qg0;
       c4QfZ: // global
           R2 = _s4OVh::I64;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c4Qg0: // global
           R1 = I64[(_s4OVh::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OVq_info" {
     sat_s4OVq_info:
         const sat_s4OVq_entry;
         const 4294967296;
         const 4294967313;
         const S4OYF_srt+208;
 },
 go_up_s4OVg_entry() //  [R1, R2]
         { []
         }
     {offset
       c4Qg5: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c4Qg9; else goto c4Qg8;
       c4Qg9: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4Qg8: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c4Qg3; else goto c4Qg4;
       c4Qg3: // global
           _s4OVe::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s4OVn_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s4OVe::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s4OVl_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4Qg4: // global
           I64[Hp - 80] = sat_s4OVq_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c4Qgb::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c4Qgb::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_s4OVg_info" {
     go_up_s4OVg_info:
         const go_up_s4OVg_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const S4OYF_srt+208;
 },
 sat_s4OVr_entry() //  [R1]
         { []
         }
     {offset
       c4Qgc: // global
           _s4OVr::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c4Qgd; else goto c4Qge;
       c4Qge: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c4Qgg; else goto c4Qgf;
       c4Qgg: // global
           HpAlloc = 24;
           goto c4Qgd;
       c4Qgd: // global
           R1 = _s4OVr::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Qgf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s4OVr::P64;
           _s4OU2::I64 = I64[_s4OVr::P64 + 24];
           _s4OVe::I64 = _s4OU2::I64 - I64[_s4OVr::P64 + 16];
           I64[Hp - 16] = go_up_s4OVg_info;
           I64[Hp - 8] = _s4OVe::I64;
           I64[Hp] = 1 - _s4OVe::I64;
           R2 = _s4OU2::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s4OVg_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OVr_info" {
     sat_s4OVr_info:
         const sat_s4OVr_entry;
         const 8589934592;
         const 4294967316;
         const S4OYF_srt+208;
 },
 sat_s4OVd_entry() //  [R1]
         { []
         }
     {offset
       c4Qgq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Qgr; else goto c4Qgz;
       c4Qgr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Qgz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4OU0::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s4OU0::I64, 0)) goto c4Qgx; else goto c4Qgp;
       c4Qgp: // global
           if (%MO_S_Gt_W64(_s4OU0::I64, 3)) goto c4Qgx; else goto c4Qgy;
       c4Qgx: // global
           R2 = _s4OU0::I64;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c4Qgy: // global
           R1 = I64[(_s4OU0::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OVd_info" {
     sat_s4OVd_info:
         const sat_s4OVd_entry;
         const 4294967296;
         const 4294967313;
         const S4OYF_srt+208;
 },
 sat_s4OVv_entry() //  [R1]
         { []
         }
     {offset
       c4QgN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4QgO; else goto c4QgW;
       c4QgO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4QgW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4OU0::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s4OU0::I64, 0)) goto c4QgU; else goto c4QgM;
       c4QgM: // global
           if (%MO_S_Gt_W64(_s4OU0::I64, 3)) goto c4QgU; else goto c4QgV;
       c4QgU: // global
           R2 = _s4OU0::I64;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c4QgV: // global
           R1 = I64[(_s4OU0::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OVv_info" {
     sat_s4OVv_info:
         const sat_s4OVv_entry;
         const 4294967296;
         const 4294967313;
         const S4OYF_srt+208;
 },
 sat_s4OVK_entry() //  [R1]
         { []
         }
     {offset
       c4Qht: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Qhu; else goto c4Qhv;
       c4Qhu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Qhv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s4OVD_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OVK_info" {
     sat_s4OVK_info:
         const sat_s4OVK_entry;
         const 8589934593;
         const 4294967311;
         const S4OYF_srt+208;
 },
 sat_s4OVI_entry() //  [R1]
         { []
         }
     {offset
       c4QhF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4QhG; else goto c4QhO;
       c4QhG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4QhO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4OVE::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s4OVE::I64, 0)) goto c4QhM; else goto c4QhE;
       c4QhE: // global
           if (%MO_S_Gt_W64(_s4OVE::I64, 3)) goto c4QhM; else goto c4QhN;
       c4QhM: // global
           R2 = _s4OVE::I64;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c4QhN: // global
           R1 = I64[(_s4OVE::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OVI_info" {
     sat_s4OVI_info:
         const sat_s4OVI_entry;
         const 4294967296;
         const 4294967313;
         const S4OYF_srt+208;
 },
 sat_s4OVN_entry() //  [R1]
         { []
         }
     {offset
       c4QhZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Qi0; else goto c4Qi8;
       c4Qi0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Qi8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4OVE::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s4OVE::I64, 0)) goto c4Qi6; else goto c4QhY;
       c4QhY: // global
           if (%MO_S_Gt_W64(_s4OVE::I64, 3)) goto c4Qi6; else goto c4Qi7;
       c4Qi6: // global
           R2 = _s4OVE::I64;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c4Qi7: // global
           R1 = I64[(_s4OVE::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OVN_info" {
     sat_s4OVN_info:
         const sat_s4OVN_entry;
         const 4294967296;
         const 4294967313;
         const S4OYF_srt+208;
 },
 go_dn_s4OVD_entry() //  [R1, R2]
         { []
         }
     {offset
       c4Qic: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c4Qig; else goto c4Qif;
       c4Qig: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4Qif: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c4Qia; else goto c4Qib;
       c4Qia: // global
           _s4OVB::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s4OVK_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s4OVB::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s4OVI_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4Qib: // global
           I64[Hp - 80] = sat_s4OVN_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c4Qii::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c4Qii::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_s4OVD_info" {
     go_dn_s4OVD_info:
         const go_dn_s4OVD_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const S4OYF_srt+208;
 },
 sat_s4OVO_entry() //  [R1]
         { []
         }
     {offset
       c4Qij: // global
           _s4OVO::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c4Qik; else goto c4Qil;
       c4Qil: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c4Qin; else goto c4Qim;
       c4Qin: // global
           HpAlloc = 24;
           goto c4Qik;
       c4Qik: // global
           R1 = _s4OVO::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Qim: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s4OVO::P64;
           _s4OU2::I64 = I64[_s4OVO::P64 + 24];
           _s4OVB::I64 = _s4OU2::I64 - I64[_s4OVO::P64 + 16];
           I64[Hp - 16] = go_dn_s4OVD_info;
           I64[Hp - 8] = _s4OVB::I64;
           I64[Hp] = 2 - _s4OVB::I64;
           R2 = _s4OU2::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s4OVD_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OVO_info" {
     sat_s4OVO_info:
         const sat_s4OVO_entry;
         const 8589934592;
         const 4294967316;
         const S4OYF_srt+208;
 },
 sat_s4OVA_entry() //  [R1]
         { []
         }
     {offset
       c4Qix: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Qiy; else goto c4QiG;
       c4Qiy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4QiG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4OU0::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s4OU0::I64, 0)) goto c4QiE; else goto c4Qiw;
       c4Qiw: // global
           if (%MO_S_Gt_W64(_s4OU0::I64, 3)) goto c4QiE; else goto c4QiF;
       c4QiE: // global
           R2 = _s4OU0::I64;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c4QiF: // global
           R1 = I64[(_s4OU0::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OVA_info" {
     sat_s4OVA_info:
         const sat_s4OVA_entry;
         const 4294967296;
         const 4294967313;
         const S4OYF_srt+208;
 },
 sat_s4OVS_entry() //  [R1]
         { []
         }
     {offset
       c4QiU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4QiV; else goto c4Qj3;
       c4QiV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Qj3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4OU0::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s4OU0::I64, 0)) goto c4Qj1; else goto c4QiT;
       c4QiT: // global
           if (%MO_S_Gt_W64(_s4OU0::I64, 3)) goto c4Qj1; else goto c4Qj2;
       c4Qj1: // global
           R2 = _s4OU0::I64;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c4Qj2: // global
           R1 = I64[(_s4OU0::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OVS_info" {
     sat_s4OVS_info:
         const sat_s4OVS_entry;
         const 4294967296;
         const 4294967313;
         const S4OYF_srt+208;
 },
 sat_s4OW6_entry() //  [R1]
         { []
         }
     {offset
       c4Qjw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Qjx; else goto c4Qjy;
       c4Qjx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Qjy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s4OVZ_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OW6_info" {
     sat_s4OW6_info:
         const sat_s4OW6_entry;
         const 8589934593;
         const 4294967311;
         const S4OYF_srt+208;
 },
 sat_s4OW4_entry() //  [R1]
         { []
         }
     {offset
       c4QjI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4QjJ; else goto c4QjR;
       c4QjJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4QjR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4OW0::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s4OW0::I64, 0)) goto c4QjP; else goto c4QjH;
       c4QjH: // global
           if (%MO_S_Gt_W64(_s4OW0::I64, 3)) goto c4QjP; else goto c4QjQ;
       c4QjP: // global
           R2 = _s4OW0::I64;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c4QjQ: // global
           R1 = I64[(_s4OW0::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OW4_info" {
     sat_s4OW4_info:
         const sat_s4OW4_entry;
         const 4294967296;
         const 4294967313;
         const S4OYF_srt+208;
 },
 sat_s4OW9_entry() //  [R1]
         { []
         }
     {offset
       c4Qk2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Qk3; else goto c4Qkb;
       c4Qk3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Qkb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4OW0::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s4OW0::I64, 0)) goto c4Qk9; else goto c4Qk1;
       c4Qk1: // global
           if (%MO_S_Gt_W64(_s4OW0::I64, 3)) goto c4Qk9; else goto c4Qka;
       c4Qk9: // global
           R2 = _s4OW0::I64;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c4Qka: // global
           R1 = I64[(_s4OW0::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OW9_info" {
     sat_s4OW9_info:
         const sat_s4OW9_entry;
         const 4294967296;
         const 4294967313;
         const S4OYF_srt+208;
 },
 go_up_s4OVZ_entry() //  [R1, R2]
         { []
         }
     {offset
       c4Qkf: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c4Qkj; else goto c4Qki;
       c4Qkj: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4Qki: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c4Qkd; else goto c4Qke;
       c4Qkd: // global
           _s4OVX::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s4OW6_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s4OVX::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s4OW4_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4Qke: // global
           I64[Hp - 80] = sat_s4OW9_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c4Qkl::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c4Qkl::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_s4OVZ_info" {
     go_up_s4OVZ_info:
         const go_up_s4OVZ_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const S4OYF_srt+208;
 },
 sat_s4OWa_entry() //  [R1]
         { []
         }
     {offset
       c4Qkm: // global
           _s4OWa::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c4Qkn; else goto c4Qko;
       c4Qko: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c4Qkq; else goto c4Qkp;
       c4Qkq: // global
           HpAlloc = 24;
           goto c4Qkn;
       c4Qkn: // global
           R1 = _s4OWa::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Qkp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s4OWa::P64;
           _s4OU2::I64 = I64[_s4OWa::P64 + 24];
           _s4OVX::I64 = _s4OU2::I64 - I64[_s4OWa::P64 + 16];
           I64[Hp - 16] = go_up_s4OVZ_info;
           I64[Hp - 8] = _s4OVX::I64;
           I64[Hp] = 2 - _s4OVX::I64;
           R2 = _s4OU2::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s4OVZ_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OWa_info" {
     sat_s4OWa_info:
         const sat_s4OWa_entry;
         const 8589934592;
         const 4294967316;
         const S4OYF_srt+208;
 },
 sat_s4OVW_entry() //  [R1]
         { []
         }
     {offset
       c4QkA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4QkB; else goto c4QkJ;
       c4QkB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4QkJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4OU0::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s4OU0::I64, 0)) goto c4QkH; else goto c4Qkz;
       c4Qkz: // global
           if (%MO_S_Gt_W64(_s4OU0::I64, 3)) goto c4QkH; else goto c4QkI;
       c4QkH: // global
           R2 = _s4OU0::I64;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c4QkI: // global
           R1 = I64[(_s4OU0::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OVW_info" {
     sat_s4OVW_info:
         const sat_s4OVW_entry;
         const 4294967296;
         const 4294967313;
         const S4OYF_srt+208;
 },
 sat_s4OWe_entry() //  [R1]
         { []
         }
     {offset
       c4QkX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4QkY; else goto c4Ql6;
       c4QkY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Ql6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4OU0::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s4OU0::I64, 0)) goto c4Ql4; else goto c4QkW;
       c4QkW: // global
           if (%MO_S_Gt_W64(_s4OU0::I64, 3)) goto c4Ql4; else goto c4Ql5;
       c4Ql4: // global
           R2 = _s4OU0::I64;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c4Ql5: // global
           R1 = I64[(_s4OU0::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OWe_info" {
     sat_s4OWe_info:
         const sat_s4OWe_entry;
         const 4294967296;
         const 4294967313;
         const S4OYF_srt+208;
 },
 sat_s4OWt_entry() //  [R1]
         { []
         }
     {offset
       c4QlD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4QlE; else goto c4QlF;
       c4QlE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4QlF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s4OWm_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OWt_info" {
     sat_s4OWt_info:
         const sat_s4OWt_entry;
         const 8589934593;
         const 4294967311;
         const S4OYF_srt+208;
 },
 sat_s4OWr_entry() //  [R1]
         { []
         }
     {offset
       c4QlP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4QlQ; else goto c4QlY;
       c4QlQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4QlY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4OWn::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s4OWn::I64, 0)) goto c4QlW; else goto c4QlO;
       c4QlO: // global
           if (%MO_S_Gt_W64(_s4OWn::I64, 3)) goto c4QlW; else goto c4QlX;
       c4QlW: // global
           R2 = _s4OWn::I64;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c4QlX: // global
           R1 = I64[(_s4OWn::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OWr_info" {
     sat_s4OWr_info:
         const sat_s4OWr_entry;
         const 4294967296;
         const 4294967313;
         const S4OYF_srt+208;
 },
 sat_s4OWw_entry() //  [R1]
         { []
         }
     {offset
       c4Qm9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Qma; else goto c4Qmi;
       c4Qma: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Qmi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4OWn::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s4OWn::I64, 0)) goto c4Qmg; else goto c4Qm8;
       c4Qm8: // global
           if (%MO_S_Gt_W64(_s4OWn::I64, 3)) goto c4Qmg; else goto c4Qmh;
       c4Qmg: // global
           R2 = _s4OWn::I64;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c4Qmh: // global
           R1 = I64[(_s4OWn::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OWw_info" {
     sat_s4OWw_info:
         const sat_s4OWw_entry;
         const 4294967296;
         const 4294967313;
         const S4OYF_srt+208;
 },
 go_dn_s4OWm_entry() //  [R1, R2]
         { []
         }
     {offset
       c4Qmm: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c4Qmq; else goto c4Qmp;
       c4Qmq: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4Qmp: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c4Qmk; else goto c4Qml;
       c4Qmk: // global
           _s4OWk::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s4OWt_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s4OWk::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s4OWr_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4Qml: // global
           I64[Hp - 80] = sat_s4OWw_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c4Qms::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c4Qms::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_s4OWm_info" {
     go_dn_s4OWm_info:
         const go_dn_s4OWm_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const S4OYF_srt+208;
 },
 sat_s4OWx_entry() //  [R1]
         { []
         }
     {offset
       c4Qmt: // global
           _s4OWx::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c4Qmu; else goto c4Qmv;
       c4Qmv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c4Qmx; else goto c4Qmw;
       c4Qmx: // global
           HpAlloc = 24;
           goto c4Qmu;
       c4Qmu: // global
           R1 = _s4OWx::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Qmw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s4OWx::P64;
           _s4OU2::I64 = I64[_s4OWx::P64 + 24];
           _s4OWk::I64 = _s4OU2::I64 - I64[_s4OWx::P64 + 16];
           I64[Hp - 16] = go_dn_s4OWm_info;
           I64[Hp - 8] = _s4OWk::I64;
           I64[Hp] = 3 - _s4OWk::I64;
           R2 = _s4OU2::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s4OWm_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OWx_info" {
     sat_s4OWx_info:
         const sat_s4OWx_entry;
         const 8589934592;
         const 4294967316;
         const S4OYF_srt+208;
 },
 sat_s4OWj_entry() //  [R1]
         { []
         }
     {offset
       c4QmH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4QmI; else goto c4QmQ;
       c4QmI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4QmQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4OU0::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s4OU0::I64, 0)) goto c4QmO; else goto c4QmG;
       c4QmG: // global
           if (%MO_S_Gt_W64(_s4OU0::I64, 3)) goto c4QmO; else goto c4QmP;
       c4QmO: // global
           R2 = _s4OU0::I64;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c4QmP: // global
           R1 = I64[(_s4OU0::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OWj_info" {
     sat_s4OWj_info:
         const sat_s4OWj_entry;
         const 4294967296;
         const 4294967313;
         const S4OYF_srt+208;
 },
 sat_s4OWB_entry() //  [R1]
         { []
         }
     {offset
       c4Qn4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Qn5; else goto c4Qnd;
       c4Qn5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Qnd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4OU0::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s4OU0::I64, 0)) goto c4Qnb; else goto c4Qn3;
       c4Qn3: // global
           if (%MO_S_Gt_W64(_s4OU0::I64, 3)) goto c4Qnb; else goto c4Qnc;
       c4Qnb: // global
           R2 = _s4OU0::I64;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c4Qnc: // global
           R1 = I64[(_s4OU0::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OWB_info" {
     sat_s4OWB_info:
         const sat_s4OWB_entry;
         const 4294967296;
         const 4294967313;
         const S4OYF_srt+208;
 },
 sat_s4OWP_entry() //  [R1]
         { []
         }
     {offset
       c4QnG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4QnH; else goto c4QnI;
       c4QnH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4QnI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s4OWI_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OWP_info" {
     sat_s4OWP_info:
         const sat_s4OWP_entry;
         const 8589934593;
         const 4294967311;
         const S4OYF_srt+208;
 },
 sat_s4OWN_entry() //  [R1]
         { []
         }
     {offset
       c4QnS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4QnT; else goto c4Qo1;
       c4QnT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Qo1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4OWJ::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s4OWJ::I64, 0)) goto c4QnZ; else goto c4QnR;
       c4QnR: // global
           if (%MO_S_Gt_W64(_s4OWJ::I64, 3)) goto c4QnZ; else goto c4Qo0;
       c4QnZ: // global
           R2 = _s4OWJ::I64;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c4Qo0: // global
           R1 = I64[(_s4OWJ::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OWN_info" {
     sat_s4OWN_info:
         const sat_s4OWN_entry;
         const 4294967296;
         const 4294967313;
         const S4OYF_srt+208;
 },
 sat_s4OWS_entry() //  [R1]
         { []
         }
     {offset
       c4Qoc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Qod; else goto c4Qol;
       c4Qod: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Qol: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4OWJ::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s4OWJ::I64, 0)) goto c4Qoj; else goto c4Qob;
       c4Qob: // global
           if (%MO_S_Gt_W64(_s4OWJ::I64, 3)) goto c4Qoj; else goto c4Qok;
       c4Qoj: // global
           R2 = _s4OWJ::I64;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c4Qok: // global
           R1 = I64[(_s4OWJ::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OWS_info" {
     sat_s4OWS_info:
         const sat_s4OWS_entry;
         const 4294967296;
         const 4294967313;
         const S4OYF_srt+208;
 },
 go_up_s4OWI_entry() //  [R1, R2]
         { []
         }
     {offset
       c4Qop: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c4Qot; else goto c4Qos;
       c4Qot: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4Qos: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c4Qon; else goto c4Qoo;
       c4Qon: // global
           _s4OWG::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s4OWP_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s4OWG::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s4OWN_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4Qoo: // global
           I64[Hp - 80] = sat_s4OWS_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c4Qov::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c4Qov::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_s4OWI_info" {
     go_up_s4OWI_info:
         const go_up_s4OWI_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const S4OYF_srt+208;
 },
 sat_s4OWT_entry() //  [R1]
         { []
         }
     {offset
       c4Qow: // global
           _s4OWT::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c4Qox; else goto c4Qoy;
       c4Qoy: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c4QoA; else goto c4Qoz;
       c4QoA: // global
           HpAlloc = 24;
           goto c4Qox;
       c4Qox: // global
           R1 = _s4OWT::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Qoz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s4OWT::P64;
           _s4OU2::I64 = I64[_s4OWT::P64 + 24];
           _s4OWG::I64 = _s4OU2::I64 - I64[_s4OWT::P64 + 16];
           I64[Hp - 16] = go_up_s4OWI_info;
           I64[Hp - 8] = _s4OWG::I64;
           I64[Hp] = 3 - _s4OWG::I64;
           R2 = _s4OU2::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s4OWI_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OWT_info" {
     sat_s4OWT_info:
         const sat_s4OWT_entry;
         const 8589934592;
         const 4294967316;
         const S4OYF_srt+208;
 },
 sat_s4OWF_entry() //  [R1]
         { []
         }
     {offset
       c4QoK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4QoL; else goto c4QoT;
       c4QoL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4QoT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4OU0::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s4OU0::I64, 0)) goto c4QoR; else goto c4QoJ;
       c4QoJ: // global
           if (%MO_S_Gt_W64(_s4OU0::I64, 3)) goto c4QoR; else goto c4QoS;
       c4QoR: // global
           R2 = _s4OU0::I64;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c4QoS: // global
           R1 = I64[(_s4OU0::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OWF_info" {
     sat_s4OWF_info:
         const sat_s4OWF_entry;
         const 4294967296;
         const 4294967313;
         const S4OYF_srt+208;
 },
 sat_s4OWX_entry() //  [R1]
         { []
         }
     {offset
       c4Qp7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Qp8; else goto c4Qpg;
       c4Qp8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4Qpg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s4OU0::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s4OU0::I64, 0)) goto c4Qpe; else goto c4Qp6;
       c4Qp6: // global
           if (%MO_S_Gt_W64(_s4OU0::I64, 3)) goto c4Qpe; else goto c4Qpf;
       c4Qpe: // global
           R2 = _s4OU0::I64;
           Sp = Sp - 16;
           call GHC.IO.IOMode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c4Qpf: // global
           R1 = I64[(_s4OU0::I64 << 3) + GHC.IO.IOMode.IOMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s4OWX_info" {
     sat_s4OWX_info:
         const sat_s4OWX_entry;
         const 4294967296;
         const 4294967313;
         const S4OYF_srt+208;
 },
 GHC.IO.IOMode.$fEnumIOMode_$cenumFromThenTo_entry() //  [R2, R3,
                                                          R4]
         { []
         }
     {offset
       c4Qpq: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4Qpr; else goto c4Qps;
       c4Qpr: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.IOMode.$fEnumIOMode_$cenumFromThenTo_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c4Qps: // global
           I64[Sp - 24] = block_c4Qph_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u4QrF; else goto c4Qpi;
       u4QrF: // global
           call _c4Qph(R1) args: 0, res: 0, upd: 0;
       c4Qpi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.$fEnumIOMode_$cenumFromThenTo_info" {
     GHC.IO.IOMode.$fEnumIOMode_$cenumFromThenTo_info:
         const GHC.IO.IOMode.$fEnumIOMode_$cenumFromThenTo_entry;
         const 0;
         const 35188667056142;
         const 12884901911;
         const S4OYF_srt+208;
 },
 _c4Qph() //  [R1]
         { []
         }
     {offset
       c4Qph: // global
           _s4OTX::P64 = P64[Sp + 8];
           _c4Qpp::P64 = R1 & 7;
           if (_c4Qpp::P64 < 3) goto u4QrA; else goto u4QrB;
       u4QrA: // global
           if (_c4Qpp::P64 < 2) goto c4Qpl; else goto c4Qpm;
       c4Qpl: // global
           _s4OU0::I64 = 0;
           goto s4OTZ;
       c4Qpm: // global
           _s4OU0::I64 = 1;
           goto s4OTZ;
       u4QrB: // global
           if (_c4Qpp::P64 < 4) goto c4Qpn; else goto c4Qpo;
       c4Qpn: // global
           _s4OU0::I64 = 2;
           goto s4OTZ;
       c4Qpo: // global
           _s4OU0::I64 = 3;
           goto s4OTZ;
       s4OTZ: // global
           I64[Sp] = block_c4Qpt_info;
           R1 = _s4OTX::P64;
           I64[Sp + 8] = _s4OU0::I64;
           if (R1 & 7 != 0) goto u4QrE; else goto c4Qr1;
       u4QrE: // global
           call _c4Qpt(R1) args: 0, res: 0, upd: 0;
       c4Qr1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Qph_info" {
     block_c4Qph_info:
         const _c4Qph;
         const 2;
         const 4294967326;
         const S4OYF_srt+208;
 },
 _c4Qpt() //  [R1]
         { []
         }
     {offset
       c4Qpt: // global
           _s4OTY::P64 = P64[Sp + 16];
           _c4Qrw::P64 = R1 & 7;
           if (_c4Qrw::P64 < 3) goto u4QrC; else goto u4QrD;
       u4QrC: // global
           if (_c4Qrw::P64 < 2) goto c4Qr7; else goto c4Qrb;
       c4Qr7: // global
           _s4OU2::I64 = 0;
           goto s4OU1;
       c4Qrb: // global
           _s4OU2::I64 = 1;
           goto s4OU1;
       u4QrD: // global
           if (_c4Qrw::P64 < 4) goto c4Qrf; else goto c4Qrj;
       c4Qrf: // global
           _s4OU2::I64 = 2;
           goto s4OU1;
       c4Qrj: // global
           _s4OU2::I64 = 3;
           goto s4OU1;
       s4OU1: // global
           I64[Sp] = block_c4Q8A_info;
           R1 = _s4OTY::P64;
           I64[Sp + 16] = _s4OU2::I64;
           if (R1 & 7 != 0) goto u4QrG; else goto c4Q8B;
       u4QrG: // global
           call _c4Q8A(R1) args: 0, res: 0, upd: 0;
       c4Q8B: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Qpt_info" {
     block_c4Qpt_info:
         const _c4Qpt;
         const 66;
         const 4294967326;
         const S4OYF_srt+208;
 },
 _c4Q8A() //  [R1]
         { []
         }
     {offset
       c4Q8A: // global
           _s4OU0::I64 = I64[Sp + 8];
           _s4OU2::I64 = I64[Sp + 16];
           _c4Qrx::P64 = R1 & 7;
           if (_c4Qrx::P64 < 3) goto u4Qry; else goto u4Qrz;
       u4Qry: // global
           if (_c4Qrx::P64 < 2) goto c4Qpx; else goto c4QpU;
       c4Qpx: // global
           Hp = Hp + 80;
           _s4OU3::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c4QqH; else goto c4Qpz;
       c4Qpz: // global
           if (%MO_S_Lt_W64(_s4OU2::I64,
                            _s4OU0::I64)) goto c4QpK; else goto c4QpT;
       c4QpK: // global
           if (%MO_S_Le_W64(0, _s4OU2::I64)) goto c4QpD; else goto c4QpI;
       c4QpD: // global
           I64[Hp - 72] = sat_s4OUm_info;
           I64[Hp - 56] = _s4OU0::I64;
           I64[Hp - 48] = _s4OU2::I64;
           I64[Hp - 40] = sat_s4OU8_info;
           I64[Hp - 24] = _s4OU0::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4QpI: // global
           if (%MO_S_Gt_W64(0, _s4OU0::I64)) goto c4QqY; else goto c4QpG;
       c4QpG: // global
           I64[Hp - 72] = sat_s4OUq_info;
           I64[Hp - 56] = _s4OU0::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c4QpE::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c4QpE::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4QpT: // global
           if (%MO_S_Ge_W64(0, _s4OU2::I64)) goto c4QpN; else goto c4QpS;
       c4QpN: // global
           I64[Hp - 72] = sat_s4OUI_info;
           I64[Hp - 56] = _s4OU0::I64;
           I64[Hp - 48] = _s4OU2::I64;
           I64[Hp - 40] = sat_s4OUu_info;
           I64[Hp - 24] = _s4OU0::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4QpS: // global
           if (%MO_S_Lt_W64(0, _s4OU0::I64)) goto c4QqY; else goto c4QpQ;
       c4QpQ: // global
           I64[Hp - 72] = sat_s4OUM_info;
           I64[Hp - 56] = _s4OU0::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c4QpO::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c4QpO::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4QpU: // global
           Hp = Hp + 80;
           _s4OU3::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c4QqH; else goto c4QpW;
       c4QpW: // global
           if (%MO_S_Lt_W64(_s4OU2::I64,
                            _s4OU0::I64)) goto c4Qq7; else goto c4Qqg;
       c4Qq7: // global
           if (%MO_S_Le_W64(1, _s4OU2::I64)) goto c4Qq0; else goto c4Qq5;
       c4Qq0: // global
           I64[Hp - 72] = sat_s4OV5_info;
           I64[Hp - 56] = _s4OU0::I64;
           I64[Hp - 48] = _s4OU2::I64;
           I64[Hp - 40] = sat_s4OUR_info;
           I64[Hp - 24] = _s4OU0::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4Qq5: // global
           if (%MO_S_Gt_W64(1, _s4OU0::I64)) goto c4QqY; else goto c4Qq3;
       c4Qq3: // global
           I64[Hp - 72] = sat_s4OV9_info;
           I64[Hp - 56] = _s4OU0::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c4Qq1::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c4Qq1::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4Qqg: // global
           if (%MO_S_Ge_W64(1, _s4OU2::I64)) goto c4Qqa; else goto c4Qqf;
       c4Qqa: // global
           I64[Hp - 72] = sat_s4OVr_info;
           I64[Hp - 56] = _s4OU0::I64;
           I64[Hp - 48] = _s4OU2::I64;
           I64[Hp - 40] = sat_s4OVd_info;
           I64[Hp - 24] = _s4OU0::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4Qqf: // global
           if (%MO_S_Lt_W64(1, _s4OU0::I64)) goto c4QqY; else goto c4Qqd;
       c4Qqd: // global
           I64[Hp - 72] = sat_s4OVv_info;
           I64[Hp - 56] = _s4OU0::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c4Qqb::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c4Qqb::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u4Qrz: // global
           if (_c4Qrx::P64 < 4) goto c4Qqh; else goto c4QqE;
       c4Qqh: // global
           Hp = Hp + 80;
           _s4OU3::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c4QqH; else goto c4Qqj;
       c4Qqj: // global
           if (%MO_S_Lt_W64(_s4OU2::I64,
                            _s4OU0::I64)) goto c4Qqu; else goto c4QqD;
       c4Qqu: // global
           if (%MO_S_Le_W64(2, _s4OU2::I64)) goto c4Qqn; else goto c4Qqs;
       c4Qqn: // global
           I64[Hp - 72] = sat_s4OVO_info;
           I64[Hp - 56] = _s4OU0::I64;
           I64[Hp - 48] = _s4OU2::I64;
           I64[Hp - 40] = sat_s4OVA_info;
           I64[Hp - 24] = _s4OU0::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4Qqs: // global
           if (%MO_S_Gt_W64(2, _s4OU0::I64)) goto c4QqY; else goto c4Qqq;
       c4Qqq: // global
           I64[Hp - 72] = sat_s4OVS_info;
           I64[Hp - 56] = _s4OU0::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c4Qqo::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c4Qqo::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4QqD: // global
           if (%MO_S_Ge_W64(2, _s4OU2::I64)) goto c4Qqx; else goto c4QqC;
       c4Qqx: // global
           I64[Hp - 72] = sat_s4OWa_info;
           I64[Hp - 56] = _s4OU0::I64;
           I64[Hp - 48] = _s4OU2::I64;
           I64[Hp - 40] = sat_s4OVW_info;
           I64[Hp - 24] = _s4OU0::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4QqC: // global
           if (%MO_S_Lt_W64(2, _s4OU0::I64)) goto c4QqY; else goto c4QqA;
       c4QqA: // global
           I64[Hp - 72] = sat_s4OWe_info;
           I64[Hp - 56] = _s4OU0::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c4Qqy::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c4Qqy::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4QqE: // global
           Hp = Hp + 80;
           _s4OU3::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c4QqH; else goto c4QqG;
       c4QqH: // global
           HpAlloc = 80;
           R1 = _s4OU3::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c4QqG: // global
           if (%MO_S_Lt_W64(_s4OU2::I64,
                            _s4OU0::I64)) goto c4QqR; else goto c4Qr0;
       c4QqR: // global
           if (%MO_S_Le_W64(3, _s4OU2::I64)) goto c4QqK; else goto c4QqP;
       c4QqK: // global
           I64[Hp - 72] = sat_s4OWx_info;
           I64[Hp - 56] = _s4OU0::I64;
           I64[Hp - 48] = _s4OU2::I64;
           I64[Hp - 40] = sat_s4OWj_info;
           I64[Hp - 24] = _s4OU0::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4QqP: // global
           if (%MO_S_Gt_W64(3, _s4OU0::I64)) goto c4QqY; else goto c4QqN;
       c4QqN: // global
           I64[Hp - 72] = sat_s4OWB_info;
           I64[Hp - 56] = _s4OU0::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c4QqL::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c4QqL::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4Qr0: // global
           if (%MO_S_Ge_W64(3, _s4OU2::I64)) goto c4QqU; else goto c4QqZ;
       c4QqU: // global
           I64[Hp - 72] = sat_s4OWT_info;
           I64[Hp - 56] = _s4OU0::I64;
           I64[Hp - 48] = _s4OU2::I64;
           I64[Hp - 40] = sat_s4OWF_info;
           I64[Hp - 24] = _s4OU0::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4QqZ: // global
           if (%MO_S_Lt_W64(3, _s4OU0::I64)) goto c4QqY; else goto c4QqX;
       c4QqY: // global
           Hp = Hp - 80;
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c4QqX: // global
           I64[Hp - 72] = sat_s4OWX_info;
           I64[Hp - 56] = _s4OU0::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c4QqV::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c4QqV::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Q8A_info" {
     block_c4Q8A_info:
         const _c4Q8A;
         const 194;
         const 4294967326;
         const S4OYF_srt+208;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.530884647 UTC

[section ""data" . GHC.IO.IOMode.$fEnumIOMode_closure" {
     GHC.IO.IOMode.$fEnumIOMode_closure:
         const GHC.Enum.C:Enum_con_info;
         const GHC.IO.IOMode.$fEnumIOMode_$csucc_closure+1;
         const GHC.IO.IOMode.$fEnumIOMode_$cpred_closure+1;
         const GHC.IO.IOMode.$fEnumIOMode_$ctoEnum_closure+1;
         const GHC.IO.IOMode.$fEnumIOMode_$cfromEnum_closure+1;
         const GHC.IO.IOMode.$fEnumIOMode_$cenumFrom_closure+1;
         const GHC.IO.IOMode.$fEnumIOMode_$cenumFromThen_closure+2;
         const GHC.IO.IOMode.$fEnumIOMode_$cenumFromTo_closure+2;
         const GHC.IO.IOMode.$fEnumIOMode_$cenumFromThenTo_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.532803797 UTC

[section ""data" . GHC.IO.IOMode.$trModule3_closure" {
     GHC.IO.IOMode.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.IOMode.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.535285878 UTC

[section ""data" . GHC.IO.IOMode.$trModule1_closure" {
     GHC.IO.IOMode.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.IOMode.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.53716606 UTC

[section ""data" . GHC.IO.IOMode.$trModule_closure" {
     GHC.IO.IOMode.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.IO.IOMode.$trModule3_closure+1;
         const GHC.IO.IOMode.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.538954946 UTC

[section ""cstring" . GHC.IO.IOMode.$tcIOMode2_bytes" {
     GHC.IO.IOMode.$tcIOMode2_bytes:
         I8[] [73,79,77,111,100,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.540696719 UTC

[section ""data" . GHC.IO.IOMode.$tcIOMode1_closure" {
     GHC.IO.IOMode.$tcIOMode1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.IOMode.$tcIOMode2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.543113281 UTC

[section ""data" . GHC.IO.IOMode.$tcIOMode_closure" {
     GHC.IO.IOMode.$tcIOMode_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.IOMode.$trModule_closure+1;
         const GHC.IO.IOMode.$tcIOMode1_closure+1;
         const GHC.Types.krep$*_closure;
         const 9818555080744742578;
         const 14348064797489060312;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.545032538 UTC

[section ""data" . GHC.IO.IOMode.$tc'AppendMode1_closure" {
     GHC.IO.IOMode.$tc'AppendMode1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.IOMode.$tcIOMode_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.546879962 UTC

[section ""cstring" . GHC.IO.IOMode.$tc'ReadMode2_bytes" {
     GHC.IO.IOMode.$tc'ReadMode2_bytes:
         I8[] [39,82,101,97,100,77,111,100,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.54871641 UTC

[section ""data" . GHC.IO.IOMode.$tc'ReadMode1_closure" {
     GHC.IO.IOMode.$tc'ReadMode1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.IOMode.$tc'ReadMode2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.550652704 UTC

[section ""data" . GHC.IO.IOMode.$tc'ReadMode_closure" {
     GHC.IO.IOMode.$tc'ReadMode_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.IOMode.$trModule_closure+1;
         const GHC.IO.IOMode.$tc'ReadMode1_closure+1;
         const GHC.IO.IOMode.$tc'AppendMode1_closure+1;
         const 17697021977009842408;
         const 16081808542294250782;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.552564065 UTC

[section ""cstring" . GHC.IO.IOMode.$tc'WriteMode2_bytes" {
     GHC.IO.IOMode.$tc'WriteMode2_bytes:
         I8[] [39,87,114,105,116,101,77,111,100,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.554349678 UTC

[section ""data" . GHC.IO.IOMode.$tc'WriteMode1_closure" {
     GHC.IO.IOMode.$tc'WriteMode1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.IOMode.$tc'WriteMode2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.556060891 UTC

[section ""data" . GHC.IO.IOMode.$tc'WriteMode_closure" {
     GHC.IO.IOMode.$tc'WriteMode_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.IOMode.$trModule_closure+1;
         const GHC.IO.IOMode.$tc'WriteMode1_closure+1;
         const GHC.IO.IOMode.$tc'AppendMode1_closure+1;
         const 16610458722029011495;
         const 11554819901902375488;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.557904257 UTC

[section ""cstring" . GHC.IO.IOMode.$tc'AppendMode3_bytes" {
     GHC.IO.IOMode.$tc'AppendMode3_bytes:
         I8[] [39,65,112,112,101,110,100,77,111,100,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.559811838 UTC

[section ""data" . GHC.IO.IOMode.$tc'AppendMode2_closure" {
     GHC.IO.IOMode.$tc'AppendMode2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.IOMode.$tc'AppendMode3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.562379552 UTC

[section ""data" . GHC.IO.IOMode.$tc'AppendMode_closure" {
     GHC.IO.IOMode.$tc'AppendMode_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.IOMode.$trModule_closure+1;
         const GHC.IO.IOMode.$tc'AppendMode2_closure+1;
         const GHC.IO.IOMode.$tc'AppendMode1_closure+1;
         const 3610623883618650464;
         const 11131639874085434472;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.565011498 UTC

[section ""cstring" . GHC.IO.IOMode.$tc'ReadWriteMode2_bytes" {
     GHC.IO.IOMode.$tc'ReadWriteMode2_bytes:
         I8[] [39,82,101,97,100,87,114,105,116,101,77,111,100,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.567685021 UTC

[section ""data" . GHC.IO.IOMode.$tc'ReadWriteMode1_closure" {
     GHC.IO.IOMode.$tc'ReadWriteMode1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.IOMode.$tc'ReadWriteMode2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.571011923 UTC

[section ""data" . GHC.IO.IOMode.$tc'ReadWriteMode_closure" {
     GHC.IO.IOMode.$tc'ReadWriteMode_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.IOMode.$trModule_closure+1;
         const GHC.IO.IOMode.$tc'ReadWriteMode1_closure+1;
         const GHC.IO.IOMode.$tc'AppendMode1_closure+1;
         const 626157189396725199;
         const 9407417215311302278;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.572847611 UTC

[section ""data" . GHC.IO.IOMode.ReadMode_closure" {
     GHC.IO.IOMode.ReadMode_closure:
         const GHC.IO.IOMode.ReadMode_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.57468946 UTC

[section ""data" . GHC.IO.IOMode.WriteMode_closure" {
     GHC.IO.IOMode.WriteMode_closure:
         const GHC.IO.IOMode.WriteMode_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.576407837 UTC

[section ""data" . GHC.IO.IOMode.AppendMode_closure" {
     GHC.IO.IOMode.AppendMode_closure:
         const GHC.IO.IOMode.AppendMode_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.578176795 UTC

[section ""data" . GHC.IO.IOMode.ReadWriteMode_closure" {
     GHC.IO.IOMode.ReadWriteMode_closure:
         const GHC.IO.IOMode.ReadWriteMode_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.579930931 UTC

[section ""relreadonly" . GHC.IO.IOMode.IOMode_closure_tbl" {
     GHC.IO.IOMode.IOMode_closure_tbl:
         const GHC.IO.IOMode.ReadMode_closure+1;
         const GHC.IO.IOMode.WriteMode_closure+2;
         const GHC.IO.IOMode.AppendMode_closure+3;
         const GHC.IO.IOMode.ReadWriteMode_closure+4;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.582117599 UTC

[section ""cstring" . i4QCc_str" {
     i4QCc_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,73,79,77,111,100,101,46,82,101,97,100,77,111,100,101]
 },
 GHC.IO.IOMode.ReadMode_con_entry() //  [R1]
         { []
         }
     {offset
       c4QCb: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.ReadMode_con_info" {
     GHC.IO.IOMode.ReadMode_con_info:
         const GHC.IO.IOMode.ReadMode_con_entry;
         const 4294967296;
         const 3;
         const i4QCc_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.586354326 UTC

[section ""cstring" . i4QCj_str" {
     i4QCj_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,73,79,77,111,100,101,46,87,114,105,116,101,77,111,100,101]
 },
 GHC.IO.IOMode.WriteMode_con_entry() //  [R1]
         { []
         }
     {offset
       c4QCi: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.WriteMode_con_info" {
     GHC.IO.IOMode.WriteMode_con_info:
         const GHC.IO.IOMode.WriteMode_con_entry;
         const 4294967296;
         const 4294967299;
         const i4QCj_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.58977713 UTC

[section ""cstring" . i4QCq_str" {
     i4QCq_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,73,79,77,111,100,101,46,65,112,112,101,110,100,77,111,100,101]
 },
 GHC.IO.IOMode.AppendMode_con_entry() //  [R1]
         { []
         }
     {offset
       c4QCp: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.AppendMode_con_info" {
     GHC.IO.IOMode.AppendMode_con_info:
         const GHC.IO.IOMode.AppendMode_con_entry;
         const 4294967296;
         const 8589934595;
         const i4QCq_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.5932199 UTC

[section ""cstring" . i4QCx_str" {
     i4QCx_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,73,79,77,111,100,101,46,82,101,97,100,87,114,105,116,101,77,111,100,101]
 },
 GHC.IO.IOMode.ReadWriteMode_con_entry() //  [R1]
         { []
         }
     {offset
       c4QCw: // global
           R1 = R1 + 4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.IOMode.ReadWriteMode_con_info" {
     GHC.IO.IOMode.ReadWriteMode_con_info:
         const GHC.IO.IOMode.ReadWriteMode_con_entry;
         const 4294967296;
         const 12884901891;
         const i4QCx_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:45.597174963 UTC

[section ""relreadonly" . S4OYF_srt" {
     S4OYF_srt:
         const GHC.IO.IOMode.$fReadIOMode8_closure;
         const GHC.IO.IOMode.$fReadIOMode12_closure;
         const GHC.IO.IOMode.$fReadIOMode16_closure;
         const GHC.IO.IOMode.$fReadIOMode20_closure;
         const GHC.IO.IOMode.$w$cshowsPrec_closure;
         const GHC.IO.IOMode.$fShowIOMode_$cshow_closure;
         const GHC.Read.choose2_closure;
         const GHC.IO.IOMode.$fReadIOMode_sps_closure;
         const GHC.Read.list3_closure;
         const GHC.IO.IOMode.$fReadIOMode2_closure;
         const GHC.IO.IOMode.$fReadIOMode_$creadsPrec_closure;
         const GHC.Read.list_closure;
         const GHC.IO.IOMode.$fReadIOMode1_closure;
         const GHC.IO.IOMode.$fReadIOMode_$creadListPrec_closure;
         const GHC.IO.IOMode.$fReadIOMode22_closure;
         const GHC.Arr.hopelessIndexError_closure;
         const GHC.IO.IOMode.$fIxIOMode_$cindex_closure;
         const GHC.Err.error_closure;
         const lvl13_r4KYY_closure;
         const GHC.IO.IOMode.$fEnumIOMode_$cpred_closure;
         const GHC.IO.IOMode.$fEnumIOMode5_closure;
         const GHC.IO.IOMode.$fEnumIOMode_$csucc_closure;
         const GHC.IO.IOMode.$fEnumIOMode6_closure;
         const lvl18_r4KZ3_closure;
         const lvl19_r4KZ4_closure;
         const lvl20_r4KZ5_closure;
         const GHC.IO.IOMode.$wlvl_closure;
         const GHC.IO.IOMode.$fEnumIOMode_$ctoEnum_closure;
         const GHC.IO.IOMode.$w$ctoEnum_closure;
         const GHC.IO.IOMode.$fEnumIOMode_$cenumFrom_closure;
         const GHC.IO.IOMode.$fEnumIOMode1_closure;
         const GHC.IO.IOMode.$fEnumIOMode2_closure;
         const GHC.IO.IOMode.$fEnumIOMode3_closure;
         const GHC.IO.IOMode.$fEnumIOMode4_closure;
         const GHC.IO.IOMode.$fEnumIOMode_go3_closure;
         const GHC.IO.IOMode.$fEnumIOMode_go2_closure;
         const GHC.IO.IOMode.$fEnumIOMode_go1_closure;
         const GHC.IO.IOMode.$fEnumIOMode_go_closure;
         const GHC.IO.IOMode.$fEnumIOMode_$cenumFromTo_closure;
         const GHC.IO.IOMode.$fEnumIOMode_$cenumFromThenTo_closure;
 }]

