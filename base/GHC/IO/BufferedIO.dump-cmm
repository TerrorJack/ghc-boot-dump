
==================== Output Cmm ====================
2018-03-16 16:03:14.689605408 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:03:14.690573673 UTC

[section ""data" . GHC.IO.BufferedIO.newBuffer_closure" {
     GHC.IO.BufferedIO.newBuffer_closure:
         const GHC.IO.BufferedIO.newBuffer_info;
 },
 GHC.IO.BufferedIO.newBuffer_entry() //  [R2]
         { info_tbl: [(c87Pi,
                       label: GHC.IO.BufferedIO.newBuffer_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87Pi: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c87Pj; else goto c87Pk;
       c87Pj: // global
           R2 = R2;
           R1 = GHC.IO.BufferedIO.newBuffer_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c87Pk: // global
           I64[Sp - 8] = block_c87Pf_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u87Po; else goto c87Pg;
       u87Po: // global
           call _c87Pf(R1) args: 0, res: 0, upd: 0;
       c87Pg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c87Pf() //  [R1]
         { info_tbl: [(c87Pf,
                       label: block_c87Pf_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87Pf: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.691846237 UTC

[section ""data" . GHC.IO.BufferedIO.fillReadBuffer_closure" {
     GHC.IO.BufferedIO.fillReadBuffer_closure:
         const GHC.IO.BufferedIO.fillReadBuffer_info;
 },
 GHC.IO.BufferedIO.fillReadBuffer_entry() //  [R2]
         { info_tbl: [(c87Pw,
                       label: GHC.IO.BufferedIO.fillReadBuffer_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87Pw: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c87Px; else goto c87Py;
       c87Px: // global
           R2 = R2;
           R1 = GHC.IO.BufferedIO.fillReadBuffer_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c87Py: // global
           I64[Sp - 8] = block_c87Pt_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u87PC; else goto c87Pu;
       u87PC: // global
           call _c87Pt(R1) args: 0, res: 0, upd: 0;
       c87Pu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c87Pt() //  [R1]
         { info_tbl: [(c87Pt,
                       label: block_c87Pt_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87Pt: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.693079648 UTC

[section ""data" . GHC.IO.BufferedIO.fillReadBuffer0_closure" {
     GHC.IO.BufferedIO.fillReadBuffer0_closure:
         const GHC.IO.BufferedIO.fillReadBuffer0_info;
 },
 GHC.IO.BufferedIO.fillReadBuffer0_entry() //  [R2]
         { info_tbl: [(c87PK,
                       label: GHC.IO.BufferedIO.fillReadBuffer0_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87PK: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c87PL; else goto c87PM;
       c87PL: // global
           R2 = R2;
           R1 = GHC.IO.BufferedIO.fillReadBuffer0_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c87PM: // global
           I64[Sp - 8] = block_c87PH_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u87PQ; else goto c87PI;
       u87PQ: // global
           call _c87PH(R1) args: 0, res: 0, upd: 0;
       c87PI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c87PH() //  [R1]
         { info_tbl: [(c87PH,
                       label: block_c87PH_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87PH: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.694320345 UTC

[section ""data" . GHC.IO.BufferedIO.emptyWriteBuffer_closure" {
     GHC.IO.BufferedIO.emptyWriteBuffer_closure:
         const GHC.IO.BufferedIO.emptyWriteBuffer_info;
 },
 GHC.IO.BufferedIO.emptyWriteBuffer_entry() //  [R2]
         { info_tbl: [(c87PY,
                       label: GHC.IO.BufferedIO.emptyWriteBuffer_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87PY: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c87PZ; else goto c87Q0;
       c87PZ: // global
           R2 = R2;
           R1 = GHC.IO.BufferedIO.emptyWriteBuffer_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c87Q0: // global
           I64[Sp - 8] = block_c87PV_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u87Q4; else goto c87PW;
       u87Q4: // global
           call _c87PV(R1) args: 0, res: 0, upd: 0;
       c87PW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c87PV() //  [R1]
         { info_tbl: [(c87PV,
                       label: block_c87PV_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87PV: // global
           R1 = P64[R1 + 31];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.695500257 UTC

[section ""data" . GHC.IO.BufferedIO.flushWriteBuffer_closure" {
     GHC.IO.BufferedIO.flushWriteBuffer_closure:
         const GHC.IO.BufferedIO.flushWriteBuffer_info;
 },
 GHC.IO.BufferedIO.flushWriteBuffer_entry() //  [R2]
         { info_tbl: [(c87Qc,
                       label: GHC.IO.BufferedIO.flushWriteBuffer_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87Qc: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c87Qd; else goto c87Qe;
       c87Qd: // global
           R2 = R2;
           R1 = GHC.IO.BufferedIO.flushWriteBuffer_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c87Qe: // global
           I64[Sp - 8] = block_c87Q9_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u87Qi; else goto c87Qa;
       u87Qi: // global
           call _c87Q9(R1) args: 0, res: 0, upd: 0;
       c87Qa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c87Q9() //  [R1]
         { info_tbl: [(c87Q9,
                       label: block_c87Q9_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87Q9: // global
           R1 = P64[R1 + 39];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.696671126 UTC

[section ""data" . GHC.IO.BufferedIO.flushWriteBuffer0_closure" {
     GHC.IO.BufferedIO.flushWriteBuffer0_closure:
         const GHC.IO.BufferedIO.flushWriteBuffer0_info;
 },
 GHC.IO.BufferedIO.flushWriteBuffer0_entry() //  [R2]
         { info_tbl: [(c87Qq,
                       label: GHC.IO.BufferedIO.flushWriteBuffer0_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87Qq: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c87Qr; else goto c87Qs;
       c87Qr: // global
           R2 = R2;
           R1 = GHC.IO.BufferedIO.flushWriteBuffer0_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c87Qs: // global
           I64[Sp - 8] = block_c87Qn_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u87Qw; else goto c87Qo;
       u87Qw: // global
           call _c87Qn(R1) args: 0, res: 0, upd: 0;
       c87Qo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c87Qn() //  [R1]
         { info_tbl: [(c87Qn,
                       label: block_c87Qn_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87Qn: // global
           R1 = P64[R1 + 47];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.69824065 UTC

[section ""data" . $dmemptyWriteBuffer1_r87Lu_closure" {
     $dmemptyWriteBuffer1_r87Lu_closure:
         const $dmemptyWriteBuffer1_r87Lu_info;
 },
 sat_s87N1_entry() //  [R1]
         { info_tbl: [(c87QI,
                       label: sat_s87N1_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87QI: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c87QM; else goto c87QN;
       c87QM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c87QN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c87QF_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u87QR; else goto c87QG;
       u87QR: // global
           call _c87QF(R1) args: 0, res: 0, upd: 0;
       c87QG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c87QF() //  [R1]
         { info_tbl: [(c87QF,
                       label: block_c87QF_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87QF: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c87QQ; else goto c87QP;
       c87QQ: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c87QP: // global
           _s87MW::P64 = P64[R1 + 7];
           _s87MV::I64 = I64[R1 + 23];
           _s87MY::I64 = I64[R1 + 31];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _s87MW::P64;
           P64[Hp - 32] = GHC.IO.Buffer.WriteBuffer_closure+2;
           I64[Hp - 24] = _s87MV::I64;
           I64[Hp - 16] = _s87MY::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           R1 = Hp - 47;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 $dmemptyWriteBuffer1_r87Lu_entry() //  [R2, R3, R4]
         { info_tbl: [(c87QS,
                       label: $dmemptyWriteBuffer1_r87Lu_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87QS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c87QW; else goto c87QV;
       c87QW: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = $dmemptyWriteBuffer1_r87Lu_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c87QV: // global
           I64[Hp - 16] = sat_s87N1_info;
           P64[Hp] = R4;
           R1 = Hp - 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.699866809 UTC

[section ""data" . GHC.IO.BufferedIO.$dmemptyWriteBuffer_closure" {
     GHC.IO.BufferedIO.$dmemptyWriteBuffer_closure:
         const GHC.IO.BufferedIO.$dmemptyWriteBuffer_info;
 },
 GHC.IO.BufferedIO.$dmemptyWriteBuffer_entry() //  [R2, R3, R4]
         { info_tbl: [(c87R1,
                       label: GHC.IO.BufferedIO.$dmemptyWriteBuffer_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87R1: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call $dmemptyWriteBuffer1_r87Lu_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.701690946 UTC

[section ""data" . GHC.IO.BufferedIO.$wreadBuf_closure" {
     GHC.IO.BufferedIO.$wreadBuf_closure:
         const GHC.IO.BufferedIO.$wreadBuf_info;
 },
 GHC.IO.BufferedIO.$wreadBuf_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87R5: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.IO.BufferedIO.$wreadBuf_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2,
                                                  R1) args: 32, res: 0, upd: 8;
     }
 },
 sat_s87Nm_entry() //  [R1]
         { info_tbl: [(c87Rr,
                       label: sat_s87Nm_info
                       rep:HeapRep 3 ptrs 4 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87Rr: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c87Ry; else goto c87Rz;
       c87Ry: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c87Rz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 72] = block_c87Ro_info;
           _s87N5::P64 = P64[R1 + 16];
           _s87N6::P64 = P64[R1 + 24];
           _s87N4::I64 = I64[R1 + 40];
           _s87N7::I64 = I64[R1 + 48];
           _s87N8::I64 = I64[R1 + 56];
           _s87N9::I64 = I64[R1 + 64];
           R1 = P64[R1 + 32];
           I64[Sp - 64] = _s87N4::I64;
           P64[Sp - 56] = _s87N5::P64;
           P64[Sp - 48] = _s87N6::P64;
           I64[Sp - 40] = _s87N7::I64;
           I64[Sp - 32] = _s87N8::I64;
           I64[Sp - 24] = _s87N9::I64;
           Sp = Sp - 72;
           if (R1 & 7 != 0) goto u87RD; else goto c87Rp;
       u87RD: // global
           call _c87Ro(R1) args: 0, res: 0, upd: 0;
       c87Rp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c87Ro() //  [R1]
         { info_tbl: [(c87Ro,
                       label: block_c87Ro_info
                       rep:StackRep [True, False, False, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87Ro: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c87RC; else goto c87RB;
       c87RC: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c87RB: // global
           _s87Nl::I64 = I64[Sp + 48] + I64[R1 + 7];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 24];
           I64[Hp - 24] = I64[Sp + 8];
           I64[Hp - 16] = I64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = _s87Nl::I64;
           R1 = Hp - 47;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.IO.BufferedIO.$wreadBuf_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c87RE,
                       label: GHC.IO.BufferedIO.$wreadBuf_info
                       rep:HeapRep static {
                             Fun {arity: 9
                                  fun_type: ArgGen [False, False, True, False, False, True, True,
                                                    True]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87RE: // global
           _s87N6::P64 = R6;
           _s87N5::P64 = R5;
           _s87N4::I64 = R4;
           _s87N3::P64 = R3;
           _s87N2::P64 = R2;
           if ((Sp + -64) < SpLim) (likely: False) goto c87RG; else goto c87RH;
       c87RH: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c87RJ; else goto c87RI;
       c87RJ: // global
           HpAlloc = 32;
           goto c87RG;
       c87RG: // global
           R1 = GHC.IO.BufferedIO.$wreadBuf_closure;
           P64[Sp - 40] = _s87N2::P64;
           P64[Sp - 32] = _s87N3::P64;
           I64[Sp - 24] = _s87N4::I64;
           P64[Sp - 16] = _s87N5::P64;
           P64[Sp - 8] = _s87N6::P64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       c87RI: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           _s87N9::I64 = I64[Sp + 16];
           I64[Hp - 16] = I64[Sp] - _s87N9::I64;
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s87N4::I64 + _s87N9::I64;
           I64[Sp - 32] = block_c87Rh_info;
           R2 = _s87N2::P64;
           I64[Sp - 64] = stg_ap_pppv_info;
           P64[Sp - 56] = _s87N3::P64;
           P64[Sp - 48] = Hp - 7;
           P64[Sp - 40] = Hp - 23;
           I64[Sp - 24] = _s87N4::I64;
           P64[Sp - 16] = _s87N5::P64;
           P64[Sp - 8] = _s87N6::P64;
           Sp = Sp - 64;
           call GHC.IO.Device.read_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 _c87Rh() //  [R1]
         { info_tbl: [(c87Rh,
                       label: block_c87Rh_info
                       rep:StackRep [True, False, False, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87Rh: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c87RM; else goto c87RL;
       c87RM: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c87RL: // global
           _s87N4::I64 = I64[Sp + 8];
           _s87N5::P64 = P64[Sp + 16];
           _s87N6::P64 = P64[Sp + 24];
           _s87N7::I64 = I64[Sp + 32];
           _s87N8::I64 = I64[Sp + 40];
           _s87N9::I64 = I64[Sp + 48];
           call MO_Touch(_s87N5::P64);
           I64[Hp - 88] = sat_s87Nm_info;
           P64[Hp - 72] = _s87N5::P64;
           P64[Hp - 64] = _s87N6::P64;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = _s87N4::I64;
           I64[Hp - 40] = _s87N7::I64;
           I64[Hp - 32] = _s87N8::I64;
           I64[Hp - 24] = _s87N9::I64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 88;
           R1 = Hp - 15;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.704674529 UTC

[section ""data" . GHC.IO.BufferedIO.readBuf1_closure" {
     GHC.IO.BufferedIO.readBuf1_closure:
         const GHC.IO.BufferedIO.readBuf1_info;
 },
 GHC.IO.BufferedIO.readBuf1_entry() //  [R2, R3, R4]
         { info_tbl: [(c87RU,
                       label: GHC.IO.BufferedIO.readBuf1_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87RU: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c87RV; else goto c87RW;
       c87RV: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.BufferedIO.readBuf1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c87RW: // global
           I64[Sp - 24] = block_c87RR_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u87S0; else goto c87RS;
       u87S0: // global
           call _c87RR(R1) args: 0, res: 0, upd: 0;
       c87RS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c87RR() //  [R1]
         { info_tbl: [(c87RR,
                       label: block_c87RR_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87RR: // global
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = I64[R1 + 23];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           I64[Sp] = I64[R1 + 31];
           I64[Sp + 8] = I64[R1 + 39];
           I64[Sp + 16] = I64[R1 + 47];
           call GHC.IO.BufferedIO.$wreadBuf_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 32, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.707042793 UTC

[section ""data" . GHC.IO.BufferedIO.readBuf_closure" {
     GHC.IO.BufferedIO.readBuf_closure:
         const GHC.IO.BufferedIO.readBuf_info;
 },
 GHC.IO.BufferedIO.readBuf_entry() //  [R2, R3, R4]
         { info_tbl: [(c87S5,
                       label: GHC.IO.BufferedIO.readBuf_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87S5: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.IO.BufferedIO.readBuf1_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.708980288 UTC

[section ""data" . GHC.IO.BufferedIO.$wreadBufNonBlocking_closure" {
     GHC.IO.BufferedIO.$wreadBufNonBlocking_closure:
         const GHC.IO.BufferedIO.$wreadBufNonBlocking_info;
 },
 GHC.IO.BufferedIO.$wreadBufNonBlocking_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87S9: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.IO.BufferedIO.$wreadBufNonBlocking_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2,
                                                             R1) args: 32, res: 0, upd: 8;
     }
 },
 sat_s87NX_entry() //  [R1]
         { info_tbl: [(c87SB,
                       label: sat_s87NX_info
                       rep:HeapRep 3 ptrs 4 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87SB: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c87SI; else goto c87SJ;
       c87SI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c87SJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 72] = block_c87Sy_info;
           _s87NC::P64 = P64[R1 + 16];
           _s87ND::P64 = P64[R1 + 24];
           _s87NB::I64 = I64[R1 + 40];
           _s87NE::I64 = I64[R1 + 48];
           _s87NF::I64 = I64[R1 + 56];
           _s87NG::I64 = I64[R1 + 64];
           R1 = P64[R1 + 32];
           I64[Sp - 64] = _s87NB::I64;
           P64[Sp - 56] = _s87NC::P64;
           P64[Sp - 48] = _s87ND::P64;
           I64[Sp - 40] = _s87NE::I64;
           I64[Sp - 32] = _s87NF::I64;
           I64[Sp - 24] = _s87NG::I64;
           Sp = Sp - 72;
           if (R1 & 7 != 0) goto u87SN; else goto c87Sz;
       u87SN: // global
           call _c87Sy(R1) args: 0, res: 0, upd: 0;
       c87Sz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c87Sy() //  [R1]
         { info_tbl: [(c87Sy,
                       label: block_c87Sy_info
                       rep:StackRep [True, False, False, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87Sy: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c87SM; else goto c87SL;
       c87SM: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c87SL: // global
           _s87NW::I64 = I64[Sp + 48] + I64[R1 + 7];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 24];
           I64[Hp - 24] = I64[Sp + 8];
           I64[Hp - 16] = I64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = _s87NW::I64;
           R1 = Hp - 47;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.IO.BufferedIO.$wreadBufNonBlocking_entry() //  [R2, R3, R4, R5,
                                                     R6]
         { info_tbl: [(c87SO,
                       label: GHC.IO.BufferedIO.$wreadBufNonBlocking_info
                       rep:HeapRep static {
                             Fun {arity: 9
                                  fun_type: ArgGen [False, False, True, False, False, True, True,
                                                    True]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87SO: // global
           _s87ND::P64 = R6;
           _s87NC::P64 = R5;
           _s87NB::I64 = R4;
           _s87NA::P64 = R3;
           _s87Nz::P64 = R2;
           if ((Sp + -64) < SpLim) (likely: False) goto c87SP; else goto c87SQ;
       c87SQ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c87SS; else goto c87SR;
       c87SS: // global
           HpAlloc = 32;
           goto c87SP;
       c87SP: // global
           R1 = GHC.IO.BufferedIO.$wreadBufNonBlocking_closure;
           P64[Sp - 40] = _s87Nz::P64;
           P64[Sp - 32] = _s87NA::P64;
           I64[Sp - 24] = _s87NB::I64;
           P64[Sp - 16] = _s87NC::P64;
           P64[Sp - 8] = _s87ND::P64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       c87SR: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           _s87NG::I64 = I64[Sp + 16];
           I64[Hp - 16] = I64[Sp] - _s87NG::I64;
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s87NB::I64 + _s87NG::I64;
           I64[Sp - 32] = block_c87Sl_info;
           R2 = _s87Nz::P64;
           I64[Sp - 64] = stg_ap_pppv_info;
           P64[Sp - 56] = _s87NA::P64;
           P64[Sp - 48] = Hp - 7;
           P64[Sp - 40] = Hp - 23;
           I64[Sp - 24] = _s87NB::I64;
           P64[Sp - 16] = _s87NC::P64;
           P64[Sp - 8] = _s87ND::P64;
           Sp = Sp - 64;
           call GHC.IO.Device.readNonBlocking_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 _c87Sl() //  [R1]
         { info_tbl: [(c87Sl,
                       label: block_c87Sl_info
                       rep:StackRep [True, False, False, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87Sl: // global
           call MO_Touch(P64[Sp + 16]);
           I64[Sp] = block_c87So_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u87T8; else goto c87Sp;
       u87T8: // global
           call _c87So(R1) args: 0, res: 0, upd: 0;
       c87Sp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c87So() //  [R1]
         { info_tbl: [(c87So,
                       label: block_c87So_info
                       rep:StackRep [True, False, False, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87So: // global
           _s87NB::I64 = I64[Sp + 8];
           _s87NC::P64 = P64[Sp + 16];
           _s87ND::P64 = P64[Sp + 24];
           _s87NE::I64 = I64[Sp + 32];
           _s87NF::I64 = I64[Sp + 40];
           _s87NG::I64 = I64[Sp + 48];
           if (R1 & 7 == 1) goto c87SY; else goto c87T3;
       c87SY: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c87T1; else goto c87T0;
       c87T1: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c87T0: // global
           I64[Hp - 72] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 64] = _s87NC::P64;
           P64[Hp - 56] = _s87ND::P64;
           I64[Hp - 48] = _s87NB::I64;
           I64[Hp - 40] = _s87NE::I64;
           I64[Hp - 32] = _s87NF::I64;
           I64[Hp - 24] = _s87NG::I64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = GHC.Base.Nothing_closure+1;
           P64[Hp] = Hp - 71;
           R1 = Hp - 15;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c87T3: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c87T6; else goto c87T5;
       c87T6: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c87T5: // global
           _s87NT::P64 = P64[R1 + 6];
           I64[Hp - 88] = sat_s87NX_info;
           P64[Hp - 72] = _s87NC::P64;
           P64[Hp - 64] = _s87ND::P64;
           P64[Hp - 56] = _s87NT::P64;
           I64[Hp - 48] = _s87NB::I64;
           I64[Hp - 40] = _s87NE::I64;
           I64[Hp - 32] = _s87NF::I64;
           I64[Hp - 24] = _s87NG::I64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 88;
           R1 = Hp - 15;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.712397916 UTC

[section ""data" . GHC.IO.BufferedIO.readBufNonBlocking1_closure" {
     GHC.IO.BufferedIO.readBufNonBlocking1_closure:
         const GHC.IO.BufferedIO.readBufNonBlocking1_info;
 },
 GHC.IO.BufferedIO.readBufNonBlocking1_entry() //  [R2, R3, R4]
         { info_tbl: [(c87Tg,
                       label: GHC.IO.BufferedIO.readBufNonBlocking1_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87Tg: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c87Th; else goto c87Ti;
       c87Th: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.BufferedIO.readBufNonBlocking1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c87Ti: // global
           I64[Sp - 24] = block_c87Td_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u87Tm; else goto c87Te;
       u87Tm: // global
           call _c87Td(R1) args: 0, res: 0, upd: 0;
       c87Te: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c87Td() //  [R1]
         { info_tbl: [(c87Td,
                       label: block_c87Td_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87Td: // global
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = I64[R1 + 23];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           I64[Sp] = I64[R1 + 31];
           I64[Sp + 8] = I64[R1 + 39];
           I64[Sp + 16] = I64[R1 + 47];
           call GHC.IO.BufferedIO.$wreadBufNonBlocking_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 32, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.713796988 UTC

[section ""data" . GHC.IO.BufferedIO.readBufNonBlocking_closure" {
     GHC.IO.BufferedIO.readBufNonBlocking_closure:
         const GHC.IO.BufferedIO.readBufNonBlocking_info;
 },
 GHC.IO.BufferedIO.readBufNonBlocking_entry() //  [R2, R3, R4]
         { info_tbl: [(c87Tr,
                       label: GHC.IO.BufferedIO.readBufNonBlocking_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87Tr: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.IO.BufferedIO.readBufNonBlocking1_entry(R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.715121019 UTC

[section ""data" . GHC.IO.BufferedIO.$wwriteBuf_closure" {
     GHC.IO.BufferedIO.$wwriteBuf_closure:
         const GHC.IO.BufferedIO.$wwriteBuf_info;
 },
 GHC.IO.BufferedIO.$wwriteBuf_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87Tv: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.IO.BufferedIO.$wwriteBuf_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2,
                                                   R1) args: 32, res: 0, upd: 8;
     }
 },
 GHC.IO.BufferedIO.$wwriteBuf_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c87TB,
                       label: GHC.IO.BufferedIO.$wwriteBuf_info
                       rep:HeapRep static {
                             Fun {arity: 9
                                  fun_type: ArgGen [False, False, True, False, False, True, True,
                                                    True]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87TB: // global
           _s87Oe::P64 = R6;
           _s87Od::P64 = R5;
           _s87Oc::I64 = R4;
           _s87Ob::P64 = R3;
           _s87Oa::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto c87TM; else goto c87TN;
       c87TN: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c87TP; else goto c87TO;
       c87TP: // global
           HpAlloc = 32;
           goto c87TM;
       c87TM: // global
           R1 = GHC.IO.BufferedIO.$wwriteBuf_closure;
           P64[Sp - 40] = _s87Oa::P64;
           P64[Sp - 32] = _s87Ob::P64;
           I64[Sp - 24] = _s87Oc::I64;
           P64[Sp - 16] = _s87Od::P64;
           P64[Sp - 8] = _s87Oe::P64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       c87TO: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           _s87Og::I64 = I64[Sp + 8];
           I64[Hp - 16] = I64[Sp + 16] - _s87Og::I64;
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s87Oc::I64 + _s87Og::I64;
           I64[Sp - 16] = block_c87TI_info;
           R2 = _s87Oa::P64;
           I64[Sp - 48] = stg_ap_pppv_info;
           P64[Sp - 40] = _s87Ob::P64;
           P64[Sp - 32] = Hp - 7;
           P64[Sp - 24] = Hp - 23;
           P64[Sp - 8] = _s87Oe::P64;
           P64[Sp + 8] = _s87Od::P64;
           I64[Sp + 16] = _s87Oc::I64;
           Sp = Sp - 48;
           call GHC.IO.Device.write_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 _c87TI() //  [R1]
         { info_tbl: [(c87TI,
                       label: block_c87TI_info
                       rep:StackRep [False, True, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87TI: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c87TS; else goto c87TR;
       c87TS: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c87TR: // global
           _s87Oc::I64 = I64[Sp + 32];
           _s87Od::P64 = P64[Sp + 24];
           _s87Oe::P64 = P64[Sp + 8];
           _s87Of::I64 = I64[Sp + 16];
           call MO_Touch(_s87Od::P64);
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _s87Od::P64;
           P64[Hp - 32] = _s87Oe::P64;
           I64[Hp - 24] = _s87Oc::I64;
           I64[Hp - 16] = _s87Of::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           R1 = Hp - 47;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.717152991 UTC

[section ""data" . GHC.IO.BufferedIO.writeBuf1_closure" {
     GHC.IO.BufferedIO.writeBuf1_closure:
         const GHC.IO.BufferedIO.writeBuf1_info;
 },
 GHC.IO.BufferedIO.writeBuf1_entry() //  [R2, R3, R4]
         { info_tbl: [(c87U0,
                       label: GHC.IO.BufferedIO.writeBuf1_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87U0: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c87U1; else goto c87U2;
       c87U1: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.BufferedIO.writeBuf1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c87U2: // global
           I64[Sp - 24] = block_c87TX_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u87U6; else goto c87TY;
       u87U6: // global
           call _c87TX(R1) args: 0, res: 0, upd: 0;
       c87TY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c87TX() //  [R1]
         { info_tbl: [(c87TX,
                       label: block_c87TX_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87TX: // global
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = I64[R1 + 23];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           I64[Sp] = I64[R1 + 31];
           I64[Sp + 8] = I64[R1 + 39];
           I64[Sp + 16] = I64[R1 + 47];
           call GHC.IO.BufferedIO.$wwriteBuf_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 32, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.718535768 UTC

[section ""data" . GHC.IO.BufferedIO.writeBuf_closure" {
     GHC.IO.BufferedIO.writeBuf_closure:
         const GHC.IO.BufferedIO.writeBuf_info;
 },
 GHC.IO.BufferedIO.writeBuf_entry() //  [R2, R3, R4]
         { info_tbl: [(c87Ub,
                       label: GHC.IO.BufferedIO.writeBuf_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87Ub: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.IO.BufferedIO.writeBuf1_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.72034292 UTC

[section ""data" . GHC.IO.BufferedIO.$wwriteBufNonBlocking_closure" {
     GHC.IO.BufferedIO.$wwriteBufNonBlocking_closure:
         const GHC.IO.BufferedIO.$wwriteBufNonBlocking_info;
 },
 GHC.IO.BufferedIO.$wwriteBufNonBlocking_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87Uf: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.IO.BufferedIO.$wwriteBufNonBlocking_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2,
                                                              R1) args: 32, res: 0, upd: 8;
     }
 },
 sat_s87OY_entry() //  [R1]
         { info_tbl: [(c87UB,
                       label: sat_s87OY_info
                       rep:HeapRep 3 ptrs 4 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87UB: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c87UC; else goto c87UD;
       c87UC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c87UD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 72] = block_c87Uy_info;
           _s87OG::P64 = P64[R1 + 16];
           _s87OH::P64 = P64[R1 + 24];
           _s87OF::I64 = I64[R1 + 40];
           _s87OI::I64 = I64[R1 + 48];
           _s87OJ::I64 = I64[R1 + 56];
           _s87OK::I64 = I64[R1 + 64];
           R1 = P64[R1 + 32];
           I64[Sp - 64] = _s87OF::I64;
           P64[Sp - 56] = _s87OG::P64;
           P64[Sp - 48] = _s87OH::P64;
           I64[Sp - 40] = _s87OI::I64;
           I64[Sp - 32] = _s87OJ::I64;
           I64[Sp - 24] = _s87OK::I64;
           Sp = Sp - 72;
           if (R1 & 7 != 0) goto u87UV; else goto c87Uz;
       u87UV: // global
           call _c87Uy(R1) args: 0, res: 0, upd: 0;
       c87Uz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c87Uy() //  [R1]
         { info_tbl: [(c87Uy,
                       label: block_c87Uy_info
                       rep:StackRep [True, False, False, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87Uy: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c87UI; else goto c87UH;
       c87UI: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c87UH: // global
           _s87OF::I64 = I64[Sp + 8];
           _s87OG::P64 = P64[Sp + 16];
           _s87OH::P64 = P64[Sp + 24];
           _s87OI::I64 = I64[Sp + 32];
           _s87OK::I64 = I64[Sp + 48];
           _s87OW::I64 = I64[Sp + 40] + I64[R1 + 7];
           if (_s87OW::I64 == _s87OK::I64) goto c87UU; else goto c87UR;
       c87UU: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _s87OG::P64;
           P64[Hp - 32] = _s87OH::P64;
           I64[Hp - 24] = _s87OF::I64;
           I64[Hp - 16] = _s87OI::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           R1 = Hp - 47;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c87UR: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _s87OG::P64;
           P64[Hp - 32] = _s87OH::P64;
           I64[Hp - 24] = _s87OF::I64;
           I64[Hp - 16] = _s87OI::I64;
           I64[Hp - 8] = _s87OW::I64;
           I64[Hp] = _s87OK::I64;
           R1 = Hp - 47;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.IO.BufferedIO.$wwriteBufNonBlocking_entry() //  [R2, R3, R4,
                                                      R5, R6]
         { info_tbl: [(c87UW,
                       label: GHC.IO.BufferedIO.$wwriteBufNonBlocking_info
                       rep:HeapRep static {
                             Fun {arity: 9
                                  fun_type: ArgGen [False, False, True, False, False, True, True,
                                                    True]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87UW: // global
           _s87OH::P64 = R6;
           _s87OG::P64 = R5;
           _s87OF::I64 = R4;
           _s87OE::P64 = R3;
           _s87OD::P64 = R2;
           if ((Sp + -64) < SpLim) (likely: False) goto c87UY; else goto c87UZ;
       c87UZ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c87V1; else goto c87V0;
       c87V1: // global
           HpAlloc = 32;
           goto c87UY;
       c87UY: // global
           R1 = GHC.IO.BufferedIO.$wwriteBufNonBlocking_closure;
           P64[Sp - 40] = _s87OD::P64;
           P64[Sp - 32] = _s87OE::P64;
           I64[Sp - 24] = _s87OF::I64;
           P64[Sp - 16] = _s87OG::P64;
           P64[Sp - 8] = _s87OH::P64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       c87V0: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           _s87OJ::I64 = I64[Sp + 8];
           I64[Hp - 16] = I64[Sp + 16] - _s87OJ::I64;
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s87OF::I64 + _s87OJ::I64;
           I64[Sp - 32] = block_c87Ur_info;
           R2 = _s87OD::P64;
           I64[Sp - 64] = stg_ap_pppv_info;
           P64[Sp - 56] = _s87OE::P64;
           P64[Sp - 48] = Hp - 7;
           P64[Sp - 40] = Hp - 23;
           I64[Sp - 24] = _s87OF::I64;
           P64[Sp - 16] = _s87OG::P64;
           P64[Sp - 8] = _s87OH::P64;
           Sp = Sp - 64;
           call GHC.IO.Device.writeNonBlocking_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 _c87Ur() //  [R1]
         { info_tbl: [(c87Ur,
                       label: block_c87Ur_info
                       rep:StackRep [True, False, False, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87Ur: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c87V4; else goto c87V3;
       c87V4: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c87V3: // global
           _s87OF::I64 = I64[Sp + 8];
           _s87OG::P64 = P64[Sp + 16];
           _s87OH::P64 = P64[Sp + 24];
           _s87OI::I64 = I64[Sp + 32];
           _s87OJ::I64 = I64[Sp + 40];
           _s87OK::I64 = I64[Sp + 48];
           call MO_Touch(_s87OG::P64);
           I64[Hp - 88] = sat_s87OY_info;
           P64[Hp - 72] = _s87OG::P64;
           P64[Hp - 64] = _s87OH::P64;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = _s87OF::I64;
           I64[Hp - 40] = _s87OI::I64;
           I64[Hp - 32] = _s87OJ::I64;
           I64[Hp - 24] = _s87OK::I64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 88;
           R1 = Hp - 15;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.723620234 UTC

[section ""data" . GHC.IO.BufferedIO.writeBufNonBlocking1_closure" {
     GHC.IO.BufferedIO.writeBufNonBlocking1_closure:
         const GHC.IO.BufferedIO.writeBufNonBlocking1_info;
 },
 GHC.IO.BufferedIO.writeBufNonBlocking1_entry() //  [R2, R3, R4]
         { info_tbl: [(c87Vc,
                       label: GHC.IO.BufferedIO.writeBufNonBlocking1_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87Vc: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c87Vd; else goto c87Ve;
       c87Vd: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.BufferedIO.writeBufNonBlocking1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c87Ve: // global
           I64[Sp - 24] = block_c87V9_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u87Vi; else goto c87Va;
       u87Vi: // global
           call _c87V9(R1) args: 0, res: 0, upd: 0;
       c87Va: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c87V9() //  [R1]
         { info_tbl: [(c87V9,
                       label: block_c87V9_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87V9: // global
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = I64[R1 + 23];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           I64[Sp] = I64[R1 + 31];
           I64[Sp + 8] = I64[R1 + 39];
           I64[Sp + 16] = I64[R1 + 47];
           call GHC.IO.BufferedIO.$wwriteBufNonBlocking_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 32, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.724946903 UTC

[section ""data" . GHC.IO.BufferedIO.writeBufNonBlocking_closure" {
     GHC.IO.BufferedIO.writeBufNonBlocking_closure:
         const GHC.IO.BufferedIO.writeBufNonBlocking_info;
 },
 GHC.IO.BufferedIO.writeBufNonBlocking_entry() //  [R2, R3, R4]
         { info_tbl: [(c87Vn,
                       label: GHC.IO.BufferedIO.writeBufNonBlocking_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87Vn: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.IO.BufferedIO.writeBufNonBlocking1_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.725819395 UTC

[section ""cstring" . GHC.IO.BufferedIO.$trModule4_bytes" {
     GHC.IO.BufferedIO.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.727227769 UTC

[section ""data" . GHC.IO.BufferedIO.$trModule3_closure" {
     GHC.IO.BufferedIO.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.BufferedIO.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.727824588 UTC

[section ""cstring" . GHC.IO.BufferedIO.$trModule2_bytes" {
     GHC.IO.BufferedIO.$trModule2_bytes:
         I8[] [71,72,67,46,73,79,46,66,117,102,102,101,114,101,100,73,79]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.728394383 UTC

[section ""data" . GHC.IO.BufferedIO.$trModule1_closure" {
     GHC.IO.BufferedIO.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.BufferedIO.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.728971019 UTC

[section ""data" . GHC.IO.BufferedIO.$trModule_closure" {
     GHC.IO.BufferedIO.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.IO.BufferedIO.$trModule3_closure+1;
         const GHC.IO.BufferedIO.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.729703862 UTC

[section ""data" . $krep_r87Lv_closure" {
     $krep_r87Lv_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.730263134 UTC

[section ""data" . $krep1_r87Lw_closure" {
     $krep1_r87Lw_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Word.$tcWord8_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.730811093 UTC

[section ""data" . $krep2_r87Lx_closure" {
     $krep2_r87Lx_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Buffer.$tcBufferState_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.731414016 UTC

[section ""data" . $krep3_r87Ly_closure" {
     $krep3_r87Ly_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcConstraint_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.731988532 UTC

[section ""data" . $krep4_r87Lz_closure" {
     $krep4_r87Lz_closure:
         const :_con_info;
         const $krep_r87Lv_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.732548401 UTC

[section ""data" . $krep5_r87LA_closure" {
     $krep5_r87LA_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Base.$tcMaybe_closure;
         const $krep4_r87Lz_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.733156075 UTC

[section ""data" . $krep6_r87LB_closure" {
     $krep6_r87LB_closure:
         const :_con_info;
         const $krep1_r87Lw_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.734143095 UTC

[section ""data" . $krep7_r87LC_closure" {
     $krep7_r87LC_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Buffer.$tcBuffer_closure;
         const $krep6_r87LB_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.734747134 UTC

[section ""data" . $krep8_r87LD_closure" {
     $krep8_r87LD_closure:
         const :_con_info;
         const $krep7_r87LC_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.73536354 UTC

[section ""data" . $krep9_r87LE_closure" {
     $krep9_r87LE_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep8_r87LD_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.73596229 UTC

[section ""data" . $krep10_r87LF_closure" {
     $krep10_r87LF_closure:
         const :_con_info;
         const $krep_r87Lv_closure+1;
         const $krep8_r87LD_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.736543171 UTC

[section ""data" . $krep11_r87LG_closure" {
     $krep11_r87LG_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc(,)_closure;
         const $krep10_r87LF_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.737145819 UTC

[section ""data" . $krep12_r87LH_closure" {
     $krep12_r87LH_closure:
         const :_con_info;
         const $krep11_r87LG_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.737807969 UTC

[section ""data" . $krep13_r87LI_closure" {
     $krep13_r87LI_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep12_r87LH_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.738401566 UTC

[section ""data" . $krep14_r87LJ_closure" {
     $krep14_r87LJ_closure:
         const :_con_info;
         const $krep5_r87LA_closure+1;
         const $krep8_r87LD_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.739025727 UTC

[section ""data" . $krep15_r87LK_closure" {
     $krep15_r87LK_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc(,)_closure;
         const $krep14_r87LJ_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.739617555 UTC

[section ""data" . $krep16_r87LL_closure" {
     $krep16_r87LL_closure:
         const :_con_info;
         const $krep15_r87LK_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.740215597 UTC

[section ""data" . $krep17_r87LM_closure" {
     $krep17_r87LM_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep16_r87LL_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.740831111 UTC

[section ""data" . $krep18_r87LN_closure" {
     $krep18_r87LN_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r87Lx_closure+1;
         const $krep9_r87LE_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.741526104 UTC

[section ""data" . $krep19_r87LO_closure" {
     $krep19_r87LO_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep7_r87LC_closure+1;
         const $krep9_r87LE_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.742144434 UTC

[section ""data" . $krep20_r87LP_closure" {
     $krep20_r87LP_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep7_r87LC_closure+1;
         const $krep13_r87LI_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.742775694 UTC

[section ""data" . $krep21_r87LQ_closure" {
     $krep21_r87LQ_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep7_r87LC_closure+1;
         const $krep17_r87LM_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.743383992 UTC

[section ""data" . GHC.IO.BufferedIO.$tcBufferedIO1_closure" {
     GHC.IO.BufferedIO.$tcBufferedIO1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Types.krep$*_closure;
         const $krep3_r87Ly_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.744017927 UTC

[section ""data" . $krep22_r87LR_closure" {
     $krep22_r87LR_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.745550952 UTC

[section ""data" . $krep23_r87LS_closure" {
     $krep23_r87LS_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep22_r87LR_closure+2;
         const $krep21_r87LQ_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.746136573 UTC

[section ""data" . $krep24_r87LT_closure" {
     $krep24_r87LT_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep22_r87LR_closure+2;
         const $krep20_r87LP_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.746736487 UTC

[section ""data" . $krep25_r87LU_closure" {
     $krep25_r87LU_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep22_r87LR_closure+2;
         const $krep19_r87LO_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.747346002 UTC

[section ""data" . $krep26_r87LV_closure" {
     $krep26_r87LV_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep22_r87LR_closure+2;
         const $krep18_r87LN_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.747936386 UTC

[section ""cstring" . GHC.IO.BufferedIO.$tcBufferedIO3_bytes" {
     GHC.IO.BufferedIO.$tcBufferedIO3_bytes:
         I8[] [66,117,102,102,101,114,101,100,73,79]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.74853029 UTC

[section ""data" . GHC.IO.BufferedIO.$tcBufferedIO2_closure" {
     GHC.IO.BufferedIO.$tcBufferedIO2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.BufferedIO.$tcBufferedIO3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.749089681 UTC

[section ""data" . GHC.IO.BufferedIO.$tcBufferedIO_closure" {
     GHC.IO.BufferedIO.$tcBufferedIO_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.BufferedIO.$trModule_closure+1;
         const GHC.IO.BufferedIO.$tcBufferedIO2_closure+1;
         const GHC.IO.BufferedIO.$tcBufferedIO1_closure+4;
         const 17350223970197035200;
         const 12646105049483783716;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.749789018 UTC

[section ""data" . $krep27_r87LW_closure" {
     $krep27_r87LW_closure:
         const :_con_info;
         const $krep22_r87LR_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.750343183 UTC

[section ""data" . $krep28_r87LX_closure" {
     $krep28_r87LX_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.BufferedIO.$tcBufferedIO_closure+1;
         const $krep27_r87LW_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.750959427 UTC

[section ""data" . $krep29_r87LY_closure" {
     $krep29_r87LY_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep24_r87LT_closure+4;
         const $krep28_r87LX_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.751516158 UTC

[section ""data" . $krep30_r87LZ_closure" {
     $krep30_r87LZ_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep25_r87LU_closure+4;
         const $krep29_r87LY_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.752087898 UTC

[section ""data" . $krep31_r87M0_closure" {
     $krep31_r87M0_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep25_r87LU_closure+4;
         const $krep30_r87LZ_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.752708908 UTC

[section ""data" . $krep32_r87M1_closure" {
     $krep32_r87M1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep23_r87LS_closure+4;
         const $krep31_r87M0_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.753333012 UTC

[section ""data" . $krep33_r87M2_closure" {
     $krep33_r87M2_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep24_r87LT_closure+4;
         const $krep32_r87M1_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.75389362 UTC

[section ""data" . GHC.IO.BufferedIO.$tc'C:BufferedIO1_closure" {
     GHC.IO.BufferedIO.$tc'C:BufferedIO1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep26_r87LV_closure+4;
         const $krep33_r87M2_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.754458993 UTC

[section ""cstring" . GHC.IO.BufferedIO.$tc'C:BufferedIO3_bytes" {
     GHC.IO.BufferedIO.$tc'C:BufferedIO3_bytes:
         I8[] [39,67,58,66,117,102,102,101,114,101,100,73,79]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.755046066 UTC

[section ""data" . GHC.IO.BufferedIO.$tc'C:BufferedIO2_closure" {
     GHC.IO.BufferedIO.$tc'C:BufferedIO2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.BufferedIO.$tc'C:BufferedIO3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.755620027 UTC

[section ""data" . GHC.IO.BufferedIO.$tc'C:BufferedIO_closure" {
     GHC.IO.BufferedIO.$tc'C:BufferedIO_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.BufferedIO.$trModule_closure+1;
         const GHC.IO.BufferedIO.$tc'C:BufferedIO2_closure+1;
         const GHC.IO.BufferedIO.$tc'C:BufferedIO1_closure+4;
         const 14745255964277825469;
         const 12324508286010448901;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.756662218 UTC

[section ""data" . GHC.IO.BufferedIO.C:BufferedIO_closure" {
     GHC.IO.BufferedIO.C:BufferedIO_closure:
         const GHC.IO.BufferedIO.C:BufferedIO_info;
 },
 GHC.IO.BufferedIO.C:BufferedIO_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c87Vv,
                       label: GHC.IO.BufferedIO.C:BufferedIO_info
                       rep:HeapRep static { Fun {arity: 6 fun_type: ArgSpec 26} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87Vv: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c87Vz; else goto c87Vy;
       c87Vz: // global
           HpAlloc = 56;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.BufferedIO.C:BufferedIO_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       c87Vy: // global
           I64[Hp - 48] = GHC.IO.BufferedIO.C:BufferedIO_con_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           P64[Hp - 8] = R6;
           P64[Hp] = P64[Sp];
           R1 = Hp - 47;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.757741478 UTC

[GHC.IO.BufferedIO.C:BufferedIO_con_entry() //  [R1]
         { info_tbl: [(c87VA,
                       label: GHC.IO.BufferedIO.C:BufferedIO_con_info
                       rep:HeapRep 6 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,73,79,46,66,117,102,102,101,114,101,100,73,79,46,67,58,66,117,102,102,101,114,101,100,73,79]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87VA: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.758463697 UTC

[section ""relreadonly" . S87VB_srt" { S87VB_srt:
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.759071511 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:03:14.759899415 UTC

[section ""data" . GHC.IO.BufferedIO.newBuffer_closure" {
     GHC.IO.BufferedIO.newBuffer_closure:
         const GHC.IO.BufferedIO.newBuffer_info;
 },
 GHC.IO.BufferedIO.newBuffer_entry() //  [R2]
         { info_tbl: [(c87VJ,
                       label: GHC.IO.BufferedIO.newBuffer_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87VJ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c87VK; else goto c87VL;
       c87VK: // global
           R2 = R2;
           R1 = GHC.IO.BufferedIO.newBuffer_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c87VL: // global
           I64[Sp - 8] = block_c87VG_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u87VP; else goto c87VH;
       u87VP: // global
           call _c87VG(R1) args: 0, res: 0, upd: 0;
       c87VH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c87VG() //  [R1]
         { info_tbl: [(c87VG,
                       label: block_c87VG_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87VG: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.761139366 UTC

[section ""data" . GHC.IO.BufferedIO.fillReadBuffer_closure" {
     GHC.IO.BufferedIO.fillReadBuffer_closure:
         const GHC.IO.BufferedIO.fillReadBuffer_info;
 },
 GHC.IO.BufferedIO.fillReadBuffer_entry() //  [R2]
         { info_tbl: [(c87VX,
                       label: GHC.IO.BufferedIO.fillReadBuffer_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87VX: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c87VY; else goto c87VZ;
       c87VY: // global
           R2 = R2;
           R1 = GHC.IO.BufferedIO.fillReadBuffer_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c87VZ: // global
           I64[Sp - 8] = block_c87VU_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u87W3; else goto c87VV;
       u87W3: // global
           call _c87VU(R1) args: 0, res: 0, upd: 0;
       c87VV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c87VU() //  [R1]
         { info_tbl: [(c87VU,
                       label: block_c87VU_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87VU: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.762447437 UTC

[section ""data" . GHC.IO.BufferedIO.fillReadBuffer0_closure" {
     GHC.IO.BufferedIO.fillReadBuffer0_closure:
         const GHC.IO.BufferedIO.fillReadBuffer0_info;
 },
 GHC.IO.BufferedIO.fillReadBuffer0_entry() //  [R2]
         { info_tbl: [(c87Wb,
                       label: GHC.IO.BufferedIO.fillReadBuffer0_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87Wb: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c87Wc; else goto c87Wd;
       c87Wc: // global
           R2 = R2;
           R1 = GHC.IO.BufferedIO.fillReadBuffer0_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c87Wd: // global
           I64[Sp - 8] = block_c87W8_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u87Wh; else goto c87W9;
       u87Wh: // global
           call _c87W8(R1) args: 0, res: 0, upd: 0;
       c87W9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c87W8() //  [R1]
         { info_tbl: [(c87W8,
                       label: block_c87W8_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87W8: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.764326726 UTC

[section ""data" . GHC.IO.BufferedIO.emptyWriteBuffer_closure" {
     GHC.IO.BufferedIO.emptyWriteBuffer_closure:
         const GHC.IO.BufferedIO.emptyWriteBuffer_info;
 },
 GHC.IO.BufferedIO.emptyWriteBuffer_entry() //  [R2]
         { info_tbl: [(c87Wp,
                       label: GHC.IO.BufferedIO.emptyWriteBuffer_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87Wp: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c87Wq; else goto c87Wr;
       c87Wq: // global
           R2 = R2;
           R1 = GHC.IO.BufferedIO.emptyWriteBuffer_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c87Wr: // global
           I64[Sp - 8] = block_c87Wm_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u87Wv; else goto c87Wn;
       u87Wv: // global
           call _c87Wm(R1) args: 0, res: 0, upd: 0;
       c87Wn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c87Wm() //  [R1]
         { info_tbl: [(c87Wm,
                       label: block_c87Wm_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87Wm: // global
           R1 = P64[R1 + 31];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.765554998 UTC

[section ""data" . GHC.IO.BufferedIO.flushWriteBuffer_closure" {
     GHC.IO.BufferedIO.flushWriteBuffer_closure:
         const GHC.IO.BufferedIO.flushWriteBuffer_info;
 },
 GHC.IO.BufferedIO.flushWriteBuffer_entry() //  [R2]
         { info_tbl: [(c87WD,
                       label: GHC.IO.BufferedIO.flushWriteBuffer_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87WD: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c87WE; else goto c87WF;
       c87WE: // global
           R2 = R2;
           R1 = GHC.IO.BufferedIO.flushWriteBuffer_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c87WF: // global
           I64[Sp - 8] = block_c87WA_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u87WJ; else goto c87WB;
       u87WJ: // global
           call _c87WA(R1) args: 0, res: 0, upd: 0;
       c87WB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c87WA() //  [R1]
         { info_tbl: [(c87WA,
                       label: block_c87WA_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87WA: // global
           R1 = P64[R1 + 39];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.766696348 UTC

[section ""data" . GHC.IO.BufferedIO.flushWriteBuffer0_closure" {
     GHC.IO.BufferedIO.flushWriteBuffer0_closure:
         const GHC.IO.BufferedIO.flushWriteBuffer0_info;
 },
 GHC.IO.BufferedIO.flushWriteBuffer0_entry() //  [R2]
         { info_tbl: [(c87WR,
                       label: GHC.IO.BufferedIO.flushWriteBuffer0_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87WR: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c87WS; else goto c87WT;
       c87WS: // global
           R2 = R2;
           R1 = GHC.IO.BufferedIO.flushWriteBuffer0_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c87WT: // global
           I64[Sp - 8] = block_c87WO_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u87WX; else goto c87WP;
       u87WX: // global
           call _c87WO(R1) args: 0, res: 0, upd: 0;
       c87WP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c87WO() //  [R1]
         { info_tbl: [(c87WO,
                       label: block_c87WO_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87WO: // global
           R1 = P64[R1 + 47];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.768094479 UTC

[section ""data" . $dmemptyWriteBuffer1_r87Lu_closure" {
     $dmemptyWriteBuffer1_r87Lu_closure:
         const $dmemptyWriteBuffer1_r87Lu_info;
 },
 sat_s87N1_entry() //  [R1]
         { info_tbl: [(c87X9,
                       label: sat_s87N1_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87X9: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c87Xd; else goto c87Xe;
       c87Xd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c87Xe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c87X6_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u87Xi; else goto c87X7;
       u87Xi: // global
           call _c87X6(R1) args: 0, res: 0, upd: 0;
       c87X7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c87X6() //  [R1]
         { info_tbl: [(c87X6,
                       label: block_c87X6_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87X6: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c87Xh; else goto c87Xg;
       c87Xh: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c87Xg: // global
           _s87MW::P64 = P64[R1 + 7];
           _s87MV::I64 = I64[R1 + 23];
           _s87MY::I64 = I64[R1 + 31];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _s87MW::P64;
           P64[Hp - 32] = GHC.IO.Buffer.WriteBuffer_closure+2;
           I64[Hp - 24] = _s87MV::I64;
           I64[Hp - 16] = _s87MY::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           R1 = Hp - 47;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 $dmemptyWriteBuffer1_r87Lu_entry() //  [R2, R3, R4]
         { info_tbl: [(c87Xj,
                       label: $dmemptyWriteBuffer1_r87Lu_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87Xj: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c87Xn; else goto c87Xm;
       c87Xn: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = $dmemptyWriteBuffer1_r87Lu_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c87Xm: // global
           I64[Hp - 16] = sat_s87N1_info;
           P64[Hp] = R4;
           R1 = Hp - 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.769713073 UTC

[section ""data" . GHC.IO.BufferedIO.$dmemptyWriteBuffer_closure" {
     GHC.IO.BufferedIO.$dmemptyWriteBuffer_closure:
         const GHC.IO.BufferedIO.$dmemptyWriteBuffer_info;
 },
 GHC.IO.BufferedIO.$dmemptyWriteBuffer_entry() //  [R2, R3, R4]
         { info_tbl: [(c87Xs,
                       label: GHC.IO.BufferedIO.$dmemptyWriteBuffer_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87Xs: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call $dmemptyWriteBuffer1_r87Lu_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.77145924 UTC

[section ""data" . GHC.IO.BufferedIO.$wreadBuf_closure" {
     GHC.IO.BufferedIO.$wreadBuf_closure:
         const GHC.IO.BufferedIO.$wreadBuf_info;
 },
 GHC.IO.BufferedIO.$wreadBuf_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87Xw: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.IO.BufferedIO.$wreadBuf_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2,
                                                  R1) args: 32, res: 0, upd: 8;
     }
 },
 sat_s87Nm_entry() //  [R1]
         { info_tbl: [(c87XS,
                       label: sat_s87Nm_info
                       rep:HeapRep 3 ptrs 4 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87XS: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c87XZ; else goto c87Y0;
       c87XZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c87Y0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 72] = block_c87XP_info;
           _s87N5::P64 = P64[R1 + 16];
           _s87N6::P64 = P64[R1 + 24];
           _s87N4::I64 = I64[R1 + 40];
           _s87N7::I64 = I64[R1 + 48];
           _s87N8::I64 = I64[R1 + 56];
           _s87N9::I64 = I64[R1 + 64];
           R1 = P64[R1 + 32];
           I64[Sp - 64] = _s87N4::I64;
           P64[Sp - 56] = _s87N5::P64;
           P64[Sp - 48] = _s87N6::P64;
           I64[Sp - 40] = _s87N7::I64;
           I64[Sp - 32] = _s87N8::I64;
           I64[Sp - 24] = _s87N9::I64;
           Sp = Sp - 72;
           if (R1 & 7 != 0) goto u87Y4; else goto c87XQ;
       u87Y4: // global
           call _c87XP(R1) args: 0, res: 0, upd: 0;
       c87XQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c87XP() //  [R1]
         { info_tbl: [(c87XP,
                       label: block_c87XP_info
                       rep:StackRep [True, False, False, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87XP: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c87Y3; else goto c87Y2;
       c87Y3: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c87Y2: // global
           _s87Nl::I64 = I64[Sp + 48] + I64[R1 + 7];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 24];
           I64[Hp - 24] = I64[Sp + 8];
           I64[Hp - 16] = I64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = _s87Nl::I64;
           R1 = Hp - 47;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.IO.BufferedIO.$wreadBuf_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c87Y5,
                       label: GHC.IO.BufferedIO.$wreadBuf_info
                       rep:HeapRep static {
                             Fun {arity: 9
                                  fun_type: ArgGen [False, False, True, False, False, True, True,
                                                    True]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87Y5: // global
           _s87N6::P64 = R6;
           _s87N5::P64 = R5;
           _s87N4::I64 = R4;
           _s87N3::P64 = R3;
           _s87N2::P64 = R2;
           if ((Sp + -64) < SpLim) (likely: False) goto c87Y7; else goto c87Y8;
       c87Y8: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c87Ya; else goto c87Y9;
       c87Ya: // global
           HpAlloc = 32;
           goto c87Y7;
       c87Y7: // global
           R1 = GHC.IO.BufferedIO.$wreadBuf_closure;
           P64[Sp - 40] = _s87N2::P64;
           P64[Sp - 32] = _s87N3::P64;
           I64[Sp - 24] = _s87N4::I64;
           P64[Sp - 16] = _s87N5::P64;
           P64[Sp - 8] = _s87N6::P64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       c87Y9: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           _s87N9::I64 = I64[Sp + 16];
           I64[Hp - 16] = I64[Sp] - _s87N9::I64;
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s87N4::I64 + _s87N9::I64;
           I64[Sp - 32] = block_c87XI_info;
           R2 = _s87N2::P64;
           I64[Sp - 64] = stg_ap_pppv_info;
           P64[Sp - 56] = _s87N3::P64;
           P64[Sp - 48] = Hp - 7;
           P64[Sp - 40] = Hp - 23;
           I64[Sp - 24] = _s87N4::I64;
           P64[Sp - 16] = _s87N5::P64;
           P64[Sp - 8] = _s87N6::P64;
           Sp = Sp - 64;
           call GHC.IO.Device.read_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 _c87XI() //  [R1]
         { info_tbl: [(c87XI,
                       label: block_c87XI_info
                       rep:StackRep [True, False, False, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87XI: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c87Yd; else goto c87Yc;
       c87Yd: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c87Yc: // global
           _s87N4::I64 = I64[Sp + 8];
           _s87N5::P64 = P64[Sp + 16];
           _s87N6::P64 = P64[Sp + 24];
           _s87N7::I64 = I64[Sp + 32];
           _s87N8::I64 = I64[Sp + 40];
           _s87N9::I64 = I64[Sp + 48];
           call MO_Touch(_s87N5::P64);
           I64[Hp - 88] = sat_s87Nm_info;
           P64[Hp - 72] = _s87N5::P64;
           P64[Hp - 64] = _s87N6::P64;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = _s87N4::I64;
           I64[Hp - 40] = _s87N7::I64;
           I64[Hp - 32] = _s87N8::I64;
           I64[Hp - 24] = _s87N9::I64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 88;
           R1 = Hp - 15;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.774296004 UTC

[section ""data" . GHC.IO.BufferedIO.readBuf1_closure" {
     GHC.IO.BufferedIO.readBuf1_closure:
         const GHC.IO.BufferedIO.readBuf1_info;
 },
 GHC.IO.BufferedIO.readBuf1_entry() //  [R2, R3, R4]
         { info_tbl: [(c87Yl,
                       label: GHC.IO.BufferedIO.readBuf1_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87Yl: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c87Ym; else goto c87Yn;
       c87Ym: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.BufferedIO.readBuf1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c87Yn: // global
           I64[Sp - 24] = block_c87Yi_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u87Yr; else goto c87Yj;
       u87Yr: // global
           call _c87Yi(R1) args: 0, res: 0, upd: 0;
       c87Yj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c87Yi() //  [R1]
         { info_tbl: [(c87Yi,
                       label: block_c87Yi_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87Yi: // global
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = I64[R1 + 23];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           I64[Sp] = I64[R1 + 31];
           I64[Sp + 8] = I64[R1 + 39];
           I64[Sp + 16] = I64[R1 + 47];
           call GHC.IO.BufferedIO.$wreadBuf_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 32, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.775580367 UTC

[section ""data" . GHC.IO.BufferedIO.readBuf_closure" {
     GHC.IO.BufferedIO.readBuf_closure:
         const GHC.IO.BufferedIO.readBuf_info;
 },
 GHC.IO.BufferedIO.readBuf_entry() //  [R2, R3, R4]
         { info_tbl: [(c87Yw,
                       label: GHC.IO.BufferedIO.readBuf_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87Yw: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.IO.BufferedIO.readBuf1_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.777524986 UTC

[section ""data" . GHC.IO.BufferedIO.$wreadBufNonBlocking_closure" {
     GHC.IO.BufferedIO.$wreadBufNonBlocking_closure:
         const GHC.IO.BufferedIO.$wreadBufNonBlocking_info;
 },
 GHC.IO.BufferedIO.$wreadBufNonBlocking_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87YA: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.IO.BufferedIO.$wreadBufNonBlocking_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2,
                                                             R1) args: 32, res: 0, upd: 8;
     }
 },
 sat_s87NX_entry() //  [R1]
         { info_tbl: [(c87Z2,
                       label: sat_s87NX_info
                       rep:HeapRep 3 ptrs 4 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87Z2: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c87Z9; else goto c87Za;
       c87Z9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c87Za: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 72] = block_c87YZ_info;
           _s87NC::P64 = P64[R1 + 16];
           _s87ND::P64 = P64[R1 + 24];
           _s87NB::I64 = I64[R1 + 40];
           _s87NE::I64 = I64[R1 + 48];
           _s87NF::I64 = I64[R1 + 56];
           _s87NG::I64 = I64[R1 + 64];
           R1 = P64[R1 + 32];
           I64[Sp - 64] = _s87NB::I64;
           P64[Sp - 56] = _s87NC::P64;
           P64[Sp - 48] = _s87ND::P64;
           I64[Sp - 40] = _s87NE::I64;
           I64[Sp - 32] = _s87NF::I64;
           I64[Sp - 24] = _s87NG::I64;
           Sp = Sp - 72;
           if (R1 & 7 != 0) goto u87Ze; else goto c87Z0;
       u87Ze: // global
           call _c87YZ(R1) args: 0, res: 0, upd: 0;
       c87Z0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c87YZ() //  [R1]
         { info_tbl: [(c87YZ,
                       label: block_c87YZ_info
                       rep:StackRep [True, False, False, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87YZ: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c87Zd; else goto c87Zc;
       c87Zd: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c87Zc: // global
           _s87NW::I64 = I64[Sp + 48] + I64[R1 + 7];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 24];
           I64[Hp - 24] = I64[Sp + 8];
           I64[Hp - 16] = I64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = _s87NW::I64;
           R1 = Hp - 47;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.IO.BufferedIO.$wreadBufNonBlocking_entry() //  [R2, R3, R4, R5,
                                                     R6]
         { info_tbl: [(c87Zf,
                       label: GHC.IO.BufferedIO.$wreadBufNonBlocking_info
                       rep:HeapRep static {
                             Fun {arity: 9
                                  fun_type: ArgGen [False, False, True, False, False, True, True,
                                                    True]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87Zf: // global
           _s87ND::P64 = R6;
           _s87NC::P64 = R5;
           _s87NB::I64 = R4;
           _s87NA::P64 = R3;
           _s87Nz::P64 = R2;
           if ((Sp + -64) < SpLim) (likely: False) goto c87Zg; else goto c87Zh;
       c87Zh: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c87Zj; else goto c87Zi;
       c87Zj: // global
           HpAlloc = 32;
           goto c87Zg;
       c87Zg: // global
           R1 = GHC.IO.BufferedIO.$wreadBufNonBlocking_closure;
           P64[Sp - 40] = _s87Nz::P64;
           P64[Sp - 32] = _s87NA::P64;
           I64[Sp - 24] = _s87NB::I64;
           P64[Sp - 16] = _s87NC::P64;
           P64[Sp - 8] = _s87ND::P64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       c87Zi: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           _s87NG::I64 = I64[Sp + 16];
           I64[Hp - 16] = I64[Sp] - _s87NG::I64;
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s87NB::I64 + _s87NG::I64;
           I64[Sp - 32] = block_c87YM_info;
           R2 = _s87Nz::P64;
           I64[Sp - 64] = stg_ap_pppv_info;
           P64[Sp - 56] = _s87NA::P64;
           P64[Sp - 48] = Hp - 7;
           P64[Sp - 40] = Hp - 23;
           I64[Sp - 24] = _s87NB::I64;
           P64[Sp - 16] = _s87NC::P64;
           P64[Sp - 8] = _s87ND::P64;
           Sp = Sp - 64;
           call GHC.IO.Device.readNonBlocking_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 _c87YM() //  [R1]
         { info_tbl: [(c87YM,
                       label: block_c87YM_info
                       rep:StackRep [True, False, False, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87YM: // global
           call MO_Touch(P64[Sp + 16]);
           I64[Sp] = block_c87YP_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u87Zz; else goto c87YQ;
       u87Zz: // global
           call _c87YP(R1) args: 0, res: 0, upd: 0;
       c87YQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c87YP() //  [R1]
         { info_tbl: [(c87YP,
                       label: block_c87YP_info
                       rep:StackRep [True, False, False, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87YP: // global
           _s87NB::I64 = I64[Sp + 8];
           _s87NC::P64 = P64[Sp + 16];
           _s87ND::P64 = P64[Sp + 24];
           _s87NE::I64 = I64[Sp + 32];
           _s87NF::I64 = I64[Sp + 40];
           _s87NG::I64 = I64[Sp + 48];
           if (R1 & 7 == 1) goto c87Zp; else goto c87Zu;
       c87Zp: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c87Zs; else goto c87Zr;
       c87Zs: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c87Zr: // global
           I64[Hp - 72] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 64] = _s87NC::P64;
           P64[Hp - 56] = _s87ND::P64;
           I64[Hp - 48] = _s87NB::I64;
           I64[Hp - 40] = _s87NE::I64;
           I64[Hp - 32] = _s87NF::I64;
           I64[Hp - 24] = _s87NG::I64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = GHC.Base.Nothing_closure+1;
           P64[Hp] = Hp - 71;
           R1 = Hp - 15;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c87Zu: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c87Zx; else goto c87Zw;
       c87Zx: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c87Zw: // global
           _s87NT::P64 = P64[R1 + 6];
           I64[Hp - 88] = sat_s87NX_info;
           P64[Hp - 72] = _s87NC::P64;
           P64[Hp - 64] = _s87ND::P64;
           P64[Hp - 56] = _s87NT::P64;
           I64[Hp - 48] = _s87NB::I64;
           I64[Hp - 40] = _s87NE::I64;
           I64[Hp - 32] = _s87NF::I64;
           I64[Hp - 24] = _s87NG::I64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 88;
           R1 = Hp - 15;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.780950481 UTC

[section ""data" . GHC.IO.BufferedIO.readBufNonBlocking1_closure" {
     GHC.IO.BufferedIO.readBufNonBlocking1_closure:
         const GHC.IO.BufferedIO.readBufNonBlocking1_info;
 },
 GHC.IO.BufferedIO.readBufNonBlocking1_entry() //  [R2, R3, R4]
         { info_tbl: [(c87ZH,
                       label: GHC.IO.BufferedIO.readBufNonBlocking1_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87ZH: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c87ZI; else goto c87ZJ;
       c87ZI: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.BufferedIO.readBufNonBlocking1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c87ZJ: // global
           I64[Sp - 24] = block_c87ZE_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u87ZN; else goto c87ZF;
       u87ZN: // global
           call _c87ZE(R1) args: 0, res: 0, upd: 0;
       c87ZF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c87ZE() //  [R1]
         { info_tbl: [(c87ZE,
                       label: block_c87ZE_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87ZE: // global
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = I64[R1 + 23];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           I64[Sp] = I64[R1 + 31];
           I64[Sp + 8] = I64[R1 + 39];
           I64[Sp + 16] = I64[R1 + 47];
           call GHC.IO.BufferedIO.$wreadBufNonBlocking_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 32, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.782350612 UTC

[section ""data" . GHC.IO.BufferedIO.readBufNonBlocking_closure" {
     GHC.IO.BufferedIO.readBufNonBlocking_closure:
         const GHC.IO.BufferedIO.readBufNonBlocking_info;
 },
 GHC.IO.BufferedIO.readBufNonBlocking_entry() //  [R2, R3, R4]
         { info_tbl: [(c87ZS,
                       label: GHC.IO.BufferedIO.readBufNonBlocking_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87ZS: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.IO.BufferedIO.readBufNonBlocking1_entry(R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.783703035 UTC

[section ""data" . GHC.IO.BufferedIO.$wwriteBuf_closure" {
     GHC.IO.BufferedIO.$wwriteBuf_closure:
         const GHC.IO.BufferedIO.$wwriteBuf_info;
 },
 GHC.IO.BufferedIO.$wwriteBuf_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87ZW: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.IO.BufferedIO.$wwriteBuf_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2,
                                                   R1) args: 32, res: 0, upd: 8;
     }
 },
 GHC.IO.BufferedIO.$wwriteBuf_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c8802,
                       label: GHC.IO.BufferedIO.$wwriteBuf_info
                       rep:HeapRep static {
                             Fun {arity: 9
                                  fun_type: ArgGen [False, False, True, False, False, True, True,
                                                    True]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c8802: // global
           _s87Oe::P64 = R6;
           _s87Od::P64 = R5;
           _s87Oc::I64 = R4;
           _s87Ob::P64 = R3;
           _s87Oa::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto c880d; else goto c880e;
       c880e: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c880g; else goto c880f;
       c880g: // global
           HpAlloc = 32;
           goto c880d;
       c880d: // global
           R1 = GHC.IO.BufferedIO.$wwriteBuf_closure;
           P64[Sp - 40] = _s87Oa::P64;
           P64[Sp - 32] = _s87Ob::P64;
           I64[Sp - 24] = _s87Oc::I64;
           P64[Sp - 16] = _s87Od::P64;
           P64[Sp - 8] = _s87Oe::P64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       c880f: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           _s87Og::I64 = I64[Sp + 8];
           I64[Hp - 16] = I64[Sp + 16] - _s87Og::I64;
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s87Oc::I64 + _s87Og::I64;
           I64[Sp - 16] = block_c8809_info;
           R2 = _s87Oa::P64;
           I64[Sp - 48] = stg_ap_pppv_info;
           P64[Sp - 40] = _s87Ob::P64;
           P64[Sp - 32] = Hp - 7;
           P64[Sp - 24] = Hp - 23;
           P64[Sp - 8] = _s87Oe::P64;
           P64[Sp + 8] = _s87Od::P64;
           I64[Sp + 16] = _s87Oc::I64;
           Sp = Sp - 48;
           call GHC.IO.Device.write_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 _c8809() //  [R1]
         { info_tbl: [(c8809,
                       label: block_c8809_info
                       rep:StackRep [False, True, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c8809: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c880j; else goto c880i;
       c880j: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c880i: // global
           _s87Oc::I64 = I64[Sp + 32];
           _s87Od::P64 = P64[Sp + 24];
           _s87Oe::P64 = P64[Sp + 8];
           _s87Of::I64 = I64[Sp + 16];
           call MO_Touch(_s87Od::P64);
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _s87Od::P64;
           P64[Hp - 32] = _s87Oe::P64;
           I64[Hp - 24] = _s87Oc::I64;
           I64[Hp - 16] = _s87Of::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           R1 = Hp - 47;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.786618245 UTC

[section ""data" . GHC.IO.BufferedIO.writeBuf1_closure" {
     GHC.IO.BufferedIO.writeBuf1_closure:
         const GHC.IO.BufferedIO.writeBuf1_info;
 },
 GHC.IO.BufferedIO.writeBuf1_entry() //  [R2, R3, R4]
         { info_tbl: [(c880r,
                       label: GHC.IO.BufferedIO.writeBuf1_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c880r: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c880s; else goto c880t;
       c880s: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.BufferedIO.writeBuf1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c880t: // global
           I64[Sp - 24] = block_c880o_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u880x; else goto c880p;
       u880x: // global
           call _c880o(R1) args: 0, res: 0, upd: 0;
       c880p: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c880o() //  [R1]
         { info_tbl: [(c880o,
                       label: block_c880o_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c880o: // global
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = I64[R1 + 23];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           I64[Sp] = I64[R1 + 31];
           I64[Sp + 8] = I64[R1 + 39];
           I64[Sp + 16] = I64[R1 + 47];
           call GHC.IO.BufferedIO.$wwriteBuf_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 32, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.787848674 UTC

[section ""data" . GHC.IO.BufferedIO.writeBuf_closure" {
     GHC.IO.BufferedIO.writeBuf_closure:
         const GHC.IO.BufferedIO.writeBuf_info;
 },
 GHC.IO.BufferedIO.writeBuf_entry() //  [R2, R3, R4]
         { info_tbl: [(c880C,
                       label: GHC.IO.BufferedIO.writeBuf_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c880C: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.IO.BufferedIO.writeBuf1_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.789645361 UTC

[section ""data" . GHC.IO.BufferedIO.$wwriteBufNonBlocking_closure" {
     GHC.IO.BufferedIO.$wwriteBufNonBlocking_closure:
         const GHC.IO.BufferedIO.$wwriteBufNonBlocking_info;
 },
 GHC.IO.BufferedIO.$wwriteBufNonBlocking_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c880G: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.IO.BufferedIO.$wwriteBufNonBlocking_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2,
                                                              R1) args: 32, res: 0, upd: 8;
     }
 },
 sat_s87OY_entry() //  [R1]
         { info_tbl: [(c8812,
                       label: sat_s87OY_info
                       rep:HeapRep 3 ptrs 4 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c8812: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c8813; else goto c8814;
       c8813: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8814: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 72] = block_c880Z_info;
           _s87OG::P64 = P64[R1 + 16];
           _s87OH::P64 = P64[R1 + 24];
           _s87OF::I64 = I64[R1 + 40];
           _s87OI::I64 = I64[R1 + 48];
           _s87OJ::I64 = I64[R1 + 56];
           _s87OK::I64 = I64[R1 + 64];
           R1 = P64[R1 + 32];
           I64[Sp - 64] = _s87OF::I64;
           P64[Sp - 56] = _s87OG::P64;
           P64[Sp - 48] = _s87OH::P64;
           I64[Sp - 40] = _s87OI::I64;
           I64[Sp - 32] = _s87OJ::I64;
           I64[Sp - 24] = _s87OK::I64;
           Sp = Sp - 72;
           if (R1 & 7 != 0) goto u881m; else goto c8810;
       u881m: // global
           call _c880Z(R1) args: 0, res: 0, upd: 0;
       c8810: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c880Z() //  [R1]
         { info_tbl: [(c880Z,
                       label: block_c880Z_info
                       rep:StackRep [True, False, False, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c880Z: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c8819; else goto c8818;
       c8819: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c8818: // global
           _s87OF::I64 = I64[Sp + 8];
           _s87OG::P64 = P64[Sp + 16];
           _s87OH::P64 = P64[Sp + 24];
           _s87OI::I64 = I64[Sp + 32];
           _s87OK::I64 = I64[Sp + 48];
           _s87OW::I64 = I64[Sp + 40] + I64[R1 + 7];
           if (_s87OW::I64 == _s87OK::I64) goto c881l; else goto c881i;
       c881l: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _s87OG::P64;
           P64[Hp - 32] = _s87OH::P64;
           I64[Hp - 24] = _s87OF::I64;
           I64[Hp - 16] = _s87OI::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           R1 = Hp - 47;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c881i: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _s87OG::P64;
           P64[Hp - 32] = _s87OH::P64;
           I64[Hp - 24] = _s87OF::I64;
           I64[Hp - 16] = _s87OI::I64;
           I64[Hp - 8] = _s87OW::I64;
           I64[Hp] = _s87OK::I64;
           R1 = Hp - 47;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.IO.BufferedIO.$wwriteBufNonBlocking_entry() //  [R2, R3, R4,
                                                      R5, R6]
         { info_tbl: [(c881n,
                       label: GHC.IO.BufferedIO.$wwriteBufNonBlocking_info
                       rep:HeapRep static {
                             Fun {arity: 9
                                  fun_type: ArgGen [False, False, True, False, False, True, True,
                                                    True]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c881n: // global
           _s87OH::P64 = R6;
           _s87OG::P64 = R5;
           _s87OF::I64 = R4;
           _s87OE::P64 = R3;
           _s87OD::P64 = R2;
           if ((Sp + -64) < SpLim) (likely: False) goto c881p; else goto c881q;
       c881q: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c881s; else goto c881r;
       c881s: // global
           HpAlloc = 32;
           goto c881p;
       c881p: // global
           R1 = GHC.IO.BufferedIO.$wwriteBufNonBlocking_closure;
           P64[Sp - 40] = _s87OD::P64;
           P64[Sp - 32] = _s87OE::P64;
           I64[Sp - 24] = _s87OF::I64;
           P64[Sp - 16] = _s87OG::P64;
           P64[Sp - 8] = _s87OH::P64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       c881r: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           _s87OJ::I64 = I64[Sp + 8];
           I64[Hp - 16] = I64[Sp + 16] - _s87OJ::I64;
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s87OF::I64 + _s87OJ::I64;
           I64[Sp - 32] = block_c880S_info;
           R2 = _s87OD::P64;
           I64[Sp - 64] = stg_ap_pppv_info;
           P64[Sp - 56] = _s87OE::P64;
           P64[Sp - 48] = Hp - 7;
           P64[Sp - 40] = Hp - 23;
           I64[Sp - 24] = _s87OF::I64;
           P64[Sp - 16] = _s87OG::P64;
           P64[Sp - 8] = _s87OH::P64;
           Sp = Sp - 64;
           call GHC.IO.Device.writeNonBlocking_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 _c880S() //  [R1]
         { info_tbl: [(c880S,
                       label: block_c880S_info
                       rep:StackRep [True, False, False, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c880S: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c881v; else goto c881u;
       c881v: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c881u: // global
           _s87OF::I64 = I64[Sp + 8];
           _s87OG::P64 = P64[Sp + 16];
           _s87OH::P64 = P64[Sp + 24];
           _s87OI::I64 = I64[Sp + 32];
           _s87OJ::I64 = I64[Sp + 40];
           _s87OK::I64 = I64[Sp + 48];
           call MO_Touch(_s87OG::P64);
           I64[Hp - 88] = sat_s87OY_info;
           P64[Hp - 72] = _s87OG::P64;
           P64[Hp - 64] = _s87OH::P64;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = _s87OF::I64;
           I64[Hp - 40] = _s87OI::I64;
           I64[Hp - 32] = _s87OJ::I64;
           I64[Hp - 24] = _s87OK::I64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 88;
           R1 = Hp - 15;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.792669445 UTC

[section ""data" . GHC.IO.BufferedIO.writeBufNonBlocking1_closure" {
     GHC.IO.BufferedIO.writeBufNonBlocking1_closure:
         const GHC.IO.BufferedIO.writeBufNonBlocking1_info;
 },
 GHC.IO.BufferedIO.writeBufNonBlocking1_entry() //  [R2, R3, R4]
         { info_tbl: [(c881D,
                       label: GHC.IO.BufferedIO.writeBufNonBlocking1_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c881D: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c881E; else goto c881F;
       c881E: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.BufferedIO.writeBufNonBlocking1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c881F: // global
           I64[Sp - 24] = block_c881A_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u881J; else goto c881B;
       u881J: // global
           call _c881A(R1) args: 0, res: 0, upd: 0;
       c881B: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c881A() //  [R1]
         { info_tbl: [(c881A,
                       label: block_c881A_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c881A: // global
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = I64[R1 + 23];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           I64[Sp] = I64[R1 + 31];
           I64[Sp + 8] = I64[R1 + 39];
           I64[Sp + 16] = I64[R1 + 47];
           call GHC.IO.BufferedIO.$wwriteBufNonBlocking_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 32, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.79396355 UTC

[section ""data" . GHC.IO.BufferedIO.writeBufNonBlocking_closure" {
     GHC.IO.BufferedIO.writeBufNonBlocking_closure:
         const GHC.IO.BufferedIO.writeBufNonBlocking_info;
 },
 GHC.IO.BufferedIO.writeBufNonBlocking_entry() //  [R2, R3, R4]
         { info_tbl: [(c881O,
                       label: GHC.IO.BufferedIO.writeBufNonBlocking_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c881O: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.IO.BufferedIO.writeBufNonBlocking1_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.794710412 UTC

[section ""cstring" . GHC.IO.BufferedIO.$trModule4_bytes" {
     GHC.IO.BufferedIO.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.79525976 UTC

[section ""data" . GHC.IO.BufferedIO.$trModule3_closure" {
     GHC.IO.BufferedIO.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.BufferedIO.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.795802951 UTC

[section ""cstring" . GHC.IO.BufferedIO.$trModule2_bytes" {
     GHC.IO.BufferedIO.$trModule2_bytes:
         I8[] [71,72,67,46,73,79,46,66,117,102,102,101,114,101,100,73,79]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.796398883 UTC

[section ""data" . GHC.IO.BufferedIO.$trModule1_closure" {
     GHC.IO.BufferedIO.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.BufferedIO.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.79696402 UTC

[section ""data" . GHC.IO.BufferedIO.$trModule_closure" {
     GHC.IO.BufferedIO.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.IO.BufferedIO.$trModule3_closure+1;
         const GHC.IO.BufferedIO.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.797626019 UTC

[section ""data" . $krep_r87Lv_closure" {
     $krep_r87Lv_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.798196061 UTC

[section ""data" . $krep1_r87Lw_closure" {
     $krep1_r87Lw_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Word.$tcWord8_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.798802221 UTC

[section ""data" . $krep2_r87Lx_closure" {
     $krep2_r87Lx_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Buffer.$tcBufferState_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.799411847 UTC

[section ""data" . $krep3_r87Ly_closure" {
     $krep3_r87Ly_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcConstraint_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.800033179 UTC

[section ""data" . $krep4_r87Lz_closure" {
     $krep4_r87Lz_closure:
         const :_con_info;
         const $krep_r87Lv_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.80062115 UTC

[section ""data" . $krep5_r87LA_closure" {
     $krep5_r87LA_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Base.$tcMaybe_closure;
         const $krep4_r87Lz_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.801235421 UTC

[section ""data" . $krep6_r87LB_closure" {
     $krep6_r87LB_closure:
         const :_con_info;
         const $krep1_r87Lw_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.801903955 UTC

[section ""data" . $krep7_r87LC_closure" {
     $krep7_r87LC_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Buffer.$tcBuffer_closure;
         const $krep6_r87LB_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.802512286 UTC

[section ""data" . $krep8_r87LD_closure" {
     $krep8_r87LD_closure:
         const :_con_info;
         const $krep7_r87LC_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.803976657 UTC

[section ""data" . $krep9_r87LE_closure" {
     $krep9_r87LE_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep8_r87LD_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.804588374 UTC

[section ""data" . $krep10_r87LF_closure" {
     $krep10_r87LF_closure:
         const :_con_info;
         const $krep_r87Lv_closure+1;
         const $krep8_r87LD_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.805170525 UTC

[section ""data" . $krep11_r87LG_closure" {
     $krep11_r87LG_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc(,)_closure;
         const $krep10_r87LF_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.805993694 UTC

[section ""data" . $krep12_r87LH_closure" {
     $krep12_r87LH_closure:
         const :_con_info;
         const $krep11_r87LG_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.806526847 UTC

[section ""data" . $krep13_r87LI_closure" {
     $krep13_r87LI_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep12_r87LH_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.807081377 UTC

[section ""data" . $krep14_r87LJ_closure" {
     $krep14_r87LJ_closure:
         const :_con_info;
         const $krep5_r87LA_closure+1;
         const $krep8_r87LD_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.807646055 UTC

[section ""data" . $krep15_r87LK_closure" {
     $krep15_r87LK_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc(,)_closure;
         const $krep14_r87LJ_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.80819972 UTC

[section ""data" . $krep16_r87LL_closure" {
     $krep16_r87LL_closure:
         const :_con_info;
         const $krep15_r87LK_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.808709336 UTC

[section ""data" . $krep17_r87LM_closure" {
     $krep17_r87LM_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep16_r87LL_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.809311294 UTC

[section ""data" . $krep18_r87LN_closure" {
     $krep18_r87LN_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r87Lx_closure+1;
         const $krep9_r87LE_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.809894748 UTC

[section ""data" . $krep19_r87LO_closure" {
     $krep19_r87LO_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep7_r87LC_closure+1;
         const $krep9_r87LE_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.810472781 UTC

[section ""data" . $krep20_r87LP_closure" {
     $krep20_r87LP_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep7_r87LC_closure+1;
         const $krep13_r87LI_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.811087533 UTC

[section ""data" . $krep21_r87LQ_closure" {
     $krep21_r87LQ_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep7_r87LC_closure+1;
         const $krep17_r87LM_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.811688239 UTC

[section ""data" . GHC.IO.BufferedIO.$tcBufferedIO1_closure" {
     GHC.IO.BufferedIO.$tcBufferedIO1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Types.krep$*_closure;
         const $krep3_r87Ly_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.812303803 UTC

[section ""data" . $krep22_r87LR_closure" {
     $krep22_r87LR_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.812904044 UTC

[section ""data" . $krep23_r87LS_closure" {
     $krep23_r87LS_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep22_r87LR_closure+2;
         const $krep21_r87LQ_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.813517256 UTC

[section ""data" . $krep24_r87LT_closure" {
     $krep24_r87LT_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep22_r87LR_closure+2;
         const $krep20_r87LP_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.814090976 UTC

[section ""data" . $krep25_r87LU_closure" {
     $krep25_r87LU_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep22_r87LR_closure+2;
         const $krep19_r87LO_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.814650827 UTC

[section ""data" . $krep26_r87LV_closure" {
     $krep26_r87LV_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep22_r87LR_closure+2;
         const $krep18_r87LN_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.815256455 UTC

[section ""cstring" . GHC.IO.BufferedIO.$tcBufferedIO3_bytes" {
     GHC.IO.BufferedIO.$tcBufferedIO3_bytes:
         I8[] [66,117,102,102,101,114,101,100,73,79]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.815806072 UTC

[section ""data" . GHC.IO.BufferedIO.$tcBufferedIO2_closure" {
     GHC.IO.BufferedIO.$tcBufferedIO2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.BufferedIO.$tcBufferedIO3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.81637708 UTC

[section ""data" . GHC.IO.BufferedIO.$tcBufferedIO_closure" {
     GHC.IO.BufferedIO.$tcBufferedIO_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.BufferedIO.$trModule_closure+1;
         const GHC.IO.BufferedIO.$tcBufferedIO2_closure+1;
         const GHC.IO.BufferedIO.$tcBufferedIO1_closure+4;
         const 17350223970197035200;
         const 12646105049483783716;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.816957958 UTC

[section ""data" . $krep27_r87LW_closure" {
     $krep27_r87LW_closure:
         const :_con_info;
         const $krep22_r87LR_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.817605468 UTC

[section ""data" . $krep28_r87LX_closure" {
     $krep28_r87LX_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.BufferedIO.$tcBufferedIO_closure+1;
         const $krep27_r87LW_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.818206087 UTC

[section ""data" . $krep29_r87LY_closure" {
     $krep29_r87LY_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep24_r87LT_closure+4;
         const $krep28_r87LX_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.818762929 UTC

[section ""data" . $krep30_r87LZ_closure" {
     $krep30_r87LZ_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep25_r87LU_closure+4;
         const $krep29_r87LY_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.819387621 UTC

[section ""data" . $krep31_r87M0_closure" {
     $krep31_r87M0_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep25_r87LU_closure+4;
         const $krep30_r87LZ_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.8199825 UTC

[section ""data" . $krep32_r87M1_closure" {
     $krep32_r87M1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep23_r87LS_closure+4;
         const $krep31_r87M0_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.820554172 UTC

[section ""data" . $krep33_r87M2_closure" {
     $krep33_r87M2_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep24_r87LT_closure+4;
         const $krep32_r87M1_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.821803346 UTC

[section ""data" . GHC.IO.BufferedIO.$tc'C:BufferedIO1_closure" {
     GHC.IO.BufferedIO.$tc'C:BufferedIO1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep26_r87LV_closure+4;
         const $krep33_r87M2_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.822463439 UTC

[section ""cstring" . GHC.IO.BufferedIO.$tc'C:BufferedIO3_bytes" {
     GHC.IO.BufferedIO.$tc'C:BufferedIO3_bytes:
         I8[] [39,67,58,66,117,102,102,101,114,101,100,73,79]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.823006459 UTC

[section ""data" . GHC.IO.BufferedIO.$tc'C:BufferedIO2_closure" {
     GHC.IO.BufferedIO.$tc'C:BufferedIO2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.BufferedIO.$tc'C:BufferedIO3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.823545171 UTC

[section ""data" . GHC.IO.BufferedIO.$tc'C:BufferedIO_closure" {
     GHC.IO.BufferedIO.$tc'C:BufferedIO_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.BufferedIO.$trModule_closure+1;
         const GHC.IO.BufferedIO.$tc'C:BufferedIO2_closure+1;
         const GHC.IO.BufferedIO.$tc'C:BufferedIO1_closure+4;
         const 14745255964277825469;
         const 12324508286010448901;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.824523025 UTC

[section ""data" . GHC.IO.BufferedIO.C:BufferedIO_closure" {
     GHC.IO.BufferedIO.C:BufferedIO_closure:
         const GHC.IO.BufferedIO.C:BufferedIO_info;
 },
 GHC.IO.BufferedIO.C:BufferedIO_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c881W,
                       label: GHC.IO.BufferedIO.C:BufferedIO_info
                       rep:HeapRep static { Fun {arity: 6 fun_type: ArgSpec 26} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c881W: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c8820; else goto c881Z;
       c8820: // global
           HpAlloc = 56;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.BufferedIO.C:BufferedIO_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       c881Z: // global
           I64[Hp - 48] = GHC.IO.BufferedIO.C:BufferedIO_con_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           P64[Hp - 8] = R6;
           P64[Hp] = P64[Sp];
           R1 = Hp - 47;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.825551162 UTC

[GHC.IO.BufferedIO.C:BufferedIO_con_entry() //  [R1]
         { info_tbl: [(c8821,
                       label: GHC.IO.BufferedIO.C:BufferedIO_con_info
                       rep:HeapRep 6 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,73,79,46,66,117,102,102,101,114,101,100,73,79,46,67,58,66,117,102,102,101,114,101,100,73,79]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c8821: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.826252667 UTC

[section ""relreadonly" . S87VB_srt" { S87VB_srt:
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.826991526 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:03:14.828329586 UTC

[section ""data" . GHC.IO.BufferedIO.newBuffer_closure" {
     GHC.IO.BufferedIO.newBuffer_closure:
         const GHC.IO.BufferedIO.newBuffer_info;
 },
 GHC.IO.BufferedIO.newBuffer_entry() //  [R2]
         { info_tbl: [(c882a,
                       label: GHC.IO.BufferedIO.newBuffer_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c882a: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c882b; else goto c882c;
       c882b: // global
           R2 = R2;
           R1 = GHC.IO.BufferedIO.newBuffer_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c882c: // global
           I64[Sp - 8] = block_c8827_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u882g; else goto c8828;
       u882g: // global
           call _c8827(R1) args: 0, res: 0, upd: 0;
       c8828: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c8827() //  [R1]
         { info_tbl: [(c8827,
                       label: block_c8827_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c8827: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.834338876 UTC

[section ""data" . GHC.IO.BufferedIO.fillReadBuffer_closure" {
     GHC.IO.BufferedIO.fillReadBuffer_closure:
         const GHC.IO.BufferedIO.fillReadBuffer_info;
 },
 GHC.IO.BufferedIO.fillReadBuffer_entry() //  [R2]
         { info_tbl: [(c882x,
                       label: GHC.IO.BufferedIO.fillReadBuffer_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c882x: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c882y; else goto c882z;
       c882y: // global
           R2 = R2;
           R1 = GHC.IO.BufferedIO.fillReadBuffer_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c882z: // global
           I64[Sp - 8] = block_c882u_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u882D; else goto c882v;
       u882D: // global
           call _c882u(R1) args: 0, res: 0, upd: 0;
       c882v: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c882u() //  [R1]
         { info_tbl: [(c882u,
                       label: block_c882u_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c882u: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.839742673 UTC

[section ""data" . GHC.IO.BufferedIO.fillReadBuffer0_closure" {
     GHC.IO.BufferedIO.fillReadBuffer0_closure:
         const GHC.IO.BufferedIO.fillReadBuffer0_info;
 },
 GHC.IO.BufferedIO.fillReadBuffer0_entry() //  [R2]
         { info_tbl: [(c882U,
                       label: GHC.IO.BufferedIO.fillReadBuffer0_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c882U: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c882V; else goto c882W;
       c882V: // global
           R2 = R2;
           R1 = GHC.IO.BufferedIO.fillReadBuffer0_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c882W: // global
           I64[Sp - 8] = block_c882R_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8830; else goto c882S;
       u8830: // global
           call _c882R(R1) args: 0, res: 0, upd: 0;
       c882S: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c882R() //  [R1]
         { info_tbl: [(c882R,
                       label: block_c882R_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c882R: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.847445126 UTC

[section ""data" . GHC.IO.BufferedIO.emptyWriteBuffer_closure" {
     GHC.IO.BufferedIO.emptyWriteBuffer_closure:
         const GHC.IO.BufferedIO.emptyWriteBuffer_info;
 },
 GHC.IO.BufferedIO.emptyWriteBuffer_entry() //  [R2]
         { info_tbl: [(c883h,
                       label: GHC.IO.BufferedIO.emptyWriteBuffer_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c883h: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c883i; else goto c883j;
       c883i: // global
           R2 = R2;
           R1 = GHC.IO.BufferedIO.emptyWriteBuffer_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c883j: // global
           I64[Sp - 8] = block_c883e_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u883n; else goto c883f;
       u883n: // global
           call _c883e(R1) args: 0, res: 0, upd: 0;
       c883f: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c883e() //  [R1]
         { info_tbl: [(c883e,
                       label: block_c883e_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c883e: // global
           R1 = P64[R1 + 31];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.85277106 UTC

[section ""data" . GHC.IO.BufferedIO.flushWriteBuffer_closure" {
     GHC.IO.BufferedIO.flushWriteBuffer_closure:
         const GHC.IO.BufferedIO.flushWriteBuffer_info;
 },
 GHC.IO.BufferedIO.flushWriteBuffer_entry() //  [R2]
         { info_tbl: [(c883E,
                       label: GHC.IO.BufferedIO.flushWriteBuffer_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c883E: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c883F; else goto c883G;
       c883F: // global
           R2 = R2;
           R1 = GHC.IO.BufferedIO.flushWriteBuffer_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c883G: // global
           I64[Sp - 8] = block_c883B_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u883K; else goto c883C;
       u883K: // global
           call _c883B(R1) args: 0, res: 0, upd: 0;
       c883C: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c883B() //  [R1]
         { info_tbl: [(c883B,
                       label: block_c883B_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c883B: // global
           R1 = P64[R1 + 39];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.85871591 UTC

[section ""data" . GHC.IO.BufferedIO.flushWriteBuffer0_closure" {
     GHC.IO.BufferedIO.flushWriteBuffer0_closure:
         const GHC.IO.BufferedIO.flushWriteBuffer0_info;
 },
 GHC.IO.BufferedIO.flushWriteBuffer0_entry() //  [R2]
         { info_tbl: [(c8841,
                       label: GHC.IO.BufferedIO.flushWriteBuffer0_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c8841: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8842; else goto c8843;
       c8842: // global
           R2 = R2;
           R1 = GHC.IO.BufferedIO.flushWriteBuffer0_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8843: // global
           I64[Sp - 8] = block_c883Y_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8847; else goto c883Z;
       u8847: // global
           call _c883Y(R1) args: 0, res: 0, upd: 0;
       c883Z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c883Y() //  [R1]
         { info_tbl: [(c883Y,
                       label: block_c883Y_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c883Y: // global
           R1 = P64[R1 + 47];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.865222638 UTC

[section ""data" . $dmemptyWriteBuffer1_r87Lu_closure" {
     $dmemptyWriteBuffer1_r87Lu_closure:
         const $dmemptyWriteBuffer1_r87Lu_info;
 },
 sat_s87N1_entry() //  [R1]
         { info_tbl: [(c884s,
                       label: sat_s87N1_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c884s: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c884w; else goto c884x;
       c884w: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c884x: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c884p_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u884B; else goto c884q;
       u884B: // global
           call _c884p(R1) args: 0, res: 0, upd: 0;
       c884q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c884p() //  [R1]
         { info_tbl: [(c884p,
                       label: block_c884p_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c884p: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c884A; else goto c884z;
       c884A: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c884z: // global
           _s87MW::P64 = P64[R1 + 7];
           _s87MV::I64 = I64[R1 + 23];
           _s87MY::I64 = I64[R1 + 31];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _s87MW::P64;
           P64[Hp - 32] = GHC.IO.Buffer.WriteBuffer_closure+2;
           I64[Hp - 24] = _s87MV::I64;
           I64[Hp - 16] = _s87MY::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           R1 = Hp - 47;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 $dmemptyWriteBuffer1_r87Lu_entry() //  [R2, R3, R4]
         { info_tbl: [(c884C,
                       label: $dmemptyWriteBuffer1_r87Lu_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c884C: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c884G; else goto c884F;
       c884G: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = $dmemptyWriteBuffer1_r87Lu_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c884F: // global
           I64[Hp - 16] = sat_s87N1_info;
           P64[Hp] = R4;
           R1 = Hp - 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.873509717 UTC

[section ""data" . GHC.IO.BufferedIO.$dmemptyWriteBuffer_closure" {
     GHC.IO.BufferedIO.$dmemptyWriteBuffer_closure:
         const GHC.IO.BufferedIO.$dmemptyWriteBuffer_info;
 },
 GHC.IO.BufferedIO.$dmemptyWriteBuffer_entry() //  [R2, R3, R4]
         { info_tbl: [(c884Z,
                       label: GHC.IO.BufferedIO.$dmemptyWriteBuffer_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c884Z: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call $dmemptyWriteBuffer1_r87Lu_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.877898052 UTC

[section ""data" . GHC.IO.BufferedIO.$wreadBuf_closure" {
     GHC.IO.BufferedIO.$wreadBuf_closure:
         const GHC.IO.BufferedIO.$wreadBuf_info;
 },
 GHC.IO.BufferedIO.$wreadBuf_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c8857: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.IO.BufferedIO.$wreadBuf_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2,
                                                  R1) args: 32, res: 0, upd: 8;
     }
 },
 sat_s87Nm_entry() //  [R1]
         { info_tbl: [(c885t,
                       label: sat_s87Nm_info
                       rep:HeapRep 3 ptrs 4 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c885t: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c885A; else goto c885B;
       c885A: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c885B: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 72] = block_c885q_info;
           _s87N5::P64 = P64[R1 + 16];
           _s87N6::P64 = P64[R1 + 24];
           _s87N4::I64 = I64[R1 + 40];
           _s87N7::I64 = I64[R1 + 48];
           _s87N8::I64 = I64[R1 + 56];
           _s87N9::I64 = I64[R1 + 64];
           R1 = P64[R1 + 32];
           I64[Sp - 64] = _s87N4::I64;
           P64[Sp - 56] = _s87N5::P64;
           P64[Sp - 48] = _s87N6::P64;
           I64[Sp - 40] = _s87N7::I64;
           I64[Sp - 32] = _s87N8::I64;
           I64[Sp - 24] = _s87N9::I64;
           Sp = Sp - 72;
           if (R1 & 7 != 0) goto u885F; else goto c885r;
       u885F: // global
           call _c885q(R1) args: 0, res: 0, upd: 0;
       c885r: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c885q() //  [R1]
         { info_tbl: [(c885q,
                       label: block_c885q_info
                       rep:StackRep [True, False, False, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c885q: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c885E; else goto c885D;
       c885E: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c885D: // global
           _s87Nl::I64 = I64[Sp + 48] + I64[R1 + 7];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 24];
           I64[Hp - 24] = I64[Sp + 8];
           I64[Hp - 16] = I64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = _s87Nl::I64;
           R1 = Hp - 47;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.IO.BufferedIO.$wreadBuf_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c885G,
                       label: GHC.IO.BufferedIO.$wreadBuf_info
                       rep:HeapRep static {
                             Fun {arity: 9
                                  fun_type: ArgGen [False, False, True, False, False, True, True,
                                                    True]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c885G: // global
           _s87N6::P64 = R6;
           _s87N5::P64 = R5;
           _s87N4::I64 = R4;
           _s87N3::P64 = R3;
           _s87N2::P64 = R2;
           if ((Sp + -64) < SpLim) (likely: False) goto c885I; else goto c885J;
       c885J: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c885L; else goto c885K;
       c885L: // global
           HpAlloc = 32;
           goto c885I;
       c885I: // global
           R1 = GHC.IO.BufferedIO.$wreadBuf_closure;
           P64[Sp - 40] = _s87N2::P64;
           P64[Sp - 32] = _s87N3::P64;
           I64[Sp - 24] = _s87N4::I64;
           P64[Sp - 16] = _s87N5::P64;
           P64[Sp - 8] = _s87N6::P64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       c885K: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           _s87N9::I64 = I64[Sp + 16];
           I64[Hp - 16] = I64[Sp] - _s87N9::I64;
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s87N4::I64 + _s87N9::I64;
           I64[Sp - 32] = block_c885j_info;
           R2 = _s87N2::P64;
           I64[Sp - 64] = stg_ap_pppv_info;
           P64[Sp - 56] = _s87N3::P64;
           P64[Sp - 48] = Hp - 7;
           P64[Sp - 40] = Hp - 23;
           I64[Sp - 24] = _s87N4::I64;
           P64[Sp - 16] = _s87N5::P64;
           P64[Sp - 8] = _s87N6::P64;
           Sp = Sp - 64;
           call GHC.IO.Device.read_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 _c885j() //  [R1]
         { info_tbl: [(c885j,
                       label: block_c885j_info
                       rep:StackRep [True, False, False, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c885j: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c885O; else goto c885N;
       c885O: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c885N: // global
           _s87N4::I64 = I64[Sp + 8];
           _s87N5::P64 = P64[Sp + 16];
           _s87N6::P64 = P64[Sp + 24];
           _s87N7::I64 = I64[Sp + 32];
           _s87N8::I64 = I64[Sp + 40];
           _s87N9::I64 = I64[Sp + 48];
           call MO_Touch(_s87N5::P64);
           I64[Hp - 88] = sat_s87Nm_info;
           P64[Hp - 72] = _s87N5::P64;
           P64[Hp - 64] = _s87N6::P64;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = _s87N4::I64;
           I64[Hp - 40] = _s87N7::I64;
           I64[Hp - 32] = _s87N8::I64;
           I64[Hp - 24] = _s87N9::I64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 88;
           R1 = Hp - 15;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.89130769 UTC

[section ""data" . GHC.IO.BufferedIO.readBuf1_closure" {
     GHC.IO.BufferedIO.readBuf1_closure:
         const GHC.IO.BufferedIO.readBuf1_info;
 },
 GHC.IO.BufferedIO.readBuf1_entry() //  [R2, R3, R4]
         { info_tbl: [(c886u,
                       label: GHC.IO.BufferedIO.readBuf1_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c886u: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c886v; else goto c886w;
       c886v: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.BufferedIO.readBuf1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c886w: // global
           I64[Sp - 24] = block_c886r_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u886A; else goto c886s;
       u886A: // global
           call _c886r(R1) args: 0, res: 0, upd: 0;
       c886s: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c886r() //  [R1]
         { info_tbl: [(c886r,
                       label: block_c886r_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c886r: // global
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = I64[R1 + 23];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           I64[Sp] = I64[R1 + 31];
           I64[Sp + 8] = I64[R1 + 39];
           I64[Sp + 16] = I64[R1 + 47];
           call GHC.IO.BufferedIO.$wreadBuf_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 32, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.897232452 UTC

[section ""data" . GHC.IO.BufferedIO.readBuf_closure" {
     GHC.IO.BufferedIO.readBuf_closure:
         const GHC.IO.BufferedIO.readBuf_info;
 },
 GHC.IO.BufferedIO.readBuf_entry() //  [R2, R3, R4]
         { info_tbl: [(c886R,
                       label: GHC.IO.BufferedIO.readBuf_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c886R: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.IO.BufferedIO.readBuf1_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.902422876 UTC

[section ""data" . GHC.IO.BufferedIO.$wreadBufNonBlocking_closure" {
     GHC.IO.BufferedIO.$wreadBufNonBlocking_closure:
         const GHC.IO.BufferedIO.$wreadBufNonBlocking_info;
 },
 GHC.IO.BufferedIO.$wreadBufNonBlocking_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c886Z: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.IO.BufferedIO.$wreadBufNonBlocking_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2,
                                                             R1) args: 32, res: 0, upd: 8;
     }
 },
 sat_s87NX_entry() //  [R1]
         { info_tbl: [(c887r,
                       label: sat_s87NX_info
                       rep:HeapRep 3 ptrs 4 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c887r: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c887y; else goto c887z;
       c887y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c887z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 72] = block_c887o_info;
           _s87NC::P64 = P64[R1 + 16];
           _s87ND::P64 = P64[R1 + 24];
           _s87NB::I64 = I64[R1 + 40];
           _s87NE::I64 = I64[R1 + 48];
           _s87NF::I64 = I64[R1 + 56];
           _s87NG::I64 = I64[R1 + 64];
           R1 = P64[R1 + 32];
           I64[Sp - 64] = _s87NB::I64;
           P64[Sp - 56] = _s87NC::P64;
           P64[Sp - 48] = _s87ND::P64;
           I64[Sp - 40] = _s87NE::I64;
           I64[Sp - 32] = _s87NF::I64;
           I64[Sp - 24] = _s87NG::I64;
           Sp = Sp - 72;
           if (R1 & 7 != 0) goto u887D; else goto c887p;
       u887D: // global
           call _c887o(R1) args: 0, res: 0, upd: 0;
       c887p: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c887o() //  [R1]
         { info_tbl: [(c887o,
                       label: block_c887o_info
                       rep:StackRep [True, False, False, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c887o: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c887C; else goto c887B;
       c887C: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c887B: // global
           _s87NW::I64 = I64[Sp + 48] + I64[R1 + 7];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 24];
           I64[Hp - 24] = I64[Sp + 8];
           I64[Hp - 16] = I64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = _s87NW::I64;
           R1 = Hp - 47;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.IO.BufferedIO.$wreadBufNonBlocking_entry() //  [R2, R3, R4, R5,
                                                     R6]
         { info_tbl: [(c887E,
                       label: GHC.IO.BufferedIO.$wreadBufNonBlocking_info
                       rep:HeapRep static {
                             Fun {arity: 9
                                  fun_type: ArgGen [False, False, True, False, False, True, True,
                                                    True]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c887E: // global
           _s87ND::P64 = R6;
           _s87NC::P64 = R5;
           _s87NB::I64 = R4;
           _s87NA::P64 = R3;
           _s87Nz::P64 = R2;
           if ((Sp + -64) < SpLim) (likely: False) goto c887F; else goto c887G;
       c887G: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c887I; else goto c887H;
       c887I: // global
           HpAlloc = 32;
           goto c887F;
       c887F: // global
           R1 = GHC.IO.BufferedIO.$wreadBufNonBlocking_closure;
           P64[Sp - 40] = _s87Nz::P64;
           P64[Sp - 32] = _s87NA::P64;
           I64[Sp - 24] = _s87NB::I64;
           P64[Sp - 16] = _s87NC::P64;
           P64[Sp - 8] = _s87ND::P64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       c887H: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           _s87NG::I64 = I64[Sp + 16];
           I64[Hp - 16] = I64[Sp] - _s87NG::I64;
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s87NB::I64 + _s87NG::I64;
           I64[Sp - 32] = block_c887b_info;
           R2 = _s87Nz::P64;
           I64[Sp - 64] = stg_ap_pppv_info;
           P64[Sp - 56] = _s87NA::P64;
           P64[Sp - 48] = Hp - 7;
           P64[Sp - 40] = Hp - 23;
           I64[Sp - 24] = _s87NB::I64;
           P64[Sp - 16] = _s87NC::P64;
           P64[Sp - 8] = _s87ND::P64;
           Sp = Sp - 64;
           call GHC.IO.Device.readNonBlocking_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 _c887b() //  [R1]
         { info_tbl: [(c887b,
                       label: block_c887b_info
                       rep:StackRep [True, False, False, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c887b: // global
           call MO_Touch(P64[Sp + 16]);
           I64[Sp] = block_c887e_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u887Y; else goto c887f;
       u887Y: // global
           call _c887e(R1) args: 0, res: 0, upd: 0;
       c887f: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c887e() //  [R1]
         { info_tbl: [(c887e,
                       label: block_c887e_info
                       rep:StackRep [True, False, False, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c887e: // global
           _s87NB::I64 = I64[Sp + 8];
           _s87NC::P64 = P64[Sp + 16];
           _s87ND::P64 = P64[Sp + 24];
           _s87NE::I64 = I64[Sp + 32];
           _s87NF::I64 = I64[Sp + 40];
           _s87NG::I64 = I64[Sp + 48];
           if (R1 & 7 == 1) goto c887O; else goto c887T;
       c887O: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c887R; else goto c887Q;
       c887R: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c887Q: // global
           I64[Hp - 72] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 64] = _s87NC::P64;
           P64[Hp - 56] = _s87ND::P64;
           I64[Hp - 48] = _s87NB::I64;
           I64[Hp - 40] = _s87NE::I64;
           I64[Hp - 32] = _s87NF::I64;
           I64[Hp - 24] = _s87NG::I64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = GHC.Base.Nothing_closure+1;
           P64[Hp] = Hp - 71;
           R1 = Hp - 15;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c887T: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c887W; else goto c887V;
       c887W: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c887V: // global
           _s87NT::P64 = P64[R1 + 6];
           I64[Hp - 88] = sat_s87NX_info;
           P64[Hp - 72] = _s87NC::P64;
           P64[Hp - 64] = _s87ND::P64;
           P64[Hp - 56] = _s87NT::P64;
           I64[Hp - 48] = _s87NB::I64;
           I64[Hp - 40] = _s87NE::I64;
           I64[Hp - 32] = _s87NF::I64;
           I64[Hp - 24] = _s87NG::I64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 88;
           R1 = Hp - 15;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.917857158 UTC

[section ""data" . GHC.IO.BufferedIO.readBufNonBlocking1_closure" {
     GHC.IO.BufferedIO.readBufNonBlocking1_closure:
         const GHC.IO.BufferedIO.readBufNonBlocking1_info;
 },
 GHC.IO.BufferedIO.readBufNonBlocking1_entry() //  [R2, R3, R4]
         { info_tbl: [(c888M,
                       label: GHC.IO.BufferedIO.readBufNonBlocking1_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c888M: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c888N; else goto c888O;
       c888N: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.BufferedIO.readBufNonBlocking1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c888O: // global
           I64[Sp - 24] = block_c888J_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u888S; else goto c888K;
       u888S: // global
           call _c888J(R1) args: 0, res: 0, upd: 0;
       c888K: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c888J() //  [R1]
         { info_tbl: [(c888J,
                       label: block_c888J_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c888J: // global
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = I64[R1 + 23];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           I64[Sp] = I64[R1 + 31];
           I64[Sp + 8] = I64[R1 + 39];
           I64[Sp + 16] = I64[R1 + 47];
           call GHC.IO.BufferedIO.$wreadBufNonBlocking_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 32, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.924196142 UTC

[section ""data" . GHC.IO.BufferedIO.readBufNonBlocking_closure" {
     GHC.IO.BufferedIO.readBufNonBlocking_closure:
         const GHC.IO.BufferedIO.readBufNonBlocking_info;
 },
 GHC.IO.BufferedIO.readBufNonBlocking_entry() //  [R2, R3, R4]
         { info_tbl: [(c8899,
                       label: GHC.IO.BufferedIO.readBufNonBlocking_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c8899: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.IO.BufferedIO.readBufNonBlocking1_entry(R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.928600921 UTC

[section ""data" . GHC.IO.BufferedIO.$wwriteBuf_closure" {
     GHC.IO.BufferedIO.$wwriteBuf_closure:
         const GHC.IO.BufferedIO.$wwriteBuf_info;
 },
 GHC.IO.BufferedIO.$wwriteBuf_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c889h: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.IO.BufferedIO.$wwriteBuf_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2,
                                                   R1) args: 32, res: 0, upd: 8;
     }
 },
 GHC.IO.BufferedIO.$wwriteBuf_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c889n,
                       label: GHC.IO.BufferedIO.$wwriteBuf_info
                       rep:HeapRep static {
                             Fun {arity: 9
                                  fun_type: ArgGen [False, False, True, False, False, True, True,
                                                    True]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c889n: // global
           _s87Oe::P64 = R6;
           _s87Od::P64 = R5;
           _s87Oc::I64 = R4;
           _s87Ob::P64 = R3;
           _s87Oa::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto c889y; else goto c889z;
       c889z: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c889B; else goto c889A;
       c889B: // global
           HpAlloc = 32;
           goto c889y;
       c889y: // global
           R1 = GHC.IO.BufferedIO.$wwriteBuf_closure;
           P64[Sp - 40] = _s87Oa::P64;
           P64[Sp - 32] = _s87Ob::P64;
           I64[Sp - 24] = _s87Oc::I64;
           P64[Sp - 16] = _s87Od::P64;
           P64[Sp - 8] = _s87Oe::P64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       c889A: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           _s87Og::I64 = I64[Sp + 8];
           I64[Hp - 16] = I64[Sp + 16] - _s87Og::I64;
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s87Oc::I64 + _s87Og::I64;
           I64[Sp - 16] = block_c889u_info;
           R2 = _s87Oa::P64;
           I64[Sp - 48] = stg_ap_pppv_info;
           P64[Sp - 40] = _s87Ob::P64;
           P64[Sp - 32] = Hp - 7;
           P64[Sp - 24] = Hp - 23;
           P64[Sp - 8] = _s87Oe::P64;
           P64[Sp + 8] = _s87Od::P64;
           I64[Sp + 16] = _s87Oc::I64;
           Sp = Sp - 48;
           call GHC.IO.Device.write_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 _c889u() //  [R1]
         { info_tbl: [(c889u,
                       label: block_c889u_info
                       rep:StackRep [False, True, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c889u: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c889E; else goto c889D;
       c889E: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c889D: // global
           _s87Oc::I64 = I64[Sp + 32];
           _s87Od::P64 = P64[Sp + 24];
           _s87Oe::P64 = P64[Sp + 8];
           _s87Of::I64 = I64[Sp + 16];
           call MO_Touch(_s87Od::P64);
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _s87Od::P64;
           P64[Hp - 32] = _s87Oe::P64;
           I64[Hp - 24] = _s87Oc::I64;
           I64[Hp - 16] = _s87Of::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           R1 = Hp - 47;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.937084673 UTC

[section ""data" . GHC.IO.BufferedIO.writeBuf1_closure" {
     GHC.IO.BufferedIO.writeBuf1_closure:
         const GHC.IO.BufferedIO.writeBuf1_info;
 },
 GHC.IO.BufferedIO.writeBuf1_entry() //  [R2, R3, R4]
         { info_tbl: [(c88a3,
                       label: GHC.IO.BufferedIO.writeBuf1_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c88a3: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c88a4; else goto c88a5;
       c88a4: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.BufferedIO.writeBuf1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c88a5: // global
           I64[Sp - 24] = block_c88a0_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u88a9; else goto c88a1;
       u88a9: // global
           call _c88a0(R1) args: 0, res: 0, upd: 0;
       c88a1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c88a0() //  [R1]
         { info_tbl: [(c88a0,
                       label: block_c88a0_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c88a0: // global
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = I64[R1 + 23];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           I64[Sp] = I64[R1 + 31];
           I64[Sp + 8] = I64[R1 + 39];
           I64[Sp + 16] = I64[R1 + 47];
           call GHC.IO.BufferedIO.$wwriteBuf_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 32, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.94429717 UTC

[section ""data" . GHC.IO.BufferedIO.writeBuf_closure" {
     GHC.IO.BufferedIO.writeBuf_closure:
         const GHC.IO.BufferedIO.writeBuf_info;
 },
 GHC.IO.BufferedIO.writeBuf_entry() //  [R2, R3, R4]
         { info_tbl: [(c88aq,
                       label: GHC.IO.BufferedIO.writeBuf_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c88aq: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.IO.BufferedIO.writeBuf1_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.948607702 UTC

[section ""data" . GHC.IO.BufferedIO.$wwriteBufNonBlocking_closure" {
     GHC.IO.BufferedIO.$wwriteBufNonBlocking_closure:
         const GHC.IO.BufferedIO.$wwriteBufNonBlocking_info;
 },
 GHC.IO.BufferedIO.$wwriteBufNonBlocking_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c88ay: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.IO.BufferedIO.$wwriteBufNonBlocking_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2,
                                                              R1) args: 32, res: 0, upd: 8;
     }
 },
 sat_s87OY_entry() //  [R1]
         { info_tbl: [(c88aU,
                       label: sat_s87OY_info
                       rep:HeapRep 3 ptrs 4 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c88aU: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c88aV; else goto c88aW;
       c88aV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c88aW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 72] = block_c88aR_info;
           _s87OG::P64 = P64[R1 + 16];
           _s87OH::P64 = P64[R1 + 24];
           _s87OF::I64 = I64[R1 + 40];
           _s87OI::I64 = I64[R1 + 48];
           _s87OJ::I64 = I64[R1 + 56];
           _s87OK::I64 = I64[R1 + 64];
           R1 = P64[R1 + 32];
           I64[Sp - 64] = _s87OF::I64;
           P64[Sp - 56] = _s87OG::P64;
           P64[Sp - 48] = _s87OH::P64;
           I64[Sp - 40] = _s87OI::I64;
           I64[Sp - 32] = _s87OJ::I64;
           I64[Sp - 24] = _s87OK::I64;
           Sp = Sp - 72;
           if (R1 & 7 != 0) goto u88be; else goto c88aS;
       u88be: // global
           call _c88aR(R1) args: 0, res: 0, upd: 0;
       c88aS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c88aR() //  [R1]
         { info_tbl: [(c88aR,
                       label: block_c88aR_info
                       rep:StackRep [True, False, False, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c88aR: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c88b1; else goto c88b0;
       c88b1: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c88b0: // global
           _s87OF::I64 = I64[Sp + 8];
           _s87OG::P64 = P64[Sp + 16];
           _s87OH::P64 = P64[Sp + 24];
           _s87OI::I64 = I64[Sp + 32];
           _s87OK::I64 = I64[Sp + 48];
           _s87OW::I64 = I64[Sp + 40] + I64[R1 + 7];
           if (_s87OW::I64 == _s87OK::I64) goto c88bd; else goto c88ba;
       c88bd: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _s87OG::P64;
           P64[Hp - 32] = _s87OH::P64;
           I64[Hp - 24] = _s87OF::I64;
           I64[Hp - 16] = _s87OI::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           R1 = Hp - 47;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c88ba: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _s87OG::P64;
           P64[Hp - 32] = _s87OH::P64;
           I64[Hp - 24] = _s87OF::I64;
           I64[Hp - 16] = _s87OI::I64;
           I64[Hp - 8] = _s87OW::I64;
           I64[Hp] = _s87OK::I64;
           R1 = Hp - 47;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.IO.BufferedIO.$wwriteBufNonBlocking_entry() //  [R2, R3, R4,
                                                      R5, R6]
         { info_tbl: [(c88bf,
                       label: GHC.IO.BufferedIO.$wwriteBufNonBlocking_info
                       rep:HeapRep static {
                             Fun {arity: 9
                                  fun_type: ArgGen [False, False, True, False, False, True, True,
                                                    True]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c88bf: // global
           _s87OH::P64 = R6;
           _s87OG::P64 = R5;
           _s87OF::I64 = R4;
           _s87OE::P64 = R3;
           _s87OD::P64 = R2;
           if ((Sp + -64) < SpLim) (likely: False) goto c88bh; else goto c88bi;
       c88bi: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c88bk; else goto c88bj;
       c88bk: // global
           HpAlloc = 32;
           goto c88bh;
       c88bh: // global
           R1 = GHC.IO.BufferedIO.$wwriteBufNonBlocking_closure;
           P64[Sp - 40] = _s87OD::P64;
           P64[Sp - 32] = _s87OE::P64;
           I64[Sp - 24] = _s87OF::I64;
           P64[Sp - 16] = _s87OG::P64;
           P64[Sp - 8] = _s87OH::P64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       c88bj: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           _s87OJ::I64 = I64[Sp + 8];
           I64[Hp - 16] = I64[Sp + 16] - _s87OJ::I64;
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s87OF::I64 + _s87OJ::I64;
           I64[Sp - 32] = block_c88aK_info;
           R2 = _s87OD::P64;
           I64[Sp - 64] = stg_ap_pppv_info;
           P64[Sp - 56] = _s87OE::P64;
           P64[Sp - 48] = Hp - 7;
           P64[Sp - 40] = Hp - 23;
           I64[Sp - 24] = _s87OF::I64;
           P64[Sp - 16] = _s87OG::P64;
           P64[Sp - 8] = _s87OH::P64;
           Sp = Sp - 64;
           call GHC.IO.Device.writeNonBlocking_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 _c88aK() //  [R1]
         { info_tbl: [(c88aK,
                       label: block_c88aK_info
                       rep:StackRep [True, False, False, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c88aK: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c88bn; else goto c88bm;
       c88bn: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c88bm: // global
           _s87OF::I64 = I64[Sp + 8];
           _s87OG::P64 = P64[Sp + 16];
           _s87OH::P64 = P64[Sp + 24];
           _s87OI::I64 = I64[Sp + 32];
           _s87OJ::I64 = I64[Sp + 40];
           _s87OK::I64 = I64[Sp + 48];
           call MO_Touch(_s87OG::P64);
           I64[Hp - 88] = sat_s87OY_info;
           P64[Hp - 72] = _s87OG::P64;
           P64[Hp - 64] = _s87OH::P64;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = _s87OF::I64;
           I64[Hp - 40] = _s87OI::I64;
           I64[Hp - 32] = _s87OJ::I64;
           I64[Hp - 24] = _s87OK::I64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 88;
           R1 = Hp - 15;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.962656173 UTC

[section ""data" . GHC.IO.BufferedIO.writeBufNonBlocking1_closure" {
     GHC.IO.BufferedIO.writeBufNonBlocking1_closure:
         const GHC.IO.BufferedIO.writeBufNonBlocking1_info;
 },
 GHC.IO.BufferedIO.writeBufNonBlocking1_entry() //  [R2, R3, R4]
         { info_tbl: [(c88bZ,
                       label: GHC.IO.BufferedIO.writeBufNonBlocking1_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c88bZ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c88c0; else goto c88c1;
       c88c0: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.BufferedIO.writeBufNonBlocking1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c88c1: // global
           I64[Sp - 24] = block_c88bW_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u88c5; else goto c88bX;
       u88c5: // global
           call _c88bW(R1) args: 0, res: 0, upd: 0;
       c88bX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c88bW() //  [R1]
         { info_tbl: [(c88bW,
                       label: block_c88bW_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c88bW: // global
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = I64[R1 + 23];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           I64[Sp] = I64[R1 + 31];
           I64[Sp + 8] = I64[R1 + 39];
           I64[Sp + 16] = I64[R1 + 47];
           call GHC.IO.BufferedIO.$wwriteBufNonBlocking_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 32, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.968450725 UTC

[section ""data" . GHC.IO.BufferedIO.writeBufNonBlocking_closure" {
     GHC.IO.BufferedIO.writeBufNonBlocking_closure:
         const GHC.IO.BufferedIO.writeBufNonBlocking_info;
 },
 GHC.IO.BufferedIO.writeBufNonBlocking_entry() //  [R2, R3, R4]
         { info_tbl: [(c88cm,
                       label: GHC.IO.BufferedIO.writeBufNonBlocking_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c88cm: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.IO.BufferedIO.writeBufNonBlocking1_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.971715705 UTC

[section ""cstring" . GHC.IO.BufferedIO.$trModule4_bytes" {
     GHC.IO.BufferedIO.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.973405085 UTC

[section ""data" . GHC.IO.BufferedIO.$trModule3_closure" {
     GHC.IO.BufferedIO.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.BufferedIO.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.975138594 UTC

[section ""cstring" . GHC.IO.BufferedIO.$trModule2_bytes" {
     GHC.IO.BufferedIO.$trModule2_bytes:
         I8[] [71,72,67,46,73,79,46,66,117,102,102,101,114,101,100,73,79]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.976860769 UTC

[section ""data" . GHC.IO.BufferedIO.$trModule1_closure" {
     GHC.IO.BufferedIO.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.BufferedIO.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.979106102 UTC

[section ""data" . GHC.IO.BufferedIO.$trModule_closure" {
     GHC.IO.BufferedIO.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.IO.BufferedIO.$trModule3_closure+1;
         const GHC.IO.BufferedIO.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.98082105 UTC

[section ""data" . $krep_r87Lv_closure" {
     $krep_r87Lv_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.982490012 UTC

[section ""data" . $krep1_r87Lw_closure" {
     $krep1_r87Lw_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Word.$tcWord8_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.984143823 UTC

[section ""data" . $krep2_r87Lx_closure" {
     $krep2_r87Lx_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Buffer.$tcBufferState_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.985892494 UTC

[section ""data" . $krep3_r87Ly_closure" {
     $krep3_r87Ly_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcConstraint_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.987599881 UTC

[section ""data" . $krep4_r87Lz_closure" {
     $krep4_r87Lz_closure:
         const :_con_info;
         const $krep_r87Lv_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.98933347 UTC

[section ""data" . $krep5_r87LA_closure" {
     $krep5_r87LA_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Base.$tcMaybe_closure;
         const $krep4_r87Lz_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.991034615 UTC

[section ""data" . $krep6_r87LB_closure" {
     $krep6_r87LB_closure:
         const :_con_info;
         const $krep1_r87Lw_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.992653728 UTC

[section ""data" . $krep7_r87LC_closure" {
     $krep7_r87LC_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Buffer.$tcBuffer_closure;
         const $krep6_r87LB_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.994598138 UTC

[section ""data" . $krep8_r87LD_closure" {
     $krep8_r87LD_closure:
         const :_con_info;
         const $krep7_r87LC_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.996751393 UTC

[section ""data" . $krep9_r87LE_closure" {
     $krep9_r87LE_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep8_r87LD_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.998383702 UTC

[section ""data" . $krep10_r87LF_closure" {
     $krep10_r87LF_closure:
         const :_con_info;
         const $krep_r87Lv_closure+1;
         const $krep8_r87LD_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.99991757 UTC

[section ""data" . $krep11_r87LG_closure" {
     $krep11_r87LG_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc(,)_closure;
         const $krep10_r87LF_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.001499997 UTC

[section ""data" . $krep12_r87LH_closure" {
     $krep12_r87LH_closure:
         const :_con_info;
         const $krep11_r87LG_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.003065237 UTC

[section ""data" . $krep13_r87LI_closure" {
     $krep13_r87LI_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep12_r87LH_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.004657722 UTC

[section ""data" . $krep14_r87LJ_closure" {
     $krep14_r87LJ_closure:
         const :_con_info;
         const $krep5_r87LA_closure+1;
         const $krep8_r87LD_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.006346657 UTC

[section ""data" . $krep15_r87LK_closure" {
     $krep15_r87LK_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc(,)_closure;
         const $krep14_r87LJ_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.00798687 UTC

[section ""data" . $krep16_r87LL_closure" {
     $krep16_r87LL_closure:
         const :_con_info;
         const $krep15_r87LK_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.011229165 UTC

[section ""data" . $krep17_r87LM_closure" {
     $krep17_r87LM_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep16_r87LL_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.012972205 UTC

[section ""data" . $krep18_r87LN_closure" {
     $krep18_r87LN_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r87Lx_closure+1;
         const $krep9_r87LE_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.015250477 UTC

[section ""data" . $krep19_r87LO_closure" {
     $krep19_r87LO_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep7_r87LC_closure+1;
         const $krep9_r87LE_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.016974928 UTC

[section ""data" . $krep20_r87LP_closure" {
     $krep20_r87LP_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep7_r87LC_closure+1;
         const $krep13_r87LI_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.018610743 UTC

[section ""data" . $krep21_r87LQ_closure" {
     $krep21_r87LQ_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep7_r87LC_closure+1;
         const $krep17_r87LM_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.020226959 UTC

[section ""data" . GHC.IO.BufferedIO.$tcBufferedIO1_closure" {
     GHC.IO.BufferedIO.$tcBufferedIO1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Types.krep$*_closure;
         const $krep3_r87Ly_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.022027804 UTC

[section ""data" . $krep22_r87LR_closure" {
     $krep22_r87LR_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.023607177 UTC

[section ""data" . $krep23_r87LS_closure" {
     $krep23_r87LS_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep22_r87LR_closure+2;
         const $krep21_r87LQ_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.02520548 UTC

[section ""data" . $krep24_r87LT_closure" {
     $krep24_r87LT_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep22_r87LR_closure+2;
         const $krep20_r87LP_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.027094482 UTC

[section ""data" . $krep25_r87LU_closure" {
     $krep25_r87LU_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep22_r87LR_closure+2;
         const $krep19_r87LO_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.028803629 UTC

[section ""data" . $krep26_r87LV_closure" {
     $krep26_r87LV_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep22_r87LR_closure+2;
         const $krep18_r87LN_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.030568631 UTC

[section ""cstring" . GHC.IO.BufferedIO.$tcBufferedIO3_bytes" {
     GHC.IO.BufferedIO.$tcBufferedIO3_bytes:
         I8[] [66,117,102,102,101,114,101,100,73,79]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.032700114 UTC

[section ""data" . GHC.IO.BufferedIO.$tcBufferedIO2_closure" {
     GHC.IO.BufferedIO.$tcBufferedIO2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.BufferedIO.$tcBufferedIO3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.034393488 UTC

[section ""data" . GHC.IO.BufferedIO.$tcBufferedIO_closure" {
     GHC.IO.BufferedIO.$tcBufferedIO_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.BufferedIO.$trModule_closure+1;
         const GHC.IO.BufferedIO.$tcBufferedIO2_closure+1;
         const GHC.IO.BufferedIO.$tcBufferedIO1_closure+4;
         const 17350223970197035200;
         const 12646105049483783716;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.036177305 UTC

[section ""data" . $krep27_r87LW_closure" {
     $krep27_r87LW_closure:
         const :_con_info;
         const $krep22_r87LR_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.037953597 UTC

[section ""data" . $krep28_r87LX_closure" {
     $krep28_r87LX_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.BufferedIO.$tcBufferedIO_closure+1;
         const $krep27_r87LW_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.039619696 UTC

[section ""data" . $krep29_r87LY_closure" {
     $krep29_r87LY_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep24_r87LT_closure+4;
         const $krep28_r87LX_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.041303969 UTC

[section ""data" . $krep30_r87LZ_closure" {
     $krep30_r87LZ_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep25_r87LU_closure+4;
         const $krep29_r87LY_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.042986228 UTC

[section ""data" . $krep31_r87M0_closure" {
     $krep31_r87M0_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep25_r87LU_closure+4;
         const $krep30_r87LZ_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.044716518 UTC

[section ""data" . $krep32_r87M1_closure" {
     $krep32_r87M1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep23_r87LS_closure+4;
         const $krep31_r87M0_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.046452869 UTC

[section ""data" . $krep33_r87M2_closure" {
     $krep33_r87M2_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep24_r87LT_closure+4;
         const $krep32_r87M1_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.048207635 UTC

[section ""data" . GHC.IO.BufferedIO.$tc'C:BufferedIO1_closure" {
     GHC.IO.BufferedIO.$tc'C:BufferedIO1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep26_r87LV_closure+4;
         const $krep33_r87M2_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.050461199 UTC

[section ""cstring" . GHC.IO.BufferedIO.$tc'C:BufferedIO3_bytes" {
     GHC.IO.BufferedIO.$tc'C:BufferedIO3_bytes:
         I8[] [39,67,58,66,117,102,102,101,114,101,100,73,79]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.052110754 UTC

[section ""data" . GHC.IO.BufferedIO.$tc'C:BufferedIO2_closure" {
     GHC.IO.BufferedIO.$tc'C:BufferedIO2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.BufferedIO.$tc'C:BufferedIO3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.053797473 UTC

[section ""data" . GHC.IO.BufferedIO.$tc'C:BufferedIO_closure" {
     GHC.IO.BufferedIO.$tc'C:BufferedIO_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.BufferedIO.$trModule_closure+1;
         const GHC.IO.BufferedIO.$tc'C:BufferedIO2_closure+1;
         const GHC.IO.BufferedIO.$tc'C:BufferedIO1_closure+4;
         const 14745255964277825469;
         const 12324508286010448901;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.055925114 UTC

[section ""data" . GHC.IO.BufferedIO.C:BufferedIO_closure" {
     GHC.IO.BufferedIO.C:BufferedIO_closure:
         const GHC.IO.BufferedIO.C:BufferedIO_info;
 },
 GHC.IO.BufferedIO.C:BufferedIO_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c88dj,
                       label: GHC.IO.BufferedIO.C:BufferedIO_info
                       rep:HeapRep static { Fun {arity: 6 fun_type: ArgSpec 26} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c88dj: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c88dn; else goto c88dm;
       c88dn: // global
           HpAlloc = 56;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.BufferedIO.C:BufferedIO_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       c88dm: // global
           I64[Hp - 48] = GHC.IO.BufferedIO.C:BufferedIO_con_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           P64[Hp - 8] = R6;
           P64[Hp] = P64[Sp];
           R1 = Hp - 47;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.059968289 UTC

[GHC.IO.BufferedIO.C:BufferedIO_con_entry() //  [R1]
         { info_tbl: [(c88du,
                       label: GHC.IO.BufferedIO.C:BufferedIO_con_info
                       rep:HeapRep 6 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,73,79,46,66,117,102,102,101,114,101,100,73,79,46,67,58,66,117,102,102,101,114,101,100,73,79]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c88du: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.063223753 UTC

[section ""relreadonly" . S87VB_srt" { S87VB_srt:
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.739815355 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:03:15.741398209 UTC

[section ""data" . GHC.IO.BufferedIO.newBuffer_closure" {
     GHC.IO.BufferedIO.newBuffer_closure:
         const GHC.IO.BufferedIO.newBuffer_info;
 },
 GHC.IO.BufferedIO.newBuffer_entry() //  [R2]
         { info_tbl: [(c88gP,
                       label: GHC.IO.BufferedIO.newBuffer_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c88gP: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c88gQ; else goto c88gR;
       c88gQ: // global
           R2 = R2;
           R1 = GHC.IO.BufferedIO.newBuffer_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c88gR: // global
           I64[Sp - 8] = block_c88gM_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u88gV; else goto c88gN;
       u88gV: // global
           call _c88gM(R1) args: 0, res: 0, upd: 0;
       c88gN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c88gM() //  [R1]
         { info_tbl: [(c88gM,
                       label: block_c88gM_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c88gM: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.747107066 UTC

[section ""data" . GHC.IO.BufferedIO.fillReadBuffer_closure" {
     GHC.IO.BufferedIO.fillReadBuffer_closure:
         const GHC.IO.BufferedIO.fillReadBuffer_info;
 },
 GHC.IO.BufferedIO.fillReadBuffer_entry() //  [R2]
         { info_tbl: [(c88hd,
                       label: GHC.IO.BufferedIO.fillReadBuffer_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c88hd: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c88he; else goto c88hf;
       c88he: // global
           R2 = R2;
           R1 = GHC.IO.BufferedIO.fillReadBuffer_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c88hf: // global
           I64[Sp - 8] = block_c88ha_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u88hj; else goto c88hb;
       u88hj: // global
           call _c88ha(R1) args: 0, res: 0, upd: 0;
       c88hb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c88ha() //  [R1]
         { info_tbl: [(c88ha,
                       label: block_c88ha_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c88ha: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.752552005 UTC

[section ""data" . GHC.IO.BufferedIO.fillReadBuffer0_closure" {
     GHC.IO.BufferedIO.fillReadBuffer0_closure:
         const GHC.IO.BufferedIO.fillReadBuffer0_info;
 },
 GHC.IO.BufferedIO.fillReadBuffer0_entry() //  [R2]
         { info_tbl: [(c88hB,
                       label: GHC.IO.BufferedIO.fillReadBuffer0_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c88hB: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c88hC; else goto c88hD;
       c88hC: // global
           R2 = R2;
           R1 = GHC.IO.BufferedIO.fillReadBuffer0_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c88hD: // global
           I64[Sp - 8] = block_c88hy_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u88hH; else goto c88hz;
       u88hH: // global
           call _c88hy(R1) args: 0, res: 0, upd: 0;
       c88hz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c88hy() //  [R1]
         { info_tbl: [(c88hy,
                       label: block_c88hy_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c88hy: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.758299808 UTC

[section ""data" . GHC.IO.BufferedIO.emptyWriteBuffer_closure" {
     GHC.IO.BufferedIO.emptyWriteBuffer_closure:
         const GHC.IO.BufferedIO.emptyWriteBuffer_info;
 },
 GHC.IO.BufferedIO.emptyWriteBuffer_entry() //  [R2]
         { info_tbl: [(c88hZ,
                       label: GHC.IO.BufferedIO.emptyWriteBuffer_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c88hZ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c88i0; else goto c88i1;
       c88i0: // global
           R2 = R2;
           R1 = GHC.IO.BufferedIO.emptyWriteBuffer_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c88i1: // global
           I64[Sp - 8] = block_c88hW_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u88i5; else goto c88hX;
       u88i5: // global
           call _c88hW(R1) args: 0, res: 0, upd: 0;
       c88hX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c88hW() //  [R1]
         { info_tbl: [(c88hW,
                       label: block_c88hW_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c88hW: // global
           R1 = P64[R1 + 31];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.770793761 UTC

[section ""data" . GHC.IO.BufferedIO.flushWriteBuffer_closure" {
     GHC.IO.BufferedIO.flushWriteBuffer_closure:
         const GHC.IO.BufferedIO.flushWriteBuffer_info;
 },
 GHC.IO.BufferedIO.flushWriteBuffer_entry() //  [R2]
         { info_tbl: [(c88in,
                       label: GHC.IO.BufferedIO.flushWriteBuffer_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c88in: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c88io; else goto c88ip;
       c88io: // global
           R2 = R2;
           R1 = GHC.IO.BufferedIO.flushWriteBuffer_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c88ip: // global
           I64[Sp - 8] = block_c88ik_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u88it; else goto c88il;
       u88it: // global
           call _c88ik(R1) args: 0, res: 0, upd: 0;
       c88il: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c88ik() //  [R1]
         { info_tbl: [(c88ik,
                       label: block_c88ik_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c88ik: // global
           R1 = P64[R1 + 39];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.776260063 UTC

[section ""data" . GHC.IO.BufferedIO.flushWriteBuffer0_closure" {
     GHC.IO.BufferedIO.flushWriteBuffer0_closure:
         const GHC.IO.BufferedIO.flushWriteBuffer0_info;
 },
 GHC.IO.BufferedIO.flushWriteBuffer0_entry() //  [R2]
         { info_tbl: [(c88iL,
                       label: GHC.IO.BufferedIO.flushWriteBuffer0_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c88iL: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c88iM; else goto c88iN;
       c88iM: // global
           R2 = R2;
           R1 = GHC.IO.BufferedIO.flushWriteBuffer0_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c88iN: // global
           I64[Sp - 8] = block_c88iI_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u88iR; else goto c88iJ;
       u88iR: // global
           call _c88iI(R1) args: 0, res: 0, upd: 0;
       c88iJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c88iI() //  [R1]
         { info_tbl: [(c88iI,
                       label: block_c88iI_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c88iI: // global
           R1 = P64[R1 + 47];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.782007953 UTC

[section ""data" . $dmemptyWriteBuffer1_r87Lu_closure" {
     $dmemptyWriteBuffer1_r87Lu_closure:
         const $dmemptyWriteBuffer1_r87Lu_info;
 },
 sat_s88ey_entry() //  [R1]
         { info_tbl: [(c88jd,
                       label: sat_s88ey_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c88jd: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c88jh; else goto c88ji;
       c88jh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c88ji: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c88ja_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u88jm; else goto c88jb;
       u88jm: // global
           call _c88ja(R1) args: 0, res: 0, upd: 0;
       c88jb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c88ja() //  [R1]
         { info_tbl: [(c88ja,
                       label: block_c88ja_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c88ja: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c88jl; else goto c88jk;
       c88jl: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c88jk: // global
           _s88et::P64 = P64[R1 + 7];
           _s88es::I64 = I64[R1 + 23];
           _s88ev::I64 = I64[R1 + 31];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _s88et::P64;
           P64[Hp - 32] = GHC.IO.Buffer.WriteBuffer_closure+2;
           I64[Hp - 24] = _s88es::I64;
           I64[Hp - 16] = _s88ev::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           R1 = Hp - 47;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 $dmemptyWriteBuffer1_r87Lu_entry() //  [R2, R3, R4]
         { info_tbl: [(c88jn,
                       label: $dmemptyWriteBuffer1_r87Lu_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c88jn: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c88jr; else goto c88jq;
       c88jr: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = $dmemptyWriteBuffer1_r87Lu_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c88jq: // global
           I64[Hp - 16] = sat_s88ey_info;
           P64[Hp] = R4;
           R1 = Hp - 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.789890715 UTC

[section ""data" . GHC.IO.BufferedIO.$dmemptyWriteBuffer_closure" {
     GHC.IO.BufferedIO.$dmemptyWriteBuffer_closure:
         const GHC.IO.BufferedIO.$dmemptyWriteBuffer_info;
 },
 GHC.IO.BufferedIO.$dmemptyWriteBuffer_entry() //  [R2, R3, R4]
         { info_tbl: [(c88jQ,
                       label: GHC.IO.BufferedIO.$dmemptyWriteBuffer_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c88jQ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call $dmemptyWriteBuffer1_r87Lu_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.794196043 UTC

[section ""data" . GHC.IO.BufferedIO.$wreadBuf_closure" {
     GHC.IO.BufferedIO.$wreadBuf_closure:
         const GHC.IO.BufferedIO.$wreadBuf_info;
 },
 GHC.IO.BufferedIO.$wreadBuf_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c88jY: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.IO.BufferedIO.$wreadBuf_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2,
                                                  R1) args: 32, res: 0, upd: 8;
     }
 },
 sat_s88eT_entry() //  [R1]
         { info_tbl: [(c88kk,
                       label: sat_s88eT_info
                       rep:HeapRep 3 ptrs 4 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c88kk: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c88kr; else goto c88ks;
       c88kr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c88ks: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 72] = block_c88kh_info;
           _s88eC::P64 = P64[R1 + 16];
           _s88eD::P64 = P64[R1 + 24];
           _s88eB::I64 = I64[R1 + 40];
           _s88eE::I64 = I64[R1 + 48];
           _s88eF::I64 = I64[R1 + 56];
           _s88eG::I64 = I64[R1 + 64];
           R1 = P64[R1 + 32];
           I64[Sp - 64] = _s88eB::I64;
           P64[Sp - 56] = _s88eC::P64;
           P64[Sp - 48] = _s88eD::P64;
           I64[Sp - 40] = _s88eE::I64;
           I64[Sp - 32] = _s88eF::I64;
           I64[Sp - 24] = _s88eG::I64;
           Sp = Sp - 72;
           if (R1 & 7 != 0) goto u88kw; else goto c88ki;
       u88kw: // global
           call _c88kh(R1) args: 0, res: 0, upd: 0;
       c88ki: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c88kh() //  [R1]
         { info_tbl: [(c88kh,
                       label: block_c88kh_info
                       rep:StackRep [True, False, False, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c88kh: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c88kv; else goto c88ku;
       c88kv: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c88ku: // global
           _s88eS::I64 = I64[Sp + 48] + I64[R1 + 7];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 24];
           I64[Hp - 24] = I64[Sp + 8];
           I64[Hp - 16] = I64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = _s88eS::I64;
           R1 = Hp - 47;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.IO.BufferedIO.$wreadBuf_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c88kx,
                       label: GHC.IO.BufferedIO.$wreadBuf_info
                       rep:HeapRep static {
                             Fun {arity: 9
                                  fun_type: ArgGen [False, False, True, False, False, True, True,
                                                    True]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c88kx: // global
           _s88eD::P64 = R6;
           _s88eC::P64 = R5;
           _s88eB::I64 = R4;
           _s88eA::P64 = R3;
           _s88ez::P64 = R2;
           if ((Sp + -64) < SpLim) (likely: False) goto c88kz; else goto c88kA;
       c88kA: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c88kC; else goto c88kB;
       c88kC: // global
           HpAlloc = 32;
           goto c88kz;
       c88kz: // global
           R1 = GHC.IO.BufferedIO.$wreadBuf_closure;
           P64[Sp - 40] = _s88ez::P64;
           P64[Sp - 32] = _s88eA::P64;
           I64[Sp - 24] = _s88eB::I64;
           P64[Sp - 16] = _s88eC::P64;
           P64[Sp - 8] = _s88eD::P64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       c88kB: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           _s88eG::I64 = I64[Sp + 16];
           I64[Hp - 16] = I64[Sp] - _s88eG::I64;
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s88eB::I64 + _s88eG::I64;
           I64[Sp - 32] = block_c88ka_info;
           R2 = _s88ez::P64;
           I64[Sp - 64] = stg_ap_pppv_info;
           P64[Sp - 56] = _s88eA::P64;
           P64[Sp - 48] = Hp - 7;
           P64[Sp - 40] = Hp - 23;
           I64[Sp - 24] = _s88eB::I64;
           P64[Sp - 16] = _s88eC::P64;
           P64[Sp - 8] = _s88eD::P64;
           Sp = Sp - 64;
           call GHC.IO.Device.read_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 _c88ka() //  [R1]
         { info_tbl: [(c88ka,
                       label: block_c88ka_info
                       rep:StackRep [True, False, False, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c88ka: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c88kF; else goto c88kE;
       c88kF: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c88kE: // global
           _s88eB::I64 = I64[Sp + 8];
           _s88eC::P64 = P64[Sp + 16];
           _s88eD::P64 = P64[Sp + 24];
           _s88eE::I64 = I64[Sp + 32];
           _s88eF::I64 = I64[Sp + 40];
           _s88eG::I64 = I64[Sp + 48];
           call MO_Touch(_s88eC::P64);
           I64[Hp - 88] = sat_s88eT_info;
           P64[Hp - 72] = _s88eC::P64;
           P64[Hp - 64] = _s88eD::P64;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = _s88eB::I64;
           I64[Hp - 40] = _s88eE::I64;
           I64[Hp - 32] = _s88eF::I64;
           I64[Hp - 24] = _s88eG::I64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 88;
           R1 = Hp - 15;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.808041369 UTC

[section ""data" . GHC.IO.BufferedIO.readBuf1_closure" {
     GHC.IO.BufferedIO.readBuf1_closure:
         const GHC.IO.BufferedIO.readBuf1_info;
 },
 GHC.IO.BufferedIO.readBuf1_entry() //  [R2, R3, R4]
         { info_tbl: [(c88lu,
                       label: GHC.IO.BufferedIO.readBuf1_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c88lu: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c88lv; else goto c88lw;
       c88lv: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.BufferedIO.readBuf1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c88lw: // global
           I64[Sp - 24] = block_c88lr_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u88lA; else goto c88ls;
       u88lA: // global
           call _c88lr(R1) args: 0, res: 0, upd: 0;
       c88ls: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c88lr() //  [R1]
         { info_tbl: [(c88lr,
                       label: block_c88lr_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c88lr: // global
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = I64[R1 + 23];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           I64[Sp] = I64[R1 + 31];
           I64[Sp + 8] = I64[R1 + 39];
           I64[Sp + 16] = I64[R1 + 47];
           call GHC.IO.BufferedIO.$wreadBuf_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 32, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.813973111 UTC

[section ""data" . GHC.IO.BufferedIO.readBuf_closure" {
     GHC.IO.BufferedIO.readBuf_closure:
         const GHC.IO.BufferedIO.readBuf_info;
 },
 GHC.IO.BufferedIO.readBuf_entry() //  [R2, R3, R4]
         { info_tbl: [(c88lS,
                       label: GHC.IO.BufferedIO.readBuf_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c88lS: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.IO.BufferedIO.readBuf1_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.818449434 UTC

[section ""data" . GHC.IO.BufferedIO.$wreadBufNonBlocking_closure" {
     GHC.IO.BufferedIO.$wreadBufNonBlocking_closure:
         const GHC.IO.BufferedIO.$wreadBufNonBlocking_info;
 },
 GHC.IO.BufferedIO.$wreadBufNonBlocking_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c88m0: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.IO.BufferedIO.$wreadBufNonBlocking_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2,
                                                             R1) args: 32, res: 0, upd: 8;
     }
 },
 sat_s88fu_entry() //  [R1]
         { info_tbl: [(c88ms,
                       label: sat_s88fu_info
                       rep:HeapRep 3 ptrs 4 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c88ms: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c88mz; else goto c88mA;
       c88mz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c88mA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 72] = block_c88mp_info;
           _s88f9::P64 = P64[R1 + 16];
           _s88fa::P64 = P64[R1 + 24];
           _s88f8::I64 = I64[R1 + 40];
           _s88fb::I64 = I64[R1 + 48];
           _s88fc::I64 = I64[R1 + 56];
           _s88fd::I64 = I64[R1 + 64];
           R1 = P64[R1 + 32];
           I64[Sp - 64] = _s88f8::I64;
           P64[Sp - 56] = _s88f9::P64;
           P64[Sp - 48] = _s88fa::P64;
           I64[Sp - 40] = _s88fb::I64;
           I64[Sp - 32] = _s88fc::I64;
           I64[Sp - 24] = _s88fd::I64;
           Sp = Sp - 72;
           if (R1 & 7 != 0) goto u88mE; else goto c88mq;
       u88mE: // global
           call _c88mp(R1) args: 0, res: 0, upd: 0;
       c88mq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c88mp() //  [R1]
         { info_tbl: [(c88mp,
                       label: block_c88mp_info
                       rep:StackRep [True, False, False, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c88mp: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c88mD; else goto c88mC;
       c88mD: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c88mC: // global
           _s88ft::I64 = I64[Sp + 48] + I64[R1 + 7];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 24];
           I64[Hp - 24] = I64[Sp + 8];
           I64[Hp - 16] = I64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = _s88ft::I64;
           R1 = Hp - 47;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.IO.BufferedIO.$wreadBufNonBlocking_entry() //  [R2, R3, R4, R5,
                                                     R6]
         { info_tbl: [(c88mF,
                       label: GHC.IO.BufferedIO.$wreadBufNonBlocking_info
                       rep:HeapRep static {
                             Fun {arity: 9
                                  fun_type: ArgGen [False, False, True, False, False, True, True,
                                                    True]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c88mF: // global
           _s88fa::P64 = R6;
           _s88f9::P64 = R5;
           _s88f8::I64 = R4;
           _s88f7::P64 = R3;
           _s88f6::P64 = R2;
           if ((Sp + -64) < SpLim) (likely: False) goto c88mG; else goto c88mH;
       c88mH: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c88mJ; else goto c88mI;
       c88mJ: // global
           HpAlloc = 32;
           goto c88mG;
       c88mG: // global
           R1 = GHC.IO.BufferedIO.$wreadBufNonBlocking_closure;
           P64[Sp - 40] = _s88f6::P64;
           P64[Sp - 32] = _s88f7::P64;
           I64[Sp - 24] = _s88f8::I64;
           P64[Sp - 16] = _s88f9::P64;
           P64[Sp - 8] = _s88fa::P64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       c88mI: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           _s88fd::I64 = I64[Sp + 16];
           I64[Hp - 16] = I64[Sp] - _s88fd::I64;
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s88f8::I64 + _s88fd::I64;
           I64[Sp - 32] = block_c88mc_info;
           R2 = _s88f6::P64;
           I64[Sp - 64] = stg_ap_pppv_info;
           P64[Sp - 56] = _s88f7::P64;
           P64[Sp - 48] = Hp - 7;
           P64[Sp - 40] = Hp - 23;
           I64[Sp - 24] = _s88f8::I64;
           P64[Sp - 16] = _s88f9::P64;
           P64[Sp - 8] = _s88fa::P64;
           Sp = Sp - 64;
           call GHC.IO.Device.readNonBlocking_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 _c88mc() //  [R1]
         { info_tbl: [(c88mc,
                       label: block_c88mc_info
                       rep:StackRep [True, False, False, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c88mc: // global
           call MO_Touch(P64[Sp + 16]);
           I64[Sp] = block_c88mf_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u88mZ; else goto c88mg;
       u88mZ: // global
           call _c88mf(R1) args: 0, res: 0, upd: 0;
       c88mg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c88mf() //  [R1]
         { info_tbl: [(c88mf,
                       label: block_c88mf_info
                       rep:StackRep [True, False, False, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c88mf: // global
           _s88f8::I64 = I64[Sp + 8];
           _s88f9::P64 = P64[Sp + 16];
           _s88fa::P64 = P64[Sp + 24];
           _s88fb::I64 = I64[Sp + 32];
           _s88fc::I64 = I64[Sp + 40];
           _s88fd::I64 = I64[Sp + 48];
           if (R1 & 7 == 1) goto c88mP; else goto c88mU;
       c88mP: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c88mS; else goto c88mR;
       c88mS: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c88mR: // global
           I64[Hp - 72] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 64] = _s88f9::P64;
           P64[Hp - 56] = _s88fa::P64;
           I64[Hp - 48] = _s88f8::I64;
           I64[Hp - 40] = _s88fb::I64;
           I64[Hp - 32] = _s88fc::I64;
           I64[Hp - 24] = _s88fd::I64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = GHC.Base.Nothing_closure+1;
           P64[Hp] = Hp - 71;
           R1 = Hp - 15;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c88mU: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c88mX; else goto c88mW;
       c88mX: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c88mW: // global
           _s88fq::P64 = P64[R1 + 6];
           I64[Hp - 88] = sat_s88fu_info;
           P64[Hp - 72] = _s88f9::P64;
           P64[Hp - 64] = _s88fa::P64;
           P64[Hp - 56] = _s88fq::P64;
           I64[Hp - 48] = _s88f8::I64;
           I64[Hp - 40] = _s88fb::I64;
           I64[Hp - 32] = _s88fc::I64;
           I64[Hp - 24] = _s88fd::I64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 88;
           R1 = Hp - 15;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.834942823 UTC

[section ""data" . GHC.IO.BufferedIO.readBufNonBlocking1_closure" {
     GHC.IO.BufferedIO.readBufNonBlocking1_closure:
         const GHC.IO.BufferedIO.readBufNonBlocking1_info;
 },
 GHC.IO.BufferedIO.readBufNonBlocking1_entry() //  [R2, R3, R4]
         { info_tbl: [(c88o1,
                       label: GHC.IO.BufferedIO.readBufNonBlocking1_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c88o1: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c88o2; else goto c88o3;
       c88o2: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.BufferedIO.readBufNonBlocking1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c88o3: // global
           I64[Sp - 24] = block_c88nY_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u88o7; else goto c88nZ;
       u88o7: // global
           call _c88nY(R1) args: 0, res: 0, upd: 0;
       c88nZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c88nY() //  [R1]
         { info_tbl: [(c88nY,
                       label: block_c88nY_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c88nY: // global
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = I64[R1 + 23];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           I64[Sp] = I64[R1 + 31];
           I64[Sp + 8] = I64[R1 + 39];
           I64[Sp + 16] = I64[R1 + 47];
           call GHC.IO.BufferedIO.$wreadBufNonBlocking_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 32, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.840810189 UTC

[section ""data" . GHC.IO.BufferedIO.readBufNonBlocking_closure" {
     GHC.IO.BufferedIO.readBufNonBlocking_closure:
         const GHC.IO.BufferedIO.readBufNonBlocking_info;
 },
 GHC.IO.BufferedIO.readBufNonBlocking_entry() //  [R2, R3, R4]
         { info_tbl: [(c88op,
                       label: GHC.IO.BufferedIO.readBufNonBlocking_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c88op: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.IO.BufferedIO.readBufNonBlocking1_entry(R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.844842757 UTC

[section ""data" . GHC.IO.BufferedIO.$wwriteBuf_closure" {
     GHC.IO.BufferedIO.$wwriteBuf_closure:
         const GHC.IO.BufferedIO.$wwriteBuf_info;
 },
 GHC.IO.BufferedIO.$wwriteBuf_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c88ox: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.IO.BufferedIO.$wwriteBuf_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2,
                                                   R1) args: 32, res: 0, upd: 8;
     }
 },
 GHC.IO.BufferedIO.$wwriteBuf_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c88oD,
                       label: GHC.IO.BufferedIO.$wwriteBuf_info
                       rep:HeapRep static {
                             Fun {arity: 9
                                  fun_type: ArgGen [False, False, True, False, False, True, True,
                                                    True]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c88oD: // global
           _s88fL::P64 = R6;
           _s88fK::P64 = R5;
           _s88fJ::I64 = R4;
           _s88fI::P64 = R3;
           _s88fH::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto c88oO; else goto c88oP;
       c88oP: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c88oR; else goto c88oQ;
       c88oR: // global
           HpAlloc = 32;
           goto c88oO;
       c88oO: // global
           R1 = GHC.IO.BufferedIO.$wwriteBuf_closure;
           P64[Sp - 40] = _s88fH::P64;
           P64[Sp - 32] = _s88fI::P64;
           I64[Sp - 24] = _s88fJ::I64;
           P64[Sp - 16] = _s88fK::P64;
           P64[Sp - 8] = _s88fL::P64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       c88oQ: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           _s88fN::I64 = I64[Sp + 8];
           I64[Hp - 16] = I64[Sp + 16] - _s88fN::I64;
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s88fJ::I64 + _s88fN::I64;
           I64[Sp - 16] = block_c88oK_info;
           R2 = _s88fH::P64;
           I64[Sp - 48] = stg_ap_pppv_info;
           P64[Sp - 40] = _s88fI::P64;
           P64[Sp - 32] = Hp - 7;
           P64[Sp - 24] = Hp - 23;
           P64[Sp - 8] = _s88fL::P64;
           P64[Sp + 8] = _s88fK::P64;
           I64[Sp + 16] = _s88fJ::I64;
           Sp = Sp - 48;
           call GHC.IO.Device.write_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 _c88oK() //  [R1]
         { info_tbl: [(c88oK,
                       label: block_c88oK_info
                       rep:StackRep [False, True, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c88oK: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c88oU; else goto c88oT;
       c88oU: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c88oT: // global
           _s88fJ::I64 = I64[Sp + 32];
           _s88fK::P64 = P64[Sp + 24];
           _s88fL::P64 = P64[Sp + 8];
           _s88fM::I64 = I64[Sp + 16];
           call MO_Touch(_s88fK::P64);
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _s88fK::P64;
           P64[Hp - 32] = _s88fL::P64;
           I64[Hp - 24] = _s88fJ::I64;
           I64[Hp - 16] = _s88fM::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           R1 = Hp - 47;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.853840924 UTC

[section ""data" . GHC.IO.BufferedIO.writeBuf1_closure" {
     GHC.IO.BufferedIO.writeBuf1_closure:
         const GHC.IO.BufferedIO.writeBuf1_info;
 },
 GHC.IO.BufferedIO.writeBuf1_entry() //  [R2, R3, R4]
         { info_tbl: [(c88po,
                       label: GHC.IO.BufferedIO.writeBuf1_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c88po: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c88pp; else goto c88pq;
       c88pp: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.BufferedIO.writeBuf1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c88pq: // global
           I64[Sp - 24] = block_c88pl_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u88pu; else goto c88pm;
       u88pu: // global
           call _c88pl(R1) args: 0, res: 0, upd: 0;
       c88pm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c88pl() //  [R1]
         { info_tbl: [(c88pl,
                       label: block_c88pl_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c88pl: // global
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = I64[R1 + 23];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           I64[Sp] = I64[R1 + 31];
           I64[Sp + 8] = I64[R1 + 39];
           I64[Sp + 16] = I64[R1 + 47];
           call GHC.IO.BufferedIO.$wwriteBuf_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 32, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.859655479 UTC

[section ""data" . GHC.IO.BufferedIO.writeBuf_closure" {
     GHC.IO.BufferedIO.writeBuf_closure:
         const GHC.IO.BufferedIO.writeBuf_info;
 },
 GHC.IO.BufferedIO.writeBuf_entry() //  [R2, R3, R4]
         { info_tbl: [(c88pM,
                       label: GHC.IO.BufferedIO.writeBuf_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c88pM: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.IO.BufferedIO.writeBuf1_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.864108078 UTC

[section ""data" . GHC.IO.BufferedIO.$wwriteBufNonBlocking_closure" {
     GHC.IO.BufferedIO.$wwriteBufNonBlocking_closure:
         const GHC.IO.BufferedIO.$wwriteBufNonBlocking_info;
 },
 GHC.IO.BufferedIO.$wwriteBufNonBlocking_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c88pU: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.IO.BufferedIO.$wwriteBufNonBlocking_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2,
                                                              R1) args: 32, res: 0, upd: 8;
     }
 },
 sat_s88gv_entry() //  [R1]
         { info_tbl: [(c88qg,
                       label: sat_s88gv_info
                       rep:HeapRep 3 ptrs 4 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c88qg: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c88qh; else goto c88qi;
       c88qh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c88qi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 72] = block_c88qd_info;
           _s88gd::P64 = P64[R1 + 16];
           _s88ge::P64 = P64[R1 + 24];
           _s88gc::I64 = I64[R1 + 40];
           _s88gf::I64 = I64[R1 + 48];
           _s88gg::I64 = I64[R1 + 56];
           _s88gh::I64 = I64[R1 + 64];
           R1 = P64[R1 + 32];
           I64[Sp - 64] = _s88gc::I64;
           P64[Sp - 56] = _s88gd::P64;
           P64[Sp - 48] = _s88ge::P64;
           I64[Sp - 40] = _s88gf::I64;
           I64[Sp - 32] = _s88gg::I64;
           I64[Sp - 24] = _s88gh::I64;
           Sp = Sp - 72;
           if (R1 & 7 != 0) goto u88qA; else goto c88qe;
       u88qA: // global
           call _c88qd(R1) args: 0, res: 0, upd: 0;
       c88qe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c88qd() //  [R1]
         { info_tbl: [(c88qd,
                       label: block_c88qd_info
                       rep:StackRep [True, False, False, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c88qd: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c88qn; else goto c88qm;
       c88qn: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c88qm: // global
           _s88gc::I64 = I64[Sp + 8];
           _s88gd::P64 = P64[Sp + 16];
           _s88ge::P64 = P64[Sp + 24];
           _s88gf::I64 = I64[Sp + 32];
           _s88gh::I64 = I64[Sp + 48];
           _s88gt::I64 = I64[Sp + 40] + I64[R1 + 7];
           if (_s88gt::I64 == _s88gh::I64) goto c88qz; else goto c88qw;
       c88qz: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _s88gd::P64;
           P64[Hp - 32] = _s88ge::P64;
           I64[Hp - 24] = _s88gc::I64;
           I64[Hp - 16] = _s88gf::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           R1 = Hp - 47;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c88qw: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _s88gd::P64;
           P64[Hp - 32] = _s88ge::P64;
           I64[Hp - 24] = _s88gc::I64;
           I64[Hp - 16] = _s88gf::I64;
           I64[Hp - 8] = _s88gt::I64;
           I64[Hp] = _s88gh::I64;
           R1 = Hp - 47;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.IO.BufferedIO.$wwriteBufNonBlocking_entry() //  [R2, R3, R4,
                                                      R5, R6]
         { info_tbl: [(c88qB,
                       label: GHC.IO.BufferedIO.$wwriteBufNonBlocking_info
                       rep:HeapRep static {
                             Fun {arity: 9
                                  fun_type: ArgGen [False, False, True, False, False, True, True,
                                                    True]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c88qB: // global
           _s88ge::P64 = R6;
           _s88gd::P64 = R5;
           _s88gc::I64 = R4;
           _s88gb::P64 = R3;
           _s88ga::P64 = R2;
           if ((Sp + -64) < SpLim) (likely: False) goto c88qD; else goto c88qE;
       c88qE: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c88qG; else goto c88qF;
       c88qG: // global
           HpAlloc = 32;
           goto c88qD;
       c88qD: // global
           R1 = GHC.IO.BufferedIO.$wwriteBufNonBlocking_closure;
           P64[Sp - 40] = _s88ga::P64;
           P64[Sp - 32] = _s88gb::P64;
           I64[Sp - 24] = _s88gc::I64;
           P64[Sp - 16] = _s88gd::P64;
           P64[Sp - 8] = _s88ge::P64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       c88qF: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           _s88gg::I64 = I64[Sp + 8];
           I64[Hp - 16] = I64[Sp + 16] - _s88gg::I64;
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s88gc::I64 + _s88gg::I64;
           I64[Sp - 32] = block_c88q6_info;
           R2 = _s88ga::P64;
           I64[Sp - 64] = stg_ap_pppv_info;
           P64[Sp - 56] = _s88gb::P64;
           P64[Sp - 48] = Hp - 7;
           P64[Sp - 40] = Hp - 23;
           I64[Sp - 24] = _s88gc::I64;
           P64[Sp - 16] = _s88gd::P64;
           P64[Sp - 8] = _s88ge::P64;
           Sp = Sp - 64;
           call GHC.IO.Device.writeNonBlocking_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 _c88q6() //  [R1]
         { info_tbl: [(c88q6,
                       label: block_c88q6_info
                       rep:StackRep [True, False, False, True, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c88q6: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c88qJ; else goto c88qI;
       c88qJ: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c88qI: // global
           _s88gc::I64 = I64[Sp + 8];
           _s88gd::P64 = P64[Sp + 16];
           _s88ge::P64 = P64[Sp + 24];
           _s88gf::I64 = I64[Sp + 32];
           _s88gg::I64 = I64[Sp + 40];
           _s88gh::I64 = I64[Sp + 48];
           call MO_Touch(_s88gd::P64);
           I64[Hp - 88] = sat_s88gv_info;
           P64[Hp - 72] = _s88gd::P64;
           P64[Hp - 64] = _s88ge::P64;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = _s88gc::I64;
           I64[Hp - 40] = _s88gf::I64;
           I64[Hp - 32] = _s88gg::I64;
           I64[Hp - 24] = _s88gh::I64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 88;
           R1 = Hp - 15;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.878113336 UTC

[section ""data" . GHC.IO.BufferedIO.writeBufNonBlocking1_closure" {
     GHC.IO.BufferedIO.writeBufNonBlocking1_closure:
         const GHC.IO.BufferedIO.writeBufNonBlocking1_info;
 },
 GHC.IO.BufferedIO.writeBufNonBlocking1_entry() //  [R2, R3, R4]
         { info_tbl: [(c88rv,
                       label: GHC.IO.BufferedIO.writeBufNonBlocking1_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c88rv: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c88rw; else goto c88rx;
       c88rw: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.BufferedIO.writeBufNonBlocking1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c88rx: // global
           I64[Sp - 24] = block_c88rs_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u88rB; else goto c88rt;
       u88rB: // global
           call _c88rs(R1) args: 0, res: 0, upd: 0;
       c88rt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c88rs() //  [R1]
         { info_tbl: [(c88rs,
                       label: block_c88rs_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c88rs: // global
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = I64[R1 + 23];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           I64[Sp] = I64[R1 + 31];
           I64[Sp + 8] = I64[R1 + 39];
           I64[Sp + 16] = I64[R1 + 47];
           call GHC.IO.BufferedIO.$wwriteBufNonBlocking_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 32, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.884075134 UTC

[section ""data" . GHC.IO.BufferedIO.writeBufNonBlocking_closure" {
     GHC.IO.BufferedIO.writeBufNonBlocking_closure:
         const GHC.IO.BufferedIO.writeBufNonBlocking_info;
 },
 GHC.IO.BufferedIO.writeBufNonBlocking_entry() //  [R2, R3, R4]
         { info_tbl: [(c88rT,
                       label: GHC.IO.BufferedIO.writeBufNonBlocking_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c88rT: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.IO.BufferedIO.writeBufNonBlocking1_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.887847383 UTC

[section ""cstring" . GHC.IO.BufferedIO.$trModule4_bytes" {
     GHC.IO.BufferedIO.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.889574236 UTC

[section ""data" . GHC.IO.BufferedIO.$trModule3_closure" {
     GHC.IO.BufferedIO.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.BufferedIO.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.891269077 UTC

[section ""cstring" . GHC.IO.BufferedIO.$trModule2_bytes" {
     GHC.IO.BufferedIO.$trModule2_bytes:
         I8[] [71,72,67,46,73,79,46,66,117,102,102,101,114,101,100,73,79]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.892946988 UTC

[section ""data" . GHC.IO.BufferedIO.$trModule1_closure" {
     GHC.IO.BufferedIO.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.BufferedIO.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.894606497 UTC

[section ""data" . GHC.IO.BufferedIO.$trModule_closure" {
     GHC.IO.BufferedIO.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.IO.BufferedIO.$trModule3_closure+1;
         const GHC.IO.BufferedIO.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.896368724 UTC

[section ""data" . $krep_r87Lv_closure" {
     $krep_r87Lv_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.898185326 UTC

[section ""data" . $krep1_r87Lw_closure" {
     $krep1_r87Lw_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Word.$tcWord8_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.899977526 UTC

[section ""data" . $krep2_r87Lx_closure" {
     $krep2_r87Lx_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Buffer.$tcBufferState_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.901766091 UTC

[section ""data" . $krep3_r87Ly_closure" {
     $krep3_r87Ly_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcConstraint_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.903532695 UTC

[section ""data" . $krep4_r87Lz_closure" {
     $krep4_r87Lz_closure:
         const :_con_info;
         const $krep_r87Lv_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.905193026 UTC

[section ""data" . $krep5_r87LA_closure" {
     $krep5_r87LA_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Base.$tcMaybe_closure;
         const $krep4_r87Lz_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.907088067 UTC

[section ""data" . $krep6_r87LB_closure" {
     $krep6_r87LB_closure:
         const :_con_info;
         const $krep1_r87Lw_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.908843238 UTC

[section ""data" . $krep7_r87LC_closure" {
     $krep7_r87LC_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Buffer.$tcBuffer_closure;
         const $krep6_r87LB_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.910634029 UTC

[section ""data" . $krep8_r87LD_closure" {
     $krep8_r87LD_closure:
         const :_con_info;
         const $krep7_r87LC_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.912801729 UTC

[section ""data" . $krep9_r87LE_closure" {
     $krep9_r87LE_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep8_r87LD_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.91466938 UTC

[section ""data" . $krep10_r87LF_closure" {
     $krep10_r87LF_closure:
         const :_con_info;
         const $krep_r87Lv_closure+1;
         const $krep8_r87LD_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.916401278 UTC

[section ""data" . $krep11_r87LG_closure" {
     $krep11_r87LG_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc(,)_closure;
         const $krep10_r87LF_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.918117654 UTC

[section ""data" . $krep12_r87LH_closure" {
     $krep12_r87LH_closure:
         const :_con_info;
         const $krep11_r87LG_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.919747145 UTC

[section ""data" . $krep13_r87LI_closure" {
     $krep13_r87LI_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep12_r87LH_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.921540116 UTC

[section ""data" . $krep14_r87LJ_closure" {
     $krep14_r87LJ_closure:
         const :_con_info;
         const $krep5_r87LA_closure+1;
         const $krep8_r87LD_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.923252542 UTC

[section ""data" . $krep15_r87LK_closure" {
     $krep15_r87LK_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc(,)_closure;
         const $krep14_r87LJ_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.924929662 UTC

[section ""data" . $krep16_r87LL_closure" {
     $krep16_r87LL_closure:
         const :_con_info;
         const $krep15_r87LK_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.926775546 UTC

[section ""data" . $krep17_r87LM_closure" {
     $krep17_r87LM_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep16_r87LL_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.928446981 UTC

[section ""data" . $krep18_r87LN_closure" {
     $krep18_r87LN_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r87Lx_closure+1;
         const $krep9_r87LE_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.930243472 UTC

[section ""data" . $krep19_r87LO_closure" {
     $krep19_r87LO_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep7_r87LC_closure+1;
         const $krep9_r87LE_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.931929792 UTC

[section ""data" . $krep20_r87LP_closure" {
     $krep20_r87LP_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep7_r87LC_closure+1;
         const $krep13_r87LI_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.933713139 UTC

[section ""data" . $krep21_r87LQ_closure" {
     $krep21_r87LQ_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep7_r87LC_closure+1;
         const $krep17_r87LM_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.935430442 UTC

[section ""data" . GHC.IO.BufferedIO.$tcBufferedIO1_closure" {
     GHC.IO.BufferedIO.$tcBufferedIO1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Types.krep$*_closure;
         const $krep3_r87Ly_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.937110196 UTC

[section ""data" . $krep22_r87LR_closure" {
     $krep22_r87LR_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.939357332 UTC

[section ""data" . $krep23_r87LS_closure" {
     $krep23_r87LS_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep22_r87LR_closure+2;
         const $krep21_r87LQ_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.941049313 UTC

[section ""data" . $krep24_r87LT_closure" {
     $krep24_r87LT_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep22_r87LR_closure+2;
         const $krep20_r87LP_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.942861862 UTC

[section ""data" . $krep25_r87LU_closure" {
     $krep25_r87LU_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep22_r87LR_closure+2;
         const $krep19_r87LO_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.944493953 UTC

[section ""data" . $krep26_r87LV_closure" {
     $krep26_r87LV_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep22_r87LR_closure+2;
         const $krep18_r87LN_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.946306336 UTC

[section ""cstring" . GHC.IO.BufferedIO.$tcBufferedIO3_bytes" {
     GHC.IO.BufferedIO.$tcBufferedIO3_bytes:
         I8[] [66,117,102,102,101,114,101,100,73,79]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.947913888 UTC

[section ""data" . GHC.IO.BufferedIO.$tcBufferedIO2_closure" {
     GHC.IO.BufferedIO.$tcBufferedIO2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.BufferedIO.$tcBufferedIO3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.949693627 UTC

[section ""data" . GHC.IO.BufferedIO.$tcBufferedIO_closure" {
     GHC.IO.BufferedIO.$tcBufferedIO_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.BufferedIO.$trModule_closure+1;
         const GHC.IO.BufferedIO.$tcBufferedIO2_closure+1;
         const GHC.IO.BufferedIO.$tcBufferedIO1_closure+4;
         const 17350223970197035200;
         const 12646105049483783716;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.951560345 UTC

[section ""data" . $krep27_r87LW_closure" {
     $krep27_r87LW_closure:
         const :_con_info;
         const $krep22_r87LR_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.953329567 UTC

[section ""data" . $krep28_r87LX_closure" {
     $krep28_r87LX_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.BufferedIO.$tcBufferedIO_closure+1;
         const $krep27_r87LW_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.954980899 UTC

[section ""data" . $krep29_r87LY_closure" {
     $krep29_r87LY_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep24_r87LT_closure+4;
         const $krep28_r87LX_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.956752878 UTC

[section ""data" . $krep30_r87LZ_closure" {
     $krep30_r87LZ_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep25_r87LU_closure+4;
         const $krep29_r87LY_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.958516202 UTC

[section ""data" . $krep31_r87M0_closure" {
     $krep31_r87M0_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep25_r87LU_closure+4;
         const $krep30_r87LZ_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.960250313 UTC

[section ""data" . $krep32_r87M1_closure" {
     $krep32_r87M1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep23_r87LS_closure+4;
         const $krep31_r87M0_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.962031318 UTC

[section ""data" . $krep33_r87M2_closure" {
     $krep33_r87M2_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep24_r87LT_closure+4;
         const $krep32_r87M1_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.964207423 UTC

[section ""data" . GHC.IO.BufferedIO.$tc'C:BufferedIO1_closure" {
     GHC.IO.BufferedIO.$tc'C:BufferedIO1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep26_r87LV_closure+4;
         const $krep33_r87M2_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.965937155 UTC

[section ""cstring" . GHC.IO.BufferedIO.$tc'C:BufferedIO3_bytes" {
     GHC.IO.BufferedIO.$tc'C:BufferedIO3_bytes:
         I8[] [39,67,58,66,117,102,102,101,114,101,100,73,79]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.96760335 UTC

[section ""data" . GHC.IO.BufferedIO.$tc'C:BufferedIO2_closure" {
     GHC.IO.BufferedIO.$tc'C:BufferedIO2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.BufferedIO.$tc'C:BufferedIO3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.969187252 UTC

[section ""data" . GHC.IO.BufferedIO.$tc'C:BufferedIO_closure" {
     GHC.IO.BufferedIO.$tc'C:BufferedIO_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.BufferedIO.$trModule_closure+1;
         const GHC.IO.BufferedIO.$tc'C:BufferedIO2_closure+1;
         const GHC.IO.BufferedIO.$tc'C:BufferedIO1_closure+4;
         const 14745255964277825469;
         const 12324508286010448901;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.971488228 UTC

[section ""data" . GHC.IO.BufferedIO.C:BufferedIO_closure" {
     GHC.IO.BufferedIO.C:BufferedIO_closure:
         const GHC.IO.BufferedIO.C:BufferedIO_info;
 },
 GHC.IO.BufferedIO.C:BufferedIO_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c88sQ,
                       label: GHC.IO.BufferedIO.C:BufferedIO_info
                       rep:HeapRep static { Fun {arity: 6 fun_type: ArgSpec 26} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c88sQ: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c88sU; else goto c88sT;
       c88sU: // global
           HpAlloc = 56;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.BufferedIO.C:BufferedIO_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       c88sT: // global
           I64[Hp - 48] = GHC.IO.BufferedIO.C:BufferedIO_con_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           P64[Hp - 8] = R6;
           P64[Hp] = P64[Sp];
           R1 = Hp - 47;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.97556978 UTC

[GHC.IO.BufferedIO.C:BufferedIO_con_entry() //  [R1]
         { info_tbl: [(c88t2,
                       label: GHC.IO.BufferedIO.C:BufferedIO_con_info
                       rep:HeapRep 6 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,73,79,46,66,117,102,102,101,114,101,100,73,79,46,67,58,66,117,102,102,101,114,101,100,73,79]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c88t2: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:15.978797428 UTC

[section ""relreadonly" . S88t9_srt" { S88t9_srt:
 }]

