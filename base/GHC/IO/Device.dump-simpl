
==================== Tidy Core ====================
2018-03-16 16:03:08.592827763 UTC

Result size of Tidy Core
  = {terms: 2,795, types: 2,480, coercions: 202, joins: 10/40}

-- RHS size: {terms: 6, types: 56, coercions: 0, joins: 0/0}
ready :: forall a. IODevice a => a -> Bool -> Int -> IO Bool
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SLLLLLLLLLLLLL),U(U,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
 RULES: Built in rule for ready: "Class op ready"]
ready
  = \ (@ a_a80MB) (v_B1 :: IODevice a_a80MB) ->
      case v_B1 of v_B1
      { GHC.IO.Device.C:IODevice v_B2 v_B3 v_B4 v_B5 v_B6 v_B7 v_B8 v_B9
                                 v_Ba v_Bb v_Bc v_Bd v_Be v_Bf ->
      v_B2
      }

-- RHS size: {terms: 6, types: 56, coercions: 0, joins: 0/0}
close :: forall a. IODevice a => a -> IO ()
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LSLLLLLLLLLLLL),U(A,U,A,A,A,A,A,A,A,A,A,A,A,A)>,
 RULES: Built in rule for close: "Class op close"]
close
  = \ (@ a_a80MB) (v_B1 :: IODevice a_a80MB) ->
      case v_B1 of v_B1
      { GHC.IO.Device.C:IODevice v_B2 v_B3 v_B4 v_B5 v_B6 v_B7 v_B8 v_B9
                                 v_Ba v_Bb v_Bc v_Bd v_Be v_Bf ->
      v_B3
      }

-- RHS size: {terms: 6, types: 56, coercions: 0, joins: 0/0}
isTerminal :: forall a. IODevice a => a -> IO Bool
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLSLLLLLLLLLLL),U(A,A,U,A,A,A,A,A,A,A,A,A,A,A)>,
 RULES: Built in rule for isTerminal: "Class op isTerminal"]
isTerminal
  = \ (@ a_a80MB) (v_B1 :: IODevice a_a80MB) ->
      case v_B1 of v_B1
      { GHC.IO.Device.C:IODevice v_B2 v_B3 v_B4 v_B5 v_B6 v_B7 v_B8 v_B9
                                 v_Ba v_Bb v_Bc v_Bd v_Be v_Bf ->
      v_B4
      }

-- RHS size: {terms: 6, types: 56, coercions: 0, joins: 0/0}
isSeekable :: forall a. IODevice a => a -> IO Bool
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLSLLLLLLLLLL),U(A,A,A,U,A,A,A,A,A,A,A,A,A,A)>,
 RULES: Built in rule for isSeekable: "Class op isSeekable"]
isSeekable
  = \ (@ a_a80MB) (v_B1 :: IODevice a_a80MB) ->
      case v_B1 of v_B1
      { GHC.IO.Device.C:IODevice v_B2 v_B3 v_B4 v_B5 v_B6 v_B7 v_B8 v_B9
                                 v_Ba v_Bb v_Bc v_Bd v_Be v_Bf ->
      v_B5
      }

-- RHS size: {terms: 6, types: 56, coercions: 0, joins: 0/0}
seek :: forall a. IODevice a => a -> SeekMode -> Integer -> IO ()
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLSLLLLLLLLL),U(A,A,A,A,U,A,A,A,A,A,A,A,A,A)>,
 RULES: Built in rule for seek: "Class op seek"]
seek
  = \ (@ a_a80MB) (v_B1 :: IODevice a_a80MB) ->
      case v_B1 of v_B1
      { GHC.IO.Device.C:IODevice v_B2 v_B3 v_B4 v_B5 v_B6 v_B7 v_B8 v_B9
                                 v_Ba v_Bb v_Bc v_Bd v_Be v_Bf ->
      v_B6
      }

-- RHS size: {terms: 6, types: 56, coercions: 0, joins: 0/0}
tell :: forall a. IODevice a => a -> IO Integer
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLSLLLLLLLL),U(A,A,A,A,A,U,A,A,A,A,A,A,A,A)>,
 RULES: Built in rule for tell: "Class op tell"]
tell
  = \ (@ a_a80MB) (v_B1 :: IODevice a_a80MB) ->
      case v_B1 of v_B1
      { GHC.IO.Device.C:IODevice v_B2 v_B3 v_B4 v_B5 v_B6 v_B7 v_B8 v_B9
                                 v_Ba v_Bb v_Bc v_Bd v_Be v_Bf ->
      v_B7
      }

-- RHS size: {terms: 6, types: 56, coercions: 0, joins: 0/0}
getSize :: forall a. IODevice a => a -> IO Integer
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLSLLLLLLL),U(A,A,A,A,A,A,U,A,A,A,A,A,A,A)>,
 RULES: Built in rule for getSize: "Class op getSize"]
getSize
  = \ (@ a_a80MB) (v_B1 :: IODevice a_a80MB) ->
      case v_B1 of v_B1
      { GHC.IO.Device.C:IODevice v_B2 v_B3 v_B4 v_B5 v_B6 v_B7 v_B8 v_B9
                                 v_Ba v_Bb v_Bc v_Bd v_Be v_Bf ->
      v_B8
      }

-- RHS size: {terms: 6, types: 56, coercions: 0, joins: 0/0}
setSize :: forall a. IODevice a => a -> Integer -> IO ()
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLSLLLLLL),U(A,A,A,A,A,A,A,U,A,A,A,A,A,A)>,
 RULES: Built in rule for setSize: "Class op setSize"]
setSize
  = \ (@ a_a80MB) (v_B1 :: IODevice a_a80MB) ->
      case v_B1 of v_B1
      { GHC.IO.Device.C:IODevice v_B2 v_B3 v_B4 v_B5 v_B6 v_B7 v_B8 v_B9
                                 v_Ba v_Bb v_Bc v_Bd v_Be v_Bf ->
      v_B9
      }

-- RHS size: {terms: 6, types: 56, coercions: 0, joins: 0/0}
setEcho :: forall a. IODevice a => a -> Bool -> IO ()
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLLSLLLLL),U(A,A,A,A,A,A,A,A,U,A,A,A,A,A)>,
 RULES: Built in rule for setEcho: "Class op setEcho"]
setEcho
  = \ (@ a_a80MB) (v_B1 :: IODevice a_a80MB) ->
      case v_B1 of v_B1
      { GHC.IO.Device.C:IODevice v_B2 v_B3 v_B4 v_B5 v_B6 v_B7 v_B8 v_B9
                                 v_Ba v_Bb v_Bc v_Bd v_Be v_Bf ->
      v_Ba
      }

-- RHS size: {terms: 6, types: 56, coercions: 0, joins: 0/0}
getEcho :: forall a. IODevice a => a -> IO Bool
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLLLSLLLL),U(A,A,A,A,A,A,A,A,A,U,A,A,A,A)>,
 RULES: Built in rule for getEcho: "Class op getEcho"]
getEcho
  = \ (@ a_a80MB) (v_B1 :: IODevice a_a80MB) ->
      case v_B1 of v_B1
      { GHC.IO.Device.C:IODevice v_B2 v_B3 v_B4 v_B5 v_B6 v_B7 v_B8 v_B9
                                 v_Ba v_Bb v_Bc v_Bd v_Be v_Bf ->
      v_Bb
      }

-- RHS size: {terms: 6, types: 56, coercions: 0, joins: 0/0}
setRaw :: forall a. IODevice a => a -> Bool -> IO ()
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLLLLSLLL),U(A,A,A,A,A,A,A,A,A,A,U,A,A,A)>,
 RULES: Built in rule for setRaw: "Class op setRaw"]
setRaw
  = \ (@ a_a80MB) (v_B1 :: IODevice a_a80MB) ->
      case v_B1 of v_B1
      { GHC.IO.Device.C:IODevice v_B2 v_B3 v_B4 v_B5 v_B6 v_B7 v_B8 v_B9
                                 v_Ba v_Bb v_Bc v_Bd v_Be v_Bf ->
      v_Bc
      }

-- RHS size: {terms: 6, types: 56, coercions: 0, joins: 0/0}
devType :: forall a. IODevice a => a -> IO IODeviceType
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLLLLLSLL),U(A,A,A,A,A,A,A,A,A,A,A,U,A,A)>,
 RULES: Built in rule for devType: "Class op devType"]
devType
  = \ (@ a_a80MB) (v_B1 :: IODevice a_a80MB) ->
      case v_B1 of v_B1
      { GHC.IO.Device.C:IODevice v_B2 v_B3 v_B4 v_B5 v_B6 v_B7 v_B8 v_B9
                                 v_Ba v_Bb v_Bc v_Bd v_Be v_Bf ->
      v_Bd
      }

-- RHS size: {terms: 6, types: 56, coercions: 0, joins: 0/0}
dup :: forall a. IODevice a => a -> IO a
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLLLLLLSL),U(A,A,A,A,A,A,A,A,A,A,A,A,U,A)>,
 RULES: Built in rule for dup: "Class op dup"]
dup
  = \ (@ a_a80MB) (v_B1 :: IODevice a_a80MB) ->
      case v_B1 of v_B1
      { GHC.IO.Device.C:IODevice v_B2 v_B3 v_B4 v_B5 v_B6 v_B7 v_B8 v_B9
                                 v_Ba v_Bb v_Bc v_Bd v_Be v_Bf ->
      v_Be
      }

-- RHS size: {terms: 6, types: 56, coercions: 0, joins: 0/0}
dup2 :: forall a. IODevice a => a -> a -> IO a
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLLLLLLLS),U(A,A,A,A,A,A,A,A,A,A,A,A,A,U)>,
 RULES: Built in rule for dup2: "Class op dup2"]
dup2
  = \ (@ a_a80MB) (v_B1 :: IODevice a_a80MB) ->
      case v_B1 of v_B1
      { GHC.IO.Device.C:IODevice v_B2 v_B3 v_B4 v_B5 v_B6 v_B7 v_B8 v_B9
                                 v_Ba v_Bb v_Bc v_Bd v_Be v_Bf ->
      v_Bf
      }

-- RHS size: {terms: 6, types: 31, coercions: 0, joins: 0/0}
read :: forall a. RawIO a => a -> Ptr Word8 -> Int -> IO Int
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SLLL),U(U,A,A,A)>,
 RULES: Built in rule for read: "Class op read"]
read
  = \ (@ a_a80MC) (v_B1 :: RawIO a_a80MC) ->
      case v_B1 of v_B1 { GHC.IO.Device.C:RawIO v_B2 v_B3 v_B4 v_B5 ->
      v_B2
      }

-- RHS size: {terms: 6, types: 31, coercions: 0, joins: 0/0}
readNonBlocking
  :: forall a. RawIO a => a -> Ptr Word8 -> Int -> IO (Maybe Int)
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LSLL),U(A,U,A,A)>,
 RULES: Built in rule for readNonBlocking: "Class op readNonBlocking"]
readNonBlocking
  = \ (@ a_a80MC) (v_B1 :: RawIO a_a80MC) ->
      case v_B1 of v_B1 { GHC.IO.Device.C:RawIO v_B2 v_B3 v_B4 v_B5 ->
      v_B3
      }

-- RHS size: {terms: 6, types: 31, coercions: 0, joins: 0/0}
write :: forall a. RawIO a => a -> Ptr Word8 -> Int -> IO ()
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLSL),U(A,A,U,A)>,
 RULES: Built in rule for write: "Class op write"]
write
  = \ (@ a_a80MC) (v_B1 :: RawIO a_a80MC) ->
      case v_B1 of v_B1 { GHC.IO.Device.C:RawIO v_B2 v_B3 v_B4 v_B5 ->
      v_B4
      }

-- RHS size: {terms: 6, types: 31, coercions: 0, joins: 0/0}
writeNonBlocking
  :: forall a. RawIO a => a -> Ptr Word8 -> Int -> IO Int
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLS),U(A,A,A,U)>,
 RULES: Built in rule for writeNonBlocking: "Class op writeNonBlocking"]
writeNonBlocking
  = \ (@ a_a80MC) (v_B1 :: RawIO a_a80MC) ->
      case v_B1 of v_B1 { GHC.IO.Device.C:RawIO v_B2 v_B3 v_B4 v_B5 ->
      v_B5
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Device.$fReadSeekMode16 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.IO.Device.$fReadSeekMode16 = "AbsoluteSeek"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Device.$fReadSeekMode15 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Device.$fReadSeekMode15
  = unpackCString# GHC.IO.Device.$fReadSeekMode16

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Device.$fReadSeekMode12 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.IO.Device.$fReadSeekMode12 = "RelativeSeek"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Device.$fReadSeekMode11 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Device.$fReadSeekMode11
  = unpackCString# GHC.IO.Device.$fReadSeekMode12

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Device.$fReadSeekMode8 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.IO.Device.$fReadSeekMode8 = "SeekFromEnd"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Device.$fReadSeekMode7 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Device.$fReadSeekMode7
  = unpackCString# GHC.IO.Device.$fReadSeekMode8

-- RHS size: {terms: 16, types: 6, coercions: 0, joins: 0/0}
GHC.IO.Device.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: SeekMode -> String -> String
[GblId,
 Arity=2,
 Str=<S,1*U><L,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [100 0] 120 0}]
GHC.IO.Device.$w$cshowsPrec
  = \ (w_s81Ft :: SeekMode) (w1_s81Fu :: String) ->
      case w_s81Ft of {
        AbsoluteSeek -> ++ @ Char GHC.IO.Device.$fReadSeekMode15 w1_s81Fu;
        RelativeSeek -> ++ @ Char GHC.IO.Device.$fReadSeekMode11 w1_s81Fu;
        SeekFromEnd -> ++ @ Char GHC.IO.Device.$fReadSeekMode7 w1_s81Fu
      }

-- RHS size: {terms: 6, types: 3, coercions: 0, joins: 0/0}
GHC.IO.Device.$fShowSeekMode_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: Int -> SeekMode -> ShowS
[GblId,
 Arity=3,
 Str=<L,A><S,1*U><L,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=True)
         Tmpl= \ _ [Occ=Dead]
                 (w1_s81Ft [Occ=Once] :: SeekMode)
                 (w2_s81Fu [Occ=Once] :: String) ->
                 GHC.IO.Device.$w$cshowsPrec w1_s81Ft w2_s81Fu}]
GHC.IO.Device.$fShowSeekMode_$cshowsPrec
  = \ _ [Occ=Dead] (w1_s81Ft :: SeekMode) (w2_s81Fu :: String) ->
      GHC.IO.Device.$w$cshowsPrec w1_s81Ft w2_s81Fu

-- RHS size: {terms: 9, types: 2, coercions: 0, joins: 0/0}
GHC.IO.Device.$fShowSeekMode_$cshow :: SeekMode -> String
[GblId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_i7Jay [Occ=Once!] :: SeekMode) ->
                 case x_i7Jay of {
                   AbsoluteSeek -> GHC.IO.Device.$fReadSeekMode15;
                   RelativeSeek -> GHC.IO.Device.$fReadSeekMode11;
                   SeekFromEnd -> GHC.IO.Device.$fReadSeekMode7
                 }}]
GHC.IO.Device.$fShowSeekMode_$cshow
  = \ (x_i7Jay :: SeekMode) ->
      case x_i7Jay of {
        AbsoluteSeek -> GHC.IO.Device.$fReadSeekMode15;
        RelativeSeek -> GHC.IO.Device.$fReadSeekMode11;
        SeekFromEnd -> GHC.IO.Device.$fReadSeekMode7
      }

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
GHC.IO.Device.$fShowSeekMode_$cshowList :: [SeekMode] -> ShowS
[GblId,
 Arity=2,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ls_i7JaB [Occ=Once] :: [SeekMode])
                 (s_i7JaC [Occ=Once] :: String) ->
                 showList__
                   @ SeekMode GHC.IO.Device.$w$cshowsPrec ls_i7JaB s_i7JaC}]
GHC.IO.Device.$fShowSeekMode_$cshowList
  = \ (ls_i7JaB :: [SeekMode]) (s_i7JaC :: String) ->
      showList__ @ SeekMode GHC.IO.Device.$w$cshowsPrec ls_i7JaB s_i7JaC

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
GHC.IO.Device.$fShowSeekMode [InlPrag=NOUSERINLINE CONLIKE]
  :: Show SeekMode
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: SeekMode
                       GHC.IO.Device.$fShowSeekMode_$cshowsPrec
                       GHC.IO.Device.$fShowSeekMode_$cshow
                       GHC.IO.Device.$fShowSeekMode_$cshowList]
GHC.IO.Device.$fShowSeekMode
  = GHC.Show.C:Show
      @ SeekMode
      GHC.IO.Device.$fShowSeekMode_$cshowsPrec
      GHC.IO.Device.$fShowSeekMode_$cshow
      GHC.IO.Device.$fShowSeekMode_$cshowList

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
GHC.IO.Device.$fReadSeekMode14
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (SeekMode -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ _ [Occ=Dead]
                 (@ b_i816N)
                 (k_i816O [Occ=Once!]
                    :: SeekMode -> Text.ParserCombinators.ReadP.P b_i816N) ->
                 k_i816O GHC.IO.Device.AbsoluteSeek}]
GHC.IO.Device.$fReadSeekMode14
  = \ _ [Occ=Dead]
      (@ b_i816N)
      (k_i816O :: SeekMode -> Text.ParserCombinators.ReadP.P b_i816N) ->
      k_i816O GHC.IO.Device.AbsoluteSeek

-- RHS size: {terms: 3, types: 4, coercions: 9, joins: 0/0}
GHC.IO.Device.$fReadSeekMode13
  :: ([Char], Text.ParserCombinators.ReadPrec.ReadPrec SeekMode)
[GblId,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.IO.Device.$fReadSeekMode13
  = (GHC.IO.Device.$fReadSeekMode15,
     GHC.IO.Device.$fReadSeekMode14
     `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
              ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                            <SeekMode>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                      <SeekMode>_R)
             :: (Text.ParserCombinators.ReadPrec.Prec
                 -> forall b.
                    (SeekMode -> Text.ParserCombinators.ReadP.P b)
                    -> Text.ParserCombinators.ReadP.P b :: *)
                ~R# (Text.ParserCombinators.ReadPrec.ReadPrec SeekMode :: *)))

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
GHC.IO.Device.$fReadSeekMode10
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (SeekMode -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ _ [Occ=Dead]
                 (@ b_i816N)
                 (k_i816O [Occ=Once!]
                    :: SeekMode -> Text.ParserCombinators.ReadP.P b_i816N) ->
                 k_i816O GHC.IO.Device.RelativeSeek}]
GHC.IO.Device.$fReadSeekMode10
  = \ _ [Occ=Dead]
      (@ b_i816N)
      (k_i816O :: SeekMode -> Text.ParserCombinators.ReadP.P b_i816N) ->
      k_i816O GHC.IO.Device.RelativeSeek

-- RHS size: {terms: 3, types: 4, coercions: 9, joins: 0/0}
GHC.IO.Device.$fReadSeekMode9
  :: ([Char], Text.ParserCombinators.ReadPrec.ReadPrec SeekMode)
[GblId,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.IO.Device.$fReadSeekMode9
  = (GHC.IO.Device.$fReadSeekMode11,
     GHC.IO.Device.$fReadSeekMode10
     `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
              ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                            <SeekMode>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                      <SeekMode>_R)
             :: (Text.ParserCombinators.ReadPrec.Prec
                 -> forall b.
                    (SeekMode -> Text.ParserCombinators.ReadP.P b)
                    -> Text.ParserCombinators.ReadP.P b :: *)
                ~R# (Text.ParserCombinators.ReadPrec.ReadPrec SeekMode :: *)))

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
GHC.IO.Device.$fReadSeekMode6
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (SeekMode -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ _ [Occ=Dead]
                 (@ b_i816N)
                 (k_i816O [Occ=Once!]
                    :: SeekMode -> Text.ParserCombinators.ReadP.P b_i816N) ->
                 k_i816O GHC.IO.Device.SeekFromEnd}]
GHC.IO.Device.$fReadSeekMode6
  = \ _ [Occ=Dead]
      (@ b_i816N)
      (k_i816O :: SeekMode -> Text.ParserCombinators.ReadP.P b_i816N) ->
      k_i816O GHC.IO.Device.SeekFromEnd

-- RHS size: {terms: 3, types: 4, coercions: 9, joins: 0/0}
GHC.IO.Device.$fReadSeekMode5
  :: ([Char], Text.ParserCombinators.ReadPrec.ReadPrec SeekMode)
[GblId,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.IO.Device.$fReadSeekMode5
  = (GHC.IO.Device.$fReadSeekMode7,
     GHC.IO.Device.$fReadSeekMode6
     `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
              ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                            <SeekMode>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                      <SeekMode>_R)
             :: (Text.ParserCombinators.ReadPrec.Prec
                 -> forall b.
                    (SeekMode -> Text.ParserCombinators.ReadP.P b)
                    -> Text.ParserCombinators.ReadP.P b :: *)
                ~R# (Text.ParserCombinators.ReadPrec.ReadPrec SeekMode :: *)))

-- RHS size: {terms: 3, types: 8, coercions: 0, joins: 0/0}
GHC.IO.Device.$fReadSeekMode4
  :: [(String, Text.ParserCombinators.ReadPrec.ReadPrec SeekMode)]
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.IO.Device.$fReadSeekMode4
  = GHC.Types.:
      @ (String, Text.ParserCombinators.ReadPrec.ReadPrec SeekMode)
      GHC.IO.Device.$fReadSeekMode5
      (GHC.Types.[]
         @ (String, Text.ParserCombinators.ReadPrec.ReadPrec SeekMode))

-- RHS size: {terms: 3, types: 4, coercions: 0, joins: 0/0}
GHC.IO.Device.$fReadSeekMode3
  :: [(String, Text.ParserCombinators.ReadPrec.ReadPrec SeekMode)]
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.IO.Device.$fReadSeekMode3
  = GHC.Types.:
      @ (String, Text.ParserCombinators.ReadPrec.ReadPrec SeekMode)
      GHC.IO.Device.$fReadSeekMode9
      GHC.IO.Device.$fReadSeekMode4

-- RHS size: {terms: 3, types: 4, coercions: 0, joins: 0/0}
GHC.IO.Device.$fReadSeekMode_sps
  :: [(String, Text.ParserCombinators.ReadPrec.ReadPrec SeekMode)]
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.IO.Device.$fReadSeekMode_sps
  = GHC.Types.:
      @ (String, Text.ParserCombinators.ReadPrec.ReadPrec SeekMode)
      GHC.IO.Device.$fReadSeekMode13
      GHC.IO.Device.$fReadSeekMode3

-- RHS size: {terms: 4, types: 2, coercions: 0, joins: 0/0}
GHC.IO.Device.$fReadSeekMode2
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP SeekMode
[GblId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (eta_i816r [Occ=Once]
                    :: Text.ParserCombinators.ReadPrec.Prec) ->
                 GHC.Read.choose2
                   @ SeekMode GHC.IO.Device.$fReadSeekMode_sps eta_i816r}]
GHC.IO.Device.$fReadSeekMode2
  = \ (eta_i816r :: Text.ParserCombinators.ReadPrec.Prec) ->
      GHC.Read.choose2
        @ SeekMode GHC.IO.Device.$fReadSeekMode_sps eta_i816r

-- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
GHC.IO.Device.$fReadSeekMode1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (SeekMode -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
GHC.IO.Device.$fReadSeekMode1
  = GHC.Read.list3
      @ SeekMode
      (GHC.IO.Device.$fReadSeekMode2
       `cast` (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                        <SeekMode>_R)
               :: (Text.ParserCombinators.ReadPrec.Prec
                   -> Text.ParserCombinators.ReadP.ReadP SeekMode :: *)
                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec SeekMode :: *)))

-- RHS size: {terms: 6, types: 5, coercions: 3, joins: 0/0}
GHC.IO.Device.$fReadSeekMode_$creadsPrec :: Int -> ReadS SeekMode
[GblId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (n_i8156 [Occ=Once] :: Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ SeekMode
                   (GHC.Read.list3
                      @ SeekMode
                      (GHC.IO.Device.$fReadSeekMode2
                       `cast` (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                        <SeekMode>_R)
                               :: (Text.ParserCombinators.ReadPrec.Prec
                                   -> Text.ParserCombinators.ReadP.ReadP SeekMode :: *)
                                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec SeekMode :: *)))
                      n_i8156
                      @ SeekMode
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ SeekMode))}]
GHC.IO.Device.$fReadSeekMode_$creadsPrec
  = \ (n_i8156 :: Int) ->
      Text.ParserCombinators.ReadP.run
        @ SeekMode
        (GHC.Read.list3
           @ SeekMode
           (GHC.IO.Device.$fReadSeekMode2
            `cast` (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <SeekMode>_R)
                    :: (Text.ParserCombinators.ReadPrec.Prec
                        -> Text.ParserCombinators.ReadP.ReadP SeekMode :: *)
                       ~R# (Text.ParserCombinators.ReadPrec.ReadPrec SeekMode :: *)))
           n_i8156
           @ SeekMode
           (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ SeekMode))

-- RHS size: {terms: 2, types: 1, coercions: 9, joins: 0/0}
GHC.IO.Device.$fReadSeekMode_$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec [SeekMode]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Device.$fReadSeekMode_$creadListPrec
  = list
      @ SeekMode
      (GHC.IO.Device.$fReadSeekMode1
       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <SeekMode>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                        <SeekMode>_R)
               :: (Text.ParserCombinators.ReadPrec.Prec
                   -> forall b.
                      (SeekMode -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec SeekMode :: *)))

-- RHS size: {terms: 3, types: 4, coercions: 6, joins: 0/0}
GHC.IO.Device.$fReadSeekMode17
  :: Text.ParserCombinators.ReadP.P [SeekMode]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 30 0}]
GHC.IO.Device.$fReadSeekMode17
  = (((GHC.IO.Device.$fReadSeekMode_$creadListPrec
       `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                   <[SeekMode]>_R
               :: (Text.ParserCombinators.ReadPrec.ReadPrec [SeekMode] :: *)
                  ~R# (Text.ParserCombinators.ReadPrec.Prec
                       -> Text.ParserCombinators.ReadP.ReadP [SeekMode] :: *)))
        GHC.Read.$fRead()7)
     `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <[SeekMode]>_R
             :: (Text.ParserCombinators.ReadP.ReadP [SeekMode] :: *)
                ~R# (forall b.
                     ([SeekMode] -> Text.ParserCombinators.ReadP.P b)
                     -> Text.ParserCombinators.ReadP.P b :: *)))
      @ [SeekMode]
      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ [SeekMode])

-- RHS size: {terms: 2, types: 2, coercions: 0, joins: 0/0}
GHC.IO.Device.$fReadSeekMode_$creadList :: ReadS [SeekMode]
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
GHC.IO.Device.$fReadSeekMode_$creadList
  = Text.ParserCombinators.ReadP.run
      @ [SeekMode] GHC.IO.Device.$fReadSeekMode17

-- RHS size: {terms: 5, types: 1, coercions: 9, joins: 0/0}
GHC.IO.Device.$fReadSeekMode [InlPrag=NOUSERINLINE CONLIKE]
  :: Read SeekMode
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Read.C:Read TYPE: SeekMode
                       GHC.IO.Device.$fReadSeekMode_$creadsPrec
                       GHC.IO.Device.$fReadSeekMode_$creadList
                       GHC.IO.Device.$fReadSeekMode1
                       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <SeekMode>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                        <SeekMode>_R)
                               :: (Text.ParserCombinators.ReadPrec.Prec
                                   -> forall b.
                                      (SeekMode -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec SeekMode :: *))
                       GHC.IO.Device.$fReadSeekMode_$creadListPrec]
GHC.IO.Device.$fReadSeekMode
  = GHC.Read.C:Read
      @ SeekMode
      GHC.IO.Device.$fReadSeekMode_$creadsPrec
      GHC.IO.Device.$fReadSeekMode_$creadList
      (GHC.IO.Device.$fReadSeekMode1
       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <SeekMode>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                        <SeekMode>_R)
               :: (Text.ParserCombinators.ReadPrec.Prec
                   -> forall b.
                      (SeekMode -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec SeekMode :: *)))
      GHC.IO.Device.$fReadSeekMode_$creadListPrec

-- RHS size: {terms: 25, types: 6, coercions: 0, joins: 0/0}
GHC.IO.Device.$fEqSeekMode_$c== :: SeekMode -> SeekMode -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_d813J [Occ=Once!] :: SeekMode)
                 (ds1_d813K [Occ=Once*!] :: SeekMode) ->
                 case ds_d813J of {
                   AbsoluteSeek ->
                     case ds1_d813K of {
                       __DEFAULT -> GHC.Types.False;
                       AbsoluteSeek -> GHC.Types.True
                     };
                   RelativeSeek ->
                     case ds1_d813K of {
                       __DEFAULT -> GHC.Types.False;
                       RelativeSeek -> GHC.Types.True
                     };
                   SeekFromEnd ->
                     case ds1_d813K of {
                       __DEFAULT -> GHC.Types.False;
                       SeekFromEnd -> GHC.Types.True
                     }
                 }}]
GHC.IO.Device.$fEqSeekMode_$c==
  = \ (ds_d813J :: SeekMode) (ds1_d813K :: SeekMode) ->
      case ds_d813J of {
        AbsoluteSeek ->
          case ds1_d813K of {
            __DEFAULT -> GHC.Types.False;
            AbsoluteSeek -> GHC.Types.True
          };
        RelativeSeek ->
          case ds1_d813K of {
            __DEFAULT -> GHC.Types.False;
            RelativeSeek -> GHC.Types.True
          };
        SeekFromEnd ->
          case ds1_d813K of {
            __DEFAULT -> GHC.Types.False;
            SeekFromEnd -> GHC.Types.True
          }
      }

-- RHS size: {terms: 25, types: 6, coercions: 0, joins: 0/0}
GHC.IO.Device.$fEqSeekMode_$c/= [InlPrag=INLINE (sat-args=2)]
  :: SeekMode -> SeekMode -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=False,boring_ok=False)
         Tmpl= \ (x_a22b [Occ=Once!] :: SeekMode)
                 (y_a22c [Occ=Once*!] :: SeekMode) ->
                 case x_a22b of {
                   AbsoluteSeek ->
                     case y_a22c of {
                       __DEFAULT -> GHC.Types.True;
                       AbsoluteSeek -> GHC.Types.False
                     };
                   RelativeSeek ->
                     case y_a22c of {
                       __DEFAULT -> GHC.Types.True;
                       RelativeSeek -> GHC.Types.False
                     };
                   SeekFromEnd ->
                     case y_a22c of {
                       __DEFAULT -> GHC.Types.True;
                       SeekFromEnd -> GHC.Types.False
                     }
                 }}]
GHC.IO.Device.$fEqSeekMode_$c/=
  = \ (eta_B2 :: SeekMode) (eta1_B1 :: SeekMode) ->
      case eta_B2 of {
        AbsoluteSeek ->
          case eta1_B1 of {
            __DEFAULT -> GHC.Types.True;
            AbsoluteSeek -> GHC.Types.False
          };
        RelativeSeek ->
          case eta1_B1 of {
            __DEFAULT -> GHC.Types.True;
            RelativeSeek -> GHC.Types.False
          };
        SeekFromEnd ->
          case eta1_B1 of {
            __DEFAULT -> GHC.Types.True;
            SeekFromEnd -> GHC.Types.False
          }
      }

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
GHC.IO.Device.$fEqSeekMode [InlPrag=NOUSERINLINE CONLIKE]
  :: Eq SeekMode
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Eq TYPE: SeekMode
                        GHC.IO.Device.$fEqSeekMode_$c==
                        GHC.IO.Device.$fEqSeekMode_$c/=]
GHC.IO.Device.$fEqSeekMode
  = GHC.Classes.C:Eq
      @ SeekMode
      GHC.IO.Device.$fEqSeekMode_$c==
      GHC.IO.Device.$fEqSeekMode_$c/=

-- RHS size: {terms: 32, types: 7, coercions: 0, joins: 0/0}
GHC.IO.Device.$fEqIODeviceType_$c==
  :: IODeviceType -> IODeviceType -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [110 120] 120 80}]
GHC.IO.Device.$fEqIODeviceType_$c==
  = \ (ds_d813F :: IODeviceType) (ds1_d813G :: IODeviceType) ->
      case ds_d813F of {
        Directory ->
          case ds1_d813G of {
            __DEFAULT -> GHC.Types.False;
            Directory -> GHC.Types.True
          };
        Stream ->
          case ds1_d813G of {
            __DEFAULT -> GHC.Types.False;
            Stream -> GHC.Types.True
          };
        RegularFile ->
          case ds1_d813G of {
            __DEFAULT -> GHC.Types.False;
            RegularFile -> GHC.Types.True
          };
        RawDevice ->
          case ds1_d813G of {
            __DEFAULT -> GHC.Types.False;
            RawDevice -> GHC.Types.True
          }
      }

-- RHS size: {terms: 32, types: 7, coercions: 0, joins: 0/0}
GHC.IO.Device.$fEqIODeviceType_$c/= [InlPrag=INLINE (sat-args=2)]
  :: IODeviceType -> IODeviceType -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=False,boring_ok=False)
         Tmpl= \ (x_a22b [Occ=Once!] :: IODeviceType)
                 (y_a22c [Occ=Once*!] :: IODeviceType) ->
                 case x_a22b of {
                   Directory ->
                     case y_a22c of {
                       __DEFAULT -> GHC.Types.True;
                       Directory -> GHC.Types.False
                     };
                   Stream ->
                     case y_a22c of {
                       __DEFAULT -> GHC.Types.True;
                       Stream -> GHC.Types.False
                     };
                   RegularFile ->
                     case y_a22c of {
                       __DEFAULT -> GHC.Types.True;
                       RegularFile -> GHC.Types.False
                     };
                   RawDevice ->
                     case y_a22c of {
                       __DEFAULT -> GHC.Types.True;
                       RawDevice -> GHC.Types.False
                     }
                 }}]
GHC.IO.Device.$fEqIODeviceType_$c/=
  = \ (eta_B2 :: IODeviceType) (eta1_B1 :: IODeviceType) ->
      case eta_B2 of {
        Directory ->
          case eta1_B1 of {
            __DEFAULT -> GHC.Types.True;
            Directory -> GHC.Types.False
          };
        Stream ->
          case eta1_B1 of {
            __DEFAULT -> GHC.Types.True;
            Stream -> GHC.Types.False
          };
        RegularFile ->
          case eta1_B1 of {
            __DEFAULT -> GHC.Types.True;
            RegularFile -> GHC.Types.False
          };
        RawDevice ->
          case eta1_B1 of {
            __DEFAULT -> GHC.Types.True;
            RawDevice -> GHC.Types.False
          }
      }

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
GHC.IO.Device.$fEqIODeviceType [InlPrag=NOUSERINLINE CONLIKE]
  :: Eq IODeviceType
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Eq TYPE: IODeviceType
                        GHC.IO.Device.$fEqIODeviceType_$c==
                        GHC.IO.Device.$fEqIODeviceType_$c/=]
GHC.IO.Device.$fEqIODeviceType
  = GHC.Classes.C:Eq
      @ IODeviceType
      GHC.IO.Device.$fEqIODeviceType_$c==
      GHC.IO.Device.$fEqIODeviceType_$c/=

-- RHS size: {terms: 7, types: 14, coercions: 0, joins: 0/0}
$dmisSeekable1_r81Zn
  :: forall a.
     IODevice a =>
     a -> State# RealWorld -> (# State# RealWorld, Bool #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,A><L,A><S,U>,
 Unf=OtherCon []]
$dmisSeekable1_r81Zn
  = \ (@ a_a80MB)
      _ [Occ=Dead]
      _ [Occ=Dead]
      (s_i7IAV :: State# RealWorld) ->
      (# s_i7IAV, GHC.Types.False #)

-- RHS size: {terms: 1, types: 0, coercions: 11, joins: 0/0}
GHC.IO.Device.$dmisSeekable :: forall a. IODevice a => a -> IO Bool
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,A><L,A><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= (\ (@ a_X80P5)
                  _ [Occ=Dead]
                  _ [Occ=Dead]
                  (s_i7IAV [Occ=Once] :: State# RealWorld) ->
                  (# s_i7IAV, GHC.Types.False #))
               `cast` (forall (a :: <*>_N).
                       <IODevice a>_R ->_R <a>_R ->_R Sym (GHC.Types.N:IO[0] <Bool>_R)
                       :: (forall a.
                           IODevice a =>
                           a -> State# RealWorld -> (# State# RealWorld, Bool #) :: *)
                          ~R# (forall a. IODevice a => a -> IO Bool :: *))}]
GHC.IO.Device.$dmisSeekable
  = $dmisSeekable1_r81Zn
    `cast` (forall (a :: <*>_N).
            <IODevice a>_R ->_R <a>_R ->_R Sym (GHC.Types.N:IO[0] <Bool>_R)
            :: (forall a.
                IODevice a =>
                a -> State# RealWorld -> (# State# RealWorld, Bool #) :: *)
               ~R# (forall a. IODevice a => a -> IO Bool :: *))

-- RHS size: {terms: 7, types: 14, coercions: 0, joins: 0/0}
$dmisTerminal1_r81Zo
  :: forall a.
     IODevice a =>
     a -> State# RealWorld -> (# State# RealWorld, Bool #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,A><L,A><S,U>,
 Unf=OtherCon []]
$dmisTerminal1_r81Zo
  = \ (@ a_X80P5)
      _ [Occ=Dead]
      _ [Occ=Dead]
      (s_i7IAV :: State# RealWorld) ->
      (# s_i7IAV, GHC.Types.False #)

-- RHS size: {terms: 1, types: 0, coercions: 11, joins: 0/0}
GHC.IO.Device.$dmisTerminal :: forall a. IODevice a => a -> IO Bool
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,A><L,A><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= (\ (@ a_X80Pa)
                  _ [Occ=Dead]
                  _ [Occ=Dead]
                  (s_X7IFn [Occ=Once] :: State# RealWorld) ->
                  (# s_X7IFn, GHC.Types.False #))
               `cast` (forall (a :: <*>_N).
                       <IODevice a>_R ->_R <a>_R ->_R Sym (GHC.Types.N:IO[0] <Bool>_R)
                       :: (forall a.
                           IODevice a =>
                           a -> State# RealWorld -> (# State# RealWorld, Bool #) :: *)
                          ~R# (forall a. IODevice a => a -> IO Bool :: *))}]
GHC.IO.Device.$dmisTerminal
  = $dmisTerminal1_r81Zo
    `cast` (forall (a :: <*>_N).
            <IODevice a>_R ->_R <a>_R ->_R Sym (GHC.Types.N:IO[0] <Bool>_R)
            :: (forall a.
                IODevice a =>
                a -> State# RealWorld -> (# State# RealWorld, Bool #) :: *)
               ~R# (forall a. IODevice a => a -> IO Bool :: *))

-- RHS size: {terms: 6, types: 6, coercions: 0, joins: 0/0}
GHC.IO.Device.$dmdup1
  :: forall a. State# RealWorld -> (# State# RealWorld, a #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []]
GHC.IO.Device.$dmdup1
  = \ (@ a_a80Vq) (eta_B1 :: State# RealWorld) ->
      GHC.IO.throwIO1
        @ GHC.IO.Exception.IOError
        @ a_a80Vq
        GHC.IO.Exception.$fxExceptionIOException
        unsupportedOperation
        eta_B1

-- RHS size: {terms: 8, types: 10, coercions: 0, joins: 0/0}
$dmseek1_r81Zp
  :: forall a.
     IODevice a =>
     a
     -> SeekMode
     -> Integer
     -> State# RealWorld
     -> (# State# RealWorld, () #)
[GblId, Arity=5, Str=<B,A><B,A><B,A><B,A><B,U>x, Unf=OtherCon []]
$dmseek1_r81Zp
  = \ (@ a_X80Pd)
      _ [Occ=Dead]
      _ [Occ=Dead]
      _ [Occ=Dead]
      _ [Occ=Dead]
      (eta4_B1 :: State# RealWorld) ->
      GHC.IO.Device.$dmdup1 @ () eta4_B1

-- RHS size: {terms: 1, types: 0, coercions: 15, joins: 0/0}
GHC.IO.Device.$dmseek
  :: forall a. IODevice a => a -> SeekMode -> Integer -> IO ()
[GblId,
 Arity=5,
 Str=<B,A><B,A><B,A><B,A><B,U>x,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= (\ (@ a_X80Pj)
                  _ [Occ=Dead]
                  _ [Occ=Dead]
                  _ [Occ=Dead]
                  _ [Occ=Dead] ->
                  GHC.IO.Device.$dmdup1 @ ())
               `cast` (forall (a :: <*>_N).
                       <IODevice a>_R
                       ->_R <a>_R
                       ->_R <SeekMode>_R
                       ->_R <Integer>_R
                       ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                       :: (forall a.
                           IODevice a =>
                           a
                           -> SeekMode
                           -> Integer
                           -> State# RealWorld
                           -> (# State# RealWorld, () #) :: *)
                          ~R# (forall a.
                               IODevice a =>
                               a -> SeekMode -> Integer -> IO () :: *))}]
GHC.IO.Device.$dmseek
  = $dmseek1_r81Zp
    `cast` (forall (a :: <*>_N).
            <IODevice a>_R
            ->_R <a>_R
            ->_R <SeekMode>_R
            ->_R <Integer>_R
            ->_R Sym (GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                IODevice a =>
                a
                -> SeekMode
                -> Integer
                -> State# RealWorld
                -> (# State# RealWorld, () #) :: *)
               ~R# (forall a.
                    IODevice a =>
                    a -> SeekMode -> Integer -> IO () :: *))

-- RHS size: {terms: 6, types: 8, coercions: 0, joins: 0/0}
$dmtell1_r81Zq
  :: forall a.
     IODevice a =>
     a -> State# RealWorld -> (# State# RealWorld, Integer #)
[GblId, Arity=3, Str=<B,A><B,A><B,U>x, Unf=OtherCon []]
$dmtell1_r81Zq
  = \ (@ a_X80Pk)
      _ [Occ=Dead]
      _ [Occ=Dead]
      (eta2_X9j :: State# RealWorld) ->
      GHC.IO.Device.$dmdup1 @ Integer eta2_X9j

-- RHS size: {terms: 1, types: 0, coercions: 11, joins: 0/0}
GHC.IO.Device.$dmtell :: forall a. IODevice a => a -> IO Integer
[GblId,
 Arity=3,
 Str=<B,A><B,A><B,U>x,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= (\ (@ a_X80Po) _ [Occ=Dead] _ [Occ=Dead] ->
                  GHC.IO.Device.$dmdup1 @ Integer)
               `cast` (forall (a :: <*>_N).
                       <IODevice a>_R ->_R <a>_R ->_R Sym (GHC.Types.N:IO[0] <Integer>_R)
                       :: (forall a.
                           IODevice a =>
                           a -> State# RealWorld -> (# State# RealWorld, Integer #) :: *)
                          ~R# (forall a. IODevice a => a -> IO Integer :: *))}]
GHC.IO.Device.$dmtell
  = $dmtell1_r81Zq
    `cast` (forall (a :: <*>_N).
            <IODevice a>_R ->_R <a>_R ->_R Sym (GHC.Types.N:IO[0] <Integer>_R)
            :: (forall a.
                IODevice a =>
                a -> State# RealWorld -> (# State# RealWorld, Integer #) :: *)
               ~R# (forall a. IODevice a => a -> IO Integer :: *))

-- RHS size: {terms: 6, types: 8, coercions: 0, joins: 0/0}
$dmgetSize1_r81Zr
  :: forall a.
     IODevice a =>
     a -> State# RealWorld -> (# State# RealWorld, Integer #)
[GblId, Arity=3, Str=<B,A><B,A><B,U>x, Unf=OtherCon []]
$dmgetSize1_r81Zr
  = \ (@ a_X80Po)
      _ [Occ=Dead]
      _ [Occ=Dead]
      (eta_B1 :: State# RealWorld) ->
      GHC.IO.Device.$dmdup1 @ Integer eta_B1

-- RHS size: {terms: 1, types: 0, coercions: 11, joins: 0/0}
GHC.IO.Device.$dmgetSize :: forall a. IODevice a => a -> IO Integer
[GblId,
 Arity=3,
 Str=<B,A><B,A><B,U>x,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= (\ (@ a_X80Pt) _ [Occ=Dead] _ [Occ=Dead] ->
                  GHC.IO.Device.$dmdup1 @ Integer)
               `cast` (forall (a :: <*>_N).
                       <IODevice a>_R ->_R <a>_R ->_R Sym (GHC.Types.N:IO[0] <Integer>_R)
                       :: (forall a.
                           IODevice a =>
                           a -> State# RealWorld -> (# State# RealWorld, Integer #) :: *)
                          ~R# (forall a. IODevice a => a -> IO Integer :: *))}]
GHC.IO.Device.$dmgetSize
  = $dmgetSize1_r81Zr
    `cast` (forall (a :: <*>_N).
            <IODevice a>_R ->_R <a>_R ->_R Sym (GHC.Types.N:IO[0] <Integer>_R)
            :: (forall a.
                IODevice a =>
                a -> State# RealWorld -> (# State# RealWorld, Integer #) :: *)
               ~R# (forall a. IODevice a => a -> IO Integer :: *))

-- RHS size: {terms: 7, types: 9, coercions: 0, joins: 0/0}
$dmsetSize1_r81Zs
  :: forall a.
     IODevice a =>
     a -> Integer -> State# RealWorld -> (# State# RealWorld, () #)
[GblId, Arity=4, Str=<B,A><B,A><B,A><B,U>x, Unf=OtherCon []]
$dmsetSize1_r81Zs
  = \ (@ a_X80Pu)
      _ [Occ=Dead]
      _ [Occ=Dead]
      _ [Occ=Dead]
      (eta3_X9J :: State# RealWorld) ->
      GHC.IO.Device.$dmdup1 @ () eta3_X9J

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
GHC.IO.Device.$dmsetSize
  :: forall a. IODevice a => a -> Integer -> IO ()
[GblId,
 Arity=4,
 Str=<B,A><B,A><B,A><B,U>x,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= (\ (@ a_X80Pz) _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
                  GHC.IO.Device.$dmdup1 @ ())
               `cast` (forall (a :: <*>_N).
                       <IODevice a>_R
                       ->_R <a>_R
                       ->_R <Integer>_R
                       ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                       :: (forall a.
                           IODevice a =>
                           a
                           -> Integer -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                          ~R# (forall a. IODevice a => a -> Integer -> IO () :: *))}]
GHC.IO.Device.$dmsetSize
  = $dmsetSize1_r81Zs
    `cast` (forall (a :: <*>_N).
            <IODevice a>_R
            ->_R <a>_R
            ->_R <Integer>_R
            ->_R Sym (GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                IODevice a =>
                a
                -> Integer -> State# RealWorld -> (# State# RealWorld, () #) :: *)
               ~R# (forall a. IODevice a => a -> Integer -> IO () :: *))

-- RHS size: {terms: 7, types: 9, coercions: 0, joins: 0/0}
$dmsetEcho1_r81Zt
  :: forall a.
     IODevice a =>
     a -> Bool -> State# RealWorld -> (# State# RealWorld, () #)
[GblId, Arity=4, Str=<B,A><B,A><B,A><B,U>x, Unf=OtherCon []]
$dmsetEcho1_r81Zt
  = \ (@ a_X80PA)
      _ [Occ=Dead]
      _ [Occ=Dead]
      _ [Occ=Dead]
      (eta3_X9Z :: State# RealWorld) ->
      GHC.IO.Device.$dmdup1 @ () eta3_X9Z

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
GHC.IO.Device.$dmsetEcho
  :: forall a. IODevice a => a -> Bool -> IO ()
[GblId,
 Arity=4,
 Str=<B,A><B,A><B,A><B,U>x,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= (\ (@ a_X80PF) _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
                  GHC.IO.Device.$dmdup1 @ ())
               `cast` (forall (a :: <*>_N).
                       <IODevice a>_R
                       ->_R <a>_R
                       ->_R <Bool>_R
                       ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                       :: (forall a.
                           IODevice a =>
                           a -> Bool -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                          ~R# (forall a. IODevice a => a -> Bool -> IO () :: *))}]
GHC.IO.Device.$dmsetEcho
  = $dmsetEcho1_r81Zt
    `cast` (forall (a :: <*>_N).
            <IODevice a>_R
            ->_R <a>_R
            ->_R <Bool>_R
            ->_R Sym (GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                IODevice a =>
                a -> Bool -> State# RealWorld -> (# State# RealWorld, () #) :: *)
               ~R# (forall a. IODevice a => a -> Bool -> IO () :: *))

-- RHS size: {terms: 6, types: 8, coercions: 0, joins: 0/0}
$dmgetEcho1_r81Zu
  :: forall a.
     IODevice a =>
     a -> State# RealWorld -> (# State# RealWorld, Bool #)
[GblId, Arity=3, Str=<B,A><B,A><B,U>x, Unf=OtherCon []]
$dmgetEcho1_r81Zu
  = \ (@ a_X80PG)
      _ [Occ=Dead]
      _ [Occ=Dead]
      (eta2_Xad :: State# RealWorld) ->
      GHC.IO.Device.$dmdup1 @ Bool eta2_Xad

-- RHS size: {terms: 1, types: 0, coercions: 11, joins: 0/0}
GHC.IO.Device.$dmgetEcho :: forall a. IODevice a => a -> IO Bool
[GblId,
 Arity=3,
 Str=<B,A><B,A><B,U>x,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= (\ (@ a_X80PK) _ [Occ=Dead] _ [Occ=Dead] ->
                  GHC.IO.Device.$dmdup1 @ Bool)
               `cast` (forall (a :: <*>_N).
                       <IODevice a>_R ->_R <a>_R ->_R Sym (GHC.Types.N:IO[0] <Bool>_R)
                       :: (forall a.
                           IODevice a =>
                           a -> State# RealWorld -> (# State# RealWorld, Bool #) :: *)
                          ~R# (forall a. IODevice a => a -> IO Bool :: *))}]
GHC.IO.Device.$dmgetEcho
  = $dmgetEcho1_r81Zu
    `cast` (forall (a :: <*>_N).
            <IODevice a>_R ->_R <a>_R ->_R Sym (GHC.Types.N:IO[0] <Bool>_R)
            :: (forall a.
                IODevice a =>
                a -> State# RealWorld -> (# State# RealWorld, Bool #) :: *)
               ~R# (forall a. IODevice a => a -> IO Bool :: *))

-- RHS size: {terms: 7, types: 9, coercions: 0, joins: 0/0}
$dmsetRaw1_r81Zv
  :: forall a.
     IODevice a =>
     a -> Bool -> State# RealWorld -> (# State# RealWorld, () #)
[GblId, Arity=4, Str=<B,A><B,A><B,A><B,U>x, Unf=OtherCon []]
$dmsetRaw1_r81Zv
  = \ (@ a_X80PF)
      _ [Occ=Dead]
      _ [Occ=Dead]
      _ [Occ=Dead]
      (eta_B1 :: State# RealWorld) ->
      GHC.IO.Device.$dmdup1 @ () eta_B1

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
GHC.IO.Device.$dmsetRaw
  :: forall a. IODevice a => a -> Bool -> IO ()
[GblId,
 Arity=4,
 Str=<B,A><B,A><B,A><B,U>x,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= (\ (@ a_X80PQ) _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
                  GHC.IO.Device.$dmdup1 @ ())
               `cast` (forall (a :: <*>_N).
                       <IODevice a>_R
                       ->_R <a>_R
                       ->_R <Bool>_R
                       ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                       :: (forall a.
                           IODevice a =>
                           a -> Bool -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                          ~R# (forall a. IODevice a => a -> Bool -> IO () :: *))}]
GHC.IO.Device.$dmsetRaw
  = $dmsetRaw1_r81Zv
    `cast` (forall (a :: <*>_N).
            <IODevice a>_R
            ->_R <a>_R
            ->_R <Bool>_R
            ->_R Sym (GHC.Types.N:IO[0] <()>_R)
            :: (forall a.
                IODevice a =>
                a -> Bool -> State# RealWorld -> (# State# RealWorld, () #) :: *)
               ~R# (forall a. IODevice a => a -> Bool -> IO () :: *))

-- RHS size: {terms: 6, types: 8, coercions: 0, joins: 0/0}
$dmdup3_r81Zw
  :: forall a.
     IODevice a =>
     a -> State# RealWorld -> (# State# RealWorld, a #)
[GblId, Arity=3, Str=<B,A><B,A><B,U>x, Unf=OtherCon []]
$dmdup3_r81Zw
  = \ (@ a_X80PR)
      _ [Occ=Dead]
      _ [Occ=Dead]
      (eta2_XaD :: State# RealWorld) ->
      GHC.IO.Device.$dmdup1 @ a_X80PR eta2_XaD

-- RHS size: {terms: 1, types: 0, coercions: 11, joins: 0/0}
GHC.IO.Device.$dmdup :: forall a. IODevice a => a -> IO a
[GblId,
 Arity=3,
 Str=<B,A><B,A><B,U>x,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= (\ (@ a_X80PV) _ [Occ=Dead] _ [Occ=Dead] ->
                  GHC.IO.Device.$dmdup1 @ a_X80PV)
               `cast` (forall (a :: <*>_N).
                       <IODevice a>_R ->_R <a>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R)
                       :: (forall a.
                           IODevice a =>
                           a -> State# RealWorld -> (# State# RealWorld, a #) :: *)
                          ~R# (forall a. IODevice a => a -> IO a :: *))}]
GHC.IO.Device.$dmdup
  = $dmdup3_r81Zw
    `cast` (forall (a :: <*>_N).
            <IODevice a>_R ->_R <a>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R)
            :: (forall a.
                IODevice a =>
                a -> State# RealWorld -> (# State# RealWorld, a #) :: *)
               ~R# (forall a. IODevice a => a -> IO a :: *))

-- RHS size: {terms: 7, types: 9, coercions: 0, joins: 0/0}
$dmdup4_r81Zx
  :: forall a.
     IODevice a =>
     a -> a -> State# RealWorld -> (# State# RealWorld, a #)
[GblId, Arity=4, Str=<B,A><B,A><B,A><B,U>x, Unf=OtherCon []]
$dmdup4_r81Zx
  = \ (@ a_X80PW)
      _ [Occ=Dead]
      _ [Occ=Dead]
      _ [Occ=Dead]
      (eta3_XaT :: State# RealWorld) ->
      GHC.IO.Device.$dmdup1 @ a_X80PW eta3_XaT

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
GHC.IO.Device.$dmdup2 :: forall a. IODevice a => a -> a -> IO a
[GblId,
 Arity=4,
 Str=<B,A><B,A><B,A><B,U>x,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= (\ (@ a_X80Q1) _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
                  GHC.IO.Device.$dmdup1 @ a_X80Q1)
               `cast` (forall (a :: <*>_N).
                       <IODevice a>_R
                       ->_R <a>_R
                       ->_R <a>_R
                       ->_R Sym (GHC.Types.N:IO[0] <a>_R)
                       :: (forall a.
                           IODevice a =>
                           a -> a -> State# RealWorld -> (# State# RealWorld, a #) :: *)
                          ~R# (forall a. IODevice a => a -> a -> IO a :: *))}]
GHC.IO.Device.$dmdup2
  = $dmdup4_r81Zx
    `cast` (forall (a :: <*>_N).
            <IODevice a>_R
            ->_R <a>_R
            ->_R <a>_R
            ->_R Sym (GHC.Types.N:IO[0] <a>_R)
            :: (forall a.
                IODevice a =>
                a -> a -> State# RealWorld -> (# State# RealWorld, a #) :: *)
               ~R# (forall a. IODevice a => a -> a -> IO a :: *))

-- RHS size: {terms: 29, types: 6, coercions: 0, joins: 0/0}
GHC.IO.Device.$fOrdSeekMode_$ccompare
  :: SeekMode -> SeekMode -> Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [90 110] 110 80}]
GHC.IO.Device.$fOrdSeekMode_$ccompare
  = \ (a_a80UA :: SeekMode) (b_a80UB :: SeekMode) ->
      case a_a80UA of {
        AbsoluteSeek ->
          case b_a80UB of {
            AbsoluteSeek -> GHC.Types.EQ;
            RelativeSeek -> GHC.Types.LT;
            SeekFromEnd -> GHC.Types.LT
          };
        RelativeSeek ->
          case b_a80UB of {
            AbsoluteSeek -> GHC.Types.GT;
            RelativeSeek -> GHC.Types.EQ;
            SeekFromEnd -> GHC.Types.LT
          };
        SeekFromEnd ->
          case b_a80UB of {
            __DEFAULT -> GHC.Types.GT;
            SeekFromEnd -> GHC.Types.EQ
          }
      }

-- RHS size: {terms: 25, types: 6, coercions: 0, joins: 0/0}
GHC.IO.Device.$fOrdSeekMode_$c< :: SeekMode -> SeekMode -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (a_a80UE [Occ=Once!] :: SeekMode)
                 (b_a80UF [Occ=Once*] :: SeekMode) ->
                 case a_a80UE of {
                   AbsoluteSeek ->
                     case b_a80UF of {
                       AbsoluteSeek -> GHC.Types.False;
                       RelativeSeek -> GHC.Types.True;
                       SeekFromEnd -> GHC.Types.True
                     };
                   RelativeSeek ->
                     case b_a80UF of {
                       __DEFAULT -> GHC.Types.False;
                       SeekFromEnd -> GHC.Types.True
                     };
                   SeekFromEnd -> case b_a80UF of { __DEFAULT -> GHC.Types.False }
                 }}]
GHC.IO.Device.$fOrdSeekMode_$c<
  = \ (a_a80UE :: SeekMode) (b_a80UF :: SeekMode) ->
      case a_a80UE of {
        AbsoluteSeek ->
          case b_a80UF of {
            AbsoluteSeek -> GHC.Types.False;
            RelativeSeek -> GHC.Types.True;
            SeekFromEnd -> GHC.Types.True
          };
        RelativeSeek ->
          case b_a80UF of {
            __DEFAULT -> GHC.Types.False;
            SeekFromEnd -> GHC.Types.True
          };
        SeekFromEnd -> case b_a80UF of { __DEFAULT -> GHC.Types.False }
      }

-- RHS size: {terms: 44, types: 10, coercions: 0, joins: 1/1}
GHC.IO.Device.$fOrdSeekMode_$c<= :: SeekMode -> SeekMode -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [82 48] 135 0}]
GHC.IO.Device.$fOrdSeekMode_$c<=
  = \ (a_a80UI :: SeekMode) (b_a80UJ :: SeekMode) ->
      join {
        $j_s81gC [Dmd=<C(S),1*C1(U)>] :: Int# -> Bool
        [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []]
        $j_s81gC (a#_a80UG [OS=OneShot]
                    :: Int#
                    Unf=OtherCon [])
          = case a_a80UI of {
              AbsoluteSeek ->
                case <# a#_a80UG 0# of {
                  __DEFAULT -> GHC.Types.True;
                  1# -> GHC.Types.False
                };
              RelativeSeek ->
                case <# a#_a80UG 1# of {
                  __DEFAULT -> GHC.Types.True;
                  1# -> GHC.Types.False
                };
              SeekFromEnd ->
                case <# a#_a80UG 2# of {
                  __DEFAULT -> GHC.Types.True;
                  1# -> GHC.Types.False
                }
            } } in
      case b_a80UJ of {
        AbsoluteSeek -> jump $j_s81gC 0#;
        RelativeSeek -> jump $j_s81gC 1#;
        SeekFromEnd -> jump $j_s81gC 2#
      }

-- RHS size: {terms: 10, types: 3, coercions: 0, joins: 0/0}
GHC.IO.Device.$fOrdSeekMode_$cmax
  :: SeekMode -> SeekMode -> SeekMode
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_a55d :: SeekMode) (y_a55e :: SeekMode) ->
                 case GHC.IO.Device.$fOrdSeekMode_$c<= x_a55d y_a55e of {
                   False -> x_a55d;
                   True -> y_a55e
                 }}]
GHC.IO.Device.$fOrdSeekMode_$cmax
  = \ (x_a55d :: SeekMode) (y_a55e :: SeekMode) ->
      case GHC.IO.Device.$fOrdSeekMode_$c<= x_a55d y_a55e of {
        False -> x_a55d;
        True -> y_a55e
      }

-- RHS size: {terms: 44, types: 10, coercions: 0, joins: 1/1}
GHC.IO.Device.$fOrdSeekMode_$c>= :: SeekMode -> SeekMode -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [48 82] 135 0}]
GHC.IO.Device.$fOrdSeekMode_$c>=
  = \ (a_a80UM :: SeekMode) (b_a80UN :: SeekMode) ->
      join {
        $j_s81gC [Dmd=<C(S),1*C1(U)>] :: Int# -> Bool
        [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []]
        $j_s81gC (a#_a80UG [OS=OneShot]
                    :: Int#
                    Unf=OtherCon [])
          = case b_a80UN of {
              AbsoluteSeek ->
                case <# a#_a80UG 0# of {
                  __DEFAULT -> GHC.Types.True;
                  1# -> GHC.Types.False
                };
              RelativeSeek ->
                case <# a#_a80UG 1# of {
                  __DEFAULT -> GHC.Types.True;
                  1# -> GHC.Types.False
                };
              SeekFromEnd ->
                case <# a#_a80UG 2# of {
                  __DEFAULT -> GHC.Types.True;
                  1# -> GHC.Types.False
                }
            } } in
      case a_a80UM of {
        AbsoluteSeek -> jump $j_s81gC 0#;
        RelativeSeek -> jump $j_s81gC 1#;
        SeekFromEnd -> jump $j_s81gC 2#
      }

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
GHC.IO.Device.$fOrdSeekMode_$c> :: SeekMode -> SeekMode -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ (a_a80UK [Occ=Once] :: SeekMode)
                 (b_a80UL [Occ=Once] :: SeekMode) ->
                 GHC.IO.Device.$fOrdSeekMode_$c< b_a80UL a_a80UK}]
GHC.IO.Device.$fOrdSeekMode_$c>
  = \ (a_a80UK :: SeekMode) (b_a80UL :: SeekMode) ->
      GHC.IO.Device.$fOrdSeekMode_$c< b_a80UL a_a80UK

-- RHS size: {terms: 10, types: 3, coercions: 0, joins: 0/0}
GHC.IO.Device.$fOrdSeekMode_$cmin
  :: SeekMode -> SeekMode -> SeekMode
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_a55m :: SeekMode) (y_a55n :: SeekMode) ->
                 case GHC.IO.Device.$fOrdSeekMode_$c<= x_a55m y_a55n of {
                   False -> y_a55n;
                   True -> x_a55m
                 }}]
GHC.IO.Device.$fOrdSeekMode_$cmin
  = \ (x_a55m :: SeekMode) (y_a55n :: SeekMode) ->
      case GHC.IO.Device.$fOrdSeekMode_$c<= x_a55m y_a55n of {
        False -> y_a55n;
        True -> x_a55m
      }

-- RHS size: {terms: 9, types: 1, coercions: 0, joins: 0/0}
GHC.IO.Device.$fOrdSeekMode [InlPrag=NOUSERINLINE CONLIKE]
  :: Ord SeekMode
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Ord TYPE: SeekMode
                         GHC.IO.Device.$fEqSeekMode
                         GHC.IO.Device.$fOrdSeekMode_$ccompare
                         GHC.IO.Device.$fOrdSeekMode_$c<
                         GHC.IO.Device.$fOrdSeekMode_$c<=
                         GHC.IO.Device.$fOrdSeekMode_$c>
                         GHC.IO.Device.$fOrdSeekMode_$c>=
                         GHC.IO.Device.$fOrdSeekMode_$cmax
                         GHC.IO.Device.$fOrdSeekMode_$cmin]
GHC.IO.Device.$fOrdSeekMode
  = GHC.Classes.C:Ord
      @ SeekMode
      GHC.IO.Device.$fEqSeekMode
      GHC.IO.Device.$fOrdSeekMode_$ccompare
      GHC.IO.Device.$fOrdSeekMode_$c<
      GHC.IO.Device.$fOrdSeekMode_$c<=
      GHC.IO.Device.$fOrdSeekMode_$c>
      GHC.IO.Device.$fOrdSeekMode_$c>=
      GHC.IO.Device.$fOrdSeekMode_$cmax
      GHC.IO.Device.$fOrdSeekMode_$cmin

-- RHS size: {terms: 31, types: 6, coercions: 0, joins: 0/0}
GHC.IO.Device.$w$cunsafeIndex [InlPrag=NOUSERINLINE[0]]
  :: SeekMode -> SeekMode -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [100 120] 120 0}]
GHC.IO.Device.$w$cunsafeIndex
  = \ (ww_s81FM :: SeekMode) (w_s81FJ :: SeekMode) ->
      case ww_s81FM of {
        AbsoluteSeek ->
          case w_s81FJ of {
            AbsoluteSeek -> 0#;
            RelativeSeek -> 1#;
            SeekFromEnd -> 2#
          };
        RelativeSeek ->
          case w_s81FJ of {
            AbsoluteSeek -> -1#;
            RelativeSeek -> 0#;
            SeekFromEnd -> 1#
          };
        SeekFromEnd ->
          case w_s81FJ of {
            AbsoluteSeek -> -2#;
            RelativeSeek -> -1#;
            SeekFromEnd -> 0#
          }
      }

-- RHS size: {terms: 12, types: 10, coercions: 0, joins: 0/0}
GHC.IO.Device.$fIxSeekMode_$cunsafeIndex [InlPrag=NOUSERINLINE[0]]
  :: (SeekMode, SeekMode) -> SeekMode -> Int
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,A)><S,1*U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s81FI [Occ=Once!] :: (SeekMode, SeekMode))
                 (w1_s81FJ [Occ=Once] :: SeekMode) ->
                 case w_s81FI of { (ww1_s81FM [Occ=Once], _ [Occ=Dead]) ->
                 case GHC.IO.Device.$w$cunsafeIndex ww1_s81FM w1_s81FJ of ww3_s81FR
                 { __DEFAULT ->
                 GHC.Types.I# ww3_s81FR
                 }
                 }}]
GHC.IO.Device.$fIxSeekMode_$cunsafeIndex
  = \ (w_s81FI :: (SeekMode, SeekMode)) (w1_s81FJ :: SeekMode) ->
      case w_s81FI of { (ww1_s81FM, ww2_s81FN) ->
      case GHC.IO.Device.$w$cunsafeIndex ww1_s81FM w1_s81FJ of ww3_s81FR
      { __DEFAULT ->
      GHC.Types.I# ww3_s81FR
      }
      }

-- RHS size: {terms: 67, types: 18, coercions: 0, joins: 2/2}
GHC.IO.Device.$w$cinRange [InlPrag=NOUSERINLINE[0]]
  :: SeekMode -> SeekMode -> SeekMode -> Bool
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [48 48 86] 183 0}]
GHC.IO.Device.$w$cinRange
  = \ (ww_s81FZ :: SeekMode)
      (ww1_s81G0 :: SeekMode)
      (w_s81FW :: SeekMode) ->
      join {
        $j_s81h6 [Dmd=<C(S),1*C1(U)>] :: Int# -> Bool
        [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []]
        $j_s81h6 (a#_a80V1 [OS=OneShot]
                    :: Int#
                    Unf=OtherCon [])
          = join {
              $j1_s81h4 [Dmd=<C(S),1*C1(U)>] :: Int# -> Bool
              [LclId[JoinId(1)], Arity=1, Str=<L,U>, Unf=OtherCon []]
              $j1_s81h4 (b#_a80V2 [OS=OneShot]
                           :: Int#
                           Unf=OtherCon [])
                = case w_s81FW of {
                    AbsoluteSeek ->
                      case >=# 0# a#_a80V1 of {
                        __DEFAULT -> GHC.Types.False;
                        1# -> tagToEnum# @ Bool (<=# 0# b#_a80V2)
                      };
                    RelativeSeek ->
                      case >=# 1# a#_a80V1 of {
                        __DEFAULT -> GHC.Types.False;
                        1# -> tagToEnum# @ Bool (<=# 1# b#_a80V2)
                      };
                    SeekFromEnd ->
                      case >=# 2# a#_a80V1 of {
                        __DEFAULT -> GHC.Types.False;
                        1# -> tagToEnum# @ Bool (<=# 2# b#_a80V2)
                      }
                  } } in
            case ww1_s81G0 of {
              AbsoluteSeek -> jump $j1_s81h4 0#;
              RelativeSeek -> jump $j1_s81h4 1#;
              SeekFromEnd -> jump $j1_s81h4 2#
            } } in
      case ww_s81FZ of {
        AbsoluteSeek -> jump $j_s81h6 0#;
        RelativeSeek -> jump $j_s81h6 1#;
        SeekFromEnd -> jump $j_s81h6 2#
      }

-- RHS size: {terms: 9, types: 9, coercions: 0, joins: 0/0}
GHC.IO.Device.$fIxSeekMode_$cinRange [InlPrag=NOUSERINLINE[0]]
  :: (SeekMode, SeekMode) -> SeekMode -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SS),1*U(1*U,1*U)><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s81FV [Occ=Once!] :: (SeekMode, SeekMode))
                 (w1_s81FW [Occ=Once] :: SeekMode) ->
                 case w_s81FV of { (ww1_s81FZ [Occ=Once], ww2_s81G0 [Occ=Once]) ->
                 GHC.IO.Device.$w$cinRange ww1_s81FZ ww2_s81G0 w1_s81FW
                 }}]
GHC.IO.Device.$fIxSeekMode_$cinRange
  = \ (w_s81FV :: (SeekMode, SeekMode)) (w1_s81FW :: SeekMode) ->
      case w_s81FV of { (ww1_s81FZ, ww2_s81G0) ->
      GHC.IO.Device.$w$cinRange ww1_s81FZ ww2_s81G0 w1_s81FW
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_r81Zy :: Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl_r81Zy = GHC.Types.I# 0#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl1_r81Zz :: Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl1_r81Zz = GHC.Types.I# 1#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl2_r81ZA :: Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl2_r81ZA = GHC.Types.I# 2#

-- RHS size: {terms: 9, types: 2, coercions: 0, joins: 0/0}
GHC.IO.Device.$fEnumSeekMode_$cfromEnum :: SeekMode -> Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (a_a80Vf [Occ=Once!] :: SeekMode) ->
                 case a_a80Vf of {
                   AbsoluteSeek -> GHC.Types.I# 0#;
                   RelativeSeek -> GHC.Types.I# 1#;
                   SeekFromEnd -> GHC.Types.I# 2#
                 }}]
GHC.IO.Device.$fEnumSeekMode_$cfromEnum
  = \ (a_a80Vf :: SeekMode) ->
      case a_a80Vf of {
        AbsoluteSeek -> lvl_r81Zy;
        RelativeSeek -> lvl1_r81Zz;
        SeekFromEnd -> lvl2_r81ZA
      }

Rec {
-- RHS size: {terms: 13, types: 5, coercions: 0, joins: 0/0}
GHC.IO.Device.$fIxSeekMode_go1 [Occ=LoopBreaker]
  :: Int# -> [SeekMode]
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>m2, Unf=OtherCon []]
GHC.IO.Device.$fIxSeekMode_go1
  = \ (x_i819P :: Int#) ->
      GHC.Types.:
        @ SeekMode
        (tagToEnum# @ SeekMode x_i819P)
        (case x_i819P of wild_X5r {
           __DEFAULT -> GHC.IO.Device.$fIxSeekMode_go1 (+# wild_X5r 1#);
           0# -> GHC.Types.[] @ SeekMode
         })
end Rec }

Rec {
-- RHS size: {terms: 13, types: 5, coercions: 0, joins: 0/0}
GHC.IO.Device.$fIxSeekMode_go [Occ=LoopBreaker]
  :: Int# -> [SeekMode]
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>m2, Unf=OtherCon []]
GHC.IO.Device.$fIxSeekMode_go
  = \ (x_i819P :: Int#) ->
      GHC.Types.:
        @ SeekMode
        (tagToEnum# @ SeekMode x_i819P)
        (case x_i819P of wild_X5r {
           __DEFAULT -> GHC.IO.Device.$fIxSeekMode_go (+# wild_X5r 1#);
           1# -> GHC.Types.[] @ SeekMode
         })
end Rec }

Rec {
-- RHS size: {terms: 13, types: 5, coercions: 0, joins: 0/0}
GHC.IO.Device.$fEnumSeekMode_go3 [Occ=LoopBreaker]
  :: Int# -> [SeekMode]
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>m2, Unf=OtherCon []]
GHC.IO.Device.$fEnumSeekMode_go3
  = \ (x_i819P :: Int#) ->
      GHC.Types.:
        @ SeekMode
        (tagToEnum# @ SeekMode x_i819P)
        (case x_i819P of wild_X5r {
           __DEFAULT -> GHC.IO.Device.$fEnumSeekMode_go3 (+# wild_X5r 1#);
           2# -> GHC.Types.[] @ SeekMode
         })
end Rec }

-- RHS size: {terms: 47, types: 14, coercions: 0, joins: 1/1}
GHC.IO.Device.$w$crange [InlPrag=NOUSERINLINE[0]]
  :: SeekMode -> SeekMode -> [SeekMode]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [48 122] 195 0}]
GHC.IO.Device.$w$crange
  = \ (ww_s81Ga :: SeekMode) (ww1_s81Gb :: SeekMode) ->
      join {
        $j_s81hd [Dmd=<C(S),1*C1(U)>] :: Int# -> [SeekMode]
        [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []]
        $j_s81hd (a#_a80UQ [OS=OneShot]
                    :: Int#
                    Unf=OtherCon [])
          = case ww1_s81Gb of {
              AbsoluteSeek ->
                case ># a#_a80UQ 0# of {
                  __DEFAULT -> GHC.IO.Device.$fIxSeekMode_go1 a#_a80UQ;
                  1# -> GHC.Types.[] @ SeekMode
                };
              RelativeSeek ->
                case ># a#_a80UQ 1# of {
                  __DEFAULT -> GHC.IO.Device.$fIxSeekMode_go a#_a80UQ;
                  1# -> GHC.Types.[] @ SeekMode
                };
              SeekFromEnd ->
                case ># a#_a80UQ 2# of {
                  __DEFAULT -> GHC.IO.Device.$fEnumSeekMode_go3 a#_a80UQ;
                  1# -> GHC.Types.[] @ SeekMode
                }
            } } in
      case ww_s81Ga of {
        AbsoluteSeek -> jump $j_s81hd 0#;
        RelativeSeek -> jump $j_s81hd 1#;
        SeekFromEnd -> jump $j_s81hd 2#
      }

-- RHS size: {terms: 7, types: 8, coercions: 0, joins: 0/0}
GHC.IO.Device.$fIxSeekMode_$crange [InlPrag=NOUSERINLINE[0]]
  :: (SeekMode, SeekMode) -> [SeekMode]
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SS),1*U(1*U,1*U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s81G7 [Occ=Once!] :: (SeekMode, SeekMode)) ->
                 case w_s81G7 of { (ww1_s81Ga [Occ=Once], ww2_s81Gb [Occ=Once]) ->
                 GHC.IO.Device.$w$crange ww1_s81Ga ww2_s81Gb
                 }}]
GHC.IO.Device.$fIxSeekMode_$crange
  = \ (w_s81G7 :: (SeekMode, SeekMode)) ->
      case w_s81G7 of { (ww1_s81Ga, ww2_s81Gb) ->
      GHC.IO.Device.$w$crange ww1_s81Ga ww2_s81Gb
      }

-- RHS size: {terms: 39, types: 7, coercions: 0, joins: 0/0}
GHC.IO.Device.$w$crangeSize [InlPrag=NOUSERINLINE[0]]
  :: SeekMode -> SeekMode -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [100 120] 180 0}]
GHC.IO.Device.$w$crangeSize
  = \ (ww_s81Gh :: SeekMode) (ww1_s81Gi :: SeekMode) ->
      case GHC.IO.Device.$w$cinRange ww_s81Gh ww1_s81Gi ww1_s81Gi of {
        False -> 0#;
        True ->
          case ww_s81Gh of {
            AbsoluteSeek ->
              case ww1_s81Gi of {
                AbsoluteSeek -> 1#;
                RelativeSeek -> 2#;
                SeekFromEnd -> 3#
              };
            RelativeSeek ->
              case ww1_s81Gi of {
                AbsoluteSeek -> 0#;
                RelativeSeek -> 1#;
                SeekFromEnd -> 2#
              };
            SeekFromEnd ->
              case ww1_s81Gi of {
                AbsoluteSeek -> -1#;
                RelativeSeek -> 0#;
                SeekFromEnd -> 1#
              }
          }
      }

-- RHS size: {terms: 11, types: 9, coercions: 0, joins: 0/0}
GHC.IO.Device.$fIxSeekMode_$crangeSize [InlPrag=NOUSERINLINE[0]]
  :: (SeekMode, SeekMode) -> Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SS),1*U(U,U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s81Ge [Occ=Once!] :: (SeekMode, SeekMode)) ->
                 case w_s81Ge of { (ww1_s81Gh [Occ=Once], ww2_s81Gi [Occ=Once]) ->
                 case GHC.IO.Device.$w$crangeSize ww1_s81Gh ww2_s81Gi of ww3_s81Gm
                 { __DEFAULT ->
                 GHC.Types.I# ww3_s81Gm
                 }
                 }}]
GHC.IO.Device.$fIxSeekMode_$crangeSize
  = \ (w_s81Ge :: (SeekMode, SeekMode)) ->
      case w_s81Ge of { (ww1_s81Gh, ww2_s81Gi) ->
      case GHC.IO.Device.$w$crangeSize ww1_s81Gh ww2_s81Gi of ww3_s81Gm
      { __DEFAULT ->
      GHC.Types.I# ww3_s81Gm
      }
      }

-- RHS size: {terms: 31, types: 6, coercions: 0, joins: 0/0}
GHC.IO.Device.$w$cunsafeRangeSize [InlPrag=NOUSERINLINE[0]]
  :: SeekMode -> SeekMode -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [100 120] 120 0}]
GHC.IO.Device.$w$cunsafeRangeSize
  = \ (ww_s81Gr :: SeekMode) (ww1_s81Gs :: SeekMode) ->
      case ww_s81Gr of {
        AbsoluteSeek ->
          case ww1_s81Gs of {
            AbsoluteSeek -> 1#;
            RelativeSeek -> 2#;
            SeekFromEnd -> 3#
          };
        RelativeSeek ->
          case ww1_s81Gs of {
            AbsoluteSeek -> 0#;
            RelativeSeek -> 1#;
            SeekFromEnd -> 2#
          };
        SeekFromEnd ->
          case ww1_s81Gs of {
            AbsoluteSeek -> -1#;
            RelativeSeek -> 0#;
            SeekFromEnd -> 1#
          }
      }

-- RHS size: {terms: 11, types: 9, coercions: 0, joins: 0/0}
GHC.IO.Device.$fIxSeekMode_$cunsafeRangeSize [InlPrag=NOUSERINLINE[0]]
  :: (SeekMode, SeekMode) -> Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SS),1*U(1*U,1*U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s81Go [Occ=Once!] :: (SeekMode, SeekMode)) ->
                 case w_s81Go of { (ww1_s81Gr [Occ=Once], ww2_s81Gs [Occ=Once]) ->
                 case GHC.IO.Device.$w$cunsafeRangeSize ww1_s81Gr ww2_s81Gs
                 of ww3_s81Gw
                 { __DEFAULT ->
                 GHC.Types.I# ww3_s81Gw
                 }
                 }}]
GHC.IO.Device.$fIxSeekMode_$cunsafeRangeSize
  = \ (w_s81Go :: (SeekMode, SeekMode)) ->
      case w_s81Go of { (ww1_s81Gr, ww2_s81Gs) ->
      case GHC.IO.Device.$w$cunsafeRangeSize ww1_s81Gr ww2_s81Gs
      of ww3_s81Gw
      { __DEFAULT ->
      GHC.Types.I# ww3_s81Gw
      }
      }

-- RHS size: {terms: 20, types: 11, coercions: 0, joins: 0/0}
GHC.IO.Device.$fIxSeekMode_$cindex [InlPrag=INLINE (sat-args=2)]
  :: (SeekMode, SeekMode) -> SeekMode -> Int
[GblId,
 Arity=2,
 Str=<S(SS),1*U(U,1*U)><S,U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=False,boring_ok=False)
         Tmpl= \ (b_i813Q :: (SeekMode, SeekMode)) (i_i813R :: SeekMode) ->
                 case GHC.IO.Device.$fIxSeekMode_$cinRange b_i813Q i_i813R of {
                   False -> hopelessIndexError;
                   True -> GHC.IO.Device.$fIxSeekMode_$cunsafeIndex b_i813Q i_i813R
                 }}]
GHC.IO.Device.$fIxSeekMode_$cindex
  = \ (eta_X5V :: (SeekMode, SeekMode)) (eta1_XbP :: SeekMode) ->
      case eta_X5V of { (ww1_s81FZ, ww2_s81G0) ->
      case GHC.IO.Device.$w$cinRange ww1_s81FZ ww2_s81G0 eta1_XbP of {
        False -> hopelessIndexError;
        True ->
          case GHC.IO.Device.$w$cunsafeIndex ww1_s81FZ eta1_XbP of ww3_s81FR
          { __DEFAULT ->
          GHC.Types.I# ww3_s81FR
          }
      }
      }

-- RHS size: {terms: 8, types: 1, coercions: 0, joins: 0/0}
GHC.IO.Device.$fIxSeekMode [InlPrag=NOUSERINLINE CONLIKE]
  :: Ix SeekMode
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Arr.C:Ix TYPE: SeekMode
                    GHC.IO.Device.$fOrdSeekMode
                    GHC.IO.Device.$fIxSeekMode_$crange
                    GHC.IO.Device.$fIxSeekMode_$cindex
                    GHC.IO.Device.$fIxSeekMode_$cunsafeIndex
                    GHC.IO.Device.$fIxSeekMode_$cinRange
                    GHC.IO.Device.$fIxSeekMode_$crangeSize
                    GHC.IO.Device.$fIxSeekMode_$cunsafeRangeSize]
GHC.IO.Device.$fIxSeekMode
  = GHC.Arr.C:Ix
      @ SeekMode
      GHC.IO.Device.$fOrdSeekMode
      GHC.IO.Device.$fIxSeekMode_$crange
      GHC.IO.Device.$fIxSeekMode_$cindex
      GHC.IO.Device.$fIxSeekMode_$cunsafeIndex
      GHC.IO.Device.$fIxSeekMode_$cinRange
      GHC.IO.Device.$fIxSeekMode_$crangeSize
      GHC.IO.Device.$fIxSeekMode_$cunsafeRangeSize

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl3_r81ZB :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl3_r81ZB = "error"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl4_r81ZC :: [Char]
[GblId]
lvl4_r81ZC = unpackCString# lvl3_r81ZB

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Device.$trModule4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Device.$trModule4 = "base"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl5_r81ZD :: [Char]
[GblId]
lvl5_r81ZD = unpackCString# GHC.IO.Device.$trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Device.$trModule2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.IO.Device.$trModule2 = "GHC.IO.Device"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl6_r81ZE :: [Char]
[GblId]
lvl6_r81ZE = unpackCString# GHC.IO.Device.$trModule2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl7_r81ZF :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl7_r81ZF = "./GHC/IO/Device.hs"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl8_r81ZG :: [Char]
[GblId]
lvl8_r81ZG = unpackCString# lvl7_r81ZF

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl9_r81ZH :: Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl9_r81ZH = GHC.Types.I# 173#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl10_r81ZI :: Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl10_r81ZI = GHC.Types.I# 16#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl11_r81ZJ :: Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl11_r81ZJ = GHC.Types.I# 20#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl12_r81ZK :: GHC.Stack.Types.SrcLoc
[GblId, Str=m, Unf=OtherCon []]
lvl12_r81ZK
  = GHC.Stack.Types.SrcLoc
      lvl5_r81ZD
      lvl6_r81ZE
      lvl8_r81ZG
      lvl9_r81ZH
      lvl10_r81ZI
      lvl9_r81ZH
      lvl11_r81ZJ

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl13_r81ZL :: GHC.Stack.Types.CallStack
[GblId, Str=m2, Unf=OtherCon []]
lvl13_r81ZL
  = GHC.Stack.Types.PushCallStack
      lvl4_r81ZC lvl12_r81ZK GHC.Stack.Types.EmptyCallStack

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl14_r81ZM :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl14_r81ZM
  = "pred{SeekMode}: tried to take `pred' of first tag in enumeration"#

-- RHS size: {terms: 4, types: 2, coercions: 4, joins: 0/0}
GHC.IO.Device.$fEnumSeekMode4 :: SeekMode
[GblId, Str=x]
GHC.IO.Device.$fEnumSeekMode4
  = error
      @ 'LiftedRep
      @ SeekMode
      (lvl13_r81ZL
       `cast` (Sym (GHC.Classes.N:IP[0]
                        <"callStack">_N <GHC.Stack.Types.CallStack>_N)
               :: (GHC.Stack.Types.CallStack :: *)
                  ~R# (?callStack::GHC.Stack.Types.CallStack :: Constraint)))
      (unpackCString# lvl14_r81ZM)

-- RHS size: {terms: 9, types: 2, coercions: 0, joins: 0/0}
GHC.IO.Device.$fEnumSeekMode_$cpred :: SeekMode -> SeekMode
[GblId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (a_a80V6 [Occ=Once!] :: SeekMode) ->
                 case a_a80V6 of {
                   AbsoluteSeek -> GHC.IO.Device.$fEnumSeekMode4;
                   RelativeSeek -> GHC.IO.Device.AbsoluteSeek;
                   SeekFromEnd -> GHC.IO.Device.RelativeSeek
                 }}]
GHC.IO.Device.$fEnumSeekMode_$cpred
  = \ (a_a80V6 :: SeekMode) ->
      case a_a80V6 of {
        AbsoluteSeek -> GHC.IO.Device.$fEnumSeekMode4;
        RelativeSeek -> GHC.IO.Device.AbsoluteSeek;
        SeekFromEnd -> GHC.IO.Device.RelativeSeek
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl15_r81ZN :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl15_r81ZN
  = "succ{SeekMode}: tried to take `succ' of last tag in enumeration"#

-- RHS size: {terms: 4, types: 2, coercions: 4, joins: 0/0}
GHC.IO.Device.$fEnumSeekMode5 :: SeekMode
[GblId, Str=x]
GHC.IO.Device.$fEnumSeekMode5
  = error
      @ 'LiftedRep
      @ SeekMode
      (lvl13_r81ZL
       `cast` (Sym (GHC.Classes.N:IP[0]
                        <"callStack">_N <GHC.Stack.Types.CallStack>_N)
               :: (GHC.Stack.Types.CallStack :: *)
                  ~R# (?callStack::GHC.Stack.Types.CallStack :: Constraint)))
      (unpackCString# lvl15_r81ZN)

-- RHS size: {terms: 9, types: 2, coercions: 0, joins: 0/0}
GHC.IO.Device.$fEnumSeekMode_$csucc :: SeekMode -> SeekMode
[GblId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (a_a80V4 [Occ=Once!] :: SeekMode) ->
                 case a_a80V4 of {
                   AbsoluteSeek -> GHC.IO.Device.RelativeSeek;
                   RelativeSeek -> GHC.IO.Device.SeekFromEnd;
                   SeekFromEnd -> GHC.IO.Device.$fEnumSeekMode5
                 }}]
GHC.IO.Device.$fEnumSeekMode_$csucc
  = \ (a_a80V4 :: SeekMode) ->
      case a_a80V4 of {
        AbsoluteSeek -> GHC.IO.Device.RelativeSeek;
        RelativeSeek -> GHC.IO.Device.SeekFromEnd;
        SeekFromEnd -> GHC.IO.Device.$fEnumSeekMode5
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl16_r81ZO :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl16_r81ZO = ") is outside of enumeration's range (0,"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl17_r81ZP :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl17_r81ZP = ")"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl18_r81ZQ :: [Char]
[GblId]
lvl18_r81ZQ = unpackCString# lvl17_r81ZP

-- RHS size: {terms: 9, types: 10, coercions: 0, joins: 0/0}
lvl19_r81ZR :: [Char]
[GblId]
lvl19_r81ZR
  = case GHC.Show.$wshowSignedInt 0# 2# lvl18_r81ZQ of
    { (# ww5_i7NVe, ww6_i7NVf #) ->
    GHC.Types.: @ Char ww5_i7NVe ww6_i7NVf
    }

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
lvl20_r81ZS :: [Char]
[GblId]
lvl20_r81ZS = unpackAppendCString# lvl16_r81ZO lvl19_r81ZR

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl21_r81ZT :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl21_r81ZT = "toEnum{SeekMode}: tag ("#

-- RHS size: {terms: 14, types: 13, coercions: 4, joins: 0/0}
GHC.IO.Device.$wlvl [InlPrag=NOUSERINLINE[0]] :: Int# -> SeekMode
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []]
GHC.IO.Device.$wlvl
  = \ (ww_s81GB :: Int#) ->
      error
        @ 'LiftedRep
        @ SeekMode
        (lvl13_r81ZL
         `cast` (Sym (GHC.Classes.N:IP[0]
                          <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                 :: (GHC.Stack.Types.CallStack :: *)
                    ~R# (?callStack::GHC.Stack.Types.CallStack :: Constraint)))
        (unpackAppendCString#
           lvl21_r81ZT
           (case GHC.Show.$wshowSignedInt 0# ww_s81GB lvl20_r81ZS of
            { (# ww5_i7NVe, ww6_i7NVf #) ->
            GHC.Types.: @ Char ww5_i7NVe ww6_i7NVf
            }))

-- RHS size: {terms: 19, types: 4, coercions: 0, joins: 0/0}
GHC.IO.Device.$w$ctoEnum [InlPrag=NOUSERINLINE[0]]
  :: Int# -> SeekMode
[GblId,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 83 0}]
GHC.IO.Device.$w$ctoEnum
  = \ (ww_s81GH :: Int#) ->
      case >=# ww_s81GH 0# of {
        __DEFAULT -> GHC.IO.Device.$wlvl ww_s81GH;
        1# ->
          case <=# ww_s81GH 2# of {
            __DEFAULT -> GHC.IO.Device.$wlvl ww_s81GH;
            1# -> tagToEnum# @ SeekMode ww_s81GH
          }
      }

-- RHS size: {terms: 6, types: 3, coercions: 0, joins: 0/0}
GHC.IO.Device.$fEnumSeekMode_$ctoEnum [InlPrag=NOUSERINLINE[0]]
  :: Int -> SeekMode
[GblId,
 Arity=1,
 Str=<S(S),1*U(U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s81GE [Occ=Once!] :: Int) ->
                 case w_s81GE of { I# ww1_s81GH [Occ=Once] ->
                 GHC.IO.Device.$w$ctoEnum ww1_s81GH
                 }}]
GHC.IO.Device.$fEnumSeekMode_$ctoEnum
  = \ (w_s81GE :: Int) ->
      case w_s81GE of { I# ww1_s81GH ->
      GHC.IO.Device.$w$ctoEnum ww1_s81GH
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Device.$fEnumSeekMode3 :: [SeekMode]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Device.$fEnumSeekMode3 = GHC.IO.Device.$fEnumSeekMode_go3 0#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Device.$fEnumSeekMode2 :: [SeekMode]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Device.$fEnumSeekMode2 = GHC.IO.Device.$fEnumSeekMode_go3 1#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Device.$fEnumSeekMode1 :: [SeekMode]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Device.$fEnumSeekMode1 = GHC.IO.Device.$fEnumSeekMode_go3 2#

-- RHS size: {terms: 9, types: 2, coercions: 0, joins: 0/0}
GHC.IO.Device.$fEnumSeekMode_$cenumFrom :: SeekMode -> [SeekMode]
[GblId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [40] 30 0}]
GHC.IO.Device.$fEnumSeekMode_$cenumFrom
  = \ (a_a80V9 :: SeekMode) ->
      case a_a80V9 of {
        AbsoluteSeek -> GHC.IO.Device.$fEnumSeekMode3;
        RelativeSeek -> GHC.IO.Device.$fEnumSeekMode2;
        SeekFromEnd -> GHC.IO.Device.$fEnumSeekMode1
      }

-- RHS size: {terms: 242, types: 95, coercions: 0, joins: 2/14}
GHC.IO.Device.$fEnumSeekMode_$cenumFromThen
  :: SeekMode -> SeekMode -> [SeekMode]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []]
GHC.IO.Device.$fEnumSeekMode_$cenumFromThen
  = \ (a_a80Vb :: SeekMode) (b_a80Vc :: SeekMode) ->
      join {
        $j_s81hF [Dmd=<C(S),1*C1(U)>] :: Int# -> [SeekMode]
        [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []]
        $j_s81hF (a#_a80Vd [OS=OneShot]
                    :: Int#
                    Unf=OtherCon [])
          = join {
              $j1_s81hD [Dmd=<C(S),1*C1(U)>] :: Int# -> [SeekMode]
              [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []]
              $j1_s81hD (b#_a80Ve [OS=OneShot]
                           :: Int#
                           Unf=OtherCon [])
                = case ># a#_a80Vd b#_a80Ve of {
                    __DEFAULT ->
                      case >=# b#_a80Ve a#_a80Vd of {
                        __DEFAULT ->
                          case ># 2# b#_a80Ve of {
                            __DEFAULT ->
                              GHC.Types.:
                                @ SeekMode
                                (tagToEnum# @ SeekMode a#_a80Vd)
                                (let {
                                   delta_i81tM [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   delta_i81tM = -# b#_a80Ve a#_a80Vd } in
                                 let {
                                   y'_i81tN [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   y'_i81tN = -# 2# delta_i81tM } in
                                 letrec {
                                   go_dn_i81tO [Occ=LoopBreaker] :: Int# -> [SeekMode]
                                   [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
                                   go_dn_i81tO
                                     = \ (x_i81tP :: Int#) ->
                                         case <# x_i81tP y'_i81tN of {
                                           __DEFAULT ->
                                             GHC.Types.:
                                               @ SeekMode
                                               (tagToEnum# @ SeekMode x_i81tP)
                                               (go_dn_i81tO (+# x_i81tP delta_i81tM));
                                           1# ->
                                             GHC.Types.:
                                               @ SeekMode
                                               (tagToEnum# @ SeekMode x_i81tP)
                                               (GHC.Types.[] @ SeekMode)
                                         }; } in
                                 go_dn_i81tO b#_a80Ve);
                            1# ->
                              case ># 2# a#_a80Vd of {
                                __DEFAULT ->
                                  GHC.Types.:
                                    @ SeekMode
                                    (tagToEnum# @ SeekMode a#_a80Vd)
                                    (GHC.Types.[] @ SeekMode);
                                1# -> GHC.Types.[] @ SeekMode
                              }
                          };
                        1# ->
                          case <# 2# b#_a80Ve of {
                            __DEFAULT ->
                              GHC.Types.:
                                @ SeekMode
                                (tagToEnum# @ SeekMode a#_a80Vd)
                                (let {
                                   delta_i81u2 [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   delta_i81u2 = -# b#_a80Ve a#_a80Vd } in
                                 let {
                                   y'_i81u3 [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   y'_i81u3 = -# 2# delta_i81u2 } in
                                 letrec {
                                   go_up_i81u4 [Occ=LoopBreaker] :: Int# -> [SeekMode]
                                   [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
                                   go_up_i81u4
                                     = \ (x_i81u5 :: Int#) ->
                                         case ># x_i81u5 y'_i81u3 of {
                                           __DEFAULT ->
                                             GHC.Types.:
                                               @ SeekMode
                                               (tagToEnum# @ SeekMode x_i81u5)
                                               (go_up_i81u4 (+# x_i81u5 delta_i81u2));
                                           1# ->
                                             GHC.Types.:
                                               @ SeekMode
                                               (tagToEnum# @ SeekMode x_i81u5)
                                               (GHC.Types.[] @ SeekMode)
                                         }; } in
                                 go_up_i81u4 b#_a80Ve);
                            1# ->
                              case <# 2# a#_a80Vd of {
                                __DEFAULT ->
                                  GHC.Types.:
                                    @ SeekMode
                                    (tagToEnum# @ SeekMode a#_a80Vd)
                                    (GHC.Types.[] @ SeekMode);
                                1# -> GHC.Types.[] @ SeekMode
                              }
                          }
                      };
                    1# ->
                      case >=# b#_a80Ve a#_a80Vd of {
                        __DEFAULT ->
                          case ># 0# b#_a80Ve of {
                            __DEFAULT ->
                              GHC.Types.:
                                @ SeekMode
                                (tagToEnum# @ SeekMode a#_a80Vd)
                                (let {
                                   delta_i81tM [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   delta_i81tM = -# b#_a80Ve a#_a80Vd } in
                                 let {
                                   y'_i81tN [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   y'_i81tN = -# 0# delta_i81tM } in
                                 letrec {
                                   go_dn_i81tO [Occ=LoopBreaker] :: Int# -> [SeekMode]
                                   [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
                                   go_dn_i81tO
                                     = \ (x_i81tP :: Int#) ->
                                         case <# x_i81tP y'_i81tN of {
                                           __DEFAULT ->
                                             GHC.Types.:
                                               @ SeekMode
                                               (tagToEnum# @ SeekMode x_i81tP)
                                               (go_dn_i81tO (+# x_i81tP delta_i81tM));
                                           1# ->
                                             GHC.Types.:
                                               @ SeekMode
                                               (tagToEnum# @ SeekMode x_i81tP)
                                               (GHC.Types.[] @ SeekMode)
                                         }; } in
                                 go_dn_i81tO b#_a80Ve);
                            1# ->
                              case ># 0# a#_a80Vd of {
                                __DEFAULT ->
                                  GHC.Types.:
                                    @ SeekMode
                                    (tagToEnum# @ SeekMode a#_a80Vd)
                                    (GHC.Types.[] @ SeekMode);
                                1# -> GHC.Types.[] @ SeekMode
                              }
                          };
                        1# ->
                          case <# 0# b#_a80Ve of {
                            __DEFAULT ->
                              GHC.Types.:
                                @ SeekMode
                                (tagToEnum# @ SeekMode a#_a80Vd)
                                (let {
                                   delta_i81u2 [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   delta_i81u2 = -# b#_a80Ve a#_a80Vd } in
                                 let {
                                   y'_i81u3 [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   y'_i81u3 = -# 0# delta_i81u2 } in
                                 letrec {
                                   go_up_i81u4 [Occ=LoopBreaker] :: Int# -> [SeekMode]
                                   [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
                                   go_up_i81u4
                                     = \ (x_i81u5 :: Int#) ->
                                         case ># x_i81u5 y'_i81u3 of {
                                           __DEFAULT ->
                                             GHC.Types.:
                                               @ SeekMode
                                               (tagToEnum# @ SeekMode x_i81u5)
                                               (go_up_i81u4 (+# x_i81u5 delta_i81u2));
                                           1# ->
                                             GHC.Types.:
                                               @ SeekMode
                                               (tagToEnum# @ SeekMode x_i81u5)
                                               (GHC.Types.[] @ SeekMode)
                                         }; } in
                                 go_up_i81u4 b#_a80Ve);
                            1# ->
                              case <# 0# a#_a80Vd of {
                                __DEFAULT ->
                                  GHC.Types.:
                                    @ SeekMode
                                    (tagToEnum# @ SeekMode a#_a80Vd)
                                    (GHC.Types.[] @ SeekMode);
                                1# -> GHC.Types.[] @ SeekMode
                              }
                          }
                      }
                  } } in
            case b_a80Vc of {
              AbsoluteSeek -> jump $j1_s81hD 0#;
              RelativeSeek -> jump $j1_s81hD 1#;
              SeekFromEnd -> jump $j1_s81hD 2#
            } } in
      case a_a80Vb of {
        AbsoluteSeek -> jump $j_s81hF 0#;
        RelativeSeek -> jump $j_s81hF 1#;
        SeekFromEnd -> jump $j_s81hF 2#
      }

Rec {
-- RHS size: {terms: 29, types: 7, coercions: 0, joins: 0/0}
GHC.IO.Device.$fEnumSeekMode_go2 [Occ=LoopBreaker]
  :: Int# -> [SeekMode]
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []]
GHC.IO.Device.$fEnumSeekMode_go2
  = \ (x_i819P :: Int#) ->
      GHC.Types.:
        @ SeekMode
        (case >=# x_i819P 0# of {
           __DEFAULT -> GHC.IO.Device.$wlvl x_i819P;
           1# ->
             case <=# x_i819P 2# of {
               __DEFAULT -> GHC.IO.Device.$wlvl x_i819P;
               1# -> tagToEnum# @ SeekMode x_i819P
             }
         })
        (case x_i819P of wild_X5Q {
           __DEFAULT -> GHC.IO.Device.$fEnumSeekMode_go2 (+# wild_X5Q 1#);
           0# -> GHC.Types.[] @ SeekMode
         })
end Rec }

Rec {
-- RHS size: {terms: 29, types: 7, coercions: 0, joins: 0/0}
GHC.IO.Device.$fEnumSeekMode_go1 [Occ=LoopBreaker]
  :: Int# -> [SeekMode]
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []]
GHC.IO.Device.$fEnumSeekMode_go1
  = \ (x_i819P :: Int#) ->
      GHC.Types.:
        @ SeekMode
        (case >=# x_i819P 0# of {
           __DEFAULT -> GHC.IO.Device.$wlvl x_i819P;
           1# ->
             case <=# x_i819P 2# of {
               __DEFAULT -> GHC.IO.Device.$wlvl x_i819P;
               1# -> tagToEnum# @ SeekMode x_i819P
             }
         })
        (case x_i819P of wild_X5Q {
           __DEFAULT -> GHC.IO.Device.$fEnumSeekMode_go1 (+# wild_X5Q 1#);
           1# -> GHC.Types.[] @ SeekMode
         })
end Rec }

Rec {
-- RHS size: {terms: 29, types: 7, coercions: 0, joins: 0/0}
GHC.IO.Device.$fEnumSeekMode_go [Occ=LoopBreaker]
  :: Int# -> [SeekMode]
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []]
GHC.IO.Device.$fEnumSeekMode_go
  = \ (x_i819P :: Int#) ->
      GHC.Types.:
        @ SeekMode
        (case >=# x_i819P 0# of {
           __DEFAULT -> GHC.IO.Device.$wlvl x_i819P;
           1# ->
             case <=# x_i819P 2# of {
               __DEFAULT -> GHC.IO.Device.$wlvl x_i819P;
               1# -> tagToEnum# @ SeekMode x_i819P
             }
         })
        (case x_i819P of wild_X5Q {
           __DEFAULT -> GHC.IO.Device.$fEnumSeekMode_go (+# wild_X5Q 1#);
           2# -> GHC.Types.[] @ SeekMode
         })
end Rec }

-- RHS size: {terms: 47, types: 14, coercions: 0, joins: 1/1}
GHC.IO.Device.$fEnumSeekMode_$cenumFromTo
  :: SeekMode -> SeekMode -> [SeekMode]
[GblId,
 Arity=2,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [48 122] 195 0}]
GHC.IO.Device.$fEnumSeekMode_$cenumFromTo
  = \ (x_i814s :: SeekMode) (y_i814t :: SeekMode) ->
      join {
        $j_s81hI [Dmd=<C(S),1*C1(U)>] :: Int# -> [SeekMode]
        [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []]
        $j_s81hI (x1_i814z [OS=OneShot] :: Int#)
          = case y_i814t of {
              AbsoluteSeek ->
                case ># x1_i814z 0# of {
                  __DEFAULT -> GHC.IO.Device.$fEnumSeekMode_go2 x1_i814z;
                  1# -> GHC.Types.[] @ SeekMode
                };
              RelativeSeek ->
                case ># x1_i814z 1# of {
                  __DEFAULT -> GHC.IO.Device.$fEnumSeekMode_go1 x1_i814z;
                  1# -> GHC.Types.[] @ SeekMode
                };
              SeekFromEnd ->
                case ># x1_i814z 2# of {
                  __DEFAULT -> GHC.IO.Device.$fEnumSeekMode_go x1_i814z;
                  1# -> GHC.Types.[] @ SeekMode
                }
            } } in
      case x_i814s of {
        AbsoluteSeek -> jump $j_s81hI 0#;
        RelativeSeek -> jump $j_s81hI 1#;
        SeekFromEnd -> jump $j_s81hI 2#
      }

-- RHS size: {terms: 730, types: 185, coercions: 0, joins: 2/20}
GHC.IO.Device.$fEnumSeekMode_$cenumFromThenTo
  :: SeekMode -> SeekMode -> SeekMode -> [SeekMode]
[GblId, Arity=3, Str=<S,1*U><S,1*U><S,1*U>, Unf=OtherCon []]
GHC.IO.Device.$fEnumSeekMode_$cenumFromThenTo
  = \ (x1_i814J :: SeekMode)
      (x2_i814K :: SeekMode)
      (y_i814L :: SeekMode) ->
      join {
        $j_s81hN [Dmd=<C(S),1*C1(U)>] :: Int# -> [SeekMode]
        [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []]
        $j_s81hN (x4_i814R [OS=OneShot] :: Int#)
          = join {
              $j1_s81hL [Dmd=<C(S),1*C1(U)>] :: Int# -> [SeekMode]
              [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []]
              $j1_s81hL (x5_i814V [OS=OneShot] :: Int#)
                = case y_i814L of {
                    AbsoluteSeek ->
                      case >=# x5_i814V x4_i814R of {
                        __DEFAULT ->
                          case ># 0# x5_i814V of {
                            __DEFAULT ->
                              GHC.Types.:
                                @ SeekMode
                                (case >=# x4_i814R 0# of {
                                   __DEFAULT -> GHC.IO.Device.$wlvl x4_i814R;
                                   1# ->
                                     case <=# x4_i814R 2# of {
                                       __DEFAULT -> GHC.IO.Device.$wlvl x4_i814R;
                                       1# -> tagToEnum# @ SeekMode x4_i814R
                                     }
                                 })
                                (let {
                                   delta_i81tM [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   delta_i81tM = -# x5_i814V x4_i814R } in
                                 let {
                                   y'_i81tN [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   y'_i81tN = -# 0# delta_i81tM } in
                                 letrec {
                                   go_dn_i81tO [Occ=LoopBreaker] :: Int# -> [SeekMode]
                                   [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
                                   go_dn_i81tO
                                     = \ (x_i81tP :: Int#) ->
                                         case <# x_i81tP y'_i81tN of {
                                           __DEFAULT ->
                                             GHC.Types.:
                                               @ SeekMode
                                               (case >=# x_i81tP 0# of {
                                                  __DEFAULT -> GHC.IO.Device.$wlvl x_i81tP;
                                                  1# ->
                                                    case <=# x_i81tP 2# of {
                                                      __DEFAULT -> GHC.IO.Device.$wlvl x_i81tP;
                                                      1# -> tagToEnum# @ SeekMode x_i81tP
                                                    }
                                                })
                                               (go_dn_i81tO (+# x_i81tP delta_i81tM));
                                           1# ->
                                             GHC.Types.:
                                               @ SeekMode
                                               (case >=# x_i81tP 0# of {
                                                  __DEFAULT -> GHC.IO.Device.$wlvl x_i81tP;
                                                  1# ->
                                                    case <=# x_i81tP 2# of {
                                                      __DEFAULT -> GHC.IO.Device.$wlvl x_i81tP;
                                                      1# -> tagToEnum# @ SeekMode x_i81tP
                                                    }
                                                })
                                               (GHC.Types.[] @ SeekMode)
                                         }; } in
                                 go_dn_i81tO x5_i814V);
                            1# ->
                              case ># 0# x4_i814R of {
                                __DEFAULT ->
                                  GHC.Types.:
                                    @ SeekMode
                                    (case >=# x4_i814R 0# of {
                                       __DEFAULT -> GHC.IO.Device.$wlvl x4_i814R;
                                       1# ->
                                         case <=# x4_i814R 2# of {
                                           __DEFAULT -> GHC.IO.Device.$wlvl x4_i814R;
                                           1# -> tagToEnum# @ SeekMode x4_i814R
                                         }
                                     })
                                    (GHC.Types.[] @ SeekMode);
                                1# -> GHC.Types.[] @ SeekMode
                              }
                          };
                        1# ->
                          case <# 0# x5_i814V of {
                            __DEFAULT ->
                              GHC.Types.:
                                @ SeekMode
                                (case >=# x4_i814R 0# of {
                                   __DEFAULT -> GHC.IO.Device.$wlvl x4_i814R;
                                   1# ->
                                     case <=# x4_i814R 2# of {
                                       __DEFAULT -> GHC.IO.Device.$wlvl x4_i814R;
                                       1# -> tagToEnum# @ SeekMode x4_i814R
                                     }
                                 })
                                (let {
                                   delta_i81u2 [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   delta_i81u2 = -# x5_i814V x4_i814R } in
                                 let {
                                   y'_i81u3 [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   y'_i81u3 = -# 0# delta_i81u2 } in
                                 letrec {
                                   go_up_i81u4 [Occ=LoopBreaker] :: Int# -> [SeekMode]
                                   [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
                                   go_up_i81u4
                                     = \ (x_i81u5 :: Int#) ->
                                         case ># x_i81u5 y'_i81u3 of {
                                           __DEFAULT ->
                                             GHC.Types.:
                                               @ SeekMode
                                               (case >=# x_i81u5 0# of {
                                                  __DEFAULT -> GHC.IO.Device.$wlvl x_i81u5;
                                                  1# ->
                                                    case <=# x_i81u5 2# of {
                                                      __DEFAULT -> GHC.IO.Device.$wlvl x_i81u5;
                                                      1# -> tagToEnum# @ SeekMode x_i81u5
                                                    }
                                                })
                                               (go_up_i81u4 (+# x_i81u5 delta_i81u2));
                                           1# ->
                                             GHC.Types.:
                                               @ SeekMode
                                               (case >=# x_i81u5 0# of {
                                                  __DEFAULT -> GHC.IO.Device.$wlvl x_i81u5;
                                                  1# ->
                                                    case <=# x_i81u5 2# of {
                                                      __DEFAULT -> GHC.IO.Device.$wlvl x_i81u5;
                                                      1# -> tagToEnum# @ SeekMode x_i81u5
                                                    }
                                                })
                                               (GHC.Types.[] @ SeekMode)
                                         }; } in
                                 go_up_i81u4 x5_i814V);
                            1# ->
                              case <# 0# x4_i814R of {
                                __DEFAULT ->
                                  GHC.Types.:
                                    @ SeekMode
                                    (case >=# x4_i814R 0# of {
                                       __DEFAULT -> GHC.IO.Device.$wlvl x4_i814R;
                                       1# ->
                                         case <=# x4_i814R 2# of {
                                           __DEFAULT -> GHC.IO.Device.$wlvl x4_i814R;
                                           1# -> tagToEnum# @ SeekMode x4_i814R
                                         }
                                     })
                                    (GHC.Types.[] @ SeekMode);
                                1# -> GHC.Types.[] @ SeekMode
                              }
                          }
                      };
                    RelativeSeek ->
                      case >=# x5_i814V x4_i814R of {
                        __DEFAULT ->
                          case ># 1# x5_i814V of {
                            __DEFAULT ->
                              GHC.Types.:
                                @ SeekMode
                                (case >=# x4_i814R 0# of {
                                   __DEFAULT -> GHC.IO.Device.$wlvl x4_i814R;
                                   1# ->
                                     case <=# x4_i814R 2# of {
                                       __DEFAULT -> GHC.IO.Device.$wlvl x4_i814R;
                                       1# -> tagToEnum# @ SeekMode x4_i814R
                                     }
                                 })
                                (let {
                                   delta_i81tM [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   delta_i81tM = -# x5_i814V x4_i814R } in
                                 let {
                                   y'_i81tN [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   y'_i81tN = -# 1# delta_i81tM } in
                                 letrec {
                                   go_dn_i81tO [Occ=LoopBreaker] :: Int# -> [SeekMode]
                                   [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
                                   go_dn_i81tO
                                     = \ (x_i81tP :: Int#) ->
                                         case <# x_i81tP y'_i81tN of {
                                           __DEFAULT ->
                                             GHC.Types.:
                                               @ SeekMode
                                               (case >=# x_i81tP 0# of {
                                                  __DEFAULT -> GHC.IO.Device.$wlvl x_i81tP;
                                                  1# ->
                                                    case <=# x_i81tP 2# of {
                                                      __DEFAULT -> GHC.IO.Device.$wlvl x_i81tP;
                                                      1# -> tagToEnum# @ SeekMode x_i81tP
                                                    }
                                                })
                                               (go_dn_i81tO (+# x_i81tP delta_i81tM));
                                           1# ->
                                             GHC.Types.:
                                               @ SeekMode
                                               (case >=# x_i81tP 0# of {
                                                  __DEFAULT -> GHC.IO.Device.$wlvl x_i81tP;
                                                  1# ->
                                                    case <=# x_i81tP 2# of {
                                                      __DEFAULT -> GHC.IO.Device.$wlvl x_i81tP;
                                                      1# -> tagToEnum# @ SeekMode x_i81tP
                                                    }
                                                })
                                               (GHC.Types.[] @ SeekMode)
                                         }; } in
                                 go_dn_i81tO x5_i814V);
                            1# ->
                              case ># 1# x4_i814R of {
                                __DEFAULT ->
                                  GHC.Types.:
                                    @ SeekMode
                                    (case >=# x4_i814R 0# of {
                                       __DEFAULT -> GHC.IO.Device.$wlvl x4_i814R;
                                       1# ->
                                         case <=# x4_i814R 2# of {
                                           __DEFAULT -> GHC.IO.Device.$wlvl x4_i814R;
                                           1# -> tagToEnum# @ SeekMode x4_i814R
                                         }
                                     })
                                    (GHC.Types.[] @ SeekMode);
                                1# -> GHC.Types.[] @ SeekMode
                              }
                          };
                        1# ->
                          case <# 1# x5_i814V of {
                            __DEFAULT ->
                              GHC.Types.:
                                @ SeekMode
                                (case >=# x4_i814R 0# of {
                                   __DEFAULT -> GHC.IO.Device.$wlvl x4_i814R;
                                   1# ->
                                     case <=# x4_i814R 2# of {
                                       __DEFAULT -> GHC.IO.Device.$wlvl x4_i814R;
                                       1# -> tagToEnum# @ SeekMode x4_i814R
                                     }
                                 })
                                (let {
                                   delta_i81u2 [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   delta_i81u2 = -# x5_i814V x4_i814R } in
                                 let {
                                   y'_i81u3 [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   y'_i81u3 = -# 1# delta_i81u2 } in
                                 letrec {
                                   go_up_i81u4 [Occ=LoopBreaker] :: Int# -> [SeekMode]
                                   [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
                                   go_up_i81u4
                                     = \ (x_i81u5 :: Int#) ->
                                         case ># x_i81u5 y'_i81u3 of {
                                           __DEFAULT ->
                                             GHC.Types.:
                                               @ SeekMode
                                               (case >=# x_i81u5 0# of {
                                                  __DEFAULT -> GHC.IO.Device.$wlvl x_i81u5;
                                                  1# ->
                                                    case <=# x_i81u5 2# of {
                                                      __DEFAULT -> GHC.IO.Device.$wlvl x_i81u5;
                                                      1# -> tagToEnum# @ SeekMode x_i81u5
                                                    }
                                                })
                                               (go_up_i81u4 (+# x_i81u5 delta_i81u2));
                                           1# ->
                                             GHC.Types.:
                                               @ SeekMode
                                               (case >=# x_i81u5 0# of {
                                                  __DEFAULT -> GHC.IO.Device.$wlvl x_i81u5;
                                                  1# ->
                                                    case <=# x_i81u5 2# of {
                                                      __DEFAULT -> GHC.IO.Device.$wlvl x_i81u5;
                                                      1# -> tagToEnum# @ SeekMode x_i81u5
                                                    }
                                                })
                                               (GHC.Types.[] @ SeekMode)
                                         }; } in
                                 go_up_i81u4 x5_i814V);
                            1# ->
                              case <# 1# x4_i814R of {
                                __DEFAULT ->
                                  GHC.Types.:
                                    @ SeekMode
                                    (case >=# x4_i814R 0# of {
                                       __DEFAULT -> GHC.IO.Device.$wlvl x4_i814R;
                                       1# ->
                                         case <=# x4_i814R 2# of {
                                           __DEFAULT -> GHC.IO.Device.$wlvl x4_i814R;
                                           1# -> tagToEnum# @ SeekMode x4_i814R
                                         }
                                     })
                                    (GHC.Types.[] @ SeekMode);
                                1# -> GHC.Types.[] @ SeekMode
                              }
                          }
                      };
                    SeekFromEnd ->
                      case >=# x5_i814V x4_i814R of {
                        __DEFAULT ->
                          case ># 2# x5_i814V of {
                            __DEFAULT ->
                              GHC.Types.:
                                @ SeekMode
                                (case >=# x4_i814R 0# of {
                                   __DEFAULT -> GHC.IO.Device.$wlvl x4_i814R;
                                   1# ->
                                     case <=# x4_i814R 2# of {
                                       __DEFAULT -> GHC.IO.Device.$wlvl x4_i814R;
                                       1# -> tagToEnum# @ SeekMode x4_i814R
                                     }
                                 })
                                (let {
                                   delta_i81tM [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   delta_i81tM = -# x5_i814V x4_i814R } in
                                 let {
                                   y'_i81tN [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   y'_i81tN = -# 2# delta_i81tM } in
                                 letrec {
                                   go_dn_i81tO [Occ=LoopBreaker] :: Int# -> [SeekMode]
                                   [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
                                   go_dn_i81tO
                                     = \ (x_i81tP :: Int#) ->
                                         case <# x_i81tP y'_i81tN of {
                                           __DEFAULT ->
                                             GHC.Types.:
                                               @ SeekMode
                                               (case >=# x_i81tP 0# of {
                                                  __DEFAULT -> GHC.IO.Device.$wlvl x_i81tP;
                                                  1# ->
                                                    case <=# x_i81tP 2# of {
                                                      __DEFAULT -> GHC.IO.Device.$wlvl x_i81tP;
                                                      1# -> tagToEnum# @ SeekMode x_i81tP
                                                    }
                                                })
                                               (go_dn_i81tO (+# x_i81tP delta_i81tM));
                                           1# ->
                                             GHC.Types.:
                                               @ SeekMode
                                               (case >=# x_i81tP 0# of {
                                                  __DEFAULT -> GHC.IO.Device.$wlvl x_i81tP;
                                                  1# ->
                                                    case <=# x_i81tP 2# of {
                                                      __DEFAULT -> GHC.IO.Device.$wlvl x_i81tP;
                                                      1# -> tagToEnum# @ SeekMode x_i81tP
                                                    }
                                                })
                                               (GHC.Types.[] @ SeekMode)
                                         }; } in
                                 go_dn_i81tO x5_i814V);
                            1# ->
                              case ># 2# x4_i814R of {
                                __DEFAULT ->
                                  GHC.Types.:
                                    @ SeekMode
                                    (case >=# x4_i814R 0# of {
                                       __DEFAULT -> GHC.IO.Device.$wlvl x4_i814R;
                                       1# ->
                                         case <=# x4_i814R 2# of {
                                           __DEFAULT -> GHC.IO.Device.$wlvl x4_i814R;
                                           1# -> tagToEnum# @ SeekMode x4_i814R
                                         }
                                     })
                                    (GHC.Types.[] @ SeekMode);
                                1# -> GHC.Types.[] @ SeekMode
                              }
                          };
                        1# ->
                          case <# 2# x5_i814V of {
                            __DEFAULT ->
                              GHC.Types.:
                                @ SeekMode
                                (case >=# x4_i814R 0# of {
                                   __DEFAULT -> GHC.IO.Device.$wlvl x4_i814R;
                                   1# ->
                                     case <=# x4_i814R 2# of {
                                       __DEFAULT -> GHC.IO.Device.$wlvl x4_i814R;
                                       1# -> tagToEnum# @ SeekMode x4_i814R
                                     }
                                 })
                                (let {
                                   delta_i81u2 [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   delta_i81u2 = -# x5_i814V x4_i814R } in
                                 let {
                                   y'_i81u3 [Dmd=<S,U>] :: Int#
                                   [LclId]
                                   y'_i81u3 = -# 2# delta_i81u2 } in
                                 letrec {
                                   go_up_i81u4 [Occ=LoopBreaker] :: Int# -> [SeekMode]
                                   [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
                                   go_up_i81u4
                                     = \ (x_i81u5 :: Int#) ->
                                         case ># x_i81u5 y'_i81u3 of {
                                           __DEFAULT ->
                                             GHC.Types.:
                                               @ SeekMode
                                               (case >=# x_i81u5 0# of {
                                                  __DEFAULT -> GHC.IO.Device.$wlvl x_i81u5;
                                                  1# ->
                                                    case <=# x_i81u5 2# of {
                                                      __DEFAULT -> GHC.IO.Device.$wlvl x_i81u5;
                                                      1# -> tagToEnum# @ SeekMode x_i81u5
                                                    }
                                                })
                                               (go_up_i81u4 (+# x_i81u5 delta_i81u2));
                                           1# ->
                                             GHC.Types.:
                                               @ SeekMode
                                               (case >=# x_i81u5 0# of {
                                                  __DEFAULT -> GHC.IO.Device.$wlvl x_i81u5;
                                                  1# ->
                                                    case <=# x_i81u5 2# of {
                                                      __DEFAULT -> GHC.IO.Device.$wlvl x_i81u5;
                                                      1# -> tagToEnum# @ SeekMode x_i81u5
                                                    }
                                                })
                                               (GHC.Types.[] @ SeekMode)
                                         }; } in
                                 go_up_i81u4 x5_i814V);
                            1# ->
                              case <# 2# x4_i814R of {
                                __DEFAULT ->
                                  GHC.Types.:
                                    @ SeekMode
                                    (case >=# x4_i814R 0# of {
                                       __DEFAULT -> GHC.IO.Device.$wlvl x4_i814R;
                                       1# ->
                                         case <=# x4_i814R 2# of {
                                           __DEFAULT -> GHC.IO.Device.$wlvl x4_i814R;
                                           1# -> tagToEnum# @ SeekMode x4_i814R
                                         }
                                     })
                                    (GHC.Types.[] @ SeekMode);
                                1# -> GHC.Types.[] @ SeekMode
                              }
                          }
                      }
                  } } in
            case x2_i814K of {
              AbsoluteSeek -> jump $j1_s81hL 0#;
              RelativeSeek -> jump $j1_s81hL 1#;
              SeekFromEnd -> jump $j1_s81hL 2#
            } } in
      case x1_i814J of {
        AbsoluteSeek -> jump $j_s81hN 0#;
        RelativeSeek -> jump $j_s81hN 1#;
        SeekFromEnd -> jump $j_s81hN 2#
      }

-- RHS size: {terms: 9, types: 1, coercions: 0, joins: 0/0}
GHC.IO.Device.$fEnumSeekMode [InlPrag=NOUSERINLINE CONLIKE]
  :: Enum SeekMode
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Enum.C:Enum TYPE: SeekMode
                       GHC.IO.Device.$fEnumSeekMode_$csucc
                       GHC.IO.Device.$fEnumSeekMode_$cpred
                       GHC.IO.Device.$fEnumSeekMode_$ctoEnum
                       GHC.IO.Device.$fEnumSeekMode_$cfromEnum
                       GHC.IO.Device.$fEnumSeekMode_$cenumFrom
                       GHC.IO.Device.$fEnumSeekMode_$cenumFromThen
                       GHC.IO.Device.$fEnumSeekMode_$cenumFromTo
                       GHC.IO.Device.$fEnumSeekMode_$cenumFromThenTo]
GHC.IO.Device.$fEnumSeekMode
  = GHC.Enum.C:Enum
      @ SeekMode
      GHC.IO.Device.$fEnumSeekMode_$csucc
      GHC.IO.Device.$fEnumSeekMode_$cpred
      GHC.IO.Device.$fEnumSeekMode_$ctoEnum
      GHC.IO.Device.$fEnumSeekMode_$cfromEnum
      GHC.IO.Device.$fEnumSeekMode_$cenumFrom
      GHC.IO.Device.$fEnumSeekMode_$cenumFromThen
      GHC.IO.Device.$fEnumSeekMode_$cenumFromTo
      GHC.IO.Device.$fEnumSeekMode_$cenumFromThenTo

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Device.$trModule3 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Device.$trModule3
  = GHC.Types.TrNameS GHC.IO.Device.$trModule4

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Device.$trModule1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Device.$trModule1
  = GHC.Types.TrNameS GHC.IO.Device.$trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Device.$trModule :: Module
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.IO.Device.$trModule
  = GHC.Types.Module
      GHC.IO.Device.$trModule3 GHC.IO.Device.$trModule1

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_r81ZU :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep_r81ZU
  = GHC.Types.KindRepTyConApp
      GHC.Word.$tcWord8 (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep1_r81ZV :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep1_r81ZV
  = GHC.Types.KindRepTyConApp
      integer-simple-0.1.1.1:GHC.Integer.Type.$tcInteger
      (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep2_r81ZW :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep2_r81ZW
  = GHC.Types.KindRepTyConApp
      GHC.Tuple.$tc() (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep3_r81ZX :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep3_r81ZX
  = GHC.Types.KindRepTyConApp
      GHC.Types.$tcInt (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep4_r81ZY :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep4_r81ZY
  = GHC.Types.KindRepTyConApp
      GHC.Types.$tcBool (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep5_r81ZZ :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep5_r81ZZ
  = GHC.Types.KindRepTyConApp
      GHC.Types.$tcConstraint (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep6_r8200 :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep6_r8200
  = GHC.Types.: @ KindRep $krep3_r81ZX (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep7_r8201 :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep7_r8201
  = GHC.Types.KindRepTyConApp GHC.Types.$tcIO $krep6_r8200

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep8_r8202 :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep8_r8202
  = GHC.Types.: @ KindRep $krep1_r81ZV (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep9_r8203 :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep9_r8203
  = GHC.Types.KindRepTyConApp GHC.Types.$tcIO $krep8_r8202

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep10_r8204 :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep10_r8204
  = GHC.Types.: @ KindRep $krep2_r81ZW (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep11_r8205 :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep11_r8205
  = GHC.Types.KindRepTyConApp GHC.Types.$tcIO $krep10_r8204

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep12_r8206 :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep12_r8206
  = GHC.Types.: @ KindRep $krep4_r81ZY (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep13_r8207 :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep13_r8207
  = GHC.Types.KindRepTyConApp GHC.Types.$tcIO $krep12_r8206

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep14_r8208 :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep14_r8208
  = GHC.Types.KindRepTyConApp GHC.Base.$tcMaybe $krep6_r8200

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep15_r8209 :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep15_r8209
  = GHC.Types.: @ KindRep $krep14_r8208 (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep16_r820a :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep16_r820a
  = GHC.Types.KindRepTyConApp GHC.Types.$tcIO $krep15_r8209

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep17_r820b :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep17_r820b
  = GHC.Types.: @ KindRep $krep_r81ZU (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep18_r820c :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep18_r820c
  = GHC.Types.KindRepTyConApp GHC.Ptr.$tcPtr $krep17_r820b

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep19_r820d :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep19_r820d = GHC.Types.KindRepFun $krep3_r81ZX $krep11_r8205

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep20_r820e :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep20_r820e = GHC.Types.KindRepFun $krep3_r81ZX $krep7_r8201

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep21_r820f :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep21_r820f = GHC.Types.KindRepFun $krep3_r81ZX $krep13_r8207

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep22_r820g :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep22_r820g = GHC.Types.KindRepFun $krep3_r81ZX $krep16_r820a

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep23_r820h :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep23_r820h = GHC.Types.KindRepFun $krep4_r81ZY $krep11_r8205

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep24_r820i :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep24_r820i = GHC.Types.KindRepFun $krep4_r81ZY $krep21_r820f

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep25_r820j :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep25_r820j = GHC.Types.KindRepFun $krep1_r81ZV $krep11_r8205

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep26_r820k :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep26_r820k = GHC.Types.KindRepFun $krep18_r820c $krep19_r820d

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep27_r820l :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep27_r820l = GHC.Types.KindRepFun $krep18_r820c $krep20_r820e

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep28_r820m :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep28_r820m = GHC.Types.KindRepFun $krep18_r820c $krep22_r820g

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Device.$tcIODevice1 [InlPrag=NOUSERINLINE[~]] :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
GHC.IO.Device.$tcIODevice1
  = GHC.Types.KindRepFun GHC.Types.krep$* $krep5_r81ZZ

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep29_r820n :: KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep29_r820n = GHC.Types.KindRepVar 0#

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep30_r820o :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep30_r820o = GHC.Types.KindRepFun $krep29_r820n $krep28_r820m

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep31_r820p :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep31_r820p = GHC.Types.KindRepFun $krep29_r820n $krep27_r820l

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep32_r820q :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep32_r820q = GHC.Types.KindRepFun $krep29_r820n $krep26_r820k

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep33_r820r :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep33_r820r = GHC.Types.KindRepFun $krep29_r820n $krep25_r820j

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep34_r820s :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep34_r820s = GHC.Types.KindRepFun $krep29_r820n $krep24_r820i

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep35_r820t :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep35_r820t = GHC.Types.KindRepFun $krep29_r820n $krep23_r820h

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep36_r820u :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep36_r820u = GHC.Types.KindRepFun $krep29_r820n $krep11_r8205

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep37_r820v :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep37_r820v = GHC.Types.KindRepFun $krep29_r820n $krep13_r8207

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep38_r820w :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep38_r820w = GHC.Types.KindRepFun $krep29_r820n $krep9_r8203

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep39_r820x :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep39_r820x
  = GHC.Types.: @ KindRep $krep29_r820n (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep40_r820y :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep40_r820y
  = GHC.Types.KindRepTyConApp GHC.Types.$tcIO $krep39_r820x

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep41_r820z :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep41_r820z = GHC.Types.KindRepFun $krep29_r820n $krep40_r820y

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep42_r820A :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep42_r820A = GHC.Types.KindRepFun $krep29_r820n $krep41_r820z

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Device.$tcRawIO2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.IO.Device.$tcRawIO2 = "RawIO"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Device.$tcRawIO1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Device.$tcRawIO1 = GHC.Types.TrNameS GHC.IO.Device.$tcRawIO2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Device.$tcRawIO :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.IO.Device.$tcRawIO
  = GHC.Types.TyCon
      15458836890887680490##
      11407217875184880147##
      GHC.IO.Device.$trModule
      GHC.IO.Device.$tcRawIO1
      0#
      GHC.IO.Device.$tcIODevice1

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep43_r820B :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep43_r820B
  = GHC.Types.KindRepTyConApp GHC.IO.Device.$tcRawIO $krep39_r820x

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep44_r820C :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep44_r820C = GHC.Types.KindRepFun $krep31_r820p $krep43_r820B

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep45_r820D :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep45_r820D = GHC.Types.KindRepFun $krep32_r820q $krep44_r820C

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep46_r820E :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep46_r820E = GHC.Types.KindRepFun $krep30_r820o $krep45_r820D

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Device.$tc'C:RawIO1 [InlPrag=NOUSERINLINE[~]] :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
GHC.IO.Device.$tc'C:RawIO1
  = GHC.Types.KindRepFun $krep31_r820p $krep46_r820E

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Device.$tc'C:RawIO3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.IO.Device.$tc'C:RawIO3 = "'C:RawIO"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Device.$tc'C:RawIO2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Device.$tc'C:RawIO2
  = GHC.Types.TrNameS GHC.IO.Device.$tc'C:RawIO3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Device.$tc'C:RawIO :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.IO.Device.$tc'C:RawIO
  = GHC.Types.TyCon
      6403037956050298954##
      14520964482680400738##
      GHC.IO.Device.$trModule
      GHC.IO.Device.$tc'C:RawIO2
      1#
      GHC.IO.Device.$tc'C:RawIO1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Device.$tcIODeviceType2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.IO.Device.$tcIODeviceType2 = "IODeviceType"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Device.$tcIODeviceType1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Device.$tcIODeviceType1
  = GHC.Types.TrNameS GHC.IO.Device.$tcIODeviceType2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Device.$tcIODeviceType :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.IO.Device.$tcIODeviceType
  = GHC.Types.TyCon
      4175968526489202383##
      17718566430225243048##
      GHC.IO.Device.$trModule
      GHC.IO.Device.$tcIODeviceType1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
GHC.IO.Device.$tc'Directory1 [InlPrag=NOUSERINLINE[~]] :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
GHC.IO.Device.$tc'Directory1
  = GHC.Types.KindRepTyConApp
      GHC.IO.Device.$tcIODeviceType (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Device.$tc'Directory3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.IO.Device.$tc'Directory3 = "'Directory"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Device.$tc'Directory2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Device.$tc'Directory2
  = GHC.Types.TrNameS GHC.IO.Device.$tc'Directory3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Device.$tc'Directory :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.IO.Device.$tc'Directory
  = GHC.Types.TyCon
      12008838926528382233##
      639950492613404225##
      GHC.IO.Device.$trModule
      GHC.IO.Device.$tc'Directory2
      0#
      GHC.IO.Device.$tc'Directory1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Device.$tc'Stream2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.IO.Device.$tc'Stream2 = "'Stream"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Device.$tc'Stream1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Device.$tc'Stream1
  = GHC.Types.TrNameS GHC.IO.Device.$tc'Stream2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Device.$tc'Stream :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.IO.Device.$tc'Stream
  = GHC.Types.TyCon
      39573928359804366##
      741010449601335383##
      GHC.IO.Device.$trModule
      GHC.IO.Device.$tc'Stream1
      0#
      GHC.IO.Device.$tc'Directory1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Device.$tc'RegularFile2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.IO.Device.$tc'RegularFile2 = "'RegularFile"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Device.$tc'RegularFile1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Device.$tc'RegularFile1
  = GHC.Types.TrNameS GHC.IO.Device.$tc'RegularFile2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Device.$tc'RegularFile :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.IO.Device.$tc'RegularFile
  = GHC.Types.TyCon
      2184574052715259025##
      14349593064521146856##
      GHC.IO.Device.$trModule
      GHC.IO.Device.$tc'RegularFile1
      0#
      GHC.IO.Device.$tc'Directory1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Device.$tc'RawDevice2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.IO.Device.$tc'RawDevice2 = "'RawDevice"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Device.$tc'RawDevice1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Device.$tc'RawDevice1
  = GHC.Types.TrNameS GHC.IO.Device.$tc'RawDevice2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Device.$tc'RawDevice :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.IO.Device.$tc'RawDevice
  = GHC.Types.TyCon
      13599710032796319976##
      8789152980205417013##
      GHC.IO.Device.$trModule
      GHC.IO.Device.$tc'RawDevice1
      0#
      GHC.IO.Device.$tc'Directory1

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep47_r820F :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep47_r820F
  = GHC.Types.:
      @ KindRep GHC.IO.Device.$tc'Directory1 (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep48_r820G :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep48_r820G
  = GHC.Types.KindRepTyConApp GHC.Types.$tcIO $krep47_r820F

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep49_r820H :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep49_r820H = GHC.Types.KindRepFun $krep29_r820n $krep48_r820G

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Device.$tcSeekMode2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.IO.Device.$tcSeekMode2 = "SeekMode"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Device.$tcSeekMode1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Device.$tcSeekMode1
  = GHC.Types.TrNameS GHC.IO.Device.$tcSeekMode2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Device.$tcSeekMode :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.IO.Device.$tcSeekMode
  = GHC.Types.TyCon
      17698211299654630015##
      5588778824401988676##
      GHC.IO.Device.$trModule
      GHC.IO.Device.$tcSeekMode1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
GHC.IO.Device.$tc'AbsoluteSeek1 [InlPrag=NOUSERINLINE[~]]
  :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
GHC.IO.Device.$tc'AbsoluteSeek1
  = GHC.Types.KindRepTyConApp
      GHC.IO.Device.$tcSeekMode (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Device.$tc'AbsoluteSeek3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.IO.Device.$tc'AbsoluteSeek3 = "'AbsoluteSeek"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Device.$tc'AbsoluteSeek2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Device.$tc'AbsoluteSeek2
  = GHC.Types.TrNameS GHC.IO.Device.$tc'AbsoluteSeek3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Device.$tc'AbsoluteSeek :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.IO.Device.$tc'AbsoluteSeek
  = GHC.Types.TyCon
      5610789579148926753##
      3433733041722086784##
      GHC.IO.Device.$trModule
      GHC.IO.Device.$tc'AbsoluteSeek2
      0#
      GHC.IO.Device.$tc'AbsoluteSeek1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Device.$tc'RelativeSeek2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.IO.Device.$tc'RelativeSeek2 = "'RelativeSeek"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Device.$tc'RelativeSeek1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Device.$tc'RelativeSeek1
  = GHC.Types.TrNameS GHC.IO.Device.$tc'RelativeSeek2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Device.$tc'RelativeSeek :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.IO.Device.$tc'RelativeSeek
  = GHC.Types.TyCon
      15906895381304752726##
      1738065871578000433##
      GHC.IO.Device.$trModule
      GHC.IO.Device.$tc'RelativeSeek1
      0#
      GHC.IO.Device.$tc'AbsoluteSeek1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Device.$tc'SeekFromEnd2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.IO.Device.$tc'SeekFromEnd2 = "'SeekFromEnd"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Device.$tc'SeekFromEnd1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Device.$tc'SeekFromEnd1
  = GHC.Types.TrNameS GHC.IO.Device.$tc'SeekFromEnd2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Device.$tc'SeekFromEnd :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.IO.Device.$tc'SeekFromEnd
  = GHC.Types.TyCon
      16344961357916628519##
      5039033320700315004##
      GHC.IO.Device.$trModule
      GHC.IO.Device.$tc'SeekFromEnd1
      0#
      GHC.IO.Device.$tc'AbsoluteSeek1

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep50_r820I :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep50_r820I
  = GHC.Types.KindRepFun
      GHC.IO.Device.$tc'AbsoluteSeek1 $krep25_r820j

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep51_r820J :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep51_r820J = GHC.Types.KindRepFun $krep29_r820n $krep50_r820I

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Device.$tcIODevice3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.IO.Device.$tcIODevice3 = "IODevice"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Device.$tcIODevice2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Device.$tcIODevice2
  = GHC.Types.TrNameS GHC.IO.Device.$tcIODevice3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Device.$tcIODevice :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.IO.Device.$tcIODevice
  = GHC.Types.TyCon
      4764642859795697036##
      7163668738257247953##
      GHC.IO.Device.$trModule
      GHC.IO.Device.$tcIODevice2
      0#
      GHC.IO.Device.$tcIODevice1

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep52_r820K :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep52_r820K
  = GHC.Types.KindRepTyConApp GHC.IO.Device.$tcIODevice $krep39_r820x

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep53_r820L :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep53_r820L = GHC.Types.KindRepFun $krep42_r820A $krep52_r820K

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep54_r820M :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep54_r820M = GHC.Types.KindRepFun $krep41_r820z $krep53_r820L

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep55_r820N :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep55_r820N = GHC.Types.KindRepFun $krep49_r820H $krep54_r820M

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep56_r820O :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep56_r820O = GHC.Types.KindRepFun $krep35_r820t $krep55_r820N

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep57_r820P :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep57_r820P = GHC.Types.KindRepFun $krep37_r820v $krep56_r820O

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep58_r820Q :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep58_r820Q = GHC.Types.KindRepFun $krep35_r820t $krep57_r820P

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep59_r820R :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep59_r820R = GHC.Types.KindRepFun $krep33_r820r $krep58_r820Q

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep60_r820S :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep60_r820S = GHC.Types.KindRepFun $krep38_r820w $krep59_r820R

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep61_r820T :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep61_r820T = GHC.Types.KindRepFun $krep38_r820w $krep60_r820S

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep62_r820U :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep62_r820U = GHC.Types.KindRepFun $krep51_r820J $krep61_r820T

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep63_r820V :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep63_r820V = GHC.Types.KindRepFun $krep37_r820v $krep62_r820U

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep64_r820W :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep64_r820W = GHC.Types.KindRepFun $krep37_r820v $krep63_r820V

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep65_r820X :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep65_r820X = GHC.Types.KindRepFun $krep36_r820u $krep64_r820W

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Device.$tc'C:IODevice1 [InlPrag=NOUSERINLINE[~]] :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
GHC.IO.Device.$tc'C:IODevice1
  = GHC.Types.KindRepFun $krep34_r820s $krep65_r820X

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Device.$tc'C:IODevice3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.IO.Device.$tc'C:IODevice3 = "'C:IODevice"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Device.$tc'C:IODevice2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Device.$tc'C:IODevice2
  = GHC.Types.TrNameS GHC.IO.Device.$tc'C:IODevice3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Device.$tc'C:IODevice :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.IO.Device.$tc'C:IODevice
  = GHC.Types.TyCon
      15352604720075066134##
      14084350618605203122##
      GHC.IO.Device.$trModule
      GHC.IO.Device.$tc'C:IODevice2
      1#
      GHC.IO.Device.$tc'C:IODevice1


