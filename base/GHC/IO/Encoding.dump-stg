
==================== Pre unarise: ====================
2018-03-16 16:05:01.961097205 UTC

GHC.IO.Encoding.latin1 :: GHC.IO.Encoding.Types.TextEncoding
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.IO.Encoding.Latin1.latin1_checked;

GHC.IO.Encoding.utf8 :: GHC.IO.Encoding.Types.TextEncoding
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.IO.Encoding.UTF8.utf8;

GHC.IO.Encoding.utf8_bom :: GHC.IO.Encoding.Types.TextEncoding
[GblId] =
    [] \u [] GHC.IO.Encoding.UTF8.utf8_bom;

GHC.IO.Encoding.utf16 :: GHC.IO.Encoding.Types.TextEncoding
[GblId] =
    [] \u [] GHC.IO.Encoding.UTF16.utf16;

GHC.IO.Encoding.utf16le :: GHC.IO.Encoding.Types.TextEncoding
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.IO.Encoding.UTF16.utf16le;

GHC.IO.Encoding.utf16be :: GHC.IO.Encoding.Types.TextEncoding
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.IO.Encoding.UTF16.utf16be;

GHC.IO.Encoding.utf32 :: GHC.IO.Encoding.Types.TextEncoding
[GblId] =
    [] \u [] GHC.IO.Encoding.UTF32.utf32;

GHC.IO.Encoding.utf32le :: GHC.IO.Encoding.Types.TextEncoding
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.IO.Encoding.UTF32.utf32le;

GHC.IO.Encoding.utf32be :: GHC.IO.Encoding.Types.TextEncoding
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.IO.Encoding.UTF32.utf32be;

GHC.IO.Encoding.char8 :: GHC.IO.Encoding.Types.TextEncoding
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.IO.Encoding.Latin1.latin1;

lvl_r9XsW :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "mkTextEncoding"#;

lvl1_r9XsX :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl_r9XsW;

lvl2_r9XsY :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "unknown encoding:"#;

GHC.IO.Encoding.mkTextEncoding2
  :: forall a.
     GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=2, Str=<B,U><B,U>x, Unf=OtherCon []] =
    [] \r [e_s9Xt0 eta_s9Xt1]
        let {
          sat_s9Xt4 [Occ=Once] :: GHC.Exception.SomeException
          [LclId] =
              [e_s9Xt0] \u []
                  let {
                    sat_s9Xt2 [Occ=Once] :: GHC.Base.String
                    [LclId] =
                        [e_s9Xt0] \u []
                            GHC.CString.unpackAppendCString# lvl2_r9XsY e_s9Xt0; } in
                  let {
                    sat_s9Xt3 [Occ=Once] :: GHC.IO.Exception.IOException
                    [LclId] =
                        CCCS GHC.IO.Exception.IOError! [GHC.Base.Nothing
                                                        GHC.IO.Exception.NoSuchThing
                                                        lvl1_r9XsX
                                                        sat_s9Xt2
                                                        GHC.Base.Nothing
                                                        GHC.Base.Nothing];
                  } in 
                    GHC.IO.Exception.$fExceptionIOException_$ctoException sat_s9Xt3;
        } in  raiseIO# [sat_s9Xt4 eta_s9Xt1];

GHC.IO.Encoding.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.IO.Encoding.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.$trModule4];

GHC.IO.Encoding.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.IO.Encoding"#;

GHC.IO.Encoding.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.$trModule2];

GHC.IO.Encoding.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.IO.Encoding.$trModule3
                                     GHC.IO.Encoding.$trModule1];

GHC.IO.Encoding.getFileSystemEncoding33 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ISO_8859-1:1987"#;

GHC.IO.Encoding.getFileSystemEncoding32 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding33;

GHC.IO.Encoding.getFileSystemEncoding31 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "iso-ir-100"#;

GHC.IO.Encoding.getFileSystemEncoding30 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding31;

GHC.IO.Encoding.getFileSystemEncoding29 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ISO_8859-1"#;

GHC.IO.Encoding.getFileSystemEncoding28 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding29;

GHC.IO.Encoding.getFileSystemEncoding27 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ISO-8859-1"#;

GHC.IO.Encoding.getFileSystemEncoding26 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding27;

GHC.IO.Encoding.getFileSystemEncoding25 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "latin1"#;

GHC.IO.Encoding.getFileSystemEncoding24 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding25;

GHC.IO.Encoding.getFileSystemEncoding23 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "l1"#;

GHC.IO.Encoding.getFileSystemEncoding22 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding23;

GHC.IO.Encoding.getFileSystemEncoding21 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "IBM819"#;

GHC.IO.Encoding.getFileSystemEncoding20 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding21;

GHC.IO.Encoding.getFileSystemEncoding19 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "CP819"#;

GHC.IO.Encoding.getFileSystemEncoding18 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding19;

GHC.IO.Encoding.getFileSystemEncoding17 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "csISOLatin1"#;

GHC.IO.Encoding.getFileSystemEncoding16 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding17;

GHC.IO.Encoding.getFileSystemEncoding15 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding16
                      GHC.Types.[]];

GHC.IO.Encoding.getFileSystemEncoding14 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding18
                      GHC.IO.Encoding.getFileSystemEncoding15];

GHC.IO.Encoding.getFileSystemEncoding13 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding20
                      GHC.IO.Encoding.getFileSystemEncoding14];

GHC.IO.Encoding.getFileSystemEncoding12 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding22
                      GHC.IO.Encoding.getFileSystemEncoding13];

GHC.IO.Encoding.getFileSystemEncoding11 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding24
                      GHC.IO.Encoding.getFileSystemEncoding12];

GHC.IO.Encoding.getFileSystemEncoding10 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding26
                      GHC.IO.Encoding.getFileSystemEncoding11];

GHC.IO.Encoding.getFileSystemEncoding9 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding28
                      GHC.IO.Encoding.getFileSystemEncoding10];

GHC.IO.Encoding.getFileSystemEncoding8 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding30
                      GHC.IO.Encoding.getFileSystemEncoding9];

GHC.IO.Encoding.getFileSystemEncoding7 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding32
                      GHC.IO.Encoding.getFileSystemEncoding8];

GHC.IO.Encoding.getFileSystemEncoding66 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ANSI_X3.4-1968"#;

GHC.IO.Encoding.getFileSystemEncoding65 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding66;

GHC.IO.Encoding.getFileSystemEncoding64 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "iso-ir-6"#;

GHC.IO.Encoding.getFileSystemEncoding63 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding64;

GHC.IO.Encoding.getFileSystemEncoding62 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ANSI_X3.4-1986"#;

GHC.IO.Encoding.getFileSystemEncoding61 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding62;

GHC.IO.Encoding.getFileSystemEncoding60 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ISO_646.irv:1991"#;

GHC.IO.Encoding.getFileSystemEncoding59 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding60;

GHC.IO.Encoding.getFileSystemEncoding58 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "US-ASCII"#;

GHC.IO.Encoding.getFileSystemEncoding57 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding58;

GHC.IO.Encoding.getFileSystemEncoding56 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "us"#;

GHC.IO.Encoding.getFileSystemEncoding55 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding56;

GHC.IO.Encoding.getFileSystemEncoding54 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "IBM367"#;

GHC.IO.Encoding.getFileSystemEncoding53 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding54;

GHC.IO.Encoding.getFileSystemEncoding52 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "cp367"#;

GHC.IO.Encoding.getFileSystemEncoding51 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding52;

GHC.IO.Encoding.getFileSystemEncoding50 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "csASCII"#;

GHC.IO.Encoding.getFileSystemEncoding49 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding50;

GHC.IO.Encoding.getFileSystemEncoding48 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ASCII"#;

GHC.IO.Encoding.getFileSystemEncoding47 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding48;

GHC.IO.Encoding.getFileSystemEncoding46 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ISO646-US"#;

GHC.IO.Encoding.getFileSystemEncoding45 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding46;

GHC.IO.Encoding.getFileSystemEncoding44 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding45
                      GHC.Types.[]];

GHC.IO.Encoding.getFileSystemEncoding43 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding47
                      GHC.IO.Encoding.getFileSystemEncoding44];

GHC.IO.Encoding.getFileSystemEncoding42 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding49
                      GHC.IO.Encoding.getFileSystemEncoding43];

GHC.IO.Encoding.getFileSystemEncoding41 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding51
                      GHC.IO.Encoding.getFileSystemEncoding42];

GHC.IO.Encoding.getFileSystemEncoding40 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding53
                      GHC.IO.Encoding.getFileSystemEncoding41];

GHC.IO.Encoding.getFileSystemEncoding39 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding55
                      GHC.IO.Encoding.getFileSystemEncoding40];

GHC.IO.Encoding.getFileSystemEncoding38 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding57
                      GHC.IO.Encoding.getFileSystemEncoding39];

GHC.IO.Encoding.getFileSystemEncoding37 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding59
                      GHC.IO.Encoding.getFileSystemEncoding38];

GHC.IO.Encoding.getFileSystemEncoding36 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding61
                      GHC.IO.Encoding.getFileSystemEncoding37];

GHC.IO.Encoding.getFileSystemEncoding35 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding63
                      GHC.IO.Encoding.getFileSystemEncoding36];

GHC.IO.Encoding.getFileSystemEncoding34 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding65
                      GHC.IO.Encoding.getFileSystemEncoding35];

GHC.IO.Encoding.getFileSystemEncoding68 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "UTF8"#;

GHC.IO.Encoding.getFileSystemEncoding67 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding68;

GHC.IO.Encoding.getFileSystemEncoding70 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "UTF32LE"#;

GHC.IO.Encoding.getFileSystemEncoding69 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding70;

GHC.IO.Encoding.getFileSystemEncoding72 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "UTF32BE"#;

GHC.IO.Encoding.getFileSystemEncoding71 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding72;

GHC.IO.Encoding.getFileSystemEncoding74 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "UTF32"#;

GHC.IO.Encoding.getFileSystemEncoding73 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding74;

GHC.IO.Encoding.getFileSystemEncoding76 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "UTF16LE"#;

GHC.IO.Encoding.getFileSystemEncoding75 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding76;

GHC.IO.Encoding.getFileSystemEncoding78 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "UTF16BE"#;

GHC.IO.Encoding.getFileSystemEncoding77 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding78;

GHC.IO.Encoding.getFileSystemEncoding80 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "UTF16"#;

GHC.IO.Encoding.getFileSystemEncoding79 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding80;

GHC.IO.Encoding.getFileSystemEncoding_go [Occ=LoopBreaker]
  :: [GHC.Types.Char] -> [GHC.Types.Char]
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s9Xt5]
        case ds_s9Xt5 of {
          [] -> [] [];
          : y_s9Xt7 [Occ=Once!] ys_s9Xt8 [Occ=Once*] ->
              case y_s9Xt7 of {
                GHC.Types.C# x_s9Xta [Occ=Once!] ->
                    case x_s9Xta of wild2_s9Xtb {
                      __DEFAULT ->
                          let {
                            sat_s9Xtl [Occ=Once] :: [GHC.Types.Char]
                            [LclId] =
                                [ys_s9Xt8] \u []
                                    GHC.IO.Encoding.getFileSystemEncoding_go ys_s9Xt8; } in
                          let {
                            sat_s9Xtk [Occ=Once] :: GHC.Types.Char
                            [LclId] =
                                [wild2_s9Xtb] \u []
                                    case ord# [wild2_s9Xtb] of sat_s9Xtd {
                                      __DEFAULT ->
                                          case
                                              __pkg_ccall base-4.11.0.0 [sat_s9Xtd
                                                                         GHC.Prim.realWorld#]
                                          of
                                          { (#,#) _ [Occ=Dead] ds2_s9Xtg ->
                                                case int2Word# [ds2_s9Xtg] of sat_s9Xth {
                                                  __DEFAULT ->
                                                      case leWord# [sat_s9Xth 1114111##] of {
                                                        __DEFAULT -> GHC.Char.$wlvl ds2_s9Xtg;
                                                        1# ->
                                                            case chr# [ds2_s9Xtg] of sat_s9Xtj {
                                                              __DEFAULT -> GHC.Types.C# [sat_s9Xtj];
                                                            };
                                                      };
                                                };
                                          };
                                    };
                          } in  : [sat_s9Xtk sat_s9Xtl];
                      '-'# -> GHC.IO.Encoding.getFileSystemEncoding_go ys_s9Xt8;
                    };
              };
        };

GHC.IO.Encoding.getFileSystemEncoding6
  :: GHC.IO.Encoding.Failure.CodingFailureMode
     -> GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Encoding.Types.TextEncoding #)
[GblId, Arity=3, Str=<B,1*U><B,1*U><B,U>x, Unf=OtherCon []] =
    [] \r [cfm_s9Xtm enc_s9Xtn ipv_s9Xto]
        let {
          sat_s9Xtq [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
          [LclId] =
              [cfm_s9Xtm] \s []
                  case cfm_s9Xtm of {
                    GHC.IO.Encoding.Failure.ErrorOnCodingFailure -> [] [];
                    GHC.IO.Encoding.Failure.IgnoreCodingFailure ->
                        GHC.IO.Encoding.Failure.codingFailureModeSuffix5;
                    GHC.IO.Encoding.Failure.TransliterateCodingFailure ->
                        GHC.IO.Encoding.Failure.codingFailureModeSuffix3;
                    GHC.IO.Encoding.Failure.RoundtripFailure ->
                        GHC.IO.Encoding.Failure.codingFailureModeSuffix1;
                  };
        } in 
          case GHC.Base.++ enc_s9Xtn sat_s9Xtq of sat_s9Xtr {
            __DEFAULT -> GHC.IO.Encoding.mkTextEncoding2 sat_s9Xtr ipv_s9Xto;
          };

GHC.IO.Encoding.getFileSystemEncoding5
  :: GHC.IO.Encoding.Failure.CodingFailureMode
     -> GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Encoding.Types.TextEncoding #)
[GblId, Arity=3, Str=<L,U><S,U><S,U>, Unf=OtherCon []] =
    [] \r [cfm_s9Xts enc_s9Xtt eta_s9Xtu]
        case
            GHC.IO.Encoding.getFileSystemEncoding_go enc_s9Xtt
        of
        ds_s9Xtv [Dmd=<S,U>]
        { __DEFAULT ->
              case
                  GHC.Base.eqString ds_s9Xtv GHC.IO.Encoding.getFileSystemEncoding79
              of
              { GHC.Types.False ->
                    case
                        GHC.Base.eqString ds_s9Xtv GHC.IO.Encoding.getFileSystemEncoding77
                    of
                    { GHC.Types.False ->
                          case
                              GHC.Base.eqString ds_s9Xtv GHC.IO.Encoding.getFileSystemEncoding75
                          of
                          { GHC.Types.False ->
                                case
                                    GHC.Base.eqString
                                        ds_s9Xtv GHC.IO.Encoding.getFileSystemEncoding73
                                of
                                { GHC.Types.False ->
                                      case
                                          GHC.Base.eqString
                                              ds_s9Xtv GHC.IO.Encoding.getFileSystemEncoding71
                                      of
                                      { GHC.Types.False ->
                                            case
                                                GHC.Base.eqString
                                                    ds_s9Xtv GHC.IO.Encoding.getFileSystemEncoding69
                                            of
                                            { GHC.Types.False ->
                                                  case
                                                      GHC.Base.eqString
                                                          ds_s9Xtv
                                                          GHC.IO.Encoding.getFileSystemEncoding67
                                                  of
                                                  { GHC.Types.False ->
                                                        case
                                                            GHC.List.elem
                                                                GHC.Classes.$fEq[]_$s$fEq[]1
                                                                enc_s9Xtt
                                                                GHC.IO.Encoding.getFileSystemEncoding34
                                                        of
                                                        { GHC.Types.False ->
                                                              case
                                                                  GHC.List.elem
                                                                      GHC.Classes.$fEq[]_$s$fEq[]1
                                                                      enc_s9Xtt
                                                                      GHC.IO.Encoding.getFileSystemEncoding7
                                                              of
                                                              { GHC.Types.False ->
                                                                    case
                                                                        GHC.IO.Encoding.Iconv.iconvEncoding2
                                                                            cfm_s9Xts
                                                                            enc_s9Xtt
                                                                            eta_s9Xtu
                                                                    of
                                                                    { (#,#) ipv_s9XtG [Occ=Once*]
                                                                            ipv1_s9XtH [Occ=Once!] ->
                                                                          case ipv1_s9XtH of {
                                                                            GHC.Base.Nothing ->
                                                                                GHC.IO.Encoding.getFileSystemEncoding6
                                                                                    cfm_s9Xts
                                                                                    enc_s9Xtt
                                                                                    ipv_s9XtG;
                                                                            GHC.Base.Just e_s9XtJ [Occ=Once] ->
                                                                                (#,#) [ipv_s9XtG
                                                                                       e_s9XtJ];
                                                                          };
                                                                    };
                                                                GHC.Types.True ->
                                                                    let {
                                                                      sat_s9XtK [Occ=Once]
                                                                        :: GHC.IO.Encoding.Types.TextEncoding
                                                                      [LclId] =
                                                                          [cfm_s9Xts] \u []
                                                                              GHC.IO.Encoding.Latin1.mkLatin1_checked
                                                                                  cfm_s9Xts;
                                                                    } in 
                                                                      (#,#) [eta_s9Xtu sat_s9XtK];
                                                              };
                                                          GHC.Types.True ->
                                                              let {
                                                                sat_s9XtL [Occ=Once]
                                                                  :: GHC.IO.Encoding.Types.TextEncoding
                                                                [LclId] =
                                                                    [cfm_s9Xts] \u []
                                                                        GHC.IO.Encoding.Latin1.mkAscii
                                                                            cfm_s9Xts;
                                                              } in  (#,#) [eta_s9Xtu sat_s9XtL];
                                                        };
                                                    GHC.Types.True ->
                                                        let {
                                                          sat_s9XtM [Occ=Once]
                                                            :: GHC.IO.Encoding.Types.TextEncoding
                                                          [LclId] =
                                                              [cfm_s9Xts] \u []
                                                                  GHC.IO.Encoding.UTF8.mkUTF8
                                                                      cfm_s9Xts;
                                                        } in  (#,#) [eta_s9Xtu sat_s9XtM];
                                                  };
                                              GHC.Types.True ->
                                                  let {
                                                    sat_s9XtN [Occ=Once]
                                                      :: GHC.IO.Encoding.Types.TextEncoding
                                                    [LclId] =
                                                        [cfm_s9Xts] \u []
                                                            GHC.IO.Encoding.UTF32.mkUTF32le
                                                                cfm_s9Xts;
                                                  } in  (#,#) [eta_s9Xtu sat_s9XtN];
                                            };
                                        GHC.Types.True ->
                                            let {
                                              sat_s9XtO [Occ=Once]
                                                :: GHC.IO.Encoding.Types.TextEncoding
                                              [LclId] =
                                                  [cfm_s9Xts] \u []
                                                      GHC.IO.Encoding.UTF32.mkUTF32be cfm_s9Xts;
                                            } in  (#,#) [eta_s9Xtu sat_s9XtO];
                                      };
                                  GHC.Types.True ->
                                      let {
                                        sat_s9XtP [Occ=Once] :: GHC.IO.Encoding.Types.TextEncoding
                                        [LclId] =
                                            [cfm_s9Xts] \u []
                                                GHC.IO.Encoding.UTF32.mkUTF32 cfm_s9Xts;
                                      } in  (#,#) [eta_s9Xtu sat_s9XtP];
                                };
                            GHC.Types.True ->
                                let {
                                  sat_s9XtQ [Occ=Once] :: GHC.IO.Encoding.Types.TextEncoding
                                  [LclId] =
                                      [cfm_s9Xts] \u [] GHC.IO.Encoding.UTF16.mkUTF16le cfm_s9Xts;
                                } in  (#,#) [eta_s9Xtu sat_s9XtQ];
                          };
                      GHC.Types.True ->
                          let {
                            sat_s9XtR [Occ=Once] :: GHC.IO.Encoding.Types.TextEncoding
                            [LclId] =
                                [cfm_s9Xts] \u [] GHC.IO.Encoding.UTF16.mkUTF16be cfm_s9Xts;
                          } in  (#,#) [eta_s9Xtu sat_s9XtR];
                    };
                GHC.Types.True ->
                    let {
                      sat_s9XtS [Occ=Once] :: GHC.IO.Encoding.Types.TextEncoding
                      [LclId] =
                          [cfm_s9Xts] \u [] GHC.IO.Encoding.UTF16.mkUTF16 cfm_s9Xts;
                    } in  (#,#) [eta_s9Xtu sat_s9XtS];
              };
        };

GHC.IO.Encoding.mkTextEncoding9 :: GHC.Types.Char -> GHC.Types.Bool
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(1*U)>,
 Unf=OtherCon []] =
    [] \r [ds_s9XtT]
        case ds_s9XtT of {
          GHC.Types.C# x_s9XtV [Occ=Once!] ->
              case x_s9XtV of {
                __DEFAULT -> GHC.Types.True [];
                '/'# -> GHC.Types.False [];
              };
        };

GHC.IO.Encoding.mkTextEncoding4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "//TRANSLIT"#;

GHC.IO.Encoding.mkTextEncoding3 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.mkTextEncoding4;

GHC.IO.Encoding.mkTextEncoding6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "//ROUNDTRIP"#;

GHC.IO.Encoding.mkTextEncoding5 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.mkTextEncoding6;

GHC.IO.Encoding.mkTextEncoding8 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "//IGNORE"#;

GHC.IO.Encoding.mkTextEncoding7 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.mkTextEncoding8;

GHC.IO.Encoding.mkTextEncoding1
  :: GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Encoding.Types.TextEncoding #)
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [e_s9XtX eta_s9XtY]
        case GHC.List.$wspan GHC.IO.Encoding.mkTextEncoding9 e_s9XtX of {
          (#,#) ww1_s9Xu0 [Occ=Once*] ww2_s9Xu1 [Occ=Once!] ->
              case ww2_s9Xu1 of wild_s9Xu2 {
                [] ->
                    GHC.IO.Encoding.getFileSystemEncoding5
                        GHC.IO.Encoding.Failure.ErrorOnCodingFailure ww1_s9Xu0 eta_s9XtY;
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    case
                        GHC.Base.eqString wild_s9Xu2 GHC.IO.Encoding.mkTextEncoding7
                    of
                    { GHC.Types.False ->
                          case
                              GHC.Base.eqString wild_s9Xu2 GHC.IO.Encoding.mkTextEncoding5
                          of
                          { GHC.Types.False ->
                                case
                                    GHC.Base.eqString wild_s9Xu2 GHC.IO.Encoding.mkTextEncoding3
                                of
                                { GHC.Types.False ->
                                      GHC.IO.Encoding.mkTextEncoding2 e_s9XtX eta_s9XtY;
                                  GHC.Types.True ->
                                      GHC.IO.Encoding.getFileSystemEncoding5
                                          GHC.IO.Encoding.Failure.TransliterateCodingFailure
                                          ww1_s9Xu0
                                          eta_s9XtY;
                                };
                            GHC.Types.True ->
                                GHC.IO.Encoding.getFileSystemEncoding5
                                    GHC.IO.Encoding.Failure.RoundtripFailure ww1_s9Xu0 eta_s9XtY;
                          };
                      GHC.Types.True ->
                          GHC.IO.Encoding.getFileSystemEncoding5
                              GHC.IO.Encoding.Failure.IgnoreCodingFailure ww1_s9Xu0 eta_s9XtY;
                    };
              };
        };

GHC.IO.Encoding.mkTextEncoding
  :: GHC.Base.String
     -> GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.IO.Encoding.mkTextEncoding1 eta_B2 eta_B1;

GHC.IO.Encoding.getForeignEncoding4
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Encoding.Types.TextEncoding #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [s_s9Xu8]
        case noDuplicate# [s_s9Xu8] of s'_s9Xu9 {
          __DEFAULT ->
              GHC.IO.Encoding.getFileSystemEncoding5
                  GHC.IO.Encoding.Failure.IgnoreCodingFailure
                  GHC.IO.Encoding.Iconv.localeEncodingName
                  s'_s9Xu9;
        };

GHC.IO.Encoding.getForeignEncoding3
  :: GHC.IO.Encoding.Types.TextEncoding
[GblId] =
    [] \u []
        case GHC.IO.Encoding.getForeignEncoding4 GHC.Prim.realWorld# of {
          (#,#) _ [Occ=Dead] ipv1_s9Xuc [Occ=Once] -> ipv1_s9Xuc;
        };

GHC.IO.Encoding.getForeignEncoding2
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding,
            GHC.IO.Encoding.Types.TextEncoding -> GHC.Types.IO ()) #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [s_s9Xud]
        case noDuplicate# [s_s9Xud] of s'_s9Xue {
          __DEFAULT ->
              case newMutVar# [GHC.IO.Encoding.getForeignEncoding3 s'_s9Xue] of {
                (#,#) ipv_s9Xug [Occ=Once] ipv1_s9Xuh ->
                    let {
                      sat_s9Xun [Occ=Once]
                        :: GHC.IO.Encoding.Types.TextEncoding -> GHC.Types.IO ()
                      [LclId] =
                          [ipv1_s9Xuh] \r [val_s9Xuk eta_s9Xul]
                              case writeMutVar# [ipv1_s9Xuh val_s9Xuk eta_s9Xul] of s2#_s9Xum {
                                __DEFAULT -> (#,#) [s2#_s9Xum GHC.Tuple.()];
                              }; } in
                    let {
                      sat_s9Xuj [Occ=Once]
                        :: GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding
                      [LclId] =
                          [ipv1_s9Xuh] \r [eta_s9Xui]
                              readMutVar# [ipv1_s9Xuh eta_s9Xui]; } in
                    let {
                      sat_s9Xuo [Occ=Once]
                        :: (GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding,
                            GHC.IO.Encoding.Types.TextEncoding -> GHC.Types.IO ())
                      [LclId] =
                          CCCS (,)! [sat_s9Xuj sat_s9Xun];
                    } in  (#,#) [ipv_s9Xug sat_s9Xuo];
              };
        };

GHC.IO.Encoding.getForeignEncoding1
  :: (GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding,
      GHC.IO.Encoding.Types.TextEncoding -> GHC.Types.IO ())
[GblId] =
    [] \u []
        case GHC.IO.Encoding.getForeignEncoding2 GHC.Prim.realWorld# of {
          (#,#) _ [Occ=Dead] ipv1_s9Xur [Occ=Once] -> ipv1_s9Xur;
        };

GHC.IO.Encoding.getForeignEncoding
  :: GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding
[GblId] =
    [] \u []
        case GHC.IO.Encoding.getForeignEncoding1 of {
          (,) getForeignEncoding5_s9Xut [Occ=Once] _ [Occ=Dead] ->
              getForeignEncoding5_s9Xut;
        };

GHC.IO.Encoding.setForeignEncoding
  :: GHC.IO.Encoding.Types.TextEncoding -> GHC.Types.IO ()
[GblId] =
    [] \u []
        case GHC.IO.Encoding.getForeignEncoding1 of {
          (,) _ [Occ=Dead] setForeignEncoding1_s9Xux [Occ=Once] ->
              setForeignEncoding1_s9Xux;
        };

GHC.IO.Encoding.getFileSystemEncoding4
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Encoding.Types.TextEncoding #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [s_s9Xuy]
        case noDuplicate# [s_s9Xuy] of s'_s9Xuz {
          __DEFAULT ->
              GHC.IO.Encoding.getFileSystemEncoding5
                  GHC.IO.Encoding.Failure.RoundtripFailure
                  GHC.IO.Encoding.Iconv.localeEncodingName
                  s'_s9Xuz;
        };

GHC.IO.Encoding.getFileSystemEncoding3
  :: GHC.IO.Encoding.Types.TextEncoding
[GblId] =
    [] \u []
        case
            GHC.IO.Encoding.getFileSystemEncoding4 GHC.Prim.realWorld#
        of
        { (#,#) _ [Occ=Dead] ipv1_s9XuC [Occ=Once] -> ipv1_s9XuC;
        };

GHC.IO.Encoding.getFileSystemEncoding2
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding,
            GHC.IO.Encoding.Types.TextEncoding -> GHC.Types.IO ()) #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [s_s9XuD]
        case noDuplicate# [s_s9XuD] of s'_s9XuE {
          __DEFAULT ->
              case
                  newMutVar# [GHC.IO.Encoding.getFileSystemEncoding3 s'_s9XuE]
              of
              { (#,#) ipv_s9XuG [Occ=Once] ipv1_s9XuH ->
                    let {
                      sat_s9XuN [Occ=Once]
                        :: GHC.IO.Encoding.Types.TextEncoding -> GHC.Types.IO ()
                      [LclId] =
                          [ipv1_s9XuH] \r [val_s9XuK eta_s9XuL]
                              case writeMutVar# [ipv1_s9XuH val_s9XuK eta_s9XuL] of s2#_s9XuM {
                                __DEFAULT -> (#,#) [s2#_s9XuM GHC.Tuple.()];
                              }; } in
                    let {
                      sat_s9XuJ [Occ=Once]
                        :: GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding
                      [LclId] =
                          [ipv1_s9XuH] \r [eta_s9XuI]
                              readMutVar# [ipv1_s9XuH eta_s9XuI]; } in
                    let {
                      sat_s9XuO [Occ=Once]
                        :: (GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding,
                            GHC.IO.Encoding.Types.TextEncoding -> GHC.Types.IO ())
                      [LclId] =
                          CCCS (,)! [sat_s9XuJ sat_s9XuN];
                    } in  (#,#) [ipv_s9XuG sat_s9XuO];
              };
        };

GHC.IO.Encoding.getFileSystemEncoding1
  :: (GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding,
      GHC.IO.Encoding.Types.TextEncoding -> GHC.Types.IO ())
[GblId] =
    [] \u []
        case
            GHC.IO.Encoding.getFileSystemEncoding2 GHC.Prim.realWorld#
        of
        { (#,#) _ [Occ=Dead] ipv1_s9XuR [Occ=Once] -> ipv1_s9XuR;
        };

GHC.IO.Encoding.getFileSystemEncoding
  :: GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding
[GblId] =
    [] \u []
        case GHC.IO.Encoding.getFileSystemEncoding1 of {
          (,) getFileSystemEncoding81_s9XuT [Occ=Once] _ [Occ=Dead] ->
              getFileSystemEncoding81_s9XuT;
        };

GHC.IO.Encoding.argvEncoding
  :: GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding
[GblId] =
    [] \u [] GHC.IO.Encoding.getFileSystemEncoding;

GHC.IO.Encoding.setFileSystemEncoding
  :: GHC.IO.Encoding.Types.TextEncoding -> GHC.Types.IO ()
[GblId] =
    [] \u []
        case GHC.IO.Encoding.getFileSystemEncoding1 of {
          (,) _ [Occ=Dead] setFileSystemEncoding1_s9XuX [Occ=Once] ->
              setFileSystemEncoding1_s9XuX;
        };

GHC.IO.Encoding.initLocaleEncoding1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Encoding.Types.TextEncoding #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [s_s9XuY]
        case noDuplicate# [s_s9XuY] of s'_s9XuZ {
          __DEFAULT ->
              GHC.IO.Encoding.getFileSystemEncoding5
                  GHC.IO.Encoding.Failure.ErrorOnCodingFailure
                  GHC.IO.Encoding.Iconv.localeEncodingName
                  s'_s9XuZ;
        };

GHC.IO.Encoding.initLocaleEncoding
  :: GHC.IO.Encoding.Types.TextEncoding
[GblId] =
    [] \u []
        case GHC.IO.Encoding.initLocaleEncoding1 GHC.Prim.realWorld# of {
          (#,#) _ [Occ=Dead] ipv1_s9Xv2 [Occ=Once] -> ipv1_s9Xv2;
        };

GHC.IO.Encoding.getLocaleEncoding2
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding,
            GHC.IO.Encoding.Types.TextEncoding -> GHC.Types.IO ()) #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [s_s9Xv3]
        case noDuplicate# [s_s9Xv3] of s'_s9Xv4 {
          __DEFAULT ->
              case newMutVar# [GHC.IO.Encoding.initLocaleEncoding s'_s9Xv4] of {
                (#,#) ipv_s9Xv6 [Occ=Once] ipv1_s9Xv7 ->
                    let {
                      sat_s9Xvd [Occ=Once]
                        :: GHC.IO.Encoding.Types.TextEncoding -> GHC.Types.IO ()
                      [LclId] =
                          [ipv1_s9Xv7] \r [val_s9Xva eta_s9Xvb]
                              case writeMutVar# [ipv1_s9Xv7 val_s9Xva eta_s9Xvb] of s2#_s9Xvc {
                                __DEFAULT -> (#,#) [s2#_s9Xvc GHC.Tuple.()];
                              }; } in
                    let {
                      sat_s9Xv9 [Occ=Once]
                        :: GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding
                      [LclId] =
                          [ipv1_s9Xv7] \r [eta_s9Xv8]
                              readMutVar# [ipv1_s9Xv7 eta_s9Xv8]; } in
                    let {
                      sat_s9Xve [Occ=Once]
                        :: (GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding,
                            GHC.IO.Encoding.Types.TextEncoding -> GHC.Types.IO ())
                      [LclId] =
                          CCCS (,)! [sat_s9Xv9 sat_s9Xvd];
                    } in  (#,#) [ipv_s9Xv6 sat_s9Xve];
              };
        };

GHC.IO.Encoding.getLocaleEncoding1
  :: (GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding,
      GHC.IO.Encoding.Types.TextEncoding -> GHC.Types.IO ())
[GblId] =
    [] \u []
        case GHC.IO.Encoding.getLocaleEncoding2 GHC.Prim.realWorld# of {
          (#,#) _ [Occ=Dead] ipv1_s9Xvh [Occ=Once] -> ipv1_s9Xvh;
        };

GHC.IO.Encoding.getLocaleEncoding
  :: GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding
[GblId] =
    [] \u []
        case GHC.IO.Encoding.getLocaleEncoding1 of {
          (,) getLocaleEncoding3_s9Xvj [Occ=Once] _ [Occ=Dead] ->
              getLocaleEncoding3_s9Xvj;
        };

GHC.IO.Encoding.setLocaleEncoding
  :: GHC.IO.Encoding.Types.TextEncoding -> GHC.Types.IO ()
[GblId] =
    [] \u []
        case GHC.IO.Encoding.getLocaleEncoding1 of {
          (,) _ [Occ=Dead] setLocaleEncoding1_s9Xvn [Occ=Once] ->
              setLocaleEncoding1_s9Xvn;
        };

GHC.IO.Encoding.latin1_decode1
  :: GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.IO.Buffer.CharBuffer
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Buffer.Buffer GHC.Word.Word8,
            GHC.IO.Buffer.Buffer GHC.Types.Char) #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LLLLSL),1*U(U,U,U,U,U,U)><S(LLLSLS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [input_s9Xvo output_s9Xvp s_s9Xvq]
        case
            GHC.IO.Encoding.Latin1.latin5 input_s9Xvo output_s9Xvp s_s9Xvq
        of
        { (#,#) ipv_s9Xvs [Occ=Once] ipv1_s9Xvt [Occ=Once!] ->
              let {
                sat_s9Xvy [Occ=Once]
                  :: (GHC.IO.Buffer.Buffer GHC.Word.Word8,
                      GHC.IO.Buffer.Buffer GHC.Types.Char)
                [LclId] =
                    [ipv1_s9Xvt] \u []
                        case ipv1_s9Xvt of {
                          (,,) _ [Occ=Dead]
                               input'_s9Xvw [Occ=Once]
                               output'_s9Xvx [Occ=Once] ->
                              (,) [input'_s9Xvw output'_s9Xvx];
                        };
              } in  (#,#) [ipv_s9Xvs sat_s9Xvy];
        };

GHC.IO.Encoding.latin1_decode
  :: GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.IO.Buffer.CharBuffer
     -> GHC.Types.IO
          (GHC.IO.Buffer.Buffer GHC.Word.Word8, GHC.IO.Buffer.CharBuffer)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LLLLSL),1*U(U,U,U,U,U,U)><S(LLLSLS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.IO.Encoding.latin1_decode1 eta_B3 eta_B2 eta_B1;

GHC.IO.Encoding.latin1_encode1
  :: GHC.IO.Buffer.CharBuffer
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Buffer.Buffer GHC.Types.Char,
            GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LLLLSL),1*U(U,U,U,U,U,U)><S(LLLSLS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [input_s9Xvz output_s9XvA s_s9XvB]
        case
            GHC.IO.Encoding.Latin1.latin3 input_s9Xvz output_s9XvA s_s9XvB
        of
        { (#,#) ipv_s9XvD [Occ=Once] ipv1_s9XvE [Occ=Once!] ->
              let {
                sat_s9XvJ [Occ=Once]
                  :: (GHC.IO.Buffer.Buffer GHC.Types.Char,
                      GHC.IO.Buffer.Buffer GHC.Word.Word8)
                [LclId] =
                    [ipv1_s9XvE] \u []
                        case ipv1_s9XvE of {
                          (,,) _ [Occ=Dead]
                               input'_s9XvH [Occ=Once]
                               output'_s9XvI [Occ=Once] ->
                              (,) [input'_s9XvH output'_s9XvI];
                        };
              } in  (#,#) [ipv_s9XvD sat_s9XvJ];
        };

GHC.IO.Encoding.latin1_encode
  :: GHC.IO.Buffer.CharBuffer
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Types.IO
          (GHC.IO.Buffer.CharBuffer, GHC.IO.Buffer.Buffer GHC.Word.Word8)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LLLLSL),1*U(U,U,U,U,U,U)><S(LLLSLS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.IO.Encoding.latin1_encode1 eta_B3 eta_B2 eta_B1;


==================== STG syntax: ====================
2018-03-16 16:05:01.975602964 UTC

GHC.IO.Encoding.latin1 :: GHC.IO.Encoding.Types.TextEncoding
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.IO.Encoding.Latin1.latin1_checked;

GHC.IO.Encoding.utf8 :: GHC.IO.Encoding.Types.TextEncoding
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.IO.Encoding.UTF8.utf8;

GHC.IO.Encoding.utf8_bom :: GHC.IO.Encoding.Types.TextEncoding
[GblId] =
    [] \u [] GHC.IO.Encoding.UTF8.utf8_bom;

GHC.IO.Encoding.utf16 :: GHC.IO.Encoding.Types.TextEncoding
[GblId] =
    [] \u [] GHC.IO.Encoding.UTF16.utf16;

GHC.IO.Encoding.utf16le :: GHC.IO.Encoding.Types.TextEncoding
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.IO.Encoding.UTF16.utf16le;

GHC.IO.Encoding.utf16be :: GHC.IO.Encoding.Types.TextEncoding
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.IO.Encoding.UTF16.utf16be;

GHC.IO.Encoding.utf32 :: GHC.IO.Encoding.Types.TextEncoding
[GblId] =
    [] \u [] GHC.IO.Encoding.UTF32.utf32;

GHC.IO.Encoding.utf32le :: GHC.IO.Encoding.Types.TextEncoding
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.IO.Encoding.UTF32.utf32le;

GHC.IO.Encoding.utf32be :: GHC.IO.Encoding.Types.TextEncoding
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.IO.Encoding.UTF32.utf32be;

GHC.IO.Encoding.char8 :: GHC.IO.Encoding.Types.TextEncoding
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.IO.Encoding.Latin1.latin1;

lvl_r9XsW :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "mkTextEncoding"#;

lvl1_r9XsX :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl_r9XsW;

lvl2_r9XsY :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "unknown encoding:"#;

GHC.IO.Encoding.mkTextEncoding2
  :: forall a.
     GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=2, Str=<B,U><B,U>x, Unf=OtherCon []] =
    [] \r [e_s9Xt0 void_0E]
        let {
          sat_s9Xt4 [Occ=Once] :: GHC.Exception.SomeException
          [LclId] =
              [e_s9Xt0] \u []
                  let {
                    sat_s9Xt2 [Occ=Once] :: GHC.Base.String
                    [LclId] =
                        [e_s9Xt0] \u []
                            GHC.CString.unpackAppendCString# lvl2_r9XsY e_s9Xt0; } in
                  let {
                    sat_s9Xt3 [Occ=Once] :: GHC.IO.Exception.IOException
                    [LclId] =
                        CCCS GHC.IO.Exception.IOError! [GHC.Base.Nothing
                                                        GHC.IO.Exception.NoSuchThing
                                                        lvl1_r9XsX
                                                        sat_s9Xt2
                                                        GHC.Base.Nothing
                                                        GHC.Base.Nothing];
                  } in 
                    GHC.IO.Exception.$fExceptionIOException_$ctoException sat_s9Xt3;
        } in  raiseIO# [sat_s9Xt4 GHC.Prim.void#];

GHC.IO.Encoding.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.IO.Encoding.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.$trModule4];

GHC.IO.Encoding.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.IO.Encoding"#;

GHC.IO.Encoding.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.$trModule2];

GHC.IO.Encoding.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.IO.Encoding.$trModule3
                                     GHC.IO.Encoding.$trModule1];

GHC.IO.Encoding.getFileSystemEncoding33 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ISO_8859-1:1987"#;

GHC.IO.Encoding.getFileSystemEncoding32 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding33;

GHC.IO.Encoding.getFileSystemEncoding31 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "iso-ir-100"#;

GHC.IO.Encoding.getFileSystemEncoding30 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding31;

GHC.IO.Encoding.getFileSystemEncoding29 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ISO_8859-1"#;

GHC.IO.Encoding.getFileSystemEncoding28 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding29;

GHC.IO.Encoding.getFileSystemEncoding27 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ISO-8859-1"#;

GHC.IO.Encoding.getFileSystemEncoding26 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding27;

GHC.IO.Encoding.getFileSystemEncoding25 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "latin1"#;

GHC.IO.Encoding.getFileSystemEncoding24 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding25;

GHC.IO.Encoding.getFileSystemEncoding23 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "l1"#;

GHC.IO.Encoding.getFileSystemEncoding22 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding23;

GHC.IO.Encoding.getFileSystemEncoding21 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "IBM819"#;

GHC.IO.Encoding.getFileSystemEncoding20 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding21;

GHC.IO.Encoding.getFileSystemEncoding19 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "CP819"#;

GHC.IO.Encoding.getFileSystemEncoding18 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding19;

GHC.IO.Encoding.getFileSystemEncoding17 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "csISOLatin1"#;

GHC.IO.Encoding.getFileSystemEncoding16 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding17;

GHC.IO.Encoding.getFileSystemEncoding15 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding16
                      GHC.Types.[]];

GHC.IO.Encoding.getFileSystemEncoding14 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding18
                      GHC.IO.Encoding.getFileSystemEncoding15];

GHC.IO.Encoding.getFileSystemEncoding13 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding20
                      GHC.IO.Encoding.getFileSystemEncoding14];

GHC.IO.Encoding.getFileSystemEncoding12 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding22
                      GHC.IO.Encoding.getFileSystemEncoding13];

GHC.IO.Encoding.getFileSystemEncoding11 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding24
                      GHC.IO.Encoding.getFileSystemEncoding12];

GHC.IO.Encoding.getFileSystemEncoding10 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding26
                      GHC.IO.Encoding.getFileSystemEncoding11];

GHC.IO.Encoding.getFileSystemEncoding9 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding28
                      GHC.IO.Encoding.getFileSystemEncoding10];

GHC.IO.Encoding.getFileSystemEncoding8 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding30
                      GHC.IO.Encoding.getFileSystemEncoding9];

GHC.IO.Encoding.getFileSystemEncoding7 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding32
                      GHC.IO.Encoding.getFileSystemEncoding8];

GHC.IO.Encoding.getFileSystemEncoding66 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ANSI_X3.4-1968"#;

GHC.IO.Encoding.getFileSystemEncoding65 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding66;

GHC.IO.Encoding.getFileSystemEncoding64 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "iso-ir-6"#;

GHC.IO.Encoding.getFileSystemEncoding63 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding64;

GHC.IO.Encoding.getFileSystemEncoding62 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ANSI_X3.4-1986"#;

GHC.IO.Encoding.getFileSystemEncoding61 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding62;

GHC.IO.Encoding.getFileSystemEncoding60 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ISO_646.irv:1991"#;

GHC.IO.Encoding.getFileSystemEncoding59 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding60;

GHC.IO.Encoding.getFileSystemEncoding58 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "US-ASCII"#;

GHC.IO.Encoding.getFileSystemEncoding57 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding58;

GHC.IO.Encoding.getFileSystemEncoding56 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "us"#;

GHC.IO.Encoding.getFileSystemEncoding55 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding56;

GHC.IO.Encoding.getFileSystemEncoding54 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "IBM367"#;

GHC.IO.Encoding.getFileSystemEncoding53 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding54;

GHC.IO.Encoding.getFileSystemEncoding52 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "cp367"#;

GHC.IO.Encoding.getFileSystemEncoding51 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding52;

GHC.IO.Encoding.getFileSystemEncoding50 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "csASCII"#;

GHC.IO.Encoding.getFileSystemEncoding49 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding50;

GHC.IO.Encoding.getFileSystemEncoding48 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ASCII"#;

GHC.IO.Encoding.getFileSystemEncoding47 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding48;

GHC.IO.Encoding.getFileSystemEncoding46 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ISO646-US"#;

GHC.IO.Encoding.getFileSystemEncoding45 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding46;

GHC.IO.Encoding.getFileSystemEncoding44 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding45
                      GHC.Types.[]];

GHC.IO.Encoding.getFileSystemEncoding43 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding47
                      GHC.IO.Encoding.getFileSystemEncoding44];

GHC.IO.Encoding.getFileSystemEncoding42 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding49
                      GHC.IO.Encoding.getFileSystemEncoding43];

GHC.IO.Encoding.getFileSystemEncoding41 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding51
                      GHC.IO.Encoding.getFileSystemEncoding42];

GHC.IO.Encoding.getFileSystemEncoding40 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding53
                      GHC.IO.Encoding.getFileSystemEncoding41];

GHC.IO.Encoding.getFileSystemEncoding39 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding55
                      GHC.IO.Encoding.getFileSystemEncoding40];

GHC.IO.Encoding.getFileSystemEncoding38 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding57
                      GHC.IO.Encoding.getFileSystemEncoding39];

GHC.IO.Encoding.getFileSystemEncoding37 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding59
                      GHC.IO.Encoding.getFileSystemEncoding38];

GHC.IO.Encoding.getFileSystemEncoding36 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding61
                      GHC.IO.Encoding.getFileSystemEncoding37];

GHC.IO.Encoding.getFileSystemEncoding35 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding63
                      GHC.IO.Encoding.getFileSystemEncoding36];

GHC.IO.Encoding.getFileSystemEncoding34 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding65
                      GHC.IO.Encoding.getFileSystemEncoding35];

GHC.IO.Encoding.getFileSystemEncoding68 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "UTF8"#;

GHC.IO.Encoding.getFileSystemEncoding67 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding68;

GHC.IO.Encoding.getFileSystemEncoding70 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "UTF32LE"#;

GHC.IO.Encoding.getFileSystemEncoding69 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding70;

GHC.IO.Encoding.getFileSystemEncoding72 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "UTF32BE"#;

GHC.IO.Encoding.getFileSystemEncoding71 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding72;

GHC.IO.Encoding.getFileSystemEncoding74 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "UTF32"#;

GHC.IO.Encoding.getFileSystemEncoding73 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding74;

GHC.IO.Encoding.getFileSystemEncoding76 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "UTF16LE"#;

GHC.IO.Encoding.getFileSystemEncoding75 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding76;

GHC.IO.Encoding.getFileSystemEncoding78 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "UTF16BE"#;

GHC.IO.Encoding.getFileSystemEncoding77 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding78;

GHC.IO.Encoding.getFileSystemEncoding80 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "UTF16"#;

GHC.IO.Encoding.getFileSystemEncoding79 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding80;

GHC.IO.Encoding.getFileSystemEncoding_go [Occ=LoopBreaker]
  :: [GHC.Types.Char] -> [GHC.Types.Char]
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s9Xt5]
        case ds_s9Xt5 of {
          [] -> [] [];
          : y_s9Xt7 [Occ=Once!] ys_s9Xt8 [Occ=Once*] ->
              case y_s9Xt7 of {
                GHC.Types.C# x_s9Xta [Occ=Once!] ->
                    case x_s9Xta of wild2_s9Xtb {
                      __DEFAULT ->
                          let {
                            sat_s9Xtl [Occ=Once] :: [GHC.Types.Char]
                            [LclId] =
                                [ys_s9Xt8] \u []
                                    GHC.IO.Encoding.getFileSystemEncoding_go ys_s9Xt8; } in
                          let {
                            sat_s9Xtk [Occ=Once] :: GHC.Types.Char
                            [LclId] =
                                [wild2_s9Xtb] \u []
                                    case ord# [wild2_s9Xtb] of sat_s9Xtd {
                                      __DEFAULT ->
                                          case
                                              __pkg_ccall base-4.11.0.0 [sat_s9Xtd
                                                                         GHC.Prim.realWorld#]
                                          of
                                          { Unit# ds2_s9Xtg ->
                                                case int2Word# [ds2_s9Xtg] of sat_s9Xth {
                                                  __DEFAULT ->
                                                      case leWord# [sat_s9Xth 1114111##] of {
                                                        __DEFAULT -> GHC.Char.$wlvl ds2_s9Xtg;
                                                        1# ->
                                                            case chr# [ds2_s9Xtg] of sat_s9Xtj {
                                                              __DEFAULT -> GHC.Types.C# [sat_s9Xtj];
                                                            };
                                                      };
                                                };
                                          };
                                    };
                          } in  : [sat_s9Xtk sat_s9Xtl];
                      '-'# -> GHC.IO.Encoding.getFileSystemEncoding_go ys_s9Xt8;
                    };
              };
        };

GHC.IO.Encoding.getFileSystemEncoding6
  :: GHC.IO.Encoding.Failure.CodingFailureMode
     -> GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Encoding.Types.TextEncoding #)
[GblId, Arity=3, Str=<B,1*U><B,1*U><B,U>x, Unf=OtherCon []] =
    [] \r [cfm_s9Xtm enc_s9Xtn void_0E]
        let {
          sat_s9Xtq [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
          [LclId] =
              [cfm_s9Xtm] \s []
                  case cfm_s9Xtm of {
                    GHC.IO.Encoding.Failure.ErrorOnCodingFailure -> [] [];
                    GHC.IO.Encoding.Failure.IgnoreCodingFailure ->
                        GHC.IO.Encoding.Failure.codingFailureModeSuffix5;
                    GHC.IO.Encoding.Failure.TransliterateCodingFailure ->
                        GHC.IO.Encoding.Failure.codingFailureModeSuffix3;
                    GHC.IO.Encoding.Failure.RoundtripFailure ->
                        GHC.IO.Encoding.Failure.codingFailureModeSuffix1;
                  };
        } in 
          case GHC.Base.++ enc_s9Xtn sat_s9Xtq of sat_s9Xtr {
            __DEFAULT ->
                GHC.IO.Encoding.mkTextEncoding2 sat_s9Xtr GHC.Prim.void#;
          };

GHC.IO.Encoding.getFileSystemEncoding5
  :: GHC.IO.Encoding.Failure.CodingFailureMode
     -> GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Encoding.Types.TextEncoding #)
[GblId, Arity=3, Str=<L,U><S,U><S,U>, Unf=OtherCon []] =
    [] \r [cfm_s9Xts enc_s9Xtt void_0E]
        case
            GHC.IO.Encoding.getFileSystemEncoding_go enc_s9Xtt
        of
        ds_s9Xtv [Dmd=<S,U>]
        { __DEFAULT ->
              case
                  GHC.Base.eqString ds_s9Xtv GHC.IO.Encoding.getFileSystemEncoding79
              of
              { GHC.Types.False ->
                    case
                        GHC.Base.eqString ds_s9Xtv GHC.IO.Encoding.getFileSystemEncoding77
                    of
                    { GHC.Types.False ->
                          case
                              GHC.Base.eqString ds_s9Xtv GHC.IO.Encoding.getFileSystemEncoding75
                          of
                          { GHC.Types.False ->
                                case
                                    GHC.Base.eqString
                                        ds_s9Xtv GHC.IO.Encoding.getFileSystemEncoding73
                                of
                                { GHC.Types.False ->
                                      case
                                          GHC.Base.eqString
                                              ds_s9Xtv GHC.IO.Encoding.getFileSystemEncoding71
                                      of
                                      { GHC.Types.False ->
                                            case
                                                GHC.Base.eqString
                                                    ds_s9Xtv GHC.IO.Encoding.getFileSystemEncoding69
                                            of
                                            { GHC.Types.False ->
                                                  case
                                                      GHC.Base.eqString
                                                          ds_s9Xtv
                                                          GHC.IO.Encoding.getFileSystemEncoding67
                                                  of
                                                  { GHC.Types.False ->
                                                        case
                                                            GHC.List.elem
                                                                GHC.Classes.$fEq[]_$s$fEq[]1
                                                                enc_s9Xtt
                                                                GHC.IO.Encoding.getFileSystemEncoding34
                                                        of
                                                        { GHC.Types.False ->
                                                              case
                                                                  GHC.List.elem
                                                                      GHC.Classes.$fEq[]_$s$fEq[]1
                                                                      enc_s9Xtt
                                                                      GHC.IO.Encoding.getFileSystemEncoding7
                                                              of
                                                              { GHC.Types.False ->
                                                                    case
                                                                        GHC.IO.Encoding.Iconv.iconvEncoding2
                                                                            cfm_s9Xts
                                                                            enc_s9Xtt
                                                                            GHC.Prim.void#
                                                                    of
                                                                    { Unit# ipv1_s9XtH [Occ=Once!] ->
                                                                          case ipv1_s9XtH of {
                                                                            GHC.Base.Nothing ->
                                                                                GHC.IO.Encoding.getFileSystemEncoding6
                                                                                    cfm_s9Xts
                                                                                    enc_s9Xtt
                                                                                    GHC.Prim.void#;
                                                                            GHC.Base.Just e_s9XtJ [Occ=Once] ->
                                                                                Unit# [e_s9XtJ];
                                                                          };
                                                                    };
                                                                GHC.Types.True ->
                                                                    let {
                                                                      sat_s9XtK [Occ=Once]
                                                                        :: GHC.IO.Encoding.Types.TextEncoding
                                                                      [LclId] =
                                                                          [cfm_s9Xts] \u []
                                                                              GHC.IO.Encoding.Latin1.mkLatin1_checked
                                                                                  cfm_s9Xts;
                                                                    } in  Unit# [sat_s9XtK];
                                                              };
                                                          GHC.Types.True ->
                                                              let {
                                                                sat_s9XtL [Occ=Once]
                                                                  :: GHC.IO.Encoding.Types.TextEncoding
                                                                [LclId] =
                                                                    [cfm_s9Xts] \u []
                                                                        GHC.IO.Encoding.Latin1.mkAscii
                                                                            cfm_s9Xts;
                                                              } in  Unit# [sat_s9XtL];
                                                        };
                                                    GHC.Types.True ->
                                                        let {
                                                          sat_s9XtM [Occ=Once]
                                                            :: GHC.IO.Encoding.Types.TextEncoding
                                                          [LclId] =
                                                              [cfm_s9Xts] \u []
                                                                  GHC.IO.Encoding.UTF8.mkUTF8
                                                                      cfm_s9Xts;
                                                        } in  Unit# [sat_s9XtM];
                                                  };
                                              GHC.Types.True ->
                                                  let {
                                                    sat_s9XtN [Occ=Once]
                                                      :: GHC.IO.Encoding.Types.TextEncoding
                                                    [LclId] =
                                                        [cfm_s9Xts] \u []
                                                            GHC.IO.Encoding.UTF32.mkUTF32le
                                                                cfm_s9Xts;
                                                  } in  Unit# [sat_s9XtN];
                                            };
                                        GHC.Types.True ->
                                            let {
                                              sat_s9XtO [Occ=Once]
                                                :: GHC.IO.Encoding.Types.TextEncoding
                                              [LclId] =
                                                  [cfm_s9Xts] \u []
                                                      GHC.IO.Encoding.UTF32.mkUTF32be cfm_s9Xts;
                                            } in  Unit# [sat_s9XtO];
                                      };
                                  GHC.Types.True ->
                                      let {
                                        sat_s9XtP [Occ=Once] :: GHC.IO.Encoding.Types.TextEncoding
                                        [LclId] =
                                            [cfm_s9Xts] \u []
                                                GHC.IO.Encoding.UTF32.mkUTF32 cfm_s9Xts;
                                      } in  Unit# [sat_s9XtP];
                                };
                            GHC.Types.True ->
                                let {
                                  sat_s9XtQ [Occ=Once] :: GHC.IO.Encoding.Types.TextEncoding
                                  [LclId] =
                                      [cfm_s9Xts] \u [] GHC.IO.Encoding.UTF16.mkUTF16le cfm_s9Xts;
                                } in  Unit# [sat_s9XtQ];
                          };
                      GHC.Types.True ->
                          let {
                            sat_s9XtR [Occ=Once] :: GHC.IO.Encoding.Types.TextEncoding
                            [LclId] =
                                [cfm_s9Xts] \u [] GHC.IO.Encoding.UTF16.mkUTF16be cfm_s9Xts;
                          } in  Unit# [sat_s9XtR];
                    };
                GHC.Types.True ->
                    let {
                      sat_s9XtS [Occ=Once] :: GHC.IO.Encoding.Types.TextEncoding
                      [LclId] =
                          [cfm_s9Xts] \u [] GHC.IO.Encoding.UTF16.mkUTF16 cfm_s9Xts;
                    } in  Unit# [sat_s9XtS];
              };
        };

GHC.IO.Encoding.mkTextEncoding9 :: GHC.Types.Char -> GHC.Types.Bool
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(1*U)>,
 Unf=OtherCon []] =
    [] \r [ds_s9XtT]
        case ds_s9XtT of {
          GHC.Types.C# x_s9XtV [Occ=Once!] ->
              case x_s9XtV of {
                __DEFAULT -> GHC.Types.True [];
                '/'# -> GHC.Types.False [];
              };
        };

GHC.IO.Encoding.mkTextEncoding4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "//TRANSLIT"#;

GHC.IO.Encoding.mkTextEncoding3 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.mkTextEncoding4;

GHC.IO.Encoding.mkTextEncoding6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "//ROUNDTRIP"#;

GHC.IO.Encoding.mkTextEncoding5 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.mkTextEncoding6;

GHC.IO.Encoding.mkTextEncoding8 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "//IGNORE"#;

GHC.IO.Encoding.mkTextEncoding7 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.mkTextEncoding8;

GHC.IO.Encoding.mkTextEncoding1
  :: GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Encoding.Types.TextEncoding #)
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [e_s9XtX void_0E]
        case GHC.List.$wspan GHC.IO.Encoding.mkTextEncoding9 e_s9XtX of {
          (#,#) ww1_s9Xu0 [Occ=Once*] ww2_s9Xu1 [Occ=Once!] ->
              case ww2_s9Xu1 of wild_s9Xu2 {
                [] ->
                    GHC.IO.Encoding.getFileSystemEncoding5
                        GHC.IO.Encoding.Failure.ErrorOnCodingFailure
                        ww1_s9Xu0
                        GHC.Prim.void#;
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    case
                        GHC.Base.eqString wild_s9Xu2 GHC.IO.Encoding.mkTextEncoding7
                    of
                    { GHC.Types.False ->
                          case
                              GHC.Base.eqString wild_s9Xu2 GHC.IO.Encoding.mkTextEncoding5
                          of
                          { GHC.Types.False ->
                                case
                                    GHC.Base.eqString wild_s9Xu2 GHC.IO.Encoding.mkTextEncoding3
                                of
                                { GHC.Types.False ->
                                      GHC.IO.Encoding.mkTextEncoding2 e_s9XtX GHC.Prim.void#;
                                  GHC.Types.True ->
                                      GHC.IO.Encoding.getFileSystemEncoding5
                                          GHC.IO.Encoding.Failure.TransliterateCodingFailure
                                          ww1_s9Xu0
                                          GHC.Prim.void#;
                                };
                            GHC.Types.True ->
                                GHC.IO.Encoding.getFileSystemEncoding5
                                    GHC.IO.Encoding.Failure.RoundtripFailure
                                    ww1_s9Xu0
                                    GHC.Prim.void#;
                          };
                      GHC.Types.True ->
                          GHC.IO.Encoding.getFileSystemEncoding5
                              GHC.IO.Encoding.Failure.IgnoreCodingFailure
                              ww1_s9Xu0
                              GHC.Prim.void#;
                    };
              };
        };

GHC.IO.Encoding.mkTextEncoding
  :: GHC.Base.String
     -> GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.IO.Encoding.mkTextEncoding1 eta_B2 GHC.Prim.void#;

GHC.IO.Encoding.getForeignEncoding4
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Encoding.Types.TextEncoding #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E]
        case noDuplicate# [GHC.Prim.void#] of s'_s9Xu9 {
          (##) ->
              GHC.IO.Encoding.getFileSystemEncoding5
                  GHC.IO.Encoding.Failure.IgnoreCodingFailure
                  GHC.IO.Encoding.Iconv.localeEncodingName
                  GHC.Prim.void#;
        };

GHC.IO.Encoding.getForeignEncoding3
  :: GHC.IO.Encoding.Types.TextEncoding
[GblId] =
    [] \u []
        case GHC.IO.Encoding.getForeignEncoding4 GHC.Prim.realWorld# of {
          Unit# ipv1_s9Xuc [Occ=Once] -> ipv1_s9Xuc;
        };

GHC.IO.Encoding.getForeignEncoding2
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding,
            GHC.IO.Encoding.Types.TextEncoding -> GHC.Types.IO ()) #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E]
        case noDuplicate# [GHC.Prim.void#] of s'_s9Xue {
          (##) ->
              case
                  newMutVar# [GHC.IO.Encoding.getForeignEncoding3 GHC.Prim.void#]
              of
              { Unit# ipv1_s9Xuh ->
                    let {
                      sat_s9Xun [Occ=Once]
                        :: GHC.IO.Encoding.Types.TextEncoding -> GHC.Types.IO ()
                      [LclId] =
                          [ipv1_s9Xuh] \r [val_s9Xuk void_0E]
                              case
                                  writeMutVar# [ipv1_s9Xuh val_s9Xuk GHC.Prim.void#]
                              of
                              s2#_s9Xum
                              { (##) -> Unit# [GHC.Tuple.()];
                              }; } in
                    let {
                      sat_s9Xuj [Occ=Once]
                        :: GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding
                      [LclId] =
                          [ipv1_s9Xuh] \r [void_0E]
                              readMutVar# [ipv1_s9Xuh GHC.Prim.void#]; } in
                    let {
                      sat_s9Xuo [Occ=Once]
                        :: (GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding,
                            GHC.IO.Encoding.Types.TextEncoding -> GHC.Types.IO ())
                      [LclId] =
                          CCCS (,)! [sat_s9Xuj sat_s9Xun];
                    } in  Unit# [sat_s9Xuo];
              };
        };

GHC.IO.Encoding.getForeignEncoding1
  :: (GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding,
      GHC.IO.Encoding.Types.TextEncoding -> GHC.Types.IO ())
[GblId] =
    [] \u []
        case GHC.IO.Encoding.getForeignEncoding2 GHC.Prim.realWorld# of {
          Unit# ipv1_s9Xur [Occ=Once] -> ipv1_s9Xur;
        };

GHC.IO.Encoding.getForeignEncoding
  :: GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding
[GblId] =
    [] \u []
        case GHC.IO.Encoding.getForeignEncoding1 of {
          (,) getForeignEncoding5_s9Xut [Occ=Once] _ [Occ=Dead] ->
              getForeignEncoding5_s9Xut;
        };

GHC.IO.Encoding.setForeignEncoding
  :: GHC.IO.Encoding.Types.TextEncoding -> GHC.Types.IO ()
[GblId] =
    [] \u []
        case GHC.IO.Encoding.getForeignEncoding1 of {
          (,) _ [Occ=Dead] setForeignEncoding1_s9Xux [Occ=Once] ->
              setForeignEncoding1_s9Xux;
        };

GHC.IO.Encoding.getFileSystemEncoding4
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Encoding.Types.TextEncoding #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E]
        case noDuplicate# [GHC.Prim.void#] of s'_s9Xuz {
          (##) ->
              GHC.IO.Encoding.getFileSystemEncoding5
                  GHC.IO.Encoding.Failure.RoundtripFailure
                  GHC.IO.Encoding.Iconv.localeEncodingName
                  GHC.Prim.void#;
        };

GHC.IO.Encoding.getFileSystemEncoding3
  :: GHC.IO.Encoding.Types.TextEncoding
[GblId] =
    [] \u []
        case
            GHC.IO.Encoding.getFileSystemEncoding4 GHC.Prim.realWorld#
        of
        { Unit# ipv1_s9XuC [Occ=Once] -> ipv1_s9XuC;
        };

GHC.IO.Encoding.getFileSystemEncoding2
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding,
            GHC.IO.Encoding.Types.TextEncoding -> GHC.Types.IO ()) #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E]
        case noDuplicate# [GHC.Prim.void#] of s'_s9XuE {
          (##) ->
              case
                  newMutVar# [GHC.IO.Encoding.getFileSystemEncoding3 GHC.Prim.void#]
              of
              { Unit# ipv1_s9XuH ->
                    let {
                      sat_s9XuN [Occ=Once]
                        :: GHC.IO.Encoding.Types.TextEncoding -> GHC.Types.IO ()
                      [LclId] =
                          [ipv1_s9XuH] \r [val_s9XuK void_0E]
                              case
                                  writeMutVar# [ipv1_s9XuH val_s9XuK GHC.Prim.void#]
                              of
                              s2#_s9XuM
                              { (##) -> Unit# [GHC.Tuple.()];
                              }; } in
                    let {
                      sat_s9XuJ [Occ=Once]
                        :: GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding
                      [LclId] =
                          [ipv1_s9XuH] \r [void_0E]
                              readMutVar# [ipv1_s9XuH GHC.Prim.void#]; } in
                    let {
                      sat_s9XuO [Occ=Once]
                        :: (GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding,
                            GHC.IO.Encoding.Types.TextEncoding -> GHC.Types.IO ())
                      [LclId] =
                          CCCS (,)! [sat_s9XuJ sat_s9XuN];
                    } in  Unit# [sat_s9XuO];
              };
        };

GHC.IO.Encoding.getFileSystemEncoding1
  :: (GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding,
      GHC.IO.Encoding.Types.TextEncoding -> GHC.Types.IO ())
[GblId] =
    [] \u []
        case
            GHC.IO.Encoding.getFileSystemEncoding2 GHC.Prim.realWorld#
        of
        { Unit# ipv1_s9XuR [Occ=Once] -> ipv1_s9XuR;
        };

GHC.IO.Encoding.getFileSystemEncoding
  :: GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding
[GblId] =
    [] \u []
        case GHC.IO.Encoding.getFileSystemEncoding1 of {
          (,) getFileSystemEncoding81_s9XuT [Occ=Once] _ [Occ=Dead] ->
              getFileSystemEncoding81_s9XuT;
        };

GHC.IO.Encoding.argvEncoding
  :: GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding
[GblId] =
    [] \u [] GHC.IO.Encoding.getFileSystemEncoding;

GHC.IO.Encoding.setFileSystemEncoding
  :: GHC.IO.Encoding.Types.TextEncoding -> GHC.Types.IO ()
[GblId] =
    [] \u []
        case GHC.IO.Encoding.getFileSystemEncoding1 of {
          (,) _ [Occ=Dead] setFileSystemEncoding1_s9XuX [Occ=Once] ->
              setFileSystemEncoding1_s9XuX;
        };

GHC.IO.Encoding.initLocaleEncoding1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Encoding.Types.TextEncoding #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E]
        case noDuplicate# [GHC.Prim.void#] of s'_s9XuZ {
          (##) ->
              GHC.IO.Encoding.getFileSystemEncoding5
                  GHC.IO.Encoding.Failure.ErrorOnCodingFailure
                  GHC.IO.Encoding.Iconv.localeEncodingName
                  GHC.Prim.void#;
        };

GHC.IO.Encoding.initLocaleEncoding
  :: GHC.IO.Encoding.Types.TextEncoding
[GblId] =
    [] \u []
        case GHC.IO.Encoding.initLocaleEncoding1 GHC.Prim.realWorld# of {
          Unit# ipv1_s9Xv2 [Occ=Once] -> ipv1_s9Xv2;
        };

GHC.IO.Encoding.getLocaleEncoding2
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding,
            GHC.IO.Encoding.Types.TextEncoding -> GHC.Types.IO ()) #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E]
        case noDuplicate# [GHC.Prim.void#] of s'_s9Xv4 {
          (##) ->
              case
                  newMutVar# [GHC.IO.Encoding.initLocaleEncoding GHC.Prim.void#]
              of
              { Unit# ipv1_s9Xv7 ->
                    let {
                      sat_s9Xvd [Occ=Once]
                        :: GHC.IO.Encoding.Types.TextEncoding -> GHC.Types.IO ()
                      [LclId] =
                          [ipv1_s9Xv7] \r [val_s9Xva void_0E]
                              case
                                  writeMutVar# [ipv1_s9Xv7 val_s9Xva GHC.Prim.void#]
                              of
                              s2#_s9Xvc
                              { (##) -> Unit# [GHC.Tuple.()];
                              }; } in
                    let {
                      sat_s9Xv9 [Occ=Once]
                        :: GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding
                      [LclId] =
                          [ipv1_s9Xv7] \r [void_0E]
                              readMutVar# [ipv1_s9Xv7 GHC.Prim.void#]; } in
                    let {
                      sat_s9Xve [Occ=Once]
                        :: (GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding,
                            GHC.IO.Encoding.Types.TextEncoding -> GHC.Types.IO ())
                      [LclId] =
                          CCCS (,)! [sat_s9Xv9 sat_s9Xvd];
                    } in  Unit# [sat_s9Xve];
              };
        };

GHC.IO.Encoding.getLocaleEncoding1
  :: (GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding,
      GHC.IO.Encoding.Types.TextEncoding -> GHC.Types.IO ())
[GblId] =
    [] \u []
        case GHC.IO.Encoding.getLocaleEncoding2 GHC.Prim.realWorld# of {
          Unit# ipv1_s9Xvh [Occ=Once] -> ipv1_s9Xvh;
        };

GHC.IO.Encoding.getLocaleEncoding
  :: GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding
[GblId] =
    [] \u []
        case GHC.IO.Encoding.getLocaleEncoding1 of {
          (,) getLocaleEncoding3_s9Xvj [Occ=Once] _ [Occ=Dead] ->
              getLocaleEncoding3_s9Xvj;
        };

GHC.IO.Encoding.setLocaleEncoding
  :: GHC.IO.Encoding.Types.TextEncoding -> GHC.Types.IO ()
[GblId] =
    [] \u []
        case GHC.IO.Encoding.getLocaleEncoding1 of {
          (,) _ [Occ=Dead] setLocaleEncoding1_s9Xvn [Occ=Once] ->
              setLocaleEncoding1_s9Xvn;
        };

GHC.IO.Encoding.latin1_decode1
  :: GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.IO.Buffer.CharBuffer
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Buffer.Buffer GHC.Word.Word8,
            GHC.IO.Buffer.Buffer GHC.Types.Char) #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LLLLSL),1*U(U,U,U,U,U,U)><S(LLLSLS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [input_s9Xvo output_s9Xvp void_0E]
        case
            GHC.IO.Encoding.Latin1.latin5
                input_s9Xvo output_s9Xvp GHC.Prim.void#
        of
        { Unit# ipv1_s9Xvt [Occ=Once!] ->
              let {
                sat_s9Xvy [Occ=Once]
                  :: (GHC.IO.Buffer.Buffer GHC.Word.Word8,
                      GHC.IO.Buffer.Buffer GHC.Types.Char)
                [LclId] =
                    [ipv1_s9Xvt] \u []
                        case ipv1_s9Xvt of {
                          (,,) _ [Occ=Dead]
                               input'_s9Xvw [Occ=Once]
                               output'_s9Xvx [Occ=Once] ->
                              (,) [input'_s9Xvw output'_s9Xvx];
                        };
              } in  Unit# [sat_s9Xvy];
        };

GHC.IO.Encoding.latin1_decode
  :: GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.IO.Buffer.CharBuffer
     -> GHC.Types.IO
          (GHC.IO.Buffer.Buffer GHC.Word.Word8, GHC.IO.Buffer.CharBuffer)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LLLLSL),1*U(U,U,U,U,U,U)><S(LLLSLS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.IO.Encoding.latin1_decode1 eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.Encoding.latin1_encode1
  :: GHC.IO.Buffer.CharBuffer
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Buffer.Buffer GHC.Types.Char,
            GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LLLLSL),1*U(U,U,U,U,U,U)><S(LLLSLS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [input_s9Xvz output_s9XvA void_0E]
        case
            GHC.IO.Encoding.Latin1.latin3
                input_s9Xvz output_s9XvA GHC.Prim.void#
        of
        { Unit# ipv1_s9XvE [Occ=Once!] ->
              let {
                sat_s9XvJ [Occ=Once]
                  :: (GHC.IO.Buffer.Buffer GHC.Types.Char,
                      GHC.IO.Buffer.Buffer GHC.Word.Word8)
                [LclId] =
                    [ipv1_s9XvE] \u []
                        case ipv1_s9XvE of {
                          (,,) _ [Occ=Dead]
                               input'_s9XvH [Occ=Once]
                               output'_s9XvI [Occ=Once] ->
                              (,) [input'_s9XvH output'_s9XvI];
                        };
              } in  Unit# [sat_s9XvJ];
        };

GHC.IO.Encoding.latin1_encode
  :: GHC.IO.Buffer.CharBuffer
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Types.IO
          (GHC.IO.Buffer.CharBuffer, GHC.IO.Buffer.Buffer GHC.Word.Word8)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LLLLSL),1*U(U,U,U,U,U,U)><S(LLLSLS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.IO.Encoding.latin1_encode1 eta_B3 eta_B2 GHC.Prim.void#;


==================== Pre unarise: ====================
2018-03-16 16:05:03.575302875 UTC

GHC.IO.Encoding.latin1 :: GHC.IO.Encoding.Types.TextEncoding
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.IO.Encoding.Latin1.latin1_checked;

GHC.IO.Encoding.utf8 :: GHC.IO.Encoding.Types.TextEncoding
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.IO.Encoding.UTF8.utf8;

GHC.IO.Encoding.utf8_bom :: GHC.IO.Encoding.Types.TextEncoding
[GblId] =
    [] \u [] GHC.IO.Encoding.UTF8.utf8_bom;

GHC.IO.Encoding.utf16 :: GHC.IO.Encoding.Types.TextEncoding
[GblId] =
    [] \u [] GHC.IO.Encoding.UTF16.utf16;

GHC.IO.Encoding.utf16le :: GHC.IO.Encoding.Types.TextEncoding
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.IO.Encoding.UTF16.utf16le;

GHC.IO.Encoding.utf16be :: GHC.IO.Encoding.Types.TextEncoding
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.IO.Encoding.UTF16.utf16be;

GHC.IO.Encoding.utf32 :: GHC.IO.Encoding.Types.TextEncoding
[GblId] =
    [] \u [] GHC.IO.Encoding.UTF32.utf32;

GHC.IO.Encoding.utf32le :: GHC.IO.Encoding.Types.TextEncoding
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.IO.Encoding.UTF32.utf32le;

GHC.IO.Encoding.utf32be :: GHC.IO.Encoding.Types.TextEncoding
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.IO.Encoding.UTF32.utf32be;

GHC.IO.Encoding.char8 :: GHC.IO.Encoding.Types.TextEncoding
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.IO.Encoding.Latin1.latin1;

lvl_r9XsW :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "mkTextEncoding"#;

lvl1_r9XsX :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl_r9XsW;

lvl2_r9XsY :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "unknown encoding:"#;

GHC.IO.Encoding.mkTextEncoding2
  :: forall a.
     GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=2, Str=<B,U><B,U>x, Unf=OtherCon []] =
    [] \r [e_s9YzZ eta_s9YA0]
        let {
          sat_s9YA3 [Occ=Once] :: GHC.Exception.SomeException
          [LclId] =
              [e_s9YzZ] \u []
                  let {
                    sat_s9YA1 [Occ=Once] :: GHC.Base.String
                    [LclId] =
                        [e_s9YzZ] \u []
                            GHC.CString.unpackAppendCString# lvl2_r9XsY e_s9YzZ; } in
                  let {
                    sat_s9YA2 [Occ=Once] :: GHC.IO.Exception.IOException
                    [LclId] =
                        CCCS GHC.IO.Exception.IOError! [GHC.Base.Nothing
                                                        GHC.IO.Exception.NoSuchThing
                                                        lvl1_r9XsX
                                                        sat_s9YA1
                                                        GHC.Base.Nothing
                                                        GHC.Base.Nothing];
                  } in 
                    GHC.IO.Exception.$fExceptionIOException_$ctoException sat_s9YA2;
        } in  raiseIO# [sat_s9YA3 eta_s9YA0];

GHC.IO.Encoding.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.IO.Encoding.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.$trModule4];

GHC.IO.Encoding.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.IO.Encoding"#;

GHC.IO.Encoding.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.$trModule2];

GHC.IO.Encoding.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.IO.Encoding.$trModule3
                                     GHC.IO.Encoding.$trModule1];

GHC.IO.Encoding.getFileSystemEncoding33 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ISO_8859-1:1987"#;

GHC.IO.Encoding.getFileSystemEncoding32 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding33;

GHC.IO.Encoding.getFileSystemEncoding31 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "iso-ir-100"#;

GHC.IO.Encoding.getFileSystemEncoding30 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding31;

GHC.IO.Encoding.getFileSystemEncoding29 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ISO_8859-1"#;

GHC.IO.Encoding.getFileSystemEncoding28 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding29;

GHC.IO.Encoding.getFileSystemEncoding27 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ISO-8859-1"#;

GHC.IO.Encoding.getFileSystemEncoding26 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding27;

GHC.IO.Encoding.getFileSystemEncoding25 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "latin1"#;

GHC.IO.Encoding.getFileSystemEncoding24 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding25;

GHC.IO.Encoding.getFileSystemEncoding23 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "l1"#;

GHC.IO.Encoding.getFileSystemEncoding22 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding23;

GHC.IO.Encoding.getFileSystemEncoding21 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "IBM819"#;

GHC.IO.Encoding.getFileSystemEncoding20 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding21;

GHC.IO.Encoding.getFileSystemEncoding19 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "CP819"#;

GHC.IO.Encoding.getFileSystemEncoding18 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding19;

GHC.IO.Encoding.getFileSystemEncoding17 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "csISOLatin1"#;

GHC.IO.Encoding.getFileSystemEncoding16 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding17;

GHC.IO.Encoding.getFileSystemEncoding15 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding16
                      GHC.Types.[]];

GHC.IO.Encoding.getFileSystemEncoding14 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding18
                      GHC.IO.Encoding.getFileSystemEncoding15];

GHC.IO.Encoding.getFileSystemEncoding13 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding20
                      GHC.IO.Encoding.getFileSystemEncoding14];

GHC.IO.Encoding.getFileSystemEncoding12 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding22
                      GHC.IO.Encoding.getFileSystemEncoding13];

GHC.IO.Encoding.getFileSystemEncoding11 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding24
                      GHC.IO.Encoding.getFileSystemEncoding12];

GHC.IO.Encoding.getFileSystemEncoding10 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding26
                      GHC.IO.Encoding.getFileSystemEncoding11];

GHC.IO.Encoding.getFileSystemEncoding9 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding28
                      GHC.IO.Encoding.getFileSystemEncoding10];

GHC.IO.Encoding.getFileSystemEncoding8 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding30
                      GHC.IO.Encoding.getFileSystemEncoding9];

GHC.IO.Encoding.getFileSystemEncoding7 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding32
                      GHC.IO.Encoding.getFileSystemEncoding8];

GHC.IO.Encoding.getFileSystemEncoding66 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ANSI_X3.4-1968"#;

GHC.IO.Encoding.getFileSystemEncoding65 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding66;

GHC.IO.Encoding.getFileSystemEncoding64 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "iso-ir-6"#;

GHC.IO.Encoding.getFileSystemEncoding63 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding64;

GHC.IO.Encoding.getFileSystemEncoding62 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ANSI_X3.4-1986"#;

GHC.IO.Encoding.getFileSystemEncoding61 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding62;

GHC.IO.Encoding.getFileSystemEncoding60 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ISO_646.irv:1991"#;

GHC.IO.Encoding.getFileSystemEncoding59 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding60;

GHC.IO.Encoding.getFileSystemEncoding58 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "US-ASCII"#;

GHC.IO.Encoding.getFileSystemEncoding57 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding58;

GHC.IO.Encoding.getFileSystemEncoding56 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "us"#;

GHC.IO.Encoding.getFileSystemEncoding55 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding56;

GHC.IO.Encoding.getFileSystemEncoding54 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "IBM367"#;

GHC.IO.Encoding.getFileSystemEncoding53 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding54;

GHC.IO.Encoding.getFileSystemEncoding52 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "cp367"#;

GHC.IO.Encoding.getFileSystemEncoding51 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding52;

GHC.IO.Encoding.getFileSystemEncoding50 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "csASCII"#;

GHC.IO.Encoding.getFileSystemEncoding49 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding50;

GHC.IO.Encoding.getFileSystemEncoding48 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ASCII"#;

GHC.IO.Encoding.getFileSystemEncoding47 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding48;

GHC.IO.Encoding.getFileSystemEncoding46 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ISO646-US"#;

GHC.IO.Encoding.getFileSystemEncoding45 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding46;

GHC.IO.Encoding.getFileSystemEncoding44 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding45
                      GHC.Types.[]];

GHC.IO.Encoding.getFileSystemEncoding43 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding47
                      GHC.IO.Encoding.getFileSystemEncoding44];

GHC.IO.Encoding.getFileSystemEncoding42 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding49
                      GHC.IO.Encoding.getFileSystemEncoding43];

GHC.IO.Encoding.getFileSystemEncoding41 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding51
                      GHC.IO.Encoding.getFileSystemEncoding42];

GHC.IO.Encoding.getFileSystemEncoding40 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding53
                      GHC.IO.Encoding.getFileSystemEncoding41];

GHC.IO.Encoding.getFileSystemEncoding39 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding55
                      GHC.IO.Encoding.getFileSystemEncoding40];

GHC.IO.Encoding.getFileSystemEncoding38 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding57
                      GHC.IO.Encoding.getFileSystemEncoding39];

GHC.IO.Encoding.getFileSystemEncoding37 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding59
                      GHC.IO.Encoding.getFileSystemEncoding38];

GHC.IO.Encoding.getFileSystemEncoding36 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding61
                      GHC.IO.Encoding.getFileSystemEncoding37];

GHC.IO.Encoding.getFileSystemEncoding35 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding63
                      GHC.IO.Encoding.getFileSystemEncoding36];

GHC.IO.Encoding.getFileSystemEncoding34 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding65
                      GHC.IO.Encoding.getFileSystemEncoding35];

GHC.IO.Encoding.getFileSystemEncoding68 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "UTF8"#;

GHC.IO.Encoding.getFileSystemEncoding67 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding68;

GHC.IO.Encoding.getFileSystemEncoding70 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "UTF32LE"#;

GHC.IO.Encoding.getFileSystemEncoding69 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding70;

GHC.IO.Encoding.getFileSystemEncoding72 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "UTF32BE"#;

GHC.IO.Encoding.getFileSystemEncoding71 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding72;

GHC.IO.Encoding.getFileSystemEncoding74 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "UTF32"#;

GHC.IO.Encoding.getFileSystemEncoding73 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding74;

GHC.IO.Encoding.getFileSystemEncoding76 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "UTF16LE"#;

GHC.IO.Encoding.getFileSystemEncoding75 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding76;

GHC.IO.Encoding.getFileSystemEncoding78 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "UTF16BE"#;

GHC.IO.Encoding.getFileSystemEncoding77 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding78;

GHC.IO.Encoding.getFileSystemEncoding80 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "UTF16"#;

GHC.IO.Encoding.getFileSystemEncoding79 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding80;

GHC.IO.Encoding.getFileSystemEncoding_go [Occ=LoopBreaker]
  :: [GHC.Types.Char] -> [GHC.Types.Char]
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s9YA4]
        case ds_s9YA4 of {
          [] -> [] [];
          : y_s9YA6 [Occ=Once!] ys_s9YA7 [Occ=Once*] ->
              case y_s9YA6 of {
                GHC.Types.C# x_s9YA9 [Occ=Once!] ->
                    case x_s9YA9 of wild2_s9YAa {
                      __DEFAULT ->
                          let {
                            sat_s9YAk [Occ=Once] :: [GHC.Types.Char]
                            [LclId] =
                                [ys_s9YA7] \u []
                                    GHC.IO.Encoding.getFileSystemEncoding_go ys_s9YA7; } in
                          let {
                            sat_s9YAj [Occ=Once] :: GHC.Types.Char
                            [LclId] =
                                [wild2_s9YAa] \u []
                                    case ord# [wild2_s9YAa] of sat_s9YAc {
                                      __DEFAULT ->
                                          case
                                              __pkg_ccall base-4.11.0.0 [sat_s9YAc
                                                                         GHC.Prim.realWorld#]
                                          of
                                          { (#,#) _ [Occ=Dead] ds2_s9YAf ->
                                                case int2Word# [ds2_s9YAf] of sat_s9YAg {
                                                  __DEFAULT ->
                                                      case leWord# [sat_s9YAg 1114111##] of {
                                                        __DEFAULT -> GHC.Char.$wlvl ds2_s9YAf;
                                                        1# ->
                                                            case chr# [ds2_s9YAf] of sat_s9YAi {
                                                              __DEFAULT -> GHC.Types.C# [sat_s9YAi];
                                                            };
                                                      };
                                                };
                                          };
                                    };
                          } in  : [sat_s9YAj sat_s9YAk];
                      '-'# -> GHC.IO.Encoding.getFileSystemEncoding_go ys_s9YA7;
                    };
              };
        };

GHC.IO.Encoding.getFileSystemEncoding6
  :: GHC.IO.Encoding.Failure.CodingFailureMode
     -> GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Encoding.Types.TextEncoding #)
[GblId, Arity=3, Str=<B,1*U><B,1*U><B,U>x, Unf=OtherCon []] =
    [] \r [cfm_s9YAl enc_s9YAm ipv_s9YAn]
        let {
          sat_s9YAp [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
          [LclId] =
              [cfm_s9YAl] \s []
                  case cfm_s9YAl of {
                    GHC.IO.Encoding.Failure.ErrorOnCodingFailure -> [] [];
                    GHC.IO.Encoding.Failure.IgnoreCodingFailure ->
                        GHC.IO.Encoding.Failure.codingFailureModeSuffix5;
                    GHC.IO.Encoding.Failure.TransliterateCodingFailure ->
                        GHC.IO.Encoding.Failure.codingFailureModeSuffix3;
                    GHC.IO.Encoding.Failure.RoundtripFailure ->
                        GHC.IO.Encoding.Failure.codingFailureModeSuffix1;
                  };
        } in 
          case GHC.Base.++ enc_s9YAm sat_s9YAp of sat_s9YAq {
            __DEFAULT -> GHC.IO.Encoding.mkTextEncoding2 sat_s9YAq ipv_s9YAn;
          };

GHC.IO.Encoding.getFileSystemEncoding5
  :: GHC.IO.Encoding.Failure.CodingFailureMode
     -> GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Encoding.Types.TextEncoding #)
[GblId, Arity=3, Str=<L,U><S,U><S,U>, Unf=OtherCon []] =
    [] \r [cfm_s9YAr enc_s9YAs eta_s9YAt]
        case
            GHC.IO.Encoding.getFileSystemEncoding_go enc_s9YAs
        of
        ds_s9YAu [Dmd=<S,U>]
        { __DEFAULT ->
              case
                  GHC.Base.eqString ds_s9YAu GHC.IO.Encoding.getFileSystemEncoding79
              of
              { GHC.Types.False ->
                    case
                        GHC.Base.eqString ds_s9YAu GHC.IO.Encoding.getFileSystemEncoding77
                    of
                    { GHC.Types.False ->
                          case
                              GHC.Base.eqString ds_s9YAu GHC.IO.Encoding.getFileSystemEncoding75
                          of
                          { GHC.Types.False ->
                                case
                                    GHC.Base.eqString
                                        ds_s9YAu GHC.IO.Encoding.getFileSystemEncoding73
                                of
                                { GHC.Types.False ->
                                      case
                                          GHC.Base.eqString
                                              ds_s9YAu GHC.IO.Encoding.getFileSystemEncoding71
                                      of
                                      { GHC.Types.False ->
                                            case
                                                GHC.Base.eqString
                                                    ds_s9YAu GHC.IO.Encoding.getFileSystemEncoding69
                                            of
                                            { GHC.Types.False ->
                                                  case
                                                      GHC.Base.eqString
                                                          ds_s9YAu
                                                          GHC.IO.Encoding.getFileSystemEncoding67
                                                  of
                                                  { GHC.Types.False ->
                                                        case
                                                            GHC.List.elem
                                                                GHC.Classes.$fEq[]_$s$fEq[]1
                                                                enc_s9YAs
                                                                GHC.IO.Encoding.getFileSystemEncoding34
                                                        of
                                                        { GHC.Types.False ->
                                                              case
                                                                  GHC.List.elem
                                                                      GHC.Classes.$fEq[]_$s$fEq[]1
                                                                      enc_s9YAs
                                                                      GHC.IO.Encoding.getFileSystemEncoding7
                                                              of
                                                              { GHC.Types.False ->
                                                                    case
                                                                        GHC.IO.Encoding.Iconv.iconvEncoding2
                                                                            cfm_s9YAr
                                                                            enc_s9YAs
                                                                            eta_s9YAt
                                                                    of
                                                                    { (#,#) ipv_s9YAF [Occ=Once*]
                                                                            ipv1_s9YAG [Occ=Once!] ->
                                                                          case ipv1_s9YAG of {
                                                                            GHC.Base.Nothing ->
                                                                                GHC.IO.Encoding.getFileSystemEncoding6
                                                                                    cfm_s9YAr
                                                                                    enc_s9YAs
                                                                                    ipv_s9YAF;
                                                                            GHC.Base.Just e_s9YAI [Occ=Once] ->
                                                                                (#,#) [ipv_s9YAF
                                                                                       e_s9YAI];
                                                                          };
                                                                    };
                                                                GHC.Types.True ->
                                                                    let {
                                                                      sat_s9YAJ [Occ=Once]
                                                                        :: GHC.IO.Encoding.Types.TextEncoding
                                                                      [LclId] =
                                                                          [cfm_s9YAr] \u []
                                                                              GHC.IO.Encoding.Latin1.mkLatin1_checked
                                                                                  cfm_s9YAr;
                                                                    } in 
                                                                      (#,#) [eta_s9YAt sat_s9YAJ];
                                                              };
                                                          GHC.Types.True ->
                                                              let {
                                                                sat_s9YAK [Occ=Once]
                                                                  :: GHC.IO.Encoding.Types.TextEncoding
                                                                [LclId] =
                                                                    [cfm_s9YAr] \u []
                                                                        GHC.IO.Encoding.Latin1.mkAscii
                                                                            cfm_s9YAr;
                                                              } in  (#,#) [eta_s9YAt sat_s9YAK];
                                                        };
                                                    GHC.Types.True ->
                                                        let {
                                                          sat_s9YAL [Occ=Once]
                                                            :: GHC.IO.Encoding.Types.TextEncoding
                                                          [LclId] =
                                                              [cfm_s9YAr] \u []
                                                                  GHC.IO.Encoding.UTF8.mkUTF8
                                                                      cfm_s9YAr;
                                                        } in  (#,#) [eta_s9YAt sat_s9YAL];
                                                  };
                                              GHC.Types.True ->
                                                  let {
                                                    sat_s9YAM [Occ=Once]
                                                      :: GHC.IO.Encoding.Types.TextEncoding
                                                    [LclId] =
                                                        [cfm_s9YAr] \u []
                                                            GHC.IO.Encoding.UTF32.mkUTF32le
                                                                cfm_s9YAr;
                                                  } in  (#,#) [eta_s9YAt sat_s9YAM];
                                            };
                                        GHC.Types.True ->
                                            let {
                                              sat_s9YAN [Occ=Once]
                                                :: GHC.IO.Encoding.Types.TextEncoding
                                              [LclId] =
                                                  [cfm_s9YAr] \u []
                                                      GHC.IO.Encoding.UTF32.mkUTF32be cfm_s9YAr;
                                            } in  (#,#) [eta_s9YAt sat_s9YAN];
                                      };
                                  GHC.Types.True ->
                                      let {
                                        sat_s9YAO [Occ=Once] :: GHC.IO.Encoding.Types.TextEncoding
                                        [LclId] =
                                            [cfm_s9YAr] \u []
                                                GHC.IO.Encoding.UTF32.mkUTF32 cfm_s9YAr;
                                      } in  (#,#) [eta_s9YAt sat_s9YAO];
                                };
                            GHC.Types.True ->
                                let {
                                  sat_s9YAP [Occ=Once] :: GHC.IO.Encoding.Types.TextEncoding
                                  [LclId] =
                                      [cfm_s9YAr] \u [] GHC.IO.Encoding.UTF16.mkUTF16le cfm_s9YAr;
                                } in  (#,#) [eta_s9YAt sat_s9YAP];
                          };
                      GHC.Types.True ->
                          let {
                            sat_s9YAQ [Occ=Once] :: GHC.IO.Encoding.Types.TextEncoding
                            [LclId] =
                                [cfm_s9YAr] \u [] GHC.IO.Encoding.UTF16.mkUTF16be cfm_s9YAr;
                          } in  (#,#) [eta_s9YAt sat_s9YAQ];
                    };
                GHC.Types.True ->
                    let {
                      sat_s9YAR [Occ=Once] :: GHC.IO.Encoding.Types.TextEncoding
                      [LclId] =
                          [cfm_s9YAr] \u [] GHC.IO.Encoding.UTF16.mkUTF16 cfm_s9YAr;
                    } in  (#,#) [eta_s9YAt sat_s9YAR];
              };
        };

GHC.IO.Encoding.mkTextEncoding9 :: GHC.Types.Char -> GHC.Types.Bool
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(1*U)>,
 Unf=OtherCon []] =
    [] \r [ds_s9YAS]
        case ds_s9YAS of {
          GHC.Types.C# x_s9YAU [Occ=Once!] ->
              case x_s9YAU of {
                __DEFAULT -> GHC.Types.True [];
                '/'# -> GHC.Types.False [];
              };
        };

GHC.IO.Encoding.mkTextEncoding4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "//TRANSLIT"#;

GHC.IO.Encoding.mkTextEncoding3 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.mkTextEncoding4;

GHC.IO.Encoding.mkTextEncoding6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "//ROUNDTRIP"#;

GHC.IO.Encoding.mkTextEncoding5 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.mkTextEncoding6;

GHC.IO.Encoding.mkTextEncoding8 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "//IGNORE"#;

GHC.IO.Encoding.mkTextEncoding7 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.mkTextEncoding8;

GHC.IO.Encoding.mkTextEncoding1
  :: GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Encoding.Types.TextEncoding #)
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [e_s9YAW eta_s9YAX]
        case GHC.List.$wspan GHC.IO.Encoding.mkTextEncoding9 e_s9YAW of {
          (#,#) ww1_s9YAZ [Occ=Once*] ww2_s9YB0 [Occ=Once!] ->
              case ww2_s9YB0 of wild_s9YB1 {
                [] ->
                    GHC.IO.Encoding.getFileSystemEncoding5
                        GHC.IO.Encoding.Failure.ErrorOnCodingFailure ww1_s9YAZ eta_s9YAX;
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    case
                        GHC.Base.eqString wild_s9YB1 GHC.IO.Encoding.mkTextEncoding7
                    of
                    { GHC.Types.False ->
                          case
                              GHC.Base.eqString wild_s9YB1 GHC.IO.Encoding.mkTextEncoding5
                          of
                          { GHC.Types.False ->
                                case
                                    GHC.Base.eqString wild_s9YB1 GHC.IO.Encoding.mkTextEncoding3
                                of
                                { GHC.Types.False ->
                                      GHC.IO.Encoding.mkTextEncoding2 e_s9YAW eta_s9YAX;
                                  GHC.Types.True ->
                                      GHC.IO.Encoding.getFileSystemEncoding5
                                          GHC.IO.Encoding.Failure.TransliterateCodingFailure
                                          ww1_s9YAZ
                                          eta_s9YAX;
                                };
                            GHC.Types.True ->
                                GHC.IO.Encoding.getFileSystemEncoding5
                                    GHC.IO.Encoding.Failure.RoundtripFailure ww1_s9YAZ eta_s9YAX;
                          };
                      GHC.Types.True ->
                          GHC.IO.Encoding.getFileSystemEncoding5
                              GHC.IO.Encoding.Failure.IgnoreCodingFailure ww1_s9YAZ eta_s9YAX;
                    };
              };
        };

GHC.IO.Encoding.mkTextEncoding
  :: GHC.Base.String
     -> GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.IO.Encoding.mkTextEncoding1 eta_B2 eta_B1;

GHC.IO.Encoding.getForeignEncoding4
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Encoding.Types.TextEncoding #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [s_s9YB7]
        case noDuplicate# [s_s9YB7] of s'_s9YB8 {
          __DEFAULT ->
              GHC.IO.Encoding.getFileSystemEncoding5
                  GHC.IO.Encoding.Failure.IgnoreCodingFailure
                  GHC.IO.Encoding.Iconv.localeEncodingName
                  s'_s9YB8;
        };

GHC.IO.Encoding.getForeignEncoding3
  :: GHC.IO.Encoding.Types.TextEncoding
[GblId] =
    [] \u []
        case GHC.IO.Encoding.getForeignEncoding4 GHC.Prim.realWorld# of {
          (#,#) _ [Occ=Dead] ipv1_s9YBb [Occ=Once] -> ipv1_s9YBb;
        };

GHC.IO.Encoding.getForeignEncoding2
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding,
            GHC.IO.Encoding.Types.TextEncoding -> GHC.Types.IO ()) #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [s_s9YBc]
        case noDuplicate# [s_s9YBc] of s'_s9YBd {
          __DEFAULT ->
              case newMutVar# [GHC.IO.Encoding.getForeignEncoding3 s'_s9YBd] of {
                (#,#) ipv_s9YBf [Occ=Once] ipv1_s9YBg ->
                    let {
                      sat_s9YBm [Occ=Once]
                        :: GHC.IO.Encoding.Types.TextEncoding -> GHC.Types.IO ()
                      [LclId] =
                          [ipv1_s9YBg] \r [val_s9YBj eta_s9YBk]
                              case writeMutVar# [ipv1_s9YBg val_s9YBj eta_s9YBk] of s2#_s9YBl {
                                __DEFAULT -> (#,#) [s2#_s9YBl GHC.Tuple.()];
                              }; } in
                    let {
                      sat_s9YBi [Occ=Once]
                        :: GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding
                      [LclId] =
                          [ipv1_s9YBg] \r [eta_s9YBh]
                              readMutVar# [ipv1_s9YBg eta_s9YBh]; } in
                    let {
                      sat_s9YBn [Occ=Once]
                        :: (GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding,
                            GHC.IO.Encoding.Types.TextEncoding -> GHC.Types.IO ())
                      [LclId] =
                          CCCS (,)! [sat_s9YBi sat_s9YBm];
                    } in  (#,#) [ipv_s9YBf sat_s9YBn];
              };
        };

GHC.IO.Encoding.getForeignEncoding1
  :: (GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding,
      GHC.IO.Encoding.Types.TextEncoding -> GHC.Types.IO ())
[GblId] =
    [] \u []
        case GHC.IO.Encoding.getForeignEncoding2 GHC.Prim.realWorld# of {
          (#,#) _ [Occ=Dead] ipv1_s9YBq [Occ=Once] -> ipv1_s9YBq;
        };

GHC.IO.Encoding.getForeignEncoding
  :: GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding
[GblId] =
    [] \u []
        case GHC.IO.Encoding.getForeignEncoding1 of {
          (,) getForeignEncoding5_s9YBs [Occ=Once] _ [Occ=Dead] ->
              getForeignEncoding5_s9YBs;
        };

GHC.IO.Encoding.setForeignEncoding
  :: GHC.IO.Encoding.Types.TextEncoding -> GHC.Types.IO ()
[GblId] =
    [] \u []
        case GHC.IO.Encoding.getForeignEncoding1 of {
          (,) _ [Occ=Dead] setForeignEncoding1_s9YBw [Occ=Once] ->
              setForeignEncoding1_s9YBw;
        };

GHC.IO.Encoding.getFileSystemEncoding4
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Encoding.Types.TextEncoding #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [s_s9YBx]
        case noDuplicate# [s_s9YBx] of s'_s9YBy {
          __DEFAULT ->
              GHC.IO.Encoding.getFileSystemEncoding5
                  GHC.IO.Encoding.Failure.RoundtripFailure
                  GHC.IO.Encoding.Iconv.localeEncodingName
                  s'_s9YBy;
        };

GHC.IO.Encoding.getFileSystemEncoding3
  :: GHC.IO.Encoding.Types.TextEncoding
[GblId] =
    [] \u []
        case
            GHC.IO.Encoding.getFileSystemEncoding4 GHC.Prim.realWorld#
        of
        { (#,#) _ [Occ=Dead] ipv1_s9YBB [Occ=Once] -> ipv1_s9YBB;
        };

GHC.IO.Encoding.getFileSystemEncoding2
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding,
            GHC.IO.Encoding.Types.TextEncoding -> GHC.Types.IO ()) #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [s_s9YBC]
        case noDuplicate# [s_s9YBC] of s'_s9YBD {
          __DEFAULT ->
              case
                  newMutVar# [GHC.IO.Encoding.getFileSystemEncoding3 s'_s9YBD]
              of
              { (#,#) ipv_s9YBF [Occ=Once] ipv1_s9YBG ->
                    let {
                      sat_s9YBM [Occ=Once]
                        :: GHC.IO.Encoding.Types.TextEncoding -> GHC.Types.IO ()
                      [LclId] =
                          [ipv1_s9YBG] \r [val_s9YBJ eta_s9YBK]
                              case writeMutVar# [ipv1_s9YBG val_s9YBJ eta_s9YBK] of s2#_s9YBL {
                                __DEFAULT -> (#,#) [s2#_s9YBL GHC.Tuple.()];
                              }; } in
                    let {
                      sat_s9YBI [Occ=Once]
                        :: GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding
                      [LclId] =
                          [ipv1_s9YBG] \r [eta_s9YBH]
                              readMutVar# [ipv1_s9YBG eta_s9YBH]; } in
                    let {
                      sat_s9YBN [Occ=Once]
                        :: (GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding,
                            GHC.IO.Encoding.Types.TextEncoding -> GHC.Types.IO ())
                      [LclId] =
                          CCCS (,)! [sat_s9YBI sat_s9YBM];
                    } in  (#,#) [ipv_s9YBF sat_s9YBN];
              };
        };

GHC.IO.Encoding.getFileSystemEncoding1
  :: (GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding,
      GHC.IO.Encoding.Types.TextEncoding -> GHC.Types.IO ())
[GblId] =
    [] \u []
        case
            GHC.IO.Encoding.getFileSystemEncoding2 GHC.Prim.realWorld#
        of
        { (#,#) _ [Occ=Dead] ipv1_s9YBQ [Occ=Once] -> ipv1_s9YBQ;
        };

GHC.IO.Encoding.getFileSystemEncoding
  :: GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding
[GblId] =
    [] \u []
        case GHC.IO.Encoding.getFileSystemEncoding1 of {
          (,) getFileSystemEncoding81_s9YBS [Occ=Once] _ [Occ=Dead] ->
              getFileSystemEncoding81_s9YBS;
        };

GHC.IO.Encoding.argvEncoding
  :: GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding
[GblId] =
    [] \u [] GHC.IO.Encoding.getFileSystemEncoding;

GHC.IO.Encoding.setFileSystemEncoding
  :: GHC.IO.Encoding.Types.TextEncoding -> GHC.Types.IO ()
[GblId] =
    [] \u []
        case GHC.IO.Encoding.getFileSystemEncoding1 of {
          (,) _ [Occ=Dead] setFileSystemEncoding1_s9YBW [Occ=Once] ->
              setFileSystemEncoding1_s9YBW;
        };

GHC.IO.Encoding.initLocaleEncoding1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Encoding.Types.TextEncoding #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [s_s9YBX]
        case noDuplicate# [s_s9YBX] of s'_s9YBY {
          __DEFAULT ->
              GHC.IO.Encoding.getFileSystemEncoding5
                  GHC.IO.Encoding.Failure.ErrorOnCodingFailure
                  GHC.IO.Encoding.Iconv.localeEncodingName
                  s'_s9YBY;
        };

GHC.IO.Encoding.initLocaleEncoding
  :: GHC.IO.Encoding.Types.TextEncoding
[GblId] =
    [] \u []
        case GHC.IO.Encoding.initLocaleEncoding1 GHC.Prim.realWorld# of {
          (#,#) _ [Occ=Dead] ipv1_s9YC1 [Occ=Once] -> ipv1_s9YC1;
        };

GHC.IO.Encoding.getLocaleEncoding2
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding,
            GHC.IO.Encoding.Types.TextEncoding -> GHC.Types.IO ()) #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [s_s9YC2]
        case noDuplicate# [s_s9YC2] of s'_s9YC3 {
          __DEFAULT ->
              case newMutVar# [GHC.IO.Encoding.initLocaleEncoding s'_s9YC3] of {
                (#,#) ipv_s9YC5 [Occ=Once] ipv1_s9YC6 ->
                    let {
                      sat_s9YCc [Occ=Once]
                        :: GHC.IO.Encoding.Types.TextEncoding -> GHC.Types.IO ()
                      [LclId] =
                          [ipv1_s9YC6] \r [val_s9YC9 eta_s9YCa]
                              case writeMutVar# [ipv1_s9YC6 val_s9YC9 eta_s9YCa] of s2#_s9YCb {
                                __DEFAULT -> (#,#) [s2#_s9YCb GHC.Tuple.()];
                              }; } in
                    let {
                      sat_s9YC8 [Occ=Once]
                        :: GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding
                      [LclId] =
                          [ipv1_s9YC6] \r [eta_s9YC7]
                              readMutVar# [ipv1_s9YC6 eta_s9YC7]; } in
                    let {
                      sat_s9YCd [Occ=Once]
                        :: (GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding,
                            GHC.IO.Encoding.Types.TextEncoding -> GHC.Types.IO ())
                      [LclId] =
                          CCCS (,)! [sat_s9YC8 sat_s9YCc];
                    } in  (#,#) [ipv_s9YC5 sat_s9YCd];
              };
        };

GHC.IO.Encoding.getLocaleEncoding1
  :: (GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding,
      GHC.IO.Encoding.Types.TextEncoding -> GHC.Types.IO ())
[GblId] =
    [] \u []
        case GHC.IO.Encoding.getLocaleEncoding2 GHC.Prim.realWorld# of {
          (#,#) _ [Occ=Dead] ipv1_s9YCg [Occ=Once] -> ipv1_s9YCg;
        };

GHC.IO.Encoding.getLocaleEncoding
  :: GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding
[GblId] =
    [] \u []
        case GHC.IO.Encoding.getLocaleEncoding1 of {
          (,) getLocaleEncoding3_s9YCi [Occ=Once] _ [Occ=Dead] ->
              getLocaleEncoding3_s9YCi;
        };

GHC.IO.Encoding.setLocaleEncoding
  :: GHC.IO.Encoding.Types.TextEncoding -> GHC.Types.IO ()
[GblId] =
    [] \u []
        case GHC.IO.Encoding.getLocaleEncoding1 of {
          (,) _ [Occ=Dead] setLocaleEncoding1_s9YCm [Occ=Once] ->
              setLocaleEncoding1_s9YCm;
        };

GHC.IO.Encoding.latin1_decode1
  :: GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.IO.Buffer.CharBuffer
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Buffer.Buffer GHC.Word.Word8,
            GHC.IO.Buffer.Buffer GHC.Types.Char) #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LLLLSL),1*U(U,U,U,U,U,U)><S(LLLSLS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [input_s9YCn output_s9YCo s_s9YCp]
        case
            GHC.IO.Encoding.Latin1.latin5 input_s9YCn output_s9YCo s_s9YCp
        of
        { (#,#) ipv_s9YCr [Occ=Once] ipv1_s9YCs [Occ=Once!] ->
              let {
                sat_s9YCx [Occ=Once]
                  :: (GHC.IO.Buffer.Buffer GHC.Word.Word8,
                      GHC.IO.Buffer.Buffer GHC.Types.Char)
                [LclId] =
                    [ipv1_s9YCs] \u []
                        case ipv1_s9YCs of {
                          (,,) _ [Occ=Dead]
                               input'_s9YCv [Occ=Once]
                               output'_s9YCw [Occ=Once] ->
                              (,) [input'_s9YCv output'_s9YCw];
                        };
              } in  (#,#) [ipv_s9YCr sat_s9YCx];
        };

GHC.IO.Encoding.latin1_decode
  :: GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.IO.Buffer.CharBuffer
     -> GHC.Types.IO
          (GHC.IO.Buffer.Buffer GHC.Word.Word8, GHC.IO.Buffer.CharBuffer)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LLLLSL),1*U(U,U,U,U,U,U)><S(LLLSLS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.IO.Encoding.latin1_decode1 eta_B3 eta_B2 eta_B1;

GHC.IO.Encoding.latin1_encode1
  :: GHC.IO.Buffer.CharBuffer
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Buffer.Buffer GHC.Types.Char,
            GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LLLLSL),1*U(U,U,U,U,U,U)><S(LLLSLS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [input_s9YCy output_s9YCz s_s9YCA]
        case
            GHC.IO.Encoding.Latin1.latin3 input_s9YCy output_s9YCz s_s9YCA
        of
        { (#,#) ipv_s9YCC [Occ=Once] ipv1_s9YCD [Occ=Once!] ->
              let {
                sat_s9YCI [Occ=Once]
                  :: (GHC.IO.Buffer.Buffer GHC.Types.Char,
                      GHC.IO.Buffer.Buffer GHC.Word.Word8)
                [LclId] =
                    [ipv1_s9YCD] \u []
                        case ipv1_s9YCD of {
                          (,,) _ [Occ=Dead]
                               input'_s9YCG [Occ=Once]
                               output'_s9YCH [Occ=Once] ->
                              (,) [input'_s9YCG output'_s9YCH];
                        };
              } in  (#,#) [ipv_s9YCC sat_s9YCI];
        };

GHC.IO.Encoding.latin1_encode
  :: GHC.IO.Buffer.CharBuffer
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Types.IO
          (GHC.IO.Buffer.CharBuffer, GHC.IO.Buffer.Buffer GHC.Word.Word8)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LLLLSL),1*U(U,U,U,U,U,U)><S(LLLSLS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.IO.Encoding.latin1_encode1 eta_B3 eta_B2 eta_B1;


==================== STG syntax: ====================
2018-03-16 16:05:03.590125657 UTC

GHC.IO.Encoding.latin1 :: GHC.IO.Encoding.Types.TextEncoding
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.IO.Encoding.Latin1.latin1_checked;

GHC.IO.Encoding.utf8 :: GHC.IO.Encoding.Types.TextEncoding
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.IO.Encoding.UTF8.utf8;

GHC.IO.Encoding.utf8_bom :: GHC.IO.Encoding.Types.TextEncoding
[GblId] =
    [] \u [] GHC.IO.Encoding.UTF8.utf8_bom;

GHC.IO.Encoding.utf16 :: GHC.IO.Encoding.Types.TextEncoding
[GblId] =
    [] \u [] GHC.IO.Encoding.UTF16.utf16;

GHC.IO.Encoding.utf16le :: GHC.IO.Encoding.Types.TextEncoding
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.IO.Encoding.UTF16.utf16le;

GHC.IO.Encoding.utf16be :: GHC.IO.Encoding.Types.TextEncoding
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.IO.Encoding.UTF16.utf16be;

GHC.IO.Encoding.utf32 :: GHC.IO.Encoding.Types.TextEncoding
[GblId] =
    [] \u [] GHC.IO.Encoding.UTF32.utf32;

GHC.IO.Encoding.utf32le :: GHC.IO.Encoding.Types.TextEncoding
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.IO.Encoding.UTF32.utf32le;

GHC.IO.Encoding.utf32be :: GHC.IO.Encoding.Types.TextEncoding
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.IO.Encoding.UTF32.utf32be;

GHC.IO.Encoding.char8 :: GHC.IO.Encoding.Types.TextEncoding
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.IO.Encoding.Latin1.latin1;

lvl_r9XsW :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "mkTextEncoding"#;

lvl1_r9XsX :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl_r9XsW;

lvl2_r9XsY :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "unknown encoding:"#;

GHC.IO.Encoding.mkTextEncoding2
  :: forall a.
     GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=2, Str=<B,U><B,U>x, Unf=OtherCon []] =
    [] \r [e_s9YzZ void_0E]
        let {
          sat_s9YA3 [Occ=Once] :: GHC.Exception.SomeException
          [LclId] =
              [e_s9YzZ] \u []
                  let {
                    sat_s9YA1 [Occ=Once] :: GHC.Base.String
                    [LclId] =
                        [e_s9YzZ] \u []
                            GHC.CString.unpackAppendCString# lvl2_r9XsY e_s9YzZ; } in
                  let {
                    sat_s9YA2 [Occ=Once] :: GHC.IO.Exception.IOException
                    [LclId] =
                        CCCS GHC.IO.Exception.IOError! [GHC.Base.Nothing
                                                        GHC.IO.Exception.NoSuchThing
                                                        lvl1_r9XsX
                                                        sat_s9YA1
                                                        GHC.Base.Nothing
                                                        GHC.Base.Nothing];
                  } in 
                    GHC.IO.Exception.$fExceptionIOException_$ctoException sat_s9YA2;
        } in  raiseIO# [sat_s9YA3 GHC.Prim.void#];

GHC.IO.Encoding.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.IO.Encoding.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.$trModule4];

GHC.IO.Encoding.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.IO.Encoding"#;

GHC.IO.Encoding.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Encoding.$trModule2];

GHC.IO.Encoding.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.IO.Encoding.$trModule3
                                     GHC.IO.Encoding.$trModule1];

GHC.IO.Encoding.getFileSystemEncoding33 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ISO_8859-1:1987"#;

GHC.IO.Encoding.getFileSystemEncoding32 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding33;

GHC.IO.Encoding.getFileSystemEncoding31 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "iso-ir-100"#;

GHC.IO.Encoding.getFileSystemEncoding30 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding31;

GHC.IO.Encoding.getFileSystemEncoding29 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ISO_8859-1"#;

GHC.IO.Encoding.getFileSystemEncoding28 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding29;

GHC.IO.Encoding.getFileSystemEncoding27 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ISO-8859-1"#;

GHC.IO.Encoding.getFileSystemEncoding26 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding27;

GHC.IO.Encoding.getFileSystemEncoding25 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "latin1"#;

GHC.IO.Encoding.getFileSystemEncoding24 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding25;

GHC.IO.Encoding.getFileSystemEncoding23 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "l1"#;

GHC.IO.Encoding.getFileSystemEncoding22 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding23;

GHC.IO.Encoding.getFileSystemEncoding21 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "IBM819"#;

GHC.IO.Encoding.getFileSystemEncoding20 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding21;

GHC.IO.Encoding.getFileSystemEncoding19 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "CP819"#;

GHC.IO.Encoding.getFileSystemEncoding18 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding19;

GHC.IO.Encoding.getFileSystemEncoding17 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "csISOLatin1"#;

GHC.IO.Encoding.getFileSystemEncoding16 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding17;

GHC.IO.Encoding.getFileSystemEncoding15 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding16
                      GHC.Types.[]];

GHC.IO.Encoding.getFileSystemEncoding14 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding18
                      GHC.IO.Encoding.getFileSystemEncoding15];

GHC.IO.Encoding.getFileSystemEncoding13 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding20
                      GHC.IO.Encoding.getFileSystemEncoding14];

GHC.IO.Encoding.getFileSystemEncoding12 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding22
                      GHC.IO.Encoding.getFileSystemEncoding13];

GHC.IO.Encoding.getFileSystemEncoding11 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding24
                      GHC.IO.Encoding.getFileSystemEncoding12];

GHC.IO.Encoding.getFileSystemEncoding10 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding26
                      GHC.IO.Encoding.getFileSystemEncoding11];

GHC.IO.Encoding.getFileSystemEncoding9 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding28
                      GHC.IO.Encoding.getFileSystemEncoding10];

GHC.IO.Encoding.getFileSystemEncoding8 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding30
                      GHC.IO.Encoding.getFileSystemEncoding9];

GHC.IO.Encoding.getFileSystemEncoding7 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding32
                      GHC.IO.Encoding.getFileSystemEncoding8];

GHC.IO.Encoding.getFileSystemEncoding66 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ANSI_X3.4-1968"#;

GHC.IO.Encoding.getFileSystemEncoding65 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding66;

GHC.IO.Encoding.getFileSystemEncoding64 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "iso-ir-6"#;

GHC.IO.Encoding.getFileSystemEncoding63 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding64;

GHC.IO.Encoding.getFileSystemEncoding62 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ANSI_X3.4-1986"#;

GHC.IO.Encoding.getFileSystemEncoding61 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding62;

GHC.IO.Encoding.getFileSystemEncoding60 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ISO_646.irv:1991"#;

GHC.IO.Encoding.getFileSystemEncoding59 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding60;

GHC.IO.Encoding.getFileSystemEncoding58 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "US-ASCII"#;

GHC.IO.Encoding.getFileSystemEncoding57 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding58;

GHC.IO.Encoding.getFileSystemEncoding56 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "us"#;

GHC.IO.Encoding.getFileSystemEncoding55 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding56;

GHC.IO.Encoding.getFileSystemEncoding54 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "IBM367"#;

GHC.IO.Encoding.getFileSystemEncoding53 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding54;

GHC.IO.Encoding.getFileSystemEncoding52 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "cp367"#;

GHC.IO.Encoding.getFileSystemEncoding51 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding52;

GHC.IO.Encoding.getFileSystemEncoding50 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "csASCII"#;

GHC.IO.Encoding.getFileSystemEncoding49 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding50;

GHC.IO.Encoding.getFileSystemEncoding48 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ASCII"#;

GHC.IO.Encoding.getFileSystemEncoding47 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding48;

GHC.IO.Encoding.getFileSystemEncoding46 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ISO646-US"#;

GHC.IO.Encoding.getFileSystemEncoding45 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding46;

GHC.IO.Encoding.getFileSystemEncoding44 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding45
                      GHC.Types.[]];

GHC.IO.Encoding.getFileSystemEncoding43 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding47
                      GHC.IO.Encoding.getFileSystemEncoding44];

GHC.IO.Encoding.getFileSystemEncoding42 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding49
                      GHC.IO.Encoding.getFileSystemEncoding43];

GHC.IO.Encoding.getFileSystemEncoding41 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding51
                      GHC.IO.Encoding.getFileSystemEncoding42];

GHC.IO.Encoding.getFileSystemEncoding40 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding53
                      GHC.IO.Encoding.getFileSystemEncoding41];

GHC.IO.Encoding.getFileSystemEncoding39 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding55
                      GHC.IO.Encoding.getFileSystemEncoding40];

GHC.IO.Encoding.getFileSystemEncoding38 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding57
                      GHC.IO.Encoding.getFileSystemEncoding39];

GHC.IO.Encoding.getFileSystemEncoding37 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding59
                      GHC.IO.Encoding.getFileSystemEncoding38];

GHC.IO.Encoding.getFileSystemEncoding36 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding61
                      GHC.IO.Encoding.getFileSystemEncoding37];

GHC.IO.Encoding.getFileSystemEncoding35 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding63
                      GHC.IO.Encoding.getFileSystemEncoding36];

GHC.IO.Encoding.getFileSystemEncoding34 :: [[GHC.Types.Char]]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Encoding.getFileSystemEncoding65
                      GHC.IO.Encoding.getFileSystemEncoding35];

GHC.IO.Encoding.getFileSystemEncoding68 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "UTF8"#;

GHC.IO.Encoding.getFileSystemEncoding67 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding68;

GHC.IO.Encoding.getFileSystemEncoding70 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "UTF32LE"#;

GHC.IO.Encoding.getFileSystemEncoding69 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding70;

GHC.IO.Encoding.getFileSystemEncoding72 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "UTF32BE"#;

GHC.IO.Encoding.getFileSystemEncoding71 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding72;

GHC.IO.Encoding.getFileSystemEncoding74 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "UTF32"#;

GHC.IO.Encoding.getFileSystemEncoding73 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding74;

GHC.IO.Encoding.getFileSystemEncoding76 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "UTF16LE"#;

GHC.IO.Encoding.getFileSystemEncoding75 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding76;

GHC.IO.Encoding.getFileSystemEncoding78 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "UTF16BE"#;

GHC.IO.Encoding.getFileSystemEncoding77 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding78;

GHC.IO.Encoding.getFileSystemEncoding80 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "UTF16"#;

GHC.IO.Encoding.getFileSystemEncoding79 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.getFileSystemEncoding80;

GHC.IO.Encoding.getFileSystemEncoding_go [Occ=LoopBreaker]
  :: [GHC.Types.Char] -> [GHC.Types.Char]
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s9YA4]
        case ds_s9YA4 of {
          [] -> [] [];
          : y_s9YA6 [Occ=Once!] ys_s9YA7 [Occ=Once*] ->
              case y_s9YA6 of {
                GHC.Types.C# x_s9YA9 [Occ=Once!] ->
                    case x_s9YA9 of wild2_s9YAa {
                      __DEFAULT ->
                          let {
                            sat_s9YAk [Occ=Once] :: [GHC.Types.Char]
                            [LclId] =
                                [ys_s9YA7] \u []
                                    GHC.IO.Encoding.getFileSystemEncoding_go ys_s9YA7; } in
                          let {
                            sat_s9YAj [Occ=Once] :: GHC.Types.Char
                            [LclId] =
                                [wild2_s9YAa] \u []
                                    case ord# [wild2_s9YAa] of sat_s9YAc {
                                      __DEFAULT ->
                                          case
                                              __pkg_ccall base-4.11.0.0 [sat_s9YAc
                                                                         GHC.Prim.realWorld#]
                                          of
                                          { Unit# ds2_s9YAf ->
                                                case int2Word# [ds2_s9YAf] of sat_s9YAg {
                                                  __DEFAULT ->
                                                      case leWord# [sat_s9YAg 1114111##] of {
                                                        __DEFAULT -> GHC.Char.$wlvl ds2_s9YAf;
                                                        1# ->
                                                            case chr# [ds2_s9YAf] of sat_s9YAi {
                                                              __DEFAULT -> GHC.Types.C# [sat_s9YAi];
                                                            };
                                                      };
                                                };
                                          };
                                    };
                          } in  : [sat_s9YAj sat_s9YAk];
                      '-'# -> GHC.IO.Encoding.getFileSystemEncoding_go ys_s9YA7;
                    };
              };
        };

GHC.IO.Encoding.getFileSystemEncoding6
  :: GHC.IO.Encoding.Failure.CodingFailureMode
     -> GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Encoding.Types.TextEncoding #)
[GblId, Arity=3, Str=<B,1*U><B,1*U><B,U>x, Unf=OtherCon []] =
    [] \r [cfm_s9YAl enc_s9YAm void_0E]
        let {
          sat_s9YAp [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
          [LclId] =
              [cfm_s9YAl] \s []
                  case cfm_s9YAl of {
                    GHC.IO.Encoding.Failure.ErrorOnCodingFailure -> [] [];
                    GHC.IO.Encoding.Failure.IgnoreCodingFailure ->
                        GHC.IO.Encoding.Failure.codingFailureModeSuffix5;
                    GHC.IO.Encoding.Failure.TransliterateCodingFailure ->
                        GHC.IO.Encoding.Failure.codingFailureModeSuffix3;
                    GHC.IO.Encoding.Failure.RoundtripFailure ->
                        GHC.IO.Encoding.Failure.codingFailureModeSuffix1;
                  };
        } in 
          case GHC.Base.++ enc_s9YAm sat_s9YAp of sat_s9YAq {
            __DEFAULT ->
                GHC.IO.Encoding.mkTextEncoding2 sat_s9YAq GHC.Prim.void#;
          };

GHC.IO.Encoding.getFileSystemEncoding5
  :: GHC.IO.Encoding.Failure.CodingFailureMode
     -> GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Encoding.Types.TextEncoding #)
[GblId, Arity=3, Str=<L,U><S,U><S,U>, Unf=OtherCon []] =
    [] \r [cfm_s9YAr enc_s9YAs void_0E]
        case
            GHC.IO.Encoding.getFileSystemEncoding_go enc_s9YAs
        of
        ds_s9YAu [Dmd=<S,U>]
        { __DEFAULT ->
              case
                  GHC.Base.eqString ds_s9YAu GHC.IO.Encoding.getFileSystemEncoding79
              of
              { GHC.Types.False ->
                    case
                        GHC.Base.eqString ds_s9YAu GHC.IO.Encoding.getFileSystemEncoding77
                    of
                    { GHC.Types.False ->
                          case
                              GHC.Base.eqString ds_s9YAu GHC.IO.Encoding.getFileSystemEncoding75
                          of
                          { GHC.Types.False ->
                                case
                                    GHC.Base.eqString
                                        ds_s9YAu GHC.IO.Encoding.getFileSystemEncoding73
                                of
                                { GHC.Types.False ->
                                      case
                                          GHC.Base.eqString
                                              ds_s9YAu GHC.IO.Encoding.getFileSystemEncoding71
                                      of
                                      { GHC.Types.False ->
                                            case
                                                GHC.Base.eqString
                                                    ds_s9YAu GHC.IO.Encoding.getFileSystemEncoding69
                                            of
                                            { GHC.Types.False ->
                                                  case
                                                      GHC.Base.eqString
                                                          ds_s9YAu
                                                          GHC.IO.Encoding.getFileSystemEncoding67
                                                  of
                                                  { GHC.Types.False ->
                                                        case
                                                            GHC.List.elem
                                                                GHC.Classes.$fEq[]_$s$fEq[]1
                                                                enc_s9YAs
                                                                GHC.IO.Encoding.getFileSystemEncoding34
                                                        of
                                                        { GHC.Types.False ->
                                                              case
                                                                  GHC.List.elem
                                                                      GHC.Classes.$fEq[]_$s$fEq[]1
                                                                      enc_s9YAs
                                                                      GHC.IO.Encoding.getFileSystemEncoding7
                                                              of
                                                              { GHC.Types.False ->
                                                                    case
                                                                        GHC.IO.Encoding.Iconv.iconvEncoding2
                                                                            cfm_s9YAr
                                                                            enc_s9YAs
                                                                            GHC.Prim.void#
                                                                    of
                                                                    { Unit# ipv1_s9YAG [Occ=Once!] ->
                                                                          case ipv1_s9YAG of {
                                                                            GHC.Base.Nothing ->
                                                                                GHC.IO.Encoding.getFileSystemEncoding6
                                                                                    cfm_s9YAr
                                                                                    enc_s9YAs
                                                                                    GHC.Prim.void#;
                                                                            GHC.Base.Just e_s9YAI [Occ=Once] ->
                                                                                Unit# [e_s9YAI];
                                                                          };
                                                                    };
                                                                GHC.Types.True ->
                                                                    let {
                                                                      sat_s9YAJ [Occ=Once]
                                                                        :: GHC.IO.Encoding.Types.TextEncoding
                                                                      [LclId] =
                                                                          [cfm_s9YAr] \u []
                                                                              GHC.IO.Encoding.Latin1.mkLatin1_checked
                                                                                  cfm_s9YAr;
                                                                    } in  Unit# [sat_s9YAJ];
                                                              };
                                                          GHC.Types.True ->
                                                              let {
                                                                sat_s9YAK [Occ=Once]
                                                                  :: GHC.IO.Encoding.Types.TextEncoding
                                                                [LclId] =
                                                                    [cfm_s9YAr] \u []
                                                                        GHC.IO.Encoding.Latin1.mkAscii
                                                                            cfm_s9YAr;
                                                              } in  Unit# [sat_s9YAK];
                                                        };
                                                    GHC.Types.True ->
                                                        let {
                                                          sat_s9YAL [Occ=Once]
                                                            :: GHC.IO.Encoding.Types.TextEncoding
                                                          [LclId] =
                                                              [cfm_s9YAr] \u []
                                                                  GHC.IO.Encoding.UTF8.mkUTF8
                                                                      cfm_s9YAr;
                                                        } in  Unit# [sat_s9YAL];
                                                  };
                                              GHC.Types.True ->
                                                  let {
                                                    sat_s9YAM [Occ=Once]
                                                      :: GHC.IO.Encoding.Types.TextEncoding
                                                    [LclId] =
                                                        [cfm_s9YAr] \u []
                                                            GHC.IO.Encoding.UTF32.mkUTF32le
                                                                cfm_s9YAr;
                                                  } in  Unit# [sat_s9YAM];
                                            };
                                        GHC.Types.True ->
                                            let {
                                              sat_s9YAN [Occ=Once]
                                                :: GHC.IO.Encoding.Types.TextEncoding
                                              [LclId] =
                                                  [cfm_s9YAr] \u []
                                                      GHC.IO.Encoding.UTF32.mkUTF32be cfm_s9YAr;
                                            } in  Unit# [sat_s9YAN];
                                      };
                                  GHC.Types.True ->
                                      let {
                                        sat_s9YAO [Occ=Once] :: GHC.IO.Encoding.Types.TextEncoding
                                        [LclId] =
                                            [cfm_s9YAr] \u []
                                                GHC.IO.Encoding.UTF32.mkUTF32 cfm_s9YAr;
                                      } in  Unit# [sat_s9YAO];
                                };
                            GHC.Types.True ->
                                let {
                                  sat_s9YAP [Occ=Once] :: GHC.IO.Encoding.Types.TextEncoding
                                  [LclId] =
                                      [cfm_s9YAr] \u [] GHC.IO.Encoding.UTF16.mkUTF16le cfm_s9YAr;
                                } in  Unit# [sat_s9YAP];
                          };
                      GHC.Types.True ->
                          let {
                            sat_s9YAQ [Occ=Once] :: GHC.IO.Encoding.Types.TextEncoding
                            [LclId] =
                                [cfm_s9YAr] \u [] GHC.IO.Encoding.UTF16.mkUTF16be cfm_s9YAr;
                          } in  Unit# [sat_s9YAQ];
                    };
                GHC.Types.True ->
                    let {
                      sat_s9YAR [Occ=Once] :: GHC.IO.Encoding.Types.TextEncoding
                      [LclId] =
                          [cfm_s9YAr] \u [] GHC.IO.Encoding.UTF16.mkUTF16 cfm_s9YAr;
                    } in  Unit# [sat_s9YAR];
              };
        };

GHC.IO.Encoding.mkTextEncoding9 :: GHC.Types.Char -> GHC.Types.Bool
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(1*U)>,
 Unf=OtherCon []] =
    [] \r [ds_s9YAS]
        case ds_s9YAS of {
          GHC.Types.C# x_s9YAU [Occ=Once!] ->
              case x_s9YAU of {
                __DEFAULT -> GHC.Types.True [];
                '/'# -> GHC.Types.False [];
              };
        };

GHC.IO.Encoding.mkTextEncoding4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "//TRANSLIT"#;

GHC.IO.Encoding.mkTextEncoding3 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.mkTextEncoding4;

GHC.IO.Encoding.mkTextEncoding6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "//ROUNDTRIP"#;

GHC.IO.Encoding.mkTextEncoding5 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.mkTextEncoding6;

GHC.IO.Encoding.mkTextEncoding8 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "//IGNORE"#;

GHC.IO.Encoding.mkTextEncoding7 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        GHC.CString.unpackCString# GHC.IO.Encoding.mkTextEncoding8;

GHC.IO.Encoding.mkTextEncoding1
  :: GHC.Base.String
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Encoding.Types.TextEncoding #)
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [e_s9YAW void_0E]
        case GHC.List.$wspan GHC.IO.Encoding.mkTextEncoding9 e_s9YAW of {
          (#,#) ww1_s9YAZ [Occ=Once*] ww2_s9YB0 [Occ=Once!] ->
              case ww2_s9YB0 of wild_s9YB1 {
                [] ->
                    GHC.IO.Encoding.getFileSystemEncoding5
                        GHC.IO.Encoding.Failure.ErrorOnCodingFailure
                        ww1_s9YAZ
                        GHC.Prim.void#;
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    case
                        GHC.Base.eqString wild_s9YB1 GHC.IO.Encoding.mkTextEncoding7
                    of
                    { GHC.Types.False ->
                          case
                              GHC.Base.eqString wild_s9YB1 GHC.IO.Encoding.mkTextEncoding5
                          of
                          { GHC.Types.False ->
                                case
                                    GHC.Base.eqString wild_s9YB1 GHC.IO.Encoding.mkTextEncoding3
                                of
                                { GHC.Types.False ->
                                      GHC.IO.Encoding.mkTextEncoding2 e_s9YAW GHC.Prim.void#;
                                  GHC.Types.True ->
                                      GHC.IO.Encoding.getFileSystemEncoding5
                                          GHC.IO.Encoding.Failure.TransliterateCodingFailure
                                          ww1_s9YAZ
                                          GHC.Prim.void#;
                                };
                            GHC.Types.True ->
                                GHC.IO.Encoding.getFileSystemEncoding5
                                    GHC.IO.Encoding.Failure.RoundtripFailure
                                    ww1_s9YAZ
                                    GHC.Prim.void#;
                          };
                      GHC.Types.True ->
                          GHC.IO.Encoding.getFileSystemEncoding5
                              GHC.IO.Encoding.Failure.IgnoreCodingFailure
                              ww1_s9YAZ
                              GHC.Prim.void#;
                    };
              };
        };

GHC.IO.Encoding.mkTextEncoding
  :: GHC.Base.String
     -> GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.IO.Encoding.mkTextEncoding1 eta_B2 GHC.Prim.void#;

GHC.IO.Encoding.getForeignEncoding4
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Encoding.Types.TextEncoding #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E]
        case noDuplicate# [GHC.Prim.void#] of s'_s9YB8 {
          (##) ->
              GHC.IO.Encoding.getFileSystemEncoding5
                  GHC.IO.Encoding.Failure.IgnoreCodingFailure
                  GHC.IO.Encoding.Iconv.localeEncodingName
                  GHC.Prim.void#;
        };

GHC.IO.Encoding.getForeignEncoding3
  :: GHC.IO.Encoding.Types.TextEncoding
[GblId] =
    [] \u []
        case GHC.IO.Encoding.getForeignEncoding4 GHC.Prim.realWorld# of {
          Unit# ipv1_s9YBb [Occ=Once] -> ipv1_s9YBb;
        };

GHC.IO.Encoding.getForeignEncoding2
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding,
            GHC.IO.Encoding.Types.TextEncoding -> GHC.Types.IO ()) #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E]
        case noDuplicate# [GHC.Prim.void#] of s'_s9YBd {
          (##) ->
              case
                  newMutVar# [GHC.IO.Encoding.getForeignEncoding3 GHC.Prim.void#]
              of
              { Unit# ipv1_s9YBg ->
                    let {
                      sat_s9YBm [Occ=Once]
                        :: GHC.IO.Encoding.Types.TextEncoding -> GHC.Types.IO ()
                      [LclId] =
                          [ipv1_s9YBg] \r [val_s9YBj void_0E]
                              case
                                  writeMutVar# [ipv1_s9YBg val_s9YBj GHC.Prim.void#]
                              of
                              s2#_s9YBl
                              { (##) -> Unit# [GHC.Tuple.()];
                              }; } in
                    let {
                      sat_s9YBi [Occ=Once]
                        :: GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding
                      [LclId] =
                          [ipv1_s9YBg] \r [void_0E]
                              readMutVar# [ipv1_s9YBg GHC.Prim.void#]; } in
                    let {
                      sat_s9YBn [Occ=Once]
                        :: (GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding,
                            GHC.IO.Encoding.Types.TextEncoding -> GHC.Types.IO ())
                      [LclId] =
                          CCCS (,)! [sat_s9YBi sat_s9YBm];
                    } in  Unit# [sat_s9YBn];
              };
        };

GHC.IO.Encoding.getForeignEncoding1
  :: (GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding,
      GHC.IO.Encoding.Types.TextEncoding -> GHC.Types.IO ())
[GblId] =
    [] \u []
        case GHC.IO.Encoding.getForeignEncoding2 GHC.Prim.realWorld# of {
          Unit# ipv1_s9YBq [Occ=Once] -> ipv1_s9YBq;
        };

GHC.IO.Encoding.getForeignEncoding
  :: GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding
[GblId] =
    [] \u []
        case GHC.IO.Encoding.getForeignEncoding1 of {
          (,) getForeignEncoding5_s9YBs [Occ=Once] _ [Occ=Dead] ->
              getForeignEncoding5_s9YBs;
        };

GHC.IO.Encoding.setForeignEncoding
  :: GHC.IO.Encoding.Types.TextEncoding -> GHC.Types.IO ()
[GblId] =
    [] \u []
        case GHC.IO.Encoding.getForeignEncoding1 of {
          (,) _ [Occ=Dead] setForeignEncoding1_s9YBw [Occ=Once] ->
              setForeignEncoding1_s9YBw;
        };

GHC.IO.Encoding.getFileSystemEncoding4
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Encoding.Types.TextEncoding #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E]
        case noDuplicate# [GHC.Prim.void#] of s'_s9YBy {
          (##) ->
              GHC.IO.Encoding.getFileSystemEncoding5
                  GHC.IO.Encoding.Failure.RoundtripFailure
                  GHC.IO.Encoding.Iconv.localeEncodingName
                  GHC.Prim.void#;
        };

GHC.IO.Encoding.getFileSystemEncoding3
  :: GHC.IO.Encoding.Types.TextEncoding
[GblId] =
    [] \u []
        case
            GHC.IO.Encoding.getFileSystemEncoding4 GHC.Prim.realWorld#
        of
        { Unit# ipv1_s9YBB [Occ=Once] -> ipv1_s9YBB;
        };

GHC.IO.Encoding.getFileSystemEncoding2
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding,
            GHC.IO.Encoding.Types.TextEncoding -> GHC.Types.IO ()) #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E]
        case noDuplicate# [GHC.Prim.void#] of s'_s9YBD {
          (##) ->
              case
                  newMutVar# [GHC.IO.Encoding.getFileSystemEncoding3 GHC.Prim.void#]
              of
              { Unit# ipv1_s9YBG ->
                    let {
                      sat_s9YBM [Occ=Once]
                        :: GHC.IO.Encoding.Types.TextEncoding -> GHC.Types.IO ()
                      [LclId] =
                          [ipv1_s9YBG] \r [val_s9YBJ void_0E]
                              case
                                  writeMutVar# [ipv1_s9YBG val_s9YBJ GHC.Prim.void#]
                              of
                              s2#_s9YBL
                              { (##) -> Unit# [GHC.Tuple.()];
                              }; } in
                    let {
                      sat_s9YBI [Occ=Once]
                        :: GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding
                      [LclId] =
                          [ipv1_s9YBG] \r [void_0E]
                              readMutVar# [ipv1_s9YBG GHC.Prim.void#]; } in
                    let {
                      sat_s9YBN [Occ=Once]
                        :: (GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding,
                            GHC.IO.Encoding.Types.TextEncoding -> GHC.Types.IO ())
                      [LclId] =
                          CCCS (,)! [sat_s9YBI sat_s9YBM];
                    } in  Unit# [sat_s9YBN];
              };
        };

GHC.IO.Encoding.getFileSystemEncoding1
  :: (GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding,
      GHC.IO.Encoding.Types.TextEncoding -> GHC.Types.IO ())
[GblId] =
    [] \u []
        case
            GHC.IO.Encoding.getFileSystemEncoding2 GHC.Prim.realWorld#
        of
        { Unit# ipv1_s9YBQ [Occ=Once] -> ipv1_s9YBQ;
        };

GHC.IO.Encoding.getFileSystemEncoding
  :: GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding
[GblId] =
    [] \u []
        case GHC.IO.Encoding.getFileSystemEncoding1 of {
          (,) getFileSystemEncoding81_s9YBS [Occ=Once] _ [Occ=Dead] ->
              getFileSystemEncoding81_s9YBS;
        };

GHC.IO.Encoding.argvEncoding
  :: GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding
[GblId] =
    [] \u [] GHC.IO.Encoding.getFileSystemEncoding;

GHC.IO.Encoding.setFileSystemEncoding
  :: GHC.IO.Encoding.Types.TextEncoding -> GHC.Types.IO ()
[GblId] =
    [] \u []
        case GHC.IO.Encoding.getFileSystemEncoding1 of {
          (,) _ [Occ=Dead] setFileSystemEncoding1_s9YBW [Occ=Once] ->
              setFileSystemEncoding1_s9YBW;
        };

GHC.IO.Encoding.initLocaleEncoding1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Encoding.Types.TextEncoding #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E]
        case noDuplicate# [GHC.Prim.void#] of s'_s9YBY {
          (##) ->
              GHC.IO.Encoding.getFileSystemEncoding5
                  GHC.IO.Encoding.Failure.ErrorOnCodingFailure
                  GHC.IO.Encoding.Iconv.localeEncodingName
                  GHC.Prim.void#;
        };

GHC.IO.Encoding.initLocaleEncoding
  :: GHC.IO.Encoding.Types.TextEncoding
[GblId] =
    [] \u []
        case GHC.IO.Encoding.initLocaleEncoding1 GHC.Prim.realWorld# of {
          Unit# ipv1_s9YC1 [Occ=Once] -> ipv1_s9YC1;
        };

GHC.IO.Encoding.getLocaleEncoding2
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding,
            GHC.IO.Encoding.Types.TextEncoding -> GHC.Types.IO ()) #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E]
        case noDuplicate# [GHC.Prim.void#] of s'_s9YC3 {
          (##) ->
              case
                  newMutVar# [GHC.IO.Encoding.initLocaleEncoding GHC.Prim.void#]
              of
              { Unit# ipv1_s9YC6 ->
                    let {
                      sat_s9YCc [Occ=Once]
                        :: GHC.IO.Encoding.Types.TextEncoding -> GHC.Types.IO ()
                      [LclId] =
                          [ipv1_s9YC6] \r [val_s9YC9 void_0E]
                              case
                                  writeMutVar# [ipv1_s9YC6 val_s9YC9 GHC.Prim.void#]
                              of
                              s2#_s9YCb
                              { (##) -> Unit# [GHC.Tuple.()];
                              }; } in
                    let {
                      sat_s9YC8 [Occ=Once]
                        :: GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding
                      [LclId] =
                          [ipv1_s9YC6] \r [void_0E]
                              readMutVar# [ipv1_s9YC6 GHC.Prim.void#]; } in
                    let {
                      sat_s9YCd [Occ=Once]
                        :: (GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding,
                            GHC.IO.Encoding.Types.TextEncoding -> GHC.Types.IO ())
                      [LclId] =
                          CCCS (,)! [sat_s9YC8 sat_s9YCc];
                    } in  Unit# [sat_s9YCd];
              };
        };

GHC.IO.Encoding.getLocaleEncoding1
  :: (GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding,
      GHC.IO.Encoding.Types.TextEncoding -> GHC.Types.IO ())
[GblId] =
    [] \u []
        case GHC.IO.Encoding.getLocaleEncoding2 GHC.Prim.realWorld# of {
          Unit# ipv1_s9YCg [Occ=Once] -> ipv1_s9YCg;
        };

GHC.IO.Encoding.getLocaleEncoding
  :: GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding
[GblId] =
    [] \u []
        case GHC.IO.Encoding.getLocaleEncoding1 of {
          (,) getLocaleEncoding3_s9YCi [Occ=Once] _ [Occ=Dead] ->
              getLocaleEncoding3_s9YCi;
        };

GHC.IO.Encoding.setLocaleEncoding
  :: GHC.IO.Encoding.Types.TextEncoding -> GHC.Types.IO ()
[GblId] =
    [] \u []
        case GHC.IO.Encoding.getLocaleEncoding1 of {
          (,) _ [Occ=Dead] setLocaleEncoding1_s9YCm [Occ=Once] ->
              setLocaleEncoding1_s9YCm;
        };

GHC.IO.Encoding.latin1_decode1
  :: GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.IO.Buffer.CharBuffer
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Buffer.Buffer GHC.Word.Word8,
            GHC.IO.Buffer.Buffer GHC.Types.Char) #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LLLLSL),1*U(U,U,U,U,U,U)><S(LLLSLS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [input_s9YCn output_s9YCo void_0E]
        case
            GHC.IO.Encoding.Latin1.latin5
                input_s9YCn output_s9YCo GHC.Prim.void#
        of
        { Unit# ipv1_s9YCs [Occ=Once!] ->
              let {
                sat_s9YCx [Occ=Once]
                  :: (GHC.IO.Buffer.Buffer GHC.Word.Word8,
                      GHC.IO.Buffer.Buffer GHC.Types.Char)
                [LclId] =
                    [ipv1_s9YCs] \u []
                        case ipv1_s9YCs of {
                          (,,) _ [Occ=Dead]
                               input'_s9YCv [Occ=Once]
                               output'_s9YCw [Occ=Once] ->
                              (,) [input'_s9YCv output'_s9YCw];
                        };
              } in  Unit# [sat_s9YCx];
        };

GHC.IO.Encoding.latin1_decode
  :: GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.IO.Buffer.CharBuffer
     -> GHC.Types.IO
          (GHC.IO.Buffer.Buffer GHC.Word.Word8, GHC.IO.Buffer.CharBuffer)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LLLLSL),1*U(U,U,U,U,U,U)><S(LLLSLS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.IO.Encoding.latin1_decode1 eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.Encoding.latin1_encode1
  :: GHC.IO.Buffer.CharBuffer
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.IO.Buffer.Buffer GHC.Types.Char,
            GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LLLLSL),1*U(U,U,U,U,U,U)><S(LLLSLS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [input_s9YCy output_s9YCz void_0E]
        case
            GHC.IO.Encoding.Latin1.latin3
                input_s9YCy output_s9YCz GHC.Prim.void#
        of
        { Unit# ipv1_s9YCD [Occ=Once!] ->
              let {
                sat_s9YCI [Occ=Once]
                  :: (GHC.IO.Buffer.Buffer GHC.Types.Char,
                      GHC.IO.Buffer.Buffer GHC.Word.Word8)
                [LclId] =
                    [ipv1_s9YCD] \u []
                        case ipv1_s9YCD of {
                          (,,) _ [Occ=Dead]
                               input'_s9YCG [Occ=Once]
                               output'_s9YCH [Occ=Once] ->
                              (,) [input'_s9YCG output'_s9YCH];
                        };
              } in  Unit# [sat_s9YCI];
        };

GHC.IO.Encoding.latin1_encode
  :: GHC.IO.Buffer.CharBuffer
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Types.IO
          (GHC.IO.Buffer.CharBuffer, GHC.IO.Buffer.Buffer GHC.Word.Word8)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LLLLSL),1*U(U,U,U,U,U,U)><S(LLLSLS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.IO.Encoding.latin1_encode1 eta_B3 eta_B2 GHC.Prim.void#;

