
==================== Raw Cmm ====================
2018-03-16 16:02:55.465951943 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:02:55.468973037 UTC

[section ""data" . GHC.IO.Buffer.$WBuffer_closure" {
     GHC.IO.Buffer.$WBuffer_closure:
         const GHC.IO.Buffer.$WBuffer_info;
 },
 GHC.IO.Buffer.$WBuffer_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c7PsS: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c7Ptb; else goto c7Ptc;
       c7Ptb: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Buffer.$WBuffer_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Ptc: // global
           I64[Sp - 40] = block_c7PsP_info;
           R1 = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u7Ptk; else goto c7PsQ;
       u7Ptk: // global
           call _c7PsP(R1) args: 0, res: 0, upd: 0;
       c7PsQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.$WBuffer_info" {
     GHC.IO.Buffer.$WBuffer_info:
         const GHC.IO.Buffer.$WBuffer_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _c7PsP() //  [R1]
         { []
         }
     {offset
       c7PsP: // global
           I64[Sp - 8] = block_c7PsV_info;
           _s7OK5::P64 = P64[R1 + 7];
           _s7OK4::I64 = I64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp] = _s7OK5::P64;
           I64[Sp + 16] = _s7OK4::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Ptj; else goto c7PsW;
       u7Ptj: // global
           call _c7PsV(R1) args: 0, res: 0, upd: 0;
       c7PsW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7PsP_info" {
     block_c7PsP_info:
         const _c7PsP;
         const 4;
         const 30;
 },
 _c7PsV() //  [R1]
         { []
         }
     {offset
       c7PsV: // global
           I64[Sp] = block_c7Pt0_info;
           _s7OK7::I64 = I64[R1 + 7];
           R1 = P64[Sp + 32];
           I64[Sp + 32] = _s7OK7::I64;
           if (R1 & 7 != 0) goto u7Ptl; else goto c7Pt1;
       u7Ptl: // global
           call _c7Pt0(R1) args: 0, res: 0, upd: 0;
       c7Pt1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7PsV_info" {
     block_c7PsV_info:
         const _c7PsV;
         const 261;
         const 30;
 },
 _c7Pt0() //  [R1]
         { []
         }
     {offset
       c7Pt0: // global
           I64[Sp] = block_c7Pt5_info;
           _s7OK9::I64 = I64[R1 + 7];
           R1 = P64[Sp + 40];
           I64[Sp + 40] = _s7OK9::I64;
           if (R1 & 7 != 0) goto u7Ptm; else goto c7Pt6;
       u7Ptm: // global
           call _c7Pt5(R1) args: 0, res: 0, upd: 0;
       c7Pt6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Pt0_info" {
     block_c7Pt0_info:
         const _c7Pt0;
         const 773;
         const 30;
 },
 _c7Pt5() //  [R1]
         { []
         }
     {offset
       c7Pt5: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c7Pti; else goto c7Pth;
       c7Pti: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Pth: // global
           _s7OKb::I64 = I64[R1 + 7];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 16];
           I64[Hp - 24] = I64[Sp + 24];
           I64[Hp - 16] = I64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = _s7OKb::I64;
           R1 = Hp - 47;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Pt5_info" {
     block_c7Pt5_info:
         const _c7Pt5;
         const 1797;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.481870814 UTC

[section ""data" . GHC.IO.Buffer.$fEqBufferState_$c==_closure" {
     GHC.IO.Buffer.$fEqBufferState_$c==_closure:
         const GHC.IO.Buffer.$fEqBufferState_$c==_info;
 },
 GHC.IO.Buffer.$fEqBufferState_$c==_entry() //  [R2, R3]
         { []
         }
     {offset
       c7PtZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Pu0; else goto c7Pu1;
       c7Pu0: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Buffer.$fEqBufferState_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Pu1: // global
           I64[Sp - 16] = block_c7PtS_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7PuE; else goto c7PtT;
       u7PuE: // global
           call _c7PtS(R1) args: 0, res: 0, upd: 0;
       c7PtT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.$fEqBufferState_$c==_info" {
     GHC.IO.Buffer.$fEqBufferState_$c==_info:
         const GHC.IO.Buffer.$fEqBufferState_$c==_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c7PtS() //  [R1]
         { []
         }
     {offset
       c7PtS: // global
           _s7OKd::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c7PtW; else goto c7PtX;
       c7PtW: // global
           I64[Sp + 8] = block_c7Pu4_info;
           R1 = _s7OKd::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7PuC; else goto c7Pu6;
       u7PuC: // global
           call _c7Pu4(R1) args: 0, res: 0, upd: 0;
       c7Pu6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7PtX: // global
           I64[Sp + 8] = block_c7Puj_info;
           R1 = _s7OKd::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7PuD; else goto c7Pul;
       u7PuD: // global
           call _c7Puj(R1) args: 0, res: 0, upd: 0;
       c7Pul: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7PtS_info" {
     block_c7PtS_info:
         const _c7PtS;
         const 1;
         const 30;
 },
 _c7Pu4() //  [R1]
         { []
         }
     {offset
       c7Pu4: // global
           if (R1 & 7 == 1) goto u7PuA; else goto u7PuB;
       u7PuA: // global
           Sp = Sp + 8;
           call _c7Puv() args: 0, res: 0, upd: 0;
       u7PuB: // global
           Sp = Sp + 8;
           call _c7Pur() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c7Pu4_info" {
     block_c7Pu4_info:
         const _c7Pu4;
         const 0;
         const 30;
 },
 _c7Puj() //  [R1]
         { []
         }
     {offset
       c7Puj: // global
           if (R1 & 7 == 1) goto u7Puy; else goto u7Puz;
       u7Puy: // global
           Sp = Sp + 8;
           call _c7Pur() args: 0, res: 0, upd: 0;
       u7Puz: // global
           Sp = Sp + 8;
           call _c7Puv() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c7Puj_info" {
     block_c7Puj_info:
         const _c7Puj;
         const 0;
         const 30;
 },
 _c7Pur() //  []
         { []
         }
     {offset
       c7Pur: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7Puv() //  []
         { []
         }
     {offset
       c7Puv: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.49383921 UTC

[section ""data" . GHC.IO.Buffer.$fEqBufferState_$c/=_closure" {
     GHC.IO.Buffer.$fEqBufferState_$c/=_closure:
         const GHC.IO.Buffer.$fEqBufferState_$c/=_info;
 },
 GHC.IO.Buffer.$fEqBufferState_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       c7Pvn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Pvo; else goto c7Pvp;
       c7Pvo: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Buffer.$fEqBufferState_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Pvp: // global
           I64[Sp - 16] = block_c7Pvg_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Pw2; else goto c7Pvh;
       u7Pw2: // global
           call _c7Pvg(R1) args: 0, res: 0, upd: 0;
       c7Pvh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.$fEqBufferState_$c/=_info" {
     GHC.IO.Buffer.$fEqBufferState_$c/=_info:
         const GHC.IO.Buffer.$fEqBufferState_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c7Pvg() //  [R1]
         { []
         }
     {offset
       c7Pvg: // global
           _s7OKi::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c7Pvk; else goto c7Pvl;
       c7Pvk: // global
           I64[Sp + 8] = block_c7Pvs_info;
           R1 = _s7OKi::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7Pw0; else goto c7Pvu;
       u7Pw0: // global
           call _c7Pvs(R1) args: 0, res: 0, upd: 0;
       c7Pvu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7Pvl: // global
           I64[Sp + 8] = block_c7PvH_info;
           R1 = _s7OKi::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7Pw1; else goto c7PvJ;
       u7Pw1: // global
           call _c7PvH(R1) args: 0, res: 0, upd: 0;
       c7PvJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Pvg_info" {
     block_c7Pvg_info:
         const _c7Pvg;
         const 1;
         const 30;
 },
 _c7Pvs() //  [R1]
         { []
         }
     {offset
       c7Pvs: // global
           if (R1 & 7 == 1) goto u7PvY; else goto u7PvZ;
       u7PvY: // global
           Sp = Sp + 8;
           call _c7PvT() args: 0, res: 0, upd: 0;
       u7PvZ: // global
           Sp = Sp + 8;
           call _c7PvP() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c7Pvs_info" {
     block_c7Pvs_info:
         const _c7Pvs;
         const 0;
         const 30;
 },
 _c7PvH() //  [R1]
         { []
         }
     {offset
       c7PvH: // global
           if (R1 & 7 == 1) goto u7PvW; else goto u7PvX;
       u7PvW: // global
           Sp = Sp + 8;
           call _c7PvP() args: 0, res: 0, upd: 0;
       u7PvX: // global
           Sp = Sp + 8;
           call _c7PvT() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c7PvH_info" {
     block_c7PvH_info:
         const _c7PvH;
         const 0;
         const 30;
 },
 _c7PvP() //  []
         { []
         }
     {offset
       c7PvP: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7PvT() //  []
         { []
         }
     {offset
       c7PvT: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.50490541 UTC

[section ""data" . GHC.IO.Buffer.$fEqBufferState_closure" {
     GHC.IO.Buffer.$fEqBufferState_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.IO.Buffer.$fEqBufferState_$c==_closure+2;
         const GHC.IO.Buffer.$fEqBufferState_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.507549899 UTC

[section ""data" . GHC.IO.Buffer.bufR_closure" {
     GHC.IO.Buffer.bufR_closure:
         const GHC.IO.Buffer.bufR_info;
 },
 GHC.IO.Buffer.bufR_entry() //  [R2]
         { []
         }
     {offset
       c7PwI: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7PwM; else goto c7PwN;
       c7PwM: // global
           R2 = R2;
           R1 = GHC.IO.Buffer.bufR_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7PwN: // global
           I64[Sp - 8] = block_c7PwF_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7PwR; else goto c7PwG;
       u7PwR: // global
           call _c7PwF(R1) args: 0, res: 0, upd: 0;
       c7PwG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.bufR_info" {
     GHC.IO.Buffer.bufR_info:
         const GHC.IO.Buffer.bufR_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c7PwF() //  [R1]
         { []
         }
     {offset
       c7PwF: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7PwQ; else goto c7PwP;
       c7PwQ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7PwP: // global
           _s7OKt::I64 = I64[R1 + 47];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s7OKt::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7PwF_info" {
     block_c7PwF_info:
         const _c7PwF;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.513367755 UTC

[section ""data" . GHC.IO.Buffer.bufL_closure" {
     GHC.IO.Buffer.bufL_closure:
         const GHC.IO.Buffer.bufL_info;
 },
 GHC.IO.Buffer.bufL_entry() //  [R2]
         { []
         }
     {offset
       c7Px9: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7Pxd; else goto c7Pxe;
       c7Pxd: // global
           R2 = R2;
           R1 = GHC.IO.Buffer.bufL_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Pxe: // global
           I64[Sp - 8] = block_c7Px6_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Pxi; else goto c7Px7;
       u7Pxi: // global
           call _c7Px6(R1) args: 0, res: 0, upd: 0;
       c7Px7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.bufL_info" {
     GHC.IO.Buffer.bufL_info:
         const GHC.IO.Buffer.bufL_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c7Px6() //  [R1]
         { []
         }
     {offset
       c7Px6: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7Pxh; else goto c7Pxg;
       c7Pxh: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Pxg: // global
           _s7OKA::I64 = I64[R1 + 39];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s7OKA::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Px6_info" {
     block_c7Px6_info:
         const _c7Px6;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.519111683 UTC

[section ""data" . GHC.IO.Buffer.bufSize_closure" {
     GHC.IO.Buffer.bufSize_closure:
         const GHC.IO.Buffer.bufSize_info;
 },
 GHC.IO.Buffer.bufSize_entry() //  [R2]
         { []
         }
     {offset
       c7PxA: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7PxE; else goto c7PxF;
       c7PxE: // global
           R2 = R2;
           R1 = GHC.IO.Buffer.bufSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7PxF: // global
           I64[Sp - 8] = block_c7Pxx_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7PxJ; else goto c7Pxy;
       u7PxJ: // global
           call _c7Pxx(R1) args: 0, res: 0, upd: 0;
       c7Pxy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.bufSize_info" {
     GHC.IO.Buffer.bufSize_info:
         const GHC.IO.Buffer.bufSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c7Pxx() //  [R1]
         { []
         }
     {offset
       c7Pxx: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7PxI; else goto c7PxH;
       c7PxI: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7PxH: // global
           _s7OKH::I64 = I64[R1 + 31];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s7OKH::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Pxx_info" {
     block_c7Pxx_info:
         const _c7Pxx;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.524603103 UTC

[section ""data" . GHC.IO.Buffer.bufState_closure" {
     GHC.IO.Buffer.bufState_closure:
         const GHC.IO.Buffer.bufState_info;
 },
 GHC.IO.Buffer.bufState_entry() //  [R2]
         { []
         }
     {offset
       c7Py1: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7Py2; else goto c7Py3;
       c7Py2: // global
           R2 = R2;
           R1 = GHC.IO.Buffer.bufState_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Py3: // global
           I64[Sp - 8] = block_c7PxY_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Py7; else goto c7PxZ;
       u7Py7: // global
           call _c7PxY(R1) args: 0, res: 0, upd: 0;
       c7PxZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.bufState_info" {
     GHC.IO.Buffer.bufState_info:
         const GHC.IO.Buffer.bufState_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c7PxY() //  [R1]
         { []
         }
     {offset
       c7PxY: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7PxY_info" {
     block_c7PxY_info:
         const _c7PxY;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.530908958 UTC

[section ""data" . GHC.IO.Buffer.bufRaw_closure" {
     GHC.IO.Buffer.bufRaw_closure:
         const GHC.IO.Buffer.bufRaw_info;
 },
 GHC.IO.Buffer.bufRaw_entry() //  [R2]
         { []
         }
     {offset
       c7Pyq: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7Pyu; else goto c7Pyv;
       c7Pyu: // global
           R2 = R2;
           R1 = GHC.IO.Buffer.bufRaw_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Pyv: // global
           I64[Sp - 8] = block_c7Pyn_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Pyz; else goto c7Pyo;
       u7Pyz: // global
           call _c7Pyn(R1) args: 0, res: 0, upd: 0;
       c7Pyo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.bufRaw_info" {
     GHC.IO.Buffer.bufRaw_info:
         const GHC.IO.Buffer.bufRaw_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c7Pyn() //  [R1]
         { []
         }
     {offset
       c7Pyn: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7Pyy; else goto c7Pyx;
       c7Pyy: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Pyx: // global
           _s7OKV::P64 = P64[R1 + 7];
           _s7OKU::I64 = I64[R1 + 23];
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = _s7OKV::P64;
           I64[Hp] = _s7OKU::I64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Pyn_info" {
     block_c7Pyn_info:
         const _c7Pyn;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.536522683 UTC

[section ""data" . GHC.IO.Buffer.charSize_closure" {
     GHC.IO.Buffer.charSize_closure:
         const GHC.Types.I#_con_info;
         const 4;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.540427749 UTC

[section ""data" . GHC.IO.Buffer.withBuffer1_closure" {
     GHC.IO.Buffer.withBuffer1_closure:
         const GHC.IO.Buffer.withBuffer1_info;
 },
 GHC.IO.Buffer.withBuffer1_entry() //  [R2, R3]
         { []
         }
     {offset
       c7PyS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7PyT; else goto c7PyU;
       c7PyT: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Buffer.withBuffer1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7PyU: // global
           I64[Sp - 16] = block_c7PyP_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Pz5; else goto c7PyQ;
       u7Pz5: // global
           call _c7PyP(R1) args: 0, res: 0, upd: 0;
       c7PyQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.withBuffer1_info" {
     GHC.IO.Buffer.withBuffer1_info:
         const GHC.IO.Buffer.withBuffer1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c7PyP() //  [R1]
         { []
         }
     {offset
       c7PyP: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7Pz1; else goto c7Pz0;
       c7Pz1: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Pz0: // global
           _s7OL5::P64 = P64[R1 + 7];
           _s7OL4::I64 = I64[R1 + 23];
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s7OL4::I64;
           I64[Sp] = block_c7PyY_info;
           R2 = Hp - 7;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s7OL5::P64;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7PyP_info" {
     block_c7PyP_info:
         const _c7PyP;
         const 1;
         const 30;
 },
 _c7PyY() //  [R1]
         { []
         }
     {offset
       c7PyY: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = R1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7PyY_info" {
     block_c7PyY_info:
         const _c7PyY;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.549074089 UTC

[section ""data" . GHC.IO.Buffer.withBuffer_closure" {
     GHC.IO.Buffer.withBuffer_closure:
         const GHC.IO.Buffer.withBuffer_info;
 },
 GHC.IO.Buffer.withBuffer_entry() //  [R2, R3]
         { []
         }
     {offset
       c7Pzn: // global
           R3 = R3;
           R2 = R2;
           call GHC.IO.Buffer.withBuffer1_entry(R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.withBuffer_info" {
     GHC.IO.Buffer.withBuffer_info:
         const GHC.IO.Buffer.withBuffer_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.553727497 UTC

[section ""data" . GHC.IO.Buffer.withRawBuffer1_closure" {
     GHC.IO.Buffer.withRawBuffer1_closure:
         const GHC.IO.Buffer.withRawBuffer1_info;
 },
 sat_s7OLi_entry() //  [R1]
         { []
         }
     {offset
       c7PzC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7PzD; else goto c7PzE;
       c7PzD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7PzE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.ForeignPtr.unsafeForeignPtrToPtr_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7OLi_info" {
     sat_s7OLi_info:
         const sat_s7OLi_entry;
         const 1;
         const 16;
 },
 GHC.IO.Buffer.withRawBuffer1_entry() //  [R2, R3]
         { []
         }
     {offset
       c7PzK: // global
           _s7OLg::P64 = R3;
           _s7OLf::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c7PzL; else goto c7PzM;
       c7PzM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7PzO; else goto c7PzN;
       c7PzO: // global
           HpAlloc = 24;
           goto c7PzL;
       c7PzL: // global
           R3 = _s7OLg::P64;
           R2 = _s7OLf::P64;
           R1 = GHC.IO.Buffer.withRawBuffer1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7PzN: // global
           I64[Hp - 16] = sat_s7OLi_info;
           P64[Hp] = _s7OLf::P64;
           I64[Sp - 16] = block_c7PzF_info;
           R2 = Hp - 16;
           R1 = _s7OLg::P64;
           P64[Sp - 8] = _s7OLf::P64;
           Sp = Sp - 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.withRawBuffer1_info" {
     GHC.IO.Buffer.withRawBuffer1_info:
         const GHC.IO.Buffer.withRawBuffer1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c7PzF() //  [R1]
         { []
         }
     {offset
       c7PzF: // global
           I64[Sp] = block_c7PzH_info;
           _s7OLl::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s7OLl::P64;
           if (R1 & 7 != 0) goto u7PzU; else goto c7PzI;
       u7PzU: // global
           call _c7PzH(R1) args: 0, res: 0, upd: 0;
       c7PzI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7PzF_info" {
     block_c7PzF_info:
         const _c7PzF;
         const 1;
         const 30;
 },
 _c7PzH() //  [R1]
         { []
         }
     {offset
       c7PzH: // global
           _s7OLl::P64 = P64[Sp + 8];
           call MO_Touch(P64[R1 + 7]);
           R1 = _s7OLl::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7PzH_info" {
     block_c7PzH_info:
         const _c7PzH;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.56198568 UTC

[section ""data" . GHC.IO.Buffer.withRawBuffer_closure" {
     GHC.IO.Buffer.withRawBuffer_closure:
         const GHC.IO.Buffer.withRawBuffer_info;
 },
 GHC.IO.Buffer.withRawBuffer_entry() //  [R2, R3]
         { []
         }
     {offset
       c7PAg: // global
           R3 = R3;
           R2 = R2;
           call GHC.IO.Buffer.withRawBuffer1_entry(R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.withRawBuffer_info" {
     GHC.IO.Buffer.withRawBuffer_info:
         const GHC.IO.Buffer.withRawBuffer_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.566393098 UTC

[section ""data" . GHC.IO.Buffer.isEmptyBuffer_closure" {
     GHC.IO.Buffer.isEmptyBuffer_closure:
         const GHC.IO.Buffer.isEmptyBuffer_info;
 },
 GHC.IO.Buffer.isEmptyBuffer_entry() //  [R2]
         { []
         }
     {offset
       c7PAu: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7PAv; else goto c7PAw;
       c7PAv: // global
           R2 = R2;
           R1 = GHC.IO.Buffer.isEmptyBuffer_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7PAw: // global
           I64[Sp - 8] = block_c7PAr_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7PAB; else goto c7PAs;
       u7PAB: // global
           call _c7PAr(R1) args: 0, res: 0, upd: 0;
       c7PAs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.isEmptyBuffer_info" {
     GHC.IO.Buffer.isEmptyBuffer_info:
         const GHC.IO.Buffer.isEmptyBuffer_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c7PAr() //  [R1]
         { []
         }
     {offset
       c7PAr: // global
           R1 = I64[((I64[R1 + 39] == I64[R1 + 47]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7PAr_info" {
     block_c7PAr_info:
         const _c7PAr;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.572506701 UTC

[section ""data" . GHC.IO.Buffer.isFullBuffer_closure" {
     GHC.IO.Buffer.isFullBuffer_closure:
         const GHC.IO.Buffer.isFullBuffer_info;
 },
 GHC.IO.Buffer.isFullBuffer_entry() //  [R2]
         { []
         }
     {offset
       c7PAW: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7PAX; else goto c7PAY;
       c7PAX: // global
           R2 = R2;
           R1 = GHC.IO.Buffer.isFullBuffer_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7PAY: // global
           I64[Sp - 8] = block_c7PAT_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7PB3; else goto c7PAU;
       u7PB3: // global
           call _c7PAT(R1) args: 0, res: 0, upd: 0;
       c7PAU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.isFullBuffer_info" {
     GHC.IO.Buffer.isFullBuffer_info:
         const GHC.IO.Buffer.isFullBuffer_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c7PAT() //  [R1]
         { []
         }
     {offset
       c7PAT: // global
           R1 = I64[((I64[R1 + 31] == I64[R1 + 47]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7PAT_info" {
     block_c7PAT_info:
         const _c7PAT;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.578173616 UTC

[section ""data" . GHC.IO.Buffer.isFullCharBuffer_closure" {
     GHC.IO.Buffer.isFullCharBuffer_closure:
         const GHC.IO.Buffer.isFullCharBuffer_info;
 },
 GHC.IO.Buffer.isFullCharBuffer_entry() //  [R2]
         { []
         }
     {offset
       c7PBl: // global
           R2 = R2;
           call GHC.IO.Buffer.isFullBuffer_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.isFullCharBuffer_info" {
     GHC.IO.Buffer.isFullCharBuffer_info:
         const GHC.IO.Buffer.isFullCharBuffer_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.582219902 UTC

[section ""data" . GHC.IO.Buffer.isWriteBuffer_closure" {
     GHC.IO.Buffer.isWriteBuffer_closure:
         const GHC.IO.Buffer.isWriteBuffer_info;
 },
 GHC.IO.Buffer.isWriteBuffer_entry() //  [R2]
         { []
         }
     {offset
       c7PBz: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7PBA; else goto c7PBB;
       c7PBA: // global
           R2 = R2;
           R1 = GHC.IO.Buffer.isWriteBuffer_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7PBB: // global
           I64[Sp - 8] = block_c7PBw_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7PBT; else goto c7PBx;
       u7PBT: // global
           call _c7PBw(R1) args: 0, res: 0, upd: 0;
       c7PBx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.isWriteBuffer_info" {
     GHC.IO.Buffer.isWriteBuffer_info:
         const GHC.IO.Buffer.isWriteBuffer_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c7PBw() //  [R1]
         { []
         }
     {offset
       c7PBw: // global
           I64[Sp] = block_c7PBE_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto u7PBS; else goto c7PBG;
       u7PBS: // global
           call _c7PBE(R1) args: 0, res: 0, upd: 0;
       c7PBG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7PBw_info" {
     block_c7PBw_info:
         const _c7PBw;
         const 0;
         const 30;
 },
 _c7PBE() //  [R1]
         { []
         }
     {offset
       c7PBE: // global
           if (R1 & 7 == 1) goto c7PBM; else goto c7PBQ;
       c7PBM: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7PBQ: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7PBE_info" {
     block_c7PBE_info:
         const _c7PBE;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.590382337 UTC

[section ""data" . GHC.IO.Buffer.bufferAdjustL_closure" {
     GHC.IO.Buffer.bufferAdjustL_closure:
         const GHC.IO.Buffer.bufferAdjustL_info;
 },
 GHC.IO.Buffer.bufferAdjustL_entry() //  [R2, R3]
         { []
         }
     {offset
       c7PCi: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c7PCm; else goto c7PCn;
       c7PCm: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Buffer.bufferAdjustL_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7PCn: // global
           I64[Sp - 16] = block_c7PCf_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7PCG; else goto c7PCg;
       u7PCG: // global
           call _c7PCf(R1) args: 0, res: 0, upd: 0;
       c7PCg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.bufferAdjustL_info" {
     GHC.IO.Buffer.bufferAdjustL_info:
         const GHC.IO.Buffer.bufferAdjustL_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c7PCf() //  [R1]
         { []
         }
     {offset
       c7PCf: // global
           I64[Sp - 32] = block_c7PCl_info;
           _s7OLV::P64 = P64[R1 + 7];
           _s7OLW::P64 = P64[R1 + 15];
           _s7OLU::I64 = I64[R1 + 23];
           _s7OLX::I64 = I64[R1 + 31];
           _s7OLZ::I64 = I64[R1 + 47];
           R1 = P64[Sp + 8];
           P64[Sp - 24] = _s7OLW::P64;
           I64[Sp - 16] = _s7OLX::I64;
           I64[Sp - 8] = _s7OLZ::I64;
           P64[Sp] = _s7OLV::P64;
           I64[Sp + 8] = _s7OLU::I64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u7PCF; else goto c7PCp;
       u7PCF: // global
           call _c7PCl(R1) args: 0, res: 0, upd: 0;
       c7PCp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7PCf_info" {
     block_c7PCf_info:
         const _c7PCf;
         const 1;
         const 30;
 },
 _c7PCl() //  [R1]
         { []
         }
     {offset
       c7PCl: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c7PCv; else goto c7PCu;
       c7PCv: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7PCu: // global
           _s7OLU::I64 = I64[Sp + 40];
           _s7OLV::P64 = P64[Sp + 32];
           _s7OLW::P64 = P64[Sp + 8];
           _s7OLX::I64 = I64[Sp + 16];
           _s7OLZ::I64 = I64[Sp + 24];
           _s7OM1::I64 = I64[R1 + 7];
           if (_s7OM1::I64 == _s7OLZ::I64) goto c7PCE; else goto c7PCB;
       c7PCE: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _s7OLV::P64;
           P64[Hp - 32] = _s7OLW::P64;
           I64[Hp - 24] = _s7OLU::I64;
           I64[Hp - 16] = _s7OLX::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           R1 = Hp - 47;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7PCB: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _s7OLV::P64;
           P64[Hp - 32] = _s7OLW::P64;
           I64[Hp - 24] = _s7OLU::I64;
           I64[Hp - 16] = _s7OLX::I64;
           I64[Hp - 8] = _s7OM1::I64;
           I64[Hp] = _s7OLZ::I64;
           R1 = Hp - 47;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7PCl_info" {
     block_c7PCl_info:
         const _c7PCl;
         const 1413;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.599349973 UTC

[section ""data" . GHC.IO.Buffer.emptyBuffer_closure" {
     GHC.IO.Buffer.emptyBuffer_closure:
         const GHC.IO.Buffer.emptyBuffer_info;
 },
 GHC.IO.Buffer.emptyBuffer_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c7PD3: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7PDc; else goto c7PDd;
       c7PDc: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Buffer.emptyBuffer_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7PDd: // global
           I64[Sp - 24] = block_c7PD0_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7PDj; else goto c7PD1;
       u7PDj: // global
           call _c7PD0(R1) args: 0, res: 0, upd: 0;
       c7PD1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.emptyBuffer_info" {
     GHC.IO.Buffer.emptyBuffer_info:
         const GHC.IO.Buffer.emptyBuffer_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c7PD0() //  [R1]
         { []
         }
     {offset
       c7PD0: // global
           I64[Sp - 8] = block_c7PD6_info;
           _s7OM8::P64 = P64[R1 + 7];
           _s7OM7::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s7OM8::P64;
           I64[Sp + 8] = _s7OM7::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7PDi; else goto c7PD7;
       u7PDi: // global
           call _c7PD6(R1) args: 0, res: 0, upd: 0;
       c7PD7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7PD0_info" {
     block_c7PD0_info:
         const _c7PD0;
         const 2;
         const 30;
 },
 _c7PD6() //  [R1]
         { []
         }
     {offset
       c7PD6: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c7PDh; else goto c7PDg;
       c7PDh: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7PDg: // global
           _s7OMa::I64 = I64[R1 + 7];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 24];
           I64[Hp - 24] = I64[Sp + 16];
           I64[Hp - 16] = _s7OMa::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           R1 = Hp - 47;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7PD6_info" {
     block_c7PD6_info:
         const _c7PD6;
         const 131;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.606184227 UTC

[section ""cstring" . GHC.IO.Buffer.summaryBuffer5_bytes" {
     GHC.IO.Buffer.summaryBuffer5_bytes:
         I8[] [98,117,102]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.608395179 UTC

[section ""cstring" . GHC.IO.Buffer.summaryBuffer4_bytes" {
     GHC.IO.Buffer.summaryBuffer4_bytes:
         I8[] [40]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.610158822 UTC

[section ""cstring" . GHC.IO.Buffer.summaryBuffer3_bytes" {
     GHC.IO.Buffer.summaryBuffer3_bytes:
         I8[] [45]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.611815566 UTC

[section ""cstring" . GHC.IO.Buffer.summaryBuffer2_bytes" {
     GHC.IO.Buffer.summaryBuffer2_bytes:
         I8[] [41]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.614272741 UTC

[section ""data" . GHC.IO.Buffer.summaryBuffer1_closure" {
     GHC.IO.Buffer.summaryBuffer1_closure:
         const GHC.IO.Buffer.summaryBuffer1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Buffer.summaryBuffer1_entry() //  [R1]
         { []
         }
     {offset
       c7PDL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7PDM; else goto c7PDN;
       c7PDM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7PDN: // global
           (_c7PDI::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7PDI::I64 == 0) goto c7PDK; else goto c7PDJ;
       c7PDK: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7PDJ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7PDI::I64;
           R2 = GHC.IO.Buffer.summaryBuffer2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.summaryBuffer1_info" {
     GHC.IO.Buffer.summaryBuffer1_info:
         const GHC.IO.Buffer.summaryBuffer1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.621848047 UTC

[section ""data" . GHC.IO.Buffer.$wsummaryBuffer_closure" {
     GHC.IO.Buffer.$wsummaryBuffer_closure:
         const GHC.IO.Buffer.$wsummaryBuffer_info;
         const 0;
 },
 sat_s7OMq_entry() //  [R1]
         { []
         }
     {offset
       c7PEq: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7PEr; else goto c7PEs;
       c7PEr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7PEs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c7PEn_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 16];
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7OMq_info" {
     sat_s7OMq_info:
         const sat_s7OMq_entry;
         const 4294967296;
         const 4294967313;
         const S7OYn_srt;
 },
 _c7PEn() //  [R1, R2]
         { []
         }
     {offset
       c7PEn: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7PEv; else goto c7PEu;
       c7PEv: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c7PEu: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R3 = GHC.IO.Buffer.summaryBuffer1_closure;
           R2 = Hp - 14;
           Sp = Sp + 8;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c7PEn_info" {
     block_c7PEn_info:
         const _c7PEn;
         const 0;
         const 4294967326;
         const S7OYn_srt;
 },
 sat_s7OMr_entry() //  [R1]
         { []
         }
     {offset
       c7PEw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7PEA; else goto c7PEz;
       c7PEA: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7PEz: // global
           _s7OMd::I64 = I64[R1 + 16];
           I64[Hp - 16] = sat_s7OMq_info;
           I64[Hp] = _s7OMd::I64;
           R3 = Hp - 16;
           R2 = GHC.IO.Buffer.summaryBuffer3_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7OMr_info" {
     sat_s7OMr_info:
         const sat_s7OMr_entry;
         const 4294967296;
         const 4294967313;
         const S7OYn_srt;
 },
 sat_s7OMs_entry() //  [R1]
         { []
         }
     {offset
       c7PEC: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7PED; else goto c7PEE;
       c7PED: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7PEE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c7PEd_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 16];
           R2 = 0;
           I64[Sp - 24] = I64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7OMs_info" {
     sat_s7OMs_info:
         const sat_s7OMs_entry;
         const 8589934592;
         const 4294967316;
         const S7OYn_srt;
 },
 _c7PEd() //  [R1, R2]
         { []
         }
     {offset
       c7PEd: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7PEH; else goto c7PEG;
       c7PEH: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c7PEG: // global
           I64[Hp - 40] = sat_s7OMr_info;
           I64[Hp - 24] = I64[Sp + 8];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R3 = Hp - 40;
           R2 = Hp - 14;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c7PEd_info" {
     block_c7PEd_info:
         const _c7PEd;
         const 65;
         const 4294967326;
         const S7OYn_srt;
 },
 sat_s7OMt_entry() //  [R1]
         { []
         }
     {offset
       c7PEI: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7PEM; else goto c7PEL;
       c7PEM: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7PEL: // global
           _s7OMc::I64 = I64[R1 + 16];
           _s7OMd::I64 = I64[R1 + 24];
           I64[Hp - 24] = sat_s7OMs_info;
           I64[Hp - 8] = _s7OMc::I64;
           I64[Hp] = _s7OMd::I64;
           R3 = Hp - 24;
           R2 = GHC.IO.Buffer.summaryBuffer4_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7OMt_info" {
     sat_s7OMt_info:
         const sat_s7OMt_entry;
         const 8589934592;
         const 4294967316;
         const S7OYn_srt;
 },
 sat_s7OMu_entry() //  [R1]
         { []
         }
     {offset
       c7PEO: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c7PEP; else goto c7PEQ;
       c7PEP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7PEQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c7PE3_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 16];
           R2 = 0;
           I64[Sp - 32] = I64[R1 + 24];
           I64[Sp - 24] = I64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7OMu_info" {
     sat_s7OMu_info:
         const sat_s7OMu_entry;
         const 12884901888;
         const 4294967311;
         const S7OYn_srt;
 },
 _c7PE3() //  [R1, R2]
         { []
         }
     {offset
       c7PE3: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c7PET; else goto c7PES;
       c7PET: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c7PES: // global
           I64[Hp - 48] = sat_s7OMt_info;
           I64[Hp - 32] = I64[Sp + 8];
           I64[Hp - 24] = I64[Sp + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R3 = Hp - 48;
           R2 = Hp - 14;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c7PE3_info" {
     block_c7PE3_info:
         const _c7PE3;
         const 194;
         const 4294967326;
         const S7OYn_srt;
 },
 GHC.IO.Buffer.$wsummaryBuffer_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c7PEU: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c7PEY; else goto c7PEX;
       c7PEY: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Buffer.$wsummaryBuffer_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7PEX: // global
           I64[Hp - 32] = sat_s7OMu_info;
           I64[Hp - 16] = R2;
           I64[Hp - 8] = R3;
           I64[Hp] = R4;
           R3 = Hp - 32;
           R2 = GHC.IO.Buffer.summaryBuffer5_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.$wsummaryBuffer_info" {
     GHC.IO.Buffer.$wsummaryBuffer_info:
         const GHC.IO.Buffer.$wsummaryBuffer_entry;
         const 0;
         const 12884901902;
         const 12884901904;
         const S7OYn_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.64014678 UTC

[section ""data" . GHC.IO.Buffer.summaryBuffer_closure" {
     GHC.IO.Buffer.summaryBuffer_closure:
         const GHC.IO.Buffer.summaryBuffer_info;
         const 0;
 },
 GHC.IO.Buffer.summaryBuffer_entry() //  [R2]
         { []
         }
     {offset
       c7PFH: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7PFI; else goto c7PFJ;
       c7PFI: // global
           R2 = R2;
           R1 = GHC.IO.Buffer.summaryBuffer_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7PFJ: // global
           I64[Sp - 8] = block_c7PFE_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7PFN; else goto c7PFF;
       u7PFN: // global
           call _c7PFE(R1) args: 0, res: 0, upd: 0;
       c7PFF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.summaryBuffer_info" {
     GHC.IO.Buffer.summaryBuffer_info:
         const GHC.IO.Buffer.summaryBuffer_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S7OYn_srt+8;
 },
 _c7PFE() //  [R1]
         { []
         }
     {offset
       c7PFE: // global
           R4 = I64[R1 + 47];
           R3 = I64[R1 + 39];
           R2 = I64[R1 + 31];
           Sp = Sp + 8;
           call GHC.IO.Buffer.$wsummaryBuffer_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7PFE_info" {
     block_c7PFE_info:
         const _c7PFE;
         const 0;
         const 4294967326;
         const S7OYn_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.644950439 UTC

[section ""cstring" . GHC.IO.Buffer.$trModule4_bytes" {
     GHC.IO.Buffer.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.647572505 UTC

[section ""data" . GHC.IO.Buffer.$trModule3_closure" {
     GHC.IO.Buffer.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Buffer.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.64929262 UTC

[section ""cstring" . GHC.IO.Buffer.$trModule2_bytes" {
     GHC.IO.Buffer.$trModule2_bytes:
         I8[] [71,72,67,46,73,79,46,66,117,102,102,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.65097841 UTC

[section ""data" . GHC.IO.Buffer.$trModule1_closure" {
     GHC.IO.Buffer.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Buffer.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.652637428 UTC

[section ""data" . GHC.IO.Buffer.$trModule_closure" {
     GHC.IO.Buffer.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.IO.Buffer.$trModule3_closure+1;
         const GHC.IO.Buffer.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.654392806 UTC

[section ""data" . $krep_r7OJJ_closure" {
     $krep_r7OJJ_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.656102532 UTC

[section ""data" . $krep1_r7OJK_closure" {
     $krep1_r7OJK_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.658397857 UTC

[section ""data" . $krep2_r7OJL_closure" {
     $krep2_r7OJL_closure:
         const :_con_info;
         const $krep1_r7OJK_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.66017995 UTC

[section ""data" . $krep3_r7OJM_closure" {
     $krep3_r7OJM_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ForeignPtr.$tcForeignPtr_closure;
         const $krep2_r7OJL_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.661846841 UTC

[section ""cstring" . GHC.IO.Buffer.$tcBufferState2_bytes" {
     GHC.IO.Buffer.$tcBufferState2_bytes:
         I8[] [66,117,102,102,101,114,83,116,97,116,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.663550704 UTC

[section ""data" . GHC.IO.Buffer.$tcBufferState1_closure" {
     GHC.IO.Buffer.$tcBufferState1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Buffer.$tcBufferState2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.665264817 UTC

[section ""data" . GHC.IO.Buffer.$tcBufferState_closure" {
     GHC.IO.Buffer.$tcBufferState_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Buffer.$trModule_closure+1;
         const GHC.IO.Buffer.$tcBufferState1_closure+1;
         const GHC.Types.krep$*_closure;
         const 15354245406219544442;
         const 3075510984364124805;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.667009617 UTC

[section ""data" . GHC.IO.Buffer.$tc'ReadBuffer1_closure" {
     GHC.IO.Buffer.$tc'ReadBuffer1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Buffer.$tcBufferState_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.668730905 UTC

[section ""cstring" . GHC.IO.Buffer.$tc'ReadBuffer3_bytes" {
     GHC.IO.Buffer.$tc'ReadBuffer3_bytes:
         I8[] [39,82,101,97,100,66,117,102,102,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.67041626 UTC

[section ""data" . GHC.IO.Buffer.$tc'ReadBuffer2_closure" {
     GHC.IO.Buffer.$tc'ReadBuffer2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Buffer.$tc'ReadBuffer3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.672731747 UTC

[section ""data" . GHC.IO.Buffer.$tc'ReadBuffer_closure" {
     GHC.IO.Buffer.$tc'ReadBuffer_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Buffer.$trModule_closure+1;
         const GHC.IO.Buffer.$tc'ReadBuffer2_closure+1;
         const GHC.IO.Buffer.$tc'ReadBuffer1_closure+1;
         const 18127629064171759490;
         const 12249378994783130540;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.674900879 UTC

[section ""cstring" . GHC.IO.Buffer.$tc'WriteBuffer2_bytes" {
     GHC.IO.Buffer.$tc'WriteBuffer2_bytes:
         I8[] [39,87,114,105,116,101,66,117,102,102,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.676552053 UTC

[section ""data" . GHC.IO.Buffer.$tc'WriteBuffer1_closure" {
     GHC.IO.Buffer.$tc'WriteBuffer1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Buffer.$tc'WriteBuffer2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.678328392 UTC

[section ""data" . GHC.IO.Buffer.$tc'WriteBuffer_closure" {
     GHC.IO.Buffer.$tc'WriteBuffer_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Buffer.$trModule_closure+1;
         const GHC.IO.Buffer.$tc'WriteBuffer1_closure+1;
         const GHC.IO.Buffer.$tc'ReadBuffer1_closure+1;
         const 17535537923682101798;
         const 5353421715631386637;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.680060038 UTC

[section ""cstring" . GHC.IO.Buffer.$tcBuffer2_bytes" {
     GHC.IO.Buffer.$tcBuffer2_bytes:
         I8[] [66,117,102,102,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.681660853 UTC

[section ""data" . GHC.IO.Buffer.$tcBuffer1_closure" {
     GHC.IO.Buffer.$tcBuffer1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Buffer.$tcBuffer2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.683431301 UTC

[section ""data" . GHC.IO.Buffer.$tcBuffer_closure" {
     GHC.IO.Buffer.$tcBuffer_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Buffer.$trModule_closure+1;
         const GHC.IO.Buffer.$tcBuffer1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 18372445388029251215;
         const 8106905342043791875;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.685212516 UTC

[section ""data" . $krep4_r7OJN_closure" {
     $krep4_r7OJN_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Buffer.$tcBuffer_closure+1;
         const $krep2_r7OJL_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.686939209 UTC

[section ""data" . $krep5_r7OJO_closure" {
     $krep5_r7OJO_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r7OJJ_closure+1;
         const $krep4_r7OJN_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.688714334 UTC

[section ""data" . $krep6_r7OJP_closure" {
     $krep6_r7OJP_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r7OJJ_closure+1;
         const $krep5_r7OJO_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.690397136 UTC

[section ""data" . $krep7_r7OJQ_closure" {
     $krep7_r7OJQ_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r7OJJ_closure+1;
         const $krep6_r7OJP_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.692071989 UTC

[section ""data" . $krep8_r7OJR_closure" {
     $krep8_r7OJR_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.IO.Buffer.$tc'ReadBuffer1_closure+1;
         const $krep7_r7OJQ_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.694305714 UTC

[section ""data" . GHC.IO.Buffer.$tc'Buffer1_closure" {
     GHC.IO.Buffer.$tc'Buffer1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r7OJM_closure+1;
         const $krep8_r7OJR_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.696012437 UTC

[section ""cstring" . GHC.IO.Buffer.$tc'Buffer3_bytes" {
     GHC.IO.Buffer.$tc'Buffer3_bytes:
         I8[] [39,66,117,102,102,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.698253161 UTC

[section ""data" . GHC.IO.Buffer.$tc'Buffer2_closure" {
     GHC.IO.Buffer.$tc'Buffer2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Buffer.$tc'Buffer3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.699947534 UTC

[section ""data" . GHC.IO.Buffer.$tc'Buffer_closure" {
     GHC.IO.Buffer.$tc'Buffer_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Buffer.$trModule_closure+1;
         const GHC.IO.Buffer.$tc'Buffer2_closure+1;
         const GHC.IO.Buffer.$tc'Buffer1_closure+4;
         const 6953290879310668230;
         const 8839152842293094522;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.70366982 UTC

[section ""data" . GHC.IO.Buffer.writeWord8Buf1_closure" {
     GHC.IO.Buffer.writeWord8Buf1_closure:
         const GHC.IO.Buffer.writeWord8Buf1_info;
 },
 GHC.IO.Buffer.writeWord8Buf1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c7PGz: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7PGI; else goto c7PGJ;
       c7PGI: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Buffer.writeWord8Buf1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7PGJ: // global
           I64[Sp - 24] = block_c7PGw_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7PGW; else goto c7PGx;
       u7PGW: // global
           call _c7PGw(R1) args: 0, res: 0, upd: 0;
       c7PGx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.writeWord8Buf1_info" {
     GHC.IO.Buffer.writeWord8Buf1_info:
         const GHC.IO.Buffer.writeWord8Buf1_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c7PGw() //  [R1]
         { []
         }
     {offset
       c7PGw: // global
           I64[Sp - 8] = block_c7PGC_info;
           _s7OMJ::P64 = P64[R1 + 7];
           _s7OMI::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s7OMJ::P64;
           I64[Sp + 8] = _s7OMI::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7PGV; else goto c7PGD;
       u7PGV: // global
           call _c7PGC(R1) args: 0, res: 0, upd: 0;
       c7PGD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7PGw_info" {
     block_c7PGw_info:
         const _c7PGw;
         const 2;
         const 30;
 },
 _c7PGC() //  [R1]
         { []
         }
     {offset
       c7PGC: // global
           I64[Sp] = block_c7PGH_info;
           _s7OML::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s7OML::I64;
           if (R1 & 7 != 0) goto u7PGX; else goto c7PGM;
       u7PGX: // global
           call _c7PGH(R1) args: 0, res: 0, upd: 0;
       c7PGM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7PGC_info" {
     block_c7PGC_info:
         const _c7PGC;
         const 131;
         const 30;
 },
 _c7PGH() //  [R1]
         { []
         }
     {offset
       c7PGH: // global
           _s7OMJ::P64 = P64[Sp + 8];
           I8[I64[Sp + 16] + I64[Sp + 24]] = %MO_UU_Conv_W64_W8(I64[R1 + 7]);
           call MO_Touch(_s7OMJ::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7PGH_info" {
     block_c7PGH_info:
         const _c7PGH;
         const 387;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.712099749 UTC

[section ""data" . GHC.IO.Buffer.writeWord8Buf_closure" {
     GHC.IO.Buffer.writeWord8Buf_closure:
         const GHC.IO.Buffer.writeWord8Buf_info;
 },
 GHC.IO.Buffer.writeWord8Buf_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c7PHn: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.IO.Buffer.writeWord8Buf1_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.writeWord8Buf_info" {
     GHC.IO.Buffer.writeWord8Buf_info:
         const GHC.IO.Buffer.writeWord8Buf_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.716433699 UTC

[section ""data" . GHC.IO.Buffer.readWord8Buf1_closure" {
     GHC.IO.Buffer.readWord8Buf1_closure:
         const GHC.IO.Buffer.readWord8Buf1_info;
 },
 GHC.IO.Buffer.readWord8Buf1_entry() //  [R2, R3]
         { []
         }
     {offset
       c7PHB: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7PHO; else goto c7PHP;
       c7PHO: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Buffer.readWord8Buf1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7PHP: // global
           I64[Sp - 16] = block_c7PHy_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7PHV; else goto c7PHz;
       u7PHV: // global
           call _c7PHy(R1) args: 0, res: 0, upd: 0;
       c7PHz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.readWord8Buf1_info" {
     GHC.IO.Buffer.readWord8Buf1_info:
         const GHC.IO.Buffer.readWord8Buf1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c7PHy() //  [R1]
         { []
         }
     {offset
       c7PHy: // global
           I64[Sp - 8] = block_c7PHE_info;
           _s7OMW::P64 = P64[R1 + 7];
           _s7OMV::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s7OMW::P64;
           I64[Sp + 8] = _s7OMV::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7PHU; else goto c7PHF;
       u7PHU: // global
           call _c7PHE(R1) args: 0, res: 0, upd: 0;
       c7PHF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7PHy_info" {
     block_c7PHy_info:
         const _c7PHy;
         const 1;
         const 30;
 },
 _c7PHE() //  [R1]
         { []
         }
     {offset
       c7PHE: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7PHT; else goto c7PHS;
       c7PHT: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7PHS: // global
           _s7ON2::I64 = %MO_UU_Conv_W8_W64(I8[I64[Sp + 16] + I64[R1 + 7]]);
           call MO_Touch(P64[Sp + 8]);
           I64[Hp - 8] = GHC.Word.W8#_con_info;
           I64[Hp] = _s7ON2::I64;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7PHE_info" {
     block_c7PHE_info:
         const _c7PHE;
         const 130;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.724014648 UTC

[section ""data" . GHC.IO.Buffer.readWord8Buf_closure" {
     GHC.IO.Buffer.readWord8Buf_closure:
         const GHC.IO.Buffer.readWord8Buf_info;
 },
 GHC.IO.Buffer.readWord8Buf_entry() //  [R2, R3]
         { []
         }
     {offset
       c7PIg: // global
           R3 = R3;
           R2 = R2;
           call GHC.IO.Buffer.readWord8Buf1_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.readWord8Buf_info" {
     GHC.IO.Buffer.readWord8Buf_info:
         const GHC.IO.Buffer.readWord8Buf_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.728577184 UTC

[section ""data" . GHC.IO.Buffer.bufferAdd_closure" {
     GHC.IO.Buffer.bufferAdd_closure:
         const GHC.IO.Buffer.bufferAdd_info;
 },
 GHC.IO.Buffer.bufferAdd_entry() //  [R2, R3]
         { []
         }
     {offset
       c7PIu: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c7PIG; else goto c7PIH;
       c7PIG: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Buffer.bufferAdd_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7PIH: // global
           I64[Sp - 16] = block_c7PIr_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7PIN; else goto c7PIs;
       u7PIN: // global
           call _c7PIr(R1) args: 0, res: 0, upd: 0;
       c7PIs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.bufferAdd_info" {
     GHC.IO.Buffer.bufferAdd_info:
         const GHC.IO.Buffer.bufferAdd_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c7PIr() //  [R1]
         { []
         }
     {offset
       c7PIr: // global
           I64[Sp - 40] = block_c7PIx_info;
           _s7ON9::P64 = P64[R1 + 7];
           _s7ONa::P64 = P64[R1 + 15];
           _s7ON8::I64 = I64[R1 + 23];
           _s7ONb::I64 = I64[R1 + 31];
           _s7ONc::I64 = I64[R1 + 39];
           _s7ONd::I64 = I64[R1 + 47];
           R1 = P64[Sp + 8];
           P64[Sp - 32] = _s7ONa::P64;
           I64[Sp - 24] = _s7ONb::I64;
           I64[Sp - 16] = _s7ONc::I64;
           I64[Sp - 8] = _s7ONd::I64;
           P64[Sp] = _s7ON9::P64;
           I64[Sp + 8] = _s7ON8::I64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u7PIM; else goto c7PIy;
       u7PIM: // global
           call _c7PIx(R1) args: 0, res: 0, upd: 0;
       c7PIy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7PIr_info" {
     block_c7PIr_info:
         const _c7PIr;
         const 1;
         const 30;
 },
 _c7PIx() //  [R1]
         { []
         }
     {offset
       c7PIx: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c7PIL; else goto c7PIK;
       c7PIL: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7PIK: // global
           _s7ONg::I64 = I64[Sp + 32] + I64[R1 + 7];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = P64[Sp + 40];
           P64[Hp - 32] = P64[Sp + 8];
           I64[Hp - 24] = I64[Sp + 48];
           I64[Hp - 16] = I64[Sp + 16];
           I64[Hp - 8] = I64[Sp + 24];
           I64[Hp] = _s7ONg::I64;
           R1 = Hp - 47;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7PIx_info" {
     block_c7PIx_info:
         const _c7PIx;
         const 2950;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.738490702 UTC

[section ""data" . GHC.IO.Buffer.bufferRemove_closure" {
     GHC.IO.Buffer.bufferRemove_closure:
         const GHC.IO.Buffer.bufferRemove_info;
 },
 GHC.IO.Buffer.bufferRemove_entry() //  [R2, R3]
         { []
         }
     {offset
       c7PJg: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c7PJk; else goto c7PJl;
       c7PJk: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Buffer.bufferRemove_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7PJl: // global
           I64[Sp - 16] = block_c7PJd_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7PJH; else goto c7PJe;
       u7PJH: // global
           call _c7PJd(R1) args: 0, res: 0, upd: 0;
       c7PJe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.bufferRemove_info" {
     GHC.IO.Buffer.bufferRemove_info:
         const GHC.IO.Buffer.bufferRemove_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c7PJd() //  [R1]
         { []
         }
     {offset
       c7PJd: // global
           I64[Sp - 40] = block_c7PJj_info;
           _s7ONl::P64 = P64[R1 + 7];
           _s7ONm::P64 = P64[R1 + 15];
           _s7ONk::I64 = I64[R1 + 23];
           _s7ONn::I64 = I64[R1 + 31];
           _s7ONo::I64 = I64[R1 + 39];
           _s7ONp::I64 = I64[R1 + 47];
           R1 = P64[Sp + 8];
           P64[Sp - 32] = _s7ONm::P64;
           I64[Sp - 24] = _s7ONn::I64;
           I64[Sp - 16] = _s7ONo::I64;
           I64[Sp - 8] = _s7ONp::I64;
           P64[Sp] = _s7ONl::P64;
           I64[Sp + 8] = _s7ONk::I64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u7PJG; else goto c7PJn;
       u7PJG: // global
           call _c7PJj(R1) args: 0, res: 0, upd: 0;
       c7PJn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7PJd_info" {
     block_c7PJd_info:
         const _c7PJd;
         const 1;
         const 30;
 },
 _c7PJj() //  [R1]
         { []
         }
     {offset
       c7PJj: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c7PJt; else goto c7PJs;
       c7PJt: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7PJs: // global
           _s7ONk::I64 = I64[Sp + 48];
           _s7ONl::P64 = P64[Sp + 40];
           _s7ONm::P64 = P64[Sp + 8];
           _s7ONn::I64 = I64[Sp + 16];
           _s7ONp::I64 = I64[Sp + 32];
           _s7ONs::I64 = I64[Sp + 24] + I64[R1 + 7];
           if (_s7ONs::I64 == _s7ONp::I64) goto c7PJF; else goto c7PJC;
       c7PJF: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _s7ONl::P64;
           P64[Hp - 32] = _s7ONm::P64;
           I64[Hp - 24] = _s7ONk::I64;
           I64[Hp - 16] = _s7ONn::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           R1 = Hp - 47;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7PJC: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _s7ONl::P64;
           P64[Hp - 32] = _s7ONm::P64;
           I64[Hp - 24] = _s7ONk::I64;
           I64[Hp - 16] = _s7ONn::I64;
           I64[Hp - 8] = _s7ONs::I64;
           I64[Hp] = _s7ONp::I64;
           R1 = Hp - 47;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7PJj_info" {
     block_c7PJj_info:
         const _c7PJj;
         const 2950;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.747115499 UTC

[section ""data" . GHC.IO.Buffer.bufferAvailable_closure" {
     GHC.IO.Buffer.bufferAvailable_closure:
         const GHC.IO.Buffer.bufferAvailable_info;
 },
 GHC.IO.Buffer.bufferAvailable_entry() //  [R2]
         { []
         }
     {offset
       c7PK6: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7PKd; else goto c7PKe;
       c7PKd: // global
           R2 = R2;
           R1 = GHC.IO.Buffer.bufferAvailable_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7PKe: // global
           I64[Sp - 8] = block_c7PK3_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7PKi; else goto c7PK4;
       u7PKi: // global
           call _c7PK3(R1) args: 0, res: 0, upd: 0;
       c7PK4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.bufferAvailable_info" {
     GHC.IO.Buffer.bufferAvailable_info:
         const GHC.IO.Buffer.bufferAvailable_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c7PK3() //  [R1]
         { []
         }
     {offset
       c7PK3: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7PKh; else goto c7PKg;
       c7PKh: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7PKg: // global
           _s7ONC::I64 = I64[R1 + 31] - I64[R1 + 47];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s7ONC::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7PK3_info" {
     block_c7PK3_info:
         const _c7PK3;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.752885066 UTC

[section ""data" . GHC.IO.Buffer.bufferElems_closure" {
     GHC.IO.Buffer.bufferElems_closure:
         const GHC.IO.Buffer.bufferElems_info;
 },
 GHC.IO.Buffer.bufferElems_entry() //  [R2]
         { []
         }
     {offset
       c7PKC: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7PKJ; else goto c7PKK;
       c7PKJ: // global
           R2 = R2;
           R1 = GHC.IO.Buffer.bufferElems_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7PKK: // global
           I64[Sp - 8] = block_c7PKz_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7PKO; else goto c7PKA;
       u7PKO: // global
           call _c7PKz(R1) args: 0, res: 0, upd: 0;
       c7PKA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.bufferElems_info" {
     GHC.IO.Buffer.bufferElems_info:
         const GHC.IO.Buffer.bufferElems_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c7PKz() //  [R1]
         { []
         }
     {offset
       c7PKz: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7PKN; else goto c7PKM;
       c7PKN: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7PKM: // global
           _s7ONL::I64 = I64[R1 + 47] - I64[R1 + 39];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s7ONL::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7PKz_info" {
     block_c7PKz_info:
         const _c7PKz;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.757848035 UTC

[section ""cstring" . lvl_r7OJS_bytes" {
     lvl_r7OJS_bytes:
         I8[] [98,117,102,102,101,114,32,105,110,118,97,114,105,97,110,116,32,118,105,111,108,97,116,105,111,110,58,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.76077003 UTC

[section ""data" . GHC.IO.Buffer.$wlvl_closure" {
     GHC.IO.Buffer.$wlvl_closure:
         const GHC.IO.Buffer.$wlvl_info;
         const 0;
 },
 sat_s7ONP_entry() //  [R1]
         { []
         }
     {offset
       c7PLa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7PLb; else goto c7PLc;
       c7PLb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7PLc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = I64[R1 + 32];
           R3 = I64[R1 + 24];
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Buffer.$wsummaryBuffer_entry(R4,
                                                    R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7ONP_info" {
     sat_s7ONP_info:
         const sat_s7ONP_entry;
         const 12884901888;
         const 4294967311;
         const S7OYn_srt+8;
 },
 GHC.IO.Buffer.$wlvl_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c7PLf: // global
           _s7ONO::I64 = R4;
           _s7ONN::I64 = R3;
           _s7ONM::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c7PLg; else goto c7PLh;
       c7PLh: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c7PLj; else goto c7PLi;
       c7PLj: // global
           HpAlloc = 40;
           goto c7PLg;
       c7PLg: // global
           R4 = _s7ONO::I64;
           R3 = _s7ONN::I64;
           R2 = _s7ONM::I64;
           R1 = GHC.IO.Buffer.$wlvl_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7PLi: // global
           I64[Hp - 32] = sat_s7ONP_info;
           I64[Hp - 16] = _s7ONM::I64;
           I64[Hp - 8] = _s7ONN::I64;
           I64[Hp] = _s7ONO::I64;
           I64[Sp - 8] = block_c7PLd_info;
           R3 = Hp - 32;
           R2 = lvl_r7OJS_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.$wlvl_info" {
     GHC.IO.Buffer.$wlvl_info:
         const GHC.IO.Buffer.$wlvl_entry;
         const 0;
         const 55834574862;
         const 12884901904;
         const S7OYn_srt+8;
 },
 _c7PLd() //  [R1]
         { []
         }
     {offset
       c7PLd: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7PLd_info" {
     block_c7PLd_info:
         const _c7PLd;
         const 0;
         const 4294967326;
         const S7OYn_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.767849976 UTC

[section ""data" . GHC.IO.Buffer.checkBuffer2_closure" {
     GHC.IO.Buffer.checkBuffer2_closure:
         const GHC.IO.Buffer.checkBuffer2_info;
         const 0;
 },
 GHC.IO.Buffer.checkBuffer2_entry() //  [R2, R3]
         { []
         }
     {offset
       c7PLD: // global
           R4 = R3;
           R3 = 0;
           R2 = R2;
           call GHC.IO.Buffer.$wlvl_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.checkBuffer2_info" {
     GHC.IO.Buffer.checkBuffer2_info:
         const GHC.IO.Buffer.checkBuffer2_entry;
         const 0;
         const 4294967310;
         const 8589934604;
         const S7OYn_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.774816529 UTC

[section ""data" . GHC.IO.Buffer.$wcheckBuffer_closure" {
     GHC.IO.Buffer.$wcheckBuffer_closure:
         const GHC.IO.Buffer.$wcheckBuffer_info;
         const 0;
 },
 GHC.IO.Buffer.$wcheckBuffer_slow() //  [R1]
         { []
         }
     {offset
       c7PLL: // global
           R5 = I64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.IO.Buffer.$wcheckBuffer_entry(R5,
                                                  R4,
                                                  R3,
                                                  R2,
                                                  R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.IO.Buffer.$wcheckBuffer_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c7PLU: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7PLV; else goto c7PLW;
       c7PLV: // global
           R1 = GHC.IO.Buffer.$wcheckBuffer_closure;
           P64[Sp - 32] = R2;
           I64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           I64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c7PLW: // global
           if (%MO_S_Le_W64(R3, 0)) goto u7PN4; else goto c7PLT;
       u7PN4: // global
           I64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           I64[Sp - 8] = R5;
           Sp = Sp - 24;
           goto u7PNh;
       c7PLT: // global
           if (%MO_S_Gt_W64(R4, R5)) goto u7PN5; else goto c7PN1;
       u7PN5: // global
           I64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           I64[Sp - 8] = R5;
           Sp = Sp - 24;
           goto u7PNh;
       c7PN1: // global
           if (%MO_S_Gt_W64(R5, R3)) goto u7PN6; else goto c7PN0;
       u7PN6: // global
           I64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           I64[Sp - 8] = R5;
           Sp = Sp - 24;
           goto u7PNh;
       u7PNh: // global
           call _c7PMX() args: 0, res: 0, upd: 0;
       c7PN0: // global
           if (R4 == R5) goto c7PMg; else goto c7PMJ;
       c7PMg: // global
           I64[Sp - 32] = block_c7PMe_info;
           R1 = R2;
           I64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           I64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u7PNd; else goto c7PMh;
       u7PNd: // global
           call _c7PMe(R1) args: 0, res: 0, upd: 0;
       c7PMh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7PMJ: // global
           I64[Sp - 32] = block_c7PMI_info;
           R1 = R2;
           I64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           I64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u7PNe; else goto c7PMK;
       u7PNe: // global
           call _c7PMI(R1) args: 0, res: 0, upd: 0;
       c7PMK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.$wcheckBuffer_info" {
     GHC.IO.Buffer.$wcheckBuffer_info:
         const GHC.IO.Buffer.$wcheckBuffer_entry;
         const 0;
         const 30064771086;
         const 21474836480;
         const S7OYn_srt+32;
         const 900;
         const GHC.IO.Buffer.$wcheckBuffer_slow;
 },
 _c7PMe() //  [R1]
         { []
         }
     {offset
       c7PMe: // global
           _s7ONU::I64 = I64[Sp + 8];
           _s7ONW::I64 = I64[Sp + 24];
           if (R1 & 7 == 1) goto c7PMx; else goto c7PMG;
       c7PMx: // global
           _s7OO6::I64 = I64[Sp + 16];
           if (_s7OO6::I64 != 0) goto c7PMo; else goto c7PMv;
       c7PMo: // global
           R4 = _s7ONW::I64;
           R3 = _s7OO6::I64;
           R2 = _s7ONU::I64;
           Sp = Sp + 32;
           call GHC.IO.Buffer.$wlvl_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
       c7PMv: // global
           if (_s7ONW::I64 == 0) goto u7PN9; else goto c7PMt;
       u7PN9: // global
           Sp = Sp + 32;
           goto u7PNk;
       c7PMt: // global
           R3 = _s7ONW::I64;
           R2 = _s7ONU::I64;
           Sp = Sp + 32;
           call GHC.IO.Buffer.checkBuffer2_entry(R3,
                                                 R2) args: 8, res: 0, upd: 8;
       c7PMG: // global
           if (%MO_S_Ge_W64(_s7ONW::I64,
                            _s7ONU::I64)) goto u7PN8; else goto u7PN7;
       u7PN8: // global
           Sp = Sp + 8;
           call _c7PMX() args: 0, res: 0, upd: 0;
       u7PN7: // global
           Sp = Sp + 32;
           goto u7PNk;
       u7PNk: // global
           call _c7PMY() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c7PMe_info" {
     block_c7PMe_info:
         const _c7PMe;
         const 451;
         const 21474836510;
         const S7OYn_srt+32;
 },
 _c7PMI() //  [R1]
         { []
         }
     {offset
       c7PMI: // global
           if (R1 & 7 == 1) goto u7PNa; else goto c7PMZ;
       u7PNa: // global
           Sp = Sp + 32;
           goto u7PNm;
       c7PMZ: // global
           if (%MO_S_Ge_W64(I64[Sp + 24],
                            I64[Sp + 8])) goto u7PNc; else goto u7PNb;
       u7PNc: // global
           Sp = Sp + 8;
           call _c7PMX() args: 0, res: 0, upd: 0;
       u7PNb: // global
           Sp = Sp + 32;
           goto u7PNm;
       u7PNm: // global
           call _c7PMY() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c7PMI_info" {
     block_c7PMI_info:
         const _c7PMI;
         const 451;
         const 4294967326;
         const S7OYn_srt+32;
 },
 _c7PMX() //  []
         { []
         }
     {offset
       c7PMX: // global
           R4 = I64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = I64[Sp];
           Sp = Sp + 24;
           call GHC.IO.Buffer.$wlvl_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 _c7PMY() //  []
         { []
         }
     {offset
       c7PMY: // global
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.787147091 UTC

[section ""data" . GHC.IO.Buffer.checkBuffer1_closure" {
     GHC.IO.Buffer.checkBuffer1_closure:
         const GHC.IO.Buffer.checkBuffer1_info;
         const 0;
 },
 GHC.IO.Buffer.checkBuffer1_entry() //  [R2]
         { []
         }
     {offset
       c7PNU: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7PNV; else goto c7PNW;
       c7PNV: // global
           R2 = R2;
           R1 = GHC.IO.Buffer.checkBuffer1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7PNW: // global
           I64[Sp - 8] = block_c7PNR_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7PO0; else goto c7PNS;
       u7PO0: // global
           call _c7PNR(R1) args: 0, res: 0, upd: 0;
       c7PNS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.checkBuffer1_info" {
     GHC.IO.Buffer.checkBuffer1_info:
         const GHC.IO.Buffer.checkBuffer1_entry;
         const 0;
         const 21474836494;
         const 8589934597;
         const S7OYn_srt+40;
 },
 _c7PNR() //  [R1]
         { []
         }
     {offset
       c7PNR: // global
           R5 = I64[R1 + 47];
           R4 = I64[R1 + 39];
           R3 = I64[R1 + 31];
           R2 = P64[R1 + 15];
           Sp = Sp + 8;
           call GHC.IO.Buffer.$wcheckBuffer_entry(R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7PNR_info" {
     block_c7PNR_info:
         const _c7PNR;
         const 0;
         const 4294967326;
         const S7OYn_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.794550115 UTC

[section ""data" . GHC.IO.Buffer.checkBuffer_closure" {
     GHC.IO.Buffer.checkBuffer_closure:
         const GHC.IO.Buffer.checkBuffer_info;
         const 0;
 },
 GHC.IO.Buffer.checkBuffer_entry() //  [R2]
         { []
         }
     {offset
       c7POe: // global
           R2 = R2;
           call GHC.IO.Buffer.checkBuffer1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.checkBuffer_info" {
     GHC.IO.Buffer.checkBuffer_info:
         const GHC.IO.Buffer.checkBuffer_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const S7OYn_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.800230933 UTC

[section ""data" . GHC.IO.Buffer.newBuffer1_closure" {
     GHC.IO.Buffer.newBuffer1_closure:
         const GHC.IO.Buffer.newBuffer1_info;
         const 0;
 },
 sat_s7OOF_entry() //  [R1]
         { []
         }
     {offset
       c7POI: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c7POQ; else goto c7POR;
       c7POQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7POR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_c7POF_info;
           _s7OOq::P64 = P64[R1 + 24];
           _s7OOx::P64 = P64[R1 + 32];
           _s7OOA::P64 = P64[R1 + 40];
           R1 = P64[R1 + 16];
           P64[Sp - 40] = _s7OOq::P64;
           P64[Sp - 32] = _s7OOx::P64;
           P64[Sp - 24] = _s7OOA::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u7POV; else goto c7POG;
       u7POV: // global
           call _c7POF(R1) args: 0, res: 0, upd: 0;
       c7POG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7OOF_info" {
     sat_s7OOF_info:
         const sat_s7OOF_entry;
         const 4;
         const 15;
 },
 _c7POF() //  [R1]
         { []
         }
     {offset
       c7POF: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c7POU; else goto c7POT;
       c7POU: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c7POT: // global
           _s7OOC::I64 = I64[R1 + 7];
           I64[Hp - 72] = GHC.ForeignPtr.MallocPtr_con_info;
           _s7OOA::P64 = P64[Sp + 24];
           P64[Hp - 64] = _s7OOA::P64;
           P64[Hp - 56] = P64[Sp + 16];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = Hp - 70;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _s7OOA::P64 + 16;
           I64[Hp - 16] = _s7OOC::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           R1 = Hp - 47;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c7POF_info" {
     block_c7POF_info:
         const _c7POF;
         const 3;
         const 30;
 },
 GHC.IO.Buffer.newBuffer1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c7POW: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7POX; else goto c7POY;
       c7POX: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Buffer.newBuffer1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7POY: // global
           I64[Sp - 24] = block_c7POp_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7PP7; else goto c7POq;
       u7PP7: // global
           call _c7POp(R1) args: 0, res: 0, upd: 0;
       c7POq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.newBuffer1_info" {
     GHC.IO.Buffer.newBuffer1_info:
         const GHC.IO.Buffer.newBuffer1_entry;
         const 0;
         const 12884901902;
         const 17179869207;
         const S7OYn_srt+64;
 },
 _c7POp() //  [R1]
         { []
         }
     {offset
       c7POp: // global
           _s7OOt::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s7OOt::I64, 0)) goto c7PP1; else goto c7PP6;
       c7PP1: // global
           I64[Sp - 8] = block_c7POx_info;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           I64[Sp] = _s7OOt::I64;
           Sp = Sp - 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
       c7PP6: // global
           R1 = GHC.ForeignPtr.mallocForeignPtrBytes2_closure;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7POp_info" {
     block_c7POp_info:
         const _c7POp;
         const 2;
         const 4294967326;
         const S7OYn_srt+64;
 },
 _c7POx() //  [R1]
         { []
         }
     {offset
       c7POx: // global
           I64[Sp] = block_c7POz_info;
           _s7OOx::P64 = R1;
           R1 = I64[Sp + 8];
           P64[Sp + 8] = _s7OOx::P64;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7POx_info" {
     block_c7POx_info:
         const _c7POx;
         const 67;
         const 30;
 },
 _c7POz() //  [R1]
         { []
         }
     {offset
       c7POz: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7PP5; else goto c7PP4;
       c7PP5: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7PP4: // global
           I64[Hp - 40] = sat_s7OOF_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 40;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7POz_info" {
     block_c7POz_info:
         const _c7POz;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.81276937 UTC

[section ""data" . GHC.IO.Buffer.newBuffer_closure" {
     GHC.IO.Buffer.newBuffer_closure:
         const GHC.IO.Buffer.newBuffer_info;
         const 0;
 },
 GHC.IO.Buffer.newBuffer_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c7PPI: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.IO.Buffer.newBuffer1_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.newBuffer_info" {
     GHC.IO.Buffer.newBuffer_info:
         const GHC.IO.Buffer.newBuffer_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const S7OYn_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.816813219 UTC

[section ""data" . GHC.IO.Buffer.newByteBuffer1_closure" {
     GHC.IO.Buffer.newByteBuffer1_closure:
         const GHC.IO.Buffer.newByteBuffer1_info;
         const 0;
 },
 GHC.IO.Buffer.newByteBuffer1_entry() //  [R2, R3]
         { []
         }
     {offset
       c7PPT: // global
           R4 = R3;
           R3 = R2;
           R2 = R2;
           call GHC.IO.Buffer.newBuffer1_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.newByteBuffer1_info" {
     GHC.IO.Buffer.newByteBuffer1_info:
         const GHC.IO.Buffer.newByteBuffer1_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const S7OYn_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.820389577 UTC

[section ""data" . GHC.IO.Buffer.newByteBuffer_closure" {
     GHC.IO.Buffer.newByteBuffer_closure:
         const GHC.IO.Buffer.newByteBuffer_info;
         const 0;
 },
 GHC.IO.Buffer.newByteBuffer_entry() //  [R2, R3]
         { []
         }
     {offset
       c7PQ4: // global
           R3 = R3;
           R2 = R2;
           call GHC.IO.Buffer.newByteBuffer1_entry(R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.newByteBuffer_info" {
     GHC.IO.Buffer.newByteBuffer_info:
         const GHC.IO.Buffer.newByteBuffer_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const S7OYn_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.825190759 UTC

[section ""data" . GHC.IO.Buffer.newCharBuffer1_closure" {
     GHC.IO.Buffer.newCharBuffer1_closure:
         const GHC.IO.Buffer.newCharBuffer1_info;
         const 0;
 },
 GHC.IO.Buffer.newCharBuffer1_entry() //  [R2, R3]
         { []
         }
     {offset
       c7PQi: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7PQj; else goto c7PQk;
       c7PQj: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Buffer.newCharBuffer1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7PQk: // global
           I64[Sp - 16] = block_c7PQf_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7PQK; else goto c7PQg;
       u7PQK: // global
           call _c7PQf(R1) args: 0, res: 0, upd: 0;
       c7PQg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.newCharBuffer1_info" {
     GHC.IO.Buffer.newCharBuffer1_info:
         const GHC.IO.Buffer.newCharBuffer1_entry;
         const 0;
         const 38654705678;
         const 12884901903;
         const S7OYn_srt+64;
 },
 _c7PQf() //  [R1]
         { []
         }
     {offset
       c7PQf: // global
           _s7OON::I64 = I64[R1 + 7];
           _s7OOO::I64 = _s7OON::I64 << 2;
           if (%MO_S_Ge_W64(_s7OOO::I64, 0)) goto c7PQE; else goto c7PQJ;
       c7PQE: // global
           I64[Sp - 16] = block_c7PQu_info;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           I64[Sp - 8] = _s7OOO::I64;
           I64[Sp] = _s7OON::I64;
           Sp = Sp - 16;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
       c7PQJ: // global
           R1 = GHC.ForeignPtr.mallocForeignPtrBytes2_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7PQf_info" {
     block_c7PQf_info:
         const _c7PQf;
         const 1;
         const 4294967326;
         const S7OYn_srt+64;
 },
 _c7PQu() //  [R1]
         { []
         }
     {offset
       c7PQu: // global
           I64[Sp] = block_c7PQw_info;
           _s7OOS::P64 = R1;
           R1 = I64[Sp + 8];
           P64[Sp + 8] = _s7OOS::P64;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7PQu_info" {
     block_c7PQu_info:
         const _c7PQu;
         const 195;
         const 30;
 },
 _c7PQw() //  [R1]
         { []
         }
     {offset
       c7PQw: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c7PQI; else goto c7PQH;
       c7PQI: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7PQH: // global
           I64[Hp - 72] = GHC.ForeignPtr.MallocPtr_con_info;
           P64[Hp - 64] = R1;
           P64[Hp - 56] = P64[Sp + 8];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = Hp - 70;
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = R1 + 16;
           I64[Hp - 16] = I64[Sp + 16];
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           R1 = Hp - 47;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7PQw_info" {
     block_c7PQw_info:
         const _c7PQw;
         const 131;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.834324584 UTC

[section ""data" . GHC.IO.Buffer.newCharBuffer_closure" {
     GHC.IO.Buffer.newCharBuffer_closure:
         const GHC.IO.Buffer.newCharBuffer_info;
         const 0;
 },
 GHC.IO.Buffer.newCharBuffer_entry() //  [R2, R3]
         { []
         }
     {offset
       c7PRa: // global
           R3 = R3;
           R2 = R2;
           call GHC.IO.Buffer.newCharBuffer1_entry(R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.newCharBuffer_info" {
     GHC.IO.Buffer.newCharBuffer_info:
         const GHC.IO.Buffer.newCharBuffer_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const S7OYn_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.838504546 UTC

[section ""data" . GHC.IO.Buffer.slideContents1_closure" {
     GHC.IO.Buffer.slideContents1_closure:
         const GHC.IO.Buffer.slideContents1_info;
 },
 GHC.IO.Buffer.slideContents1_entry() //  [R2]
         { []
         }
     {offset
       c7PRo: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7PRG; else goto c7PRH;
       c7PRG: // global
           R2 = R2;
           R1 = GHC.IO.Buffer.slideContents1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7PRH: // global
           I64[Sp - 8] = block_c7PRl_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7PRL; else goto c7PRm;
       u7PRL: // global
           call _c7PRl(R1) args: 0, res: 0, upd: 0;
       c7PRm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.slideContents1_info" {
     GHC.IO.Buffer.slideContents1_info:
         const GHC.IO.Buffer.slideContents1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c7PRl() //  [R1]
         { []
         }
     {offset
       c7PRl: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c7PRK; else goto c7PRJ;
       c7PRK: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7PRJ: // global
           _s7OP4::P64 = P64[R1 + 7];
           _s7OP5::P64 = P64[R1 + 15];
           _s7OP3::I64 = I64[R1 + 23];
           _s7OP6::I64 = I64[R1 + 31];
           _s7OP7::I64 = I64[R1 + 39];
           _s7OP9::I64 = I64[R1 + 47] - _s7OP7::I64;
           (_s7OPf::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint,]  result hints:  [PtrHint] memmove(_s7OP3::I64, _s7OP3::I64 + _s7OP7::I64, _s7OP9::I64);
           call MO_Touch(_s7OP4::P64);
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _s7OP4::P64;
           P64[Hp - 32] = _s7OP5::P64;
           I64[Hp - 24] = _s7OP3::I64;
           I64[Hp - 16] = _s7OP6::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = _s7OP9::I64;
           R1 = Hp - 47;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7PRl_info" {
     block_c7PRl_info:
         const _c7PRl;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.84445719 UTC

[section ""data" . GHC.IO.Buffer.slideContents_closure" {
     GHC.IO.Buffer.slideContents_closure:
         const GHC.IO.Buffer.slideContents_info;
 },
 GHC.IO.Buffer.slideContents_entry() //  [R2]
         { []
         }
     {offset
       c7PS4: // global
           R2 = R2;
           call GHC.IO.Buffer.slideContents1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.slideContents_info" {
     GHC.IO.Buffer.slideContents_info:
         const GHC.IO.Buffer.slideContents_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.849100491 UTC

[section ""data" . writeCharBufPtr1_r7OJT_closure" {
     writeCharBufPtr1_r7OJT_closure:
         const writeCharBufPtr1_r7OJT_info;
 },
 writeCharBufPtr1_r7OJT_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c7PSi: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7PSz; else goto c7PSA;
       c7PSz: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = writeCharBufPtr1_r7OJT_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7PSA: // global
           I64[Sp - 24] = block_c7PSf_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7PSH; else goto c7PSg;
       u7PSH: // global
           call _c7PSf(R1) args: 0, res: 0, upd: 0;
       c7PSg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . writeCharBufPtr1_r7OJT_info" {
     writeCharBufPtr1_r7OJT_info:
         const writeCharBufPtr1_r7OJT_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c7PSf() //  [R1]
         { []
         }
     {offset
       c7PSf: // global
           I64[Sp] = block_c7PSl_info;
           _s7OPn::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7OPn::I64;
           if (R1 & 7 != 0) goto u7PSG; else goto c7PSm;
       u7PSG: // global
           call _c7PSl(R1) args: 0, res: 0, upd: 0;
       c7PSm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7PSf_info" {
     block_c7PSf_info:
         const _c7PSf;
         const 2;
         const 30;
 },
 _c7PSl() //  [R1]
         { []
         }
     {offset
       c7PSl: // global
           I64[Sp] = block_c7PSq_info;
           _s7OPp::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s7OPp::I64;
           if (R1 & 7 != 0) goto u7PSI; else goto c7PSr;
       u7PSI: // global
           call _c7PSq(R1) args: 0, res: 0, upd: 0;
       c7PSr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7PSl_info" {
     block_c7PSl_info:
         const _c7PSl;
         const 66;
         const 30;
 },
 _c7PSq() //  [R1]
         { []
         }
     {offset
       c7PSq: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7PSF; else goto c7PSE;
       c7PSF: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7PSE: // global
           _s7OPp::I64 = I64[Sp + 16];
           I32[I64[Sp + 8] + (_s7OPp::I64 << 2)] = %MO_UU_Conv_W64_W32(I64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s7OPp::I64 + 1;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7PSq_info" {
     block_c7PSq_info:
         const _c7PSq;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.858632606 UTC

[section ""data" . GHC.IO.Buffer.writeCharBufPtr_closure" {
     GHC.IO.Buffer.writeCharBufPtr_closure:
         const GHC.IO.Buffer.writeCharBufPtr_info;
 },
 GHC.IO.Buffer.writeCharBufPtr_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c7PT8: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call writeCharBufPtr1_r7OJT_entry(R4,
                                             R3,
                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.writeCharBufPtr_info" {
     GHC.IO.Buffer.writeCharBufPtr_info:
         const GHC.IO.Buffer.writeCharBufPtr_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.863257847 UTC

[section ""data" . writeCharBuf1_r7OJU_closure" {
     writeCharBuf1_r7OJU_closure:
         const writeCharBuf1_r7OJU_info;
 },
 writeCharBuf1_r7OJU_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c7PTm: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7PTE; else goto c7PTF;
       c7PTE: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = writeCharBuf1_r7OJU_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7PTF: // global
           I64[Sp - 24] = block_c7PTj_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7PTM; else goto c7PTk;
       u7PTM: // global
           call _c7PTj(R1) args: 0, res: 0, upd: 0;
       c7PTk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . writeCharBuf1_r7OJU_info" {
     writeCharBuf1_r7OJU_info:
         const writeCharBuf1_r7OJU_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c7PTj() //  [R1]
         { []
         }
     {offset
       c7PTj: // global
           I64[Sp - 8] = block_c7PTp_info;
           _s7OPB::P64 = P64[R1 + 7];
           _s7OPA::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s7OPB::P64;
           I64[Sp + 8] = _s7OPA::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7PTL; else goto c7PTq;
       u7PTL: // global
           call _c7PTp(R1) args: 0, res: 0, upd: 0;
       c7PTq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7PTj_info" {
     block_c7PTj_info:
         const _c7PTj;
         const 2;
         const 30;
 },
 _c7PTp() //  [R1]
         { []
         }
     {offset
       c7PTp: // global
           I64[Sp] = block_c7PTu_info;
           _s7OPD::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s7OPD::I64;
           if (R1 & 7 != 0) goto u7PTN; else goto c7PTv;
       u7PTN: // global
           call _c7PTu(R1) args: 0, res: 0, upd: 0;
       c7PTv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7PTp_info" {
     block_c7PTp_info:
         const _c7PTp;
         const 131;
         const 30;
 },
 _c7PTu() //  [R1]
         { []
         }
     {offset
       c7PTu: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7PTK; else goto c7PTJ;
       c7PTK: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7PTJ: // global
           _s7OPB::P64 = P64[Sp + 8];
           _s7OPD::I64 = I64[Sp + 24];
           I32[I64[Sp + 16] + (_s7OPD::I64 << 2)] = %MO_UU_Conv_W64_W32(I64[R1 + 7]);
           call MO_Touch(_s7OPB::P64);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s7OPD::I64 + 1;
           R1 = Hp - 7;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7PTu_info" {
     block_c7PTu_info:
         const _c7PTu;
         const 387;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.872348049 UTC

[section ""data" . GHC.IO.Buffer.writeCharBuf_closure" {
     GHC.IO.Buffer.writeCharBuf_closure:
         const GHC.IO.Buffer.writeCharBuf_info;
 },
 GHC.IO.Buffer.writeCharBuf_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c7PUd: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call writeCharBuf1_r7OJU_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.writeCharBuf_info" {
     GHC.IO.Buffer.writeCharBuf_info:
         const GHC.IO.Buffer.writeCharBuf_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.876763341 UTC

[section ""data" . readCharBufPtr1_r7OJV_closure" {
     readCharBufPtr1_r7OJV_closure:
         const readCharBufPtr1_r7OJV_info;
 },
 readCharBufPtr1_r7OJV_entry() //  [R2, R3]
         { []
         }
     {offset
       c7PUr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7PUF; else goto c7PUG;
       c7PUF: // global
           R3 = R3;
           R2 = R2;
           R1 = readCharBufPtr1_r7OJV_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7PUG: // global
           I64[Sp - 16] = block_c7PUo_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7PUM; else goto c7PUp;
       u7PUM: // global
           call _c7PUo(R1) args: 0, res: 0, upd: 0;
       c7PUp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . readCharBufPtr1_r7OJV_info" {
     readCharBufPtr1_r7OJV_info:
         const readCharBufPtr1_r7OJV_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c7PUo() //  [R1]
         { []
         }
     {offset
       c7PUo: // global
           I64[Sp] = block_c7PUu_info;
           _s7OPO::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7OPO::I64;
           if (R1 & 7 != 0) goto u7PUL; else goto c7PUv;
       u7PUL: // global
           call _c7PUu(R1) args: 0, res: 0, upd: 0;
       c7PUv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7PUo_info" {
     block_c7PUo_info:
         const _c7PUo;
         const 1;
         const 30;
 },
 _c7PUu() //  [R1]
         { []
         }
     {offset
       c7PUu: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c7PUK; else goto c7PUJ;
       c7PUK: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7PUJ: // global
           _s7OPQ::I64 = I64[R1 + 7];
           I64[Hp - 48] = GHC.Types.I#_con_info;
           I64[Hp - 40] = _s7OPQ::I64 + 1;
           I64[Hp - 32] = GHC.Types.C#_con_info;
           I64[Hp - 24] = %MO_UU_Conv_W32_W64(I32[I64[Sp + 8] + (_s7OPQ::I64 << 2)]);
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7PUu_info" {
     block_c7PUu_info:
         const _c7PUu;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.884255987 UTC

[section ""data" . GHC.IO.Buffer.readCharBufPtr_closure" {
     GHC.IO.Buffer.readCharBufPtr_closure:
         const GHC.IO.Buffer.readCharBufPtr_info;
 },
 GHC.IO.Buffer.readCharBufPtr_entry() //  [R2, R3]
         { []
         }
     {offset
       c7PVa: // global
           R3 = R3;
           R2 = R2;
           call readCharBufPtr1_r7OJV_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.readCharBufPtr_info" {
     GHC.IO.Buffer.readCharBufPtr_info:
         const GHC.IO.Buffer.readCharBufPtr_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.88987031 UTC

[section ""data" . readCharBuf1_r7OJW_closure" {
     readCharBuf1_r7OJW_closure:
         const readCharBuf1_r7OJW_info;
 },
 readCharBuf1_r7OJW_entry() //  [R2, R3]
         { []
         }
     {offset
       c7PVo: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7PVD; else goto c7PVE;
       c7PVD: // global
           R3 = R3;
           R2 = R2;
           R1 = readCharBuf1_r7OJW_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7PVE: // global
           I64[Sp - 16] = block_c7PVl_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7PVK; else goto c7PVm;
       u7PVK: // global
           call _c7PVl(R1) args: 0, res: 0, upd: 0;
       c7PVm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . readCharBuf1_r7OJW_info" {
     readCharBuf1_r7OJW_info:
         const readCharBuf1_r7OJW_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c7PVl() //  [R1]
         { []
         }
     {offset
       c7PVl: // global
           I64[Sp - 8] = block_c7PVr_info;
           _s7OQ3::P64 = P64[R1 + 7];
           _s7OQ2::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s7OQ3::P64;
           I64[Sp + 8] = _s7OQ2::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7PVJ; else goto c7PVs;
       u7PVJ: // global
           call _c7PVr(R1) args: 0, res: 0, upd: 0;
       c7PVs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7PVl_info" {
     block_c7PVl_info:
         const _c7PVl;
         const 1;
         const 30;
 },
 _c7PVr() //  [R1]
         { []
         }
     {offset
       c7PVr: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c7PVI; else goto c7PVH;
       c7PVI: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7PVH: // global
           _s7OQ5::I64 = I64[R1 + 7];
           _s7OQ8::I64 = %MO_UU_Conv_W32_W64(I32[I64[Sp + 16] + (_s7OQ5::I64 << 2)]);
           call MO_Touch(P64[Sp + 8]);
           I64[Hp - 48] = GHC.Types.I#_con_info;
           I64[Hp - 40] = _s7OQ5::I64 + 1;
           I64[Hp - 32] = GHC.Types.C#_con_info;
           I64[Hp - 24] = _s7OQ8::I64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7PVr_info" {
     block_c7PVr_info:
         const _c7PVr;
         const 130;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.897299654 UTC

[section ""data" . GHC.IO.Buffer.readCharBuf_closure" {
     GHC.IO.Buffer.readCharBuf_closure:
         const GHC.IO.Buffer.readCharBuf_info;
 },
 GHC.IO.Buffer.readCharBuf_entry() //  [R2, R3]
         { []
         }
     {offset
       c7PW7: // global
           R3 = R3;
           R2 = R2;
           call readCharBuf1_r7OJW_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.readCharBuf_info" {
     GHC.IO.Buffer.readCharBuf_info:
         const GHC.IO.Buffer.readCharBuf_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.901693835 UTC

[section ""data" . GHC.IO.Buffer.peekCharBuf1_closure" {
     GHC.IO.Buffer.peekCharBuf1_closure:
         const GHC.IO.Buffer.peekCharBuf1_info;
 },
 GHC.IO.Buffer.peekCharBuf1_entry() //  [R2, R3]
         { []
         }
     {offset
       c7PWl: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7PWv; else goto c7PWw;
       c7PWv: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Buffer.peekCharBuf1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7PWw: // global
           I64[Sp - 16] = block_c7PWi_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7PWC; else goto c7PWj;
       u7PWC: // global
           call _c7PWi(R1) args: 0, res: 0, upd: 0;
       c7PWj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.peekCharBuf1_info" {
     GHC.IO.Buffer.peekCharBuf1_info:
         const GHC.IO.Buffer.peekCharBuf1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c7PWi() //  [R1]
         { []
         }
     {offset
       c7PWi: // global
           I64[Sp - 8] = block_c7PWo_info;
           _s7OQj::P64 = P64[R1 + 7];
           _s7OQi::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s7OQj::P64;
           I64[Sp + 8] = _s7OQi::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7PWB; else goto c7PWp;
       u7PWB: // global
           call _c7PWo(R1) args: 0, res: 0, upd: 0;
       c7PWp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7PWi_info" {
     block_c7PWi_info:
         const _c7PWi;
         const 1;
         const 30;
 },
 _c7PWo() //  [R1]
         { []
         }
     {offset
       c7PWo: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7PWA; else goto c7PWz;
       c7PWA: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7PWz: // global
           _s7OQo::I64 = %MO_UU_Conv_W32_W64(I32[I64[Sp + 16] + (I64[R1 + 7] << 2)]);
           call MO_Touch(P64[Sp + 8]);
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = _s7OQo::I64;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7PWo_info" {
     block_c7PWo_info:
         const _c7PWo;
         const 130;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.908790828 UTC

[section ""data" . GHC.IO.Buffer.peekCharBuf_closure" {
     GHC.IO.Buffer.peekCharBuf_closure:
         const GHC.IO.Buffer.peekCharBuf_info;
 },
 GHC.IO.Buffer.peekCharBuf_entry() //  [R2, R3]
         { []
         }
     {offset
       c7PWX: // global
           R3 = R3;
           R2 = R2;
           call GHC.IO.Buffer.peekCharBuf1_entry(R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.peekCharBuf_info" {
     GHC.IO.Buffer.peekCharBuf_info:
         const GHC.IO.Buffer.peekCharBuf_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.91181052 UTC

[section ""data" . GHC.IO.Buffer.ReadBuffer_closure" {
     GHC.IO.Buffer.ReadBuffer_closure:
         const GHC.IO.Buffer.ReadBuffer_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.913489142 UTC

[section ""data" . GHC.IO.Buffer.WriteBuffer_closure" {
     GHC.IO.Buffer.WriteBuffer_closure:
         const GHC.IO.Buffer.WriteBuffer_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.91624975 UTC

[section ""data" . GHC.IO.Buffer.Buffer_closure" {
     GHC.IO.Buffer.Buffer_closure:
         const GHC.IO.Buffer.Buffer_info;
 },
 GHC.IO.Buffer.Buffer_slow() //  [R1]
         { []
         }
     {offset
       c7PX7: // global
           R6 = I64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.IO.Buffer.Buffer_entry(R6,
                                           R5,
                                           R4,
                                           R3,
                                           R2,
                                           R1) args: 16, res: 0, upd: 8;
     }
 },
 GHC.IO.Buffer.Buffer_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c7PXc: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c7PXg; else goto c7PXf;
       c7PXg: // global
           HpAlloc = 56;
           R1 = GHC.IO.Buffer.Buffer_closure;
           I64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           I64[Sp - 16] = R5;
           I64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 56, res: 0, upd: 8;
       c7PXf: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = R5;
           I64[Hp - 8] = R6;
           I64[Hp] = I64[Sp];
           R1 = Hp - 47;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.Buffer_info" {
     GHC.IO.Buffer.Buffer_info:
         const GHC.IO.Buffer.Buffer_entry;
         const 0;
         const 14;
         const 25769803776;
         const 0;
         const 3654;
         const GHC.IO.Buffer.Buffer_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.920965343 UTC

[section ""relreadonly" . GHC.IO.Buffer.BufferState_closure_tbl" {
     GHC.IO.Buffer.BufferState_closure_tbl:
         const GHC.IO.Buffer.ReadBuffer_closure+1;
         const GHC.IO.Buffer.WriteBuffer_closure+2;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.923577285 UTC

[section ""cstring" . i7PsG_str" {
     i7PsG_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,66,117,102,102,101,114,46,82,101,97,100,66,117,102,102,101,114]
 },
 GHC.IO.Buffer.ReadBuffer_con_entry() //  [R1]
         { []
         }
     {offset
       c7PXq: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.ReadBuffer_con_info" {
     GHC.IO.Buffer.ReadBuffer_con_info:
         const GHC.IO.Buffer.ReadBuffer_con_entry;
         const 4294967296;
         const 3;
         const i7PsG_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.926823346 UTC

[section ""cstring" . i7PsI_str" {
     i7PsI_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,66,117,102,102,101,114,46,87,114,105,116,101,66,117,102,102,101,114]
 },
 GHC.IO.Buffer.WriteBuffer_con_entry() //  [R1]
         { []
         }
     {offset
       c7PXw: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.WriteBuffer_con_info" {
     GHC.IO.Buffer.WriteBuffer_con_info:
         const GHC.IO.Buffer.WriteBuffer_con_entry;
         const 4294967296;
         const 4294967299;
         const i7PsI_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.930018888 UTC

[section ""cstring" . i7PsK_str" {
     i7PsK_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,66,117,102,102,101,114,46,66,117,102,102,101,114]
 },
 GHC.IO.Buffer.Buffer_con_entry() //  [R1]
         { []
         }
     {offset
       c7PXC: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.Buffer_con_info" {
     GHC.IO.Buffer.Buffer_con_info:
         const GHC.IO.Buffer.Buffer_con_entry;
         const 17179869186;
         const 1;
         const i7PsK_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:55.933031489 UTC

[section ""relreadonly" . S7OYn_srt" {
     S7OYn_srt:
         const GHC.IO.Buffer.summaryBuffer1_closure;
         const GHC.IO.Buffer.$wsummaryBuffer_closure;
         const GHC.IO.Buffer.summaryBuffer_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const GHC.IO.Buffer.$wlvl_closure;
         const GHC.IO.Buffer.$wcheckBuffer_closure;
         const GHC.IO.Buffer.checkBuffer2_closure;
         const GHC.IO.Buffer.checkBuffer1_closure;
         const GHC.ForeignPtr.mallocForeignPtrBytes2_closure;
         const GHC.IO.Buffer.newBuffer1_closure;
         const GHC.IO.Buffer.newByteBuffer1_closure;
         const GHC.IO.Buffer.newCharBuffer1_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.047848277 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:02:57.051168154 UTC

[section ""data" . GHC.IO.Buffer.$WBuffer_closure" {
     GHC.IO.Buffer.$WBuffer_closure:
         const GHC.IO.Buffer.$WBuffer_info;
 },
 GHC.IO.Buffer.$WBuffer_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c7Q4j: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c7Q4C; else goto c7Q4D;
       c7Q4C: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Buffer.$WBuffer_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Q4D: // global
           I64[Sp - 40] = block_c7Q4g_info;
           R1 = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u7Q4L; else goto c7Q4h;
       u7Q4L: // global
           call _c7Q4g(R1) args: 0, res: 0, upd: 0;
       c7Q4h: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.$WBuffer_info" {
     GHC.IO.Buffer.$WBuffer_info:
         const GHC.IO.Buffer.$WBuffer_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _c7Q4g() //  [R1]
         { []
         }
     {offset
       c7Q4g: // global
           I64[Sp - 8] = block_c7Q4m_info;
           _s7PXQ::P64 = P64[R1 + 7];
           _s7PXP::I64 = I64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp] = _s7PXQ::P64;
           I64[Sp + 16] = _s7PXP::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Q4K; else goto c7Q4n;
       u7Q4K: // global
           call _c7Q4m(R1) args: 0, res: 0, upd: 0;
       c7Q4n: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Q4g_info" {
     block_c7Q4g_info:
         const _c7Q4g;
         const 4;
         const 30;
 },
 _c7Q4m() //  [R1]
         { []
         }
     {offset
       c7Q4m: // global
           I64[Sp] = block_c7Q4r_info;
           _s7PXS::I64 = I64[R1 + 7];
           R1 = P64[Sp + 32];
           I64[Sp + 32] = _s7PXS::I64;
           if (R1 & 7 != 0) goto u7Q4M; else goto c7Q4s;
       u7Q4M: // global
           call _c7Q4r(R1) args: 0, res: 0, upd: 0;
       c7Q4s: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Q4m_info" {
     block_c7Q4m_info:
         const _c7Q4m;
         const 261;
         const 30;
 },
 _c7Q4r() //  [R1]
         { []
         }
     {offset
       c7Q4r: // global
           I64[Sp] = block_c7Q4w_info;
           _s7PXU::I64 = I64[R1 + 7];
           R1 = P64[Sp + 40];
           I64[Sp + 40] = _s7PXU::I64;
           if (R1 & 7 != 0) goto u7Q4N; else goto c7Q4x;
       u7Q4N: // global
           call _c7Q4w(R1) args: 0, res: 0, upd: 0;
       c7Q4x: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Q4r_info" {
     block_c7Q4r_info:
         const _c7Q4r;
         const 773;
         const 30;
 },
 _c7Q4w() //  [R1]
         { []
         }
     {offset
       c7Q4w: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c7Q4J; else goto c7Q4I;
       c7Q4J: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Q4I: // global
           _s7PXW::I64 = I64[R1 + 7];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 16];
           I64[Hp - 24] = I64[Sp + 24];
           I64[Hp - 16] = I64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = _s7PXW::I64;
           R1 = Hp - 47;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Q4w_info" {
     block_c7Q4w_info:
         const _c7Q4w;
         const 1797;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.066667691 UTC

[section ""data" . GHC.IO.Buffer.$fEqBufferState_$c==_closure" {
     GHC.IO.Buffer.$fEqBufferState_$c==_closure:
         const GHC.IO.Buffer.$fEqBufferState_$c==_info;
 },
 GHC.IO.Buffer.$fEqBufferState_$c==_entry() //  [R2, R3]
         { []
         }
     {offset
       c7Q5v: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Q5w; else goto c7Q5x;
       c7Q5w: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Buffer.$fEqBufferState_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Q5x: // global
           I64[Sp - 16] = block_c7Q5o_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Q6a; else goto c7Q5p;
       u7Q6a: // global
           call _c7Q5o(R1) args: 0, res: 0, upd: 0;
       c7Q5p: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.$fEqBufferState_$c==_info" {
     GHC.IO.Buffer.$fEqBufferState_$c==_info:
         const GHC.IO.Buffer.$fEqBufferState_$c==_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c7Q5o() //  [R1]
         { []
         }
     {offset
       c7Q5o: // global
           _s7PXY::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c7Q5s; else goto c7Q5t;
       c7Q5s: // global
           I64[Sp + 8] = block_c7Q5A_info;
           R1 = _s7PXY::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7Q68; else goto c7Q5C;
       u7Q68: // global
           call _c7Q5A(R1) args: 0, res: 0, upd: 0;
       c7Q5C: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7Q5t: // global
           I64[Sp + 8] = block_c7Q5P_info;
           R1 = _s7PXY::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7Q69; else goto c7Q5R;
       u7Q69: // global
           call _c7Q5P(R1) args: 0, res: 0, upd: 0;
       c7Q5R: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Q5o_info" {
     block_c7Q5o_info:
         const _c7Q5o;
         const 1;
         const 30;
 },
 _c7Q5A() //  [R1]
         { []
         }
     {offset
       c7Q5A: // global
           if (R1 & 7 == 1) goto u7Q66; else goto u7Q67;
       u7Q66: // global
           Sp = Sp + 8;
           call _c7Q61() args: 0, res: 0, upd: 0;
       u7Q67: // global
           Sp = Sp + 8;
           call _c7Q5X() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c7Q5A_info" {
     block_c7Q5A_info:
         const _c7Q5A;
         const 0;
         const 30;
 },
 _c7Q5P() //  [R1]
         { []
         }
     {offset
       c7Q5P: // global
           if (R1 & 7 == 1) goto u7Q64; else goto u7Q65;
       u7Q64: // global
           Sp = Sp + 8;
           call _c7Q5X() args: 0, res: 0, upd: 0;
       u7Q65: // global
           Sp = Sp + 8;
           call _c7Q61() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c7Q5P_info" {
     block_c7Q5P_info:
         const _c7Q5P;
         const 0;
         const 30;
 },
 _c7Q5X() //  []
         { []
         }
     {offset
       c7Q5X: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7Q61() //  []
         { []
         }
     {offset
       c7Q61: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.078877745 UTC

[section ""data" . GHC.IO.Buffer.$fEqBufferState_$c/=_closure" {
     GHC.IO.Buffer.$fEqBufferState_$c/=_closure:
         const GHC.IO.Buffer.$fEqBufferState_$c/=_info;
 },
 GHC.IO.Buffer.$fEqBufferState_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       c7Q6Y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Q6Z; else goto c7Q70;
       c7Q6Z: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Buffer.$fEqBufferState_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Q70: // global
           I64[Sp - 16] = block_c7Q6R_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Q7D; else goto c7Q6S;
       u7Q7D: // global
           call _c7Q6R(R1) args: 0, res: 0, upd: 0;
       c7Q6S: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.$fEqBufferState_$c/=_info" {
     GHC.IO.Buffer.$fEqBufferState_$c/=_info:
         const GHC.IO.Buffer.$fEqBufferState_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c7Q6R() //  [R1]
         { []
         }
     {offset
       c7Q6R: // global
           _s7PY3::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c7Q6V; else goto c7Q6W;
       c7Q6V: // global
           I64[Sp + 8] = block_c7Q73_info;
           R1 = _s7PY3::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7Q7B; else goto c7Q75;
       u7Q7B: // global
           call _c7Q73(R1) args: 0, res: 0, upd: 0;
       c7Q75: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7Q6W: // global
           I64[Sp + 8] = block_c7Q7i_info;
           R1 = _s7PY3::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7Q7C; else goto c7Q7k;
       u7Q7C: // global
           call _c7Q7i(R1) args: 0, res: 0, upd: 0;
       c7Q7k: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Q6R_info" {
     block_c7Q6R_info:
         const _c7Q6R;
         const 1;
         const 30;
 },
 _c7Q73() //  [R1]
         { []
         }
     {offset
       c7Q73: // global
           if (R1 & 7 == 1) goto u7Q7z; else goto u7Q7A;
       u7Q7z: // global
           Sp = Sp + 8;
           call _c7Q7u() args: 0, res: 0, upd: 0;
       u7Q7A: // global
           Sp = Sp + 8;
           call _c7Q7q() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c7Q73_info" {
     block_c7Q73_info:
         const _c7Q73;
         const 0;
         const 30;
 },
 _c7Q7i() //  [R1]
         { []
         }
     {offset
       c7Q7i: // global
           if (R1 & 7 == 1) goto u7Q7x; else goto u7Q7y;
       u7Q7x: // global
           Sp = Sp + 8;
           call _c7Q7q() args: 0, res: 0, upd: 0;
       u7Q7y: // global
           Sp = Sp + 8;
           call _c7Q7u() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c7Q7i_info" {
     block_c7Q7i_info:
         const _c7Q7i;
         const 0;
         const 30;
 },
 _c7Q7q() //  []
         { []
         }
     {offset
       c7Q7q: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7Q7u() //  []
         { []
         }
     {offset
       c7Q7u: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.089463324 UTC

[section ""data" . GHC.IO.Buffer.$fEqBufferState_closure" {
     GHC.IO.Buffer.$fEqBufferState_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.IO.Buffer.$fEqBufferState_$c==_closure+2;
         const GHC.IO.Buffer.$fEqBufferState_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.09213715 UTC

[section ""data" . GHC.IO.Buffer.bufR_closure" {
     GHC.IO.Buffer.bufR_closure:
         const GHC.IO.Buffer.bufR_info;
 },
 GHC.IO.Buffer.bufR_entry() //  [R2]
         { []
         }
     {offset
       c7Q8o: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7Q8s; else goto c7Q8t;
       c7Q8s: // global
           R2 = R2;
           R1 = GHC.IO.Buffer.bufR_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Q8t: // global
           I64[Sp - 8] = block_c7Q8l_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Q8x; else goto c7Q8m;
       u7Q8x: // global
           call _c7Q8l(R1) args: 0, res: 0, upd: 0;
       c7Q8m: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.bufR_info" {
     GHC.IO.Buffer.bufR_info:
         const GHC.IO.Buffer.bufR_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c7Q8l() //  [R1]
         { []
         }
     {offset
       c7Q8l: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7Q8w; else goto c7Q8v;
       c7Q8w: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Q8v: // global
           _s7PYe::I64 = I64[R1 + 47];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s7PYe::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Q8l_info" {
     block_c7Q8l_info:
         const _c7Q8l;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.099186321 UTC

[section ""data" . GHC.IO.Buffer.bufL_closure" {
     GHC.IO.Buffer.bufL_closure:
         const GHC.IO.Buffer.bufL_info;
 },
 GHC.IO.Buffer.bufL_entry() //  [R2]
         { []
         }
     {offset
       c7Q8R: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7Q8V; else goto c7Q8W;
       c7Q8V: // global
           R2 = R2;
           R1 = GHC.IO.Buffer.bufL_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Q8W: // global
           I64[Sp - 8] = block_c7Q8O_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Q90; else goto c7Q8P;
       u7Q90: // global
           call _c7Q8O(R1) args: 0, res: 0, upd: 0;
       c7Q8P: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.bufL_info" {
     GHC.IO.Buffer.bufL_info:
         const GHC.IO.Buffer.bufL_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c7Q8O() //  [R1]
         { []
         }
     {offset
       c7Q8O: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7Q8Z; else goto c7Q8Y;
       c7Q8Z: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Q8Y: // global
           _s7PYl::I64 = I64[R1 + 39];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s7PYl::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Q8O_info" {
     block_c7Q8O_info:
         const _c7Q8O;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.106008719 UTC

[section ""data" . GHC.IO.Buffer.bufSize_closure" {
     GHC.IO.Buffer.bufSize_closure:
         const GHC.IO.Buffer.bufSize_info;
 },
 GHC.IO.Buffer.bufSize_entry() //  [R2]
         { []
         }
     {offset
       c7Q9k: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7Q9o; else goto c7Q9p;
       c7Q9o: // global
           R2 = R2;
           R1 = GHC.IO.Buffer.bufSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Q9p: // global
           I64[Sp - 8] = block_c7Q9h_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Q9t; else goto c7Q9i;
       u7Q9t: // global
           call _c7Q9h(R1) args: 0, res: 0, upd: 0;
       c7Q9i: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.bufSize_info" {
     GHC.IO.Buffer.bufSize_info:
         const GHC.IO.Buffer.bufSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c7Q9h() //  [R1]
         { []
         }
     {offset
       c7Q9h: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7Q9s; else goto c7Q9r;
       c7Q9s: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Q9r: // global
           _s7PYs::I64 = I64[R1 + 31];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s7PYs::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Q9h_info" {
     block_c7Q9h_info:
         const _c7Q9h;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.112339907 UTC

[section ""data" . GHC.IO.Buffer.bufState_closure" {
     GHC.IO.Buffer.bufState_closure:
         const GHC.IO.Buffer.bufState_info;
 },
 GHC.IO.Buffer.bufState_entry() //  [R2]
         { []
         }
     {offset
       c7Q9N: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7Q9O; else goto c7Q9P;
       c7Q9O: // global
           R2 = R2;
           R1 = GHC.IO.Buffer.bufState_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Q9P: // global
           I64[Sp - 8] = block_c7Q9K_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Q9T; else goto c7Q9L;
       u7Q9T: // global
           call _c7Q9K(R1) args: 0, res: 0, upd: 0;
       c7Q9L: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.bufState_info" {
     GHC.IO.Buffer.bufState_info:
         const GHC.IO.Buffer.bufState_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c7Q9K() //  [R1]
         { []
         }
     {offset
       c7Q9K: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Q9K_info" {
     block_c7Q9K_info:
         const _c7Q9K;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.118945477 UTC

[section ""data" . GHC.IO.Buffer.bufRaw_closure" {
     GHC.IO.Buffer.bufRaw_closure:
         const GHC.IO.Buffer.bufRaw_info;
 },
 GHC.IO.Buffer.bufRaw_entry() //  [R2]
         { []
         }
     {offset
       c7Qad: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7Qah; else goto c7Qai;
       c7Qah: // global
           R2 = R2;
           R1 = GHC.IO.Buffer.bufRaw_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Qai: // global
           I64[Sp - 8] = block_c7Qaa_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Qam; else goto c7Qab;
       u7Qam: // global
           call _c7Qaa(R1) args: 0, res: 0, upd: 0;
       c7Qab: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.bufRaw_info" {
     GHC.IO.Buffer.bufRaw_info:
         const GHC.IO.Buffer.bufRaw_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c7Qaa() //  [R1]
         { []
         }
     {offset
       c7Qaa: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7Qal; else goto c7Qak;
       c7Qal: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Qak: // global
           _s7PYG::P64 = P64[R1 + 7];
           _s7PYF::I64 = I64[R1 + 23];
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = _s7PYG::P64;
           I64[Hp] = _s7PYF::I64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Qaa_info" {
     block_c7Qaa_info:
         const _c7Qaa;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.124657932 UTC

[section ""data" . GHC.IO.Buffer.charSize_closure" {
     GHC.IO.Buffer.charSize_closure:
         const GHC.Types.I#_con_info;
         const 4;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.128238767 UTC

[section ""data" . GHC.IO.Buffer.withBuffer1_closure" {
     GHC.IO.Buffer.withBuffer1_closure:
         const GHC.IO.Buffer.withBuffer1_info;
 },
 GHC.IO.Buffer.withBuffer1_entry() //  [R2, R3]
         { []
         }
     {offset
       c7QaH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7QaI; else goto c7QaJ;
       c7QaI: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Buffer.withBuffer1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7QaJ: // global
           I64[Sp - 16] = block_c7QaE_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7QaU; else goto c7QaF;
       u7QaU: // global
           call _c7QaE(R1) args: 0, res: 0, upd: 0;
       c7QaF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.withBuffer1_info" {
     GHC.IO.Buffer.withBuffer1_info:
         const GHC.IO.Buffer.withBuffer1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c7QaE() //  [R1]
         { []
         }
     {offset
       c7QaE: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7QaQ; else goto c7QaP;
       c7QaQ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7QaP: // global
           _s7PYQ::P64 = P64[R1 + 7];
           _s7PYP::I64 = I64[R1 + 23];
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s7PYP::I64;
           I64[Sp] = block_c7QaN_info;
           R2 = Hp - 7;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s7PYQ::P64;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7QaE_info" {
     block_c7QaE_info:
         const _c7QaE;
         const 1;
         const 30;
 },
 _c7QaN() //  [R1]
         { []
         }
     {offset
       c7QaN: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = R1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7QaN_info" {
     block_c7QaN_info:
         const _c7QaN;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.135575002 UTC

[section ""data" . GHC.IO.Buffer.withBuffer_closure" {
     GHC.IO.Buffer.withBuffer_closure:
         const GHC.IO.Buffer.withBuffer_info;
 },
 GHC.IO.Buffer.withBuffer_entry() //  [R2, R3]
         { []
         }
     {offset
       c7Qbf: // global
           R3 = R3;
           R2 = R2;
           call GHC.IO.Buffer.withBuffer1_entry(R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.withBuffer_info" {
     GHC.IO.Buffer.withBuffer_info:
         const GHC.IO.Buffer.withBuffer_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.141011372 UTC

[section ""data" . GHC.IO.Buffer.withRawBuffer1_closure" {
     GHC.IO.Buffer.withRawBuffer1_closure:
         const GHC.IO.Buffer.withRawBuffer1_info;
 },
 sat_s7PZ3_entry() //  [R1]
         { []
         }
     {offset
       c7Qbu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Qbv; else goto c7Qbw;
       c7Qbv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7Qbw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.ForeignPtr.unsafeForeignPtrToPtr_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7PZ3_info" {
     sat_s7PZ3_info:
         const sat_s7PZ3_entry;
         const 1;
         const 16;
 },
 GHC.IO.Buffer.withRawBuffer1_entry() //  [R2, R3]
         { []
         }
     {offset
       c7QbC: // global
           _s7PZ1::P64 = R3;
           _s7PZ0::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c7QbD; else goto c7QbE;
       c7QbE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7QbG; else goto c7QbF;
       c7QbG: // global
           HpAlloc = 24;
           goto c7QbD;
       c7QbD: // global
           R3 = _s7PZ1::P64;
           R2 = _s7PZ0::P64;
           R1 = GHC.IO.Buffer.withRawBuffer1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7QbF: // global
           I64[Hp - 16] = sat_s7PZ3_info;
           P64[Hp] = _s7PZ0::P64;
           I64[Sp - 16] = block_c7Qbx_info;
           R2 = Hp - 16;
           R1 = _s7PZ1::P64;
           P64[Sp - 8] = _s7PZ0::P64;
           Sp = Sp - 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.withRawBuffer1_info" {
     GHC.IO.Buffer.withRawBuffer1_info:
         const GHC.IO.Buffer.withRawBuffer1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c7Qbx() //  [R1]
         { []
         }
     {offset
       c7Qbx: // global
           I64[Sp] = block_c7Qbz_info;
           _s7PZ6::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s7PZ6::P64;
           if (R1 & 7 != 0) goto u7QbM; else goto c7QbA;
       u7QbM: // global
           call _c7Qbz(R1) args: 0, res: 0, upd: 0;
       c7QbA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Qbx_info" {
     block_c7Qbx_info:
         const _c7Qbx;
         const 1;
         const 30;
 },
 _c7Qbz() //  [R1]
         { []
         }
     {offset
       c7Qbz: // global
           _s7PZ6::P64 = P64[Sp + 8];
           call MO_Touch(P64[R1 + 7]);
           R1 = _s7PZ6::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Qbz_info" {
     block_c7Qbz_info:
         const _c7Qbz;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.150323184 UTC

[section ""data" . GHC.IO.Buffer.withRawBuffer_closure" {
     GHC.IO.Buffer.withRawBuffer_closure:
         const GHC.IO.Buffer.withRawBuffer_info;
 },
 GHC.IO.Buffer.withRawBuffer_entry() //  [R2, R3]
         { []
         }
     {offset
       c7Qcc: // global
           R3 = R3;
           R2 = R2;
           call GHC.IO.Buffer.withRawBuffer1_entry(R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.withRawBuffer_info" {
     GHC.IO.Buffer.withRawBuffer_info:
         const GHC.IO.Buffer.withRawBuffer_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.15424549 UTC

[section ""data" . GHC.IO.Buffer.isEmptyBuffer_closure" {
     GHC.IO.Buffer.isEmptyBuffer_closure:
         const GHC.IO.Buffer.isEmptyBuffer_info;
 },
 GHC.IO.Buffer.isEmptyBuffer_entry() //  [R2]
         { []
         }
     {offset
       c7Qcq: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7Qcr; else goto c7Qcs;
       c7Qcr: // global
           R2 = R2;
           R1 = GHC.IO.Buffer.isEmptyBuffer_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Qcs: // global
           I64[Sp - 8] = block_c7Qcn_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Qcx; else goto c7Qco;
       u7Qcx: // global
           call _c7Qcn(R1) args: 0, res: 0, upd: 0;
       c7Qco: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.isEmptyBuffer_info" {
     GHC.IO.Buffer.isEmptyBuffer_info:
         const GHC.IO.Buffer.isEmptyBuffer_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c7Qcn() //  [R1]
         { []
         }
     {offset
       c7Qcn: // global
           R1 = I64[((I64[R1 + 39] == I64[R1 + 47]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Qcn_info" {
     block_c7Qcn_info:
         const _c7Qcn;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.161012058 UTC

[section ""data" . GHC.IO.Buffer.isFullBuffer_closure" {
     GHC.IO.Buffer.isFullBuffer_closure:
         const GHC.IO.Buffer.isFullBuffer_info;
 },
 GHC.IO.Buffer.isFullBuffer_entry() //  [R2]
         { []
         }
     {offset
       c7QcU: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7QcV; else goto c7QcW;
       c7QcV: // global
           R2 = R2;
           R1 = GHC.IO.Buffer.isFullBuffer_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7QcW: // global
           I64[Sp - 8] = block_c7QcR_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Qd1; else goto c7QcS;
       u7Qd1: // global
           call _c7QcR(R1) args: 0, res: 0, upd: 0;
       c7QcS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.isFullBuffer_info" {
     GHC.IO.Buffer.isFullBuffer_info:
         const GHC.IO.Buffer.isFullBuffer_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c7QcR() //  [R1]
         { []
         }
     {offset
       c7QcR: // global
           R1 = I64[((I64[R1 + 31] == I64[R1 + 47]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7QcR_info" {
     block_c7QcR_info:
         const _c7QcR;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.166583596 UTC

[section ""data" . GHC.IO.Buffer.isFullCharBuffer_closure" {
     GHC.IO.Buffer.isFullCharBuffer_closure:
         const GHC.IO.Buffer.isFullCharBuffer_info;
 },
 GHC.IO.Buffer.isFullCharBuffer_entry() //  [R2]
         { []
         }
     {offset
       c7Qdl: // global
           R2 = R2;
           call GHC.IO.Buffer.isFullBuffer_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.isFullCharBuffer_info" {
     GHC.IO.Buffer.isFullCharBuffer_info:
         const GHC.IO.Buffer.isFullCharBuffer_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.171171884 UTC

[section ""data" . GHC.IO.Buffer.isWriteBuffer_closure" {
     GHC.IO.Buffer.isWriteBuffer_closure:
         const GHC.IO.Buffer.isWriteBuffer_info;
 },
 GHC.IO.Buffer.isWriteBuffer_entry() //  [R2]
         { []
         }
     {offset
       c7Qdz: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7QdA; else goto c7QdB;
       c7QdA: // global
           R2 = R2;
           R1 = GHC.IO.Buffer.isWriteBuffer_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7QdB: // global
           I64[Sp - 8] = block_c7Qdw_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7QdT; else goto c7Qdx;
       u7QdT: // global
           call _c7Qdw(R1) args: 0, res: 0, upd: 0;
       c7Qdx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.isWriteBuffer_info" {
     GHC.IO.Buffer.isWriteBuffer_info:
         const GHC.IO.Buffer.isWriteBuffer_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c7Qdw() //  [R1]
         { []
         }
     {offset
       c7Qdw: // global
           I64[Sp] = block_c7QdE_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto u7QdS; else goto c7QdG;
       u7QdS: // global
           call _c7QdE(R1) args: 0, res: 0, upd: 0;
       c7QdG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Qdw_info" {
     block_c7Qdw_info:
         const _c7Qdw;
         const 0;
         const 30;
 },
 _c7QdE() //  [R1]
         { []
         }
     {offset
       c7QdE: // global
           if (R1 & 7 == 1) goto c7QdM; else goto c7QdQ;
       c7QdM: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7QdQ: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7QdE_info" {
     block_c7QdE_info:
         const _c7QdE;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.180939583 UTC

[section ""data" . GHC.IO.Buffer.bufferAdjustL_closure" {
     GHC.IO.Buffer.bufferAdjustL_closure:
         const GHC.IO.Buffer.bufferAdjustL_info;
 },
 GHC.IO.Buffer.bufferAdjustL_entry() //  [R2, R3]
         { []
         }
     {offset
       c7Qem: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c7Qeq; else goto c7Qer;
       c7Qeq: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Buffer.bufferAdjustL_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Qer: // global
           I64[Sp - 16] = block_c7Qej_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7QeK; else goto c7Qek;
       u7QeK: // global
           call _c7Qej(R1) args: 0, res: 0, upd: 0;
       c7Qek: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.bufferAdjustL_info" {
     GHC.IO.Buffer.bufferAdjustL_info:
         const GHC.IO.Buffer.bufferAdjustL_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c7Qej() //  [R1]
         { []
         }
     {offset
       c7Qej: // global
           I64[Sp - 32] = block_c7Qep_info;
           _s7PZG::P64 = P64[R1 + 7];
           _s7PZH::P64 = P64[R1 + 15];
           _s7PZF::I64 = I64[R1 + 23];
           _s7PZI::I64 = I64[R1 + 31];
           _s7PZK::I64 = I64[R1 + 47];
           R1 = P64[Sp + 8];
           P64[Sp - 24] = _s7PZH::P64;
           I64[Sp - 16] = _s7PZI::I64;
           I64[Sp - 8] = _s7PZK::I64;
           P64[Sp] = _s7PZG::P64;
           I64[Sp + 8] = _s7PZF::I64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u7QeJ; else goto c7Qet;
       u7QeJ: // global
           call _c7Qep(R1) args: 0, res: 0, upd: 0;
       c7Qet: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Qej_info" {
     block_c7Qej_info:
         const _c7Qej;
         const 1;
         const 30;
 },
 _c7Qep() //  [R1]
         { []
         }
     {offset
       c7Qep: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c7Qez; else goto c7Qey;
       c7Qez: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Qey: // global
           _s7PZF::I64 = I64[Sp + 40];
           _s7PZG::P64 = P64[Sp + 32];
           _s7PZH::P64 = P64[Sp + 8];
           _s7PZI::I64 = I64[Sp + 16];
           _s7PZK::I64 = I64[Sp + 24];
           _s7PZM::I64 = I64[R1 + 7];
           if (_s7PZM::I64 == _s7PZK::I64) goto c7QeI; else goto c7QeF;
       c7QeI: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _s7PZG::P64;
           P64[Hp - 32] = _s7PZH::P64;
           I64[Hp - 24] = _s7PZF::I64;
           I64[Hp - 16] = _s7PZI::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           R1 = Hp - 47;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7QeF: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _s7PZG::P64;
           P64[Hp - 32] = _s7PZH::P64;
           I64[Hp - 24] = _s7PZF::I64;
           I64[Hp - 16] = _s7PZI::I64;
           I64[Hp - 8] = _s7PZM::I64;
           I64[Hp] = _s7PZK::I64;
           R1 = Hp - 47;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Qep_info" {
     block_c7Qep_info:
         const _c7Qep;
         const 1413;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.191032913 UTC

[section ""data" . GHC.IO.Buffer.emptyBuffer_closure" {
     GHC.IO.Buffer.emptyBuffer_closure:
         const GHC.IO.Buffer.emptyBuffer_info;
 },
 GHC.IO.Buffer.emptyBuffer_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c7Qfb: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7Qfk; else goto c7Qfl;
       c7Qfk: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Buffer.emptyBuffer_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Qfl: // global
           I64[Sp - 24] = block_c7Qf8_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7Qfr; else goto c7Qf9;
       u7Qfr: // global
           call _c7Qf8(R1) args: 0, res: 0, upd: 0;
       c7Qf9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.emptyBuffer_info" {
     GHC.IO.Buffer.emptyBuffer_info:
         const GHC.IO.Buffer.emptyBuffer_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c7Qf8() //  [R1]
         { []
         }
     {offset
       c7Qf8: // global
           I64[Sp - 8] = block_c7Qfe_info;
           _s7PZT::P64 = P64[R1 + 7];
           _s7PZS::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s7PZT::P64;
           I64[Sp + 8] = _s7PZS::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Qfq; else goto c7Qff;
       u7Qfq: // global
           call _c7Qfe(R1) args: 0, res: 0, upd: 0;
       c7Qff: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Qf8_info" {
     block_c7Qf8_info:
         const _c7Qf8;
         const 2;
         const 30;
 },
 _c7Qfe() //  [R1]
         { []
         }
     {offset
       c7Qfe: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c7Qfp; else goto c7Qfo;
       c7Qfp: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Qfo: // global
           _s7PZV::I64 = I64[R1 + 7];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 24];
           I64[Hp - 24] = I64[Sp + 16];
           I64[Hp - 16] = _s7PZV::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           R1 = Hp - 47;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Qfe_info" {
     block_c7Qfe_info:
         const _c7Qfe;
         const 131;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.198248881 UTC

[section ""cstring" . GHC.IO.Buffer.summaryBuffer5_bytes" {
     GHC.IO.Buffer.summaryBuffer5_bytes:
         I8[] [98,117,102]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.200338744 UTC

[section ""cstring" . GHC.IO.Buffer.summaryBuffer4_bytes" {
     GHC.IO.Buffer.summaryBuffer4_bytes:
         I8[] [40]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.202040029 UTC

[section ""cstring" . GHC.IO.Buffer.summaryBuffer3_bytes" {
     GHC.IO.Buffer.summaryBuffer3_bytes:
         I8[] [45]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.203805933 UTC

[section ""cstring" . GHC.IO.Buffer.summaryBuffer2_bytes" {
     GHC.IO.Buffer.summaryBuffer2_bytes:
         I8[] [41]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.206443359 UTC

[section ""data" . GHC.IO.Buffer.summaryBuffer1_closure" {
     GHC.IO.Buffer.summaryBuffer1_closure:
         const GHC.IO.Buffer.summaryBuffer1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Buffer.summaryBuffer1_entry() //  [R1]
         { []
         }
     {offset
       c7QfW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7QfX; else goto c7QfY;
       c7QfX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7QfY: // global
           (_c7QfT::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7QfT::I64 == 0) goto c7QfV; else goto c7QfU;
       c7QfV: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7QfU: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7QfT::I64;
           R2 = GHC.IO.Buffer.summaryBuffer2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.summaryBuffer1_info" {
     GHC.IO.Buffer.summaryBuffer1_info:
         const GHC.IO.Buffer.summaryBuffer1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.215507349 UTC

[section ""data" . GHC.IO.Buffer.$wsummaryBuffer_closure" {
     GHC.IO.Buffer.$wsummaryBuffer_closure:
         const GHC.IO.Buffer.$wsummaryBuffer_info;
         const 0;
 },
 sat_s7Q0b_entry() //  [R1]
         { []
         }
     {offset
       c7QgC: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7QgD; else goto c7QgE;
       c7QgD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7QgE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c7Qgz_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 16];
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7Q0b_info" {
     sat_s7Q0b_info:
         const sat_s7Q0b_entry;
         const 4294967296;
         const 4294967313;
         const S7Qhb_srt;
 },
 _c7Qgz() //  [R1, R2]
         { []
         }
     {offset
       c7Qgz: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7QgH; else goto c7QgG;
       c7QgH: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c7QgG: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R3 = GHC.IO.Buffer.summaryBuffer1_closure;
           R2 = Hp - 14;
           Sp = Sp + 8;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c7Qgz_info" {
     block_c7Qgz_info:
         const _c7Qgz;
         const 0;
         const 4294967326;
         const S7Qhb_srt;
 },
 sat_s7Q0c_entry() //  [R1]
         { []
         }
     {offset
       c7QgI: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7QgM; else goto c7QgL;
       c7QgM: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7QgL: // global
           _s7PZY::I64 = I64[R1 + 16];
           I64[Hp - 16] = sat_s7Q0b_info;
           I64[Hp] = _s7PZY::I64;
           R3 = Hp - 16;
           R2 = GHC.IO.Buffer.summaryBuffer3_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7Q0c_info" {
     sat_s7Q0c_info:
         const sat_s7Q0c_entry;
         const 4294967296;
         const 4294967313;
         const S7Qhb_srt;
 },
 sat_s7Q0d_entry() //  [R1]
         { []
         }
     {offset
       c7QgO: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7QgP; else goto c7QgQ;
       c7QgP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7QgQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c7Qgp_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 16];
           R2 = 0;
           I64[Sp - 24] = I64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7Q0d_info" {
     sat_s7Q0d_info:
         const sat_s7Q0d_entry;
         const 8589934592;
         const 4294967316;
         const S7Qhb_srt;
 },
 _c7Qgp() //  [R1, R2]
         { []
         }
     {offset
       c7Qgp: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7QgT; else goto c7QgS;
       c7QgT: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c7QgS: // global
           I64[Hp - 40] = sat_s7Q0c_info;
           I64[Hp - 24] = I64[Sp + 8];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R3 = Hp - 40;
           R2 = Hp - 14;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c7Qgp_info" {
     block_c7Qgp_info:
         const _c7Qgp;
         const 65;
         const 4294967326;
         const S7Qhb_srt;
 },
 sat_s7Q0e_entry() //  [R1]
         { []
         }
     {offset
       c7QgU: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7QgY; else goto c7QgX;
       c7QgY: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7QgX: // global
           _s7PZX::I64 = I64[R1 + 16];
           _s7PZY::I64 = I64[R1 + 24];
           I64[Hp - 24] = sat_s7Q0d_info;
           I64[Hp - 8] = _s7PZX::I64;
           I64[Hp] = _s7PZY::I64;
           R3 = Hp - 24;
           R2 = GHC.IO.Buffer.summaryBuffer4_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7Q0e_info" {
     sat_s7Q0e_info:
         const sat_s7Q0e_entry;
         const 8589934592;
         const 4294967316;
         const S7Qhb_srt;
 },
 sat_s7Q0f_entry() //  [R1]
         { []
         }
     {offset
       c7Qh0: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c7Qh1; else goto c7Qh2;
       c7Qh1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7Qh2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c7Qgf_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 16];
           R2 = 0;
           I64[Sp - 32] = I64[R1 + 24];
           I64[Sp - 24] = I64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7Q0f_info" {
     sat_s7Q0f_info:
         const sat_s7Q0f_entry;
         const 12884901888;
         const 4294967311;
         const S7Qhb_srt;
 },
 _c7Qgf() //  [R1, R2]
         { []
         }
     {offset
       c7Qgf: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c7Qh5; else goto c7Qh4;
       c7Qh5: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c7Qh4: // global
           I64[Hp - 48] = sat_s7Q0e_info;
           I64[Hp - 32] = I64[Sp + 8];
           I64[Hp - 24] = I64[Sp + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R3 = Hp - 48;
           R2 = Hp - 14;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c7Qgf_info" {
     block_c7Qgf_info:
         const _c7Qgf;
         const 194;
         const 4294967326;
         const S7Qhb_srt;
 },
 GHC.IO.Buffer.$wsummaryBuffer_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c7Qh6: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c7Qha; else goto c7Qh9;
       c7Qha: // global
           HpAlloc = 40;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Buffer.$wsummaryBuffer_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Qh9: // global
           I64[Hp - 32] = sat_s7Q0f_info;
           I64[Hp - 16] = R2;
           I64[Hp - 8] = R3;
           I64[Hp] = R4;
           R3 = Hp - 32;
           R2 = GHC.IO.Buffer.summaryBuffer5_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.$wsummaryBuffer_info" {
     GHC.IO.Buffer.$wsummaryBuffer_info:
         const GHC.IO.Buffer.$wsummaryBuffer_entry;
         const 0;
         const 12884901902;
         const 12884901904;
         const S7Qhb_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.236169148 UTC

[section ""data" . GHC.IO.Buffer.summaryBuffer_closure" {
     GHC.IO.Buffer.summaryBuffer_closure:
         const GHC.IO.Buffer.summaryBuffer_info;
         const 0;
 },
 GHC.IO.Buffer.summaryBuffer_entry() //  [R2]
         { []
         }
     {offset
       c7Qib: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7Qic; else goto c7Qid;
       c7Qic: // global
           R2 = R2;
           R1 = GHC.IO.Buffer.summaryBuffer_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Qid: // global
           I64[Sp - 8] = block_c7Qi8_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Qih; else goto c7Qi9;
       u7Qih: // global
           call _c7Qi8(R1) args: 0, res: 0, upd: 0;
       c7Qi9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.summaryBuffer_info" {
     GHC.IO.Buffer.summaryBuffer_info:
         const GHC.IO.Buffer.summaryBuffer_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S7Qhb_srt+8;
 },
 _c7Qi8() //  [R1]
         { []
         }
     {offset
       c7Qi8: // global
           R4 = I64[R1 + 47];
           R3 = I64[R1 + 39];
           R2 = I64[R1 + 31];
           Sp = Sp + 8;
           call GHC.IO.Buffer.$wsummaryBuffer_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Qi8_info" {
     block_c7Qi8_info:
         const _c7Qi8;
         const 0;
         const 4294967326;
         const S7Qhb_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.241974292 UTC

[section ""cstring" . GHC.IO.Buffer.$trModule4_bytes" {
     GHC.IO.Buffer.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.243658184 UTC

[section ""data" . GHC.IO.Buffer.$trModule3_closure" {
     GHC.IO.Buffer.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Buffer.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.245449441 UTC

[section ""cstring" . GHC.IO.Buffer.$trModule2_bytes" {
     GHC.IO.Buffer.$trModule2_bytes:
         I8[] [71,72,67,46,73,79,46,66,117,102,102,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.247170534 UTC

[section ""data" . GHC.IO.Buffer.$trModule1_closure" {
     GHC.IO.Buffer.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Buffer.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.249288354 UTC

[section ""data" . GHC.IO.Buffer.$trModule_closure" {
     GHC.IO.Buffer.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.IO.Buffer.$trModule3_closure+1;
         const GHC.IO.Buffer.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.250967647 UTC

[section ""data" . $krep_r7OJJ_closure" {
     $krep_r7OJJ_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.252656996 UTC

[section ""data" . $krep1_r7OJK_closure" {
     $krep1_r7OJK_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.254507589 UTC

[section ""data" . $krep2_r7OJL_closure" {
     $krep2_r7OJL_closure:
         const :_con_info;
         const $krep1_r7OJK_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.256321056 UTC

[section ""data" . $krep3_r7OJM_closure" {
     $krep3_r7OJM_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ForeignPtr.$tcForeignPtr_closure;
         const $krep2_r7OJL_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.258797314 UTC

[section ""cstring" . GHC.IO.Buffer.$tcBufferState2_bytes" {
     GHC.IO.Buffer.$tcBufferState2_bytes:
         I8[] [66,117,102,102,101,114,83,116,97,116,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.260471875 UTC

[section ""data" . GHC.IO.Buffer.$tcBufferState1_closure" {
     GHC.IO.Buffer.$tcBufferState1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Buffer.$tcBufferState2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.262309583 UTC

[section ""data" . GHC.IO.Buffer.$tcBufferState_closure" {
     GHC.IO.Buffer.$tcBufferState_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Buffer.$trModule_closure+1;
         const GHC.IO.Buffer.$tcBufferState1_closure+1;
         const GHC.Types.krep$*_closure;
         const 15354245406219544442;
         const 3075510984364124805;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.264225687 UTC

[section ""data" . GHC.IO.Buffer.$tc'ReadBuffer1_closure" {
     GHC.IO.Buffer.$tc'ReadBuffer1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Buffer.$tcBufferState_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.266478442 UTC

[section ""cstring" . GHC.IO.Buffer.$tc'ReadBuffer3_bytes" {
     GHC.IO.Buffer.$tc'ReadBuffer3_bytes:
         I8[] [39,82,101,97,100,66,117,102,102,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.268128041 UTC

[section ""data" . GHC.IO.Buffer.$tc'ReadBuffer2_closure" {
     GHC.IO.Buffer.$tc'ReadBuffer2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Buffer.$tc'ReadBuffer3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.270503135 UTC

[section ""data" . GHC.IO.Buffer.$tc'ReadBuffer_closure" {
     GHC.IO.Buffer.$tc'ReadBuffer_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Buffer.$trModule_closure+1;
         const GHC.IO.Buffer.$tc'ReadBuffer2_closure+1;
         const GHC.IO.Buffer.$tc'ReadBuffer1_closure+1;
         const 18127629064171759490;
         const 12249378994783130540;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.272355205 UTC

[section ""cstring" . GHC.IO.Buffer.$tc'WriteBuffer2_bytes" {
     GHC.IO.Buffer.$tc'WriteBuffer2_bytes:
         I8[] [39,87,114,105,116,101,66,117,102,102,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.274166386 UTC

[section ""data" . GHC.IO.Buffer.$tc'WriteBuffer1_closure" {
     GHC.IO.Buffer.$tc'WriteBuffer1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Buffer.$tc'WriteBuffer2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.276332253 UTC

[section ""data" . GHC.IO.Buffer.$tc'WriteBuffer_closure" {
     GHC.IO.Buffer.$tc'WriteBuffer_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Buffer.$trModule_closure+1;
         const GHC.IO.Buffer.$tc'WriteBuffer1_closure+1;
         const GHC.IO.Buffer.$tc'ReadBuffer1_closure+1;
         const 17535537923682101798;
         const 5353421715631386637;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.278136474 UTC

[section ""cstring" . GHC.IO.Buffer.$tcBuffer2_bytes" {
     GHC.IO.Buffer.$tcBuffer2_bytes:
         I8[] [66,117,102,102,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.279784826 UTC

[section ""data" . GHC.IO.Buffer.$tcBuffer1_closure" {
     GHC.IO.Buffer.$tcBuffer1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Buffer.$tcBuffer2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.28211396 UTC

[section ""data" . GHC.IO.Buffer.$tcBuffer_closure" {
     GHC.IO.Buffer.$tcBuffer_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Buffer.$trModule_closure+1;
         const GHC.IO.Buffer.$tcBuffer1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 18372445388029251215;
         const 8106905342043791875;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.284363659 UTC

[section ""data" . $krep4_r7OJN_closure" {
     $krep4_r7OJN_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Buffer.$tcBuffer_closure+1;
         const $krep2_r7OJL_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.286048546 UTC

[section ""data" . $krep5_r7OJO_closure" {
     $krep5_r7OJO_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r7OJJ_closure+1;
         const $krep4_r7OJN_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.287731461 UTC

[section ""data" . $krep6_r7OJP_closure" {
     $krep6_r7OJP_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r7OJJ_closure+1;
         const $krep5_r7OJO_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.289619903 UTC

[section ""data" . $krep7_r7OJQ_closure" {
     $krep7_r7OJQ_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r7OJJ_closure+1;
         const $krep6_r7OJP_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.291460745 UTC

[section ""data" . $krep8_r7OJR_closure" {
     $krep8_r7OJR_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.IO.Buffer.$tc'ReadBuffer1_closure+1;
         const $krep7_r7OJQ_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.293985789 UTC

[section ""data" . GHC.IO.Buffer.$tc'Buffer1_closure" {
     GHC.IO.Buffer.$tc'Buffer1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r7OJM_closure+1;
         const $krep8_r7OJR_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.295762734 UTC

[section ""cstring" . GHC.IO.Buffer.$tc'Buffer3_bytes" {
     GHC.IO.Buffer.$tc'Buffer3_bytes:
         I8[] [39,66,117,102,102,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.297428347 UTC

[section ""data" . GHC.IO.Buffer.$tc'Buffer2_closure" {
     GHC.IO.Buffer.$tc'Buffer2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Buffer.$tc'Buffer3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.299364762 UTC

[section ""data" . GHC.IO.Buffer.$tc'Buffer_closure" {
     GHC.IO.Buffer.$tc'Buffer_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Buffer.$trModule_closure+1;
         const GHC.IO.Buffer.$tc'Buffer2_closure+1;
         const GHC.IO.Buffer.$tc'Buffer1_closure+4;
         const 6953290879310668230;
         const 8839152842293094522;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.303507921 UTC

[section ""data" . GHC.IO.Buffer.writeWord8Buf1_closure" {
     GHC.IO.Buffer.writeWord8Buf1_closure:
         const GHC.IO.Buffer.writeWord8Buf1_info;
 },
 GHC.IO.Buffer.writeWord8Buf1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c7Qj4: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7Qjd; else goto c7Qje;
       c7Qjd: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Buffer.writeWord8Buf1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Qje: // global
           I64[Sp - 24] = block_c7Qj1_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7Qjr; else goto c7Qj2;
       u7Qjr: // global
           call _c7Qj1(R1) args: 0, res: 0, upd: 0;
       c7Qj2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.writeWord8Buf1_info" {
     GHC.IO.Buffer.writeWord8Buf1_info:
         const GHC.IO.Buffer.writeWord8Buf1_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c7Qj1() //  [R1]
         { []
         }
     {offset
       c7Qj1: // global
           I64[Sp - 8] = block_c7Qj7_info;
           _s7Q0u::P64 = P64[R1 + 7];
           _s7Q0t::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s7Q0u::P64;
           I64[Sp + 8] = _s7Q0t::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Qjq; else goto c7Qj8;
       u7Qjq: // global
           call _c7Qj7(R1) args: 0, res: 0, upd: 0;
       c7Qj8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Qj1_info" {
     block_c7Qj1_info:
         const _c7Qj1;
         const 2;
         const 30;
 },
 _c7Qj7() //  [R1]
         { []
         }
     {offset
       c7Qj7: // global
           I64[Sp] = block_c7Qjc_info;
           _s7Q0w::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s7Q0w::I64;
           if (R1 & 7 != 0) goto u7Qjs; else goto c7Qjh;
       u7Qjs: // global
           call _c7Qjc(R1) args: 0, res: 0, upd: 0;
       c7Qjh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Qj7_info" {
     block_c7Qj7_info:
         const _c7Qj7;
         const 131;
         const 30;
 },
 _c7Qjc() //  [R1]
         { []
         }
     {offset
       c7Qjc: // global
           _s7Q0u::P64 = P64[Sp + 8];
           I8[I64[Sp + 16] + I64[Sp + 24]] = %MO_UU_Conv_W64_W8(I64[R1 + 7]);
           call MO_Touch(_s7Q0u::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Qjc_info" {
     block_c7Qjc_info:
         const _c7Qjc;
         const 387;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.312983489 UTC

[section ""data" . GHC.IO.Buffer.writeWord8Buf_closure" {
     GHC.IO.Buffer.writeWord8Buf_closure:
         const GHC.IO.Buffer.writeWord8Buf_info;
 },
 GHC.IO.Buffer.writeWord8Buf_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c7QjW: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.IO.Buffer.writeWord8Buf1_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.writeWord8Buf_info" {
     GHC.IO.Buffer.writeWord8Buf_info:
         const GHC.IO.Buffer.writeWord8Buf_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.317485221 UTC

[section ""data" . GHC.IO.Buffer.readWord8Buf1_closure" {
     GHC.IO.Buffer.readWord8Buf1_closure:
         const GHC.IO.Buffer.readWord8Buf1_info;
 },
 GHC.IO.Buffer.readWord8Buf1_entry() //  [R2, R3]
         { []
         }
     {offset
       c7Qka: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7Qkn; else goto c7Qko;
       c7Qkn: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Buffer.readWord8Buf1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Qko: // global
           I64[Sp - 16] = block_c7Qk7_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Qku; else goto c7Qk8;
       u7Qku: // global
           call _c7Qk7(R1) args: 0, res: 0, upd: 0;
       c7Qk8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.readWord8Buf1_info" {
     GHC.IO.Buffer.readWord8Buf1_info:
         const GHC.IO.Buffer.readWord8Buf1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c7Qk7() //  [R1]
         { []
         }
     {offset
       c7Qk7: // global
           I64[Sp - 8] = block_c7Qkd_info;
           _s7Q0H::P64 = P64[R1 + 7];
           _s7Q0G::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s7Q0H::P64;
           I64[Sp + 8] = _s7Q0G::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Qkt; else goto c7Qke;
       u7Qkt: // global
           call _c7Qkd(R1) args: 0, res: 0, upd: 0;
       c7Qke: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Qk7_info" {
     block_c7Qk7_info:
         const _c7Qk7;
         const 1;
         const 30;
 },
 _c7Qkd() //  [R1]
         { []
         }
     {offset
       c7Qkd: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7Qks; else goto c7Qkr;
       c7Qks: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Qkr: // global
           _s7Q0N::I64 = %MO_UU_Conv_W8_W64(I8[I64[Sp + 16] + I64[R1 + 7]]);
           call MO_Touch(P64[Sp + 8]);
           I64[Hp - 8] = GHC.Word.W8#_con_info;
           I64[Hp] = _s7Q0N::I64;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Qkd_info" {
     block_c7Qkd_info:
         const _c7Qkd;
         const 130;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.325768762 UTC

[section ""data" . GHC.IO.Buffer.readWord8Buf_closure" {
     GHC.IO.Buffer.readWord8Buf_closure:
         const GHC.IO.Buffer.readWord8Buf_info;
 },
 GHC.IO.Buffer.readWord8Buf_entry() //  [R2, R3]
         { []
         }
     {offset
       c7QkS: // global
           R3 = R3;
           R2 = R2;
           call GHC.IO.Buffer.readWord8Buf1_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.readWord8Buf_info" {
     GHC.IO.Buffer.readWord8Buf_info:
         const GHC.IO.Buffer.readWord8Buf_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.330652351 UTC

[section ""data" . GHC.IO.Buffer.bufferAdd_closure" {
     GHC.IO.Buffer.bufferAdd_closure:
         const GHC.IO.Buffer.bufferAdd_info;
 },
 GHC.IO.Buffer.bufferAdd_entry() //  [R2, R3]
         { []
         }
     {offset
       c7Ql6: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c7Qli; else goto c7Qlj;
       c7Qli: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Buffer.bufferAdd_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Qlj: // global
           I64[Sp - 16] = block_c7Ql3_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Qlp; else goto c7Ql4;
       u7Qlp: // global
           call _c7Ql3(R1) args: 0, res: 0, upd: 0;
       c7Ql4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.bufferAdd_info" {
     GHC.IO.Buffer.bufferAdd_info:
         const GHC.IO.Buffer.bufferAdd_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c7Ql3() //  [R1]
         { []
         }
     {offset
       c7Ql3: // global
           I64[Sp - 40] = block_c7Ql9_info;
           _s7Q0U::P64 = P64[R1 + 7];
           _s7Q0V::P64 = P64[R1 + 15];
           _s7Q0T::I64 = I64[R1 + 23];
           _s7Q0W::I64 = I64[R1 + 31];
           _s7Q0X::I64 = I64[R1 + 39];
           _s7Q0Y::I64 = I64[R1 + 47];
           R1 = P64[Sp + 8];
           P64[Sp - 32] = _s7Q0V::P64;
           I64[Sp - 24] = _s7Q0W::I64;
           I64[Sp - 16] = _s7Q0X::I64;
           I64[Sp - 8] = _s7Q0Y::I64;
           P64[Sp] = _s7Q0U::P64;
           I64[Sp + 8] = _s7Q0T::I64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u7Qlo; else goto c7Qla;
       u7Qlo: // global
           call _c7Ql9(R1) args: 0, res: 0, upd: 0;
       c7Qla: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Ql3_info" {
     block_c7Ql3_info:
         const _c7Ql3;
         const 1;
         const 30;
 },
 _c7Ql9() //  [R1]
         { []
         }
     {offset
       c7Ql9: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c7Qln; else goto c7Qlm;
       c7Qln: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Qlm: // global
           _s7Q11::I64 = I64[Sp + 32] + I64[R1 + 7];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = P64[Sp + 40];
           P64[Hp - 32] = P64[Sp + 8];
           I64[Hp - 24] = I64[Sp + 48];
           I64[Hp - 16] = I64[Sp + 16];
           I64[Hp - 8] = I64[Sp + 24];
           I64[Hp] = _s7Q11::I64;
           R1 = Hp - 47;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Ql9_info" {
     block_c7Ql9_info:
         const _c7Ql9;
         const 2950;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.340746729 UTC

[section ""data" . GHC.IO.Buffer.bufferRemove_closure" {
     GHC.IO.Buffer.bufferRemove_closure:
         const GHC.IO.Buffer.bufferRemove_info;
 },
 GHC.IO.Buffer.bufferRemove_entry() //  [R2, R3]
         { []
         }
     {offset
       c7QlV: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c7QlZ; else goto c7Qm0;
       c7QlZ: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Buffer.bufferRemove_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Qm0: // global
           I64[Sp - 16] = block_c7QlS_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Qmm; else goto c7QlT;
       u7Qmm: // global
           call _c7QlS(R1) args: 0, res: 0, upd: 0;
       c7QlT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.bufferRemove_info" {
     GHC.IO.Buffer.bufferRemove_info:
         const GHC.IO.Buffer.bufferRemove_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c7QlS() //  [R1]
         { []
         }
     {offset
       c7QlS: // global
           I64[Sp - 40] = block_c7QlY_info;
           _s7Q16::P64 = P64[R1 + 7];
           _s7Q17::P64 = P64[R1 + 15];
           _s7Q15::I64 = I64[R1 + 23];
           _s7Q18::I64 = I64[R1 + 31];
           _s7Q19::I64 = I64[R1 + 39];
           _s7Q1a::I64 = I64[R1 + 47];
           R1 = P64[Sp + 8];
           P64[Sp - 32] = _s7Q17::P64;
           I64[Sp - 24] = _s7Q18::I64;
           I64[Sp - 16] = _s7Q19::I64;
           I64[Sp - 8] = _s7Q1a::I64;
           P64[Sp] = _s7Q16::P64;
           I64[Sp + 8] = _s7Q15::I64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u7Qml; else goto c7Qm2;
       u7Qml: // global
           call _c7QlY(R1) args: 0, res: 0, upd: 0;
       c7Qm2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7QlS_info" {
     block_c7QlS_info:
         const _c7QlS;
         const 1;
         const 30;
 },
 _c7QlY() //  [R1]
         { []
         }
     {offset
       c7QlY: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c7Qm8; else goto c7Qm7;
       c7Qm8: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Qm7: // global
           _s7Q15::I64 = I64[Sp + 48];
           _s7Q16::P64 = P64[Sp + 40];
           _s7Q17::P64 = P64[Sp + 8];
           _s7Q18::I64 = I64[Sp + 16];
           _s7Q1a::I64 = I64[Sp + 32];
           _s7Q1d::I64 = I64[Sp + 24] + I64[R1 + 7];
           if (_s7Q1d::I64 == _s7Q1a::I64) goto c7Qmk; else goto c7Qmh;
       c7Qmk: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _s7Q16::P64;
           P64[Hp - 32] = _s7Q17::P64;
           I64[Hp - 24] = _s7Q15::I64;
           I64[Hp - 16] = _s7Q18::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           R1 = Hp - 47;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7Qmh: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _s7Q16::P64;
           P64[Hp - 32] = _s7Q17::P64;
           I64[Hp - 24] = _s7Q15::I64;
           I64[Hp - 16] = _s7Q18::I64;
           I64[Hp - 8] = _s7Q1d::I64;
           I64[Hp] = _s7Q1a::I64;
           R1 = Hp - 47;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7QlY_info" {
     block_c7QlY_info:
         const _c7QlY;
         const 2950;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.350063181 UTC

[section ""data" . GHC.IO.Buffer.bufferAvailable_closure" {
     GHC.IO.Buffer.bufferAvailable_closure:
         const GHC.IO.Buffer.bufferAvailable_info;
 },
 GHC.IO.Buffer.bufferAvailable_entry() //  [R2]
         { []
         }
     {offset
       c7QmP: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7QmW; else goto c7QmX;
       c7QmW: // global
           R2 = R2;
           R1 = GHC.IO.Buffer.bufferAvailable_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7QmX: // global
           I64[Sp - 8] = block_c7QmM_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Qn1; else goto c7QmN;
       u7Qn1: // global
           call _c7QmM(R1) args: 0, res: 0, upd: 0;
       c7QmN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.bufferAvailable_info" {
     GHC.IO.Buffer.bufferAvailable_info:
         const GHC.IO.Buffer.bufferAvailable_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c7QmM() //  [R1]
         { []
         }
     {offset
       c7QmM: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7Qn0; else goto c7QmZ;
       c7Qn0: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7QmZ: // global
           _s7Q1n::I64 = I64[R1 + 31] - I64[R1 + 47];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s7Q1n::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7QmM_info" {
     block_c7QmM_info:
         const _c7QmM;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.358229472 UTC

[section ""data" . GHC.IO.Buffer.bufferElems_closure" {
     GHC.IO.Buffer.bufferElems_closure:
         const GHC.IO.Buffer.bufferElems_info;
 },
 GHC.IO.Buffer.bufferElems_entry() //  [R2]
         { []
         }
     {offset
       c7Qnn: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7Qnu; else goto c7Qnv;
       c7Qnu: // global
           R2 = R2;
           R1 = GHC.IO.Buffer.bufferElems_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Qnv: // global
           I64[Sp - 8] = block_c7Qnk_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Qnz; else goto c7Qnl;
       u7Qnz: // global
           call _c7Qnk(R1) args: 0, res: 0, upd: 0;
       c7Qnl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.bufferElems_info" {
     GHC.IO.Buffer.bufferElems_info:
         const GHC.IO.Buffer.bufferElems_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c7Qnk() //  [R1]
         { []
         }
     {offset
       c7Qnk: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7Qny; else goto c7Qnx;
       c7Qny: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Qnx: // global
           _s7Q1w::I64 = I64[R1 + 47] - I64[R1 + 39];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s7Q1w::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Qnk_info" {
     block_c7Qnk_info:
         const _c7Qnk;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.366443321 UTC

[section ""cstring" . lvl_r7OJS_bytes" {
     lvl_r7OJS_bytes:
         I8[] [98,117,102,102,101,114,32,105,110,118,97,114,105,97,110,116,32,118,105,111,108,97,116,105,111,110,58,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.37111213 UTC

[section ""data" . GHC.IO.Buffer.$wlvl_closure" {
     GHC.IO.Buffer.$wlvl_closure:
         const GHC.IO.Buffer.$wlvl_info;
         const 0;
 },
 sat_s7Q1A_entry() //  [R1]
         { []
         }
     {offset
       c7QnX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7QnY; else goto c7QnZ;
       c7QnY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7QnZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = I64[R1 + 32];
           R3 = I64[R1 + 24];
           R2 = I64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Buffer.$wsummaryBuffer_entry(R4,
                                                    R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7Q1A_info" {
     sat_s7Q1A_info:
         const sat_s7Q1A_entry;
         const 12884901888;
         const 4294967311;
         const S7Qhb_srt+8;
 },
 GHC.IO.Buffer.$wlvl_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c7Qo2: // global
           _s7Q1z::I64 = R4;
           _s7Q1y::I64 = R3;
           _s7Q1x::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c7Qo3; else goto c7Qo4;
       c7Qo4: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c7Qo6; else goto c7Qo5;
       c7Qo6: // global
           HpAlloc = 40;
           goto c7Qo3;
       c7Qo3: // global
           R4 = _s7Q1z::I64;
           R3 = _s7Q1y::I64;
           R2 = _s7Q1x::I64;
           R1 = GHC.IO.Buffer.$wlvl_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Qo5: // global
           I64[Hp - 32] = sat_s7Q1A_info;
           I64[Hp - 16] = _s7Q1x::I64;
           I64[Hp - 8] = _s7Q1y::I64;
           I64[Hp] = _s7Q1z::I64;
           I64[Sp - 8] = block_c7Qo0_info;
           R3 = Hp - 32;
           R2 = lvl_r7OJS_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.$wlvl_info" {
     GHC.IO.Buffer.$wlvl_info:
         const GHC.IO.Buffer.$wlvl_entry;
         const 0;
         const 55834574862;
         const 12884901904;
         const S7Qhb_srt+8;
 },
 _c7Qo0() //  [R1]
         { []
         }
     {offset
       c7Qo0: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Qo0_info" {
     block_c7Qo0_info:
         const _c7Qo0;
         const 0;
         const 4294967326;
         const S7Qhb_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.381327205 UTC

[section ""data" . GHC.IO.Buffer.checkBuffer2_closure" {
     GHC.IO.Buffer.checkBuffer2_closure:
         const GHC.IO.Buffer.checkBuffer2_info;
         const 0;
 },
 GHC.IO.Buffer.checkBuffer2_entry() //  [R2, R3]
         { []
         }
     {offset
       c7Qot: // global
           R4 = R3;
           R3 = 0;
           R2 = R2;
           call GHC.IO.Buffer.$wlvl_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.checkBuffer2_info" {
     GHC.IO.Buffer.checkBuffer2_info:
         const GHC.IO.Buffer.checkBuffer2_entry;
         const 0;
         const 4294967310;
         const 8589934604;
         const S7Qhb_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.389950762 UTC

[section ""data" . GHC.IO.Buffer.$wcheckBuffer_closure" {
     GHC.IO.Buffer.$wcheckBuffer_closure:
         const GHC.IO.Buffer.$wcheckBuffer_info;
         const 0;
 },
 GHC.IO.Buffer.$wcheckBuffer_slow() //  [R1]
         { []
         }
     {offset
       c7QoB: // global
           R5 = I64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.IO.Buffer.$wcheckBuffer_entry(R5,
                                                  R4,
                                                  R3,
                                                  R2,
                                                  R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.IO.Buffer.$wcheckBuffer_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c7QoK: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7QoL; else goto c7QoM;
       c7QoL: // global
           R1 = GHC.IO.Buffer.$wcheckBuffer_closure;
           P64[Sp - 32] = R2;
           I64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           I64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c7QoM: // global
           if (%MO_S_Le_W64(R3, 0)) goto u7QpU; else goto c7QoJ;
       u7QpU: // global
           I64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           I64[Sp - 8] = R5;
           Sp = Sp - 24;
           goto u7Qq7;
       c7QoJ: // global
           if (%MO_S_Gt_W64(R4, R5)) goto u7QpV; else goto c7QpR;
       u7QpV: // global
           I64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           I64[Sp - 8] = R5;
           Sp = Sp - 24;
           goto u7Qq7;
       c7QpR: // global
           if (%MO_S_Gt_W64(R5, R3)) goto u7QpW; else goto c7QpQ;
       u7QpW: // global
           I64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           I64[Sp - 8] = R5;
           Sp = Sp - 24;
           goto u7Qq7;
       u7Qq7: // global
           call _c7QpN() args: 0, res: 0, upd: 0;
       c7QpQ: // global
           if (R4 == R5) goto c7Qp6; else goto c7Qpz;
       c7Qp6: // global
           I64[Sp - 32] = block_c7Qp4_info;
           R1 = R2;
           I64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           I64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u7Qq3; else goto c7Qp7;
       u7Qq3: // global
           call _c7Qp4(R1) args: 0, res: 0, upd: 0;
       c7Qp7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7Qpz: // global
           I64[Sp - 32] = block_c7Qpy_info;
           R1 = R2;
           I64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           I64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u7Qq4; else goto c7QpA;
       u7Qq4: // global
           call _c7Qpy(R1) args: 0, res: 0, upd: 0;
       c7QpA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.$wcheckBuffer_info" {
     GHC.IO.Buffer.$wcheckBuffer_info:
         const GHC.IO.Buffer.$wcheckBuffer_entry;
         const 0;
         const 30064771086;
         const 21474836480;
         const S7Qhb_srt+32;
         const 900;
         const GHC.IO.Buffer.$wcheckBuffer_slow;
 },
 _c7Qp4() //  [R1]
         { []
         }
     {offset
       c7Qp4: // global
           _s7Q1F::I64 = I64[Sp + 8];
           _s7Q1H::I64 = I64[Sp + 24];
           if (R1 & 7 == 1) goto c7Qpn; else goto c7Qpw;
       c7Qpn: // global
           _s7Q1R::I64 = I64[Sp + 16];
           if (_s7Q1R::I64 != 0) goto c7Qpe; else goto c7Qpl;
       c7Qpe: // global
           R4 = _s7Q1H::I64;
           R3 = _s7Q1R::I64;
           R2 = _s7Q1F::I64;
           Sp = Sp + 32;
           call GHC.IO.Buffer.$wlvl_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
       c7Qpl: // global
           if (_s7Q1H::I64 == 0) goto u7QpZ; else goto c7Qpj;
       u7QpZ: // global
           Sp = Sp + 32;
           goto u7Qqa;
       c7Qpj: // global
           R3 = _s7Q1H::I64;
           R2 = _s7Q1F::I64;
           Sp = Sp + 32;
           call GHC.IO.Buffer.checkBuffer2_entry(R3,
                                                 R2) args: 8, res: 0, upd: 8;
       c7Qpw: // global
           if (%MO_S_Ge_W64(_s7Q1H::I64,
                            _s7Q1F::I64)) goto u7QpY; else goto u7QpX;
       u7QpY: // global
           Sp = Sp + 8;
           call _c7QpN() args: 0, res: 0, upd: 0;
       u7QpX: // global
           Sp = Sp + 32;
           goto u7Qqa;
       u7Qqa: // global
           call _c7QpO() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c7Qp4_info" {
     block_c7Qp4_info:
         const _c7Qp4;
         const 451;
         const 21474836510;
         const S7Qhb_srt+32;
 },
 _c7Qpy() //  [R1]
         { []
         }
     {offset
       c7Qpy: // global
           if (R1 & 7 == 1) goto u7Qq0; else goto c7QpP;
       u7Qq0: // global
           Sp = Sp + 32;
           goto u7Qqc;
       c7QpP: // global
           if (%MO_S_Ge_W64(I64[Sp + 24],
                            I64[Sp + 8])) goto u7Qq2; else goto u7Qq1;
       u7Qq2: // global
           Sp = Sp + 8;
           call _c7QpN() args: 0, res: 0, upd: 0;
       u7Qq1: // global
           Sp = Sp + 32;
           goto u7Qqc;
       u7Qqc: // global
           call _c7QpO() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c7Qpy_info" {
     block_c7Qpy_info:
         const _c7Qpy;
         const 451;
         const 4294967326;
         const S7Qhb_srt+32;
 },
 _c7QpN() //  []
         { []
         }
     {offset
       c7QpN: // global
           R4 = I64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = I64[Sp];
           Sp = Sp + 24;
           call GHC.IO.Buffer.$wlvl_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 _c7QpO() //  []
         { []
         }
     {offset
       c7QpO: // global
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.402599723 UTC

[section ""data" . GHC.IO.Buffer.checkBuffer1_closure" {
     GHC.IO.Buffer.checkBuffer1_closure:
         const GHC.IO.Buffer.checkBuffer1_info;
         const 0;
 },
 GHC.IO.Buffer.checkBuffer1_entry() //  [R2]
         { []
         }
     {offset
       c7QqN: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7QqO; else goto c7QqP;
       c7QqO: // global
           R2 = R2;
           R1 = GHC.IO.Buffer.checkBuffer1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7QqP: // global
           I64[Sp - 8] = block_c7QqK_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7QqT; else goto c7QqL;
       u7QqT: // global
           call _c7QqK(R1) args: 0, res: 0, upd: 0;
       c7QqL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.checkBuffer1_info" {
     GHC.IO.Buffer.checkBuffer1_info:
         const GHC.IO.Buffer.checkBuffer1_entry;
         const 0;
         const 21474836494;
         const 8589934597;
         const S7Qhb_srt+40;
 },
 _c7QqK() //  [R1]
         { []
         }
     {offset
       c7QqK: // global
           R5 = I64[R1 + 47];
           R4 = I64[R1 + 39];
           R3 = I64[R1 + 31];
           R2 = P64[R1 + 15];
           Sp = Sp + 8;
           call GHC.IO.Buffer.$wcheckBuffer_entry(R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7QqK_info" {
     block_c7QqK_info:
         const _c7QqK;
         const 0;
         const 4294967326;
         const S7Qhb_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.40806952 UTC

[section ""data" . GHC.IO.Buffer.checkBuffer_closure" {
     GHC.IO.Buffer.checkBuffer_closure:
         const GHC.IO.Buffer.checkBuffer_info;
         const 0;
 },
 GHC.IO.Buffer.checkBuffer_entry() //  [R2]
         { []
         }
     {offset
       c7Qr8: // global
           R2 = R2;
           call GHC.IO.Buffer.checkBuffer1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.checkBuffer_info" {
     GHC.IO.Buffer.checkBuffer_info:
         const GHC.IO.Buffer.checkBuffer_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const S7Qhb_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.41461244 UTC

[section ""data" . GHC.IO.Buffer.newBuffer1_closure" {
     GHC.IO.Buffer.newBuffer1_closure:
         const GHC.IO.Buffer.newBuffer1_info;
         const 0;
 },
 sat_s7Q2q_entry() //  [R1]
         { []
         }
     {offset
       c7QrC: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c7QrK; else goto c7QrL;
       c7QrK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7QrL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_c7Qrz_info;
           _s7Q2b::P64 = P64[R1 + 24];
           _s7Q2i::P64 = P64[R1 + 32];
           _s7Q2l::P64 = P64[R1 + 40];
           R1 = P64[R1 + 16];
           P64[Sp - 40] = _s7Q2b::P64;
           P64[Sp - 32] = _s7Q2i::P64;
           P64[Sp - 24] = _s7Q2l::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u7QrP; else goto c7QrA;
       u7QrP: // global
           call _c7Qrz(R1) args: 0, res: 0, upd: 0;
       c7QrA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7Q2q_info" {
     sat_s7Q2q_info:
         const sat_s7Q2q_entry;
         const 4;
         const 15;
 },
 _c7Qrz() //  [R1]
         { []
         }
     {offset
       c7Qrz: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c7QrO; else goto c7QrN;
       c7QrO: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c7QrN: // global
           _s7Q2n::I64 = I64[R1 + 7];
           I64[Hp - 72] = GHC.ForeignPtr.MallocPtr_con_info;
           _s7Q2l::P64 = P64[Sp + 24];
           P64[Hp - 64] = _s7Q2l::P64;
           P64[Hp - 56] = P64[Sp + 16];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = Hp - 70;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _s7Q2l::P64 + 16;
           I64[Hp - 16] = _s7Q2n::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           R1 = Hp - 47;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c7Qrz_info" {
     block_c7Qrz_info:
         const _c7Qrz;
         const 3;
         const 30;
 },
 GHC.IO.Buffer.newBuffer1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c7QrQ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7QrR; else goto c7QrS;
       c7QrR: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Buffer.newBuffer1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7QrS: // global
           I64[Sp - 24] = block_c7Qrj_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7Qs1; else goto c7Qrk;
       u7Qs1: // global
           call _c7Qrj(R1) args: 0, res: 0, upd: 0;
       c7Qrk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.newBuffer1_info" {
     GHC.IO.Buffer.newBuffer1_info:
         const GHC.IO.Buffer.newBuffer1_entry;
         const 0;
         const 12884901902;
         const 17179869207;
         const S7Qhb_srt+64;
 },
 _c7Qrj() //  [R1]
         { []
         }
     {offset
       c7Qrj: // global
           _s7Q2e::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s7Q2e::I64, 0)) goto c7QrV; else goto c7Qs0;
       c7QrV: // global
           I64[Sp - 8] = block_c7Qrr_info;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           I64[Sp] = _s7Q2e::I64;
           Sp = Sp - 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
       c7Qs0: // global
           R1 = GHC.ForeignPtr.mallocForeignPtrBytes2_closure;
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Qrj_info" {
     block_c7Qrj_info:
         const _c7Qrj;
         const 2;
         const 4294967326;
         const S7Qhb_srt+64;
 },
 _c7Qrr() //  [R1]
         { []
         }
     {offset
       c7Qrr: // global
           I64[Sp] = block_c7Qrt_info;
           _s7Q2i::P64 = R1;
           R1 = I64[Sp + 8];
           P64[Sp + 8] = _s7Q2i::P64;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Qrr_info" {
     block_c7Qrr_info:
         const _c7Qrr;
         const 67;
         const 30;
 },
 _c7Qrt() //  [R1]
         { []
         }
     {offset
       c7Qrt: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c7QrZ; else goto c7QrY;
       c7QrZ: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7QrY: // global
           I64[Hp - 40] = sat_s7Q2q_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 40;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Qrt_info" {
     block_c7Qrt_info:
         const _c7Qrt;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.427892485 UTC

[section ""data" . GHC.IO.Buffer.newBuffer_closure" {
     GHC.IO.Buffer.newBuffer_closure:
         const GHC.IO.Buffer.newBuffer_info;
         const 0;
 },
 GHC.IO.Buffer.newBuffer_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c7QsL: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.IO.Buffer.newBuffer1_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.newBuffer_info" {
     GHC.IO.Buffer.newBuffer_info:
         const GHC.IO.Buffer.newBuffer_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const S7Qhb_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.432102873 UTC

[section ""data" . GHC.IO.Buffer.newByteBuffer1_closure" {
     GHC.IO.Buffer.newByteBuffer1_closure:
         const GHC.IO.Buffer.newByteBuffer1_info;
         const 0;
 },
 GHC.IO.Buffer.newByteBuffer1_entry() //  [R2, R3]
         { []
         }
     {offset
       c7QsW: // global
           R4 = R3;
           R3 = R2;
           R2 = R2;
           call GHC.IO.Buffer.newBuffer1_entry(R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.newByteBuffer1_info" {
     GHC.IO.Buffer.newByteBuffer1_info:
         const GHC.IO.Buffer.newByteBuffer1_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const S7Qhb_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.435582025 UTC

[section ""data" . GHC.IO.Buffer.newByteBuffer_closure" {
     GHC.IO.Buffer.newByteBuffer_closure:
         const GHC.IO.Buffer.newByteBuffer_info;
         const 0;
 },
 GHC.IO.Buffer.newByteBuffer_entry() //  [R2, R3]
         { []
         }
     {offset
       c7Qt7: // global
           R3 = R3;
           R2 = R2;
           call GHC.IO.Buffer.newByteBuffer1_entry(R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.newByteBuffer_info" {
     GHC.IO.Buffer.newByteBuffer_info:
         const GHC.IO.Buffer.newByteBuffer_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const S7Qhb_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.441583516 UTC

[section ""data" . GHC.IO.Buffer.newCharBuffer1_closure" {
     GHC.IO.Buffer.newCharBuffer1_closure:
         const GHC.IO.Buffer.newCharBuffer1_info;
         const 0;
 },
 GHC.IO.Buffer.newCharBuffer1_entry() //  [R2, R3]
         { []
         }
     {offset
       c7Qtl: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7Qtm; else goto c7Qtn;
       c7Qtm: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Buffer.newCharBuffer1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Qtn: // global
           I64[Sp - 16] = block_c7Qti_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7QtN; else goto c7Qtj;
       u7QtN: // global
           call _c7Qti(R1) args: 0, res: 0, upd: 0;
       c7Qtj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.newCharBuffer1_info" {
     GHC.IO.Buffer.newCharBuffer1_info:
         const GHC.IO.Buffer.newCharBuffer1_entry;
         const 0;
         const 38654705678;
         const 12884901903;
         const S7Qhb_srt+64;
 },
 _c7Qti() //  [R1]
         { []
         }
     {offset
       c7Qti: // global
           _s7Q2y::I64 = I64[R1 + 7];
           _s7Q2z::I64 = _s7Q2y::I64 << 2;
           if (%MO_S_Ge_W64(_s7Q2z::I64, 0)) goto c7QtH; else goto c7QtM;
       c7QtH: // global
           I64[Sp - 16] = block_c7Qtx_info;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           I64[Sp - 8] = _s7Q2z::I64;
           I64[Sp] = _s7Q2y::I64;
           Sp = Sp - 16;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
       c7QtM: // global
           R1 = GHC.ForeignPtr.mallocForeignPtrBytes2_closure;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Qti_info" {
     block_c7Qti_info:
         const _c7Qti;
         const 1;
         const 4294967326;
         const S7Qhb_srt+64;
 },
 _c7Qtx() //  [R1]
         { []
         }
     {offset
       c7Qtx: // global
           I64[Sp] = block_c7Qtz_info;
           _s7Q2D::P64 = R1;
           R1 = I64[Sp + 8];
           P64[Sp + 8] = _s7Q2D::P64;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Qtx_info" {
     block_c7Qtx_info:
         const _c7Qtx;
         const 195;
         const 30;
 },
 _c7Qtz() //  [R1]
         { []
         }
     {offset
       c7Qtz: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c7QtL; else goto c7QtK;
       c7QtL: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7QtK: // global
           I64[Hp - 72] = GHC.ForeignPtr.MallocPtr_con_info;
           P64[Hp - 64] = R1;
           P64[Hp - 56] = P64[Sp + 8];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = Hp - 70;
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = R1 + 16;
           I64[Hp - 16] = I64[Sp + 16];
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           R1 = Hp - 47;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Qtz_info" {
     block_c7Qtz_info:
         const _c7Qtz;
         const 131;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.454550462 UTC

[section ""data" . GHC.IO.Buffer.newCharBuffer_closure" {
     GHC.IO.Buffer.newCharBuffer_closure:
         const GHC.IO.Buffer.newCharBuffer_info;
         const 0;
 },
 GHC.IO.Buffer.newCharBuffer_entry() //  [R2, R3]
         { []
         }
     {offset
       c7Quj: // global
           R3 = R3;
           R2 = R2;
           call GHC.IO.Buffer.newCharBuffer1_entry(R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.newCharBuffer_info" {
     GHC.IO.Buffer.newCharBuffer_info:
         const GHC.IO.Buffer.newCharBuffer_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const S7Qhb_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.460339287 UTC

[section ""data" . GHC.IO.Buffer.slideContents1_closure" {
     GHC.IO.Buffer.slideContents1_closure:
         const GHC.IO.Buffer.slideContents1_info;
 },
 GHC.IO.Buffer.slideContents1_entry() //  [R2]
         { []
         }
     {offset
       c7Qux: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7QuP; else goto c7QuQ;
       c7QuP: // global
           R2 = R2;
           R1 = GHC.IO.Buffer.slideContents1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7QuQ: // global
           I64[Sp - 8] = block_c7Quu_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7QuU; else goto c7Quv;
       u7QuU: // global
           call _c7Quu(R1) args: 0, res: 0, upd: 0;
       c7Quv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.slideContents1_info" {
     GHC.IO.Buffer.slideContents1_info:
         const GHC.IO.Buffer.slideContents1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c7Quu() //  [R1]
         { []
         }
     {offset
       c7Quu: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c7QuT; else goto c7QuS;
       c7QuT: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7QuS: // global
           _s7Q2P::P64 = P64[R1 + 7];
           _s7Q2Q::P64 = P64[R1 + 15];
           _s7Q2O::I64 = I64[R1 + 23];
           _s7Q2R::I64 = I64[R1 + 31];
           _s7Q2S::I64 = I64[R1 + 39];
           _s7Q2U::I64 = I64[R1 + 47] - _s7Q2S::I64;
           (_s7Q30::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint,]  result hints:  [PtrHint] memmove(_s7Q2O::I64, _s7Q2O::I64 + _s7Q2S::I64, _s7Q2U::I64);
           call MO_Touch(_s7Q2P::P64);
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _s7Q2P::P64;
           P64[Hp - 32] = _s7Q2Q::P64;
           I64[Hp - 24] = _s7Q2O::I64;
           I64[Hp - 16] = _s7Q2R::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = _s7Q2U::I64;
           R1 = Hp - 47;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Quu_info" {
     block_c7Quu_info:
         const _c7Quu;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.468893582 UTC

[section ""data" . GHC.IO.Buffer.slideContents_closure" {
     GHC.IO.Buffer.slideContents_closure:
         const GHC.IO.Buffer.slideContents_info;
 },
 GHC.IO.Buffer.slideContents_entry() //  [R2]
         { []
         }
     {offset
       c7Qvf: // global
           R2 = R2;
           call GHC.IO.Buffer.slideContents1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.slideContents_info" {
     GHC.IO.Buffer.slideContents_info:
         const GHC.IO.Buffer.slideContents_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.475309435 UTC

[section ""data" . writeCharBufPtr1_r7OJT_closure" {
     writeCharBufPtr1_r7OJT_closure:
         const writeCharBufPtr1_r7OJT_info;
 },
 writeCharBufPtr1_r7OJT_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c7Qvt: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7QvK; else goto c7QvL;
       c7QvK: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = writeCharBufPtr1_r7OJT_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7QvL: // global
           I64[Sp - 24] = block_c7Qvq_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7QvS; else goto c7Qvr;
       u7QvS: // global
           call _c7Qvq(R1) args: 0, res: 0, upd: 0;
       c7Qvr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . writeCharBufPtr1_r7OJT_info" {
     writeCharBufPtr1_r7OJT_info:
         const writeCharBufPtr1_r7OJT_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c7Qvq() //  [R1]
         { []
         }
     {offset
       c7Qvq: // global
           I64[Sp] = block_c7Qvw_info;
           _s7Q38::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7Q38::I64;
           if (R1 & 7 != 0) goto u7QvR; else goto c7Qvx;
       u7QvR: // global
           call _c7Qvw(R1) args: 0, res: 0, upd: 0;
       c7Qvx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Qvq_info" {
     block_c7Qvq_info:
         const _c7Qvq;
         const 2;
         const 30;
 },
 _c7Qvw() //  [R1]
         { []
         }
     {offset
       c7Qvw: // global
           I64[Sp] = block_c7QvB_info;
           _s7Q3a::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s7Q3a::I64;
           if (R1 & 7 != 0) goto u7QvT; else goto c7QvC;
       u7QvT: // global
           call _c7QvB(R1) args: 0, res: 0, upd: 0;
       c7QvC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Qvw_info" {
     block_c7Qvw_info:
         const _c7Qvw;
         const 66;
         const 30;
 },
 _c7QvB() //  [R1]
         { []
         }
     {offset
       c7QvB: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7QvQ; else goto c7QvP;
       c7QvQ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7QvP: // global
           _s7Q3a::I64 = I64[Sp + 16];
           I32[I64[Sp + 8] + (_s7Q3a::I64 << 2)] = %MO_UU_Conv_W64_W32(I64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s7Q3a::I64 + 1;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7QvB_info" {
     block_c7QvB_info:
         const _c7QvB;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.488004672 UTC

[section ""data" . GHC.IO.Buffer.writeCharBufPtr_closure" {
     GHC.IO.Buffer.writeCharBufPtr_closure:
         const GHC.IO.Buffer.writeCharBufPtr_info;
 },
 GHC.IO.Buffer.writeCharBufPtr_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c7Qwn: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call writeCharBufPtr1_r7OJT_entry(R4,
                                             R3,
                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.writeCharBufPtr_info" {
     GHC.IO.Buffer.writeCharBufPtr_info:
         const GHC.IO.Buffer.writeCharBufPtr_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.494122002 UTC

[section ""data" . writeCharBuf1_r7OJU_closure" {
     writeCharBuf1_r7OJU_closure:
         const writeCharBuf1_r7OJU_info;
 },
 writeCharBuf1_r7OJU_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c7QwB: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7QwT; else goto c7QwU;
       c7QwT: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = writeCharBuf1_r7OJU_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7QwU: // global
           I64[Sp - 24] = block_c7Qwy_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u7Qx1; else goto c7Qwz;
       u7Qx1: // global
           call _c7Qwy(R1) args: 0, res: 0, upd: 0;
       c7Qwz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . writeCharBuf1_r7OJU_info" {
     writeCharBuf1_r7OJU_info:
         const writeCharBuf1_r7OJU_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c7Qwy() //  [R1]
         { []
         }
     {offset
       c7Qwy: // global
           I64[Sp - 8] = block_c7QwE_info;
           _s7Q3m::P64 = P64[R1 + 7];
           _s7Q3l::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s7Q3m::P64;
           I64[Sp + 8] = _s7Q3l::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Qx0; else goto c7QwF;
       u7Qx0: // global
           call _c7QwE(R1) args: 0, res: 0, upd: 0;
       c7QwF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Qwy_info" {
     block_c7Qwy_info:
         const _c7Qwy;
         const 2;
         const 30;
 },
 _c7QwE() //  [R1]
         { []
         }
     {offset
       c7QwE: // global
           I64[Sp] = block_c7QwJ_info;
           _s7Q3o::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s7Q3o::I64;
           if (R1 & 7 != 0) goto u7Qx2; else goto c7QwK;
       u7Qx2: // global
           call _c7QwJ(R1) args: 0, res: 0, upd: 0;
       c7QwK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7QwE_info" {
     block_c7QwE_info:
         const _c7QwE;
         const 131;
         const 30;
 },
 _c7QwJ() //  [R1]
         { []
         }
     {offset
       c7QwJ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7QwZ; else goto c7QwY;
       c7QwZ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7QwY: // global
           _s7Q3m::P64 = P64[Sp + 8];
           _s7Q3o::I64 = I64[Sp + 24];
           I32[I64[Sp + 16] + (_s7Q3o::I64 << 2)] = %MO_UU_Conv_W64_W32(I64[R1 + 7]);
           call MO_Touch(_s7Q3m::P64);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s7Q3o::I64 + 1;
           R1 = Hp - 7;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7QwJ_info" {
     block_c7QwJ_info:
         const _c7QwJ;
         const 387;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.503399491 UTC

[section ""data" . GHC.IO.Buffer.writeCharBuf_closure" {
     GHC.IO.Buffer.writeCharBuf_closure:
         const GHC.IO.Buffer.writeCharBuf_info;
 },
 GHC.IO.Buffer.writeCharBuf_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c7Qxw: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call writeCharBuf1_r7OJU_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.writeCharBuf_info" {
     GHC.IO.Buffer.writeCharBuf_info:
         const GHC.IO.Buffer.writeCharBuf_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.507927546 UTC

[section ""data" . readCharBufPtr1_r7OJV_closure" {
     readCharBufPtr1_r7OJV_closure:
         const readCharBufPtr1_r7OJV_info;
 },
 readCharBufPtr1_r7OJV_entry() //  [R2, R3]
         { []
         }
     {offset
       c7QxK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7QxY; else goto c7QxZ;
       c7QxY: // global
           R3 = R3;
           R2 = R2;
           R1 = readCharBufPtr1_r7OJV_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7QxZ: // global
           I64[Sp - 16] = block_c7QxH_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Qy5; else goto c7QxI;
       u7Qy5: // global
           call _c7QxH(R1) args: 0, res: 0, upd: 0;
       c7QxI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . readCharBufPtr1_r7OJV_info" {
     readCharBufPtr1_r7OJV_info:
         const readCharBufPtr1_r7OJV_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c7QxH() //  [R1]
         { []
         }
     {offset
       c7QxH: // global
           I64[Sp] = block_c7QxN_info;
           _s7Q3z::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s7Q3z::I64;
           if (R1 & 7 != 0) goto u7Qy4; else goto c7QxO;
       u7Qy4: // global
           call _c7QxN(R1) args: 0, res: 0, upd: 0;
       c7QxO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7QxH_info" {
     block_c7QxH_info:
         const _c7QxH;
         const 1;
         const 30;
 },
 _c7QxN() //  [R1]
         { []
         }
     {offset
       c7QxN: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c7Qy3; else goto c7Qy2;
       c7Qy3: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Qy2: // global
           _s7Q3B::I64 = I64[R1 + 7];
           I64[Hp - 48] = GHC.Types.I#_con_info;
           I64[Hp - 40] = _s7Q3B::I64 + 1;
           I64[Hp - 32] = GHC.Types.C#_con_info;
           I64[Hp - 24] = %MO_UU_Conv_W32_W64(I32[I64[Sp + 8] + (_s7Q3B::I64 << 2)]);
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7QxN_info" {
     block_c7QxN_info:
         const _c7QxN;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.515382789 UTC

[section ""data" . GHC.IO.Buffer.readCharBufPtr_closure" {
     GHC.IO.Buffer.readCharBufPtr_closure:
         const GHC.IO.Buffer.readCharBufPtr_info;
 },
 GHC.IO.Buffer.readCharBufPtr_entry() //  [R2, R3]
         { []
         }
     {offset
       c7Qyy: // global
           R3 = R3;
           R2 = R2;
           call readCharBufPtr1_r7OJV_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.readCharBufPtr_info" {
     GHC.IO.Buffer.readCharBufPtr_info:
         const GHC.IO.Buffer.readCharBufPtr_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.519986954 UTC

[section ""data" . readCharBuf1_r7OJW_closure" {
     readCharBuf1_r7OJW_closure:
         const readCharBuf1_r7OJW_info;
 },
 readCharBuf1_r7OJW_entry() //  [R2, R3]
         { []
         }
     {offset
       c7QyM: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7Qz1; else goto c7Qz2;
       c7Qz1: // global
           R3 = R3;
           R2 = R2;
           R1 = readCharBuf1_r7OJW_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Qz2: // global
           I64[Sp - 16] = block_c7QyJ_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Qz8; else goto c7QyK;
       u7Qz8: // global
           call _c7QyJ(R1) args: 0, res: 0, upd: 0;
       c7QyK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . readCharBuf1_r7OJW_info" {
     readCharBuf1_r7OJW_info:
         const readCharBuf1_r7OJW_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c7QyJ() //  [R1]
         { []
         }
     {offset
       c7QyJ: // global
           I64[Sp - 8] = block_c7QyP_info;
           _s7Q3O::P64 = P64[R1 + 7];
           _s7Q3N::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s7Q3O::P64;
           I64[Sp + 8] = _s7Q3N::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7Qz7; else goto c7QyQ;
       u7Qz7: // global
           call _c7QyP(R1) args: 0, res: 0, upd: 0;
       c7QyQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7QyJ_info" {
     block_c7QyJ_info:
         const _c7QyJ;
         const 1;
         const 30;
 },
 _c7QyP() //  [R1]
         { []
         }
     {offset
       c7QyP: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c7Qz6; else goto c7Qz5;
       c7Qz6: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Qz5: // global
           _s7Q3Q::I64 = I64[R1 + 7];
           _s7Q3T::I64 = %MO_UU_Conv_W32_W64(I32[I64[Sp + 16] + (_s7Q3Q::I64 << 2)]);
           call MO_Touch(P64[Sp + 8]);
           I64[Hp - 48] = GHC.Types.I#_con_info;
           I64[Hp - 40] = _s7Q3Q::I64 + 1;
           I64[Hp - 32] = GHC.Types.C#_con_info;
           I64[Hp - 24] = _s7Q3T::I64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7QyP_info" {
     block_c7QyP_info:
         const _c7QyP;
         const 130;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.528198161 UTC

[section ""data" . GHC.IO.Buffer.readCharBuf_closure" {
     GHC.IO.Buffer.readCharBuf_closure:
         const GHC.IO.Buffer.readCharBuf_info;
 },
 GHC.IO.Buffer.readCharBuf_entry() //  [R2, R3]
         { []
         }
     {offset
       c7QzA: // global
           R3 = R3;
           R2 = R2;
           call readCharBuf1_r7OJW_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.readCharBuf_info" {
     GHC.IO.Buffer.readCharBuf_info:
         const GHC.IO.Buffer.readCharBuf_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.532970425 UTC

[section ""data" . GHC.IO.Buffer.peekCharBuf1_closure" {
     GHC.IO.Buffer.peekCharBuf1_closure:
         const GHC.IO.Buffer.peekCharBuf1_info;
 },
 GHC.IO.Buffer.peekCharBuf1_entry() //  [R2, R3]
         { []
         }
     {offset
       c7QzO: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7QzY; else goto c7QzZ;
       c7QzY: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Buffer.peekCharBuf1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7QzZ: // global
           I64[Sp - 16] = block_c7QzL_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7QA5; else goto c7QzM;
       u7QA5: // global
           call _c7QzL(R1) args: 0, res: 0, upd: 0;
       c7QzM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.peekCharBuf1_info" {
     GHC.IO.Buffer.peekCharBuf1_info:
         const GHC.IO.Buffer.peekCharBuf1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c7QzL() //  [R1]
         { []
         }
     {offset
       c7QzL: // global
           I64[Sp - 8] = block_c7QzR_info;
           _s7Q44::P64 = P64[R1 + 7];
           _s7Q43::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s7Q44::P64;
           I64[Sp + 8] = _s7Q43::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7QA4; else goto c7QzS;
       u7QA4: // global
           call _c7QzR(R1) args: 0, res: 0, upd: 0;
       c7QzS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7QzL_info" {
     block_c7QzL_info:
         const _c7QzL;
         const 1;
         const 30;
 },
 _c7QzR() //  [R1]
         { []
         }
     {offset
       c7QzR: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7QA3; else goto c7QA2;
       c7QA3: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7QA2: // global
           _s7Q49::I64 = %MO_UU_Conv_W32_W64(I32[I64[Sp + 16] + (I64[R1 + 7] << 2)]);
           call MO_Touch(P64[Sp + 8]);
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = _s7Q49::I64;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7QzR_info" {
     block_c7QzR_info:
         const _c7QzR;
         const 130;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.54085218 UTC

[section ""data" . GHC.IO.Buffer.peekCharBuf_closure" {
     GHC.IO.Buffer.peekCharBuf_closure:
         const GHC.IO.Buffer.peekCharBuf_info;
 },
 GHC.IO.Buffer.peekCharBuf_entry() //  [R2, R3]
         { []
         }
     {offset
       c7QAt: // global
           R3 = R3;
           R2 = R2;
           call GHC.IO.Buffer.peekCharBuf1_entry(R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.peekCharBuf_info" {
     GHC.IO.Buffer.peekCharBuf_info:
         const GHC.IO.Buffer.peekCharBuf_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.543910913 UTC

[section ""data" . GHC.IO.Buffer.ReadBuffer_closure" {
     GHC.IO.Buffer.ReadBuffer_closure:
         const GHC.IO.Buffer.ReadBuffer_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.545609301 UTC

[section ""data" . GHC.IO.Buffer.WriteBuffer_closure" {
     GHC.IO.Buffer.WriteBuffer_closure:
         const GHC.IO.Buffer.WriteBuffer_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.548339691 UTC

[section ""data" . GHC.IO.Buffer.Buffer_closure" {
     GHC.IO.Buffer.Buffer_closure:
         const GHC.IO.Buffer.Buffer_info;
 },
 GHC.IO.Buffer.Buffer_slow() //  [R1]
         { []
         }
     {offset
       c7QAD: // global
           R6 = I64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.IO.Buffer.Buffer_entry(R6,
                                           R5,
                                           R4,
                                           R3,
                                           R2,
                                           R1) args: 16, res: 0, upd: 8;
     }
 },
 GHC.IO.Buffer.Buffer_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c7QAI: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c7QAM; else goto c7QAL;
       c7QAM: // global
           HpAlloc = 56;
           R1 = GHC.IO.Buffer.Buffer_closure;
           I64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           I64[Sp - 16] = R5;
           I64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 56, res: 0, upd: 8;
       c7QAL: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = R5;
           I64[Hp - 8] = R6;
           I64[Hp] = I64[Sp];
           R1 = Hp - 47;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.Buffer_info" {
     GHC.IO.Buffer.Buffer_info:
         const GHC.IO.Buffer.Buffer_entry;
         const 0;
         const 14;
         const 25769803776;
         const 0;
         const 3654;
         const GHC.IO.Buffer.Buffer_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.553634433 UTC

[section ""relreadonly" . GHC.IO.Buffer.BufferState_closure_tbl" {
     GHC.IO.Buffer.BufferState_closure_tbl:
         const GHC.IO.Buffer.ReadBuffer_closure+1;
         const GHC.IO.Buffer.WriteBuffer_closure+2;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.555534312 UTC

[section ""cstring" . i7QAY_str" {
     i7QAY_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,66,117,102,102,101,114,46,82,101,97,100,66,117,102,102,101,114]
 },
 GHC.IO.Buffer.ReadBuffer_con_entry() //  [R1]
         { []
         }
     {offset
       c7QAX: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.ReadBuffer_con_info" {
     GHC.IO.Buffer.ReadBuffer_con_info:
         const GHC.IO.Buffer.ReadBuffer_con_entry;
         const 4294967296;
         const 3;
         const i7QAY_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.56022285 UTC

[section ""cstring" . i7QB5_str" {
     i7QB5_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,66,117,102,102,101,114,46,87,114,105,116,101,66,117,102,102,101,114]
 },
 GHC.IO.Buffer.WriteBuffer_con_entry() //  [R1]
         { []
         }
     {offset
       c7QB4: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.WriteBuffer_con_info" {
     GHC.IO.Buffer.WriteBuffer_con_info:
         const GHC.IO.Buffer.WriteBuffer_con_entry;
         const 4294967296;
         const 4294967299;
         const i7QB5_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.565131813 UTC

[section ""cstring" . i7QBc_str" {
     i7QBc_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,66,117,102,102,101,114,46,66,117,102,102,101,114]
 },
 GHC.IO.Buffer.Buffer_con_entry() //  [R1]
         { []
         }
     {offset
       c7QBb: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Buffer.Buffer_con_info" {
     GHC.IO.Buffer.Buffer_con_info:
         const GHC.IO.Buffer.Buffer_con_entry;
         const 17179869186;
         const 1;
         const i7QBc_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:57.569766213 UTC

[section ""relreadonly" . S7Qhb_srt" {
     S7Qhb_srt:
         const GHC.IO.Buffer.summaryBuffer1_closure;
         const GHC.IO.Buffer.$wsummaryBuffer_closure;
         const GHC.IO.Buffer.summaryBuffer_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const GHC.IO.Buffer.$wlvl_closure;
         const GHC.IO.Buffer.$wcheckBuffer_closure;
         const GHC.IO.Buffer.checkBuffer2_closure;
         const GHC.IO.Buffer.checkBuffer1_closure;
         const GHC.ForeignPtr.mallocForeignPtrBytes2_closure;
         const GHC.IO.Buffer.newBuffer1_closure;
         const GHC.IO.Buffer.newByteBuffer1_closure;
         const GHC.IO.Buffer.newCharBuffer1_closure;
 }]

