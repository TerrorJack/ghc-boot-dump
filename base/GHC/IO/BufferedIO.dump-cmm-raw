
==================== Raw Cmm ====================
2018-03-16 16:03:14.82758065 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:03:14.829691787 UTC

[section ""data" . GHC.IO.BufferedIO.newBuffer_closure" {
     GHC.IO.BufferedIO.newBuffer_closure:
         const GHC.IO.BufferedIO.newBuffer_info;
 },
 GHC.IO.BufferedIO.newBuffer_entry() //  [R2]
         { []
         }
     {offset
       c882a: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c882b; else goto c882c;
       c882b: // global
           R2 = R2;
           R1 = GHC.IO.BufferedIO.newBuffer_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c882c: // global
           I64[Sp - 8] = block_c8827_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u882g; else goto c8828;
       u882g: // global
           call _c8827(R1) args: 0, res: 0, upd: 0;
       c8828: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.BufferedIO.newBuffer_info" {
     GHC.IO.BufferedIO.newBuffer_info:
         const GHC.IO.BufferedIO.newBuffer_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c8827() //  [R1]
         { []
         }
     {offset
       c8827: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8827_info" {
     block_c8827_info:
         const _c8827;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.835318826 UTC

[section ""data" . GHC.IO.BufferedIO.fillReadBuffer_closure" {
     GHC.IO.BufferedIO.fillReadBuffer_closure:
         const GHC.IO.BufferedIO.fillReadBuffer_info;
 },
 GHC.IO.BufferedIO.fillReadBuffer_entry() //  [R2]
         { []
         }
     {offset
       c882x: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c882y; else goto c882z;
       c882y: // global
           R2 = R2;
           R1 = GHC.IO.BufferedIO.fillReadBuffer_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c882z: // global
           I64[Sp - 8] = block_c882u_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u882D; else goto c882v;
       u882D: // global
           call _c882u(R1) args: 0, res: 0, upd: 0;
       c882v: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.BufferedIO.fillReadBuffer_info" {
     GHC.IO.BufferedIO.fillReadBuffer_info:
         const GHC.IO.BufferedIO.fillReadBuffer_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c882u() //  [R1]
         { []
         }
     {offset
       c882u: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c882u_info" {
     block_c882u_info:
         const _c882u;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.841288563 UTC

[section ""data" . GHC.IO.BufferedIO.fillReadBuffer0_closure" {
     GHC.IO.BufferedIO.fillReadBuffer0_closure:
         const GHC.IO.BufferedIO.fillReadBuffer0_info;
 },
 GHC.IO.BufferedIO.fillReadBuffer0_entry() //  [R2]
         { []
         }
     {offset
       c882U: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c882V; else goto c882W;
       c882V: // global
           R2 = R2;
           R1 = GHC.IO.BufferedIO.fillReadBuffer0_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c882W: // global
           I64[Sp - 8] = block_c882R_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8830; else goto c882S;
       u8830: // global
           call _c882R(R1) args: 0, res: 0, upd: 0;
       c882S: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.BufferedIO.fillReadBuffer0_info" {
     GHC.IO.BufferedIO.fillReadBuffer0_info:
         const GHC.IO.BufferedIO.fillReadBuffer0_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c882R() //  [R1]
         { []
         }
     {offset
       c882R: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c882R_info" {
     block_c882R_info:
         const _c882R;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.848397251 UTC

[section ""data" . GHC.IO.BufferedIO.emptyWriteBuffer_closure" {
     GHC.IO.BufferedIO.emptyWriteBuffer_closure:
         const GHC.IO.BufferedIO.emptyWriteBuffer_info;
 },
 GHC.IO.BufferedIO.emptyWriteBuffer_entry() //  [R2]
         { []
         }
     {offset
       c883h: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c883i; else goto c883j;
       c883i: // global
           R2 = R2;
           R1 = GHC.IO.BufferedIO.emptyWriteBuffer_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c883j: // global
           I64[Sp - 8] = block_c883e_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u883n; else goto c883f;
       u883n: // global
           call _c883e(R1) args: 0, res: 0, upd: 0;
       c883f: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.BufferedIO.emptyWriteBuffer_info" {
     GHC.IO.BufferedIO.emptyWriteBuffer_info:
         const GHC.IO.BufferedIO.emptyWriteBuffer_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c883e() //  [R1]
         { []
         }
     {offset
       c883e: // global
           R1 = P64[R1 + 31];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c883e_info" {
     block_c883e_info:
         const _c883e;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.853808371 UTC

[section ""data" . GHC.IO.BufferedIO.flushWriteBuffer_closure" {
     GHC.IO.BufferedIO.flushWriteBuffer_closure:
         const GHC.IO.BufferedIO.flushWriteBuffer_info;
 },
 GHC.IO.BufferedIO.flushWriteBuffer_entry() //  [R2]
         { []
         }
     {offset
       c883E: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c883F; else goto c883G;
       c883F: // global
           R2 = R2;
           R1 = GHC.IO.BufferedIO.flushWriteBuffer_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c883G: // global
           I64[Sp - 8] = block_c883B_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u883K; else goto c883C;
       u883K: // global
           call _c883B(R1) args: 0, res: 0, upd: 0;
       c883C: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.BufferedIO.flushWriteBuffer_info" {
     GHC.IO.BufferedIO.flushWriteBuffer_info:
         const GHC.IO.BufferedIO.flushWriteBuffer_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c883B() //  [R1]
         { []
         }
     {offset
       c883B: // global
           R1 = P64[R1 + 39];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c883B_info" {
     block_c883B_info:
         const _c883B;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.859786908 UTC

[section ""data" . GHC.IO.BufferedIO.flushWriteBuffer0_closure" {
     GHC.IO.BufferedIO.flushWriteBuffer0_closure:
         const GHC.IO.BufferedIO.flushWriteBuffer0_info;
 },
 GHC.IO.BufferedIO.flushWriteBuffer0_entry() //  [R2]
         { []
         }
     {offset
       c8841: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8842; else goto c8843;
       c8842: // global
           R2 = R2;
           R1 = GHC.IO.BufferedIO.flushWriteBuffer0_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8843: // global
           I64[Sp - 8] = block_c883Y_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8847; else goto c883Z;
       u8847: // global
           call _c883Y(R1) args: 0, res: 0, upd: 0;
       c883Z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.BufferedIO.flushWriteBuffer0_info" {
     GHC.IO.BufferedIO.flushWriteBuffer0_info:
         const GHC.IO.BufferedIO.flushWriteBuffer0_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c883Y() //  [R1]
         { []
         }
     {offset
       c883Y: // global
           R1 = P64[R1 + 47];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c883Y_info" {
     block_c883Y_info:
         const _c883Y;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.866906673 UTC

[section ""data" . $dmemptyWriteBuffer1_r87Lu_closure" {
     $dmemptyWriteBuffer1_r87Lu_closure:
         const $dmemptyWriteBuffer1_r87Lu_info;
 },
 sat_s87N1_entry() //  [R1]
         { []
         }
     {offset
       c884s: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c884w; else goto c884x;
       c884w: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c884x: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c884p_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u884B; else goto c884q;
       u884B: // global
           call _c884p(R1) args: 0, res: 0, upd: 0;
       c884q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s87N1_info" {
     sat_s87N1_info:
         const sat_s87N1_entry;
         const 1;
         const 16;
 },
 _c884p() //  [R1]
         { []
         }
     {offset
       c884p: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c884A; else goto c884z;
       c884A: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c884z: // global
           _s87MW::P64 = P64[R1 + 7];
           _s87MV::I64 = I64[R1 + 23];
           _s87MY::I64 = I64[R1 + 31];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _s87MW::P64;
           P64[Hp - 32] = GHC.IO.Buffer.WriteBuffer_closure+2;
           I64[Hp - 24] = _s87MV::I64;
           I64[Hp - 16] = _s87MY::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           R1 = Hp - 47;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c884p_info" {
     block_c884p_info:
         const _c884p;
         const 0;
         const 30;
 },
 $dmemptyWriteBuffer1_r87Lu_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c884C: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c884G; else goto c884F;
       c884G: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = $dmemptyWriteBuffer1_r87Lu_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c884F: // global
           I64[Hp - 16] = sat_s87N1_info;
           P64[Hp] = R4;
           R1 = Hp - 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $dmemptyWriteBuffer1_r87Lu_info" {
     $dmemptyWriteBuffer1_r87Lu_info:
         const $dmemptyWriteBuffer1_r87Lu_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.874303877 UTC

[section ""data" . GHC.IO.BufferedIO.$dmemptyWriteBuffer_closure" {
     GHC.IO.BufferedIO.$dmemptyWriteBuffer_closure:
         const GHC.IO.BufferedIO.$dmemptyWriteBuffer_info;
 },
 GHC.IO.BufferedIO.$dmemptyWriteBuffer_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c884Z: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call $dmemptyWriteBuffer1_r87Lu_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.BufferedIO.$dmemptyWriteBuffer_info" {
     GHC.IO.BufferedIO.$dmemptyWriteBuffer_info:
         const GHC.IO.BufferedIO.$dmemptyWriteBuffer_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.880527232 UTC

[section ""data" . GHC.IO.BufferedIO.$wreadBuf_closure" {
     GHC.IO.BufferedIO.$wreadBuf_closure:
         const GHC.IO.BufferedIO.$wreadBuf_info;
 },
 GHC.IO.BufferedIO.$wreadBuf_slow() //  [R1]
         { []
         }
     {offset
       c8857: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.IO.BufferedIO.$wreadBuf_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2,
                                                  R1) args: 32, res: 0, upd: 8;
     }
 },
 sat_s87Nm_entry() //  [R1]
         { []
         }
     {offset
       c885t: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c885A; else goto c885B;
       c885A: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c885B: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 72] = block_c885q_info;
           _s87N5::P64 = P64[R1 + 16];
           _s87N6::P64 = P64[R1 + 24];
           _s87N4::I64 = I64[R1 + 40];
           _s87N7::I64 = I64[R1 + 48];
           _s87N8::I64 = I64[R1 + 56];
           _s87N9::I64 = I64[R1 + 64];
           R1 = P64[R1 + 32];
           I64[Sp - 64] = _s87N4::I64;
           P64[Sp - 56] = _s87N5::P64;
           P64[Sp - 48] = _s87N6::P64;
           I64[Sp - 40] = _s87N7::I64;
           I64[Sp - 32] = _s87N8::I64;
           I64[Sp - 24] = _s87N9::I64;
           Sp = Sp - 72;
           if (R1 & 7 != 0) goto u885F; else goto c885r;
       u885F: // global
           call _c885q(R1) args: 0, res: 0, upd: 0;
       c885r: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s87Nm_info" {
     sat_s87Nm_info:
         const sat_s87Nm_entry;
         const 17179869187;
         const 15;
 },
 _c885q() //  [R1]
         { []
         }
     {offset
       c885q: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c885E; else goto c885D;
       c885E: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c885D: // global
           _s87Nl::I64 = I64[Sp + 48] + I64[R1 + 7];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 24];
           I64[Hp - 24] = I64[Sp + 8];
           I64[Hp - 16] = I64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = _s87Nl::I64;
           R1 = Hp - 47;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c885q_info" {
     block_c885q_info:
         const _c885q;
         const 3654;
         const 30;
 },
 GHC.IO.BufferedIO.$wreadBuf_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c885G: // global
           _s87N6::P64 = R6;
           _s87N5::P64 = R5;
           _s87N4::I64 = R4;
           _s87N3::P64 = R3;
           _s87N2::P64 = R2;
           if ((Sp + -64) < SpLim) (likely: False) goto c885I; else goto c885J;
       c885J: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c885L; else goto c885K;
       c885L: // global
           HpAlloc = 32;
           goto c885I;
       c885I: // global
           R1 = GHC.IO.BufferedIO.$wreadBuf_closure;
           P64[Sp - 40] = _s87N2::P64;
           P64[Sp - 32] = _s87N3::P64;
           I64[Sp - 24] = _s87N4::I64;
           P64[Sp - 16] = _s87N5::P64;
           P64[Sp - 8] = _s87N6::P64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       c885K: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           _s87N9::I64 = I64[Sp + 16];
           I64[Hp - 16] = I64[Sp] - _s87N9::I64;
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s87N4::I64 + _s87N9::I64;
           I64[Sp - 32] = block_c885j_info;
           R2 = _s87N2::P64;
           I64[Sp - 64] = stg_ap_pppv_info;
           P64[Sp - 56] = _s87N3::P64;
           P64[Sp - 48] = Hp - 7;
           P64[Sp - 40] = Hp - 23;
           I64[Sp - 24] = _s87N4::I64;
           P64[Sp - 16] = _s87N5::P64;
           P64[Sp - 8] = _s87N6::P64;
           Sp = Sp - 64;
           call GHC.IO.Device.read_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.BufferedIO.$wreadBuf_info" {
     GHC.IO.BufferedIO.$wreadBuf_info:
         const GHC.IO.BufferedIO.$wreadBuf_entry;
         const 0;
         const 14;
         const 38654705664;
         const 0;
         const 14600;
         const GHC.IO.BufferedIO.$wreadBuf_slow;
 },
 _c885j() //  [R1]
         { []
         }
     {offset
       c885j: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c885O; else goto c885N;
       c885O: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c885N: // global
           _s87N4::I64 = I64[Sp + 8];
           _s87N5::P64 = P64[Sp + 16];
           _s87N6::P64 = P64[Sp + 24];
           _s87N7::I64 = I64[Sp + 32];
           _s87N8::I64 = I64[Sp + 40];
           _s87N9::I64 = I64[Sp + 48];
           call MO_Touch(_s87N5::P64);
           I64[Hp - 88] = sat_s87Nm_info;
           P64[Hp - 72] = _s87N5::P64;
           P64[Hp - 64] = _s87N6::P64;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = _s87N4::I64;
           I64[Hp - 40] = _s87N7::I64;
           I64[Hp - 32] = _s87N8::I64;
           I64[Hp - 24] = _s87N9::I64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 88;
           R1 = Hp - 15;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c885j_info" {
     block_c885j_info:
         const _c885j;
         const 3654;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.892429645 UTC

[section ""data" . GHC.IO.BufferedIO.readBuf1_closure" {
     GHC.IO.BufferedIO.readBuf1_closure:
         const GHC.IO.BufferedIO.readBuf1_info;
 },
 GHC.IO.BufferedIO.readBuf1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c886u: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c886v; else goto c886w;
       c886v: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.BufferedIO.readBuf1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c886w: // global
           I64[Sp - 24] = block_c886r_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u886A; else goto c886s;
       u886A: // global
           call _c886r(R1) args: 0, res: 0, upd: 0;
       c886s: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.BufferedIO.readBuf1_info" {
     GHC.IO.BufferedIO.readBuf1_info:
         const GHC.IO.BufferedIO.readBuf1_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c886r() //  [R1]
         { []
         }
     {offset
       c886r: // global
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = I64[R1 + 23];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           I64[Sp] = I64[R1 + 31];
           I64[Sp + 8] = I64[R1 + 39];
           I64[Sp + 16] = I64[R1 + 47];
           call GHC.IO.BufferedIO.$wreadBuf_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c886r_info" {
     block_c886r_info:
         const _c886r;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.89807823 UTC

[section ""data" . GHC.IO.BufferedIO.readBuf_closure" {
     GHC.IO.BufferedIO.readBuf_closure:
         const GHC.IO.BufferedIO.readBuf_info;
 },
 GHC.IO.BufferedIO.readBuf_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c886R: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.IO.BufferedIO.readBuf1_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.BufferedIO.readBuf_info" {
     GHC.IO.BufferedIO.readBuf_info:
         const GHC.IO.BufferedIO.readBuf_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.905426562 UTC

[section ""data" . GHC.IO.BufferedIO.$wreadBufNonBlocking_closure" {
     GHC.IO.BufferedIO.$wreadBufNonBlocking_closure:
         const GHC.IO.BufferedIO.$wreadBufNonBlocking_info;
 },
 GHC.IO.BufferedIO.$wreadBufNonBlocking_slow() //  [R1]
         { []
         }
     {offset
       c886Z: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.IO.BufferedIO.$wreadBufNonBlocking_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2,
                                                             R1) args: 32, res: 0, upd: 8;
     }
 },
 sat_s87NX_entry() //  [R1]
         { []
         }
     {offset
       c887r: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c887y; else goto c887z;
       c887y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c887z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 72] = block_c887o_info;
           _s87NC::P64 = P64[R1 + 16];
           _s87ND::P64 = P64[R1 + 24];
           _s87NB::I64 = I64[R1 + 40];
           _s87NE::I64 = I64[R1 + 48];
           _s87NF::I64 = I64[R1 + 56];
           _s87NG::I64 = I64[R1 + 64];
           R1 = P64[R1 + 32];
           I64[Sp - 64] = _s87NB::I64;
           P64[Sp - 56] = _s87NC::P64;
           P64[Sp - 48] = _s87ND::P64;
           I64[Sp - 40] = _s87NE::I64;
           I64[Sp - 32] = _s87NF::I64;
           I64[Sp - 24] = _s87NG::I64;
           Sp = Sp - 72;
           if (R1 & 7 != 0) goto u887D; else goto c887p;
       u887D: // global
           call _c887o(R1) args: 0, res: 0, upd: 0;
       c887p: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s87NX_info" {
     sat_s87NX_info:
         const sat_s87NX_entry;
         const 17179869187;
         const 15;
 },
 _c887o() //  [R1]
         { []
         }
     {offset
       c887o: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c887C; else goto c887B;
       c887C: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c887B: // global
           _s87NW::I64 = I64[Sp + 48] + I64[R1 + 7];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 24];
           I64[Hp - 24] = I64[Sp + 8];
           I64[Hp - 16] = I64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = _s87NW::I64;
           R1 = Hp - 47;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c887o_info" {
     block_c887o_info:
         const _c887o;
         const 3654;
         const 30;
 },
 GHC.IO.BufferedIO.$wreadBufNonBlocking_entry() //  [R2, R3, R4, R5,
                                                     R6]
         { []
         }
     {offset
       c887E: // global
           _s87ND::P64 = R6;
           _s87NC::P64 = R5;
           _s87NB::I64 = R4;
           _s87NA::P64 = R3;
           _s87Nz::P64 = R2;
           if ((Sp + -64) < SpLim) (likely: False) goto c887F; else goto c887G;
       c887G: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c887I; else goto c887H;
       c887I: // global
           HpAlloc = 32;
           goto c887F;
       c887F: // global
           R1 = GHC.IO.BufferedIO.$wreadBufNonBlocking_closure;
           P64[Sp - 40] = _s87Nz::P64;
           P64[Sp - 32] = _s87NA::P64;
           I64[Sp - 24] = _s87NB::I64;
           P64[Sp - 16] = _s87NC::P64;
           P64[Sp - 8] = _s87ND::P64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       c887H: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           _s87NG::I64 = I64[Sp + 16];
           I64[Hp - 16] = I64[Sp] - _s87NG::I64;
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s87NB::I64 + _s87NG::I64;
           I64[Sp - 32] = block_c887b_info;
           R2 = _s87Nz::P64;
           I64[Sp - 64] = stg_ap_pppv_info;
           P64[Sp - 56] = _s87NA::P64;
           P64[Sp - 48] = Hp - 7;
           P64[Sp - 40] = Hp - 23;
           I64[Sp - 24] = _s87NB::I64;
           P64[Sp - 16] = _s87NC::P64;
           P64[Sp - 8] = _s87ND::P64;
           Sp = Sp - 64;
           call GHC.IO.Device.readNonBlocking_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.BufferedIO.$wreadBufNonBlocking_info" {
     GHC.IO.BufferedIO.$wreadBufNonBlocking_info:
         const GHC.IO.BufferedIO.$wreadBufNonBlocking_entry;
         const 0;
         const 14;
         const 38654705664;
         const 0;
         const 14600;
         const GHC.IO.BufferedIO.$wreadBufNonBlocking_slow;
 },
 _c887b() //  [R1]
         { []
         }
     {offset
       c887b: // global
           call MO_Touch(P64[Sp + 16]);
           I64[Sp] = block_c887e_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u887Y; else goto c887f;
       u887Y: // global
           call _c887e(R1) args: 0, res: 0, upd: 0;
       c887f: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c887b_info" {
     block_c887b_info:
         const _c887b;
         const 3654;
         const 30;
 },
 _c887e() //  [R1]
         { []
         }
     {offset
       c887e: // global
           _s87NB::I64 = I64[Sp + 8];
           _s87NC::P64 = P64[Sp + 16];
           _s87ND::P64 = P64[Sp + 24];
           _s87NE::I64 = I64[Sp + 32];
           _s87NF::I64 = I64[Sp + 40];
           _s87NG::I64 = I64[Sp + 48];
           if (R1 & 7 == 1) goto c887O; else goto c887T;
       c887O: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c887R; else goto c887Q;
       c887R: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c887Q: // global
           I64[Hp - 72] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 64] = _s87NC::P64;
           P64[Hp - 56] = _s87ND::P64;
           I64[Hp - 48] = _s87NB::I64;
           I64[Hp - 40] = _s87NE::I64;
           I64[Hp - 32] = _s87NF::I64;
           I64[Hp - 24] = _s87NG::I64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = GHC.Base.Nothing_closure+1;
           P64[Hp] = Hp - 71;
           R1 = Hp - 15;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c887T: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c887W; else goto c887V;
       c887W: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c887V: // global
           _s87NT::P64 = P64[R1 + 6];
           I64[Hp - 88] = sat_s87NX_info;
           P64[Hp - 72] = _s87NC::P64;
           P64[Hp - 64] = _s87ND::P64;
           P64[Hp - 56] = _s87NT::P64;
           I64[Hp - 48] = _s87NB::I64;
           I64[Hp - 40] = _s87NE::I64;
           I64[Hp - 32] = _s87NF::I64;
           I64[Hp - 24] = _s87NG::I64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 88;
           R1 = Hp - 15;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c887e_info" {
     block_c887e_info:
         const _c887e;
         const 3654;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.919051824 UTC

[section ""data" . GHC.IO.BufferedIO.readBufNonBlocking1_closure" {
     GHC.IO.BufferedIO.readBufNonBlocking1_closure:
         const GHC.IO.BufferedIO.readBufNonBlocking1_info;
 },
 GHC.IO.BufferedIO.readBufNonBlocking1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c888M: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c888N; else goto c888O;
       c888N: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.BufferedIO.readBufNonBlocking1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c888O: // global
           I64[Sp - 24] = block_c888J_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u888S; else goto c888K;
       u888S: // global
           call _c888J(R1) args: 0, res: 0, upd: 0;
       c888K: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.BufferedIO.readBufNonBlocking1_info" {
     GHC.IO.BufferedIO.readBufNonBlocking1_info:
         const GHC.IO.BufferedIO.readBufNonBlocking1_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c888J() //  [R1]
         { []
         }
     {offset
       c888J: // global
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = I64[R1 + 23];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           I64[Sp] = I64[R1 + 31];
           I64[Sp + 8] = I64[R1 + 39];
           I64[Sp + 16] = I64[R1 + 47];
           call GHC.IO.BufferedIO.$wreadBufNonBlocking_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c888J_info" {
     block_c888J_info:
         const _c888J;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.924930062 UTC

[section ""data" . GHC.IO.BufferedIO.readBufNonBlocking_closure" {
     GHC.IO.BufferedIO.readBufNonBlocking_closure:
         const GHC.IO.BufferedIO.readBufNonBlocking_info;
 },
 GHC.IO.BufferedIO.readBufNonBlocking_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8899: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.IO.BufferedIO.readBufNonBlocking1_entry(R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.BufferedIO.readBufNonBlocking_info" {
     GHC.IO.BufferedIO.readBufNonBlocking_info:
         const GHC.IO.BufferedIO.readBufNonBlocking_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.930343556 UTC

[section ""data" . GHC.IO.BufferedIO.$wwriteBuf_closure" {
     GHC.IO.BufferedIO.$wwriteBuf_closure:
         const GHC.IO.BufferedIO.$wwriteBuf_info;
 },
 GHC.IO.BufferedIO.$wwriteBuf_slow() //  [R1]
         { []
         }
     {offset
       c889h: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.IO.BufferedIO.$wwriteBuf_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2,
                                                   R1) args: 32, res: 0, upd: 8;
     }
 },
 GHC.IO.BufferedIO.$wwriteBuf_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c889n: // global
           _s87Oe::P64 = R6;
           _s87Od::P64 = R5;
           _s87Oc::I64 = R4;
           _s87Ob::P64 = R3;
           _s87Oa::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto c889y; else goto c889z;
       c889z: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c889B; else goto c889A;
       c889B: // global
           HpAlloc = 32;
           goto c889y;
       c889y: // global
           R1 = GHC.IO.BufferedIO.$wwriteBuf_closure;
           P64[Sp - 40] = _s87Oa::P64;
           P64[Sp - 32] = _s87Ob::P64;
           I64[Sp - 24] = _s87Oc::I64;
           P64[Sp - 16] = _s87Od::P64;
           P64[Sp - 8] = _s87Oe::P64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       c889A: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           _s87Og::I64 = I64[Sp + 8];
           I64[Hp - 16] = I64[Sp + 16] - _s87Og::I64;
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s87Oc::I64 + _s87Og::I64;
           I64[Sp - 16] = block_c889u_info;
           R2 = _s87Oa::P64;
           I64[Sp - 48] = stg_ap_pppv_info;
           P64[Sp - 40] = _s87Ob::P64;
           P64[Sp - 32] = Hp - 7;
           P64[Sp - 24] = Hp - 23;
           P64[Sp - 8] = _s87Oe::P64;
           P64[Sp + 8] = _s87Od::P64;
           I64[Sp + 16] = _s87Oc::I64;
           Sp = Sp - 48;
           call GHC.IO.Device.write_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.BufferedIO.$wwriteBuf_info" {
     GHC.IO.BufferedIO.$wwriteBuf_info:
         const GHC.IO.BufferedIO.$wwriteBuf_entry;
         const 0;
         const 14;
         const 38654705664;
         const 0;
         const 14600;
         const GHC.IO.BufferedIO.$wwriteBuf_slow;
 },
 _c889u() //  [R1]
         { []
         }
     {offset
       c889u: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c889E; else goto c889D;
       c889E: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c889D: // global
           _s87Oc::I64 = I64[Sp + 32];
           _s87Od::P64 = P64[Sp + 24];
           _s87Oe::P64 = P64[Sp + 8];
           _s87Of::I64 = I64[Sp + 16];
           call MO_Touch(_s87Od::P64);
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _s87Od::P64;
           P64[Hp - 32] = _s87Oe::P64;
           I64[Hp - 24] = _s87Oc::I64;
           I64[Hp - 16] = _s87Of::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           R1 = Hp - 47;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c889u_info" {
     block_c889u_info:
         const _c889u;
         const 644;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.938374705 UTC

[section ""data" . GHC.IO.BufferedIO.writeBuf1_closure" {
     GHC.IO.BufferedIO.writeBuf1_closure:
         const GHC.IO.BufferedIO.writeBuf1_info;
 },
 GHC.IO.BufferedIO.writeBuf1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c88a3: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c88a4; else goto c88a5;
       c88a4: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.BufferedIO.writeBuf1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c88a5: // global
           I64[Sp - 24] = block_c88a0_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u88a9; else goto c88a1;
       u88a9: // global
           call _c88a0(R1) args: 0, res: 0, upd: 0;
       c88a1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.BufferedIO.writeBuf1_info" {
     GHC.IO.BufferedIO.writeBuf1_info:
         const GHC.IO.BufferedIO.writeBuf1_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c88a0() //  [R1]
         { []
         }
     {offset
       c88a0: // global
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = I64[R1 + 23];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           I64[Sp] = I64[R1 + 31];
           I64[Sp + 8] = I64[R1 + 39];
           I64[Sp + 16] = I64[R1 + 47];
           call GHC.IO.BufferedIO.$wwriteBuf_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c88a0_info" {
     block_c88a0_info:
         const _c88a0;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.944988049 UTC

[section ""data" . GHC.IO.BufferedIO.writeBuf_closure" {
     GHC.IO.BufferedIO.writeBuf_closure:
         const GHC.IO.BufferedIO.writeBuf_info;
 },
 GHC.IO.BufferedIO.writeBuf_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c88aq: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.IO.BufferedIO.writeBuf1_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.BufferedIO.writeBuf_info" {
     GHC.IO.BufferedIO.writeBuf_info:
         const GHC.IO.BufferedIO.writeBuf_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.951415744 UTC

[section ""data" . GHC.IO.BufferedIO.$wwriteBufNonBlocking_closure" {
     GHC.IO.BufferedIO.$wwriteBufNonBlocking_closure:
         const GHC.IO.BufferedIO.$wwriteBufNonBlocking_info;
 },
 GHC.IO.BufferedIO.$wwriteBufNonBlocking_slow() //  [R1]
         { []
         }
     {offset
       c88ay: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.IO.BufferedIO.$wwriteBufNonBlocking_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2,
                                                              R1) args: 32, res: 0, upd: 8;
     }
 },
 sat_s87OY_entry() //  [R1]
         { []
         }
     {offset
       c88aU: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c88aV; else goto c88aW;
       c88aV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c88aW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 72] = block_c88aR_info;
           _s87OG::P64 = P64[R1 + 16];
           _s87OH::P64 = P64[R1 + 24];
           _s87OF::I64 = I64[R1 + 40];
           _s87OI::I64 = I64[R1 + 48];
           _s87OJ::I64 = I64[R1 + 56];
           _s87OK::I64 = I64[R1 + 64];
           R1 = P64[R1 + 32];
           I64[Sp - 64] = _s87OF::I64;
           P64[Sp - 56] = _s87OG::P64;
           P64[Sp - 48] = _s87OH::P64;
           I64[Sp - 40] = _s87OI::I64;
           I64[Sp - 32] = _s87OJ::I64;
           I64[Sp - 24] = _s87OK::I64;
           Sp = Sp - 72;
           if (R1 & 7 != 0) goto u88be; else goto c88aS;
       u88be: // global
           call _c88aR(R1) args: 0, res: 0, upd: 0;
       c88aS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s87OY_info" {
     sat_s87OY_info:
         const sat_s87OY_entry;
         const 17179869187;
         const 15;
 },
 _c88aR() //  [R1]
         { []
         }
     {offset
       c88aR: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c88b1; else goto c88b0;
       c88b1: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c88b0: // global
           _s87OF::I64 = I64[Sp + 8];
           _s87OG::P64 = P64[Sp + 16];
           _s87OH::P64 = P64[Sp + 24];
           _s87OI::I64 = I64[Sp + 32];
           _s87OK::I64 = I64[Sp + 48];
           _s87OW::I64 = I64[Sp + 40] + I64[R1 + 7];
           if (_s87OW::I64 == _s87OK::I64) goto c88bd; else goto c88ba;
       c88bd: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _s87OG::P64;
           P64[Hp - 32] = _s87OH::P64;
           I64[Hp - 24] = _s87OF::I64;
           I64[Hp - 16] = _s87OI::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           R1 = Hp - 47;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c88ba: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _s87OG::P64;
           P64[Hp - 32] = _s87OH::P64;
           I64[Hp - 24] = _s87OF::I64;
           I64[Hp - 16] = _s87OI::I64;
           I64[Hp - 8] = _s87OW::I64;
           I64[Hp] = _s87OK::I64;
           R1 = Hp - 47;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c88aR_info" {
     block_c88aR_info:
         const _c88aR;
         const 3654;
         const 30;
 },
 GHC.IO.BufferedIO.$wwriteBufNonBlocking_entry() //  [R2, R3, R4,
                                                      R5, R6]
         { []
         }
     {offset
       c88bf: // global
           _s87OH::P64 = R6;
           _s87OG::P64 = R5;
           _s87OF::I64 = R4;
           _s87OE::P64 = R3;
           _s87OD::P64 = R2;
           if ((Sp + -64) < SpLim) (likely: False) goto c88bh; else goto c88bi;
       c88bi: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c88bk; else goto c88bj;
       c88bk: // global
           HpAlloc = 32;
           goto c88bh;
       c88bh: // global
           R1 = GHC.IO.BufferedIO.$wwriteBufNonBlocking_closure;
           P64[Sp - 40] = _s87OD::P64;
           P64[Sp - 32] = _s87OE::P64;
           I64[Sp - 24] = _s87OF::I64;
           P64[Sp - 16] = _s87OG::P64;
           P64[Sp - 8] = _s87OH::P64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       c88bj: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           _s87OJ::I64 = I64[Sp + 8];
           I64[Hp - 16] = I64[Sp + 16] - _s87OJ::I64;
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s87OF::I64 + _s87OJ::I64;
           I64[Sp - 32] = block_c88aK_info;
           R2 = _s87OD::P64;
           I64[Sp - 64] = stg_ap_pppv_info;
           P64[Sp - 56] = _s87OE::P64;
           P64[Sp - 48] = Hp - 7;
           P64[Sp - 40] = Hp - 23;
           I64[Sp - 24] = _s87OF::I64;
           P64[Sp - 16] = _s87OG::P64;
           P64[Sp - 8] = _s87OH::P64;
           Sp = Sp - 64;
           call GHC.IO.Device.writeNonBlocking_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.BufferedIO.$wwriteBufNonBlocking_info" {
     GHC.IO.BufferedIO.$wwriteBufNonBlocking_info:
         const GHC.IO.BufferedIO.$wwriteBufNonBlocking_entry;
         const 0;
         const 14;
         const 38654705664;
         const 0;
         const 14600;
         const GHC.IO.BufferedIO.$wwriteBufNonBlocking_slow;
 },
 _c88aK() //  [R1]
         { []
         }
     {offset
       c88aK: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c88bn; else goto c88bm;
       c88bn: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c88bm: // global
           _s87OF::I64 = I64[Sp + 8];
           _s87OG::P64 = P64[Sp + 16];
           _s87OH::P64 = P64[Sp + 24];
           _s87OI::I64 = I64[Sp + 32];
           _s87OJ::I64 = I64[Sp + 40];
           _s87OK::I64 = I64[Sp + 48];
           call MO_Touch(_s87OG::P64);
           I64[Hp - 88] = sat_s87OY_info;
           P64[Hp - 72] = _s87OG::P64;
           P64[Hp - 64] = _s87OH::P64;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = _s87OF::I64;
           I64[Hp - 40] = _s87OI::I64;
           I64[Hp - 32] = _s87OJ::I64;
           I64[Hp - 24] = _s87OK::I64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 88;
           R1 = Hp - 15;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c88aK_info" {
     block_c88aK_info:
         const _c88aK;
         const 3654;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.963831238 UTC

[section ""data" . GHC.IO.BufferedIO.writeBufNonBlocking1_closure" {
     GHC.IO.BufferedIO.writeBufNonBlocking1_closure:
         const GHC.IO.BufferedIO.writeBufNonBlocking1_info;
 },
 GHC.IO.BufferedIO.writeBufNonBlocking1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c88bZ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c88c0; else goto c88c1;
       c88c0: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.BufferedIO.writeBufNonBlocking1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c88c1: // global
           I64[Sp - 24] = block_c88bW_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u88c5; else goto c88bX;
       u88c5: // global
           call _c88bW(R1) args: 0, res: 0, upd: 0;
       c88bX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.BufferedIO.writeBufNonBlocking1_info" {
     GHC.IO.BufferedIO.writeBufNonBlocking1_info:
         const GHC.IO.BufferedIO.writeBufNonBlocking1_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c88bW() //  [R1]
         { []
         }
     {offset
       c88bW: // global
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = I64[R1 + 23];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           I64[Sp] = I64[R1 + 31];
           I64[Sp + 8] = I64[R1 + 39];
           I64[Sp + 16] = I64[R1 + 47];
           call GHC.IO.BufferedIO.$wwriteBufNonBlocking_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c88bW_info" {
     block_c88bW_info:
         const _c88bW;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.969193787 UTC

[section ""data" . GHC.IO.BufferedIO.writeBufNonBlocking_closure" {
     GHC.IO.BufferedIO.writeBufNonBlocking_closure:
         const GHC.IO.BufferedIO.writeBufNonBlocking_info;
 },
 GHC.IO.BufferedIO.writeBufNonBlocking_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c88cm: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.IO.BufferedIO.writeBufNonBlocking1_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.BufferedIO.writeBufNonBlocking_info" {
     GHC.IO.BufferedIO.writeBufNonBlocking_info:
         const GHC.IO.BufferedIO.writeBufNonBlocking_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.972231435 UTC

[section ""cstring" . GHC.IO.BufferedIO.$trModule4_bytes" {
     GHC.IO.BufferedIO.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.973953662 UTC

[section ""data" . GHC.IO.BufferedIO.$trModule3_closure" {
     GHC.IO.BufferedIO.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.BufferedIO.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.975712614 UTC

[section ""cstring" . GHC.IO.BufferedIO.$trModule2_bytes" {
     GHC.IO.BufferedIO.$trModule2_bytes:
         I8[] [71,72,67,46,73,79,46,66,117,102,102,101,114,101,100,73,79]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.977903143 UTC

[section ""data" . GHC.IO.BufferedIO.$trModule1_closure" {
     GHC.IO.BufferedIO.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.BufferedIO.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.979687729 UTC

[section ""data" . GHC.IO.BufferedIO.$trModule_closure" {
     GHC.IO.BufferedIO.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.IO.BufferedIO.$trModule3_closure+1;
         const GHC.IO.BufferedIO.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.981379672 UTC

[section ""data" . $krep_r87Lv_closure" {
     $krep_r87Lv_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.983048267 UTC

[section ""data" . $krep1_r87Lw_closure" {
     $krep1_r87Lw_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Word.$tcWord8_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.984691732 UTC

[section ""data" . $krep2_r87Lx_closure" {
     $krep2_r87Lx_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Buffer.$tcBufferState_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.986458417 UTC

[section ""data" . $krep3_r87Ly_closure" {
     $krep3_r87Ly_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcConstraint_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.988156197 UTC

[section ""data" . $krep4_r87Lz_closure" {
     $krep4_r87Lz_closure:
         const :_con_info;
         const $krep_r87Lv_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.989874939 UTC

[section ""data" . $krep5_r87LA_closure" {
     $krep5_r87LA_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Base.$tcMaybe_closure;
         const $krep4_r87Lz_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.991543372 UTC

[section ""data" . $krep6_r87LB_closure" {
     $krep6_r87LB_closure:
         const :_con_info;
         const $krep1_r87Lw_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.993219061 UTC

[section ""data" . $krep7_r87LC_closure" {
     $krep7_r87LC_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Buffer.$tcBuffer_closure;
         const $krep6_r87LB_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.995608867 UTC

[section ""data" . $krep8_r87LD_closure" {
     $krep8_r87LD_closure:
         const :_con_info;
         const $krep7_r87LC_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.997315284 UTC

[section ""data" . $krep9_r87LE_closure" {
     $krep9_r87LE_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep8_r87LD_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.998908562 UTC

[section ""data" . $krep10_r87LF_closure" {
     $krep10_r87LF_closure:
         const :_con_info;
         const $krep_r87Lv_closure+1;
         const $krep8_r87LD_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.000445136 UTC

[section ""data" . $krep11_r87LG_closure" {
     $krep11_r87LG_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc(,)_closure;
         const $krep10_r87LF_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.001984593 UTC

[section ""data" . $krep12_r87LH_closure" {
     $krep12_r87LH_closure:
         const :_con_info;
         const $krep11_r87LG_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.003609314 UTC

[section ""data" . $krep13_r87LI_closure" {
     $krep13_r87LI_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep12_r87LH_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.005230604 UTC

[section ""data" . $krep14_r87LJ_closure" {
     $krep14_r87LJ_closure:
         const :_con_info;
         const $krep5_r87LA_closure+1;
         const $krep8_r87LD_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.006886104 UTC

[section ""data" . $krep15_r87LK_closure" {
     $krep15_r87LK_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc(,)_closure;
         const $krep14_r87LJ_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.008533208 UTC

[section ""data" . $krep16_r87LL_closure" {
     $krep16_r87LL_closure:
         const :_con_info;
         const $krep15_r87LK_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.011812648 UTC

[section ""data" . $krep17_r87LM_closure" {
     $krep17_r87LM_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep16_r87LL_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.013616668 UTC

[section ""data" . $krep18_r87LN_closure" {
     $krep18_r87LN_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r87Lx_closure+1;
         const $krep9_r87LE_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.015872653 UTC

[section ""data" . $krep19_r87LO_closure" {
     $krep19_r87LO_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep7_r87LC_closure+1;
         const $krep9_r87LE_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.017524104 UTC

[section ""data" . $krep20_r87LP_closure" {
     $krep20_r87LP_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep7_r87LC_closure+1;
         const $krep13_r87LI_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.019164195 UTC

[section ""data" . $krep21_r87LQ_closure" {
     $krep21_r87LQ_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep7_r87LC_closure+1;
         const $krep17_r87LM_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.020824306 UTC

[section ""data" . GHC.IO.BufferedIO.$tcBufferedIO1_closure" {
     GHC.IO.BufferedIO.$tcBufferedIO1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Types.krep$*_closure;
         const $krep3_r87Ly_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.022562438 UTC

[section ""data" . $krep22_r87LR_closure" {
     $krep22_r87LR_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.024116875 UTC

[section ""data" . $krep23_r87LS_closure" {
     $krep23_r87LS_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep22_r87LR_closure+2;
         const $krep21_r87LQ_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.026005924 UTC

[section ""data" . $krep24_r87LT_closure" {
     $krep24_r87LT_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep22_r87LR_closure+2;
         const $krep20_r87LP_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.027670887 UTC

[section ""data" . $krep25_r87LU_closure" {
     $krep25_r87LU_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep22_r87LR_closure+2;
         const $krep19_r87LO_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.029444415 UTC

[section ""data" . $krep26_r87LV_closure" {
     $krep26_r87LV_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep22_r87LR_closure+2;
         const $krep18_r87LN_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.031121448 UTC

[section ""cstring" . GHC.IO.BufferedIO.$tcBufferedIO3_bytes" {
     GHC.IO.BufferedIO.$tcBufferedIO3_bytes:
         I8[] [66,117,102,102,101,114,101,100,73,79]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.033309599 UTC

[section ""data" . GHC.IO.BufferedIO.$tcBufferedIO2_closure" {
     GHC.IO.BufferedIO.$tcBufferedIO2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.BufferedIO.$tcBufferedIO3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.034943803 UTC

[section ""data" . GHC.IO.BufferedIO.$tcBufferedIO_closure" {
     GHC.IO.BufferedIO.$tcBufferedIO_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.BufferedIO.$trModule_closure+1;
         const GHC.IO.BufferedIO.$tcBufferedIO2_closure+1;
         const GHC.IO.BufferedIO.$tcBufferedIO1_closure+4;
         const 17350223970197035200;
         const 12646105049483783716;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.036755619 UTC

[section ""data" . $krep27_r87LW_closure" {
     $krep27_r87LW_closure:
         const :_con_info;
         const $krep22_r87LR_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.038492025 UTC

[section ""data" . $krep28_r87LX_closure" {
     $krep28_r87LX_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.BufferedIO.$tcBufferedIO_closure+1;
         const $krep27_r87LW_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.040144403 UTC

[section ""data" . $krep29_r87LY_closure" {
     $krep29_r87LY_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep24_r87LT_closure+4;
         const $krep28_r87LX_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.041868969 UTC

[section ""data" . $krep30_r87LZ_closure" {
     $krep30_r87LZ_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep25_r87LU_closure+4;
         const $krep29_r87LY_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.043561351 UTC

[section ""data" . $krep31_r87M0_closure" {
     $krep31_r87M0_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep25_r87LU_closure+4;
         const $krep30_r87LZ_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.045287373 UTC

[section ""data" . $krep32_r87M1_closure" {
     $krep32_r87M1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep23_r87LS_closure+4;
         const $krep31_r87M0_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.04708548 UTC

[section ""data" . $krep33_r87M2_closure" {
     $krep33_r87M2_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep24_r87LT_closure+4;
         const $krep32_r87M1_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.048744936 UTC

[section ""data" . GHC.IO.BufferedIO.$tc'C:BufferedIO1_closure" {
     GHC.IO.BufferedIO.$tc'C:BufferedIO1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep26_r87LV_closure+4;
         const $krep33_r87M2_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.051019723 UTC

[section ""cstring" . GHC.IO.BufferedIO.$tc'C:BufferedIO3_bytes" {
     GHC.IO.BufferedIO.$tc'C:BufferedIO3_bytes:
         I8[] [39,67,58,66,117,102,102,101,114,101,100,73,79]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.052640951 UTC

[section ""data" . GHC.IO.BufferedIO.$tc'C:BufferedIO2_closure" {
     GHC.IO.BufferedIO.$tc'C:BufferedIO2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.BufferedIO.$tc'C:BufferedIO3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.05434766 UTC

[section ""data" . GHC.IO.BufferedIO.$tc'C:BufferedIO_closure" {
     GHC.IO.BufferedIO.$tc'C:BufferedIO_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.BufferedIO.$trModule_closure+1;
         const GHC.IO.BufferedIO.$tc'C:BufferedIO2_closure+1;
         const GHC.IO.BufferedIO.$tc'C:BufferedIO1_closure+4;
         const 14745255964277825469;
         const 12324508286010448901;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.056909074 UTC

[section ""data" . GHC.IO.BufferedIO.C:BufferedIO_closure" {
     GHC.IO.BufferedIO.C:BufferedIO_closure:
         const GHC.IO.BufferedIO.C:BufferedIO_info;
 },
 GHC.IO.BufferedIO.C:BufferedIO_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c88dj: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c88dn; else goto c88dm;
       c88dn: // global
           HpAlloc = 56;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.BufferedIO.C:BufferedIO_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       c88dm: // global
           I64[Hp - 48] = GHC.IO.BufferedIO.C:BufferedIO_con_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           P64[Hp - 8] = R6;
           P64[Hp] = P64[Sp];
           R1 = Hp - 47;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.BufferedIO.C:BufferedIO_info" {
     GHC.IO.BufferedIO.C:BufferedIO_info:
         const GHC.IO.BufferedIO.C:BufferedIO_entry;
         const 0;
         const 14;
         const 25769803802;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.06067273 UTC

[section ""cstring" . i8822_str" {
     i8822_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,66,117,102,102,101,114,101,100,73,79,46,67,58,66,117,102,102,101,114,101,100,73,79]
 },
 GHC.IO.BufferedIO.C:BufferedIO_con_entry() //  [R1]
         { []
         }
     {offset
       c88du: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.BufferedIO.C:BufferedIO_con_info" {
     GHC.IO.BufferedIO.C:BufferedIO_con_info:
         const GHC.IO.BufferedIO.C:BufferedIO_con_entry;
         const 6;
         const 1;
         const i8822_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.063792926 UTC

[section ""relreadonly" . S87VB_srt" { S87VB_srt:
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.740398231 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:03:15.742458615 UTC

[section ""data" . GHC.IO.BufferedIO.newBuffer_closure" {
     GHC.IO.BufferedIO.newBuffer_closure:
         const GHC.IO.BufferedIO.newBuffer_info;
 },
 GHC.IO.BufferedIO.newBuffer_entry() //  [R2]
         { []
         }
     {offset
       c88gP: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c88gQ; else goto c88gR;
       c88gQ: // global
           R2 = R2;
           R1 = GHC.IO.BufferedIO.newBuffer_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c88gR: // global
           I64[Sp - 8] = block_c88gM_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u88gV; else goto c88gN;
       u88gV: // global
           call _c88gM(R1) args: 0, res: 0, upd: 0;
       c88gN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.BufferedIO.newBuffer_info" {
     GHC.IO.BufferedIO.newBuffer_info:
         const GHC.IO.BufferedIO.newBuffer_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c88gM() //  [R1]
         { []
         }
     {offset
       c88gM: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c88gM_info" {
     block_c88gM_info:
         const _c88gM;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.748099734 UTC

[section ""data" . GHC.IO.BufferedIO.fillReadBuffer_closure" {
     GHC.IO.BufferedIO.fillReadBuffer_closure:
         const GHC.IO.BufferedIO.fillReadBuffer_info;
 },
 GHC.IO.BufferedIO.fillReadBuffer_entry() //  [R2]
         { []
         }
     {offset
       c88hd: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c88he; else goto c88hf;
       c88he: // global
           R2 = R2;
           R1 = GHC.IO.BufferedIO.fillReadBuffer_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c88hf: // global
           I64[Sp - 8] = block_c88ha_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u88hj; else goto c88hb;
       u88hj: // global
           call _c88ha(R1) args: 0, res: 0, upd: 0;
       c88hb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.BufferedIO.fillReadBuffer_info" {
     GHC.IO.BufferedIO.fillReadBuffer_info:
         const GHC.IO.BufferedIO.fillReadBuffer_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c88ha() //  [R1]
         { []
         }
     {offset
       c88ha: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c88ha_info" {
     block_c88ha_info:
         const _c88ha;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.753636922 UTC

[section ""data" . GHC.IO.BufferedIO.fillReadBuffer0_closure" {
     GHC.IO.BufferedIO.fillReadBuffer0_closure:
         const GHC.IO.BufferedIO.fillReadBuffer0_info;
 },
 GHC.IO.BufferedIO.fillReadBuffer0_entry() //  [R2]
         { []
         }
     {offset
       c88hB: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c88hC; else goto c88hD;
       c88hC: // global
           R2 = R2;
           R1 = GHC.IO.BufferedIO.fillReadBuffer0_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c88hD: // global
           I64[Sp - 8] = block_c88hy_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u88hH; else goto c88hz;
       u88hH: // global
           call _c88hy(R1) args: 0, res: 0, upd: 0;
       c88hz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.BufferedIO.fillReadBuffer0_info" {
     GHC.IO.BufferedIO.fillReadBuffer0_info:
         const GHC.IO.BufferedIO.fillReadBuffer0_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c88hy() //  [R1]
         { []
         }
     {offset
       c88hy: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c88hy_info" {
     block_c88hy_info:
         const _c88hy;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.764584858 UTC

[section ""data" . GHC.IO.BufferedIO.emptyWriteBuffer_closure" {
     GHC.IO.BufferedIO.emptyWriteBuffer_closure:
         const GHC.IO.BufferedIO.emptyWriteBuffer_info;
 },
 GHC.IO.BufferedIO.emptyWriteBuffer_entry() //  [R2]
         { []
         }
     {offset
       c88hZ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c88i0; else goto c88i1;
       c88i0: // global
           R2 = R2;
           R1 = GHC.IO.BufferedIO.emptyWriteBuffer_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c88i1: // global
           I64[Sp - 8] = block_c88hW_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u88i5; else goto c88hX;
       u88i5: // global
           call _c88hW(R1) args: 0, res: 0, upd: 0;
       c88hX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.BufferedIO.emptyWriteBuffer_info" {
     GHC.IO.BufferedIO.emptyWriteBuffer_info:
         const GHC.IO.BufferedIO.emptyWriteBuffer_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c88hW() //  [R1]
         { []
         }
     {offset
       c88hW: // global
           R1 = P64[R1 + 31];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c88hW_info" {
     block_c88hW_info:
         const _c88hW;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.771831964 UTC

[section ""data" . GHC.IO.BufferedIO.flushWriteBuffer_closure" {
     GHC.IO.BufferedIO.flushWriteBuffer_closure:
         const GHC.IO.BufferedIO.flushWriteBuffer_info;
 },
 GHC.IO.BufferedIO.flushWriteBuffer_entry() //  [R2]
         { []
         }
     {offset
       c88in: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c88io; else goto c88ip;
       c88io: // global
           R2 = R2;
           R1 = GHC.IO.BufferedIO.flushWriteBuffer_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c88ip: // global
           I64[Sp - 8] = block_c88ik_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u88it; else goto c88il;
       u88it: // global
           call _c88ik(R1) args: 0, res: 0, upd: 0;
       c88il: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.BufferedIO.flushWriteBuffer_info" {
     GHC.IO.BufferedIO.flushWriteBuffer_info:
         const GHC.IO.BufferedIO.flushWriteBuffer_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c88ik() //  [R1]
         { []
         }
     {offset
       c88ik: // global
           R1 = P64[R1 + 39];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c88ik_info" {
     block_c88ik_info:
         const _c88ik;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.77723087 UTC

[section ""data" . GHC.IO.BufferedIO.flushWriteBuffer0_closure" {
     GHC.IO.BufferedIO.flushWriteBuffer0_closure:
         const GHC.IO.BufferedIO.flushWriteBuffer0_info;
 },
 GHC.IO.BufferedIO.flushWriteBuffer0_entry() //  [R2]
         { []
         }
     {offset
       c88iL: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c88iM; else goto c88iN;
       c88iM: // global
           R2 = R2;
           R1 = GHC.IO.BufferedIO.flushWriteBuffer0_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c88iN: // global
           I64[Sp - 8] = block_c88iI_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u88iR; else goto c88iJ;
       u88iR: // global
           call _c88iI(R1) args: 0, res: 0, upd: 0;
       c88iJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.BufferedIO.flushWriteBuffer0_info" {
     GHC.IO.BufferedIO.flushWriteBuffer0_info:
         const GHC.IO.BufferedIO.flushWriteBuffer0_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c88iI() //  [R1]
         { []
         }
     {offset
       c88iI: // global
           R1 = P64[R1 + 47];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c88iI_info" {
     block_c88iI_info:
         const _c88iI;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.783471326 UTC

[section ""data" . $dmemptyWriteBuffer1_r87Lu_closure" {
     $dmemptyWriteBuffer1_r87Lu_closure:
         const $dmemptyWriteBuffer1_r87Lu_info;
 },
 sat_s88ey_entry() //  [R1]
         { []
         }
     {offset
       c88jd: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c88jh; else goto c88ji;
       c88jh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c88ji: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c88ja_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u88jm; else goto c88jb;
       u88jm: // global
           call _c88ja(R1) args: 0, res: 0, upd: 0;
       c88jb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s88ey_info" {
     sat_s88ey_info:
         const sat_s88ey_entry;
         const 1;
         const 16;
 },
 _c88ja() //  [R1]
         { []
         }
     {offset
       c88ja: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c88jl; else goto c88jk;
       c88jl: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c88jk: // global
           _s88et::P64 = P64[R1 + 7];
           _s88es::I64 = I64[R1 + 23];
           _s88ev::I64 = I64[R1 + 31];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _s88et::P64;
           P64[Hp - 32] = GHC.IO.Buffer.WriteBuffer_closure+2;
           I64[Hp - 24] = _s88es::I64;
           I64[Hp - 16] = _s88ev::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           R1 = Hp - 47;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c88ja_info" {
     block_c88ja_info:
         const _c88ja;
         const 0;
         const 30;
 },
 $dmemptyWriteBuffer1_r87Lu_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c88jn: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c88jr; else goto c88jq;
       c88jr: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = $dmemptyWriteBuffer1_r87Lu_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c88jq: // global
           I64[Hp - 16] = sat_s88ey_info;
           P64[Hp] = R4;
           R1 = Hp - 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $dmemptyWriteBuffer1_r87Lu_info" {
     $dmemptyWriteBuffer1_r87Lu_info:
         const $dmemptyWriteBuffer1_r87Lu_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.790630922 UTC

[section ""data" . GHC.IO.BufferedIO.$dmemptyWriteBuffer_closure" {
     GHC.IO.BufferedIO.$dmemptyWriteBuffer_closure:
         const GHC.IO.BufferedIO.$dmemptyWriteBuffer_info;
 },
 GHC.IO.BufferedIO.$dmemptyWriteBuffer_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c88jQ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call $dmemptyWriteBuffer1_r87Lu_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.BufferedIO.$dmemptyWriteBuffer_info" {
     GHC.IO.BufferedIO.$dmemptyWriteBuffer_info:
         const GHC.IO.BufferedIO.$dmemptyWriteBuffer_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.796642808 UTC

[section ""data" . GHC.IO.BufferedIO.$wreadBuf_closure" {
     GHC.IO.BufferedIO.$wreadBuf_closure:
         const GHC.IO.BufferedIO.$wreadBuf_info;
 },
 GHC.IO.BufferedIO.$wreadBuf_slow() //  [R1]
         { []
         }
     {offset
       c88jY: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.IO.BufferedIO.$wreadBuf_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2,
                                                  R1) args: 32, res: 0, upd: 8;
     }
 },
 sat_s88eT_entry() //  [R1]
         { []
         }
     {offset
       c88kk: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c88kr; else goto c88ks;
       c88kr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c88ks: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 72] = block_c88kh_info;
           _s88eC::P64 = P64[R1 + 16];
           _s88eD::P64 = P64[R1 + 24];
           _s88eB::I64 = I64[R1 + 40];
           _s88eE::I64 = I64[R1 + 48];
           _s88eF::I64 = I64[R1 + 56];
           _s88eG::I64 = I64[R1 + 64];
           R1 = P64[R1 + 32];
           I64[Sp - 64] = _s88eB::I64;
           P64[Sp - 56] = _s88eC::P64;
           P64[Sp - 48] = _s88eD::P64;
           I64[Sp - 40] = _s88eE::I64;
           I64[Sp - 32] = _s88eF::I64;
           I64[Sp - 24] = _s88eG::I64;
           Sp = Sp - 72;
           if (R1 & 7 != 0) goto u88kw; else goto c88ki;
       u88kw: // global
           call _c88kh(R1) args: 0, res: 0, upd: 0;
       c88ki: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s88eT_info" {
     sat_s88eT_info:
         const sat_s88eT_entry;
         const 17179869187;
         const 15;
 },
 _c88kh() //  [R1]
         { []
         }
     {offset
       c88kh: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c88kv; else goto c88ku;
       c88kv: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c88ku: // global
           _s88eS::I64 = I64[Sp + 48] + I64[R1 + 7];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 24];
           I64[Hp - 24] = I64[Sp + 8];
           I64[Hp - 16] = I64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = _s88eS::I64;
           R1 = Hp - 47;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c88kh_info" {
     block_c88kh_info:
         const _c88kh;
         const 3654;
         const 30;
 },
 GHC.IO.BufferedIO.$wreadBuf_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c88kx: // global
           _s88eD::P64 = R6;
           _s88eC::P64 = R5;
           _s88eB::I64 = R4;
           _s88eA::P64 = R3;
           _s88ez::P64 = R2;
           if ((Sp + -64) < SpLim) (likely: False) goto c88kz; else goto c88kA;
       c88kA: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c88kC; else goto c88kB;
       c88kC: // global
           HpAlloc = 32;
           goto c88kz;
       c88kz: // global
           R1 = GHC.IO.BufferedIO.$wreadBuf_closure;
           P64[Sp - 40] = _s88ez::P64;
           P64[Sp - 32] = _s88eA::P64;
           I64[Sp - 24] = _s88eB::I64;
           P64[Sp - 16] = _s88eC::P64;
           P64[Sp - 8] = _s88eD::P64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       c88kB: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           _s88eG::I64 = I64[Sp + 16];
           I64[Hp - 16] = I64[Sp] - _s88eG::I64;
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s88eB::I64 + _s88eG::I64;
           I64[Sp - 32] = block_c88ka_info;
           R2 = _s88ez::P64;
           I64[Sp - 64] = stg_ap_pppv_info;
           P64[Sp - 56] = _s88eA::P64;
           P64[Sp - 48] = Hp - 7;
           P64[Sp - 40] = Hp - 23;
           I64[Sp - 24] = _s88eB::I64;
           P64[Sp - 16] = _s88eC::P64;
           P64[Sp - 8] = _s88eD::P64;
           Sp = Sp - 64;
           call GHC.IO.Device.read_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.BufferedIO.$wreadBuf_info" {
     GHC.IO.BufferedIO.$wreadBuf_info:
         const GHC.IO.BufferedIO.$wreadBuf_entry;
         const 0;
         const 14;
         const 38654705664;
         const 0;
         const 14600;
         const GHC.IO.BufferedIO.$wreadBuf_slow;
 },
 _c88ka() //  [R1]
         { []
         }
     {offset
       c88ka: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c88kF; else goto c88kE;
       c88kF: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c88kE: // global
           _s88eB::I64 = I64[Sp + 8];
           _s88eC::P64 = P64[Sp + 16];
           _s88eD::P64 = P64[Sp + 24];
           _s88eE::I64 = I64[Sp + 32];
           _s88eF::I64 = I64[Sp + 40];
           _s88eG::I64 = I64[Sp + 48];
           call MO_Touch(_s88eC::P64);
           I64[Hp - 88] = sat_s88eT_info;
           P64[Hp - 72] = _s88eC::P64;
           P64[Hp - 64] = _s88eD::P64;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = _s88eB::I64;
           I64[Hp - 40] = _s88eE::I64;
           I64[Hp - 32] = _s88eF::I64;
           I64[Hp - 24] = _s88eG::I64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 88;
           R1 = Hp - 15;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c88ka_info" {
     block_c88ka_info:
         const _c88ka;
         const 3654;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.809206553 UTC

[section ""data" . GHC.IO.BufferedIO.readBuf1_closure" {
     GHC.IO.BufferedIO.readBuf1_closure:
         const GHC.IO.BufferedIO.readBuf1_info;
 },
 GHC.IO.BufferedIO.readBuf1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c88lu: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c88lv; else goto c88lw;
       c88lv: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.BufferedIO.readBuf1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c88lw: // global
           I64[Sp - 24] = block_c88lr_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u88lA; else goto c88ls;
       u88lA: // global
           call _c88lr(R1) args: 0, res: 0, upd: 0;
       c88ls: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.BufferedIO.readBuf1_info" {
     GHC.IO.BufferedIO.readBuf1_info:
         const GHC.IO.BufferedIO.readBuf1_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c88lr() //  [R1]
         { []
         }
     {offset
       c88lr: // global
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = I64[R1 + 23];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           I64[Sp] = I64[R1 + 31];
           I64[Sp + 8] = I64[R1 + 39];
           I64[Sp + 16] = I64[R1 + 47];
           call GHC.IO.BufferedIO.$wreadBuf_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c88lr_info" {
     block_c88lr_info:
         const _c88lr;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.814686899 UTC

[section ""data" . GHC.IO.BufferedIO.readBuf_closure" {
     GHC.IO.BufferedIO.readBuf_closure:
         const GHC.IO.BufferedIO.readBuf_info;
 },
 GHC.IO.BufferedIO.readBuf_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c88lS: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.IO.BufferedIO.readBuf1_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.BufferedIO.readBuf_info" {
     GHC.IO.BufferedIO.readBuf_info:
         const GHC.IO.BufferedIO.readBuf_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.821420529 UTC

[section ""data" . GHC.IO.BufferedIO.$wreadBufNonBlocking_closure" {
     GHC.IO.BufferedIO.$wreadBufNonBlocking_closure:
         const GHC.IO.BufferedIO.$wreadBufNonBlocking_info;
 },
 GHC.IO.BufferedIO.$wreadBufNonBlocking_slow() //  [R1]
         { []
         }
     {offset
       c88m0: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.IO.BufferedIO.$wreadBufNonBlocking_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2,
                                                             R1) args: 32, res: 0, upd: 8;
     }
 },
 sat_s88fu_entry() //  [R1]
         { []
         }
     {offset
       c88ms: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c88mz; else goto c88mA;
       c88mz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c88mA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 72] = block_c88mp_info;
           _s88f9::P64 = P64[R1 + 16];
           _s88fa::P64 = P64[R1 + 24];
           _s88f8::I64 = I64[R1 + 40];
           _s88fb::I64 = I64[R1 + 48];
           _s88fc::I64 = I64[R1 + 56];
           _s88fd::I64 = I64[R1 + 64];
           R1 = P64[R1 + 32];
           I64[Sp - 64] = _s88f8::I64;
           P64[Sp - 56] = _s88f9::P64;
           P64[Sp - 48] = _s88fa::P64;
           I64[Sp - 40] = _s88fb::I64;
           I64[Sp - 32] = _s88fc::I64;
           I64[Sp - 24] = _s88fd::I64;
           Sp = Sp - 72;
           if (R1 & 7 != 0) goto u88mE; else goto c88mq;
       u88mE: // global
           call _c88mp(R1) args: 0, res: 0, upd: 0;
       c88mq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s88fu_info" {
     sat_s88fu_info:
         const sat_s88fu_entry;
         const 17179869187;
         const 15;
 },
 _c88mp() //  [R1]
         { []
         }
     {offset
       c88mp: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c88mD; else goto c88mC;
       c88mD: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c88mC: // global
           _s88ft::I64 = I64[Sp + 48] + I64[R1 + 7];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 24];
           I64[Hp - 24] = I64[Sp + 8];
           I64[Hp - 16] = I64[Sp + 32];
           I64[Hp - 8] = I64[Sp + 40];
           I64[Hp] = _s88ft::I64;
           R1 = Hp - 47;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c88mp_info" {
     block_c88mp_info:
         const _c88mp;
         const 3654;
         const 30;
 },
 GHC.IO.BufferedIO.$wreadBufNonBlocking_entry() //  [R2, R3, R4, R5,
                                                     R6]
         { []
         }
     {offset
       c88mF: // global
           _s88fa::P64 = R6;
           _s88f9::P64 = R5;
           _s88f8::I64 = R4;
           _s88f7::P64 = R3;
           _s88f6::P64 = R2;
           if ((Sp + -64) < SpLim) (likely: False) goto c88mG; else goto c88mH;
       c88mH: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c88mJ; else goto c88mI;
       c88mJ: // global
           HpAlloc = 32;
           goto c88mG;
       c88mG: // global
           R1 = GHC.IO.BufferedIO.$wreadBufNonBlocking_closure;
           P64[Sp - 40] = _s88f6::P64;
           P64[Sp - 32] = _s88f7::P64;
           I64[Sp - 24] = _s88f8::I64;
           P64[Sp - 16] = _s88f9::P64;
           P64[Sp - 8] = _s88fa::P64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       c88mI: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           _s88fd::I64 = I64[Sp + 16];
           I64[Hp - 16] = I64[Sp] - _s88fd::I64;
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s88f8::I64 + _s88fd::I64;
           I64[Sp - 32] = block_c88mc_info;
           R2 = _s88f6::P64;
           I64[Sp - 64] = stg_ap_pppv_info;
           P64[Sp - 56] = _s88f7::P64;
           P64[Sp - 48] = Hp - 7;
           P64[Sp - 40] = Hp - 23;
           I64[Sp - 24] = _s88f8::I64;
           P64[Sp - 16] = _s88f9::P64;
           P64[Sp - 8] = _s88fa::P64;
           Sp = Sp - 64;
           call GHC.IO.Device.readNonBlocking_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.BufferedIO.$wreadBufNonBlocking_info" {
     GHC.IO.BufferedIO.$wreadBufNonBlocking_info:
         const GHC.IO.BufferedIO.$wreadBufNonBlocking_entry;
         const 0;
         const 14;
         const 38654705664;
         const 0;
         const 14600;
         const GHC.IO.BufferedIO.$wreadBufNonBlocking_slow;
 },
 _c88mc() //  [R1]
         { []
         }
     {offset
       c88mc: // global
           call MO_Touch(P64[Sp + 16]);
           I64[Sp] = block_c88mf_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u88mZ; else goto c88mg;
       u88mZ: // global
           call _c88mf(R1) args: 0, res: 0, upd: 0;
       c88mg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c88mc_info" {
     block_c88mc_info:
         const _c88mc;
         const 3654;
         const 30;
 },
 _c88mf() //  [R1]
         { []
         }
     {offset
       c88mf: // global
           _s88f8::I64 = I64[Sp + 8];
           _s88f9::P64 = P64[Sp + 16];
           _s88fa::P64 = P64[Sp + 24];
           _s88fb::I64 = I64[Sp + 32];
           _s88fc::I64 = I64[Sp + 40];
           _s88fd::I64 = I64[Sp + 48];
           if (R1 & 7 == 1) goto c88mP; else goto c88mU;
       c88mP: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c88mS; else goto c88mR;
       c88mS: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c88mR: // global
           I64[Hp - 72] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 64] = _s88f9::P64;
           P64[Hp - 56] = _s88fa::P64;
           I64[Hp - 48] = _s88f8::I64;
           I64[Hp - 40] = _s88fb::I64;
           I64[Hp - 32] = _s88fc::I64;
           I64[Hp - 24] = _s88fd::I64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = GHC.Base.Nothing_closure+1;
           P64[Hp] = Hp - 71;
           R1 = Hp - 15;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c88mU: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c88mX; else goto c88mW;
       c88mX: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c88mW: // global
           _s88fq::P64 = P64[R1 + 6];
           I64[Hp - 88] = sat_s88fu_info;
           P64[Hp - 72] = _s88f9::P64;
           P64[Hp - 64] = _s88fa::P64;
           P64[Hp - 56] = _s88fq::P64;
           I64[Hp - 48] = _s88f8::I64;
           I64[Hp - 40] = _s88fb::I64;
           I64[Hp - 32] = _s88fc::I64;
           I64[Hp - 24] = _s88fd::I64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 88;
           R1 = Hp - 15;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c88mf_info" {
     block_c88mf_info:
         const _c88mf;
         const 3654;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.836122916 UTC

[section ""data" . GHC.IO.BufferedIO.readBufNonBlocking1_closure" {
     GHC.IO.BufferedIO.readBufNonBlocking1_closure:
         const GHC.IO.BufferedIO.readBufNonBlocking1_info;
 },
 GHC.IO.BufferedIO.readBufNonBlocking1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c88o1: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c88o2; else goto c88o3;
       c88o2: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.BufferedIO.readBufNonBlocking1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c88o3: // global
           I64[Sp - 24] = block_c88nY_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u88o7; else goto c88nZ;
       u88o7: // global
           call _c88nY(R1) args: 0, res: 0, upd: 0;
       c88nZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.BufferedIO.readBufNonBlocking1_info" {
     GHC.IO.BufferedIO.readBufNonBlocking1_info:
         const GHC.IO.BufferedIO.readBufNonBlocking1_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c88nY() //  [R1]
         { []
         }
     {offset
       c88nY: // global
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = I64[R1 + 23];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           I64[Sp] = I64[R1 + 31];
           I64[Sp + 8] = I64[R1 + 39];
           I64[Sp + 16] = I64[R1 + 47];
           call GHC.IO.BufferedIO.$wreadBufNonBlocking_entry(R6,
                                                             R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c88nY_info" {
     block_c88nY_info:
         const _c88nY;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.841655454 UTC

[section ""data" . GHC.IO.BufferedIO.readBufNonBlocking_closure" {
     GHC.IO.BufferedIO.readBufNonBlocking_closure:
         const GHC.IO.BufferedIO.readBufNonBlocking_info;
 },
 GHC.IO.BufferedIO.readBufNonBlocking_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c88op: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.IO.BufferedIO.readBufNonBlocking1_entry(R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.BufferedIO.readBufNonBlocking_info" {
     GHC.IO.BufferedIO.readBufNonBlocking_info:
         const GHC.IO.BufferedIO.readBufNonBlocking_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.847152217 UTC

[section ""data" . GHC.IO.BufferedIO.$wwriteBuf_closure" {
     GHC.IO.BufferedIO.$wwriteBuf_closure:
         const GHC.IO.BufferedIO.$wwriteBuf_info;
 },
 GHC.IO.BufferedIO.$wwriteBuf_slow() //  [R1]
         { []
         }
     {offset
       c88ox: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.IO.BufferedIO.$wwriteBuf_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2,
                                                   R1) args: 32, res: 0, upd: 8;
     }
 },
 GHC.IO.BufferedIO.$wwriteBuf_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c88oD: // global
           _s88fL::P64 = R6;
           _s88fK::P64 = R5;
           _s88fJ::I64 = R4;
           _s88fI::P64 = R3;
           _s88fH::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto c88oO; else goto c88oP;
       c88oP: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c88oR; else goto c88oQ;
       c88oR: // global
           HpAlloc = 32;
           goto c88oO;
       c88oO: // global
           R1 = GHC.IO.BufferedIO.$wwriteBuf_closure;
           P64[Sp - 40] = _s88fH::P64;
           P64[Sp - 32] = _s88fI::P64;
           I64[Sp - 24] = _s88fJ::I64;
           P64[Sp - 16] = _s88fK::P64;
           P64[Sp - 8] = _s88fL::P64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       c88oQ: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           _s88fN::I64 = I64[Sp + 8];
           I64[Hp - 16] = I64[Sp + 16] - _s88fN::I64;
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s88fJ::I64 + _s88fN::I64;
           I64[Sp - 16] = block_c88oK_info;
           R2 = _s88fH::P64;
           I64[Sp - 48] = stg_ap_pppv_info;
           P64[Sp - 40] = _s88fI::P64;
           P64[Sp - 32] = Hp - 7;
           P64[Sp - 24] = Hp - 23;
           P64[Sp - 8] = _s88fL::P64;
           P64[Sp + 8] = _s88fK::P64;
           I64[Sp + 16] = _s88fJ::I64;
           Sp = Sp - 48;
           call GHC.IO.Device.write_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.BufferedIO.$wwriteBuf_info" {
     GHC.IO.BufferedIO.$wwriteBuf_info:
         const GHC.IO.BufferedIO.$wwriteBuf_entry;
         const 0;
         const 14;
         const 38654705664;
         const 0;
         const 14600;
         const GHC.IO.BufferedIO.$wwriteBuf_slow;
 },
 _c88oK() //  [R1]
         { []
         }
     {offset
       c88oK: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c88oU; else goto c88oT;
       c88oU: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c88oT: // global
           _s88fJ::I64 = I64[Sp + 32];
           _s88fK::P64 = P64[Sp + 24];
           _s88fL::P64 = P64[Sp + 8];
           _s88fM::I64 = I64[Sp + 16];
           call MO_Touch(_s88fK::P64);
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _s88fK::P64;
           P64[Hp - 32] = _s88fL::P64;
           I64[Hp - 24] = _s88fJ::I64;
           I64[Hp - 16] = _s88fM::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           R1 = Hp - 47;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c88oK_info" {
     block_c88oK_info:
         const _c88oK;
         const 644;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.854995932 UTC

[section ""data" . GHC.IO.BufferedIO.writeBuf1_closure" {
     GHC.IO.BufferedIO.writeBuf1_closure:
         const GHC.IO.BufferedIO.writeBuf1_info;
 },
 GHC.IO.BufferedIO.writeBuf1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c88po: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c88pp; else goto c88pq;
       c88pp: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.BufferedIO.writeBuf1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c88pq: // global
           I64[Sp - 24] = block_c88pl_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u88pu; else goto c88pm;
       u88pu: // global
           call _c88pl(R1) args: 0, res: 0, upd: 0;
       c88pm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.BufferedIO.writeBuf1_info" {
     GHC.IO.BufferedIO.writeBuf1_info:
         const GHC.IO.BufferedIO.writeBuf1_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c88pl() //  [R1]
         { []
         }
     {offset
       c88pl: // global
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = I64[R1 + 23];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           I64[Sp] = I64[R1 + 31];
           I64[Sp + 8] = I64[R1 + 39];
           I64[Sp + 16] = I64[R1 + 47];
           call GHC.IO.BufferedIO.$wwriteBuf_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c88pl_info" {
     block_c88pl_info:
         const _c88pl;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.860406552 UTC

[section ""data" . GHC.IO.BufferedIO.writeBuf_closure" {
     GHC.IO.BufferedIO.writeBuf_closure:
         const GHC.IO.BufferedIO.writeBuf_info;
 },
 GHC.IO.BufferedIO.writeBuf_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c88pM: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.IO.BufferedIO.writeBuf1_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.BufferedIO.writeBuf_info" {
     GHC.IO.BufferedIO.writeBuf_info:
         const GHC.IO.BufferedIO.writeBuf_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.86688556 UTC

[section ""data" . GHC.IO.BufferedIO.$wwriteBufNonBlocking_closure" {
     GHC.IO.BufferedIO.$wwriteBufNonBlocking_closure:
         const GHC.IO.BufferedIO.$wwriteBufNonBlocking_info;
 },
 GHC.IO.BufferedIO.$wwriteBufNonBlocking_slow() //  [R1]
         { []
         }
     {offset
       c88pU: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.IO.BufferedIO.$wwriteBufNonBlocking_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2,
                                                              R1) args: 32, res: 0, upd: 8;
     }
 },
 sat_s88gv_entry() //  [R1]
         { []
         }
     {offset
       c88qg: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c88qh; else goto c88qi;
       c88qh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c88qi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 72] = block_c88qd_info;
           _s88gd::P64 = P64[R1 + 16];
           _s88ge::P64 = P64[R1 + 24];
           _s88gc::I64 = I64[R1 + 40];
           _s88gf::I64 = I64[R1 + 48];
           _s88gg::I64 = I64[R1 + 56];
           _s88gh::I64 = I64[R1 + 64];
           R1 = P64[R1 + 32];
           I64[Sp - 64] = _s88gc::I64;
           P64[Sp - 56] = _s88gd::P64;
           P64[Sp - 48] = _s88ge::P64;
           I64[Sp - 40] = _s88gf::I64;
           I64[Sp - 32] = _s88gg::I64;
           I64[Sp - 24] = _s88gh::I64;
           Sp = Sp - 72;
           if (R1 & 7 != 0) goto u88qA; else goto c88qe;
       u88qA: // global
           call _c88qd(R1) args: 0, res: 0, upd: 0;
       c88qe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s88gv_info" {
     sat_s88gv_info:
         const sat_s88gv_entry;
         const 17179869187;
         const 15;
 },
 _c88qd() //  [R1]
         { []
         }
     {offset
       c88qd: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c88qn; else goto c88qm;
       c88qn: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c88qm: // global
           _s88gc::I64 = I64[Sp + 8];
           _s88gd::P64 = P64[Sp + 16];
           _s88ge::P64 = P64[Sp + 24];
           _s88gf::I64 = I64[Sp + 32];
           _s88gh::I64 = I64[Sp + 48];
           _s88gt::I64 = I64[Sp + 40] + I64[R1 + 7];
           if (_s88gt::I64 == _s88gh::I64) goto c88qz; else goto c88qw;
       c88qz: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _s88gd::P64;
           P64[Hp - 32] = _s88ge::P64;
           I64[Hp - 24] = _s88gc::I64;
           I64[Hp - 16] = _s88gf::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           R1 = Hp - 47;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c88qw: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _s88gd::P64;
           P64[Hp - 32] = _s88ge::P64;
           I64[Hp - 24] = _s88gc::I64;
           I64[Hp - 16] = _s88gf::I64;
           I64[Hp - 8] = _s88gt::I64;
           I64[Hp] = _s88gh::I64;
           R1 = Hp - 47;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c88qd_info" {
     block_c88qd_info:
         const _c88qd;
         const 3654;
         const 30;
 },
 GHC.IO.BufferedIO.$wwriteBufNonBlocking_entry() //  [R2, R3, R4,
                                                      R5, R6]
         { []
         }
     {offset
       c88qB: // global
           _s88ge::P64 = R6;
           _s88gd::P64 = R5;
           _s88gc::I64 = R4;
           _s88gb::P64 = R3;
           _s88ga::P64 = R2;
           if ((Sp + -64) < SpLim) (likely: False) goto c88qD; else goto c88qE;
       c88qE: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c88qG; else goto c88qF;
       c88qG: // global
           HpAlloc = 32;
           goto c88qD;
       c88qD: // global
           R1 = GHC.IO.BufferedIO.$wwriteBufNonBlocking_closure;
           P64[Sp - 40] = _s88ga::P64;
           P64[Sp - 32] = _s88gb::P64;
           I64[Sp - 24] = _s88gc::I64;
           P64[Sp - 16] = _s88gd::P64;
           P64[Sp - 8] = _s88ge::P64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       c88qF: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           _s88gg::I64 = I64[Sp + 8];
           I64[Hp - 16] = I64[Sp + 16] - _s88gg::I64;
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s88gc::I64 + _s88gg::I64;
           I64[Sp - 32] = block_c88q6_info;
           R2 = _s88ga::P64;
           I64[Sp - 64] = stg_ap_pppv_info;
           P64[Sp - 56] = _s88gb::P64;
           P64[Sp - 48] = Hp - 7;
           P64[Sp - 40] = Hp - 23;
           I64[Sp - 24] = _s88gc::I64;
           P64[Sp - 16] = _s88gd::P64;
           P64[Sp - 8] = _s88ge::P64;
           Sp = Sp - 64;
           call GHC.IO.Device.writeNonBlocking_entry(R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.BufferedIO.$wwriteBufNonBlocking_info" {
     GHC.IO.BufferedIO.$wwriteBufNonBlocking_info:
         const GHC.IO.BufferedIO.$wwriteBufNonBlocking_entry;
         const 0;
         const 14;
         const 38654705664;
         const 0;
         const 14600;
         const GHC.IO.BufferedIO.$wwriteBufNonBlocking_slow;
 },
 _c88q6() //  [R1]
         { []
         }
     {offset
       c88q6: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c88qJ; else goto c88qI;
       c88qJ: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c88qI: // global
           _s88gc::I64 = I64[Sp + 8];
           _s88gd::P64 = P64[Sp + 16];
           _s88ge::P64 = P64[Sp + 24];
           _s88gf::I64 = I64[Sp + 32];
           _s88gg::I64 = I64[Sp + 40];
           _s88gh::I64 = I64[Sp + 48];
           call MO_Touch(_s88gd::P64);
           I64[Hp - 88] = sat_s88gv_info;
           P64[Hp - 72] = _s88gd::P64;
           P64[Hp - 64] = _s88ge::P64;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = _s88gc::I64;
           I64[Hp - 40] = _s88gf::I64;
           I64[Hp - 32] = _s88gg::I64;
           I64[Hp - 24] = _s88gh::I64;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 88;
           R1 = Hp - 15;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c88q6_info" {
     block_c88q6_info:
         const _c88q6;
         const 3654;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.879312937 UTC

[section ""data" . GHC.IO.BufferedIO.writeBufNonBlocking1_closure" {
     GHC.IO.BufferedIO.writeBufNonBlocking1_closure:
         const GHC.IO.BufferedIO.writeBufNonBlocking1_info;
 },
 GHC.IO.BufferedIO.writeBufNonBlocking1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c88rv: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c88rw; else goto c88rx;
       c88rw: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.BufferedIO.writeBufNonBlocking1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c88rx: // global
           I64[Sp - 24] = block_c88rs_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u88rB; else goto c88rt;
       u88rB: // global
           call _c88rs(R1) args: 0, res: 0, upd: 0;
       c88rt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.BufferedIO.writeBufNonBlocking1_info" {
     GHC.IO.BufferedIO.writeBufNonBlocking1_info:
         const GHC.IO.BufferedIO.writeBufNonBlocking1_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c88rs() //  [R1]
         { []
         }
     {offset
       c88rs: // global
           R6 = P64[R1 + 15];
           R5 = P64[R1 + 7];
           R4 = I64[R1 + 23];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           I64[Sp] = I64[R1 + 31];
           I64[Sp + 8] = I64[R1 + 39];
           I64[Sp + 16] = I64[R1 + 47];
           call GHC.IO.BufferedIO.$wwriteBufNonBlocking_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c88rs_info" {
     block_c88rs_info:
         const _c88rs;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.884830672 UTC

[section ""data" . GHC.IO.BufferedIO.writeBufNonBlocking_closure" {
     GHC.IO.BufferedIO.writeBufNonBlocking_closure:
         const GHC.IO.BufferedIO.writeBufNonBlocking_info;
 },
 GHC.IO.BufferedIO.writeBufNonBlocking_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c88rT: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.IO.BufferedIO.writeBufNonBlocking1_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.BufferedIO.writeBufNonBlocking_info" {
     GHC.IO.BufferedIO.writeBufNonBlocking_info:
         const GHC.IO.BufferedIO.writeBufNonBlocking_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.888401529 UTC

[section ""cstring" . GHC.IO.BufferedIO.$trModule4_bytes" {
     GHC.IO.BufferedIO.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.890103482 UTC

[section ""data" . GHC.IO.BufferedIO.$trModule3_closure" {
     GHC.IO.BufferedIO.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.BufferedIO.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.891825119 UTC

[section ""cstring" . GHC.IO.BufferedIO.$trModule2_bytes" {
     GHC.IO.BufferedIO.$trModule2_bytes:
         I8[] [71,72,67,46,73,79,46,66,117,102,102,101,114,101,100,73,79]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.893549842 UTC

[section ""data" . GHC.IO.BufferedIO.$trModule1_closure" {
     GHC.IO.BufferedIO.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.BufferedIO.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.89518686 UTC

[section ""data" . GHC.IO.BufferedIO.$trModule_closure" {
     GHC.IO.BufferedIO.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.IO.BufferedIO.$trModule3_closure+1;
         const GHC.IO.BufferedIO.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.896953548 UTC

[section ""data" . $krep_r87Lv_closure" {
     $krep_r87Lv_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.898781467 UTC

[section ""data" . $krep1_r87Lw_closure" {
     $krep1_r87Lw_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Word.$tcWord8_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.900530092 UTC

[section ""data" . $krep2_r87Lx_closure" {
     $krep2_r87Lx_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Buffer.$tcBufferState_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.902351137 UTC

[section ""data" . $krep3_r87Ly_closure" {
     $krep3_r87Ly_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcConstraint_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.90408854 UTC

[section ""data" . $krep4_r87Lz_closure" {
     $krep4_r87Lz_closure:
         const :_con_info;
         const $krep_r87Lv_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.905879479 UTC

[section ""data" . $krep5_r87LA_closure" {
     $krep5_r87LA_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Base.$tcMaybe_closure;
         const $krep4_r87Lz_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.907686081 UTC

[section ""data" . $krep6_r87LB_closure" {
     $krep6_r87LB_closure:
         const :_con_info;
         const $krep1_r87Lw_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.909537124 UTC

[section ""data" . $krep7_r87LC_closure" {
     $krep7_r87LC_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Buffer.$tcBuffer_closure;
         const $krep6_r87LB_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.911219164 UTC

[section ""data" . $krep8_r87LD_closure" {
     $krep8_r87LD_closure:
         const :_con_info;
         const $krep7_r87LC_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.913465028 UTC

[section ""data" . $krep9_r87LE_closure" {
     $krep9_r87LE_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep8_r87LD_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.915268972 UTC

[section ""data" . $krep10_r87LF_closure" {
     $krep10_r87LF_closure:
         const :_con_info;
         const $krep_r87Lv_closure+1;
         const $krep8_r87LD_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.916944584 UTC

[section ""data" . $krep11_r87LG_closure" {
     $krep11_r87LG_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc(,)_closure;
         const $krep10_r87LF_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.918682863 UTC

[section ""data" . $krep12_r87LH_closure" {
     $krep12_r87LH_closure:
         const :_con_info;
         const $krep11_r87LG_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.92028059 UTC

[section ""data" . $krep13_r87LI_closure" {
     $krep13_r87LI_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep12_r87LH_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.922106724 UTC

[section ""data" . $krep14_r87LJ_closure" {
     $krep14_r87LJ_closure:
         const :_con_info;
         const $krep5_r87LA_closure+1;
         const $krep8_r87LD_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.923812385 UTC

[section ""data" . $krep15_r87LK_closure" {
     $krep15_r87LK_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc(,)_closure;
         const $krep14_r87LJ_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.925609203 UTC

[section ""data" . $krep16_r87LL_closure" {
     $krep16_r87LL_closure:
         const :_con_info;
         const $krep15_r87LK_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.927348803 UTC

[section ""data" . $krep17_r87LM_closure" {
     $krep17_r87LM_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep16_r87LL_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.929011541 UTC

[section ""data" . $krep18_r87LN_closure" {
     $krep18_r87LN_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r87Lx_closure+1;
         const $krep9_r87LE_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.93078142 UTC

[section ""data" . $krep19_r87LO_closure" {
     $krep19_r87LO_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep7_r87LC_closure+1;
         const $krep9_r87LE_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.932483438 UTC

[section ""data" . $krep20_r87LP_closure" {
     $krep20_r87LP_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep7_r87LC_closure+1;
         const $krep13_r87LI_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.934307534 UTC

[section ""data" . $krep21_r87LQ_closure" {
     $krep21_r87LQ_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep7_r87LC_closure+1;
         const $krep17_r87LM_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.935977483 UTC

[section ""data" . GHC.IO.BufferedIO.$tcBufferedIO1_closure" {
     GHC.IO.BufferedIO.$tcBufferedIO1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Types.krep$*_closure;
         const $krep3_r87Ly_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.938254765 UTC

[section ""data" . $krep22_r87LR_closure" {
     $krep22_r87LR_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.939908676 UTC

[section ""data" . $krep23_r87LS_closure" {
     $krep23_r87LS_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep22_r87LR_closure+2;
         const $krep21_r87LQ_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.94171484 UTC

[section ""data" . $krep24_r87LT_closure" {
     $krep24_r87LT_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep22_r87LR_closure+2;
         const $krep20_r87LP_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.94338871 UTC

[section ""data" . $krep25_r87LU_closure" {
     $krep25_r87LU_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep22_r87LR_closure+2;
         const $krep19_r87LO_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.945059516 UTC

[section ""data" . $krep26_r87LV_closure" {
     $krep26_r87LV_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep22_r87LR_closure+2;
         const $krep18_r87LN_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.946833655 UTC

[section ""cstring" . GHC.IO.BufferedIO.$tcBufferedIO3_bytes" {
     GHC.IO.BufferedIO.$tcBufferedIO3_bytes:
         I8[] [66,117,102,102,101,114,101,100,73,79]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.948427513 UTC

[section ""data" . GHC.IO.BufferedIO.$tcBufferedIO2_closure" {
     GHC.IO.BufferedIO.$tcBufferedIO2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.BufferedIO.$tcBufferedIO3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.950314637 UTC

[section ""data" . GHC.IO.BufferedIO.$tcBufferedIO_closure" {
     GHC.IO.BufferedIO.$tcBufferedIO_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.BufferedIO.$trModule_closure+1;
         const GHC.IO.BufferedIO.$tcBufferedIO2_closure+1;
         const GHC.IO.BufferedIO.$tcBufferedIO1_closure+4;
         const 17350223970197035200;
         const 12646105049483783716;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.952122417 UTC

[section ""data" . $krep27_r87LW_closure" {
     $krep27_r87LW_closure:
         const :_con_info;
         const $krep22_r87LR_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.953882291 UTC

[section ""data" . $krep28_r87LX_closure" {
     $krep28_r87LX_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.BufferedIO.$tcBufferedIO_closure+1;
         const $krep27_r87LW_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.955566218 UTC

[section ""data" . $krep29_r87LY_closure" {
     $krep29_r87LY_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep24_r87LT_closure+4;
         const $krep28_r87LX_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.957385039 UTC

[section ""data" . $krep30_r87LZ_closure" {
     $krep30_r87LZ_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep25_r87LU_closure+4;
         const $krep29_r87LY_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.959106181 UTC

[section ""data" . $krep31_r87M0_closure" {
     $krep31_r87M0_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep25_r87LU_closure+4;
         const $krep30_r87LZ_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.96083041 UTC

[section ""data" . $krep32_r87M1_closure" {
     $krep32_r87M1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep23_r87LS_closure+4;
         const $krep31_r87M0_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.962565819 UTC

[section ""data" . $krep33_r87M2_closure" {
     $krep33_r87M2_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep24_r87LT_closure+4;
         const $krep32_r87M1_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.964742356 UTC

[section ""data" . GHC.IO.BufferedIO.$tc'C:BufferedIO1_closure" {
     GHC.IO.BufferedIO.$tc'C:BufferedIO1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep26_r87LV_closure+4;
         const $krep33_r87M2_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.966464374 UTC

[section ""cstring" . GHC.IO.BufferedIO.$tc'C:BufferedIO3_bytes" {
     GHC.IO.BufferedIO.$tc'C:BufferedIO3_bytes:
         I8[] [39,67,58,66,117,102,102,101,114,101,100,73,79]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.968137675 UTC

[section ""data" . GHC.IO.BufferedIO.$tc'C:BufferedIO2_closure" {
     GHC.IO.BufferedIO.$tc'C:BufferedIO2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.BufferedIO.$tc'C:BufferedIO3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.969876705 UTC

[section ""data" . GHC.IO.BufferedIO.$tc'C:BufferedIO_closure" {
     GHC.IO.BufferedIO.$tc'C:BufferedIO_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.BufferedIO.$trModule_closure+1;
         const GHC.IO.BufferedIO.$tc'C:BufferedIO2_closure+1;
         const GHC.IO.BufferedIO.$tc'C:BufferedIO1_closure+4;
         const 14745255964277825469;
         const 12324508286010448901;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.972412822 UTC

[section ""data" . GHC.IO.BufferedIO.C:BufferedIO_closure" {
     GHC.IO.BufferedIO.C:BufferedIO_closure:
         const GHC.IO.BufferedIO.C:BufferedIO_info;
 },
 GHC.IO.BufferedIO.C:BufferedIO_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c88sQ: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c88sU; else goto c88sT;
       c88sU: // global
           HpAlloc = 56;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.BufferedIO.C:BufferedIO_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       c88sT: // global
           I64[Hp - 48] = GHC.IO.BufferedIO.C:BufferedIO_con_info;
           P64[Hp - 40] = R2;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           P64[Hp - 8] = R6;
           P64[Hp] = P64[Sp];
           R1 = Hp - 47;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.BufferedIO.C:BufferedIO_info" {
     GHC.IO.BufferedIO.C:BufferedIO_info:
         const GHC.IO.BufferedIO.C:BufferedIO_entry;
         const 0;
         const 14;
         const 25769803802;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.976236857 UTC

[section ""cstring" . i88t3_str" {
     i88t3_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,66,117,102,102,101,114,101,100,73,79,46,67,58,66,117,102,102,101,114,101,100,73,79]
 },
 GHC.IO.BufferedIO.C:BufferedIO_con_entry() //  [R1]
         { []
         }
     {offset
       c88t2: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.BufferedIO.C:BufferedIO_con_info" {
     GHC.IO.BufferedIO.C:BufferedIO_con_info:
         const GHC.IO.BufferedIO.C:BufferedIO_con_entry;
         const 6;
         const 1;
         const i88t3_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:15.979312596 UTC

[section ""relreadonly" . S88t9_srt" { S88t9_srt:
 }]

