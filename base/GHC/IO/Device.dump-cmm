
==================== Output Cmm ====================
2018-03-16 16:03:08.772742044 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:03:08.773745904 UTC

[section ""data" . GHC.IO.Device.ready_closure" {
     GHC.IO.Device.ready_closure:
         const GHC.IO.Device.ready_info;
 },
 GHC.IO.Device.ready_entry() //  [R2]
         { info_tbl: [(c82cR,
                       label: GHC.IO.Device.ready_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82cR: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c82cS; else goto c82cT;
       c82cS: // global
           R2 = R2;
           R1 = GHC.IO.Device.ready_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c82cT: // global
           I64[Sp - 8] = block_c82cO_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u82cX; else goto c82cP;
       u82cX: // global
           call _c82cO(R1) args: 0, res: 0, upd: 0;
       c82cP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c82cO() //  [R1]
         { info_tbl: [(c82cO,
                       label: block_c82cO_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82cO: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.774942019 UTC

[section ""data" . GHC.IO.Device.close_closure" {
     GHC.IO.Device.close_closure:
         const GHC.IO.Device.close_info;
 },
 GHC.IO.Device.close_entry() //  [R2]
         { info_tbl: [(c82d5,
                       label: GHC.IO.Device.close_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82d5: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c82d6; else goto c82d7;
       c82d6: // global
           R2 = R2;
           R1 = GHC.IO.Device.close_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c82d7: // global
           I64[Sp - 8] = block_c82d2_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u82db; else goto c82d3;
       u82db: // global
           call _c82d2(R1) args: 0, res: 0, upd: 0;
       c82d3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c82d2() //  [R1]
         { info_tbl: [(c82d2,
                       label: block_c82d2_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82d2: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.776080013 UTC

[section ""data" . GHC.IO.Device.isTerminal_closure" {
     GHC.IO.Device.isTerminal_closure:
         const GHC.IO.Device.isTerminal_info;
 },
 GHC.IO.Device.isTerminal_entry() //  [R2]
         { info_tbl: [(c82dj,
                       label: GHC.IO.Device.isTerminal_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82dj: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c82dk; else goto c82dl;
       c82dk: // global
           R2 = R2;
           R1 = GHC.IO.Device.isTerminal_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c82dl: // global
           I64[Sp - 8] = block_c82dg_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u82dp; else goto c82dh;
       u82dp: // global
           call _c82dg(R1) args: 0, res: 0, upd: 0;
       c82dh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c82dg() //  [R1]
         { info_tbl: [(c82dg,
                       label: block_c82dg_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82dg: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.777228955 UTC

[section ""data" . GHC.IO.Device.isSeekable_closure" {
     GHC.IO.Device.isSeekable_closure:
         const GHC.IO.Device.isSeekable_info;
 },
 GHC.IO.Device.isSeekable_entry() //  [R2]
         { info_tbl: [(c82dx,
                       label: GHC.IO.Device.isSeekable_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82dx: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c82dy; else goto c82dz;
       c82dy: // global
           R2 = R2;
           R1 = GHC.IO.Device.isSeekable_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c82dz: // global
           I64[Sp - 8] = block_c82du_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u82dD; else goto c82dv;
       u82dD: // global
           call _c82du(R1) args: 0, res: 0, upd: 0;
       c82dv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c82du() //  [R1]
         { info_tbl: [(c82du,
                       label: block_c82du_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82du: // global
           R1 = P64[R1 + 31];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.778370714 UTC

[section ""data" . GHC.IO.Device.seek_closure" {
     GHC.IO.Device.seek_closure:
         const GHC.IO.Device.seek_info;
 },
 GHC.IO.Device.seek_entry() //  [R2]
         { info_tbl: [(c82dL,
                       label: GHC.IO.Device.seek_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82dL: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c82dM; else goto c82dN;
       c82dM: // global
           R2 = R2;
           R1 = GHC.IO.Device.seek_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c82dN: // global
           I64[Sp - 8] = block_c82dI_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u82dR; else goto c82dJ;
       u82dR: // global
           call _c82dI(R1) args: 0, res: 0, upd: 0;
       c82dJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c82dI() //  [R1]
         { info_tbl: [(c82dI,
                       label: block_c82dI_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82dI: // global
           R1 = P64[R1 + 39];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.77951856 UTC

[section ""data" . GHC.IO.Device.tell_closure" {
     GHC.IO.Device.tell_closure:
         const GHC.IO.Device.tell_info;
 },
 GHC.IO.Device.tell_entry() //  [R2]
         { info_tbl: [(c82dZ,
                       label: GHC.IO.Device.tell_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82dZ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c82e0; else goto c82e1;
       c82e0: // global
           R2 = R2;
           R1 = GHC.IO.Device.tell_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c82e1: // global
           I64[Sp - 8] = block_c82dW_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u82e5; else goto c82dX;
       u82e5: // global
           call _c82dW(R1) args: 0, res: 0, upd: 0;
       c82dX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c82dW() //  [R1]
         { info_tbl: [(c82dW,
                       label: block_c82dW_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82dW: // global
           R1 = P64[R1 + 47];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.780647358 UTC

[section ""data" . GHC.IO.Device.getSize_closure" {
     GHC.IO.Device.getSize_closure:
         const GHC.IO.Device.getSize_info;
 },
 GHC.IO.Device.getSize_entry() //  [R2]
         { info_tbl: [(c82ed,
                       label: GHC.IO.Device.getSize_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82ed: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c82ee; else goto c82ef;
       c82ee: // global
           R2 = R2;
           R1 = GHC.IO.Device.getSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c82ef: // global
           I64[Sp - 8] = block_c82ea_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u82ej; else goto c82eb;
       u82ej: // global
           call _c82ea(R1) args: 0, res: 0, upd: 0;
       c82eb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c82ea() //  [R1]
         { info_tbl: [(c82ea,
                       label: block_c82ea_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82ea: // global
           R1 = P64[R1 + 55];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.781826708 UTC

[section ""data" . GHC.IO.Device.setSize_closure" {
     GHC.IO.Device.setSize_closure:
         const GHC.IO.Device.setSize_info;
 },
 GHC.IO.Device.setSize_entry() //  [R2]
         { info_tbl: [(c82er,
                       label: GHC.IO.Device.setSize_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82er: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c82es; else goto c82et;
       c82es: // global
           R2 = R2;
           R1 = GHC.IO.Device.setSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c82et: // global
           I64[Sp - 8] = block_c82eo_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u82ex; else goto c82ep;
       u82ex: // global
           call _c82eo(R1) args: 0, res: 0, upd: 0;
       c82ep: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c82eo() //  [R1]
         { info_tbl: [(c82eo,
                       label: block_c82eo_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82eo: // global
           R1 = P64[R1 + 63];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.78296099 UTC

[section ""data" . GHC.IO.Device.setEcho_closure" {
     GHC.IO.Device.setEcho_closure:
         const GHC.IO.Device.setEcho_info;
 },
 GHC.IO.Device.setEcho_entry() //  [R2]
         { info_tbl: [(c82eF,
                       label: GHC.IO.Device.setEcho_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82eF: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c82eG; else goto c82eH;
       c82eG: // global
           R2 = R2;
           R1 = GHC.IO.Device.setEcho_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c82eH: // global
           I64[Sp - 8] = block_c82eC_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u82eL; else goto c82eD;
       u82eL: // global
           call _c82eC(R1) args: 0, res: 0, upd: 0;
       c82eD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c82eC() //  [R1]
         { info_tbl: [(c82eC,
                       label: block_c82eC_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82eC: // global
           R1 = P64[R1 + 71];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.784115078 UTC

[section ""data" . GHC.IO.Device.getEcho_closure" {
     GHC.IO.Device.getEcho_closure:
         const GHC.IO.Device.getEcho_info;
 },
 GHC.IO.Device.getEcho_entry() //  [R2]
         { info_tbl: [(c82eT,
                       label: GHC.IO.Device.getEcho_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82eT: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c82eU; else goto c82eV;
       c82eU: // global
           R2 = R2;
           R1 = GHC.IO.Device.getEcho_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c82eV: // global
           I64[Sp - 8] = block_c82eQ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u82eZ; else goto c82eR;
       u82eZ: // global
           call _c82eQ(R1) args: 0, res: 0, upd: 0;
       c82eR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c82eQ() //  [R1]
         { info_tbl: [(c82eQ,
                       label: block_c82eQ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82eQ: // global
           R1 = P64[R1 + 79];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.78527829 UTC

[section ""data" . GHC.IO.Device.setRaw_closure" {
     GHC.IO.Device.setRaw_closure:
         const GHC.IO.Device.setRaw_info;
 },
 GHC.IO.Device.setRaw_entry() //  [R2]
         { info_tbl: [(c82f7,
                       label: GHC.IO.Device.setRaw_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82f7: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c82f8; else goto c82f9;
       c82f8: // global
           R2 = R2;
           R1 = GHC.IO.Device.setRaw_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c82f9: // global
           I64[Sp - 8] = block_c82f4_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u82fd; else goto c82f5;
       u82fd: // global
           call _c82f4(R1) args: 0, res: 0, upd: 0;
       c82f5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c82f4() //  [R1]
         { info_tbl: [(c82f4,
                       label: block_c82f4_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82f4: // global
           R1 = P64[R1 + 87];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.786446969 UTC

[section ""data" . GHC.IO.Device.devType_closure" {
     GHC.IO.Device.devType_closure:
         const GHC.IO.Device.devType_info;
 },
 GHC.IO.Device.devType_entry() //  [R2]
         { info_tbl: [(c82fl,
                       label: GHC.IO.Device.devType_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82fl: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c82fm; else goto c82fn;
       c82fm: // global
           R2 = R2;
           R1 = GHC.IO.Device.devType_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c82fn: // global
           I64[Sp - 8] = block_c82fi_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u82fr; else goto c82fj;
       u82fr: // global
           call _c82fi(R1) args: 0, res: 0, upd: 0;
       c82fj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c82fi() //  [R1]
         { info_tbl: [(c82fi,
                       label: block_c82fi_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82fi: // global
           R1 = P64[R1 + 95];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.78762023 UTC

[section ""data" . GHC.IO.Device.dup_closure" {
     GHC.IO.Device.dup_closure:
         const GHC.IO.Device.dup_info;
 },
 GHC.IO.Device.dup_entry() //  [R2]
         { info_tbl: [(c82fz,
                       label: GHC.IO.Device.dup_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82fz: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c82fA; else goto c82fB;
       c82fA: // global
           R2 = R2;
           R1 = GHC.IO.Device.dup_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c82fB: // global
           I64[Sp - 8] = block_c82fw_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u82fF; else goto c82fx;
       u82fF: // global
           call _c82fw(R1) args: 0, res: 0, upd: 0;
       c82fx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c82fw() //  [R1]
         { info_tbl: [(c82fw,
                       label: block_c82fw_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82fw: // global
           R1 = P64[R1 + 103];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.78875352 UTC

[section ""data" . GHC.IO.Device.dup2_closure" {
     GHC.IO.Device.dup2_closure:
         const GHC.IO.Device.dup2_info;
 },
 GHC.IO.Device.dup2_entry() //  [R2]
         { info_tbl: [(c82fN,
                       label: GHC.IO.Device.dup2_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82fN: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c82fO; else goto c82fP;
       c82fO: // global
           R2 = R2;
           R1 = GHC.IO.Device.dup2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c82fP: // global
           I64[Sp - 8] = block_c82fK_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u82fT; else goto c82fL;
       u82fT: // global
           call _c82fK(R1) args: 0, res: 0, upd: 0;
       c82fL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c82fK() //  [R1]
         { info_tbl: [(c82fK,
                       label: block_c82fK_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82fK: // global
           R1 = P64[R1 + 111];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.789908683 UTC

[section ""data" . GHC.IO.Device.read_closure" {
     GHC.IO.Device.read_closure:
         const GHC.IO.Device.read_info;
 },
 GHC.IO.Device.read_entry() //  [R2]
         { info_tbl: [(c82g1,
                       label: GHC.IO.Device.read_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82g1: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c82g2; else goto c82g3;
       c82g2: // global
           R2 = R2;
           R1 = GHC.IO.Device.read_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c82g3: // global
           I64[Sp - 8] = block_c82fY_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u82g7; else goto c82fZ;
       u82g7: // global
           call _c82fY(R1) args: 0, res: 0, upd: 0;
       c82fZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c82fY() //  [R1]
         { info_tbl: [(c82fY,
                       label: block_c82fY_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82fY: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.791079309 UTC

[section ""data" . GHC.IO.Device.readNonBlocking_closure" {
     GHC.IO.Device.readNonBlocking_closure:
         const GHC.IO.Device.readNonBlocking_info;
 },
 GHC.IO.Device.readNonBlocking_entry() //  [R2]
         { info_tbl: [(c82gf,
                       label: GHC.IO.Device.readNonBlocking_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82gf: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c82gg; else goto c82gh;
       c82gg: // global
           R2 = R2;
           R1 = GHC.IO.Device.readNonBlocking_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c82gh: // global
           I64[Sp - 8] = block_c82gc_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u82gl; else goto c82gd;
       u82gl: // global
           call _c82gc(R1) args: 0, res: 0, upd: 0;
       c82gd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c82gc() //  [R1]
         { info_tbl: [(c82gc,
                       label: block_c82gc_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82gc: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.792236853 UTC

[section ""data" . GHC.IO.Device.write_closure" {
     GHC.IO.Device.write_closure:
         const GHC.IO.Device.write_info;
 },
 GHC.IO.Device.write_entry() //  [R2]
         { info_tbl: [(c82gt,
                       label: GHC.IO.Device.write_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82gt: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c82gu; else goto c82gv;
       c82gu: // global
           R2 = R2;
           R1 = GHC.IO.Device.write_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c82gv: // global
           I64[Sp - 8] = block_c82gq_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u82gz; else goto c82gr;
       u82gz: // global
           call _c82gq(R1) args: 0, res: 0, upd: 0;
       c82gr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c82gq() //  [R1]
         { info_tbl: [(c82gq,
                       label: block_c82gq_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82gq: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.793443547 UTC

[section ""data" . GHC.IO.Device.writeNonBlocking_closure" {
     GHC.IO.Device.writeNonBlocking_closure:
         const GHC.IO.Device.writeNonBlocking_info;
 },
 GHC.IO.Device.writeNonBlocking_entry() //  [R2]
         { info_tbl: [(c82gH,
                       label: GHC.IO.Device.writeNonBlocking_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82gH: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c82gI; else goto c82gJ;
       c82gI: // global
           R2 = R2;
           R1 = GHC.IO.Device.writeNonBlocking_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c82gJ: // global
           I64[Sp - 8] = block_c82gE_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u82gN; else goto c82gF;
       u82gN: // global
           call _c82gE(R1) args: 0, res: 0, upd: 0;
       c82gF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c82gE() //  [R1]
         { info_tbl: [(c82gE,
                       label: block_c82gE_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82gE: // global
           R1 = P64[R1 + 31];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.794383177 UTC

[section ""cstring" . GHC.IO.Device.$fReadSeekMode16_bytes" {
     GHC.IO.Device.$fReadSeekMode16_bytes:
         I8[] [65,98,115,111,108,117,116,101,83,101,101,107]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.79514213 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode15_closure" {
     GHC.IO.Device.$fReadSeekMode15_closure:
         const GHC.IO.Device.$fReadSeekMode15_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Device.$fReadSeekMode15_entry() //  [R1]
         { info_tbl: [(c82gU,
                       label: GHC.IO.Device.$fReadSeekMode15_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82gU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c82gV; else goto c82gW;
       c82gV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c82gW: // global
           (_c82gR::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c82gR::I64 == 0) goto c82gT; else goto c82gS;
       c82gT: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c82gS: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c82gR::I64;
           R2 = GHC.IO.Device.$fReadSeekMode16_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.79602264 UTC

[section ""cstring" . GHC.IO.Device.$fReadSeekMode12_bytes" {
     GHC.IO.Device.$fReadSeekMode12_bytes:
         I8[] [82,101,108,97,116,105,118,101,83,101,101,107]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.796711182 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode11_closure" {
     GHC.IO.Device.$fReadSeekMode11_closure:
         const GHC.IO.Device.$fReadSeekMode11_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Device.$fReadSeekMode11_entry() //  [R1]
         { info_tbl: [(c82h3,
                       label: GHC.IO.Device.$fReadSeekMode11_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82h3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c82h4; else goto c82h5;
       c82h4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c82h5: // global
           (_c82h0::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c82h0::I64 == 0) goto c82h2; else goto c82h1;
       c82h2: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c82h1: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c82h0::I64;
           R2 = GHC.IO.Device.$fReadSeekMode12_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.797654499 UTC

[section ""cstring" . GHC.IO.Device.$fReadSeekMode8_bytes" {
     GHC.IO.Device.$fReadSeekMode8_bytes:
         I8[] [83,101,101,107,70,114,111,109,69,110,100]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.798378618 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode7_closure" {
     GHC.IO.Device.$fReadSeekMode7_closure:
         const GHC.IO.Device.$fReadSeekMode7_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Device.$fReadSeekMode7_entry() //  [R1]
         { info_tbl: [(c82hc,
                       label: GHC.IO.Device.$fReadSeekMode7_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82hc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c82hd; else goto c82he;
       c82hd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c82he: // global
           (_c82h9::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c82h9::I64 == 0) goto c82hb; else goto c82ha;
       c82hb: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c82ha: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c82h9::I64;
           R2 = GHC.IO.Device.$fReadSeekMode8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.799605952 UTC

[section ""data" . GHC.IO.Device.$w$cshowsPrec_closure" {
     GHC.IO.Device.$w$cshowsPrec_closure:
         const GHC.IO.Device.$w$cshowsPrec_info;
         const 0;
 },
 GHC.IO.Device.$w$cshowsPrec_entry() //  [R2, R3]
         { info_tbl: [(c82hr,
                       label: GHC.IO.Device.$w$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82hr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c82hs; else goto c82ht;
       c82hs: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$w$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c82ht: // global
           I64[Sp - 16] = block_c82hj_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u82hE; else goto c82hk;
       u82hE: // global
           call _c82hj(R1) args: 0, res: 0, upd: 0;
       c82hk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c82hj() //  [R1]
         { info_tbl: [(c82hj,
                       label: block_c82hj_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82hj: // global
           _s8250::P64 = P64[Sp + 8];
           _c82hq::P64 = R1 & 7;
           if (_c82hq::P64 < 3) goto u82hD; else goto c82hp;
       u82hD: // global
           if (_c82hq::P64 < 2) goto c82hn; else goto c82ho;
       c82hn: // global
           R3 = _s8250::P64;
           R2 = GHC.IO.Device.$fReadSeekMode15_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c82ho: // global
           R3 = _s8250::P64;
           R2 = GHC.IO.Device.$fReadSeekMode11_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c82hp: // global
           R3 = _s8250::P64;
           R2 = GHC.IO.Device.$fReadSeekMode7_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.80092634 UTC

[section ""data" . GHC.IO.Device.$fShowSeekMode_$cshowsPrec_closure" {
     GHC.IO.Device.$fShowSeekMode_$cshowsPrec_closure:
         const GHC.IO.Device.$fShowSeekMode_$cshowsPrec_info;
         const 0;
 },
 GHC.IO.Device.$fShowSeekMode_$cshowsPrec_entry() //  [R3, R4]
         { info_tbl: [(c82hK,
                       label: GHC.IO.Device.$fShowSeekMode_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82hK: // global
           _s8253::P64 = R3;
           R3 = R4;
           R2 = _s8253::P64;
           call GHC.IO.Device.$w$cshowsPrec_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.801921808 UTC

[section ""data" . GHC.IO.Device.$fShowSeekMode_$cshow_closure" {
     GHC.IO.Device.$fShowSeekMode_$cshow_closure:
         const GHC.IO.Device.$fShowSeekMode_$cshow_info;
         const 0;
 },
 GHC.IO.Device.$fShowSeekMode_$cshow_entry() //  [R2]
         { info_tbl: [(c82hZ,
                       label: GHC.IO.Device.$fShowSeekMode_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82hZ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c82i0; else goto c82i1;
       c82i0: // global
           R2 = R2;
           R1 = GHC.IO.Device.$fShowSeekMode_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c82i1: // global
           I64[Sp - 8] = block_c82hR_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u82ic; else goto c82hS;
       u82ic: // global
           call _c82hR(R1) args: 0, res: 0, upd: 0;
       c82hS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c82hR() //  [R1]
         { info_tbl: [(c82hR,
                       label: block_c82hR_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82hR: // global
           _c82hY::P64 = R1 & 7;
           if (_c82hY::P64 < 3) goto u82ib; else goto c82hX;
       u82ib: // global
           if (_c82hY::P64 < 2) goto c82hV; else goto c82hW;
       c82hV: // global
           R1 = GHC.IO.Device.$fReadSeekMode15_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c82hW: // global
           R1 = GHC.IO.Device.$fReadSeekMode11_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c82hX: // global
           R1 = GHC.IO.Device.$fReadSeekMode7_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.803132675 UTC

[section ""data" . GHC.IO.Device.$fShowSeekMode_$cshowList_closure" {
     GHC.IO.Device.$fShowSeekMode_$cshowList_closure:
         const GHC.IO.Device.$fShowSeekMode_$cshowList_info;
         const 0;
 },
 GHC.IO.Device.$fShowSeekMode_$cshowList_entry() //  [R2, R3]
         { info_tbl: [(c82ih,
                       label: GHC.IO.Device.$fShowSeekMode_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82ih: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.Device.$w$cshowsPrec_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.803841384 UTC

[section ""data" . GHC.IO.Device.$fShowSeekMode_closure" {
     GHC.IO.Device.$fShowSeekMode_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.IO.Device.$fShowSeekMode_$cshowsPrec_closure+3;
         const GHC.IO.Device.$fShowSeekMode_$cshow_closure+1;
         const GHC.IO.Device.$fShowSeekMode_$cshowList_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.804555576 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode14_closure" {
     GHC.IO.Device.$fReadSeekMode14_closure:
         const GHC.IO.Device.$fReadSeekMode14_info;
 },
 GHC.IO.Device.$fReadSeekMode14_entry() //  [R3]
         { info_tbl: [(c82io,
                       label: GHC.IO.Device.$fReadSeekMode14_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82io: // global
           R2 = GHC.IO.Device.AbsoluteSeek_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.805660248 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode13_closure" {
     GHC.IO.Device.$fReadSeekMode13_closure:
         const (,)_con_info;
         const GHC.IO.Device.$fReadSeekMode15_closure;
         const GHC.IO.Device.$fReadSeekMode14_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.80634315 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode10_closure" {
     GHC.IO.Device.$fReadSeekMode10_closure:
         const GHC.IO.Device.$fReadSeekMode10_info;
 },
 GHC.IO.Device.$fReadSeekMode10_entry() //  [R3]
         { info_tbl: [(c82iv,
                       label: GHC.IO.Device.$fReadSeekMode10_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82iv: // global
           R2 = GHC.IO.Device.RelativeSeek_closure+2;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.807056168 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode9_closure" {
     GHC.IO.Device.$fReadSeekMode9_closure:
         const (,)_con_info;
         const GHC.IO.Device.$fReadSeekMode11_closure;
         const GHC.IO.Device.$fReadSeekMode10_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.807727414 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode6_closure" {
     GHC.IO.Device.$fReadSeekMode6_closure:
         const GHC.IO.Device.$fReadSeekMode6_info;
 },
 GHC.IO.Device.$fReadSeekMode6_entry() //  [R3]
         { info_tbl: [(c82iC,
                       label: GHC.IO.Device.$fReadSeekMode6_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82iC: // global
           R2 = GHC.IO.Device.SeekFromEnd_closure+3;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.80844233 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode5_closure" {
     GHC.IO.Device.$fReadSeekMode5_closure:
         const (,)_con_info;
         const GHC.IO.Device.$fReadSeekMode7_closure;
         const GHC.IO.Device.$fReadSeekMode6_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.809043357 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode4_closure" {
     GHC.IO.Device.$fReadSeekMode4_closure:
         const :_con_info;
         const GHC.IO.Device.$fReadSeekMode5_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.809701171 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode3_closure" {
     GHC.IO.Device.$fReadSeekMode3_closure:
         const :_con_info;
         const GHC.IO.Device.$fReadSeekMode9_closure+1;
         const GHC.IO.Device.$fReadSeekMode4_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.810282159 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode_sps_closure" {
     GHC.IO.Device.$fReadSeekMode_sps_closure:
         const :_con_info;
         const GHC.IO.Device.$fReadSeekMode13_closure+1;
         const GHC.IO.Device.$fReadSeekMode3_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.811018588 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode2_closure" {
     GHC.IO.Device.$fReadSeekMode2_closure:
         const GHC.IO.Device.$fReadSeekMode2_info;
         const 0;
 },
 GHC.IO.Device.$fReadSeekMode2_entry() //  [R2]
         { info_tbl: [(c82iJ,
                       label: GHC.IO.Device.$fReadSeekMode2_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82iJ: // global
           R3 = R2;
           R2 = GHC.IO.Device.$fReadSeekMode_sps_closure+2;
           call GHC.Read.choose2_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.811882772 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode1_closure" {
     GHC.IO.Device.$fReadSeekMode1_closure:
         const GHC.IO.Device.$fReadSeekMode1_info;
         const 0;
 },
 GHC.IO.Device.$fReadSeekMode1_entry() //  [R2, R3]
         { info_tbl: [(c82iQ,
                       label: GHC.IO.Device.$fReadSeekMode1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82iQ: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.Device.$fReadSeekMode2_closure+1;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.812934697 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode_$creadsPrec_closure" {
     GHC.IO.Device.$fReadSeekMode_$creadsPrec_closure:
         const GHC.IO.Device.$fReadSeekMode_$creadsPrec_info;
         const 0;
 },
 sat_s825h_entry() //  [R1]
         { info_tbl: [(c82j1,
                       label: sat_s825h_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82j1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c82j2; else goto c82j3;
       c82j2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c82j3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = P64[R1 + 16];
           R2 = GHC.IO.Device.$fReadSeekMode2_closure+1;
           Sp = Sp - 16;
           call GHC.Read.list3_entry(R4, R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.IO.Device.$fReadSeekMode_$creadsPrec_entry() //  [R2]
         { info_tbl: [(c82j4,
                       label: GHC.IO.Device.$fReadSeekMode_$creadsPrec_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82j4: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c82j8; else goto c82j7;
       c82j8: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.IO.Device.$fReadSeekMode_$creadsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c82j7: // global
           I64[Hp - 16] = sat_s825h_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.81599929 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode_$creadListPrec_closure" {
     GHC.IO.Device.$fReadSeekMode_$creadListPrec_closure:
         const GHC.IO.Device.$fReadSeekMode_$creadListPrec_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Device.$fReadSeekMode_$creadListPrec_entry() //  [R1]
         { info_tbl: [(c82jf,
                       label: GHC.IO.Device.$fReadSeekMode_$creadListPrec_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82jf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c82jg; else goto c82jh;
       c82jg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c82jh: // global
           (_c82jc::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c82jc::I64 == 0) goto c82je; else goto c82jd;
       c82je: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c82jd: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c82jc::I64;
           R2 = GHC.IO.Device.$fReadSeekMode1_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.817100053 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode17_closure" {
     GHC.IO.Device.$fReadSeekMode17_closure:
         const GHC.IO.Device.$fReadSeekMode17_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Device.$fReadSeekMode17_entry() //  [R1]
         { info_tbl: [(c82jo,
                       label: GHC.IO.Device.$fReadSeekMode17_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82jo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c82jp; else goto c82jq;
       c82jp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c82jq: // global
           (_c82jl::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c82jl::I64 == 0) goto c82jn; else goto c82jm;
       c82jn: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c82jm: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c82jl::I64;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = GHC.Read.$fRead()7_closure;
           R1 = GHC.IO.Device.$fReadSeekMode_$creadListPrec_closure;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.818365059 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode_$creadList_closure" {
     GHC.IO.Device.$fReadSeekMode_$creadList_closure:
         const GHC.IO.Device.$fReadSeekMode_$creadList_info;
         const 0;
 },
 GHC.IO.Device.$fReadSeekMode_$creadList_entry() //  [R2]
         { info_tbl: [(c82jv,
                       label: GHC.IO.Device.$fReadSeekMode_$creadList_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82jv: // global
           R3 = R2;
           R2 = GHC.IO.Device.$fReadSeekMode17_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.819109997 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode_closure" {
     GHC.IO.Device.$fReadSeekMode_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.IO.Device.$fReadSeekMode_$creadsPrec_closure+1;
         const GHC.IO.Device.$fReadSeekMode_$creadList_closure+1;
         const GHC.IO.Device.$fReadSeekMode1_closure+2;
         const GHC.IO.Device.$fReadSeekMode_$creadListPrec_closure;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.820403154 UTC

[section ""data" . GHC.IO.Device.$fEqSeekMode_$c==_closure" {
     GHC.IO.Device.$fEqSeekMode_$c==_closure:
         const GHC.IO.Device.$fEqSeekMode_$c==_info;
 },
 GHC.IO.Device.$fEqSeekMode_$c==_entry() //  [R2, R3]
         { info_tbl: [(c82jK,
                       label: GHC.IO.Device.$fEqSeekMode_$c==_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82jK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c82jL; else goto c82jM;
       c82jL: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fEqSeekMode_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c82jM: // global
           I64[Sp - 16] = block_c82jC_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u82kJ; else goto c82jD;
       u82kJ: // global
           call _c82jC(R1) args: 0, res: 0, upd: 0;
       c82jD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c82jC() //  [R1]
         { info_tbl: [(c82jC,
                       label: block_c82jC_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82jC: // global
           _s825j::P64 = P64[Sp + 8];
           _c82jJ::P64 = R1 & 7;
           if (_c82jJ::P64 < 3) goto u82kz; else goto c82jI;
       u82kz: // global
           if (_c82jJ::P64 < 2) goto c82jG; else goto c82jH;
       c82jG: // global
           I64[Sp + 8] = block_c82jP_info;
           R1 = _s825j::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u82kG; else goto c82jR;
       u82kG: // global
           call _c82jP(R1) args: 0, res: 0, upd: 0;
       c82jR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c82jH: // global
           I64[Sp + 8] = block_c82k4_info;
           R1 = _s825j::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u82kH; else goto c82k6;
       u82kH: // global
           call _c82k4(R1) args: 0, res: 0, upd: 0;
       c82k6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c82jI: // global
           I64[Sp + 8] = block_c82kj_info;
           R1 = _s825j::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u82kI; else goto c82kl;
       u82kI: // global
           call _c82kj(R1) args: 0, res: 0, upd: 0;
       c82kl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c82jP() //  [R1]
         { info_tbl: [(c82jP,
                       label: block_c82jP_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82jP: // global
           if (R1 & 7 == 1) goto u82kA; else goto u82kB;
       u82kA: // global
           Sp = Sp + 8;
           call _c82kv() args: 0, res: 0, upd: 0;
       u82kB: // global
           Sp = Sp + 8;
           call _c82kr() args: 0, res: 0, upd: 0;
     }
 },
 _c82k4() //  [R1]
         { info_tbl: [(c82k4,
                       label: block_c82k4_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82k4: // global
           if (R1 & 7 == 2) goto u82kC; else goto u82kD;
       u82kC: // global
           Sp = Sp + 8;
           call _c82kv() args: 0, res: 0, upd: 0;
       u82kD: // global
           Sp = Sp + 8;
           call _c82kr() args: 0, res: 0, upd: 0;
     }
 },
 _c82kj() //  [R1]
         { info_tbl: [(c82kj,
                       label: block_c82kj_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82kj: // global
           if (R1 & 7 == 3) goto u82kE; else goto u82kF;
       u82kE: // global
           Sp = Sp + 8;
           call _c82kv() args: 0, res: 0, upd: 0;
       u82kF: // global
           Sp = Sp + 8;
           call _c82kr() args: 0, res: 0, upd: 0;
     }
 },
 _c82kv() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82kv: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c82kr() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82kr: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.822926365 UTC

[section ""data" . GHC.IO.Device.$fEqSeekMode_$c/=_closure" {
     GHC.IO.Device.$fEqSeekMode_$c/=_closure:
         const GHC.IO.Device.$fEqSeekMode_$c/=_info;
 },
 GHC.IO.Device.$fEqSeekMode_$c/=_entry() //  [R2, R3]
         { info_tbl: [(c82l2,
                       label: GHC.IO.Device.$fEqSeekMode_$c/=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82l2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c82l3; else goto c82l4;
       c82l3: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fEqSeekMode_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c82l4: // global
           I64[Sp - 16] = block_c82kU_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u82m1; else goto c82kV;
       u82m1: // global
           call _c82kU(R1) args: 0, res: 0, upd: 0;
       c82kV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c82kU() //  [R1]
         { info_tbl: [(c82kU,
                       label: block_c82kU_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82kU: // global
           _s825p::P64 = P64[Sp + 8];
           _c82l1::P64 = R1 & 7;
           if (_c82l1::P64 < 3) goto u82lR; else goto c82l0;
       u82lR: // global
           if (_c82l1::P64 < 2) goto c82kY; else goto c82kZ;
       c82kY: // global
           I64[Sp + 8] = block_c82l7_info;
           R1 = _s825p::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u82lY; else goto c82l9;
       u82lY: // global
           call _c82l7(R1) args: 0, res: 0, upd: 0;
       c82l9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c82kZ: // global
           I64[Sp + 8] = block_c82lm_info;
           R1 = _s825p::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u82lZ; else goto c82lo;
       u82lZ: // global
           call _c82lm(R1) args: 0, res: 0, upd: 0;
       c82lo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c82l0: // global
           I64[Sp + 8] = block_c82lB_info;
           R1 = _s825p::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u82m0; else goto c82lD;
       u82m0: // global
           call _c82lB(R1) args: 0, res: 0, upd: 0;
       c82lD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c82l7() //  [R1]
         { info_tbl: [(c82l7,
                       label: block_c82l7_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82l7: // global
           if (R1 & 7 == 1) goto u82lS; else goto u82lT;
       u82lS: // global
           Sp = Sp + 8;
           call _c82lN() args: 0, res: 0, upd: 0;
       u82lT: // global
           Sp = Sp + 8;
           call _c82lJ() args: 0, res: 0, upd: 0;
     }
 },
 _c82lm() //  [R1]
         { info_tbl: [(c82lm,
                       label: block_c82lm_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82lm: // global
           if (R1 & 7 == 2) goto u82lU; else goto u82lV;
       u82lU: // global
           Sp = Sp + 8;
           call _c82lN() args: 0, res: 0, upd: 0;
       u82lV: // global
           Sp = Sp + 8;
           call _c82lJ() args: 0, res: 0, upd: 0;
     }
 },
 _c82lB() //  [R1]
         { info_tbl: [(c82lB,
                       label: block_c82lB_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82lB: // global
           if (R1 & 7 == 3) goto u82lW; else goto u82lX;
       u82lW: // global
           Sp = Sp + 8;
           call _c82lN() args: 0, res: 0, upd: 0;
       u82lX: // global
           Sp = Sp + 8;
           call _c82lJ() args: 0, res: 0, upd: 0;
     }
 },
 _c82lN() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82lN: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c82lJ() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82lJ: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.824732342 UTC

[section ""data" . GHC.IO.Device.$fEqSeekMode_closure" {
     GHC.IO.Device.$fEqSeekMode_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.IO.Device.$fEqSeekMode_$c==_closure+2;
         const GHC.IO.Device.$fEqSeekMode_$c/=_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.826122824 UTC

[section ""data" . GHC.IO.Device.$fEqIODeviceType_$c==_closure" {
     GHC.IO.Device.$fEqIODeviceType_$c==_closure:
         const GHC.IO.Device.$fEqIODeviceType_$c==_info;
 },
 GHC.IO.Device.$fEqIODeviceType_$c==_entry() //  [R2, R3]
         { info_tbl: [(c82ml,
                       label: GHC.IO.Device.$fEqIODeviceType_$c==_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82ml: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c82mm; else goto c82mn;
       c82mm: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fEqIODeviceType_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c82mn: // global
           I64[Sp - 16] = block_c82mc_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u82nE; else goto c82md;
       u82nE: // global
           call _c82mc(R1) args: 0, res: 0, upd: 0;
       c82md: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c82mc() //  [R1]
         { info_tbl: [(c82mc,
                       label: block_c82mc_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82mc: // global
           _s825v::P64 = P64[Sp + 8];
           _c82mk::P64 = R1 & 7;
           if (_c82mk::P64 < 3) goto u82nq; else goto u82nr;
       u82nq: // global
           if (_c82mk::P64 < 2) goto c82mg; else goto c82mh;
       c82mg: // global
           I64[Sp + 8] = block_c82mq_info;
           R1 = _s825v::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u82nA; else goto c82ms;
       u82nA: // global
           call _c82mq(R1) args: 0, res: 0, upd: 0;
       c82ms: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c82mh: // global
           I64[Sp + 8] = block_c82mF_info;
           R1 = _s825v::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u82nB; else goto c82mH;
       u82nB: // global
           call _c82mF(R1) args: 0, res: 0, upd: 0;
       c82mH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u82nr: // global
           if (_c82mk::P64 < 4) goto c82mi; else goto c82mj;
       c82mi: // global
           I64[Sp + 8] = block_c82mU_info;
           R1 = _s825v::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u82nC; else goto c82mW;
       u82nC: // global
           call _c82mU(R1) args: 0, res: 0, upd: 0;
       c82mW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c82mj: // global
           I64[Sp + 8] = block_c82n9_info;
           R1 = _s825v::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u82nD; else goto c82nb;
       u82nD: // global
           call _c82n9(R1) args: 0, res: 0, upd: 0;
       c82nb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c82mq() //  [R1]
         { info_tbl: [(c82mq,
                       label: block_c82mq_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82mq: // global
           if (R1 & 7 == 1) goto u82ns; else goto u82nt;
       u82ns: // global
           Sp = Sp + 8;
           call _c82nl() args: 0, res: 0, upd: 0;
       u82nt: // global
           Sp = Sp + 8;
           call _c82nh() args: 0, res: 0, upd: 0;
     }
 },
 _c82mF() //  [R1]
         { info_tbl: [(c82mF,
                       label: block_c82mF_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82mF: // global
           if (R1 & 7 == 2) goto u82nu; else goto u82nv;
       u82nu: // global
           Sp = Sp + 8;
           call _c82nl() args: 0, res: 0, upd: 0;
       u82nv: // global
           Sp = Sp + 8;
           call _c82nh() args: 0, res: 0, upd: 0;
     }
 },
 _c82mU() //  [R1]
         { info_tbl: [(c82mU,
                       label: block_c82mU_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82mU: // global
           if (R1 & 7 == 3) goto u82nw; else goto u82nx;
       u82nw: // global
           Sp = Sp + 8;
           call _c82nl() args: 0, res: 0, upd: 0;
       u82nx: // global
           Sp = Sp + 8;
           call _c82nh() args: 0, res: 0, upd: 0;
     }
 },
 _c82n9() //  [R1]
         { info_tbl: [(c82n9,
                       label: block_c82n9_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82n9: // global
           if (R1 & 7 == 4) goto u82ny; else goto u82nz;
       u82ny: // global
           Sp = Sp + 8;
           call _c82nl() args: 0, res: 0, upd: 0;
       u82nz: // global
           Sp = Sp + 8;
           call _c82nh() args: 0, res: 0, upd: 0;
     }
 },
 _c82nl() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82nl: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c82nh() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82nh: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.828969661 UTC

[section ""data" . GHC.IO.Device.$fEqIODeviceType_$c/=_closure" {
     GHC.IO.Device.$fEqIODeviceType_$c/=_closure:
         const GHC.IO.Device.$fEqIODeviceType_$c/=_info;
 },
 GHC.IO.Device.$fEqIODeviceType_$c/=_entry() //  [R2, R3]
         { info_tbl: [(c82o0,
                       label: GHC.IO.Device.$fEqIODeviceType_$c/=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82o0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c82o1; else goto c82o2;
       c82o1: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fEqIODeviceType_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c82o2: // global
           I64[Sp - 16] = block_c82nR_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u82pj; else goto c82nS;
       u82pj: // global
           call _c82nR(R1) args: 0, res: 0, upd: 0;
       c82nS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c82nR() //  [R1]
         { info_tbl: [(c82nR,
                       label: block_c82nR_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82nR: // global
           _s825C::P64 = P64[Sp + 8];
           _c82nZ::P64 = R1 & 7;
           if (_c82nZ::P64 < 3) goto u82p5; else goto u82p6;
       u82p5: // global
           if (_c82nZ::P64 < 2) goto c82nV; else goto c82nW;
       c82nV: // global
           I64[Sp + 8] = block_c82o5_info;
           R1 = _s825C::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u82pf; else goto c82o7;
       u82pf: // global
           call _c82o5(R1) args: 0, res: 0, upd: 0;
       c82o7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c82nW: // global
           I64[Sp + 8] = block_c82ok_info;
           R1 = _s825C::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u82pg; else goto c82om;
       u82pg: // global
           call _c82ok(R1) args: 0, res: 0, upd: 0;
       c82om: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u82p6: // global
           if (_c82nZ::P64 < 4) goto c82nX; else goto c82nY;
       c82nX: // global
           I64[Sp + 8] = block_c82oz_info;
           R1 = _s825C::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u82ph; else goto c82oB;
       u82ph: // global
           call _c82oz(R1) args: 0, res: 0, upd: 0;
       c82oB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c82nY: // global
           I64[Sp + 8] = block_c82oO_info;
           R1 = _s825C::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u82pi; else goto c82oQ;
       u82pi: // global
           call _c82oO(R1) args: 0, res: 0, upd: 0;
       c82oQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c82o5() //  [R1]
         { info_tbl: [(c82o5,
                       label: block_c82o5_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82o5: // global
           if (R1 & 7 == 1) goto u82p7; else goto u82p8;
       u82p7: // global
           Sp = Sp + 8;
           call _c82p0() args: 0, res: 0, upd: 0;
       u82p8: // global
           Sp = Sp + 8;
           call _c82oW() args: 0, res: 0, upd: 0;
     }
 },
 _c82ok() //  [R1]
         { info_tbl: [(c82ok,
                       label: block_c82ok_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82ok: // global
           if (R1 & 7 == 2) goto u82p9; else goto u82pa;
       u82p9: // global
           Sp = Sp + 8;
           call _c82p0() args: 0, res: 0, upd: 0;
       u82pa: // global
           Sp = Sp + 8;
           call _c82oW() args: 0, res: 0, upd: 0;
     }
 },
 _c82oz() //  [R1]
         { info_tbl: [(c82oz,
                       label: block_c82oz_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82oz: // global
           if (R1 & 7 == 3) goto u82pb; else goto u82pc;
       u82pb: // global
           Sp = Sp + 8;
           call _c82p0() args: 0, res: 0, upd: 0;
       u82pc: // global
           Sp = Sp + 8;
           call _c82oW() args: 0, res: 0, upd: 0;
     }
 },
 _c82oO() //  [R1]
         { info_tbl: [(c82oO,
                       label: block_c82oO_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82oO: // global
           if (R1 & 7 == 4) goto u82pd; else goto u82pe;
       u82pd: // global
           Sp = Sp + 8;
           call _c82p0() args: 0, res: 0, upd: 0;
       u82pe: // global
           Sp = Sp + 8;
           call _c82oW() args: 0, res: 0, upd: 0;
     }
 },
 _c82p0() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82p0: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c82oW() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82oW: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.831153447 UTC

[section ""data" . GHC.IO.Device.$fEqIODeviceType_closure" {
     GHC.IO.Device.$fEqIODeviceType_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.IO.Device.$fEqIODeviceType_$c==_closure+2;
         const GHC.IO.Device.$fEqIODeviceType_$c/=_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.831832351 UTC

[section ""data" . $dmisSeekable1_r81Zn_closure" {
     $dmisSeekable1_r81Zn_closure:
         const $dmisSeekable1_r81Zn_info;
 },
 $dmisSeekable1_r81Zn_entry() //  []
         { info_tbl: [(c82pw,
                       label: $dmisSeekable1_r81Zn_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82pw: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.832639775 UTC

[section ""data" . GHC.IO.Device.$dmisSeekable_closure" {
     GHC.IO.Device.$dmisSeekable_closure:
         const GHC.IO.Device.$dmisSeekable_info;
 },
 GHC.IO.Device.$dmisSeekable_entry() //  [R2, R3]
         { info_tbl: [(c82pD,
                       label: GHC.IO.Device.$dmisSeekable_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82pD: // global
           R3 = R3;
           R2 = R2;
           call $dmisSeekable1_r81Zn_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.833972929 UTC

[section ""data" . $dmisTerminal1_r81Zo_closure" {
     $dmisTerminal1_r81Zo_closure:
         const $dmisTerminal1_r81Zo_info;
 },
 $dmisTerminal1_r81Zo_entry() //  []
         { info_tbl: [(c82pK,
                       label: $dmisTerminal1_r81Zo_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82pK: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.834798485 UTC

[section ""data" . GHC.IO.Device.$dmisTerminal_closure" {
     GHC.IO.Device.$dmisTerminal_closure:
         const GHC.IO.Device.$dmisTerminal_info;
 },
 GHC.IO.Device.$dmisTerminal_entry() //  [R2, R3]
         { info_tbl: [(c82pR,
                       label: GHC.IO.Device.$dmisTerminal_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82pR: // global
           R3 = R3;
           R2 = R2;
           call $dmisTerminal1_r81Zo_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.835596603 UTC

[section ""data" . GHC.IO.Device.$dmdup1_closure" {
     GHC.IO.Device.$dmdup1_closure:
         const GHC.IO.Device.$dmdup1_info;
         const 0;
 },
 GHC.IO.Device.$dmdup1_entry() //  []
         { info_tbl: [(c82pY,
                       label: GHC.IO.Device.$dmdup1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82pY: // global
           R3 = GHC.IO.Exception.unsupportedOperation_closure;
           R2 = GHC.IO.Exception.$fxExceptionIOException_closure;
           call GHC.IO.throwIO1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.836440966 UTC

[section ""data" . $dmseek1_r81Zp_closure" {
     $dmseek1_r81Zp_closure:
         const $dmseek1_r81Zp_info;
         const 0;
 },
 $dmseek1_r81Zp_entry() //  []
         { info_tbl: [(c82q5,
                       label: $dmseek1_r81Zp_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82q5: // global
           call GHC.IO.Device.$dmdup1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.837263153 UTC

[section ""data" . GHC.IO.Device.$dmseek_closure" {
     GHC.IO.Device.$dmseek_closure:
         const GHC.IO.Device.$dmseek_info;
         const 0;
 },
 GHC.IO.Device.$dmseek_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c82qc,
                       label: GHC.IO.Device.$dmseek_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82qc: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call $dmseek1_r81Zp_entry(R5, R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.838095499 UTC

[section ""data" . $dmtell1_r81Zq_closure" {
     $dmtell1_r81Zq_closure:
         const $dmtell1_r81Zq_info;
         const 0;
 },
 $dmtell1_r81Zq_entry() //  []
         { info_tbl: [(c82qj,
                       label: $dmtell1_r81Zq_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82qj: // global
           call GHC.IO.Device.$dmdup1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.838840969 UTC

[section ""data" . GHC.IO.Device.$dmtell_closure" {
     GHC.IO.Device.$dmtell_closure:
         const GHC.IO.Device.$dmtell_info;
         const 0;
 },
 GHC.IO.Device.$dmtell_entry() //  [R2, R3]
         { info_tbl: [(c82qq,
                       label: GHC.IO.Device.$dmtell_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82qq: // global
           R3 = R3;
           R2 = R2;
           call $dmtell1_r81Zq_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.839699358 UTC

[section ""data" . $dmgetSize1_r81Zr_closure" {
     $dmgetSize1_r81Zr_closure:
         const $dmgetSize1_r81Zr_info;
         const 0;
 },
 $dmgetSize1_r81Zr_entry() //  []
         { info_tbl: [(c82qx,
                       label: $dmgetSize1_r81Zr_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82qx: // global
           call GHC.IO.Device.$dmdup1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.840533865 UTC

[section ""data" . GHC.IO.Device.$dmgetSize_closure" {
     GHC.IO.Device.$dmgetSize_closure:
         const GHC.IO.Device.$dmgetSize_info;
         const 0;
 },
 GHC.IO.Device.$dmgetSize_entry() //  [R2, R3]
         { info_tbl: [(c82qE,
                       label: GHC.IO.Device.$dmgetSize_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82qE: // global
           R3 = R3;
           R2 = R2;
           call $dmgetSize1_r81Zr_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.841393207 UTC

[section ""data" . $dmsetSize1_r81Zs_closure" {
     $dmsetSize1_r81Zs_closure:
         const $dmsetSize1_r81Zs_info;
         const 0;
 },
 $dmsetSize1_r81Zs_entry() //  []
         { info_tbl: [(c82qL,
                       label: $dmsetSize1_r81Zs_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82qL: // global
           call GHC.IO.Device.$dmdup1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.842209686 UTC

[section ""data" . GHC.IO.Device.$dmsetSize_closure" {
     GHC.IO.Device.$dmsetSize_closure:
         const GHC.IO.Device.$dmsetSize_info;
         const 0;
 },
 GHC.IO.Device.$dmsetSize_entry() //  [R2, R3, R4]
         { info_tbl: [(c82qS,
                       label: GHC.IO.Device.$dmsetSize_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82qS: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call $dmsetSize1_r81Zs_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.843026731 UTC

[section ""data" . $dmsetEcho1_r81Zt_closure" {
     $dmsetEcho1_r81Zt_closure:
         const $dmsetEcho1_r81Zt_info;
         const 0;
 },
 $dmsetEcho1_r81Zt_entry() //  []
         { info_tbl: [(c82qZ,
                       label: $dmsetEcho1_r81Zt_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82qZ: // global
           call GHC.IO.Device.$dmdup1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.843832865 UTC

[section ""data" . GHC.IO.Device.$dmsetEcho_closure" {
     GHC.IO.Device.$dmsetEcho_closure:
         const GHC.IO.Device.$dmsetEcho_info;
         const 0;
 },
 GHC.IO.Device.$dmsetEcho_entry() //  [R2, R3, R4]
         { info_tbl: [(c82r6,
                       label: GHC.IO.Device.$dmsetEcho_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82r6: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call $dmsetEcho1_r81Zt_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.844694907 UTC

[section ""data" . $dmgetEcho1_r81Zu_closure" {
     $dmgetEcho1_r81Zu_closure:
         const $dmgetEcho1_r81Zu_info;
         const 0;
 },
 $dmgetEcho1_r81Zu_entry() //  []
         { info_tbl: [(c82rd,
                       label: $dmgetEcho1_r81Zu_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82rd: // global
           call GHC.IO.Device.$dmdup1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.845561408 UTC

[section ""data" . GHC.IO.Device.$dmgetEcho_closure" {
     GHC.IO.Device.$dmgetEcho_closure:
         const GHC.IO.Device.$dmgetEcho_info;
         const 0;
 },
 GHC.IO.Device.$dmgetEcho_entry() //  [R2, R3]
         { info_tbl: [(c82rk,
                       label: GHC.IO.Device.$dmgetEcho_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82rk: // global
           R3 = R3;
           R2 = R2;
           call $dmgetEcho1_r81Zu_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.846360048 UTC

[section ""data" . $dmsetRaw1_r81Zv_closure" {
     $dmsetRaw1_r81Zv_closure:
         const $dmsetRaw1_r81Zv_info;
         const 0;
 },
 $dmsetRaw1_r81Zv_entry() //  []
         { info_tbl: [(c82rr,
                       label: $dmsetRaw1_r81Zv_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82rr: // global
           call GHC.IO.Device.$dmdup1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.847150947 UTC

[section ""data" . GHC.IO.Device.$dmsetRaw_closure" {
     GHC.IO.Device.$dmsetRaw_closure:
         const GHC.IO.Device.$dmsetRaw_info;
         const 0;
 },
 GHC.IO.Device.$dmsetRaw_entry() //  [R2, R3, R4]
         { info_tbl: [(c82ry,
                       label: GHC.IO.Device.$dmsetRaw_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82ry: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call $dmsetRaw1_r81Zv_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.848002345 UTC

[section ""data" . $dmdup3_r81Zw_closure" {
     $dmdup3_r81Zw_closure:
         const $dmdup3_r81Zw_info;
         const 0;
 },
 $dmdup3_r81Zw_entry() //  []
         { info_tbl: [(c82rF,
                       label: $dmdup3_r81Zw_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82rF: // global
           call GHC.IO.Device.$dmdup1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.848815659 UTC

[section ""data" . GHC.IO.Device.$dmdup_closure" {
     GHC.IO.Device.$dmdup_closure:
         const GHC.IO.Device.$dmdup_info;
         const 0;
 },
 GHC.IO.Device.$dmdup_entry() //  [R2, R3]
         { info_tbl: [(c82rM,
                       label: GHC.IO.Device.$dmdup_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82rM: // global
           R3 = R3;
           R2 = R2;
           call $dmdup3_r81Zw_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.849923163 UTC

[section ""data" . $dmdup4_r81Zx_closure" {
     $dmdup4_r81Zx_closure:
         const $dmdup4_r81Zx_info;
         const 0;
 },
 $dmdup4_r81Zx_entry() //  []
         { info_tbl: [(c82rT,
                       label: $dmdup4_r81Zx_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82rT: // global
           call GHC.IO.Device.$dmdup1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.850732143 UTC

[section ""data" . GHC.IO.Device.$dmdup2_closure" {
     GHC.IO.Device.$dmdup2_closure:
         const GHC.IO.Device.$dmdup2_info;
         const 0;
 },
 GHC.IO.Device.$dmdup2_entry() //  [R2, R3, R4]
         { info_tbl: [(c82s0,
                       label: GHC.IO.Device.$dmdup2_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82s0: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call $dmdup4_r81Zx_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.852306604 UTC

[section ""data" . GHC.IO.Device.$fOrdSeekMode_$ccompare_closure" {
     GHC.IO.Device.$fOrdSeekMode_$ccompare_closure:
         const GHC.IO.Device.$fOrdSeekMode_$ccompare_info;
 },
 GHC.IO.Device.$fOrdSeekMode_$ccompare_entry() //  [R2, R3]
         { info_tbl: [(c82sf,
                       label: GHC.IO.Device.$fOrdSeekMode_$ccompare_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82sf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c82sg; else goto c82sh;
       c82sg: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fOrdSeekMode_$ccompare_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c82sh: // global
           I64[Sp - 16] = block_c82s7_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u82tq; else goto c82s8;
       u82tq: // global
           call _c82s7(R1) args: 0, res: 0, upd: 0;
       c82s8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c82s7() //  [R1]
         { info_tbl: [(c82s7,
                       label: block_c82s7_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82s7: // global
           _s826n::P64 = P64[Sp + 8];
           _c82se::P64 = R1 & 7;
           if (_c82se::P64 < 3) goto u82tc; else goto c82sd;
       u82tc: // global
           if (_c82se::P64 < 2) goto c82sb; else goto c82sc;
       c82sb: // global
           I64[Sp + 8] = block_c82sk_info;
           R1 = _s826n::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u82tn; else goto c82sm;
       u82tn: // global
           call _c82sk(R1) args: 0, res: 0, upd: 0;
       c82sm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c82sc: // global
           I64[Sp + 8] = block_c82sD_info;
           R1 = _s826n::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u82to; else goto c82sF;
       u82to: // global
           call _c82sD(R1) args: 0, res: 0, upd: 0;
       c82sF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c82sd: // global
           I64[Sp + 8] = block_c82sW_info;
           R1 = _s826n::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u82tp; else goto c82sY;
       u82tp: // global
           call _c82sW(R1) args: 0, res: 0, upd: 0;
       c82sY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c82sk() //  [R1]
         { info_tbl: [(c82sk,
                       label: block_c82sk_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82sk: // global
           _c82tb::P64 = R1 & 7;
           if (_c82tb::P64 < 3) goto u82td; else goto u82tf;
       u82td: // global
           if (_c82tb::P64 < 2) goto u82th; else goto u82tg;
       u82th: // global
           Sp = Sp + 8;
           call _c82t8() args: 0, res: 0, upd: 0;
       u82tg: // global
           Sp = Sp + 8;
           goto u82ts;
       u82tf: // global
           Sp = Sp + 8;
           goto u82ts;
       u82ts: // global
           call _c82sT() args: 0, res: 0, upd: 0;
     }
 },
 _c82sD() //  [R1]
         { info_tbl: [(c82sD,
                       label: block_c82sD_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82sD: // global
           _c82ta::P64 = R1 & 7;
           if (_c82ta::P64 < 3) goto u82te; else goto u82ti;
       u82te: // global
           if (_c82ta::P64 < 2) goto u82tk; else goto u82tj;
       u82tk: // global
           Sp = Sp + 8;
           call _c82t4() args: 0, res: 0, upd: 0;
       u82tj: // global
           Sp = Sp + 8;
           call _c82t8() args: 0, res: 0, upd: 0;
       u82ti: // global
           Sp = Sp + 8;
           call _c82sT() args: 0, res: 0, upd: 0;
     }
 },
 _c82sT() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82sT: // global
           R1 = GHC.Types.LT_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c82sW() //  [R1]
         { info_tbl: [(c82sW,
                       label: block_c82sW_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82sW: // global
           if (R1 & 7 == 3) goto u82tl; else goto u82tm;
       u82tl: // global
           Sp = Sp + 8;
           call _c82t8() args: 0, res: 0, upd: 0;
       u82tm: // global
           Sp = Sp + 8;
           call _c82t4() args: 0, res: 0, upd: 0;
     }
 },
 _c82t8() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82t8: // global
           R1 = GHC.Types.EQ_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c82t4() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82t4: // global
           R1 = GHC.Types.GT_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.855026128 UTC

[section ""data" . GHC.IO.Device.$fOrdSeekMode_$c<_closure" {
     GHC.IO.Device.$fOrdSeekMode_$c<_closure:
         const GHC.IO.Device.$fOrdSeekMode_$c<_info;
 },
 GHC.IO.Device.$fOrdSeekMode_$c<_entry() //  [R2, R3]
         { info_tbl: [(c82tL,
                       label: GHC.IO.Device.$fOrdSeekMode_$c<_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82tL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c82tM; else goto c82tN;
       c82tM: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fOrdSeekMode_$c<_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c82tN: // global
           I64[Sp - 16] = block_c82tD_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u82uH; else goto c82tE;
       u82uH: // global
           call _c82tD(R1) args: 0, res: 0, upd: 0;
       c82tE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c82tD() //  [R1]
         { info_tbl: [(c82tD,
                       label: block_c82tD_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82tD: // global
           _s826t::P64 = P64[Sp + 8];
           _c82tK::P64 = R1 & 7;
           if (_c82tK::P64 < 3) goto u82ux; else goto c82tJ;
       u82ux: // global
           if (_c82tK::P64 < 2) goto c82tH; else goto c82tI;
       c82tH: // global
           I64[Sp + 8] = block_c82tQ_info;
           R1 = _s826t::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u82uE; else goto c82tS;
       u82uE: // global
           call _c82tQ(R1) args: 0, res: 0, upd: 0;
       c82tS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c82tI: // global
           I64[Sp + 8] = block_c82u9_info;
           R1 = _s826t::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u82uF; else goto c82ub;
       u82uF: // global
           call _c82u9(R1) args: 0, res: 0, upd: 0;
       c82ub: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c82tJ: // global
           I64[Sp + 8] = block_c82uo_info;
           R1 = _s826t::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u82uG; else goto c82uq;
       u82uG: // global
           call _c82uo() args: 0, res: 0, upd: 0;
       c82uq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c82tQ() //  [R1]
         { info_tbl: [(c82tQ,
                       label: block_c82tQ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82tQ: // global
           _c82uw::P64 = R1 & 7;
           if (_c82uw::P64 < 3) goto u82uy; else goto u82uz;
       u82uy: // global
           if (_c82uw::P64 < 2) goto u82uB; else goto u82uA;
       u82uB: // global
           Sp = Sp + 8;
           call _c82uh() args: 0, res: 0, upd: 0;
       u82uA: // global
           Sp = Sp + 8;
           goto u82uJ;
       u82uz: // global
           Sp = Sp + 8;
           goto u82uJ;
       u82uJ: // global
           call _c82ul() args: 0, res: 0, upd: 0;
     }
 },
 _c82u9() //  [R1]
         { info_tbl: [(c82u9,
                       label: block_c82u9_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82u9: // global
           if (R1 & 7 == 3) goto u82uC; else goto u82uD;
       u82uC: // global
           Sp = Sp + 8;
           call _c82ul() args: 0, res: 0, upd: 0;
       u82uD: // global
           Sp = Sp + 8;
           call _c82uh() args: 0, res: 0, upd: 0;
     }
 },
 _c82ul() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82ul: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c82uh() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82uh: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c82uo() //  []
         { info_tbl: [(c82uo,
                       label: block_c82uo_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82uo: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.857574713 UTC

[section ""data" . GHC.IO.Device.$fOrdSeekMode_$c<=_closure" {
     GHC.IO.Device.$fOrdSeekMode_$c<=_closure:
         const GHC.IO.Device.$fOrdSeekMode_$c<=_info;
 },
 GHC.IO.Device.$fOrdSeekMode_$c<=_entry() //  [R2, R3]
         { info_tbl: [(c82v1,
                       label: GHC.IO.Device.$fOrdSeekMode_$c<=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82v1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c82v2; else goto c82v3;
       c82v2: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fOrdSeekMode_$c<=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c82v3: // global
           I64[Sp - 16] = block_c82uT_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u82vQ; else goto c82uU;
       u82vQ: // global
           call _c82uT(R1) args: 0, res: 0, upd: 0;
       c82uU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c82uT() //  [R1]
         { info_tbl: [(c82uT,
                       label: block_c82uT_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82uT: // global
           _s826y::P64 = P64[Sp + 8];
           _c82v0::P64 = R1 & 7;
           if (_c82v0::P64 < 3) goto u82vN; else goto c82uZ;
       u82vN: // global
           if (_c82v0::P64 < 2) goto c82uX; else goto c82uY;
       c82uX: // global
           _s826B::I64 = 0;
           goto s826A;
       c82uY: // global
           _s826B::I64 = 1;
           goto s826A;
       c82uZ: // global
           _s826B::I64 = 2;
           goto s826A;
       s826A: // global
           I64[Sp] = block_c82v7_info;
           R1 = _s826y::P64;
           I64[Sp + 8] = _s826B::I64;
           if (R1 & 7 != 0) goto u82vP; else goto c82v9;
       u82vP: // global
           call _c82v7(R1) args: 0, res: 0, upd: 0;
       c82v9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c82v7() //  [R1]
         { info_tbl: [(c82v7,
                       label: block_c82v7_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82v7: // global
           _s826B::I64 = I64[Sp + 8];
           _c82vM::P64 = R1 & 7;
           if (_c82vM::P64 < 3) goto u82vO; else goto c82vC;
       u82vO: // global
           if (_c82vM::P64 < 2) goto c82vk; else goto c82vt;
       c82vk: // global
           if (%MO_S_Ge_W64(_s826B::I64, 0)) goto c82vA; else goto c82vB;
       c82vt: // global
           if (%MO_S_Ge_W64(_s826B::I64, 1)) goto c82vA; else goto c82vB;
       c82vC: // global
           if (%MO_S_Ge_W64(_s826B::I64, 2)) goto c82vA; else goto c82vB;
       c82vA: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c82vB: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.85936498 UTC

[section ""data" . GHC.IO.Device.$fOrdSeekMode_$cmax_closure" {
     GHC.IO.Device.$fOrdSeekMode_$cmax_closure:
         const GHC.IO.Device.$fOrdSeekMode_$cmax_info;
 },
 GHC.IO.Device.$fOrdSeekMode_$cmax_entry() //  [R2, R3]
         { info_tbl: [(c82w1,
                       label: GHC.IO.Device.$fOrdSeekMode_$cmax_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82w1: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c82w2; else goto c82w3;
       c82w2: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fOrdSeekMode_$cmax_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c82w3: // global
           I64[Sp - 24] = block_c82vV_info;
           _s826I::P64 = R3;
           R3 = R3;
           _s826H::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s826H::P64;
           P64[Sp - 8] = _s826I::P64;
           Sp = Sp - 24;
           call GHC.IO.Device.$fOrdSeekMode_$c<=_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c82vV() //  [R1]
         { info_tbl: [(c82vV,
                       label: block_c82vV_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82vV: // global
           if (R1 & 7 == 1) goto c82vY; else goto c82vZ;
       c82vY: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c82vZ: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.860999542 UTC

[section ""data" . GHC.IO.Device.$fOrdSeekMode_$c>=_closure" {
     GHC.IO.Device.$fOrdSeekMode_$c>=_closure:
         const GHC.IO.Device.$fOrdSeekMode_$c>=_info;
 },
 GHC.IO.Device.$fOrdSeekMode_$c>=_entry() //  [R2, R3]
         { info_tbl: [(c82wo,
                       label: GHC.IO.Device.$fOrdSeekMode_$c>=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82wo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c82wp; else goto c82wq;
       c82wp: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fOrdSeekMode_$c>=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c82wq: // global
           I64[Sp - 16] = block_c82wg_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u82xd; else goto c82wh;
       u82xd: // global
           call _c82wg(R1) args: 0, res: 0, upd: 0;
       c82wh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c82wg() //  [R1]
         { info_tbl: [(c82wg,
                       label: block_c82wg_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82wg: // global
           _s826L::P64 = P64[Sp + 8];
           _c82wn::P64 = R1 & 7;
           if (_c82wn::P64 < 3) goto u82xa; else goto c82wm;
       u82xa: // global
           if (_c82wn::P64 < 2) goto c82wk; else goto c82wl;
       c82wk: // global
           _s826N::I64 = 0;
           goto s826M;
       c82wl: // global
           _s826N::I64 = 1;
           goto s826M;
       c82wm: // global
           _s826N::I64 = 2;
           goto s826M;
       s826M: // global
           I64[Sp] = block_c82wu_info;
           R1 = _s826L::P64;
           I64[Sp + 8] = _s826N::I64;
           if (R1 & 7 != 0) goto u82xc; else goto c82ww;
       u82xc: // global
           call _c82wu(R1) args: 0, res: 0, upd: 0;
       c82ww: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c82wu() //  [R1]
         { info_tbl: [(c82wu,
                       label: block_c82wu_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82wu: // global
           _s826N::I64 = I64[Sp + 8];
           _c82x9::P64 = R1 & 7;
           if (_c82x9::P64 < 3) goto u82xb; else goto c82wZ;
       u82xb: // global
           if (_c82x9::P64 < 2) goto c82wH; else goto c82wQ;
       c82wH: // global
           if (%MO_S_Ge_W64(_s826N::I64, 0)) goto c82wX; else goto c82wY;
       c82wQ: // global
           if (%MO_S_Ge_W64(_s826N::I64, 1)) goto c82wX; else goto c82wY;
       c82wZ: // global
           if (%MO_S_Ge_W64(_s826N::I64, 2)) goto c82wX; else goto c82wY;
       c82wX: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c82wY: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.862683074 UTC

[section ""data" . GHC.IO.Device.$fOrdSeekMode_$c>_closure" {
     GHC.IO.Device.$fOrdSeekMode_$c>_closure:
         const GHC.IO.Device.$fOrdSeekMode_$c>_info;
 },
 GHC.IO.Device.$fOrdSeekMode_$c>_entry() //  [R2, R3]
         { info_tbl: [(c82xi,
                       label: GHC.IO.Device.$fOrdSeekMode_$c>_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82xi: // global
           _s826U::P64 = R3;
           R3 = R2;
           R2 = _s826U::P64;
           call GHC.IO.Device.$fOrdSeekMode_$c<_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.86369168 UTC

[section ""data" . GHC.IO.Device.$fOrdSeekMode_$cmin_closure" {
     GHC.IO.Device.$fOrdSeekMode_$cmin_closure:
         const GHC.IO.Device.$fOrdSeekMode_$cmin_info;
 },
 GHC.IO.Device.$fOrdSeekMode_$cmin_entry() //  [R2, R3]
         { info_tbl: [(c82xv,
                       label: GHC.IO.Device.$fOrdSeekMode_$cmin_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82xv: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c82xw; else goto c82xx;
       c82xw: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fOrdSeekMode_$cmin_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c82xx: // global
           I64[Sp - 24] = block_c82xp_info;
           _s826W::P64 = R3;
           R3 = R3;
           _s826V::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s826V::P64;
           P64[Sp - 8] = _s826W::P64;
           Sp = Sp - 24;
           call GHC.IO.Device.$fOrdSeekMode_$c<=_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c82xp() //  [R1]
         { info_tbl: [(c82xp,
                       label: block_c82xp_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82xp: // global
           if (R1 & 7 == 1) goto c82xs; else goto c82xt;
       c82xs: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c82xt: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.864711647 UTC

[section ""data" . GHC.IO.Device.$fOrdSeekMode_closure" {
     GHC.IO.Device.$fOrdSeekMode_closure:
         const GHC.Classes.C:Ord_con_info;
         const GHC.IO.Device.$fEqSeekMode_closure+1;
         const GHC.IO.Device.$fOrdSeekMode_$ccompare_closure+2;
         const GHC.IO.Device.$fOrdSeekMode_$c<_closure+2;
         const GHC.IO.Device.$fOrdSeekMode_$c<=_closure+2;
         const GHC.IO.Device.$fOrdSeekMode_$c>_closure+2;
         const GHC.IO.Device.$fOrdSeekMode_$c>=_closure+2;
         const GHC.IO.Device.$fOrdSeekMode_$cmax_closure+2;
         const GHC.IO.Device.$fOrdSeekMode_$cmin_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.866167495 UTC

[section ""data" . GHC.IO.Device.$w$cunsafeIndex_closure" {
     GHC.IO.Device.$w$cunsafeIndex_closure:
         const GHC.IO.Device.$w$cunsafeIndex_info;
 },
 GHC.IO.Device.$w$cunsafeIndex_entry() //  [R2, R3]
         { info_tbl: [(c82xQ,
                       label: GHC.IO.Device.$w$cunsafeIndex_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82xQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c82xR; else goto c82xS;
       c82xR: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$w$cunsafeIndex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c82xS: // global
           I64[Sp - 16] = block_c82xI_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u82z5; else goto c82xJ;
       u82z5: // global
           call _c82xI(R1) args: 0, res: 0, upd: 0;
       c82xJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c82xI() //  [R1]
         { info_tbl: [(c82xI,
                       label: block_c82xI_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82xI: // global
           _s826Z::P64 = P64[Sp + 8];
           _c82xP::P64 = R1 & 7;
           if (_c82xP::P64 < 3) goto u82yR; else goto c82xO;
       u82yR: // global
           if (_c82xP::P64 < 2) goto c82xM; else goto c82xN;
       c82xM: // global
           I64[Sp + 8] = block_c82xV_info;
           R1 = _s826Z::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u82z2; else goto c82xX;
       u82z2: // global
           call _c82xV(R1) args: 0, res: 0, upd: 0;
       c82xX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c82xN: // global
           I64[Sp + 8] = block_c82ye_info;
           R1 = _s826Z::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u82z3; else goto c82yg;
       u82z3: // global
           call _c82ye(R1) args: 0, res: 0, upd: 0;
       c82yg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c82xO: // global
           I64[Sp + 8] = block_c82yx_info;
           R1 = _s826Z::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u82z4; else goto c82yz;
       u82z4: // global
           call _c82yx(R1) args: 0, res: 0, upd: 0;
       c82yz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c82xV() //  [R1]
         { info_tbl: [(c82xV,
                       label: block_c82xV_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82xV: // global
           _c82yQ::P64 = R1 & 7;
           if (_c82yQ::P64 < 3) goto u82yS; else goto c82yb;
       u82yS: // global
           if (_c82yQ::P64 < 2) goto u82yW; else goto u82yV;
       u82yW: // global
           Sp = Sp + 8;
           call _c82yN() args: 0, res: 0, upd: 0;
       u82yV: // global
           Sp = Sp + 8;
           call _c82yu() args: 0, res: 0, upd: 0;
       c82yb: // global
           R1 = 2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c82ye() //  [R1]
         { info_tbl: [(c82ye,
                       label: block_c82ye_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82ye: // global
           _c82yP::P64 = R1 & 7;
           if (_c82yP::P64 < 3) goto u82yT; else goto u82yX;
       u82yT: // global
           if (_c82yP::P64 < 2) goto u82yZ; else goto u82yY;
       u82yZ: // global
           Sp = Sp + 8;
           call _c82yJ() args: 0, res: 0, upd: 0;
       u82yY: // global
           Sp = Sp + 8;
           call _c82yN() args: 0, res: 0, upd: 0;
       u82yX: // global
           Sp = Sp + 8;
           call _c82yu() args: 0, res: 0, upd: 0;
     }
 },
 _c82yu() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82yu: // global
           R1 = 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c82yx() //  [R1]
         { info_tbl: [(c82yx,
                       label: block_c82yx_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82yx: // global
           _c82yO::P64 = R1 & 7;
           if (_c82yO::P64 < 3) goto u82yU; else goto u82z0;
       u82yU: // global
           if (_c82yO::P64 < 2) goto c82yF; else goto u82z1;
       c82yF: // global
           R1 = (-2);
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u82z1: // global
           Sp = Sp + 8;
           call _c82yJ() args: 0, res: 0, upd: 0;
       u82z0: // global
           Sp = Sp + 8;
           call _c82yN() args: 0, res: 0, upd: 0;
     }
 },
 _c82yJ() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82yJ: // global
           R1 = (-1);
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c82yN() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82yN: // global
           R1 = 0;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.868629755 UTC

[section ""data" . GHC.IO.Device.$fIxSeekMode_$cunsafeIndex_closure" {
     GHC.IO.Device.$fIxSeekMode_$cunsafeIndex_closure:
         const GHC.IO.Device.$fIxSeekMode_$cunsafeIndex_info;
 },
 GHC.IO.Device.$fIxSeekMode_$cunsafeIndex_entry() //  [R2, R3]
         { info_tbl: [(c82zk,
                       label: GHC.IO.Device.$fIxSeekMode_$cunsafeIndex_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82zk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c82zs; else goto c82zt;
       c82zs: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fIxSeekMode_$cunsafeIndex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c82zt: // global
           I64[Sp - 16] = block_c82zh_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u82zy; else goto c82zi;
       u82zy: // global
           call _c82zh(R1) args: 0, res: 0, upd: 0;
       c82zi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c82zh() //  [R1]
         { info_tbl: [(c82zh,
                       label: block_c82zh_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82zh: // global
           _s8275::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c82zn_info;
           R3 = _s8275::P64;
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.IO.Device.$w$cunsafeIndex_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c82zn() //  [R1]
         { info_tbl: [(c82zn,
                       label: block_c82zn_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82zn: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c82zx; else goto c82zw;
       c82zx: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c82zw: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.872418526 UTC

[section ""data" . GHC.IO.Device.$w$cinRange_closure" {
     GHC.IO.Device.$w$cinRange_closure:
         const GHC.IO.Device.$w$cinRange_info;
 },
 GHC.IO.Device.$w$cinRange_entry() //  [R2, R3, R4]
         { info_tbl: [(c82zN,
                       label: GHC.IO.Device.$w$cinRange_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82zN: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c82zO; else goto c82zP;
       c82zO: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$w$cinRange_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c82zP: // global
           I64[Sp - 24] = block_c82zF_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u82B9; else goto c82zG;
       u82B9: // global
           call _c82zF(R1) args: 0, res: 0, upd: 0;
       c82zG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c82zF() //  [R1]
         { info_tbl: [(c82zF,
                       label: block_c82zF_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82zF: // global
           _s827b::P64 = P64[Sp + 8];
           _c82zM::P64 = R1 & 7;
           if (_c82zM::P64 < 3) goto u82B5; else goto c82zL;
       u82B5: // global
           if (_c82zM::P64 < 2) goto c82zJ; else goto c82zK;
       c82zJ: // global
           _s827e::I64 = 0;
           goto s827d;
       c82zK: // global
           _s827e::I64 = 1;
           goto s827d;
       c82zL: // global
           _s827e::I64 = 2;
           goto s827d;
       s827d: // global
           I64[Sp] = block_c82zV_info;
           R1 = _s827b::P64;
           I64[Sp + 8] = _s827e::I64;
           if (R1 & 7 != 0) goto u82B8; else goto c82Aw;
       u82B8: // global
           call _c82zV(R1) args: 0, res: 0, upd: 0;
       c82Aw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c82zV() //  [R1]
         { info_tbl: [(c82zV,
                       label: block_c82zV_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82zV: // global
           _s827c::P64 = P64[Sp + 16];
           _c82AU::P64 = R1 & 7;
           if (_c82AU::P64 < 3) goto u82B6; else goto c82AK;
       u82B6: // global
           if (_c82AU::P64 < 2) goto c82AC; else goto c82AG;
       c82AC: // global
           _s827g::I64 = 0;
           goto s827f;
       c82AG: // global
           _s827g::I64 = 1;
           goto s827f;
       c82AK: // global
           _s827g::I64 = 2;
           goto s827f;
       s827f: // global
           I64[Sp] = block_c82A0_info;
           R1 = _s827c::P64;
           I64[Sp + 16] = _s827g::I64;
           if (R1 & 7 != 0) goto u82Ba; else goto c82A2;
       u82Ba: // global
           call _c82A0(R1) args: 0, res: 0, upd: 0;
       c82A2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c82A0() //  [R1]
         { info_tbl: [(c82A0,
                       label: block_c82A0_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82A0: // global
           _s827e::I64 = I64[Sp + 8];
           _s827g::I64 = I64[Sp + 16];
           _c82AV::P64 = R1 & 7;
           if (_c82AV::P64 < 3) goto u82B7; else goto c82Av;
       u82B7: // global
           if (_c82AV::P64 < 2) goto c82Ad; else goto c82Am;
       c82Ad: // global
           if (%MO_S_Lt_W64(0, _s827e::I64)) goto c82At; else goto c82Ab;
       c82Ab: // global
           R1 = I64[(%MO_S_Le_W64(0,
                                  _s827g::I64) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c82Am: // global
           if (%MO_S_Lt_W64(1, _s827e::I64)) goto c82At; else goto c82Al;
       c82Al: // global
           R1 = I64[(%MO_S_Le_W64(1,
                                  _s827g::I64) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c82Av: // global
           if (%MO_S_Lt_W64(2, _s827e::I64)) goto c82At; else goto c82Au;
       c82At: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c82Au: // global
           R1 = I64[(%MO_S_Le_W64(2,
                                  _s827g::I64) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.875210638 UTC

[section ""data" . GHC.IO.Device.$fIxSeekMode_$cinRange_closure" {
     GHC.IO.Device.$fIxSeekMode_$cinRange_closure:
         const GHC.IO.Device.$fIxSeekMode_$cinRange_info;
 },
 GHC.IO.Device.$fIxSeekMode_$cinRange_entry() //  [R2, R3]
         { info_tbl: [(c82Bi,
                       label: GHC.IO.Device.$fIxSeekMode_$cinRange_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82Bi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c82Bj; else goto c82Bk;
       c82Bj: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fIxSeekMode_$cinRange_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c82Bk: // global
           I64[Sp - 16] = block_c82Bf_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u82Bo; else goto c82Bg;
       u82Bo: // global
           call _c82Bf(R1) args: 0, res: 0, upd: 0;
       c82Bg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c82Bf() //  [R1]
         { info_tbl: [(c82Bf,
                       label: block_c82Bf_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82Bf: // global
           R4 = P64[Sp + 8];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call GHC.IO.Device.$w$cinRange_entry(R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.876227807 UTC

[section ""data" . lvl_r81Zy_closure" {
     lvl_r81Zy_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.876807923 UTC

[section ""data" . lvl1_r81Zz_closure" {
     lvl1_r81Zz_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.877400536 UTC

[section ""data" . lvl2_r81ZA_closure" {
     lvl2_r81ZA_closure:
         const GHC.Types.I#_con_info;
         const 2;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.87820637 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_$cfromEnum_closure" {
     GHC.IO.Device.$fEnumSeekMode_$cfromEnum_closure:
         const GHC.IO.Device.$fEnumSeekMode_$cfromEnum_info;
 },
 GHC.IO.Device.$fEnumSeekMode_$cfromEnum_entry() //  [R2]
         { info_tbl: [(c82BB,
                       label: GHC.IO.Device.$fEnumSeekMode_$cfromEnum_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82BB: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c82BC; else goto c82BD;
       c82BC: // global
           R2 = R2;
           R1 = GHC.IO.Device.$fEnumSeekMode_$cfromEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c82BD: // global
           I64[Sp - 8] = block_c82Bt_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u82BO; else goto c82Bu;
       u82BO: // global
           call _c82Bt(R1) args: 0, res: 0, upd: 0;
       c82Bu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c82Bt() //  [R1]
         { info_tbl: [(c82Bt,
                       label: block_c82Bt_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82Bt: // global
           _c82BA::P64 = R1 & 7;
           if (_c82BA::P64 < 3) goto u82BN; else goto c82Bz;
       u82BN: // global
           if (_c82BA::P64 < 2) goto c82Bx; else goto c82By;
       c82Bx: // global
           R1 = lvl_r81Zy_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c82By: // global
           R1 = lvl1_r81Zz_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c82Bz: // global
           R1 = lvl2_r81ZA_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.879788518 UTC

[section ""data" . GHC.IO.Device.$fIxSeekMode_go1_closure" {
     GHC.IO.Device.$fIxSeekMode_go1_closure:
         const GHC.IO.Device.$fIxSeekMode_go1_info;
 },
 sat_s827B_entry() //  [R1]
         { info_tbl: [(c82C1,
                       label: sat_s827B_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82C1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c82C2; else goto c82C3;
       c82C2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c82C3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s827z::I64 = I64[R1 + 16];
           if (_s827z::I64 != 0) goto c82BZ; else goto c82C0;
       c82BZ: // global
           R2 = _s827z::I64 + 1;
           Sp = Sp - 16;
           call GHC.IO.Device.$fIxSeekMode_go1_entry(R2) args: 24, res: 0, upd: 24;
       c82C0: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s827y_entry() //  [R1]
         { info_tbl: [(c82Ca,
                       label: sat_s827y_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82Ca: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c82Cb; else goto c82Cc;
       c82Cb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c82Cc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.IO.Device.$fIxSeekMode_go1_entry() //  [R2]
         { info_tbl: [(c82Ce,
                       label: GHC.IO.Device.$fIxSeekMode_go1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82Ce: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c82Ci; else goto c82Ch;
       c82Ci: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.IO.Device.$fIxSeekMode_go1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c82Ch: // global
           I64[Hp - 64] = sat_s827B_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s827y_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.881629147 UTC

[section ""data" . GHC.IO.Device.$fIxSeekMode_go_closure" {
     GHC.IO.Device.$fIxSeekMode_go_closure:
         const GHC.IO.Device.$fIxSeekMode_go_info;
 },
 sat_s827G_entry() //  [R1]
         { info_tbl: [(c82Cv,
                       label: sat_s827G_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82Cv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c82Cw; else goto c82Cx;
       c82Cw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c82Cx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s827E::I64 = I64[R1 + 16];
           if (_s827E::I64 != 1) goto c82Ct; else goto c82Cu;
       c82Ct: // global
           R2 = _s827E::I64 + 1;
           Sp = Sp - 16;
           call GHC.IO.Device.$fIxSeekMode_go_entry(R2) args: 24, res: 0, upd: 24;
       c82Cu: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s827D_entry() //  [R1]
         { info_tbl: [(c82CE,
                       label: sat_s827D_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82CE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c82CF; else goto c82CG;
       c82CF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c82CG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.IO.Device.$fIxSeekMode_go_entry() //  [R2]
         { info_tbl: [(c82CI,
                       label: GHC.IO.Device.$fIxSeekMode_go_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82CI: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c82CM; else goto c82CL;
       c82CM: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.IO.Device.$fIxSeekMode_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c82CL: // global
           I64[Hp - 64] = sat_s827G_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s827D_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.883461053 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_go3_closure" {
     GHC.IO.Device.$fEnumSeekMode_go3_closure:
         const GHC.IO.Device.$fEnumSeekMode_go3_info;
 },
 sat_s827L_entry() //  [R1]
         { info_tbl: [(c82CZ,
                       label: sat_s827L_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82CZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c82D0; else goto c82D1;
       c82D0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c82D1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s827J::I64 = I64[R1 + 16];
           if (_s827J::I64 != 2) goto c82CX; else goto c82CY;
       c82CX: // global
           R2 = _s827J::I64 + 1;
           Sp = Sp - 16;
           call GHC.IO.Device.$fEnumSeekMode_go3_entry(R2) args: 24, res: 0, upd: 24;
       c82CY: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s827I_entry() //  [R1]
         { info_tbl: [(c82D8,
                       label: sat_s827I_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82D8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c82D9; else goto c82Da;
       c82D9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c82Da: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.IO.Device.$fEnumSeekMode_go3_entry() //  [R2]
         { info_tbl: [(c82Dc,
                       label: GHC.IO.Device.$fEnumSeekMode_go3_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82Dc: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c82Dg; else goto c82Df;
       c82Dg: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.IO.Device.$fEnumSeekMode_go3_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c82Df: // global
           I64[Hp - 64] = sat_s827L_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s827I_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.885504974 UTC

[section ""data" . GHC.IO.Device.$w$crange_closure" {
     GHC.IO.Device.$w$crange_closure:
         const GHC.IO.Device.$w$crange_info;
 },
 GHC.IO.Device.$w$crange_entry() //  [R2, R3]
         { info_tbl: [(c82Dv,
                       label: GHC.IO.Device.$w$crange_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82Dv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c82Dw; else goto c82Dx;
       c82Dw: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$w$crange_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c82Dx: // global
           I64[Sp - 16] = block_c82Dn_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u82Ek; else goto c82Do;
       u82Ek: // global
           call _c82Dn(R1) args: 0, res: 0, upd: 0;
       c82Do: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c82Dn() //  [R1]
         { info_tbl: [(c82Dn,
                       label: block_c82Dn_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82Dn: // global
           _s827N::P64 = P64[Sp + 8];
           _c82Du::P64 = R1 & 7;
           if (_c82Du::P64 < 3) goto u82Eh; else goto c82Dt;
       u82Eh: // global
           if (_c82Du::P64 < 2) goto c82Dr; else goto c82Ds;
       c82Dr: // global
           _s827P::I64 = 0;
           goto s827O;
       c82Ds: // global
           _s827P::I64 = 1;
           goto s827O;
       c82Dt: // global
           _s827P::I64 = 2;
           goto s827O;
       s827O: // global
           I64[Sp] = block_c82DB_info;
           R1 = _s827N::P64;
           I64[Sp + 8] = _s827P::I64;
           if (R1 & 7 != 0) goto u82Ej; else goto c82DD;
       u82Ej: // global
           call _c82DB(R1) args: 0, res: 0, upd: 0;
       c82DD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c82DB() //  [R1]
         { info_tbl: [(c82DB,
                       label: block_c82DB_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82DB: // global
           _s827P::I64 = I64[Sp + 8];
           _c82Eg::P64 = R1 & 7;
           if (_c82Eg::P64 < 3) goto u82Ei; else goto c82E6;
       u82Ei: // global
           if (_c82Eg::P64 < 2) goto c82DO; else goto c82DX;
       c82DO: // global
           if (%MO_S_Gt_W64(_s827P::I64, 0)) goto c82E5; else goto c82DL;
       c82DL: // global
           R2 = _s827P::I64;
           Sp = Sp + 16;
           call GHC.IO.Device.$fIxSeekMode_go1_entry(R2) args: 8, res: 0, upd: 8;
       c82DX: // global
           if (%MO_S_Gt_W64(_s827P::I64, 1)) goto c82E5; else goto c82DV;
       c82DV: // global
           R2 = _s827P::I64;
           Sp = Sp + 16;
           call GHC.IO.Device.$fIxSeekMode_go_entry(R2) args: 8, res: 0, upd: 8;
       c82E6: // global
           if (%MO_S_Gt_W64(_s827P::I64, 2)) goto c82E5; else goto c82E4;
       c82E5: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c82E4: // global
           R2 = _s827P::I64;
           Sp = Sp + 16;
           call GHC.IO.Device.$fEnumSeekMode_go3_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.887284824 UTC

[section ""data" . GHC.IO.Device.$fIxSeekMode_$crange_closure" {
     GHC.IO.Device.$fIxSeekMode_$crange_closure:
         const GHC.IO.Device.$fIxSeekMode_$crange_info;
 },
 GHC.IO.Device.$fIxSeekMode_$crange_entry() //  [R2]
         { info_tbl: [(c82Es,
                       label: GHC.IO.Device.$fIxSeekMode_$crange_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82Es: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c82Et; else goto c82Eu;
       c82Et: // global
           R2 = R2;
           R1 = GHC.IO.Device.$fIxSeekMode_$crange_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c82Eu: // global
           I64[Sp - 8] = block_c82Ep_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u82Ey; else goto c82Eq;
       u82Ey: // global
           call _c82Ep(R1) args: 0, res: 0, upd: 0;
       c82Eq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c82Ep() //  [R1]
         { info_tbl: [(c82Ep,
                       label: block_c82Ep_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82Ep: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.IO.Device.$w$crange_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.889098053 UTC

[section ""data" . GHC.IO.Device.$w$crangeSize_closure" {
     GHC.IO.Device.$w$crangeSize_closure:
         const GHC.IO.Device.$w$crangeSize_info;
 },
 GHC.IO.Device.$w$crangeSize_entry() //  [R2, R3]
         { info_tbl: [(c82EJ,
                       label: GHC.IO.Device.$w$crangeSize_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82EJ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c82EK; else goto c82EL;
       c82EK: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$w$crangeSize_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c82EL: // global
           I64[Sp - 24] = block_c82ED_info;
           R4 = R3;
           _s8280::P64 = R3;
           R3 = R3;
           _s827Z::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s827Z::P64;
           P64[Sp - 8] = _s8280::P64;
           Sp = Sp - 24;
           call GHC.IO.Device.$w$cinRange_entry(R4,
                                                R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _c82ED() //  [R1]
         { info_tbl: [(c82ED,
                       label: block_c82ED_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82ED: // global
           if (R1 & 7 == 1) goto u82G2; else goto c82EH;
       u82G2: // global
           Sp = Sp + 24;
           call _c82FP() args: 0, res: 0, upd: 0;
       c82EH: // global
           _s827Z::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c82ER_info;
           R1 = _s827Z::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u82Ga; else goto c82ET;
       u82Ga: // global
           call _c82ER(R1) args: 0, res: 0, upd: 0;
       c82ET: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c82ER() //  [R1]
         { info_tbl: [(c82ER,
                       label: block_c82ER_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82ER: // global
           _s8280::P64 = P64[Sp + 8];
           _c82FU::P64 = R1 & 7;
           if (_c82FU::P64 < 3) goto u82FY; else goto c82FE;
       u82FY: // global
           if (_c82FU::P64 < 2) goto c82F0; else goto c82Fk;
       c82F0: // global
           I64[Sp + 8] = block_c82EX_info;
           R1 = _s8280::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u82Gc; else goto c82F1;
       u82Gc: // global
           call _c82EX(R1) args: 0, res: 0, upd: 0;
       c82F1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c82Fk: // global
           I64[Sp + 8] = block_c82Fi_info;
           R1 = _s8280::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u82Gd; else goto c82Fl;
       u82Gd: // global
           call _c82Fi(R1) args: 0, res: 0, upd: 0;
       c82Fl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c82FE: // global
           I64[Sp + 8] = block_c82FC_info;
           R1 = _s8280::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u82Ge; else goto c82FF;
       u82Ge: // global
           call _c82FC(R1) args: 0, res: 0, upd: 0;
       c82FF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c82EX() //  [R1]
         { info_tbl: [(c82EX,
                       label: block_c82EX_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82EX: // global
           _c82FX::P64 = R1 & 7;
           if (_c82FX::P64 < 3) goto u82FZ; else goto c82Ff;
       u82FZ: // global
           if (_c82FX::P64 < 2) goto u82G4; else goto u82G3;
       u82G4: // global
           Sp = Sp + 8;
           call _c82FT() args: 0, res: 0, upd: 0;
       u82G3: // global
           Sp = Sp + 8;
           call _c82Fz() args: 0, res: 0, upd: 0;
       c82Ff: // global
           R1 = 3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c82Fi() //  [R1]
         { info_tbl: [(c82Fi,
                       label: block_c82Fi_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82Fi: // global
           _c82FW::P64 = R1 & 7;
           if (_c82FW::P64 < 3) goto u82G0; else goto u82G5;
       u82G0: // global
           if (_c82FW::P64 < 2) goto u82G7; else goto u82G6;
       u82G7: // global
           Sp = Sp + 8;
           call _c82FP() args: 0, res: 0, upd: 0;
       u82G6: // global
           Sp = Sp + 8;
           call _c82FT() args: 0, res: 0, upd: 0;
       u82G5: // global
           Sp = Sp + 8;
           call _c82Fz() args: 0, res: 0, upd: 0;
     }
 },
 _c82Fz() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82Fz: // global
           R1 = 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c82FC() //  [R1]
         { info_tbl: [(c82FC,
                       label: block_c82FC_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82FC: // global
           _c82FV::P64 = R1 & 7;
           if (_c82FV::P64 < 3) goto u82G1; else goto u82G8;
       u82G1: // global
           if (_c82FV::P64 < 2) goto c82FL; else goto u82G9;
       c82FL: // global
           R1 = (-1);
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u82G9: // global
           Sp = Sp + 8;
           call _c82FP() args: 0, res: 0, upd: 0;
       u82G8: // global
           Sp = Sp + 8;
           call _c82FT() args: 0, res: 0, upd: 0;
     }
 },
 _c82FP() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82FP: // global
           R1 = 0;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c82FT() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82FT: // global
           R1 = 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.892127365 UTC

[section ""data" . GHC.IO.Device.$fIxSeekMode_$crangeSize_closure" {
     GHC.IO.Device.$fIxSeekMode_$crangeSize_closure:
         const GHC.IO.Device.$fIxSeekMode_$crangeSize_info;
 },
 GHC.IO.Device.$fIxSeekMode_$crangeSize_entry() //  [R2]
         { info_tbl: [(c82Gt,
                       label: GHC.IO.Device.$fIxSeekMode_$crangeSize_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82Gt: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c82GB; else goto c82GC;
       c82GB: // global
           R2 = R2;
           R1 = GHC.IO.Device.$fIxSeekMode_$crangeSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c82GC: // global
           I64[Sp - 8] = block_c82Gq_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u82GH; else goto c82Gr;
       u82GH: // global
           call _c82Gq(R1) args: 0, res: 0, upd: 0;
       c82Gr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c82Gq() //  [R1]
         { info_tbl: [(c82Gq,
                       label: block_c82Gq_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82Gq: // global
           I64[Sp] = block_c82Gw_info;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.IO.Device.$w$crangeSize_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 _c82Gw() //  [R1]
         { info_tbl: [(c82Gw,
                       label: block_c82Gw_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82Gw: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c82GG; else goto c82GF;
       c82GG: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c82GF: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.894091151 UTC

[section ""data" . GHC.IO.Device.$w$cunsafeRangeSize_closure" {
     GHC.IO.Device.$w$cunsafeRangeSize_closure:
         const GHC.IO.Device.$w$cunsafeRangeSize_info;
 },
 GHC.IO.Device.$w$cunsafeRangeSize_entry() //  [R2, R3]
         { info_tbl: [(c82GU,
                       label: GHC.IO.Device.$w$cunsafeRangeSize_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82GU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c82GV; else goto c82GW;
       c82GV: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$w$cunsafeRangeSize_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c82GW: // global
           I64[Sp - 16] = block_c82GM_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u82I9; else goto c82GN;
       u82I9: // global
           call _c82GM(R1) args: 0, res: 0, upd: 0;
       c82GN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c82GM() //  [R1]
         { info_tbl: [(c82GM,
                       label: block_c82GM_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82GM: // global
           _s828c::P64 = P64[Sp + 8];
           _c82GT::P64 = R1 & 7;
           if (_c82GT::P64 < 3) goto u82HV; else goto c82GS;
       u82HV: // global
           if (_c82GT::P64 < 2) goto c82GQ; else goto c82GR;
       c82GQ: // global
           I64[Sp + 8] = block_c82GZ_info;
           R1 = _s828c::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u82I6; else goto c82H1;
       u82I6: // global
           call _c82GZ(R1) args: 0, res: 0, upd: 0;
       c82H1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c82GR: // global
           I64[Sp + 8] = block_c82Hi_info;
           R1 = _s828c::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u82I7; else goto c82Hk;
       u82I7: // global
           call _c82Hi(R1) args: 0, res: 0, upd: 0;
       c82Hk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c82GS: // global
           I64[Sp + 8] = block_c82HB_info;
           R1 = _s828c::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u82I8; else goto c82HD;
       u82I8: // global
           call _c82HB(R1) args: 0, res: 0, upd: 0;
       c82HD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c82GZ() //  [R1]
         { info_tbl: [(c82GZ,
                       label: block_c82GZ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82GZ: // global
           _c82HU::P64 = R1 & 7;
           if (_c82HU::P64 < 3) goto u82HW; else goto c82Hf;
       u82HW: // global
           if (_c82HU::P64 < 2) goto u82I0; else goto u82HZ;
       u82I0: // global
           Sp = Sp + 8;
           call _c82HR() args: 0, res: 0, upd: 0;
       u82HZ: // global
           Sp = Sp + 8;
           call _c82Hy() args: 0, res: 0, upd: 0;
       c82Hf: // global
           R1 = 3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c82Hi() //  [R1]
         { info_tbl: [(c82Hi,
                       label: block_c82Hi_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82Hi: // global
           _c82HT::P64 = R1 & 7;
           if (_c82HT::P64 < 3) goto u82HX; else goto u82I1;
       u82HX: // global
           if (_c82HT::P64 < 2) goto u82I3; else goto u82I2;
       u82I3: // global
           Sp = Sp + 8;
           call _c82HN() args: 0, res: 0, upd: 0;
       u82I2: // global
           Sp = Sp + 8;
           call _c82HR() args: 0, res: 0, upd: 0;
       u82I1: // global
           Sp = Sp + 8;
           call _c82Hy() args: 0, res: 0, upd: 0;
     }
 },
 _c82Hy() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82Hy: // global
           R1 = 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c82HB() //  [R1]
         { info_tbl: [(c82HB,
                       label: block_c82HB_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82HB: // global
           _c82HS::P64 = R1 & 7;
           if (_c82HS::P64 < 3) goto u82HY; else goto u82I4;
       u82HY: // global
           if (_c82HS::P64 < 2) goto c82HJ; else goto u82I5;
       c82HJ: // global
           R1 = (-1);
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u82I5: // global
           Sp = Sp + 8;
           call _c82HN() args: 0, res: 0, upd: 0;
       u82I4: // global
           Sp = Sp + 8;
           call _c82HR() args: 0, res: 0, upd: 0;
     }
 },
 _c82HN() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82HN: // global
           R1 = 0;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c82HR() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82HR: // global
           R1 = 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.896518736 UTC

[section ""data" . GHC.IO.Device.$fIxSeekMode_$cunsafeRangeSize_closure" {
     GHC.IO.Device.$fIxSeekMode_$cunsafeRangeSize_closure:
         const GHC.IO.Device.$fIxSeekMode_$cunsafeRangeSize_info;
 },
 GHC.IO.Device.$fIxSeekMode_$cunsafeRangeSize_entry() //  [R2]
         { info_tbl: [(c82Io,
                       label: GHC.IO.Device.$fIxSeekMode_$cunsafeRangeSize_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82Io: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c82Iw; else goto c82Ix;
       c82Iw: // global
           R2 = R2;
           R1 = GHC.IO.Device.$fIxSeekMode_$cunsafeRangeSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c82Ix: // global
           I64[Sp - 8] = block_c82Il_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u82IC; else goto c82Im;
       u82IC: // global
           call _c82Il(R1) args: 0, res: 0, upd: 0;
       c82Im: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c82Il() //  [R1]
         { info_tbl: [(c82Il,
                       label: block_c82Il_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82Il: // global
           I64[Sp] = block_c82Ir_info;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.IO.Device.$w$cunsafeRangeSize_entry(R3,
                                                        R2) args: 8, res: 8, upd: 8;
     }
 },
 _c82Ir() //  [R1]
         { info_tbl: [(c82Ir,
                       label: block_c82Ir_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82Ir: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c82IB; else goto c82IA;
       c82IB: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c82IA: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.898163144 UTC

[section ""data" . GHC.IO.Device.$fIxSeekMode_$cindex_closure" {
     GHC.IO.Device.$fIxSeekMode_$cindex_closure:
         const GHC.IO.Device.$fIxSeekMode_$cindex_info;
         const 0;
 },
 GHC.IO.Device.$fIxSeekMode_$cindex_entry() //  [R2, R3]
         { info_tbl: [(c82IK,
                       label: GHC.IO.Device.$fIxSeekMode_$cindex_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82IK: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c82IL; else goto c82IM;
       c82IL: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fIxSeekMode_$cindex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c82IM: // global
           I64[Sp - 16] = block_c82IH_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u82Ja; else goto c82II;
       u82Ja: // global
           call _c82IH(R1) args: 0, res: 0, upd: 0;
       c82II: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c82IH() //  [R1]
         { info_tbl: [(c82IH,
                       label: block_c82IH_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82IH: // global
           I64[Sp - 8] = block_c82IP_info;
           R4 = P64[Sp + 8];
           R3 = P64[R1 + 15];
           _s828p::P64 = P64[R1 + 7];
           R2 = _s828p::P64;
           P64[Sp] = _s828p::P64;
           Sp = Sp - 8;
           call GHC.IO.Device.$w$cinRange_entry(R4,
                                                R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _c82IP() //  [R1]
         { info_tbl: [(c82IP,
                       label: block_c82IP_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82IP: // global
           if (R1 & 7 == 1) goto c82IW; else goto c82J5;
       c82IW: // global
           R1 = GHC.Arr.hopelessIndexError_closure;
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c82J5: // global
           _s828n::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c82IZ_info;
           R3 = _s828n::P64;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.IO.Device.$w$cunsafeIndex_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c82IZ() //  [R1]
         { info_tbl: [(c82IZ,
                       label: block_c82IZ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82IZ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c82J8; else goto c82J7;
       c82J8: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c82J7: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.899699488 UTC

[section ""data" . GHC.IO.Device.$fIxSeekMode_closure" {
     GHC.IO.Device.$fIxSeekMode_closure:
         const GHC.Arr.C:Ix_con_info;
         const GHC.IO.Device.$fOrdSeekMode_closure+1;
         const GHC.IO.Device.$fIxSeekMode_$crange_closure+1;
         const GHC.IO.Device.$fIxSeekMode_$cindex_closure+2;
         const GHC.IO.Device.$fIxSeekMode_$cunsafeIndex_closure+2;
         const GHC.IO.Device.$fIxSeekMode_$cinRange_closure+2;
         const GHC.IO.Device.$fIxSeekMode_$crangeSize_closure+1;
         const GHC.IO.Device.$fIxSeekMode_$cunsafeRangeSize_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.900308677 UTC

[section ""cstring" . lvl3_r81ZB_bytes" {
     lvl3_r81ZB_bytes:
         I8[] [101,114,114,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.901014378 UTC

[section ""data" . lvl4_r81ZC_closure" {
     lvl4_r81ZC_closure:
         const lvl4_r81ZC_info;
         const 0;
         const 0;
         const 0;
 },
 lvl4_r81ZC_entry() //  [R1]
         { info_tbl: [(c82Jh,
                       label: lvl4_r81ZC_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82Jh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c82Ji; else goto c82Jj;
       c82Ji: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c82Jj: // global
           (_c82Je::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c82Je::I64 == 0) goto c82Jg; else goto c82Jf;
       c82Jg: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c82Jf: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c82Je::I64;
           R2 = lvl3_r81ZB_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.902213883 UTC

[section ""cstring" . GHC.IO.Device.$trModule4_bytes" {
     GHC.IO.Device.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.902976411 UTC

[section ""data" . lvl5_r81ZD_closure" {
     lvl5_r81ZD_closure:
         const lvl5_r81ZD_info;
         const 0;
         const 0;
         const 0;
 },
 lvl5_r81ZD_entry() //  [R1]
         { info_tbl: [(c82Jq,
                       label: lvl5_r81ZD_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82Jq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c82Jr; else goto c82Js;
       c82Jr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c82Js: // global
           (_c82Jn::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c82Jn::I64 == 0) goto c82Jp; else goto c82Jo;
       c82Jp: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c82Jo: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c82Jn::I64;
           R2 = GHC.IO.Device.$trModule4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.903847024 UTC

[section ""cstring" . GHC.IO.Device.$trModule2_bytes" {
     GHC.IO.Device.$trModule2_bytes:
         I8[] [71,72,67,46,73,79,46,68,101,118,105,99,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.904542606 UTC

[section ""data" . lvl6_r81ZE_closure" {
     lvl6_r81ZE_closure:
         const lvl6_r81ZE_info;
         const 0;
         const 0;
         const 0;
 },
 lvl6_r81ZE_entry() //  [R1]
         { info_tbl: [(c82Jz,
                       label: lvl6_r81ZE_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82Jz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c82JA; else goto c82JB;
       c82JA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c82JB: // global
           (_c82Jw::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c82Jw::I64 == 0) goto c82Jy; else goto c82Jx;
       c82Jy: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c82Jx: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c82Jw::I64;
           R2 = GHC.IO.Device.$trModule2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.905446128 UTC

[section ""cstring" . lvl7_r81ZF_bytes" {
     lvl7_r81ZF_bytes:
         I8[] [46,47,71,72,67,47,73,79,47,68,101,118,105,99,101,46,104,115]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.906153036 UTC

[section ""data" . lvl8_r81ZG_closure" {
     lvl8_r81ZG_closure:
         const lvl8_r81ZG_info;
         const 0;
         const 0;
         const 0;
 },
 lvl8_r81ZG_entry() //  [R1]
         { info_tbl: [(c82JI,
                       label: lvl8_r81ZG_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82JI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c82JJ; else goto c82JK;
       c82JJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c82JK: // global
           (_c82JF::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c82JF::I64 == 0) goto c82JH; else goto c82JG;
       c82JH: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c82JG: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c82JF::I64;
           R2 = lvl7_r81ZF_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.907038277 UTC

[section ""data" . lvl9_r81ZH_closure" {
     lvl9_r81ZH_closure:
         const GHC.Types.I#_con_info;
         const 173;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.907601227 UTC

[section ""data" . lvl10_r81ZI_closure" {
     lvl10_r81ZI_closure:
         const GHC.Types.I#_con_info;
         const 16;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.908172115 UTC

[section ""data" . lvl11_r81ZJ_closure" {
     lvl11_r81ZJ_closure:
         const GHC.Types.I#_con_info;
         const 20;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.908730204 UTC

[section ""data" . lvl12_r81ZK_closure" {
     lvl12_r81ZK_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl5_r81ZD_closure;
         const lvl6_r81ZE_closure;
         const lvl8_r81ZG_closure;
         const lvl9_r81ZH_closure+1;
         const lvl10_r81ZI_closure+1;
         const lvl9_r81ZH_closure+1;
         const lvl11_r81ZJ_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.909316274 UTC

[section ""data" . lvl13_r81ZL_closure" {
     lvl13_r81ZL_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl4_r81ZC_closure;
         const lvl12_r81ZK_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.909909735 UTC

[section ""cstring" . lvl14_r81ZM_bytes" {
     lvl14_r81ZM_bytes:
         I8[] [112,114,101,100,123,83,101,101,107,77,111,100,101,125,58,32,116,114,105,101,100,32,116,111,32,116,97,107,101,32,96,112,114,101,100,39,32,111,102,32,102,105,114,115,116,32,116,97,103,32,105,110,32,101,110,117,109,101,114,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.910667444 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode4_closure" {
     GHC.IO.Device.$fEnumSeekMode4_closure:
         const GHC.IO.Device.$fEnumSeekMode4_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Device.$fEnumSeekMode4_entry() //  [R1]
         { info_tbl: [(c82JT,
                       label: GHC.IO.Device.$fEnumSeekMode4_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82JT: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c82JU; else goto c82JV;
       c82JU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c82JV: // global
           (_c82JO::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c82JO::I64 == 0) goto c82JQ; else goto c82JP;
       c82JQ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c82JP: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c82JO::I64;
           I64[Sp - 24] = block_c82JR_info;
           R2 = lvl14_r81ZM_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c82JR() //  [R1]
         { info_tbl: [(c82JR,
                       label: block_c82JR_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82JR: // global
           R3 = R1;
           R2 = lvl13_r81ZL_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.911980927 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_$cpred_closure" {
     GHC.IO.Device.$fEnumSeekMode_$cpred_closure:
         const GHC.IO.Device.$fEnumSeekMode_$cpred_info;
         const 0;
 },
 GHC.IO.Device.$fEnumSeekMode_$cpred_entry() //  [R2]
         { info_tbl: [(c82Kb,
                       label: GHC.IO.Device.$fEnumSeekMode_$cpred_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82Kb: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c82Kc; else goto c82Kd;
       c82Kc: // global
           R2 = R2;
           R1 = GHC.IO.Device.$fEnumSeekMode_$cpred_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c82Kd: // global
           I64[Sp - 8] = block_c82K3_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u82Ko; else goto c82K4;
       u82Ko: // global
           call _c82K3(R1) args: 0, res: 0, upd: 0;
       c82K4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c82K3() //  [R1]
         { info_tbl: [(c82K3,
                       label: block_c82K3_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82K3: // global
           _c82Ka::P64 = R1 & 7;
           if (_c82Ka::P64 < 3) goto u82Kn; else goto c82K9;
       u82Kn: // global
           if (_c82Ka::P64 < 2) goto c82K7; else goto c82K8;
       c82K7: // global
           R1 = GHC.IO.Device.$fEnumSeekMode4_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c82K8: // global
           R1 = GHC.IO.Device.AbsoluteSeek_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c82K9: // global
           R1 = GHC.IO.Device.RelativeSeek_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.913124742 UTC

[section ""cstring" . lvl15_r81ZN_bytes" {
     lvl15_r81ZN_bytes:
         I8[] [115,117,99,99,123,83,101,101,107,77,111,100,101,125,58,32,116,114,105,101,100,32,116,111,32,116,97,107,101,32,96,115,117,99,99,39,32,111,102,32,108,97,115,116,32,116,97,103,32,105,110,32,101,110,117,109,101,114,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.914121914 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode5_closure" {
     GHC.IO.Device.$fEnumSeekMode5_closure:
         const GHC.IO.Device.$fEnumSeekMode5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Device.$fEnumSeekMode5_entry() //  [R1]
         { info_tbl: [(c82Kx,
                       label: GHC.IO.Device.$fEnumSeekMode5_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82Kx: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c82Ky; else goto c82Kz;
       c82Ky: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c82Kz: // global
           (_c82Ks::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c82Ks::I64 == 0) goto c82Ku; else goto c82Kt;
       c82Ku: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c82Kt: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c82Ks::I64;
           I64[Sp - 24] = block_c82Kv_info;
           R2 = lvl15_r81ZN_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c82Kv() //  [R1]
         { info_tbl: [(c82Kv,
                       label: block_c82Kv_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82Kv: // global
           R3 = R1;
           R2 = lvl13_r81ZL_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.915434944 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_$csucc_closure" {
     GHC.IO.Device.$fEnumSeekMode_$csucc_closure:
         const GHC.IO.Device.$fEnumSeekMode_$csucc_info;
         const 0;
 },
 GHC.IO.Device.$fEnumSeekMode_$csucc_entry() //  [R2]
         { info_tbl: [(c82KP,
                       label: GHC.IO.Device.$fEnumSeekMode_$csucc_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82KP: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c82KQ; else goto c82KR;
       c82KQ: // global
           R2 = R2;
           R1 = GHC.IO.Device.$fEnumSeekMode_$csucc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c82KR: // global
           I64[Sp - 8] = block_c82KH_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u82L2; else goto c82KI;
       u82L2: // global
           call _c82KH(R1) args: 0, res: 0, upd: 0;
       c82KI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c82KH() //  [R1]
         { info_tbl: [(c82KH,
                       label: block_c82KH_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82KH: // global
           _c82KO::P64 = R1 & 7;
           if (_c82KO::P64 < 3) goto u82L1; else goto c82KN;
       u82L1: // global
           if (_c82KO::P64 < 2) goto c82KL; else goto c82KM;
       c82KL: // global
           R1 = GHC.IO.Device.RelativeSeek_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c82KM: // global
           R1 = GHC.IO.Device.SeekFromEnd_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c82KN: // global
           R1 = GHC.IO.Device.$fEnumSeekMode5_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.916541362 UTC

[section ""cstring" . lvl16_r81ZO_bytes" {
     lvl16_r81ZO_bytes:
         I8[] [41,32,105,115,32,111,117,116,115,105,100,101,32,111,102,32,101,110,117,109,101,114,97,116,105,111,110,39,115,32,114,97,110,103,101,32,40,48,44]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.917088031 UTC

[section ""cstring" . lvl17_r81ZP_bytes" {
     lvl17_r81ZP_bytes:
         I8[] [41]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.917862422 UTC

[section ""data" . lvl18_r81ZQ_closure" {
     lvl18_r81ZQ_closure:
         const lvl18_r81ZQ_info;
         const 0;
         const 0;
         const 0;
 },
 lvl18_r81ZQ_entry() //  [R1]
         { info_tbl: [(c82L9,
                       label: lvl18_r81ZQ_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82L9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c82La; else goto c82Lb;
       c82La: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c82Lb: // global
           (_c82L6::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c82L6::I64 == 0) goto c82L8; else goto c82L7;
       c82L8: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c82L7: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c82L6::I64;
           R2 = lvl17_r81ZP_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.919014218 UTC

[section ""data" . lvl19_r81ZR_closure" {
     lvl19_r81ZR_closure:
         const lvl19_r81ZR_info;
         const 0;
         const 0;
         const 0;
 },
 lvl19_r81ZR_entry() //  [R1]
         { info_tbl: [(c82Ll,
                       label: lvl19_r81ZR_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82Ll: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c82Lm; else goto c82Ln;
       c82Lm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c82Ln: // global
           (_c82Lf::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c82Lf::I64 == 0) goto c82Lh; else goto c82Lg;
       c82Lh: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c82Lg: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c82Lf::I64;
           I64[Sp - 24] = block_c82Li_info;
           R4 = lvl18_r81ZQ_closure;
           R3 = 2;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _c82Li() //  [R1, R2]
         { info_tbl: [(c82Li,
                       label: block_c82Li_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82Li: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c82Lq; else goto c82Lp;
       c82Lq: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c82Lp: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.920328229 UTC

[section ""data" . lvl20_r81ZS_closure" {
     lvl20_r81ZS_closure:
         const lvl20_r81ZS_info;
         const 0;
         const 0;
         const 0;
 },
 lvl20_r81ZS_entry() //  [R1]
         { info_tbl: [(c82Lx,
                       label: lvl20_r81ZS_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82Lx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c82Ly; else goto c82Lz;
       c82Ly: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c82Lz: // global
           (_c82Lu::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c82Lu::I64 == 0) goto c82Lw; else goto c82Lv;
       c82Lw: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c82Lv: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c82Lu::I64;
           R3 = lvl19_r81ZR_closure;
           R2 = lvl16_r81ZO_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.921301456 UTC

[section ""cstring" . lvl21_r81ZT_bytes" {
     lvl21_r81ZT_bytes:
         I8[] [116,111,69,110,117,109,123,83,101,101,107,77,111,100,101,125,58,32,116,97,103,32,40]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.922306078 UTC

[section ""data" . GHC.IO.Device.$wlvl_closure" {
     GHC.IO.Device.$wlvl_closure:
         const GHC.IO.Device.$wlvl_info;
         const 0;
 },
 sat_s828G_entry() //  [R1]
         { info_tbl: [(c82LL,
                       label: sat_s828G_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82LL: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c82LM; else goto c82LN;
       c82LM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c82LN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c82LI_info;
           R4 = lvl20_r81ZS_closure;
           R3 = I64[R1 + 16];
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _c82LI() //  [R1, R2]
         { info_tbl: [(c82LI,
                       label: block_c82LI_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82LI: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c82LQ; else goto c82LP;
       c82LQ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c82LP: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.IO.Device.$wlvl_entry() //  [R2]
         { info_tbl: [(c82LT,
                       label: GHC.IO.Device.$wlvl_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82LT: // global
           _s828C::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c82LU; else goto c82LV;
       c82LV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c82LX; else goto c82LW;
       c82LX: // global
           HpAlloc = 24;
           goto c82LU;
       c82LU: // global
           R2 = _s828C::I64;
           R1 = GHC.IO.Device.$wlvl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c82LW: // global
           I64[Hp - 16] = sat_s828G_info;
           I64[Hp] = _s828C::I64;
           I64[Sp - 8] = block_c82LR_info;
           R3 = Hp - 16;
           R2 = lvl21_r81ZT_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c82LR() //  [R1]
         { info_tbl: [(c82LR,
                       label: block_c82LR_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82LR: // global
           R3 = R1;
           R2 = lvl13_r81ZL_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.926152362 UTC

[section ""data" . GHC.IO.Device.$w$ctoEnum_closure" {
     GHC.IO.Device.$w$ctoEnum_closure:
         const GHC.IO.Device.$w$ctoEnum_info;
         const 0;
 },
 GHC.IO.Device.$w$ctoEnum_entry() //  [R2]
         { info_tbl: [(c82Ma,
                       label: GHC.IO.Device.$w$ctoEnum_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82Ma: // global
           _s828I::I64 = R2;
           if (%MO_S_Lt_W64(R2, 0)) goto c82Mi; else goto c82M9;
       c82M9: // global
           if (%MO_S_Gt_W64(_s828I::I64, 2)) goto c82Mi; else goto c82Mj;
       c82Mi: // global
           R2 = _s828I::I64;
           call GHC.IO.Device.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
       c82Mj: // global
           R1 = I64[(_s828I::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.927219817 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_$ctoEnum_closure" {
     GHC.IO.Device.$fEnumSeekMode_$ctoEnum_closure:
         const GHC.IO.Device.$fEnumSeekMode_$ctoEnum_info;
         const 0;
 },
 GHC.IO.Device.$fEnumSeekMode_$ctoEnum_entry() //  [R2]
         { info_tbl: [(c82Mr,
                       label: GHC.IO.Device.$fEnumSeekMode_$ctoEnum_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82Mr: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c82Ms; else goto c82Mt;
       c82Ms: // global
           R2 = R2;
           R1 = GHC.IO.Device.$fEnumSeekMode_$ctoEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c82Mt: // global
           I64[Sp - 8] = block_c82Mo_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u82Mx; else goto c82Mp;
       u82Mx: // global
           call _c82Mo(R1) args: 0, res: 0, upd: 0;
       c82Mp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c82Mo() //  [R1]
         { info_tbl: [(c82Mo,
                       label: block_c82Mo_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82Mo: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.IO.Device.$w$ctoEnum_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.928357143 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode3_closure" {
     GHC.IO.Device.$fEnumSeekMode3_closure:
         const GHC.IO.Device.$fEnumSeekMode3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Device.$fEnumSeekMode3_entry() //  [R1]
         { info_tbl: [(c82ME,
                       label: GHC.IO.Device.$fEnumSeekMode3_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82ME: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c82MF; else goto c82MG;
       c82MF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c82MG: // global
           (_c82MB::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c82MB::I64 == 0) goto c82MD; else goto c82MC;
       c82MD: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c82MC: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c82MB::I64;
           R2 = 0;
           Sp = Sp - 16;
           call GHC.IO.Device.$fEnumSeekMode_go3_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.929412091 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode2_closure" {
     GHC.IO.Device.$fEnumSeekMode2_closure:
         const GHC.IO.Device.$fEnumSeekMode2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Device.$fEnumSeekMode2_entry() //  [R1]
         { info_tbl: [(c82MN,
                       label: GHC.IO.Device.$fEnumSeekMode2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82MN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c82MO; else goto c82MP;
       c82MO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c82MP: // global
           (_c82MK::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c82MK::I64 == 0) goto c82MM; else goto c82ML;
       c82MM: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c82ML: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c82MK::I64;
           R2 = 1;
           Sp = Sp - 16;
           call GHC.IO.Device.$fEnumSeekMode_go3_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.930435437 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode1_closure" {
     GHC.IO.Device.$fEnumSeekMode1_closure:
         const GHC.IO.Device.$fEnumSeekMode1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Device.$fEnumSeekMode1_entry() //  [R1]
         { info_tbl: [(c82MW,
                       label: GHC.IO.Device.$fEnumSeekMode1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82MW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c82MX; else goto c82MY;
       c82MX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c82MY: // global
           (_c82MT::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c82MT::I64 == 0) goto c82MV; else goto c82MU;
       c82MV: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c82MU: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c82MT::I64;
           R2 = 2;
           Sp = Sp - 16;
           call GHC.IO.Device.$fEnumSeekMode_go3_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.931588823 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_$cenumFrom_closure" {
     GHC.IO.Device.$fEnumSeekMode_$cenumFrom_closure:
         const GHC.IO.Device.$fEnumSeekMode_$cenumFrom_info;
         const 0;
 },
 GHC.IO.Device.$fEnumSeekMode_$cenumFrom_entry() //  [R2]
         { info_tbl: [(c82Nb,
                       label: GHC.IO.Device.$fEnumSeekMode_$cenumFrom_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82Nb: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c82Nc; else goto c82Nd;
       c82Nc: // global
           R2 = R2;
           R1 = GHC.IO.Device.$fEnumSeekMode_$cenumFrom_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c82Nd: // global
           I64[Sp - 8] = block_c82N3_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u82No; else goto c82N4;
       u82No: // global
           call _c82N3(R1) args: 0, res: 0, upd: 0;
       c82N4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c82N3() //  [R1]
         { info_tbl: [(c82N3,
                       label: block_c82N3_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82N3: // global
           _c82Na::P64 = R1 & 7;
           if (_c82Na::P64 < 3) goto u82Nn; else goto c82N9;
       u82Nn: // global
           if (_c82Na::P64 < 2) goto c82N7; else goto c82N8;
       c82N7: // global
           R1 = GHC.IO.Device.$fEnumSeekMode3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c82N8: // global
           R1 = GHC.IO.Device.$fEnumSeekMode2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c82N9: // global
           R1 = GHC.IO.Device.$fEnumSeekMode1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.938326188 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_$cenumFromThen_closure" {
     GHC.IO.Device.$fEnumSeekMode_$cenumFromThen_closure:
         const GHC.IO.Device.$fEnumSeekMode_$cenumFromThen_info;
 },
 sat_s8297_entry() //  [R1]
         { info_tbl: [(c82Oa,
                       label: sat_s8297_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82Oa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c82Ob; else goto c82Oc;
       c82Ob: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c82Oc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s8292_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s8295_entry() //  [R1]
         { info_tbl: [(c82Oh,
                       label: sat_s8295_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82Oh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c82Oi; else goto c82Oj;
       c82Oi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c82Oj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s8298_entry() //  [R1]
         { info_tbl: [(c82Op,
                       label: sat_s8298_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82Op: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c82Oq; else goto c82Or;
       c82Oq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c82Or: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_dn_s8292_entry() //  [R1, R2]
         { info_tbl: [(c82Ov,
                       label: go_dn_s8292_info
                       rep:HeapRep 2 nonptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82Ov: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c82Oz; else goto c82Oy;
       c82Oz: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c82Oy: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c82Ot; else goto c82Ou;
       c82Ot: // global
           _s8290::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s8297_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s8290::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s8295_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c82Ou: // global
           I64[Hp - 80] = sat_s8298_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c82OB::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c82OB::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s8299_entry() //  [R1]
         { info_tbl: [(c82OC,
                       label: sat_s8299_info
                       rep:HeapRep 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82OC: // global
           _s8299::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c82OD; else goto c82OE;
       c82OE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c82OG; else goto c82OF;
       c82OG: // global
           HpAlloc = 24;
           goto c82OD;
       c82OD: // global
           R1 = _s8299::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c82OF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s8299::P64;
           _s828V::I64 = I64[_s8299::P64 + 24];
           _s8290::I64 = _s828V::I64 - I64[_s8299::P64 + 16];
           I64[Hp - 16] = go_dn_s8292_info;
           I64[Hp - 8] = _s8290::I64;
           I64[Hp] = 2 - _s8290::I64;
           R2 = _s828V::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s8292_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s828Z_entry() //  [R1]
         { info_tbl: [(c82OL,
                       label: sat_s828Z_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82OL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c82OM; else goto c82ON;
       c82OM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c82ON: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s829b_entry() //  [R1]
         { info_tbl: [(c82OW,
                       label: sat_s829b_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82OW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c82OX; else goto c82OY;
       c82OX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c82OY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s829l_entry() //  [R1]
         { info_tbl: [(c82Pr,
                       label: sat_s829l_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82Pr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c82Ps; else goto c82Pt;
       c82Ps: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c82Pt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s829g_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s829j_entry() //  [R1]
         { info_tbl: [(c82Py,
                       label: sat_s829j_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82Py: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c82Pz; else goto c82PA;
       c82Pz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c82PA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s829m_entry() //  [R1]
         { info_tbl: [(c82PG,
                       label: sat_s829m_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82PG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c82PH; else goto c82PI;
       c82PH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c82PI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_up_s829g_entry() //  [R1, R2]
         { info_tbl: [(c82PM,
                       label: go_up_s829g_info
                       rep:HeapRep 2 nonptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82PM: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c82PQ; else goto c82PP;
       c82PQ: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c82PP: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c82PK; else goto c82PL;
       c82PK: // global
           _s829e::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s829l_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s829e::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s829j_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c82PL: // global
           I64[Hp - 80] = sat_s829m_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c82PS::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c82PS::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s829n_entry() //  [R1]
         { info_tbl: [(c82PT,
                       label: sat_s829n_info
                       rep:HeapRep 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82PT: // global
           _s829n::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c82PU; else goto c82PV;
       c82PV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c82PX; else goto c82PW;
       c82PX: // global
           HpAlloc = 24;
           goto c82PU;
       c82PU: // global
           R1 = _s829n::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c82PW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s829n::P64;
           _s828V::I64 = I64[_s829n::P64 + 24];
           _s829e::I64 = _s828V::I64 - I64[_s829n::P64 + 16];
           I64[Hp - 16] = go_up_s829g_info;
           I64[Hp - 8] = _s829e::I64;
           I64[Hp] = 2 - _s829e::I64;
           R2 = _s828V::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s829g_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s829d_entry() //  [R1]
         { info_tbl: [(c82Q2,
                       label: sat_s829d_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82Q2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c82Q3; else goto c82Q4;
       c82Q3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c82Q4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s829p_entry() //  [R1]
         { info_tbl: [(c82Qd,
                       label: sat_s829p_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82Qd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c82Qe; else goto c82Qf;
       c82Qe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c82Qf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s829A_entry() //  [R1]
         { info_tbl: [(c82QL,
                       label: sat_s829A_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82QL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c82QM; else goto c82QN;
       c82QM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c82QN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s829v_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s829y_entry() //  [R1]
         { info_tbl: [(c82QS,
                       label: sat_s829y_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82QS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c82QT; else goto c82QU;
       c82QT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c82QU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s829B_entry() //  [R1]
         { info_tbl: [(c82R0,
                       label: sat_s829B_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82R0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c82R1; else goto c82R2;
       c82R1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c82R2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_dn_s829v_entry() //  [R1, R2]
         { info_tbl: [(c82R6,
                       label: go_dn_s829v_info
                       rep:HeapRep 2 nonptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82R6: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c82Ra; else goto c82R9;
       c82Ra: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c82R9: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c82R4; else goto c82R5;
       c82R4: // global
           _s829t::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s829A_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s829t::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s829y_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c82R5: // global
           I64[Hp - 80] = sat_s829B_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c82Rc::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c82Rc::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s829C_entry() //  [R1]
         { info_tbl: [(c82Rd,
                       label: sat_s829C_info
                       rep:HeapRep 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82Rd: // global
           _s829C::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c82Re; else goto c82Rf;
       c82Rf: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c82Rh; else goto c82Rg;
       c82Rh: // global
           HpAlloc = 24;
           goto c82Re;
       c82Re: // global
           R1 = _s829C::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c82Rg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s829C::P64;
           _s828V::I64 = I64[_s829C::P64 + 24];
           _s829t::I64 = _s828V::I64 - I64[_s829C::P64 + 16];
           I64[Hp - 16] = go_dn_s829v_info;
           I64[Hp - 8] = _s829t::I64;
           I64[Hp] = 0 - _s829t::I64;
           R2 = _s828V::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s829v_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s829s_entry() //  [R1]
         { info_tbl: [(c82Rm,
                       label: sat_s829s_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82Rm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c82Rn; else goto c82Ro;
       c82Rn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c82Ro: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s829E_entry() //  [R1]
         { info_tbl: [(c82Rx,
                       label: sat_s829E_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82Rx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c82Ry; else goto c82Rz;
       c82Ry: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c82Rz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s829O_entry() //  [R1]
         { info_tbl: [(c82S2,
                       label: sat_s829O_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82S2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c82S3; else goto c82S4;
       c82S3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c82S4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s829J_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s829M_entry() //  [R1]
         { info_tbl: [(c82S9,
                       label: sat_s829M_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82S9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c82Sa; else goto c82Sb;
       c82Sa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c82Sb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s829P_entry() //  [R1]
         { info_tbl: [(c82Sh,
                       label: sat_s829P_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82Sh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c82Si; else goto c82Sj;
       c82Si: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c82Sj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_up_s829J_entry() //  [R1, R2]
         { info_tbl: [(c82Sn,
                       label: go_up_s829J_info
                       rep:HeapRep 2 nonptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82Sn: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c82Sr; else goto c82Sq;
       c82Sr: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c82Sq: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c82Sl; else goto c82Sm;
       c82Sl: // global
           _s829H::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s829O_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s829H::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s829M_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c82Sm: // global
           I64[Hp - 80] = sat_s829P_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c82St::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c82St::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s829Q_entry() //  [R1]
         { info_tbl: [(c82Su,
                       label: sat_s829Q_info
                       rep:HeapRep 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82Su: // global
           _s829Q::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c82Sv; else goto c82Sw;
       c82Sw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c82Sy; else goto c82Sx;
       c82Sy: // global
           HpAlloc = 24;
           goto c82Sv;
       c82Sv: // global
           R1 = _s829Q::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c82Sx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s829Q::P64;
           _s828V::I64 = I64[_s829Q::P64 + 24];
           _s829H::I64 = _s828V::I64 - I64[_s829Q::P64 + 16];
           I64[Hp - 16] = go_up_s829J_info;
           I64[Hp - 8] = _s829H::I64;
           I64[Hp] = 0 - _s829H::I64;
           R2 = _s828V::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s829J_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s829G_entry() //  [R1]
         { info_tbl: [(c82SD,
                       label: sat_s829G_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82SD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c82SE; else goto c82SF;
       c82SE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c82SF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s829S_entry() //  [R1]
         { info_tbl: [(c82SO,
                       label: sat_s829S_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82SO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c82SP; else goto c82SQ;
       c82SP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c82SQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.IO.Device.$fEnumSeekMode_$cenumFromThen_entry() //  [R2, R3]
         { info_tbl: [(c82SZ,
                       label: GHC.IO.Device.$fEnumSeekMode_$cenumFromThen_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82SZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c82T0; else goto c82T1;
       c82T0: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fEnumSeekMode_$cenumFromThen_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c82T1: // global
           I64[Sp - 16] = block_c82SR_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u82Uj; else goto c82SS;
       u82Uj: // global
           call _c82SR(R1) args: 0, res: 0, upd: 0;
       c82SS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c82SR() //  [R1]
         { info_tbl: [(c82SR,
                       label: block_c82SR_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82SR: // global
           _s828R::P64 = P64[Sp + 8];
           _c82SY::P64 = R1 & 7;
           if (_c82SY::P64 < 3) goto u82Ub; else goto c82SX;
       u82Ub: // global
           if (_c82SY::P64 < 2) goto c82SV; else goto c82SW;
       c82SV: // global
           _s828T::I64 = 0;
           goto s828S;
       c82SW: // global
           _s828T::I64 = 1;
           goto s828S;
       c82SX: // global
           _s828T::I64 = 2;
           goto s828S;
       s828S: // global
           I64[Sp] = block_c82T2_info;
           R1 = _s828R::P64;
           I64[Sp + 8] = _s828T::I64;
           if (R1 & 7 != 0) goto u82Ui; else goto c82TM;
       u82Ui: // global
           call _c82T2(R1) args: 0, res: 0, upd: 0;
       c82TM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c82T2() //  [R1]
         { info_tbl: [(c82T2,
                       label: block_c82T2_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82T2: // global
           _c82Ua::P64 = R1 & 7;
           if (_c82Ua::P64 < 3) goto u82Uc; else goto c82U0;
       u82Uc: // global
           if (_c82Ua::P64 < 2) goto c82TS; else goto c82TW;
       c82TS: // global
           I64[Sp] = 0;
           goto u82Um;
       c82TW: // global
           I64[Sp] = 1;
           goto u82Um;
       c82U0: // global
           I64[Sp] = 2;
           goto u82Um;
       u82Um: // global
           call _c82NB() args: 0, res: 0, upd: 0;
     }
 },
 _c82NB() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82NB: // global
           Hp = Hp + 80;
           _s828V::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c82T6; else goto c82T5;
       c82T6: // global
           HpAlloc = 80;
           I64[Sp] = block_c82NA_info;
           R1 = _s828V::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c82T5: // global
           _s828T::I64 = I64[Sp + 8];
           if (%MO_S_Le_W64(_s828T::I64,
                            _s828V::I64)) goto c82Tr; else goto c82TL;
       c82Tr: // global
           if (%MO_S_Lt_W64(_s828V::I64,
                            _s828T::I64)) goto c82Tg; else goto c82Tp;
       c82Tg: // global
           if (%MO_S_Le_W64(2, _s828V::I64)) goto c82T9; else goto c82Te;
       c82T9: // global
           I64[Hp - 72] = sat_s8299_info;
           I64[Hp - 56] = _s828T::I64;
           I64[Hp - 48] = _s828V::I64;
           I64[Hp - 40] = sat_s828Z_info;
           I64[Hp - 24] = _s828T::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c82Te: // global
           if (%MO_S_Gt_W64(2, _s828T::I64)) goto c82TI; else goto c82Tc;
       c82Tc: // global
           I64[Hp - 72] = sat_s829b_info;
           I64[Hp - 56] = _s828T::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c82Ta::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c82Ta::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c82Tp: // global
           if (%MO_S_Ge_W64(2, _s828V::I64)) goto c82Tj; else goto c82To;
       c82Tj: // global
           I64[Hp - 72] = sat_s829n_info;
           I64[Hp - 56] = _s828T::I64;
           I64[Hp - 48] = _s828V::I64;
           I64[Hp - 40] = sat_s829d_info;
           I64[Hp - 24] = _s828T::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c82To: // global
           if (%MO_S_Lt_W64(2, _s828T::I64)) goto c82TI; else goto c82Tm;
       c82Tm: // global
           I64[Hp - 72] = sat_s829p_info;
           I64[Hp - 56] = _s828T::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c82Tk::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c82Tk::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c82TL: // global
           if (%MO_S_Lt_W64(_s828V::I64,
                            _s828T::I64)) goto c82TB; else goto c82TK;
       c82TB: // global
           if (%MO_S_Le_W64(0, _s828V::I64)) goto c82Tu; else goto c82Tz;
       c82Tu: // global
           I64[Hp - 72] = sat_s829C_info;
           I64[Hp - 56] = _s828T::I64;
           I64[Hp - 48] = _s828V::I64;
           I64[Hp - 40] = sat_s829s_info;
           I64[Hp - 24] = _s828T::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c82Tz: // global
           if (%MO_S_Gt_W64(0, _s828T::I64)) goto c82TI; else goto c82Tx;
       c82Tx: // global
           I64[Hp - 72] = sat_s829E_info;
           I64[Hp - 56] = _s828T::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c82Tv::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c82Tv::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c82TK: // global
           if (%MO_S_Ge_W64(0, _s828V::I64)) goto c82TE; else goto c82TJ;
       c82TE: // global
           I64[Hp - 72] = sat_s829Q_info;
           I64[Hp - 56] = _s828T::I64;
           I64[Hp - 48] = _s828V::I64;
           I64[Hp - 40] = sat_s829G_info;
           I64[Hp - 24] = _s828T::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c82TJ: // global
           if (%MO_S_Lt_W64(0, _s828T::I64)) goto c82TI; else goto c82TH;
       c82TI: // global
           Hp = Hp - 80;
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c82TH: // global
           I64[Hp - 72] = sat_s829S_info;
           I64[Hp - 56] = _s828T::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c82TF::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c82TF::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c82NA() //  [R1]
         { info_tbl: [(c82NA,
                       label: block_c82NA_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82NA: // global
           I64[Sp] = R1;
           call _c82NB() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.950155141 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_go2_closure" {
     GHC.IO.Device.$fEnumSeekMode_go2_closure:
         const GHC.IO.Device.$fEnumSeekMode_go2_info;
         const 0;
 },
 sat_s82a1_entry() //  [R1]
         { info_tbl: [(c82Uz,
                       label: sat_s82a1_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82Uz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c82UA; else goto c82UB;
       c82UA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c82UB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s829Z::I64 = I64[R1 + 16];
           if (_s829Z::I64 != 0) goto c82Ux; else goto c82Uy;
       c82Ux: // global
           R2 = _s829Z::I64 + 1;
           Sp = Sp - 16;
           call GHC.IO.Device.$fEnumSeekMode_go2_entry(R2) args: 24, res: 0, upd: 24;
       c82Uy: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s829Y_entry() //  [R1]
         { info_tbl: [(c82UN,
                       label: sat_s829Y_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82UN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c82UO; else goto c82UW;
       c82UO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c82UW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s829V::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s829V::I64, 0)) goto c82UU; else goto c82UM;
       c82UM: // global
           if (%MO_S_Gt_W64(_s829V::I64, 2)) goto c82UU; else goto c82UV;
       c82UU: // global
           R2 = _s829V::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c82UV: // global
           R1 = I64[(_s829V::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.IO.Device.$fEnumSeekMode_go2_entry() //  [R2]
         { info_tbl: [(c82UY,
                       label: GHC.IO.Device.$fEnumSeekMode_go2_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82UY: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c82V2; else goto c82V1;
       c82V2: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.IO.Device.$fEnumSeekMode_go2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c82V1: // global
           I64[Hp - 64] = sat_s82a1_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s829Y_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.952314301 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_go1_closure" {
     GHC.IO.Device.$fEnumSeekMode_go1_closure:
         const GHC.IO.Device.$fEnumSeekMode_go1_info;
         const 0;
 },
 sat_s82a8_entry() //  [R1]
         { info_tbl: [(c82Vf,
                       label: sat_s82a8_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82Vf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c82Vg; else goto c82Vh;
       c82Vg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c82Vh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82a6::I64 = I64[R1 + 16];
           if (_s82a6::I64 != 1) goto c82Vd; else goto c82Ve;
       c82Vd: // global
           R2 = _s82a6::I64 + 1;
           Sp = Sp - 16;
           call GHC.IO.Device.$fEnumSeekMode_go1_entry(R2) args: 24, res: 0, upd: 24;
       c82Ve: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82a5_entry() //  [R1]
         { info_tbl: [(c82Vt,
                       label: sat_s82a5_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82Vt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c82Vu; else goto c82VC;
       c82Vu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c82VC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82a2::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82a2::I64, 0)) goto c82VA; else goto c82Vs;
       c82Vs: // global
           if (%MO_S_Gt_W64(_s82a2::I64, 2)) goto c82VA; else goto c82VB;
       c82VA: // global
           R2 = _s82a2::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c82VB: // global
           R1 = I64[(_s82a2::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.IO.Device.$fEnumSeekMode_go1_entry() //  [R2]
         { info_tbl: [(c82VE,
                       label: GHC.IO.Device.$fEnumSeekMode_go1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82VE: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c82VI; else goto c82VH;
       c82VI: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.IO.Device.$fEnumSeekMode_go1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c82VH: // global
           I64[Hp - 64] = sat_s82a8_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s82a5_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.954422043 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_go_closure" {
     GHC.IO.Device.$fEnumSeekMode_go_closure:
         const GHC.IO.Device.$fEnumSeekMode_go_info;
         const 0;
 },
 sat_s82af_entry() //  [R1]
         { info_tbl: [(c82VV,
                       label: sat_s82af_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82VV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c82VW; else goto c82VX;
       c82VW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c82VX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82ad::I64 = I64[R1 + 16];
           if (_s82ad::I64 != 2) goto c82VT; else goto c82VU;
       c82VT: // global
           R2 = _s82ad::I64 + 1;
           Sp = Sp - 16;
           call GHC.IO.Device.$fEnumSeekMode_go_entry(R2) args: 24, res: 0, upd: 24;
       c82VU: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82ac_entry() //  [R1]
         { info_tbl: [(c82W9,
                       label: sat_s82ac_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82W9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c82Wa; else goto c82Wi;
       c82Wa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c82Wi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82a9::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82a9::I64, 0)) goto c82Wg; else goto c82W8;
       c82W8: // global
           if (%MO_S_Gt_W64(_s82a9::I64, 2)) goto c82Wg; else goto c82Wh;
       c82Wg: // global
           R2 = _s82a9::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c82Wh: // global
           R1 = I64[(_s82a9::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.IO.Device.$fEnumSeekMode_go_entry() //  [R2]
         { info_tbl: [(c82Wk,
                       label: GHC.IO.Device.$fEnumSeekMode_go_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82Wk: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c82Wo; else goto c82Wn;
       c82Wo: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.IO.Device.$fEnumSeekMode_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c82Wn: // global
           I64[Hp - 64] = sat_s82af_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s82ac_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.956602945 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_$cenumFromTo_closure" {
     GHC.IO.Device.$fEnumSeekMode_$cenumFromTo_closure:
         const GHC.IO.Device.$fEnumSeekMode_$cenumFromTo_info;
         const 0;
 },
 GHC.IO.Device.$fEnumSeekMode_$cenumFromTo_entry() //  [R2, R3]
         { info_tbl: [(c82WD,
                       label: GHC.IO.Device.$fEnumSeekMode_$cenumFromTo_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82WD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c82WE; else goto c82WF;
       c82WE: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fEnumSeekMode_$cenumFromTo_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c82WF: // global
           I64[Sp - 16] = block_c82Wv_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u82Xs; else goto c82Ww;
       u82Xs: // global
           call _c82Wv(R1) args: 0, res: 0, upd: 0;
       c82Ww: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c82Wv() //  [R1]
         { info_tbl: [(c82Wv,
                       label: block_c82Wv_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82Wv: // global
           _s82ah::P64 = P64[Sp + 8];
           _c82WC::P64 = R1 & 7;
           if (_c82WC::P64 < 3) goto u82Xp; else goto c82WB;
       u82Xp: // global
           if (_c82WC::P64 < 2) goto c82Wz; else goto c82WA;
       c82Wz: // global
           _s82aj::I64 = 0;
           goto s82ai;
       c82WA: // global
           _s82aj::I64 = 1;
           goto s82ai;
       c82WB: // global
           _s82aj::I64 = 2;
           goto s82ai;
       s82ai: // global
           I64[Sp] = block_c82WJ_info;
           R1 = _s82ah::P64;
           I64[Sp + 8] = _s82aj::I64;
           if (R1 & 7 != 0) goto u82Xr; else goto c82WL;
       u82Xr: // global
           call _c82WJ(R1) args: 0, res: 0, upd: 0;
       c82WL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c82WJ() //  [R1]
         { info_tbl: [(c82WJ,
                       label: block_c82WJ_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82WJ: // global
           _s82aj::I64 = I64[Sp + 8];
           _c82Xo::P64 = R1 & 7;
           if (_c82Xo::P64 < 3) goto u82Xq; else goto c82Xe;
       u82Xq: // global
           if (_c82Xo::P64 < 2) goto c82WW; else goto c82X5;
       c82WW: // global
           if (%MO_S_Gt_W64(_s82aj::I64, 0)) goto c82Xd; else goto c82WT;
       c82WT: // global
           R2 = _s82aj::I64;
           Sp = Sp + 16;
           call GHC.IO.Device.$fEnumSeekMode_go2_entry(R2) args: 8, res: 0, upd: 8;
       c82X5: // global
           if (%MO_S_Gt_W64(_s82aj::I64, 1)) goto c82Xd; else goto c82X3;
       c82X3: // global
           R2 = _s82aj::I64;
           Sp = Sp + 16;
           call GHC.IO.Device.$fEnumSeekMode_go1_entry(R2) args: 8, res: 0, upd: 8;
       c82Xe: // global
           if (%MO_S_Gt_W64(_s82aj::I64, 2)) goto c82Xd; else goto c82Xc;
       c82Xd: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c82Xc: // global
           R2 = _s82aj::I64;
           Sp = Sp + 16;
           call GHC.IO.Device.$fEnumSeekMode_go_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.968464614 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_$cenumFromThenTo_closure" {
     GHC.IO.Device.$fEnumSeekMode_$cenumFromThenTo_closure:
         const GHC.IO.Device.$fEnumSeekMode_$cenumFromThenTo_info;
         const 0;
 },
 sat_s82aL_entry() //  [R1]
         { info_tbl: [(c82Yg,
                       label: sat_s82aL_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82Yg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c82Yh; else goto c82Yi;
       c82Yh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c82Yi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s82aE_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82aJ_entry() //  [R1]
         { info_tbl: [(c82Ys,
                       label: sat_s82aJ_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82Ys: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c82Yt; else goto c82YB;
       c82Yt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c82YB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82aF::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82aF::I64, 0)) goto c82Yz; else goto c82Yr;
       c82Yr: // global
           if (%MO_S_Gt_W64(_s82aF::I64, 2)) goto c82Yz; else goto c82YA;
       c82Yz: // global
           R2 = _s82aF::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c82YA: // global
           R1 = I64[(_s82aF::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82aO_entry() //  [R1]
         { info_tbl: [(c82YM,
                       label: sat_s82aO_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82YM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c82YN; else goto c82YV;
       c82YN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c82YV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82aF::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82aF::I64, 0)) goto c82YT; else goto c82YL;
       c82YL: // global
           if (%MO_S_Gt_W64(_s82aF::I64, 2)) goto c82YT; else goto c82YU;
       c82YT: // global
           R2 = _s82aF::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c82YU: // global
           R1 = I64[(_s82aF::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_dn_s82aE_entry() //  [R1, R2]
         { info_tbl: [(c82YZ,
                       label: go_dn_s82aE_info
                       rep:HeapRep 2 nonptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82YZ: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c82Z3; else goto c82Z2;
       c82Z3: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c82Z2: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c82YX; else goto c82YY;
       c82YX: // global
           _s82aC::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s82aL_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s82aC::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s82aJ_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c82YY: // global
           I64[Hp - 80] = sat_s82aO_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c82Z5::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c82Z5::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s82aP_entry() //  [R1]
         { info_tbl: [(c82Z6,
                       label: sat_s82aP_info
                       rep:HeapRep 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82Z6: // global
           _s82aP::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c82Z7; else goto c82Z8;
       c82Z8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c82Za; else goto c82Z9;
       c82Za: // global
           HpAlloc = 24;
           goto c82Z7;
       c82Z7: // global
           R1 = _s82aP::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c82Z9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s82aP::P64;
           _s82av::I64 = I64[_s82aP::P64 + 24];
           _s82aC::I64 = _s82av::I64 - I64[_s82aP::P64 + 16];
           I64[Hp - 16] = go_dn_s82aE_info;
           I64[Hp - 8] = _s82aC::I64;
           I64[Hp] = 0 - _s82aC::I64;
           R2 = _s82av::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s82aE_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82aB_entry() //  [R1]
         { info_tbl: [(c82Zk,
                       label: sat_s82aB_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82Zk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c82Zl; else goto c82Zt;
       c82Zl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c82Zt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82at::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82at::I64, 0)) goto c82Zr; else goto c82Zj;
       c82Zj: // global
           if (%MO_S_Gt_W64(_s82at::I64, 2)) goto c82Zr; else goto c82Zs;
       c82Zr: // global
           R2 = _s82at::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c82Zs: // global
           R1 = I64[(_s82at::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82aT_entry() //  [R1]
         { info_tbl: [(c82ZH,
                       label: sat_s82aT_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82ZH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c82ZI; else goto c82ZQ;
       c82ZI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c82ZQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82at::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82at::I64, 0)) goto c82ZO; else goto c82ZG;
       c82ZG: // global
           if (%MO_S_Gt_W64(_s82at::I64, 2)) goto c82ZO; else goto c82ZP;
       c82ZO: // global
           R2 = _s82at::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c82ZP: // global
           R1 = I64[(_s82at::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82b7_entry() //  [R1]
         { info_tbl: [(c830j,
                       label: sat_s82b7_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c830j: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c830k; else goto c830l;
       c830k: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c830l: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s82b0_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82b5_entry() //  [R1]
         { info_tbl: [(c830v,
                       label: sat_s82b5_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c830v: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c830w; else goto c830E;
       c830w: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c830E: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82b1::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82b1::I64, 0)) goto c830C; else goto c830u;
       c830u: // global
           if (%MO_S_Gt_W64(_s82b1::I64, 2)) goto c830C; else goto c830D;
       c830C: // global
           R2 = _s82b1::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c830D: // global
           R1 = I64[(_s82b1::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82ba_entry() //  [R1]
         { info_tbl: [(c830P,
                       label: sat_s82ba_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c830P: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c830Q; else goto c830Y;
       c830Q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c830Y: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82b1::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82b1::I64, 0)) goto c830W; else goto c830O;
       c830O: // global
           if (%MO_S_Gt_W64(_s82b1::I64, 2)) goto c830W; else goto c830X;
       c830W: // global
           R2 = _s82b1::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c830X: // global
           R1 = I64[(_s82b1::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_up_s82b0_entry() //  [R1, R2]
         { info_tbl: [(c8312,
                       label: go_up_s82b0_info
                       rep:HeapRep 2 nonptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c8312: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c8316; else goto c8315;
       c8316: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8315: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c8310; else goto c8311;
       c8310: // global
           _s82aY::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s82b7_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s82aY::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s82b5_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8311: // global
           I64[Hp - 80] = sat_s82ba_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c8318::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c8318::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s82bb_entry() //  [R1]
         { info_tbl: [(c8319,
                       label: sat_s82bb_info
                       rep:HeapRep 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c8319: // global
           _s82bb::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c831a; else goto c831b;
       c831b: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c831d; else goto c831c;
       c831d: // global
           HpAlloc = 24;
           goto c831a;
       c831a: // global
           R1 = _s82bb::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c831c: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s82bb::P64;
           _s82av::I64 = I64[_s82bb::P64 + 24];
           _s82aY::I64 = _s82av::I64 - I64[_s82bb::P64 + 16];
           I64[Hp - 16] = go_up_s82b0_info;
           I64[Hp - 8] = _s82aY::I64;
           I64[Hp] = 0 - _s82aY::I64;
           R2 = _s82av::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s82b0_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82aX_entry() //  [R1]
         { info_tbl: [(c831n,
                       label: sat_s82aX_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c831n: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c831o; else goto c831w;
       c831o: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c831w: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82at::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82at::I64, 0)) goto c831u; else goto c831m;
       c831m: // global
           if (%MO_S_Gt_W64(_s82at::I64, 2)) goto c831u; else goto c831v;
       c831u: // global
           R2 = _s82at::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c831v: // global
           R1 = I64[(_s82at::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82bf_entry() //  [R1]
         { info_tbl: [(c831K,
                       label: sat_s82bf_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c831K: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c831L; else goto c831T;
       c831L: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c831T: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82at::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82at::I64, 0)) goto c831R; else goto c831J;
       c831J: // global
           if (%MO_S_Gt_W64(_s82at::I64, 2)) goto c831R; else goto c831S;
       c831R: // global
           R2 = _s82at::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c831S: // global
           R1 = I64[(_s82at::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82bu_entry() //  [R1]
         { info_tbl: [(c832q,
                       label: sat_s82bu_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c832q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c832r; else goto c832s;
       c832r: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c832s: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s82bn_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82bs_entry() //  [R1]
         { info_tbl: [(c832C,
                       label: sat_s82bs_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c832C: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c832D; else goto c832L;
       c832D: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c832L: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82bo::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82bo::I64, 0)) goto c832J; else goto c832B;
       c832B: // global
           if (%MO_S_Gt_W64(_s82bo::I64, 2)) goto c832J; else goto c832K;
       c832J: // global
           R2 = _s82bo::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c832K: // global
           R1 = I64[(_s82bo::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82bx_entry() //  [R1]
         { info_tbl: [(c832W,
                       label: sat_s82bx_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c832W: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c832X; else goto c8335;
       c832X: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8335: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82bo::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82bo::I64, 0)) goto c8333; else goto c832V;
       c832V: // global
           if (%MO_S_Gt_W64(_s82bo::I64, 2)) goto c8333; else goto c8334;
       c8333: // global
           R2 = _s82bo::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c8334: // global
           R1 = I64[(_s82bo::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_dn_s82bn_entry() //  [R1, R2]
         { info_tbl: [(c8339,
                       label: go_dn_s82bn_info
                       rep:HeapRep 2 nonptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c8339: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c833d; else goto c833c;
       c833d: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c833c: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c8337; else goto c8338;
       c8337: // global
           _s82bl::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s82bu_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s82bl::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s82bs_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8338: // global
           I64[Hp - 80] = sat_s82bx_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c833f::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c833f::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s82by_entry() //  [R1]
         { info_tbl: [(c833g,
                       label: sat_s82by_info
                       rep:HeapRep 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c833g: // global
           _s82by::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c833h; else goto c833i;
       c833i: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c833k; else goto c833j;
       c833k: // global
           HpAlloc = 24;
           goto c833h;
       c833h: // global
           R1 = _s82by::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c833j: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s82by::P64;
           _s82av::I64 = I64[_s82by::P64 + 24];
           _s82bl::I64 = _s82av::I64 - I64[_s82by::P64 + 16];
           I64[Hp - 16] = go_dn_s82bn_info;
           I64[Hp - 8] = _s82bl::I64;
           I64[Hp] = 1 - _s82bl::I64;
           R2 = _s82av::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s82bn_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82bk_entry() //  [R1]
         { info_tbl: [(c833u,
                       label: sat_s82bk_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c833u: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c833v; else goto c833D;
       c833v: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c833D: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82at::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82at::I64, 0)) goto c833B; else goto c833t;
       c833t: // global
           if (%MO_S_Gt_W64(_s82at::I64, 2)) goto c833B; else goto c833C;
       c833B: // global
           R2 = _s82at::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c833C: // global
           R1 = I64[(_s82at::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82bC_entry() //  [R1]
         { info_tbl: [(c833R,
                       label: sat_s82bC_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c833R: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c833S; else goto c8340;
       c833S: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8340: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82at::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82at::I64, 0)) goto c833Y; else goto c833Q;
       c833Q: // global
           if (%MO_S_Gt_W64(_s82at::I64, 2)) goto c833Y; else goto c833Z;
       c833Y: // global
           R2 = _s82at::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c833Z: // global
           R1 = I64[(_s82at::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82bQ_entry() //  [R1]
         { info_tbl: [(c834t,
                       label: sat_s82bQ_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c834t: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c834u; else goto c834v;
       c834u: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c834v: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s82bJ_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82bO_entry() //  [R1]
         { info_tbl: [(c834F,
                       label: sat_s82bO_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c834F: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c834G; else goto c834O;
       c834G: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c834O: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82bK::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82bK::I64, 0)) goto c834M; else goto c834E;
       c834E: // global
           if (%MO_S_Gt_W64(_s82bK::I64, 2)) goto c834M; else goto c834N;
       c834M: // global
           R2 = _s82bK::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c834N: // global
           R1 = I64[(_s82bK::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82bT_entry() //  [R1]
         { info_tbl: [(c834Z,
                       label: sat_s82bT_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c834Z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8350; else goto c8358;
       c8350: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8358: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82bK::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82bK::I64, 0)) goto c8356; else goto c834Y;
       c834Y: // global
           if (%MO_S_Gt_W64(_s82bK::I64, 2)) goto c8356; else goto c8357;
       c8356: // global
           R2 = _s82bK::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c8357: // global
           R1 = I64[(_s82bK::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_up_s82bJ_entry() //  [R1, R2]
         { info_tbl: [(c835c,
                       label: go_up_s82bJ_info
                       rep:HeapRep 2 nonptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c835c: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c835g; else goto c835f;
       c835g: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c835f: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c835a; else goto c835b;
       c835a: // global
           _s82bH::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s82bQ_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s82bH::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s82bO_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c835b: // global
           I64[Hp - 80] = sat_s82bT_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c835i::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c835i::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s82bU_entry() //  [R1]
         { info_tbl: [(c835j,
                       label: sat_s82bU_info
                       rep:HeapRep 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c835j: // global
           _s82bU::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c835k; else goto c835l;
       c835l: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c835n; else goto c835m;
       c835n: // global
           HpAlloc = 24;
           goto c835k;
       c835k: // global
           R1 = _s82bU::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c835m: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s82bU::P64;
           _s82av::I64 = I64[_s82bU::P64 + 24];
           _s82bH::I64 = _s82av::I64 - I64[_s82bU::P64 + 16];
           I64[Hp - 16] = go_up_s82bJ_info;
           I64[Hp - 8] = _s82bH::I64;
           I64[Hp] = 1 - _s82bH::I64;
           R2 = _s82av::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s82bJ_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82bG_entry() //  [R1]
         { info_tbl: [(c835x,
                       label: sat_s82bG_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c835x: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c835y; else goto c835G;
       c835y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c835G: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82at::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82at::I64, 0)) goto c835E; else goto c835w;
       c835w: // global
           if (%MO_S_Gt_W64(_s82at::I64, 2)) goto c835E; else goto c835F;
       c835E: // global
           R2 = _s82at::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c835F: // global
           R1 = I64[(_s82at::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82bY_entry() //  [R1]
         { info_tbl: [(c835U,
                       label: sat_s82bY_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c835U: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c835V; else goto c8363;
       c835V: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8363: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82at::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82at::I64, 0)) goto c8361; else goto c835T;
       c835T: // global
           if (%MO_S_Gt_W64(_s82at::I64, 2)) goto c8361; else goto c8362;
       c8361: // global
           R2 = _s82at::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c8362: // global
           R1 = I64[(_s82at::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82cd_entry() //  [R1]
         { info_tbl: [(c836A,
                       label: sat_s82cd_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c836A: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c836B; else goto c836C;
       c836B: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c836C: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s82c6_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82cb_entry() //  [R1]
         { info_tbl: [(c836M,
                       label: sat_s82cb_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c836M: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c836N; else goto c836V;
       c836N: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c836V: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82c7::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82c7::I64, 0)) goto c836T; else goto c836L;
       c836L: // global
           if (%MO_S_Gt_W64(_s82c7::I64, 2)) goto c836T; else goto c836U;
       c836T: // global
           R2 = _s82c7::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c836U: // global
           R1 = I64[(_s82c7::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82cg_entry() //  [R1]
         { info_tbl: [(c8376,
                       label: sat_s82cg_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c8376: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8377; else goto c837f;
       c8377: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c837f: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82c7::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82c7::I64, 0)) goto c837d; else goto c8375;
       c8375: // global
           if (%MO_S_Gt_W64(_s82c7::I64, 2)) goto c837d; else goto c837e;
       c837d: // global
           R2 = _s82c7::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c837e: // global
           R1 = I64[(_s82c7::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_dn_s82c6_entry() //  [R1, R2]
         { info_tbl: [(c837j,
                       label: go_dn_s82c6_info
                       rep:HeapRep 2 nonptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c837j: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c837n; else goto c837m;
       c837n: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c837m: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c837h; else goto c837i;
       c837h: // global
           _s82c4::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s82cd_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s82c4::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s82cb_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c837i: // global
           I64[Hp - 80] = sat_s82cg_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c837p::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c837p::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s82ch_entry() //  [R1]
         { info_tbl: [(c837q,
                       label: sat_s82ch_info
                       rep:HeapRep 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c837q: // global
           _s82ch::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c837r; else goto c837s;
       c837s: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c837u; else goto c837t;
       c837u: // global
           HpAlloc = 24;
           goto c837r;
       c837r: // global
           R1 = _s82ch::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c837t: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s82ch::P64;
           _s82av::I64 = I64[_s82ch::P64 + 24];
           _s82c4::I64 = _s82av::I64 - I64[_s82ch::P64 + 16];
           I64[Hp - 16] = go_dn_s82c6_info;
           I64[Hp - 8] = _s82c4::I64;
           I64[Hp] = 2 - _s82c4::I64;
           R2 = _s82av::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s82c6_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82c3_entry() //  [R1]
         { info_tbl: [(c837E,
                       label: sat_s82c3_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c837E: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c837F; else goto c837N;
       c837F: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c837N: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82at::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82at::I64, 0)) goto c837L; else goto c837D;
       c837D: // global
           if (%MO_S_Gt_W64(_s82at::I64, 2)) goto c837L; else goto c837M;
       c837L: // global
           R2 = _s82at::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c837M: // global
           R1 = I64[(_s82at::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82cl_entry() //  [R1]
         { info_tbl: [(c8381,
                       label: sat_s82cl_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c8381: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8382; else goto c838a;
       c8382: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c838a: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82at::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82at::I64, 0)) goto c8388; else goto c8380;
       c8380: // global
           if (%MO_S_Gt_W64(_s82at::I64, 2)) goto c8388; else goto c8389;
       c8388: // global
           R2 = _s82at::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c8389: // global
           R1 = I64[(_s82at::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82cz_entry() //  [R1]
         { info_tbl: [(c838D,
                       label: sat_s82cz_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c838D: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c838E; else goto c838F;
       c838E: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c838F: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s82cs_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82cx_entry() //  [R1]
         { info_tbl: [(c838P,
                       label: sat_s82cx_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c838P: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c838Q; else goto c838Y;
       c838Q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c838Y: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82ct::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82ct::I64, 0)) goto c838W; else goto c838O;
       c838O: // global
           if (%MO_S_Gt_W64(_s82ct::I64, 2)) goto c838W; else goto c838X;
       c838W: // global
           R2 = _s82ct::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c838X: // global
           R1 = I64[(_s82ct::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82cC_entry() //  [R1]
         { info_tbl: [(c8399,
                       label: sat_s82cC_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c8399: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c839a; else goto c839i;
       c839a: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c839i: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82ct::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82ct::I64, 0)) goto c839g; else goto c8398;
       c8398: // global
           if (%MO_S_Gt_W64(_s82ct::I64, 2)) goto c839g; else goto c839h;
       c839g: // global
           R2 = _s82ct::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c839h: // global
           R1 = I64[(_s82ct::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_up_s82cs_entry() //  [R1, R2]
         { info_tbl: [(c839m,
                       label: go_up_s82cs_info
                       rep:HeapRep 2 nonptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c839m: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c839q; else goto c839p;
       c839q: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c839p: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c839k; else goto c839l;
       c839k: // global
           _s82cq::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s82cz_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s82cq::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s82cx_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c839l: // global
           I64[Hp - 80] = sat_s82cC_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c839s::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c839s::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s82cD_entry() //  [R1]
         { info_tbl: [(c839t,
                       label: sat_s82cD_info
                       rep:HeapRep 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c839t: // global
           _s82cD::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c839u; else goto c839v;
       c839v: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c839x; else goto c839w;
       c839x: // global
           HpAlloc = 24;
           goto c839u;
       c839u: // global
           R1 = _s82cD::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c839w: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s82cD::P64;
           _s82av::I64 = I64[_s82cD::P64 + 24];
           _s82cq::I64 = _s82av::I64 - I64[_s82cD::P64 + 16];
           I64[Hp - 16] = go_up_s82cs_info;
           I64[Hp - 8] = _s82cq::I64;
           I64[Hp] = 2 - _s82cq::I64;
           R2 = _s82av::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s82cs_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82cp_entry() //  [R1]
         { info_tbl: [(c839H,
                       label: sat_s82cp_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c839H: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c839I; else goto c839Q;
       c839I: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c839Q: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82at::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82at::I64, 0)) goto c839O; else goto c839G;
       c839G: // global
           if (%MO_S_Gt_W64(_s82at::I64, 2)) goto c839O; else goto c839P;
       c839O: // global
           R2 = _s82at::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c839P: // global
           R1 = I64[(_s82at::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82cH_entry() //  [R1]
         { info_tbl: [(c83a4,
                       label: sat_s82cH_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83a4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c83a5; else goto c83ad;
       c83a5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c83ad: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82at::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82at::I64, 0)) goto c83ab; else goto c83a3;
       c83a3: // global
           if (%MO_S_Gt_W64(_s82at::I64, 2)) goto c83ab; else goto c83ac;
       c83ab: // global
           R2 = _s82at::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c83ac: // global
           R1 = I64[(_s82at::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.IO.Device.$fEnumSeekMode_$cenumFromThenTo_entry() //  [R2, R3,
                                                            R4]
         { info_tbl: [(c83am,
                       label: GHC.IO.Device.$fEnumSeekMode_$cenumFromThenTo_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83am: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c83an; else goto c83ao;
       c83an: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fEnumSeekMode_$cenumFromThenTo_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c83ao: // global
           I64[Sp - 24] = block_c83ae_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u83c4; else goto c83af;
       u83c4: // global
           call _c83ae(R1) args: 0, res: 0, upd: 0;
       c83af: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c83ae() //  [R1]
         { info_tbl: [(c83ae,
                       label: block_c83ae_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83ae: // global
           _s82aq::P64 = P64[Sp + 8];
           _c83al::P64 = R1 & 7;
           if (_c83al::P64 < 3) goto u83c1; else goto c83ak;
       u83c1: // global
           if (_c83al::P64 < 2) goto c83ai; else goto c83aj;
       c83ai: // global
           _s82at::I64 = 0;
           goto s82as;
       c83aj: // global
           _s82at::I64 = 1;
           goto s82as;
       c83ak: // global
           _s82at::I64 = 2;
           goto s82as;
       s82as: // global
           I64[Sp] = block_c83ap_info;
           R1 = _s82aq::P64;
           I64[Sp + 8] = _s82at::I64;
           if (R1 & 7 != 0) goto u83c3; else goto c83bA;
       u83c3: // global
           call _c83ap(R1) args: 0, res: 0, upd: 0;
       c83bA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c83ap() //  [R1]
         { info_tbl: [(c83ap,
                       label: block_c83ap_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83ap: // global
           _s82ar::P64 = P64[Sp + 16];
           _c83bY::P64 = R1 & 7;
           if (_c83bY::P64 < 3) goto u83c2; else goto c83bO;
       u83c2: // global
           if (_c83bY::P64 < 2) goto c83bG; else goto c83bK;
       c83bG: // global
           _s82av::I64 = 0;
           goto s82au;
       c83bK: // global
           _s82av::I64 = 1;
           goto s82au;
       c83bO: // global
           _s82av::I64 = 2;
           goto s82au;
       s82au: // global
           I64[Sp] = block_c82XH_info;
           R1 = _s82ar::P64;
           I64[Sp + 16] = _s82av::I64;
           if (R1 & 7 != 0) goto u83c5; else goto c82XI;
       u83c5: // global
           call _c82XH(R1) args: 0, res: 0, upd: 0;
       c82XI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c82XH() //  [R1]
         { info_tbl: [(c82XH,
                       label: block_c82XH_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c82XH: // global
           _s82at::I64 = I64[Sp + 8];
           _s82av::I64 = I64[Sp + 16];
           _c83bZ::P64 = R1 & 7;
           if (_c83bZ::P64 < 3) goto u83c0; else goto c83bd;
       u83c0: // global
           if (_c83bZ::P64 < 2) goto c83at; else goto c83aQ;
       c83at: // global
           Hp = Hp + 80;
           _s82aw::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c83bg; else goto c83av;
       c83av: // global
           if (%MO_S_Lt_W64(_s82av::I64,
                            _s82at::I64)) goto c83aG; else goto c83aP;
       c83aG: // global
           if (%MO_S_Le_W64(0, _s82av::I64)) goto c83az; else goto c83aE;
       c83az: // global
           I64[Hp - 72] = sat_s82aP_info;
           I64[Hp - 56] = _s82at::I64;
           I64[Hp - 48] = _s82av::I64;
           I64[Hp - 40] = sat_s82aB_info;
           I64[Hp - 24] = _s82at::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c83aE: // global
           if (%MO_S_Gt_W64(0, _s82at::I64)) goto c83bx; else goto c83aC;
       c83aC: // global
           I64[Hp - 72] = sat_s82aT_info;
           I64[Hp - 56] = _s82at::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c83aA::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c83aA::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c83aP: // global
           if (%MO_S_Ge_W64(0, _s82av::I64)) goto c83aJ; else goto c83aO;
       c83aJ: // global
           I64[Hp - 72] = sat_s82bb_info;
           I64[Hp - 56] = _s82at::I64;
           I64[Hp - 48] = _s82av::I64;
           I64[Hp - 40] = sat_s82aX_info;
           I64[Hp - 24] = _s82at::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c83aO: // global
           if (%MO_S_Lt_W64(0, _s82at::I64)) goto c83bx; else goto c83aM;
       c83aM: // global
           I64[Hp - 72] = sat_s82bf_info;
           I64[Hp - 56] = _s82at::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c83aK::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c83aK::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c83aQ: // global
           Hp = Hp + 80;
           _s82aw::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c83bg; else goto c83aS;
       c83aS: // global
           if (%MO_S_Lt_W64(_s82av::I64,
                            _s82at::I64)) goto c83b3; else goto c83bc;
       c83b3: // global
           if (%MO_S_Le_W64(1, _s82av::I64)) goto c83aW; else goto c83b1;
       c83aW: // global
           I64[Hp - 72] = sat_s82by_info;
           I64[Hp - 56] = _s82at::I64;
           I64[Hp - 48] = _s82av::I64;
           I64[Hp - 40] = sat_s82bk_info;
           I64[Hp - 24] = _s82at::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c83b1: // global
           if (%MO_S_Gt_W64(1, _s82at::I64)) goto c83bx; else goto c83aZ;
       c83aZ: // global
           I64[Hp - 72] = sat_s82bC_info;
           I64[Hp - 56] = _s82at::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c83aX::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c83aX::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c83bc: // global
           if (%MO_S_Ge_W64(1, _s82av::I64)) goto c83b6; else goto c83bb;
       c83b6: // global
           I64[Hp - 72] = sat_s82bU_info;
           I64[Hp - 56] = _s82at::I64;
           I64[Hp - 48] = _s82av::I64;
           I64[Hp - 40] = sat_s82bG_info;
           I64[Hp - 24] = _s82at::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c83bb: // global
           if (%MO_S_Lt_W64(1, _s82at::I64)) goto c83bx; else goto c83b9;
       c83b9: // global
           I64[Hp - 72] = sat_s82bY_info;
           I64[Hp - 56] = _s82at::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c83b7::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c83b7::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c83bd: // global
           Hp = Hp + 80;
           _s82aw::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c83bg; else goto c83bf;
       c83bg: // global
           HpAlloc = 80;
           R1 = _s82aw::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c83bf: // global
           if (%MO_S_Lt_W64(_s82av::I64,
                            _s82at::I64)) goto c83bq; else goto c83bz;
       c83bq: // global
           if (%MO_S_Le_W64(2, _s82av::I64)) goto c83bj; else goto c83bo;
       c83bj: // global
           I64[Hp - 72] = sat_s82ch_info;
           I64[Hp - 56] = _s82at::I64;
           I64[Hp - 48] = _s82av::I64;
           I64[Hp - 40] = sat_s82c3_info;
           I64[Hp - 24] = _s82at::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c83bo: // global
           if (%MO_S_Gt_W64(2, _s82at::I64)) goto c83bx; else goto c83bm;
       c83bm: // global
           I64[Hp - 72] = sat_s82cl_info;
           I64[Hp - 56] = _s82at::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c83bk::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c83bk::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c83bz: // global
           if (%MO_S_Ge_W64(2, _s82av::I64)) goto c83bt; else goto c83by;
       c83bt: // global
           I64[Hp - 72] = sat_s82cD_info;
           I64[Hp - 56] = _s82at::I64;
           I64[Hp - 48] = _s82av::I64;
           I64[Hp - 40] = sat_s82cp_info;
           I64[Hp - 24] = _s82at::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c83by: // global
           if (%MO_S_Lt_W64(2, _s82at::I64)) goto c83bx; else goto c83bw;
       c83bx: // global
           Hp = Hp - 80;
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c83bw: // global
           I64[Hp - 72] = sat_s82cH_info;
           I64[Hp - 56] = _s82at::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c83bu::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c83bu::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.987559437 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_closure" {
     GHC.IO.Device.$fEnumSeekMode_closure:
         const GHC.Enum.C:Enum_con_info;
         const GHC.IO.Device.$fEnumSeekMode_$csucc_closure+1;
         const GHC.IO.Device.$fEnumSeekMode_$cpred_closure+1;
         const GHC.IO.Device.$fEnumSeekMode_$ctoEnum_closure+1;
         const GHC.IO.Device.$fEnumSeekMode_$cfromEnum_closure+1;
         const GHC.IO.Device.$fEnumSeekMode_$cenumFrom_closure+1;
         const GHC.IO.Device.$fEnumSeekMode_$cenumFromThen_closure+2;
         const GHC.IO.Device.$fEnumSeekMode_$cenumFromTo_closure+2;
         const GHC.IO.Device.$fEnumSeekMode_$cenumFromThenTo_closure+3;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.988285472 UTC

[section ""data" . GHC.IO.Device.$trModule3_closure" {
     GHC.IO.Device.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.988815863 UTC

[section ""data" . GHC.IO.Device.$trModule1_closure" {
     GHC.IO.Device.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.98941522 UTC

[section ""data" . GHC.IO.Device.$trModule_closure" {
     GHC.IO.Device.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.IO.Device.$trModule3_closure+1;
         const GHC.IO.Device.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.989994126 UTC

[section ""data" . $krep_r81ZU_closure" {
     $krep_r81ZU_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Word.$tcWord8_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.990581115 UTC

[section ""data" . $krep1_r81ZV_closure" {
     $krep1_r81ZV_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Integer.Type.$tcInteger_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.99115385 UTC

[section ""data" . $krep2_r81ZW_closure" {
     $krep2_r81ZW_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc()_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.991709282 UTC

[section ""data" . $krep3_r81ZX_closure" {
     $krep3_r81ZX_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.992310599 UTC

[section ""data" . $krep4_r81ZY_closure" {
     $krep4_r81ZY_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcBool_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.99289273 UTC

[section ""data" . $krep5_r81ZZ_closure" {
     $krep5_r81ZZ_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcConstraint_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.993499411 UTC

[section ""data" . $krep6_r8200_closure" {
     $krep6_r8200_closure:
         const :_con_info;
         const $krep3_r81ZX_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.994086439 UTC

[section ""data" . $krep7_r8201_closure" {
     $krep7_r8201_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep6_r8200_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.994690049 UTC

[section ""data" . $krep8_r8202_closure" {
     $krep8_r8202_closure:
         const :_con_info;
         const $krep1_r81ZV_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.995274996 UTC

[section ""data" . $krep9_r8203_closure" {
     $krep9_r8203_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep8_r8202_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.995880095 UTC

[section ""data" . $krep10_r8204_closure" {
     $krep10_r8204_closure:
         const :_con_info;
         const $krep2_r81ZW_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.996462403 UTC

[section ""data" . $krep11_r8205_closure" {
     $krep11_r8205_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep10_r8204_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.997026222 UTC

[section ""data" . $krep12_r8206_closure" {
     $krep12_r8206_closure:
         const :_con_info;
         const $krep4_r81ZY_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.997622954 UTC

[section ""data" . $krep13_r8207_closure" {
     $krep13_r8207_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep12_r8206_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.998202244 UTC

[section ""data" . $krep14_r8208_closure" {
     $krep14_r8208_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Base.$tcMaybe_closure;
         const $krep6_r8200_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.99873301 UTC

[section ""data" . $krep15_r8209_closure" {
     $krep15_r8209_closure:
         const :_con_info;
         const $krep14_r8208_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.999281028 UTC

[section ""data" . $krep16_r820a_closure" {
     $krep16_r820a_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep15_r8209_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:08.999850479 UTC

[section ""data" . $krep17_r820b_closure" {
     $krep17_r820b_closure:
         const :_con_info;
         const $krep_r81ZU_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.000425406 UTC

[section ""data" . $krep18_r820c_closure" {
     $krep18_r820c_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Ptr.$tcPtr_closure;
         const $krep17_r820b_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.00096884 UTC

[section ""data" . $krep19_r820d_closure" {
     $krep19_r820d_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r81ZX_closure+1;
         const $krep11_r8205_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.001526982 UTC

[section ""data" . $krep20_r820e_closure" {
     $krep20_r820e_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r81ZX_closure+1;
         const $krep7_r8201_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.002135296 UTC

[section ""data" . $krep21_r820f_closure" {
     $krep21_r820f_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r81ZX_closure+1;
         const $krep13_r8207_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.002670642 UTC

[section ""data" . $krep22_r820g_closure" {
     $krep22_r820g_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r81ZX_closure+1;
         const $krep16_r820a_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.003282922 UTC

[section ""data" . $krep23_r820h_closure" {
     $krep23_r820h_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_r81ZY_closure+1;
         const $krep11_r8205_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.00391157 UTC

[section ""data" . $krep24_r820i_closure" {
     $krep24_r820i_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_r81ZY_closure+1;
         const $krep21_r820f_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.004499419 UTC

[section ""data" . $krep25_r820j_closure" {
     $krep25_r820j_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r81ZV_closure+1;
         const $krep11_r8205_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.007558626 UTC

[section ""data" . $krep26_r820k_closure" {
     $krep26_r820k_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep18_r820c_closure+1;
         const $krep19_r820d_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.008167481 UTC

[section ""data" . $krep27_r820l_closure" {
     $krep27_r820l_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep18_r820c_closure+1;
         const $krep20_r820e_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.008721618 UTC

[section ""data" . $krep28_r820m_closure" {
     $krep28_r820m_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep18_r820c_closure+1;
         const $krep22_r820g_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.009322246 UTC

[section ""data" . GHC.IO.Device.$tcIODevice1_closure" {
     GHC.IO.Device.$tcIODevice1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Types.krep$*_closure;
         const $krep5_r81ZZ_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.009903626 UTC

[section ""data" . $krep29_r820n_closure" {
     $krep29_r820n_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.010412411 UTC

[section ""data" . $krep30_r820o_closure" {
     $krep30_r820o_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep28_r820m_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.010959428 UTC

[section ""data" . $krep31_r820p_closure" {
     $krep31_r820p_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep27_r820l_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.011517823 UTC

[section ""data" . $krep32_r820q_closure" {
     $krep32_r820q_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep26_r820k_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.012103796 UTC

[section ""data" . $krep33_r820r_closure" {
     $krep33_r820r_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep25_r820j_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.012652672 UTC

[section ""data" . $krep34_r820s_closure" {
     $krep34_r820s_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep24_r820i_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.013195029 UTC

[section ""data" . $krep35_r820t_closure" {
     $krep35_r820t_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep23_r820h_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.014224665 UTC

[section ""data" . $krep36_r820u_closure" {
     $krep36_r820u_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep11_r8205_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.014753001 UTC

[section ""data" . $krep37_r820v_closure" {
     $krep37_r820v_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep13_r8207_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.015334879 UTC

[section ""data" . $krep38_r820w_closure" {
     $krep38_r820w_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep9_r8203_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.015920447 UTC

[section ""data" . $krep39_r820x_closure" {
     $krep39_r820x_closure:
         const :_con_info;
         const $krep29_r820n_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.01649953 UTC

[section ""data" . $krep40_r820y_closure" {
     $krep40_r820y_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep39_r820x_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.01705799 UTC

[section ""data" . $krep41_r820z_closure" {
     $krep41_r820z_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep40_r820y_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.017624004 UTC

[section ""data" . $krep42_r820A_closure" {
     $krep42_r820A_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep41_r820z_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.018140165 UTC

[section ""cstring" . GHC.IO.Device.$tcRawIO2_bytes" {
     GHC.IO.Device.$tcRawIO2_bytes:
         I8[] [82,97,119,73,79]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.018664585 UTC

[section ""data" . GHC.IO.Device.$tcRawIO1_closure" {
     GHC.IO.Device.$tcRawIO1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tcRawIO2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.019237874 UTC

[section ""data" . GHC.IO.Device.$tcRawIO_closure" {
     GHC.IO.Device.$tcRawIO_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tcRawIO1_closure+1;
         const GHC.IO.Device.$tcIODevice1_closure+4;
         const 15458836890887680490;
         const 11407217875184880147;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.0198191 UTC

[section ""data" . $krep43_r820B_closure" {
     $krep43_r820B_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Device.$tcRawIO_closure+1;
         const $krep39_r820x_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.020363203 UTC

[section ""data" . $krep44_r820C_closure" {
     $krep44_r820C_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep31_r820p_closure+4;
         const $krep43_r820B_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.020943548 UTC

[section ""data" . $krep45_r820D_closure" {
     $krep45_r820D_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep32_r820q_closure+4;
         const $krep44_r820C_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.021509872 UTC

[section ""data" . $krep46_r820E_closure" {
     $krep46_r820E_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep30_r820o_closure+4;
         const $krep45_r820D_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.022028849 UTC

[section ""data" . GHC.IO.Device.$tc'C:RawIO1_closure" {
     GHC.IO.Device.$tc'C:RawIO1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep31_r820p_closure+4;
         const $krep46_r820E_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.022601515 UTC

[section ""cstring" . GHC.IO.Device.$tc'C:RawIO3_bytes" {
     GHC.IO.Device.$tc'C:RawIO3_bytes:
         I8[] [39,67,58,82,97,119,73,79]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.023134628 UTC

[section ""data" . GHC.IO.Device.$tc'C:RawIO2_closure" {
     GHC.IO.Device.$tc'C:RawIO2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tc'C:RawIO3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.023646283 UTC

[section ""data" . GHC.IO.Device.$tc'C:RawIO_closure" {
     GHC.IO.Device.$tc'C:RawIO_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tc'C:RawIO2_closure+1;
         const GHC.IO.Device.$tc'C:RawIO1_closure+4;
         const 6403037956050298954;
         const 14520964482680400738;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.024253554 UTC

[section ""cstring" . GHC.IO.Device.$tcIODeviceType2_bytes" {
     GHC.IO.Device.$tcIODeviceType2_bytes:
         I8[] [73,79,68,101,118,105,99,101,84,121,112,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.024786987 UTC

[section ""data" . GHC.IO.Device.$tcIODeviceType1_closure" {
     GHC.IO.Device.$tcIODeviceType1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tcIODeviceType2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.025920214 UTC

[section ""data" . GHC.IO.Device.$tcIODeviceType_closure" {
     GHC.IO.Device.$tcIODeviceType_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tcIODeviceType1_closure+1;
         const GHC.Types.krep$*_closure;
         const 4175968526489202383;
         const 17718566430225243048;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.026530519 UTC

[section ""data" . GHC.IO.Device.$tc'Directory1_closure" {
     GHC.IO.Device.$tc'Directory1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Device.$tcIODeviceType_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.027076481 UTC

[section ""cstring" . GHC.IO.Device.$tc'Directory3_bytes" {
     GHC.IO.Device.$tc'Directory3_bytes:
         I8[] [39,68,105,114,101,99,116,111,114,121]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.027619487 UTC

[section ""data" . GHC.IO.Device.$tc'Directory2_closure" {
     GHC.IO.Device.$tc'Directory2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tc'Directory3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.028191993 UTC

[section ""data" . GHC.IO.Device.$tc'Directory_closure" {
     GHC.IO.Device.$tc'Directory_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tc'Directory2_closure+1;
         const GHC.IO.Device.$tc'Directory1_closure+1;
         const 12008838926528382233;
         const 639950492613404225;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.028766495 UTC

[section ""cstring" . GHC.IO.Device.$tc'Stream2_bytes" {
     GHC.IO.Device.$tc'Stream2_bytes:
         I8[] [39,83,116,114,101,97,109]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.029339513 UTC

[section ""data" . GHC.IO.Device.$tc'Stream1_closure" {
     GHC.IO.Device.$tc'Stream1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tc'Stream2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.029867092 UTC

[section ""data" . GHC.IO.Device.$tc'Stream_closure" {
     GHC.IO.Device.$tc'Stream_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tc'Stream1_closure+1;
         const GHC.IO.Device.$tc'Directory1_closure+1;
         const 39573928359804366;
         const 741010449601335383;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.030454043 UTC

[section ""cstring" . GHC.IO.Device.$tc'RegularFile2_bytes" {
     GHC.IO.Device.$tc'RegularFile2_bytes:
         I8[] [39,82,101,103,117,108,97,114,70,105,108,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.031020029 UTC

[section ""data" . GHC.IO.Device.$tc'RegularFile1_closure" {
     GHC.IO.Device.$tc'RegularFile1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tc'RegularFile2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.031606969 UTC

[section ""data" . GHC.IO.Device.$tc'RegularFile_closure" {
     GHC.IO.Device.$tc'RegularFile_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tc'RegularFile1_closure+1;
         const GHC.IO.Device.$tc'Directory1_closure+1;
         const 2184574052715259025;
         const 14349593064521146856;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.032204579 UTC

[section ""cstring" . GHC.IO.Device.$tc'RawDevice2_bytes" {
     GHC.IO.Device.$tc'RawDevice2_bytes:
         I8[] [39,82,97,119,68,101,118,105,99,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.033892591 UTC

[section ""data" . GHC.IO.Device.$tc'RawDevice1_closure" {
     GHC.IO.Device.$tc'RawDevice1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tc'RawDevice2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.034499131 UTC

[section ""data" . GHC.IO.Device.$tc'RawDevice_closure" {
     GHC.IO.Device.$tc'RawDevice_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tc'RawDevice1_closure+1;
         const GHC.IO.Device.$tc'Directory1_closure+1;
         const 13599710032796319976;
         const 8789152980205417013;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.035127062 UTC

[section ""data" . $krep47_r820F_closure" {
     $krep47_r820F_closure:
         const :_con_info;
         const GHC.IO.Device.$tc'Directory1_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.035705631 UTC

[section ""data" . $krep48_r820G_closure" {
     $krep48_r820G_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep47_r820F_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.036250194 UTC

[section ""data" . $krep49_r820H_closure" {
     $krep49_r820H_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep48_r820G_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.036839976 UTC

[section ""cstring" . GHC.IO.Device.$tcSeekMode2_bytes" {
     GHC.IO.Device.$tcSeekMode2_bytes:
         I8[] [83,101,101,107,77,111,100,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.037898147 UTC

[section ""data" . GHC.IO.Device.$tcSeekMode1_closure" {
     GHC.IO.Device.$tcSeekMode1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tcSeekMode2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.038483521 UTC

[section ""data" . GHC.IO.Device.$tcSeekMode_closure" {
     GHC.IO.Device.$tcSeekMode_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tcSeekMode1_closure+1;
         const GHC.Types.krep$*_closure;
         const 17698211299654630015;
         const 5588778824401988676;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.03905742 UTC

[section ""data" . GHC.IO.Device.$tc'AbsoluteSeek1_closure" {
     GHC.IO.Device.$tc'AbsoluteSeek1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Device.$tcSeekMode_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.039608705 UTC

[section ""cstring" . GHC.IO.Device.$tc'AbsoluteSeek3_bytes" {
     GHC.IO.Device.$tc'AbsoluteSeek3_bytes:
         I8[] [39,65,98,115,111,108,117,116,101,83,101,101,107]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.040127169 UTC

[section ""data" . GHC.IO.Device.$tc'AbsoluteSeek2_closure" {
     GHC.IO.Device.$tc'AbsoluteSeek2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tc'AbsoluteSeek3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.04069097 UTC

[section ""data" . GHC.IO.Device.$tc'AbsoluteSeek_closure" {
     GHC.IO.Device.$tc'AbsoluteSeek_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tc'AbsoluteSeek2_closure+1;
         const GHC.IO.Device.$tc'AbsoluteSeek1_closure+1;
         const 5610789579148926753;
         const 3433733041722086784;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.041295885 UTC

[section ""cstring" . GHC.IO.Device.$tc'RelativeSeek2_bytes" {
     GHC.IO.Device.$tc'RelativeSeek2_bytes:
         I8[] [39,82,101,108,97,116,105,118,101,83,101,101,107]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.04184465 UTC

[section ""data" . GHC.IO.Device.$tc'RelativeSeek1_closure" {
     GHC.IO.Device.$tc'RelativeSeek1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tc'RelativeSeek2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.042404294 UTC

[section ""data" . GHC.IO.Device.$tc'RelativeSeek_closure" {
     GHC.IO.Device.$tc'RelativeSeek_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tc'RelativeSeek1_closure+1;
         const GHC.IO.Device.$tc'AbsoluteSeek1_closure+1;
         const 15906895381304752726;
         const 1738065871578000433;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.04301969 UTC

[section ""cstring" . GHC.IO.Device.$tc'SeekFromEnd2_bytes" {
     GHC.IO.Device.$tc'SeekFromEnd2_bytes:
         I8[] [39,83,101,101,107,70,114,111,109,69,110,100]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.043550804 UTC

[section ""data" . GHC.IO.Device.$tc'SeekFromEnd1_closure" {
     GHC.IO.Device.$tc'SeekFromEnd1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tc'SeekFromEnd2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.044107023 UTC

[section ""data" . GHC.IO.Device.$tc'SeekFromEnd_closure" {
     GHC.IO.Device.$tc'SeekFromEnd_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tc'SeekFromEnd1_closure+1;
         const GHC.IO.Device.$tc'AbsoluteSeek1_closure+1;
         const 16344961357916628519;
         const 5039033320700315004;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.044664869 UTC

[section ""data" . $krep50_r820I_closure" {
     $krep50_r820I_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.IO.Device.$tc'AbsoluteSeek1_closure+1;
         const $krep25_r820j_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.045263281 UTC

[section ""data" . $krep51_r820J_closure" {
     $krep51_r820J_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep50_r820I_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.045833787 UTC

[section ""cstring" . GHC.IO.Device.$tcIODevice3_bytes" {
     GHC.IO.Device.$tcIODevice3_bytes:
         I8[] [73,79,68,101,118,105,99,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.046409326 UTC

[section ""data" . GHC.IO.Device.$tcIODevice2_closure" {
     GHC.IO.Device.$tcIODevice2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tcIODevice3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.046988673 UTC

[section ""data" . GHC.IO.Device.$tcIODevice_closure" {
     GHC.IO.Device.$tcIODevice_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tcIODevice2_closure+1;
         const GHC.IO.Device.$tcIODevice1_closure+4;
         const 4764642859795697036;
         const 7163668738257247953;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.047593172 UTC

[section ""data" . $krep52_r820K_closure" {
     $krep52_r820K_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Device.$tcIODevice_closure+1;
         const $krep39_r820x_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.048132497 UTC

[section ""data" . $krep53_r820L_closure" {
     $krep53_r820L_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep42_r820A_closure+4;
         const $krep52_r820K_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.048738167 UTC

[section ""data" . $krep54_r820M_closure" {
     $krep54_r820M_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep41_r820z_closure+4;
         const $krep53_r820L_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.049337444 UTC

[section ""data" . $krep55_r820N_closure" {
     $krep55_r820N_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep49_r820H_closure+4;
         const $krep54_r820M_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.049919444 UTC

[section ""data" . $krep56_r820O_closure" {
     $krep56_r820O_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep35_r820t_closure+4;
         const $krep55_r820N_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.05046913 UTC

[section ""data" . $krep57_r820P_closure" {
     $krep57_r820P_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep37_r820v_closure+4;
         const $krep56_r820O_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.051066621 UTC

[section ""data" . $krep58_r820Q_closure" {
     $krep58_r820Q_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep35_r820t_closure+4;
         const $krep57_r820P_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.051672912 UTC

[section ""data" . $krep59_r820R_closure" {
     $krep59_r820R_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep33_r820r_closure+4;
         const $krep58_r820Q_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.052231484 UTC

[section ""data" . $krep60_r820S_closure" {
     $krep60_r820S_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep38_r820w_closure+4;
         const $krep59_r820R_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.052777461 UTC

[section ""data" . $krep61_r820T_closure" {
     $krep61_r820T_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep38_r820w_closure+4;
         const $krep60_r820S_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.053802885 UTC

[section ""data" . $krep62_r820U_closure" {
     $krep62_r820U_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep51_r820J_closure+4;
         const $krep61_r820T_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.054327537 UTC

[section ""data" . $krep63_r820V_closure" {
     $krep63_r820V_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep37_r820v_closure+4;
         const $krep62_r820U_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.05487944 UTC

[section ""data" . $krep64_r820W_closure" {
     $krep64_r820W_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep37_r820v_closure+4;
         const $krep63_r820V_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.055416491 UTC

[section ""data" . $krep65_r820X_closure" {
     $krep65_r820X_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep36_r820u_closure+4;
         const $krep64_r820W_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.056008814 UTC

[section ""data" . GHC.IO.Device.$tc'C:IODevice1_closure" {
     GHC.IO.Device.$tc'C:IODevice1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep34_r820s_closure+4;
         const $krep65_r820X_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.056558135 UTC

[section ""cstring" . GHC.IO.Device.$tc'C:IODevice3_bytes" {
     GHC.IO.Device.$tc'C:IODevice3_bytes:
         I8[] [39,67,58,73,79,68,101,118,105,99,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.057121071 UTC

[section ""data" . GHC.IO.Device.$tc'C:IODevice2_closure" {
     GHC.IO.Device.$tc'C:IODevice2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tc'C:IODevice3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.05768743 UTC

[section ""data" . GHC.IO.Device.$tc'C:IODevice_closure" {
     GHC.IO.Device.$tc'C:IODevice_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tc'C:IODevice2_closure+1;
         const GHC.IO.Device.$tc'C:IODevice1_closure+4;
         const 15352604720075066134;
         const 14084350618605203122;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.058259514 UTC

[section ""data" . GHC.IO.Device.AbsoluteSeek_closure" {
     GHC.IO.Device.AbsoluteSeek_closure:
         const GHC.IO.Device.AbsoluteSeek_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.058792022 UTC

[section ""data" . GHC.IO.Device.RelativeSeek_closure" {
     GHC.IO.Device.RelativeSeek_closure:
         const GHC.IO.Device.RelativeSeek_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.059966988 UTC

[section ""data" . GHC.IO.Device.SeekFromEnd_closure" {
     GHC.IO.Device.SeekFromEnd_closure:
         const GHC.IO.Device.SeekFromEnd_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.060539898 UTC

[section ""data" . GHC.IO.Device.Directory_closure" {
     GHC.IO.Device.Directory_closure:
         const GHC.IO.Device.Directory_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.061083037 UTC

[section ""data" . GHC.IO.Device.Stream_closure" {
     GHC.IO.Device.Stream_closure:
         const GHC.IO.Device.Stream_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.061680023 UTC

[section ""data" . GHC.IO.Device.RegularFile_closure" {
     GHC.IO.Device.RegularFile_closure:
         const GHC.IO.Device.RegularFile_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.062278491 UTC

[section ""data" . GHC.IO.Device.RawDevice_closure" {
     GHC.IO.Device.RawDevice_closure:
         const GHC.IO.Device.RawDevice_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.063435558 UTC

[section ""data" . GHC.IO.Device.C:IODevice_closure" {
     GHC.IO.Device.C:IODevice_closure:
         const GHC.IO.Device.C:IODevice_info;
 },
 GHC.IO.Device.C:IODevice_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83c7: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.IO.Device.C:IODevice_entry(R6,
                                               R5,
                                               R4,
                                               R3,
                                               R2,
                                               R1) args: 80, res: 0, upd: 8;
     }
 },
 GHC.IO.Device.C:IODevice_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c83cc,
                       label: GHC.IO.Device.C:IODevice_info
                       rep:HeapRep static {
                             Fun {arity: 14
                                  fun_type: ArgGen [False, False, False, False, False, False, False,
                                                    False, False, False, False, False, False,
                                                    False]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83cc: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto c83cg; else goto c83cf;
       c83cg: // global
           HpAlloc = 120;
           R1 = GHC.IO.Device.C:IODevice_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 120, res: 0, upd: 8;
       c83cf: // global
           I64[Hp - 112] = GHC.IO.Device.C:IODevice_con_info;
           P64[Hp - 104] = R2;
           P64[Hp - 96] = R3;
           P64[Hp - 88] = R4;
           P64[Hp - 80] = R5;
           P64[Hp - 72] = R6;
           P64[Hp - 64] = P64[Sp];
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = P64[Sp + 16];
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = P64[Sp + 40];
           P64[Hp - 16] = P64[Sp + 48];
           P64[Hp - 8] = P64[Sp + 56];
           P64[Hp] = P64[Sp + 64];
           R1 = Hp - 111;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.06492197 UTC

[section ""data" . GHC.IO.Device.C:RawIO_closure" {
     GHC.IO.Device.C:RawIO_closure:
         const GHC.IO.Device.C:RawIO_info;
 },
 GHC.IO.Device.C:RawIO_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c83cm,
                       label: GHC.IO.Device.C:RawIO_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83cm: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c83cq; else goto c83cp;
       c83cq: // global
           HpAlloc = 40;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.C:RawIO_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c83cp: // global
           I64[Hp - 32] = GHC.IO.Device.C:RawIO_con_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.065807661 UTC

[section ""relreadonly" . GHC.IO.Device.SeekMode_closure_tbl" {
     GHC.IO.Device.SeekMode_closure_tbl:
         const GHC.IO.Device.AbsoluteSeek_closure+1;
         const GHC.IO.Device.RelativeSeek_closure+2;
         const GHC.IO.Device.SeekFromEnd_closure+3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.066410142 UTC

[GHC.IO.Device.AbsoluteSeek_con_entry() //  [R1]
         { info_tbl: [(c83cr,
                       label: GHC.IO.Device.AbsoluteSeek_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,73,79,46,68,101,118,105,99,101,46,65,98,115,111,108,117,116,101,83,101,101,107]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83cr: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.067143942 UTC

[GHC.IO.Device.RelativeSeek_con_entry() //  [R1]
         { info_tbl: [(c83cs,
                       label: GHC.IO.Device.RelativeSeek_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,71,72,67,46,73,79,46,68,101,118,105,99,101,46,82,101,108,97,116,105,118,101,83,101,101,107]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83cs: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.067829116 UTC

[GHC.IO.Device.SeekFromEnd_con_entry() //  [R1]
         { info_tbl: [(c83ct,
                       label: GHC.IO.Device.SeekFromEnd_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 2
                                  descr:[98,97,115,101,58,71,72,67,46,73,79,46,68,101,118,105,99,101,46,83,101,101,107,70,114,111,109,69,110,100]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83ct: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.068501841 UTC

[section ""relreadonly" . GHC.IO.Device.IODeviceType_closure_tbl" {
     GHC.IO.Device.IODeviceType_closure_tbl:
         const GHC.IO.Device.Directory_closure+1;
         const GHC.IO.Device.Stream_closure+2;
         const GHC.IO.Device.RegularFile_closure+3;
         const GHC.IO.Device.RawDevice_closure+4;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.06914018 UTC

[GHC.IO.Device.Directory_con_entry() //  [R1]
         { info_tbl: [(c83cu,
                       label: GHC.IO.Device.Directory_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,73,79,46,68,101,118,105,99,101,46,68,105,114,101,99,116,111,114,121]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83cu: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.069861034 UTC

[GHC.IO.Device.Stream_con_entry() //  [R1]
         { info_tbl: [(c83cv,
                       label: GHC.IO.Device.Stream_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,71,72,67,46,73,79,46,68,101,118,105,99,101,46,83,116,114,101,97,109]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83cv: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.07059357 UTC

[GHC.IO.Device.RegularFile_con_entry() //  [R1]
         { info_tbl: [(c83cw,
                       label: GHC.IO.Device.RegularFile_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 2
                                  descr:[98,97,115,101,58,71,72,67,46,73,79,46,68,101,118,105,99,101,46,82,101,103,117,108,97,114,70,105,108,101]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83cw: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.071300985 UTC

[GHC.IO.Device.RawDevice_con_entry() //  [R1]
         { info_tbl: [(c83cx,
                       label: GHC.IO.Device.RawDevice_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 3
                                  descr:[98,97,115,101,58,71,72,67,46,73,79,46,68,101,118,105,99,101,46,82,97,119,68,101,118,105,99,101]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83cx: // global
           R1 = R1 + 4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.071993376 UTC

[GHC.IO.Device.C:IODevice_con_entry() //  [R1]
         { info_tbl: [(c83cy,
                       label: GHC.IO.Device.C:IODevice_con_info
                       rep:HeapRep 14 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,73,79,46,68,101,118,105,99,101,46,67,58,73,79,68,101,118,105,99,101]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83cy: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.072690752 UTC

[GHC.IO.Device.C:RawIO_con_entry() //  [R1]
         { info_tbl: [(c83cz,
                       label: GHC.IO.Device.C:RawIO_con_info
                       rep:HeapRep 4 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,73,79,46,68,101,118,105,99,101,46,67,58,82,97,119,73,79]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83cz: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.073371744 UTC

[section ""relreadonly" . S82hF_srt" {
     S82hF_srt:
         const GHC.IO.Device.$fReadSeekMode7_closure;
         const GHC.IO.Device.$fReadSeekMode11_closure;
         const GHC.IO.Device.$fReadSeekMode15_closure;
         const GHC.IO.Device.$w$cshowsPrec_closure;
         const GHC.IO.Device.$fShowSeekMode_$cshow_closure;
         const GHC.Read.choose2_closure;
         const GHC.IO.Device.$fReadSeekMode_sps_closure;
         const GHC.Read.list3_closure;
         const GHC.IO.Device.$fReadSeekMode2_closure;
         const GHC.IO.Device.$fReadSeekMode_$creadsPrec_closure;
         const GHC.Read.list_closure;
         const GHC.IO.Device.$fReadSeekMode1_closure;
         const GHC.IO.Device.$fReadSeekMode_$creadListPrec_closure;
         const GHC.IO.Device.$fReadSeekMode17_closure;
         const GHC.IO.Exception.unsupportedOperation_closure;
         const GHC.IO.Exception.$fxExceptionIOException_closure;
         const GHC.IO.Device.$dmdup1_closure;
         const $dmseek1_r81Zp_closure;
         const $dmtell1_r81Zq_closure;
         const $dmgetSize1_r81Zr_closure;
         const $dmsetSize1_r81Zs_closure;
         const $dmsetEcho1_r81Zt_closure;
         const $dmgetEcho1_r81Zu_closure;
         const $dmsetRaw1_r81Zv_closure;
         const $dmdup3_r81Zw_closure;
         const $dmdup4_r81Zx_closure;
         const GHC.Arr.hopelessIndexError_closure;
         const GHC.IO.Device.$fIxSeekMode_$cindex_closure;
         const GHC.Err.error_closure;
         const lvl13_r81ZL_closure;
         const GHC.IO.Device.$fEnumSeekMode_$cpred_closure;
         const GHC.IO.Device.$fEnumSeekMode4_closure;
         const GHC.IO.Device.$fEnumSeekMode_$csucc_closure;
         const GHC.IO.Device.$fEnumSeekMode5_closure;
         const lvl18_r81ZQ_closure;
         const lvl19_r81ZR_closure;
         const lvl20_r81ZS_closure;
         const GHC.IO.Device.$wlvl_closure;
         const GHC.IO.Device.$fEnumSeekMode_$ctoEnum_closure;
         const GHC.IO.Device.$w$ctoEnum_closure;
         const GHC.IO.Device.$fEnumSeekMode_$cenumFrom_closure;
         const GHC.IO.Device.$fEnumSeekMode1_closure;
         const GHC.IO.Device.$fEnumSeekMode2_closure;
         const GHC.IO.Device.$fEnumSeekMode3_closure;
         const GHC.IO.Device.$fEnumSeekMode_go2_closure;
         const GHC.IO.Device.$fEnumSeekMode_go1_closure;
         const GHC.IO.Device.$fEnumSeekMode_go_closure;
         const GHC.IO.Device.$fEnumSeekMode_$cenumFromTo_closure;
         const GHC.IO.Device.$fEnumSeekMode_$cenumFromThenTo_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.074178668 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:03:09.075010205 UTC

[section ""data" . GHC.IO.Device.ready_closure" {
     GHC.IO.Device.ready_closure:
         const GHC.IO.Device.ready_info;
 },
 GHC.IO.Device.ready_entry() //  [R2]
         { info_tbl: [(c83cH,
                       label: GHC.IO.Device.ready_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83cH: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c83cI; else goto c83cJ;
       c83cI: // global
           R2 = R2;
           R1 = GHC.IO.Device.ready_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c83cJ: // global
           I64[Sp - 8] = block_c83cE_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u83cN; else goto c83cF;
       u83cN: // global
           call _c83cE(R1) args: 0, res: 0, upd: 0;
       c83cF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c83cE() //  [R1]
         { info_tbl: [(c83cE,
                       label: block_c83cE_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83cE: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.076174696 UTC

[section ""data" . GHC.IO.Device.close_closure" {
     GHC.IO.Device.close_closure:
         const GHC.IO.Device.close_info;
 },
 GHC.IO.Device.close_entry() //  [R2]
         { info_tbl: [(c83cV,
                       label: GHC.IO.Device.close_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83cV: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c83cW; else goto c83cX;
       c83cW: // global
           R2 = R2;
           R1 = GHC.IO.Device.close_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c83cX: // global
           I64[Sp - 8] = block_c83cS_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u83d1; else goto c83cT;
       u83d1: // global
           call _c83cS(R1) args: 0, res: 0, upd: 0;
       c83cT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c83cS() //  [R1]
         { info_tbl: [(c83cS,
                       label: block_c83cS_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83cS: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.077812212 UTC

[section ""data" . GHC.IO.Device.isTerminal_closure" {
     GHC.IO.Device.isTerminal_closure:
         const GHC.IO.Device.isTerminal_info;
 },
 GHC.IO.Device.isTerminal_entry() //  [R2]
         { info_tbl: [(c83d9,
                       label: GHC.IO.Device.isTerminal_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83d9: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c83da; else goto c83db;
       c83da: // global
           R2 = R2;
           R1 = GHC.IO.Device.isTerminal_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c83db: // global
           I64[Sp - 8] = block_c83d6_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u83df; else goto c83d7;
       u83df: // global
           call _c83d6(R1) args: 0, res: 0, upd: 0;
       c83d7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c83d6() //  [R1]
         { info_tbl: [(c83d6,
                       label: block_c83d6_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83d6: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.078929129 UTC

[section ""data" . GHC.IO.Device.isSeekable_closure" {
     GHC.IO.Device.isSeekable_closure:
         const GHC.IO.Device.isSeekable_info;
 },
 GHC.IO.Device.isSeekable_entry() //  [R2]
         { info_tbl: [(c83dn,
                       label: GHC.IO.Device.isSeekable_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83dn: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c83do; else goto c83dp;
       c83do: // global
           R2 = R2;
           R1 = GHC.IO.Device.isSeekable_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c83dp: // global
           I64[Sp - 8] = block_c83dk_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u83dt; else goto c83dl;
       u83dt: // global
           call _c83dk(R1) args: 0, res: 0, upd: 0;
       c83dl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c83dk() //  [R1]
         { info_tbl: [(c83dk,
                       label: block_c83dk_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83dk: // global
           R1 = P64[R1 + 31];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.080084281 UTC

[section ""data" . GHC.IO.Device.seek_closure" {
     GHC.IO.Device.seek_closure:
         const GHC.IO.Device.seek_info;
 },
 GHC.IO.Device.seek_entry() //  [R2]
         { info_tbl: [(c83dB,
                       label: GHC.IO.Device.seek_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83dB: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c83dC; else goto c83dD;
       c83dC: // global
           R2 = R2;
           R1 = GHC.IO.Device.seek_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c83dD: // global
           I64[Sp - 8] = block_c83dy_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u83dH; else goto c83dz;
       u83dH: // global
           call _c83dy(R1) args: 0, res: 0, upd: 0;
       c83dz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c83dy() //  [R1]
         { info_tbl: [(c83dy,
                       label: block_c83dy_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83dy: // global
           R1 = P64[R1 + 39];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.081211451 UTC

[section ""data" . GHC.IO.Device.tell_closure" {
     GHC.IO.Device.tell_closure:
         const GHC.IO.Device.tell_info;
 },
 GHC.IO.Device.tell_entry() //  [R2]
         { info_tbl: [(c83dP,
                       label: GHC.IO.Device.tell_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83dP: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c83dQ; else goto c83dR;
       c83dQ: // global
           R2 = R2;
           R1 = GHC.IO.Device.tell_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c83dR: // global
           I64[Sp - 8] = block_c83dM_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u83dV; else goto c83dN;
       u83dV: // global
           call _c83dM(R1) args: 0, res: 0, upd: 0;
       c83dN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c83dM() //  [R1]
         { info_tbl: [(c83dM,
                       label: block_c83dM_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83dM: // global
           R1 = P64[R1 + 47];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.082389919 UTC

[section ""data" . GHC.IO.Device.getSize_closure" {
     GHC.IO.Device.getSize_closure:
         const GHC.IO.Device.getSize_info;
 },
 GHC.IO.Device.getSize_entry() //  [R2]
         { info_tbl: [(c83e3,
                       label: GHC.IO.Device.getSize_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83e3: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c83e4; else goto c83e5;
       c83e4: // global
           R2 = R2;
           R1 = GHC.IO.Device.getSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c83e5: // global
           I64[Sp - 8] = block_c83e0_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u83e9; else goto c83e1;
       u83e9: // global
           call _c83e0(R1) args: 0, res: 0, upd: 0;
       c83e1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c83e0() //  [R1]
         { info_tbl: [(c83e0,
                       label: block_c83e0_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83e0: // global
           R1 = P64[R1 + 55];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.083549561 UTC

[section ""data" . GHC.IO.Device.setSize_closure" {
     GHC.IO.Device.setSize_closure:
         const GHC.IO.Device.setSize_info;
 },
 GHC.IO.Device.setSize_entry() //  [R2]
         { info_tbl: [(c83eh,
                       label: GHC.IO.Device.setSize_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83eh: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c83ei; else goto c83ej;
       c83ei: // global
           R2 = R2;
           R1 = GHC.IO.Device.setSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c83ej: // global
           I64[Sp - 8] = block_c83ee_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u83en; else goto c83ef;
       u83en: // global
           call _c83ee(R1) args: 0, res: 0, upd: 0;
       c83ef: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c83ee() //  [R1]
         { info_tbl: [(c83ee,
                       label: block_c83ee_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83ee: // global
           R1 = P64[R1 + 63];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.084670862 UTC

[section ""data" . GHC.IO.Device.setEcho_closure" {
     GHC.IO.Device.setEcho_closure:
         const GHC.IO.Device.setEcho_info;
 },
 GHC.IO.Device.setEcho_entry() //  [R2]
         { info_tbl: [(c83ev,
                       label: GHC.IO.Device.setEcho_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83ev: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c83ew; else goto c83ex;
       c83ew: // global
           R2 = R2;
           R1 = GHC.IO.Device.setEcho_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c83ex: // global
           I64[Sp - 8] = block_c83es_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u83eB; else goto c83et;
       u83eB: // global
           call _c83es(R1) args: 0, res: 0, upd: 0;
       c83et: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c83es() //  [R1]
         { info_tbl: [(c83es,
                       label: block_c83es_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83es: // global
           R1 = P64[R1 + 71];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.08586247 UTC

[section ""data" . GHC.IO.Device.getEcho_closure" {
     GHC.IO.Device.getEcho_closure:
         const GHC.IO.Device.getEcho_info;
 },
 GHC.IO.Device.getEcho_entry() //  [R2]
         { info_tbl: [(c83eJ,
                       label: GHC.IO.Device.getEcho_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83eJ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c83eK; else goto c83eL;
       c83eK: // global
           R2 = R2;
           R1 = GHC.IO.Device.getEcho_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c83eL: // global
           I64[Sp - 8] = block_c83eG_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u83eP; else goto c83eH;
       u83eP: // global
           call _c83eG(R1) args: 0, res: 0, upd: 0;
       c83eH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c83eG() //  [R1]
         { info_tbl: [(c83eG,
                       label: block_c83eG_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83eG: // global
           R1 = P64[R1 + 79];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.087020635 UTC

[section ""data" . GHC.IO.Device.setRaw_closure" {
     GHC.IO.Device.setRaw_closure:
         const GHC.IO.Device.setRaw_info;
 },
 GHC.IO.Device.setRaw_entry() //  [R2]
         { info_tbl: [(c83eX,
                       label: GHC.IO.Device.setRaw_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83eX: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c83eY; else goto c83eZ;
       c83eY: // global
           R2 = R2;
           R1 = GHC.IO.Device.setRaw_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c83eZ: // global
           I64[Sp - 8] = block_c83eU_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u83f3; else goto c83eV;
       u83f3: // global
           call _c83eU(R1) args: 0, res: 0, upd: 0;
       c83eV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c83eU() //  [R1]
         { info_tbl: [(c83eU,
                       label: block_c83eU_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83eU: // global
           R1 = P64[R1 + 87];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.088137162 UTC

[section ""data" . GHC.IO.Device.devType_closure" {
     GHC.IO.Device.devType_closure:
         const GHC.IO.Device.devType_info;
 },
 GHC.IO.Device.devType_entry() //  [R2]
         { info_tbl: [(c83fb,
                       label: GHC.IO.Device.devType_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83fb: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c83fc; else goto c83fd;
       c83fc: // global
           R2 = R2;
           R1 = GHC.IO.Device.devType_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c83fd: // global
           I64[Sp - 8] = block_c83f8_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u83fh; else goto c83f9;
       u83fh: // global
           call _c83f8(R1) args: 0, res: 0, upd: 0;
       c83f9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c83f8() //  [R1]
         { info_tbl: [(c83f8,
                       label: block_c83f8_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83f8: // global
           R1 = P64[R1 + 95];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.089274498 UTC

[section ""data" . GHC.IO.Device.dup_closure" {
     GHC.IO.Device.dup_closure:
         const GHC.IO.Device.dup_info;
 },
 GHC.IO.Device.dup_entry() //  [R2]
         { info_tbl: [(c83fp,
                       label: GHC.IO.Device.dup_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83fp: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c83fq; else goto c83fr;
       c83fq: // global
           R2 = R2;
           R1 = GHC.IO.Device.dup_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c83fr: // global
           I64[Sp - 8] = block_c83fm_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u83fv; else goto c83fn;
       u83fv: // global
           call _c83fm(R1) args: 0, res: 0, upd: 0;
       c83fn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c83fm() //  [R1]
         { info_tbl: [(c83fm,
                       label: block_c83fm_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83fm: // global
           R1 = P64[R1 + 103];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.090386119 UTC

[section ""data" . GHC.IO.Device.dup2_closure" {
     GHC.IO.Device.dup2_closure:
         const GHC.IO.Device.dup2_info;
 },
 GHC.IO.Device.dup2_entry() //  [R2]
         { info_tbl: [(c83fD,
                       label: GHC.IO.Device.dup2_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83fD: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c83fE; else goto c83fF;
       c83fE: // global
           R2 = R2;
           R1 = GHC.IO.Device.dup2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c83fF: // global
           I64[Sp - 8] = block_c83fA_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u83fJ; else goto c83fB;
       u83fJ: // global
           call _c83fA(R1) args: 0, res: 0, upd: 0;
       c83fB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c83fA() //  [R1]
         { info_tbl: [(c83fA,
                       label: block_c83fA_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83fA: // global
           R1 = P64[R1 + 111];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.091486143 UTC

[section ""data" . GHC.IO.Device.read_closure" {
     GHC.IO.Device.read_closure:
         const GHC.IO.Device.read_info;
 },
 GHC.IO.Device.read_entry() //  [R2]
         { info_tbl: [(c83fR,
                       label: GHC.IO.Device.read_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83fR: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c83fS; else goto c83fT;
       c83fS: // global
           R2 = R2;
           R1 = GHC.IO.Device.read_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c83fT: // global
           I64[Sp - 8] = block_c83fO_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u83fX; else goto c83fP;
       u83fX: // global
           call _c83fO(R1) args: 0, res: 0, upd: 0;
       c83fP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c83fO() //  [R1]
         { info_tbl: [(c83fO,
                       label: block_c83fO_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83fO: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.092655378 UTC

[section ""data" . GHC.IO.Device.readNonBlocking_closure" {
     GHC.IO.Device.readNonBlocking_closure:
         const GHC.IO.Device.readNonBlocking_info;
 },
 GHC.IO.Device.readNonBlocking_entry() //  [R2]
         { info_tbl: [(c83g5,
                       label: GHC.IO.Device.readNonBlocking_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83g5: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c83g6; else goto c83g7;
       c83g6: // global
           R2 = R2;
           R1 = GHC.IO.Device.readNonBlocking_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c83g7: // global
           I64[Sp - 8] = block_c83g2_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u83gb; else goto c83g3;
       u83gb: // global
           call _c83g2(R1) args: 0, res: 0, upd: 0;
       c83g3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c83g2() //  [R1]
         { info_tbl: [(c83g2,
                       label: block_c83g2_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83g2: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.093831493 UTC

[section ""data" . GHC.IO.Device.write_closure" {
     GHC.IO.Device.write_closure:
         const GHC.IO.Device.write_info;
 },
 GHC.IO.Device.write_entry() //  [R2]
         { info_tbl: [(c83gj,
                       label: GHC.IO.Device.write_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83gj: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c83gk; else goto c83gl;
       c83gk: // global
           R2 = R2;
           R1 = GHC.IO.Device.write_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c83gl: // global
           I64[Sp - 8] = block_c83gg_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u83gp; else goto c83gh;
       u83gp: // global
           call _c83gg(R1) args: 0, res: 0, upd: 0;
       c83gh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c83gg() //  [R1]
         { info_tbl: [(c83gg,
                       label: block_c83gg_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83gg: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.094973378 UTC

[section ""data" . GHC.IO.Device.writeNonBlocking_closure" {
     GHC.IO.Device.writeNonBlocking_closure:
         const GHC.IO.Device.writeNonBlocking_info;
 },
 GHC.IO.Device.writeNonBlocking_entry() //  [R2]
         { info_tbl: [(c83gx,
                       label: GHC.IO.Device.writeNonBlocking_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83gx: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c83gy; else goto c83gz;
       c83gy: // global
           R2 = R2;
           R1 = GHC.IO.Device.writeNonBlocking_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c83gz: // global
           I64[Sp - 8] = block_c83gu_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u83gD; else goto c83gv;
       u83gD: // global
           call _c83gu(R1) args: 0, res: 0, upd: 0;
       c83gv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c83gu() //  [R1]
         { info_tbl: [(c83gu,
                       label: block_c83gu_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83gu: // global
           R1 = P64[R1 + 31];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.095856769 UTC

[section ""cstring" . GHC.IO.Device.$fReadSeekMode16_bytes" {
     GHC.IO.Device.$fReadSeekMode16_bytes:
         I8[] [65,98,115,111,108,117,116,101,83,101,101,107]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.096598905 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode15_closure" {
     GHC.IO.Device.$fReadSeekMode15_closure:
         const GHC.IO.Device.$fReadSeekMode15_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Device.$fReadSeekMode15_entry() //  [R1]
         { info_tbl: [(c83gK,
                       label: GHC.IO.Device.$fReadSeekMode15_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83gK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c83gL; else goto c83gM;
       c83gL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c83gM: // global
           (_c83gH::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c83gH::I64 == 0) goto c83gJ; else goto c83gI;
       c83gJ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c83gI: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c83gH::I64;
           R2 = GHC.IO.Device.$fReadSeekMode16_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.097514637 UTC

[section ""cstring" . GHC.IO.Device.$fReadSeekMode12_bytes" {
     GHC.IO.Device.$fReadSeekMode12_bytes:
         I8[] [82,101,108,97,116,105,118,101,83,101,101,107]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.098216258 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode11_closure" {
     GHC.IO.Device.$fReadSeekMode11_closure:
         const GHC.IO.Device.$fReadSeekMode11_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Device.$fReadSeekMode11_entry() //  [R1]
         { info_tbl: [(c83gT,
                       label: GHC.IO.Device.$fReadSeekMode11_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83gT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c83gU; else goto c83gV;
       c83gU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c83gV: // global
           (_c83gQ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c83gQ::I64 == 0) goto c83gS; else goto c83gR;
       c83gS: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c83gR: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c83gQ::I64;
           R2 = GHC.IO.Device.$fReadSeekMode12_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.100074518 UTC

[section ""cstring" . GHC.IO.Device.$fReadSeekMode8_bytes" {
     GHC.IO.Device.$fReadSeekMode8_bytes:
         I8[] [83,101,101,107,70,114,111,109,69,110,100]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.100794208 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode7_closure" {
     GHC.IO.Device.$fReadSeekMode7_closure:
         const GHC.IO.Device.$fReadSeekMode7_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Device.$fReadSeekMode7_entry() //  [R1]
         { info_tbl: [(c83h2,
                       label: GHC.IO.Device.$fReadSeekMode7_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83h2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c83h3; else goto c83h4;
       c83h3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c83h4: // global
           (_c83gZ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c83gZ::I64 == 0) goto c83h1; else goto c83h0;
       c83h1: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c83h0: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c83gZ::I64;
           R2 = GHC.IO.Device.$fReadSeekMode8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.102629395 UTC

[section ""data" . GHC.IO.Device.$w$cshowsPrec_closure" {
     GHC.IO.Device.$w$cshowsPrec_closure:
         const GHC.IO.Device.$w$cshowsPrec_info;
         const 0;
 },
 GHC.IO.Device.$w$cshowsPrec_entry() //  [R2, R3]
         { info_tbl: [(c83hh,
                       label: GHC.IO.Device.$w$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83hh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c83hi; else goto c83hj;
       c83hi: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$w$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c83hj: // global
           I64[Sp - 16] = block_c83h9_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u83hu; else goto c83ha;
       u83hu: // global
           call _c83h9(R1) args: 0, res: 0, upd: 0;
       c83ha: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c83h9() //  [R1]
         { info_tbl: [(c83h9,
                       label: block_c83h9_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83h9: // global
           _s8250::P64 = P64[Sp + 8];
           _c83hg::P64 = R1 & 7;
           if (_c83hg::P64 < 3) goto u83ht; else goto c83hf;
       u83ht: // global
           if (_c83hg::P64 < 2) goto c83hd; else goto c83he;
       c83hd: // global
           R3 = _s8250::P64;
           R2 = GHC.IO.Device.$fReadSeekMode15_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c83he: // global
           R3 = _s8250::P64;
           R2 = GHC.IO.Device.$fReadSeekMode11_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c83hf: // global
           R3 = _s8250::P64;
           R2 = GHC.IO.Device.$fReadSeekMode7_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.10396699 UTC

[section ""data" . GHC.IO.Device.$fShowSeekMode_$cshowsPrec_closure" {
     GHC.IO.Device.$fShowSeekMode_$cshowsPrec_closure:
         const GHC.IO.Device.$fShowSeekMode_$cshowsPrec_info;
         const 0;
 },
 GHC.IO.Device.$fShowSeekMode_$cshowsPrec_entry() //  [R3, R4]
         { info_tbl: [(c83hz,
                       label: GHC.IO.Device.$fShowSeekMode_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83hz: // global
           _s8253::P64 = R3;
           R3 = R4;
           R2 = _s8253::P64;
           call GHC.IO.Device.$w$cshowsPrec_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.104957078 UTC

[section ""data" . GHC.IO.Device.$fShowSeekMode_$cshow_closure" {
     GHC.IO.Device.$fShowSeekMode_$cshow_closure:
         const GHC.IO.Device.$fShowSeekMode_$cshow_info;
         const 0;
 },
 GHC.IO.Device.$fShowSeekMode_$cshow_entry() //  [R2]
         { info_tbl: [(c83hO,
                       label: GHC.IO.Device.$fShowSeekMode_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83hO: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c83hP; else goto c83hQ;
       c83hP: // global
           R2 = R2;
           R1 = GHC.IO.Device.$fShowSeekMode_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c83hQ: // global
           I64[Sp - 8] = block_c83hG_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u83i1; else goto c83hH;
       u83i1: // global
           call _c83hG(R1) args: 0, res: 0, upd: 0;
       c83hH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c83hG() //  [R1]
         { info_tbl: [(c83hG,
                       label: block_c83hG_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83hG: // global
           _c83hN::P64 = R1 & 7;
           if (_c83hN::P64 < 3) goto u83i0; else goto c83hM;
       u83i0: // global
           if (_c83hN::P64 < 2) goto c83hK; else goto c83hL;
       c83hK: // global
           R1 = GHC.IO.Device.$fReadSeekMode15_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c83hL: // global
           R1 = GHC.IO.Device.$fReadSeekMode11_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c83hM: // global
           R1 = GHC.IO.Device.$fReadSeekMode7_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.10621876 UTC

[section ""data" . GHC.IO.Device.$fShowSeekMode_$cshowList_closure" {
     GHC.IO.Device.$fShowSeekMode_$cshowList_closure:
         const GHC.IO.Device.$fShowSeekMode_$cshowList_info;
         const 0;
 },
 GHC.IO.Device.$fShowSeekMode_$cshowList_entry() //  [R2, R3]
         { info_tbl: [(c83i6,
                       label: GHC.IO.Device.$fShowSeekMode_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83i6: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.Device.$w$cshowsPrec_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.106933542 UTC

[section ""data" . GHC.IO.Device.$fShowSeekMode_closure" {
     GHC.IO.Device.$fShowSeekMode_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.IO.Device.$fShowSeekMode_$cshowsPrec_closure+3;
         const GHC.IO.Device.$fShowSeekMode_$cshow_closure+1;
         const GHC.IO.Device.$fShowSeekMode_$cshowList_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.107644191 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode14_closure" {
     GHC.IO.Device.$fReadSeekMode14_closure:
         const GHC.IO.Device.$fReadSeekMode14_info;
 },
 GHC.IO.Device.$fReadSeekMode14_entry() //  [R3]
         { info_tbl: [(c83id,
                       label: GHC.IO.Device.$fReadSeekMode14_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83id: // global
           R2 = GHC.IO.Device.AbsoluteSeek_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.108355264 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode13_closure" {
     GHC.IO.Device.$fReadSeekMode13_closure:
         const (,)_con_info;
         const GHC.IO.Device.$fReadSeekMode15_closure;
         const GHC.IO.Device.$fReadSeekMode14_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.109008402 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode10_closure" {
     GHC.IO.Device.$fReadSeekMode10_closure:
         const GHC.IO.Device.$fReadSeekMode10_info;
 },
 GHC.IO.Device.$fReadSeekMode10_entry() //  [R3]
         { info_tbl: [(c83ik,
                       label: GHC.IO.Device.$fReadSeekMode10_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83ik: // global
           R2 = GHC.IO.Device.RelativeSeek_closure+2;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.109743051 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode9_closure" {
     GHC.IO.Device.$fReadSeekMode9_closure:
         const (,)_con_info;
         const GHC.IO.Device.$fReadSeekMode11_closure;
         const GHC.IO.Device.$fReadSeekMode10_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.11042736 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode6_closure" {
     GHC.IO.Device.$fReadSeekMode6_closure:
         const GHC.IO.Device.$fReadSeekMode6_info;
 },
 GHC.IO.Device.$fReadSeekMode6_entry() //  [R3]
         { info_tbl: [(c83ir,
                       label: GHC.IO.Device.$fReadSeekMode6_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83ir: // global
           R2 = GHC.IO.Device.SeekFromEnd_closure+3;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.111059765 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode5_closure" {
     GHC.IO.Device.$fReadSeekMode5_closure:
         const (,)_con_info;
         const GHC.IO.Device.$fReadSeekMode7_closure;
         const GHC.IO.Device.$fReadSeekMode6_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.111586636 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode4_closure" {
     GHC.IO.Device.$fReadSeekMode4_closure:
         const :_con_info;
         const GHC.IO.Device.$fReadSeekMode5_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.112135942 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode3_closure" {
     GHC.IO.Device.$fReadSeekMode3_closure:
         const :_con_info;
         const GHC.IO.Device.$fReadSeekMode9_closure+1;
         const GHC.IO.Device.$fReadSeekMode4_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.112701629 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode_sps_closure" {
     GHC.IO.Device.$fReadSeekMode_sps_closure:
         const :_con_info;
         const GHC.IO.Device.$fReadSeekMode13_closure+1;
         const GHC.IO.Device.$fReadSeekMode3_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.113795455 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode2_closure" {
     GHC.IO.Device.$fReadSeekMode2_closure:
         const GHC.IO.Device.$fReadSeekMode2_info;
         const 0;
 },
 GHC.IO.Device.$fReadSeekMode2_entry() //  [R2]
         { info_tbl: [(c83iy,
                       label: GHC.IO.Device.$fReadSeekMode2_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83iy: // global
           R3 = R2;
           R2 = GHC.IO.Device.$fReadSeekMode_sps_closure+2;
           call GHC.Read.choose2_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.114644823 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode1_closure" {
     GHC.IO.Device.$fReadSeekMode1_closure:
         const GHC.IO.Device.$fReadSeekMode1_info;
         const 0;
 },
 GHC.IO.Device.$fReadSeekMode1_entry() //  [R2, R3]
         { info_tbl: [(c83iF,
                       label: GHC.IO.Device.$fReadSeekMode1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83iF: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.Device.$fReadSeekMode2_closure+1;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.115740399 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode_$creadsPrec_closure" {
     GHC.IO.Device.$fReadSeekMode_$creadsPrec_closure:
         const GHC.IO.Device.$fReadSeekMode_$creadsPrec_info;
         const 0;
 },
 sat_s825h_entry() //  [R1]
         { info_tbl: [(c83iQ,
                       label: sat_s825h_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83iQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c83iR; else goto c83iS;
       c83iR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c83iS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = P64[R1 + 16];
           R2 = GHC.IO.Device.$fReadSeekMode2_closure+1;
           Sp = Sp - 16;
           call GHC.Read.list3_entry(R4, R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.IO.Device.$fReadSeekMode_$creadsPrec_entry() //  [R2]
         { info_tbl: [(c83iT,
                       label: GHC.IO.Device.$fReadSeekMode_$creadsPrec_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83iT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c83iX; else goto c83iW;
       c83iX: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.IO.Device.$fReadSeekMode_$creadsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c83iW: // global
           I64[Hp - 16] = sat_s825h_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.117015615 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode_$creadListPrec_closure" {
     GHC.IO.Device.$fReadSeekMode_$creadListPrec_closure:
         const GHC.IO.Device.$fReadSeekMode_$creadListPrec_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Device.$fReadSeekMode_$creadListPrec_entry() //  [R1]
         { info_tbl: [(c83j4,
                       label: GHC.IO.Device.$fReadSeekMode_$creadListPrec_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83j4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c83j5; else goto c83j6;
       c83j5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c83j6: // global
           (_c83j1::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c83j1::I64 == 0) goto c83j3; else goto c83j2;
       c83j3: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c83j2: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c83j1::I64;
           R2 = GHC.IO.Device.$fReadSeekMode1_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.118147994 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode17_closure" {
     GHC.IO.Device.$fReadSeekMode17_closure:
         const GHC.IO.Device.$fReadSeekMode17_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Device.$fReadSeekMode17_entry() //  [R1]
         { info_tbl: [(c83jd,
                       label: GHC.IO.Device.$fReadSeekMode17_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83jd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c83je; else goto c83jf;
       c83je: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c83jf: // global
           (_c83ja::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c83ja::I64 == 0) goto c83jc; else goto c83jb;
       c83jc: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c83jb: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c83ja::I64;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = GHC.Read.$fRead()7_closure;
           R1 = GHC.IO.Device.$fReadSeekMode_$creadListPrec_closure;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.11915688 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode_$creadList_closure" {
     GHC.IO.Device.$fReadSeekMode_$creadList_closure:
         const GHC.IO.Device.$fReadSeekMode_$creadList_info;
         const 0;
 },
 GHC.IO.Device.$fReadSeekMode_$creadList_entry() //  [R2]
         { info_tbl: [(c83jk,
                       label: GHC.IO.Device.$fReadSeekMode_$creadList_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83jk: // global
           R3 = R2;
           R2 = GHC.IO.Device.$fReadSeekMode17_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.119877502 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode_closure" {
     GHC.IO.Device.$fReadSeekMode_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.IO.Device.$fReadSeekMode_$creadsPrec_closure+1;
         const GHC.IO.Device.$fReadSeekMode_$creadList_closure+1;
         const GHC.IO.Device.$fReadSeekMode1_closure+2;
         const GHC.IO.Device.$fReadSeekMode_$creadListPrec_closure;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.121152605 UTC

[section ""data" . GHC.IO.Device.$fEqSeekMode_$c==_closure" {
     GHC.IO.Device.$fEqSeekMode_$c==_closure:
         const GHC.IO.Device.$fEqSeekMode_$c==_info;
 },
 GHC.IO.Device.$fEqSeekMode_$c==_entry() //  [R2, R3]
         { info_tbl: [(c83jz,
                       label: GHC.IO.Device.$fEqSeekMode_$c==_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83jz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c83jA; else goto c83jB;
       c83jA: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fEqSeekMode_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c83jB: // global
           I64[Sp - 16] = block_c83jr_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u83ky; else goto c83js;
       u83ky: // global
           call _c83jr(R1) args: 0, res: 0, upd: 0;
       c83js: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c83jr() //  [R1]
         { info_tbl: [(c83jr,
                       label: block_c83jr_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83jr: // global
           _s825j::P64 = P64[Sp + 8];
           _c83jy::P64 = R1 & 7;
           if (_c83jy::P64 < 3) goto u83ko; else goto c83jx;
       u83ko: // global
           if (_c83jy::P64 < 2) goto c83jv; else goto c83jw;
       c83jv: // global
           I64[Sp + 8] = block_c83jE_info;
           R1 = _s825j::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u83kv; else goto c83jG;
       u83kv: // global
           call _c83jE(R1) args: 0, res: 0, upd: 0;
       c83jG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c83jw: // global
           I64[Sp + 8] = block_c83jT_info;
           R1 = _s825j::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u83kw; else goto c83jV;
       u83kw: // global
           call _c83jT(R1) args: 0, res: 0, upd: 0;
       c83jV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c83jx: // global
           I64[Sp + 8] = block_c83k8_info;
           R1 = _s825j::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u83kx; else goto c83ka;
       u83kx: // global
           call _c83k8(R1) args: 0, res: 0, upd: 0;
       c83ka: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c83jE() //  [R1]
         { info_tbl: [(c83jE,
                       label: block_c83jE_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83jE: // global
           if (R1 & 7 == 1) goto u83kp; else goto u83kq;
       u83kp: // global
           Sp = Sp + 8;
           call _c83kk() args: 0, res: 0, upd: 0;
       u83kq: // global
           Sp = Sp + 8;
           call _c83kg() args: 0, res: 0, upd: 0;
     }
 },
 _c83jT() //  [R1]
         { info_tbl: [(c83jT,
                       label: block_c83jT_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83jT: // global
           if (R1 & 7 == 2) goto u83kr; else goto u83ks;
       u83kr: // global
           Sp = Sp + 8;
           call _c83kk() args: 0, res: 0, upd: 0;
       u83ks: // global
           Sp = Sp + 8;
           call _c83kg() args: 0, res: 0, upd: 0;
     }
 },
 _c83k8() //  [R1]
         { info_tbl: [(c83k8,
                       label: block_c83k8_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83k8: // global
           if (R1 & 7 == 3) goto u83kt; else goto u83ku;
       u83kt: // global
           Sp = Sp + 8;
           call _c83kk() args: 0, res: 0, upd: 0;
       u83ku: // global
           Sp = Sp + 8;
           call _c83kg() args: 0, res: 0, upd: 0;
     }
 },
 _c83kk() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83kk: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c83kg() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83kg: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.123695873 UTC

[section ""data" . GHC.IO.Device.$fEqSeekMode_$c/=_closure" {
     GHC.IO.Device.$fEqSeekMode_$c/=_closure:
         const GHC.IO.Device.$fEqSeekMode_$c/=_info;
 },
 GHC.IO.Device.$fEqSeekMode_$c/=_entry() //  [R2, R3]
         { info_tbl: [(c83kR,
                       label: GHC.IO.Device.$fEqSeekMode_$c/=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83kR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c83kS; else goto c83kT;
       c83kS: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fEqSeekMode_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c83kT: // global
           I64[Sp - 16] = block_c83kJ_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u83lQ; else goto c83kK;
       u83lQ: // global
           call _c83kJ(R1) args: 0, res: 0, upd: 0;
       c83kK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c83kJ() //  [R1]
         { info_tbl: [(c83kJ,
                       label: block_c83kJ_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83kJ: // global
           _s825p::P64 = P64[Sp + 8];
           _c83kQ::P64 = R1 & 7;
           if (_c83kQ::P64 < 3) goto u83lG; else goto c83kP;
       u83lG: // global
           if (_c83kQ::P64 < 2) goto c83kN; else goto c83kO;
       c83kN: // global
           I64[Sp + 8] = block_c83kW_info;
           R1 = _s825p::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u83lN; else goto c83kY;
       u83lN: // global
           call _c83kW(R1) args: 0, res: 0, upd: 0;
       c83kY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c83kO: // global
           I64[Sp + 8] = block_c83lb_info;
           R1 = _s825p::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u83lO; else goto c83ld;
       u83lO: // global
           call _c83lb(R1) args: 0, res: 0, upd: 0;
       c83ld: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c83kP: // global
           I64[Sp + 8] = block_c83lq_info;
           R1 = _s825p::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u83lP; else goto c83ls;
       u83lP: // global
           call _c83lq(R1) args: 0, res: 0, upd: 0;
       c83ls: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c83kW() //  [R1]
         { info_tbl: [(c83kW,
                       label: block_c83kW_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83kW: // global
           if (R1 & 7 == 1) goto u83lH; else goto u83lI;
       u83lH: // global
           Sp = Sp + 8;
           call _c83lC() args: 0, res: 0, upd: 0;
       u83lI: // global
           Sp = Sp + 8;
           call _c83ly() args: 0, res: 0, upd: 0;
     }
 },
 _c83lb() //  [R1]
         { info_tbl: [(c83lb,
                       label: block_c83lb_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83lb: // global
           if (R1 & 7 == 2) goto u83lJ; else goto u83lK;
       u83lJ: // global
           Sp = Sp + 8;
           call _c83lC() args: 0, res: 0, upd: 0;
       u83lK: // global
           Sp = Sp + 8;
           call _c83ly() args: 0, res: 0, upd: 0;
     }
 },
 _c83lq() //  [R1]
         { info_tbl: [(c83lq,
                       label: block_c83lq_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83lq: // global
           if (R1 & 7 == 3) goto u83lL; else goto u83lM;
       u83lL: // global
           Sp = Sp + 8;
           call _c83lC() args: 0, res: 0, upd: 0;
       u83lM: // global
           Sp = Sp + 8;
           call _c83ly() args: 0, res: 0, upd: 0;
     }
 },
 _c83lC() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83lC: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c83ly() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83ly: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.125817279 UTC

[section ""data" . GHC.IO.Device.$fEqSeekMode_closure" {
     GHC.IO.Device.$fEqSeekMode_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.IO.Device.$fEqSeekMode_$c==_closure+2;
         const GHC.IO.Device.$fEqSeekMode_$c/=_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.127162435 UTC

[section ""data" . GHC.IO.Device.$fEqIODeviceType_$c==_closure" {
     GHC.IO.Device.$fEqIODeviceType_$c==_closure:
         const GHC.IO.Device.$fEqIODeviceType_$c==_info;
 },
 GHC.IO.Device.$fEqIODeviceType_$c==_entry() //  [R2, R3]
         { info_tbl: [(c83ma,
                       label: GHC.IO.Device.$fEqIODeviceType_$c==_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83ma: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c83mb; else goto c83mc;
       c83mb: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fEqIODeviceType_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c83mc: // global
           I64[Sp - 16] = block_c83m1_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u83nt; else goto c83m2;
       u83nt: // global
           call _c83m1(R1) args: 0, res: 0, upd: 0;
       c83m2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c83m1() //  [R1]
         { info_tbl: [(c83m1,
                       label: block_c83m1_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83m1: // global
           _s825v::P64 = P64[Sp + 8];
           _c83m9::P64 = R1 & 7;
           if (_c83m9::P64 < 3) goto u83nf; else goto u83ng;
       u83nf: // global
           if (_c83m9::P64 < 2) goto c83m5; else goto c83m6;
       c83m5: // global
           I64[Sp + 8] = block_c83mf_info;
           R1 = _s825v::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u83np; else goto c83mh;
       u83np: // global
           call _c83mf(R1) args: 0, res: 0, upd: 0;
       c83mh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c83m6: // global
           I64[Sp + 8] = block_c83mu_info;
           R1 = _s825v::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u83nq; else goto c83mw;
       u83nq: // global
           call _c83mu(R1) args: 0, res: 0, upd: 0;
       c83mw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u83ng: // global
           if (_c83m9::P64 < 4) goto c83m7; else goto c83m8;
       c83m7: // global
           I64[Sp + 8] = block_c83mJ_info;
           R1 = _s825v::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u83nr; else goto c83mL;
       u83nr: // global
           call _c83mJ(R1) args: 0, res: 0, upd: 0;
       c83mL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c83m8: // global
           I64[Sp + 8] = block_c83mY_info;
           R1 = _s825v::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u83ns; else goto c83n0;
       u83ns: // global
           call _c83mY(R1) args: 0, res: 0, upd: 0;
       c83n0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c83mf() //  [R1]
         { info_tbl: [(c83mf,
                       label: block_c83mf_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83mf: // global
           if (R1 & 7 == 1) goto u83nh; else goto u83ni;
       u83nh: // global
           Sp = Sp + 8;
           call _c83na() args: 0, res: 0, upd: 0;
       u83ni: // global
           Sp = Sp + 8;
           call _c83n6() args: 0, res: 0, upd: 0;
     }
 },
 _c83mu() //  [R1]
         { info_tbl: [(c83mu,
                       label: block_c83mu_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83mu: // global
           if (R1 & 7 == 2) goto u83nj; else goto u83nk;
       u83nj: // global
           Sp = Sp + 8;
           call _c83na() args: 0, res: 0, upd: 0;
       u83nk: // global
           Sp = Sp + 8;
           call _c83n6() args: 0, res: 0, upd: 0;
     }
 },
 _c83mJ() //  [R1]
         { info_tbl: [(c83mJ,
                       label: block_c83mJ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83mJ: // global
           if (R1 & 7 == 3) goto u83nl; else goto u83nm;
       u83nl: // global
           Sp = Sp + 8;
           call _c83na() args: 0, res: 0, upd: 0;
       u83nm: // global
           Sp = Sp + 8;
           call _c83n6() args: 0, res: 0, upd: 0;
     }
 },
 _c83mY() //  [R1]
         { info_tbl: [(c83mY,
                       label: block_c83mY_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83mY: // global
           if (R1 & 7 == 4) goto u83nn; else goto u83no;
       u83nn: // global
           Sp = Sp + 8;
           call _c83na() args: 0, res: 0, upd: 0;
       u83no: // global
           Sp = Sp + 8;
           call _c83n6() args: 0, res: 0, upd: 0;
     }
 },
 _c83na() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83na: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c83n6() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83n6: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.130044226 UTC

[section ""data" . GHC.IO.Device.$fEqIODeviceType_$c/=_closure" {
     GHC.IO.Device.$fEqIODeviceType_$c/=_closure:
         const GHC.IO.Device.$fEqIODeviceType_$c/=_info;
 },
 GHC.IO.Device.$fEqIODeviceType_$c/=_entry() //  [R2, R3]
         { info_tbl: [(c83nP,
                       label: GHC.IO.Device.$fEqIODeviceType_$c/=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83nP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c83nQ; else goto c83nR;
       c83nQ: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fEqIODeviceType_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c83nR: // global
           I64[Sp - 16] = block_c83nG_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u83p8; else goto c83nH;
       u83p8: // global
           call _c83nG(R1) args: 0, res: 0, upd: 0;
       c83nH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c83nG() //  [R1]
         { info_tbl: [(c83nG,
                       label: block_c83nG_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83nG: // global
           _s825C::P64 = P64[Sp + 8];
           _c83nO::P64 = R1 & 7;
           if (_c83nO::P64 < 3) goto u83oU; else goto u83oV;
       u83oU: // global
           if (_c83nO::P64 < 2) goto c83nK; else goto c83nL;
       c83nK: // global
           I64[Sp + 8] = block_c83nU_info;
           R1 = _s825C::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u83p4; else goto c83nW;
       u83p4: // global
           call _c83nU(R1) args: 0, res: 0, upd: 0;
       c83nW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c83nL: // global
           I64[Sp + 8] = block_c83o9_info;
           R1 = _s825C::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u83p5; else goto c83ob;
       u83p5: // global
           call _c83o9(R1) args: 0, res: 0, upd: 0;
       c83ob: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u83oV: // global
           if (_c83nO::P64 < 4) goto c83nM; else goto c83nN;
       c83nM: // global
           I64[Sp + 8] = block_c83oo_info;
           R1 = _s825C::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u83p6; else goto c83oq;
       u83p6: // global
           call _c83oo(R1) args: 0, res: 0, upd: 0;
       c83oq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c83nN: // global
           I64[Sp + 8] = block_c83oD_info;
           R1 = _s825C::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u83p7; else goto c83oF;
       u83p7: // global
           call _c83oD(R1) args: 0, res: 0, upd: 0;
       c83oF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c83nU() //  [R1]
         { info_tbl: [(c83nU,
                       label: block_c83nU_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83nU: // global
           if (R1 & 7 == 1) goto u83oW; else goto u83oX;
       u83oW: // global
           Sp = Sp + 8;
           call _c83oP() args: 0, res: 0, upd: 0;
       u83oX: // global
           Sp = Sp + 8;
           call _c83oL() args: 0, res: 0, upd: 0;
     }
 },
 _c83o9() //  [R1]
         { info_tbl: [(c83o9,
                       label: block_c83o9_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83o9: // global
           if (R1 & 7 == 2) goto u83oY; else goto u83oZ;
       u83oY: // global
           Sp = Sp + 8;
           call _c83oP() args: 0, res: 0, upd: 0;
       u83oZ: // global
           Sp = Sp + 8;
           call _c83oL() args: 0, res: 0, upd: 0;
     }
 },
 _c83oo() //  [R1]
         { info_tbl: [(c83oo,
                       label: block_c83oo_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83oo: // global
           if (R1 & 7 == 3) goto u83p0; else goto u83p1;
       u83p0: // global
           Sp = Sp + 8;
           call _c83oP() args: 0, res: 0, upd: 0;
       u83p1: // global
           Sp = Sp + 8;
           call _c83oL() args: 0, res: 0, upd: 0;
     }
 },
 _c83oD() //  [R1]
         { info_tbl: [(c83oD,
                       label: block_c83oD_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83oD: // global
           if (R1 & 7 == 4) goto u83p2; else goto u83p3;
       u83p2: // global
           Sp = Sp + 8;
           call _c83oP() args: 0, res: 0, upd: 0;
       u83p3: // global
           Sp = Sp + 8;
           call _c83oL() args: 0, res: 0, upd: 0;
     }
 },
 _c83oP() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83oP: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c83oL() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83oL: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.132142508 UTC

[section ""data" . GHC.IO.Device.$fEqIODeviceType_closure" {
     GHC.IO.Device.$fEqIODeviceType_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.IO.Device.$fEqIODeviceType_$c==_closure+2;
         const GHC.IO.Device.$fEqIODeviceType_$c/=_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.132810732 UTC

[section ""data" . $dmisSeekable1_r81Zn_closure" {
     $dmisSeekable1_r81Zn_closure:
         const $dmisSeekable1_r81Zn_info;
 },
 $dmisSeekable1_r81Zn_entry() //  []
         { info_tbl: [(c83pl,
                       label: $dmisSeekable1_r81Zn_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83pl: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.133627271 UTC

[section ""data" . GHC.IO.Device.$dmisSeekable_closure" {
     GHC.IO.Device.$dmisSeekable_closure:
         const GHC.IO.Device.$dmisSeekable_info;
 },
 GHC.IO.Device.$dmisSeekable_entry() //  [R2, R3]
         { info_tbl: [(c83ps,
                       label: GHC.IO.Device.$dmisSeekable_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83ps: // global
           R3 = R3;
           R2 = R2;
           call $dmisSeekable1_r81Zn_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.134416904 UTC

[section ""data" . $dmisTerminal1_r81Zo_closure" {
     $dmisTerminal1_r81Zo_closure:
         const $dmisTerminal1_r81Zo_info;
 },
 $dmisTerminal1_r81Zo_entry() //  []
         { info_tbl: [(c83pz,
                       label: $dmisTerminal1_r81Zo_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83pz: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.135234185 UTC

[section ""data" . GHC.IO.Device.$dmisTerminal_closure" {
     GHC.IO.Device.$dmisTerminal_closure:
         const GHC.IO.Device.$dmisTerminal_info;
 },
 GHC.IO.Device.$dmisTerminal_entry() //  [R2, R3]
         { info_tbl: [(c83pG,
                       label: GHC.IO.Device.$dmisTerminal_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83pG: // global
           R3 = R3;
           R2 = R2;
           call $dmisTerminal1_r81Zo_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.136075725 UTC

[section ""data" . GHC.IO.Device.$dmdup1_closure" {
     GHC.IO.Device.$dmdup1_closure:
         const GHC.IO.Device.$dmdup1_info;
         const 0;
 },
 GHC.IO.Device.$dmdup1_entry() //  []
         { info_tbl: [(c83pN,
                       label: GHC.IO.Device.$dmdup1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83pN: // global
           R3 = GHC.IO.Exception.unsupportedOperation_closure;
           R2 = GHC.IO.Exception.$fxExceptionIOException_closure;
           call GHC.IO.throwIO1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.136914299 UTC

[section ""data" . $dmseek1_r81Zp_closure" {
     $dmseek1_r81Zp_closure:
         const $dmseek1_r81Zp_info;
         const 0;
 },
 $dmseek1_r81Zp_entry() //  []
         { info_tbl: [(c83pU,
                       label: $dmseek1_r81Zp_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83pU: // global
           call GHC.IO.Device.$dmdup1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.137937163 UTC

[section ""data" . GHC.IO.Device.$dmseek_closure" {
     GHC.IO.Device.$dmseek_closure:
         const GHC.IO.Device.$dmseek_info;
         const 0;
 },
 GHC.IO.Device.$dmseek_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c83q1,
                       label: GHC.IO.Device.$dmseek_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83q1: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call $dmseek1_r81Zp_entry(R5, R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.138778836 UTC

[section ""data" . $dmtell1_r81Zq_closure" {
     $dmtell1_r81Zq_closure:
         const $dmtell1_r81Zq_info;
         const 0;
 },
 $dmtell1_r81Zq_entry() //  []
         { info_tbl: [(c83q8,
                       label: $dmtell1_r81Zq_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83q8: // global
           call GHC.IO.Device.$dmdup1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.13954843 UTC

[section ""data" . GHC.IO.Device.$dmtell_closure" {
     GHC.IO.Device.$dmtell_closure:
         const GHC.IO.Device.$dmtell_info;
         const 0;
 },
 GHC.IO.Device.$dmtell_entry() //  [R2, R3]
         { info_tbl: [(c83qf,
                       label: GHC.IO.Device.$dmtell_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83qf: // global
           R3 = R3;
           R2 = R2;
           call $dmtell1_r81Zq_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.140345802 UTC

[section ""data" . $dmgetSize1_r81Zr_closure" {
     $dmgetSize1_r81Zr_closure:
         const $dmgetSize1_r81Zr_info;
         const 0;
 },
 $dmgetSize1_r81Zr_entry() //  []
         { info_tbl: [(c83qm,
                       label: $dmgetSize1_r81Zr_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83qm: // global
           call GHC.IO.Device.$dmdup1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.141189073 UTC

[section ""data" . GHC.IO.Device.$dmgetSize_closure" {
     GHC.IO.Device.$dmgetSize_closure:
         const GHC.IO.Device.$dmgetSize_info;
         const 0;
 },
 GHC.IO.Device.$dmgetSize_entry() //  [R2, R3]
         { info_tbl: [(c83qt,
                       label: GHC.IO.Device.$dmgetSize_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83qt: // global
           R3 = R3;
           R2 = R2;
           call $dmgetSize1_r81Zr_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.142032806 UTC

[section ""data" . $dmsetSize1_r81Zs_closure" {
     $dmsetSize1_r81Zs_closure:
         const $dmsetSize1_r81Zs_info;
         const 0;
 },
 $dmsetSize1_r81Zs_entry() //  []
         { info_tbl: [(c83qA,
                       label: $dmsetSize1_r81Zs_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83qA: // global
           call GHC.IO.Device.$dmdup1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.142850402 UTC

[section ""data" . GHC.IO.Device.$dmsetSize_closure" {
     GHC.IO.Device.$dmsetSize_closure:
         const GHC.IO.Device.$dmsetSize_info;
         const 0;
 },
 GHC.IO.Device.$dmsetSize_entry() //  [R2, R3, R4]
         { info_tbl: [(c83qH,
                       label: GHC.IO.Device.$dmsetSize_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83qH: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call $dmsetSize1_r81Zs_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.143643634 UTC

[section ""data" . $dmsetEcho1_r81Zt_closure" {
     $dmsetEcho1_r81Zt_closure:
         const $dmsetEcho1_r81Zt_info;
         const 0;
 },
 $dmsetEcho1_r81Zt_entry() //  []
         { info_tbl: [(c83qO,
                       label: $dmsetEcho1_r81Zt_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83qO: // global
           call GHC.IO.Device.$dmdup1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.145823252 UTC

[section ""data" . GHC.IO.Device.$dmsetEcho_closure" {
     GHC.IO.Device.$dmsetEcho_closure:
         const GHC.IO.Device.$dmsetEcho_info;
         const 0;
 },
 GHC.IO.Device.$dmsetEcho_entry() //  [R2, R3, R4]
         { info_tbl: [(c83qV,
                       label: GHC.IO.Device.$dmsetEcho_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83qV: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call $dmsetEcho1_r81Zt_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.146671311 UTC

[section ""data" . $dmgetEcho1_r81Zu_closure" {
     $dmgetEcho1_r81Zu_closure:
         const $dmgetEcho1_r81Zu_info;
         const 0;
 },
 $dmgetEcho1_r81Zu_entry() //  []
         { info_tbl: [(c83r2,
                       label: $dmgetEcho1_r81Zu_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83r2: // global
           call GHC.IO.Device.$dmdup1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.147452999 UTC

[section ""data" . GHC.IO.Device.$dmgetEcho_closure" {
     GHC.IO.Device.$dmgetEcho_closure:
         const GHC.IO.Device.$dmgetEcho_info;
         const 0;
 },
 GHC.IO.Device.$dmgetEcho_entry() //  [R2, R3]
         { info_tbl: [(c83r9,
                       label: GHC.IO.Device.$dmgetEcho_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83r9: // global
           R3 = R3;
           R2 = R2;
           call $dmgetEcho1_r81Zu_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.148283145 UTC

[section ""data" . $dmsetRaw1_r81Zv_closure" {
     $dmsetRaw1_r81Zv_closure:
         const $dmsetRaw1_r81Zv_info;
         const 0;
 },
 $dmsetRaw1_r81Zv_entry() //  []
         { info_tbl: [(c83rg,
                       label: $dmsetRaw1_r81Zv_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83rg: // global
           call GHC.IO.Device.$dmdup1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.149129873 UTC

[section ""data" . GHC.IO.Device.$dmsetRaw_closure" {
     GHC.IO.Device.$dmsetRaw_closure:
         const GHC.IO.Device.$dmsetRaw_info;
         const 0;
 },
 GHC.IO.Device.$dmsetRaw_entry() //  [R2, R3, R4]
         { info_tbl: [(c83rn,
                       label: GHC.IO.Device.$dmsetRaw_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83rn: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call $dmsetRaw1_r81Zv_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.15001968 UTC

[section ""data" . $dmdup3_r81Zw_closure" {
     $dmdup3_r81Zw_closure:
         const $dmdup3_r81Zw_info;
         const 0;
 },
 $dmdup3_r81Zw_entry() //  []
         { info_tbl: [(c83ru,
                       label: $dmdup3_r81Zw_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83ru: // global
           call GHC.IO.Device.$dmdup1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.150798768 UTC

[section ""data" . GHC.IO.Device.$dmdup_closure" {
     GHC.IO.Device.$dmdup_closure:
         const GHC.IO.Device.$dmdup_info;
         const 0;
 },
 GHC.IO.Device.$dmdup_entry() //  [R2, R3]
         { info_tbl: [(c83rB,
                       label: GHC.IO.Device.$dmdup_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83rB: // global
           R3 = R3;
           R2 = R2;
           call $dmdup3_r81Zw_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.151600228 UTC

[section ""data" . $dmdup4_r81Zx_closure" {
     $dmdup4_r81Zx_closure:
         const $dmdup4_r81Zx_info;
         const 0;
 },
 $dmdup4_r81Zx_entry() //  []
         { info_tbl: [(c83rI,
                       label: $dmdup4_r81Zx_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83rI: // global
           call GHC.IO.Device.$dmdup1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.152393305 UTC

[section ""data" . GHC.IO.Device.$dmdup2_closure" {
     GHC.IO.Device.$dmdup2_closure:
         const GHC.IO.Device.$dmdup2_info;
         const 0;
 },
 GHC.IO.Device.$dmdup2_entry() //  [R2, R3, R4]
         { info_tbl: [(c83rP,
                       label: GHC.IO.Device.$dmdup2_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83rP: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call $dmdup4_r81Zx_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.153963623 UTC

[section ""data" . GHC.IO.Device.$fOrdSeekMode_$ccompare_closure" {
     GHC.IO.Device.$fOrdSeekMode_$ccompare_closure:
         const GHC.IO.Device.$fOrdSeekMode_$ccompare_info;
 },
 GHC.IO.Device.$fOrdSeekMode_$ccompare_entry() //  [R2, R3]
         { info_tbl: [(c83s4,
                       label: GHC.IO.Device.$fOrdSeekMode_$ccompare_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83s4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c83s5; else goto c83s6;
       c83s5: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fOrdSeekMode_$ccompare_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c83s6: // global
           I64[Sp - 16] = block_c83rW_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u83tf; else goto c83rX;
       u83tf: // global
           call _c83rW(R1) args: 0, res: 0, upd: 0;
       c83rX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c83rW() //  [R1]
         { info_tbl: [(c83rW,
                       label: block_c83rW_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83rW: // global
           _s826n::P64 = P64[Sp + 8];
           _c83s3::P64 = R1 & 7;
           if (_c83s3::P64 < 3) goto u83t1; else goto c83s2;
       u83t1: // global
           if (_c83s3::P64 < 2) goto c83s0; else goto c83s1;
       c83s0: // global
           I64[Sp + 8] = block_c83s9_info;
           R1 = _s826n::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u83tc; else goto c83sb;
       u83tc: // global
           call _c83s9(R1) args: 0, res: 0, upd: 0;
       c83sb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c83s1: // global
           I64[Sp + 8] = block_c83ss_info;
           R1 = _s826n::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u83td; else goto c83su;
       u83td: // global
           call _c83ss(R1) args: 0, res: 0, upd: 0;
       c83su: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c83s2: // global
           I64[Sp + 8] = block_c83sL_info;
           R1 = _s826n::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u83te; else goto c83sN;
       u83te: // global
           call _c83sL(R1) args: 0, res: 0, upd: 0;
       c83sN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c83s9() //  [R1]
         { info_tbl: [(c83s9,
                       label: block_c83s9_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83s9: // global
           _c83t0::P64 = R1 & 7;
           if (_c83t0::P64 < 3) goto u83t2; else goto u83t4;
       u83t2: // global
           if (_c83t0::P64 < 2) goto u83t6; else goto u83t5;
       u83t6: // global
           Sp = Sp + 8;
           call _c83sX() args: 0, res: 0, upd: 0;
       u83t5: // global
           Sp = Sp + 8;
           goto u83th;
       u83t4: // global
           Sp = Sp + 8;
           goto u83th;
       u83th: // global
           call _c83sI() args: 0, res: 0, upd: 0;
     }
 },
 _c83ss() //  [R1]
         { info_tbl: [(c83ss,
                       label: block_c83ss_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83ss: // global
           _c83sZ::P64 = R1 & 7;
           if (_c83sZ::P64 < 3) goto u83t3; else goto u83t7;
       u83t3: // global
           if (_c83sZ::P64 < 2) goto u83t9; else goto u83t8;
       u83t9: // global
           Sp = Sp + 8;
           call _c83sT() args: 0, res: 0, upd: 0;
       u83t8: // global
           Sp = Sp + 8;
           call _c83sX() args: 0, res: 0, upd: 0;
       u83t7: // global
           Sp = Sp + 8;
           call _c83sI() args: 0, res: 0, upd: 0;
     }
 },
 _c83sI() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83sI: // global
           R1 = GHC.Types.LT_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c83sL() //  [R1]
         { info_tbl: [(c83sL,
                       label: block_c83sL_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83sL: // global
           if (R1 & 7 == 3) goto u83ta; else goto u83tb;
       u83ta: // global
           Sp = Sp + 8;
           call _c83sX() args: 0, res: 0, upd: 0;
       u83tb: // global
           Sp = Sp + 8;
           call _c83sT() args: 0, res: 0, upd: 0;
     }
 },
 _c83sX() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83sX: // global
           R1 = GHC.Types.EQ_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c83sT() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83sT: // global
           R1 = GHC.Types.GT_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.156632457 UTC

[section ""data" . GHC.IO.Device.$fOrdSeekMode_$c<_closure" {
     GHC.IO.Device.$fOrdSeekMode_$c<_closure:
         const GHC.IO.Device.$fOrdSeekMode_$c<_info;
 },
 GHC.IO.Device.$fOrdSeekMode_$c<_entry() //  [R2, R3]
         { info_tbl: [(c83tA,
                       label: GHC.IO.Device.$fOrdSeekMode_$c<_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83tA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c83tB; else goto c83tC;
       c83tB: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fOrdSeekMode_$c<_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c83tC: // global
           I64[Sp - 16] = block_c83ts_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u83uw; else goto c83tt;
       u83uw: // global
           call _c83ts(R1) args: 0, res: 0, upd: 0;
       c83tt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c83ts() //  [R1]
         { info_tbl: [(c83ts,
                       label: block_c83ts_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83ts: // global
           _s826t::P64 = P64[Sp + 8];
           _c83tz::P64 = R1 & 7;
           if (_c83tz::P64 < 3) goto u83um; else goto c83ty;
       u83um: // global
           if (_c83tz::P64 < 2) goto c83tw; else goto c83tx;
       c83tw: // global
           I64[Sp + 8] = block_c83tF_info;
           R1 = _s826t::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u83ut; else goto c83tH;
       u83ut: // global
           call _c83tF(R1) args: 0, res: 0, upd: 0;
       c83tH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c83tx: // global
           I64[Sp + 8] = block_c83tY_info;
           R1 = _s826t::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u83uu; else goto c83u0;
       u83uu: // global
           call _c83tY(R1) args: 0, res: 0, upd: 0;
       c83u0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c83ty: // global
           I64[Sp + 8] = block_c83ud_info;
           R1 = _s826t::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u83uv; else goto c83uf;
       u83uv: // global
           call _c83ud() args: 0, res: 0, upd: 0;
       c83uf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c83tF() //  [R1]
         { info_tbl: [(c83tF,
                       label: block_c83tF_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83tF: // global
           _c83ul::P64 = R1 & 7;
           if (_c83ul::P64 < 3) goto u83un; else goto u83uo;
       u83un: // global
           if (_c83ul::P64 < 2) goto u83uq; else goto u83up;
       u83uq: // global
           Sp = Sp + 8;
           call _c83u6() args: 0, res: 0, upd: 0;
       u83up: // global
           Sp = Sp + 8;
           goto u83uy;
       u83uo: // global
           Sp = Sp + 8;
           goto u83uy;
       u83uy: // global
           call _c83ua() args: 0, res: 0, upd: 0;
     }
 },
 _c83tY() //  [R1]
         { info_tbl: [(c83tY,
                       label: block_c83tY_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83tY: // global
           if (R1 & 7 == 3) goto u83ur; else goto u83us;
       u83ur: // global
           Sp = Sp + 8;
           call _c83ua() args: 0, res: 0, upd: 0;
       u83us: // global
           Sp = Sp + 8;
           call _c83u6() args: 0, res: 0, upd: 0;
     }
 },
 _c83ua() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83ua: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c83u6() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83u6: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c83ud() //  []
         { info_tbl: [(c83ud,
                       label: block_c83ud_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83ud: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.159327369 UTC

[section ""data" . GHC.IO.Device.$fOrdSeekMode_$c<=_closure" {
     GHC.IO.Device.$fOrdSeekMode_$c<=_closure:
         const GHC.IO.Device.$fOrdSeekMode_$c<=_info;
 },
 GHC.IO.Device.$fOrdSeekMode_$c<=_entry() //  [R2, R3]
         { info_tbl: [(c83uQ,
                       label: GHC.IO.Device.$fOrdSeekMode_$c<=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83uQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c83uR; else goto c83uS;
       c83uR: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fOrdSeekMode_$c<=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c83uS: // global
           I64[Sp - 16] = block_c83uI_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u83vF; else goto c83uJ;
       u83vF: // global
           call _c83uI(R1) args: 0, res: 0, upd: 0;
       c83uJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c83uI() //  [R1]
         { info_tbl: [(c83uI,
                       label: block_c83uI_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83uI: // global
           _s826y::P64 = P64[Sp + 8];
           _c83uP::P64 = R1 & 7;
           if (_c83uP::P64 < 3) goto u83vC; else goto c83uO;
       u83vC: // global
           if (_c83uP::P64 < 2) goto c83uM; else goto c83uN;
       c83uM: // global
           _s826B::I64 = 0;
           goto s826A;
       c83uN: // global
           _s826B::I64 = 1;
           goto s826A;
       c83uO: // global
           _s826B::I64 = 2;
           goto s826A;
       s826A: // global
           I64[Sp] = block_c83uW_info;
           R1 = _s826y::P64;
           I64[Sp + 8] = _s826B::I64;
           if (R1 & 7 != 0) goto u83vE; else goto c83uY;
       u83vE: // global
           call _c83uW(R1) args: 0, res: 0, upd: 0;
       c83uY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c83uW() //  [R1]
         { info_tbl: [(c83uW,
                       label: block_c83uW_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83uW: // global
           _s826B::I64 = I64[Sp + 8];
           _c83vB::P64 = R1 & 7;
           if (_c83vB::P64 < 3) goto u83vD; else goto c83vr;
       u83vD: // global
           if (_c83vB::P64 < 2) goto c83v9; else goto c83vi;
       c83v9: // global
           if (%MO_S_Ge_W64(_s826B::I64, 0)) goto c83vp; else goto c83vq;
       c83vi: // global
           if (%MO_S_Ge_W64(_s826B::I64, 1)) goto c83vp; else goto c83vq;
       c83vr: // global
           if (%MO_S_Ge_W64(_s826B::I64, 2)) goto c83vp; else goto c83vq;
       c83vp: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c83vq: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.161101179 UTC

[section ""data" . GHC.IO.Device.$fOrdSeekMode_$cmax_closure" {
     GHC.IO.Device.$fOrdSeekMode_$cmax_closure:
         const GHC.IO.Device.$fOrdSeekMode_$cmax_info;
 },
 GHC.IO.Device.$fOrdSeekMode_$cmax_entry() //  [R2, R3]
         { info_tbl: [(c83vQ,
                       label: GHC.IO.Device.$fOrdSeekMode_$cmax_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83vQ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c83vR; else goto c83vS;
       c83vR: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fOrdSeekMode_$cmax_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c83vS: // global
           I64[Sp - 24] = block_c83vK_info;
           _s826I::P64 = R3;
           R3 = R3;
           _s826H::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s826H::P64;
           P64[Sp - 8] = _s826I::P64;
           Sp = Sp - 24;
           call GHC.IO.Device.$fOrdSeekMode_$c<=_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c83vK() //  [R1]
         { info_tbl: [(c83vK,
                       label: block_c83vK_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83vK: // global
           if (R1 & 7 == 1) goto c83vN; else goto c83vO;
       c83vN: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c83vO: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.162802332 UTC

[section ""data" . GHC.IO.Device.$fOrdSeekMode_$c>=_closure" {
     GHC.IO.Device.$fOrdSeekMode_$c>=_closure:
         const GHC.IO.Device.$fOrdSeekMode_$c>=_info;
 },
 GHC.IO.Device.$fOrdSeekMode_$c>=_entry() //  [R2, R3]
         { info_tbl: [(c83wd,
                       label: GHC.IO.Device.$fOrdSeekMode_$c>=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83wd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c83we; else goto c83wf;
       c83we: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fOrdSeekMode_$c>=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c83wf: // global
           I64[Sp - 16] = block_c83w5_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u83x2; else goto c83w6;
       u83x2: // global
           call _c83w5(R1) args: 0, res: 0, upd: 0;
       c83w6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c83w5() //  [R1]
         { info_tbl: [(c83w5,
                       label: block_c83w5_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83w5: // global
           _s826L::P64 = P64[Sp + 8];
           _c83wc::P64 = R1 & 7;
           if (_c83wc::P64 < 3) goto u83wZ; else goto c83wb;
       u83wZ: // global
           if (_c83wc::P64 < 2) goto c83w9; else goto c83wa;
       c83w9: // global
           _s826N::I64 = 0;
           goto s826M;
       c83wa: // global
           _s826N::I64 = 1;
           goto s826M;
       c83wb: // global
           _s826N::I64 = 2;
           goto s826M;
       s826M: // global
           I64[Sp] = block_c83wj_info;
           R1 = _s826L::P64;
           I64[Sp + 8] = _s826N::I64;
           if (R1 & 7 != 0) goto u83x1; else goto c83wl;
       u83x1: // global
           call _c83wj(R1) args: 0, res: 0, upd: 0;
       c83wl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c83wj() //  [R1]
         { info_tbl: [(c83wj,
                       label: block_c83wj_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83wj: // global
           _s826N::I64 = I64[Sp + 8];
           _c83wY::P64 = R1 & 7;
           if (_c83wY::P64 < 3) goto u83x0; else goto c83wO;
       u83x0: // global
           if (_c83wY::P64 < 2) goto c83ww; else goto c83wF;
       c83ww: // global
           if (%MO_S_Ge_W64(_s826N::I64, 0)) goto c83wM; else goto c83wN;
       c83wF: // global
           if (%MO_S_Ge_W64(_s826N::I64, 1)) goto c83wM; else goto c83wN;
       c83wO: // global
           if (%MO_S_Ge_W64(_s826N::I64, 2)) goto c83wM; else goto c83wN;
       c83wM: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c83wN: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.164377478 UTC

[section ""data" . GHC.IO.Device.$fOrdSeekMode_$c>_closure" {
     GHC.IO.Device.$fOrdSeekMode_$c>_closure:
         const GHC.IO.Device.$fOrdSeekMode_$c>_info;
 },
 GHC.IO.Device.$fOrdSeekMode_$c>_entry() //  [R2, R3]
         { info_tbl: [(c83x7,
                       label: GHC.IO.Device.$fOrdSeekMode_$c>_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83x7: // global
           _s826U::P64 = R3;
           R3 = R2;
           R2 = _s826U::P64;
           call GHC.IO.Device.$fOrdSeekMode_$c<_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.165373162 UTC

[section ""data" . GHC.IO.Device.$fOrdSeekMode_$cmin_closure" {
     GHC.IO.Device.$fOrdSeekMode_$cmin_closure:
         const GHC.IO.Device.$fOrdSeekMode_$cmin_info;
 },
 GHC.IO.Device.$fOrdSeekMode_$cmin_entry() //  [R2, R3]
         { info_tbl: [(c83xk,
                       label: GHC.IO.Device.$fOrdSeekMode_$cmin_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83xk: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c83xl; else goto c83xm;
       c83xl: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fOrdSeekMode_$cmin_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c83xm: // global
           I64[Sp - 24] = block_c83xe_info;
           _s826W::P64 = R3;
           R3 = R3;
           _s826V::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s826V::P64;
           P64[Sp - 8] = _s826W::P64;
           Sp = Sp - 24;
           call GHC.IO.Device.$fOrdSeekMode_$c<=_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c83xe() //  [R1]
         { info_tbl: [(c83xe,
                       label: block_c83xe_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83xe: // global
           if (R1 & 7 == 1) goto c83xh; else goto c83xi;
       c83xh: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c83xi: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.166433118 UTC

[section ""data" . GHC.IO.Device.$fOrdSeekMode_closure" {
     GHC.IO.Device.$fOrdSeekMode_closure:
         const GHC.Classes.C:Ord_con_info;
         const GHC.IO.Device.$fEqSeekMode_closure+1;
         const GHC.IO.Device.$fOrdSeekMode_$ccompare_closure+2;
         const GHC.IO.Device.$fOrdSeekMode_$c<_closure+2;
         const GHC.IO.Device.$fOrdSeekMode_$c<=_closure+2;
         const GHC.IO.Device.$fOrdSeekMode_$c>_closure+2;
         const GHC.IO.Device.$fOrdSeekMode_$c>=_closure+2;
         const GHC.IO.Device.$fOrdSeekMode_$cmax_closure+2;
         const GHC.IO.Device.$fOrdSeekMode_$cmin_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.167797494 UTC

[section ""data" . GHC.IO.Device.$w$cunsafeIndex_closure" {
     GHC.IO.Device.$w$cunsafeIndex_closure:
         const GHC.IO.Device.$w$cunsafeIndex_info;
 },
 GHC.IO.Device.$w$cunsafeIndex_entry() //  [R2, R3]
         { info_tbl: [(c83xF,
                       label: GHC.IO.Device.$w$cunsafeIndex_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83xF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c83xG; else goto c83xH;
       c83xG: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$w$cunsafeIndex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c83xH: // global
           I64[Sp - 16] = block_c83xx_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u83yU; else goto c83xy;
       u83yU: // global
           call _c83xx(R1) args: 0, res: 0, upd: 0;
       c83xy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c83xx() //  [R1]
         { info_tbl: [(c83xx,
                       label: block_c83xx_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83xx: // global
           _s826Z::P64 = P64[Sp + 8];
           _c83xE::P64 = R1 & 7;
           if (_c83xE::P64 < 3) goto u83yG; else goto c83xD;
       u83yG: // global
           if (_c83xE::P64 < 2) goto c83xB; else goto c83xC;
       c83xB: // global
           I64[Sp + 8] = block_c83xK_info;
           R1 = _s826Z::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u83yR; else goto c83xM;
       u83yR: // global
           call _c83xK(R1) args: 0, res: 0, upd: 0;
       c83xM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c83xC: // global
           I64[Sp + 8] = block_c83y3_info;
           R1 = _s826Z::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u83yS; else goto c83y5;
       u83yS: // global
           call _c83y3(R1) args: 0, res: 0, upd: 0;
       c83y5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c83xD: // global
           I64[Sp + 8] = block_c83ym_info;
           R1 = _s826Z::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u83yT; else goto c83yo;
       u83yT: // global
           call _c83ym(R1) args: 0, res: 0, upd: 0;
       c83yo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c83xK() //  [R1]
         { info_tbl: [(c83xK,
                       label: block_c83xK_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83xK: // global
           _c83yF::P64 = R1 & 7;
           if (_c83yF::P64 < 3) goto u83yH; else goto c83y0;
       u83yH: // global
           if (_c83yF::P64 < 2) goto u83yL; else goto u83yK;
       u83yL: // global
           Sp = Sp + 8;
           call _c83yC() args: 0, res: 0, upd: 0;
       u83yK: // global
           Sp = Sp + 8;
           call _c83yj() args: 0, res: 0, upd: 0;
       c83y0: // global
           R1 = 2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c83y3() //  [R1]
         { info_tbl: [(c83y3,
                       label: block_c83y3_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83y3: // global
           _c83yE::P64 = R1 & 7;
           if (_c83yE::P64 < 3) goto u83yI; else goto u83yM;
       u83yI: // global
           if (_c83yE::P64 < 2) goto u83yO; else goto u83yN;
       u83yO: // global
           Sp = Sp + 8;
           call _c83yy() args: 0, res: 0, upd: 0;
       u83yN: // global
           Sp = Sp + 8;
           call _c83yC() args: 0, res: 0, upd: 0;
       u83yM: // global
           Sp = Sp + 8;
           call _c83yj() args: 0, res: 0, upd: 0;
     }
 },
 _c83yj() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83yj: // global
           R1 = 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c83ym() //  [R1]
         { info_tbl: [(c83ym,
                       label: block_c83ym_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83ym: // global
           _c83yD::P64 = R1 & 7;
           if (_c83yD::P64 < 3) goto u83yJ; else goto u83yP;
       u83yJ: // global
           if (_c83yD::P64 < 2) goto c83yu; else goto u83yQ;
       c83yu: // global
           R1 = (-2);
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u83yQ: // global
           Sp = Sp + 8;
           call _c83yy() args: 0, res: 0, upd: 0;
       u83yP: // global
           Sp = Sp + 8;
           call _c83yC() args: 0, res: 0, upd: 0;
     }
 },
 _c83yy() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83yy: // global
           R1 = (-1);
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c83yC() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83yC: // global
           R1 = 0;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.170436185 UTC

[section ""data" . GHC.IO.Device.$fIxSeekMode_$cunsafeIndex_closure" {
     GHC.IO.Device.$fIxSeekMode_$cunsafeIndex_closure:
         const GHC.IO.Device.$fIxSeekMode_$cunsafeIndex_info;
 },
 GHC.IO.Device.$fIxSeekMode_$cunsafeIndex_entry() //  [R2, R3]
         { info_tbl: [(c83z9,
                       label: GHC.IO.Device.$fIxSeekMode_$cunsafeIndex_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83z9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c83zh; else goto c83zi;
       c83zh: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fIxSeekMode_$cunsafeIndex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c83zi: // global
           I64[Sp - 16] = block_c83z6_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u83zn; else goto c83z7;
       u83zn: // global
           call _c83z6(R1) args: 0, res: 0, upd: 0;
       c83z7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c83z6() //  [R1]
         { info_tbl: [(c83z6,
                       label: block_c83z6_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83z6: // global
           _s8275::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c83zc_info;
           R3 = _s8275::P64;
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.IO.Device.$w$cunsafeIndex_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c83zc() //  [R1]
         { info_tbl: [(c83zc,
                       label: block_c83zc_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83zc: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c83zm; else goto c83zl;
       c83zm: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c83zl: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.172496426 UTC

[section ""data" . GHC.IO.Device.$w$cinRange_closure" {
     GHC.IO.Device.$w$cinRange_closure:
         const GHC.IO.Device.$w$cinRange_info;
 },
 GHC.IO.Device.$w$cinRange_entry() //  [R2, R3, R4]
         { info_tbl: [(c83zC,
                       label: GHC.IO.Device.$w$cinRange_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83zC: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c83zD; else goto c83zE;
       c83zD: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$w$cinRange_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c83zE: // global
           I64[Sp - 24] = block_c83zu_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u83AY; else goto c83zv;
       u83AY: // global
           call _c83zu(R1) args: 0, res: 0, upd: 0;
       c83zv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c83zu() //  [R1]
         { info_tbl: [(c83zu,
                       label: block_c83zu_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83zu: // global
           _s827b::P64 = P64[Sp + 8];
           _c83zB::P64 = R1 & 7;
           if (_c83zB::P64 < 3) goto u83AU; else goto c83zA;
       u83AU: // global
           if (_c83zB::P64 < 2) goto c83zy; else goto c83zz;
       c83zy: // global
           _s827e::I64 = 0;
           goto s827d;
       c83zz: // global
           _s827e::I64 = 1;
           goto s827d;
       c83zA: // global
           _s827e::I64 = 2;
           goto s827d;
       s827d: // global
           I64[Sp] = block_c83zK_info;
           R1 = _s827b::P64;
           I64[Sp + 8] = _s827e::I64;
           if (R1 & 7 != 0) goto u83AX; else goto c83Al;
       u83AX: // global
           call _c83zK(R1) args: 0, res: 0, upd: 0;
       c83Al: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c83zK() //  [R1]
         { info_tbl: [(c83zK,
                       label: block_c83zK_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83zK: // global
           _s827c::P64 = P64[Sp + 16];
           _c83AJ::P64 = R1 & 7;
           if (_c83AJ::P64 < 3) goto u83AV; else goto c83Az;
       u83AV: // global
           if (_c83AJ::P64 < 2) goto c83Ar; else goto c83Av;
       c83Ar: // global
           _s827g::I64 = 0;
           goto s827f;
       c83Av: // global
           _s827g::I64 = 1;
           goto s827f;
       c83Az: // global
           _s827g::I64 = 2;
           goto s827f;
       s827f: // global
           I64[Sp] = block_c83zP_info;
           R1 = _s827c::P64;
           I64[Sp + 16] = _s827g::I64;
           if (R1 & 7 != 0) goto u83AZ; else goto c83zR;
       u83AZ: // global
           call _c83zP(R1) args: 0, res: 0, upd: 0;
       c83zR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c83zP() //  [R1]
         { info_tbl: [(c83zP,
                       label: block_c83zP_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83zP: // global
           _s827e::I64 = I64[Sp + 8];
           _s827g::I64 = I64[Sp + 16];
           _c83AK::P64 = R1 & 7;
           if (_c83AK::P64 < 3) goto u83AW; else goto c83Ak;
       u83AW: // global
           if (_c83AK::P64 < 2) goto c83A2; else goto c83Ab;
       c83A2: // global
           if (%MO_S_Lt_W64(0, _s827e::I64)) goto c83Ai; else goto c83A0;
       c83A0: // global
           R1 = I64[(%MO_S_Le_W64(0,
                                  _s827g::I64) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c83Ab: // global
           if (%MO_S_Lt_W64(1, _s827e::I64)) goto c83Ai; else goto c83Aa;
       c83Aa: // global
           R1 = I64[(%MO_S_Le_W64(1,
                                  _s827g::I64) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c83Ak: // global
           if (%MO_S_Lt_W64(2, _s827e::I64)) goto c83Ai; else goto c83Aj;
       c83Ai: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c83Aj: // global
           R1 = I64[(%MO_S_Le_W64(2,
                                  _s827g::I64) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.174756473 UTC

[section ""data" . GHC.IO.Device.$fIxSeekMode_$cinRange_closure" {
     GHC.IO.Device.$fIxSeekMode_$cinRange_closure:
         const GHC.IO.Device.$fIxSeekMode_$cinRange_info;
 },
 GHC.IO.Device.$fIxSeekMode_$cinRange_entry() //  [R2, R3]
         { info_tbl: [(c83B7,
                       label: GHC.IO.Device.$fIxSeekMode_$cinRange_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83B7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c83B8; else goto c83B9;
       c83B8: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fIxSeekMode_$cinRange_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c83B9: // global
           I64[Sp - 16] = block_c83B4_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u83Bd; else goto c83B5;
       u83Bd: // global
           call _c83B4(R1) args: 0, res: 0, upd: 0;
       c83B5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c83B4() //  [R1]
         { info_tbl: [(c83B4,
                       label: block_c83B4_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83B4: // global
           R4 = P64[Sp + 8];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call GHC.IO.Device.$w$cinRange_entry(R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.175774069 UTC

[section ""data" . lvl_r81Zy_closure" {
     lvl_r81Zy_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.176351767 UTC

[section ""data" . lvl1_r81Zz_closure" {
     lvl1_r81Zz_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.176886054 UTC

[section ""data" . lvl2_r81ZA_closure" {
     lvl2_r81ZA_closure:
         const GHC.Types.I#_con_info;
         const 2;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.177753431 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_$cfromEnum_closure" {
     GHC.IO.Device.$fEnumSeekMode_$cfromEnum_closure:
         const GHC.IO.Device.$fEnumSeekMode_$cfromEnum_info;
 },
 GHC.IO.Device.$fEnumSeekMode_$cfromEnum_entry() //  [R2]
         { info_tbl: [(c83Bq,
                       label: GHC.IO.Device.$fEnumSeekMode_$cfromEnum_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83Bq: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c83Br; else goto c83Bs;
       c83Br: // global
           R2 = R2;
           R1 = GHC.IO.Device.$fEnumSeekMode_$cfromEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c83Bs: // global
           I64[Sp - 8] = block_c83Bi_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u83BD; else goto c83Bj;
       u83BD: // global
           call _c83Bi(R1) args: 0, res: 0, upd: 0;
       c83Bj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c83Bi() //  [R1]
         { info_tbl: [(c83Bi,
                       label: block_c83Bi_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83Bi: // global
           _c83Bp::P64 = R1 & 7;
           if (_c83Bp::P64 < 3) goto u83BC; else goto c83Bo;
       u83BC: // global
           if (_c83Bp::P64 < 2) goto c83Bm; else goto c83Bn;
       c83Bm: // global
           R1 = lvl_r81Zy_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c83Bn: // global
           R1 = lvl1_r81Zz_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c83Bo: // global
           R1 = lvl2_r81ZA_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.179356025 UTC

[section ""data" . GHC.IO.Device.$fIxSeekMode_go1_closure" {
     GHC.IO.Device.$fIxSeekMode_go1_closure:
         const GHC.IO.Device.$fIxSeekMode_go1_info;
 },
 sat_s827B_entry() //  [R1]
         { info_tbl: [(c83BQ,
                       label: sat_s827B_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83BQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c83BR; else goto c83BS;
       c83BR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c83BS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s827z::I64 = I64[R1 + 16];
           if (_s827z::I64 != 0) goto c83BO; else goto c83BP;
       c83BO: // global
           R2 = _s827z::I64 + 1;
           Sp = Sp - 16;
           call GHC.IO.Device.$fIxSeekMode_go1_entry(R2) args: 24, res: 0, upd: 24;
       c83BP: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s827y_entry() //  [R1]
         { info_tbl: [(c83BZ,
                       label: sat_s827y_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83BZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c83C0; else goto c83C1;
       c83C0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c83C1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.IO.Device.$fIxSeekMode_go1_entry() //  [R2]
         { info_tbl: [(c83C3,
                       label: GHC.IO.Device.$fIxSeekMode_go1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83C3: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c83C7; else goto c83C6;
       c83C7: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.IO.Device.$fIxSeekMode_go1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c83C6: // global
           I64[Hp - 64] = sat_s827B_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s827y_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.18120504 UTC

[section ""data" . GHC.IO.Device.$fIxSeekMode_go_closure" {
     GHC.IO.Device.$fIxSeekMode_go_closure:
         const GHC.IO.Device.$fIxSeekMode_go_info;
 },
 sat_s827G_entry() //  [R1]
         { info_tbl: [(c83Ck,
                       label: sat_s827G_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83Ck: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c83Cl; else goto c83Cm;
       c83Cl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c83Cm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s827E::I64 = I64[R1 + 16];
           if (_s827E::I64 != 1) goto c83Ci; else goto c83Cj;
       c83Ci: // global
           R2 = _s827E::I64 + 1;
           Sp = Sp - 16;
           call GHC.IO.Device.$fIxSeekMode_go_entry(R2) args: 24, res: 0, upd: 24;
       c83Cj: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s827D_entry() //  [R1]
         { info_tbl: [(c83Ct,
                       label: sat_s827D_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83Ct: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c83Cu; else goto c83Cv;
       c83Cu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c83Cv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.IO.Device.$fIxSeekMode_go_entry() //  [R2]
         { info_tbl: [(c83Cx,
                       label: GHC.IO.Device.$fIxSeekMode_go_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83Cx: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c83CB; else goto c83CA;
       c83CB: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.IO.Device.$fIxSeekMode_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c83CA: // global
           I64[Hp - 64] = sat_s827G_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s827D_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.183031968 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_go3_closure" {
     GHC.IO.Device.$fEnumSeekMode_go3_closure:
         const GHC.IO.Device.$fEnumSeekMode_go3_info;
 },
 sat_s827L_entry() //  [R1]
         { info_tbl: [(c83CO,
                       label: sat_s827L_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83CO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c83CP; else goto c83CQ;
       c83CP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c83CQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s827J::I64 = I64[R1 + 16];
           if (_s827J::I64 != 2) goto c83CM; else goto c83CN;
       c83CM: // global
           R2 = _s827J::I64 + 1;
           Sp = Sp - 16;
           call GHC.IO.Device.$fEnumSeekMode_go3_entry(R2) args: 24, res: 0, upd: 24;
       c83CN: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s827I_entry() //  [R1]
         { info_tbl: [(c83CX,
                       label: sat_s827I_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83CX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c83CY; else goto c83CZ;
       c83CY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c83CZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.IO.Device.$fEnumSeekMode_go3_entry() //  [R2]
         { info_tbl: [(c83D1,
                       label: GHC.IO.Device.$fEnumSeekMode_go3_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83D1: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c83D5; else goto c83D4;
       c83D5: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.IO.Device.$fEnumSeekMode_go3_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c83D4: // global
           I64[Hp - 64] = sat_s827L_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s827I_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.185020765 UTC

[section ""data" . GHC.IO.Device.$w$crange_closure" {
     GHC.IO.Device.$w$crange_closure:
         const GHC.IO.Device.$w$crange_info;
 },
 GHC.IO.Device.$w$crange_entry() //  [R2, R3]
         { info_tbl: [(c83Dk,
                       label: GHC.IO.Device.$w$crange_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83Dk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c83Dl; else goto c83Dm;
       c83Dl: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$w$crange_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c83Dm: // global
           I64[Sp - 16] = block_c83Dc_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u83E9; else goto c83Dd;
       u83E9: // global
           call _c83Dc(R1) args: 0, res: 0, upd: 0;
       c83Dd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c83Dc() //  [R1]
         { info_tbl: [(c83Dc,
                       label: block_c83Dc_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83Dc: // global
           _s827N::P64 = P64[Sp + 8];
           _c83Dj::P64 = R1 & 7;
           if (_c83Dj::P64 < 3) goto u83E6; else goto c83Di;
       u83E6: // global
           if (_c83Dj::P64 < 2) goto c83Dg; else goto c83Dh;
       c83Dg: // global
           _s827P::I64 = 0;
           goto s827O;
       c83Dh: // global
           _s827P::I64 = 1;
           goto s827O;
       c83Di: // global
           _s827P::I64 = 2;
           goto s827O;
       s827O: // global
           I64[Sp] = block_c83Dq_info;
           R1 = _s827N::P64;
           I64[Sp + 8] = _s827P::I64;
           if (R1 & 7 != 0) goto u83E8; else goto c83Ds;
       u83E8: // global
           call _c83Dq(R1) args: 0, res: 0, upd: 0;
       c83Ds: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c83Dq() //  [R1]
         { info_tbl: [(c83Dq,
                       label: block_c83Dq_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83Dq: // global
           _s827P::I64 = I64[Sp + 8];
           _c83E5::P64 = R1 & 7;
           if (_c83E5::P64 < 3) goto u83E7; else goto c83DV;
       u83E7: // global
           if (_c83E5::P64 < 2) goto c83DD; else goto c83DM;
       c83DD: // global
           if (%MO_S_Gt_W64(_s827P::I64, 0)) goto c83DU; else goto c83DA;
       c83DA: // global
           R2 = _s827P::I64;
           Sp = Sp + 16;
           call GHC.IO.Device.$fIxSeekMode_go1_entry(R2) args: 8, res: 0, upd: 8;
       c83DM: // global
           if (%MO_S_Gt_W64(_s827P::I64, 1)) goto c83DU; else goto c83DK;
       c83DK: // global
           R2 = _s827P::I64;
           Sp = Sp + 16;
           call GHC.IO.Device.$fIxSeekMode_go_entry(R2) args: 8, res: 0, upd: 8;
       c83DV: // global
           if (%MO_S_Gt_W64(_s827P::I64, 2)) goto c83DU; else goto c83DT;
       c83DU: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c83DT: // global
           R2 = _s827P::I64;
           Sp = Sp + 16;
           call GHC.IO.Device.$fEnumSeekMode_go3_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.186791602 UTC

[section ""data" . GHC.IO.Device.$fIxSeekMode_$crange_closure" {
     GHC.IO.Device.$fIxSeekMode_$crange_closure:
         const GHC.IO.Device.$fIxSeekMode_$crange_info;
 },
 GHC.IO.Device.$fIxSeekMode_$crange_entry() //  [R2]
         { info_tbl: [(c83Eh,
                       label: GHC.IO.Device.$fIxSeekMode_$crange_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83Eh: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c83Ei; else goto c83Ej;
       c83Ei: // global
           R2 = R2;
           R1 = GHC.IO.Device.$fIxSeekMode_$crange_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c83Ej: // global
           I64[Sp - 8] = block_c83Ee_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u83En; else goto c83Ef;
       u83En: // global
           call _c83Ee(R1) args: 0, res: 0, upd: 0;
       c83Ef: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c83Ee() //  [R1]
         { info_tbl: [(c83Ee,
                       label: block_c83Ee_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83Ee: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.IO.Device.$w$crange_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.188627049 UTC

[section ""data" . GHC.IO.Device.$w$crangeSize_closure" {
     GHC.IO.Device.$w$crangeSize_closure:
         const GHC.IO.Device.$w$crangeSize_info;
 },
 GHC.IO.Device.$w$crangeSize_entry() //  [R2, R3]
         { info_tbl: [(c83Ey,
                       label: GHC.IO.Device.$w$crangeSize_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83Ey: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c83Ez; else goto c83EA;
       c83Ez: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$w$crangeSize_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c83EA: // global
           I64[Sp - 24] = block_c83Es_info;
           R4 = R3;
           _s8280::P64 = R3;
           R3 = R3;
           _s827Z::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s827Z::P64;
           P64[Sp - 8] = _s8280::P64;
           Sp = Sp - 24;
           call GHC.IO.Device.$w$cinRange_entry(R4,
                                                R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _c83Es() //  [R1]
         { info_tbl: [(c83Es,
                       label: block_c83Es_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83Es: // global
           if (R1 & 7 == 1) goto u83FR; else goto c83Ew;
       u83FR: // global
           Sp = Sp + 24;
           call _c83FE() args: 0, res: 0, upd: 0;
       c83Ew: // global
           _s827Z::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c83EG_info;
           R1 = _s827Z::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u83FZ; else goto c83EI;
       u83FZ: // global
           call _c83EG(R1) args: 0, res: 0, upd: 0;
       c83EI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c83EG() //  [R1]
         { info_tbl: [(c83EG,
                       label: block_c83EG_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83EG: // global
           _s8280::P64 = P64[Sp + 8];
           _c83FJ::P64 = R1 & 7;
           if (_c83FJ::P64 < 3) goto u83FN; else goto c83Ft;
       u83FN: // global
           if (_c83FJ::P64 < 2) goto c83EP; else goto c83F9;
       c83EP: // global
           I64[Sp + 8] = block_c83EM_info;
           R1 = _s8280::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u83G1; else goto c83EQ;
       u83G1: // global
           call _c83EM(R1) args: 0, res: 0, upd: 0;
       c83EQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c83F9: // global
           I64[Sp + 8] = block_c83F7_info;
           R1 = _s8280::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u83G2; else goto c83Fa;
       u83G2: // global
           call _c83F7(R1) args: 0, res: 0, upd: 0;
       c83Fa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c83Ft: // global
           I64[Sp + 8] = block_c83Fr_info;
           R1 = _s8280::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u83G3; else goto c83Fu;
       u83G3: // global
           call _c83Fr(R1) args: 0, res: 0, upd: 0;
       c83Fu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c83EM() //  [R1]
         { info_tbl: [(c83EM,
                       label: block_c83EM_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83EM: // global
           _c83FM::P64 = R1 & 7;
           if (_c83FM::P64 < 3) goto u83FO; else goto c83F4;
       u83FO: // global
           if (_c83FM::P64 < 2) goto u83FT; else goto u83FS;
       u83FT: // global
           Sp = Sp + 8;
           call _c83FI() args: 0, res: 0, upd: 0;
       u83FS: // global
           Sp = Sp + 8;
           call _c83Fo() args: 0, res: 0, upd: 0;
       c83F4: // global
           R1 = 3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c83F7() //  [R1]
         { info_tbl: [(c83F7,
                       label: block_c83F7_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83F7: // global
           _c83FL::P64 = R1 & 7;
           if (_c83FL::P64 < 3) goto u83FP; else goto u83FU;
       u83FP: // global
           if (_c83FL::P64 < 2) goto u83FW; else goto u83FV;
       u83FW: // global
           Sp = Sp + 8;
           call _c83FE() args: 0, res: 0, upd: 0;
       u83FV: // global
           Sp = Sp + 8;
           call _c83FI() args: 0, res: 0, upd: 0;
       u83FU: // global
           Sp = Sp + 8;
           call _c83Fo() args: 0, res: 0, upd: 0;
     }
 },
 _c83Fo() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83Fo: // global
           R1 = 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c83Fr() //  [R1]
         { info_tbl: [(c83Fr,
                       label: block_c83Fr_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83Fr: // global
           _c83FK::P64 = R1 & 7;
           if (_c83FK::P64 < 3) goto u83FQ; else goto u83FX;
       u83FQ: // global
           if (_c83FK::P64 < 2) goto c83FA; else goto u83FY;
       c83FA: // global
           R1 = (-1);
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u83FY: // global
           Sp = Sp + 8;
           call _c83FE() args: 0, res: 0, upd: 0;
       u83FX: // global
           Sp = Sp + 8;
           call _c83FI() args: 0, res: 0, upd: 0;
     }
 },
 _c83FE() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83FE: // global
           R1 = 0;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c83FI() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83FI: // global
           R1 = 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.19159744 UTC

[section ""data" . GHC.IO.Device.$fIxSeekMode_$crangeSize_closure" {
     GHC.IO.Device.$fIxSeekMode_$crangeSize_closure:
         const GHC.IO.Device.$fIxSeekMode_$crangeSize_info;
 },
 GHC.IO.Device.$fIxSeekMode_$crangeSize_entry() //  [R2]
         { info_tbl: [(c83Gi,
                       label: GHC.IO.Device.$fIxSeekMode_$crangeSize_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83Gi: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c83Gq; else goto c83Gr;
       c83Gq: // global
           R2 = R2;
           R1 = GHC.IO.Device.$fIxSeekMode_$crangeSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c83Gr: // global
           I64[Sp - 8] = block_c83Gf_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u83Gw; else goto c83Gg;
       u83Gw: // global
           call _c83Gf(R1) args: 0, res: 0, upd: 0;
       c83Gg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c83Gf() //  [R1]
         { info_tbl: [(c83Gf,
                       label: block_c83Gf_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83Gf: // global
           I64[Sp] = block_c83Gl_info;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.IO.Device.$w$crangeSize_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 _c83Gl() //  [R1]
         { info_tbl: [(c83Gl,
                       label: block_c83Gl_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83Gl: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c83Gv; else goto c83Gu;
       c83Gv: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c83Gu: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.195679656 UTC

[section ""data" . GHC.IO.Device.$w$cunsafeRangeSize_closure" {
     GHC.IO.Device.$w$cunsafeRangeSize_closure:
         const GHC.IO.Device.$w$cunsafeRangeSize_info;
 },
 GHC.IO.Device.$w$cunsafeRangeSize_entry() //  [R2, R3]
         { info_tbl: [(c83GJ,
                       label: GHC.IO.Device.$w$cunsafeRangeSize_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83GJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c83GK; else goto c83GL;
       c83GK: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$w$cunsafeRangeSize_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c83GL: // global
           I64[Sp - 16] = block_c83GB_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u83HY; else goto c83GC;
       u83HY: // global
           call _c83GB(R1) args: 0, res: 0, upd: 0;
       c83GC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c83GB() //  [R1]
         { info_tbl: [(c83GB,
                       label: block_c83GB_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83GB: // global
           _s828c::P64 = P64[Sp + 8];
           _c83GI::P64 = R1 & 7;
           if (_c83GI::P64 < 3) goto u83HK; else goto c83GH;
       u83HK: // global
           if (_c83GI::P64 < 2) goto c83GF; else goto c83GG;
       c83GF: // global
           I64[Sp + 8] = block_c83GO_info;
           R1 = _s828c::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u83HV; else goto c83GQ;
       u83HV: // global
           call _c83GO(R1) args: 0, res: 0, upd: 0;
       c83GQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c83GG: // global
           I64[Sp + 8] = block_c83H7_info;
           R1 = _s828c::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u83HW; else goto c83H9;
       u83HW: // global
           call _c83H7(R1) args: 0, res: 0, upd: 0;
       c83H9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c83GH: // global
           I64[Sp + 8] = block_c83Hq_info;
           R1 = _s828c::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u83HX; else goto c83Hs;
       u83HX: // global
           call _c83Hq(R1) args: 0, res: 0, upd: 0;
       c83Hs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c83GO() //  [R1]
         { info_tbl: [(c83GO,
                       label: block_c83GO_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83GO: // global
           _c83HJ::P64 = R1 & 7;
           if (_c83HJ::P64 < 3) goto u83HL; else goto c83H4;
       u83HL: // global
           if (_c83HJ::P64 < 2) goto u83HP; else goto u83HO;
       u83HP: // global
           Sp = Sp + 8;
           call _c83HG() args: 0, res: 0, upd: 0;
       u83HO: // global
           Sp = Sp + 8;
           call _c83Hn() args: 0, res: 0, upd: 0;
       c83H4: // global
           R1 = 3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c83H7() //  [R1]
         { info_tbl: [(c83H7,
                       label: block_c83H7_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83H7: // global
           _c83HI::P64 = R1 & 7;
           if (_c83HI::P64 < 3) goto u83HM; else goto u83HQ;
       u83HM: // global
           if (_c83HI::P64 < 2) goto u83HS; else goto u83HR;
       u83HS: // global
           Sp = Sp + 8;
           call _c83HC() args: 0, res: 0, upd: 0;
       u83HR: // global
           Sp = Sp + 8;
           call _c83HG() args: 0, res: 0, upd: 0;
       u83HQ: // global
           Sp = Sp + 8;
           call _c83Hn() args: 0, res: 0, upd: 0;
     }
 },
 _c83Hn() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83Hn: // global
           R1 = 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c83Hq() //  [R1]
         { info_tbl: [(c83Hq,
                       label: block_c83Hq_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83Hq: // global
           _c83HH::P64 = R1 & 7;
           if (_c83HH::P64 < 3) goto u83HN; else goto u83HT;
       u83HN: // global
           if (_c83HH::P64 < 2) goto c83Hy; else goto u83HU;
       c83Hy: // global
           R1 = (-1);
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u83HU: // global
           Sp = Sp + 8;
           call _c83HC() args: 0, res: 0, upd: 0;
       u83HT: // global
           Sp = Sp + 8;
           call _c83HG() args: 0, res: 0, upd: 0;
     }
 },
 _c83HC() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83HC: // global
           R1 = 0;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c83HG() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83HG: // global
           R1 = 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.198784673 UTC

[section ""data" . GHC.IO.Device.$fIxSeekMode_$cunsafeRangeSize_closure" {
     GHC.IO.Device.$fIxSeekMode_$cunsafeRangeSize_closure:
         const GHC.IO.Device.$fIxSeekMode_$cunsafeRangeSize_info;
 },
 GHC.IO.Device.$fIxSeekMode_$cunsafeRangeSize_entry() //  [R2]
         { info_tbl: [(c83Id,
                       label: GHC.IO.Device.$fIxSeekMode_$cunsafeRangeSize_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83Id: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c83Il; else goto c83Im;
       c83Il: // global
           R2 = R2;
           R1 = GHC.IO.Device.$fIxSeekMode_$cunsafeRangeSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c83Im: // global
           I64[Sp - 8] = block_c83Ia_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u83Ir; else goto c83Ib;
       u83Ir: // global
           call _c83Ia(R1) args: 0, res: 0, upd: 0;
       c83Ib: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c83Ia() //  [R1]
         { info_tbl: [(c83Ia,
                       label: block_c83Ia_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83Ia: // global
           I64[Sp] = block_c83Ig_info;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.IO.Device.$w$cunsafeRangeSize_entry(R3,
                                                        R2) args: 8, res: 8, upd: 8;
     }
 },
 _c83Ig() //  [R1]
         { info_tbl: [(c83Ig,
                       label: block_c83Ig_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83Ig: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c83Iq; else goto c83Ip;
       c83Iq: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c83Ip: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.200746396 UTC

[section ""data" . GHC.IO.Device.$fIxSeekMode_$cindex_closure" {
     GHC.IO.Device.$fIxSeekMode_$cindex_closure:
         const GHC.IO.Device.$fIxSeekMode_$cindex_info;
         const 0;
 },
 GHC.IO.Device.$fIxSeekMode_$cindex_entry() //  [R2, R3]
         { info_tbl: [(c83Iz,
                       label: GHC.IO.Device.$fIxSeekMode_$cindex_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83Iz: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c83IA; else goto c83IB;
       c83IA: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fIxSeekMode_$cindex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c83IB: // global
           I64[Sp - 16] = block_c83Iw_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u83IZ; else goto c83Ix;
       u83IZ: // global
           call _c83Iw(R1) args: 0, res: 0, upd: 0;
       c83Ix: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c83Iw() //  [R1]
         { info_tbl: [(c83Iw,
                       label: block_c83Iw_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83Iw: // global
           I64[Sp - 8] = block_c83IE_info;
           R4 = P64[Sp + 8];
           R3 = P64[R1 + 15];
           _s828p::P64 = P64[R1 + 7];
           R2 = _s828p::P64;
           P64[Sp] = _s828p::P64;
           Sp = Sp - 8;
           call GHC.IO.Device.$w$cinRange_entry(R4,
                                                R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _c83IE() //  [R1]
         { info_tbl: [(c83IE,
                       label: block_c83IE_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83IE: // global
           if (R1 & 7 == 1) goto c83IL; else goto c83IU;
       c83IL: // global
           R1 = GHC.Arr.hopelessIndexError_closure;
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c83IU: // global
           _s828n::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c83IO_info;
           R3 = _s828n::P64;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.IO.Device.$w$cunsafeIndex_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c83IO() //  [R1]
         { info_tbl: [(c83IO,
                       label: block_c83IO_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83IO: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c83IX; else goto c83IW;
       c83IX: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c83IW: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.202894808 UTC

[section ""data" . GHC.IO.Device.$fIxSeekMode_closure" {
     GHC.IO.Device.$fIxSeekMode_closure:
         const GHC.Arr.C:Ix_con_info;
         const GHC.IO.Device.$fOrdSeekMode_closure+1;
         const GHC.IO.Device.$fIxSeekMode_$crange_closure+1;
         const GHC.IO.Device.$fIxSeekMode_$cindex_closure+2;
         const GHC.IO.Device.$fIxSeekMode_$cunsafeIndex_closure+2;
         const GHC.IO.Device.$fIxSeekMode_$cinRange_closure+2;
         const GHC.IO.Device.$fIxSeekMode_$crangeSize_closure+1;
         const GHC.IO.Device.$fIxSeekMode_$cunsafeRangeSize_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.203660396 UTC

[section ""cstring" . lvl3_r81ZB_bytes" {
     lvl3_r81ZB_bytes:
         I8[] [101,114,114,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.20460033 UTC

[section ""data" . lvl4_r81ZC_closure" {
     lvl4_r81ZC_closure:
         const lvl4_r81ZC_info;
         const 0;
         const 0;
         const 0;
 },
 lvl4_r81ZC_entry() //  [R1]
         { info_tbl: [(c83J6,
                       label: lvl4_r81ZC_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83J6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c83J7; else goto c83J8;
       c83J7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c83J8: // global
           (_c83J3::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c83J3::I64 == 0) goto c83J5; else goto c83J4;
       c83J5: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c83J4: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c83J3::I64;
           R2 = lvl3_r81ZB_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.205913741 UTC

[section ""cstring" . GHC.IO.Device.$trModule4_bytes" {
     GHC.IO.Device.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.20690846 UTC

[section ""data" . lvl5_r81ZD_closure" {
     lvl5_r81ZD_closure:
         const lvl5_r81ZD_info;
         const 0;
         const 0;
         const 0;
 },
 lvl5_r81ZD_entry() //  [R1]
         { info_tbl: [(c83Jf,
                       label: lvl5_r81ZD_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83Jf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c83Jg; else goto c83Jh;
       c83Jg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c83Jh: // global
           (_c83Jc::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c83Jc::I64 == 0) goto c83Je; else goto c83Jd;
       c83Je: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c83Jd: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c83Jc::I64;
           R2 = GHC.IO.Device.$trModule4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.208001051 UTC

[section ""cstring" . GHC.IO.Device.$trModule2_bytes" {
     GHC.IO.Device.$trModule2_bytes:
         I8[] [71,72,67,46,73,79,46,68,101,118,105,99,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.208917014 UTC

[section ""data" . lvl6_r81ZE_closure" {
     lvl6_r81ZE_closure:
         const lvl6_r81ZE_info;
         const 0;
         const 0;
         const 0;
 },
 lvl6_r81ZE_entry() //  [R1]
         { info_tbl: [(c83Jo,
                       label: lvl6_r81ZE_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83Jo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c83Jp; else goto c83Jq;
       c83Jp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c83Jq: // global
           (_c83Jl::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c83Jl::I64 == 0) goto c83Jn; else goto c83Jm;
       c83Jn: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c83Jm: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c83Jl::I64;
           R2 = GHC.IO.Device.$trModule2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.210127219 UTC

[section ""cstring" . lvl7_r81ZF_bytes" {
     lvl7_r81ZF_bytes:
         I8[] [46,47,71,72,67,47,73,79,47,68,101,118,105,99,101,46,104,115]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.213699233 UTC

[section ""data" . lvl8_r81ZG_closure" {
     lvl8_r81ZG_closure:
         const lvl8_r81ZG_info;
         const 0;
         const 0;
         const 0;
 },
 lvl8_r81ZG_entry() //  [R1]
         { info_tbl: [(c83Jx,
                       label: lvl8_r81ZG_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83Jx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c83Jy; else goto c83Jz;
       c83Jy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c83Jz: // global
           (_c83Ju::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c83Ju::I64 == 0) goto c83Jw; else goto c83Jv;
       c83Jw: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c83Jv: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c83Ju::I64;
           R2 = lvl7_r81ZF_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.214805748 UTC

[section ""data" . lvl9_r81ZH_closure" {
     lvl9_r81ZH_closure:
         const GHC.Types.I#_con_info;
         const 173;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.215477883 UTC

[section ""data" . lvl10_r81ZI_closure" {
     lvl10_r81ZI_closure:
         const GHC.Types.I#_con_info;
         const 16;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.21624879 UTC

[section ""data" . lvl11_r81ZJ_closure" {
     lvl11_r81ZJ_closure:
         const GHC.Types.I#_con_info;
         const 20;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.216912672 UTC

[section ""data" . lvl12_r81ZK_closure" {
     lvl12_r81ZK_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl5_r81ZD_closure;
         const lvl6_r81ZE_closure;
         const lvl8_r81ZG_closure;
         const lvl9_r81ZH_closure+1;
         const lvl10_r81ZI_closure+1;
         const lvl9_r81ZH_closure+1;
         const lvl11_r81ZJ_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.217504959 UTC

[section ""data" . lvl13_r81ZL_closure" {
     lvl13_r81ZL_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl4_r81ZC_closure;
         const lvl12_r81ZK_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.218052847 UTC

[section ""cstring" . lvl14_r81ZM_bytes" {
     lvl14_r81ZM_bytes:
         I8[] [112,114,101,100,123,83,101,101,107,77,111,100,101,125,58,32,116,114,105,101,100,32,116,111,32,116,97,107,101,32,96,112,114,101,100,39,32,111,102,32,102,105,114,115,116,32,116,97,103,32,105,110,32,101,110,117,109,101,114,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.218882467 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode4_closure" {
     GHC.IO.Device.$fEnumSeekMode4_closure:
         const GHC.IO.Device.$fEnumSeekMode4_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Device.$fEnumSeekMode4_entry() //  [R1]
         { info_tbl: [(c83JI,
                       label: GHC.IO.Device.$fEnumSeekMode4_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83JI: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c83JJ; else goto c83JK;
       c83JJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c83JK: // global
           (_c83JD::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c83JD::I64 == 0) goto c83JF; else goto c83JE;
       c83JF: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c83JE: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c83JD::I64;
           I64[Sp - 24] = block_c83JG_info;
           R2 = lvl14_r81ZM_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c83JG() //  [R1]
         { info_tbl: [(c83JG,
                       label: block_c83JG_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83JG: // global
           R3 = R1;
           R2 = lvl13_r81ZL_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.220201844 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_$cpred_closure" {
     GHC.IO.Device.$fEnumSeekMode_$cpred_closure:
         const GHC.IO.Device.$fEnumSeekMode_$cpred_info;
         const 0;
 },
 GHC.IO.Device.$fEnumSeekMode_$cpred_entry() //  [R2]
         { info_tbl: [(c83K0,
                       label: GHC.IO.Device.$fEnumSeekMode_$cpred_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83K0: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c83K1; else goto c83K2;
       c83K1: // global
           R2 = R2;
           R1 = GHC.IO.Device.$fEnumSeekMode_$cpred_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c83K2: // global
           I64[Sp - 8] = block_c83JS_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u83Kd; else goto c83JT;
       u83Kd: // global
           call _c83JS(R1) args: 0, res: 0, upd: 0;
       c83JT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c83JS() //  [R1]
         { info_tbl: [(c83JS,
                       label: block_c83JS_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83JS: // global
           _c83JZ::P64 = R1 & 7;
           if (_c83JZ::P64 < 3) goto u83Kc; else goto c83JY;
       u83Kc: // global
           if (_c83JZ::P64 < 2) goto c83JW; else goto c83JX;
       c83JW: // global
           R1 = GHC.IO.Device.$fEnumSeekMode4_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c83JX: // global
           R1 = GHC.IO.Device.AbsoluteSeek_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c83JY: // global
           R1 = GHC.IO.Device.RelativeSeek_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.221362558 UTC

[section ""cstring" . lvl15_r81ZN_bytes" {
     lvl15_r81ZN_bytes:
         I8[] [115,117,99,99,123,83,101,101,107,77,111,100,101,125,58,32,116,114,105,101,100,32,116,111,32,116,97,107,101,32,96,115,117,99,99,39,32,111,102,32,108,97,115,116,32,116,97,103,32,105,110,32,101,110,117,109,101,114,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.222121111 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode5_closure" {
     GHC.IO.Device.$fEnumSeekMode5_closure:
         const GHC.IO.Device.$fEnumSeekMode5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Device.$fEnumSeekMode5_entry() //  [R1]
         { info_tbl: [(c83Km,
                       label: GHC.IO.Device.$fEnumSeekMode5_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83Km: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c83Kn; else goto c83Ko;
       c83Kn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c83Ko: // global
           (_c83Kh::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c83Kh::I64 == 0) goto c83Kj; else goto c83Ki;
       c83Kj: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c83Ki: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c83Kh::I64;
           I64[Sp - 24] = block_c83Kk_info;
           R2 = lvl15_r81ZN_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c83Kk() //  [R1]
         { info_tbl: [(c83Kk,
                       label: block_c83Kk_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83Kk: // global
           R3 = R1;
           R2 = lvl13_r81ZL_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.223474626 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_$csucc_closure" {
     GHC.IO.Device.$fEnumSeekMode_$csucc_closure:
         const GHC.IO.Device.$fEnumSeekMode_$csucc_info;
         const 0;
 },
 GHC.IO.Device.$fEnumSeekMode_$csucc_entry() //  [R2]
         { info_tbl: [(c83KE,
                       label: GHC.IO.Device.$fEnumSeekMode_$csucc_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83KE: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c83KF; else goto c83KG;
       c83KF: // global
           R2 = R2;
           R1 = GHC.IO.Device.$fEnumSeekMode_$csucc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c83KG: // global
           I64[Sp - 8] = block_c83Kw_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u83KR; else goto c83Kx;
       u83KR: // global
           call _c83Kw(R1) args: 0, res: 0, upd: 0;
       c83Kx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c83Kw() //  [R1]
         { info_tbl: [(c83Kw,
                       label: block_c83Kw_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83Kw: // global
           _c83KD::P64 = R1 & 7;
           if (_c83KD::P64 < 3) goto u83KQ; else goto c83KC;
       u83KQ: // global
           if (_c83KD::P64 < 2) goto c83KA; else goto c83KB;
       c83KA: // global
           R1 = GHC.IO.Device.RelativeSeek_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c83KB: // global
           R1 = GHC.IO.Device.SeekFromEnd_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c83KC: // global
           R1 = GHC.IO.Device.$fEnumSeekMode5_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.225036854 UTC

[section ""cstring" . lvl16_r81ZO_bytes" {
     lvl16_r81ZO_bytes:
         I8[] [41,32,105,115,32,111,117,116,115,105,100,101,32,111,102,32,101,110,117,109,101,114,97,116,105,111,110,39,115,32,114,97,110,103,101,32,40,48,44]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.225763834 UTC

[section ""cstring" . lvl17_r81ZP_bytes" {
     lvl17_r81ZP_bytes:
         I8[] [41]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.226604262 UTC

[section ""data" . lvl18_r81ZQ_closure" {
     lvl18_r81ZQ_closure:
         const lvl18_r81ZQ_info;
         const 0;
         const 0;
         const 0;
 },
 lvl18_r81ZQ_entry() //  [R1]
         { info_tbl: [(c83KY,
                       label: lvl18_r81ZQ_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83KY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c83KZ; else goto c83L0;
       c83KZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c83L0: // global
           (_c83KV::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c83KV::I64 == 0) goto c83KX; else goto c83KW;
       c83KX: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c83KW: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c83KV::I64;
           R2 = lvl17_r81ZP_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.227947811 UTC

[section ""data" . lvl19_r81ZR_closure" {
     lvl19_r81ZR_closure:
         const lvl19_r81ZR_info;
         const 0;
         const 0;
         const 0;
 },
 lvl19_r81ZR_entry() //  [R1]
         { info_tbl: [(c83La,
                       label: lvl19_r81ZR_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83La: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c83Lb; else goto c83Lc;
       c83Lb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c83Lc: // global
           (_c83L4::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c83L4::I64 == 0) goto c83L6; else goto c83L5;
       c83L6: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c83L5: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c83L4::I64;
           I64[Sp - 24] = block_c83L7_info;
           R4 = lvl18_r81ZQ_closure;
           R3 = 2;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _c83L7() //  [R1, R2]
         { info_tbl: [(c83L7,
                       label: block_c83L7_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83L7: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c83Lf; else goto c83Le;
       c83Lf: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c83Le: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.229544772 UTC

[section ""data" . lvl20_r81ZS_closure" {
     lvl20_r81ZS_closure:
         const lvl20_r81ZS_info;
         const 0;
         const 0;
         const 0;
 },
 lvl20_r81ZS_entry() //  [R1]
         { info_tbl: [(c83Lm,
                       label: lvl20_r81ZS_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83Lm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c83Ln; else goto c83Lo;
       c83Ln: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c83Lo: // global
           (_c83Lj::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c83Lj::I64 == 0) goto c83Ll; else goto c83Lk;
       c83Ll: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c83Lk: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c83Lj::I64;
           R3 = lvl19_r81ZR_closure;
           R2 = lvl16_r81ZO_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.230529682 UTC

[section ""cstring" . lvl21_r81ZT_bytes" {
     lvl21_r81ZT_bytes:
         I8[] [116,111,69,110,117,109,123,83,101,101,107,77,111,100,101,125,58,32,116,97,103,32,40]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.231564564 UTC

[section ""data" . GHC.IO.Device.$wlvl_closure" {
     GHC.IO.Device.$wlvl_closure:
         const GHC.IO.Device.$wlvl_info;
         const 0;
 },
 sat_s828G_entry() //  [R1]
         { info_tbl: [(c83LA,
                       label: sat_s828G_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83LA: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c83LB; else goto c83LC;
       c83LB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c83LC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c83Lx_info;
           R4 = lvl20_r81ZS_closure;
           R3 = I64[R1 + 16];
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _c83Lx() //  [R1, R2]
         { info_tbl: [(c83Lx,
                       label: block_c83Lx_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83Lx: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c83LF; else goto c83LE;
       c83LF: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c83LE: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.IO.Device.$wlvl_entry() //  [R2]
         { info_tbl: [(c83LI,
                       label: GHC.IO.Device.$wlvl_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83LI: // global
           _s828C::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c83LJ; else goto c83LK;
       c83LK: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c83LM; else goto c83LL;
       c83LM: // global
           HpAlloc = 24;
           goto c83LJ;
       c83LJ: // global
           R2 = _s828C::I64;
           R1 = GHC.IO.Device.$wlvl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c83LL: // global
           I64[Hp - 16] = sat_s828G_info;
           I64[Hp] = _s828C::I64;
           I64[Sp - 8] = block_c83LG_info;
           R3 = Hp - 16;
           R2 = lvl21_r81ZT_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c83LG() //  [R1]
         { info_tbl: [(c83LG,
                       label: block_c83LG_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83LG: // global
           R3 = R1;
           R2 = lvl13_r81ZL_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.233870464 UTC

[section ""data" . GHC.IO.Device.$w$ctoEnum_closure" {
     GHC.IO.Device.$w$ctoEnum_closure:
         const GHC.IO.Device.$w$ctoEnum_info;
         const 0;
 },
 GHC.IO.Device.$w$ctoEnum_entry() //  [R2]
         { info_tbl: [(c83LZ,
                       label: GHC.IO.Device.$w$ctoEnum_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83LZ: // global
           _s828I::I64 = R2;
           if (%MO_S_Lt_W64(R2, 0)) goto c83M7; else goto c83LY;
       c83LY: // global
           if (%MO_S_Gt_W64(_s828I::I64, 2)) goto c83M7; else goto c83M8;
       c83M7: // global
           R2 = _s828I::I64;
           call GHC.IO.Device.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
       c83M8: // global
           R1 = I64[(_s828I::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.234867121 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_$ctoEnum_closure" {
     GHC.IO.Device.$fEnumSeekMode_$ctoEnum_closure:
         const GHC.IO.Device.$fEnumSeekMode_$ctoEnum_info;
         const 0;
 },
 GHC.IO.Device.$fEnumSeekMode_$ctoEnum_entry() //  [R2]
         { info_tbl: [(c83Mg,
                       label: GHC.IO.Device.$fEnumSeekMode_$ctoEnum_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83Mg: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c83Mh; else goto c83Mi;
       c83Mh: // global
           R2 = R2;
           R1 = GHC.IO.Device.$fEnumSeekMode_$ctoEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c83Mi: // global
           I64[Sp - 8] = block_c83Md_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u83Mm; else goto c83Me;
       u83Mm: // global
           call _c83Md(R1) args: 0, res: 0, upd: 0;
       c83Me: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c83Md() //  [R1]
         { info_tbl: [(c83Md,
                       label: block_c83Md_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83Md: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.IO.Device.$w$ctoEnum_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.236070524 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode3_closure" {
     GHC.IO.Device.$fEnumSeekMode3_closure:
         const GHC.IO.Device.$fEnumSeekMode3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Device.$fEnumSeekMode3_entry() //  [R1]
         { info_tbl: [(c83Mt,
                       label: GHC.IO.Device.$fEnumSeekMode3_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83Mt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c83Mu; else goto c83Mv;
       c83Mu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c83Mv: // global
           (_c83Mq::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c83Mq::I64 == 0) goto c83Ms; else goto c83Mr;
       c83Ms: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c83Mr: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c83Mq::I64;
           R2 = 0;
           Sp = Sp - 16;
           call GHC.IO.Device.$fEnumSeekMode_go3_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.237227752 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode2_closure" {
     GHC.IO.Device.$fEnumSeekMode2_closure:
         const GHC.IO.Device.$fEnumSeekMode2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Device.$fEnumSeekMode2_entry() //  [R1]
         { info_tbl: [(c83MC,
                       label: GHC.IO.Device.$fEnumSeekMode2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83MC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c83MD; else goto c83ME;
       c83MD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c83ME: // global
           (_c83Mz::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c83Mz::I64 == 0) goto c83MB; else goto c83MA;
       c83MB: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c83MA: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c83Mz::I64;
           R2 = 1;
           Sp = Sp - 16;
           call GHC.IO.Device.$fEnumSeekMode_go3_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.238411793 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode1_closure" {
     GHC.IO.Device.$fEnumSeekMode1_closure:
         const GHC.IO.Device.$fEnumSeekMode1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Device.$fEnumSeekMode1_entry() //  [R1]
         { info_tbl: [(c83ML,
                       label: GHC.IO.Device.$fEnumSeekMode1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83ML: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c83MM; else goto c83MN;
       c83MM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c83MN: // global
           (_c83MI::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c83MI::I64 == 0) goto c83MK; else goto c83MJ;
       c83MK: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c83MJ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c83MI::I64;
           R2 = 2;
           Sp = Sp - 16;
           call GHC.IO.Device.$fEnumSeekMode_go3_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.239662516 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_$cenumFrom_closure" {
     GHC.IO.Device.$fEnumSeekMode_$cenumFrom_closure:
         const GHC.IO.Device.$fEnumSeekMode_$cenumFrom_info;
         const 0;
 },
 GHC.IO.Device.$fEnumSeekMode_$cenumFrom_entry() //  [R2]
         { info_tbl: [(c83N0,
                       label: GHC.IO.Device.$fEnumSeekMode_$cenumFrom_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83N0: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c83N1; else goto c83N2;
       c83N1: // global
           R2 = R2;
           R1 = GHC.IO.Device.$fEnumSeekMode_$cenumFrom_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c83N2: // global
           I64[Sp - 8] = block_c83MS_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u83Nd; else goto c83MT;
       u83Nd: // global
           call _c83MS(R1) args: 0, res: 0, upd: 0;
       c83MT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c83MS() //  [R1]
         { info_tbl: [(c83MS,
                       label: block_c83MS_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83MS: // global
           _c83MZ::P64 = R1 & 7;
           if (_c83MZ::P64 < 3) goto u83Nc; else goto c83MY;
       u83Nc: // global
           if (_c83MZ::P64 < 2) goto c83MW; else goto c83MX;
       c83MW: // global
           R1 = GHC.IO.Device.$fEnumSeekMode3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c83MX: // global
           R1 = GHC.IO.Device.$fEnumSeekMode2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c83MY: // global
           R1 = GHC.IO.Device.$fEnumSeekMode1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.247299797 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_$cenumFromThen_closure" {
     GHC.IO.Device.$fEnumSeekMode_$cenumFromThen_closure:
         const GHC.IO.Device.$fEnumSeekMode_$cenumFromThen_info;
 },
 sat_s8297_entry() //  [R1]
         { info_tbl: [(c83NZ,
                       label: sat_s8297_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83NZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c83O0; else goto c83O1;
       c83O0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c83O1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s8292_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s8295_entry() //  [R1]
         { info_tbl: [(c83O6,
                       label: sat_s8295_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83O6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c83O7; else goto c83O8;
       c83O7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c83O8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s8298_entry() //  [R1]
         { info_tbl: [(c83Oe,
                       label: sat_s8298_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83Oe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c83Of; else goto c83Og;
       c83Of: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c83Og: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_dn_s8292_entry() //  [R1, R2]
         { info_tbl: [(c83Ok,
                       label: go_dn_s8292_info
                       rep:HeapRep 2 nonptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83Ok: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c83Oo; else goto c83On;
       c83Oo: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c83On: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c83Oi; else goto c83Oj;
       c83Oi: // global
           _s8290::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s8297_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s8290::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s8295_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c83Oj: // global
           I64[Hp - 80] = sat_s8298_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c83Oq::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c83Oq::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s8299_entry() //  [R1]
         { info_tbl: [(c83Or,
                       label: sat_s8299_info
                       rep:HeapRep 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83Or: // global
           _s8299::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c83Os; else goto c83Ot;
       c83Ot: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c83Ov; else goto c83Ou;
       c83Ov: // global
           HpAlloc = 24;
           goto c83Os;
       c83Os: // global
           R1 = _s8299::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c83Ou: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s8299::P64;
           _s828V::I64 = I64[_s8299::P64 + 24];
           _s8290::I64 = _s828V::I64 - I64[_s8299::P64 + 16];
           I64[Hp - 16] = go_dn_s8292_info;
           I64[Hp - 8] = _s8290::I64;
           I64[Hp] = 2 - _s8290::I64;
           R2 = _s828V::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s8292_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s828Z_entry() //  [R1]
         { info_tbl: [(c83OA,
                       label: sat_s828Z_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83OA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c83OB; else goto c83OC;
       c83OB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c83OC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s829b_entry() //  [R1]
         { info_tbl: [(c83OL,
                       label: sat_s829b_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83OL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c83OM; else goto c83ON;
       c83OM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c83ON: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s829l_entry() //  [R1]
         { info_tbl: [(c83Pg,
                       label: sat_s829l_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83Pg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c83Ph; else goto c83Pi;
       c83Ph: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c83Pi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s829g_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s829j_entry() //  [R1]
         { info_tbl: [(c83Pn,
                       label: sat_s829j_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83Pn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c83Po; else goto c83Pp;
       c83Po: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c83Pp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s829m_entry() //  [R1]
         { info_tbl: [(c83Pv,
                       label: sat_s829m_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83Pv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c83Pw; else goto c83Px;
       c83Pw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c83Px: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_up_s829g_entry() //  [R1, R2]
         { info_tbl: [(c83PB,
                       label: go_up_s829g_info
                       rep:HeapRep 2 nonptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83PB: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c83PF; else goto c83PE;
       c83PF: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c83PE: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c83Pz; else goto c83PA;
       c83Pz: // global
           _s829e::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s829l_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s829e::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s829j_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c83PA: // global
           I64[Hp - 80] = sat_s829m_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c83PH::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c83PH::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s829n_entry() //  [R1]
         { info_tbl: [(c83PI,
                       label: sat_s829n_info
                       rep:HeapRep 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83PI: // global
           _s829n::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c83PJ; else goto c83PK;
       c83PK: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c83PM; else goto c83PL;
       c83PM: // global
           HpAlloc = 24;
           goto c83PJ;
       c83PJ: // global
           R1 = _s829n::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c83PL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s829n::P64;
           _s828V::I64 = I64[_s829n::P64 + 24];
           _s829e::I64 = _s828V::I64 - I64[_s829n::P64 + 16];
           I64[Hp - 16] = go_up_s829g_info;
           I64[Hp - 8] = _s829e::I64;
           I64[Hp] = 2 - _s829e::I64;
           R2 = _s828V::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s829g_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s829d_entry() //  [R1]
         { info_tbl: [(c83PR,
                       label: sat_s829d_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83PR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c83PS; else goto c83PT;
       c83PS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c83PT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s829p_entry() //  [R1]
         { info_tbl: [(c83Q2,
                       label: sat_s829p_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83Q2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c83Q3; else goto c83Q4;
       c83Q3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c83Q4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s829A_entry() //  [R1]
         { info_tbl: [(c83QA,
                       label: sat_s829A_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83QA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c83QB; else goto c83QC;
       c83QB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c83QC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s829v_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s829y_entry() //  [R1]
         { info_tbl: [(c83QH,
                       label: sat_s829y_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83QH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c83QI; else goto c83QJ;
       c83QI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c83QJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s829B_entry() //  [R1]
         { info_tbl: [(c83QP,
                       label: sat_s829B_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83QP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c83QQ; else goto c83QR;
       c83QQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c83QR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_dn_s829v_entry() //  [R1, R2]
         { info_tbl: [(c83QV,
                       label: go_dn_s829v_info
                       rep:HeapRep 2 nonptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83QV: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c83QZ; else goto c83QY;
       c83QZ: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c83QY: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c83QT; else goto c83QU;
       c83QT: // global
           _s829t::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s829A_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s829t::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s829y_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c83QU: // global
           I64[Hp - 80] = sat_s829B_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c83R1::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c83R1::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s829C_entry() //  [R1]
         { info_tbl: [(c83R2,
                       label: sat_s829C_info
                       rep:HeapRep 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83R2: // global
           _s829C::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c83R3; else goto c83R4;
       c83R4: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c83R6; else goto c83R5;
       c83R6: // global
           HpAlloc = 24;
           goto c83R3;
       c83R3: // global
           R1 = _s829C::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c83R5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s829C::P64;
           _s828V::I64 = I64[_s829C::P64 + 24];
           _s829t::I64 = _s828V::I64 - I64[_s829C::P64 + 16];
           I64[Hp - 16] = go_dn_s829v_info;
           I64[Hp - 8] = _s829t::I64;
           I64[Hp] = 0 - _s829t::I64;
           R2 = _s828V::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s829v_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s829s_entry() //  [R1]
         { info_tbl: [(c83Rb,
                       label: sat_s829s_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83Rb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c83Rc; else goto c83Rd;
       c83Rc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c83Rd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s829E_entry() //  [R1]
         { info_tbl: [(c83Rm,
                       label: sat_s829E_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83Rm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c83Rn; else goto c83Ro;
       c83Rn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c83Ro: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s829O_entry() //  [R1]
         { info_tbl: [(c83RR,
                       label: sat_s829O_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83RR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c83RS; else goto c83RT;
       c83RS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c83RT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s829J_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s829M_entry() //  [R1]
         { info_tbl: [(c83RY,
                       label: sat_s829M_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83RY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c83RZ; else goto c83S0;
       c83RZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c83S0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s829P_entry() //  [R1]
         { info_tbl: [(c83S6,
                       label: sat_s829P_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83S6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c83S7; else goto c83S8;
       c83S7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c83S8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_up_s829J_entry() //  [R1, R2]
         { info_tbl: [(c83Sc,
                       label: go_up_s829J_info
                       rep:HeapRep 2 nonptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83Sc: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c83Sg; else goto c83Sf;
       c83Sg: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c83Sf: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c83Sa; else goto c83Sb;
       c83Sa: // global
           _s829H::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s829O_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s829H::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s829M_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c83Sb: // global
           I64[Hp - 80] = sat_s829P_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c83Si::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c83Si::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s829Q_entry() //  [R1]
         { info_tbl: [(c83Sj,
                       label: sat_s829Q_info
                       rep:HeapRep 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83Sj: // global
           _s829Q::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c83Sk; else goto c83Sl;
       c83Sl: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c83Sn; else goto c83Sm;
       c83Sn: // global
           HpAlloc = 24;
           goto c83Sk;
       c83Sk: // global
           R1 = _s829Q::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c83Sm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s829Q::P64;
           _s828V::I64 = I64[_s829Q::P64 + 24];
           _s829H::I64 = _s828V::I64 - I64[_s829Q::P64 + 16];
           I64[Hp - 16] = go_up_s829J_info;
           I64[Hp - 8] = _s829H::I64;
           I64[Hp] = 0 - _s829H::I64;
           R2 = _s828V::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s829J_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s829G_entry() //  [R1]
         { info_tbl: [(c83Ss,
                       label: sat_s829G_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83Ss: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c83St; else goto c83Su;
       c83St: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c83Su: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s829S_entry() //  [R1]
         { info_tbl: [(c83SD,
                       label: sat_s829S_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83SD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c83SE; else goto c83SF;
       c83SE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c83SF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.IO.Device.$fEnumSeekMode_$cenumFromThen_entry() //  [R2, R3]
         { info_tbl: [(c83SO,
                       label: GHC.IO.Device.$fEnumSeekMode_$cenumFromThen_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83SO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c83SP; else goto c83SQ;
       c83SP: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fEnumSeekMode_$cenumFromThen_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c83SQ: // global
           I64[Sp - 16] = block_c83SG_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u83U8; else goto c83SH;
       u83U8: // global
           call _c83SG(R1) args: 0, res: 0, upd: 0;
       c83SH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c83SG() //  [R1]
         { info_tbl: [(c83SG,
                       label: block_c83SG_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83SG: // global
           _s828R::P64 = P64[Sp + 8];
           _c83SN::P64 = R1 & 7;
           if (_c83SN::P64 < 3) goto u83U0; else goto c83SM;
       u83U0: // global
           if (_c83SN::P64 < 2) goto c83SK; else goto c83SL;
       c83SK: // global
           _s828T::I64 = 0;
           goto s828S;
       c83SL: // global
           _s828T::I64 = 1;
           goto s828S;
       c83SM: // global
           _s828T::I64 = 2;
           goto s828S;
       s828S: // global
           I64[Sp] = block_c83SR_info;
           R1 = _s828R::P64;
           I64[Sp + 8] = _s828T::I64;
           if (R1 & 7 != 0) goto u83U7; else goto c83TB;
       u83U7: // global
           call _c83SR(R1) args: 0, res: 0, upd: 0;
       c83TB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c83SR() //  [R1]
         { info_tbl: [(c83SR,
                       label: block_c83SR_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83SR: // global
           _c83TZ::P64 = R1 & 7;
           if (_c83TZ::P64 < 3) goto u83U1; else goto c83TP;
       u83U1: // global
           if (_c83TZ::P64 < 2) goto c83TH; else goto c83TL;
       c83TH: // global
           I64[Sp] = 0;
           goto u83Ub;
       c83TL: // global
           I64[Sp] = 1;
           goto u83Ub;
       c83TP: // global
           I64[Sp] = 2;
           goto u83Ub;
       u83Ub: // global
           call _c83Nq() args: 0, res: 0, upd: 0;
     }
 },
 _c83Nq() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83Nq: // global
           Hp = Hp + 80;
           _s828V::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c83SV; else goto c83SU;
       c83SV: // global
           HpAlloc = 80;
           I64[Sp] = block_c83Np_info;
           R1 = _s828V::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c83SU: // global
           _s828T::I64 = I64[Sp + 8];
           if (%MO_S_Le_W64(_s828T::I64,
                            _s828V::I64)) goto c83Tg; else goto c83TA;
       c83Tg: // global
           if (%MO_S_Lt_W64(_s828V::I64,
                            _s828T::I64)) goto c83T5; else goto c83Te;
       c83T5: // global
           if (%MO_S_Le_W64(2, _s828V::I64)) goto c83SY; else goto c83T3;
       c83SY: // global
           I64[Hp - 72] = sat_s8299_info;
           I64[Hp - 56] = _s828T::I64;
           I64[Hp - 48] = _s828V::I64;
           I64[Hp - 40] = sat_s828Z_info;
           I64[Hp - 24] = _s828T::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c83T3: // global
           if (%MO_S_Gt_W64(2, _s828T::I64)) goto c83Tx; else goto c83T1;
       c83T1: // global
           I64[Hp - 72] = sat_s829b_info;
           I64[Hp - 56] = _s828T::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c83SZ::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c83SZ::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c83Te: // global
           if (%MO_S_Ge_W64(2, _s828V::I64)) goto c83T8; else goto c83Td;
       c83T8: // global
           I64[Hp - 72] = sat_s829n_info;
           I64[Hp - 56] = _s828T::I64;
           I64[Hp - 48] = _s828V::I64;
           I64[Hp - 40] = sat_s829d_info;
           I64[Hp - 24] = _s828T::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c83Td: // global
           if (%MO_S_Lt_W64(2, _s828T::I64)) goto c83Tx; else goto c83Tb;
       c83Tb: // global
           I64[Hp - 72] = sat_s829p_info;
           I64[Hp - 56] = _s828T::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c83T9::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c83T9::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c83TA: // global
           if (%MO_S_Lt_W64(_s828V::I64,
                            _s828T::I64)) goto c83Tq; else goto c83Tz;
       c83Tq: // global
           if (%MO_S_Le_W64(0, _s828V::I64)) goto c83Tj; else goto c83To;
       c83Tj: // global
           I64[Hp - 72] = sat_s829C_info;
           I64[Hp - 56] = _s828T::I64;
           I64[Hp - 48] = _s828V::I64;
           I64[Hp - 40] = sat_s829s_info;
           I64[Hp - 24] = _s828T::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c83To: // global
           if (%MO_S_Gt_W64(0, _s828T::I64)) goto c83Tx; else goto c83Tm;
       c83Tm: // global
           I64[Hp - 72] = sat_s829E_info;
           I64[Hp - 56] = _s828T::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c83Tk::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c83Tk::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c83Tz: // global
           if (%MO_S_Ge_W64(0, _s828V::I64)) goto c83Tt; else goto c83Ty;
       c83Tt: // global
           I64[Hp - 72] = sat_s829Q_info;
           I64[Hp - 56] = _s828T::I64;
           I64[Hp - 48] = _s828V::I64;
           I64[Hp - 40] = sat_s829G_info;
           I64[Hp - 24] = _s828T::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c83Ty: // global
           if (%MO_S_Lt_W64(0, _s828T::I64)) goto c83Tx; else goto c83Tw;
       c83Tx: // global
           Hp = Hp - 80;
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c83Tw: // global
           I64[Hp - 72] = sat_s829S_info;
           I64[Hp - 56] = _s828T::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c83Tu::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c83Tu::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c83Np() //  [R1]
         { info_tbl: [(c83Np,
                       label: block_c83Np_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83Np: // global
           I64[Sp] = R1;
           call _c83Nq() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.260866857 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_go2_closure" {
     GHC.IO.Device.$fEnumSeekMode_go2_closure:
         const GHC.IO.Device.$fEnumSeekMode_go2_info;
         const 0;
 },
 sat_s82a1_entry() //  [R1]
         { info_tbl: [(c83Uo,
                       label: sat_s82a1_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83Uo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c83Up; else goto c83Uq;
       c83Up: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c83Uq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s829Z::I64 = I64[R1 + 16];
           if (_s829Z::I64 != 0) goto c83Um; else goto c83Un;
       c83Um: // global
           R2 = _s829Z::I64 + 1;
           Sp = Sp - 16;
           call GHC.IO.Device.$fEnumSeekMode_go2_entry(R2) args: 24, res: 0, upd: 24;
       c83Un: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s829Y_entry() //  [R1]
         { info_tbl: [(c83UC,
                       label: sat_s829Y_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83UC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c83UD; else goto c83UL;
       c83UD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c83UL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s829V::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s829V::I64, 0)) goto c83UJ; else goto c83UB;
       c83UB: // global
           if (%MO_S_Gt_W64(_s829V::I64, 2)) goto c83UJ; else goto c83UK;
       c83UJ: // global
           R2 = _s829V::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c83UK: // global
           R1 = I64[(_s829V::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.IO.Device.$fEnumSeekMode_go2_entry() //  [R2]
         { info_tbl: [(c83UN,
                       label: GHC.IO.Device.$fEnumSeekMode_go2_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83UN: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c83UR; else goto c83UQ;
       c83UR: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.IO.Device.$fEnumSeekMode_go2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c83UQ: // global
           I64[Hp - 64] = sat_s82a1_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s829Y_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.263364739 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_go1_closure" {
     GHC.IO.Device.$fEnumSeekMode_go1_closure:
         const GHC.IO.Device.$fEnumSeekMode_go1_info;
         const 0;
 },
 sat_s82a8_entry() //  [R1]
         { info_tbl: [(c83V4,
                       label: sat_s82a8_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83V4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c83V5; else goto c83V6;
       c83V5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c83V6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82a6::I64 = I64[R1 + 16];
           if (_s82a6::I64 != 1) goto c83V2; else goto c83V3;
       c83V2: // global
           R2 = _s82a6::I64 + 1;
           Sp = Sp - 16;
           call GHC.IO.Device.$fEnumSeekMode_go1_entry(R2) args: 24, res: 0, upd: 24;
       c83V3: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82a5_entry() //  [R1]
         { info_tbl: [(c83Vi,
                       label: sat_s82a5_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83Vi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c83Vj; else goto c83Vr;
       c83Vj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c83Vr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82a2::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82a2::I64, 0)) goto c83Vp; else goto c83Vh;
       c83Vh: // global
           if (%MO_S_Gt_W64(_s82a2::I64, 2)) goto c83Vp; else goto c83Vq;
       c83Vp: // global
           R2 = _s82a2::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c83Vq: // global
           R1 = I64[(_s82a2::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.IO.Device.$fEnumSeekMode_go1_entry() //  [R2]
         { info_tbl: [(c83Vt,
                       label: GHC.IO.Device.$fEnumSeekMode_go1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83Vt: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c83Vx; else goto c83Vw;
       c83Vx: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.IO.Device.$fEnumSeekMode_go1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c83Vw: // global
           I64[Hp - 64] = sat_s82a8_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s82a5_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.265874104 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_go_closure" {
     GHC.IO.Device.$fEnumSeekMode_go_closure:
         const GHC.IO.Device.$fEnumSeekMode_go_info;
         const 0;
 },
 sat_s82af_entry() //  [R1]
         { info_tbl: [(c83VK,
                       label: sat_s82af_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83VK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c83VL; else goto c83VM;
       c83VL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c83VM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82ad::I64 = I64[R1 + 16];
           if (_s82ad::I64 != 2) goto c83VI; else goto c83VJ;
       c83VI: // global
           R2 = _s82ad::I64 + 1;
           Sp = Sp - 16;
           call GHC.IO.Device.$fEnumSeekMode_go_entry(R2) args: 24, res: 0, upd: 24;
       c83VJ: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82ac_entry() //  [R1]
         { info_tbl: [(c83VY,
                       label: sat_s82ac_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83VY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c83VZ; else goto c83W7;
       c83VZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c83W7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82a9::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82a9::I64, 0)) goto c83W5; else goto c83VX;
       c83VX: // global
           if (%MO_S_Gt_W64(_s82a9::I64, 2)) goto c83W5; else goto c83W6;
       c83W5: // global
           R2 = _s82a9::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c83W6: // global
           R1 = I64[(_s82a9::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.IO.Device.$fEnumSeekMode_go_entry() //  [R2]
         { info_tbl: [(c83W9,
                       label: GHC.IO.Device.$fEnumSeekMode_go_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83W9: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c83Wd; else goto c83Wc;
       c83Wd: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.IO.Device.$fEnumSeekMode_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c83Wc: // global
           I64[Hp - 64] = sat_s82af_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s82ac_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.268506258 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_$cenumFromTo_closure" {
     GHC.IO.Device.$fEnumSeekMode_$cenumFromTo_closure:
         const GHC.IO.Device.$fEnumSeekMode_$cenumFromTo_info;
         const 0;
 },
 GHC.IO.Device.$fEnumSeekMode_$cenumFromTo_entry() //  [R2, R3]
         { info_tbl: [(c83Ws,
                       label: GHC.IO.Device.$fEnumSeekMode_$cenumFromTo_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83Ws: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c83Wt; else goto c83Wu;
       c83Wt: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fEnumSeekMode_$cenumFromTo_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c83Wu: // global
           I64[Sp - 16] = block_c83Wk_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u83Xh; else goto c83Wl;
       u83Xh: // global
           call _c83Wk(R1) args: 0, res: 0, upd: 0;
       c83Wl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c83Wk() //  [R1]
         { info_tbl: [(c83Wk,
                       label: block_c83Wk_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83Wk: // global
           _s82ah::P64 = P64[Sp + 8];
           _c83Wr::P64 = R1 & 7;
           if (_c83Wr::P64 < 3) goto u83Xe; else goto c83Wq;
       u83Xe: // global
           if (_c83Wr::P64 < 2) goto c83Wo; else goto c83Wp;
       c83Wo: // global
           _s82aj::I64 = 0;
           goto s82ai;
       c83Wp: // global
           _s82aj::I64 = 1;
           goto s82ai;
       c83Wq: // global
           _s82aj::I64 = 2;
           goto s82ai;
       s82ai: // global
           I64[Sp] = block_c83Wy_info;
           R1 = _s82ah::P64;
           I64[Sp + 8] = _s82aj::I64;
           if (R1 & 7 != 0) goto u83Xg; else goto c83WA;
       u83Xg: // global
           call _c83Wy(R1) args: 0, res: 0, upd: 0;
       c83WA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c83Wy() //  [R1]
         { info_tbl: [(c83Wy,
                       label: block_c83Wy_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83Wy: // global
           _s82aj::I64 = I64[Sp + 8];
           _c83Xd::P64 = R1 & 7;
           if (_c83Xd::P64 < 3) goto u83Xf; else goto c83X3;
       u83Xf: // global
           if (_c83Xd::P64 < 2) goto c83WL; else goto c83WU;
       c83WL: // global
           if (%MO_S_Gt_W64(_s82aj::I64, 0)) goto c83X2; else goto c83WI;
       c83WI: // global
           R2 = _s82aj::I64;
           Sp = Sp + 16;
           call GHC.IO.Device.$fEnumSeekMode_go2_entry(R2) args: 8, res: 0, upd: 8;
       c83WU: // global
           if (%MO_S_Gt_W64(_s82aj::I64, 1)) goto c83X2; else goto c83WS;
       c83WS: // global
           R2 = _s82aj::I64;
           Sp = Sp + 16;
           call GHC.IO.Device.$fEnumSeekMode_go1_entry(R2) args: 8, res: 0, upd: 8;
       c83X3: // global
           if (%MO_S_Gt_W64(_s82aj::I64, 2)) goto c83X2; else goto c83X1;
       c83X2: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c83X1: // global
           R2 = _s82aj::I64;
           Sp = Sp + 16;
           call GHC.IO.Device.$fEnumSeekMode_go_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.280622728 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_$cenumFromThenTo_closure" {
     GHC.IO.Device.$fEnumSeekMode_$cenumFromThenTo_closure:
         const GHC.IO.Device.$fEnumSeekMode_$cenumFromThenTo_info;
         const 0;
 },
 sat_s82aL_entry() //  [R1]
         { info_tbl: [(c83Y5,
                       label: sat_s82aL_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83Y5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c83Y6; else goto c83Y7;
       c83Y6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c83Y7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s82aE_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82aJ_entry() //  [R1]
         { info_tbl: [(c83Yh,
                       label: sat_s82aJ_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83Yh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c83Yi; else goto c83Yq;
       c83Yi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c83Yq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82aF::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82aF::I64, 0)) goto c83Yo; else goto c83Yg;
       c83Yg: // global
           if (%MO_S_Gt_W64(_s82aF::I64, 2)) goto c83Yo; else goto c83Yp;
       c83Yo: // global
           R2 = _s82aF::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c83Yp: // global
           R1 = I64[(_s82aF::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82aO_entry() //  [R1]
         { info_tbl: [(c83YB,
                       label: sat_s82aO_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83YB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c83YC; else goto c83YK;
       c83YC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c83YK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82aF::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82aF::I64, 0)) goto c83YI; else goto c83YA;
       c83YA: // global
           if (%MO_S_Gt_W64(_s82aF::I64, 2)) goto c83YI; else goto c83YJ;
       c83YI: // global
           R2 = _s82aF::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c83YJ: // global
           R1 = I64[(_s82aF::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_dn_s82aE_entry() //  [R1, R2]
         { info_tbl: [(c83YO,
                       label: go_dn_s82aE_info
                       rep:HeapRep 2 nonptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83YO: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c83YS; else goto c83YR;
       c83YS: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c83YR: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c83YM; else goto c83YN;
       c83YM: // global
           _s82aC::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s82aL_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s82aC::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s82aJ_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c83YN: // global
           I64[Hp - 80] = sat_s82aO_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c83YU::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c83YU::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s82aP_entry() //  [R1]
         { info_tbl: [(c83YV,
                       label: sat_s82aP_info
                       rep:HeapRep 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83YV: // global
           _s82aP::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c83YW; else goto c83YX;
       c83YX: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c83YZ; else goto c83YY;
       c83YZ: // global
           HpAlloc = 24;
           goto c83YW;
       c83YW: // global
           R1 = _s82aP::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c83YY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s82aP::P64;
           _s82av::I64 = I64[_s82aP::P64 + 24];
           _s82aC::I64 = _s82av::I64 - I64[_s82aP::P64 + 16];
           I64[Hp - 16] = go_dn_s82aE_info;
           I64[Hp - 8] = _s82aC::I64;
           I64[Hp] = 0 - _s82aC::I64;
           R2 = _s82av::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s82aE_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82aB_entry() //  [R1]
         { info_tbl: [(c83Z9,
                       label: sat_s82aB_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83Z9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c83Za; else goto c83Zi;
       c83Za: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c83Zi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82at::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82at::I64, 0)) goto c83Zg; else goto c83Z8;
       c83Z8: // global
           if (%MO_S_Gt_W64(_s82at::I64, 2)) goto c83Zg; else goto c83Zh;
       c83Zg: // global
           R2 = _s82at::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c83Zh: // global
           R1 = I64[(_s82at::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82aT_entry() //  [R1]
         { info_tbl: [(c83Zw,
                       label: sat_s82aT_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83Zw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c83Zx; else goto c83ZF;
       c83Zx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c83ZF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82at::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82at::I64, 0)) goto c83ZD; else goto c83Zv;
       c83Zv: // global
           if (%MO_S_Gt_W64(_s82at::I64, 2)) goto c83ZD; else goto c83ZE;
       c83ZD: // global
           R2 = _s82at::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c83ZE: // global
           R1 = I64[(_s82at::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82b7_entry() //  [R1]
         { info_tbl: [(c8408,
                       label: sat_s82b7_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c8408: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8409; else goto c840a;
       c8409: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c840a: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s82b0_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82b5_entry() //  [R1]
         { info_tbl: [(c840k,
                       label: sat_s82b5_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c840k: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c840l; else goto c840t;
       c840l: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c840t: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82b1::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82b1::I64, 0)) goto c840r; else goto c840j;
       c840j: // global
           if (%MO_S_Gt_W64(_s82b1::I64, 2)) goto c840r; else goto c840s;
       c840r: // global
           R2 = _s82b1::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c840s: // global
           R1 = I64[(_s82b1::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82ba_entry() //  [R1]
         { info_tbl: [(c840E,
                       label: sat_s82ba_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c840E: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c840F; else goto c840N;
       c840F: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c840N: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82b1::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82b1::I64, 0)) goto c840L; else goto c840D;
       c840D: // global
           if (%MO_S_Gt_W64(_s82b1::I64, 2)) goto c840L; else goto c840M;
       c840L: // global
           R2 = _s82b1::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c840M: // global
           R1 = I64[(_s82b1::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_up_s82b0_entry() //  [R1, R2]
         { info_tbl: [(c840R,
                       label: go_up_s82b0_info
                       rep:HeapRep 2 nonptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c840R: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c840V; else goto c840U;
       c840V: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c840U: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c840P; else goto c840Q;
       c840P: // global
           _s82aY::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s82b7_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s82aY::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s82b5_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c840Q: // global
           I64[Hp - 80] = sat_s82ba_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c840X::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c840X::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s82bb_entry() //  [R1]
         { info_tbl: [(c840Y,
                       label: sat_s82bb_info
                       rep:HeapRep 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c840Y: // global
           _s82bb::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c840Z; else goto c8410;
       c8410: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8412; else goto c8411;
       c8412: // global
           HpAlloc = 24;
           goto c840Z;
       c840Z: // global
           R1 = _s82bb::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8411: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s82bb::P64;
           _s82av::I64 = I64[_s82bb::P64 + 24];
           _s82aY::I64 = _s82av::I64 - I64[_s82bb::P64 + 16];
           I64[Hp - 16] = go_up_s82b0_info;
           I64[Hp - 8] = _s82aY::I64;
           I64[Hp] = 0 - _s82aY::I64;
           R2 = _s82av::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s82b0_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82aX_entry() //  [R1]
         { info_tbl: [(c841c,
                       label: sat_s82aX_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c841c: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c841d; else goto c841l;
       c841d: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c841l: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82at::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82at::I64, 0)) goto c841j; else goto c841b;
       c841b: // global
           if (%MO_S_Gt_W64(_s82at::I64, 2)) goto c841j; else goto c841k;
       c841j: // global
           R2 = _s82at::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c841k: // global
           R1 = I64[(_s82at::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82bf_entry() //  [R1]
         { info_tbl: [(c841z,
                       label: sat_s82bf_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c841z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c841A; else goto c841I;
       c841A: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c841I: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82at::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82at::I64, 0)) goto c841G; else goto c841y;
       c841y: // global
           if (%MO_S_Gt_W64(_s82at::I64, 2)) goto c841G; else goto c841H;
       c841G: // global
           R2 = _s82at::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c841H: // global
           R1 = I64[(_s82at::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82bu_entry() //  [R1]
         { info_tbl: [(c842f,
                       label: sat_s82bu_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c842f: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c842g; else goto c842h;
       c842g: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c842h: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s82bn_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82bs_entry() //  [R1]
         { info_tbl: [(c842r,
                       label: sat_s82bs_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c842r: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c842s; else goto c842A;
       c842s: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c842A: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82bo::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82bo::I64, 0)) goto c842y; else goto c842q;
       c842q: // global
           if (%MO_S_Gt_W64(_s82bo::I64, 2)) goto c842y; else goto c842z;
       c842y: // global
           R2 = _s82bo::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c842z: // global
           R1 = I64[(_s82bo::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82bx_entry() //  [R1]
         { info_tbl: [(c842L,
                       label: sat_s82bx_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c842L: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c842M; else goto c842U;
       c842M: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c842U: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82bo::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82bo::I64, 0)) goto c842S; else goto c842K;
       c842K: // global
           if (%MO_S_Gt_W64(_s82bo::I64, 2)) goto c842S; else goto c842T;
       c842S: // global
           R2 = _s82bo::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c842T: // global
           R1 = I64[(_s82bo::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_dn_s82bn_entry() //  [R1, R2]
         { info_tbl: [(c842Y,
                       label: go_dn_s82bn_info
                       rep:HeapRep 2 nonptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c842Y: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c8432; else goto c8431;
       c8432: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8431: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c842W; else goto c842X;
       c842W: // global
           _s82bl::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s82bu_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s82bl::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s82bs_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c842X: // global
           I64[Hp - 80] = sat_s82bx_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c8434::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c8434::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s82by_entry() //  [R1]
         { info_tbl: [(c8435,
                       label: sat_s82by_info
                       rep:HeapRep 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c8435: // global
           _s82by::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c8436; else goto c8437;
       c8437: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8439; else goto c8438;
       c8439: // global
           HpAlloc = 24;
           goto c8436;
       c8436: // global
           R1 = _s82by::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8438: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s82by::P64;
           _s82av::I64 = I64[_s82by::P64 + 24];
           _s82bl::I64 = _s82av::I64 - I64[_s82by::P64 + 16];
           I64[Hp - 16] = go_dn_s82bn_info;
           I64[Hp - 8] = _s82bl::I64;
           I64[Hp] = 1 - _s82bl::I64;
           R2 = _s82av::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s82bn_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82bk_entry() //  [R1]
         { info_tbl: [(c843j,
                       label: sat_s82bk_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c843j: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c843k; else goto c843s;
       c843k: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c843s: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82at::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82at::I64, 0)) goto c843q; else goto c843i;
       c843i: // global
           if (%MO_S_Gt_W64(_s82at::I64, 2)) goto c843q; else goto c843r;
       c843q: // global
           R2 = _s82at::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c843r: // global
           R1 = I64[(_s82at::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82bC_entry() //  [R1]
         { info_tbl: [(c843G,
                       label: sat_s82bC_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c843G: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c843H; else goto c843P;
       c843H: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c843P: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82at::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82at::I64, 0)) goto c843N; else goto c843F;
       c843F: // global
           if (%MO_S_Gt_W64(_s82at::I64, 2)) goto c843N; else goto c843O;
       c843N: // global
           R2 = _s82at::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c843O: // global
           R1 = I64[(_s82at::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82bQ_entry() //  [R1]
         { info_tbl: [(c844i,
                       label: sat_s82bQ_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c844i: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c844j; else goto c844k;
       c844j: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c844k: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s82bJ_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82bO_entry() //  [R1]
         { info_tbl: [(c844u,
                       label: sat_s82bO_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c844u: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c844v; else goto c844D;
       c844v: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c844D: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82bK::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82bK::I64, 0)) goto c844B; else goto c844t;
       c844t: // global
           if (%MO_S_Gt_W64(_s82bK::I64, 2)) goto c844B; else goto c844C;
       c844B: // global
           R2 = _s82bK::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c844C: // global
           R1 = I64[(_s82bK::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82bT_entry() //  [R1]
         { info_tbl: [(c844O,
                       label: sat_s82bT_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c844O: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c844P; else goto c844X;
       c844P: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c844X: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82bK::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82bK::I64, 0)) goto c844V; else goto c844N;
       c844N: // global
           if (%MO_S_Gt_W64(_s82bK::I64, 2)) goto c844V; else goto c844W;
       c844V: // global
           R2 = _s82bK::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c844W: // global
           R1 = I64[(_s82bK::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_up_s82bJ_entry() //  [R1, R2]
         { info_tbl: [(c8451,
                       label: go_up_s82bJ_info
                       rep:HeapRep 2 nonptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c8451: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c8455; else goto c8454;
       c8455: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8454: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c844Z; else goto c8450;
       c844Z: // global
           _s82bH::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s82bQ_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s82bH::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s82bO_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8450: // global
           I64[Hp - 80] = sat_s82bT_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c8457::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c8457::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s82bU_entry() //  [R1]
         { info_tbl: [(c8458,
                       label: sat_s82bU_info
                       rep:HeapRep 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c8458: // global
           _s82bU::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c8459; else goto c845a;
       c845a: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c845c; else goto c845b;
       c845c: // global
           HpAlloc = 24;
           goto c8459;
       c8459: // global
           R1 = _s82bU::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c845b: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s82bU::P64;
           _s82av::I64 = I64[_s82bU::P64 + 24];
           _s82bH::I64 = _s82av::I64 - I64[_s82bU::P64 + 16];
           I64[Hp - 16] = go_up_s82bJ_info;
           I64[Hp - 8] = _s82bH::I64;
           I64[Hp] = 1 - _s82bH::I64;
           R2 = _s82av::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s82bJ_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82bG_entry() //  [R1]
         { info_tbl: [(c845m,
                       label: sat_s82bG_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c845m: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c845n; else goto c845v;
       c845n: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c845v: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82at::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82at::I64, 0)) goto c845t; else goto c845l;
       c845l: // global
           if (%MO_S_Gt_W64(_s82at::I64, 2)) goto c845t; else goto c845u;
       c845t: // global
           R2 = _s82at::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c845u: // global
           R1 = I64[(_s82at::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82bY_entry() //  [R1]
         { info_tbl: [(c845J,
                       label: sat_s82bY_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c845J: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c845K; else goto c845S;
       c845K: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c845S: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82at::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82at::I64, 0)) goto c845Q; else goto c845I;
       c845I: // global
           if (%MO_S_Gt_W64(_s82at::I64, 2)) goto c845Q; else goto c845R;
       c845Q: // global
           R2 = _s82at::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c845R: // global
           R1 = I64[(_s82at::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82cd_entry() //  [R1]
         { info_tbl: [(c846p,
                       label: sat_s82cd_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c846p: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c846q; else goto c846r;
       c846q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c846r: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s82c6_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82cb_entry() //  [R1]
         { info_tbl: [(c846B,
                       label: sat_s82cb_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c846B: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c846C; else goto c846K;
       c846C: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c846K: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82c7::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82c7::I64, 0)) goto c846I; else goto c846A;
       c846A: // global
           if (%MO_S_Gt_W64(_s82c7::I64, 2)) goto c846I; else goto c846J;
       c846I: // global
           R2 = _s82c7::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c846J: // global
           R1 = I64[(_s82c7::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82cg_entry() //  [R1]
         { info_tbl: [(c846V,
                       label: sat_s82cg_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c846V: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c846W; else goto c8474;
       c846W: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8474: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82c7::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82c7::I64, 0)) goto c8472; else goto c846U;
       c846U: // global
           if (%MO_S_Gt_W64(_s82c7::I64, 2)) goto c8472; else goto c8473;
       c8472: // global
           R2 = _s82c7::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c8473: // global
           R1 = I64[(_s82c7::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_dn_s82c6_entry() //  [R1, R2]
         { info_tbl: [(c8478,
                       label: go_dn_s82c6_info
                       rep:HeapRep 2 nonptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c8478: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c847c; else goto c847b;
       c847c: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c847b: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c8476; else goto c8477;
       c8476: // global
           _s82c4::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s82cd_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s82c4::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s82cb_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8477: // global
           I64[Hp - 80] = sat_s82cg_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c847e::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c847e::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s82ch_entry() //  [R1]
         { info_tbl: [(c847f,
                       label: sat_s82ch_info
                       rep:HeapRep 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c847f: // global
           _s82ch::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c847g; else goto c847h;
       c847h: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c847j; else goto c847i;
       c847j: // global
           HpAlloc = 24;
           goto c847g;
       c847g: // global
           R1 = _s82ch::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c847i: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s82ch::P64;
           _s82av::I64 = I64[_s82ch::P64 + 24];
           _s82c4::I64 = _s82av::I64 - I64[_s82ch::P64 + 16];
           I64[Hp - 16] = go_dn_s82c6_info;
           I64[Hp - 8] = _s82c4::I64;
           I64[Hp] = 2 - _s82c4::I64;
           R2 = _s82av::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s82c6_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82c3_entry() //  [R1]
         { info_tbl: [(c847t,
                       label: sat_s82c3_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c847t: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c847u; else goto c847C;
       c847u: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c847C: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82at::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82at::I64, 0)) goto c847A; else goto c847s;
       c847s: // global
           if (%MO_S_Gt_W64(_s82at::I64, 2)) goto c847A; else goto c847B;
       c847A: // global
           R2 = _s82at::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c847B: // global
           R1 = I64[(_s82at::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82cl_entry() //  [R1]
         { info_tbl: [(c847Q,
                       label: sat_s82cl_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c847Q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c847R; else goto c847Z;
       c847R: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c847Z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82at::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82at::I64, 0)) goto c847X; else goto c847P;
       c847P: // global
           if (%MO_S_Gt_W64(_s82at::I64, 2)) goto c847X; else goto c847Y;
       c847X: // global
           R2 = _s82at::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c847Y: // global
           R1 = I64[(_s82at::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82cz_entry() //  [R1]
         { info_tbl: [(c848s,
                       label: sat_s82cz_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c848s: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c848t; else goto c848u;
       c848t: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c848u: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s82cs_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82cx_entry() //  [R1]
         { info_tbl: [(c848E,
                       label: sat_s82cx_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c848E: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c848F; else goto c848N;
       c848F: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c848N: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82ct::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82ct::I64, 0)) goto c848L; else goto c848D;
       c848D: // global
           if (%MO_S_Gt_W64(_s82ct::I64, 2)) goto c848L; else goto c848M;
       c848L: // global
           R2 = _s82ct::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c848M: // global
           R1 = I64[(_s82ct::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82cC_entry() //  [R1]
         { info_tbl: [(c848Y,
                       label: sat_s82cC_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c848Y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c848Z; else goto c8497;
       c848Z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8497: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82ct::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82ct::I64, 0)) goto c8495; else goto c848X;
       c848X: // global
           if (%MO_S_Gt_W64(_s82ct::I64, 2)) goto c8495; else goto c8496;
       c8495: // global
           R2 = _s82ct::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c8496: // global
           R1 = I64[(_s82ct::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_up_s82cs_entry() //  [R1, R2]
         { info_tbl: [(c849b,
                       label: go_up_s82cs_info
                       rep:HeapRep 2 nonptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c849b: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c849f; else goto c849e;
       c849f: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c849e: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c8499; else goto c849a;
       c8499: // global
           _s82cq::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s82cz_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s82cq::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s82cx_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c849a: // global
           I64[Hp - 80] = sat_s82cC_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c849h::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c849h::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s82cD_entry() //  [R1]
         { info_tbl: [(c849i,
                       label: sat_s82cD_info
                       rep:HeapRep 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c849i: // global
           _s82cD::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c849j; else goto c849k;
       c849k: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c849m; else goto c849l;
       c849m: // global
           HpAlloc = 24;
           goto c849j;
       c849j: // global
           R1 = _s82cD::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c849l: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s82cD::P64;
           _s82av::I64 = I64[_s82cD::P64 + 24];
           _s82cq::I64 = _s82av::I64 - I64[_s82cD::P64 + 16];
           I64[Hp - 16] = go_up_s82cs_info;
           I64[Hp - 8] = _s82cq::I64;
           I64[Hp] = 2 - _s82cq::I64;
           R2 = _s82av::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s82cs_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82cp_entry() //  [R1]
         { info_tbl: [(c849w,
                       label: sat_s82cp_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c849w: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c849x; else goto c849F;
       c849x: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c849F: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82at::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82at::I64, 0)) goto c849D; else goto c849v;
       c849v: // global
           if (%MO_S_Gt_W64(_s82at::I64, 2)) goto c849D; else goto c849E;
       c849D: // global
           R2 = _s82at::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c849E: // global
           R1 = I64[(_s82at::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82cH_entry() //  [R1]
         { info_tbl: [(c849T,
                       label: sat_s82cH_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c849T: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c849U; else goto c84a2;
       c849U: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c84a2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82at::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82at::I64, 0)) goto c84a0; else goto c849S;
       c849S: // global
           if (%MO_S_Gt_W64(_s82at::I64, 2)) goto c84a0; else goto c84a1;
       c84a0: // global
           R2 = _s82at::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c84a1: // global
           R1 = I64[(_s82at::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.IO.Device.$fEnumSeekMode_$cenumFromThenTo_entry() //  [R2, R3,
                                                            R4]
         { info_tbl: [(c84ab,
                       label: GHC.IO.Device.$fEnumSeekMode_$cenumFromThenTo_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84ab: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c84ac; else goto c84ad;
       c84ac: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fEnumSeekMode_$cenumFromThenTo_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c84ad: // global
           I64[Sp - 24] = block_c84a3_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u84bT; else goto c84a4;
       u84bT: // global
           call _c84a3(R1) args: 0, res: 0, upd: 0;
       c84a4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c84a3() //  [R1]
         { info_tbl: [(c84a3,
                       label: block_c84a3_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84a3: // global
           _s82aq::P64 = P64[Sp + 8];
           _c84aa::P64 = R1 & 7;
           if (_c84aa::P64 < 3) goto u84bQ; else goto c84a9;
       u84bQ: // global
           if (_c84aa::P64 < 2) goto c84a7; else goto c84a8;
       c84a7: // global
           _s82at::I64 = 0;
           goto s82as;
       c84a8: // global
           _s82at::I64 = 1;
           goto s82as;
       c84a9: // global
           _s82at::I64 = 2;
           goto s82as;
       s82as: // global
           I64[Sp] = block_c84ae_info;
           R1 = _s82aq::P64;
           I64[Sp + 8] = _s82at::I64;
           if (R1 & 7 != 0) goto u84bS; else goto c84bp;
       u84bS: // global
           call _c84ae(R1) args: 0, res: 0, upd: 0;
       c84bp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c84ae() //  [R1]
         { info_tbl: [(c84ae,
                       label: block_c84ae_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84ae: // global
           _s82ar::P64 = P64[Sp + 16];
           _c84bN::P64 = R1 & 7;
           if (_c84bN::P64 < 3) goto u84bR; else goto c84bD;
       u84bR: // global
           if (_c84bN::P64 < 2) goto c84bv; else goto c84bz;
       c84bv: // global
           _s82av::I64 = 0;
           goto s82au;
       c84bz: // global
           _s82av::I64 = 1;
           goto s82au;
       c84bD: // global
           _s82av::I64 = 2;
           goto s82au;
       s82au: // global
           I64[Sp] = block_c83Xw_info;
           R1 = _s82ar::P64;
           I64[Sp + 16] = _s82av::I64;
           if (R1 & 7 != 0) goto u84bU; else goto c83Xx;
       u84bU: // global
           call _c83Xw(R1) args: 0, res: 0, upd: 0;
       c83Xx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c83Xw() //  [R1]
         { info_tbl: [(c83Xw,
                       label: block_c83Xw_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c83Xw: // global
           _s82at::I64 = I64[Sp + 8];
           _s82av::I64 = I64[Sp + 16];
           _c84bO::P64 = R1 & 7;
           if (_c84bO::P64 < 3) goto u84bP; else goto c84b2;
       u84bP: // global
           if (_c84bO::P64 < 2) goto c84ai; else goto c84aF;
       c84ai: // global
           Hp = Hp + 80;
           _s82aw::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c84b5; else goto c84ak;
       c84ak: // global
           if (%MO_S_Lt_W64(_s82av::I64,
                            _s82at::I64)) goto c84av; else goto c84aE;
       c84av: // global
           if (%MO_S_Le_W64(0, _s82av::I64)) goto c84ao; else goto c84at;
       c84ao: // global
           I64[Hp - 72] = sat_s82aP_info;
           I64[Hp - 56] = _s82at::I64;
           I64[Hp - 48] = _s82av::I64;
           I64[Hp - 40] = sat_s82aB_info;
           I64[Hp - 24] = _s82at::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c84at: // global
           if (%MO_S_Gt_W64(0, _s82at::I64)) goto c84bm; else goto c84ar;
       c84ar: // global
           I64[Hp - 72] = sat_s82aT_info;
           I64[Hp - 56] = _s82at::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c84ap::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c84ap::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c84aE: // global
           if (%MO_S_Ge_W64(0, _s82av::I64)) goto c84ay; else goto c84aD;
       c84ay: // global
           I64[Hp - 72] = sat_s82bb_info;
           I64[Hp - 56] = _s82at::I64;
           I64[Hp - 48] = _s82av::I64;
           I64[Hp - 40] = sat_s82aX_info;
           I64[Hp - 24] = _s82at::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c84aD: // global
           if (%MO_S_Lt_W64(0, _s82at::I64)) goto c84bm; else goto c84aB;
       c84aB: // global
           I64[Hp - 72] = sat_s82bf_info;
           I64[Hp - 56] = _s82at::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c84az::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c84az::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c84aF: // global
           Hp = Hp + 80;
           _s82aw::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c84b5; else goto c84aH;
       c84aH: // global
           if (%MO_S_Lt_W64(_s82av::I64,
                            _s82at::I64)) goto c84aS; else goto c84b1;
       c84aS: // global
           if (%MO_S_Le_W64(1, _s82av::I64)) goto c84aL; else goto c84aQ;
       c84aL: // global
           I64[Hp - 72] = sat_s82by_info;
           I64[Hp - 56] = _s82at::I64;
           I64[Hp - 48] = _s82av::I64;
           I64[Hp - 40] = sat_s82bk_info;
           I64[Hp - 24] = _s82at::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c84aQ: // global
           if (%MO_S_Gt_W64(1, _s82at::I64)) goto c84bm; else goto c84aO;
       c84aO: // global
           I64[Hp - 72] = sat_s82bC_info;
           I64[Hp - 56] = _s82at::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c84aM::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c84aM::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c84b1: // global
           if (%MO_S_Ge_W64(1, _s82av::I64)) goto c84aV; else goto c84b0;
       c84aV: // global
           I64[Hp - 72] = sat_s82bU_info;
           I64[Hp - 56] = _s82at::I64;
           I64[Hp - 48] = _s82av::I64;
           I64[Hp - 40] = sat_s82bG_info;
           I64[Hp - 24] = _s82at::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c84b0: // global
           if (%MO_S_Lt_W64(1, _s82at::I64)) goto c84bm; else goto c84aY;
       c84aY: // global
           I64[Hp - 72] = sat_s82bY_info;
           I64[Hp - 56] = _s82at::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c84aW::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c84aW::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c84b2: // global
           Hp = Hp + 80;
           _s82aw::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c84b5; else goto c84b4;
       c84b5: // global
           HpAlloc = 80;
           R1 = _s82aw::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c84b4: // global
           if (%MO_S_Lt_W64(_s82av::I64,
                            _s82at::I64)) goto c84bf; else goto c84bo;
       c84bf: // global
           if (%MO_S_Le_W64(2, _s82av::I64)) goto c84b8; else goto c84bd;
       c84b8: // global
           I64[Hp - 72] = sat_s82ch_info;
           I64[Hp - 56] = _s82at::I64;
           I64[Hp - 48] = _s82av::I64;
           I64[Hp - 40] = sat_s82c3_info;
           I64[Hp - 24] = _s82at::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c84bd: // global
           if (%MO_S_Gt_W64(2, _s82at::I64)) goto c84bm; else goto c84bb;
       c84bb: // global
           I64[Hp - 72] = sat_s82cl_info;
           I64[Hp - 56] = _s82at::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c84b9::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c84b9::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c84bo: // global
           if (%MO_S_Ge_W64(2, _s82av::I64)) goto c84bi; else goto c84bn;
       c84bi: // global
           I64[Hp - 72] = sat_s82cD_info;
           I64[Hp - 56] = _s82at::I64;
           I64[Hp - 48] = _s82av::I64;
           I64[Hp - 40] = sat_s82cp_info;
           I64[Hp - 24] = _s82at::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c84bn: // global
           if (%MO_S_Lt_W64(2, _s82at::I64)) goto c84bm; else goto c84bl;
       c84bm: // global
           Hp = Hp - 80;
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c84bl: // global
           I64[Hp - 72] = sat_s82cH_info;
           I64[Hp - 56] = _s82at::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c84bj::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c84bj::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.304903011 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_closure" {
     GHC.IO.Device.$fEnumSeekMode_closure:
         const GHC.Enum.C:Enum_con_info;
         const GHC.IO.Device.$fEnumSeekMode_$csucc_closure+1;
         const GHC.IO.Device.$fEnumSeekMode_$cpred_closure+1;
         const GHC.IO.Device.$fEnumSeekMode_$ctoEnum_closure+1;
         const GHC.IO.Device.$fEnumSeekMode_$cfromEnum_closure+1;
         const GHC.IO.Device.$fEnumSeekMode_$cenumFrom_closure+1;
         const GHC.IO.Device.$fEnumSeekMode_$cenumFromThen_closure+2;
         const GHC.IO.Device.$fEnumSeekMode_$cenumFromTo_closure+2;
         const GHC.IO.Device.$fEnumSeekMode_$cenumFromThenTo_closure+3;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.305922996 UTC

[section ""data" . GHC.IO.Device.$trModule3_closure" {
     GHC.IO.Device.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.306819333 UTC

[section ""data" . GHC.IO.Device.$trModule1_closure" {
     GHC.IO.Device.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.307643822 UTC

[section ""data" . GHC.IO.Device.$trModule_closure" {
     GHC.IO.Device.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.IO.Device.$trModule3_closure+1;
         const GHC.IO.Device.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.308521225 UTC

[section ""data" . $krep_r81ZU_closure" {
     $krep_r81ZU_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Word.$tcWord8_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.309395491 UTC

[section ""data" . $krep1_r81ZV_closure" {
     $krep1_r81ZV_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Integer.Type.$tcInteger_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.312830593 UTC

[section ""data" . $krep2_r81ZW_closure" {
     $krep2_r81ZW_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc()_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.313432059 UTC

[section ""data" . $krep3_r81ZX_closure" {
     $krep3_r81ZX_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.313963759 UTC

[section ""data" . $krep4_r81ZY_closure" {
     $krep4_r81ZY_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcBool_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.314510589 UTC

[section ""data" . $krep5_r81ZZ_closure" {
     $krep5_r81ZZ_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcConstraint_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.315090715 UTC

[section ""data" . $krep6_r8200_closure" {
     $krep6_r8200_closure:
         const :_con_info;
         const $krep3_r81ZX_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.315637479 UTC

[section ""data" . $krep7_r8201_closure" {
     $krep7_r8201_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep6_r8200_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.316235712 UTC

[section ""data" . $krep8_r8202_closure" {
     $krep8_r8202_closure:
         const :_con_info;
         const $krep1_r81ZV_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.316738801 UTC

[section ""data" . $krep9_r8203_closure" {
     $krep9_r8203_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep8_r8202_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.317302955 UTC

[section ""data" . $krep10_r8204_closure" {
     $krep10_r8204_closure:
         const :_con_info;
         const $krep2_r81ZW_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.317873766 UTC

[section ""data" . $krep11_r8205_closure" {
     $krep11_r8205_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep10_r8204_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.318465752 UTC

[section ""data" . $krep12_r8206_closure" {
     $krep12_r8206_closure:
         const :_con_info;
         const $krep4_r81ZY_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.319037726 UTC

[section ""data" . $krep13_r8207_closure" {
     $krep13_r8207_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep12_r8206_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.319617127 UTC

[section ""data" . $krep14_r8208_closure" {
     $krep14_r8208_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Base.$tcMaybe_closure;
         const $krep6_r8200_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.320202176 UTC

[section ""data" . $krep15_r8209_closure" {
     $krep15_r8209_closure:
         const :_con_info;
         const $krep14_r8208_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.320729735 UTC

[section ""data" . $krep16_r820a_closure" {
     $krep16_r820a_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep15_r8209_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.321305644 UTC

[section ""data" . $krep17_r820b_closure" {
     $krep17_r820b_closure:
         const :_con_info;
         const $krep_r81ZU_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.321882665 UTC

[section ""data" . $krep18_r820c_closure" {
     $krep18_r820c_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Ptr.$tcPtr_closure;
         const $krep17_r820b_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.32245256 UTC

[section ""data" . $krep19_r820d_closure" {
     $krep19_r820d_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r81ZX_closure+1;
         const $krep11_r8205_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.322999117 UTC

[section ""data" . $krep20_r820e_closure" {
     $krep20_r820e_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r81ZX_closure+1;
         const $krep7_r8201_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.323585374 UTC

[section ""data" . $krep21_r820f_closure" {
     $krep21_r820f_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r81ZX_closure+1;
         const $krep13_r8207_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.32415029 UTC

[section ""data" . $krep22_r820g_closure" {
     $krep22_r820g_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r81ZX_closure+1;
         const $krep16_r820a_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.324705713 UTC

[section ""data" . $krep23_r820h_closure" {
     $krep23_r820h_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_r81ZY_closure+1;
         const $krep11_r8205_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.325306551 UTC

[section ""data" . $krep24_r820i_closure" {
     $krep24_r820i_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_r81ZY_closure+1;
         const $krep21_r820f_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.325892302 UTC

[section ""data" . $krep25_r820j_closure" {
     $krep25_r820j_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r81ZV_closure+1;
         const $krep11_r8205_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.326433363 UTC

[section ""data" . $krep26_r820k_closure" {
     $krep26_r820k_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep18_r820c_closure+1;
         const $krep19_r820d_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.326975278 UTC

[section ""data" . $krep27_r820l_closure" {
     $krep27_r820l_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep18_r820c_closure+1;
         const $krep20_r820e_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.327536715 UTC

[section ""data" . $krep28_r820m_closure" {
     $krep28_r820m_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep18_r820c_closure+1;
         const $krep22_r820g_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.328099518 UTC

[section ""data" . GHC.IO.Device.$tcIODevice1_closure" {
     GHC.IO.Device.$tcIODevice1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Types.krep$*_closure;
         const $krep5_r81ZZ_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.328658078 UTC

[section ""data" . $krep29_r820n_closure" {
     $krep29_r820n_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.329158447 UTC

[section ""data" . $krep30_r820o_closure" {
     $krep30_r820o_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep28_r820m_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.329774618 UTC

[section ""data" . $krep31_r820p_closure" {
     $krep31_r820p_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep27_r820l_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.330283857 UTC

[section ""data" . $krep32_r820q_closure" {
     $krep32_r820q_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep26_r820k_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.330861231 UTC

[section ""data" . $krep33_r820r_closure" {
     $krep33_r820r_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep25_r820j_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.331456154 UTC

[section ""data" . $krep34_r820s_closure" {
     $krep34_r820s_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep24_r820i_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.33197601 UTC

[section ""data" . $krep35_r820t_closure" {
     $krep35_r820t_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep23_r820h_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.332548469 UTC

[section ""data" . $krep36_r820u_closure" {
     $krep36_r820u_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep11_r8205_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.333111987 UTC

[section ""data" . $krep37_r820v_closure" {
     $krep37_r820v_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep13_r8207_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.333790671 UTC

[section ""data" . $krep38_r820w_closure" {
     $krep38_r820w_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep9_r8203_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.334337614 UTC

[section ""data" . $krep39_r820x_closure" {
     $krep39_r820x_closure:
         const :_con_info;
         const $krep29_r820n_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.334902948 UTC

[section ""data" . $krep40_r820y_closure" {
     $krep40_r820y_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep39_r820x_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.335441856 UTC

[section ""data" . $krep41_r820z_closure" {
     $krep41_r820z_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep40_r820y_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.335958449 UTC

[section ""data" . $krep42_r820A_closure" {
     $krep42_r820A_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep41_r820z_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.337912797 UTC

[section ""cstring" . GHC.IO.Device.$tcRawIO2_bytes" {
     GHC.IO.Device.$tcRawIO2_bytes:
         I8[] [82,97,119,73,79]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.338486306 UTC

[section ""data" . GHC.IO.Device.$tcRawIO1_closure" {
     GHC.IO.Device.$tcRawIO1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tcRawIO2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.339066335 UTC

[section ""data" . GHC.IO.Device.$tcRawIO_closure" {
     GHC.IO.Device.$tcRawIO_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tcRawIO1_closure+1;
         const GHC.IO.Device.$tcIODevice1_closure+4;
         const 15458836890887680490;
         const 11407217875184880147;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.339608833 UTC

[section ""data" . $krep43_r820B_closure" {
     $krep43_r820B_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Device.$tcRawIO_closure+1;
         const $krep39_r820x_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.340187305 UTC

[section ""data" . $krep44_r820C_closure" {
     $krep44_r820C_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep31_r820p_closure+4;
         const $krep43_r820B_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.340767071 UTC

[section ""data" . $krep45_r820D_closure" {
     $krep45_r820D_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep32_r820q_closure+4;
         const $krep44_r820C_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.341960401 UTC

[section ""data" . $krep46_r820E_closure" {
     $krep46_r820E_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep30_r820o_closure+4;
         const $krep45_r820D_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.342556905 UTC

[section ""data" . GHC.IO.Device.$tc'C:RawIO1_closure" {
     GHC.IO.Device.$tc'C:RawIO1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep31_r820p_closure+4;
         const $krep46_r820E_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.343110769 UTC

[section ""cstring" . GHC.IO.Device.$tc'C:RawIO3_bytes" {
     GHC.IO.Device.$tc'C:RawIO3_bytes:
         I8[] [39,67,58,82,97,119,73,79]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.343643958 UTC

[section ""data" . GHC.IO.Device.$tc'C:RawIO2_closure" {
     GHC.IO.Device.$tc'C:RawIO2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tc'C:RawIO3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.344180038 UTC

[section ""data" . GHC.IO.Device.$tc'C:RawIO_closure" {
     GHC.IO.Device.$tc'C:RawIO_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tc'C:RawIO2_closure+1;
         const GHC.IO.Device.$tc'C:RawIO1_closure+4;
         const 6403037956050298954;
         const 14520964482680400738;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.344793041 UTC

[section ""cstring" . GHC.IO.Device.$tcIODeviceType2_bytes" {
     GHC.IO.Device.$tcIODeviceType2_bytes:
         I8[] [73,79,68,101,118,105,99,101,84,121,112,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.345334382 UTC

[section ""data" . GHC.IO.Device.$tcIODeviceType1_closure" {
     GHC.IO.Device.$tcIODeviceType1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tcIODeviceType2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.345907133 UTC

[section ""data" . GHC.IO.Device.$tcIODeviceType_closure" {
     GHC.IO.Device.$tcIODeviceType_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tcIODeviceType1_closure+1;
         const GHC.Types.krep$*_closure;
         const 4175968526489202383;
         const 17718566430225243048;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.346486 UTC

[section ""data" . GHC.IO.Device.$tc'Directory1_closure" {
     GHC.IO.Device.$tc'Directory1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Device.$tcIODeviceType_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.347017823 UTC

[section ""cstring" . GHC.IO.Device.$tc'Directory3_bytes" {
     GHC.IO.Device.$tc'Directory3_bytes:
         I8[] [39,68,105,114,101,99,116,111,114,121]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.347572468 UTC

[section ""data" . GHC.IO.Device.$tc'Directory2_closure" {
     GHC.IO.Device.$tc'Directory2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tc'Directory3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.348116255 UTC

[section ""data" . GHC.IO.Device.$tc'Directory_closure" {
     GHC.IO.Device.$tc'Directory_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tc'Directory2_closure+1;
         const GHC.IO.Device.$tc'Directory1_closure+1;
         const 12008838926528382233;
         const 639950492613404225;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.348696151 UTC

[section ""cstring" . GHC.IO.Device.$tc'Stream2_bytes" {
     GHC.IO.Device.$tc'Stream2_bytes:
         I8[] [39,83,116,114,101,97,109]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.349270352 UTC

[section ""data" . GHC.IO.Device.$tc'Stream1_closure" {
     GHC.IO.Device.$tc'Stream1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tc'Stream2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.349839642 UTC

[section ""data" . GHC.IO.Device.$tc'Stream_closure" {
     GHC.IO.Device.$tc'Stream_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tc'Stream1_closure+1;
         const GHC.IO.Device.$tc'Directory1_closure+1;
         const 39573928359804366;
         const 741010449601335383;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.350420111 UTC

[section ""cstring" . GHC.IO.Device.$tc'RegularFile2_bytes" {
     GHC.IO.Device.$tc'RegularFile2_bytes:
         I8[] [39,82,101,103,117,108,97,114,70,105,108,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.350967092 UTC

[section ""data" . GHC.IO.Device.$tc'RegularFile1_closure" {
     GHC.IO.Device.$tc'RegularFile1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tc'RegularFile2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.351535768 UTC

[section ""data" . GHC.IO.Device.$tc'RegularFile_closure" {
     GHC.IO.Device.$tc'RegularFile_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tc'RegularFile1_closure+1;
         const GHC.IO.Device.$tc'Directory1_closure+1;
         const 2184574052715259025;
         const 14349593064521146856;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.352091281 UTC

[section ""cstring" . GHC.IO.Device.$tc'RawDevice2_bytes" {
     GHC.IO.Device.$tc'RawDevice2_bytes:
         I8[] [39,82,97,119,68,101,118,105,99,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.352627535 UTC

[section ""data" . GHC.IO.Device.$tc'RawDevice1_closure" {
     GHC.IO.Device.$tc'RawDevice1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tc'RawDevice2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.353177476 UTC

[section ""data" . GHC.IO.Device.$tc'RawDevice_closure" {
     GHC.IO.Device.$tc'RawDevice_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tc'RawDevice1_closure+1;
         const GHC.IO.Device.$tc'Directory1_closure+1;
         const 13599710032796319976;
         const 8789152980205417013;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.353833571 UTC

[section ""data" . $krep47_r820F_closure" {
     $krep47_r820F_closure:
         const :_con_info;
         const GHC.IO.Device.$tc'Directory1_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.354449381 UTC

[section ""data" . $krep48_r820G_closure" {
     $krep48_r820G_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep47_r820F_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.355043032 UTC

[section ""data" . $krep49_r820H_closure" {
     $krep49_r820H_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep48_r820G_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.355636576 UTC

[section ""cstring" . GHC.IO.Device.$tcSeekMode2_bytes" {
     GHC.IO.Device.$tcSeekMode2_bytes:
         I8[] [83,101,101,107,77,111,100,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.356198049 UTC

[section ""data" . GHC.IO.Device.$tcSeekMode1_closure" {
     GHC.IO.Device.$tcSeekMode1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tcSeekMode2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.356785957 UTC

[section ""data" . GHC.IO.Device.$tcSeekMode_closure" {
     GHC.IO.Device.$tcSeekMode_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tcSeekMode1_closure+1;
         const GHC.Types.krep$*_closure;
         const 17698211299654630015;
         const 5588778824401988676;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.357666076 UTC

[section ""data" . GHC.IO.Device.$tc'AbsoluteSeek1_closure" {
     GHC.IO.Device.$tc'AbsoluteSeek1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Device.$tcSeekMode_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.358201395 UTC

[section ""cstring" . GHC.IO.Device.$tc'AbsoluteSeek3_bytes" {
     GHC.IO.Device.$tc'AbsoluteSeek3_bytes:
         I8[] [39,65,98,115,111,108,117,116,101,83,101,101,107]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.358713501 UTC

[section ""data" . GHC.IO.Device.$tc'AbsoluteSeek2_closure" {
     GHC.IO.Device.$tc'AbsoluteSeek2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tc'AbsoluteSeek3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.359272547 UTC

[section ""data" . GHC.IO.Device.$tc'AbsoluteSeek_closure" {
     GHC.IO.Device.$tc'AbsoluteSeek_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tc'AbsoluteSeek2_closure+1;
         const GHC.IO.Device.$tc'AbsoluteSeek1_closure+1;
         const 5610789579148926753;
         const 3433733041722086784;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.35989803 UTC

[section ""cstring" . GHC.IO.Device.$tc'RelativeSeek2_bytes" {
     GHC.IO.Device.$tc'RelativeSeek2_bytes:
         I8[] [39,82,101,108,97,116,105,118,101,83,101,101,107]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.360420029 UTC

[section ""data" . GHC.IO.Device.$tc'RelativeSeek1_closure" {
     GHC.IO.Device.$tc'RelativeSeek1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tc'RelativeSeek2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.361009771 UTC

[section ""data" . GHC.IO.Device.$tc'RelativeSeek_closure" {
     GHC.IO.Device.$tc'RelativeSeek_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tc'RelativeSeek1_closure+1;
         const GHC.IO.Device.$tc'AbsoluteSeek1_closure+1;
         const 15906895381304752726;
         const 1738065871578000433;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.361655589 UTC

[section ""cstring" . GHC.IO.Device.$tc'SeekFromEnd2_bytes" {
     GHC.IO.Device.$tc'SeekFromEnd2_bytes:
         I8[] [39,83,101,101,107,70,114,111,109,69,110,100]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.362187745 UTC

[section ""data" . GHC.IO.Device.$tc'SeekFromEnd1_closure" {
     GHC.IO.Device.$tc'SeekFromEnd1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tc'SeekFromEnd2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.36273895 UTC

[section ""data" . GHC.IO.Device.$tc'SeekFromEnd_closure" {
     GHC.IO.Device.$tc'SeekFromEnd_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tc'SeekFromEnd1_closure+1;
         const GHC.IO.Device.$tc'AbsoluteSeek1_closure+1;
         const 16344961357916628519;
         const 5039033320700315004;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.363936835 UTC

[section ""data" . $krep50_r820I_closure" {
     $krep50_r820I_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.IO.Device.$tc'AbsoluteSeek1_closure+1;
         const $krep25_r820j_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.364520399 UTC

[section ""data" . $krep51_r820J_closure" {
     $krep51_r820J_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep50_r820I_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.365104064 UTC

[section ""cstring" . GHC.IO.Device.$tcIODevice3_bytes" {
     GHC.IO.Device.$tcIODevice3_bytes:
         I8[] [73,79,68,101,118,105,99,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.365656105 UTC

[section ""data" . GHC.IO.Device.$tcIODevice2_closure" {
     GHC.IO.Device.$tcIODevice2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tcIODevice3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.36623045 UTC

[section ""data" . GHC.IO.Device.$tcIODevice_closure" {
     GHC.IO.Device.$tcIODevice_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tcIODevice2_closure+1;
         const GHC.IO.Device.$tcIODevice1_closure+4;
         const 4764642859795697036;
         const 7163668738257247953;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.366841162 UTC

[section ""data" . $krep52_r820K_closure" {
     $krep52_r820K_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Device.$tcIODevice_closure+1;
         const $krep39_r820x_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.367440177 UTC

[section ""data" . $krep53_r820L_closure" {
     $krep53_r820L_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep42_r820A_closure+4;
         const $krep52_r820K_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.368040702 UTC

[section ""data" . $krep54_r820M_closure" {
     $krep54_r820M_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep41_r820z_closure+4;
         const $krep53_r820L_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.368627198 UTC

[section ""data" . $krep55_r820N_closure" {
     $krep55_r820N_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep49_r820H_closure+4;
         const $krep54_r820M_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.369225874 UTC

[section ""data" . $krep56_r820O_closure" {
     $krep56_r820O_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep35_r820t_closure+4;
         const $krep55_r820N_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.37040252 UTC

[section ""data" . $krep57_r820P_closure" {
     $krep57_r820P_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep37_r820v_closure+4;
         const $krep56_r820O_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.370912433 UTC

[section ""data" . $krep58_r820Q_closure" {
     $krep58_r820Q_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep35_r820t_closure+4;
         const $krep57_r820P_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.37147688 UTC

[section ""data" . $krep59_r820R_closure" {
     $krep59_r820R_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep33_r820r_closure+4;
         const $krep58_r820Q_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.372012486 UTC

[section ""data" . $krep60_r820S_closure" {
     $krep60_r820S_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep38_r820w_closure+4;
         const $krep59_r820R_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.372579601 UTC

[section ""data" . $krep61_r820T_closure" {
     $krep61_r820T_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep38_r820w_closure+4;
         const $krep60_r820S_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.373151428 UTC

[section ""data" . $krep62_r820U_closure" {
     $krep62_r820U_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep51_r820J_closure+4;
         const $krep61_r820T_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.373732429 UTC

[section ""data" . $krep63_r820V_closure" {
     $krep63_r820V_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep37_r820v_closure+4;
         const $krep62_r820U_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.37428431 UTC

[section ""data" . $krep64_r820W_closure" {
     $krep64_r820W_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep37_r820v_closure+4;
         const $krep63_r820V_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.374842445 UTC

[section ""data" . $krep65_r820X_closure" {
     $krep65_r820X_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep36_r820u_closure+4;
         const $krep64_r820W_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.375369483 UTC

[section ""data" . GHC.IO.Device.$tc'C:IODevice1_closure" {
     GHC.IO.Device.$tc'C:IODevice1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep34_r820s_closure+4;
         const $krep65_r820X_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.375907155 UTC

[section ""cstring" . GHC.IO.Device.$tc'C:IODevice3_bytes" {
     GHC.IO.Device.$tc'C:IODevice3_bytes:
         I8[] [39,67,58,73,79,68,101,118,105,99,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.376445219 UTC

[section ""data" . GHC.IO.Device.$tc'C:IODevice2_closure" {
     GHC.IO.Device.$tc'C:IODevice2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tc'C:IODevice3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.377011075 UTC

[section ""data" . GHC.IO.Device.$tc'C:IODevice_closure" {
     GHC.IO.Device.$tc'C:IODevice_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tc'C:IODevice2_closure+1;
         const GHC.IO.Device.$tc'C:IODevice1_closure+4;
         const 15352604720075066134;
         const 14084350618605203122;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.37763408 UTC

[section ""data" . GHC.IO.Device.AbsoluteSeek_closure" {
     GHC.IO.Device.AbsoluteSeek_closure:
         const GHC.IO.Device.AbsoluteSeek_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.378179073 UTC

[section ""data" . GHC.IO.Device.RelativeSeek_closure" {
     GHC.IO.Device.RelativeSeek_closure:
         const GHC.IO.Device.RelativeSeek_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.378759733 UTC

[section ""data" . GHC.IO.Device.SeekFromEnd_closure" {
     GHC.IO.Device.SeekFromEnd_closure:
         const GHC.IO.Device.SeekFromEnd_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.379335433 UTC

[section ""data" . GHC.IO.Device.Directory_closure" {
     GHC.IO.Device.Directory_closure:
         const GHC.IO.Device.Directory_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.379893404 UTC

[section ""data" . GHC.IO.Device.Stream_closure" {
     GHC.IO.Device.Stream_closure:
         const GHC.IO.Device.Stream_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.380430073 UTC

[section ""data" . GHC.IO.Device.RegularFile_closure" {
     GHC.IO.Device.RegularFile_closure:
         const GHC.IO.Device.RegularFile_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.380972258 UTC

[section ""data" . GHC.IO.Device.RawDevice_closure" {
     GHC.IO.Device.RawDevice_closure:
         const GHC.IO.Device.RawDevice_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.382146997 UTC

[section ""data" . GHC.IO.Device.C:IODevice_closure" {
     GHC.IO.Device.C:IODevice_closure:
         const GHC.IO.Device.C:IODevice_info;
 },
 GHC.IO.Device.C:IODevice_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84bW: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.IO.Device.C:IODevice_entry(R6,
                                               R5,
                                               R4,
                                               R3,
                                               R2,
                                               R1) args: 80, res: 0, upd: 8;
     }
 },
 GHC.IO.Device.C:IODevice_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c84c1,
                       label: GHC.IO.Device.C:IODevice_info
                       rep:HeapRep static {
                             Fun {arity: 14
                                  fun_type: ArgGen [False, False, False, False, False, False, False,
                                                    False, False, False, False, False, False,
                                                    False]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84c1: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto c84c5; else goto c84c4;
       c84c5: // global
           HpAlloc = 120;
           R1 = GHC.IO.Device.C:IODevice_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 120, res: 0, upd: 8;
       c84c4: // global
           I64[Hp - 112] = GHC.IO.Device.C:IODevice_con_info;
           P64[Hp - 104] = R2;
           P64[Hp - 96] = R3;
           P64[Hp - 88] = R4;
           P64[Hp - 80] = R5;
           P64[Hp - 72] = R6;
           P64[Hp - 64] = P64[Sp];
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = P64[Sp + 16];
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = P64[Sp + 40];
           P64[Hp - 16] = P64[Sp + 48];
           P64[Hp - 8] = P64[Sp + 56];
           P64[Hp] = P64[Sp + 64];
           R1 = Hp - 111;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.383695172 UTC

[section ""data" . GHC.IO.Device.C:RawIO_closure" {
     GHC.IO.Device.C:RawIO_closure:
         const GHC.IO.Device.C:RawIO_info;
 },
 GHC.IO.Device.C:RawIO_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c84cb,
                       label: GHC.IO.Device.C:RawIO_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84cb: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c84cf; else goto c84ce;
       c84cf: // global
           HpAlloc = 40;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.C:RawIO_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c84ce: // global
           I64[Hp - 32] = GHC.IO.Device.C:RawIO_con_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.384550259 UTC

[section ""relreadonly" . GHC.IO.Device.SeekMode_closure_tbl" {
     GHC.IO.Device.SeekMode_closure_tbl:
         const GHC.IO.Device.AbsoluteSeek_closure+1;
         const GHC.IO.Device.RelativeSeek_closure+2;
         const GHC.IO.Device.SeekFromEnd_closure+3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.385176937 UTC

[GHC.IO.Device.AbsoluteSeek_con_entry() //  [R1]
         { info_tbl: [(c84cg,
                       label: GHC.IO.Device.AbsoluteSeek_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,73,79,46,68,101,118,105,99,101,46,65,98,115,111,108,117,116,101,83,101,101,107]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84cg: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.385918258 UTC

[GHC.IO.Device.RelativeSeek_con_entry() //  [R1]
         { info_tbl: [(c84ci,
                       label: GHC.IO.Device.RelativeSeek_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,71,72,67,46,73,79,46,68,101,118,105,99,101,46,82,101,108,97,116,105,118,101,83,101,101,107]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84ci: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.386661006 UTC

[GHC.IO.Device.SeekFromEnd_con_entry() //  [R1]
         { info_tbl: [(c84ck,
                       label: GHC.IO.Device.SeekFromEnd_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 2
                                  descr:[98,97,115,101,58,71,72,67,46,73,79,46,68,101,118,105,99,101,46,83,101,101,107,70,114,111,109,69,110,100]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84ck: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.387343401 UTC

[section ""relreadonly" . GHC.IO.Device.IODeviceType_closure_tbl" {
     GHC.IO.Device.IODeviceType_closure_tbl:
         const GHC.IO.Device.Directory_closure+1;
         const GHC.IO.Device.Stream_closure+2;
         const GHC.IO.Device.RegularFile_closure+3;
         const GHC.IO.Device.RawDevice_closure+4;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.387987394 UTC

[GHC.IO.Device.Directory_con_entry() //  [R1]
         { info_tbl: [(c84cm,
                       label: GHC.IO.Device.Directory_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,73,79,46,68,101,118,105,99,101,46,68,105,114,101,99,116,111,114,121]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84cm: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.388745936 UTC

[GHC.IO.Device.Stream_con_entry() //  [R1]
         { info_tbl: [(c84co,
                       label: GHC.IO.Device.Stream_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,71,72,67,46,73,79,46,68,101,118,105,99,101,46,83,116,114,101,97,109]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84co: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.38943257 UTC

[GHC.IO.Device.RegularFile_con_entry() //  [R1]
         { info_tbl: [(c84cq,
                       label: GHC.IO.Device.RegularFile_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 2
                                  descr:[98,97,115,101,58,71,72,67,46,73,79,46,68,101,118,105,99,101,46,82,101,103,117,108,97,114,70,105,108,101]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84cq: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.390129041 UTC

[GHC.IO.Device.RawDevice_con_entry() //  [R1]
         { info_tbl: [(c84cs,
                       label: GHC.IO.Device.RawDevice_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 3
                                  descr:[98,97,115,101,58,71,72,67,46,73,79,46,68,101,118,105,99,101,46,82,97,119,68,101,118,105,99,101]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84cs: // global
           R1 = R1 + 4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.390898529 UTC

[GHC.IO.Device.C:IODevice_con_entry() //  [R1]
         { info_tbl: [(c84cu,
                       label: GHC.IO.Device.C:IODevice_con_info
                       rep:HeapRep 14 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,73,79,46,68,101,118,105,99,101,46,67,58,73,79,68,101,118,105,99,101]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84cu: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.391617736 UTC

[GHC.IO.Device.C:RawIO_con_entry() //  [R1]
         { info_tbl: [(c84cw,
                       label: GHC.IO.Device.C:RawIO_con_info
                       rep:HeapRep 4 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,73,79,46,68,101,118,105,99,101,46,67,58,82,97,119,73,79]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84cw: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.393026164 UTC

[section ""relreadonly" . S82hF_srt" {
     S82hF_srt:
         const GHC.IO.Device.$fReadSeekMode7_closure;
         const GHC.IO.Device.$fReadSeekMode11_closure;
         const GHC.IO.Device.$fReadSeekMode15_closure;
         const GHC.IO.Device.$w$cshowsPrec_closure;
         const GHC.IO.Device.$fShowSeekMode_$cshow_closure;
         const GHC.Read.choose2_closure;
         const GHC.IO.Device.$fReadSeekMode_sps_closure;
         const GHC.Read.list3_closure;
         const GHC.IO.Device.$fReadSeekMode2_closure;
         const GHC.IO.Device.$fReadSeekMode_$creadsPrec_closure;
         const GHC.Read.list_closure;
         const GHC.IO.Device.$fReadSeekMode1_closure;
         const GHC.IO.Device.$fReadSeekMode_$creadListPrec_closure;
         const GHC.IO.Device.$fReadSeekMode17_closure;
         const GHC.IO.Exception.unsupportedOperation_closure;
         const GHC.IO.Exception.$fxExceptionIOException_closure;
         const GHC.IO.Device.$dmdup1_closure;
         const $dmseek1_r81Zp_closure;
         const $dmtell1_r81Zq_closure;
         const $dmgetSize1_r81Zr_closure;
         const $dmsetSize1_r81Zs_closure;
         const $dmsetEcho1_r81Zt_closure;
         const $dmgetEcho1_r81Zu_closure;
         const $dmsetRaw1_r81Zv_closure;
         const $dmdup3_r81Zw_closure;
         const $dmdup4_r81Zx_closure;
         const GHC.Arr.hopelessIndexError_closure;
         const GHC.IO.Device.$fIxSeekMode_$cindex_closure;
         const GHC.Err.error_closure;
         const lvl13_r81ZL_closure;
         const GHC.IO.Device.$fEnumSeekMode_$cpred_closure;
         const GHC.IO.Device.$fEnumSeekMode4_closure;
         const GHC.IO.Device.$fEnumSeekMode_$csucc_closure;
         const GHC.IO.Device.$fEnumSeekMode5_closure;
         const lvl18_r81ZQ_closure;
         const lvl19_r81ZR_closure;
         const lvl20_r81ZS_closure;
         const GHC.IO.Device.$wlvl_closure;
         const GHC.IO.Device.$fEnumSeekMode_$ctoEnum_closure;
         const GHC.IO.Device.$w$ctoEnum_closure;
         const GHC.IO.Device.$fEnumSeekMode_$cenumFrom_closure;
         const GHC.IO.Device.$fEnumSeekMode1_closure;
         const GHC.IO.Device.$fEnumSeekMode2_closure;
         const GHC.IO.Device.$fEnumSeekMode3_closure;
         const GHC.IO.Device.$fEnumSeekMode_go2_closure;
         const GHC.IO.Device.$fEnumSeekMode_go1_closure;
         const GHC.IO.Device.$fEnumSeekMode_go_closure;
         const GHC.IO.Device.$fEnumSeekMode_$cenumFromTo_closure;
         const GHC.IO.Device.$fEnumSeekMode_$cenumFromThenTo_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.394550927 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:03:09.395946521 UTC

[section ""data" . GHC.IO.Device.ready_closure" {
     GHC.IO.Device.ready_closure:
         const GHC.IO.Device.ready_info;
 },
 GHC.IO.Device.ready_entry() //  [R2]
         { info_tbl: [(c84cF,
                       label: GHC.IO.Device.ready_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84cF: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c84cG; else goto c84cH;
       c84cG: // global
           R2 = R2;
           R1 = GHC.IO.Device.ready_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c84cH: // global
           I64[Sp - 8] = block_c84cC_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u84cL; else goto c84cD;
       u84cL: // global
           call _c84cC(R1) args: 0, res: 0, upd: 0;
       c84cD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c84cC() //  [R1]
         { info_tbl: [(c84cC,
                       label: block_c84cC_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84cC: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.401307589 UTC

[section ""data" . GHC.IO.Device.close_closure" {
     GHC.IO.Device.close_closure:
         const GHC.IO.Device.close_info;
 },
 GHC.IO.Device.close_entry() //  [R2]
         { info_tbl: [(c84d2,
                       label: GHC.IO.Device.close_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84d2: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c84d3; else goto c84d4;
       c84d3: // global
           R2 = R2;
           R1 = GHC.IO.Device.close_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c84d4: // global
           I64[Sp - 8] = block_c84cZ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u84d8; else goto c84d0;
       u84d8: // global
           call _c84cZ(R1) args: 0, res: 0, upd: 0;
       c84d0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c84cZ() //  [R1]
         { info_tbl: [(c84cZ,
                       label: block_c84cZ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84cZ: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.406554061 UTC

[section ""data" . GHC.IO.Device.isTerminal_closure" {
     GHC.IO.Device.isTerminal_closure:
         const GHC.IO.Device.isTerminal_info;
 },
 GHC.IO.Device.isTerminal_entry() //  [R2]
         { info_tbl: [(c84dp,
                       label: GHC.IO.Device.isTerminal_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84dp: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c84dq; else goto c84dr;
       c84dq: // global
           R2 = R2;
           R1 = GHC.IO.Device.isTerminal_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c84dr: // global
           I64[Sp - 8] = block_c84dm_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u84dv; else goto c84dn;
       u84dv: // global
           call _c84dm(R1) args: 0, res: 0, upd: 0;
       c84dn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c84dm() //  [R1]
         { info_tbl: [(c84dm,
                       label: block_c84dm_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84dm: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.412488085 UTC

[section ""data" . GHC.IO.Device.isSeekable_closure" {
     GHC.IO.Device.isSeekable_closure:
         const GHC.IO.Device.isSeekable_info;
 },
 GHC.IO.Device.isSeekable_entry() //  [R2]
         { info_tbl: [(c84dM,
                       label: GHC.IO.Device.isSeekable_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84dM: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c84dN; else goto c84dO;
       c84dN: // global
           R2 = R2;
           R1 = GHC.IO.Device.isSeekable_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c84dO: // global
           I64[Sp - 8] = block_c84dJ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u84dS; else goto c84dK;
       u84dS: // global
           call _c84dJ(R1) args: 0, res: 0, upd: 0;
       c84dK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c84dJ() //  [R1]
         { info_tbl: [(c84dJ,
                       label: block_c84dJ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84dJ: // global
           R1 = P64[R1 + 31];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.417697844 UTC

[section ""data" . GHC.IO.Device.seek_closure" {
     GHC.IO.Device.seek_closure:
         const GHC.IO.Device.seek_info;
 },
 GHC.IO.Device.seek_entry() //  [R2]
         { info_tbl: [(c84e9,
                       label: GHC.IO.Device.seek_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84e9: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c84ea; else goto c84eb;
       c84ea: // global
           R2 = R2;
           R1 = GHC.IO.Device.seek_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c84eb: // global
           I64[Sp - 8] = block_c84e6_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u84ef; else goto c84e7;
       u84ef: // global
           call _c84e6(R1) args: 0, res: 0, upd: 0;
       c84e7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c84e6() //  [R1]
         { info_tbl: [(c84e6,
                       label: block_c84e6_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84e6: // global
           R1 = P64[R1 + 39];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.423216872 UTC

[section ""data" . GHC.IO.Device.tell_closure" {
     GHC.IO.Device.tell_closure:
         const GHC.IO.Device.tell_info;
 },
 GHC.IO.Device.tell_entry() //  [R2]
         { info_tbl: [(c84ew,
                       label: GHC.IO.Device.tell_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84ew: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c84ex; else goto c84ey;
       c84ex: // global
           R2 = R2;
           R1 = GHC.IO.Device.tell_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c84ey: // global
           I64[Sp - 8] = block_c84et_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u84eC; else goto c84eu;
       u84eC: // global
           call _c84et(R1) args: 0, res: 0, upd: 0;
       c84eu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c84et() //  [R1]
         { info_tbl: [(c84et,
                       label: block_c84et_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84et: // global
           R1 = P64[R1 + 47];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.429233131 UTC

[section ""data" . GHC.IO.Device.getSize_closure" {
     GHC.IO.Device.getSize_closure:
         const GHC.IO.Device.getSize_info;
 },
 GHC.IO.Device.getSize_entry() //  [R2]
         { info_tbl: [(c84eT,
                       label: GHC.IO.Device.getSize_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84eT: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c84eU; else goto c84eV;
       c84eU: // global
           R2 = R2;
           R1 = GHC.IO.Device.getSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c84eV: // global
           I64[Sp - 8] = block_c84eQ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u84eZ; else goto c84eR;
       u84eZ: // global
           call _c84eQ(R1) args: 0, res: 0, upd: 0;
       c84eR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c84eQ() //  [R1]
         { info_tbl: [(c84eQ,
                       label: block_c84eQ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84eQ: // global
           R1 = P64[R1 + 55];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.434412294 UTC

[section ""data" . GHC.IO.Device.setSize_closure" {
     GHC.IO.Device.setSize_closure:
         const GHC.IO.Device.setSize_info;
 },
 GHC.IO.Device.setSize_entry() //  [R2]
         { info_tbl: [(c84fg,
                       label: GHC.IO.Device.setSize_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84fg: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c84fh; else goto c84fi;
       c84fh: // global
           R2 = R2;
           R1 = GHC.IO.Device.setSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c84fi: // global
           I64[Sp - 8] = block_c84fd_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u84fm; else goto c84fe;
       u84fm: // global
           call _c84fd(R1) args: 0, res: 0, upd: 0;
       c84fe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c84fd() //  [R1]
         { info_tbl: [(c84fd,
                       label: block_c84fd_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84fd: // global
           R1 = P64[R1 + 63];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.439611511 UTC

[section ""data" . GHC.IO.Device.setEcho_closure" {
     GHC.IO.Device.setEcho_closure:
         const GHC.IO.Device.setEcho_info;
 },
 GHC.IO.Device.setEcho_entry() //  [R2]
         { info_tbl: [(c84fD,
                       label: GHC.IO.Device.setEcho_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84fD: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c84fE; else goto c84fF;
       c84fE: // global
           R2 = R2;
           R1 = GHC.IO.Device.setEcho_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c84fF: // global
           I64[Sp - 8] = block_c84fA_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u84fJ; else goto c84fB;
       u84fJ: // global
           call _c84fA(R1) args: 0, res: 0, upd: 0;
       c84fB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c84fA() //  [R1]
         { info_tbl: [(c84fA,
                       label: block_c84fA_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84fA: // global
           R1 = P64[R1 + 71];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.444834075 UTC

[section ""data" . GHC.IO.Device.getEcho_closure" {
     GHC.IO.Device.getEcho_closure:
         const GHC.IO.Device.getEcho_info;
 },
 GHC.IO.Device.getEcho_entry() //  [R2]
         { info_tbl: [(c84g0,
                       label: GHC.IO.Device.getEcho_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84g0: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c84g1; else goto c84g2;
       c84g1: // global
           R2 = R2;
           R1 = GHC.IO.Device.getEcho_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c84g2: // global
           I64[Sp - 8] = block_c84fX_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u84g6; else goto c84fY;
       u84g6: // global
           call _c84fX(R1) args: 0, res: 0, upd: 0;
       c84fY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c84fX() //  [R1]
         { info_tbl: [(c84fX,
                       label: block_c84fX_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84fX: // global
           R1 = P64[R1 + 79];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.449981586 UTC

[section ""data" . GHC.IO.Device.setRaw_closure" {
     GHC.IO.Device.setRaw_closure:
         const GHC.IO.Device.setRaw_info;
 },
 GHC.IO.Device.setRaw_entry() //  [R2]
         { info_tbl: [(c84gn,
                       label: GHC.IO.Device.setRaw_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84gn: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c84go; else goto c84gp;
       c84go: // global
           R2 = R2;
           R1 = GHC.IO.Device.setRaw_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c84gp: // global
           I64[Sp - 8] = block_c84gk_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u84gt; else goto c84gl;
       u84gt: // global
           call _c84gk(R1) args: 0, res: 0, upd: 0;
       c84gl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c84gk() //  [R1]
         { info_tbl: [(c84gk,
                       label: block_c84gk_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84gk: // global
           R1 = P64[R1 + 87];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.455584317 UTC

[section ""data" . GHC.IO.Device.devType_closure" {
     GHC.IO.Device.devType_closure:
         const GHC.IO.Device.devType_info;
 },
 GHC.IO.Device.devType_entry() //  [R2]
         { info_tbl: [(c84gK,
                       label: GHC.IO.Device.devType_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84gK: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c84gL; else goto c84gM;
       c84gL: // global
           R2 = R2;
           R1 = GHC.IO.Device.devType_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c84gM: // global
           I64[Sp - 8] = block_c84gH_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u84gQ; else goto c84gI;
       u84gQ: // global
           call _c84gH(R1) args: 0, res: 0, upd: 0;
       c84gI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c84gH() //  [R1]
         { info_tbl: [(c84gH,
                       label: block_c84gH_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84gH: // global
           R1 = P64[R1 + 95];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.461561759 UTC

[section ""data" . GHC.IO.Device.dup_closure" {
     GHC.IO.Device.dup_closure:
         const GHC.IO.Device.dup_info;
 },
 GHC.IO.Device.dup_entry() //  [R2]
         { info_tbl: [(c84h7,
                       label: GHC.IO.Device.dup_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84h7: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c84h8; else goto c84h9;
       c84h8: // global
           R2 = R2;
           R1 = GHC.IO.Device.dup_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c84h9: // global
           I64[Sp - 8] = block_c84h4_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u84hd; else goto c84h5;
       u84hd: // global
           call _c84h4(R1) args: 0, res: 0, upd: 0;
       c84h5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c84h4() //  [R1]
         { info_tbl: [(c84h4,
                       label: block_c84h4_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84h4: // global
           R1 = P64[R1 + 103];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.466706719 UTC

[section ""data" . GHC.IO.Device.dup2_closure" {
     GHC.IO.Device.dup2_closure:
         const GHC.IO.Device.dup2_info;
 },
 GHC.IO.Device.dup2_entry() //  [R2]
         { info_tbl: [(c84hu,
                       label: GHC.IO.Device.dup2_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84hu: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c84hv; else goto c84hw;
       c84hv: // global
           R2 = R2;
           R1 = GHC.IO.Device.dup2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c84hw: // global
           I64[Sp - 8] = block_c84hr_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u84hA; else goto c84hs;
       u84hA: // global
           call _c84hr(R1) args: 0, res: 0, upd: 0;
       c84hs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c84hr() //  [R1]
         { info_tbl: [(c84hr,
                       label: block_c84hr_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84hr: // global
           R1 = P64[R1 + 111];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.471642661 UTC

[section ""data" . GHC.IO.Device.read_closure" {
     GHC.IO.Device.read_closure:
         const GHC.IO.Device.read_info;
 },
 GHC.IO.Device.read_entry() //  [R2]
         { info_tbl: [(c84hR,
                       label: GHC.IO.Device.read_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84hR: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c84hS; else goto c84hT;
       c84hS: // global
           R2 = R2;
           R1 = GHC.IO.Device.read_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c84hT: // global
           I64[Sp - 8] = block_c84hO_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u84hX; else goto c84hP;
       u84hX: // global
           call _c84hO(R1) args: 0, res: 0, upd: 0;
       c84hP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c84hO() //  [R1]
         { info_tbl: [(c84hO,
                       label: block_c84hO_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84hO: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.476737773 UTC

[section ""data" . GHC.IO.Device.readNonBlocking_closure" {
     GHC.IO.Device.readNonBlocking_closure:
         const GHC.IO.Device.readNonBlocking_info;
 },
 GHC.IO.Device.readNonBlocking_entry() //  [R2]
         { info_tbl: [(c84ie,
                       label: GHC.IO.Device.readNonBlocking_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84ie: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c84if; else goto c84ig;
       c84if: // global
           R2 = R2;
           R1 = GHC.IO.Device.readNonBlocking_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c84ig: // global
           I64[Sp - 8] = block_c84ib_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u84ik; else goto c84ic;
       u84ik: // global
           call _c84ib(R1) args: 0, res: 0, upd: 0;
       c84ic: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c84ib() //  [R1]
         { info_tbl: [(c84ib,
                       label: block_c84ib_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84ib: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.481770713 UTC

[section ""data" . GHC.IO.Device.write_closure" {
     GHC.IO.Device.write_closure:
         const GHC.IO.Device.write_info;
 },
 GHC.IO.Device.write_entry() //  [R2]
         { info_tbl: [(c84iB,
                       label: GHC.IO.Device.write_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84iB: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c84iC; else goto c84iD;
       c84iC: // global
           R2 = R2;
           R1 = GHC.IO.Device.write_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c84iD: // global
           I64[Sp - 8] = block_c84iy_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u84iH; else goto c84iz;
       u84iH: // global
           call _c84iy(R1) args: 0, res: 0, upd: 0;
       c84iz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c84iy() //  [R1]
         { info_tbl: [(c84iy,
                       label: block_c84iy_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84iy: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.486883568 UTC

[section ""data" . GHC.IO.Device.writeNonBlocking_closure" {
     GHC.IO.Device.writeNonBlocking_closure:
         const GHC.IO.Device.writeNonBlocking_info;
 },
 GHC.IO.Device.writeNonBlocking_entry() //  [R2]
         { info_tbl: [(c84iY,
                       label: GHC.IO.Device.writeNonBlocking_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84iY: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c84iZ; else goto c84j0;
       c84iZ: // global
           R2 = R2;
           R1 = GHC.IO.Device.writeNonBlocking_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c84j0: // global
           I64[Sp - 8] = block_c84iV_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u84j4; else goto c84iW;
       u84j4: // global
           call _c84iV(R1) args: 0, res: 0, upd: 0;
       c84iW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c84iV() //  [R1]
         { info_tbl: [(c84iV,
                       label: block_c84iV_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84iV: // global
           R1 = P64[R1 + 31];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.493262218 UTC

[section ""cstring" . GHC.IO.Device.$fReadSeekMode16_bytes" {
     GHC.IO.Device.$fReadSeekMode16_bytes:
         I8[] [65,98,115,111,108,117,116,101,83,101,101,107]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.495123655 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode15_closure" {
     GHC.IO.Device.$fReadSeekMode15_closure:
         const GHC.IO.Device.$fReadSeekMode15_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Device.$fReadSeekMode15_entry() //  [R1]
         { info_tbl: [(c84jl,
                       label: GHC.IO.Device.$fReadSeekMode15_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84jl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c84jm; else goto c84jn;
       c84jm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c84jn: // global
           (_c84ji::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c84ji::I64 == 0) goto c84jk; else goto c84jj;
       c84jk: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c84jj: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c84ji::I64;
           R2 = GHC.IO.Device.$fReadSeekMode16_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.498845784 UTC

[section ""cstring" . GHC.IO.Device.$fReadSeekMode12_bytes" {
     GHC.IO.Device.$fReadSeekMode12_bytes:
         I8[] [82,101,108,97,116,105,118,101,83,101,101,107]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.500499473 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode11_closure" {
     GHC.IO.Device.$fReadSeekMode11_closure:
         const GHC.IO.Device.$fReadSeekMode11_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Device.$fReadSeekMode11_entry() //  [R1]
         { info_tbl: [(c84jC,
                       label: GHC.IO.Device.$fReadSeekMode11_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84jC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c84jD; else goto c84jE;
       c84jD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c84jE: // global
           (_c84jz::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c84jz::I64 == 0) goto c84jB; else goto c84jA;
       c84jB: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c84jA: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c84jz::I64;
           R2 = GHC.IO.Device.$fReadSeekMode12_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.506856916 UTC

[section ""cstring" . GHC.IO.Device.$fReadSeekMode8_bytes" {
     GHC.IO.Device.$fReadSeekMode8_bytes:
         I8[] [83,101,101,107,70,114,111,109,69,110,100]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.509061134 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode7_closure" {
     GHC.IO.Device.$fReadSeekMode7_closure:
         const GHC.IO.Device.$fReadSeekMode7_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Device.$fReadSeekMode7_entry() //  [R1]
         { info_tbl: [(c84jT,
                       label: GHC.IO.Device.$fReadSeekMode7_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84jT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c84jU; else goto c84jV;
       c84jU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c84jV: // global
           (_c84jQ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c84jQ::I64 == 0) goto c84jS; else goto c84jR;
       c84jS: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c84jR: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c84jQ::I64;
           R2 = GHC.IO.Device.$fReadSeekMode8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.514245931 UTC

[section ""data" . GHC.IO.Device.$w$cshowsPrec_closure" {
     GHC.IO.Device.$w$cshowsPrec_closure:
         const GHC.IO.Device.$w$cshowsPrec_info;
         const 0;
 },
 GHC.IO.Device.$w$cshowsPrec_entry() //  [R2, R3]
         { info_tbl: [(c84kf,
                       label: GHC.IO.Device.$w$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84kf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c84kg; else goto c84kh;
       c84kg: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$w$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c84kh: // global
           I64[Sp - 16] = block_c84k7_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u84ks; else goto c84k8;
       u84ks: // global
           call _c84k7(R1) args: 0, res: 0, upd: 0;
       c84k8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c84k7() //  [R1]
         { info_tbl: [(c84k7,
                       label: block_c84k7_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84k7: // global
           _s8250::P64 = P64[Sp + 8];
           _c84ke::P64 = R1 & 7;
           if (_c84ke::P64 < 3) goto u84kr; else goto c84kd;
       u84kr: // global
           if (_c84ke::P64 < 2) goto c84kb; else goto c84kc;
       c84kb: // global
           R3 = _s8250::P64;
           R2 = GHC.IO.Device.$fReadSeekMode15_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c84kc: // global
           R3 = _s8250::P64;
           R2 = GHC.IO.Device.$fReadSeekMode11_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c84kd: // global
           R3 = _s8250::P64;
           R2 = GHC.IO.Device.$fReadSeekMode7_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.521785482 UTC

[section ""data" . GHC.IO.Device.$fShowSeekMode_$cshowsPrec_closure" {
     GHC.IO.Device.$fShowSeekMode_$cshowsPrec_closure:
         const GHC.IO.Device.$fShowSeekMode_$cshowsPrec_info;
         const 0;
 },
 GHC.IO.Device.$fShowSeekMode_$cshowsPrec_entry() //  [R3, R4]
         { info_tbl: [(c84kH,
                       label: GHC.IO.Device.$fShowSeekMode_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84kH: // global
           _s8253::P64 = R3;
           R3 = R4;
           R2 = _s8253::P64;
           call GHC.IO.Device.$w$cshowsPrec_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.526109457 UTC

[section ""data" . GHC.IO.Device.$fShowSeekMode_$cshow_closure" {
     GHC.IO.Device.$fShowSeekMode_$cshow_closure:
         const GHC.IO.Device.$fShowSeekMode_$cshow_info;
         const 0;
 },
 GHC.IO.Device.$fShowSeekMode_$cshow_entry() //  [R2]
         { info_tbl: [(c84l0,
                       label: GHC.IO.Device.$fShowSeekMode_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84l0: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c84l1; else goto c84l2;
       c84l1: // global
           R2 = R2;
           R1 = GHC.IO.Device.$fShowSeekMode_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c84l2: // global
           I64[Sp - 8] = block_c84kS_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u84ld; else goto c84kT;
       u84ld: // global
           call _c84kS(R1) args: 0, res: 0, upd: 0;
       c84kT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c84kS() //  [R1]
         { info_tbl: [(c84kS,
                       label: block_c84kS_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84kS: // global
           _c84kZ::P64 = R1 & 7;
           if (_c84kZ::P64 < 3) goto u84lc; else goto c84kY;
       u84lc: // global
           if (_c84kZ::P64 < 2) goto c84kW; else goto c84kX;
       c84kW: // global
           R1 = GHC.IO.Device.$fReadSeekMode15_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c84kX: // global
           R1 = GHC.IO.Device.$fReadSeekMode11_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c84kY: // global
           R1 = GHC.IO.Device.$fReadSeekMode7_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.533713036 UTC

[section ""data" . GHC.IO.Device.$fShowSeekMode_$cshowList_closure" {
     GHC.IO.Device.$fShowSeekMode_$cshowList_closure:
         const GHC.IO.Device.$fShowSeekMode_$cshowList_info;
         const 0;
 },
 GHC.IO.Device.$fShowSeekMode_$cshowList_entry() //  [R2, R3]
         { info_tbl: [(c84lv,
                       label: GHC.IO.Device.$fShowSeekMode_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84lv: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.Device.$w$cshowsPrec_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.537608829 UTC

[section ""data" . GHC.IO.Device.$fShowSeekMode_closure" {
     GHC.IO.Device.$fShowSeekMode_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.IO.Device.$fShowSeekMode_$cshowsPrec_closure+3;
         const GHC.IO.Device.$fShowSeekMode_$cshow_closure+1;
         const GHC.IO.Device.$fShowSeekMode_$cshowList_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.540087399 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode14_closure" {
     GHC.IO.Device.$fReadSeekMode14_closure:
         const GHC.IO.Device.$fReadSeekMode14_info;
 },
 GHC.IO.Device.$fReadSeekMode14_entry() //  [R3]
         { info_tbl: [(c84lH,
                       label: GHC.IO.Device.$fReadSeekMode14_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84lH: // global
           R2 = GHC.IO.Device.AbsoluteSeek_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.543929522 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode13_closure" {
     GHC.IO.Device.$fReadSeekMode13_closure:
         const (,)_con_info;
         const GHC.IO.Device.$fReadSeekMode15_closure;
         const GHC.IO.Device.$fReadSeekMode14_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.546120396 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode10_closure" {
     GHC.IO.Device.$fReadSeekMode10_closure:
         const GHC.IO.Device.$fReadSeekMode10_info;
 },
 GHC.IO.Device.$fReadSeekMode10_entry() //  [R3]
         { info_tbl: [(c84lT,
                       label: GHC.IO.Device.$fReadSeekMode10_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84lT: // global
           R2 = GHC.IO.Device.RelativeSeek_closure+2;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.549218334 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode9_closure" {
     GHC.IO.Device.$fReadSeekMode9_closure:
         const (,)_con_info;
         const GHC.IO.Device.$fReadSeekMode11_closure;
         const GHC.IO.Device.$fReadSeekMode10_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.551128184 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode6_closure" {
     GHC.IO.Device.$fReadSeekMode6_closure:
         const GHC.IO.Device.$fReadSeekMode6_info;
 },
 GHC.IO.Device.$fReadSeekMode6_entry() //  [R3]
         { info_tbl: [(c84m5,
                       label: GHC.IO.Device.$fReadSeekMode6_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84m5: // global
           R2 = GHC.IO.Device.SeekFromEnd_closure+3;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.55435939 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode5_closure" {
     GHC.IO.Device.$fReadSeekMode5_closure:
         const (,)_con_info;
         const GHC.IO.Device.$fReadSeekMode7_closure;
         const GHC.IO.Device.$fReadSeekMode6_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.556119865 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode4_closure" {
     GHC.IO.Device.$fReadSeekMode4_closure:
         const :_con_info;
         const GHC.IO.Device.$fReadSeekMode5_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.557862817 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode3_closure" {
     GHC.IO.Device.$fReadSeekMode3_closure:
         const :_con_info;
         const GHC.IO.Device.$fReadSeekMode9_closure+1;
         const GHC.IO.Device.$fReadSeekMode4_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.559610989 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode_sps_closure" {
     GHC.IO.Device.$fReadSeekMode_sps_closure:
         const :_con_info;
         const GHC.IO.Device.$fReadSeekMode13_closure+1;
         const GHC.IO.Device.$fReadSeekMode3_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.56254871 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode2_closure" {
     GHC.IO.Device.$fReadSeekMode2_closure:
         const GHC.IO.Device.$fReadSeekMode2_info;
         const 0;
 },
 GHC.IO.Device.$fReadSeekMode2_entry() //  [R2]
         { info_tbl: [(c84mk,
                       label: GHC.IO.Device.$fReadSeekMode2_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84mk: // global
           R3 = R2;
           R2 = GHC.IO.Device.$fReadSeekMode_sps_closure+2;
           call GHC.Read.choose2_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.566346299 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode1_closure" {
     GHC.IO.Device.$fReadSeekMode1_closure:
         const GHC.IO.Device.$fReadSeekMode1_info;
         const 0;
 },
 GHC.IO.Device.$fReadSeekMode1_entry() //  [R2, R3]
         { info_tbl: [(c84mv,
                       label: GHC.IO.Device.$fReadSeekMode1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84mv: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.Device.$fReadSeekMode2_closure+1;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.569841913 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode_$creadsPrec_closure" {
     GHC.IO.Device.$fReadSeekMode_$creadsPrec_closure:
         const GHC.IO.Device.$fReadSeekMode_$creadsPrec_info;
         const 0;
 },
 sat_s825h_entry() //  [R1]
         { info_tbl: [(c84mK,
                       label: sat_s825h_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84mK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c84mL; else goto c84mM;
       c84mL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c84mM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = P64[R1 + 16];
           R2 = GHC.IO.Device.$fReadSeekMode2_closure+1;
           Sp = Sp - 16;
           call GHC.Read.list3_entry(R4, R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.IO.Device.$fReadSeekMode_$creadsPrec_entry() //  [R2]
         { info_tbl: [(c84mN,
                       label: GHC.IO.Device.$fReadSeekMode_$creadsPrec_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84mN: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c84mR; else goto c84mQ;
       c84mR: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.IO.Device.$fReadSeekMode_$creadsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c84mQ: // global
           I64[Hp - 16] = sat_s825h_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.575620965 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode_$creadListPrec_closure" {
     GHC.IO.Device.$fReadSeekMode_$creadListPrec_closure:
         const GHC.IO.Device.$fReadSeekMode_$creadListPrec_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Device.$fReadSeekMode_$creadListPrec_entry() //  [R1]
         { info_tbl: [(c84n6,
                       label: GHC.IO.Device.$fReadSeekMode_$creadListPrec_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84n6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c84n7; else goto c84n8;
       c84n7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c84n8: // global
           (_c84n3::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c84n3::I64 == 0) goto c84n5; else goto c84n4;
       c84n5: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c84n4: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c84n3::I64;
           R2 = GHC.IO.Device.$fReadSeekMode1_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.580198381 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode17_closure" {
     GHC.IO.Device.$fReadSeekMode17_closure:
         const GHC.IO.Device.$fReadSeekMode17_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Device.$fReadSeekMode17_entry() //  [R1]
         { info_tbl: [(c84nm,
                       label: GHC.IO.Device.$fReadSeekMode17_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84nm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c84nn; else goto c84no;
       c84nn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c84no: // global
           (_c84nj::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c84nj::I64 == 0) goto c84nl; else goto c84nk;
       c84nl: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c84nk: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c84nj::I64;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = GHC.Read.$fRead()7_closure;
           R1 = GHC.IO.Device.$fReadSeekMode_$creadListPrec_closure;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.584375451 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode_$creadList_closure" {
     GHC.IO.Device.$fReadSeekMode_$creadList_closure:
         const GHC.IO.Device.$fReadSeekMode_$creadList_info;
         const 0;
 },
 GHC.IO.Device.$fReadSeekMode_$creadList_entry() //  [R2]
         { info_tbl: [(c84nA,
                       label: GHC.IO.Device.$fReadSeekMode_$creadList_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84nA: // global
           R3 = R2;
           R2 = GHC.IO.Device.$fReadSeekMode17_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.587796357 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode_closure" {
     GHC.IO.Device.$fReadSeekMode_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.IO.Device.$fReadSeekMode_$creadsPrec_closure+1;
         const GHC.IO.Device.$fReadSeekMode_$creadList_closure+1;
         const GHC.IO.Device.$fReadSeekMode1_closure+2;
         const GHC.IO.Device.$fReadSeekMode_$creadListPrec_closure;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.590385944 UTC

[section ""data" . GHC.IO.Device.$fEqSeekMode_$c==_closure" {
     GHC.IO.Device.$fEqSeekMode_$c==_closure:
         const GHC.IO.Device.$fEqSeekMode_$c==_info;
 },
 GHC.IO.Device.$fEqSeekMode_$c==_entry() //  [R2, R3]
         { info_tbl: [(c84nU,
                       label: GHC.IO.Device.$fEqSeekMode_$c==_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84nU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c84nV; else goto c84nW;
       c84nV: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fEqSeekMode_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c84nW: // global
           I64[Sp - 16] = block_c84nM_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u84oT; else goto c84nN;
       u84oT: // global
           call _c84nM(R1) args: 0, res: 0, upd: 0;
       c84nN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c84nM() //  [R1]
         { info_tbl: [(c84nM,
                       label: block_c84nM_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84nM: // global
           _s825j::P64 = P64[Sp + 8];
           _c84nT::P64 = R1 & 7;
           if (_c84nT::P64 < 3) goto u84oJ; else goto c84nS;
       u84oJ: // global
           if (_c84nT::P64 < 2) goto c84nQ; else goto c84nR;
       c84nQ: // global
           I64[Sp + 8] = block_c84nZ_info;
           R1 = _s825j::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u84oQ; else goto c84o1;
       u84oQ: // global
           call _c84nZ(R1) args: 0, res: 0, upd: 0;
       c84o1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c84nR: // global
           I64[Sp + 8] = block_c84oe_info;
           R1 = _s825j::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u84oR; else goto c84og;
       u84oR: // global
           call _c84oe(R1) args: 0, res: 0, upd: 0;
       c84og: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c84nS: // global
           I64[Sp + 8] = block_c84ot_info;
           R1 = _s825j::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u84oS; else goto c84ov;
       u84oS: // global
           call _c84ot(R1) args: 0, res: 0, upd: 0;
       c84ov: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c84nZ() //  [R1]
         { info_tbl: [(c84nZ,
                       label: block_c84nZ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84nZ: // global
           if (R1 & 7 == 1) goto u84oK; else goto u84oL;
       u84oK: // global
           Sp = Sp + 8;
           call _c84oF() args: 0, res: 0, upd: 0;
       u84oL: // global
           Sp = Sp + 8;
           call _c84oB() args: 0, res: 0, upd: 0;
     }
 },
 _c84oe() //  [R1]
         { info_tbl: [(c84oe,
                       label: block_c84oe_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84oe: // global
           if (R1 & 7 == 2) goto u84oM; else goto u84oN;
       u84oM: // global
           Sp = Sp + 8;
           call _c84oF() args: 0, res: 0, upd: 0;
       u84oN: // global
           Sp = Sp + 8;
           call _c84oB() args: 0, res: 0, upd: 0;
     }
 },
 _c84ot() //  [R1]
         { info_tbl: [(c84ot,
                       label: block_c84ot_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84ot: // global
           if (R1 & 7 == 3) goto u84oO; else goto u84oP;
       u84oO: // global
           Sp = Sp + 8;
           call _c84oF() args: 0, res: 0, upd: 0;
       u84oP: // global
           Sp = Sp + 8;
           call _c84oB() args: 0, res: 0, upd: 0;
     }
 },
 _c84oF() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84oF: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c84oB() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84oB: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.60517244 UTC

[section ""data" . GHC.IO.Device.$fEqSeekMode_$c/=_closure" {
     GHC.IO.Device.$fEqSeekMode_$c/=_closure:
         const GHC.IO.Device.$fEqSeekMode_$c/=_info;
 },
 GHC.IO.Device.$fEqSeekMode_$c/=_entry() //  [R2, R3]
         { info_tbl: [(c84pK,
                       label: GHC.IO.Device.$fEqSeekMode_$c/=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84pK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c84pL; else goto c84pM;
       c84pL: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fEqSeekMode_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c84pM: // global
           I64[Sp - 16] = block_c84pC_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u84qJ; else goto c84pD;
       u84qJ: // global
           call _c84pC(R1) args: 0, res: 0, upd: 0;
       c84pD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c84pC() //  [R1]
         { info_tbl: [(c84pC,
                       label: block_c84pC_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84pC: // global
           _s825p::P64 = P64[Sp + 8];
           _c84pJ::P64 = R1 & 7;
           if (_c84pJ::P64 < 3) goto u84qz; else goto c84pI;
       u84qz: // global
           if (_c84pJ::P64 < 2) goto c84pG; else goto c84pH;
       c84pG: // global
           I64[Sp + 8] = block_c84pP_info;
           R1 = _s825p::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u84qG; else goto c84pR;
       u84qG: // global
           call _c84pP(R1) args: 0, res: 0, upd: 0;
       c84pR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c84pH: // global
           I64[Sp + 8] = block_c84q4_info;
           R1 = _s825p::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u84qH; else goto c84q6;
       u84qH: // global
           call _c84q4(R1) args: 0, res: 0, upd: 0;
       c84q6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c84pI: // global
           I64[Sp + 8] = block_c84qj_info;
           R1 = _s825p::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u84qI; else goto c84ql;
       u84qI: // global
           call _c84qj(R1) args: 0, res: 0, upd: 0;
       c84ql: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c84pP() //  [R1]
         { info_tbl: [(c84pP,
                       label: block_c84pP_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84pP: // global
           if (R1 & 7 == 1) goto u84qA; else goto u84qB;
       u84qA: // global
           Sp = Sp + 8;
           call _c84qv() args: 0, res: 0, upd: 0;
       u84qB: // global
           Sp = Sp + 8;
           call _c84qr() args: 0, res: 0, upd: 0;
     }
 },
 _c84q4() //  [R1]
         { info_tbl: [(c84q4,
                       label: block_c84q4_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84q4: // global
           if (R1 & 7 == 2) goto u84qC; else goto u84qD;
       u84qC: // global
           Sp = Sp + 8;
           call _c84qv() args: 0, res: 0, upd: 0;
       u84qD: // global
           Sp = Sp + 8;
           call _c84qr() args: 0, res: 0, upd: 0;
     }
 },
 _c84qj() //  [R1]
         { info_tbl: [(c84qj,
                       label: block_c84qj_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84qj: // global
           if (R1 & 7 == 3) goto u84qE; else goto u84qF;
       u84qE: // global
           Sp = Sp + 8;
           call _c84qv() args: 0, res: 0, upd: 0;
       u84qF: // global
           Sp = Sp + 8;
           call _c84qr() args: 0, res: 0, upd: 0;
     }
 },
 _c84qv() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84qv: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c84qr() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84qr: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.617867178 UTC

[section ""data" . GHC.IO.Device.$fEqSeekMode_closure" {
     GHC.IO.Device.$fEqSeekMode_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.IO.Device.$fEqSeekMode_$c==_closure+2;
         const GHC.IO.Device.$fEqSeekMode_$c/=_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.620590488 UTC

[section ""data" . GHC.IO.Device.$fEqIODeviceType_$c==_closure" {
     GHC.IO.Device.$fEqIODeviceType_$c==_closure:
         const GHC.IO.Device.$fEqIODeviceType_$c==_info;
 },
 GHC.IO.Device.$fEqIODeviceType_$c==_entry() //  [R2, R3]
         { info_tbl: [(c84rC,
                       label: GHC.IO.Device.$fEqIODeviceType_$c==_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84rC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c84rD; else goto c84rE;
       c84rD: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fEqIODeviceType_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c84rE: // global
           I64[Sp - 16] = block_c84rt_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u84sV; else goto c84ru;
       u84sV: // global
           call _c84rt(R1) args: 0, res: 0, upd: 0;
       c84ru: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c84rt() //  [R1]
         { info_tbl: [(c84rt,
                       label: block_c84rt_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84rt: // global
           _s825v::P64 = P64[Sp + 8];
           _c84rB::P64 = R1 & 7;
           if (_c84rB::P64 < 3) goto u84sH; else goto u84sI;
       u84sH: // global
           if (_c84rB::P64 < 2) goto c84rx; else goto c84ry;
       c84rx: // global
           I64[Sp + 8] = block_c84rH_info;
           R1 = _s825v::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u84sR; else goto c84rJ;
       u84sR: // global
           call _c84rH(R1) args: 0, res: 0, upd: 0;
       c84rJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c84ry: // global
           I64[Sp + 8] = block_c84rW_info;
           R1 = _s825v::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u84sS; else goto c84rY;
       u84sS: // global
           call _c84rW(R1) args: 0, res: 0, upd: 0;
       c84rY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u84sI: // global
           if (_c84rB::P64 < 4) goto c84rz; else goto c84rA;
       c84rz: // global
           I64[Sp + 8] = block_c84sb_info;
           R1 = _s825v::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u84sT; else goto c84sd;
       u84sT: // global
           call _c84sb(R1) args: 0, res: 0, upd: 0;
       c84sd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c84rA: // global
           I64[Sp + 8] = block_c84sq_info;
           R1 = _s825v::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u84sU; else goto c84ss;
       u84sU: // global
           call _c84sq(R1) args: 0, res: 0, upd: 0;
       c84ss: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c84rH() //  [R1]
         { info_tbl: [(c84rH,
                       label: block_c84rH_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84rH: // global
           if (R1 & 7 == 1) goto u84sJ; else goto u84sK;
       u84sJ: // global
           Sp = Sp + 8;
           call _c84sC() args: 0, res: 0, upd: 0;
       u84sK: // global
           Sp = Sp + 8;
           call _c84sy() args: 0, res: 0, upd: 0;
     }
 },
 _c84rW() //  [R1]
         { info_tbl: [(c84rW,
                       label: block_c84rW_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84rW: // global
           if (R1 & 7 == 2) goto u84sL; else goto u84sM;
       u84sL: // global
           Sp = Sp + 8;
           call _c84sC() args: 0, res: 0, upd: 0;
       u84sM: // global
           Sp = Sp + 8;
           call _c84sy() args: 0, res: 0, upd: 0;
     }
 },
 _c84sb() //  [R1]
         { info_tbl: [(c84sb,
                       label: block_c84sb_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84sb: // global
           if (R1 & 7 == 3) goto u84sN; else goto u84sO;
       u84sN: // global
           Sp = Sp + 8;
           call _c84sC() args: 0, res: 0, upd: 0;
       u84sO: // global
           Sp = Sp + 8;
           call _c84sy() args: 0, res: 0, upd: 0;
     }
 },
 _c84sq() //  [R1]
         { info_tbl: [(c84sq,
                       label: block_c84sq_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84sq: // global
           if (R1 & 7 == 4) goto u84sP; else goto u84sQ;
       u84sP: // global
           Sp = Sp + 8;
           call _c84sC() args: 0, res: 0, upd: 0;
       u84sQ: // global
           Sp = Sp + 8;
           call _c84sy() args: 0, res: 0, upd: 0;
     }
 },
 _c84sC() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84sC: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c84sy() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84sy: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.637541117 UTC

[section ""data" . GHC.IO.Device.$fEqIODeviceType_$c/=_closure" {
     GHC.IO.Device.$fEqIODeviceType_$c/=_closure:
         const GHC.IO.Device.$fEqIODeviceType_$c/=_info;
 },
 GHC.IO.Device.$fEqIODeviceType_$c/=_entry() //  [R2, R3]
         { info_tbl: [(c84tV,
                       label: GHC.IO.Device.$fEqIODeviceType_$c/=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84tV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c84tW; else goto c84tX;
       c84tW: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fEqIODeviceType_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c84tX: // global
           I64[Sp - 16] = block_c84tM_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u84ve; else goto c84tN;
       u84ve: // global
           call _c84tM(R1) args: 0, res: 0, upd: 0;
       c84tN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c84tM() //  [R1]
         { info_tbl: [(c84tM,
                       label: block_c84tM_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84tM: // global
           _s825C::P64 = P64[Sp + 8];
           _c84tU::P64 = R1 & 7;
           if (_c84tU::P64 < 3) goto u84v0; else goto u84v1;
       u84v0: // global
           if (_c84tU::P64 < 2) goto c84tQ; else goto c84tR;
       c84tQ: // global
           I64[Sp + 8] = block_c84u0_info;
           R1 = _s825C::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u84va; else goto c84u2;
       u84va: // global
           call _c84u0(R1) args: 0, res: 0, upd: 0;
       c84u2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c84tR: // global
           I64[Sp + 8] = block_c84uf_info;
           R1 = _s825C::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u84vb; else goto c84uh;
       u84vb: // global
           call _c84uf(R1) args: 0, res: 0, upd: 0;
       c84uh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u84v1: // global
           if (_c84tU::P64 < 4) goto c84tS; else goto c84tT;
       c84tS: // global
           I64[Sp + 8] = block_c84uu_info;
           R1 = _s825C::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u84vc; else goto c84uw;
       u84vc: // global
           call _c84uu(R1) args: 0, res: 0, upd: 0;
       c84uw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c84tT: // global
           I64[Sp + 8] = block_c84uJ_info;
           R1 = _s825C::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u84vd; else goto c84uL;
       u84vd: // global
           call _c84uJ(R1) args: 0, res: 0, upd: 0;
       c84uL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c84u0() //  [R1]
         { info_tbl: [(c84u0,
                       label: block_c84u0_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84u0: // global
           if (R1 & 7 == 1) goto u84v2; else goto u84v3;
       u84v2: // global
           Sp = Sp + 8;
           call _c84uV() args: 0, res: 0, upd: 0;
       u84v3: // global
           Sp = Sp + 8;
           call _c84uR() args: 0, res: 0, upd: 0;
     }
 },
 _c84uf() //  [R1]
         { info_tbl: [(c84uf,
                       label: block_c84uf_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84uf: // global
           if (R1 & 7 == 2) goto u84v4; else goto u84v5;
       u84v4: // global
           Sp = Sp + 8;
           call _c84uV() args: 0, res: 0, upd: 0;
       u84v5: // global
           Sp = Sp + 8;
           call _c84uR() args: 0, res: 0, upd: 0;
     }
 },
 _c84uu() //  [R1]
         { info_tbl: [(c84uu,
                       label: block_c84uu_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84uu: // global
           if (R1 & 7 == 3) goto u84v6; else goto u84v7;
       u84v6: // global
           Sp = Sp + 8;
           call _c84uV() args: 0, res: 0, upd: 0;
       u84v7: // global
           Sp = Sp + 8;
           call _c84uR() args: 0, res: 0, upd: 0;
     }
 },
 _c84uJ() //  [R1]
         { info_tbl: [(c84uJ,
                       label: block_c84uJ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84uJ: // global
           if (R1 & 7 == 4) goto u84v8; else goto u84v9;
       u84v8: // global
           Sp = Sp + 8;
           call _c84uV() args: 0, res: 0, upd: 0;
       u84v9: // global
           Sp = Sp + 8;
           call _c84uR() args: 0, res: 0, upd: 0;
     }
 },
 _c84uV() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84uV: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c84uR() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84uR: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.652040341 UTC

[section ""data" . GHC.IO.Device.$fEqIODeviceType_closure" {
     GHC.IO.Device.$fEqIODeviceType_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.IO.Device.$fEqIODeviceType_$c==_closure+2;
         const GHC.IO.Device.$fEqIODeviceType_$c/=_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.654294859 UTC

[section ""data" . $dmisSeekable1_r81Zn_closure" {
     $dmisSeekable1_r81Zn_closure:
         const $dmisSeekable1_r81Zn_info;
 },
 $dmisSeekable1_r81Zn_entry() //  []
         { info_tbl: [(c84w6,
                       label: $dmisSeekable1_r81Zn_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84w6: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.65760889 UTC

[section ""data" . GHC.IO.Device.$dmisSeekable_closure" {
     GHC.IO.Device.$dmisSeekable_closure:
         const GHC.IO.Device.$dmisSeekable_info;
 },
 GHC.IO.Device.$dmisSeekable_entry() //  [R2, R3]
         { info_tbl: [(c84wi,
                       label: GHC.IO.Device.$dmisSeekable_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84wi: // global
           R3 = R3;
           R2 = R2;
           call $dmisSeekable1_r81Zn_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.660911941 UTC

[section ""data" . $dmisTerminal1_r81Zo_closure" {
     $dmisTerminal1_r81Zo_closure:
         const $dmisTerminal1_r81Zo_info;
 },
 $dmisTerminal1_r81Zo_entry() //  []
         { info_tbl: [(c84wt,
                       label: $dmisTerminal1_r81Zo_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84wt: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.66441433 UTC

[section ""data" . GHC.IO.Device.$dmisTerminal_closure" {
     GHC.IO.Device.$dmisTerminal_closure:
         const GHC.IO.Device.$dmisTerminal_info;
 },
 GHC.IO.Device.$dmisTerminal_entry() //  [R2, R3]
         { info_tbl: [(c84wF,
                       label: GHC.IO.Device.$dmisTerminal_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84wF: // global
           R3 = R3;
           R2 = R2;
           call $dmisTerminal1_r81Zo_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.667668014 UTC

[section ""data" . GHC.IO.Device.$dmdup1_closure" {
     GHC.IO.Device.$dmdup1_closure:
         const GHC.IO.Device.$dmdup1_info;
         const 0;
 },
 GHC.IO.Device.$dmdup1_entry() //  []
         { info_tbl: [(c84wQ,
                       label: GHC.IO.Device.$dmdup1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84wQ: // global
           R3 = GHC.IO.Exception.unsupportedOperation_closure;
           R2 = GHC.IO.Exception.$fxExceptionIOException_closure;
           call GHC.IO.throwIO1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.671622642 UTC

[section ""data" . $dmseek1_r81Zp_closure" {
     $dmseek1_r81Zp_closure:
         const $dmseek1_r81Zp_info;
         const 0;
 },
 $dmseek1_r81Zp_entry() //  []
         { info_tbl: [(c84x1,
                       label: $dmseek1_r81Zp_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84x1: // global
           call GHC.IO.Device.$dmdup1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.675086431 UTC

[section ""data" . GHC.IO.Device.$dmseek_closure" {
     GHC.IO.Device.$dmseek_closure:
         const GHC.IO.Device.$dmseek_info;
         const 0;
 },
 GHC.IO.Device.$dmseek_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c84xc,
                       label: GHC.IO.Device.$dmseek_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84xc: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call $dmseek1_r81Zp_entry(R5, R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.67839193 UTC

[section ""data" . $dmtell1_r81Zq_closure" {
     $dmtell1_r81Zq_closure:
         const $dmtell1_r81Zq_info;
         const 0;
 },
 $dmtell1_r81Zq_entry() //  []
         { info_tbl: [(c84xn,
                       label: $dmtell1_r81Zq_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84xn: // global
           call GHC.IO.Device.$dmdup1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.681526557 UTC

[section ""data" . GHC.IO.Device.$dmtell_closure" {
     GHC.IO.Device.$dmtell_closure:
         const GHC.IO.Device.$dmtell_info;
         const 0;
 },
 GHC.IO.Device.$dmtell_entry() //  [R2, R3]
         { info_tbl: [(c84xy,
                       label: GHC.IO.Device.$dmtell_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84xy: // global
           R3 = R3;
           R2 = R2;
           call $dmtell1_r81Zq_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.684780162 UTC

[section ""data" . $dmgetSize1_r81Zr_closure" {
     $dmgetSize1_r81Zr_closure:
         const $dmgetSize1_r81Zr_info;
         const 0;
 },
 $dmgetSize1_r81Zr_entry() //  []
         { info_tbl: [(c84xJ,
                       label: $dmgetSize1_r81Zr_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84xJ: // global
           call GHC.IO.Device.$dmdup1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.688224978 UTC

[section ""data" . GHC.IO.Device.$dmgetSize_closure" {
     GHC.IO.Device.$dmgetSize_closure:
         const GHC.IO.Device.$dmgetSize_info;
         const 0;
 },
 GHC.IO.Device.$dmgetSize_entry() //  [R2, R3]
         { info_tbl: [(c84xU,
                       label: GHC.IO.Device.$dmgetSize_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84xU: // global
           R3 = R3;
           R2 = R2;
           call $dmgetSize1_r81Zr_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.691552485 UTC

[section ""data" . $dmsetSize1_r81Zs_closure" {
     $dmsetSize1_r81Zs_closure:
         const $dmsetSize1_r81Zs_info;
         const 0;
 },
 $dmsetSize1_r81Zs_entry() //  []
         { info_tbl: [(c84y5,
                       label: $dmsetSize1_r81Zs_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84y5: // global
           call GHC.IO.Device.$dmdup1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.695043108 UTC

[section ""data" . GHC.IO.Device.$dmsetSize_closure" {
     GHC.IO.Device.$dmsetSize_closure:
         const GHC.IO.Device.$dmsetSize_info;
         const 0;
 },
 GHC.IO.Device.$dmsetSize_entry() //  [R2, R3, R4]
         { info_tbl: [(c84yg,
                       label: GHC.IO.Device.$dmsetSize_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84yg: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call $dmsetSize1_r81Zs_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.698939046 UTC

[section ""data" . $dmsetEcho1_r81Zt_closure" {
     $dmsetEcho1_r81Zt_closure:
         const $dmsetEcho1_r81Zt_info;
         const 0;
 },
 $dmsetEcho1_r81Zt_entry() //  []
         { info_tbl: [(c84yr,
                       label: $dmsetEcho1_r81Zt_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84yr: // global
           call GHC.IO.Device.$dmdup1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.702127239 UTC

[section ""data" . GHC.IO.Device.$dmsetEcho_closure" {
     GHC.IO.Device.$dmsetEcho_closure:
         const GHC.IO.Device.$dmsetEcho_info;
         const 0;
 },
 GHC.IO.Device.$dmsetEcho_entry() //  [R2, R3, R4]
         { info_tbl: [(c84yC,
                       label: GHC.IO.Device.$dmsetEcho_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84yC: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call $dmsetEcho1_r81Zt_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.705412168 UTC

[section ""data" . $dmgetEcho1_r81Zu_closure" {
     $dmgetEcho1_r81Zu_closure:
         const $dmgetEcho1_r81Zu_info;
         const 0;
 },
 $dmgetEcho1_r81Zu_entry() //  []
         { info_tbl: [(c84yN,
                       label: $dmgetEcho1_r81Zu_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84yN: // global
           call GHC.IO.Device.$dmdup1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.708540831 UTC

[section ""data" . GHC.IO.Device.$dmgetEcho_closure" {
     GHC.IO.Device.$dmgetEcho_closure:
         const GHC.IO.Device.$dmgetEcho_info;
         const 0;
 },
 GHC.IO.Device.$dmgetEcho_entry() //  [R2, R3]
         { info_tbl: [(c84yY,
                       label: GHC.IO.Device.$dmgetEcho_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84yY: // global
           R3 = R3;
           R2 = R2;
           call $dmgetEcho1_r81Zu_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.71229421 UTC

[section ""data" . $dmsetRaw1_r81Zv_closure" {
     $dmsetRaw1_r81Zv_closure:
         const $dmsetRaw1_r81Zv_info;
         const 0;
 },
 $dmsetRaw1_r81Zv_entry() //  []
         { info_tbl: [(c84z9,
                       label: $dmsetRaw1_r81Zv_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84z9: // global
           call GHC.IO.Device.$dmdup1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.71542438 UTC

[section ""data" . GHC.IO.Device.$dmsetRaw_closure" {
     GHC.IO.Device.$dmsetRaw_closure:
         const GHC.IO.Device.$dmsetRaw_info;
         const 0;
 },
 GHC.IO.Device.$dmsetRaw_entry() //  [R2, R3, R4]
         { info_tbl: [(c84zk,
                       label: GHC.IO.Device.$dmsetRaw_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84zk: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call $dmsetRaw1_r81Zv_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.718779179 UTC

[section ""data" . $dmdup3_r81Zw_closure" {
     $dmdup3_r81Zw_closure:
         const $dmdup3_r81Zw_info;
         const 0;
 },
 $dmdup3_r81Zw_entry() //  []
         { info_tbl: [(c84zv,
                       label: $dmdup3_r81Zw_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84zv: // global
           call GHC.IO.Device.$dmdup1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.722358238 UTC

[section ""data" . GHC.IO.Device.$dmdup_closure" {
     GHC.IO.Device.$dmdup_closure:
         const GHC.IO.Device.$dmdup_info;
         const 0;
 },
 GHC.IO.Device.$dmdup_entry() //  [R2, R3]
         { info_tbl: [(c84zG,
                       label: GHC.IO.Device.$dmdup_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84zG: // global
           R3 = R3;
           R2 = R2;
           call $dmdup3_r81Zw_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.725735373 UTC

[section ""data" . $dmdup4_r81Zx_closure" {
     $dmdup4_r81Zx_closure:
         const $dmdup4_r81Zx_info;
         const 0;
 },
 $dmdup4_r81Zx_entry() //  []
         { info_tbl: [(c84zR,
                       label: $dmdup4_r81Zx_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84zR: // global
           call GHC.IO.Device.$dmdup1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.72983762 UTC

[section ""data" . GHC.IO.Device.$dmdup2_closure" {
     GHC.IO.Device.$dmdup2_closure:
         const GHC.IO.Device.$dmdup2_info;
         const 0;
 },
 GHC.IO.Device.$dmdup2_entry() //  [R2, R3, R4]
         { info_tbl: [(c84A2,
                       label: GHC.IO.Device.$dmdup2_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84A2: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call $dmdup4_r81Zx_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.733797212 UTC

[section ""data" . GHC.IO.Device.$fOrdSeekMode_$ccompare_closure" {
     GHC.IO.Device.$fOrdSeekMode_$ccompare_closure:
         const GHC.IO.Device.$fOrdSeekMode_$ccompare_info;
 },
 GHC.IO.Device.$fOrdSeekMode_$ccompare_entry() //  [R2, R3]
         { info_tbl: [(c84Al,
                       label: GHC.IO.Device.$fOrdSeekMode_$ccompare_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84Al: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c84Am; else goto c84An;
       c84Am: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fOrdSeekMode_$ccompare_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c84An: // global
           I64[Sp - 16] = block_c84Ad_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u84Bw; else goto c84Ae;
       u84Bw: // global
           call _c84Ad(R1) args: 0, res: 0, upd: 0;
       c84Ae: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c84Ad() //  [R1]
         { info_tbl: [(c84Ad,
                       label: block_c84Ad_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84Ad: // global
           _s826n::P64 = P64[Sp + 8];
           _c84Ak::P64 = R1 & 7;
           if (_c84Ak::P64 < 3) goto u84Bi; else goto c84Aj;
       u84Bi: // global
           if (_c84Ak::P64 < 2) goto c84Ah; else goto c84Ai;
       c84Ah: // global
           I64[Sp + 8] = block_c84Aq_info;
           R1 = _s826n::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u84Bt; else goto c84As;
       u84Bt: // global
           call _c84Aq(R1) args: 0, res: 0, upd: 0;
       c84As: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c84Ai: // global
           I64[Sp + 8] = block_c84AJ_info;
           R1 = _s826n::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u84Bu; else goto c84AL;
       u84Bu: // global
           call _c84AJ(R1) args: 0, res: 0, upd: 0;
       c84AL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c84Aj: // global
           I64[Sp + 8] = block_c84B2_info;
           R1 = _s826n::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u84Bv; else goto c84B4;
       u84Bv: // global
           call _c84B2(R1) args: 0, res: 0, upd: 0;
       c84B4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c84Aq() //  [R1]
         { info_tbl: [(c84Aq,
                       label: block_c84Aq_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84Aq: // global
           _c84Bh::P64 = R1 & 7;
           if (_c84Bh::P64 < 3) goto u84Bj; else goto u84Bl;
       u84Bj: // global
           if (_c84Bh::P64 < 2) goto u84Bn; else goto u84Bm;
       u84Bn: // global
           Sp = Sp + 8;
           call _c84Be() args: 0, res: 0, upd: 0;
       u84Bm: // global
           Sp = Sp + 8;
           goto u84By;
       u84Bl: // global
           Sp = Sp + 8;
           goto u84By;
       u84By: // global
           call _c84AZ() args: 0, res: 0, upd: 0;
     }
 },
 _c84AJ() //  [R1]
         { info_tbl: [(c84AJ,
                       label: block_c84AJ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84AJ: // global
           _c84Bg::P64 = R1 & 7;
           if (_c84Bg::P64 < 3) goto u84Bk; else goto u84Bo;
       u84Bk: // global
           if (_c84Bg::P64 < 2) goto u84Bq; else goto u84Bp;
       u84Bq: // global
           Sp = Sp + 8;
           call _c84Ba() args: 0, res: 0, upd: 0;
       u84Bp: // global
           Sp = Sp + 8;
           call _c84Be() args: 0, res: 0, upd: 0;
       u84Bo: // global
           Sp = Sp + 8;
           call _c84AZ() args: 0, res: 0, upd: 0;
     }
 },
 _c84AZ() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84AZ: // global
           R1 = GHC.Types.LT_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c84B2() //  [R1]
         { info_tbl: [(c84B2,
                       label: block_c84B2_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84B2: // global
           if (R1 & 7 == 3) goto u84Br; else goto u84Bs;
       u84Br: // global
           Sp = Sp + 8;
           call _c84Be() args: 0, res: 0, upd: 0;
       u84Bs: // global
           Sp = Sp + 8;
           call _c84Ba() args: 0, res: 0, upd: 0;
     }
 },
 _c84Be() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84Be: // global
           R1 = GHC.Types.EQ_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c84Ba() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84Ba: // global
           R1 = GHC.Types.GT_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.748383872 UTC

[section ""data" . GHC.IO.Device.$fOrdSeekMode_$c<_closure" {
     GHC.IO.Device.$fOrdSeekMode_$c<_closure:
         const GHC.IO.Device.$fOrdSeekMode_$c<_info;
 },
 GHC.IO.Device.$fOrdSeekMode_$c<_entry() //  [R2, R3]
         { info_tbl: [(c84Cq,
                       label: GHC.IO.Device.$fOrdSeekMode_$c<_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84Cq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c84Cr; else goto c84Cs;
       c84Cr: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fOrdSeekMode_$c<_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c84Cs: // global
           I64[Sp - 16] = block_c84Ci_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u84Dm; else goto c84Cj;
       u84Dm: // global
           call _c84Ci(R1) args: 0, res: 0, upd: 0;
       c84Cj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c84Ci() //  [R1]
         { info_tbl: [(c84Ci,
                       label: block_c84Ci_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84Ci: // global
           _s826t::P64 = P64[Sp + 8];
           _c84Cp::P64 = R1 & 7;
           if (_c84Cp::P64 < 3) goto u84Dc; else goto c84Co;
       u84Dc: // global
           if (_c84Cp::P64 < 2) goto c84Cm; else goto c84Cn;
       c84Cm: // global
           I64[Sp + 8] = block_c84Cv_info;
           R1 = _s826t::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u84Dj; else goto c84Cx;
       u84Dj: // global
           call _c84Cv(R1) args: 0, res: 0, upd: 0;
       c84Cx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c84Cn: // global
           I64[Sp + 8] = block_c84CO_info;
           R1 = _s826t::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u84Dk; else goto c84CQ;
       u84Dk: // global
           call _c84CO(R1) args: 0, res: 0, upd: 0;
       c84CQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c84Co: // global
           I64[Sp + 8] = block_c84D3_info;
           R1 = _s826t::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u84Dl; else goto c84D5;
       u84Dl: // global
           call _c84D3() args: 0, res: 0, upd: 0;
       c84D5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c84Cv() //  [R1]
         { info_tbl: [(c84Cv,
                       label: block_c84Cv_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84Cv: // global
           _c84Db::P64 = R1 & 7;
           if (_c84Db::P64 < 3) goto u84Dd; else goto u84De;
       u84Dd: // global
           if (_c84Db::P64 < 2) goto u84Dg; else goto u84Df;
       u84Dg: // global
           Sp = Sp + 8;
           call _c84CW() args: 0, res: 0, upd: 0;
       u84Df: // global
           Sp = Sp + 8;
           goto u84Do;
       u84De: // global
           Sp = Sp + 8;
           goto u84Do;
       u84Do: // global
           call _c84D0() args: 0, res: 0, upd: 0;
     }
 },
 _c84CO() //  [R1]
         { info_tbl: [(c84CO,
                       label: block_c84CO_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84CO: // global
           if (R1 & 7 == 3) goto u84Dh; else goto u84Di;
       u84Dh: // global
           Sp = Sp + 8;
           call _c84D0() args: 0, res: 0, upd: 0;
       u84Di: // global
           Sp = Sp + 8;
           call _c84CW() args: 0, res: 0, upd: 0;
     }
 },
 _c84D0() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84D0: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c84CW() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84CW: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c84D3() //  []
         { info_tbl: [(c84D3,
                       label: block_c84D3_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84D3: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.761942847 UTC

[section ""data" . GHC.IO.Device.$fOrdSeekMode_$c<=_closure" {
     GHC.IO.Device.$fOrdSeekMode_$c<=_closure:
         const GHC.IO.Device.$fOrdSeekMode_$c<=_info;
 },
 GHC.IO.Device.$fOrdSeekMode_$c<=_entry() //  [R2, R3]
         { info_tbl: [(c84Ec,
                       label: GHC.IO.Device.$fOrdSeekMode_$c<=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84Ec: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c84Ed; else goto c84Ee;
       c84Ed: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fOrdSeekMode_$c<=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c84Ee: // global
           I64[Sp - 16] = block_c84E4_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u84F1; else goto c84E5;
       u84F1: // global
           call _c84E4(R1) args: 0, res: 0, upd: 0;
       c84E5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c84E4() //  [R1]
         { info_tbl: [(c84E4,
                       label: block_c84E4_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84E4: // global
           _s826y::P64 = P64[Sp + 8];
           _c84Eb::P64 = R1 & 7;
           if (_c84Eb::P64 < 3) goto u84EY; else goto c84Ea;
       u84EY: // global
           if (_c84Eb::P64 < 2) goto c84E8; else goto c84E9;
       c84E8: // global
           _s826B::I64 = 0;
           goto s826A;
       c84E9: // global
           _s826B::I64 = 1;
           goto s826A;
       c84Ea: // global
           _s826B::I64 = 2;
           goto s826A;
       s826A: // global
           I64[Sp] = block_c84Ei_info;
           R1 = _s826y::P64;
           I64[Sp + 8] = _s826B::I64;
           if (R1 & 7 != 0) goto u84F0; else goto c84Ek;
       u84F0: // global
           call _c84Ei(R1) args: 0, res: 0, upd: 0;
       c84Ek: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c84Ei() //  [R1]
         { info_tbl: [(c84Ei,
                       label: block_c84Ei_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84Ei: // global
           _s826B::I64 = I64[Sp + 8];
           _c84EX::P64 = R1 & 7;
           if (_c84EX::P64 < 3) goto u84EZ; else goto c84EN;
       u84EZ: // global
           if (_c84EX::P64 < 2) goto c84Ev; else goto c84EE;
       c84Ev: // global
           if (%MO_S_Ge_W64(_s826B::I64, 0)) goto c84EL; else goto c84EM;
       c84EE: // global
           if (%MO_S_Ge_W64(_s826B::I64, 1)) goto c84EL; else goto c84EM;
       c84EN: // global
           if (%MO_S_Ge_W64(_s826B::I64, 2)) goto c84EL; else goto c84EM;
       c84EL: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c84EM: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.771214858 UTC

[section ""data" . GHC.IO.Device.$fOrdSeekMode_$cmax_closure" {
     GHC.IO.Device.$fOrdSeekMode_$cmax_closure:
         const GHC.IO.Device.$fOrdSeekMode_$cmax_info;
 },
 GHC.IO.Device.$fOrdSeekMode_$cmax_entry() //  [R2, R3]
         { info_tbl: [(c84Ft,
                       label: GHC.IO.Device.$fOrdSeekMode_$cmax_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84Ft: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c84Fu; else goto c84Fv;
       c84Fu: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fOrdSeekMode_$cmax_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c84Fv: // global
           I64[Sp - 24] = block_c84Fn_info;
           _s826I::P64 = R3;
           R3 = R3;
           _s826H::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s826H::P64;
           P64[Sp - 8] = _s826I::P64;
           Sp = Sp - 24;
           call GHC.IO.Device.$fOrdSeekMode_$c<=_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c84Fn() //  [R1]
         { info_tbl: [(c84Fn,
                       label: block_c84Fn_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84Fn: // global
           if (R1 & 7 == 1) goto c84Fq; else goto c84Fr;
       c84Fq: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c84Fr: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.777526224 UTC

[section ""data" . GHC.IO.Device.$fOrdSeekMode_$c>=_closure" {
     GHC.IO.Device.$fOrdSeekMode_$c>=_closure:
         const GHC.IO.Device.$fOrdSeekMode_$c>=_info;
 },
 GHC.IO.Device.$fOrdSeekMode_$c>=_entry() //  [R2, R3]
         { info_tbl: [(c84G4,
                       label: GHC.IO.Device.$fOrdSeekMode_$c>=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84G4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c84G5; else goto c84G6;
       c84G5: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fOrdSeekMode_$c>=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c84G6: // global
           I64[Sp - 16] = block_c84FW_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u84GT; else goto c84FX;
       u84GT: // global
           call _c84FW(R1) args: 0, res: 0, upd: 0;
       c84FX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c84FW() //  [R1]
         { info_tbl: [(c84FW,
                       label: block_c84FW_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84FW: // global
           _s826L::P64 = P64[Sp + 8];
           _c84G3::P64 = R1 & 7;
           if (_c84G3::P64 < 3) goto u84GQ; else goto c84G2;
       u84GQ: // global
           if (_c84G3::P64 < 2) goto c84G0; else goto c84G1;
       c84G0: // global
           _s826N::I64 = 0;
           goto s826M;
       c84G1: // global
           _s826N::I64 = 1;
           goto s826M;
       c84G2: // global
           _s826N::I64 = 2;
           goto s826M;
       s826M: // global
           I64[Sp] = block_c84Ga_info;
           R1 = _s826L::P64;
           I64[Sp + 8] = _s826N::I64;
           if (R1 & 7 != 0) goto u84GS; else goto c84Gc;
       u84GS: // global
           call _c84Ga(R1) args: 0, res: 0, upd: 0;
       c84Gc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c84Ga() //  [R1]
         { info_tbl: [(c84Ga,
                       label: block_c84Ga_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84Ga: // global
           _s826N::I64 = I64[Sp + 8];
           _c84GP::P64 = R1 & 7;
           if (_c84GP::P64 < 3) goto u84GR; else goto c84GF;
       u84GR: // global
           if (_c84GP::P64 < 2) goto c84Gn; else goto c84Gw;
       c84Gn: // global
           if (%MO_S_Ge_W64(_s826N::I64, 0)) goto c84GD; else goto c84GE;
       c84Gw: // global
           if (%MO_S_Ge_W64(_s826N::I64, 1)) goto c84GD; else goto c84GE;
       c84GF: // global
           if (%MO_S_Ge_W64(_s826N::I64, 2)) goto c84GD; else goto c84GE;
       c84GD: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c84GE: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.785938164 UTC

[section ""data" . GHC.IO.Device.$fOrdSeekMode_$c>_closure" {
     GHC.IO.Device.$fOrdSeekMode_$c>_closure:
         const GHC.IO.Device.$fOrdSeekMode_$c>_info;
 },
 GHC.IO.Device.$fOrdSeekMode_$c>_entry() //  [R2, R3]
         { info_tbl: [(c84Hf,
                       label: GHC.IO.Device.$fOrdSeekMode_$c>_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84Hf: // global
           _s826U::P64 = R3;
           R3 = R2;
           R2 = _s826U::P64;
           call GHC.IO.Device.$fOrdSeekMode_$c<_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.789715989 UTC

[section ""data" . GHC.IO.Device.$fOrdSeekMode_$cmin_closure" {
     GHC.IO.Device.$fOrdSeekMode_$cmin_closure:
         const GHC.IO.Device.$fOrdSeekMode_$cmin_info;
 },
 GHC.IO.Device.$fOrdSeekMode_$cmin_entry() //  [R2, R3]
         { info_tbl: [(c84Hw,
                       label: GHC.IO.Device.$fOrdSeekMode_$cmin_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84Hw: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c84Hx; else goto c84Hy;
       c84Hx: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fOrdSeekMode_$cmin_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c84Hy: // global
           I64[Sp - 24] = block_c84Hq_info;
           _s826W::P64 = R3;
           R3 = R3;
           _s826V::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s826V::P64;
           P64[Sp - 8] = _s826W::P64;
           Sp = Sp - 24;
           call GHC.IO.Device.$fOrdSeekMode_$c<=_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c84Hq() //  [R1]
         { info_tbl: [(c84Hq,
                       label: block_c84Hq_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84Hq: // global
           if (R1 & 7 == 1) goto c84Ht; else goto c84Hu;
       c84Ht: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c84Hu: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.795568775 UTC

[section ""data" . GHC.IO.Device.$fOrdSeekMode_closure" {
     GHC.IO.Device.$fOrdSeekMode_closure:
         const GHC.Classes.C:Ord_con_info;
         const GHC.IO.Device.$fEqSeekMode_closure+1;
         const GHC.IO.Device.$fOrdSeekMode_$ccompare_closure+2;
         const GHC.IO.Device.$fOrdSeekMode_$c<_closure+2;
         const GHC.IO.Device.$fOrdSeekMode_$c<=_closure+2;
         const GHC.IO.Device.$fOrdSeekMode_$c>_closure+2;
         const GHC.IO.Device.$fOrdSeekMode_$c>=_closure+2;
         const GHC.IO.Device.$fOrdSeekMode_$cmax_closure+2;
         const GHC.IO.Device.$fOrdSeekMode_$cmin_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.798487341 UTC

[section ""data" . GHC.IO.Device.$w$cunsafeIndex_closure" {
     GHC.IO.Device.$w$cunsafeIndex_closure:
         const GHC.IO.Device.$w$cunsafeIndex_info;
 },
 GHC.IO.Device.$w$cunsafeIndex_entry() //  [R2, R3]
         { info_tbl: [(c84I6,
                       label: GHC.IO.Device.$w$cunsafeIndex_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84I6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c84I7; else goto c84I8;
       c84I7: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$w$cunsafeIndex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c84I8: // global
           I64[Sp - 16] = block_c84HY_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u84Jl; else goto c84HZ;
       u84Jl: // global
           call _c84HY(R1) args: 0, res: 0, upd: 0;
       c84HZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c84HY() //  [R1]
         { info_tbl: [(c84HY,
                       label: block_c84HY_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84HY: // global
           _s826Z::P64 = P64[Sp + 8];
           _c84I5::P64 = R1 & 7;
           if (_c84I5::P64 < 3) goto u84J7; else goto c84I4;
       u84J7: // global
           if (_c84I5::P64 < 2) goto c84I2; else goto c84I3;
       c84I2: // global
           I64[Sp + 8] = block_c84Ib_info;
           R1 = _s826Z::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u84Ji; else goto c84Id;
       u84Ji: // global
           call _c84Ib(R1) args: 0, res: 0, upd: 0;
       c84Id: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c84I3: // global
           I64[Sp + 8] = block_c84Iu_info;
           R1 = _s826Z::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u84Jj; else goto c84Iw;
       u84Jj: // global
           call _c84Iu(R1) args: 0, res: 0, upd: 0;
       c84Iw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c84I4: // global
           I64[Sp + 8] = block_c84IN_info;
           R1 = _s826Z::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u84Jk; else goto c84IP;
       u84Jk: // global
           call _c84IN(R1) args: 0, res: 0, upd: 0;
       c84IP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c84Ib() //  [R1]
         { info_tbl: [(c84Ib,
                       label: block_c84Ib_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84Ib: // global
           _c84J6::P64 = R1 & 7;
           if (_c84J6::P64 < 3) goto u84J8; else goto c84Ir;
       u84J8: // global
           if (_c84J6::P64 < 2) goto u84Jc; else goto u84Jb;
       u84Jc: // global
           Sp = Sp + 8;
           call _c84J3() args: 0, res: 0, upd: 0;
       u84Jb: // global
           Sp = Sp + 8;
           call _c84IK() args: 0, res: 0, upd: 0;
       c84Ir: // global
           R1 = 2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c84Iu() //  [R1]
         { info_tbl: [(c84Iu,
                       label: block_c84Iu_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84Iu: // global
           _c84J5::P64 = R1 & 7;
           if (_c84J5::P64 < 3) goto u84J9; else goto u84Jd;
       u84J9: // global
           if (_c84J5::P64 < 2) goto u84Jf; else goto u84Je;
       u84Jf: // global
           Sp = Sp + 8;
           call _c84IZ() args: 0, res: 0, upd: 0;
       u84Je: // global
           Sp = Sp + 8;
           call _c84J3() args: 0, res: 0, upd: 0;
       u84Jd: // global
           Sp = Sp + 8;
           call _c84IK() args: 0, res: 0, upd: 0;
     }
 },
 _c84IK() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84IK: // global
           R1 = 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c84IN() //  [R1]
         { info_tbl: [(c84IN,
                       label: block_c84IN_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84IN: // global
           _c84J4::P64 = R1 & 7;
           if (_c84J4::P64 < 3) goto u84Ja; else goto u84Jg;
       u84Ja: // global
           if (_c84J4::P64 < 2) goto c84IV; else goto u84Jh;
       c84IV: // global
           R1 = (-2);
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u84Jh: // global
           Sp = Sp + 8;
           call _c84IZ() args: 0, res: 0, upd: 0;
       u84Jg: // global
           Sp = Sp + 8;
           call _c84J3() args: 0, res: 0, upd: 0;
     }
 },
 _c84IZ() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84IZ: // global
           R1 = (-1);
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c84J3() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84J3: // global
           R1 = 0;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.815611892 UTC

[section ""data" . GHC.IO.Device.$fIxSeekMode_$cunsafeIndex_closure" {
     GHC.IO.Device.$fIxSeekMode_$cunsafeIndex_closure:
         const GHC.IO.Device.$fIxSeekMode_$cunsafeIndex_info;
 },
 GHC.IO.Device.$fIxSeekMode_$cunsafeIndex_entry() //  [R2, R3]
         { info_tbl: [(c84Ka,
                       label: GHC.IO.Device.$fIxSeekMode_$cunsafeIndex_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84Ka: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c84Ki; else goto c84Kj;
       c84Ki: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fIxSeekMode_$cunsafeIndex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c84Kj: // global
           I64[Sp - 16] = block_c84K7_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u84Ko; else goto c84K8;
       u84Ko: // global
           call _c84K7(R1) args: 0, res: 0, upd: 0;
       c84K8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c84K7() //  [R1]
         { info_tbl: [(c84K7,
                       label: block_c84K7_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84K7: // global
           _s8275::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c84Kd_info;
           R3 = _s8275::P64;
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.IO.Device.$w$cunsafeIndex_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c84Kd() //  [R1]
         { info_tbl: [(c84Kd,
                       label: block_c84Kd_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84Kd: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c84Kn; else goto c84Km;
       c84Kn: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c84Km: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.82445755 UTC

[section ""data" . GHC.IO.Device.$w$cinRange_closure" {
     GHC.IO.Device.$w$cinRange_closure:
         const GHC.IO.Device.$w$cinRange_info;
 },
 GHC.IO.Device.$w$cinRange_entry() //  [R2, R3, R4]
         { info_tbl: [(c84KQ,
                       label: GHC.IO.Device.$w$cinRange_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84KQ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c84KR; else goto c84KS;
       c84KR: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$w$cinRange_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c84KS: // global
           I64[Sp - 24] = block_c84KI_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u84Mc; else goto c84KJ;
       u84Mc: // global
           call _c84KI(R1) args: 0, res: 0, upd: 0;
       c84KJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c84KI() //  [R1]
         { info_tbl: [(c84KI,
                       label: block_c84KI_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84KI: // global
           _s827b::P64 = P64[Sp + 8];
           _c84KP::P64 = R1 & 7;
           if (_c84KP::P64 < 3) goto u84M8; else goto c84KO;
       u84M8: // global
           if (_c84KP::P64 < 2) goto c84KM; else goto c84KN;
       c84KM: // global
           _s827e::I64 = 0;
           goto s827d;
       c84KN: // global
           _s827e::I64 = 1;
           goto s827d;
       c84KO: // global
           _s827e::I64 = 2;
           goto s827d;
       s827d: // global
           I64[Sp] = block_c84KY_info;
           R1 = _s827b::P64;
           I64[Sp + 8] = _s827e::I64;
           if (R1 & 7 != 0) goto u84Mb; else goto c84Lz;
       u84Mb: // global
           call _c84KY(R1) args: 0, res: 0, upd: 0;
       c84Lz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c84KY() //  [R1]
         { info_tbl: [(c84KY,
                       label: block_c84KY_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84KY: // global
           _s827c::P64 = P64[Sp + 16];
           _c84LX::P64 = R1 & 7;
           if (_c84LX::P64 < 3) goto u84M9; else goto c84LN;
       u84M9: // global
           if (_c84LX::P64 < 2) goto c84LF; else goto c84LJ;
       c84LF: // global
           _s827g::I64 = 0;
           goto s827f;
       c84LJ: // global
           _s827g::I64 = 1;
           goto s827f;
       c84LN: // global
           _s827g::I64 = 2;
           goto s827f;
       s827f: // global
           I64[Sp] = block_c84L3_info;
           R1 = _s827c::P64;
           I64[Sp + 16] = _s827g::I64;
           if (R1 & 7 != 0) goto u84Md; else goto c84L5;
       u84Md: // global
           call _c84L3(R1) args: 0, res: 0, upd: 0;
       c84L5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c84L3() //  [R1]
         { info_tbl: [(c84L3,
                       label: block_c84L3_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84L3: // global
           _s827e::I64 = I64[Sp + 8];
           _s827g::I64 = I64[Sp + 16];
           _c84LY::P64 = R1 & 7;
           if (_c84LY::P64 < 3) goto u84Ma; else goto c84Ly;
       u84Ma: // global
           if (_c84LY::P64 < 2) goto c84Lg; else goto c84Lp;
       c84Lg: // global
           if (%MO_S_Lt_W64(0, _s827e::I64)) goto c84Lw; else goto c84Le;
       c84Le: // global
           R1 = I64[(%MO_S_Le_W64(0,
                                  _s827g::I64) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c84Lp: // global
           if (%MO_S_Lt_W64(1, _s827e::I64)) goto c84Lw; else goto c84Lo;
       c84Lo: // global
           R1 = I64[(%MO_S_Le_W64(1,
                                  _s827g::I64) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c84Ly: // global
           if (%MO_S_Lt_W64(2, _s827e::I64)) goto c84Lw; else goto c84Lx;
       c84Lw: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c84Lx: // global
           R1 = I64[(%MO_S_Le_W64(2,
                                  _s827g::I64) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.837094046 UTC

[section ""data" . GHC.IO.Device.$fIxSeekMode_$cinRange_closure" {
     GHC.IO.Device.$fIxSeekMode_$cinRange_closure:
         const GHC.IO.Device.$fIxSeekMode_$cinRange_info;
 },
 GHC.IO.Device.$fIxSeekMode_$cinRange_entry() //  [R2, R3]
         { info_tbl: [(c84MP,
                       label: GHC.IO.Device.$fIxSeekMode_$cinRange_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84MP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c84MQ; else goto c84MR;
       c84MQ: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fIxSeekMode_$cinRange_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c84MR: // global
           I64[Sp - 16] = block_c84MM_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u84MV; else goto c84MN;
       u84MV: // global
           call _c84MM(R1) args: 0, res: 0, upd: 0;
       c84MN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c84MM() //  [R1]
         { info_tbl: [(c84MM,
                       label: block_c84MM_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84MM: // global
           R4 = P64[Sp + 8];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call GHC.IO.Device.$w$cinRange_entry(R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.843020128 UTC

[section ""data" . lvl_r81Zy_closure" {
     lvl_r81Zy_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.845035904 UTC

[section ""data" . lvl1_r81Zz_closure" {
     lvl1_r81Zz_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.846833356 UTC

[section ""data" . lvl2_r81ZA_closure" {
     lvl2_r81ZA_closure:
         const GHC.Types.I#_con_info;
         const 2;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.849922183 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_$cfromEnum_closure" {
     GHC.IO.Device.$fEnumSeekMode_$cfromEnum_closure:
         const GHC.IO.Device.$fEnumSeekMode_$cfromEnum_info;
 },
 GHC.IO.Device.$fEnumSeekMode_$cfromEnum_entry() //  [R2]
         { info_tbl: [(c84Nk,
                       label: GHC.IO.Device.$fEnumSeekMode_$cfromEnum_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84Nk: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c84Nl; else goto c84Nm;
       c84Nl: // global
           R2 = R2;
           R1 = GHC.IO.Device.$fEnumSeekMode_$cfromEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c84Nm: // global
           I64[Sp - 8] = block_c84Nc_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u84Nx; else goto c84Nd;
       u84Nx: // global
           call _c84Nc(R1) args: 0, res: 0, upd: 0;
       c84Nd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c84Nc() //  [R1]
         { info_tbl: [(c84Nc,
                       label: block_c84Nc_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84Nc: // global
           _c84Nj::P64 = R1 & 7;
           if (_c84Nj::P64 < 3) goto u84Nw; else goto c84Ni;
       u84Nw: // global
           if (_c84Nj::P64 < 2) goto c84Ng; else goto c84Nh;
       c84Ng: // global
           R1 = lvl_r81Zy_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c84Nh: // global
           R1 = lvl1_r81Zz_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c84Ni: // global
           R1 = lvl2_r81ZA_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.856605405 UTC

[section ""data" . GHC.IO.Device.$fIxSeekMode_go1_closure" {
     GHC.IO.Device.$fIxSeekMode_go1_closure:
         const GHC.IO.Device.$fIxSeekMode_go1_info;
 },
 sat_s827B_entry() //  [R1]
         { info_tbl: [(c84NX,
                       label: sat_s827B_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84NX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c84NY; else goto c84NZ;
       c84NY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c84NZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s827z::I64 = I64[R1 + 16];
           if (_s827z::I64 != 0) goto c84NV; else goto c84NW;
       c84NV: // global
           R2 = _s827z::I64 + 1;
           Sp = Sp - 16;
           call GHC.IO.Device.$fIxSeekMode_go1_entry(R2) args: 24, res: 0, upd: 24;
       c84NW: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s827y_entry() //  [R1]
         { info_tbl: [(c84O6,
                       label: sat_s827y_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84O6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c84O7; else goto c84O8;
       c84O7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c84O8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.IO.Device.$fIxSeekMode_go1_entry() //  [R2]
         { info_tbl: [(c84Oa,
                       label: GHC.IO.Device.$fIxSeekMode_go1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84Oa: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c84Oe; else goto c84Od;
       c84Oe: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.IO.Device.$fIxSeekMode_go1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c84Od: // global
           I64[Hp - 64] = sat_s827B_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s827y_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.864938745 UTC

[section ""data" . GHC.IO.Device.$fIxSeekMode_go_closure" {
     GHC.IO.Device.$fIxSeekMode_go_closure:
         const GHC.IO.Device.$fIxSeekMode_go_info;
 },
 sat_s827G_entry() //  [R1]
         { info_tbl: [(c84OJ,
                       label: sat_s827G_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84OJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c84OK; else goto c84OL;
       c84OK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c84OL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s827E::I64 = I64[R1 + 16];
           if (_s827E::I64 != 1) goto c84OH; else goto c84OI;
       c84OH: // global
           R2 = _s827E::I64 + 1;
           Sp = Sp - 16;
           call GHC.IO.Device.$fIxSeekMode_go_entry(R2) args: 24, res: 0, upd: 24;
       c84OI: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s827D_entry() //  [R1]
         { info_tbl: [(c84OS,
                       label: sat_s827D_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84OS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c84OT; else goto c84OU;
       c84OT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c84OU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.IO.Device.$fIxSeekMode_go_entry() //  [R2]
         { info_tbl: [(c84OW,
                       label: GHC.IO.Device.$fIxSeekMode_go_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84OW: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c84P0; else goto c84OZ;
       c84P0: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.IO.Device.$fIxSeekMode_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c84OZ: // global
           I64[Hp - 64] = sat_s827G_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s827D_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.87352829 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_go3_closure" {
     GHC.IO.Device.$fEnumSeekMode_go3_closure:
         const GHC.IO.Device.$fEnumSeekMode_go3_info;
 },
 sat_s827L_entry() //  [R1]
         { info_tbl: [(c84Pv,
                       label: sat_s827L_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84Pv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c84Pw; else goto c84Px;
       c84Pw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c84Px: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s827J::I64 = I64[R1 + 16];
           if (_s827J::I64 != 2) goto c84Pt; else goto c84Pu;
       c84Pt: // global
           R2 = _s827J::I64 + 1;
           Sp = Sp - 16;
           call GHC.IO.Device.$fEnumSeekMode_go3_entry(R2) args: 24, res: 0, upd: 24;
       c84Pu: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s827I_entry() //  [R1]
         { info_tbl: [(c84PE,
                       label: sat_s827I_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84PE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c84PF; else goto c84PG;
       c84PF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c84PG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.IO.Device.$fEnumSeekMode_go3_entry() //  [R2]
         { info_tbl: [(c84PI,
                       label: GHC.IO.Device.$fEnumSeekMode_go3_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84PI: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c84PM; else goto c84PL;
       c84PM: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.IO.Device.$fEnumSeekMode_go3_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c84PL: // global
           I64[Hp - 64] = sat_s827L_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s827I_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.881727354 UTC

[section ""data" . GHC.IO.Device.$w$crange_closure" {
     GHC.IO.Device.$w$crange_closure:
         const GHC.IO.Device.$w$crange_info;
 },
 GHC.IO.Device.$w$crange_entry() //  [R2, R3]
         { info_tbl: [(c84Qj,
                       label: GHC.IO.Device.$w$crange_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84Qj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c84Qk; else goto c84Ql;
       c84Qk: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$w$crange_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c84Ql: // global
           I64[Sp - 16] = block_c84Qb_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u84R8; else goto c84Qc;
       u84R8: // global
           call _c84Qb(R1) args: 0, res: 0, upd: 0;
       c84Qc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c84Qb() //  [R1]
         { info_tbl: [(c84Qb,
                       label: block_c84Qb_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84Qb: // global
           _s827N::P64 = P64[Sp + 8];
           _c84Qi::P64 = R1 & 7;
           if (_c84Qi::P64 < 3) goto u84R5; else goto c84Qh;
       u84R5: // global
           if (_c84Qi::P64 < 2) goto c84Qf; else goto c84Qg;
       c84Qf: // global
           _s827P::I64 = 0;
           goto s827O;
       c84Qg: // global
           _s827P::I64 = 1;
           goto s827O;
       c84Qh: // global
           _s827P::I64 = 2;
           goto s827O;
       s827O: // global
           I64[Sp] = block_c84Qp_info;
           R1 = _s827N::P64;
           I64[Sp + 8] = _s827P::I64;
           if (R1 & 7 != 0) goto u84R7; else goto c84Qr;
       u84R7: // global
           call _c84Qp(R1) args: 0, res: 0, upd: 0;
       c84Qr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c84Qp() //  [R1]
         { info_tbl: [(c84Qp,
                       label: block_c84Qp_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84Qp: // global
           _s827P::I64 = I64[Sp + 8];
           _c84R4::P64 = R1 & 7;
           if (_c84R4::P64 < 3) goto u84R6; else goto c84QU;
       u84R6: // global
           if (_c84R4::P64 < 2) goto c84QC; else goto c84QL;
       c84QC: // global
           if (%MO_S_Gt_W64(_s827P::I64, 0)) goto c84QT; else goto c84Qz;
       c84Qz: // global
           R2 = _s827P::I64;
           Sp = Sp + 16;
           call GHC.IO.Device.$fIxSeekMode_go1_entry(R2) args: 8, res: 0, upd: 8;
       c84QL: // global
           if (%MO_S_Gt_W64(_s827P::I64, 1)) goto c84QT; else goto c84QJ;
       c84QJ: // global
           R2 = _s827P::I64;
           Sp = Sp + 16;
           call GHC.IO.Device.$fIxSeekMode_go_entry(R2) args: 8, res: 0, upd: 8;
       c84QU: // global
           if (%MO_S_Gt_W64(_s827P::I64, 2)) goto c84QT; else goto c84QS;
       c84QT: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c84QS: // global
           R2 = _s827P::I64;
           Sp = Sp + 16;
           call GHC.IO.Device.$fEnumSeekMode_go3_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.89119855 UTC

[section ""data" . GHC.IO.Device.$fIxSeekMode_$crange_closure" {
     GHC.IO.Device.$fIxSeekMode_$crange_closure:
         const GHC.IO.Device.$fIxSeekMode_$crange_info;
 },
 GHC.IO.Device.$fIxSeekMode_$crange_entry() //  [R2]
         { info_tbl: [(c84Rw,
                       label: GHC.IO.Device.$fIxSeekMode_$crange_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84Rw: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c84Rx; else goto c84Ry;
       c84Rx: // global
           R2 = R2;
           R1 = GHC.IO.Device.$fIxSeekMode_$crange_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c84Ry: // global
           I64[Sp - 8] = block_c84Rt_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u84RC; else goto c84Ru;
       u84RC: // global
           call _c84Rt(R1) args: 0, res: 0, upd: 0;
       c84Ru: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c84Rt() //  [R1]
         { info_tbl: [(c84Rt,
                       label: block_c84Rt_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84Rt: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.IO.Device.$w$crange_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.897315249 UTC

[section ""data" . GHC.IO.Device.$w$crangeSize_closure" {
     GHC.IO.Device.$w$crangeSize_closure:
         const GHC.IO.Device.$w$crangeSize_info;
 },
 GHC.IO.Device.$w$crangeSize_entry() //  [R2, R3]
         { info_tbl: [(c84RW,
                       label: GHC.IO.Device.$w$crangeSize_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84RW: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c84RX; else goto c84RY;
       c84RX: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$w$crangeSize_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c84RY: // global
           I64[Sp - 24] = block_c84RQ_info;
           R4 = R3;
           _s8280::P64 = R3;
           R3 = R3;
           _s827Z::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s827Z::P64;
           P64[Sp - 8] = _s8280::P64;
           Sp = Sp - 24;
           call GHC.IO.Device.$w$cinRange_entry(R4,
                                                R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _c84RQ() //  [R1]
         { info_tbl: [(c84RQ,
                       label: block_c84RQ_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84RQ: // global
           if (R1 & 7 == 1) goto u84Tf; else goto c84RU;
       u84Tf: // global
           Sp = Sp + 24;
           call _c84T2() args: 0, res: 0, upd: 0;
       c84RU: // global
           _s827Z::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c84S4_info;
           R1 = _s827Z::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u84Tn; else goto c84S6;
       u84Tn: // global
           call _c84S4(R1) args: 0, res: 0, upd: 0;
       c84S6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c84S4() //  [R1]
         { info_tbl: [(c84S4,
                       label: block_c84S4_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84S4: // global
           _s8280::P64 = P64[Sp + 8];
           _c84T7::P64 = R1 & 7;
           if (_c84T7::P64 < 3) goto u84Tb; else goto c84SR;
       u84Tb: // global
           if (_c84T7::P64 < 2) goto c84Sd; else goto c84Sx;
       c84Sd: // global
           I64[Sp + 8] = block_c84Sa_info;
           R1 = _s8280::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u84Tp; else goto c84Se;
       u84Tp: // global
           call _c84Sa(R1) args: 0, res: 0, upd: 0;
       c84Se: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c84Sx: // global
           I64[Sp + 8] = block_c84Sv_info;
           R1 = _s8280::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u84Tq; else goto c84Sy;
       u84Tq: // global
           call _c84Sv(R1) args: 0, res: 0, upd: 0;
       c84Sy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c84SR: // global
           I64[Sp + 8] = block_c84SP_info;
           R1 = _s8280::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u84Tr; else goto c84SS;
       u84Tr: // global
           call _c84SP(R1) args: 0, res: 0, upd: 0;
       c84SS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c84Sa() //  [R1]
         { info_tbl: [(c84Sa,
                       label: block_c84Sa_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84Sa: // global
           _c84Ta::P64 = R1 & 7;
           if (_c84Ta::P64 < 3) goto u84Tc; else goto c84Ss;
       u84Tc: // global
           if (_c84Ta::P64 < 2) goto u84Th; else goto u84Tg;
       u84Th: // global
           Sp = Sp + 8;
           call _c84T6() args: 0, res: 0, upd: 0;
       u84Tg: // global
           Sp = Sp + 8;
           call _c84SM() args: 0, res: 0, upd: 0;
       c84Ss: // global
           R1 = 3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c84Sv() //  [R1]
         { info_tbl: [(c84Sv,
                       label: block_c84Sv_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84Sv: // global
           _c84T9::P64 = R1 & 7;
           if (_c84T9::P64 < 3) goto u84Td; else goto u84Ti;
       u84Td: // global
           if (_c84T9::P64 < 2) goto u84Tk; else goto u84Tj;
       u84Tk: // global
           Sp = Sp + 8;
           call _c84T2() args: 0, res: 0, upd: 0;
       u84Tj: // global
           Sp = Sp + 8;
           call _c84T6() args: 0, res: 0, upd: 0;
       u84Ti: // global
           Sp = Sp + 8;
           call _c84SM() args: 0, res: 0, upd: 0;
     }
 },
 _c84SM() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84SM: // global
           R1 = 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c84SP() //  [R1]
         { info_tbl: [(c84SP,
                       label: block_c84SP_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84SP: // global
           _c84T8::P64 = R1 & 7;
           if (_c84T8::P64 < 3) goto u84Te; else goto u84Tl;
       u84Te: // global
           if (_c84T8::P64 < 2) goto c84SY; else goto u84Tm;
       c84SY: // global
           R1 = (-1);
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u84Tm: // global
           Sp = Sp + 8;
           call _c84T2() args: 0, res: 0, upd: 0;
       u84Tl: // global
           Sp = Sp + 8;
           call _c84T6() args: 0, res: 0, upd: 0;
     }
 },
 _c84T2() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84T2: // global
           R1 = 0;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c84T6() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84T6: // global
           R1 = 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.91363392 UTC

[section ""data" . GHC.IO.Device.$fIxSeekMode_$crangeSize_closure" {
     GHC.IO.Device.$fIxSeekMode_$crangeSize_closure:
         const GHC.IO.Device.$fIxSeekMode_$crangeSize_info;
 },
 GHC.IO.Device.$fIxSeekMode_$crangeSize_entry() //  [R2]
         { info_tbl: [(c84Ul,
                       label: GHC.IO.Device.$fIxSeekMode_$crangeSize_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84Ul: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c84Ut; else goto c84Uu;
       c84Ut: // global
           R2 = R2;
           R1 = GHC.IO.Device.$fIxSeekMode_$crangeSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c84Uu: // global
           I64[Sp - 8] = block_c84Ui_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u84Uz; else goto c84Uj;
       u84Uz: // global
           call _c84Ui(R1) args: 0, res: 0, upd: 0;
       c84Uj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c84Ui() //  [R1]
         { info_tbl: [(c84Ui,
                       label: block_c84Ui_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84Ui: // global
           I64[Sp] = block_c84Uo_info;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.IO.Device.$w$crangeSize_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 _c84Uo() //  [R1]
         { info_tbl: [(c84Uo,
                       label: block_c84Uo_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84Uo: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c84Uy; else goto c84Ux;
       c84Uy: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c84Ux: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.921792202 UTC

[section ""data" . GHC.IO.Device.$w$cunsafeRangeSize_closure" {
     GHC.IO.Device.$w$cunsafeRangeSize_closure:
         const GHC.IO.Device.$w$cunsafeRangeSize_info;
 },
 GHC.IO.Device.$w$cunsafeRangeSize_entry() //  [R2, R3]
         { info_tbl: [(c84UZ,
                       label: GHC.IO.Device.$w$cunsafeRangeSize_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84UZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c84V0; else goto c84V1;
       c84V0: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$w$cunsafeRangeSize_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c84V1: // global
           I64[Sp - 16] = block_c84UR_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u84We; else goto c84US;
       u84We: // global
           call _c84UR(R1) args: 0, res: 0, upd: 0;
       c84US: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c84UR() //  [R1]
         { info_tbl: [(c84UR,
                       label: block_c84UR_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84UR: // global
           _s828c::P64 = P64[Sp + 8];
           _c84UY::P64 = R1 & 7;
           if (_c84UY::P64 < 3) goto u84W0; else goto c84UX;
       u84W0: // global
           if (_c84UY::P64 < 2) goto c84UV; else goto c84UW;
       c84UV: // global
           I64[Sp + 8] = block_c84V4_info;
           R1 = _s828c::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u84Wb; else goto c84V6;
       u84Wb: // global
           call _c84V4(R1) args: 0, res: 0, upd: 0;
       c84V6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c84UW: // global
           I64[Sp + 8] = block_c84Vn_info;
           R1 = _s828c::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u84Wc; else goto c84Vp;
       u84Wc: // global
           call _c84Vn(R1) args: 0, res: 0, upd: 0;
       c84Vp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c84UX: // global
           I64[Sp + 8] = block_c84VG_info;
           R1 = _s828c::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u84Wd; else goto c84VI;
       u84Wd: // global
           call _c84VG(R1) args: 0, res: 0, upd: 0;
       c84VI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c84V4() //  [R1]
         { info_tbl: [(c84V4,
                       label: block_c84V4_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84V4: // global
           _c84VZ::P64 = R1 & 7;
           if (_c84VZ::P64 < 3) goto u84W1; else goto c84Vk;
       u84W1: // global
           if (_c84VZ::P64 < 2) goto u84W5; else goto u84W4;
       u84W5: // global
           Sp = Sp + 8;
           call _c84VW() args: 0, res: 0, upd: 0;
       u84W4: // global
           Sp = Sp + 8;
           call _c84VD() args: 0, res: 0, upd: 0;
       c84Vk: // global
           R1 = 3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c84Vn() //  [R1]
         { info_tbl: [(c84Vn,
                       label: block_c84Vn_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84Vn: // global
           _c84VY::P64 = R1 & 7;
           if (_c84VY::P64 < 3) goto u84W2; else goto u84W6;
       u84W2: // global
           if (_c84VY::P64 < 2) goto u84W8; else goto u84W7;
       u84W8: // global
           Sp = Sp + 8;
           call _c84VS() args: 0, res: 0, upd: 0;
       u84W7: // global
           Sp = Sp + 8;
           call _c84VW() args: 0, res: 0, upd: 0;
       u84W6: // global
           Sp = Sp + 8;
           call _c84VD() args: 0, res: 0, upd: 0;
     }
 },
 _c84VD() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84VD: // global
           R1 = 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c84VG() //  [R1]
         { info_tbl: [(c84VG,
                       label: block_c84VG_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84VG: // global
           _c84VX::P64 = R1 & 7;
           if (_c84VX::P64 < 3) goto u84W3; else goto u84W9;
       u84W3: // global
           if (_c84VX::P64 < 2) goto c84VO; else goto u84Wa;
       c84VO: // global
           R1 = (-1);
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u84Wa: // global
           Sp = Sp + 8;
           call _c84VS() args: 0, res: 0, upd: 0;
       u84W9: // global
           Sp = Sp + 8;
           call _c84VW() args: 0, res: 0, upd: 0;
     }
 },
 _c84VS() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84VS: // global
           R1 = 0;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c84VW() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84VW: // global
           R1 = 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.936974989 UTC

[section ""data" . GHC.IO.Device.$fIxSeekMode_$cunsafeRangeSize_closure" {
     GHC.IO.Device.$fIxSeekMode_$cunsafeRangeSize_closure:
         const GHC.IO.Device.$fIxSeekMode_$cunsafeRangeSize_info;
 },
 GHC.IO.Device.$fIxSeekMode_$cunsafeRangeSize_entry() //  [R2]
         { info_tbl: [(c84X3,
                       label: GHC.IO.Device.$fIxSeekMode_$cunsafeRangeSize_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84X3: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c84Xb; else goto c84Xc;
       c84Xb: // global
           R2 = R2;
           R1 = GHC.IO.Device.$fIxSeekMode_$cunsafeRangeSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c84Xc: // global
           I64[Sp - 8] = block_c84X0_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u84Xh; else goto c84X1;
       u84Xh: // global
           call _c84X0(R1) args: 0, res: 0, upd: 0;
       c84X1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c84X0() //  [R1]
         { info_tbl: [(c84X0,
                       label: block_c84X0_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84X0: // global
           I64[Sp] = block_c84X6_info;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.IO.Device.$w$cunsafeRangeSize_entry(R3,
                                                        R2) args: 8, res: 8, upd: 8;
     }
 },
 _c84X6() //  [R1]
         { info_tbl: [(c84X6,
                       label: block_c84X6_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84X6: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c84Xg; else goto c84Xf;
       c84Xg: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c84Xf: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.944474936 UTC

[section ""data" . GHC.IO.Device.$fIxSeekMode_$cindex_closure" {
     GHC.IO.Device.$fIxSeekMode_$cindex_closure:
         const GHC.IO.Device.$fIxSeekMode_$cindex_info;
         const 0;
 },
 GHC.IO.Device.$fIxSeekMode_$cindex_entry() //  [R2, R3]
         { info_tbl: [(c84XC,
                       label: GHC.IO.Device.$fIxSeekMode_$cindex_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84XC: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c84XD; else goto c84XE;
       c84XD: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fIxSeekMode_$cindex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c84XE: // global
           I64[Sp - 16] = block_c84Xz_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u84Y2; else goto c84XA;
       u84Y2: // global
           call _c84Xz(R1) args: 0, res: 0, upd: 0;
       c84XA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c84Xz() //  [R1]
         { info_tbl: [(c84Xz,
                       label: block_c84Xz_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84Xz: // global
           I64[Sp - 8] = block_c84XH_info;
           R4 = P64[Sp + 8];
           R3 = P64[R1 + 15];
           _s828p::P64 = P64[R1 + 7];
           R2 = _s828p::P64;
           P64[Sp] = _s828p::P64;
           Sp = Sp - 8;
           call GHC.IO.Device.$w$cinRange_entry(R4,
                                                R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _c84XH() //  [R1]
         { info_tbl: [(c84XH,
                       label: block_c84XH_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84XH: // global
           if (R1 & 7 == 1) goto c84XO; else goto c84XX;
       c84XO: // global
           R1 = GHC.Arr.hopelessIndexError_closure;
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c84XX: // global
           _s828n::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c84XR_info;
           R3 = _s828n::P64;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.IO.Device.$w$cunsafeIndex_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c84XR() //  [R1]
         { info_tbl: [(c84XR,
                       label: block_c84XR_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84XR: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c84Y0; else goto c84XZ;
       c84Y0: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c84XZ: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.953415515 UTC

[section ""data" . GHC.IO.Device.$fIxSeekMode_closure" {
     GHC.IO.Device.$fIxSeekMode_closure:
         const GHC.Arr.C:Ix_con_info;
         const GHC.IO.Device.$fOrdSeekMode_closure+1;
         const GHC.IO.Device.$fIxSeekMode_$crange_closure+1;
         const GHC.IO.Device.$fIxSeekMode_$cindex_closure+2;
         const GHC.IO.Device.$fIxSeekMode_$cunsafeIndex_closure+2;
         const GHC.IO.Device.$fIxSeekMode_$cinRange_closure+2;
         const GHC.IO.Device.$fIxSeekMode_$crangeSize_closure+1;
         const GHC.IO.Device.$fIxSeekMode_$cunsafeRangeSize_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.955224691 UTC

[section ""cstring" . lvl3_r81ZB_bytes" {
     lvl3_r81ZB_bytes:
         I8[] [101,114,114,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.957064975 UTC

[section ""data" . lvl4_r81ZC_closure" {
     lvl4_r81ZC_closure:
         const lvl4_r81ZC_info;
         const 0;
         const 0;
         const 0;
 },
 lvl4_r81ZC_entry() //  [R1]
         { info_tbl: [(c84Yu,
                       label: lvl4_r81ZC_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84Yu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c84Yv; else goto c84Yw;
       c84Yv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c84Yw: // global
           (_c84Yr::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c84Yr::I64 == 0) goto c84Yt; else goto c84Ys;
       c84Yt: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c84Ys: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c84Yr::I64;
           R2 = lvl3_r81ZB_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.960799247 UTC

[section ""cstring" . GHC.IO.Device.$trModule4_bytes" {
     GHC.IO.Device.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.96317825 UTC

[section ""data" . lvl5_r81ZD_closure" {
     lvl5_r81ZD_closure:
         const lvl5_r81ZD_info;
         const 0;
         const 0;
         const 0;
 },
 lvl5_r81ZD_entry() //  [R1]
         { info_tbl: [(c84YL,
                       label: lvl5_r81ZD_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84YL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c84YM; else goto c84YN;
       c84YM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c84YN: // global
           (_c84YI::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c84YI::I64 == 0) goto c84YK; else goto c84YJ;
       c84YK: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c84YJ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c84YI::I64;
           R2 = GHC.IO.Device.$trModule4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.966841158 UTC

[section ""cstring" . GHC.IO.Device.$trModule2_bytes" {
     GHC.IO.Device.$trModule2_bytes:
         I8[] [71,72,67,46,73,79,46,68,101,118,105,99,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.96858414 UTC

[section ""data" . lvl6_r81ZE_closure" {
     lvl6_r81ZE_closure:
         const lvl6_r81ZE_info;
         const 0;
         const 0;
         const 0;
 },
 lvl6_r81ZE_entry() //  [R1]
         { info_tbl: [(c84Z2,
                       label: lvl6_r81ZE_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84Z2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c84Z3; else goto c84Z4;
       c84Z3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c84Z4: // global
           (_c84YZ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c84YZ::I64 == 0) goto c84Z1; else goto c84Z0;
       c84Z1: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c84Z0: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c84YZ::I64;
           R2 = GHC.IO.Device.$trModule2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.972240444 UTC

[section ""cstring" . lvl7_r81ZF_bytes" {
     lvl7_r81ZF_bytes:
         I8[] [46,47,71,72,67,47,73,79,47,68,101,118,105,99,101,46,104,115]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.973992849 UTC

[section ""data" . lvl8_r81ZG_closure" {
     lvl8_r81ZG_closure:
         const lvl8_r81ZG_info;
         const 0;
         const 0;
         const 0;
 },
 lvl8_r81ZG_entry() //  [R1]
         { info_tbl: [(c84Zj,
                       label: lvl8_r81ZG_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84Zj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c84Zk; else goto c84Zl;
       c84Zk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c84Zl: // global
           (_c84Zg::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c84Zg::I64 == 0) goto c84Zi; else goto c84Zh;
       c84Zi: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c84Zh: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c84Zg::I64;
           R2 = lvl7_r81ZF_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.978190434 UTC

[section ""data" . lvl9_r81ZH_closure" {
     lvl9_r81ZH_closure:
         const GHC.Types.I#_con_info;
         const 173;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.979752055 UTC

[section ""data" . lvl10_r81ZI_closure" {
     lvl10_r81ZI_closure:
         const GHC.Types.I#_con_info;
         const 16;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.981348659 UTC

[section ""data" . lvl11_r81ZJ_closure" {
     lvl11_r81ZJ_closure:
         const GHC.Types.I#_con_info;
         const 20;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.982934775 UTC

[section ""data" . lvl12_r81ZK_closure" {
     lvl12_r81ZK_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl5_r81ZD_closure;
         const lvl6_r81ZE_closure;
         const lvl8_r81ZG_closure;
         const lvl9_r81ZH_closure+1;
         const lvl10_r81ZI_closure+1;
         const lvl9_r81ZH_closure+1;
         const lvl11_r81ZJ_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.984659946 UTC

[section ""data" . lvl13_r81ZL_closure" {
     lvl13_r81ZL_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl4_r81ZC_closure;
         const lvl12_r81ZK_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.98642139 UTC

[section ""cstring" . lvl14_r81ZM_bytes" {
     lvl14_r81ZM_bytes:
         I8[] [112,114,101,100,123,83,101,101,107,77,111,100,101,125,58,32,116,114,105,101,100,32,116,111,32,116,97,107,101,32,96,112,114,101,100,39,32,111,102,32,102,105,114,115,116,32,116,97,103,32,105,110,32,101,110,117,109,101,114,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.988418441 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode4_closure" {
     GHC.IO.Device.$fEnumSeekMode4_closure:
         const GHC.IO.Device.$fEnumSeekMode4_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Device.$fEnumSeekMode4_entry() //  [R1]
         { info_tbl: [(c84ZH,
                       label: GHC.IO.Device.$fEnumSeekMode4_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84ZH: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c84ZI; else goto c84ZJ;
       c84ZI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c84ZJ: // global
           (_c84ZC::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c84ZC::I64 == 0) goto c84ZE; else goto c84ZD;
       c84ZE: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c84ZD: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c84ZC::I64;
           I64[Sp - 24] = block_c84ZF_info;
           R2 = lvl14_r81ZM_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c84ZF() //  [R1]
         { info_tbl: [(c84ZF,
                       label: block_c84ZF_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c84ZF: // global
           R3 = R1;
           R2 = lvl13_r81ZL_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:09.994739218 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_$cpred_closure" {
     GHC.IO.Device.$fEnumSeekMode_$cpred_closure:
         const GHC.IO.Device.$fEnumSeekMode_$cpred_info;
         const 0;
 },
 GHC.IO.Device.$fEnumSeekMode_$cpred_entry() //  [R2]
         { info_tbl: [(c8509,
                       label: GHC.IO.Device.$fEnumSeekMode_$cpred_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c8509: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c850a; else goto c850b;
       c850a: // global
           R2 = R2;
           R1 = GHC.IO.Device.$fEnumSeekMode_$cpred_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c850b: // global
           I64[Sp - 8] = block_c8501_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u850m; else goto c8502;
       u850m: // global
           call _c8501(R1) args: 0, res: 0, upd: 0;
       c8502: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c8501() //  [R1]
         { info_tbl: [(c8501,
                       label: block_c8501_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c8501: // global
           _c8508::P64 = R1 & 7;
           if (_c8508::P64 < 3) goto u850l; else goto c8507;
       u850l: // global
           if (_c8508::P64 < 2) goto c8505; else goto c8506;
       c8505: // global
           R1 = GHC.IO.Device.$fEnumSeekMode4_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c8506: // global
           R1 = GHC.IO.Device.AbsoluteSeek_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8507: // global
           R1 = GHC.IO.Device.RelativeSeek_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.000047652 UTC

[section ""cstring" . lvl15_r81ZN_bytes" {
     lvl15_r81ZN_bytes:
         I8[] [115,117,99,99,123,83,101,101,107,77,111,100,101,125,58,32,116,114,105,101,100,32,116,111,32,116,97,107,101,32,96,115,117,99,99,39,32,111,102,32,108,97,115,116,32,116,97,103,32,105,110,32,101,110,117,109,101,114,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.001801855 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode5_closure" {
     GHC.IO.Device.$fEnumSeekMode5_closure:
         const GHC.IO.Device.$fEnumSeekMode5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Device.$fEnumSeekMode5_entry() //  [R1]
         { info_tbl: [(c850J,
                       label: GHC.IO.Device.$fEnumSeekMode5_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c850J: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c850K; else goto c850L;
       c850K: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c850L: // global
           (_c850E::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c850E::I64 == 0) goto c850G; else goto c850F;
       c850G: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c850F: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c850E::I64;
           I64[Sp - 24] = block_c850H_info;
           R2 = lvl15_r81ZN_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c850H() //  [R1]
         { info_tbl: [(c850H,
                       label: block_c850H_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c850H: // global
           R3 = R1;
           R2 = lvl13_r81ZL_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.007237253 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_$csucc_closure" {
     GHC.IO.Device.$fEnumSeekMode_$csucc_closure:
         const GHC.IO.Device.$fEnumSeekMode_$csucc_info;
         const 0;
 },
 GHC.IO.Device.$fEnumSeekMode_$csucc_entry() //  [R2]
         { info_tbl: [(c851b,
                       label: GHC.IO.Device.$fEnumSeekMode_$csucc_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c851b: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c851c; else goto c851d;
       c851c: // global
           R2 = R2;
           R1 = GHC.IO.Device.$fEnumSeekMode_$csucc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c851d: // global
           I64[Sp - 8] = block_c8513_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u851o; else goto c8514;
       u851o: // global
           call _c8513(R1) args: 0, res: 0, upd: 0;
       c8514: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c8513() //  [R1]
         { info_tbl: [(c8513,
                       label: block_c8513_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c8513: // global
           _c851a::P64 = R1 & 7;
           if (_c851a::P64 < 3) goto u851n; else goto c8519;
       u851n: // global
           if (_c851a::P64 < 2) goto c8517; else goto c8518;
       c8517: // global
           R1 = GHC.IO.Device.RelativeSeek_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8518: // global
           R1 = GHC.IO.Device.SeekFromEnd_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8519: // global
           R1 = GHC.IO.Device.$fEnumSeekMode5_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.014102279 UTC

[section ""cstring" . lvl16_r81ZO_bytes" {
     lvl16_r81ZO_bytes:
         I8[] [41,32,105,115,32,111,117,116,115,105,100,101,32,111,102,32,101,110,117,109,101,114,97,116,105,111,110,39,115,32,114,97,110,103,101,32,40,48,44]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.015623494 UTC

[section ""cstring" . lvl17_r81ZP_bytes" {
     lvl17_r81ZP_bytes:
         I8[] [41]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.017455932 UTC

[section ""data" . lvl18_r81ZQ_closure" {
     lvl18_r81ZQ_closure:
         const lvl18_r81ZQ_info;
         const 0;
         const 0;
         const 0;
 },
 lvl18_r81ZQ_entry() //  [R1]
         { info_tbl: [(c851K,
                       label: lvl18_r81ZQ_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c851K: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c851L; else goto c851M;
       c851L: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c851M: // global
           (_c851H::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c851H::I64 == 0) goto c851J; else goto c851I;
       c851J: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c851I: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c851H::I64;
           R2 = lvl17_r81ZP_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.021512506 UTC

[section ""data" . lvl19_r81ZR_closure" {
     lvl19_r81ZR_closure:
         const lvl19_r81ZR_info;
         const 0;
         const 0;
         const 0;
 },
 lvl19_r81ZR_entry() //  [R1]
         { info_tbl: [(c8523,
                       label: lvl19_r81ZR_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c8523: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8524; else goto c8525;
       c8524: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8525: // global
           (_c851X::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c851X::I64 == 0) goto c851Z; else goto c851Y;
       c851Z: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c851Y: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c851X::I64;
           I64[Sp - 24] = block_c8520_info;
           R4 = lvl18_r81ZQ_closure;
           R3 = 2;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _c8520() //  [R1, R2]
         { info_tbl: [(c8520,
                       label: block_c8520_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c8520: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8528; else goto c8527;
       c8528: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c8527: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.027792387 UTC

[section ""data" . lvl20_r81ZS_closure" {
     lvl20_r81ZS_closure:
         const lvl20_r81ZS_info;
         const 0;
         const 0;
         const 0;
 },
 lvl20_r81ZS_entry() //  [R1]
         { info_tbl: [(c852q,
                       label: lvl20_r81ZS_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c852q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c852r; else goto c852s;
       c852r: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c852s: // global
           (_c852n::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c852n::I64 == 0) goto c852p; else goto c852o;
       c852p: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c852o: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c852n::I64;
           R3 = lvl19_r81ZR_closure;
           R2 = lvl16_r81ZO_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.031423112 UTC

[section ""cstring" . lvl21_r81ZT_bytes" {
     lvl21_r81ZT_bytes:
         I8[] [116,111,69,110,117,109,123,83,101,101,107,77,111,100,101,125,58,32,116,97,103,32,40]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.033545351 UTC

[section ""data" . GHC.IO.Device.$wlvl_closure" {
     GHC.IO.Device.$wlvl_closure:
         const GHC.IO.Device.$wlvl_info;
         const 0;
 },
 sat_s828G_entry() //  [R1]
         { info_tbl: [(c852M,
                       label: sat_s828G_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c852M: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c852N; else goto c852O;
       c852N: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c852O: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c852J_info;
           R4 = lvl20_r81ZS_closure;
           R3 = I64[R1 + 16];
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _c852J() //  [R1, R2]
         { info_tbl: [(c852J,
                       label: block_c852J_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c852J: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c852R; else goto c852Q;
       c852R: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c852Q: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.IO.Device.$wlvl_entry() //  [R2]
         { info_tbl: [(c852U,
                       label: GHC.IO.Device.$wlvl_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c852U: // global
           _s828C::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c852V; else goto c852W;
       c852W: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c852Y; else goto c852X;
       c852Y: // global
           HpAlloc = 24;
           goto c852V;
       c852V: // global
           R2 = _s828C::I64;
           R1 = GHC.IO.Device.$wlvl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c852X: // global
           I64[Hp - 16] = sat_s828G_info;
           I64[Hp] = _s828C::I64;
           I64[Sp - 8] = block_c852S_info;
           R3 = Hp - 16;
           R2 = lvl21_r81ZT_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c852S() //  [R1]
         { info_tbl: [(c852S,
                       label: block_c852S_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c852S: // global
           R3 = R1;
           R2 = lvl13_r81ZL_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.042746739 UTC

[section ""data" . GHC.IO.Device.$w$ctoEnum_closure" {
     GHC.IO.Device.$w$ctoEnum_closure:
         const GHC.IO.Device.$w$ctoEnum_info;
         const 0;
 },
 GHC.IO.Device.$w$ctoEnum_entry() //  [R2]
         { info_tbl: [(c853r,
                       label: GHC.IO.Device.$w$ctoEnum_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c853r: // global
           _s828I::I64 = R2;
           if (%MO_S_Lt_W64(R2, 0)) goto c853z; else goto c853q;
       c853q: // global
           if (%MO_S_Gt_W64(_s828I::I64, 2)) goto c853z; else goto c853A;
       c853z: // global
           R2 = _s828I::I64;
           call GHC.IO.Device.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
       c853A: // global
           R1 = I64[(_s828I::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.046630699 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_$ctoEnum_closure" {
     GHC.IO.Device.$fEnumSeekMode_$ctoEnum_closure:
         const GHC.IO.Device.$fEnumSeekMode_$ctoEnum_info;
         const 0;
 },
 GHC.IO.Device.$fEnumSeekMode_$ctoEnum_entry() //  [R2]
         { info_tbl: [(c853O,
                       label: GHC.IO.Device.$fEnumSeekMode_$ctoEnum_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c853O: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c853P; else goto c853Q;
       c853P: // global
           R2 = R2;
           R1 = GHC.IO.Device.$fEnumSeekMode_$ctoEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c853Q: // global
           I64[Sp - 8] = block_c853L_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u853U; else goto c853M;
       u853U: // global
           call _c853L(R1) args: 0, res: 0, upd: 0;
       c853M: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c853L() //  [R1]
         { info_tbl: [(c853L,
                       label: block_c853L_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c853L: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.IO.Device.$w$ctoEnum_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.051833664 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode3_closure" {
     GHC.IO.Device.$fEnumSeekMode3_closure:
         const GHC.IO.Device.$fEnumSeekMode3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Device.$fEnumSeekMode3_entry() //  [R1]
         { info_tbl: [(c854a,
                       label: GHC.IO.Device.$fEnumSeekMode3_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c854a: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c854b; else goto c854c;
       c854b: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c854c: // global
           (_c8547::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8547::I64 == 0) goto c8549; else goto c8548;
       c8549: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8548: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8547::I64;
           R2 = 0;
           Sp = Sp - 16;
           call GHC.IO.Device.$fEnumSeekMode_go3_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.05570803 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode2_closure" {
     GHC.IO.Device.$fEnumSeekMode2_closure:
         const GHC.IO.Device.$fEnumSeekMode2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Device.$fEnumSeekMode2_entry() //  [R1]
         { info_tbl: [(c854q,
                       label: GHC.IO.Device.$fEnumSeekMode2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c854q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c854r; else goto c854s;
       c854r: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c854s: // global
           (_c854n::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c854n::I64 == 0) goto c854p; else goto c854o;
       c854p: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c854o: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c854n::I64;
           R2 = 1;
           Sp = Sp - 16;
           call GHC.IO.Device.$fEnumSeekMode_go3_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.060149279 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode1_closure" {
     GHC.IO.Device.$fEnumSeekMode1_closure:
         const GHC.IO.Device.$fEnumSeekMode1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Device.$fEnumSeekMode1_entry() //  [R1]
         { info_tbl: [(c854G,
                       label: GHC.IO.Device.$fEnumSeekMode1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c854G: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c854H; else goto c854I;
       c854H: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c854I: // global
           (_c854D::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c854D::I64 == 0) goto c854F; else goto c854E;
       c854F: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c854E: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c854D::I64;
           R2 = 2;
           Sp = Sp - 16;
           call GHC.IO.Device.$fEnumSeekMode_go3_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.064145325 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_$cenumFrom_closure" {
     GHC.IO.Device.$fEnumSeekMode_$cenumFrom_closure:
         const GHC.IO.Device.$fEnumSeekMode_$cenumFrom_info;
         const 0;
 },
 GHC.IO.Device.$fEnumSeekMode_$cenumFrom_entry() //  [R2]
         { info_tbl: [(c8552,
                       label: GHC.IO.Device.$fEnumSeekMode_$cenumFrom_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c8552: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8553; else goto c8554;
       c8553: // global
           R2 = R2;
           R1 = GHC.IO.Device.$fEnumSeekMode_$cenumFrom_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8554: // global
           I64[Sp - 8] = block_c854U_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u855f; else goto c854V;
       u855f: // global
           call _c854U(R1) args: 0, res: 0, upd: 0;
       c854V: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c854U() //  [R1]
         { info_tbl: [(c854U,
                       label: block_c854U_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c854U: // global
           _c8551::P64 = R1 & 7;
           if (_c8551::P64 < 3) goto u855e; else goto c8550;
       u855e: // global
           if (_c8551::P64 < 2) goto c854Y; else goto c854Z;
       c854Y: // global
           R1 = GHC.IO.Device.$fEnumSeekMode3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c854Z: // global
           R1 = GHC.IO.Device.$fEnumSeekMode2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c8550: // global
           R1 = GHC.IO.Device.$fEnumSeekMode1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.075930521 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_$cenumFromThen_closure" {
     GHC.IO.Device.$fEnumSeekMode_$cenumFromThen_closure:
         const GHC.IO.Device.$fEnumSeekMode_$cenumFromThen_info;
 },
 sat_s8297_entry() //  [R1]
         { info_tbl: [(c856e,
                       label: sat_s8297_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c856e: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c856f; else goto c856g;
       c856f: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c856g: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s8292_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s8295_entry() //  [R1]
         { info_tbl: [(c856l,
                       label: sat_s8295_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c856l: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c856m; else goto c856n;
       c856m: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c856n: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s8298_entry() //  [R1]
         { info_tbl: [(c856t,
                       label: sat_s8298_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c856t: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c856u; else goto c856v;
       c856u: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c856v: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_dn_s8292_entry() //  [R1, R2]
         { info_tbl: [(c856z,
                       label: go_dn_s8292_info
                       rep:HeapRep 2 nonptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c856z: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c856D; else goto c856C;
       c856D: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c856C: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c856x; else goto c856y;
       c856x: // global
           _s8290::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s8297_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s8290::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s8295_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c856y: // global
           I64[Hp - 80] = sat_s8298_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c856F::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c856F::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s8299_entry() //  [R1]
         { info_tbl: [(c856G,
                       label: sat_s8299_info
                       rep:HeapRep 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c856G: // global
           _s8299::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c856H; else goto c856I;
       c856I: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c856K; else goto c856J;
       c856K: // global
           HpAlloc = 24;
           goto c856H;
       c856H: // global
           R1 = _s8299::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c856J: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s8299::P64;
           _s828V::I64 = I64[_s8299::P64 + 24];
           _s8290::I64 = _s828V::I64 - I64[_s8299::P64 + 16];
           I64[Hp - 16] = go_dn_s8292_info;
           I64[Hp - 8] = _s8290::I64;
           I64[Hp] = 2 - _s8290::I64;
           R2 = _s828V::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s8292_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s828Z_entry() //  [R1]
         { info_tbl: [(c856P,
                       label: sat_s828Z_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c856P: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c856Q; else goto c856R;
       c856Q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c856R: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s829b_entry() //  [R1]
         { info_tbl: [(c8570,
                       label: sat_s829b_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c8570: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8571; else goto c8572;
       c8571: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8572: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s829l_entry() //  [R1]
         { info_tbl: [(c857v,
                       label: sat_s829l_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c857v: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c857w; else goto c857x;
       c857w: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c857x: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s829g_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s829j_entry() //  [R1]
         { info_tbl: [(c857C,
                       label: sat_s829j_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c857C: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c857D; else goto c857E;
       c857D: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c857E: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s829m_entry() //  [R1]
         { info_tbl: [(c857K,
                       label: sat_s829m_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c857K: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c857L; else goto c857M;
       c857L: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c857M: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_up_s829g_entry() //  [R1, R2]
         { info_tbl: [(c857Q,
                       label: go_up_s829g_info
                       rep:HeapRep 2 nonptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c857Q: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c857U; else goto c857T;
       c857U: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c857T: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c857O; else goto c857P;
       c857O: // global
           _s829e::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s829l_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s829e::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s829j_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c857P: // global
           I64[Hp - 80] = sat_s829m_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c857W::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c857W::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s829n_entry() //  [R1]
         { info_tbl: [(c857X,
                       label: sat_s829n_info
                       rep:HeapRep 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c857X: // global
           _s829n::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c857Y; else goto c857Z;
       c857Z: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8581; else goto c8580;
       c8581: // global
           HpAlloc = 24;
           goto c857Y;
       c857Y: // global
           R1 = _s829n::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8580: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s829n::P64;
           _s828V::I64 = I64[_s829n::P64 + 24];
           _s829e::I64 = _s828V::I64 - I64[_s829n::P64 + 16];
           I64[Hp - 16] = go_up_s829g_info;
           I64[Hp - 8] = _s829e::I64;
           I64[Hp] = 2 - _s829e::I64;
           R2 = _s828V::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s829g_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s829d_entry() //  [R1]
         { info_tbl: [(c8586,
                       label: sat_s829d_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c8586: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8587; else goto c8588;
       c8587: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8588: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s829p_entry() //  [R1]
         { info_tbl: [(c858h,
                       label: sat_s829p_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c858h: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c858i; else goto c858j;
       c858i: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c858j: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s829A_entry() //  [R1]
         { info_tbl: [(c858P,
                       label: sat_s829A_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c858P: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c858Q; else goto c858R;
       c858Q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c858R: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s829v_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s829y_entry() //  [R1]
         { info_tbl: [(c858W,
                       label: sat_s829y_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c858W: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c858X; else goto c858Y;
       c858X: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c858Y: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s829B_entry() //  [R1]
         { info_tbl: [(c8594,
                       label: sat_s829B_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c8594: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8595; else goto c8596;
       c8595: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8596: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_dn_s829v_entry() //  [R1, R2]
         { info_tbl: [(c859a,
                       label: go_dn_s829v_info
                       rep:HeapRep 2 nonptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c859a: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c859e; else goto c859d;
       c859e: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c859d: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c8598; else goto c8599;
       c8598: // global
           _s829t::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s829A_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s829t::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s829y_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8599: // global
           I64[Hp - 80] = sat_s829B_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c859g::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c859g::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s829C_entry() //  [R1]
         { info_tbl: [(c859h,
                       label: sat_s829C_info
                       rep:HeapRep 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c859h: // global
           _s829C::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c859i; else goto c859j;
       c859j: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c859l; else goto c859k;
       c859l: // global
           HpAlloc = 24;
           goto c859i;
       c859i: // global
           R1 = _s829C::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c859k: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s829C::P64;
           _s828V::I64 = I64[_s829C::P64 + 24];
           _s829t::I64 = _s828V::I64 - I64[_s829C::P64 + 16];
           I64[Hp - 16] = go_dn_s829v_info;
           I64[Hp - 8] = _s829t::I64;
           I64[Hp] = 0 - _s829t::I64;
           R2 = _s828V::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s829v_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s829s_entry() //  [R1]
         { info_tbl: [(c859q,
                       label: sat_s829s_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c859q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c859r; else goto c859s;
       c859r: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c859s: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s829E_entry() //  [R1]
         { info_tbl: [(c859B,
                       label: sat_s829E_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c859B: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c859C; else goto c859D;
       c859C: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c859D: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s829O_entry() //  [R1]
         { info_tbl: [(c85a6,
                       label: sat_s829O_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85a6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85a7; else goto c85a8;
       c85a7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85a8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s829J_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s829M_entry() //  [R1]
         { info_tbl: [(c85ad,
                       label: sat_s829M_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85ad: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85ae; else goto c85af;
       c85ae: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85af: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s829P_entry() //  [R1]
         { info_tbl: [(c85al,
                       label: sat_s829P_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85al: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85am; else goto c85an;
       c85am: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85an: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_up_s829J_entry() //  [R1, R2]
         { info_tbl: [(c85ar,
                       label: go_up_s829J_info
                       rep:HeapRep 2 nonptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85ar: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c85av; else goto c85au;
       c85av: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c85au: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c85ap; else goto c85aq;
       c85ap: // global
           _s829H::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s829O_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s829H::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s829M_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c85aq: // global
           I64[Hp - 80] = sat_s829P_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c85ax::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c85ax::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s829Q_entry() //  [R1]
         { info_tbl: [(c85ay,
                       label: sat_s829Q_info
                       rep:HeapRep 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85ay: // global
           _s829Q::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c85az; else goto c85aA;
       c85aA: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c85aC; else goto c85aB;
       c85aC: // global
           HpAlloc = 24;
           goto c85az;
       c85az: // global
           R1 = _s829Q::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85aB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s829Q::P64;
           _s828V::I64 = I64[_s829Q::P64 + 24];
           _s829H::I64 = _s828V::I64 - I64[_s829Q::P64 + 16];
           I64[Hp - 16] = go_up_s829J_info;
           I64[Hp - 8] = _s829H::I64;
           I64[Hp] = 0 - _s829H::I64;
           R2 = _s828V::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s829J_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s829G_entry() //  [R1]
         { info_tbl: [(c85aH,
                       label: sat_s829G_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85aH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85aI; else goto c85aJ;
       c85aI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85aJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s829S_entry() //  [R1]
         { info_tbl: [(c85aS,
                       label: sat_s829S_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85aS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85aT; else goto c85aU;
       c85aT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85aU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.IO.Device.$fEnumSeekMode_$cenumFromThen_entry() //  [R2, R3]
         { info_tbl: [(c85b3,
                       label: GHC.IO.Device.$fEnumSeekMode_$cenumFromThen_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85b3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85b4; else goto c85b5;
       c85b4: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fEnumSeekMode_$cenumFromThen_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c85b5: // global
           I64[Sp - 16] = block_c85aV_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u85cn; else goto c85aW;
       u85cn: // global
           call _c85aV(R1) args: 0, res: 0, upd: 0;
       c85aW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c85aV() //  [R1]
         { info_tbl: [(c85aV,
                       label: block_c85aV_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85aV: // global
           _s828R::P64 = P64[Sp + 8];
           _c85b2::P64 = R1 & 7;
           if (_c85b2::P64 < 3) goto u85cf; else goto c85b1;
       u85cf: // global
           if (_c85b2::P64 < 2) goto c85aZ; else goto c85b0;
       c85aZ: // global
           _s828T::I64 = 0;
           goto s828S;
       c85b0: // global
           _s828T::I64 = 1;
           goto s828S;
       c85b1: // global
           _s828T::I64 = 2;
           goto s828S;
       s828S: // global
           I64[Sp] = block_c85b6_info;
           R1 = _s828R::P64;
           I64[Sp + 8] = _s828T::I64;
           if (R1 & 7 != 0) goto u85cm; else goto c85bQ;
       u85cm: // global
           call _c85b6(R1) args: 0, res: 0, upd: 0;
       c85bQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c85b6() //  [R1]
         { info_tbl: [(c85b6,
                       label: block_c85b6_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85b6: // global
           _c85ce::P64 = R1 & 7;
           if (_c85ce::P64 < 3) goto u85cg; else goto c85c4;
       u85cg: // global
           if (_c85ce::P64 < 2) goto c85bW; else goto c85c0;
       c85bW: // global
           I64[Sp] = 0;
           goto u85cq;
       c85c0: // global
           I64[Sp] = 1;
           goto u85cq;
       c85c4: // global
           I64[Sp] = 2;
           goto u85cq;
       u85cq: // global
           call _c855F() args: 0, res: 0, upd: 0;
     }
 },
 _c855F() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c855F: // global
           Hp = Hp + 80;
           _s828V::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c85ba; else goto c85b9;
       c85ba: // global
           HpAlloc = 80;
           I64[Sp] = block_c855E_info;
           R1 = _s828V::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c85b9: // global
           _s828T::I64 = I64[Sp + 8];
           if (%MO_S_Le_W64(_s828T::I64,
                            _s828V::I64)) goto c85bv; else goto c85bP;
       c85bv: // global
           if (%MO_S_Lt_W64(_s828V::I64,
                            _s828T::I64)) goto c85bk; else goto c85bt;
       c85bk: // global
           if (%MO_S_Le_W64(2, _s828V::I64)) goto c85bd; else goto c85bi;
       c85bd: // global
           I64[Hp - 72] = sat_s8299_info;
           I64[Hp - 56] = _s828T::I64;
           I64[Hp - 48] = _s828V::I64;
           I64[Hp - 40] = sat_s828Z_info;
           I64[Hp - 24] = _s828T::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c85bi: // global
           if (%MO_S_Gt_W64(2, _s828T::I64)) goto c85bM; else goto c85bg;
       c85bg: // global
           I64[Hp - 72] = sat_s829b_info;
           I64[Hp - 56] = _s828T::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c85be::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c85be::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c85bt: // global
           if (%MO_S_Ge_W64(2, _s828V::I64)) goto c85bn; else goto c85bs;
       c85bn: // global
           I64[Hp - 72] = sat_s829n_info;
           I64[Hp - 56] = _s828T::I64;
           I64[Hp - 48] = _s828V::I64;
           I64[Hp - 40] = sat_s829d_info;
           I64[Hp - 24] = _s828T::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c85bs: // global
           if (%MO_S_Lt_W64(2, _s828T::I64)) goto c85bM; else goto c85bq;
       c85bq: // global
           I64[Hp - 72] = sat_s829p_info;
           I64[Hp - 56] = _s828T::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c85bo::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c85bo::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c85bP: // global
           if (%MO_S_Lt_W64(_s828V::I64,
                            _s828T::I64)) goto c85bF; else goto c85bO;
       c85bF: // global
           if (%MO_S_Le_W64(0, _s828V::I64)) goto c85by; else goto c85bD;
       c85by: // global
           I64[Hp - 72] = sat_s829C_info;
           I64[Hp - 56] = _s828T::I64;
           I64[Hp - 48] = _s828V::I64;
           I64[Hp - 40] = sat_s829s_info;
           I64[Hp - 24] = _s828T::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c85bD: // global
           if (%MO_S_Gt_W64(0, _s828T::I64)) goto c85bM; else goto c85bB;
       c85bB: // global
           I64[Hp - 72] = sat_s829E_info;
           I64[Hp - 56] = _s828T::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c85bz::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c85bz::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c85bO: // global
           if (%MO_S_Ge_W64(0, _s828V::I64)) goto c85bI; else goto c85bN;
       c85bI: // global
           I64[Hp - 72] = sat_s829Q_info;
           I64[Hp - 56] = _s828T::I64;
           I64[Hp - 48] = _s828V::I64;
           I64[Hp - 40] = sat_s829G_info;
           I64[Hp - 24] = _s828T::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c85bN: // global
           if (%MO_S_Lt_W64(0, _s828T::I64)) goto c85bM; else goto c85bL;
       c85bM: // global
           Hp = Hp - 80;
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c85bL: // global
           I64[Hp - 72] = sat_s829S_info;
           I64[Hp - 56] = _s828T::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c85bJ::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c85bJ::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c855E() //  [R1]
         { info_tbl: [(c855E,
                       label: block_c855E_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c855E: // global
           I64[Sp] = R1;
           call _c855F() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.151235284 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_go2_closure" {
     GHC.IO.Device.$fEnumSeekMode_go2_closure:
         const GHC.IO.Device.$fEnumSeekMode_go2_info;
         const 0;
 },
 sat_s82a1_entry() //  [R1]
         { info_tbl: [(c85gc,
                       label: sat_s82a1_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85gc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85gd; else goto c85ge;
       c85gd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85ge: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s829Z::I64 = I64[R1 + 16];
           if (_s829Z::I64 != 0) goto c85ga; else goto c85gb;
       c85ga: // global
           R2 = _s829Z::I64 + 1;
           Sp = Sp - 16;
           call GHC.IO.Device.$fEnumSeekMode_go2_entry(R2) args: 24, res: 0, upd: 24;
       c85gb: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s829Y_entry() //  [R1]
         { info_tbl: [(c85gq,
                       label: sat_s829Y_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85gq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85gr; else goto c85gz;
       c85gr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85gz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s829V::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s829V::I64, 0)) goto c85gx; else goto c85gp;
       c85gp: // global
           if (%MO_S_Gt_W64(_s829V::I64, 2)) goto c85gx; else goto c85gy;
       c85gx: // global
           R2 = _s829V::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c85gy: // global
           R1 = I64[(_s829V::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.IO.Device.$fEnumSeekMode_go2_entry() //  [R2]
         { info_tbl: [(c85gB,
                       label: GHC.IO.Device.$fEnumSeekMode_go2_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85gB: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c85gF; else goto c85gE;
       c85gF: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.IO.Device.$fEnumSeekMode_go2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c85gE: // global
           I64[Hp - 64] = sat_s82a1_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s829Y_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.162411982 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_go1_closure" {
     GHC.IO.Device.$fEnumSeekMode_go1_closure:
         const GHC.IO.Device.$fEnumSeekMode_go1_info;
         const 0;
 },
 sat_s82a8_entry() //  [R1]
         { info_tbl: [(c85ha,
                       label: sat_s82a8_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85ha: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85hb; else goto c85hc;
       c85hb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85hc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82a6::I64 = I64[R1 + 16];
           if (_s82a6::I64 != 1) goto c85h8; else goto c85h9;
       c85h8: // global
           R2 = _s82a6::I64 + 1;
           Sp = Sp - 16;
           call GHC.IO.Device.$fEnumSeekMode_go1_entry(R2) args: 24, res: 0, upd: 24;
       c85h9: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82a5_entry() //  [R1]
         { info_tbl: [(c85ho,
                       label: sat_s82a5_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85ho: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85hp; else goto c85hx;
       c85hp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85hx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82a2::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82a2::I64, 0)) goto c85hv; else goto c85hn;
       c85hn: // global
           if (%MO_S_Gt_W64(_s82a2::I64, 2)) goto c85hv; else goto c85hw;
       c85hv: // global
           R2 = _s82a2::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c85hw: // global
           R1 = I64[(_s82a2::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.IO.Device.$fEnumSeekMode_go1_entry() //  [R2]
         { info_tbl: [(c85hz,
                       label: GHC.IO.Device.$fEnumSeekMode_go1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85hz: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c85hD; else goto c85hC;
       c85hD: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.IO.Device.$fEnumSeekMode_go1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c85hC: // global
           I64[Hp - 64] = sat_s82a8_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s82a5_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.17075858 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_go_closure" {
     GHC.IO.Device.$fEnumSeekMode_go_closure:
         const GHC.IO.Device.$fEnumSeekMode_go_info;
         const 0;
 },
 sat_s82af_entry() //  [R1]
         { info_tbl: [(c85i8,
                       label: sat_s82af_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85i8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85i9; else goto c85ia;
       c85i9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85ia: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82ad::I64 = I64[R1 + 16];
           if (_s82ad::I64 != 2) goto c85i6; else goto c85i7;
       c85i6: // global
           R2 = _s82ad::I64 + 1;
           Sp = Sp - 16;
           call GHC.IO.Device.$fEnumSeekMode_go_entry(R2) args: 24, res: 0, upd: 24;
       c85i7: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82ac_entry() //  [R1]
         { info_tbl: [(c85im,
                       label: sat_s82ac_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85im: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85in; else goto c85iv;
       c85in: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85iv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82a9::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82a9::I64, 0)) goto c85it; else goto c85il;
       c85il: // global
           if (%MO_S_Gt_W64(_s82a9::I64, 2)) goto c85it; else goto c85iu;
       c85it: // global
           R2 = _s82a9::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c85iu: // global
           R1 = I64[(_s82a9::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.IO.Device.$fEnumSeekMode_go_entry() //  [R2]
         { info_tbl: [(c85ix,
                       label: GHC.IO.Device.$fEnumSeekMode_go_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85ix: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c85iB; else goto c85iA;
       c85iB: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.IO.Device.$fEnumSeekMode_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c85iA: // global
           I64[Hp - 64] = sat_s82af_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s82ac_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.179355794 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_$cenumFromTo_closure" {
     GHC.IO.Device.$fEnumSeekMode_$cenumFromTo_closure:
         const GHC.IO.Device.$fEnumSeekMode_$cenumFromTo_info;
         const 0;
 },
 GHC.IO.Device.$fEnumSeekMode_$cenumFromTo_entry() //  [R2, R3]
         { info_tbl: [(c85j8,
                       label: GHC.IO.Device.$fEnumSeekMode_$cenumFromTo_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85j8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85j9; else goto c85ja;
       c85j9: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fEnumSeekMode_$cenumFromTo_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c85ja: // global
           I64[Sp - 16] = block_c85j0_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u85jX; else goto c85j1;
       u85jX: // global
           call _c85j0(R1) args: 0, res: 0, upd: 0;
       c85j1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c85j0() //  [R1]
         { info_tbl: [(c85j0,
                       label: block_c85j0_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85j0: // global
           _s82ah::P64 = P64[Sp + 8];
           _c85j7::P64 = R1 & 7;
           if (_c85j7::P64 < 3) goto u85jU; else goto c85j6;
       u85jU: // global
           if (_c85j7::P64 < 2) goto c85j4; else goto c85j5;
       c85j4: // global
           _s82aj::I64 = 0;
           goto s82ai;
       c85j5: // global
           _s82aj::I64 = 1;
           goto s82ai;
       c85j6: // global
           _s82aj::I64 = 2;
           goto s82ai;
       s82ai: // global
           I64[Sp] = block_c85je_info;
           R1 = _s82ah::P64;
           I64[Sp + 8] = _s82aj::I64;
           if (R1 & 7 != 0) goto u85jW; else goto c85jg;
       u85jW: // global
           call _c85je(R1) args: 0, res: 0, upd: 0;
       c85jg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c85je() //  [R1]
         { info_tbl: [(c85je,
                       label: block_c85je_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85je: // global
           _s82aj::I64 = I64[Sp + 8];
           _c85jT::P64 = R1 & 7;
           if (_c85jT::P64 < 3) goto u85jV; else goto c85jJ;
       u85jV: // global
           if (_c85jT::P64 < 2) goto c85jr; else goto c85jA;
       c85jr: // global
           if (%MO_S_Gt_W64(_s82aj::I64, 0)) goto c85jI; else goto c85jo;
       c85jo: // global
           R2 = _s82aj::I64;
           Sp = Sp + 16;
           call GHC.IO.Device.$fEnumSeekMode_go2_entry(R2) args: 8, res: 0, upd: 8;
       c85jA: // global
           if (%MO_S_Gt_W64(_s82aj::I64, 1)) goto c85jI; else goto c85jy;
       c85jy: // global
           R2 = _s82aj::I64;
           Sp = Sp + 16;
           call GHC.IO.Device.$fEnumSeekMode_go1_entry(R2) args: 8, res: 0, upd: 8;
       c85jJ: // global
           if (%MO_S_Gt_W64(_s82aj::I64, 2)) goto c85jI; else goto c85jH;
       c85jI: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c85jH: // global
           R2 = _s82aj::I64;
           Sp = Sp + 16;
           call GHC.IO.Device.$fEnumSeekMode_go_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.198502196 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_$cenumFromThenTo_closure" {
     GHC.IO.Device.$fEnumSeekMode_$cenumFromThenTo_closure:
         const GHC.IO.Device.$fEnumSeekMode_$cenumFromThenTo_info;
         const 0;
 },
 sat_s82aL_entry() //  [R1]
         { info_tbl: [(c85l1,
                       label: sat_s82aL_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85l1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85l2; else goto c85l3;
       c85l2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85l3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s82aE_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82aJ_entry() //  [R1]
         { info_tbl: [(c85ld,
                       label: sat_s82aJ_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85ld: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85le; else goto c85lm;
       c85le: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85lm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82aF::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82aF::I64, 0)) goto c85lk; else goto c85lc;
       c85lc: // global
           if (%MO_S_Gt_W64(_s82aF::I64, 2)) goto c85lk; else goto c85ll;
       c85lk: // global
           R2 = _s82aF::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c85ll: // global
           R1 = I64[(_s82aF::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82aO_entry() //  [R1]
         { info_tbl: [(c85lx,
                       label: sat_s82aO_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85lx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85ly; else goto c85lG;
       c85ly: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85lG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82aF::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82aF::I64, 0)) goto c85lE; else goto c85lw;
       c85lw: // global
           if (%MO_S_Gt_W64(_s82aF::I64, 2)) goto c85lE; else goto c85lF;
       c85lE: // global
           R2 = _s82aF::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c85lF: // global
           R1 = I64[(_s82aF::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_dn_s82aE_entry() //  [R1, R2]
         { info_tbl: [(c85lK,
                       label: go_dn_s82aE_info
                       rep:HeapRep 2 nonptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85lK: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c85lO; else goto c85lN;
       c85lO: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c85lN: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c85lI; else goto c85lJ;
       c85lI: // global
           _s82aC::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s82aL_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s82aC::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s82aJ_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c85lJ: // global
           I64[Hp - 80] = sat_s82aO_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c85lQ::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c85lQ::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s82aP_entry() //  [R1]
         { info_tbl: [(c85lR,
                       label: sat_s82aP_info
                       rep:HeapRep 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85lR: // global
           _s82aP::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c85lS; else goto c85lT;
       c85lT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c85lV; else goto c85lU;
       c85lV: // global
           HpAlloc = 24;
           goto c85lS;
       c85lS: // global
           R1 = _s82aP::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85lU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s82aP::P64;
           _s82av::I64 = I64[_s82aP::P64 + 24];
           _s82aC::I64 = _s82av::I64 - I64[_s82aP::P64 + 16];
           I64[Hp - 16] = go_dn_s82aE_info;
           I64[Hp - 8] = _s82aC::I64;
           I64[Hp] = 0 - _s82aC::I64;
           R2 = _s82av::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s82aE_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82aB_entry() //  [R1]
         { info_tbl: [(c85m5,
                       label: sat_s82aB_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85m5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85m6; else goto c85me;
       c85m6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85me: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82at::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82at::I64, 0)) goto c85mc; else goto c85m4;
       c85m4: // global
           if (%MO_S_Gt_W64(_s82at::I64, 2)) goto c85mc; else goto c85md;
       c85mc: // global
           R2 = _s82at::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c85md: // global
           R1 = I64[(_s82at::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82aT_entry() //  [R1]
         { info_tbl: [(c85ms,
                       label: sat_s82aT_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85ms: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85mt; else goto c85mB;
       c85mt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85mB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82at::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82at::I64, 0)) goto c85mz; else goto c85mr;
       c85mr: // global
           if (%MO_S_Gt_W64(_s82at::I64, 2)) goto c85mz; else goto c85mA;
       c85mz: // global
           R2 = _s82at::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c85mA: // global
           R1 = I64[(_s82at::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82b7_entry() //  [R1]
         { info_tbl: [(c85n4,
                       label: sat_s82b7_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85n4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85n5; else goto c85n6;
       c85n5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85n6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s82b0_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82b5_entry() //  [R1]
         { info_tbl: [(c85ng,
                       label: sat_s82b5_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85ng: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85nh; else goto c85np;
       c85nh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85np: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82b1::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82b1::I64, 0)) goto c85nn; else goto c85nf;
       c85nf: // global
           if (%MO_S_Gt_W64(_s82b1::I64, 2)) goto c85nn; else goto c85no;
       c85nn: // global
           R2 = _s82b1::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c85no: // global
           R1 = I64[(_s82b1::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82ba_entry() //  [R1]
         { info_tbl: [(c85nA,
                       label: sat_s82ba_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85nA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85nB; else goto c85nJ;
       c85nB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85nJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82b1::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82b1::I64, 0)) goto c85nH; else goto c85nz;
       c85nz: // global
           if (%MO_S_Gt_W64(_s82b1::I64, 2)) goto c85nH; else goto c85nI;
       c85nH: // global
           R2 = _s82b1::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c85nI: // global
           R1 = I64[(_s82b1::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_up_s82b0_entry() //  [R1, R2]
         { info_tbl: [(c85nN,
                       label: go_up_s82b0_info
                       rep:HeapRep 2 nonptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85nN: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c85nR; else goto c85nQ;
       c85nR: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c85nQ: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c85nL; else goto c85nM;
       c85nL: // global
           _s82aY::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s82b7_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s82aY::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s82b5_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c85nM: // global
           I64[Hp - 80] = sat_s82ba_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c85nT::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c85nT::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s82bb_entry() //  [R1]
         { info_tbl: [(c85nU,
                       label: sat_s82bb_info
                       rep:HeapRep 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85nU: // global
           _s82bb::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c85nV; else goto c85nW;
       c85nW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c85nY; else goto c85nX;
       c85nY: // global
           HpAlloc = 24;
           goto c85nV;
       c85nV: // global
           R1 = _s82bb::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85nX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s82bb::P64;
           _s82av::I64 = I64[_s82bb::P64 + 24];
           _s82aY::I64 = _s82av::I64 - I64[_s82bb::P64 + 16];
           I64[Hp - 16] = go_up_s82b0_info;
           I64[Hp - 8] = _s82aY::I64;
           I64[Hp] = 0 - _s82aY::I64;
           R2 = _s82av::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s82b0_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82aX_entry() //  [R1]
         { info_tbl: [(c85o8,
                       label: sat_s82aX_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85o8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85o9; else goto c85oh;
       c85o9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85oh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82at::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82at::I64, 0)) goto c85of; else goto c85o7;
       c85o7: // global
           if (%MO_S_Gt_W64(_s82at::I64, 2)) goto c85of; else goto c85og;
       c85of: // global
           R2 = _s82at::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c85og: // global
           R1 = I64[(_s82at::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82bf_entry() //  [R1]
         { info_tbl: [(c85ov,
                       label: sat_s82bf_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85ov: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85ow; else goto c85oE;
       c85ow: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85oE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82at::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82at::I64, 0)) goto c85oC; else goto c85ou;
       c85ou: // global
           if (%MO_S_Gt_W64(_s82at::I64, 2)) goto c85oC; else goto c85oD;
       c85oC: // global
           R2 = _s82at::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c85oD: // global
           R1 = I64[(_s82at::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82bu_entry() //  [R1]
         { info_tbl: [(c85pb,
                       label: sat_s82bu_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85pb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85pc; else goto c85pd;
       c85pc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85pd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s82bn_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82bs_entry() //  [R1]
         { info_tbl: [(c85pn,
                       label: sat_s82bs_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85pn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85po; else goto c85pw;
       c85po: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85pw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82bo::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82bo::I64, 0)) goto c85pu; else goto c85pm;
       c85pm: // global
           if (%MO_S_Gt_W64(_s82bo::I64, 2)) goto c85pu; else goto c85pv;
       c85pu: // global
           R2 = _s82bo::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c85pv: // global
           R1 = I64[(_s82bo::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82bx_entry() //  [R1]
         { info_tbl: [(c85pH,
                       label: sat_s82bx_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85pH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85pI; else goto c85pQ;
       c85pI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85pQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82bo::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82bo::I64, 0)) goto c85pO; else goto c85pG;
       c85pG: // global
           if (%MO_S_Gt_W64(_s82bo::I64, 2)) goto c85pO; else goto c85pP;
       c85pO: // global
           R2 = _s82bo::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c85pP: // global
           R1 = I64[(_s82bo::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_dn_s82bn_entry() //  [R1, R2]
         { info_tbl: [(c85pU,
                       label: go_dn_s82bn_info
                       rep:HeapRep 2 nonptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85pU: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c85pY; else goto c85pX;
       c85pY: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c85pX: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c85pS; else goto c85pT;
       c85pS: // global
           _s82bl::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s82bu_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s82bl::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s82bs_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c85pT: // global
           I64[Hp - 80] = sat_s82bx_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c85q0::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c85q0::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s82by_entry() //  [R1]
         { info_tbl: [(c85q1,
                       label: sat_s82by_info
                       rep:HeapRep 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85q1: // global
           _s82by::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c85q2; else goto c85q3;
       c85q3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c85q5; else goto c85q4;
       c85q5: // global
           HpAlloc = 24;
           goto c85q2;
       c85q2: // global
           R1 = _s82by::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85q4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s82by::P64;
           _s82av::I64 = I64[_s82by::P64 + 24];
           _s82bl::I64 = _s82av::I64 - I64[_s82by::P64 + 16];
           I64[Hp - 16] = go_dn_s82bn_info;
           I64[Hp - 8] = _s82bl::I64;
           I64[Hp] = 1 - _s82bl::I64;
           R2 = _s82av::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s82bn_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82bk_entry() //  [R1]
         { info_tbl: [(c85qf,
                       label: sat_s82bk_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85qf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85qg; else goto c85qo;
       c85qg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85qo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82at::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82at::I64, 0)) goto c85qm; else goto c85qe;
       c85qe: // global
           if (%MO_S_Gt_W64(_s82at::I64, 2)) goto c85qm; else goto c85qn;
       c85qm: // global
           R2 = _s82at::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c85qn: // global
           R1 = I64[(_s82at::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82bC_entry() //  [R1]
         { info_tbl: [(c85qC,
                       label: sat_s82bC_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85qC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85qD; else goto c85qL;
       c85qD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85qL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82at::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82at::I64, 0)) goto c85qJ; else goto c85qB;
       c85qB: // global
           if (%MO_S_Gt_W64(_s82at::I64, 2)) goto c85qJ; else goto c85qK;
       c85qJ: // global
           R2 = _s82at::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c85qK: // global
           R1 = I64[(_s82at::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82bQ_entry() //  [R1]
         { info_tbl: [(c85re,
                       label: sat_s82bQ_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85re: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85rf; else goto c85rg;
       c85rf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85rg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s82bJ_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82bO_entry() //  [R1]
         { info_tbl: [(c85rq,
                       label: sat_s82bO_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85rq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85rr; else goto c85rz;
       c85rr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85rz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82bK::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82bK::I64, 0)) goto c85rx; else goto c85rp;
       c85rp: // global
           if (%MO_S_Gt_W64(_s82bK::I64, 2)) goto c85rx; else goto c85ry;
       c85rx: // global
           R2 = _s82bK::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c85ry: // global
           R1 = I64[(_s82bK::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82bT_entry() //  [R1]
         { info_tbl: [(c85rK,
                       label: sat_s82bT_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85rK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85rL; else goto c85rT;
       c85rL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85rT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82bK::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82bK::I64, 0)) goto c85rR; else goto c85rJ;
       c85rJ: // global
           if (%MO_S_Gt_W64(_s82bK::I64, 2)) goto c85rR; else goto c85rS;
       c85rR: // global
           R2 = _s82bK::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c85rS: // global
           R1 = I64[(_s82bK::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_up_s82bJ_entry() //  [R1, R2]
         { info_tbl: [(c85rX,
                       label: go_up_s82bJ_info
                       rep:HeapRep 2 nonptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85rX: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c85s1; else goto c85s0;
       c85s1: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c85s0: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c85rV; else goto c85rW;
       c85rV: // global
           _s82bH::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s82bQ_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s82bH::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s82bO_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c85rW: // global
           I64[Hp - 80] = sat_s82bT_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c85s3::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c85s3::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s82bU_entry() //  [R1]
         { info_tbl: [(c85s4,
                       label: sat_s82bU_info
                       rep:HeapRep 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85s4: // global
           _s82bU::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c85s5; else goto c85s6;
       c85s6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c85s8; else goto c85s7;
       c85s8: // global
           HpAlloc = 24;
           goto c85s5;
       c85s5: // global
           R1 = _s82bU::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85s7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s82bU::P64;
           _s82av::I64 = I64[_s82bU::P64 + 24];
           _s82bH::I64 = _s82av::I64 - I64[_s82bU::P64 + 16];
           I64[Hp - 16] = go_up_s82bJ_info;
           I64[Hp - 8] = _s82bH::I64;
           I64[Hp] = 1 - _s82bH::I64;
           R2 = _s82av::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s82bJ_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82bG_entry() //  [R1]
         { info_tbl: [(c85si,
                       label: sat_s82bG_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85si: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85sj; else goto c85sr;
       c85sj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85sr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82at::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82at::I64, 0)) goto c85sp; else goto c85sh;
       c85sh: // global
           if (%MO_S_Gt_W64(_s82at::I64, 2)) goto c85sp; else goto c85sq;
       c85sp: // global
           R2 = _s82at::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c85sq: // global
           R1 = I64[(_s82at::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82bY_entry() //  [R1]
         { info_tbl: [(c85sF,
                       label: sat_s82bY_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85sF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85sG; else goto c85sO;
       c85sG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85sO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82at::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82at::I64, 0)) goto c85sM; else goto c85sE;
       c85sE: // global
           if (%MO_S_Gt_W64(_s82at::I64, 2)) goto c85sM; else goto c85sN;
       c85sM: // global
           R2 = _s82at::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c85sN: // global
           R1 = I64[(_s82at::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82cd_entry() //  [R1]
         { info_tbl: [(c85tl,
                       label: sat_s82cd_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85tl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85tm; else goto c85tn;
       c85tm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85tn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s82c6_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82cb_entry() //  [R1]
         { info_tbl: [(c85tx,
                       label: sat_s82cb_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85tx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85ty; else goto c85tG;
       c85ty: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85tG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82c7::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82c7::I64, 0)) goto c85tE; else goto c85tw;
       c85tw: // global
           if (%MO_S_Gt_W64(_s82c7::I64, 2)) goto c85tE; else goto c85tF;
       c85tE: // global
           R2 = _s82c7::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c85tF: // global
           R1 = I64[(_s82c7::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82cg_entry() //  [R1]
         { info_tbl: [(c85tR,
                       label: sat_s82cg_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85tR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85tS; else goto c85u0;
       c85tS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85u0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82c7::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82c7::I64, 0)) goto c85tY; else goto c85tQ;
       c85tQ: // global
           if (%MO_S_Gt_W64(_s82c7::I64, 2)) goto c85tY; else goto c85tZ;
       c85tY: // global
           R2 = _s82c7::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c85tZ: // global
           R1 = I64[(_s82c7::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_dn_s82c6_entry() //  [R1, R2]
         { info_tbl: [(c85u4,
                       label: go_dn_s82c6_info
                       rep:HeapRep 2 nonptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85u4: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c85u8; else goto c85u7;
       c85u8: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c85u7: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c85u2; else goto c85u3;
       c85u2: // global
           _s82c4::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s82cd_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s82c4::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s82cb_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c85u3: // global
           I64[Hp - 80] = sat_s82cg_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c85ua::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c85ua::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s82ch_entry() //  [R1]
         { info_tbl: [(c85ub,
                       label: sat_s82ch_info
                       rep:HeapRep 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85ub: // global
           _s82ch::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c85uc; else goto c85ud;
       c85ud: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c85uf; else goto c85ue;
       c85uf: // global
           HpAlloc = 24;
           goto c85uc;
       c85uc: // global
           R1 = _s82ch::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85ue: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s82ch::P64;
           _s82av::I64 = I64[_s82ch::P64 + 24];
           _s82c4::I64 = _s82av::I64 - I64[_s82ch::P64 + 16];
           I64[Hp - 16] = go_dn_s82c6_info;
           I64[Hp - 8] = _s82c4::I64;
           I64[Hp] = 2 - _s82c4::I64;
           R2 = _s82av::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s82c6_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82c3_entry() //  [R1]
         { info_tbl: [(c85up,
                       label: sat_s82c3_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85up: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85uq; else goto c85uy;
       c85uq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85uy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82at::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82at::I64, 0)) goto c85uw; else goto c85uo;
       c85uo: // global
           if (%MO_S_Gt_W64(_s82at::I64, 2)) goto c85uw; else goto c85ux;
       c85uw: // global
           R2 = _s82at::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c85ux: // global
           R1 = I64[(_s82at::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82cl_entry() //  [R1]
         { info_tbl: [(c85uM,
                       label: sat_s82cl_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85uM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85uN; else goto c85uV;
       c85uN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85uV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82at::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82at::I64, 0)) goto c85uT; else goto c85uL;
       c85uL: // global
           if (%MO_S_Gt_W64(_s82at::I64, 2)) goto c85uT; else goto c85uU;
       c85uT: // global
           R2 = _s82at::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c85uU: // global
           R1 = I64[(_s82at::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82cz_entry() //  [R1]
         { info_tbl: [(c85vo,
                       label: sat_s82cz_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85vo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85vp; else goto c85vq;
       c85vp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85vq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s82cs_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82cx_entry() //  [R1]
         { info_tbl: [(c85vA,
                       label: sat_s82cx_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85vA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85vB; else goto c85vJ;
       c85vB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85vJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82ct::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82ct::I64, 0)) goto c85vH; else goto c85vz;
       c85vz: // global
           if (%MO_S_Gt_W64(_s82ct::I64, 2)) goto c85vH; else goto c85vI;
       c85vH: // global
           R2 = _s82ct::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c85vI: // global
           R1 = I64[(_s82ct::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82cC_entry() //  [R1]
         { info_tbl: [(c85vU,
                       label: sat_s82cC_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85vU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85vV; else goto c85w3;
       c85vV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85w3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82ct::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82ct::I64, 0)) goto c85w1; else goto c85vT;
       c85vT: // global
           if (%MO_S_Gt_W64(_s82ct::I64, 2)) goto c85w1; else goto c85w2;
       c85w1: // global
           R2 = _s82ct::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c85w2: // global
           R1 = I64[(_s82ct::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_up_s82cs_entry() //  [R1, R2]
         { info_tbl: [(c85w7,
                       label: go_up_s82cs_info
                       rep:HeapRep 2 nonptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85w7: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c85wb; else goto c85wa;
       c85wb: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c85wa: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c85w5; else goto c85w6;
       c85w5: // global
           _s82cq::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s82cz_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s82cq::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s82cx_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c85w6: // global
           I64[Hp - 80] = sat_s82cC_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c85wd::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c85wd::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s82cD_entry() //  [R1]
         { info_tbl: [(c85we,
                       label: sat_s82cD_info
                       rep:HeapRep 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85we: // global
           _s82cD::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c85wf; else goto c85wg;
       c85wg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c85wi; else goto c85wh;
       c85wi: // global
           HpAlloc = 24;
           goto c85wf;
       c85wf: // global
           R1 = _s82cD::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85wh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s82cD::P64;
           _s82av::I64 = I64[_s82cD::P64 + 24];
           _s82cq::I64 = _s82av::I64 - I64[_s82cD::P64 + 16];
           I64[Hp - 16] = go_up_s82cs_info;
           I64[Hp - 8] = _s82cq::I64;
           I64[Hp] = 2 - _s82cq::I64;
           R2 = _s82av::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s82cs_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82cp_entry() //  [R1]
         { info_tbl: [(c85ws,
                       label: sat_s82cp_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85ws: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85wt; else goto c85wB;
       c85wt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85wB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82at::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82at::I64, 0)) goto c85wz; else goto c85wr;
       c85wr: // global
           if (%MO_S_Gt_W64(_s82at::I64, 2)) goto c85wz; else goto c85wA;
       c85wz: // global
           R2 = _s82at::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c85wA: // global
           R1 = I64[(_s82at::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s82cH_entry() //  [R1]
         { info_tbl: [(c85wP,
                       label: sat_s82cH_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85wP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85wQ; else goto c85wY;
       c85wQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85wY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82at::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82at::I64, 0)) goto c85wW; else goto c85wO;
       c85wO: // global
           if (%MO_S_Gt_W64(_s82at::I64, 2)) goto c85wW; else goto c85wX;
       c85wW: // global
           R2 = _s82at::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c85wX: // global
           R1 = I64[(_s82at::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.IO.Device.$fEnumSeekMode_$cenumFromThenTo_entry() //  [R2, R3,
                                                            R4]
         { info_tbl: [(c85x7,
                       label: GHC.IO.Device.$fEnumSeekMode_$cenumFromThenTo_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85x7: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c85x8; else goto c85x9;
       c85x8: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fEnumSeekMode_$cenumFromThenTo_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c85x9: // global
           I64[Sp - 24] = block_c85wZ_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u85yP; else goto c85x0;
       u85yP: // global
           call _c85wZ(R1) args: 0, res: 0, upd: 0;
       c85x0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c85wZ() //  [R1]
         { info_tbl: [(c85wZ,
                       label: block_c85wZ_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85wZ: // global
           _s82aq::P64 = P64[Sp + 8];
           _c85x6::P64 = R1 & 7;
           if (_c85x6::P64 < 3) goto u85yM; else goto c85x5;
       u85yM: // global
           if (_c85x6::P64 < 2) goto c85x3; else goto c85x4;
       c85x3: // global
           _s82at::I64 = 0;
           goto s82as;
       c85x4: // global
           _s82at::I64 = 1;
           goto s82as;
       c85x5: // global
           _s82at::I64 = 2;
           goto s82as;
       s82as: // global
           I64[Sp] = block_c85xa_info;
           R1 = _s82aq::P64;
           I64[Sp + 8] = _s82at::I64;
           if (R1 & 7 != 0) goto u85yO; else goto c85yl;
       u85yO: // global
           call _c85xa(R1) args: 0, res: 0, upd: 0;
       c85yl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c85xa() //  [R1]
         { info_tbl: [(c85xa,
                       label: block_c85xa_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85xa: // global
           _s82ar::P64 = P64[Sp + 16];
           _c85yJ::P64 = R1 & 7;
           if (_c85yJ::P64 < 3) goto u85yN; else goto c85yz;
       u85yN: // global
           if (_c85yJ::P64 < 2) goto c85yr; else goto c85yv;
       c85yr: // global
           _s82av::I64 = 0;
           goto s82au;
       c85yv: // global
           _s82av::I64 = 1;
           goto s82au;
       c85yz: // global
           _s82av::I64 = 2;
           goto s82au;
       s82au: // global
           I64[Sp] = block_c85ks_info;
           R1 = _s82ar::P64;
           I64[Sp + 16] = _s82av::I64;
           if (R1 & 7 != 0) goto u85yQ; else goto c85kt;
       u85yQ: // global
           call _c85ks(R1) args: 0, res: 0, upd: 0;
       c85kt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c85ks() //  [R1]
         { info_tbl: [(c85ks,
                       label: block_c85ks_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85ks: // global
           _s82at::I64 = I64[Sp + 8];
           _s82av::I64 = I64[Sp + 16];
           _c85yK::P64 = R1 & 7;
           if (_c85yK::P64 < 3) goto u85yL; else goto c85xY;
       u85yL: // global
           if (_c85yK::P64 < 2) goto c85xe; else goto c85xB;
       c85xe: // global
           Hp = Hp + 80;
           _s82aw::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c85y1; else goto c85xg;
       c85xg: // global
           if (%MO_S_Lt_W64(_s82av::I64,
                            _s82at::I64)) goto c85xr; else goto c85xA;
       c85xr: // global
           if (%MO_S_Le_W64(0, _s82av::I64)) goto c85xk; else goto c85xp;
       c85xk: // global
           I64[Hp - 72] = sat_s82aP_info;
           I64[Hp - 56] = _s82at::I64;
           I64[Hp - 48] = _s82av::I64;
           I64[Hp - 40] = sat_s82aB_info;
           I64[Hp - 24] = _s82at::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c85xp: // global
           if (%MO_S_Gt_W64(0, _s82at::I64)) goto c85yi; else goto c85xn;
       c85xn: // global
           I64[Hp - 72] = sat_s82aT_info;
           I64[Hp - 56] = _s82at::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c85xl::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c85xl::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c85xA: // global
           if (%MO_S_Ge_W64(0, _s82av::I64)) goto c85xu; else goto c85xz;
       c85xu: // global
           I64[Hp - 72] = sat_s82bb_info;
           I64[Hp - 56] = _s82at::I64;
           I64[Hp - 48] = _s82av::I64;
           I64[Hp - 40] = sat_s82aX_info;
           I64[Hp - 24] = _s82at::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c85xz: // global
           if (%MO_S_Lt_W64(0, _s82at::I64)) goto c85yi; else goto c85xx;
       c85xx: // global
           I64[Hp - 72] = sat_s82bf_info;
           I64[Hp - 56] = _s82at::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c85xv::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c85xv::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c85xB: // global
           Hp = Hp + 80;
           _s82aw::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c85y1; else goto c85xD;
       c85xD: // global
           if (%MO_S_Lt_W64(_s82av::I64,
                            _s82at::I64)) goto c85xO; else goto c85xX;
       c85xO: // global
           if (%MO_S_Le_W64(1, _s82av::I64)) goto c85xH; else goto c85xM;
       c85xH: // global
           I64[Hp - 72] = sat_s82by_info;
           I64[Hp - 56] = _s82at::I64;
           I64[Hp - 48] = _s82av::I64;
           I64[Hp - 40] = sat_s82bk_info;
           I64[Hp - 24] = _s82at::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c85xM: // global
           if (%MO_S_Gt_W64(1, _s82at::I64)) goto c85yi; else goto c85xK;
       c85xK: // global
           I64[Hp - 72] = sat_s82bC_info;
           I64[Hp - 56] = _s82at::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c85xI::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c85xI::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c85xX: // global
           if (%MO_S_Ge_W64(1, _s82av::I64)) goto c85xR; else goto c85xW;
       c85xR: // global
           I64[Hp - 72] = sat_s82bU_info;
           I64[Hp - 56] = _s82at::I64;
           I64[Hp - 48] = _s82av::I64;
           I64[Hp - 40] = sat_s82bG_info;
           I64[Hp - 24] = _s82at::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c85xW: // global
           if (%MO_S_Lt_W64(1, _s82at::I64)) goto c85yi; else goto c85xU;
       c85xU: // global
           I64[Hp - 72] = sat_s82bY_info;
           I64[Hp - 56] = _s82at::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c85xS::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c85xS::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c85xY: // global
           Hp = Hp + 80;
           _s82aw::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c85y1; else goto c85y0;
       c85y1: // global
           HpAlloc = 80;
           R1 = _s82aw::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c85y0: // global
           if (%MO_S_Lt_W64(_s82av::I64,
                            _s82at::I64)) goto c85yb; else goto c85yk;
       c85yb: // global
           if (%MO_S_Le_W64(2, _s82av::I64)) goto c85y4; else goto c85y9;
       c85y4: // global
           I64[Hp - 72] = sat_s82ch_info;
           I64[Hp - 56] = _s82at::I64;
           I64[Hp - 48] = _s82av::I64;
           I64[Hp - 40] = sat_s82c3_info;
           I64[Hp - 24] = _s82at::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c85y9: // global
           if (%MO_S_Gt_W64(2, _s82at::I64)) goto c85yi; else goto c85y7;
       c85y7: // global
           I64[Hp - 72] = sat_s82cl_info;
           I64[Hp - 56] = _s82at::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c85y5::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c85y5::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c85yk: // global
           if (%MO_S_Ge_W64(2, _s82av::I64)) goto c85ye; else goto c85yj;
       c85ye: // global
           I64[Hp - 72] = sat_s82cD_info;
           I64[Hp - 56] = _s82at::I64;
           I64[Hp - 48] = _s82av::I64;
           I64[Hp - 40] = sat_s82cp_info;
           I64[Hp - 24] = _s82at::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c85yj: // global
           if (%MO_S_Lt_W64(2, _s82at::I64)) goto c85yi; else goto c85yh;
       c85yi: // global
           Hp = Hp - 80;
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c85yh: // global
           I64[Hp - 72] = sat_s82cH_info;
           I64[Hp - 56] = _s82at::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c85yf::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c85yf::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.311666335 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_closure" {
     GHC.IO.Device.$fEnumSeekMode_closure:
         const GHC.Enum.C:Enum_con_info;
         const GHC.IO.Device.$fEnumSeekMode_$csucc_closure+1;
         const GHC.IO.Device.$fEnumSeekMode_$cpred_closure+1;
         const GHC.IO.Device.$fEnumSeekMode_$ctoEnum_closure+1;
         const GHC.IO.Device.$fEnumSeekMode_$cfromEnum_closure+1;
         const GHC.IO.Device.$fEnumSeekMode_$cenumFrom_closure+1;
         const GHC.IO.Device.$fEnumSeekMode_$cenumFromThen_closure+2;
         const GHC.IO.Device.$fEnumSeekMode_$cenumFromTo_closure+2;
         const GHC.IO.Device.$fEnumSeekMode_$cenumFromThenTo_closure+3;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.31354841 UTC

[section ""data" . GHC.IO.Device.$trModule3_closure" {
     GHC.IO.Device.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.315157976 UTC

[section ""data" . GHC.IO.Device.$trModule1_closure" {
     GHC.IO.Device.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.316803744 UTC

[section ""data" . GHC.IO.Device.$trModule_closure" {
     GHC.IO.Device.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.IO.Device.$trModule3_closure+1;
         const GHC.IO.Device.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.318589962 UTC

[section ""data" . $krep_r81ZU_closure" {
     $krep_r81ZU_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Word.$tcWord8_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.320300016 UTC

[section ""data" . $krep1_r81ZV_closure" {
     $krep1_r81ZV_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Integer.Type.$tcInteger_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.322063382 UTC

[section ""data" . $krep2_r81ZW_closure" {
     $krep2_r81ZW_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc()_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.323744656 UTC

[section ""data" . $krep3_r81ZX_closure" {
     $krep3_r81ZX_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.325415225 UTC

[section ""data" . $krep4_r81ZY_closure" {
     $krep4_r81ZY_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcBool_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.327121224 UTC

[section ""data" . $krep5_r81ZZ_closure" {
     $krep5_r81ZZ_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcConstraint_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.328784108 UTC

[section ""data" . $krep6_r8200_closure" {
     $krep6_r8200_closure:
         const :_con_info;
         const $krep3_r81ZX_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.330398218 UTC

[section ""data" . $krep7_r8201_closure" {
     $krep7_r8201_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep6_r8200_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.332662019 UTC

[section ""data" . $krep8_r8202_closure" {
     $krep8_r8202_closure:
         const :_con_info;
         const $krep1_r81ZV_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.334297241 UTC

[section ""data" . $krep9_r8203_closure" {
     $krep9_r8203_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep8_r8202_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.335953536 UTC

[section ""data" . $krep10_r8204_closure" {
     $krep10_r8204_closure:
         const :_con_info;
         const $krep2_r81ZW_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.33793194 UTC

[section ""data" . $krep11_r8205_closure" {
     $krep11_r8205_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep10_r8204_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.339550925 UTC

[section ""data" . $krep12_r8206_closure" {
     $krep12_r8206_closure:
         const :_con_info;
         const $krep4_r81ZY_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.341145138 UTC

[section ""data" . $krep13_r8207_closure" {
     $krep13_r8207_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep12_r8206_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.342841218 UTC

[section ""data" . $krep14_r8208_closure" {
     $krep14_r8208_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Base.$tcMaybe_closure;
         const $krep6_r8200_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.344471687 UTC

[section ""data" . $krep15_r8209_closure" {
     $krep15_r8209_closure:
         const :_con_info;
         const $krep14_r8208_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.346216715 UTC

[section ""data" . $krep16_r820a_closure" {
     $krep16_r820a_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep15_r8209_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.347882523 UTC

[section ""data" . $krep17_r820b_closure" {
     $krep17_r820b_closure:
         const :_con_info;
         const $krep_r81ZU_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.349622925 UTC

[section ""data" . $krep18_r820c_closure" {
     $krep18_r820c_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Ptr.$tcPtr_closure;
         const $krep17_r820b_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.351341372 UTC

[section ""data" . $krep19_r820d_closure" {
     $krep19_r820d_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r81ZX_closure+1;
         const $krep11_r8205_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.353024531 UTC

[section ""data" . $krep20_r820e_closure" {
     $krep20_r820e_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r81ZX_closure+1;
         const $krep7_r8201_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.355776499 UTC

[section ""data" . $krep21_r820f_closure" {
     $krep21_r820f_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r81ZX_closure+1;
         const $krep13_r8207_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.358197758 UTC

[section ""data" . $krep22_r820g_closure" {
     $krep22_r820g_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r81ZX_closure+1;
         const $krep16_r820a_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.359916054 UTC

[section ""data" . $krep23_r820h_closure" {
     $krep23_r820h_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_r81ZY_closure+1;
         const $krep11_r8205_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.363008112 UTC

[section ""data" . $krep24_r820i_closure" {
     $krep24_r820i_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_r81ZY_closure+1;
         const $krep21_r820f_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.364701778 UTC

[section ""data" . $krep25_r820j_closure" {
     $krep25_r820j_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r81ZV_closure+1;
         const $krep11_r8205_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.366490729 UTC

[section ""data" . $krep26_r820k_closure" {
     $krep26_r820k_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep18_r820c_closure+1;
         const $krep19_r820d_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.368167954 UTC

[section ""data" . $krep27_r820l_closure" {
     $krep27_r820l_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep18_r820c_closure+1;
         const $krep20_r820e_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.36987585 UTC

[section ""data" . $krep28_r820m_closure" {
     $krep28_r820m_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep18_r820c_closure+1;
         const $krep22_r820g_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.371535255 UTC

[section ""data" . GHC.IO.Device.$tcIODevice1_closure" {
     GHC.IO.Device.$tcIODevice1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Types.krep$*_closure;
         const $krep5_r81ZZ_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.373980819 UTC

[section ""data" . $krep29_r820n_closure" {
     $krep29_r820n_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.375630841 UTC

[section ""data" . $krep30_r820o_closure" {
     $krep30_r820o_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep28_r820m_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.377404353 UTC

[section ""data" . $krep31_r820p_closure" {
     $krep31_r820p_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep27_r820l_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.379146021 UTC

[section ""data" . $krep32_r820q_closure" {
     $krep32_r820q_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep26_r820k_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.380778466 UTC

[section ""data" . $krep33_r820r_closure" {
     $krep33_r820r_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep25_r820j_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.38290673 UTC

[section ""data" . $krep34_r820s_closure" {
     $krep34_r820s_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep24_r820i_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.38512423 UTC

[section ""data" . $krep35_r820t_closure" {
     $krep35_r820t_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep23_r820h_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.386867533 UTC

[section ""data" . $krep36_r820u_closure" {
     $krep36_r820u_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep11_r8205_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.388575681 UTC

[section ""data" . $krep37_r820v_closure" {
     $krep37_r820v_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep13_r8207_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.390336933 UTC

[section ""data" . $krep38_r820w_closure" {
     $krep38_r820w_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep9_r8203_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.392031685 UTC

[section ""data" . $krep39_r820x_closure" {
     $krep39_r820x_closure:
         const :_con_info;
         const $krep29_r820n_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.39420706 UTC

[section ""data" . $krep40_r820y_closure" {
     $krep40_r820y_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep39_r820x_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.395914343 UTC

[section ""data" . $krep41_r820z_closure" {
     $krep41_r820z_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep40_r820y_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.397680219 UTC

[section ""data" . $krep42_r820A_closure" {
     $krep42_r820A_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep41_r820z_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.399390924 UTC

[section ""cstring" . GHC.IO.Device.$tcRawIO2_bytes" {
     GHC.IO.Device.$tcRawIO2_bytes:
         I8[] [82,97,119,73,79]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.400988043 UTC

[section ""data" . GHC.IO.Device.$tcRawIO1_closure" {
     GHC.IO.Device.$tcRawIO1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tcRawIO2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.402710286 UTC

[section ""data" . GHC.IO.Device.$tcRawIO_closure" {
     GHC.IO.Device.$tcRawIO_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tcRawIO1_closure+1;
         const GHC.IO.Device.$tcIODevice1_closure+4;
         const 15458836890887680490;
         const 11407217875184880147;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.404585481 UTC

[section ""data" . $krep43_r820B_closure" {
     $krep43_r820B_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Device.$tcRawIO_closure+1;
         const $krep39_r820x_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.406325852 UTC

[section ""data" . $krep44_r820C_closure" {
     $krep44_r820C_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep31_r820p_closure+4;
         const $krep43_r820B_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.408045744 UTC

[section ""data" . $krep45_r820D_closure" {
     $krep45_r820D_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep32_r820q_closure+4;
         const $krep44_r820C_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.409815288 UTC

[section ""data" . $krep46_r820E_closure" {
     $krep46_r820E_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep30_r820o_closure+4;
         const $krep45_r820D_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.412095859 UTC

[section ""data" . GHC.IO.Device.$tc'C:RawIO1_closure" {
     GHC.IO.Device.$tc'C:RawIO1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep31_r820p_closure+4;
         const $krep46_r820E_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.413860781 UTC

[section ""cstring" . GHC.IO.Device.$tc'C:RawIO3_bytes" {
     GHC.IO.Device.$tc'C:RawIO3_bytes:
         I8[] [39,67,58,82,97,119,73,79]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.41553103 UTC

[section ""data" . GHC.IO.Device.$tc'C:RawIO2_closure" {
     GHC.IO.Device.$tc'C:RawIO2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tc'C:RawIO3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.417196559 UTC

[section ""data" . GHC.IO.Device.$tc'C:RawIO_closure" {
     GHC.IO.Device.$tc'C:RawIO_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tc'C:RawIO2_closure+1;
         const GHC.IO.Device.$tc'C:RawIO1_closure+4;
         const 6403037956050298954;
         const 14520964482680400738;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.419254271 UTC

[section ""cstring" . GHC.IO.Device.$tcIODeviceType2_bytes" {
     GHC.IO.Device.$tcIODeviceType2_bytes:
         I8[] [73,79,68,101,118,105,99,101,84,121,112,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.420861658 UTC

[section ""data" . GHC.IO.Device.$tcIODeviceType1_closure" {
     GHC.IO.Device.$tcIODeviceType1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tcIODeviceType2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.422614698 UTC

[section ""data" . GHC.IO.Device.$tcIODeviceType_closure" {
     GHC.IO.Device.$tcIODeviceType_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tcIODeviceType1_closure+1;
         const GHC.Types.krep$*_closure;
         const 4175968526489202383;
         const 17718566430225243048;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.424400574 UTC

[section ""data" . GHC.IO.Device.$tc'Directory1_closure" {
     GHC.IO.Device.$tc'Directory1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Device.$tcIODeviceType_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.426703247 UTC

[section ""cstring" . GHC.IO.Device.$tc'Directory3_bytes" {
     GHC.IO.Device.$tc'Directory3_bytes:
         I8[] [39,68,105,114,101,99,116,111,114,121]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.428329937 UTC

[section ""data" . GHC.IO.Device.$tc'Directory2_closure" {
     GHC.IO.Device.$tc'Directory2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tc'Directory3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.429972467 UTC

[section ""data" . GHC.IO.Device.$tc'Directory_closure" {
     GHC.IO.Device.$tc'Directory_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tc'Directory2_closure+1;
         const GHC.IO.Device.$tc'Directory1_closure+1;
         const 12008838926528382233;
         const 639950492613404225;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.431706961 UTC

[section ""cstring" . GHC.IO.Device.$tc'Stream2_bytes" {
     GHC.IO.Device.$tc'Stream2_bytes:
         I8[] [39,83,116,114,101,97,109]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.434245311 UTC

[section ""data" . GHC.IO.Device.$tc'Stream1_closure" {
     GHC.IO.Device.$tc'Stream1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tc'Stream2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.435943607 UTC

[section ""data" . GHC.IO.Device.$tc'Stream_closure" {
     GHC.IO.Device.$tc'Stream_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tc'Stream1_closure+1;
         const GHC.IO.Device.$tc'Directory1_closure+1;
         const 39573928359804366;
         const 741010449601335383;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.438277111 UTC

[section ""cstring" . GHC.IO.Device.$tc'RegularFile2_bytes" {
     GHC.IO.Device.$tc'RegularFile2_bytes:
         I8[] [39,82,101,103,117,108,97,114,70,105,108,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.439933378 UTC

[section ""data" . GHC.IO.Device.$tc'RegularFile1_closure" {
     GHC.IO.Device.$tc'RegularFile1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tc'RegularFile2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.441627782 UTC

[section ""data" . GHC.IO.Device.$tc'RegularFile_closure" {
     GHC.IO.Device.$tc'RegularFile_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tc'RegularFile1_closure+1;
         const GHC.IO.Device.$tc'Directory1_closure+1;
         const 2184574052715259025;
         const 14349593064521146856;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.443465388 UTC

[section ""cstring" . GHC.IO.Device.$tc'RawDevice2_bytes" {
     GHC.IO.Device.$tc'RawDevice2_bytes:
         I8[] [39,82,97,119,68,101,118,105,99,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.44504932 UTC

[section ""data" . GHC.IO.Device.$tc'RawDevice1_closure" {
     GHC.IO.Device.$tc'RawDevice1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tc'RawDevice2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.447140752 UTC

[section ""data" . GHC.IO.Device.$tc'RawDevice_closure" {
     GHC.IO.Device.$tc'RawDevice_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tc'RawDevice1_closure+1;
         const GHC.IO.Device.$tc'Directory1_closure+1;
         const 13599710032796319976;
         const 8789152980205417013;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.448937035 UTC

[section ""data" . $krep47_r820F_closure" {
     $krep47_r820F_closure:
         const :_con_info;
         const GHC.IO.Device.$tc'Directory1_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.450646528 UTC

[section ""data" . $krep48_r820G_closure" {
     $krep48_r820G_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep47_r820F_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.452294892 UTC

[section ""data" . $krep49_r820H_closure" {
     $krep49_r820H_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep48_r820G_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.453944787 UTC

[section ""cstring" . GHC.IO.Device.$tcSeekMode2_bytes" {
     GHC.IO.Device.$tcSeekMode2_bytes:
         I8[] [83,101,101,107,77,111,100,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.455571339 UTC

[section ""data" . GHC.IO.Device.$tcSeekMode1_closure" {
     GHC.IO.Device.$tcSeekMode1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tcSeekMode2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.457237048 UTC

[section ""data" . GHC.IO.Device.$tcSeekMode_closure" {
     GHC.IO.Device.$tcSeekMode_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tcSeekMode1_closure+1;
         const GHC.Types.krep$*_closure;
         const 17698211299654630015;
         const 5588778824401988676;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.459363708 UTC

[section ""data" . GHC.IO.Device.$tc'AbsoluteSeek1_closure" {
     GHC.IO.Device.$tc'AbsoluteSeek1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Device.$tcSeekMode_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.461093851 UTC

[section ""cstring" . GHC.IO.Device.$tc'AbsoluteSeek3_bytes" {
     GHC.IO.Device.$tc'AbsoluteSeek3_bytes:
         I8[] [39,65,98,115,111,108,117,116,101,83,101,101,107]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.463366383 UTC

[section ""data" . GHC.IO.Device.$tc'AbsoluteSeek2_closure" {
     GHC.IO.Device.$tc'AbsoluteSeek2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tc'AbsoluteSeek3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.465042365 UTC

[section ""data" . GHC.IO.Device.$tc'AbsoluteSeek_closure" {
     GHC.IO.Device.$tc'AbsoluteSeek_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tc'AbsoluteSeek2_closure+1;
         const GHC.IO.Device.$tc'AbsoluteSeek1_closure+1;
         const 5610789579148926753;
         const 3433733041722086784;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.46713904 UTC

[section ""cstring" . GHC.IO.Device.$tc'RelativeSeek2_bytes" {
     GHC.IO.Device.$tc'RelativeSeek2_bytes:
         I8[] [39,82,101,108,97,116,105,118,101,83,101,101,107]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.46871308 UTC

[section ""data" . GHC.IO.Device.$tc'RelativeSeek1_closure" {
     GHC.IO.Device.$tc'RelativeSeek1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tc'RelativeSeek2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.470400266 UTC

[section ""data" . GHC.IO.Device.$tc'RelativeSeek_closure" {
     GHC.IO.Device.$tc'RelativeSeek_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tc'RelativeSeek1_closure+1;
         const GHC.IO.Device.$tc'AbsoluteSeek1_closure+1;
         const 15906895381304752726;
         const 1738065871578000433;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.472150608 UTC

[section ""cstring" . GHC.IO.Device.$tc'SeekFromEnd2_bytes" {
     GHC.IO.Device.$tc'SeekFromEnd2_bytes:
         I8[] [39,83,101,101,107,70,114,111,109,69,110,100]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.473796023 UTC

[section ""data" . GHC.IO.Device.$tc'SeekFromEnd1_closure" {
     GHC.IO.Device.$tc'SeekFromEnd1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tc'SeekFromEnd2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.475467011 UTC

[section ""data" . GHC.IO.Device.$tc'SeekFromEnd_closure" {
     GHC.IO.Device.$tc'SeekFromEnd_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tc'SeekFromEnd1_closure+1;
         const GHC.IO.Device.$tc'AbsoluteSeek1_closure+1;
         const 16344961357916628519;
         const 5039033320700315004;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.477548389 UTC

[section ""data" . $krep50_r820I_closure" {
     $krep50_r820I_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.IO.Device.$tc'AbsoluteSeek1_closure+1;
         const $krep25_r820j_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.479206617 UTC

[section ""data" . $krep51_r820J_closure" {
     $krep51_r820J_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep50_r820I_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.480888149 UTC

[section ""cstring" . GHC.IO.Device.$tcIODevice3_bytes" {
     GHC.IO.Device.$tcIODevice3_bytes:
         I8[] [73,79,68,101,118,105,99,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.482553535 UTC

[section ""data" . GHC.IO.Device.$tcIODevice2_closure" {
     GHC.IO.Device.$tcIODevice2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tcIODevice3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.484275818 UTC

[section ""data" . GHC.IO.Device.$tcIODevice_closure" {
     GHC.IO.Device.$tcIODevice_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tcIODevice2_closure+1;
         const GHC.IO.Device.$tcIODevice1_closure+4;
         const 4764642859795697036;
         const 7163668738257247953;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.486128389 UTC

[section ""data" . $krep52_r820K_closure" {
     $krep52_r820K_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Device.$tcIODevice_closure+1;
         const $krep39_r820x_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.488415407 UTC

[section ""data" . $krep53_r820L_closure" {
     $krep53_r820L_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep42_r820A_closure+4;
         const $krep52_r820K_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.490710399 UTC

[section ""data" . $krep54_r820M_closure" {
     $krep54_r820M_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep41_r820z_closure+4;
         const $krep53_r820L_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.49234668 UTC

[section ""data" . $krep55_r820N_closure" {
     $krep55_r820N_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep49_r820H_closure+4;
         const $krep54_r820M_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.494003338 UTC

[section ""data" . $krep56_r820O_closure" {
     $krep56_r820O_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep35_r820t_closure+4;
         const $krep55_r820N_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.495676441 UTC

[section ""data" . $krep57_r820P_closure" {
     $krep57_r820P_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep37_r820v_closure+4;
         const $krep56_r820O_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.497352018 UTC

[section ""data" . $krep58_r820Q_closure" {
     $krep58_r820Q_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep35_r820t_closure+4;
         const $krep57_r820P_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.499021543 UTC

[section ""data" . $krep59_r820R_closure" {
     $krep59_r820R_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep33_r820r_closure+4;
         const $krep58_r820Q_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.500571711 UTC

[section ""data" . $krep60_r820S_closure" {
     $krep60_r820S_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep38_r820w_closure+4;
         const $krep59_r820R_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.502549246 UTC

[section ""data" . $krep61_r820T_closure" {
     $krep61_r820T_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep38_r820w_closure+4;
         const $krep60_r820S_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.504203302 UTC

[section ""data" . $krep62_r820U_closure" {
     $krep62_r820U_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep51_r820J_closure+4;
         const $krep61_r820T_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.505863588 UTC

[section ""data" . $krep63_r820V_closure" {
     $krep63_r820V_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep37_r820v_closure+4;
         const $krep62_r820U_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.507547491 UTC

[section ""data" . $krep64_r820W_closure" {
     $krep64_r820W_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep37_r820v_closure+4;
         const $krep63_r820V_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.509266779 UTC

[section ""data" . $krep65_r820X_closure" {
     $krep65_r820X_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep36_r820u_closure+4;
         const $krep64_r820W_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.510998962 UTC

[section ""data" . GHC.IO.Device.$tc'C:IODevice1_closure" {
     GHC.IO.Device.$tc'C:IODevice1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep34_r820s_closure+4;
         const $krep65_r820X_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.513200471 UTC

[section ""cstring" . GHC.IO.Device.$tc'C:IODevice3_bytes" {
     GHC.IO.Device.$tc'C:IODevice3_bytes:
         I8[] [39,67,58,73,79,68,101,118,105,99,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.515022128 UTC

[section ""data" . GHC.IO.Device.$tc'C:IODevice2_closure" {
     GHC.IO.Device.$tc'C:IODevice2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tc'C:IODevice3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.516599329 UTC

[section ""data" . GHC.IO.Device.$tc'C:IODevice_closure" {
     GHC.IO.Device.$tc'C:IODevice_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tc'C:IODevice2_closure+1;
         const GHC.IO.Device.$tc'C:IODevice1_closure+4;
         const 15352604720075066134;
         const 14084350618605203122;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.518826664 UTC

[section ""data" . GHC.IO.Device.AbsoluteSeek_closure" {
     GHC.IO.Device.AbsoluteSeek_closure:
         const GHC.IO.Device.AbsoluteSeek_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.5206017 UTC

[section ""data" . GHC.IO.Device.RelativeSeek_closure" {
     GHC.IO.Device.RelativeSeek_closure:
         const GHC.IO.Device.RelativeSeek_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.522253596 UTC

[section ""data" . GHC.IO.Device.SeekFromEnd_closure" {
     GHC.IO.Device.SeekFromEnd_closure:
         const GHC.IO.Device.SeekFromEnd_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.523838488 UTC

[section ""data" . GHC.IO.Device.Directory_closure" {
     GHC.IO.Device.Directory_closure:
         const GHC.IO.Device.Directory_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.525541842 UTC

[section ""data" . GHC.IO.Device.Stream_closure" {
     GHC.IO.Device.Stream_closure:
         const GHC.IO.Device.Stream_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.527208306 UTC

[section ""data" . GHC.IO.Device.RegularFile_closure" {
     GHC.IO.Device.RegularFile_closure:
         const GHC.IO.Device.RegularFile_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.528785462 UTC

[section ""data" . GHC.IO.Device.RawDevice_closure" {
     GHC.IO.Device.RawDevice_closure:
         const GHC.IO.Device.RawDevice_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.531439857 UTC

[section ""data" . GHC.IO.Device.C:IODevice_closure" {
     GHC.IO.Device.C:IODevice_closure:
         const GHC.IO.Device.C:IODevice_info;
 },
 GHC.IO.Device.C:IODevice_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85G0: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.IO.Device.C:IODevice_entry(R6,
                                               R5,
                                               R4,
                                               R3,
                                               R2,
                                               R1) args: 80, res: 0, upd: 8;
     }
 },
 GHC.IO.Device.C:IODevice_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c85G5,
                       label: GHC.IO.Device.C:IODevice_info
                       rep:HeapRep static {
                             Fun {arity: 14
                                  fun_type: ArgGen [False, False, False, False, False, False, False,
                                                    False, False, False, False, False, False,
                                                    False]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85G5: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto c85G9; else goto c85G8;
       c85G9: // global
           HpAlloc = 120;
           R1 = GHC.IO.Device.C:IODevice_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 120, res: 0, upd: 8;
       c85G8: // global
           I64[Hp - 112] = GHC.IO.Device.C:IODevice_con_info;
           P64[Hp - 104] = R2;
           P64[Hp - 96] = R3;
           P64[Hp - 88] = R4;
           P64[Hp - 80] = R5;
           P64[Hp - 72] = R6;
           P64[Hp - 64] = P64[Sp];
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = P64[Sp + 16];
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = P64[Sp + 40];
           P64[Hp - 16] = P64[Sp + 48];
           P64[Hp - 8] = P64[Sp + 56];
           P64[Hp] = P64[Sp + 64];
           R1 = Hp - 111;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.537132311 UTC

[section ""data" . GHC.IO.Device.C:RawIO_closure" {
     GHC.IO.Device.C:RawIO_closure:
         const GHC.IO.Device.C:RawIO_info;
 },
 GHC.IO.Device.C:RawIO_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c85Gv,
                       label: GHC.IO.Device.C:RawIO_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85Gv: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c85Gz; else goto c85Gy;
       c85Gz: // global
           HpAlloc = 40;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.C:RawIO_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c85Gy: // global
           I64[Hp - 32] = GHC.IO.Device.C:RawIO_con_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.540777434 UTC

[section ""relreadonly" . GHC.IO.Device.SeekMode_closure_tbl" {
     GHC.IO.Device.SeekMode_closure_tbl:
         const GHC.IO.Device.AbsoluteSeek_closure+1;
         const GHC.IO.Device.RelativeSeek_closure+2;
         const GHC.IO.Device.SeekFromEnd_closure+3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.54340774 UTC

[GHC.IO.Device.AbsoluteSeek_con_entry() //  [R1]
         { info_tbl: [(c85GG,
                       label: GHC.IO.Device.AbsoluteSeek_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,73,79,46,68,101,118,105,99,101,46,65,98,115,111,108,117,116,101,83,101,101,107]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85GG: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.546510935 UTC

[GHC.IO.Device.RelativeSeek_con_entry() //  [R1]
         { info_tbl: [(c85GM,
                       label: GHC.IO.Device.RelativeSeek_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,71,72,67,46,73,79,46,68,101,118,105,99,101,46,82,101,108,97,116,105,118,101,83,101,101,107]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85GM: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.550048108 UTC

[GHC.IO.Device.SeekFromEnd_con_entry() //  [R1]
         { info_tbl: [(c85GS,
                       label: GHC.IO.Device.SeekFromEnd_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 2
                                  descr:[98,97,115,101,58,71,72,67,46,73,79,46,68,101,118,105,99,101,46,83,101,101,107,70,114,111,109,69,110,100]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85GS: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.553122292 UTC

[section ""relreadonly" . GHC.IO.Device.IODeviceType_closure_tbl" {
     GHC.IO.Device.IODeviceType_closure_tbl:
         const GHC.IO.Device.Directory_closure+1;
         const GHC.IO.Device.Stream_closure+2;
         const GHC.IO.Device.RegularFile_closure+3;
         const GHC.IO.Device.RawDevice_closure+4;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.55492991 UTC

[GHC.IO.Device.Directory_con_entry() //  [R1]
         { info_tbl: [(c85GZ,
                       label: GHC.IO.Device.Directory_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,73,79,46,68,101,118,105,99,101,46,68,105,114,101,99,116,111,114,121]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85GZ: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.558027521 UTC

[GHC.IO.Device.Stream_con_entry() //  [R1]
         { info_tbl: [(c85H5,
                       label: GHC.IO.Device.Stream_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,71,72,67,46,73,79,46,68,101,118,105,99,101,46,83,116,114,101,97,109]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85H5: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.561134042 UTC

[GHC.IO.Device.RegularFile_con_entry() //  [R1]
         { info_tbl: [(c85Hb,
                       label: GHC.IO.Device.RegularFile_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 2
                                  descr:[98,97,115,101,58,71,72,67,46,73,79,46,68,101,118,105,99,101,46,82,101,103,117,108,97,114,70,105,108,101]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85Hb: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.564606188 UTC

[GHC.IO.Device.RawDevice_con_entry() //  [R1]
         { info_tbl: [(c85Hh,
                       label: GHC.IO.Device.RawDevice_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 3
                                  descr:[98,97,115,101,58,71,72,67,46,73,79,46,68,101,118,105,99,101,46,82,97,119,68,101,118,105,99,101]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85Hh: // global
           R1 = R1 + 4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.567635407 UTC

[GHC.IO.Device.C:IODevice_con_entry() //  [R1]
         { info_tbl: [(c85Hn,
                       label: GHC.IO.Device.C:IODevice_con_info
                       rep:HeapRep 14 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,73,79,46,68,101,118,105,99,101,46,67,58,73,79,68,101,118,105,99,101]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85Hn: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.571416758 UTC

[GHC.IO.Device.C:RawIO_con_entry() //  [R1]
         { info_tbl: [(c85Ht,
                       label: GHC.IO.Device.C:RawIO_con_info
                       rep:HeapRep 4 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,73,79,46,68,101,118,105,99,101,46,67,58,82,97,119,73,79]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85Ht: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:10.574851747 UTC

[section ""relreadonly" . S82hF_srt" {
     S82hF_srt:
         const GHC.IO.Device.$fReadSeekMode7_closure;
         const GHC.IO.Device.$fReadSeekMode11_closure;
         const GHC.IO.Device.$fReadSeekMode15_closure;
         const GHC.IO.Device.$w$cshowsPrec_closure;
         const GHC.IO.Device.$fShowSeekMode_$cshow_closure;
         const GHC.Read.choose2_closure;
         const GHC.IO.Device.$fReadSeekMode_sps_closure;
         const GHC.Read.list3_closure;
         const GHC.IO.Device.$fReadSeekMode2_closure;
         const GHC.IO.Device.$fReadSeekMode_$creadsPrec_closure;
         const GHC.Read.list_closure;
         const GHC.IO.Device.$fReadSeekMode1_closure;
         const GHC.IO.Device.$fReadSeekMode_$creadListPrec_closure;
         const GHC.IO.Device.$fReadSeekMode17_closure;
         const GHC.IO.Exception.unsupportedOperation_closure;
         const GHC.IO.Exception.$fxExceptionIOException_closure;
         const GHC.IO.Device.$dmdup1_closure;
         const $dmseek1_r81Zp_closure;
         const $dmtell1_r81Zq_closure;
         const $dmgetSize1_r81Zr_closure;
         const $dmsetSize1_r81Zs_closure;
         const $dmsetEcho1_r81Zt_closure;
         const $dmgetEcho1_r81Zu_closure;
         const $dmsetRaw1_r81Zv_closure;
         const $dmdup3_r81Zw_closure;
         const $dmdup4_r81Zx_closure;
         const GHC.Arr.hopelessIndexError_closure;
         const GHC.IO.Device.$fIxSeekMode_$cindex_closure;
         const GHC.Err.error_closure;
         const lvl13_r81ZL_closure;
         const GHC.IO.Device.$fEnumSeekMode_$cpred_closure;
         const GHC.IO.Device.$fEnumSeekMode4_closure;
         const GHC.IO.Device.$fEnumSeekMode_$csucc_closure;
         const GHC.IO.Device.$fEnumSeekMode5_closure;
         const lvl18_r81ZQ_closure;
         const lvl19_r81ZR_closure;
         const lvl20_r81ZS_closure;
         const GHC.IO.Device.$wlvl_closure;
         const GHC.IO.Device.$fEnumSeekMode_$ctoEnum_closure;
         const GHC.IO.Device.$w$ctoEnum_closure;
         const GHC.IO.Device.$fEnumSeekMode_$cenumFrom_closure;
         const GHC.IO.Device.$fEnumSeekMode1_closure;
         const GHC.IO.Device.$fEnumSeekMode2_closure;
         const GHC.IO.Device.$fEnumSeekMode3_closure;
         const GHC.IO.Device.$fEnumSeekMode_go2_closure;
         const GHC.IO.Device.$fEnumSeekMode_go1_closure;
         const GHC.IO.Device.$fEnumSeekMode_go_closure;
         const GHC.IO.Device.$fEnumSeekMode_$cenumFromTo_closure;
         const GHC.IO.Device.$fEnumSeekMode_$cenumFromThenTo_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.25727511 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:03:13.260926749 UTC

[section ""data" . GHC.IO.Device.ready_closure" {
     GHC.IO.Device.ready_closure:
         const GHC.IO.Device.ready_info;
 },
 GHC.IO.Device.ready_entry() //  [R2]
         { info_tbl: [(c85Ts,
                       label: GHC.IO.Device.ready_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85Ts: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c85Tt; else goto c85Tu;
       c85Tt: // global
           R2 = R2;
           R1 = GHC.IO.Device.ready_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c85Tu: // global
           I64[Sp - 8] = block_c85Tp_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u85Ty; else goto c85Tq;
       u85Ty: // global
           call _c85Tp(R1) args: 0, res: 0, upd: 0;
       c85Tq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c85Tp() //  [R1]
         { info_tbl: [(c85Tp,
                       label: block_c85Tp_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85Tp: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.266664714 UTC

[section ""data" . GHC.IO.Device.close_closure" {
     GHC.IO.Device.close_closure:
         const GHC.IO.Device.close_info;
 },
 GHC.IO.Device.close_entry() //  [R2]
         { info_tbl: [(c85TQ,
                       label: GHC.IO.Device.close_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85TQ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c85TR; else goto c85TS;
       c85TR: // global
           R2 = R2;
           R1 = GHC.IO.Device.close_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c85TS: // global
           I64[Sp - 8] = block_c85TN_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u85TW; else goto c85TO;
       u85TW: // global
           call _c85TN(R1) args: 0, res: 0, upd: 0;
       c85TO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c85TN() //  [R1]
         { info_tbl: [(c85TN,
                       label: block_c85TN_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85TN: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.273557939 UTC

[section ""data" . GHC.IO.Device.isTerminal_closure" {
     GHC.IO.Device.isTerminal_closure:
         const GHC.IO.Device.isTerminal_info;
 },
 GHC.IO.Device.isTerminal_entry() //  [R2]
         { info_tbl: [(c85Ue,
                       label: GHC.IO.Device.isTerminal_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85Ue: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c85Uf; else goto c85Ug;
       c85Uf: // global
           R2 = R2;
           R1 = GHC.IO.Device.isTerminal_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c85Ug: // global
           I64[Sp - 8] = block_c85Ub_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u85Uk; else goto c85Uc;
       u85Uk: // global
           call _c85Ub(R1) args: 0, res: 0, upd: 0;
       c85Uc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c85Ub() //  [R1]
         { info_tbl: [(c85Ub,
                       label: block_c85Ub_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85Ub: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.283165693 UTC

[section ""data" . GHC.IO.Device.isSeekable_closure" {
     GHC.IO.Device.isSeekable_closure:
         const GHC.IO.Device.isSeekable_info;
 },
 GHC.IO.Device.isSeekable_entry() //  [R2]
         { info_tbl: [(c85UC,
                       label: GHC.IO.Device.isSeekable_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85UC: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c85UD; else goto c85UE;
       c85UD: // global
           R2 = R2;
           R1 = GHC.IO.Device.isSeekable_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c85UE: // global
           I64[Sp - 8] = block_c85Uz_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u85UI; else goto c85UA;
       u85UI: // global
           call _c85Uz(R1) args: 0, res: 0, upd: 0;
       c85UA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c85Uz() //  [R1]
         { info_tbl: [(c85Uz,
                       label: block_c85Uz_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85Uz: // global
           R1 = P64[R1 + 31];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.29245959 UTC

[section ""data" . GHC.IO.Device.seek_closure" {
     GHC.IO.Device.seek_closure:
         const GHC.IO.Device.seek_info;
 },
 GHC.IO.Device.seek_entry() //  [R2]
         { info_tbl: [(c85V0,
                       label: GHC.IO.Device.seek_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85V0: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c85V1; else goto c85V2;
       c85V1: // global
           R2 = R2;
           R1 = GHC.IO.Device.seek_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c85V2: // global
           I64[Sp - 8] = block_c85UX_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u85V6; else goto c85UY;
       u85V6: // global
           call _c85UX(R1) args: 0, res: 0, upd: 0;
       c85UY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c85UX() //  [R1]
         { info_tbl: [(c85UX,
                       label: block_c85UX_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85UX: // global
           R1 = P64[R1 + 39];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.299032112 UTC

[section ""data" . GHC.IO.Device.tell_closure" {
     GHC.IO.Device.tell_closure:
         const GHC.IO.Device.tell_info;
 },
 GHC.IO.Device.tell_entry() //  [R2]
         { info_tbl: [(c85Vo,
                       label: GHC.IO.Device.tell_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85Vo: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c85Vp; else goto c85Vq;
       c85Vp: // global
           R2 = R2;
           R1 = GHC.IO.Device.tell_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c85Vq: // global
           I64[Sp - 8] = block_c85Vl_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u85Vu; else goto c85Vm;
       u85Vu: // global
           call _c85Vl(R1) args: 0, res: 0, upd: 0;
       c85Vm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c85Vl() //  [R1]
         { info_tbl: [(c85Vl,
                       label: block_c85Vl_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85Vl: // global
           R1 = P64[R1 + 47];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.304436922 UTC

[section ""data" . GHC.IO.Device.getSize_closure" {
     GHC.IO.Device.getSize_closure:
         const GHC.IO.Device.getSize_info;
 },
 GHC.IO.Device.getSize_entry() //  [R2]
         { info_tbl: [(c85VM,
                       label: GHC.IO.Device.getSize_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85VM: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c85VN; else goto c85VO;
       c85VN: // global
           R2 = R2;
           R1 = GHC.IO.Device.getSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c85VO: // global
           I64[Sp - 8] = block_c85VJ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u85VS; else goto c85VK;
       u85VS: // global
           call _c85VJ(R1) args: 0, res: 0, upd: 0;
       c85VK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c85VJ() //  [R1]
         { info_tbl: [(c85VJ,
                       label: block_c85VJ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85VJ: // global
           R1 = P64[R1 + 55];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.309996274 UTC

[section ""data" . GHC.IO.Device.setSize_closure" {
     GHC.IO.Device.setSize_closure:
         const GHC.IO.Device.setSize_info;
 },
 GHC.IO.Device.setSize_entry() //  [R2]
         { info_tbl: [(c85Wa,
                       label: GHC.IO.Device.setSize_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85Wa: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c85Wb; else goto c85Wc;
       c85Wb: // global
           R2 = R2;
           R1 = GHC.IO.Device.setSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c85Wc: // global
           I64[Sp - 8] = block_c85W7_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u85Wg; else goto c85W8;
       u85Wg: // global
           call _c85W7(R1) args: 0, res: 0, upd: 0;
       c85W8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c85W7() //  [R1]
         { info_tbl: [(c85W7,
                       label: block_c85W7_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85W7: // global
           R1 = P64[R1 + 63];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.315723155 UTC

[section ""data" . GHC.IO.Device.setEcho_closure" {
     GHC.IO.Device.setEcho_closure:
         const GHC.IO.Device.setEcho_info;
 },
 GHC.IO.Device.setEcho_entry() //  [R2]
         { info_tbl: [(c85Wy,
                       label: GHC.IO.Device.setEcho_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85Wy: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c85Wz; else goto c85WA;
       c85Wz: // global
           R2 = R2;
           R1 = GHC.IO.Device.setEcho_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c85WA: // global
           I64[Sp - 8] = block_c85Wv_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u85WE; else goto c85Ww;
       u85WE: // global
           call _c85Wv(R1) args: 0, res: 0, upd: 0;
       c85Ww: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c85Wv() //  [R1]
         { info_tbl: [(c85Wv,
                       label: block_c85Wv_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85Wv: // global
           R1 = P64[R1 + 71];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.32105574 UTC

[section ""data" . GHC.IO.Device.getEcho_closure" {
     GHC.IO.Device.getEcho_closure:
         const GHC.IO.Device.getEcho_info;
 },
 GHC.IO.Device.getEcho_entry() //  [R2]
         { info_tbl: [(c85WW,
                       label: GHC.IO.Device.getEcho_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85WW: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c85WX; else goto c85WY;
       c85WX: // global
           R2 = R2;
           R1 = GHC.IO.Device.getEcho_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c85WY: // global
           I64[Sp - 8] = block_c85WT_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u85X2; else goto c85WU;
       u85X2: // global
           call _c85WT(R1) args: 0, res: 0, upd: 0;
       c85WU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c85WT() //  [R1]
         { info_tbl: [(c85WT,
                       label: block_c85WT_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85WT: // global
           R1 = P64[R1 + 79];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.326521445 UTC

[section ""data" . GHC.IO.Device.setRaw_closure" {
     GHC.IO.Device.setRaw_closure:
         const GHC.IO.Device.setRaw_info;
 },
 GHC.IO.Device.setRaw_entry() //  [R2]
         { info_tbl: [(c85Xk,
                       label: GHC.IO.Device.setRaw_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85Xk: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c85Xl; else goto c85Xm;
       c85Xl: // global
           R2 = R2;
           R1 = GHC.IO.Device.setRaw_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c85Xm: // global
           I64[Sp - 8] = block_c85Xh_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u85Xq; else goto c85Xi;
       u85Xq: // global
           call _c85Xh(R1) args: 0, res: 0, upd: 0;
       c85Xi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c85Xh() //  [R1]
         { info_tbl: [(c85Xh,
                       label: block_c85Xh_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85Xh: // global
           R1 = P64[R1 + 87];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.332365589 UTC

[section ""data" . GHC.IO.Device.devType_closure" {
     GHC.IO.Device.devType_closure:
         const GHC.IO.Device.devType_info;
 },
 GHC.IO.Device.devType_entry() //  [R2]
         { info_tbl: [(c85XI,
                       label: GHC.IO.Device.devType_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85XI: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c85XJ; else goto c85XK;
       c85XJ: // global
           R2 = R2;
           R1 = GHC.IO.Device.devType_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c85XK: // global
           I64[Sp - 8] = block_c85XF_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u85XO; else goto c85XG;
       u85XO: // global
           call _c85XF(R1) args: 0, res: 0, upd: 0;
       c85XG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c85XF() //  [R1]
         { info_tbl: [(c85XF,
                       label: block_c85XF_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85XF: // global
           R1 = P64[R1 + 95];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.338493818 UTC

[section ""data" . GHC.IO.Device.dup_closure" {
     GHC.IO.Device.dup_closure:
         const GHC.IO.Device.dup_info;
 },
 GHC.IO.Device.dup_entry() //  [R2]
         { info_tbl: [(c85Y6,
                       label: GHC.IO.Device.dup_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85Y6: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c85Y7; else goto c85Y8;
       c85Y7: // global
           R2 = R2;
           R1 = GHC.IO.Device.dup_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c85Y8: // global
           I64[Sp - 8] = block_c85Y3_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u85Yc; else goto c85Y4;
       u85Yc: // global
           call _c85Y3(R1) args: 0, res: 0, upd: 0;
       c85Y4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c85Y3() //  [R1]
         { info_tbl: [(c85Y3,
                       label: block_c85Y3_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85Y3: // global
           R1 = P64[R1 + 103];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.343859349 UTC

[section ""data" . GHC.IO.Device.dup2_closure" {
     GHC.IO.Device.dup2_closure:
         const GHC.IO.Device.dup2_info;
 },
 GHC.IO.Device.dup2_entry() //  [R2]
         { info_tbl: [(c85Yu,
                       label: GHC.IO.Device.dup2_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85Yu: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c85Yv; else goto c85Yw;
       c85Yv: // global
           R2 = R2;
           R1 = GHC.IO.Device.dup2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c85Yw: // global
           I64[Sp - 8] = block_c85Yr_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u85YA; else goto c85Ys;
       u85YA: // global
           call _c85Yr(R1) args: 0, res: 0, upd: 0;
       c85Ys: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c85Yr() //  [R1]
         { info_tbl: [(c85Yr,
                       label: block_c85Yr_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85Yr: // global
           R1 = P64[R1 + 111];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.349315975 UTC

[section ""data" . GHC.IO.Device.read_closure" {
     GHC.IO.Device.read_closure:
         const GHC.IO.Device.read_info;
 },
 GHC.IO.Device.read_entry() //  [R2]
         { info_tbl: [(c85YS,
                       label: GHC.IO.Device.read_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85YS: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c85YT; else goto c85YU;
       c85YT: // global
           R2 = R2;
           R1 = GHC.IO.Device.read_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c85YU: // global
           I64[Sp - 8] = block_c85YP_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u85YY; else goto c85YQ;
       u85YY: // global
           call _c85YP(R1) args: 0, res: 0, upd: 0;
       c85YQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c85YP() //  [R1]
         { info_tbl: [(c85YP,
                       label: block_c85YP_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85YP: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.3552489 UTC

[section ""data" . GHC.IO.Device.readNonBlocking_closure" {
     GHC.IO.Device.readNonBlocking_closure:
         const GHC.IO.Device.readNonBlocking_info;
 },
 GHC.IO.Device.readNonBlocking_entry() //  [R2]
         { info_tbl: [(c85Zg,
                       label: GHC.IO.Device.readNonBlocking_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85Zg: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c85Zh; else goto c85Zi;
       c85Zh: // global
           R2 = R2;
           R1 = GHC.IO.Device.readNonBlocking_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c85Zi: // global
           I64[Sp - 8] = block_c85Zd_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u85Zm; else goto c85Ze;
       u85Zm: // global
           call _c85Zd(R1) args: 0, res: 0, upd: 0;
       c85Ze: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c85Zd() //  [R1]
         { info_tbl: [(c85Zd,
                       label: block_c85Zd_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85Zd: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.360563853 UTC

[section ""data" . GHC.IO.Device.write_closure" {
     GHC.IO.Device.write_closure:
         const GHC.IO.Device.write_info;
 },
 GHC.IO.Device.write_entry() //  [R2]
         { info_tbl: [(c85ZE,
                       label: GHC.IO.Device.write_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85ZE: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c85ZF; else goto c85ZG;
       c85ZF: // global
           R2 = R2;
           R1 = GHC.IO.Device.write_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c85ZG: // global
           I64[Sp - 8] = block_c85ZB_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u85ZK; else goto c85ZC;
       u85ZK: // global
           call _c85ZB(R1) args: 0, res: 0, upd: 0;
       c85ZC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c85ZB() //  [R1]
         { info_tbl: [(c85ZB,
                       label: block_c85ZB_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85ZB: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.366024079 UTC

[section ""data" . GHC.IO.Device.writeNonBlocking_closure" {
     GHC.IO.Device.writeNonBlocking_closure:
         const GHC.IO.Device.writeNonBlocking_info;
 },
 GHC.IO.Device.writeNonBlocking_entry() //  [R2]
         { info_tbl: [(c8602,
                       label: GHC.IO.Device.writeNonBlocking_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c8602: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8603; else goto c8604;
       c8603: // global
           R2 = R2;
           R1 = GHC.IO.Device.writeNonBlocking_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8604: // global
           I64[Sp - 8] = block_c85ZZ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8608; else goto c8600;
       u8608: // global
           call _c85ZZ(R1) args: 0, res: 0, upd: 0;
       c8600: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c85ZZ() //  [R1]
         { info_tbl: [(c85ZZ,
                       label: block_c85ZZ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c85ZZ: // global
           R1 = P64[R1 + 31];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.371889235 UTC

[section ""cstring" . GHC.IO.Device.$fReadSeekMode16_bytes" {
     GHC.IO.Device.$fReadSeekMode16_bytes:
         I8[] [65,98,115,111,108,117,116,101,83,101,101,107]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.373830566 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode15_closure" {
     GHC.IO.Device.$fReadSeekMode15_closure:
         const GHC.IO.Device.$fReadSeekMode15_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Device.$fReadSeekMode15_entry() //  [R1]
         { info_tbl: [(c860q,
                       label: GHC.IO.Device.$fReadSeekMode15_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c860q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c860r; else goto c860s;
       c860r: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c860s: // global
           (_c860n::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c860n::I64 == 0) goto c860p; else goto c860o;
       c860p: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c860o: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c860n::I64;
           R2 = GHC.IO.Device.$fReadSeekMode16_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.37777177 UTC

[section ""cstring" . GHC.IO.Device.$fReadSeekMode12_bytes" {
     GHC.IO.Device.$fReadSeekMode12_bytes:
         I8[] [82,101,108,97,116,105,118,101,83,101,101,107]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.379600092 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode11_closure" {
     GHC.IO.Device.$fReadSeekMode11_closure:
         const GHC.IO.Device.$fReadSeekMode11_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Device.$fReadSeekMode11_entry() //  [R1]
         { info_tbl: [(c860I,
                       label: GHC.IO.Device.$fReadSeekMode11_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c860I: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c860J; else goto c860K;
       c860J: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c860K: // global
           (_c860F::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c860F::I64 == 0) goto c860H; else goto c860G;
       c860H: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c860G: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c860F::I64;
           R2 = GHC.IO.Device.$fReadSeekMode12_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.383676815 UTC

[section ""cstring" . GHC.IO.Device.$fReadSeekMode8_bytes" {
     GHC.IO.Device.$fReadSeekMode8_bytes:
         I8[] [83,101,101,107,70,114,111,109,69,110,100]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.385626835 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode7_closure" {
     GHC.IO.Device.$fReadSeekMode7_closure:
         const GHC.IO.Device.$fReadSeekMode7_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Device.$fReadSeekMode7_entry() //  [R1]
         { info_tbl: [(c8610,
                       label: GHC.IO.Device.$fReadSeekMode7_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c8610: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8611; else goto c8612;
       c8611: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8612: // global
           (_c860X::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c860X::I64 == 0) goto c860Z; else goto c860Y;
       c860Z: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c860Y: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c860X::I64;
           R2 = GHC.IO.Device.$fReadSeekMode8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.390179515 UTC

[section ""data" . GHC.IO.Device.$w$cshowsPrec_closure" {
     GHC.IO.Device.$w$cshowsPrec_closure:
         const GHC.IO.Device.$w$cshowsPrec_info;
         const 0;
 },
 GHC.IO.Device.$w$cshowsPrec_entry() //  [R2, R3]
         { info_tbl: [(c861n,
                       label: GHC.IO.Device.$w$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c861n: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c861o; else goto c861p;
       c861o: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$w$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c861p: // global
           I64[Sp - 16] = block_c861f_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u861A; else goto c861g;
       u861A: // global
           call _c861f(R1) args: 0, res: 0, upd: 0;
       c861g: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c861f() //  [R1]
         { info_tbl: [(c861f,
                       label: block_c861f_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c861f: // global
           _s85LB::P64 = P64[Sp + 8];
           _c861m::P64 = R1 & 7;
           if (_c861m::P64 < 3) goto u861z; else goto c861l;
       u861z: // global
           if (_c861m::P64 < 2) goto c861j; else goto c861k;
       c861j: // global
           R3 = _s85LB::P64;
           R2 = GHC.IO.Device.$fReadSeekMode15_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c861k: // global
           R3 = _s85LB::P64;
           R2 = GHC.IO.Device.$fReadSeekMode11_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c861l: // global
           R3 = _s85LB::P64;
           R2 = GHC.IO.Device.$fReadSeekMode7_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.396830357 UTC

[section ""data" . GHC.IO.Device.$fShowSeekMode_$cshowsPrec_closure" {
     GHC.IO.Device.$fShowSeekMode_$cshowsPrec_closure:
         const GHC.IO.Device.$fShowSeekMode_$cshowsPrec_info;
         const 0;
 },
 GHC.IO.Device.$fShowSeekMode_$cshowsPrec_entry() //  [R3, R4]
         { info_tbl: [(c861R,
                       label: GHC.IO.Device.$fShowSeekMode_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c861R: // global
           _s85LE::P64 = R3;
           R3 = R4;
           R2 = _s85LE::P64;
           call GHC.IO.Device.$w$cshowsPrec_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.400474447 UTC

[section ""data" . GHC.IO.Device.$fShowSeekMode_$cshow_closure" {
     GHC.IO.Device.$fShowSeekMode_$cshow_closure:
         const GHC.IO.Device.$fShowSeekMode_$cshow_info;
         const 0;
 },
 GHC.IO.Device.$fShowSeekMode_$cshow_entry() //  [R2]
         { info_tbl: [(c862a,
                       label: GHC.IO.Device.$fShowSeekMode_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c862a: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c862b; else goto c862c;
       c862b: // global
           R2 = R2;
           R1 = GHC.IO.Device.$fShowSeekMode_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c862c: // global
           I64[Sp - 8] = block_c8622_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u862n; else goto c8623;
       u862n: // global
           call _c8622(R1) args: 0, res: 0, upd: 0;
       c8623: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c8622() //  [R1]
         { info_tbl: [(c8622,
                       label: block_c8622_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c8622: // global
           _c8629::P64 = R1 & 7;
           if (_c8629::P64 < 3) goto u862m; else goto c8628;
       u862m: // global
           if (_c8629::P64 < 2) goto c8626; else goto c8627;
       c8626: // global
           R1 = GHC.IO.Device.$fReadSeekMode15_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c8627: // global
           R1 = GHC.IO.Device.$fReadSeekMode11_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c8628: // global
           R1 = GHC.IO.Device.$fReadSeekMode7_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.406354904 UTC

[section ""data" . GHC.IO.Device.$fShowSeekMode_$cshowList_closure" {
     GHC.IO.Device.$fShowSeekMode_$cshowList_closure:
         const GHC.IO.Device.$fShowSeekMode_$cshowList_info;
         const 0;
 },
 GHC.IO.Device.$fShowSeekMode_$cshowList_entry() //  [R2, R3]
         { info_tbl: [(c862G,
                       label: GHC.IO.Device.$fShowSeekMode_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c862G: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.Device.$w$cshowsPrec_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.409854267 UTC

[section ""data" . GHC.IO.Device.$fShowSeekMode_closure" {
     GHC.IO.Device.$fShowSeekMode_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.IO.Device.$fShowSeekMode_$cshowsPrec_closure+3;
         const GHC.IO.Device.$fShowSeekMode_$cshow_closure+1;
         const GHC.IO.Device.$fShowSeekMode_$cshowList_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.412276971 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode14_closure" {
     GHC.IO.Device.$fReadSeekMode14_closure:
         const GHC.IO.Device.$fReadSeekMode14_info;
 },
 GHC.IO.Device.$fReadSeekMode14_entry() //  [R3]
         { info_tbl: [(c862S,
                       label: GHC.IO.Device.$fReadSeekMode14_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c862S: // global
           R2 = GHC.IO.Device.AbsoluteSeek_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.415567292 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode13_closure" {
     GHC.IO.Device.$fReadSeekMode13_closure:
         const (,)_con_info;
         const GHC.IO.Device.$fReadSeekMode15_closure;
         const GHC.IO.Device.$fReadSeekMode14_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.417509274 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode10_closure" {
     GHC.IO.Device.$fReadSeekMode10_closure:
         const GHC.IO.Device.$fReadSeekMode10_info;
 },
 GHC.IO.Device.$fReadSeekMode10_entry() //  [R3]
         { info_tbl: [(c8634,
                       label: GHC.IO.Device.$fReadSeekMode10_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c8634: // global
           R2 = GHC.IO.Device.RelativeSeek_closure+2;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.420839651 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode9_closure" {
     GHC.IO.Device.$fReadSeekMode9_closure:
         const (,)_con_info;
         const GHC.IO.Device.$fReadSeekMode11_closure;
         const GHC.IO.Device.$fReadSeekMode10_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.422786595 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode6_closure" {
     GHC.IO.Device.$fReadSeekMode6_closure:
         const GHC.IO.Device.$fReadSeekMode6_info;
 },
 GHC.IO.Device.$fReadSeekMode6_entry() //  [R3]
         { info_tbl: [(c863g,
                       label: GHC.IO.Device.$fReadSeekMode6_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c863g: // global
           R2 = GHC.IO.Device.SeekFromEnd_closure+3;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.426219054 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode5_closure" {
     GHC.IO.Device.$fReadSeekMode5_closure:
         const (,)_con_info;
         const GHC.IO.Device.$fReadSeekMode7_closure;
         const GHC.IO.Device.$fReadSeekMode6_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.428133125 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode4_closure" {
     GHC.IO.Device.$fReadSeekMode4_closure:
         const :_con_info;
         const GHC.IO.Device.$fReadSeekMode5_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.430524365 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode3_closure" {
     GHC.IO.Device.$fReadSeekMode3_closure:
         const :_con_info;
         const GHC.IO.Device.$fReadSeekMode9_closure+1;
         const GHC.IO.Device.$fReadSeekMode4_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.432237279 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode_sps_closure" {
     GHC.IO.Device.$fReadSeekMode_sps_closure:
         const :_con_info;
         const GHC.IO.Device.$fReadSeekMode13_closure+1;
         const GHC.IO.Device.$fReadSeekMode3_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.434254138 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode2_closure" {
     GHC.IO.Device.$fReadSeekMode2_closure:
         const GHC.IO.Device.$fReadSeekMode2_info;
         const 0;
 },
 GHC.IO.Device.$fReadSeekMode2_entry() //  [R2]
         { info_tbl: [(c863v,
                       label: GHC.IO.Device.$fReadSeekMode2_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c863v: // global
           R3 = R2;
           R2 = GHC.IO.Device.$fReadSeekMode_sps_closure+2;
           call GHC.Read.choose2_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.437864025 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode1_closure" {
     GHC.IO.Device.$fReadSeekMode1_closure:
         const GHC.IO.Device.$fReadSeekMode1_info;
         const 0;
 },
 GHC.IO.Device.$fReadSeekMode1_entry() //  [R2, R3]
         { info_tbl: [(c863G,
                       label: GHC.IO.Device.$fReadSeekMode1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c863G: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.Device.$fReadSeekMode2_closure+1;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.44218303 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode_$creadsPrec_closure" {
     GHC.IO.Device.$fReadSeekMode_$creadsPrec_closure:
         const GHC.IO.Device.$fReadSeekMode_$creadsPrec_info;
         const 0;
 },
 sat_s85LS_entry() //  [R1]
         { info_tbl: [(c863V,
                       label: sat_s85LS_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c863V: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c863W; else goto c863X;
       c863W: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c863X: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = P64[R1 + 16];
           R2 = GHC.IO.Device.$fReadSeekMode2_closure+1;
           Sp = Sp - 16;
           call GHC.Read.list3_entry(R4, R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.IO.Device.$fReadSeekMode_$creadsPrec_entry() //  [R2]
         { info_tbl: [(c863Y,
                       label: GHC.IO.Device.$fReadSeekMode_$creadsPrec_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c863Y: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8642; else goto c8641;
       c8642: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.IO.Device.$fReadSeekMode_$creadsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8641: // global
           I64[Hp - 16] = sat_s85LS_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.448303183 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode_$creadListPrec_closure" {
     GHC.IO.Device.$fReadSeekMode_$creadListPrec_closure:
         const GHC.IO.Device.$fReadSeekMode_$creadListPrec_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Device.$fReadSeekMode_$creadListPrec_entry() //  [R1]
         { info_tbl: [(c864l,
                       label: GHC.IO.Device.$fReadSeekMode_$creadListPrec_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c864l: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c864m; else goto c864n;
       c864m: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c864n: // global
           (_c864i::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c864i::I64 == 0) goto c864k; else goto c864j;
       c864k: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c864j: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c864i::I64;
           R2 = GHC.IO.Device.$fReadSeekMode1_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.453109301 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode17_closure" {
     GHC.IO.Device.$fReadSeekMode17_closure:
         const GHC.IO.Device.$fReadSeekMode17_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Device.$fReadSeekMode17_entry() //  [R1]
         { info_tbl: [(c864C,
                       label: GHC.IO.Device.$fReadSeekMode17_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c864C: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c864D; else goto c864E;
       c864D: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c864E: // global
           (_c864z::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c864z::I64 == 0) goto c864B; else goto c864A;
       c864B: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c864A: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c864z::I64;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = GHC.Read.$fRead()7_closure;
           R1 = GHC.IO.Device.$fReadSeekMode_$creadListPrec_closure;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.457355901 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode_$creadList_closure" {
     GHC.IO.Device.$fReadSeekMode_$creadList_closure:
         const GHC.IO.Device.$fReadSeekMode_$creadList_info;
         const 0;
 },
 GHC.IO.Device.$fReadSeekMode_$creadList_entry() //  [R2]
         { info_tbl: [(c864S,
                       label: GHC.IO.Device.$fReadSeekMode_$creadList_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c864S: // global
           R3 = R2;
           R2 = GHC.IO.Device.$fReadSeekMode17_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.460769727 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode_closure" {
     GHC.IO.Device.$fReadSeekMode_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.IO.Device.$fReadSeekMode_$creadsPrec_closure+1;
         const GHC.IO.Device.$fReadSeekMode_$creadList_closure+1;
         const GHC.IO.Device.$fReadSeekMode1_closure+2;
         const GHC.IO.Device.$fReadSeekMode_$creadListPrec_closure;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.463499371 UTC

[section ""data" . GHC.IO.Device.$fEqSeekMode_$c==_closure" {
     GHC.IO.Device.$fEqSeekMode_$c==_closure:
         const GHC.IO.Device.$fEqSeekMode_$c==_info;
 },
 GHC.IO.Device.$fEqSeekMode_$c==_entry() //  [R2, R3]
         { info_tbl: [(c865c,
                       label: GHC.IO.Device.$fEqSeekMode_$c==_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c865c: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c865d; else goto c865e;
       c865d: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fEqSeekMode_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c865e: // global
           I64[Sp - 16] = block_c8654_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u866b; else goto c8655;
       u866b: // global
           call _c8654(R1) args: 0, res: 0, upd: 0;
       c8655: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c8654() //  [R1]
         { info_tbl: [(c8654,
                       label: block_c8654_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c8654: // global
           _s85LU::P64 = P64[Sp + 8];
           _c865b::P64 = R1 & 7;
           if (_c865b::P64 < 3) goto u8661; else goto c865a;
       u8661: // global
           if (_c865b::P64 < 2) goto c8658; else goto c8659;
       c8658: // global
           I64[Sp + 8] = block_c865h_info;
           R1 = _s85LU::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8668; else goto c865j;
       u8668: // global
           call _c865h(R1) args: 0, res: 0, upd: 0;
       c865j: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8659: // global
           I64[Sp + 8] = block_c865w_info;
           R1 = _s85LU::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8669; else goto c865y;
       u8669: // global
           call _c865w(R1) args: 0, res: 0, upd: 0;
       c865y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c865a: // global
           I64[Sp + 8] = block_c865L_info;
           R1 = _s85LU::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u866a; else goto c865N;
       u866a: // global
           call _c865L(R1) args: 0, res: 0, upd: 0;
       c865N: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c865h() //  [R1]
         { info_tbl: [(c865h,
                       label: block_c865h_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c865h: // global
           if (R1 & 7 == 1) goto u8662; else goto u8663;
       u8662: // global
           Sp = Sp + 8;
           call _c865X() args: 0, res: 0, upd: 0;
       u8663: // global
           Sp = Sp + 8;
           call _c865T() args: 0, res: 0, upd: 0;
     }
 },
 _c865w() //  [R1]
         { info_tbl: [(c865w,
                       label: block_c865w_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c865w: // global
           if (R1 & 7 == 2) goto u8664; else goto u8665;
       u8664: // global
           Sp = Sp + 8;
           call _c865X() args: 0, res: 0, upd: 0;
       u8665: // global
           Sp = Sp + 8;
           call _c865T() args: 0, res: 0, upd: 0;
     }
 },
 _c865L() //  [R1]
         { info_tbl: [(c865L,
                       label: block_c865L_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c865L: // global
           if (R1 & 7 == 3) goto u8666; else goto u8667;
       u8666: // global
           Sp = Sp + 8;
           call _c865X() args: 0, res: 0, upd: 0;
       u8667: // global
           Sp = Sp + 8;
           call _c865T() args: 0, res: 0, upd: 0;
     }
 },
 _c865X() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c865X: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c865T() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c865T: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.480087601 UTC

[section ""data" . GHC.IO.Device.$fEqSeekMode_$c/=_closure" {
     GHC.IO.Device.$fEqSeekMode_$c/=_closure:
         const GHC.IO.Device.$fEqSeekMode_$c/=_info;
 },
 GHC.IO.Device.$fEqSeekMode_$c/=_entry() //  [R2, R3]
         { info_tbl: [(c8678,
                       label: GHC.IO.Device.$fEqSeekMode_$c/=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c8678: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8679; else goto c867a;
       c8679: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fEqSeekMode_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c867a: // global
           I64[Sp - 16] = block_c8670_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8687; else goto c8671;
       u8687: // global
           call _c8670(R1) args: 0, res: 0, upd: 0;
       c8671: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c8670() //  [R1]
         { info_tbl: [(c8670,
                       label: block_c8670_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c8670: // global
           _s85M0::P64 = P64[Sp + 8];
           _c8677::P64 = R1 & 7;
           if (_c8677::P64 < 3) goto u867X; else goto c8676;
       u867X: // global
           if (_c8677::P64 < 2) goto c8674; else goto c8675;
       c8674: // global
           I64[Sp + 8] = block_c867d_info;
           R1 = _s85M0::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8684; else goto c867f;
       u8684: // global
           call _c867d(R1) args: 0, res: 0, upd: 0;
       c867f: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8675: // global
           I64[Sp + 8] = block_c867s_info;
           R1 = _s85M0::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8685; else goto c867u;
       u8685: // global
           call _c867s(R1) args: 0, res: 0, upd: 0;
       c867u: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8676: // global
           I64[Sp + 8] = block_c867H_info;
           R1 = _s85M0::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8686; else goto c867J;
       u8686: // global
           call _c867H(R1) args: 0, res: 0, upd: 0;
       c867J: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c867d() //  [R1]
         { info_tbl: [(c867d,
                       label: block_c867d_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c867d: // global
           if (R1 & 7 == 1) goto u867Y; else goto u867Z;
       u867Y: // global
           Sp = Sp + 8;
           call _c867T() args: 0, res: 0, upd: 0;
       u867Z: // global
           Sp = Sp + 8;
           call _c867P() args: 0, res: 0, upd: 0;
     }
 },
 _c867s() //  [R1]
         { info_tbl: [(c867s,
                       label: block_c867s_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c867s: // global
           if (R1 & 7 == 2) goto u8680; else goto u8681;
       u8680: // global
           Sp = Sp + 8;
           call _c867T() args: 0, res: 0, upd: 0;
       u8681: // global
           Sp = Sp + 8;
           call _c867P() args: 0, res: 0, upd: 0;
     }
 },
 _c867H() //  [R1]
         { info_tbl: [(c867H,
                       label: block_c867H_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c867H: // global
           if (R1 & 7 == 3) goto u8682; else goto u8683;
       u8682: // global
           Sp = Sp + 8;
           call _c867T() args: 0, res: 0, upd: 0;
       u8683: // global
           Sp = Sp + 8;
           call _c867P() args: 0, res: 0, upd: 0;
     }
 },
 _c867T() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c867T: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c867P() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c867P: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.493840091 UTC

[section ""data" . GHC.IO.Device.$fEqSeekMode_closure" {
     GHC.IO.Device.$fEqSeekMode_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.IO.Device.$fEqSeekMode_$c==_closure+2;
         const GHC.IO.Device.$fEqSeekMode_$c/=_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.496539747 UTC

[section ""data" . GHC.IO.Device.$fEqIODeviceType_$c==_closure" {
     GHC.IO.Device.$fEqIODeviceType_$c==_closure:
         const GHC.IO.Device.$fEqIODeviceType_$c==_info;
 },
 GHC.IO.Device.$fEqIODeviceType_$c==_entry() //  [R2, R3]
         { info_tbl: [(c8696,
                       label: GHC.IO.Device.$fEqIODeviceType_$c==_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c8696: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8697; else goto c8698;
       c8697: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fEqIODeviceType_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8698: // global
           I64[Sp - 16] = block_c868X_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u86ap; else goto c868Y;
       u86ap: // global
           call _c868X(R1) args: 0, res: 0, upd: 0;
       c868Y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c868X() //  [R1]
         { info_tbl: [(c868X,
                       label: block_c868X_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c868X: // global
           _s85M6::P64 = P64[Sp + 8];
           _c8695::P64 = R1 & 7;
           if (_c8695::P64 < 3) goto u86ab; else goto u86ac;
       u86ab: // global
           if (_c8695::P64 < 2) goto c8691; else goto c8692;
       c8691: // global
           I64[Sp + 8] = block_c869b_info;
           R1 = _s85M6::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u86al; else goto c869d;
       u86al: // global
           call _c869b(R1) args: 0, res: 0, upd: 0;
       c869d: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8692: // global
           I64[Sp + 8] = block_c869q_info;
           R1 = _s85M6::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u86am; else goto c869s;
       u86am: // global
           call _c869q(R1) args: 0, res: 0, upd: 0;
       c869s: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u86ac: // global
           if (_c8695::P64 < 4) goto c8693; else goto c8694;
       c8693: // global
           I64[Sp + 8] = block_c869F_info;
           R1 = _s85M6::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u86an; else goto c869H;
       u86an: // global
           call _c869F(R1) args: 0, res: 0, upd: 0;
       c869H: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8694: // global
           I64[Sp + 8] = block_c869U_info;
           R1 = _s85M6::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u86ao; else goto c869W;
       u86ao: // global
           call _c869U(R1) args: 0, res: 0, upd: 0;
       c869W: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c869b() //  [R1]
         { info_tbl: [(c869b,
                       label: block_c869b_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c869b: // global
           if (R1 & 7 == 1) goto u86ad; else goto u86ae;
       u86ad: // global
           Sp = Sp + 8;
           call _c86a6() args: 0, res: 0, upd: 0;
       u86ae: // global
           Sp = Sp + 8;
           call _c86a2() args: 0, res: 0, upd: 0;
     }
 },
 _c869q() //  [R1]
         { info_tbl: [(c869q,
                       label: block_c869q_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c869q: // global
           if (R1 & 7 == 2) goto u86af; else goto u86ag;
       u86af: // global
           Sp = Sp + 8;
           call _c86a6() args: 0, res: 0, upd: 0;
       u86ag: // global
           Sp = Sp + 8;
           call _c86a2() args: 0, res: 0, upd: 0;
     }
 },
 _c869F() //  [R1]
         { info_tbl: [(c869F,
                       label: block_c869F_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c869F: // global
           if (R1 & 7 == 3) goto u86ah; else goto u86ai;
       u86ah: // global
           Sp = Sp + 8;
           call _c86a6() args: 0, res: 0, upd: 0;
       u86ai: // global
           Sp = Sp + 8;
           call _c86a2() args: 0, res: 0, upd: 0;
     }
 },
 _c869U() //  [R1]
         { info_tbl: [(c869U,
                       label: block_c869U_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c869U: // global
           if (R1 & 7 == 4) goto u86aj; else goto u86ak;
       u86aj: // global
           Sp = Sp + 8;
           call _c86a6() args: 0, res: 0, upd: 0;
       u86ak: // global
           Sp = Sp + 8;
           call _c86a2() args: 0, res: 0, upd: 0;
     }
 },
 _c86a6() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86a6: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c86a2() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86a2: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.51225692 UTC

[section ""data" . GHC.IO.Device.$fEqIODeviceType_$c/=_closure" {
     GHC.IO.Device.$fEqIODeviceType_$c/=_closure:
         const GHC.IO.Device.$fEqIODeviceType_$c/=_info;
 },
 GHC.IO.Device.$fEqIODeviceType_$c/=_entry() //  [R2, R3]
         { info_tbl: [(c86bw,
                       label: GHC.IO.Device.$fEqIODeviceType_$c/=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86bw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86bx; else goto c86by;
       c86bx: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fEqIODeviceType_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c86by: // global
           I64[Sp - 16] = block_c86bn_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u86cP; else goto c86bo;
       u86cP: // global
           call _c86bn(R1) args: 0, res: 0, upd: 0;
       c86bo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c86bn() //  [R1]
         { info_tbl: [(c86bn,
                       label: block_c86bn_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86bn: // global
           _s85Md::P64 = P64[Sp + 8];
           _c86bv::P64 = R1 & 7;
           if (_c86bv::P64 < 3) goto u86cB; else goto u86cC;
       u86cB: // global
           if (_c86bv::P64 < 2) goto c86br; else goto c86bs;
       c86br: // global
           I64[Sp + 8] = block_c86bB_info;
           R1 = _s85Md::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u86cL; else goto c86bD;
       u86cL: // global
           call _c86bB(R1) args: 0, res: 0, upd: 0;
       c86bD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c86bs: // global
           I64[Sp + 8] = block_c86bQ_info;
           R1 = _s85Md::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u86cM; else goto c86bS;
       u86cM: // global
           call _c86bQ(R1) args: 0, res: 0, upd: 0;
       c86bS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u86cC: // global
           if (_c86bv::P64 < 4) goto c86bt; else goto c86bu;
       c86bt: // global
           I64[Sp + 8] = block_c86c5_info;
           R1 = _s85Md::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u86cN; else goto c86c7;
       u86cN: // global
           call _c86c5(R1) args: 0, res: 0, upd: 0;
       c86c7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c86bu: // global
           I64[Sp + 8] = block_c86ck_info;
           R1 = _s85Md::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u86cO; else goto c86cm;
       u86cO: // global
           call _c86ck(R1) args: 0, res: 0, upd: 0;
       c86cm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c86bB() //  [R1]
         { info_tbl: [(c86bB,
                       label: block_c86bB_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86bB: // global
           if (R1 & 7 == 1) goto u86cD; else goto u86cE;
       u86cD: // global
           Sp = Sp + 8;
           call _c86cw() args: 0, res: 0, upd: 0;
       u86cE: // global
           Sp = Sp + 8;
           call _c86cs() args: 0, res: 0, upd: 0;
     }
 },
 _c86bQ() //  [R1]
         { info_tbl: [(c86bQ,
                       label: block_c86bQ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86bQ: // global
           if (R1 & 7 == 2) goto u86cF; else goto u86cG;
       u86cF: // global
           Sp = Sp + 8;
           call _c86cw() args: 0, res: 0, upd: 0;
       u86cG: // global
           Sp = Sp + 8;
           call _c86cs() args: 0, res: 0, upd: 0;
     }
 },
 _c86c5() //  [R1]
         { info_tbl: [(c86c5,
                       label: block_c86c5_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86c5: // global
           if (R1 & 7 == 3) goto u86cH; else goto u86cI;
       u86cH: // global
           Sp = Sp + 8;
           call _c86cw() args: 0, res: 0, upd: 0;
       u86cI: // global
           Sp = Sp + 8;
           call _c86cs() args: 0, res: 0, upd: 0;
     }
 },
 _c86ck() //  [R1]
         { info_tbl: [(c86ck,
                       label: block_c86ck_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86ck: // global
           if (R1 & 7 == 4) goto u86cJ; else goto u86cK;
       u86cJ: // global
           Sp = Sp + 8;
           call _c86cw() args: 0, res: 0, upd: 0;
       u86cK: // global
           Sp = Sp + 8;
           call _c86cs() args: 0, res: 0, upd: 0;
     }
 },
 _c86cw() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86cw: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c86cs() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86cs: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.528160271 UTC

[section ""data" . GHC.IO.Device.$fEqIODeviceType_closure" {
     GHC.IO.Device.$fEqIODeviceType_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.IO.Device.$fEqIODeviceType_$c==_closure+2;
         const GHC.IO.Device.$fEqIODeviceType_$c/=_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.530286131 UTC

[section ""data" . $dmisSeekable1_r81Zn_closure" {
     $dmisSeekable1_r81Zn_closure:
         const $dmisSeekable1_r81Zn_info;
 },
 $dmisSeekable1_r81Zn_entry() //  []
         { info_tbl: [(c86dO,
                       label: $dmisSeekable1_r81Zn_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86dO: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.534347589 UTC

[section ""data" . GHC.IO.Device.$dmisSeekable_closure" {
     GHC.IO.Device.$dmisSeekable_closure:
         const GHC.IO.Device.$dmisSeekable_info;
 },
 GHC.IO.Device.$dmisSeekable_entry() //  [R2, R3]
         { info_tbl: [(c86e1,
                       label: GHC.IO.Device.$dmisSeekable_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86e1: // global
           R3 = R3;
           R2 = R2;
           call $dmisSeekable1_r81Zn_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.53780109 UTC

[section ""data" . $dmisTerminal1_r81Zo_closure" {
     $dmisTerminal1_r81Zo_closure:
         const $dmisTerminal1_r81Zo_info;
 },
 $dmisTerminal1_r81Zo_entry() //  []
         { info_tbl: [(c86ec,
                       label: $dmisTerminal1_r81Zo_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86ec: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.541092942 UTC

[section ""data" . GHC.IO.Device.$dmisTerminal_closure" {
     GHC.IO.Device.$dmisTerminal_closure:
         const GHC.IO.Device.$dmisTerminal_info;
 },
 GHC.IO.Device.$dmisTerminal_entry() //  [R2, R3]
         { info_tbl: [(c86ep,
                       label: GHC.IO.Device.$dmisTerminal_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86ep: // global
           R3 = R3;
           R2 = R2;
           call $dmisTerminal1_r81Zo_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.544696954 UTC

[section ""data" . GHC.IO.Device.$dmdup1_closure" {
     GHC.IO.Device.$dmdup1_closure:
         const GHC.IO.Device.$dmdup1_info;
         const 0;
 },
 GHC.IO.Device.$dmdup1_entry() //  []
         { info_tbl: [(c86eA,
                       label: GHC.IO.Device.$dmdup1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86eA: // global
           R3 = GHC.IO.Exception.unsupportedOperation_closure;
           R2 = GHC.IO.Exception.$fxExceptionIOException_closure;
           call GHC.IO.throwIO1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.548250468 UTC

[section ""data" . $dmseek1_r81Zp_closure" {
     $dmseek1_r81Zp_closure:
         const $dmseek1_r81Zp_info;
         const 0;
 },
 $dmseek1_r81Zp_entry() //  []
         { info_tbl: [(c86eL,
                       label: $dmseek1_r81Zp_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86eL: // global
           call GHC.IO.Device.$dmdup1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.551645214 UTC

[section ""data" . GHC.IO.Device.$dmseek_closure" {
     GHC.IO.Device.$dmseek_closure:
         const GHC.IO.Device.$dmseek_info;
         const 0;
 },
 GHC.IO.Device.$dmseek_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c86eW,
                       label: GHC.IO.Device.$dmseek_info
                       rep:HeapRep static { Fun {arity: 5 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86eW: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call $dmseek1_r81Zp_entry(R5, R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.555736565 UTC

[section ""data" . $dmtell1_r81Zq_closure" {
     $dmtell1_r81Zq_closure:
         const $dmtell1_r81Zq_info;
         const 0;
 },
 $dmtell1_r81Zq_entry() //  []
         { info_tbl: [(c86f7,
                       label: $dmtell1_r81Zq_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86f7: // global
           call GHC.IO.Device.$dmdup1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.559067054 UTC

[section ""data" . GHC.IO.Device.$dmtell_closure" {
     GHC.IO.Device.$dmtell_closure:
         const GHC.IO.Device.$dmtell_info;
         const 0;
 },
 GHC.IO.Device.$dmtell_entry() //  [R2, R3]
         { info_tbl: [(c86fi,
                       label: GHC.IO.Device.$dmtell_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86fi: // global
           R3 = R3;
           R2 = R2;
           call $dmtell1_r81Zq_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.562457801 UTC

[section ""data" . $dmgetSize1_r81Zr_closure" {
     $dmgetSize1_r81Zr_closure:
         const $dmgetSize1_r81Zr_info;
         const 0;
 },
 $dmgetSize1_r81Zr_entry() //  []
         { info_tbl: [(c86ft,
                       label: $dmgetSize1_r81Zr_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86ft: // global
           call GHC.IO.Device.$dmdup1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.565824969 UTC

[section ""data" . GHC.IO.Device.$dmgetSize_closure" {
     GHC.IO.Device.$dmgetSize_closure:
         const GHC.IO.Device.$dmgetSize_info;
         const 0;
 },
 GHC.IO.Device.$dmgetSize_entry() //  [R2, R3]
         { info_tbl: [(c86fE,
                       label: GHC.IO.Device.$dmgetSize_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86fE: // global
           R3 = R3;
           R2 = R2;
           call $dmgetSize1_r81Zr_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.569334205 UTC

[section ""data" . $dmsetSize1_r81Zs_closure" {
     $dmsetSize1_r81Zs_closure:
         const $dmsetSize1_r81Zs_info;
         const 0;
 },
 $dmsetSize1_r81Zs_entry() //  []
         { info_tbl: [(c86fP,
                       label: $dmsetSize1_r81Zs_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86fP: // global
           call GHC.IO.Device.$dmdup1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.573203426 UTC

[section ""data" . GHC.IO.Device.$dmsetSize_closure" {
     GHC.IO.Device.$dmsetSize_closure:
         const GHC.IO.Device.$dmsetSize_info;
         const 0;
 },
 GHC.IO.Device.$dmsetSize_entry() //  [R2, R3, R4]
         { info_tbl: [(c86g0,
                       label: GHC.IO.Device.$dmsetSize_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86g0: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call $dmsetSize1_r81Zs_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.577142104 UTC

[section ""data" . $dmsetEcho1_r81Zt_closure" {
     $dmsetEcho1_r81Zt_closure:
         const $dmsetEcho1_r81Zt_info;
         const 0;
 },
 $dmsetEcho1_r81Zt_entry() //  []
         { info_tbl: [(c86gb,
                       label: $dmsetEcho1_r81Zt_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86gb: // global
           call GHC.IO.Device.$dmdup1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.580551171 UTC

[section ""data" . GHC.IO.Device.$dmsetEcho_closure" {
     GHC.IO.Device.$dmsetEcho_closure:
         const GHC.IO.Device.$dmsetEcho_info;
         const 0;
 },
 GHC.IO.Device.$dmsetEcho_entry() //  [R2, R3, R4]
         { info_tbl: [(c86gm,
                       label: GHC.IO.Device.$dmsetEcho_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86gm: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call $dmsetEcho1_r81Zt_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.584127231 UTC

[section ""data" . $dmgetEcho1_r81Zu_closure" {
     $dmgetEcho1_r81Zu_closure:
         const $dmgetEcho1_r81Zu_info;
         const 0;
 },
 $dmgetEcho1_r81Zu_entry() //  []
         { info_tbl: [(c86gx,
                       label: $dmgetEcho1_r81Zu_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86gx: // global
           call GHC.IO.Device.$dmdup1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.587484208 UTC

[section ""data" . GHC.IO.Device.$dmgetEcho_closure" {
     GHC.IO.Device.$dmgetEcho_closure:
         const GHC.IO.Device.$dmgetEcho_info;
         const 0;
 },
 GHC.IO.Device.$dmgetEcho_entry() //  [R2, R3]
         { info_tbl: [(c86gI,
                       label: GHC.IO.Device.$dmgetEcho_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86gI: // global
           R3 = R3;
           R2 = R2;
           call $dmgetEcho1_r81Zu_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.591095474 UTC

[section ""data" . $dmsetRaw1_r81Zv_closure" {
     $dmsetRaw1_r81Zv_closure:
         const $dmsetRaw1_r81Zv_info;
         const 0;
 },
 $dmsetRaw1_r81Zv_entry() //  []
         { info_tbl: [(c86gT,
                       label: $dmsetRaw1_r81Zv_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86gT: // global
           call GHC.IO.Device.$dmdup1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.595012739 UTC

[section ""data" . GHC.IO.Device.$dmsetRaw_closure" {
     GHC.IO.Device.$dmsetRaw_closure:
         const GHC.IO.Device.$dmsetRaw_info;
         const 0;
 },
 GHC.IO.Device.$dmsetRaw_entry() //  [R2, R3, R4]
         { info_tbl: [(c86h4,
                       label: GHC.IO.Device.$dmsetRaw_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86h4: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call $dmsetRaw1_r81Zv_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.59849033 UTC

[section ""data" . $dmdup3_r81Zw_closure" {
     $dmdup3_r81Zw_closure:
         const $dmdup3_r81Zw_info;
         const 0;
 },
 $dmdup3_r81Zw_entry() //  []
         { info_tbl: [(c86hf,
                       label: $dmdup3_r81Zw_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86hf: // global
           call GHC.IO.Device.$dmdup1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.601859107 UTC

[section ""data" . GHC.IO.Device.$dmdup_closure" {
     GHC.IO.Device.$dmdup_closure:
         const GHC.IO.Device.$dmdup_info;
         const 0;
 },
 GHC.IO.Device.$dmdup_entry() //  [R2, R3]
         { info_tbl: [(c86hq,
                       label: GHC.IO.Device.$dmdup_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86hq: // global
           R3 = R3;
           R2 = R2;
           call $dmdup3_r81Zw_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.605400812 UTC

[section ""data" . $dmdup4_r81Zx_closure" {
     $dmdup4_r81Zx_closure:
         const $dmdup4_r81Zx_info;
         const 0;
 },
 $dmdup4_r81Zx_entry() //  []
         { info_tbl: [(c86hB,
                       label: $dmdup4_r81Zx_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86hB: // global
           call GHC.IO.Device.$dmdup1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.608802637 UTC

[section ""data" . GHC.IO.Device.$dmdup2_closure" {
     GHC.IO.Device.$dmdup2_closure:
         const GHC.IO.Device.$dmdup2_info;
         const 0;
 },
 GHC.IO.Device.$dmdup2_entry() //  [R2, R3, R4]
         { info_tbl: [(c86hM,
                       label: GHC.IO.Device.$dmdup2_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86hM: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call $dmdup4_r81Zx_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.613811698 UTC

[section ""data" . GHC.IO.Device.$fOrdSeekMode_$ccompare_closure" {
     GHC.IO.Device.$fOrdSeekMode_$ccompare_closure:
         const GHC.IO.Device.$fOrdSeekMode_$ccompare_info;
 },
 GHC.IO.Device.$fOrdSeekMode_$ccompare_entry() //  [R2, R3]
         { info_tbl: [(c86i5,
                       label: GHC.IO.Device.$fOrdSeekMode_$ccompare_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86i5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86i6; else goto c86i7;
       c86i6: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fOrdSeekMode_$ccompare_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c86i7: // global
           I64[Sp - 16] = block_c86hX_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u86jg; else goto c86hY;
       u86jg: // global
           call _c86hX(R1) args: 0, res: 0, upd: 0;
       c86hY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c86hX() //  [R1]
         { info_tbl: [(c86hX,
                       label: block_c86hX_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86hX: // global
           _s85MY::P64 = P64[Sp + 8];
           _c86i4::P64 = R1 & 7;
           if (_c86i4::P64 < 3) goto u86j2; else goto c86i3;
       u86j2: // global
           if (_c86i4::P64 < 2) goto c86i1; else goto c86i2;
       c86i1: // global
           I64[Sp + 8] = block_c86ia_info;
           R1 = _s85MY::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u86jd; else goto c86ic;
       u86jd: // global
           call _c86ia(R1) args: 0, res: 0, upd: 0;
       c86ic: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c86i2: // global
           I64[Sp + 8] = block_c86it_info;
           R1 = _s85MY::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u86je; else goto c86iv;
       u86je: // global
           call _c86it(R1) args: 0, res: 0, upd: 0;
       c86iv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c86i3: // global
           I64[Sp + 8] = block_c86iM_info;
           R1 = _s85MY::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u86jf; else goto c86iO;
       u86jf: // global
           call _c86iM(R1) args: 0, res: 0, upd: 0;
       c86iO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c86ia() //  [R1]
         { info_tbl: [(c86ia,
                       label: block_c86ia_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86ia: // global
           _c86j1::P64 = R1 & 7;
           if (_c86j1::P64 < 3) goto u86j3; else goto u86j5;
       u86j3: // global
           if (_c86j1::P64 < 2) goto u86j7; else goto u86j6;
       u86j7: // global
           Sp = Sp + 8;
           call _c86iY() args: 0, res: 0, upd: 0;
       u86j6: // global
           Sp = Sp + 8;
           goto u86ji;
       u86j5: // global
           Sp = Sp + 8;
           goto u86ji;
       u86ji: // global
           call _c86iJ() args: 0, res: 0, upd: 0;
     }
 },
 _c86it() //  [R1]
         { info_tbl: [(c86it,
                       label: block_c86it_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86it: // global
           _c86j0::P64 = R1 & 7;
           if (_c86j0::P64 < 3) goto u86j4; else goto u86j8;
       u86j4: // global
           if (_c86j0::P64 < 2) goto u86ja; else goto u86j9;
       u86ja: // global
           Sp = Sp + 8;
           call _c86iU() args: 0, res: 0, upd: 0;
       u86j9: // global
           Sp = Sp + 8;
           call _c86iY() args: 0, res: 0, upd: 0;
       u86j8: // global
           Sp = Sp + 8;
           call _c86iJ() args: 0, res: 0, upd: 0;
     }
 },
 _c86iJ() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86iJ: // global
           R1 = GHC.Types.LT_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c86iM() //  [R1]
         { info_tbl: [(c86iM,
                       label: block_c86iM_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86iM: // global
           if (R1 & 7 == 3) goto u86jb; else goto u86jc;
       u86jb: // global
           Sp = Sp + 8;
           call _c86iY() args: 0, res: 0, upd: 0;
       u86jc: // global
           Sp = Sp + 8;
           call _c86iU() args: 0, res: 0, upd: 0;
     }
 },
 _c86iY() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86iY: // global
           R1 = GHC.Types.EQ_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c86iU() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86iU: // global
           R1 = GHC.Types.GT_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.630329379 UTC

[section ""data" . GHC.IO.Device.$fOrdSeekMode_$c<_closure" {
     GHC.IO.Device.$fOrdSeekMode_$c<_closure:
         const GHC.IO.Device.$fOrdSeekMode_$c<_info;
 },
 GHC.IO.Device.$fOrdSeekMode_$c<_entry() //  [R2, R3]
         { info_tbl: [(c86kh,
                       label: GHC.IO.Device.$fOrdSeekMode_$c<_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86kh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86ki; else goto c86kj;
       c86ki: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fOrdSeekMode_$c<_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c86kj: // global
           I64[Sp - 16] = block_c86k9_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u86ld; else goto c86ka;
       u86ld: // global
           call _c86k9(R1) args: 0, res: 0, upd: 0;
       c86ka: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c86k9() //  [R1]
         { info_tbl: [(c86k9,
                       label: block_c86k9_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86k9: // global
           _s85N4::P64 = P64[Sp + 8];
           _c86kg::P64 = R1 & 7;
           if (_c86kg::P64 < 3) goto u86l3; else goto c86kf;
       u86l3: // global
           if (_c86kg::P64 < 2) goto c86kd; else goto c86ke;
       c86kd: // global
           I64[Sp + 8] = block_c86km_info;
           R1 = _s85N4::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u86la; else goto c86ko;
       u86la: // global
           call _c86km(R1) args: 0, res: 0, upd: 0;
       c86ko: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c86ke: // global
           I64[Sp + 8] = block_c86kF_info;
           R1 = _s85N4::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u86lb; else goto c86kH;
       u86lb: // global
           call _c86kF(R1) args: 0, res: 0, upd: 0;
       c86kH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c86kf: // global
           I64[Sp + 8] = block_c86kU_info;
           R1 = _s85N4::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u86lc; else goto c86kW;
       u86lc: // global
           call _c86kU() args: 0, res: 0, upd: 0;
       c86kW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c86km() //  [R1]
         { info_tbl: [(c86km,
                       label: block_c86km_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86km: // global
           _c86l2::P64 = R1 & 7;
           if (_c86l2::P64 < 3) goto u86l4; else goto u86l5;
       u86l4: // global
           if (_c86l2::P64 < 2) goto u86l7; else goto u86l6;
       u86l7: // global
           Sp = Sp + 8;
           call _c86kN() args: 0, res: 0, upd: 0;
       u86l6: // global
           Sp = Sp + 8;
           goto u86lf;
       u86l5: // global
           Sp = Sp + 8;
           goto u86lf;
       u86lf: // global
           call _c86kR() args: 0, res: 0, upd: 0;
     }
 },
 _c86kF() //  [R1]
         { info_tbl: [(c86kF,
                       label: block_c86kF_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86kF: // global
           if (R1 & 7 == 3) goto u86l8; else goto u86l9;
       u86l8: // global
           Sp = Sp + 8;
           call _c86kR() args: 0, res: 0, upd: 0;
       u86l9: // global
           Sp = Sp + 8;
           call _c86kN() args: 0, res: 0, upd: 0;
     }
 },
 _c86kR() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86kR: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c86kN() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86kN: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c86kU() //  []
         { info_tbl: [(c86kU,
                       label: block_c86kU_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86kU: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.644788097 UTC

[section ""data" . GHC.IO.Device.$fOrdSeekMode_$c<=_closure" {
     GHC.IO.Device.$fOrdSeekMode_$c<=_closure:
         const GHC.IO.Device.$fOrdSeekMode_$c<=_info;
 },
 GHC.IO.Device.$fOrdSeekMode_$c<=_entry() //  [R2, R3]
         { info_tbl: [(c86ma,
                       label: GHC.IO.Device.$fOrdSeekMode_$c<=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86ma: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86mb; else goto c86mc;
       c86mb: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fOrdSeekMode_$c<=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c86mc: // global
           I64[Sp - 16] = block_c86m2_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u86mZ; else goto c86m3;
       u86mZ: // global
           call _c86m2(R1) args: 0, res: 0, upd: 0;
       c86m3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c86m2() //  [R1]
         { info_tbl: [(c86m2,
                       label: block_c86m2_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86m2: // global
           _s85N9::P64 = P64[Sp + 8];
           _c86m9::P64 = R1 & 7;
           if (_c86m9::P64 < 3) goto u86mW; else goto c86m8;
       u86mW: // global
           if (_c86m9::P64 < 2) goto c86m6; else goto c86m7;
       c86m6: // global
           _s85Nc::I64 = 0;
           goto s85Nb;
       c86m7: // global
           _s85Nc::I64 = 1;
           goto s85Nb;
       c86m8: // global
           _s85Nc::I64 = 2;
           goto s85Nb;
       s85Nb: // global
           I64[Sp] = block_c86mg_info;
           R1 = _s85N9::P64;
           I64[Sp + 8] = _s85Nc::I64;
           if (R1 & 7 != 0) goto u86mY; else goto c86mi;
       u86mY: // global
           call _c86mg(R1) args: 0, res: 0, upd: 0;
       c86mi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c86mg() //  [R1]
         { info_tbl: [(c86mg,
                       label: block_c86mg_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86mg: // global
           _s85Nc::I64 = I64[Sp + 8];
           _c86mV::P64 = R1 & 7;
           if (_c86mV::P64 < 3) goto u86mX; else goto c86mL;
       u86mX: // global
           if (_c86mV::P64 < 2) goto c86mt; else goto c86mC;
       c86mt: // global
           if (%MO_S_Ge_W64(_s85Nc::I64, 0)) goto c86mJ; else goto c86mK;
       c86mC: // global
           if (%MO_S_Ge_W64(_s85Nc::I64, 1)) goto c86mJ; else goto c86mK;
       c86mL: // global
           if (%MO_S_Ge_W64(_s85Nc::I64, 2)) goto c86mJ; else goto c86mK;
       c86mJ: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c86mK: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.657877115 UTC

[section ""data" . GHC.IO.Device.$fOrdSeekMode_$cmax_closure" {
     GHC.IO.Device.$fOrdSeekMode_$cmax_closure:
         const GHC.IO.Device.$fOrdSeekMode_$cmax_info;
 },
 GHC.IO.Device.$fOrdSeekMode_$cmax_entry() //  [R2, R3]
         { info_tbl: [(c86nv,
                       label: GHC.IO.Device.$fOrdSeekMode_$cmax_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86nv: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c86nw; else goto c86nx;
       c86nw: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fOrdSeekMode_$cmax_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c86nx: // global
           I64[Sp - 24] = block_c86np_info;
           _s85Nj::P64 = R3;
           R3 = R3;
           _s85Ni::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s85Ni::P64;
           P64[Sp - 8] = _s85Nj::P64;
           Sp = Sp - 24;
           call GHC.IO.Device.$fOrdSeekMode_$c<=_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c86np() //  [R1]
         { info_tbl: [(c86np,
                       label: block_c86np_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86np: // global
           if (R1 & 7 == 1) goto c86ns; else goto c86nt;
       c86ns: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c86nt: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.664349588 UTC

[section ""data" . GHC.IO.Device.$fOrdSeekMode_$c>=_closure" {
     GHC.IO.Device.$fOrdSeekMode_$c>=_closure:
         const GHC.IO.Device.$fOrdSeekMode_$c>=_info;
 },
 GHC.IO.Device.$fOrdSeekMode_$c>=_entry() //  [R2, R3]
         { info_tbl: [(c86o7,
                       label: GHC.IO.Device.$fOrdSeekMode_$c>=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86o7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86o8; else goto c86o9;
       c86o8: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fOrdSeekMode_$c>=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c86o9: // global
           I64[Sp - 16] = block_c86nZ_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u86oW; else goto c86o0;
       u86oW: // global
           call _c86nZ(R1) args: 0, res: 0, upd: 0;
       c86o0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c86nZ() //  [R1]
         { info_tbl: [(c86nZ,
                       label: block_c86nZ_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86nZ: // global
           _s85Nm::P64 = P64[Sp + 8];
           _c86o6::P64 = R1 & 7;
           if (_c86o6::P64 < 3) goto u86oT; else goto c86o5;
       u86oT: // global
           if (_c86o6::P64 < 2) goto c86o3; else goto c86o4;
       c86o3: // global
           _s85No::I64 = 0;
           goto s85Nn;
       c86o4: // global
           _s85No::I64 = 1;
           goto s85Nn;
       c86o5: // global
           _s85No::I64 = 2;
           goto s85Nn;
       s85Nn: // global
           I64[Sp] = block_c86od_info;
           R1 = _s85Nm::P64;
           I64[Sp + 8] = _s85No::I64;
           if (R1 & 7 != 0) goto u86oV; else goto c86of;
       u86oV: // global
           call _c86od(R1) args: 0, res: 0, upd: 0;
       c86of: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c86od() //  [R1]
         { info_tbl: [(c86od,
                       label: block_c86od_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86od: // global
           _s85No::I64 = I64[Sp + 8];
           _c86oS::P64 = R1 & 7;
           if (_c86oS::P64 < 3) goto u86oU; else goto c86oI;
       u86oU: // global
           if (_c86oS::P64 < 2) goto c86oq; else goto c86oz;
       c86oq: // global
           if (%MO_S_Ge_W64(_s85No::I64, 0)) goto c86oG; else goto c86oH;
       c86oz: // global
           if (%MO_S_Ge_W64(_s85No::I64, 1)) goto c86oG; else goto c86oH;
       c86oI: // global
           if (%MO_S_Ge_W64(_s85No::I64, 2)) goto c86oG; else goto c86oH;
       c86oG: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c86oH: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.674580079 UTC

[section ""data" . GHC.IO.Device.$fOrdSeekMode_$c>_closure" {
     GHC.IO.Device.$fOrdSeekMode_$c>_closure:
         const GHC.IO.Device.$fOrdSeekMode_$c>_info;
 },
 GHC.IO.Device.$fOrdSeekMode_$c>_entry() //  [R2, R3]
         { info_tbl: [(c86pm,
                       label: GHC.IO.Device.$fOrdSeekMode_$c>_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86pm: // global
           _s85Nv::P64 = R3;
           R3 = R2;
           R2 = _s85Nv::P64;
           call GHC.IO.Device.$fOrdSeekMode_$c<_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.682821525 UTC

[section ""data" . GHC.IO.Device.$fOrdSeekMode_$cmin_closure" {
     GHC.IO.Device.$fOrdSeekMode_$cmin_closure:
         const GHC.IO.Device.$fOrdSeekMode_$cmin_info;
 },
 GHC.IO.Device.$fOrdSeekMode_$cmin_entry() //  [R2, R3]
         { info_tbl: [(c86pD,
                       label: GHC.IO.Device.$fOrdSeekMode_$cmin_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86pD: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c86pE; else goto c86pF;
       c86pE: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fOrdSeekMode_$cmin_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c86pF: // global
           I64[Sp - 24] = block_c86px_info;
           _s85Nx::P64 = R3;
           R3 = R3;
           _s85Nw::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s85Nw::P64;
           P64[Sp - 8] = _s85Nx::P64;
           Sp = Sp - 24;
           call GHC.IO.Device.$fOrdSeekMode_$c<=_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c86px() //  [R1]
         { info_tbl: [(c86px,
                       label: block_c86px_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86px: // global
           if (R1 & 7 == 1) goto c86pA; else goto c86pB;
       c86pA: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c86pB: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.691197606 UTC

[section ""data" . GHC.IO.Device.$fOrdSeekMode_closure" {
     GHC.IO.Device.$fOrdSeekMode_closure:
         const GHC.Classes.C:Ord_con_info;
         const GHC.IO.Device.$fEqSeekMode_closure+1;
         const GHC.IO.Device.$fOrdSeekMode_$ccompare_closure+2;
         const GHC.IO.Device.$fOrdSeekMode_$c<_closure+2;
         const GHC.IO.Device.$fOrdSeekMode_$c<=_closure+2;
         const GHC.IO.Device.$fOrdSeekMode_$c>_closure+2;
         const GHC.IO.Device.$fOrdSeekMode_$c>=_closure+2;
         const GHC.IO.Device.$fOrdSeekMode_$cmax_closure+2;
         const GHC.IO.Device.$fOrdSeekMode_$cmin_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.6946408 UTC

[section ""data" . GHC.IO.Device.$w$cunsafeIndex_closure" {
     GHC.IO.Device.$w$cunsafeIndex_closure:
         const GHC.IO.Device.$w$cunsafeIndex_info;
 },
 GHC.IO.Device.$w$cunsafeIndex_entry() //  [R2, R3]
         { info_tbl: [(c86qe,
                       label: GHC.IO.Device.$w$cunsafeIndex_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86qe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86qf; else goto c86qg;
       c86qf: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$w$cunsafeIndex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c86qg: // global
           I64[Sp - 16] = block_c86q6_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u86rt; else goto c86q7;
       u86rt: // global
           call _c86q6(R1) args: 0, res: 0, upd: 0;
       c86q7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c86q6() //  [R1]
         { info_tbl: [(c86q6,
                       label: block_c86q6_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86q6: // global
           _s85NA::P64 = P64[Sp + 8];
           _c86qd::P64 = R1 & 7;
           if (_c86qd::P64 < 3) goto u86rf; else goto c86qc;
       u86rf: // global
           if (_c86qd::P64 < 2) goto c86qa; else goto c86qb;
       c86qa: // global
           I64[Sp + 8] = block_c86qj_info;
           R1 = _s85NA::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u86rq; else goto c86ql;
       u86rq: // global
           call _c86qj(R1) args: 0, res: 0, upd: 0;
       c86ql: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c86qb: // global
           I64[Sp + 8] = block_c86qC_info;
           R1 = _s85NA::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u86rr; else goto c86qE;
       u86rr: // global
           call _c86qC(R1) args: 0, res: 0, upd: 0;
       c86qE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c86qc: // global
           I64[Sp + 8] = block_c86qV_info;
           R1 = _s85NA::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u86rs; else goto c86qX;
       u86rs: // global
           call _c86qV(R1) args: 0, res: 0, upd: 0;
       c86qX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c86qj() //  [R1]
         { info_tbl: [(c86qj,
                       label: block_c86qj_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86qj: // global
           _c86re::P64 = R1 & 7;
           if (_c86re::P64 < 3) goto u86rg; else goto c86qz;
       u86rg: // global
           if (_c86re::P64 < 2) goto u86rk; else goto u86rj;
       u86rk: // global
           Sp = Sp + 8;
           call _c86rb() args: 0, res: 0, upd: 0;
       u86rj: // global
           Sp = Sp + 8;
           call _c86qS() args: 0, res: 0, upd: 0;
       c86qz: // global
           R1 = 2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c86qC() //  [R1]
         { info_tbl: [(c86qC,
                       label: block_c86qC_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86qC: // global
           _c86rd::P64 = R1 & 7;
           if (_c86rd::P64 < 3) goto u86rh; else goto u86rl;
       u86rh: // global
           if (_c86rd::P64 < 2) goto u86rn; else goto u86rm;
       u86rn: // global
           Sp = Sp + 8;
           call _c86r7() args: 0, res: 0, upd: 0;
       u86rm: // global
           Sp = Sp + 8;
           call _c86rb() args: 0, res: 0, upd: 0;
       u86rl: // global
           Sp = Sp + 8;
           call _c86qS() args: 0, res: 0, upd: 0;
     }
 },
 _c86qS() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86qS: // global
           R1 = 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c86qV() //  [R1]
         { info_tbl: [(c86qV,
                       label: block_c86qV_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86qV: // global
           _c86rc::P64 = R1 & 7;
           if (_c86rc::P64 < 3) goto u86ri; else goto u86ro;
       u86ri: // global
           if (_c86rc::P64 < 2) goto c86r3; else goto u86rp;
       c86r3: // global
           R1 = (-2);
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u86rp: // global
           Sp = Sp + 8;
           call _c86r7() args: 0, res: 0, upd: 0;
       u86ro: // global
           Sp = Sp + 8;
           call _c86rb() args: 0, res: 0, upd: 0;
     }
 },
 _c86r7() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86r7: // global
           R1 = (-1);
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c86rb() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86rb: // global
           R1 = 0;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.711153367 UTC

[section ""data" . GHC.IO.Device.$fIxSeekMode_$cunsafeIndex_closure" {
     GHC.IO.Device.$fIxSeekMode_$cunsafeIndex_closure:
         const GHC.IO.Device.$fIxSeekMode_$cunsafeIndex_info;
 },
 GHC.IO.Device.$fIxSeekMode_$cunsafeIndex_entry() //  [R2, R3]
         { info_tbl: [(c86sm,
                       label: GHC.IO.Device.$fIxSeekMode_$cunsafeIndex_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86sm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86su; else goto c86sv;
       c86su: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fIxSeekMode_$cunsafeIndex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c86sv: // global
           I64[Sp - 16] = block_c86sj_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u86sA; else goto c86sk;
       u86sA: // global
           call _c86sj(R1) args: 0, res: 0, upd: 0;
       c86sk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c86sj() //  [R1]
         { info_tbl: [(c86sj,
                       label: block_c86sj_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86sj: // global
           _s85NG::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c86sp_info;
           R3 = _s85NG::P64;
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.IO.Device.$w$cunsafeIndex_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c86sp() //  [R1]
         { info_tbl: [(c86sp,
                       label: block_c86sp_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86sp: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c86sz; else goto c86sy;
       c86sz: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c86sy: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.719757072 UTC

[section ""data" . GHC.IO.Device.$w$cinRange_closure" {
     GHC.IO.Device.$w$cinRange_closure:
         const GHC.IO.Device.$w$cinRange_info;
 },
 GHC.IO.Device.$w$cinRange_entry() //  [R2, R3, R4]
         { info_tbl: [(c86t5,
                       label: GHC.IO.Device.$w$cinRange_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86t5: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c86t6; else goto c86t7;
       c86t6: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$w$cinRange_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c86t7: // global
           I64[Sp - 24] = block_c86sX_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u86ur; else goto c86sY;
       u86ur: // global
           call _c86sX(R1) args: 0, res: 0, upd: 0;
       c86sY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c86sX() //  [R1]
         { info_tbl: [(c86sX,
                       label: block_c86sX_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86sX: // global
           _s85NM::P64 = P64[Sp + 8];
           _c86t4::P64 = R1 & 7;
           if (_c86t4::P64 < 3) goto u86un; else goto c86t3;
       u86un: // global
           if (_c86t4::P64 < 2) goto c86t1; else goto c86t2;
       c86t1: // global
           _s85NP::I64 = 0;
           goto s85NO;
       c86t2: // global
           _s85NP::I64 = 1;
           goto s85NO;
       c86t3: // global
           _s85NP::I64 = 2;
           goto s85NO;
       s85NO: // global
           I64[Sp] = block_c86td_info;
           R1 = _s85NM::P64;
           I64[Sp + 8] = _s85NP::I64;
           if (R1 & 7 != 0) goto u86uq; else goto c86tO;
       u86uq: // global
           call _c86td(R1) args: 0, res: 0, upd: 0;
       c86tO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c86td() //  [R1]
         { info_tbl: [(c86td,
                       label: block_c86td_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86td: // global
           _s85NN::P64 = P64[Sp + 16];
           _c86uc::P64 = R1 & 7;
           if (_c86uc::P64 < 3) goto u86uo; else goto c86u2;
       u86uo: // global
           if (_c86uc::P64 < 2) goto c86tU; else goto c86tY;
       c86tU: // global
           _s85NR::I64 = 0;
           goto s85NQ;
       c86tY: // global
           _s85NR::I64 = 1;
           goto s85NQ;
       c86u2: // global
           _s85NR::I64 = 2;
           goto s85NQ;
       s85NQ: // global
           I64[Sp] = block_c86ti_info;
           R1 = _s85NN::P64;
           I64[Sp + 16] = _s85NR::I64;
           if (R1 & 7 != 0) goto u86us; else goto c86tk;
       u86us: // global
           call _c86ti(R1) args: 0, res: 0, upd: 0;
       c86tk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c86ti() //  [R1]
         { info_tbl: [(c86ti,
                       label: block_c86ti_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86ti: // global
           _s85NP::I64 = I64[Sp + 8];
           _s85NR::I64 = I64[Sp + 16];
           _c86ud::P64 = R1 & 7;
           if (_c86ud::P64 < 3) goto u86up; else goto c86tN;
       u86up: // global
           if (_c86ud::P64 < 2) goto c86tv; else goto c86tE;
       c86tv: // global
           if (%MO_S_Lt_W64(0, _s85NP::I64)) goto c86tL; else goto c86tt;
       c86tt: // global
           R1 = I64[(%MO_S_Le_W64(0,
                                  _s85NR::I64) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c86tE: // global
           if (%MO_S_Lt_W64(1, _s85NP::I64)) goto c86tL; else goto c86tD;
       c86tD: // global
           R1 = I64[(%MO_S_Le_W64(1,
                                  _s85NR::I64) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c86tN: // global
           if (%MO_S_Lt_W64(2, _s85NP::I64)) goto c86tL; else goto c86tM;
       c86tL: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c86tM: // global
           R1 = I64[(%MO_S_Le_W64(2,
                                  _s85NR::I64) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.732438707 UTC

[section ""data" . GHC.IO.Device.$fIxSeekMode_$cinRange_closure" {
     GHC.IO.Device.$fIxSeekMode_$cinRange_closure:
         const GHC.IO.Device.$fIxSeekMode_$cinRange_info;
 },
 GHC.IO.Device.$fIxSeekMode_$cinRange_entry() //  [R2, R3]
         { info_tbl: [(c86vb,
                       label: GHC.IO.Device.$fIxSeekMode_$cinRange_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86vb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86vc; else goto c86vd;
       c86vc: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fIxSeekMode_$cinRange_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c86vd: // global
           I64[Sp - 16] = block_c86v8_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u86vh; else goto c86v9;
       u86vh: // global
           call _c86v8(R1) args: 0, res: 0, upd: 0;
       c86v9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c86v8() //  [R1]
         { info_tbl: [(c86v8,
                       label: block_c86v8_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86v8: // global
           R4 = P64[Sp + 8];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call GHC.IO.Device.$w$cinRange_entry(R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.7382334 UTC

[section ""data" . lvl_r81Zy_closure" {
     lvl_r81Zy_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.739965724 UTC

[section ""data" . lvl1_r81Zz_closure" {
     lvl1_r81Zz_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.74178841 UTC

[section ""data" . lvl2_r81ZA_closure" {
     lvl2_r81ZA_closure:
         const GHC.Types.I#_con_info;
         const 2;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.744072876 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_$cfromEnum_closure" {
     GHC.IO.Device.$fEnumSeekMode_$cfromEnum_closure:
         const GHC.IO.Device.$fEnumSeekMode_$cfromEnum_info;
 },
 GHC.IO.Device.$fEnumSeekMode_$cfromEnum_entry() //  [R2]
         { info_tbl: [(c86vH,
                       label: GHC.IO.Device.$fEnumSeekMode_$cfromEnum_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86vH: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c86vI; else goto c86vJ;
       c86vI: // global
           R2 = R2;
           R1 = GHC.IO.Device.$fEnumSeekMode_$cfromEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c86vJ: // global
           I64[Sp - 8] = block_c86vz_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u86vU; else goto c86vA;
       u86vU: // global
           call _c86vz(R1) args: 0, res: 0, upd: 0;
       c86vA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c86vz() //  [R1]
         { info_tbl: [(c86vz,
                       label: block_c86vz_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86vz: // global
           _c86vG::P64 = R1 & 7;
           if (_c86vG::P64 < 3) goto u86vT; else goto c86vF;
       u86vT: // global
           if (_c86vG::P64 < 2) goto c86vD; else goto c86vE;
       c86vD: // global
           R1 = lvl_r81Zy_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c86vE: // global
           R1 = lvl1_r81Zz_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c86vF: // global
           R1 = lvl2_r81ZA_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.751417354 UTC

[section ""data" . GHC.IO.Device.$fIxSeekMode_go1_closure" {
     GHC.IO.Device.$fIxSeekMode_go1_closure:
         const GHC.IO.Device.$fIxSeekMode_go1_info;
 },
 sat_s85Oc_entry() //  [R1]
         { info_tbl: [(c86wl,
                       label: sat_s85Oc_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86wl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86wm; else goto c86wn;
       c86wm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86wn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s85Oa::I64 = I64[R1 + 16];
           if (_s85Oa::I64 != 0) goto c86wj; else goto c86wk;
       c86wj: // global
           R2 = _s85Oa::I64 + 1;
           Sp = Sp - 16;
           call GHC.IO.Device.$fIxSeekMode_go1_entry(R2) args: 24, res: 0, upd: 24;
       c86wk: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s85O9_entry() //  [R1]
         { info_tbl: [(c86wu,
                       label: sat_s85O9_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86wu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86wv; else goto c86ww;
       c86wv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86ww: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.IO.Device.$fIxSeekMode_go1_entry() //  [R2]
         { info_tbl: [(c86wy,
                       label: GHC.IO.Device.$fIxSeekMode_go1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86wy: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c86wC; else goto c86wB;
       c86wC: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.IO.Device.$fIxSeekMode_go1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c86wB: // global
           I64[Hp - 64] = sat_s85Oc_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s85O9_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.760930828 UTC

[section ""data" . GHC.IO.Device.$fIxSeekMode_go_closure" {
     GHC.IO.Device.$fIxSeekMode_go_closure:
         const GHC.IO.Device.$fIxSeekMode_go_info;
 },
 sat_s85Oh_entry() //  [R1]
         { info_tbl: [(c86xe,
                       label: sat_s85Oh_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86xe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86xf; else goto c86xg;
       c86xf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86xg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s85Of::I64 = I64[R1 + 16];
           if (_s85Of::I64 != 1) goto c86xc; else goto c86xd;
       c86xc: // global
           R2 = _s85Of::I64 + 1;
           Sp = Sp - 16;
           call GHC.IO.Device.$fIxSeekMode_go_entry(R2) args: 24, res: 0, upd: 24;
       c86xd: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s85Oe_entry() //  [R1]
         { info_tbl: [(c86xn,
                       label: sat_s85Oe_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86xn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86xo; else goto c86xp;
       c86xo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86xp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.IO.Device.$fIxSeekMode_go_entry() //  [R2]
         { info_tbl: [(c86xr,
                       label: GHC.IO.Device.$fIxSeekMode_go_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86xr: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c86xv; else goto c86xu;
       c86xv: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.IO.Device.$fIxSeekMode_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c86xu: // global
           I64[Hp - 64] = sat_s85Oh_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s85Oe_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.770116692 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_go3_closure" {
     GHC.IO.Device.$fEnumSeekMode_go3_closure:
         const GHC.IO.Device.$fEnumSeekMode_go3_info;
 },
 sat_s85Om_entry() //  [R1]
         { info_tbl: [(c86y7,
                       label: sat_s85Om_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86y7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86y8; else goto c86y9;
       c86y8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86y9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s85Ok::I64 = I64[R1 + 16];
           if (_s85Ok::I64 != 2) goto c86y5; else goto c86y6;
       c86y5: // global
           R2 = _s85Ok::I64 + 1;
           Sp = Sp - 16;
           call GHC.IO.Device.$fEnumSeekMode_go3_entry(R2) args: 24, res: 0, upd: 24;
       c86y6: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s85Oj_entry() //  [R1]
         { info_tbl: [(c86yg,
                       label: sat_s85Oj_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86yg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86yh; else goto c86yi;
       c86yh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86yi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.IO.Device.$fEnumSeekMode_go3_entry() //  [R2]
         { info_tbl: [(c86yk,
                       label: GHC.IO.Device.$fEnumSeekMode_go3_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86yk: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c86yo; else goto c86yn;
       c86yo: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.IO.Device.$fEnumSeekMode_go3_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c86yn: // global
           I64[Hp - 64] = sat_s85Om_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s85Oj_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.779459116 UTC

[section ""data" . GHC.IO.Device.$w$crange_closure" {
     GHC.IO.Device.$w$crange_closure:
         const GHC.IO.Device.$w$crange_info;
 },
 GHC.IO.Device.$w$crange_entry() //  [R2, R3]
         { info_tbl: [(c86z2,
                       label: GHC.IO.Device.$w$crange_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86z2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86z3; else goto c86z4;
       c86z3: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$w$crange_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c86z4: // global
           I64[Sp - 16] = block_c86yU_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u86zR; else goto c86yV;
       u86zR: // global
           call _c86yU(R1) args: 0, res: 0, upd: 0;
       c86yV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c86yU() //  [R1]
         { info_tbl: [(c86yU,
                       label: block_c86yU_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86yU: // global
           _s85Oo::P64 = P64[Sp + 8];
           _c86z1::P64 = R1 & 7;
           if (_c86z1::P64 < 3) goto u86zO; else goto c86z0;
       u86zO: // global
           if (_c86z1::P64 < 2) goto c86yY; else goto c86yZ;
       c86yY: // global
           _s85Oq::I64 = 0;
           goto s85Op;
       c86yZ: // global
           _s85Oq::I64 = 1;
           goto s85Op;
       c86z0: // global
           _s85Oq::I64 = 2;
           goto s85Op;
       s85Op: // global
           I64[Sp] = block_c86z8_info;
           R1 = _s85Oo::P64;
           I64[Sp + 8] = _s85Oq::I64;
           if (R1 & 7 != 0) goto u86zQ; else goto c86za;
       u86zQ: // global
           call _c86z8(R1) args: 0, res: 0, upd: 0;
       c86za: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c86z8() //  [R1]
         { info_tbl: [(c86z8,
                       label: block_c86z8_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86z8: // global
           _s85Oq::I64 = I64[Sp + 8];
           _c86zN::P64 = R1 & 7;
           if (_c86zN::P64 < 3) goto u86zP; else goto c86zD;
       u86zP: // global
           if (_c86zN::P64 < 2) goto c86zl; else goto c86zu;
       c86zl: // global
           if (%MO_S_Gt_W64(_s85Oq::I64, 0)) goto c86zC; else goto c86zi;
       c86zi: // global
           R2 = _s85Oq::I64;
           Sp = Sp + 16;
           call GHC.IO.Device.$fIxSeekMode_go1_entry(R2) args: 8, res: 0, upd: 8;
       c86zu: // global
           if (%MO_S_Gt_W64(_s85Oq::I64, 1)) goto c86zC; else goto c86zs;
       c86zs: // global
           R2 = _s85Oq::I64;
           Sp = Sp + 16;
           call GHC.IO.Device.$fIxSeekMode_go_entry(R2) args: 8, res: 0, upd: 8;
       c86zD: // global
           if (%MO_S_Gt_W64(_s85Oq::I64, 2)) goto c86zC; else goto c86zB;
       c86zC: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c86zB: // global
           R2 = _s85Oq::I64;
           Sp = Sp + 16;
           call GHC.IO.Device.$fEnumSeekMode_go3_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.788496741 UTC

[section ""data" . GHC.IO.Device.$fIxSeekMode_$crange_closure" {
     GHC.IO.Device.$fIxSeekMode_$crange_closure:
         const GHC.IO.Device.$fIxSeekMode_$crange_info;
 },
 GHC.IO.Device.$fIxSeekMode_$crange_entry() //  [R2]
         { info_tbl: [(c86Ai,
                       label: GHC.IO.Device.$fIxSeekMode_$crange_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86Ai: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c86Aj; else goto c86Ak;
       c86Aj: // global
           R2 = R2;
           R1 = GHC.IO.Device.$fIxSeekMode_$crange_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c86Ak: // global
           I64[Sp - 8] = block_c86Af_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u86Ao; else goto c86Ag;
       u86Ao: // global
           call _c86Af(R1) args: 0, res: 0, upd: 0;
       c86Ag: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c86Af() //  [R1]
         { info_tbl: [(c86Af,
                       label: block_c86Af_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86Af: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.IO.Device.$w$crange_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.79566393 UTC

[section ""data" . GHC.IO.Device.$w$crangeSize_closure" {
     GHC.IO.Device.$w$crangeSize_closure:
         const GHC.IO.Device.$w$crangeSize_info;
 },
 GHC.IO.Device.$w$crangeSize_entry() //  [R2, R3]
         { info_tbl: [(c86AJ,
                       label: GHC.IO.Device.$w$crangeSize_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86AJ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c86AK; else goto c86AL;
       c86AK: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$w$crangeSize_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c86AL: // global
           I64[Sp - 24] = block_c86AD_info;
           R4 = R3;
           _s85OB::P64 = R3;
           R3 = R3;
           _s85OA::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s85OA::P64;
           P64[Sp - 8] = _s85OB::P64;
           Sp = Sp - 24;
           call GHC.IO.Device.$w$cinRange_entry(R4,
                                                R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _c86AD() //  [R1]
         { info_tbl: [(c86AD,
                       label: block_c86AD_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86AD: // global
           if (R1 & 7 == 1) goto u86C2; else goto c86AH;
       u86C2: // global
           Sp = Sp + 24;
           call _c86BP() args: 0, res: 0, upd: 0;
       c86AH: // global
           _s85OA::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c86AR_info;
           R1 = _s85OA::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u86Ca; else goto c86AT;
       u86Ca: // global
           call _c86AR(R1) args: 0, res: 0, upd: 0;
       c86AT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c86AR() //  [R1]
         { info_tbl: [(c86AR,
                       label: block_c86AR_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86AR: // global
           _s85OB::P64 = P64[Sp + 8];
           _c86BU::P64 = R1 & 7;
           if (_c86BU::P64 < 3) goto u86BY; else goto c86BE;
       u86BY: // global
           if (_c86BU::P64 < 2) goto c86B0; else goto c86Bk;
       c86B0: // global
           I64[Sp + 8] = block_c86AX_info;
           R1 = _s85OB::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u86Cc; else goto c86B1;
       u86Cc: // global
           call _c86AX(R1) args: 0, res: 0, upd: 0;
       c86B1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c86Bk: // global
           I64[Sp + 8] = block_c86Bi_info;
           R1 = _s85OB::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u86Cd; else goto c86Bl;
       u86Cd: // global
           call _c86Bi(R1) args: 0, res: 0, upd: 0;
       c86Bl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c86BE: // global
           I64[Sp + 8] = block_c86BC_info;
           R1 = _s85OB::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u86Ce; else goto c86BF;
       u86Ce: // global
           call _c86BC(R1) args: 0, res: 0, upd: 0;
       c86BF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c86AX() //  [R1]
         { info_tbl: [(c86AX,
                       label: block_c86AX_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86AX: // global
           _c86BX::P64 = R1 & 7;
           if (_c86BX::P64 < 3) goto u86BZ; else goto c86Bf;
       u86BZ: // global
           if (_c86BX::P64 < 2) goto u86C4; else goto u86C3;
       u86C4: // global
           Sp = Sp + 8;
           call _c86BT() args: 0, res: 0, upd: 0;
       u86C3: // global
           Sp = Sp + 8;
           call _c86Bz() args: 0, res: 0, upd: 0;
       c86Bf: // global
           R1 = 3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c86Bi() //  [R1]
         { info_tbl: [(c86Bi,
                       label: block_c86Bi_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86Bi: // global
           _c86BW::P64 = R1 & 7;
           if (_c86BW::P64 < 3) goto u86C0; else goto u86C5;
       u86C0: // global
           if (_c86BW::P64 < 2) goto u86C7; else goto u86C6;
       u86C7: // global
           Sp = Sp + 8;
           call _c86BP() args: 0, res: 0, upd: 0;
       u86C6: // global
           Sp = Sp + 8;
           call _c86BT() args: 0, res: 0, upd: 0;
       u86C5: // global
           Sp = Sp + 8;
           call _c86Bz() args: 0, res: 0, upd: 0;
     }
 },
 _c86Bz() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86Bz: // global
           R1 = 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c86BC() //  [R1]
         { info_tbl: [(c86BC,
                       label: block_c86BC_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86BC: // global
           _c86BV::P64 = R1 & 7;
           if (_c86BV::P64 < 3) goto u86C1; else goto u86C8;
       u86C1: // global
           if (_c86BV::P64 < 2) goto c86BL; else goto u86C9;
       c86BL: // global
           R1 = (-1);
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u86C9: // global
           Sp = Sp + 8;
           call _c86BP() args: 0, res: 0, upd: 0;
       u86C8: // global
           Sp = Sp + 8;
           call _c86BT() args: 0, res: 0, upd: 0;
     }
 },
 _c86BP() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86BP: // global
           R1 = 0;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c86BT() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86BT: // global
           R1 = 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.813084616 UTC

[section ""data" . GHC.IO.Device.$fIxSeekMode_$crangeSize_closure" {
     GHC.IO.Device.$fIxSeekMode_$crangeSize_closure:
         const GHC.IO.Device.$fIxSeekMode_$crangeSize_info;
 },
 GHC.IO.Device.$fIxSeekMode_$crangeSize_entry() //  [R2]
         { info_tbl: [(c86Dd,
                       label: GHC.IO.Device.$fIxSeekMode_$crangeSize_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86Dd: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c86Dl; else goto c86Dm;
       c86Dl: // global
           R2 = R2;
           R1 = GHC.IO.Device.$fIxSeekMode_$crangeSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c86Dm: // global
           I64[Sp - 8] = block_c86Da_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u86Dr; else goto c86Db;
       u86Dr: // global
           call _c86Da(R1) args: 0, res: 0, upd: 0;
       c86Db: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c86Da() //  [R1]
         { info_tbl: [(c86Da,
                       label: block_c86Da_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86Da: // global
           I64[Sp] = block_c86Dg_info;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.IO.Device.$w$crangeSize_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 _c86Dg() //  [R1]
         { info_tbl: [(c86Dg,
                       label: block_c86Dg_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86Dg: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c86Dq; else goto c86Dp;
       c86Dq: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c86Dp: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.822413868 UTC

[section ""data" . GHC.IO.Device.$w$cunsafeRangeSize_closure" {
     GHC.IO.Device.$w$cunsafeRangeSize_closure:
         const GHC.IO.Device.$w$cunsafeRangeSize_info;
 },
 GHC.IO.Device.$w$cunsafeRangeSize_entry() //  [R2, R3]
         { info_tbl: [(c86DU,
                       label: GHC.IO.Device.$w$cunsafeRangeSize_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86DU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86DV; else goto c86DW;
       c86DV: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$w$cunsafeRangeSize_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c86DW: // global
           I64[Sp - 16] = block_c86DM_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u86F9; else goto c86DN;
       u86F9: // global
           call _c86DM(R1) args: 0, res: 0, upd: 0;
       c86DN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c86DM() //  [R1]
         { info_tbl: [(c86DM,
                       label: block_c86DM_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86DM: // global
           _s85ON::P64 = P64[Sp + 8];
           _c86DT::P64 = R1 & 7;
           if (_c86DT::P64 < 3) goto u86EV; else goto c86DS;
       u86EV: // global
           if (_c86DT::P64 < 2) goto c86DQ; else goto c86DR;
       c86DQ: // global
           I64[Sp + 8] = block_c86DZ_info;
           R1 = _s85ON::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u86F6; else goto c86E1;
       u86F6: // global
           call _c86DZ(R1) args: 0, res: 0, upd: 0;
       c86E1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c86DR: // global
           I64[Sp + 8] = block_c86Ei_info;
           R1 = _s85ON::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u86F7; else goto c86Ek;
       u86F7: // global
           call _c86Ei(R1) args: 0, res: 0, upd: 0;
       c86Ek: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c86DS: // global
           I64[Sp + 8] = block_c86EB_info;
           R1 = _s85ON::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u86F8; else goto c86ED;
       u86F8: // global
           call _c86EB(R1) args: 0, res: 0, upd: 0;
       c86ED: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c86DZ() //  [R1]
         { info_tbl: [(c86DZ,
                       label: block_c86DZ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86DZ: // global
           _c86EU::P64 = R1 & 7;
           if (_c86EU::P64 < 3) goto u86EW; else goto c86Ef;
       u86EW: // global
           if (_c86EU::P64 < 2) goto u86F0; else goto u86EZ;
       u86F0: // global
           Sp = Sp + 8;
           call _c86ER() args: 0, res: 0, upd: 0;
       u86EZ: // global
           Sp = Sp + 8;
           call _c86Ey() args: 0, res: 0, upd: 0;
       c86Ef: // global
           R1 = 3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c86Ei() //  [R1]
         { info_tbl: [(c86Ei,
                       label: block_c86Ei_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86Ei: // global
           _c86ET::P64 = R1 & 7;
           if (_c86ET::P64 < 3) goto u86EX; else goto u86F1;
       u86EX: // global
           if (_c86ET::P64 < 2) goto u86F3; else goto u86F2;
       u86F3: // global
           Sp = Sp + 8;
           call _c86EN() args: 0, res: 0, upd: 0;
       u86F2: // global
           Sp = Sp + 8;
           call _c86ER() args: 0, res: 0, upd: 0;
       u86F1: // global
           Sp = Sp + 8;
           call _c86Ey() args: 0, res: 0, upd: 0;
     }
 },
 _c86Ey() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86Ey: // global
           R1 = 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c86EB() //  [R1]
         { info_tbl: [(c86EB,
                       label: block_c86EB_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86EB: // global
           _c86ES::P64 = R1 & 7;
           if (_c86ES::P64 < 3) goto u86EY; else goto u86F4;
       u86EY: // global
           if (_c86ES::P64 < 2) goto c86EJ; else goto u86F5;
       c86EJ: // global
           R1 = (-1);
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u86F5: // global
           Sp = Sp + 8;
           call _c86EN() args: 0, res: 0, upd: 0;
       u86F4: // global
           Sp = Sp + 8;
           call _c86ER() args: 0, res: 0, upd: 0;
     }
 },
 _c86EN() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86EN: // global
           R1 = 0;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c86ER() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86ER: // global
           R1 = 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.837849018 UTC

[section ""data" . GHC.IO.Device.$fIxSeekMode_$cunsafeRangeSize_closure" {
     GHC.IO.Device.$fIxSeekMode_$cunsafeRangeSize_closure:
         const GHC.IO.Device.$fIxSeekMode_$cunsafeRangeSize_info;
 },
 GHC.IO.Device.$fIxSeekMode_$cunsafeRangeSize_entry() //  [R2]
         { info_tbl: [(c86G2,
                       label: GHC.IO.Device.$fIxSeekMode_$cunsafeRangeSize_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86G2: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c86Ga; else goto c86Gb;
       c86Ga: // global
           R2 = R2;
           R1 = GHC.IO.Device.$fIxSeekMode_$cunsafeRangeSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c86Gb: // global
           I64[Sp - 8] = block_c86FZ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u86Gg; else goto c86G0;
       u86Gg: // global
           call _c86FZ(R1) args: 0, res: 0, upd: 0;
       c86G0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c86FZ() //  [R1]
         { info_tbl: [(c86FZ,
                       label: block_c86FZ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86FZ: // global
           I64[Sp] = block_c86G5_info;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.IO.Device.$w$cunsafeRangeSize_entry(R3,
                                                        R2) args: 8, res: 8, upd: 8;
     }
 },
 _c86G5() //  [R1]
         { info_tbl: [(c86G5,
                       label: block_c86G5_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86G5: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c86Gf; else goto c86Ge;
       c86Gf: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c86Ge: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.845644263 UTC

[section ""data" . GHC.IO.Device.$fIxSeekMode_$cindex_closure" {
     GHC.IO.Device.$fIxSeekMode_$cindex_closure:
         const GHC.IO.Device.$fIxSeekMode_$cindex_info;
         const 0;
 },
 GHC.IO.Device.$fIxSeekMode_$cindex_entry() //  [R2, R3]
         { info_tbl: [(c86GE,
                       label: GHC.IO.Device.$fIxSeekMode_$cindex_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86GE: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c86GF; else goto c86GG;
       c86GF: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fIxSeekMode_$cindex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c86GG: // global
           I64[Sp - 16] = block_c86GB_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u86H4; else goto c86GC;
       u86H4: // global
           call _c86GB(R1) args: 0, res: 0, upd: 0;
       c86GC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c86GB() //  [R1]
         { info_tbl: [(c86GB,
                       label: block_c86GB_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86GB: // global
           I64[Sp - 8] = block_c86GJ_info;
           R4 = P64[Sp + 8];
           R3 = P64[R1 + 15];
           _s85P0::P64 = P64[R1 + 7];
           R2 = _s85P0::P64;
           P64[Sp] = _s85P0::P64;
           Sp = Sp - 8;
           call GHC.IO.Device.$w$cinRange_entry(R4,
                                                R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _c86GJ() //  [R1]
         { info_tbl: [(c86GJ,
                       label: block_c86GJ_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86GJ: // global
           if (R1 & 7 == 1) goto c86GQ; else goto c86GZ;
       c86GQ: // global
           R1 = GHC.Arr.hopelessIndexError_closure;
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c86GZ: // global
           _s85OY::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c86GT_info;
           R3 = _s85OY::P64;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.IO.Device.$w$cunsafeIndex_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c86GT() //  [R1]
         { info_tbl: [(c86GT,
                       label: block_c86GT_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86GT: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c86H2; else goto c86H1;
       c86H2: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c86H1: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.855893478 UTC

[section ""data" . GHC.IO.Device.$fIxSeekMode_closure" {
     GHC.IO.Device.$fIxSeekMode_closure:
         const GHC.Arr.C:Ix_con_info;
         const GHC.IO.Device.$fOrdSeekMode_closure+1;
         const GHC.IO.Device.$fIxSeekMode_$crange_closure+1;
         const GHC.IO.Device.$fIxSeekMode_$cindex_closure+2;
         const GHC.IO.Device.$fIxSeekMode_$cunsafeIndex_closure+2;
         const GHC.IO.Device.$fIxSeekMode_$cinRange_closure+2;
         const GHC.IO.Device.$fIxSeekMode_$crangeSize_closure+1;
         const GHC.IO.Device.$fIxSeekMode_$cunsafeRangeSize_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.857806853 UTC

[section ""cstring" . lvl3_r81ZB_bytes" {
     lvl3_r81ZB_bytes:
         I8[] [101,114,114,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.859726329 UTC

[section ""data" . lvl4_r81ZC_closure" {
     lvl4_r81ZC_closure:
         const lvl4_r81ZC_info;
         const 0;
         const 0;
         const 0;
 },
 lvl4_r81ZC_entry() //  [R1]
         { info_tbl: [(c86HA,
                       label: lvl4_r81ZC_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86HA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86HB; else goto c86HC;
       c86HB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86HC: // global
           (_c86Hx::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c86Hx::I64 == 0) goto c86Hz; else goto c86Hy;
       c86Hz: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c86Hy: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c86Hx::I64;
           R2 = lvl3_r81ZB_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.863895816 UTC

[section ""cstring" . GHC.IO.Device.$trModule4_bytes" {
     GHC.IO.Device.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.865956625 UTC

[section ""data" . lvl5_r81ZD_closure" {
     lvl5_r81ZD_closure:
         const lvl5_r81ZD_info;
         const 0;
         const 0;
         const 0;
 },
 lvl5_r81ZD_entry() //  [R1]
         { info_tbl: [(c86HS,
                       label: lvl5_r81ZD_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86HS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86HT; else goto c86HU;
       c86HT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86HU: // global
           (_c86HP::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c86HP::I64 == 0) goto c86HR; else goto c86HQ;
       c86HR: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c86HQ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c86HP::I64;
           R2 = GHC.IO.Device.$trModule4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.870031673 UTC

[section ""cstring" . GHC.IO.Device.$trModule2_bytes" {
     GHC.IO.Device.$trModule2_bytes:
         I8[] [71,72,67,46,73,79,46,68,101,118,105,99,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.872186708 UTC

[section ""data" . lvl6_r81ZE_closure" {
     lvl6_r81ZE_closure:
         const lvl6_r81ZE_info;
         const 0;
         const 0;
         const 0;
 },
 lvl6_r81ZE_entry() //  [R1]
         { info_tbl: [(c86Ia,
                       label: lvl6_r81ZE_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86Ia: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86Ib; else goto c86Ic;
       c86Ib: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86Ic: // global
           (_c86I7::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c86I7::I64 == 0) goto c86I9; else goto c86I8;
       c86I9: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c86I8: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c86I7::I64;
           R2 = GHC.IO.Device.$trModule2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.876811529 UTC

[section ""cstring" . lvl7_r81ZF_bytes" {
     lvl7_r81ZF_bytes:
         I8[] [46,47,71,72,67,47,73,79,47,68,101,118,105,99,101,46,104,115]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.878796041 UTC

[section ""data" . lvl8_r81ZG_closure" {
     lvl8_r81ZG_closure:
         const lvl8_r81ZG_info;
         const 0;
         const 0;
         const 0;
 },
 lvl8_r81ZG_entry() //  [R1]
         { info_tbl: [(c86Is,
                       label: lvl8_r81ZG_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86Is: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86It; else goto c86Iu;
       c86It: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86Iu: // global
           (_c86Ip::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c86Ip::I64 == 0) goto c86Ir; else goto c86Iq;
       c86Ir: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c86Iq: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c86Ip::I64;
           R2 = lvl7_r81ZF_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.883989382 UTC

[section ""data" . lvl9_r81ZH_closure" {
     lvl9_r81ZH_closure:
         const GHC.Types.I#_con_info;
         const 173;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.885874471 UTC

[section ""data" . lvl10_r81ZI_closure" {
     lvl10_r81ZI_closure:
         const GHC.Types.I#_con_info;
         const 16;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.887598091 UTC

[section ""data" . lvl11_r81ZJ_closure" {
     lvl11_r81ZJ_closure:
         const GHC.Types.I#_con_info;
         const 20;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.889383774 UTC

[section ""data" . lvl12_r81ZK_closure" {
     lvl12_r81ZK_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl5_r81ZD_closure;
         const lvl6_r81ZE_closure;
         const lvl8_r81ZG_closure;
         const lvl9_r81ZH_closure+1;
         const lvl10_r81ZI_closure+1;
         const lvl9_r81ZH_closure+1;
         const lvl11_r81ZJ_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.891293596 UTC

[section ""data" . lvl13_r81ZL_closure" {
     lvl13_r81ZL_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl4_r81ZC_closure;
         const lvl12_r81ZK_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.893178191 UTC

[section ""cstring" . lvl14_r81ZM_bytes" {
     lvl14_r81ZM_bytes:
         I8[] [112,114,101,100,123,83,101,101,107,77,111,100,101,125,58,32,116,114,105,101,100,32,116,111,32,116,97,107,101,32,96,112,114,101,100,39,32,111,102,32,102,105,114,115,116,32,116,97,103,32,105,110,32,101,110,117,109,101,114,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.897643042 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode4_closure" {
     GHC.IO.Device.$fEnumSeekMode4_closure:
         const GHC.IO.Device.$fEnumSeekMode4_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Device.$fEnumSeekMode4_entry() //  [R1]
         { info_tbl: [(c86IR,
                       label: GHC.IO.Device.$fEnumSeekMode4_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86IR: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c86IS; else goto c86IT;
       c86IS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86IT: // global
           (_c86IM::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c86IM::I64 == 0) goto c86IO; else goto c86IN;
       c86IO: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c86IN: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c86IM::I64;
           I64[Sp - 24] = block_c86IP_info;
           R2 = lvl14_r81ZM_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c86IP() //  [R1]
         { info_tbl: [(c86IP,
                       label: block_c86IP_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86IP: // global
           R3 = R1;
           R2 = lvl13_r81ZL_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.903902896 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_$cpred_closure" {
     GHC.IO.Device.$fEnumSeekMode_$cpred_closure:
         const GHC.IO.Device.$fEnumSeekMode_$cpred_info;
         const 0;
 },
 GHC.IO.Device.$fEnumSeekMode_$cpred_entry() //  [R2]
         { info_tbl: [(c86Jl,
                       label: GHC.IO.Device.$fEnumSeekMode_$cpred_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86Jl: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c86Jm; else goto c86Jn;
       c86Jm: // global
           R2 = R2;
           R1 = GHC.IO.Device.$fEnumSeekMode_$cpred_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c86Jn: // global
           I64[Sp - 8] = block_c86Jd_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u86Jy; else goto c86Je;
       u86Jy: // global
           call _c86Jd(R1) args: 0, res: 0, upd: 0;
       c86Je: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c86Jd() //  [R1]
         { info_tbl: [(c86Jd,
                       label: block_c86Jd_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86Jd: // global
           _c86Jk::P64 = R1 & 7;
           if (_c86Jk::P64 < 3) goto u86Jx; else goto c86Jj;
       u86Jx: // global
           if (_c86Jk::P64 < 2) goto c86Jh; else goto c86Ji;
       c86Jh: // global
           R1 = GHC.IO.Device.$fEnumSeekMode4_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c86Ji: // global
           R1 = GHC.IO.Device.AbsoluteSeek_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c86Jj: // global
           R1 = GHC.IO.Device.RelativeSeek_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.910193297 UTC

[section ""cstring" . lvl15_r81ZN_bytes" {
     lvl15_r81ZN_bytes:
         I8[] [115,117,99,99,123,83,101,101,107,77,111,100,101,125,58,32,116,114,105,101,100,32,116,111,32,116,97,107,101,32,96,115,117,99,99,39,32,111,102,32,108,97,115,116,32,116,97,103,32,105,110,32,101,110,117,109,101,114,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.912387582 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode5_closure" {
     GHC.IO.Device.$fEnumSeekMode5_closure:
         const GHC.IO.Device.$fEnumSeekMode5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Device.$fEnumSeekMode5_entry() //  [R1]
         { info_tbl: [(c86JW,
                       label: GHC.IO.Device.$fEnumSeekMode5_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86JW: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c86JX; else goto c86JY;
       c86JX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86JY: // global
           (_c86JR::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c86JR::I64 == 0) goto c86JT; else goto c86JS;
       c86JT: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c86JS: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c86JR::I64;
           I64[Sp - 24] = block_c86JU_info;
           R2 = lvl15_r81ZN_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c86JU() //  [R1]
         { info_tbl: [(c86JU,
                       label: block_c86JU_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86JU: // global
           R3 = R1;
           R2 = lvl13_r81ZL_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.919593119 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_$csucc_closure" {
     GHC.IO.Device.$fEnumSeekMode_$csucc_closure:
         const GHC.IO.Device.$fEnumSeekMode_$csucc_info;
         const 0;
 },
 GHC.IO.Device.$fEnumSeekMode_$csucc_entry() //  [R2]
         { info_tbl: [(c86Kq,
                       label: GHC.IO.Device.$fEnumSeekMode_$csucc_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86Kq: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c86Kr; else goto c86Ks;
       c86Kr: // global
           R2 = R2;
           R1 = GHC.IO.Device.$fEnumSeekMode_$csucc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c86Ks: // global
           I64[Sp - 8] = block_c86Ki_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u86KD; else goto c86Kj;
       u86KD: // global
           call _c86Ki(R1) args: 0, res: 0, upd: 0;
       c86Kj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c86Ki() //  [R1]
         { info_tbl: [(c86Ki,
                       label: block_c86Ki_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86Ki: // global
           _c86Kp::P64 = R1 & 7;
           if (_c86Kp::P64 < 3) goto u86KC; else goto c86Ko;
       u86KC: // global
           if (_c86Kp::P64 < 2) goto c86Km; else goto c86Kn;
       c86Km: // global
           R1 = GHC.IO.Device.RelativeSeek_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c86Kn: // global
           R1 = GHC.IO.Device.SeekFromEnd_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c86Ko: // global
           R1 = GHC.IO.Device.$fEnumSeekMode5_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.925791077 UTC

[section ""cstring" . lvl16_r81ZO_bytes" {
     lvl16_r81ZO_bytes:
         I8[] [41,32,105,115,32,111,117,116,115,105,100,101,32,111,102,32,101,110,117,109,101,114,97,116,105,111,110,39,115,32,114,97,110,103,101,32,40,48,44]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.928041275 UTC

[section ""cstring" . lvl17_r81ZP_bytes" {
     lvl17_r81ZP_bytes:
         I8[] [41]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.930578007 UTC

[section ""data" . lvl18_r81ZQ_closure" {
     lvl18_r81ZQ_closure:
         const lvl18_r81ZQ_info;
         const 0;
         const 0;
         const 0;
 },
 lvl18_r81ZQ_entry() //  [R1]
         { info_tbl: [(c86L0,
                       label: lvl18_r81ZQ_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86L0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86L1; else goto c86L2;
       c86L1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86L2: // global
           (_c86KX::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c86KX::I64 == 0) goto c86KZ; else goto c86KY;
       c86KZ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c86KY: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c86KX::I64;
           R2 = lvl17_r81ZP_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.935836454 UTC

[section ""data" . lvl19_r81ZR_closure" {
     lvl19_r81ZR_closure:
         const lvl19_r81ZR_info;
         const 0;
         const 0;
         const 0;
 },
 lvl19_r81ZR_entry() //  [R1]
         { info_tbl: [(c86Lk,
                       label: lvl19_r81ZR_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86Lk: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c86Ll; else goto c86Lm;
       c86Ll: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86Lm: // global
           (_c86Le::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c86Le::I64 == 0) goto c86Lg; else goto c86Lf;
       c86Lg: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c86Lf: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c86Le::I64;
           I64[Sp - 24] = block_c86Lh_info;
           R4 = lvl18_r81ZQ_closure;
           R3 = 2;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _c86Lh() //  [R1, R2]
         { info_tbl: [(c86Lh,
                       label: block_c86Lh_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86Lh: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c86Lp; else goto c86Lo;
       c86Lp: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c86Lo: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.943055896 UTC

[section ""data" . lvl20_r81ZS_closure" {
     lvl20_r81ZS_closure:
         const lvl20_r81ZS_info;
         const 0;
         const 0;
         const 0;
 },
 lvl20_r81ZS_entry() //  [R1]
         { info_tbl: [(c86LK,
                       label: lvl20_r81ZS_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86LK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86LL; else goto c86LM;
       c86LL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86LM: // global
           (_c86LH::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c86LH::I64 == 0) goto c86LJ; else goto c86LI;
       c86LJ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c86LI: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c86LH::I64;
           R3 = lvl19_r81ZR_closure;
           R2 = lvl16_r81ZO_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.947212384 UTC

[section ""cstring" . lvl21_r81ZT_bytes" {
     lvl21_r81ZT_bytes:
         I8[] [116,111,69,110,117,109,123,83,101,101,107,77,111,100,101,125,58,32,116,97,103,32,40]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.949598522 UTC

[section ""data" . GHC.IO.Device.$wlvl_closure" {
     GHC.IO.Device.$wlvl_closure:
         const GHC.IO.Device.$wlvl_info;
         const 0;
 },
 sat_s85Ph_entry() //  [R1]
         { info_tbl: [(c86M7,
                       label: sat_s85Ph_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86M7: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c86M8; else goto c86M9;
       c86M8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86M9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c86M4_info;
           R4 = lvl20_r81ZS_closure;
           R3 = I64[R1 + 16];
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _c86M4() //  [R1, R2]
         { info_tbl: [(c86M4,
                       label: block_c86M4_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86M4: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c86Mc; else goto c86Mb;
       c86Mc: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c86Mb: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.IO.Device.$wlvl_entry() //  [R2]
         { info_tbl: [(c86Mf,
                       label: GHC.IO.Device.$wlvl_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86Mf: // global
           _s85Pd::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c86Mg; else goto c86Mh;
       c86Mh: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c86Mj; else goto c86Mi;
       c86Mj: // global
           HpAlloc = 24;
           goto c86Mg;
       c86Mg: // global
           R2 = _s85Pd::I64;
           R1 = GHC.IO.Device.$wlvl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c86Mi: // global
           I64[Hp - 16] = sat_s85Ph_info;
           I64[Hp] = _s85Pd::I64;
           I64[Sp - 8] = block_c86Md_info;
           R3 = Hp - 16;
           R2 = lvl21_r81ZT_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c86Md() //  [R1]
         { info_tbl: [(c86Md,
                       label: block_c86Md_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86Md: // global
           R3 = R1;
           R2 = lvl13_r81ZL_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.959692248 UTC

[section ""data" . GHC.IO.Device.$w$ctoEnum_closure" {
     GHC.IO.Device.$w$ctoEnum_closure:
         const GHC.IO.Device.$w$ctoEnum_info;
         const 0;
 },
 GHC.IO.Device.$w$ctoEnum_entry() //  [R2]
         { info_tbl: [(c86MR,
                       label: GHC.IO.Device.$w$ctoEnum_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86MR: // global
           _s85Pj::I64 = R2;
           if (%MO_S_Lt_W64(R2, 0)) goto c86MZ; else goto c86MQ;
       c86MQ: // global
           if (%MO_S_Gt_W64(_s85Pj::I64, 2)) goto c86MZ; else goto c86N0;
       c86MZ: // global
           R2 = _s85Pj::I64;
           call GHC.IO.Device.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
       c86N0: // global
           R1 = I64[(_s85Pj::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.964412506 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_$ctoEnum_closure" {
     GHC.IO.Device.$fEnumSeekMode_$ctoEnum_closure:
         const GHC.IO.Device.$fEnumSeekMode_$ctoEnum_info;
         const 0;
 },
 GHC.IO.Device.$fEnumSeekMode_$ctoEnum_entry() //  [R2]
         { info_tbl: [(c86Nf,
                       label: GHC.IO.Device.$fEnumSeekMode_$ctoEnum_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86Nf: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c86Ng; else goto c86Nh;
       c86Ng: // global
           R2 = R2;
           R1 = GHC.IO.Device.$fEnumSeekMode_$ctoEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c86Nh: // global
           I64[Sp - 8] = block_c86Nc_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u86Nl; else goto c86Nd;
       u86Nl: // global
           call _c86Nc(R1) args: 0, res: 0, upd: 0;
       c86Nd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c86Nc() //  [R1]
         { info_tbl: [(c86Nc,
                       label: block_c86Nc_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86Nc: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.IO.Device.$w$ctoEnum_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.970553478 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode3_closure" {
     GHC.IO.Device.$fEnumSeekMode3_closure:
         const GHC.IO.Device.$fEnumSeekMode3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Device.$fEnumSeekMode3_entry() //  [R1]
         { info_tbl: [(c86NC,
                       label: GHC.IO.Device.$fEnumSeekMode3_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86NC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86ND; else goto c86NE;
       c86ND: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86NE: // global
           (_c86Nz::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c86Nz::I64 == 0) goto c86NB; else goto c86NA;
       c86NB: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c86NA: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c86Nz::I64;
           R2 = 0;
           Sp = Sp - 16;
           call GHC.IO.Device.$fEnumSeekMode_go3_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.97479178 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode2_closure" {
     GHC.IO.Device.$fEnumSeekMode2_closure:
         const GHC.IO.Device.$fEnumSeekMode2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Device.$fEnumSeekMode2_entry() //  [R1]
         { info_tbl: [(c86NT,
                       label: GHC.IO.Device.$fEnumSeekMode2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86NT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86NU; else goto c86NV;
       c86NU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86NV: // global
           (_c86NQ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c86NQ::I64 == 0) goto c86NS; else goto c86NR;
       c86NS: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c86NR: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c86NQ::I64;
           R2 = 1;
           Sp = Sp - 16;
           call GHC.IO.Device.$fEnumSeekMode_go3_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.97897884 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode1_closure" {
     GHC.IO.Device.$fEnumSeekMode1_closure:
         const GHC.IO.Device.$fEnumSeekMode1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Device.$fEnumSeekMode1_entry() //  [R1]
         { info_tbl: [(c86Oa,
                       label: GHC.IO.Device.$fEnumSeekMode1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86Oa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86Ob; else goto c86Oc;
       c86Ob: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86Oc: // global
           (_c86O7::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c86O7::I64 == 0) goto c86O9; else goto c86O8;
       c86O9: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c86O8: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c86O7::I64;
           R2 = 2;
           Sp = Sp - 16;
           call GHC.IO.Device.$fEnumSeekMode_go3_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.984015819 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_$cenumFrom_closure" {
     GHC.IO.Device.$fEnumSeekMode_$cenumFrom_closure:
         const GHC.IO.Device.$fEnumSeekMode_$cenumFrom_info;
         const 0;
 },
 GHC.IO.Device.$fEnumSeekMode_$cenumFrom_entry() //  [R2]
         { info_tbl: [(c86Ox,
                       label: GHC.IO.Device.$fEnumSeekMode_$cenumFrom_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86Ox: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c86Oy; else goto c86Oz;
       c86Oy: // global
           R2 = R2;
           R1 = GHC.IO.Device.$fEnumSeekMode_$cenumFrom_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c86Oz: // global
           I64[Sp - 8] = block_c86Op_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u86OK; else goto c86Oq;
       u86OK: // global
           call _c86Op(R1) args: 0, res: 0, upd: 0;
       c86Oq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c86Op() //  [R1]
         { info_tbl: [(c86Op,
                       label: block_c86Op_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86Op: // global
           _c86Ow::P64 = R1 & 7;
           if (_c86Ow::P64 < 3) goto u86OJ; else goto c86Ov;
       u86OJ: // global
           if (_c86Ow::P64 < 2) goto c86Ot; else goto c86Ou;
       c86Ot: // global
           R1 = GHC.IO.Device.$fEnumSeekMode3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c86Ou: // global
           R1 = GHC.IO.Device.$fEnumSeekMode2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c86Ov: // global
           R1 = GHC.IO.Device.$fEnumSeekMode1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:13.995493164 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_$cenumFromThen_closure" {
     GHC.IO.Device.$fEnumSeekMode_$cenumFromThen_closure:
         const GHC.IO.Device.$fEnumSeekMode_$cenumFromThen_info;
 },
 sat_s85PI_entry() //  [R1]
         { info_tbl: [(c86PK,
                       label: sat_s85PI_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86PK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86PL; else goto c86PM;
       c86PL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86PM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s85PD_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s85PG_entry() //  [R1]
         { info_tbl: [(c86PR,
                       label: sat_s85PG_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86PR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86PS; else goto c86PT;
       c86PS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86PT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s85PJ_entry() //  [R1]
         { info_tbl: [(c86PZ,
                       label: sat_s85PJ_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86PZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86Q0; else goto c86Q1;
       c86Q0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86Q1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_dn_s85PD_entry() //  [R1, R2]
         { info_tbl: [(c86Q5,
                       label: go_dn_s85PD_info
                       rep:HeapRep 2 nonptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86Q5: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c86Q9; else goto c86Q8;
       c86Q9: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c86Q8: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c86Q3; else goto c86Q4;
       c86Q3: // global
           _s85PB::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s85PI_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s85PB::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s85PG_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c86Q4: // global
           I64[Hp - 80] = sat_s85PJ_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c86Qb::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c86Qb::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s85PK_entry() //  [R1]
         { info_tbl: [(c86Qc,
                       label: sat_s85PK_info
                       rep:HeapRep 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86Qc: // global
           _s85PK::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c86Qd; else goto c86Qe;
       c86Qe: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c86Qg; else goto c86Qf;
       c86Qg: // global
           HpAlloc = 24;
           goto c86Qd;
       c86Qd: // global
           R1 = _s85PK::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86Qf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s85PK::P64;
           _s85Pw::I64 = I64[_s85PK::P64 + 24];
           _s85PB::I64 = _s85Pw::I64 - I64[_s85PK::P64 + 16];
           I64[Hp - 16] = go_dn_s85PD_info;
           I64[Hp - 8] = _s85PB::I64;
           I64[Hp] = 2 - _s85PB::I64;
           R2 = _s85Pw::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s85PD_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s85PA_entry() //  [R1]
         { info_tbl: [(c86Ql,
                       label: sat_s85PA_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86Ql: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86Qm; else goto c86Qn;
       c86Qm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86Qn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s85PM_entry() //  [R1]
         { info_tbl: [(c86Qw,
                       label: sat_s85PM_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86Qw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86Qx; else goto c86Qy;
       c86Qx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86Qy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s85PW_entry() //  [R1]
         { info_tbl: [(c86R1,
                       label: sat_s85PW_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86R1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86R2; else goto c86R3;
       c86R2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86R3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s85PR_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s85PU_entry() //  [R1]
         { info_tbl: [(c86R8,
                       label: sat_s85PU_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86R8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86R9; else goto c86Ra;
       c86R9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86Ra: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s85PX_entry() //  [R1]
         { info_tbl: [(c86Rg,
                       label: sat_s85PX_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86Rg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86Rh; else goto c86Ri;
       c86Rh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86Ri: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_up_s85PR_entry() //  [R1, R2]
         { info_tbl: [(c86Rm,
                       label: go_up_s85PR_info
                       rep:HeapRep 2 nonptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86Rm: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c86Rq; else goto c86Rp;
       c86Rq: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c86Rp: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c86Rk; else goto c86Rl;
       c86Rk: // global
           _s85PP::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s85PW_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s85PP::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s85PU_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c86Rl: // global
           I64[Hp - 80] = sat_s85PX_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c86Rs::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c86Rs::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s85PY_entry() //  [R1]
         { info_tbl: [(c86Rt,
                       label: sat_s85PY_info
                       rep:HeapRep 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86Rt: // global
           _s85PY::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c86Ru; else goto c86Rv;
       c86Rv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c86Rx; else goto c86Rw;
       c86Rx: // global
           HpAlloc = 24;
           goto c86Ru;
       c86Ru: // global
           R1 = _s85PY::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86Rw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s85PY::P64;
           _s85Pw::I64 = I64[_s85PY::P64 + 24];
           _s85PP::I64 = _s85Pw::I64 - I64[_s85PY::P64 + 16];
           I64[Hp - 16] = go_up_s85PR_info;
           I64[Hp - 8] = _s85PP::I64;
           I64[Hp] = 2 - _s85PP::I64;
           R2 = _s85Pw::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s85PR_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s85PO_entry() //  [R1]
         { info_tbl: [(c86RC,
                       label: sat_s85PO_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86RC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86RD; else goto c86RE;
       c86RD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86RE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s85Q0_entry() //  [R1]
         { info_tbl: [(c86RN,
                       label: sat_s85Q0_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86RN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86RO; else goto c86RP;
       c86RO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86RP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s85Qb_entry() //  [R1]
         { info_tbl: [(c86Sl,
                       label: sat_s85Qb_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86Sl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86Sm; else goto c86Sn;
       c86Sm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86Sn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s85Q6_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s85Q9_entry() //  [R1]
         { info_tbl: [(c86Ss,
                       label: sat_s85Q9_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86Ss: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86St; else goto c86Su;
       c86St: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86Su: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s85Qc_entry() //  [R1]
         { info_tbl: [(c86SA,
                       label: sat_s85Qc_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86SA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86SB; else goto c86SC;
       c86SB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86SC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_dn_s85Q6_entry() //  [R1, R2]
         { info_tbl: [(c86SG,
                       label: go_dn_s85Q6_info
                       rep:HeapRep 2 nonptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86SG: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c86SK; else goto c86SJ;
       c86SK: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c86SJ: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c86SE; else goto c86SF;
       c86SE: // global
           _s85Q4::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s85Qb_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s85Q4::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s85Q9_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c86SF: // global
           I64[Hp - 80] = sat_s85Qc_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c86SM::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c86SM::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s85Qd_entry() //  [R1]
         { info_tbl: [(c86SN,
                       label: sat_s85Qd_info
                       rep:HeapRep 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86SN: // global
           _s85Qd::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c86SO; else goto c86SP;
       c86SP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c86SR; else goto c86SQ;
       c86SR: // global
           HpAlloc = 24;
           goto c86SO;
       c86SO: // global
           R1 = _s85Qd::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86SQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s85Qd::P64;
           _s85Pw::I64 = I64[_s85Qd::P64 + 24];
           _s85Q4::I64 = _s85Pw::I64 - I64[_s85Qd::P64 + 16];
           I64[Hp - 16] = go_dn_s85Q6_info;
           I64[Hp - 8] = _s85Q4::I64;
           I64[Hp] = 0 - _s85Q4::I64;
           R2 = _s85Pw::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s85Q6_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s85Q3_entry() //  [R1]
         { info_tbl: [(c86SW,
                       label: sat_s85Q3_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86SW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86SX; else goto c86SY;
       c86SX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86SY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s85Qf_entry() //  [R1]
         { info_tbl: [(c86T7,
                       label: sat_s85Qf_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86T7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86T8; else goto c86T9;
       c86T8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86T9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s85Qp_entry() //  [R1]
         { info_tbl: [(c86TC,
                       label: sat_s85Qp_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86TC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86TD; else goto c86TE;
       c86TD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86TE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s85Qk_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s85Qn_entry() //  [R1]
         { info_tbl: [(c86TJ,
                       label: sat_s85Qn_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86TJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86TK; else goto c86TL;
       c86TK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86TL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s85Qq_entry() //  [R1]
         { info_tbl: [(c86TR,
                       label: sat_s85Qq_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86TR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86TS; else goto c86TT;
       c86TS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86TT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_up_s85Qk_entry() //  [R1, R2]
         { info_tbl: [(c86TX,
                       label: go_up_s85Qk_info
                       rep:HeapRep 2 nonptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86TX: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c86U1; else goto c86U0;
       c86U1: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c86U0: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c86TV; else goto c86TW;
       c86TV: // global
           _s85Qi::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s85Qp_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s85Qi::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s85Qn_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c86TW: // global
           I64[Hp - 80] = sat_s85Qq_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c86U3::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c86U3::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s85Qr_entry() //  [R1]
         { info_tbl: [(c86U4,
                       label: sat_s85Qr_info
                       rep:HeapRep 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86U4: // global
           _s85Qr::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c86U5; else goto c86U6;
       c86U6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c86U8; else goto c86U7;
       c86U8: // global
           HpAlloc = 24;
           goto c86U5;
       c86U5: // global
           R1 = _s85Qr::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86U7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s85Qr::P64;
           _s85Pw::I64 = I64[_s85Qr::P64 + 24];
           _s85Qi::I64 = _s85Pw::I64 - I64[_s85Qr::P64 + 16];
           I64[Hp - 16] = go_up_s85Qk_info;
           I64[Hp - 8] = _s85Qi::I64;
           I64[Hp] = 0 - _s85Qi::I64;
           R2 = _s85Pw::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s85Qk_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s85Qh_entry() //  [R1]
         { info_tbl: [(c86Ud,
                       label: sat_s85Qh_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86Ud: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86Ue; else goto c86Uf;
       c86Ue: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86Uf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s85Qt_entry() //  [R1]
         { info_tbl: [(c86Uo,
                       label: sat_s85Qt_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86Uo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86Up; else goto c86Uq;
       c86Up: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86Uq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.IO.Device.$fEnumSeekMode_$cenumFromThen_entry() //  [R2, R3]
         { info_tbl: [(c86Uz,
                       label: GHC.IO.Device.$fEnumSeekMode_$cenumFromThen_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86Uz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86UA; else goto c86UB;
       c86UA: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fEnumSeekMode_$cenumFromThen_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c86UB: // global
           I64[Sp - 16] = block_c86Ur_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u86VT; else goto c86Us;
       u86VT: // global
           call _c86Ur(R1) args: 0, res: 0, upd: 0;
       c86Us: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c86Ur() //  [R1]
         { info_tbl: [(c86Ur,
                       label: block_c86Ur_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86Ur: // global
           _s85Ps::P64 = P64[Sp + 8];
           _c86Uy::P64 = R1 & 7;
           if (_c86Uy::P64 < 3) goto u86VL; else goto c86Ux;
       u86VL: // global
           if (_c86Uy::P64 < 2) goto c86Uv; else goto c86Uw;
       c86Uv: // global
           _s85Pu::I64 = 0;
           goto s85Pt;
       c86Uw: // global
           _s85Pu::I64 = 1;
           goto s85Pt;
       c86Ux: // global
           _s85Pu::I64 = 2;
           goto s85Pt;
       s85Pt: // global
           I64[Sp] = block_c86UC_info;
           R1 = _s85Ps::P64;
           I64[Sp + 8] = _s85Pu::I64;
           if (R1 & 7 != 0) goto u86VS; else goto c86Vm;
       u86VS: // global
           call _c86UC(R1) args: 0, res: 0, upd: 0;
       c86Vm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c86UC() //  [R1]
         { info_tbl: [(c86UC,
                       label: block_c86UC_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86UC: // global
           _c86VK::P64 = R1 & 7;
           if (_c86VK::P64 < 3) goto u86VM; else goto c86VA;
       u86VM: // global
           if (_c86VK::P64 < 2) goto c86Vs; else goto c86Vw;
       c86Vs: // global
           I64[Sp] = 0;
           goto u86VW;
       c86Vw: // global
           I64[Sp] = 1;
           goto u86VW;
       c86VA: // global
           I64[Sp] = 2;
           goto u86VW;
       u86VW: // global
           call _c86Pb() args: 0, res: 0, upd: 0;
     }
 },
 _c86Pb() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86Pb: // global
           Hp = Hp + 80;
           _s85Pw::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c86UG; else goto c86UF;
       c86UG: // global
           HpAlloc = 80;
           I64[Sp] = block_c86Pa_info;
           R1 = _s85Pw::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c86UF: // global
           _s85Pu::I64 = I64[Sp + 8];
           if (%MO_S_Le_W64(_s85Pu::I64,
                            _s85Pw::I64)) goto c86V1; else goto c86Vl;
       c86V1: // global
           if (%MO_S_Lt_W64(_s85Pw::I64,
                            _s85Pu::I64)) goto c86UQ; else goto c86UZ;
       c86UQ: // global
           if (%MO_S_Le_W64(2, _s85Pw::I64)) goto c86UJ; else goto c86UO;
       c86UJ: // global
           I64[Hp - 72] = sat_s85PK_info;
           I64[Hp - 56] = _s85Pu::I64;
           I64[Hp - 48] = _s85Pw::I64;
           I64[Hp - 40] = sat_s85PA_info;
           I64[Hp - 24] = _s85Pu::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c86UO: // global
           if (%MO_S_Gt_W64(2, _s85Pu::I64)) goto c86Vi; else goto c86UM;
       c86UM: // global
           I64[Hp - 72] = sat_s85PM_info;
           I64[Hp - 56] = _s85Pu::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c86UK::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c86UK::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c86UZ: // global
           if (%MO_S_Ge_W64(2, _s85Pw::I64)) goto c86UT; else goto c86UY;
       c86UT: // global
           I64[Hp - 72] = sat_s85PY_info;
           I64[Hp - 56] = _s85Pu::I64;
           I64[Hp - 48] = _s85Pw::I64;
           I64[Hp - 40] = sat_s85PO_info;
           I64[Hp - 24] = _s85Pu::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c86UY: // global
           if (%MO_S_Lt_W64(2, _s85Pu::I64)) goto c86Vi; else goto c86UW;
       c86UW: // global
           I64[Hp - 72] = sat_s85Q0_info;
           I64[Hp - 56] = _s85Pu::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c86UU::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c86UU::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c86Vl: // global
           if (%MO_S_Lt_W64(_s85Pw::I64,
                            _s85Pu::I64)) goto c86Vb; else goto c86Vk;
       c86Vb: // global
           if (%MO_S_Le_W64(0, _s85Pw::I64)) goto c86V4; else goto c86V9;
       c86V4: // global
           I64[Hp - 72] = sat_s85Qd_info;
           I64[Hp - 56] = _s85Pu::I64;
           I64[Hp - 48] = _s85Pw::I64;
           I64[Hp - 40] = sat_s85Q3_info;
           I64[Hp - 24] = _s85Pu::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c86V9: // global
           if (%MO_S_Gt_W64(0, _s85Pu::I64)) goto c86Vi; else goto c86V7;
       c86V7: // global
           I64[Hp - 72] = sat_s85Qf_info;
           I64[Hp - 56] = _s85Pu::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c86V5::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c86V5::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c86Vk: // global
           if (%MO_S_Ge_W64(0, _s85Pw::I64)) goto c86Ve; else goto c86Vj;
       c86Ve: // global
           I64[Hp - 72] = sat_s85Qr_info;
           I64[Hp - 56] = _s85Pu::I64;
           I64[Hp - 48] = _s85Pw::I64;
           I64[Hp - 40] = sat_s85Qh_info;
           I64[Hp - 24] = _s85Pu::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c86Vj: // global
           if (%MO_S_Lt_W64(0, _s85Pu::I64)) goto c86Vi; else goto c86Vh;
       c86Vi: // global
           Hp = Hp - 80;
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c86Vh: // global
           I64[Hp - 72] = sat_s85Qt_info;
           I64[Hp - 56] = _s85Pu::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c86Vf::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c86Vf::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c86Pa() //  [R1]
         { info_tbl: [(c86Pa,
                       label: block_c86Pa_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c86Pa: // global
           I64[Sp] = R1;
           call _c86Pb() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.074801967 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_go2_closure" {
     GHC.IO.Device.$fEnumSeekMode_go2_closure:
         const GHC.IO.Device.$fEnumSeekMode_go2_info;
         const 0;
 },
 sat_s85QC_entry() //  [R1]
         { info_tbl: [(c871o,
                       label: sat_s85QC_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c871o: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c871p; else goto c871q;
       c871p: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c871q: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s85QA::I64 = I64[R1 + 16];
           if (_s85QA::I64 != 0) goto c871m; else goto c871n;
       c871m: // global
           R2 = _s85QA::I64 + 1;
           Sp = Sp - 16;
           call GHC.IO.Device.$fEnumSeekMode_go2_entry(R2) args: 24, res: 0, upd: 24;
       c871n: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s85Qz_entry() //  [R1]
         { info_tbl: [(c871C,
                       label: sat_s85Qz_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c871C: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c871D; else goto c871L;
       c871D: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c871L: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s85Qw::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s85Qw::I64, 0)) goto c871J; else goto c871B;
       c871B: // global
           if (%MO_S_Gt_W64(_s85Qw::I64, 2)) goto c871J; else goto c871K;
       c871J: // global
           R2 = _s85Qw::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c871K: // global
           R1 = I64[(_s85Qw::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.IO.Device.$fEnumSeekMode_go2_entry() //  [R2]
         { info_tbl: [(c871N,
                       label: GHC.IO.Device.$fEnumSeekMode_go2_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c871N: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c871R; else goto c871Q;
       c871R: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.IO.Device.$fEnumSeekMode_go2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c871Q: // global
           I64[Hp - 64] = sat_s85QC_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s85Qz_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.08407274 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_go1_closure" {
     GHC.IO.Device.$fEnumSeekMode_go1_closure:
         const GHC.IO.Device.$fEnumSeekMode_go1_info;
         const 0;
 },
 sat_s85QJ_entry() //  [R1]
         { info_tbl: [(c872t,
                       label: sat_s85QJ_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c872t: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c872u; else goto c872v;
       c872u: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c872v: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s85QH::I64 = I64[R1 + 16];
           if (_s85QH::I64 != 1) goto c872r; else goto c872s;
       c872r: // global
           R2 = _s85QH::I64 + 1;
           Sp = Sp - 16;
           call GHC.IO.Device.$fEnumSeekMode_go1_entry(R2) args: 24, res: 0, upd: 24;
       c872s: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s85QG_entry() //  [R1]
         { info_tbl: [(c872H,
                       label: sat_s85QG_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c872H: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c872I; else goto c872Q;
       c872I: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c872Q: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s85QD::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s85QD::I64, 0)) goto c872O; else goto c872G;
       c872G: // global
           if (%MO_S_Gt_W64(_s85QD::I64, 2)) goto c872O; else goto c872P;
       c872O: // global
           R2 = _s85QD::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c872P: // global
           R1 = I64[(_s85QD::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.IO.Device.$fEnumSeekMode_go1_entry() //  [R2]
         { info_tbl: [(c872S,
                       label: GHC.IO.Device.$fEnumSeekMode_go1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c872S: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c872W; else goto c872V;
       c872W: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.IO.Device.$fEnumSeekMode_go1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c872V: // global
           I64[Hp - 64] = sat_s85QJ_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s85QG_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.099654559 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_go_closure" {
     GHC.IO.Device.$fEnumSeekMode_go_closure:
         const GHC.IO.Device.$fEnumSeekMode_go_info;
         const 0;
 },
 sat_s85QQ_entry() //  [R1]
         { info_tbl: [(c873y,
                       label: sat_s85QQ_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c873y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c873z; else goto c873A;
       c873z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c873A: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s85QO::I64 = I64[R1 + 16];
           if (_s85QO::I64 != 2) goto c873w; else goto c873x;
       c873w: // global
           R2 = _s85QO::I64 + 1;
           Sp = Sp - 16;
           call GHC.IO.Device.$fEnumSeekMode_go_entry(R2) args: 24, res: 0, upd: 24;
       c873x: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s85QN_entry() //  [R1]
         { info_tbl: [(c873M,
                       label: sat_s85QN_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c873M: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c873N; else goto c873V;
       c873N: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c873V: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s85QK::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s85QK::I64, 0)) goto c873T; else goto c873L;
       c873L: // global
           if (%MO_S_Gt_W64(_s85QK::I64, 2)) goto c873T; else goto c873U;
       c873T: // global
           R2 = _s85QK::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c873U: // global
           R1 = I64[(_s85QK::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.IO.Device.$fEnumSeekMode_go_entry() //  [R2]
         { info_tbl: [(c873X,
                       label: GHC.IO.Device.$fEnumSeekMode_go_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c873X: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c8741; else goto c8740;
       c8741: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.IO.Device.$fEnumSeekMode_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8740: // global
           I64[Hp - 64] = sat_s85QQ_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s85QN_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.116180993 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_$cenumFromTo_closure" {
     GHC.IO.Device.$fEnumSeekMode_$cenumFromTo_closure:
         const GHC.IO.Device.$fEnumSeekMode_$cenumFromTo_info;
         const 0;
 },
 GHC.IO.Device.$fEnumSeekMode_$cenumFromTo_entry() //  [R2, R3]
         { info_tbl: [(c874F,
                       label: GHC.IO.Device.$fEnumSeekMode_$cenumFromTo_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c874F: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c874G; else goto c874H;
       c874G: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fEnumSeekMode_$cenumFromTo_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c874H: // global
           I64[Sp - 16] = block_c874x_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u875u; else goto c874y;
       u875u: // global
           call _c874x(R1) args: 0, res: 0, upd: 0;
       c874y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c874x() //  [R1]
         { info_tbl: [(c874x,
                       label: block_c874x_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c874x: // global
           _s85QS::P64 = P64[Sp + 8];
           _c874E::P64 = R1 & 7;
           if (_c874E::P64 < 3) goto u875r; else goto c874D;
       u875r: // global
           if (_c874E::P64 < 2) goto c874B; else goto c874C;
       c874B: // global
           _s85QU::I64 = 0;
           goto s85QT;
       c874C: // global
           _s85QU::I64 = 1;
           goto s85QT;
       c874D: // global
           _s85QU::I64 = 2;
           goto s85QT;
       s85QT: // global
           I64[Sp] = block_c874L_info;
           R1 = _s85QS::P64;
           I64[Sp + 8] = _s85QU::I64;
           if (R1 & 7 != 0) goto u875t; else goto c874N;
       u875t: // global
           call _c874L(R1) args: 0, res: 0, upd: 0;
       c874N: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c874L() //  [R1]
         { info_tbl: [(c874L,
                       label: block_c874L_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c874L: // global
           _s85QU::I64 = I64[Sp + 8];
           _c875q::P64 = R1 & 7;
           if (_c875q::P64 < 3) goto u875s; else goto c875g;
       u875s: // global
           if (_c875q::P64 < 2) goto c874Y; else goto c8757;
       c874Y: // global
           if (%MO_S_Gt_W64(_s85QU::I64, 0)) goto c875f; else goto c874V;
       c874V: // global
           R2 = _s85QU::I64;
           Sp = Sp + 16;
           call GHC.IO.Device.$fEnumSeekMode_go2_entry(R2) args: 8, res: 0, upd: 8;
       c8757: // global
           if (%MO_S_Gt_W64(_s85QU::I64, 1)) goto c875f; else goto c8755;
       c8755: // global
           R2 = _s85QU::I64;
           Sp = Sp + 16;
           call GHC.IO.Device.$fEnumSeekMode_go1_entry(R2) args: 8, res: 0, upd: 8;
       c875g: // global
           if (%MO_S_Gt_W64(_s85QU::I64, 2)) goto c875f; else goto c875e;
       c875f: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c875e: // global
           R2 = _s85QU::I64;
           Sp = Sp + 16;
           call GHC.IO.Device.$fEnumSeekMode_go_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.142012892 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_$cenumFromThenTo_closure" {
     GHC.IO.Device.$fEnumSeekMode_$cenumFromThenTo_closure:
         const GHC.IO.Device.$fEnumSeekMode_$cenumFromThenTo_info;
         const 0;
 },
 sat_s85Rm_entry() //  [R1]
         { info_tbl: [(c876B,
                       label: sat_s85Rm_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c876B: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c876C; else goto c876D;
       c876C: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c876D: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s85Rf_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s85Rk_entry() //  [R1]
         { info_tbl: [(c876N,
                       label: sat_s85Rk_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c876N: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c876O; else goto c876W;
       c876O: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c876W: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s85Rg::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s85Rg::I64, 0)) goto c876U; else goto c876M;
       c876M: // global
           if (%MO_S_Gt_W64(_s85Rg::I64, 2)) goto c876U; else goto c876V;
       c876U: // global
           R2 = _s85Rg::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c876V: // global
           R1 = I64[(_s85Rg::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s85Rp_entry() //  [R1]
         { info_tbl: [(c8777,
                       label: sat_s85Rp_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c8777: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8778; else goto c877g;
       c8778: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c877g: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s85Rg::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s85Rg::I64, 0)) goto c877e; else goto c8776;
       c8776: // global
           if (%MO_S_Gt_W64(_s85Rg::I64, 2)) goto c877e; else goto c877f;
       c877e: // global
           R2 = _s85Rg::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c877f: // global
           R1 = I64[(_s85Rg::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_dn_s85Rf_entry() //  [R1, R2]
         { info_tbl: [(c877k,
                       label: go_dn_s85Rf_info
                       rep:HeapRep 2 nonptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c877k: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c877o; else goto c877n;
       c877o: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c877n: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c877i; else goto c877j;
       c877i: // global
           _s85Rd::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s85Rm_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s85Rd::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s85Rk_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c877j: // global
           I64[Hp - 80] = sat_s85Rp_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c877q::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c877q::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s85Rq_entry() //  [R1]
         { info_tbl: [(c877r,
                       label: sat_s85Rq_info
                       rep:HeapRep 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c877r: // global
           _s85Rq::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c877s; else goto c877t;
       c877t: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c877v; else goto c877u;
       c877v: // global
           HpAlloc = 24;
           goto c877s;
       c877s: // global
           R1 = _s85Rq::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c877u: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s85Rq::P64;
           _s85R6::I64 = I64[_s85Rq::P64 + 24];
           _s85Rd::I64 = _s85R6::I64 - I64[_s85Rq::P64 + 16];
           I64[Hp - 16] = go_dn_s85Rf_info;
           I64[Hp - 8] = _s85Rd::I64;
           I64[Hp] = 0 - _s85Rd::I64;
           R2 = _s85R6::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s85Rf_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s85Rc_entry() //  [R1]
         { info_tbl: [(c877F,
                       label: sat_s85Rc_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c877F: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c877G; else goto c877O;
       c877G: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c877O: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s85R4::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s85R4::I64, 0)) goto c877M; else goto c877E;
       c877E: // global
           if (%MO_S_Gt_W64(_s85R4::I64, 2)) goto c877M; else goto c877N;
       c877M: // global
           R2 = _s85R4::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c877N: // global
           R1 = I64[(_s85R4::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s85Ru_entry() //  [R1]
         { info_tbl: [(c8782,
                       label: sat_s85Ru_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c8782: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8783; else goto c878b;
       c8783: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c878b: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s85R4::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s85R4::I64, 0)) goto c8789; else goto c8781;
       c8781: // global
           if (%MO_S_Gt_W64(_s85R4::I64, 2)) goto c8789; else goto c878a;
       c8789: // global
           R2 = _s85R4::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c878a: // global
           R1 = I64[(_s85R4::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s85RI_entry() //  [R1]
         { info_tbl: [(c878E,
                       label: sat_s85RI_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c878E: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c878F; else goto c878G;
       c878F: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c878G: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s85RB_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s85RG_entry() //  [R1]
         { info_tbl: [(c878Q,
                       label: sat_s85RG_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c878Q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c878R; else goto c878Z;
       c878R: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c878Z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s85RC::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s85RC::I64, 0)) goto c878X; else goto c878P;
       c878P: // global
           if (%MO_S_Gt_W64(_s85RC::I64, 2)) goto c878X; else goto c878Y;
       c878X: // global
           R2 = _s85RC::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c878Y: // global
           R1 = I64[(_s85RC::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s85RL_entry() //  [R1]
         { info_tbl: [(c879a,
                       label: sat_s85RL_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c879a: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c879b; else goto c879j;
       c879b: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c879j: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s85RC::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s85RC::I64, 0)) goto c879h; else goto c8799;
       c8799: // global
           if (%MO_S_Gt_W64(_s85RC::I64, 2)) goto c879h; else goto c879i;
       c879h: // global
           R2 = _s85RC::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c879i: // global
           R1 = I64[(_s85RC::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_up_s85RB_entry() //  [R1, R2]
         { info_tbl: [(c879n,
                       label: go_up_s85RB_info
                       rep:HeapRep 2 nonptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c879n: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c879r; else goto c879q;
       c879r: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c879q: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c879l; else goto c879m;
       c879l: // global
           _s85Rz::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s85RI_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s85Rz::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s85RG_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c879m: // global
           I64[Hp - 80] = sat_s85RL_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c879t::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c879t::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s85RM_entry() //  [R1]
         { info_tbl: [(c879u,
                       label: sat_s85RM_info
                       rep:HeapRep 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c879u: // global
           _s85RM::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c879v; else goto c879w;
       c879w: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c879y; else goto c879x;
       c879y: // global
           HpAlloc = 24;
           goto c879v;
       c879v: // global
           R1 = _s85RM::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c879x: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s85RM::P64;
           _s85R6::I64 = I64[_s85RM::P64 + 24];
           _s85Rz::I64 = _s85R6::I64 - I64[_s85RM::P64 + 16];
           I64[Hp - 16] = go_up_s85RB_info;
           I64[Hp - 8] = _s85Rz::I64;
           I64[Hp] = 0 - _s85Rz::I64;
           R2 = _s85R6::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s85RB_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s85Ry_entry() //  [R1]
         { info_tbl: [(c879I,
                       label: sat_s85Ry_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c879I: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c879J; else goto c879R;
       c879J: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c879R: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s85R4::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s85R4::I64, 0)) goto c879P; else goto c879H;
       c879H: // global
           if (%MO_S_Gt_W64(_s85R4::I64, 2)) goto c879P; else goto c879Q;
       c879P: // global
           R2 = _s85R4::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c879Q: // global
           R1 = I64[(_s85R4::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s85RQ_entry() //  [R1]
         { info_tbl: [(c87a5,
                       label: sat_s85RQ_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87a5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c87a6; else goto c87ae;
       c87a6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c87ae: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s85R4::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s85R4::I64, 0)) goto c87ac; else goto c87a4;
       c87a4: // global
           if (%MO_S_Gt_W64(_s85R4::I64, 2)) goto c87ac; else goto c87ad;
       c87ac: // global
           R2 = _s85R4::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c87ad: // global
           R1 = I64[(_s85R4::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s85S5_entry() //  [R1]
         { info_tbl: [(c87aL,
                       label: sat_s85S5_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87aL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c87aM; else goto c87aN;
       c87aM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c87aN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s85RY_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s85S3_entry() //  [R1]
         { info_tbl: [(c87aX,
                       label: sat_s85S3_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87aX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c87aY; else goto c87b6;
       c87aY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c87b6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s85RZ::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s85RZ::I64, 0)) goto c87b4; else goto c87aW;
       c87aW: // global
           if (%MO_S_Gt_W64(_s85RZ::I64, 2)) goto c87b4; else goto c87b5;
       c87b4: // global
           R2 = _s85RZ::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c87b5: // global
           R1 = I64[(_s85RZ::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s85S8_entry() //  [R1]
         { info_tbl: [(c87bh,
                       label: sat_s85S8_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87bh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c87bi; else goto c87bq;
       c87bi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c87bq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s85RZ::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s85RZ::I64, 0)) goto c87bo; else goto c87bg;
       c87bg: // global
           if (%MO_S_Gt_W64(_s85RZ::I64, 2)) goto c87bo; else goto c87bp;
       c87bo: // global
           R2 = _s85RZ::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c87bp: // global
           R1 = I64[(_s85RZ::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_dn_s85RY_entry() //  [R1, R2]
         { info_tbl: [(c87bu,
                       label: go_dn_s85RY_info
                       rep:HeapRep 2 nonptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87bu: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c87by; else goto c87bx;
       c87by: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c87bx: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c87bs; else goto c87bt;
       c87bs: // global
           _s85RW::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s85S5_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s85RW::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s85S3_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c87bt: // global
           I64[Hp - 80] = sat_s85S8_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c87bA::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c87bA::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s85S9_entry() //  [R1]
         { info_tbl: [(c87bB,
                       label: sat_s85S9_info
                       rep:HeapRep 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87bB: // global
           _s85S9::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c87bC; else goto c87bD;
       c87bD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c87bF; else goto c87bE;
       c87bF: // global
           HpAlloc = 24;
           goto c87bC;
       c87bC: // global
           R1 = _s85S9::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c87bE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s85S9::P64;
           _s85R6::I64 = I64[_s85S9::P64 + 24];
           _s85RW::I64 = _s85R6::I64 - I64[_s85S9::P64 + 16];
           I64[Hp - 16] = go_dn_s85RY_info;
           I64[Hp - 8] = _s85RW::I64;
           I64[Hp] = 1 - _s85RW::I64;
           R2 = _s85R6::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s85RY_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s85RV_entry() //  [R1]
         { info_tbl: [(c87bP,
                       label: sat_s85RV_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87bP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c87bQ; else goto c87bY;
       c87bQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c87bY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s85R4::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s85R4::I64, 0)) goto c87bW; else goto c87bO;
       c87bO: // global
           if (%MO_S_Gt_W64(_s85R4::I64, 2)) goto c87bW; else goto c87bX;
       c87bW: // global
           R2 = _s85R4::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c87bX: // global
           R1 = I64[(_s85R4::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s85Sd_entry() //  [R1]
         { info_tbl: [(c87cc,
                       label: sat_s85Sd_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87cc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c87cd; else goto c87cl;
       c87cd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c87cl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s85R4::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s85R4::I64, 0)) goto c87cj; else goto c87cb;
       c87cb: // global
           if (%MO_S_Gt_W64(_s85R4::I64, 2)) goto c87cj; else goto c87ck;
       c87cj: // global
           R2 = _s85R4::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c87ck: // global
           R1 = I64[(_s85R4::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s85Sr_entry() //  [R1]
         { info_tbl: [(c87cO,
                       label: sat_s85Sr_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87cO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c87cP; else goto c87cQ;
       c87cP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c87cQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s85Sk_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s85Sp_entry() //  [R1]
         { info_tbl: [(c87d0,
                       label: sat_s85Sp_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87d0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c87d1; else goto c87d9;
       c87d1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c87d9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s85Sl::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s85Sl::I64, 0)) goto c87d7; else goto c87cZ;
       c87cZ: // global
           if (%MO_S_Gt_W64(_s85Sl::I64, 2)) goto c87d7; else goto c87d8;
       c87d7: // global
           R2 = _s85Sl::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c87d8: // global
           R1 = I64[(_s85Sl::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s85Su_entry() //  [R1]
         { info_tbl: [(c87dk,
                       label: sat_s85Su_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87dk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c87dl; else goto c87dt;
       c87dl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c87dt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s85Sl::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s85Sl::I64, 0)) goto c87dr; else goto c87dj;
       c87dj: // global
           if (%MO_S_Gt_W64(_s85Sl::I64, 2)) goto c87dr; else goto c87ds;
       c87dr: // global
           R2 = _s85Sl::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c87ds: // global
           R1 = I64[(_s85Sl::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_up_s85Sk_entry() //  [R1, R2]
         { info_tbl: [(c87dx,
                       label: go_up_s85Sk_info
                       rep:HeapRep 2 nonptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87dx: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c87dB; else goto c87dA;
       c87dB: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c87dA: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c87dv; else goto c87dw;
       c87dv: // global
           _s85Si::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s85Sr_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s85Si::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s85Sp_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c87dw: // global
           I64[Hp - 80] = sat_s85Su_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c87dD::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c87dD::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s85Sv_entry() //  [R1]
         { info_tbl: [(c87dE,
                       label: sat_s85Sv_info
                       rep:HeapRep 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87dE: // global
           _s85Sv::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c87dF; else goto c87dG;
       c87dG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c87dI; else goto c87dH;
       c87dI: // global
           HpAlloc = 24;
           goto c87dF;
       c87dF: // global
           R1 = _s85Sv::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c87dH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s85Sv::P64;
           _s85R6::I64 = I64[_s85Sv::P64 + 24];
           _s85Si::I64 = _s85R6::I64 - I64[_s85Sv::P64 + 16];
           I64[Hp - 16] = go_up_s85Sk_info;
           I64[Hp - 8] = _s85Si::I64;
           I64[Hp] = 1 - _s85Si::I64;
           R2 = _s85R6::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s85Sk_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s85Sh_entry() //  [R1]
         { info_tbl: [(c87dS,
                       label: sat_s85Sh_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87dS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c87dT; else goto c87e1;
       c87dT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c87e1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s85R4::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s85R4::I64, 0)) goto c87dZ; else goto c87dR;
       c87dR: // global
           if (%MO_S_Gt_W64(_s85R4::I64, 2)) goto c87dZ; else goto c87e0;
       c87dZ: // global
           R2 = _s85R4::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c87e0: // global
           R1 = I64[(_s85R4::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s85Sz_entry() //  [R1]
         { info_tbl: [(c87ef,
                       label: sat_s85Sz_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87ef: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c87eg; else goto c87eo;
       c87eg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c87eo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s85R4::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s85R4::I64, 0)) goto c87em; else goto c87ee;
       c87ee: // global
           if (%MO_S_Gt_W64(_s85R4::I64, 2)) goto c87em; else goto c87en;
       c87em: // global
           R2 = _s85R4::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c87en: // global
           R1 = I64[(_s85R4::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s85SO_entry() //  [R1]
         { info_tbl: [(c87eV,
                       label: sat_s85SO_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87eV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c87eW; else goto c87eX;
       c87eW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c87eX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s85SH_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s85SM_entry() //  [R1]
         { info_tbl: [(c87f7,
                       label: sat_s85SM_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87f7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c87f8; else goto c87fg;
       c87f8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c87fg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s85SI::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s85SI::I64, 0)) goto c87fe; else goto c87f6;
       c87f6: // global
           if (%MO_S_Gt_W64(_s85SI::I64, 2)) goto c87fe; else goto c87ff;
       c87fe: // global
           R2 = _s85SI::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c87ff: // global
           R1 = I64[(_s85SI::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s85SR_entry() //  [R1]
         { info_tbl: [(c87fr,
                       label: sat_s85SR_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87fr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c87fs; else goto c87fA;
       c87fs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c87fA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s85SI::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s85SI::I64, 0)) goto c87fy; else goto c87fq;
       c87fq: // global
           if (%MO_S_Gt_W64(_s85SI::I64, 2)) goto c87fy; else goto c87fz;
       c87fy: // global
           R2 = _s85SI::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c87fz: // global
           R1 = I64[(_s85SI::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_dn_s85SH_entry() //  [R1, R2]
         { info_tbl: [(c87fE,
                       label: go_dn_s85SH_info
                       rep:HeapRep 2 nonptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87fE: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c87fI; else goto c87fH;
       c87fI: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c87fH: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c87fC; else goto c87fD;
       c87fC: // global
           _s85SF::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s85SO_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s85SF::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s85SM_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c87fD: // global
           I64[Hp - 80] = sat_s85SR_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c87fK::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c87fK::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s85SS_entry() //  [R1]
         { info_tbl: [(c87fL,
                       label: sat_s85SS_info
                       rep:HeapRep 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87fL: // global
           _s85SS::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c87fM; else goto c87fN;
       c87fN: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c87fP; else goto c87fO;
       c87fP: // global
           HpAlloc = 24;
           goto c87fM;
       c87fM: // global
           R1 = _s85SS::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c87fO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s85SS::P64;
           _s85R6::I64 = I64[_s85SS::P64 + 24];
           _s85SF::I64 = _s85R6::I64 - I64[_s85SS::P64 + 16];
           I64[Hp - 16] = go_dn_s85SH_info;
           I64[Hp - 8] = _s85SF::I64;
           I64[Hp] = 2 - _s85SF::I64;
           R2 = _s85R6::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s85SH_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s85SE_entry() //  [R1]
         { info_tbl: [(c87fZ,
                       label: sat_s85SE_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87fZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c87g0; else goto c87g8;
       c87g0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c87g8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s85R4::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s85R4::I64, 0)) goto c87g6; else goto c87fY;
       c87fY: // global
           if (%MO_S_Gt_W64(_s85R4::I64, 2)) goto c87g6; else goto c87g7;
       c87g6: // global
           R2 = _s85R4::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c87g7: // global
           R1 = I64[(_s85R4::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s85SW_entry() //  [R1]
         { info_tbl: [(c87gm,
                       label: sat_s85SW_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87gm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c87gn; else goto c87gv;
       c87gn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c87gv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s85R4::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s85R4::I64, 0)) goto c87gt; else goto c87gl;
       c87gl: // global
           if (%MO_S_Gt_W64(_s85R4::I64, 2)) goto c87gt; else goto c87gu;
       c87gt: // global
           R2 = _s85R4::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c87gu: // global
           R1 = I64[(_s85R4::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s85Ta_entry() //  [R1]
         { info_tbl: [(c87gY,
                       label: sat_s85Ta_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87gY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c87gZ; else goto c87h0;
       c87gZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c87h0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s85T3_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s85T8_entry() //  [R1]
         { info_tbl: [(c87ha,
                       label: sat_s85T8_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87ha: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c87hb; else goto c87hj;
       c87hb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c87hj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s85T4::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s85T4::I64, 0)) goto c87hh; else goto c87h9;
       c87h9: // global
           if (%MO_S_Gt_W64(_s85T4::I64, 2)) goto c87hh; else goto c87hi;
       c87hh: // global
           R2 = _s85T4::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c87hi: // global
           R1 = I64[(_s85T4::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s85Td_entry() //  [R1]
         { info_tbl: [(c87hu,
                       label: sat_s85Td_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87hu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c87hv; else goto c87hD;
       c87hv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c87hD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s85T4::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s85T4::I64, 0)) goto c87hB; else goto c87ht;
       c87ht: // global
           if (%MO_S_Gt_W64(_s85T4::I64, 2)) goto c87hB; else goto c87hC;
       c87hB: // global
           R2 = _s85T4::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c87hC: // global
           R1 = I64[(_s85T4::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_up_s85T3_entry() //  [R1, R2]
         { info_tbl: [(c87hH,
                       label: go_up_s85T3_info
                       rep:HeapRep 2 nonptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87hH: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c87hL; else goto c87hK;
       c87hL: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c87hK: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c87hF; else goto c87hG;
       c87hF: // global
           _s85T1::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s85Ta_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s85T1::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s85T8_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c87hG: // global
           I64[Hp - 80] = sat_s85Td_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c87hN::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c87hN::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s85Te_entry() //  [R1]
         { info_tbl: [(c87hO,
                       label: sat_s85Te_info
                       rep:HeapRep 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87hO: // global
           _s85Te::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c87hP; else goto c87hQ;
       c87hQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c87hS; else goto c87hR;
       c87hS: // global
           HpAlloc = 24;
           goto c87hP;
       c87hP: // global
           R1 = _s85Te::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c87hR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s85Te::P64;
           _s85R6::I64 = I64[_s85Te::P64 + 24];
           _s85T1::I64 = _s85R6::I64 - I64[_s85Te::P64 + 16];
           I64[Hp - 16] = go_up_s85T3_info;
           I64[Hp - 8] = _s85T1::I64;
           I64[Hp] = 2 - _s85T1::I64;
           R2 = _s85R6::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s85T3_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s85T0_entry() //  [R1]
         { info_tbl: [(c87i2,
                       label: sat_s85T0_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87i2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c87i3; else goto c87ib;
       c87i3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c87ib: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s85R4::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s85R4::I64, 0)) goto c87i9; else goto c87i1;
       c87i1: // global
           if (%MO_S_Gt_W64(_s85R4::I64, 2)) goto c87i9; else goto c87ia;
       c87i9: // global
           R2 = _s85R4::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c87ia: // global
           R1 = I64[(_s85R4::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s85Ti_entry() //  [R1]
         { info_tbl: [(c87ip,
                       label: sat_s85Ti_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87ip: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c87iq; else goto c87iy;
       c87iq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c87iy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s85R4::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s85R4::I64, 0)) goto c87iw; else goto c87io;
       c87io: // global
           if (%MO_S_Gt_W64(_s85R4::I64, 2)) goto c87iw; else goto c87ix;
       c87iw: // global
           R2 = _s85R4::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c87ix: // global
           R1 = I64[(_s85R4::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.IO.Device.$fEnumSeekMode_$cenumFromThenTo_entry() //  [R2, R3,
                                                            R4]
         { info_tbl: [(c87iH,
                       label: GHC.IO.Device.$fEnumSeekMode_$cenumFromThenTo_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87iH: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c87iI; else goto c87iJ;
       c87iI: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fEnumSeekMode_$cenumFromThenTo_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c87iJ: // global
           I64[Sp - 24] = block_c87iz_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u87kp; else goto c87iA;
       u87kp: // global
           call _c87iz(R1) args: 0, res: 0, upd: 0;
       c87iA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c87iz() //  [R1]
         { info_tbl: [(c87iz,
                       label: block_c87iz_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87iz: // global
           _s85R1::P64 = P64[Sp + 8];
           _c87iG::P64 = R1 & 7;
           if (_c87iG::P64 < 3) goto u87km; else goto c87iF;
       u87km: // global
           if (_c87iG::P64 < 2) goto c87iD; else goto c87iE;
       c87iD: // global
           _s85R4::I64 = 0;
           goto s85R3;
       c87iE: // global
           _s85R4::I64 = 1;
           goto s85R3;
       c87iF: // global
           _s85R4::I64 = 2;
           goto s85R3;
       s85R3: // global
           I64[Sp] = block_c87iK_info;
           R1 = _s85R1::P64;
           I64[Sp + 8] = _s85R4::I64;
           if (R1 & 7 != 0) goto u87ko; else goto c87jV;
       u87ko: // global
           call _c87iK(R1) args: 0, res: 0, upd: 0;
       c87jV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c87iK() //  [R1]
         { info_tbl: [(c87iK,
                       label: block_c87iK_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87iK: // global
           _s85R2::P64 = P64[Sp + 16];
           _c87kj::P64 = R1 & 7;
           if (_c87kj::P64 < 3) goto u87kn; else goto c87k9;
       u87kn: // global
           if (_c87kj::P64 < 2) goto c87k1; else goto c87k5;
       c87k1: // global
           _s85R6::I64 = 0;
           goto s85R5;
       c87k5: // global
           _s85R6::I64 = 1;
           goto s85R5;
       c87k9: // global
           _s85R6::I64 = 2;
           goto s85R5;
       s85R5: // global
           I64[Sp] = block_c8762_info;
           R1 = _s85R2::P64;
           I64[Sp + 16] = _s85R6::I64;
           if (R1 & 7 != 0) goto u87kq; else goto c8763;
       u87kq: // global
           call _c8762(R1) args: 0, res: 0, upd: 0;
       c8763: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c8762() //  [R1]
         { info_tbl: [(c8762,
                       label: block_c8762_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c8762: // global
           _s85R4::I64 = I64[Sp + 8];
           _s85R6::I64 = I64[Sp + 16];
           _c87kk::P64 = R1 & 7;
           if (_c87kk::P64 < 3) goto u87kl; else goto c87jy;
       u87kl: // global
           if (_c87kk::P64 < 2) goto c87iO; else goto c87jb;
       c87iO: // global
           Hp = Hp + 80;
           _s85R7::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c87jB; else goto c87iQ;
       c87iQ: // global
           if (%MO_S_Lt_W64(_s85R6::I64,
                            _s85R4::I64)) goto c87j1; else goto c87ja;
       c87j1: // global
           if (%MO_S_Le_W64(0, _s85R6::I64)) goto c87iU; else goto c87iZ;
       c87iU: // global
           I64[Hp - 72] = sat_s85Rq_info;
           I64[Hp - 56] = _s85R4::I64;
           I64[Hp - 48] = _s85R6::I64;
           I64[Hp - 40] = sat_s85Rc_info;
           I64[Hp - 24] = _s85R4::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c87iZ: // global
           if (%MO_S_Gt_W64(0, _s85R4::I64)) goto c87jS; else goto c87iX;
       c87iX: // global
           I64[Hp - 72] = sat_s85Ru_info;
           I64[Hp - 56] = _s85R4::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c87iV::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c87iV::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c87ja: // global
           if (%MO_S_Ge_W64(0, _s85R6::I64)) goto c87j4; else goto c87j9;
       c87j4: // global
           I64[Hp - 72] = sat_s85RM_info;
           I64[Hp - 56] = _s85R4::I64;
           I64[Hp - 48] = _s85R6::I64;
           I64[Hp - 40] = sat_s85Ry_info;
           I64[Hp - 24] = _s85R4::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c87j9: // global
           if (%MO_S_Lt_W64(0, _s85R4::I64)) goto c87jS; else goto c87j7;
       c87j7: // global
           I64[Hp - 72] = sat_s85RQ_info;
           I64[Hp - 56] = _s85R4::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c87j5::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c87j5::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c87jb: // global
           Hp = Hp + 80;
           _s85R7::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c87jB; else goto c87jd;
       c87jd: // global
           if (%MO_S_Lt_W64(_s85R6::I64,
                            _s85R4::I64)) goto c87jo; else goto c87jx;
       c87jo: // global
           if (%MO_S_Le_W64(1, _s85R6::I64)) goto c87jh; else goto c87jm;
       c87jh: // global
           I64[Hp - 72] = sat_s85S9_info;
           I64[Hp - 56] = _s85R4::I64;
           I64[Hp - 48] = _s85R6::I64;
           I64[Hp - 40] = sat_s85RV_info;
           I64[Hp - 24] = _s85R4::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c87jm: // global
           if (%MO_S_Gt_W64(1, _s85R4::I64)) goto c87jS; else goto c87jk;
       c87jk: // global
           I64[Hp - 72] = sat_s85Sd_info;
           I64[Hp - 56] = _s85R4::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c87ji::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c87ji::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c87jx: // global
           if (%MO_S_Ge_W64(1, _s85R6::I64)) goto c87jr; else goto c87jw;
       c87jr: // global
           I64[Hp - 72] = sat_s85Sv_info;
           I64[Hp - 56] = _s85R4::I64;
           I64[Hp - 48] = _s85R6::I64;
           I64[Hp - 40] = sat_s85Sh_info;
           I64[Hp - 24] = _s85R4::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c87jw: // global
           if (%MO_S_Lt_W64(1, _s85R4::I64)) goto c87jS; else goto c87ju;
       c87ju: // global
           I64[Hp - 72] = sat_s85Sz_info;
           I64[Hp - 56] = _s85R4::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c87js::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c87js::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c87jy: // global
           Hp = Hp + 80;
           _s85R7::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c87jB; else goto c87jA;
       c87jB: // global
           HpAlloc = 80;
           R1 = _s85R7::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c87jA: // global
           if (%MO_S_Lt_W64(_s85R6::I64,
                            _s85R4::I64)) goto c87jL; else goto c87jU;
       c87jL: // global
           if (%MO_S_Le_W64(2, _s85R6::I64)) goto c87jE; else goto c87jJ;
       c87jE: // global
           I64[Hp - 72] = sat_s85SS_info;
           I64[Hp - 56] = _s85R4::I64;
           I64[Hp - 48] = _s85R6::I64;
           I64[Hp - 40] = sat_s85SE_info;
           I64[Hp - 24] = _s85R4::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c87jJ: // global
           if (%MO_S_Gt_W64(2, _s85R4::I64)) goto c87jS; else goto c87jH;
       c87jH: // global
           I64[Hp - 72] = sat_s85SW_info;
           I64[Hp - 56] = _s85R4::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c87jF::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c87jF::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c87jU: // global
           if (%MO_S_Ge_W64(2, _s85R6::I64)) goto c87jO; else goto c87jT;
       c87jO: // global
           I64[Hp - 72] = sat_s85Te_info;
           I64[Hp - 56] = _s85R4::I64;
           I64[Hp - 48] = _s85R6::I64;
           I64[Hp - 40] = sat_s85T0_info;
           I64[Hp - 24] = _s85R4::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c87jT: // global
           if (%MO_S_Lt_W64(2, _s85R4::I64)) goto c87jS; else goto c87jR;
       c87jS: // global
           Hp = Hp - 80;
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c87jR: // global
           I64[Hp - 72] = sat_s85Ti_info;
           I64[Hp - 56] = _s85R4::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c87jP::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c87jP::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.263152578 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_closure" {
     GHC.IO.Device.$fEnumSeekMode_closure:
         const GHC.Enum.C:Enum_con_info;
         const GHC.IO.Device.$fEnumSeekMode_$csucc_closure+1;
         const GHC.IO.Device.$fEnumSeekMode_$cpred_closure+1;
         const GHC.IO.Device.$fEnumSeekMode_$ctoEnum_closure+1;
         const GHC.IO.Device.$fEnumSeekMode_$cfromEnum_closure+1;
         const GHC.IO.Device.$fEnumSeekMode_$cenumFrom_closure+1;
         const GHC.IO.Device.$fEnumSeekMode_$cenumFromThen_closure+2;
         const GHC.IO.Device.$fEnumSeekMode_$cenumFromTo_closure+2;
         const GHC.IO.Device.$fEnumSeekMode_$cenumFromThenTo_closure+3;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.265099557 UTC

[section ""data" . GHC.IO.Device.$trModule3_closure" {
     GHC.IO.Device.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.266934993 UTC

[section ""data" . GHC.IO.Device.$trModule1_closure" {
     GHC.IO.Device.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.268687295 UTC

[section ""data" . GHC.IO.Device.$trModule_closure" {
     GHC.IO.Device.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.IO.Device.$trModule3_closure+1;
         const GHC.IO.Device.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.270600331 UTC

[section ""data" . $krep_r81ZU_closure" {
     $krep_r81ZU_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Word.$tcWord8_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.27237416 UTC

[section ""data" . $krep1_r81ZV_closure" {
     $krep1_r81ZV_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Integer.Type.$tcInteger_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.274245455 UTC

[section ""data" . $krep2_r81ZW_closure" {
     $krep2_r81ZW_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc()_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.276091739 UTC

[section ""data" . $krep3_r81ZX_closure" {
     $krep3_r81ZX_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.278487968 UTC

[section ""data" . $krep4_r81ZY_closure" {
     $krep4_r81ZY_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcBool_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.280196456 UTC

[section ""data" . $krep5_r81ZZ_closure" {
     $krep5_r81ZZ_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcConstraint_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.282080847 UTC

[section ""data" . $krep6_r8200_closure" {
     $krep6_r8200_closure:
         const :_con_info;
         const $krep3_r81ZX_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.283981736 UTC

[section ""data" . $krep7_r8201_closure" {
     $krep7_r8201_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep6_r8200_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.286115714 UTC

[section ""data" . $krep8_r8202_closure" {
     $krep8_r8202_closure:
         const :_con_info;
         const $krep1_r81ZV_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.28784584 UTC

[section ""data" . $krep9_r8203_closure" {
     $krep9_r8203_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep8_r8202_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.289662132 UTC

[section ""data" . $krep10_r8204_closure" {
     $krep10_r8204_closure:
         const :_con_info;
         const $krep2_r81ZW_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.291337054 UTC

[section ""data" . $krep11_r8205_closure" {
     $krep11_r8205_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep10_r8204_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.293234753 UTC

[section ""data" . $krep12_r8206_closure" {
     $krep12_r8206_closure:
         const :_con_info;
         const $krep4_r81ZY_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.295113697 UTC

[section ""data" . $krep13_r8207_closure" {
     $krep13_r8207_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep12_r8206_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.297494283 UTC

[section ""data" . $krep14_r8208_closure" {
     $krep14_r8208_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Base.$tcMaybe_closure;
         const $krep6_r8200_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.299222327 UTC

[section ""data" . $krep15_r8209_closure" {
     $krep15_r8209_closure:
         const :_con_info;
         const $krep14_r8208_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.30093237 UTC

[section ""data" . $krep16_r820a_closure" {
     $krep16_r820a_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep15_r8209_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.302764278 UTC

[section ""data" . $krep17_r820b_closure" {
     $krep17_r820b_closure:
         const :_con_info;
         const $krep_r81ZU_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.304563208 UTC

[section ""data" . $krep18_r820c_closure" {
     $krep18_r820c_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Ptr.$tcPtr_closure;
         const $krep17_r820b_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.30640968 UTC

[section ""data" . $krep19_r820d_closure" {
     $krep19_r820d_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r81ZX_closure+1;
         const $krep11_r8205_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.308171952 UTC

[section ""data" . $krep20_r820e_closure" {
     $krep20_r820e_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r81ZX_closure+1;
         const $krep7_r8201_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.310409089 UTC

[section ""data" . $krep21_r820f_closure" {
     $krep21_r820f_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r81ZX_closure+1;
         const $krep13_r8207_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.312240953 UTC

[section ""data" . $krep22_r820g_closure" {
     $krep22_r820g_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r81ZX_closure+1;
         const $krep16_r820a_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.314162545 UTC

[section ""data" . $krep23_r820h_closure" {
     $krep23_r820h_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_r81ZY_closure+1;
         const $krep11_r8205_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.316410502 UTC

[section ""data" . $krep24_r820i_closure" {
     $krep24_r820i_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_r81ZY_closure+1;
         const $krep21_r820f_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.318270517 UTC

[section ""data" . $krep25_r820j_closure" {
     $krep25_r820j_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r81ZV_closure+1;
         const $krep11_r8205_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.32000982 UTC

[section ""data" . $krep26_r820k_closure" {
     $krep26_r820k_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep18_r820c_closure+1;
         const $krep19_r820d_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.321934041 UTC

[section ""data" . $krep27_r820l_closure" {
     $krep27_r820l_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep18_r820c_closure+1;
         const $krep20_r820e_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.323727892 UTC

[section ""data" . $krep28_r820m_closure" {
     $krep28_r820m_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep18_r820c_closure+1;
         const $krep22_r820g_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.325565942 UTC

[section ""data" . GHC.IO.Device.$tcIODevice1_closure" {
     GHC.IO.Device.$tcIODevice1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Types.krep$*_closure;
         const $krep5_r81ZZ_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.327323811 UTC

[section ""data" . $krep29_r820n_closure" {
     $krep29_r820n_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.328994722 UTC

[section ""data" . $krep30_r820o_closure" {
     $krep30_r820o_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep28_r820m_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.330914871 UTC

[section ""data" . $krep31_r820p_closure" {
     $krep31_r820p_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep27_r820l_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.332796344 UTC

[section ""data" . $krep32_r820q_closure" {
     $krep32_r820q_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep26_r820k_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.335242543 UTC

[section ""data" . $krep33_r820r_closure" {
     $krep33_r820r_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep25_r820j_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.336902477 UTC

[section ""data" . $krep34_r820s_closure" {
     $krep34_r820s_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep24_r820i_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.338681642 UTC

[section ""data" . $krep35_r820t_closure" {
     $krep35_r820t_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep23_r820h_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.340435379 UTC

[section ""data" . $krep36_r820u_closure" {
     $krep36_r820u_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep11_r8205_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.343901689 UTC

[section ""data" . $krep37_r820v_closure" {
     $krep37_r820v_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep13_r8207_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.345736817 UTC

[section ""data" . $krep38_r820w_closure" {
     $krep38_r820w_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep9_r8203_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.347459267 UTC

[section ""data" . $krep39_r820x_closure" {
     $krep39_r820x_closure:
         const :_con_info;
         const $krep29_r820n_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.349206175 UTC

[section ""data" . $krep40_r820y_closure" {
     $krep40_r820y_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep39_r820x_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.351064843 UTC

[section ""data" . $krep41_r820z_closure" {
     $krep41_r820z_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep40_r820y_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.353432069 UTC

[section ""data" . $krep42_r820A_closure" {
     $krep42_r820A_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep41_r820z_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.355234156 UTC

[section ""cstring" . GHC.IO.Device.$tcRawIO2_bytes" {
     GHC.IO.Device.$tcRawIO2_bytes:
         I8[] [82,97,119,73,79]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.35694822 UTC

[section ""data" . GHC.IO.Device.$tcRawIO1_closure" {
     GHC.IO.Device.$tcRawIO1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tcRawIO2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.358749886 UTC

[section ""data" . GHC.IO.Device.$tcRawIO_closure" {
     GHC.IO.Device.$tcRawIO_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tcRawIO1_closure+1;
         const GHC.IO.Device.$tcIODevice1_closure+4;
         const 15458836890887680490;
         const 11407217875184880147;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.360653107 UTC

[section ""data" . $krep43_r820B_closure" {
     $krep43_r820B_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Device.$tcRawIO_closure+1;
         const $krep39_r820x_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.362587095 UTC

[section ""data" . $krep44_r820C_closure" {
     $krep44_r820C_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep31_r820p_closure+4;
         const $krep43_r820B_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.364436263 UTC

[section ""data" . $krep45_r820D_closure" {
     $krep45_r820D_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep32_r820q_closure+4;
         const $krep44_r820C_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.366245667 UTC

[section ""data" . $krep46_r820E_closure" {
     $krep46_r820E_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep30_r820o_closure+4;
         const $krep45_r820D_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.368039462 UTC

[section ""data" . GHC.IO.Device.$tc'C:RawIO1_closure" {
     GHC.IO.Device.$tc'C:RawIO1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep31_r820p_closure+4;
         const $krep46_r820E_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.369966823 UTC

[section ""cstring" . GHC.IO.Device.$tc'C:RawIO3_bytes" {
     GHC.IO.Device.$tc'C:RawIO3_bytes:
         I8[] [39,67,58,82,97,119,73,79]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.372259457 UTC

[section ""data" . GHC.IO.Device.$tc'C:RawIO2_closure" {
     GHC.IO.Device.$tc'C:RawIO2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tc'C:RawIO3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.374069137 UTC

[section ""data" . GHC.IO.Device.$tc'C:RawIO_closure" {
     GHC.IO.Device.$tc'C:RawIO_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tc'C:RawIO2_closure+1;
         const GHC.IO.Device.$tc'C:RawIO1_closure+4;
         const 6403037956050298954;
         const 14520964482680400738;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.375912801 UTC

[section ""cstring" . GHC.IO.Device.$tcIODeviceType2_bytes" {
     GHC.IO.Device.$tcIODeviceType2_bytes:
         I8[] [73,79,68,101,118,105,99,101,84,121,112,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.377754518 UTC

[section ""data" . GHC.IO.Device.$tcIODeviceType1_closure" {
     GHC.IO.Device.$tcIODeviceType1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tcIODeviceType2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.379564844 UTC

[section ""data" . GHC.IO.Device.$tcIODeviceType_closure" {
     GHC.IO.Device.$tcIODeviceType_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tcIODeviceType1_closure+1;
         const GHC.Types.krep$*_closure;
         const 4175968526489202383;
         const 17718566430225243048;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.381534038 UTC

[section ""data" . GHC.IO.Device.$tc'Directory1_closure" {
     GHC.IO.Device.$tc'Directory1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Device.$tcIODeviceType_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.383449513 UTC

[section ""cstring" . GHC.IO.Device.$tc'Directory3_bytes" {
     GHC.IO.Device.$tc'Directory3_bytes:
         I8[] [39,68,105,114,101,99,116,111,114,121]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.385219173 UTC

[section ""data" . GHC.IO.Device.$tc'Directory2_closure" {
     GHC.IO.Device.$tc'Directory2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tc'Directory3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.38716593 UTC

[section ""data" . GHC.IO.Device.$tc'Directory_closure" {
     GHC.IO.Device.$tc'Directory_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tc'Directory2_closure+1;
         const GHC.IO.Device.$tc'Directory1_closure+1;
         const 12008838926528382233;
         const 639950492613404225;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.389681892 UTC

[section ""cstring" . GHC.IO.Device.$tc'Stream2_bytes" {
     GHC.IO.Device.$tc'Stream2_bytes:
         I8[] [39,83,116,114,101,97,109]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.391395199 UTC

[section ""data" . GHC.IO.Device.$tc'Stream1_closure" {
     GHC.IO.Device.$tc'Stream1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tc'Stream2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.393121261 UTC

[section ""data" . GHC.IO.Device.$tc'Stream_closure" {
     GHC.IO.Device.$tc'Stream_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tc'Stream1_closure+1;
         const GHC.IO.Device.$tc'Directory1_closure+1;
         const 39573928359804366;
         const 741010449601335383;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.395611377 UTC

[section ""cstring" . GHC.IO.Device.$tc'RegularFile2_bytes" {
     GHC.IO.Device.$tc'RegularFile2_bytes:
         I8[] [39,82,101,103,117,108,97,114,70,105,108,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.397393139 UTC

[section ""data" . GHC.IO.Device.$tc'RegularFile1_closure" {
     GHC.IO.Device.$tc'RegularFile1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tc'RegularFile2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.399086942 UTC

[section ""data" . GHC.IO.Device.$tc'RegularFile_closure" {
     GHC.IO.Device.$tc'RegularFile_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tc'RegularFile1_closure+1;
         const GHC.IO.Device.$tc'Directory1_closure+1;
         const 2184574052715259025;
         const 14349593064521146856;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.400919462 UTC

[section ""cstring" . GHC.IO.Device.$tc'RawDevice2_bytes" {
     GHC.IO.Device.$tc'RawDevice2_bytes:
         I8[] [39,82,97,119,68,101,118,105,99,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.402642491 UTC

[section ""data" . GHC.IO.Device.$tc'RawDevice1_closure" {
     GHC.IO.Device.$tc'RawDevice1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tc'RawDevice2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.404361434 UTC

[section ""data" . GHC.IO.Device.$tc'RawDevice_closure" {
     GHC.IO.Device.$tc'RawDevice_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tc'RawDevice1_closure+1;
         const GHC.IO.Device.$tc'Directory1_closure+1;
         const 13599710032796319976;
         const 8789152980205417013;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.406392109 UTC

[section ""data" . $krep47_r820F_closure" {
     $krep47_r820F_closure:
         const :_con_info;
         const GHC.IO.Device.$tc'Directory1_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.40879319 UTC

[section ""data" . $krep48_r820G_closure" {
     $krep48_r820G_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep47_r820F_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.410557544 UTC

[section ""data" . $krep49_r820H_closure" {
     $krep49_r820H_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep48_r820G_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.412187853 UTC

[section ""cstring" . GHC.IO.Device.$tcSeekMode2_bytes" {
     GHC.IO.Device.$tcSeekMode2_bytes:
         I8[] [83,101,101,107,77,111,100,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.414006159 UTC

[section ""data" . GHC.IO.Device.$tcSeekMode1_closure" {
     GHC.IO.Device.$tcSeekMode1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tcSeekMode2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.415767458 UTC

[section ""data" . GHC.IO.Device.$tcSeekMode_closure" {
     GHC.IO.Device.$tcSeekMode_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tcSeekMode1_closure+1;
         const GHC.Types.krep$*_closure;
         const 17698211299654630015;
         const 5588778824401988676;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.417702676 UTC

[section ""data" . GHC.IO.Device.$tc'AbsoluteSeek1_closure" {
     GHC.IO.Device.$tc'AbsoluteSeek1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Device.$tcSeekMode_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.419475172 UTC

[section ""cstring" . GHC.IO.Device.$tc'AbsoluteSeek3_bytes" {
     GHC.IO.Device.$tc'AbsoluteSeek3_bytes:
         I8[] [39,65,98,115,111,108,117,116,101,83,101,101,107]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.421204776 UTC

[section ""data" . GHC.IO.Device.$tc'AbsoluteSeek2_closure" {
     GHC.IO.Device.$tc'AbsoluteSeek2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tc'AbsoluteSeek3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.423115939 UTC

[section ""data" . GHC.IO.Device.$tc'AbsoluteSeek_closure" {
     GHC.IO.Device.$tc'AbsoluteSeek_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tc'AbsoluteSeek2_closure+1;
         const GHC.IO.Device.$tc'AbsoluteSeek1_closure+1;
         const 5610789579148926753;
         const 3433733041722086784;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.425146505 UTC

[section ""cstring" . GHC.IO.Device.$tc'RelativeSeek2_bytes" {
     GHC.IO.Device.$tc'RelativeSeek2_bytes:
         I8[] [39,82,101,108,97,116,105,118,101,83,101,101,107]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.427950258 UTC

[section ""data" . GHC.IO.Device.$tc'RelativeSeek1_closure" {
     GHC.IO.Device.$tc'RelativeSeek1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tc'RelativeSeek2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.429728462 UTC

[section ""data" . GHC.IO.Device.$tc'RelativeSeek_closure" {
     GHC.IO.Device.$tc'RelativeSeek_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tc'RelativeSeek1_closure+1;
         const GHC.IO.Device.$tc'AbsoluteSeek1_closure+1;
         const 15906895381304752726;
         const 1738065871578000433;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.431473592 UTC

[section ""cstring" . GHC.IO.Device.$tc'SeekFromEnd2_bytes" {
     GHC.IO.Device.$tc'SeekFromEnd2_bytes:
         I8[] [39,83,101,101,107,70,114,111,109,69,110,100]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.433180488 UTC

[section ""data" . GHC.IO.Device.$tc'SeekFromEnd1_closure" {
     GHC.IO.Device.$tc'SeekFromEnd1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tc'SeekFromEnd2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.434987832 UTC

[section ""data" . GHC.IO.Device.$tc'SeekFromEnd_closure" {
     GHC.IO.Device.$tc'SeekFromEnd_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tc'SeekFromEnd1_closure+1;
         const GHC.IO.Device.$tc'AbsoluteSeek1_closure+1;
         const 16344961357916628519;
         const 5039033320700315004;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.436918344 UTC

[section ""data" . $krep50_r820I_closure" {
     $krep50_r820I_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.IO.Device.$tc'AbsoluteSeek1_closure+1;
         const $krep25_r820j_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.438749747 UTC

[section ""data" . $krep51_r820J_closure" {
     $krep51_r820J_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep50_r820I_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.440471987 UTC

[section ""cstring" . GHC.IO.Device.$tcIODevice3_bytes" {
     GHC.IO.Device.$tcIODevice3_bytes:
         I8[] [73,79,68,101,118,105,99,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.442407084 UTC

[section ""data" . GHC.IO.Device.$tcIODevice2_closure" {
     GHC.IO.Device.$tcIODevice2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tcIODevice3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.444843424 UTC

[section ""data" . GHC.IO.Device.$tcIODevice_closure" {
     GHC.IO.Device.$tcIODevice_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tcIODevice2_closure+1;
         const GHC.IO.Device.$tcIODevice1_closure+4;
         const 4764642859795697036;
         const 7163668738257247953;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.446736833 UTC

[section ""data" . $krep52_r820K_closure" {
     $krep52_r820K_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Device.$tcIODevice_closure+1;
         const $krep39_r820x_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.448413176 UTC

[section ""data" . $krep53_r820L_closure" {
     $krep53_r820L_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep42_r820A_closure+4;
         const $krep52_r820K_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.450154456 UTC

[section ""data" . $krep54_r820M_closure" {
     $krep54_r820M_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep41_r820z_closure+4;
         const $krep53_r820L_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.45183538 UTC

[section ""data" . $krep55_r820N_closure" {
     $krep55_r820N_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep49_r820H_closure+4;
         const $krep54_r820M_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.453672916 UTC

[section ""data" . $krep56_r820O_closure" {
     $krep56_r820O_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep35_r820t_closure+4;
         const $krep55_r820N_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.455456023 UTC

[section ""data" . $krep57_r820P_closure" {
     $krep57_r820P_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep37_r820v_closure+4;
         const $krep56_r820O_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.457178098 UTC

[section ""data" . $krep58_r820Q_closure" {
     $krep58_r820Q_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep35_r820t_closure+4;
         const $krep57_r820P_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.45907536 UTC

[section ""data" . $krep59_r820R_closure" {
     $krep59_r820R_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep33_r820r_closure+4;
         const $krep58_r820Q_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.460906503 UTC

[section ""data" . $krep60_r820S_closure" {
     $krep60_r820S_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep38_r820w_closure+4;
         const $krep59_r820R_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.463308895 UTC

[section ""data" . $krep61_r820T_closure" {
     $krep61_r820T_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep38_r820w_closure+4;
         const $krep60_r820S_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.465022017 UTC

[section ""data" . $krep62_r820U_closure" {
     $krep62_r820U_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep51_r820J_closure+4;
         const $krep61_r820T_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.466828527 UTC

[section ""data" . $krep63_r820V_closure" {
     $krep63_r820V_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep37_r820v_closure+4;
         const $krep62_r820U_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.468563002 UTC

[section ""data" . $krep64_r820W_closure" {
     $krep64_r820W_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep37_r820v_closure+4;
         const $krep63_r820V_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.470434996 UTC

[section ""data" . $krep65_r820X_closure" {
     $krep65_r820X_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep36_r820u_closure+4;
         const $krep64_r820W_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.472123172 UTC

[section ""data" . GHC.IO.Device.$tc'C:IODevice1_closure" {
     GHC.IO.Device.$tc'C:IODevice1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep34_r820s_closure+4;
         const $krep65_r820X_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.474027556 UTC

[section ""cstring" . GHC.IO.Device.$tc'C:IODevice3_bytes" {
     GHC.IO.Device.$tc'C:IODevice3_bytes:
         I8[] [39,67,58,73,79,68,101,118,105,99,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.475718848 UTC

[section ""data" . GHC.IO.Device.$tc'C:IODevice2_closure" {
     GHC.IO.Device.$tc'C:IODevice2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tc'C:IODevice3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.479068186 UTC

[section ""data" . GHC.IO.Device.$tc'C:IODevice_closure" {
     GHC.IO.Device.$tc'C:IODevice_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tc'C:IODevice2_closure+1;
         const GHC.IO.Device.$tc'C:IODevice1_closure+4;
         const 15352604720075066134;
         const 14084350618605203122;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.481042737 UTC

[section ""data" . GHC.IO.Device.AbsoluteSeek_closure" {
     GHC.IO.Device.AbsoluteSeek_closure:
         const GHC.IO.Device.AbsoluteSeek_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.483376936 UTC

[section ""data" . GHC.IO.Device.RelativeSeek_closure" {
     GHC.IO.Device.RelativeSeek_closure:
         const GHC.IO.Device.RelativeSeek_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.485060498 UTC

[section ""data" . GHC.IO.Device.SeekFromEnd_closure" {
     GHC.IO.Device.SeekFromEnd_closure:
         const GHC.IO.Device.SeekFromEnd_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.486783742 UTC

[section ""data" . GHC.IO.Device.Directory_closure" {
     GHC.IO.Device.Directory_closure:
         const GHC.IO.Device.Directory_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.488386452 UTC

[section ""data" . GHC.IO.Device.Stream_closure" {
     GHC.IO.Device.Stream_closure:
         const GHC.IO.Device.Stream_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.490119815 UTC

[section ""data" . GHC.IO.Device.RegularFile_closure" {
     GHC.IO.Device.RegularFile_closure:
         const GHC.IO.Device.RegularFile_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.491780227 UTC

[section ""data" . GHC.IO.Device.RawDevice_closure" {
     GHC.IO.Device.RawDevice_closure:
         const GHC.IO.Device.RawDevice_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.494122922 UTC

[section ""data" . GHC.IO.Device.C:IODevice_closure" {
     GHC.IO.Device.C:IODevice_closure:
         const GHC.IO.Device.C:IODevice_info;
 },
 GHC.IO.Device.C:IODevice_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87u4: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.IO.Device.C:IODevice_entry(R6,
                                               R5,
                                               R4,
                                               R3,
                                               R2,
                                               R1) args: 80, res: 0, upd: 8;
     }
 },
 GHC.IO.Device.C:IODevice_entry() //  [R2, R3, R4, R5, R6]
         { info_tbl: [(c87u9,
                       label: GHC.IO.Device.C:IODevice_info
                       rep:HeapRep static {
                             Fun {arity: 14
                                  fun_type: ArgGen [False, False, False, False, False, False, False,
                                                    False, False, False, False, False, False,
                                                    False]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87u9: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto c87ud; else goto c87uc;
       c87ud: // global
           HpAlloc = 120;
           R1 = GHC.IO.Device.C:IODevice_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 120, res: 0, upd: 8;
       c87uc: // global
           I64[Hp - 112] = GHC.IO.Device.C:IODevice_con_info;
           P64[Hp - 104] = R2;
           P64[Hp - 96] = R3;
           P64[Hp - 88] = R4;
           P64[Hp - 80] = R5;
           P64[Hp - 72] = R6;
           P64[Hp - 64] = P64[Sp];
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = P64[Sp + 16];
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = P64[Sp + 40];
           P64[Hp - 16] = P64[Sp + 48];
           P64[Hp - 8] = P64[Sp + 56];
           P64[Hp] = P64[Sp + 64];
           R1 = Hp - 111;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.499968893 UTC

[section ""data" . GHC.IO.Device.C:RawIO_closure" {
     GHC.IO.Device.C:RawIO_closure:
         const GHC.IO.Device.C:RawIO_info;
 },
 GHC.IO.Device.C:RawIO_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c87uA,
                       label: GHC.IO.Device.C:RawIO_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87uA: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c87uE; else goto c87uD;
       c87uE: // global
           HpAlloc = 40;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.C:RawIO_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c87uD: // global
           I64[Hp - 32] = GHC.IO.Device.C:RawIO_con_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.504181107 UTC

[section ""relreadonly" . GHC.IO.Device.SeekMode_closure_tbl" {
     GHC.IO.Device.SeekMode_closure_tbl:
         const GHC.IO.Device.AbsoluteSeek_closure+1;
         const GHC.IO.Device.RelativeSeek_closure+2;
         const GHC.IO.Device.SeekFromEnd_closure+3;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.505944607 UTC

[GHC.IO.Device.AbsoluteSeek_con_entry() //  [R1]
         { info_tbl: [(c87uM,
                       label: GHC.IO.Device.AbsoluteSeek_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,73,79,46,68,101,118,105,99,101,46,65,98,115,111,108,117,116,101,83,101,101,107]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87uM: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.509074855 UTC

[GHC.IO.Device.RelativeSeek_con_entry() //  [R1]
         { info_tbl: [(c87uT,
                       label: GHC.IO.Device.RelativeSeek_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,71,72,67,46,73,79,46,68,101,118,105,99,101,46,82,101,108,97,116,105,118,101,83,101,101,107]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87uT: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.512315787 UTC

[GHC.IO.Device.SeekFromEnd_con_entry() //  [R1]
         { info_tbl: [(c87v0,
                       label: GHC.IO.Device.SeekFromEnd_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 2
                                  descr:[98,97,115,101,58,71,72,67,46,73,79,46,68,101,118,105,99,101,46,83,101,101,107,70,114,111,109,69,110,100]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87v0: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.515591171 UTC

[section ""relreadonly" . GHC.IO.Device.IODeviceType_closure_tbl" {
     GHC.IO.Device.IODeviceType_closure_tbl:
         const GHC.IO.Device.Directory_closure+1;
         const GHC.IO.Device.Stream_closure+2;
         const GHC.IO.Device.RegularFile_closure+3;
         const GHC.IO.Device.RawDevice_closure+4;
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.517512475 UTC

[GHC.IO.Device.Directory_con_entry() //  [R1]
         { info_tbl: [(c87v8,
                       label: GHC.IO.Device.Directory_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,73,79,46,68,101,118,105,99,101,46,68,105,114,101,99,116,111,114,121]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87v8: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.521398089 UTC

[GHC.IO.Device.Stream_con_entry() //  [R1]
         { info_tbl: [(c87vf,
                       label: GHC.IO.Device.Stream_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,71,72,67,46,73,79,46,68,101,118,105,99,101,46,83,116,114,101,97,109]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87vf: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.524626345 UTC

[GHC.IO.Device.RegularFile_con_entry() //  [R1]
         { info_tbl: [(c87vm,
                       label: GHC.IO.Device.RegularFile_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 2
                                  descr:[98,97,115,101,58,71,72,67,46,73,79,46,68,101,118,105,99,101,46,82,101,103,117,108,97,114,70,105,108,101]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87vm: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.530944794 UTC

[GHC.IO.Device.RawDevice_con_entry() //  [R1]
         { info_tbl: [(c87vt,
                       label: GHC.IO.Device.RawDevice_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 3
                                  descr:[98,97,115,101,58,71,72,67,46,73,79,46,68,101,118,105,99,101,46,82,97,119,68,101,118,105,99,101]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87vt: // global
           R1 = R1 + 4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.534845211 UTC

[GHC.IO.Device.C:IODevice_con_entry() //  [R1]
         { info_tbl: [(c87vA,
                       label: GHC.IO.Device.C:IODevice_con_info
                       rep:HeapRep 14 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,73,79,46,68,101,118,105,99,101,46,67,58,73,79,68,101,118,105,99,101]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87vA: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.538661562 UTC

[GHC.IO.Device.C:RawIO_con_entry() //  [R1]
         { info_tbl: [(c87vH,
                       label: GHC.IO.Device.C:RawIO_con_info
                       rep:HeapRep 4 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,73,79,46,68,101,118,105,99,101,46,67,58,82,97,119,73,79]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c87vH: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:03:14.542514169 UTC

[section ""relreadonly" . S861B_srt" {
     S861B_srt:
         const GHC.IO.Device.$fReadSeekMode7_closure;
         const GHC.IO.Device.$fReadSeekMode11_closure;
         const GHC.IO.Device.$fReadSeekMode15_closure;
         const GHC.IO.Device.$w$cshowsPrec_closure;
         const GHC.IO.Device.$fShowSeekMode_$cshow_closure;
         const GHC.Read.choose2_closure;
         const GHC.IO.Device.$fReadSeekMode_sps_closure;
         const GHC.Read.list3_closure;
         const GHC.IO.Device.$fReadSeekMode2_closure;
         const GHC.IO.Device.$fReadSeekMode_$creadsPrec_closure;
         const GHC.Read.list_closure;
         const GHC.IO.Device.$fReadSeekMode1_closure;
         const GHC.IO.Device.$fReadSeekMode_$creadListPrec_closure;
         const GHC.IO.Device.$fReadSeekMode17_closure;
         const GHC.IO.Exception.unsupportedOperation_closure;
         const GHC.IO.Exception.$fxExceptionIOException_closure;
         const GHC.IO.Device.$dmdup1_closure;
         const $dmseek1_r81Zp_closure;
         const $dmtell1_r81Zq_closure;
         const $dmgetSize1_r81Zr_closure;
         const $dmsetSize1_r81Zs_closure;
         const $dmsetEcho1_r81Zt_closure;
         const $dmgetEcho1_r81Zu_closure;
         const $dmsetRaw1_r81Zv_closure;
         const $dmdup3_r81Zw_closure;
         const $dmdup4_r81Zx_closure;
         const GHC.Arr.hopelessIndexError_closure;
         const GHC.IO.Device.$fIxSeekMode_$cindex_closure;
         const GHC.Err.error_closure;
         const lvl13_r81ZL_closure;
         const GHC.IO.Device.$fEnumSeekMode_$cpred_closure;
         const GHC.IO.Device.$fEnumSeekMode4_closure;
         const GHC.IO.Device.$fEnumSeekMode_$csucc_closure;
         const GHC.IO.Device.$fEnumSeekMode5_closure;
         const lvl18_r81ZQ_closure;
         const lvl19_r81ZR_closure;
         const lvl20_r81ZS_closure;
         const GHC.IO.Device.$wlvl_closure;
         const GHC.IO.Device.$fEnumSeekMode_$ctoEnum_closure;
         const GHC.IO.Device.$w$ctoEnum_closure;
         const GHC.IO.Device.$fEnumSeekMode_$cenumFrom_closure;
         const GHC.IO.Device.$fEnumSeekMode1_closure;
         const GHC.IO.Device.$fEnumSeekMode2_closure;
         const GHC.IO.Device.$fEnumSeekMode3_closure;
         const GHC.IO.Device.$fEnumSeekMode_go2_closure;
         const GHC.IO.Device.$fEnumSeekMode_go1_closure;
         const GHC.IO.Device.$fEnumSeekMode_go_closure;
         const GHC.IO.Device.$fEnumSeekMode_$cenumFromTo_closure;
         const GHC.IO.Device.$fEnumSeekMode_$cenumFromThenTo_closure;
 }]

